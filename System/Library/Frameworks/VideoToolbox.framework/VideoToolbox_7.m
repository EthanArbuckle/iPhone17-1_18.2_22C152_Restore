uint64_t yuv422toY420(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned char *v9;
  unsigned char *v10;
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned char *v16;
  unsigned char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned char *v22;
  __int16 *v23;
  int v24;
  char *v25;
  char v26;
  int v27;
  char *v28;
  char v29;
  int v30;
  char *v31;
  char *v32;
  char v33;
  int v34;
  char *v35;
  char *v36;
  char v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  char *v42;
  unsigned char *v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;

  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  v6 = *(void *)(a3 + 24);
  v7 = *(void *)(a3 + 32);
  v8 = a1[2];
  v9 = (unsigned char *)a1[12];
  v10 = (unsigned char *)a1[22];
  v47 = a1[14];
  v46 = a1[24];
  result = a1[4];
  v12 = 3;
  do
  {
    v13 = v12;
    v14 = v8 + result;
    v15 = 1;
    v16 = v10;
    v17 = v9;
    v18 = v8;
    v19 = v4;
    do
    {
      v20 = 0;
      v21 = v15;
      v4 = v19 - 112;
      do
      {
        v22 = (unsigned char *)(v18 + v20);
        v23 = (__int16 *)(v19 + 2 * v20);
        v24 = *(__int16 *)(v3 + v20);
        v25 = (char *)(v6 + (v24 >> 4));
        if (v24 < -10240) {
          v25 = (char *)(v6 - 256);
        }
        if (v24 > 10240) {
          v25 = (char *)(v6 + 256);
        }
        v26 = *v25;
        v27 = *(__int16 *)(v5 + v20);
        v28 = (char *)(v6 + (v27 >> 4));
        if (v27 < -10240) {
          v28 = (char *)(v6 - 256);
        }
        if (v27 > 10240) {
          v28 = (char *)(v6 + 256);
        }
        v29 = *v28;
        *v17++ = v26;
        *v16++ = v29;
        v30 = *v23;
        v31 = (char *)(v7 + (v30 >> 4));
        if (v30 < -10240) {
          v31 = (char *)(v7 - 256);
        }
        if (v30 <= 10240) {
          v32 = v31;
        }
        else {
          v32 = (char *)(v7 + 256);
        }
        v33 = *v32;
        v34 = v23[1];
        v35 = (char *)(v7 + (v34 >> 4));
        if (v34 < -10240) {
          v35 = (char *)(v7 - 256);
        }
        if (v34 <= 10240) {
          v36 = v35;
        }
        else {
          v36 = (char *)(v7 + 256);
        }
        v37 = *v36;
        *v22 = v33;
        v22[1] = v37;
        v38 = v23[8];
        v39 = (char *)(v7 + (v38 >> 4));
        if (v38 < -10240) {
          v39 = (char *)(v7 - 256);
        }
        if (v38 <= 10240) {
          v40 = v39;
        }
        else {
          v40 = (char *)(v7 + 256);
        }
        v41 = v23[9];
        v42 = (char *)(v7 + 256);
        if (v41 <= 10240)
        {
          v42 = (char *)(v7 - 256);
          if (v41 >= -10240) {
            v42 = (char *)(v7 + (v41 >> 4));
          }
        }
        v43 = (unsigned char *)(v14 + v20);
        v44 = *v40;
        v45 = *v42;
        *v43 = v44;
        v43[1] = v45;
        v20 += 2;
        v4 += 4;
      }
      while (v20 != 8);
      v19 = v4 + 224;
      v15 = v21 - 1;
      v14 += v20;
      v18 += v20;
      v5 += v20;
      v3 += v20;
    }
    while (v21);
    v3 += 16;
    v5 += 16;
    v8 += 2 * result;
    v9 += v47;
    v10 += v46;
    v12 = v13 - 1;
  }
  while (v13);
  return result;
}

uint64_t yuvtoY420One(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(a3 + 32);
  v8 = (unsigned char *)a1[2];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[12];
  uint64_t v11 = a1[22];
  uint64_t v12 = a1[14];
  uint64_t result = a1[24];
  int v14 = 3;
  do
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = v14;
    v18 = v8;
    do
    {
      v19 = (__int16 *)(v3 + v16);
      int v20 = *(__int16 *)(v4 + v16 + 2)
          + *(__int16 *)(v4 + v16)
          + *(__int16 *)(v4 + v16 + 16)
          + *(__int16 *)(v4 + v16 + 18);
      v21 = (char *)(v6 + (v20 >> 6));
      if (v20 < -40960) {
        v21 = (char *)(v6 - 256);
      }
      if (v20 <= 40963) {
        v22 = v21;
      }
      else {
        v22 = (char *)(v6 + 256);
      }
      char v23 = *v22;
      int v24 = *(__int16 *)(v5 + v16 + 2)
          + *(__int16 *)(v5 + v16)
          + *(__int16 *)(v5 + v16 + 16)
          + *(__int16 *)(v5 + v16 + 18);
      v25 = (char *)(v6 + (v24 >> 6));
      if (v24 < -40960) {
        v25 = (char *)(v6 - 256);
      }
      if (v24 <= 40963) {
        v26 = v25;
      }
      else {
        v26 = (char *)(v6 + 256);
      }
      char v27 = *v26;
      *(unsigned char *)(v10 + v15) = v23;
      *(unsigned char *)(v11 + v15) = v27;
      int v28 = *v19;
      v29 = (char *)(v7 + (v28 >> 4));
      if (v28 < -10240) {
        v29 = (char *)(v7 - 256);
      }
      if (v28 <= 10240) {
        v30 = v29;
      }
      else {
        v30 = (char *)(v7 + 256);
      }
      char v31 = *v30;
      int v32 = v19[1];
      v33 = (char *)(v7 + (v32 >> 4));
      if (v32 < -10240) {
        v33 = (char *)(v7 - 256);
      }
      if (v32 <= 10240) {
        v34 = v33;
      }
      else {
        v34 = (char *)(v7 + 256);
      }
      char v35 = *v34;
      unsigned char *v18 = v31;
      v18[1] = v35;
      int v36 = v19[8];
      v37 = (unsigned char *)(v7 + (v36 >> 4));
      if (v36 < -10240) {
        v37 = (unsigned char *)(v7 - 256);
      }
      if (v36 <= 10240) {
        v38 = v37;
      }
      else {
        v38 = (unsigned char *)(v7 + 256);
      }
      int v39 = v19[9];
      v40 = (char *)(v7 + 256);
      if (v39 <= 10240)
      {
        v40 = (char *)(v7 - 256);
        if (v39 >= -10240) {
          v40 = (char *)(v7 + (v39 >> 4));
        }
      }
      v41 = &v18[v9];
      v18 += 2;
      char v42 = *v40;
      unsigned char *v41 = *v38;
      v41[1] = v42;
      v16 += 4;
      ++v15;
    }
    while (v16 != 16);
    v3 += v16 + 16;
    v4 += v16 + 16;
    v5 += v16 + 16;
    v8 += 2 * v9;
    v10 += result;
    v11 += v12;
    int v14 = v17 - 1;
  }
  while (v17);
  return result;
}

double yto420vOne(void *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a3 + 32);
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[4];
  v8 = (void *)a1[12];
  uint64_t v9 = a1[14];
  do
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = (__int16 *)(v4 + 2 * v11);
      int v13 = *v12;
      int v14 = (unsigned char *)(v5 + (v13 >> 4));
      if (v13 < -10240) {
        int v14 = (unsigned char *)(v5 - 256);
      }
      if (v13 <= 10240) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = (unsigned char *)(v5 + 256);
      }
      int v16 = v12[1];
      int v17 = (char *)(v5 + 256);
      if (v16 <= 10240)
      {
        int v17 = (char *)(v5 - 256);
        if (v16 >= -10240) {
          int v17 = (char *)(v5 + (v16 >> 4));
        }
      }
      v18 = (unsigned char *)(v6 + v11);
      char v19 = *v17;
      unsigned char *v18 = *v15;
      v18[1] = v19;
      v11 += 2;
      v10 -= 4;
    }
    while (v11 != 8);
    v6 += v7;
    ++v3;
    v4 -= v10;
  }
  while (v3 != 8);
  double result = -2.93744652e-306;
  void *v8 = 0x8080808080808080;
  *(void *)((char *)v8 + v9) = 0x8080808080808080;
  v21 = (void *)((char *)v8 + v9 + v9);
  void *v21 = 0x8080808080808080;
  *(void *)((char *)v21 + v9) = 0x8080808080808080;
  return result;
}

uint64_t yuv411to420v(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[12];
  uint64_t v10 = 2 * v8;
  uint64_t v11 = v7 + v8;
  uint64_t result = a1[14];
  int v13 = 7;
  uint64_t v14 = v3;
  do
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = v13;
    uint64_t v18 = v3 + 32;
    do
    {
      char v19 = (unsigned char *)(v9 + v16);
      int v20 = (__int16 *)(v14 + 2 * v16);
      v21 = (__int16 *)(v18 + 2 * v16);
      int v22 = *(__int16 *)(v4 + v16);
      int v23 = *(__int16 *)(v4 + v16 + 16);
      int v24 = (char *)(v5 + (v22 >> 4));
      if (v22 < -10240) {
        int v24 = (char *)(v5 - 256);
      }
      if (v22 <= 10240) {
        v25 = v24;
      }
      else {
        v25 = (char *)(v5 + 256);
      }
      char v26 = *v25;
      char v27 = (char *)(v5 + (v23 >> 4));
      if (v23 < -10240) {
        char v27 = (char *)(v5 - 256);
      }
      if (v23 <= 10240) {
        int v28 = v27;
      }
      else {
        int v28 = (char *)(v5 + 256);
      }
      char v29 = *v28;
      unsigned char *v19 = v26;
      v19[1] = v29;
      int v30 = *v20;
      char v31 = (char *)(v6 + (v30 >> 4));
      if (v30 < -10240) {
        char v31 = (char *)(v6 - 256);
      }
      if (v30 <= 10240) {
        int v32 = v31;
      }
      else {
        int v32 = (char *)(v6 + 256);
      }
      char v33 = *v32;
      int v34 = v20[1];
      char v35 = (char *)(v6 + (v34 >> 4));
      if (v34 < -10240) {
        char v35 = (char *)(v6 - 256);
      }
      if (v34 <= 10240) {
        int v36 = v35;
      }
      else {
        int v36 = (char *)(v6 + 256);
      }
      char v37 = *v36;
      v38 = (unsigned char *)(v7 + v16);
      unsigned char *v38 = v33;
      v38[1] = v37;
      int v39 = *v21;
      v40 = (unsigned char *)(v6 + (v39 >> 4));
      if (v39 < -10240) {
        v40 = (unsigned char *)(v6 - 256);
      }
      if (v39 <= 10240) {
        v41 = v40;
      }
      else {
        v41 = (unsigned char *)(v6 + 256);
      }
      int v42 = v21[1];
      v43 = (char *)(v6 + 256);
      if (v42 <= 10240)
      {
        v43 = (char *)(v6 - 256);
        if (v42 >= -10240) {
          v43 = (char *)(v6 + (v42 >> 4));
        }
      }
      char v44 = *v43;
      v45 = (unsigned char *)(v11 + v16);
      unsigned char *v45 = *v41;
      v45[1] = v44;
      v16 += 2;
      v15 -= 4;
    }
    while (v16 != 16);
    v4 += v16 + 16;
    uint64_t v14 = v14 - v15 + 32;
    v7 += v10;
    v9 += result;
    int v13 = v17 - 1;
    v11 += v10;
    uint64_t v3 = v18 - v15;
  }
  while (v17);
  return result;
}

uint64_t yuv422to420v(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(a3 + 32);
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[12];
  uint64_t result = a1[14];
  int v12 = 3;
  do
  {
    int v13 = v12;
    uint64_t v14 = v8 + v9;
    int v15 = 1;
    uint64_t v16 = v10;
    uint64_t v17 = v8;
    uint64_t v18 = v4;
    do
    {
      uint64_t v19 = 0;
      int v20 = v15;
      uint64_t v4 = v18 - 112;
      do
      {
        v21 = (unsigned char *)(v16 + v19);
        int v22 = (unsigned char *)(v17 + v19);
        int v23 = (__int16 *)(v18 + 2 * v19);
        int v24 = *(__int16 *)(v3 + v19);
        v25 = (char *)(v6 + (v24 >> 4));
        if (v24 < -10240) {
          v25 = (char *)(v6 - 256);
        }
        if (v24 <= 10240) {
          char v26 = v25;
        }
        else {
          char v26 = (char *)(v6 + 256);
        }
        char v27 = *v26;
        int v28 = *(__int16 *)(v5 + v19);
        char v29 = (char *)(v6 + (v28 >> 4));
        if (v28 < -10240) {
          char v29 = (char *)(v6 - 256);
        }
        if (v28 <= 10240) {
          int v30 = v29;
        }
        else {
          int v30 = (char *)(v6 + 256);
        }
        char v31 = *v30;
        unsigned char *v21 = v27;
        v21[1] = v31;
        int v32 = *v23;
        char v33 = (char *)(v7 + (v32 >> 4));
        if (v32 < -10240) {
          char v33 = (char *)(v7 - 256);
        }
        if (v32 <= 10240) {
          int v34 = v33;
        }
        else {
          int v34 = (char *)(v7 + 256);
        }
        char v35 = *v34;
        int v36 = v23[1];
        char v37 = (char *)(v7 + (v36 >> 4));
        if (v36 < -10240) {
          char v37 = (char *)(v7 - 256);
        }
        if (v36 <= 10240) {
          v38 = v37;
        }
        else {
          v38 = (char *)(v7 + 256);
        }
        char v39 = *v38;
        unsigned char *v22 = v35;
        v22[1] = v39;
        int v40 = v23[8];
        v41 = (unsigned char *)(v7 + (v40 >> 4));
        if (v40 < -10240) {
          v41 = (unsigned char *)(v7 - 256);
        }
        if (v40 <= 10240) {
          int v42 = v41;
        }
        else {
          int v42 = (unsigned char *)(v7 + 256);
        }
        int v43 = v23[9];
        char v44 = (char *)(v7 + 256);
        if (v43 <= 10240)
        {
          char v44 = (char *)(v7 - 256);
          if (v43 >= -10240) {
            char v44 = (char *)(v7 + (v43 >> 4));
          }
        }
        v45 = (unsigned char *)(v14 + v19);
        char v46 = *v44;
        unsigned char *v45 = *v42;
        v45[1] = v46;
        v19 += 2;
        v4 += 4;
      }
      while (v19 != 8);
      uint64_t v18 = v4 + 224;
      int v15 = v20 - 1;
      v16 += v19;
      v14 += v19;
      v17 += v19;
      v5 += v19;
      v3 += v19;
    }
    while (v20);
    v3 += 16;
    v5 += 16;
    v8 += 2 * v9;
    v10 += result;
    int v12 = v13 - 1;
  }
  while (v13);
  return result;
}

uint64_t yuvto420vOne(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(a3 + 32);
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[12];
  uint64_t v11 = 2 * v9;
  uint64_t v12 = v8 + v9;
  uint64_t result = a1[14];
  int v14 = 3;
  do
  {
    uint64_t v15 = 0;
    int v16 = v14;
    uint64_t v17 = -16;
    do
    {
      uint64_t v18 = (unsigned char *)(v10 + v15);
      uint64_t v19 = (__int16 *)(v3 + 2 * v15);
      int v20 = *(__int16 *)(v4 + 2 * v15 + 2)
          + *(__int16 *)(v4 + 2 * v15)
          + *(__int16 *)(v4 + 2 * v15 + 16)
          + *(__int16 *)(v4 + 2 * v15 + 18);
      v21 = (char *)(v6 + (v20 >> 6));
      if (v20 < -40960) {
        v21 = (char *)(v6 - 256);
      }
      if (v20 <= 40963) {
        int v22 = v21;
      }
      else {
        int v22 = (char *)(v6 + 256);
      }
      char v23 = *v22;
      int v24 = *(__int16 *)(v5 + 2 * v15 + 2)
          + *(__int16 *)(v5 + 2 * v15)
          + *(__int16 *)(v5 + 2 * v15 + 16)
          + *(__int16 *)(v5 + 2 * v15 + 18);
      v25 = (char *)(v6 + (v24 >> 6));
      if (v24 < -40960) {
        v25 = (char *)(v6 - 256);
      }
      if (v24 <= 40963) {
        char v26 = v25;
      }
      else {
        char v26 = (char *)(v6 + 256);
      }
      char v27 = *v26;
      unsigned char *v18 = v23;
      v18[1] = v27;
      int v28 = *v19;
      char v29 = (char *)(v7 + (v28 >> 4));
      if (v28 < -10240) {
        char v29 = (char *)(v7 - 256);
      }
      if (v28 <= 10240) {
        int v30 = v29;
      }
      else {
        int v30 = (char *)(v7 + 256);
      }
      char v31 = *v30;
      int v32 = v19[1];
      char v33 = (char *)(v7 + (v32 >> 4));
      if (v32 < -10240) {
        char v33 = (char *)(v7 - 256);
      }
      if (v32 <= 10240) {
        int v34 = v33;
      }
      else {
        int v34 = (char *)(v7 + 256);
      }
      char v35 = *v34;
      int v36 = (unsigned char *)(v8 + v15);
      *int v36 = v31;
      v36[1] = v35;
      int v37 = v19[8];
      v38 = (unsigned char *)(v7 + (v37 >> 4));
      if (v37 < -10240) {
        v38 = (unsigned char *)(v7 - 256);
      }
      if (v37 <= 10240) {
        char v39 = v38;
      }
      else {
        char v39 = (unsigned char *)(v7 + 256);
      }
      int v40 = v19[9];
      v41 = (char *)(v7 + 256);
      if (v40 <= 10240)
      {
        v41 = (char *)(v7 - 256);
        if (v40 >= -10240) {
          v41 = (char *)(v7 + (v40 >> 4));
        }
      }
      char v42 = *v41;
      int v43 = (unsigned char *)(v12 + v15);
      unsigned char *v43 = *v39;
      v43[1] = v42;
      v15 += 2;
      v17 -= 4;
    }
    while (v15 != 8);
    v3 -= v17;
    v4 -= v17;
    v8 += v11;
    v5 -= v17;
    v10 += result;
    int v14 = v16 - 1;
    v12 += v11;
  }
  while (v16);
  return result;
}

uint64_t UpsampleThenContinue(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = 0;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  int v19 = *(__int16 *)(a3 + 58);
  int v21 = v19 >> 4;
  uint64_t v6 = (uint64_t *)(result + 16);
  do
  {
    uint64_t v7 = *v6;
    v6 += 10;
    v23[v5++] = v7;
  }
  while (v5 != 3);
  unsigned int v18 = v19 & 0xF;
  if ((v19 & 0xF) != 0)
  {
    int v8 = 0;
    uint64_t v9 = a3 + 62;
    do
    {
      int v22 = v8;
      if (v19 >= 16)
      {
        LOWORD(v10) = 0;
        do
        {
          if (*(__int16 *)(a3 + 56) >= 1)
          {
            uint64_t v11 = 0;
            uint64_t v12 = &v26;
            int v13 = a2;
            do
            {
              *((void *)v24 + v11) = FilterBlock((__int16)(*(char *)(v9 + v11) | (unsigned __int16)(*(_WORD *)(a3 + 58) << 8)), v12, v13, (__int16)v10, (__int16)v22, v21 - 1, v18 - 1);
              v12 += 128;
              ++v11;
              ++v13;
            }
            while (v11 < *(__int16 *)(a3 + 56));
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(a3 + 48))(v4, v24, a3);
          for (uint64_t i = 0; i != 240; i += 80)
            *(void *)(v4 + i + 16) += *(void *)(v4 + i + 56);
          int v10 = (__int16)(v10 + 1);
        }
        while (v10 < v21);
      }
      for (uint64_t j = 0; j != 240; j += 80)
        *(void *)(v4 + j + 16) += *(void *)(v4 + j + 64) - *(void *)(v4 + j + 56) * v21;
      int v8 = v22 + 1;
    }
    while (v18 > (unsigned __int16)(v22 + 1));
  }
  uint64_t v16 = 0;
  uint64_t v17 = (void *)(v4 + 16);
  do
  {
    *uint64_t v17 = v23[v16];
    v17 += 10;
    ++v16;
  }
  while (v16 != 3);
  return result;
}

uint64_t VTParavirtualizedJPEGSessionGetTypeID()
{
  return sVTParavirtualizedJPEGSessionTypeID;
}

uint64_t RegisterVTParavirtualizedJPEGSession()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sVTParavirtualizedJPEGSessionTypeID = result;
  return result;
}

uint64_t VTParavirtualizedJPEGSessionCreate(uint64_t a1, uint64_t *a2)
{
  MEMORY[0x199705810](&VTParavirtualizedJPEGSessionGetTypeID_onceToken, RegisterVTParavirtualizedJPEGSession);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294954392;
  }
  uint64_t v4 = Instance;
  CFUUIDRef v5 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  *(CFUUIDBytes *)(v4 + 16) = CFUUIDGetUUIDBytes(v5);
  uint64_t v6 = VTParavirtualizationGuestInstallHandlerForUUID((CFUUIDBytes *)(v4 + 16), &__block_literal_global_8, 0);
  if (v6)
  {
    uint64_t v8 = v6;
  }
  else
  {
    CFTypeRef v14 = 0;
    CFTypeRef cf = 0;
    CFTypeRef v12 = 0;
    CFTypeRef v13 = 0;
    uint64_t SInt32 = VTParavirtualizationCreateMessageAndByteStream(1784897904, 1, v4 + 16, 0, (CMBlockBufferRef *)&v14, &v13);
    if (SInt32
      || (long long v10 = kVTParavirtualizationDefaultReplyTimeout,
          uint64_t v11 = 0,
          uint64_t SInt32 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)v14, (uint64_t)&v10, &cf), SInt32)|| (LODWORD(v10) = 0, uint64_t SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cf, 744845938, &v10), SInt32))
    {
      uint64_t v8 = SInt32;
    }
    else
    {
      uint64_t v8 = v10;
      if (!v10)
      {
        uint64_t v8 = VTParavirtualizationMessageCopyCFDictionary((OpaqueCMBlockBuffer *)cf, 745169761, &v12);
        if (!v8)
        {
          *(void *)(v4 + 32) = v12;
          CFTypeRef v12 = 0;
        }
      }
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (v13) {
      CFRelease(v13);
    }
    if (v12) {
      CFRelease(v12);
    }
    if (a2 && !v8)
    {
      *a2 = v4;
      if (!v5) {
        return v8;
      }
      goto LABEL_25;
    }
  }
  CFRelease((CFTypeRef)v4);
  if (v5) {
LABEL_25:
  }
    CFRelease(v5);
  return v8;
}

uint64_t __VTParavirtualizedJPEGSessionCreate_block_invoke()
{
  return FigSignalErrorAt();
}

uint64_t VTParavirtualizedJPEGSessionCopyCapabilities(CFDictionaryRef *a1, CFDictionaryRef *a2)
{
  if (!a1) {
    return 4294954394;
  }
  if (!a2) {
    return 0;
  }
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFDictionaryRef Copy = CFDictionaryCreateCopy(v4, a1[4]);
  uint64_t result = 0;
  *a2 = Copy;
  return result;
}

uint64_t VTParavirtualizedJPEGSessionEncodeImage(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef cf, _DWORD *a5)
{
  v22[2] = *MEMORY[0x1E4F143B8];
  CFTypeRef v20 = 0;
  CFTypeRef cfa = 0;
  CFTypeRef v19 = 0;
  uint64_t v5 = 4294954394;
  if (a1 && a2 && a3 && cf)
  {
    CFTypeID v11 = CFGetTypeID(cf);
    if (v11 == CFDictionaryGetTypeID())
    {
      uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1785032291, 1, a1 + 16, 0, (CMBlockBufferRef *)&v20, &v19);
      if (appended) {
        goto LABEL_21;
      }
      uint64_t appended = VTParavirtualizationMessageAppendCFDictionary(v19, 745172847, cf);
      if (appended
        || (v22[0] = a2,
            v22[1] = a3,
            long long v17 = kVTParavirtualizationCodecOperationReplyTimeout,
            uint64_t v18 = 0,
            appended = VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAndCopyReplySync((OpaqueCMBlockBuffer *)v20, (uint64_t)v22, 2, &v17, &cfa), appended)|| (unsigned int v16 = 0, appended = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cfa, 744845938, &v16), appended))
      {
LABEL_21:
        uint64_t v5 = appended;
      }
      else
      {
        uint64_t v5 = v16;
        if (!v16)
        {
          int v15 = 0;
          uint64_t UInt32 = VTParavirtualizationMessageGetUInt32((OpaqueCMBlockBuffer *)cfa, 745170291, &v15);
          uint64_t v5 = UInt32;
          if (a5)
          {
            if (!UInt32) {
              *a5 = v15;
            }
          }
        }
      }
    }
    else
    {
      uint64_t v5 = 4294954394;
    }
  }
  if (cfa) {
    CFRelease(cfa);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v19) {
    CFRelease(v19);
  }
  return v5;
}

uint64_t VTParavirtualizedJPEGSessionDecodeImage(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef cf)
{
  v20[2] = *MEMORY[0x1E4F143B8];
  CFTypeRef v18 = 0;
  CFTypeRef cfa = 0;
  CFTypeRef v17 = 0;
  uint64_t v4 = 4294954394;
  if (a1 && a2 && a3 && cf)
  {
    CFTypeID v9 = CFGetTypeID(cf);
    if (v9 == CFDictionaryGetTypeID())
    {
      uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1784964451, 1, a1 + 16, 0, (CMBlockBufferRef *)&v18, &v17);
      if (appended
        || (uint64_t appended = VTParavirtualizationMessageAppendCFDictionary(v17, 745172847, cf), appended))
      {
        uint64_t v4 = appended;
      }
      else
      {
        v20[0] = a2;
        v20[1] = a3;
        long long v15 = kVTParavirtualizationDefaultReplyTimeout;
        uint64_t v16 = 0;
        uint64_t v4 = VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAndCopyReplySync((OpaqueCMBlockBuffer *)v18, (uint64_t)v20, 2, &v15, &cfa);
        CFTypeRef v11 = cfa;
        if (!v4)
        {
          unsigned int v14 = 0;
          unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cfa, 744845938, &v14);
          if (SInt32) {
            uint64_t v4 = SInt32;
          }
          else {
            uint64_t v4 = v14;
          }
          CFTypeRef v11 = cfa;
        }
        if (v11) {
          CFRelease(v11);
        }
      }
    }
    else
    {
      uint64_t v4 = 4294954394;
    }
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v4;
}

void *PVJPEGSessionClass_Init(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

uint64_t PVJPEGSessionClass_Finalize(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    v2 = *(const void **)(result + 32);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(v1 + 32) = 0;
    }
    return VTParavirtualizationGuestRemoveHandlerForUUID((CFUUIDBytes *)(v1 + 16));
  }
  return result;
}

CFTypeRef PVJPEGSessionClass_CopyFormattingDesc()
{
  return CFRetain(@"[VTParavirtualizedJPEGSession]");
}

__CFString *PVJPEGSessionClass_CopyDebugDescription(unsigned __int8 *a1)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<VTParavirtualizedJPEGSession %p UUID %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x>", a1, a1[16], a1[17], a1[18], a1[19], a1[20], a1[21], a1[22], a1[23], a1[24], a1[25], a1[26], a1[27], a1[28], a1[29], a1[30],
    a1[31]);
  return Mutable;
}

uint64_t JPEGVideoDecoder_CreateInstance(uint64_t a1, uint64_t a2, void *a3)
{
  VTVideoDecoderGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  *a3 = 0;
  return v4;
}

uint64_t JPEGVideoDecoder_Invalidate()
{
  DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage) {
    unsigned char *DerivedStorage = 1;
  }
  return 0;
}

uint64_t JPEGVideoDecoder_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  DisposeDecodeTable(DerivedStorage + 8);
  DisposeDecodeTable(DerivedStorage + 32);
  DisposeDecodeTable(DerivedStorage + 56);
  DisposeDecodeTable(DerivedStorage + 80);
  DisposeDecodeTable(DerivedStorage + 3944);
  DisposeDecodeTable(DerivedStorage + 3968);
  DisposeDecodeTable(DerivedStorage + 3992);
  DisposeDecodeTable(DerivedStorage + 4016);
  for (uint64_t i = 0; i != 32; i += 8)
  {
    v2 = *(void **)(DerivedStorage + 4040 + i);
    if (v2) {
      free(v2);
    }
  }
  for (uint64_t j = 0; j != 32; j += 8)
  {
    uint64_t v4 = *(void **)(DerivedStorage + 4072 + j);
    if (v4) {
      free(v4);
    }
  }
  *(void *)(DerivedStorage + 6000) = 0;
  uint64_t result = FigFormatDescriptionRelease();
  *(void *)(DerivedStorage + 6008) = 0;
  return result;
}

__CFString *JPEGVideoDecoder_CopyDebugDescription(uint64_t a1)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<JPEGVideoDecoder %p>", a1);
  return Mutable;
}

uint64_t JPEGVideoDecoder_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"ReducedFrameDelivery"))
  {
    CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, (const void *)(DerivedStorage + 6016));
    *a4 = v7;
    if (!v7) {
      goto LABEL_6;
    }
    return 0;
  }
  if (!CFEqual(a2, @"SuggestedQualityOfServiceTiers"))
  {
    if (!CFEqual(a2, @"ContentHasInterframeDependencies")) {
      goto LABEL_6;
    }
    uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFC8];
    goto LABEL_11;
  }
  MEMORY[0x199705810](&sCreateSuggestedQualityOfServiceTiersOnce, jpeg_createSuggestedQualityOfServiceTiers);
  uint64_t v8 = (const void *)sJPEGVideoDecoderSuggestedQualityOfServiceTiers;
  if (sJPEGVideoDecoderSuggestedQualityOfServiceTiers)
  {
LABEL_11:
    *a4 = CFRetain(v8);
    return 0;
  }
LABEL_6:

  return FigSignalErrorAt();
}

uint64_t JPEGVideoDecoder_SetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"ReducedFrameDelivery"))
  {
    if (a3)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        double valuePtr = 1.0;
        CFNumberGetValue(a3, kCFNumberDoubleType, &valuePtr);
        if (valuePtr < 0.0 || valuePtr > 1.0) {
          return FigSignalErrorAt();
        }
        uint64_t result = 0;
        *(double *)(DerivedStorage + 6016) = valuePtr;
        return result;
      }
    }
  }
  else
  {
    CFEqual(a2, @"SuggestedQualityOfServiceTiers");
  }

  return FigSignalErrorAt();
}

void jpeg_createSuggestedQualityOfServiceTiers()
{
  v2[5] = *(const void **)MEMORY[0x1E4F143B8];
  v2[0] = jpeg_createQualityOfServiceTier(1.0);
  v2[1] = jpeg_createQualityOfServiceTier(0.5);
  v2[2] = jpeg_createQualityOfServiceTier(0.333333333);
  v2[3] = jpeg_createQualityOfServiceTier(0.2);
  v2[4] = jpeg_createQualityOfServiceTier(0.1);
  sJPEGVideoDecoderSuggestedQualityOfServiceTiers = (uint64_t)CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, 5, MEMORY[0x1E4F1D510]);
  if (!sJPEGVideoDecoderSuggestedQualityOfServiceTiers) {
    FigSignalErrorAt();
  }
  for (uint64_t i = 0; i != 5; ++i)
  {
    uint64_t v1 = v2[i];
    if (v1) {
      CFRelease(v1);
    }
  }
}

CFDictionaryRef jpeg_createQualityOfServiceTier(double a1)
{
  double valuePtr = a1;
  keys = @"ReducedFrameDelivery";
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
  if (!values
    || (CFDictionaryRef v2 = CFDictionaryCreate(v1, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0)
  {
    FigSignalErrorAt();
    CFDictionaryRef v2 = 0;
  }
  if (values) {
    CFRelease(values);
  }
  return v2;
}

uint64_t JPEGVideoDecoder_StartSession(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v17 = xmmword_193E7FDC8;
  uint64_t v18 = 0x3432307679343230;
  *(void *)(DerivedStorage + 6000) = a2;
  FigFormatDescriptionRelease();
  uint64_t v4 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
  *(void *)(DerivedStorage + 6008) = v4;
  CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(v4);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294954392;
  }
  CFMutableDictionaryRef v7 = Mutable;
  CFMutableArrayRef v8 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (!v8)
  {
    uint64_t v16 = v7;
LABEL_13:
    CFRelease(v16);
    return 4294954392;
  }
  CFTypeID v9 = v8;
  for (uint64_t i = 0; i != 24; i += 4)
  {
    CFNumberRef v11 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v17 + i);
    if (!v11)
    {
      CFRelease(v7);
      uint64_t v16 = v9;
      goto LABEL_13;
    }
    CFNumberRef v12 = v11;
    CFArrayAppendValue(v9, v11);
    CFRelease(v12);
  }
  CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F24D70], v9);
  CFRelease(v9);
  addNumberToDictionary(v7, (const void *)*MEMORY[0x1E4F24E10], Dimensions.width);
  addNumberToDictionary(v7, (const void *)*MEMORY[0x1E4F24D08], Dimensions.height);
  int v13 = -Dimensions.width;
  int v14 = -Dimensions.height & 0xF;
  if ((v13 & 0xF) != 0) {
    addNumberToDictionary(v7, (const void *)*MEMORY[0x1E4F24CE8], v13 & 0xF);
  }
  if (v14) {
    addNumberToDictionary(v7, (const void *)*MEMORY[0x1E4F24CD0], v14);
  }
  VTDecoderSessionSetPixelBufferAttributes(*(uint64_t **)(DerivedStorage + 6000), v7);
  CFRelease(v7);
  return 0;
}

uint64_t JPEGVideoDecoder_DecodeFrame(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3, uint64_t a4, _DWORD *a5)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  DataBuffer = CMSampleBufferGetDataBuffer(a3);
  size_t DataLength = CMBlockBufferGetDataLength(DataBuffer);
  dataPointerOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  CVPixelBufferRef pixelBufferOut = 0;
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a3, 0);
  if (SampleAttachmentsArray
    && (CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0)) != 0
    && (Value = CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F1B8])) != 0
    && (int v14 = Value, TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(v14))
    && CFBooleanGetValue((CFBooleanRef)v14)
    || (double v16 = *(double *)(DerivedStorage + 6016) + *(double *)(DerivedStorage + 6024),
        *(double *)(DerivedStorage + 6024) = v16,
        v16 < 1.0))
  {
    uint64_t v17 = 0;
    *a5 |= 2u;
    goto LABEL_28;
  }
  double v18 = v16 + -1.0;
  if (v18 >= 1.0) {
    double v18 = 1.0;
  }
  *(double *)(DerivedStorage + 6024) = v18;
  CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(DerivedStorage + 6008));
  if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
  {
    CFTypeRef v20 = (OpaqueCMBlockBuffer *)CFRetain(DataBuffer);
    CMBlockBufferRef blockBufferOut = v20;
  }
  else
  {
    uint64_t v17 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], DataBuffer, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, DataLength, 0, &blockBufferOut);
    if (v17) {
      goto LABEL_27;
    }
    CFTypeRef v20 = blockBufferOut;
  }
  CMBlockBufferGetDataPointer(v20, 0, 0, 0, &dataPointerOut);
  PixelBufferPool = (__CVPixelBufferPool *)VTDecoderSessionGetPixelBufferPool(*(uint64_t **)(DerivedStorage + 6000));
  uint64_t v22 = CVPixelBufferPoolCreatePixelBuffer(0, PixelBufferPool, &pixelBufferOut);
  if (v22)
  {
    uint64_t v17 = v22;
    FigSignalErrorAt();
LABEL_27:
    FigSignalErrorAt();
    goto LABEL_28;
  }
  VTDecoderSessionTrace(*(void *)(DerivedStorage + 6000));
  uint64_t v17 = CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  if (v17) {
    goto LABEL_27;
  }
  uint64_t v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  if (*(_DWORD *)(DerivedStorage + 4108) == 1835692130) {
    int v23 = -1;
  }
  else {
    int v23 = 255;
  }
  DWORD1(v33) = v23;
  int v24 = dataPointerOut;
  size_t v25 = CMBlockBufferGetDataLength(blockBufferOut);
  jpeg_setupreadbuffer((uint64_t)&v32, (uint64_t)v24, v25);
  int32_t height = Dimensions.height;
  int32_t width = Dimensions.width;
  reset_DC_pred(DerivedStorage + 8);
  uint64_t v17 = jpeg_predecompress(DerivedStorage + 8, (uint64_t)&v32, &width, &height, 0, 1);
  if (v17
    || ((uint64_t v26 = DerivedStorage + 8, !*(unsigned char *)(DerivedStorage + 4136))
      ? (uint64_t v27 = jpeg_decompress(v26, (uint64_t)&v32, pixelBufferOut, Dimensions.width, Dimensions.height, 0))
      : (uint64_t v27 = jpeg_decompressProgressive(v26, (uint64_t)&v32, pixelBufferOut, Dimensions.width, Dimensions.height)),
        uint64_t v17 = v27,
        v27))
  {
    FigSignalErrorAt();
  }
  CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  VTDecoderSessionTrace(*(void *)(DerivedStorage + 6000));
  if (v17) {
    goto LABEL_27;
  }
LABEL_28:
  if (pixelBufferOut
    && (CVPixelBufferGetPixelFormatType(pixelBufferOut) == 1111970369
     || CVPixelBufferGetPixelFormatType(pixelBufferOut) == 32))
  {
    CVBufferSetAttachment(pixelBufferOut, (CFStringRef)*MEMORY[0x1E4F249D0], (CFTypeRef)*MEMORY[0x1E4F1CFD0], kCVAttachmentMode_ShouldPropagate);
  }
  VTDecoderSessionEmitDecodedFrame(*(uint64_t **)(DerivedStorage + 6000), a2, v17, *a5, pixelBufferOut);
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  CVPixelBufferRelease(pixelBufferOut);
  return v17;
}

uint64_t JPEGVideoDecoder_CopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  MEMORY[0x199705810](&sCreateSupportedPropertyDictionaryOnce_1, jpeg_createSupportedPropertyDictionary);
  if (a2 && sJPEGVideoDecoderSupportedPropertyDictionary)
  {
    *a2 = CFRetain((CFTypeRef)sJPEGVideoDecoderSupportedPropertyDictionary);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void addNumberToDictionary(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionaryAddValue(a1, a2, v5);
    CFRelease(v6);
  }
}

void jpeg_createSupportedPropertyDictionary()
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = 0;
  uint64_t v16 = 0;
  int valuePtr = 0;
  int v10 = 1;
  keys = @"PropertyType";
  double v18 = @"ReadWriteStatus";
  values = @"Number";
  int v13 = @"ReadWrite";
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  if (!v1)
  {
    FigSignalErrorAt();
    return;
  }
  CFNumberRef v2 = v1;
  uint64_t v19 = @"SupportedValueMinimum";
  CFNumberRef v14 = v1;
  CFNumberRef v3 = CFNumberCreate(v0, kCFNumberIntType, &v10);
  if (!v3)
  {
    FigSignalErrorAt();
    CFNumberRef v9 = v2;
LABEL_19:
    CFRelease(v9);
    return;
  }
  CFNumberRef v4 = v3;
  CFTypeRef v20 = @"SupportedValueMaximum";
  CFNumberRef v15 = v3;
  CFDictionaryRef v5 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v5)
  {
    CFDictionaryRef v8 = 0;
    CFDictionaryRef v6 = 0;
LABEL_12:
    FigSignalErrorAt();
    goto LABEL_13;
  }
  CFDictionaryRef v6 = CFDictionaryCreate(v0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v6)
  {
    CFDictionaryRef v8 = 0;
    goto LABEL_12;
  }
  keys = @"PropertyType";
  double v18 = @"ReadWriteStatus";
  values = @"Boolean";
  int v13 = @"ReadOnly";
  CFDictionaryRef v7 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v8 = v7;
  if (!v7) {
    goto LABEL_12;
  }
  keys = @"ReducedFrameDelivery";
  double v18 = @"SuggestedQualityOfServiceTiers";
  values = v5;
  int v13 = (__CFString *)v6;
  uint64_t v19 = @"ContentHasInterframeDependencies";
  CFNumberRef v14 = v7;
  sJPEGVideoDecoderSupportedPropertyDictionary = (uint64_t)CFDictionaryCreate(v0, (const void **)&keys, (const void **)&values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!sJPEGVideoDecoderSupportedPropertyDictionary) {
    goto LABEL_12;
  }
LABEL_13:
  CFRelease(v2);
  CFRelease(v4);
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v8)
  {
    CFNumberRef v9 = v8;
    goto LABEL_19;
  }
}

uint64_t initSharedDGlobals()
{
  uint64_t result = InitDecodeTables(sJPEGSharedDGlobals);
  didInitSharedDGlobals = 1;
  return result;
}

uint64_t TestIPBVideoDecoder_CreateInstance()
{
  VTVideoDecoderGetClassID();
  uint64_t v0 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v0;
}

uint64_t TestIPBVideoDecoder_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFNumberRef v1 = (const void *)DerivedStorage[68];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[68] = 0;
  }
  void *DerivedStorage = 0;
  DerivedStorage[1] = 0;
  uint64_t result = FigFormatDescriptionRelease();
  DerivedStorage[2] = 0;
  return result;
}

__CFString *TestIPBVideoDecoder_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<TestIPBVideoDecoder %p>", a1);
  return Mutable;
}

uint64_t TestIPBVideoDecoder_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"RequestedMVHEVCVideoLayerIDs"))
  {
    unsigned int SInt32 = *(const void **)(DerivedStorage + 544);
    if (SInt32) {
      unsigned int SInt32 = CFRetain(SInt32);
    }
    goto LABEL_6;
  }
  if (CFEqual(a2, @"ThreadCount"))
  {
    unsigned int SInt32 = (const void *)FigCFNumberCreateSInt32();
LABEL_6:
    *a4 = SInt32;
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t TestIPBVideoDecoder_SetProperty(uint64_t a1, const void *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"RequestedMVHEVCVideoLayerIDs"))
  {
    if (!a3 || (CFTypeID v6 = CFGetTypeID(a3), v6 == CFArrayGetTypeID()))
    {
      CFDictionaryRef v7 = *(const void **)(DerivedStorage + 544);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(DerivedStorage + 544) = 0;
      }
      if (a3) {
        *(void *)(DerivedStorage + 544) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3);
      }
      return 0;
    }
  }
  else if (CFEqual(a2, @"ThreadCount"))
  {
    if (a3)
    {
      CFTypeID v8 = CFGetTypeID(a3);
      if (v8 == CFNumberGetTypeID()) {
        return 0;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t TestIPBVideoDecoder_StartSession(uint64_t a1, uint64_t a2)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17[0] = 0x4247524100000020;
  *(void *)uint64_t DerivedStorage = a2;
  FigFormatDescriptionRelease();
  CFNumberRef v4 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
  *(void *)(DerivedStorage + 16) = v4;
  CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(v4);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFDictionaryRef v7 = Mutable;
    CFMutableArrayRef v8 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (v8)
    {
      CFNumberRef v9 = v8;
      uint64_t v10 = 0;
      for (char i = 1; ; char i = 0)
      {
        char v12 = i;
        CFNumberRef v13 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)v17 + 4 * v10);
        if (!v13) {
          break;
        }
        CFNumberRef v14 = v13;
        CFArrayAppendValue(v9, v13);
        CFRelease(v14);
        uint64_t v10 = 1;
        if ((v12 & 1) == 0)
        {
          CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F24D70], v9);
          CFRelease(v9);
          addNumberToDictionary(v7, (const void *)*MEMORY[0x1E4F24E10], Dimensions.width);
          addNumberToDictionary(v7, (const void *)*MEMORY[0x1E4F24D08], Dimensions.height);
          CMFormatDescriptionGetExtensions(*(CMFormatDescriptionRef *)(DerivedStorage + 16));
          FigCFDictionaryGetBooleanIfPresent();
          *(_DWORD *)(DerivedStorage + 552) = 0;
          VTDecoderSessionSetPixelBufferAttributes(*(uint64_t **)DerivedStorage, v7);
          CFRelease(v7);
          return 0;
        }
      }
      CFRelease(v7);
      CFNumberRef v15 = v9;
    }
    else
    {
      CFNumberRef v15 = v7;
    }
    CFRelease(v15);
  }
  return 4294954392;
}

uint64_t TestIPBVideoDecoder_DecodeFrame(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  DataBuffer = CMSampleBufferGetDataBuffer(a3);
  size_t DataLength = CMBlockBufferGetDataLength(DataBuffer);
  dataPointerOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef v39 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v38 = 0;
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a3, 0);
  if (SampleAttachmentsArray)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    if (ValueAtIndex)
    {
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F1B8]);
      if (Value)
      {
        CFBooleanRef v14 = Value;
        CFTypeID TypeID = CFBooleanGetTypeID();
        if (TypeID == CFGetTypeID(v14)) {
          CFBooleanGetValue(v14);
        }
      }
    }
  }
  memset(__dst, 0, 257);
  memset(v47, 0, 257);
  memset(v46, 0, 257);
  memset(v45, 0, 257);
  char v44 = 0;
  memset(v43, 0, sizeof(v43));
  CFNumberRef v16 = (const __CFNumber *)CMGetAttachment(a3, @"IPBFrameDelay", 0);
  if (v16)
  {
    uint64_t valuePtr = 0;
    CFNumberGetValue(v16, kCFNumberCFIndexType, &valuePtr);
    unsigned int v17 = 1000 * valuePtr;
    if ((unint64_t)(valuePtr - 1) >= 0x418937) {
      unsigned int v17 = 0;
    }
  }
  else
  {
    unsigned int v17 = 0;
  }
  unsigned int v18 = *(_DWORD *)(DerivedStorage + 540);
  if (v18 <= v17) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v18;
  }
  if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
  {
    CFTypeRef v20 = (OpaqueCMBlockBuffer *)CFRetain(DataBuffer);
    CMBlockBufferRef blockBufferOut = v20;
  }
  else
  {
    uint64_t v25 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], DataBuffer, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, DataLength, 0, &blockBufferOut);
    if (v25)
    {
      uint64_t v22 = v25;
      CFMutableDictionaryRef Mutable = 0;
      int v24 = 0;
      goto LABEL_22;
    }
    CFTypeRef v20 = blockBufferOut;
  }
  CMBlockBufferGetDataPointer(v20, 0, 0, 0, &dataPointerOut);
  VTDecoderSessionTrace(*(void *)DerivedStorage);
  uint64_t FrameStrings = IPB_GetFrameStrings((unsigned __int8 *)dataPointerOut, DataLength, __dst, v47, v46, v45);
  if (FrameStrings) {
    goto LABEL_17;
  }
  uint64_t FrameStrings = IPB_SimulatePrediction((unsigned __int8 *)(DerivedStorage + 24), (unsigned __int8 *)(DerivedStorage + 281), (unsigned char *)(DerivedStorage + 538), __dst, v47, (unsigned __int8 *)v43);
  if (FrameStrings) {
    goto LABEL_17;
  }
  __dst[__dst[0] + 1] = 0;
  v47[v47[0] + 1] = 0;
  v46[v46[0] + 1] = 0;
  v45[v45[0] + 1] = 0;
  *((unsigned char *)v43 + LOBYTE(v43[0]) + 1) = 0;
  if (v19) {
    snprintf((char *)&valuePtr, 0x20uLL, " (delayed %u ms)", v19 / 0x3E8);
  }
  IPB_AreStringsDifferent(v45, (unsigned __int8 *)v43);
  CFArrayRef v29 = *(const __CFArray **)(DerivedStorage + 544);
  if (!v29)
  {
    uint64_t FrameStrings = testipb_CreatePixelBufferAndDrawFrame(DerivedStorage, a2, __dst, v47, v46, v45, (unsigned __int8 *)v43, 0, 0, &cf);
LABEL_17:
    uint64_t v22 = FrameStrings;
    CFMutableDictionaryRef Mutable = 0;
    int v24 = 0;
    goto LABEL_18;
  }
  int v37 = a5;
  CFIndex Count = CFArrayGetCount(v29);
  CFAllocatorRef v31 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v32 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  int v24 = CFArrayCreateMutable(v31, 0, v32);
  if (Count >= 1)
  {
    uint64_t v33 = 0;
    while (1)
    {
      FigCFArrayGetInt32AtIndex();
      uint64_t v50 = 0;
      uint64_t valuePtr = 0;
      uint64_t valuePtr = FigTagMakeWithSInt64Value();
      uint64_t v50 = v34;
      uint64_t v35 = FigTagCollectionCreate();
      if (v35) {
        break;
      }
      uint64_t v35 = testipb_CreatePixelBufferAndDrawFrame(DerivedStorage, a2, __dst, v47, v46, v45, (unsigned __int8 *)v43, 1, 0, &cf);
      if (v35) {
        break;
      }
      CFTypeRef v36 = cf;
      CFArrayAppendValue(v24, cf);
      if (v36)
      {
        CFRelease(v36);
        CFTypeRef cf = 0;
      }
      CFArrayAppendValue(Mutable, v39);
      if (v39)
      {
        CFRelease(v39);
        CFTypeRef v39 = 0;
      }
      if (Count == ++v33) {
        goto LABEL_51;
      }
    }
    uint64_t v22 = v35;
    goto LABEL_55;
  }
LABEL_51:
  uint64_t v22 = MEMORY[0x199705780](v31, Mutable, v24, &v38);
  if (v22)
  {
LABEL_55:
    a5 = v37;
    goto LABEL_22;
  }
  a5 = v37;
LABEL_18:
  VTDecoderSessionTrace(*(void *)DerivedStorage);
  if (v19) {
    MEMORY[0x199705830](v19);
  }
LABEL_22:
  uint64_t v26 = *(uint64_t **)DerivedStorage;
  uint64_t v27 = *a5;
  if (*(void *)(DerivedStorage + 544)) {
    VTDecoderSessionEmitDecodedMultiImageFrame(v26, a2, v22, v27, (OpaqueCMTaggedBufferGroup *)v38);
  }
  else {
    VTDecoderSessionEmitDecodedFrame(v26, a2, v22, v27, (__CVBuffer *)cf);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (cf) {
    CFRelease(cf);
  }
  VTDecoderSessionCleanUpAfterDecode();
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v38) {
    CFRelease(v38);
  }
  return v22;
}

uint64_t TestIPBVideoDecoder_CopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  if (sTestIPBCreateSupportedPropertyDictionaryOnce == -1)
  {
    if (!a2) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once_f(&sTestIPBCreateSupportedPropertyDictionaryOnce, 0, (dispatch_function_t)testipb_createSupportedPropertyDictionary);
    if (!a2) {
      goto LABEL_6;
    }
  }
  if (sTestIPBVideoDecoderSupportedPropertyDictionary)
  {
    *a2 = CFRetain((CFTypeRef)sTestIPBVideoDecoderSupportedPropertyDictionary);
    return 0;
  }
LABEL_6:

  return FigSignalErrorAt();
}

uint64_t testipb_CreatePixelBufferAndDrawFrame(uint64_t a1, const void *a2, unsigned __int8 *a3, unsigned char *a4, unsigned char *a5, unsigned char *a6, unsigned __int8 *a7, int a8, int a9, void *a10)
{
  CVPixelBufferRef v94 = 0;
  uint64_t v17 = VTDecoderSessionCreatePixelBuffer(*(uint64_t **)a1, a2, &v94);
  if (v17)
  {
    uint64_t v18 = v17;
    FigSignalErrorAt();
    if (v94) {
      CFRelease(v94);
    }
    return v18;
  }
  v83 = a3;
  v93 = a4;
  v89 = a5;
  CVPixelBufferLockBaseAddress(v94, 0);
  uint64_t v19 = v94;
  int v20 = *(_DWORD *)(a1 + 552);
  int Width = CVPixelBufferGetWidth(v94);
  int v80 = Width;
  if (Width >= 0) {
    int v22 = Width;
  }
  else {
    int v22 = Width + 1;
  }
  int v86 = v22;
  int Height = CVPixelBufferGetHeight(v19);
  int v24 = Height;
  if (Height >= 0) {
    int v25 = Height;
  }
  else {
    int v25 = Height + 1;
  }
  int v85 = v25;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v19);
  if (PixelFormatType == 1111970369) {
    int v27 = -3342388;
  }
  else {
    int v27 = -855651073;
  }
  if (PixelFormatType == 1111970369) {
    int v28 = -3381760;
  }
  else {
    int v28 = 6737151;
  }
  if (PixelFormatType == 1111970369) {
    int v29 = -16750900;
  }
  else {
    int v29 = -865730305;
  }
  int v84 = v29;
  int v30 = a7;
  if (PixelFormatType == 1111970369) {
    int v31 = -52429;
  }
  else {
    int v31 = 859045887;
  }
  if (PixelFormatType == 1111970369) {
    int v32 = -16777216;
  }
  else {
    int v32 = 255;
  }
  int v81 = v28;
  int v82 = v32;
  int v90 = a8;
  if (PixelFormatType == 1111970369) {
    int v33 = -52;
  }
  else {
    int v33 = -855638017;
  }
  if (PixelFormatType == 1111970369) {
    int v34 = -13057;
  }
  else {
    int v34 = -3342337;
  }
  if (PixelFormatType == 1111970369) {
    int v35 = -3342337;
  }
  else {
    int v35 = -13057;
  }
  if (PixelFormatType == 1111970369) {
    int v36 = -3381505;
  }
  else {
    int v36 = -10040065;
  }
  int v79 = v36;
  v91 = v30;
  v92 = a6;
  int v37 = IPB_AreStringsDifferent(a6, v30);
  if (a9 == 1) {
    int v38 = v34;
  }
  else {
    int v38 = v27;
  }
  if (a9 == 2) {
    int v38 = v35;
  }
  CFTypeRef v39 = v89;
  if (!a9) {
    int v38 = v33;
  }
  int v40 = v90;
  if (!v90) {
    int v38 = v27;
  }
  int v41 = v37;
  if (v37) {
    int v42 = v31;
  }
  else {
    int v42 = v38;
  }
  v88 = v19;
  uint64_t v18 = testipb_FillRectOfPixelBuffer(v19, v42, 0, 0, 0, 0);
  if (v18) {
    goto LABEL_118;
  }
  int v43 = v86 >> 1;
  int v87 = v85 >> 1;
  if (v20 == 1)
  {
    int v44 = 1;
    v45 = v88;
    int v46 = v35;
    int v47 = v43;
    int v48 = 0;
    int v49 = v43;
    int v50 = 0;
  }
  else
  {
    int v44 = v20;
    if (v20 != 2) {
      goto LABEL_55;
    }
    v45 = v88;
    int v46 = v35;
    int v47 = 0;
    int v48 = v85 >> 1;
    int v49 = 0;
    int v50 = v85 >> 1;
  }
  uint64_t v18 = testipb_FillRectOfPixelBuffer(v45, v46, v47, v48, v49, v50);
  if (v18) {
    goto LABEL_118;
  }
LABEL_55:
  uint64_t v51 = *v89;
  if (*v89)
  {
    int v52 = 0;
    v53 = v89 + 1;
    do
    {
      int v54 = *v53++;
      int v52 = v54 + 10 * v52 - 48;
      --v51;
    }
    while (v51);
  }
  else
  {
    int v52 = 0;
  }
  if (v44 == 1)
  {
    int v55 = v52 % v43;
    uint64_t v18 = testipb_FillRectOfPixelBuffer(v88, v84, v52 % v43, 0, 2, 136);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_FillRectOfPixelBuffer(v88, v84, v55 + v43, 0, 2, 136);
    if (v18) {
      goto LABEL_118;
    }
    int v56 = v41 ? v82 : v81;
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v56, 10, 10, 4, (uint64_t)(v83 + 1), *v83);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v56, 34, 10, 4, (uint64_t)(v93 + 1), *v93);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v56, v43 + 10, 10, 4, (uint64_t)(v83 + 1), *v83);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v56, v43 + 34, 10, 4, (uint64_t)(v93 + 1), *v93);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v56, 10, 60, 1, (uint64_t)"display#:", 9);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v56, 64, 48, 4, (uint64_t)(v89 + 1), *v89);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v56, v43 + 10, 60, 1, (uint64_t)"display#:", 9);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v56, v43 + 64, 48, 4, (uint64_t)(v89 + 1), *v89);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v79, 10, v87 + 20, 4, (uint64_t)"LEFT", 4);
    if (v18) {
      goto LABEL_118;
    }
    v57 = v88;
    int v58 = v79;
    int v59 = v43 + 10;
    int v60 = v87 + 20;
LABEL_92:
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v57, v58, v59, v60, 4, (uint64_t)"RIGHT", 5);
    if (!v90)
    {
LABEL_117:
      int v40 = v90;
      CFTypeRef v39 = v89;
      goto LABEL_118;
    }
    goto LABEL_112;
  }
  int v61 = v52 % 100;
  int v62 = 3 * v61;
  if (v44 == 2)
  {
    int v63 = v24 / 4 - 10;
    uint64_t v18 = testipb_FillRectOfPixelBuffer(v88, v84, v62, 0, 2, v63);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_FillRectOfPixelBuffer(v88, v84, v62, v87 + 2, 2, v63);
    if (v18) {
      goto LABEL_118;
    }
    int v64 = v41 ? v82 : v81;
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v64, 10, 10, 4, (uint64_t)(v83 + 1), *v83);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v64, 34, 10, 4, (uint64_t)(v93 + 1), *v93);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v64, 10, v87 + 10, 4, (uint64_t)(v83 + 1), *v83);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v64, 34, v87 + 10, 4, (uint64_t)(v93 + 1), *v93);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v64, v80 - 70 - 24 * *v89, 60, 1, (uint64_t)"display#:", 9);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v64, v80 - 10 - 24 * *v89, 48, 4, (uint64_t)(v89 + 1), *v89);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v64, v80 - 70 - 24 * *v89, v87 + 60, 1, (uint64_t)"display#:", 9);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v64, v80 - 10 - 24 * *v89, v87 + 48, 4, (uint64_t)(v89 + 1), *v89);
    if (v18) {
      goto LABEL_118;
    }
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v79, 10, 48, 4, (uint64_t)"LEFT", 4);
    if (v18) {
      goto LABEL_118;
    }
    v57 = v88;
    int v58 = v79;
    int v59 = 10;
    int v60 = v87 + 48;
    goto LABEL_92;
  }
  uint64_t v18 = testipb_FillRectOfPixelBuffer(v88, v84, 3 * v61, 0, 3, 136);
  if (v18) {
    goto LABEL_118;
  }
  int v65 = v41 ? v82 : v81;
  uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v65, 10, 10, 8, (uint64_t)(v83 + 1), *v83);
  if (v18) {
    goto LABEL_118;
  }
  uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v65, 58, 10, 8, (uint64_t)(v93 + 1), *v93);
  if (v18) {
    goto LABEL_118;
  }
  uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v65, -48 * *v89 + 214, 105, 1, (uint64_t)"display number:", 15);
  if (v18) {
    goto LABEL_118;
  }
  uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v65, -48 * *v89 + 310, 80, 8, (uint64_t)(v89 + 1), *v89);
  if (v18) {
    goto LABEL_118;
  }
  uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v82, 10, 140, 1, (uint64_t)"intended prediction:", 20);
  if (v18) {
    goto LABEL_118;
  }
  uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v82, 10, 152, 1, (uint64_t)(a6 + 1), *a6);
  if (v18) {
    goto LABEL_118;
  }
  unsigned int v66 = *a6;
  if (v66 >= 0x33)
  {
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v82, 10, 164, 1, (uint64_t)(a6 + 51), v66 - 50);
    if (v18) {
      goto LABEL_118;
    }
  }
  uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v82, 10, 190, 1, (uint64_t)"actual prediction:", 18);
  if (v18) {
    goto LABEL_118;
  }
  uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v82, 10, 202, 1, (uint64_t)(v91 + 1), *v91);
  if (v18) {
    goto LABEL_118;
  }
  unsigned int v67 = *v91;
  if (v67 < 0x33) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v82, 10, 214, 1, (uint64_t)(v91 + 51), v67 - 50);
  }
  if (!v90) {
    goto LABEL_117;
  }
LABEL_112:
  int v40 = v90;
  CFTypeRef v39 = v89;
  if (!v18)
  {
    __int16 v95 = 8224;
    if (a9 >= 10) {
      LOBYTE(v95) = (a9 / 0xAu - 10 * ((429496730 * (unint64_t)(a9 / 0xAu)) >> 32)) | 0x30;
    }
    HIBYTE(v95) = a9 % 10 + 48;
    uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v79, 238, 10, 1, (uint64_t)"video layer:", 12);
    if (!v18) {
      uint64_t v18 = testipb_DrawCharsToPixelBuffer(v88, v79, 238, 20, 6, (uint64_t)&v95, 2);
    }
    goto LABEL_117;
  }
LABEL_118:
  CVPixelBufferUnlockBaseAddress(v94, 0);
  uint64_t v68 = *v93;
  if (*v93)
  {
    int v69 = 0;
    v70 = v93 + 1;
    v71 = v91;
    v72 = v92;
    do
    {
      int v73 = *v70++;
      int v69 = v73 + 10 * v69 - 48;
      --v68;
    }
    while (v68);
  }
  else
  {
    int v69 = 0;
    v71 = v91;
    v72 = v92;
  }
  testipb_setIntBufferAttachment(v94, @"DecodeNumber", v69);
  uint64_t v74 = *v39;
  if (*v39)
  {
    int v75 = 0;
    v76 = v39 + 1;
    do
    {
      int v77 = *v76++;
      int v75 = v77 + 10 * v75 - 48;
      --v74;
    }
    while (v74);
  }
  else
  {
    int v75 = 0;
  }
  testipb_setIntBufferAttachment(v94, @"DisplayNumber", v75);
  if (IPB_AreStringsDifferent(v72, v71)) {
    CVBufferSetAttachment(v94, @"BadPrediction", (CFTypeRef)*MEMORY[0x1E4F1CFD0], kCVAttachmentMode_ShouldPropagate);
  }
  if (v40) {
    testipb_setIntBufferAttachment(v94, @"VideoLayerID", a9);
  }
  *a10 = v94;
  return v18;
}

void testipb_setIntBufferAttachment(__CVBuffer *a1, const __CFString *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CVBufferSetAttachment(a1, a2, v5, kCVAttachmentMode_ShouldPropagate);
    IOSurface = CVPixelBufferGetIOSurface(a1);
    if (IOSurface) {
      IOSurfaceSetValue(IOSurface, a2, v6);
    }
    CFRelease(v6);
  }
}

uint64_t testipb_FillRectOfPixelBuffer(__CVBuffer *a1, int a2, int a3, int a4, int a5, int a6)
{
  int Width = CVPixelBufferGetWidth(a1);
  int Height = CVPixelBufferGetHeight(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  uint64_t v16 = 0;
  if (a5) {
    int v17 = a5;
  }
  else {
    int v17 = Width;
  }
  if (a6) {
    int v18 = a6;
  }
  else {
    int v18 = Height;
  }
  if (Width >= a3 && Height >= a4)
  {
    unsigned int v19 = v17 + a3;
    if (v17 + a3 < 0) {
      return 0;
    }
    int v20 = v18 + a4;
    if (v18 + a4 < 0) {
      return 0;
    }
    unsigned int v21 = a3 & ~(a3 >> 31);
    if (a3 >= 0) {
      unsigned int v19 = v17;
    }
    uint64_t v22 = a4 & ~(a4 >> 31);
    if (a4 >= 0) {
      int v20 = v18;
    }
    int v23 = (int)(v19 + v21) <= Width ? v19 : Width - v21;
    int v24 = v20 + (int)v22 <= Height ? v20 : Height - v22;
    if (v24 < 1)
    {
      return 0;
    }
    else
    {
      int v25 = v24 + v22;
      uint64_t v26 = &BaseAddress[4 * v21 + BytesPerRow * v22];
      while (v23 < 1)
      {
LABEL_28:
        uint64_t v16 = 0;
        v26 += BytesPerRow;
        LODWORD(v22) = v22 + 1;
        if ((int)v22 >= v25) {
          return v16;
        }
      }
      int v27 = v26;
      int v28 = a3 & ~(a3 >> 31);
      while (1)
      {
        uint64_t v16 = 4294954387;
        if (v27 >= &BaseAddress[BytesPerRow * Height] || v26 < BaseAddress) {
          break;
        }
        *(_DWORD *)int v27 = a2;
        v27 += 4;
        if (++v28 >= (int)(v23 + v21)) {
          goto LABEL_28;
        }
      }
    }
  }
  return v16;
}

uint64_t testipb_DrawCharsToPixelBuffer(__CVBuffer *a1, int a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  int Width = CVPixelBufferGetWidth(a1);
  int Height = CVPixelBufferGetHeight(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  int v18 = Height - a4;
  int v19 = 6 * a5 * a7;
  if (Width - a3 >= v19) {
    int v20 = 6 * a5 * a7;
  }
  else {
    int v20 = Width - a3;
  }
  if (v18 >= 9 * a5) {
    int v18 = 9 * a5;
  }
  if (v18 < 1) {
    return 0;
  }
  int v21 = 0;
  uint64_t v22 = &BaseAddress[4 * a3 + BytesPerRow * a4];
  if (v19 >= (uint64_t)(Width - a3)) {
    int v19 = Width - a3;
  }
  while (v20 < 1)
  {
LABEL_16:
    v22 += BytesPerRow;
    if (++v21 == v18) {
      return 0;
    }
  }
  int v23 = 0;
  int v24 = v22;
  while (1)
  {
    uint64_t v25 = 4294954387;
    if (v24 >= &BaseAddress[BytesPerRow * Height] || v22 < BaseAddress) {
      return v25;
    }
    if (((kGlyphs_0[9 * *(char *)(a6 + v23 / a5 / 6) - 288 + v21 / a5] << (v23 / a5 % 6)) & 0x80) != 0) {
      *(_DWORD *)int v24 = a2;
    }
    v24 += 4;
    if (v19 == ++v23) {
      goto LABEL_16;
    }
  }
}

void testipb_createSupportedPropertyDictionary()
{
  keys[5] = *(void **)MEMORY[0x1E4F143B8];
  memset(&keys[2], 0, 24);
  memset(&values[2], 0, 24);
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    keys[0] = @"ThreadCount";
    keys[1] = @"RequestedMVHEVCVideoLayerIDs";
    values[0] = v1;
    values[1] = v1;
    sTestIPBVideoDecoderSupportedPropertyDictionary = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!sTestIPBVideoDecoderSupportedPropertyDictionary) {
      FigSignalErrorAt();
    }
    CFRelease(v2);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t validateIBPString(unsigned char *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0;
  }
  CFDictionaryRef v2 = a1 + 1;
  while (1)
  {
    int v4 = *v2++;
    int v3 = v4;
    uint64_t v5 = (1 << (v4 - 32)) & 0x902044BFF2009;
    if ((v4 - 32) > 0x33 || v5 == 0)
    {
      unsigned int v7 = v3 - 98;
      BOOL v8 = v7 > 0x11;
      int v9 = (1 << v7) & 0x24081;
      if (v8 || v9 == 0) {
        break;
      }
    }
    if (!--v1) {
      return 0;
    }
  }
  return 4294954387;
}

uint64_t IPB_GetFrameStrings(unsigned __int8 *__src, unint64_t a2, unsigned char *__dst, unsigned __int8 *a4, unsigned __int8 *a5, unsigned char *a6)
{
  if (!a2) {
    return 4294954387;
  }
  unint64_t v8 = *__src;
  if (v8 >= a2) {
    return 4294954387;
  }
  unint64_t v13 = v8 + 1;
  memmove(__dst, __src, v8 + 1);
  uint64_t result = validateIBPString(__dst);
  if (result) {
    return result;
  }
  unint64_t v15 = a2 - v13;
  if (a2 == v13) {
    return 4294954387;
  }
  uint64_t v16 = (char *)&__src[v13];
  unint64_t v17 = *v16;
  if (v15 <= v17) {
    return 4294954387;
  }
  unint64_t v18 = v17 + 1;
  memmove(a4, v16, v17 + 1);
  uint64_t v19 = *a4;
  if (*a4)
  {
    int v20 = a4 + 1;
    do
    {
      int v21 = *v20++;
      if ((v21 - 48) >= 0xA) {
        return 4294954387;
      }
    }
    while (--v19);
  }
  unint64_t v22 = v15 - v18;
  if (v15 == v18) {
    return 4294954387;
  }
  int v23 = (unsigned __int8 *)&v16[v18];
  unint64_t v24 = v16[v18];
  if (v22 <= v24) {
    return 4294954387;
  }
  unint64_t v25 = v24 + 1;
  memmove(a5, v23, v24 + 1);
  uint64_t v26 = *a5;
  if (*a5)
  {
    int v27 = a5 + 1;
    do
    {
      int v28 = *v27++;
      if ((v28 - 48) >= 0xA) {
        return 4294954387;
      }
    }
    while (--v26);
  }
  if (v22 == v25) {
    return 4294954387;
  }
  unint64_t v29 = v23[v25];
  if (v22 - v25 <= v29) {
    return 4294954387;
  }
  memmove(a6, &v23[v25], v29 + 1);

  return validateIBPString(a6);
}

uint64_t IPB_MakeDataFromFrameStrings(char *a1, void *a2, unsigned __int8 *__src, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  memmove(a1, __src, *__src + 1);
  uint64_t v12 = *__src;
  memmove(&a1[v12 + 1], a4, *a4 + 1);
  uint64_t v13 = v12 + *a4 + 2;
  memmove(&a1[v13], a5, *a5 + 1);
  uint64_t v14 = v13 + *a5 + 1;
  memmove(&a1[v14], a6, *a6 + 1);
  *a2 = v14 + *a6 + 1;
  return 0;
}

unsigned char *IPB_ClearStr(unsigned char *result)
{
  *uint64_t result = 0;
  return result;
}

void *IPB_AppendCStr(unsigned char *a1, char *__s)
{
  int v4 = strlen(__s);
  char v5 = v4;
  uint64_t result = memmove(&a1[*a1 + 1], __s, v4);
  *a1 += v5;
  return result;
}

uint64_t IPB_SimulatePrediction(unsigned __int8 *a1, unsigned __int8 *a2, unsigned char *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  if (*a4 != 1) {
    return 4294954387;
  }
  uint64_t v13 = a4 + 1;
  int v12 = (char)a4[1];
  uint64_t result = 4294954387;
  if (v12 > 79)
  {
    if (v12 == 80)
    {
      if (*a3)
      {
        IPB_AppendCStr(a1, "->");
        uint64_t v17 = *a1;
      }
      else
      {
        uint64_t v17 = 0;
        *a1 = 0;
      }
      memmove(&a1[v17 + 1], a2 + 1, *a2);
      *a1 += *a2;
      *a6 = 0;
      memmove(a6 + 1, a1 + 1, *a1);
      *a6 += *a1;
      *a2 = 0;
      memmove(a2 + 1, v13, *a4);
      uint64_t v19 = *a4;
      *a2 = v19;
      memmove(&a2[v19 + 1], a5 + 1, *a5);
      uint64_t result = 0;
      *a2 += *a5;
      *a3 = 1;
      return result;
    }
    if (v12 != 98) {
      return result;
    }
LABEL_10:
    *a6 = 0;
    memmove(a6 + 1, a1 + 1, *a1);
    *a6 += *a1;
    if (*a3)
    {
      uint64_t v16 = "->";
    }
    else
    {
      if (*v13 == 98)
      {
        *a6 = 0;
LABEL_22:
        memmove(&a6[*a6 + 1], a2 + 1, *a2);
        uint64_t result = 0;
        *a6 += *a2;
        return result;
      }
      uint64_t v16 = "; ";
    }
    IPB_AppendCStr(a6, v16);
    goto LABEL_22;
  }
  if (v12 == 66) {
    goto LABEL_10;
  }
  if (v12 == 73)
  {
    *a6 = 0;
    if (*a3)
    {
      IPB_AppendCStr(a1, "->");
      uint64_t v15 = *a1;
    }
    else
    {
      uint64_t v15 = 0;
      *a1 = 0;
    }
    memmove(&a1[v15 + 1], a2 + 1, *a2);
    *a1 += *a2;
    *a2 = 0;
    memmove(a2 + 1, v13, *a4);
    uint64_t v18 = *a4;
    *a2 = v18;
    memmove(&a2[v18 + 1], a5 + 1, *a5);
    uint64_t result = 0;
    *a2 += *a5;
    *a3 = 0;
  }
  return result;
}

uint64_t IPB_AreStringsDifferent(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  if (v2 == *a2)
  {
    if (!*a1) {
      return 0;
    }
    int v3 = a1 + 1;
    int v4 = a2 + 1;
    while (1)
    {
      int v6 = *v3++;
      int v5 = v6;
      int v7 = *v4++;
      if (v5 != v7) {
        break;
      }
      if (!--v2) {
        return 0;
      }
    }
  }
  return 1;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4, float32x4_t a5, int16x4_t a6, double a7, double a8)
{
  uint64_t v11 = *(void *)((char *)result + 28);
  unint64_t v12 = 2 * *(unsigned __int8 *)result;
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (2 * v14 != 2 * v13)
  {
    unint64_t v15 = 0;
    size_t v16 = *(void *)((char *)result + 20);
    uint64_t v17 = *(void *)((char *)result + 36);
    uint64_t v18 = *(void *)((char *)result + 44) + 2 * v13;
    unint64_t v19 = 2 * v14 - 2 * v13;
    uint64_t v20 = result[14];
    uint64_t v21 = (void *)result[16];
    uint64_t v22 = result[15] + 2 * (result[13] * a2 / v12);
    uint64_t v23 = (float32x2_t *)result[19];
    uint64_t v24 = (void *)result[7];
    unint64_t v25 = (uint64_t *)result[8];
    uint64_t v26 = (uint64_t *)result[17];
    uint64_t v28 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v349 = v25[2];
    uint64_t v352 = v24[2];
    uint64_t v29 = (char *)(v352 + v349 * v18 + v17);
    uint64_t v30 = *v26;
    uint64_t v31 = v26[1];
    uint64_t v350 = v26[2];
    uint64_t v351 = v21[2];
    unsigned int v32 = v23[17].u16[2];
    unsigned int v33 = v23[17].u16[3];
    a6.i32[0] = v23->i32[0];
    v34.i32[0] = v23[3].i32[1];
    LODWORD(v26) = v23[18].u16[0];
    unsigned int v35 = v23[18].u16[1];
    float v36 = (float)v32;
    float v37 = (float)v33;
    *(short float *)v10.i16 = (short float)v32;
    unsigned int v38 = v23[18].u16[2];
    short float v39 = (short float)v33;
    unsigned int v40 = v23[18].u16[3];
    _S10 = v23[5].i32[1];
    v42.i32[0] = v23[6].i32[0];
    v44.i32[0] = v23[6].i32[1];
    v43.i32[0] = v23[7].i32[0];
    v34.i32[1] = v23[1].i32[0];
    v42.i32[1] = v23[7].i32[1];
    v44.i32[1] = v23[8].i32[0];
    v43.i32[1] = v23[8].i32[1];
    unsigned int v45 = v23[19].u16[0];
    _S12 = v23[4].i32[1];
    float v47 = (float)v26;
    float v406 = v23[9].f32[0];
    float v407 = v23[5].f32[0];
    LODWORD(a3) = v23[9].i32[1];
    float v405 = *(float *)&a3;
    *(short float *)&a3 = (short float)v26;
    int v48 = (char *)&v23[2068] + 4;
    int v49 = (char *)(v351 + v350 * v22 + v20);
    a5.f32[0] = 8191.0 / (float)v23[16].u32[0];
    float v356 = (float)v35;
    float v394 = (float)v38;
    *(float *)&a8 = (float)v40;
    float v411 = (float)v40;
    _S31 = a5.f32[0] * v23->f32[0];
    float v51 = (float)v45;
    *(short float *)a6.i16 = (short float)v35;
    int v52 = (char *)&v23[20] + 4;
    *(short float *)&a8 = (short float)v38;
    v53 = (char *)&v23[4116] + 4;
    float16x8_t v54 = (float16x8_t)vdupq_lane_s16(v10, 0);
    short float v55 = -v39;
    *(float32x2_t *)v8.f32 = vmul_n_f32(v34, a5.f32[0]);
    *(float32x2_t *)v9.f32 = vmul_n_f32(v23[2], a5.f32[0]);
    *(double *)&v56.i64[1] = a3;
    float16x8_t v57 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v9), 0);
    float16x8_t v380 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v8), 0);
    float16x8_t v58 = vmulq_n_f16(v380, v55);
    __asm { FMOV            V1.2S, #0.25 }
    *(float32x2_t *)a5.f32 = vmul_f32(v42, _D1);
    unint64_t v404 = a5.i64[0];
    int32x2_t v64 = (int32x2_t)vcvt_f16_f32(a5);
    *(double *)&v65.i64[1] = a3;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s32(v64, 0);
    *(float32x2_t *)v65.f32 = vmul_f32(v44, _D1);
    uint64_t v403 = v65.i64[0];
    *(float32x2_t *)v56.f32 = vmul_f32(v43, _D1);
    uint64_t v401 = v56.i64[0];
    int32x4_t v402 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v65), 0);
    int32x4_t v400 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v56), 0);
    int16x8_t v67 = vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    float16x8_t v392 = (float16x8_t)v67;
    int16x8_t v68 = vdupq_lane_s16(a6, 0);
    float16x8_t v69 = vmulq_n_f16(v57, v55);
    *(short float *)v67.i16 = (short float)v40;
    int16x8_t v70 = vdupq_lane_s16(*(int16x4_t *)v67.i8, 0);
    float16x8_t v388 = (float16x8_t)v70;
    float16x8_t v389 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a8, 0);
    *(short float *)v70.i16 = (short float)v45;
    int16x8_t v71 = vdupq_lane_s16(*(int16x4_t *)v70.i8, 0);
    if (v22 >= 0) {
      uint64_t v72 = v22;
    }
    else {
      uint64_t v72 = v22 + 1;
    }
    uint64_t result = (void *)(v21[1] + v31 * (v72 >> 1) + v20);
    int v73 = (int8x8_t *)(*v21 + v30 * v22 + v20);
    v76 = v24;
    uint64_t v75 = *v24;
    uint64_t v74 = v76[1];
    int v77 = (unsigned char *)(v74 + v27 * v18 + v17);
    if (!v74) {
      int v77 = 0;
    }
    v78 = (int8x8_t *)(v75 + v28 * v18 + v17);
    int v79 = &v77[v27];
    uint64_t v355 = v31;
    __asm { FCVT            H11, S31 }
    short float v372 = _H11;
    float v398 = v23[4].f32[1];
    __asm { FCVT            H11, S12 }
    _S0 = v23[5].i32[0];
    __asm { FCVT            H12, S0 }
    short float v371 = _H12;
    float v399 = v23[5].f32[1];
    __asm { FCVT            H12, S10 }
    short float v370 = _H12;
    float v376 = v23[13].f32[1];
    __asm { FCVT            H1, S1 }
    float v375 = v23[14].f32[0];
    __asm { FCVT            H2, S2 }
    float v374 = v23[14].f32[1];
    __asm { FCVT            H5, S5 }
    float v373 = v23[15].f32[0];
    __asm { FCVT            H7, S7 }
    _S0 = v23[9].i32[0];
    __asm { FCVT            H12, S0 }
    _D0.i32[0] = v23[9].i32[1];
    __asm { FCVT            H3, S0 }
    short float v364 = _H3;
    float v386 = v23[10].f32[0];
    __asm { FCVT            H3, S19 }
    float v385 = v23[10].f32[1];
    __asm { FCVT            H4, S23 }
    short float v362 = _H4;
    float v384 = v23[11].f32[0];
    __asm { FCVT            H4, S26 }
    float v383 = v23[11].f32[1];
    __asm { FCVT            H0, S27 }
    short float v360 = *(short float *)_D0.i16;
    float v381 = v23[12].f32[0];
    __asm { FCVT            H0, S21 }
    float v379 = v23[12].f32[1];
    __asm { FCVT            H10, S6 }
    short float v358 = _H10;
    float v378 = v23[13].f32[0];
    __asm { FCVT            H10, S17 }
    float16x8_t v98 = (float16x8_t)v402;
    float16x8_t v99 = (float16x8_t)v400;
    float16x8_t v100 = 0uLL;
    v101.i64[0] = 0x9000900090009000;
    v101.i64[1] = 0x9000900090009000;
    float16x8_t v390 = v69;
    float16x8_t v391 = (float16x8_t)v68;
    float16x8_t v387 = (float16x8_t)v71;
    short float v368 = _H2;
    short float v369 = _H1;
    short float v363 = _H3;
    short float v361 = _H4;
    short float v359 = *(short float *)_D0.i16;
    uint64_t v354 = v28;
    __int32 v396 = v9.i32[0];
    float16x8_t v397 = v54;
    float16x8_t v395 = v57;
    float16x8_t v393 = v66;
    __int32 v410 = v8.i32[0];
    float v409 = v37;
    float16x8_t v382 = v58;
    float v408 = v36;
    float v377 = _S31;
    short float v366 = _H7;
    short float v367 = _H5;
    short float v365 = _H12;
    short float v357 = _H10;
    float v353 = (float)v45;
    do
    {
      v102 = (char *)v78 + v28;
      v103 = &v77[v27];
      v104 = (char *)v73 + v30;
      if ((int)v16 < 8)
      {
        size_t v211 = 0;
        v210 = result;
        v107 = (int8x8_t *)((char *)v73 + v30);
        v209 = &v77[v27];
        v106 = (int8x8_t *)((char *)v78 + v28);
      }
      else
      {
        unint64_t v105 = 0;
        v106 = (int8x8_t *)((char *)v78 + v28);
        v107 = (int8x8_t *)((char *)v73 + v30);
        do
        {
          int8x8_t v108 = *(int8x8_t *)&v77[v105];
          *(int8x8_t *)v109.i8 = vzip1_s8(v108, *(int8x8_t *)v100.i8);
          v109.u64[1] = (unint64_t)vzip2_s8(v108, *(int8x8_t *)v100.i8);
          float16x8_t v110 = vcvtq_f16_u16(v109);
          int8x16_t v111 = (int8x16_t)vmlaq_f16(v58, v380, v110);
          int8x16_t v112 = (int8x16_t)vmlaq_f16(v390, v57, v110);
          v110.i64[0] = vextq_s8(v111, v111, 8uLL).u64[0];
          *(int16x4_t *)v113.i8 = vuzp1_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v110.i8);
          *(int16x4_t *)v110.i8 = vuzp2_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v110.i8);
          v110.i64[1] = v110.i64[0];
          float16x8_t v114 = (float16x8_t)vzip1q_s16((int16x8_t)v110, (int16x8_t)v110);
          v113.i64[1] = v110.i64[0];
          v110.i64[0] = vextq_s8(v112, v112, 8uLL).u64[0];
          *(float16x4_t *)v110.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v110.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v110.i8));
          v110.i64[1] = v110.i64[0];
          int8x8_t v115 = *v78++;
          *(int8x8_t *)v116.i8 = vzip1_s8(v115, *(int8x8_t *)v100.i8);
          v116.u64[1] = (unint64_t)vzip2_s8(v115, *(int8x8_t *)v100.i8);
          float16x8_t v117 = (float16x8_t)vzip1q_s16((int16x8_t)v110, (int16x8_t)v110);
          float16x8_t v118 = vsubq_f16(vcvtq_f16_u16(v116), v54);
          float16x8_t v119 = vmlaq_n_f16(v114, v118, v372);
          float16x8_t v120 = vmlaq_n_f16(v117, v118, v372);
          float16x8_t v121 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v113, v113), v118, v372);
          v118.i64[0] = *(void *)&v79[v105];
          *(int8x8_t *)v116.i8 = vzip1_s8(*(int8x8_t *)v118.i8, *(int8x8_t *)v100.i8);
          v116.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v118.i8, *(int8x8_t *)v100.i8);
          float16x8_t v122 = vcvtq_f16_u16(v116);
          int8x16_t v123 = (int8x16_t)vmlaq_f16(v58, v380, v122);
          int8x16_t v124 = (int8x16_t)vmlaq_f16(v390, v57, v122);
          v122.i64[0] = vextq_s8(v123, v123, 8uLL).u64[0];
          *(int16x4_t *)v125.i8 = vuzp1_s16(*(int16x4_t *)v123.i8, *(int16x4_t *)v122.i8);
          *(int16x4_t *)v122.i8 = vuzp2_s16(*(int16x4_t *)v123.i8, *(int16x4_t *)v122.i8);
          v122.i64[1] = v122.i64[0];
          v125.i64[1] = v122.i64[0];
          float16x8_t v126 = (float16x8_t)vzip1q_s16((int16x8_t)v122, (int16x8_t)v122);
          v122.i64[0] = vextq_s8(v124, v124, 8uLL).u64[0];
          *(float16x4_t *)v122.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v124.i8, *(int16x4_t *)v122.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v124.i8, *(int16x4_t *)v122.i8));
          v122.i64[1] = v122.i64[0];
          float16x8_t v127 = (float16x8_t)vzip1q_s16((int16x8_t)v122, (int16x8_t)v122);
          int8x8_t v128 = *v106++;
          *(int8x8_t *)v123.i8 = vzip1_s8(v128, *(int8x8_t *)v100.i8);
          v123.u64[1] = (unint64_t)vzip2_s8(v128, *(int8x8_t *)v100.i8);
          float16x8_t v129 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v123), v54);
          float16x8_t v130 = vmlaq_n_f16(v126, v129, v372);
          float16x8_t v131 = vmlaq_n_f16(v127, v129, v372);
          float16x8_t v132 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v125, v125), v129, v372);
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, v100), v101));
          float16x8_t v134 = (float16x8_t)vmovl_high_u16(v133);
          *(void *)&long long v135 = v134.u32[2];
          *((void *)&v135 + 1) = v134.u32[3];
          long long v136 = v135;
          *(void *)&long long v135 = v134.u32[0];
          *((void *)&v135 + 1) = v134.u32[1];
          uint32x4_t v137 = vmovl_u16(*(uint16x4_t *)v133.i8);
          v134.i16[0] = *(_WORD *)&v52[2 * v137.u32[0]];
          v134.i16[1] = *(_WORD *)&v52[2 * v137.u32[1]];
          v134.i16[2] = *(_WORD *)&v52[2 * v137.u32[2]];
          v134.i16[3] = *(_WORD *)&v52[2 * v137.u32[3]];
          v134.i16[4] = *(_WORD *)&v52[2 * v135];
          v134.i16[5] = *(_WORD *)&v52[2 * *((void *)&v135 + 1)];
          v134.i16[6] = *(_WORD *)&v52[2 * v136];
          v134.i16[7] = *(_WORD *)&v52[2 * *((void *)&v136 + 1)];
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, v100), v101));
          float16x8_t v139 = (float16x8_t)vmovl_high_u16(v138);
          *(void *)&long long v135 = v139.u32[2];
          *((void *)&v135 + 1) = v139.u32[3];
          long long v140 = v135;
          *(void *)&long long v135 = v139.u32[0];
          *((void *)&v135 + 1) = v139.u32[1];
          uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v138.i8);
          v139.i16[0] = *(_WORD *)&v52[2 * v141.u32[0]];
          v139.i16[1] = *(_WORD *)&v52[2 * v141.u32[1]];
          v139.i16[2] = *(_WORD *)&v52[2 * v141.u32[2]];
          v139.i16[3] = *(_WORD *)&v52[2 * v141.u32[3]];
          v139.i16[4] = *(_WORD *)&v52[2 * v135];
          v139.i16[5] = *(_WORD *)&v52[2 * *((void *)&v135 + 1)];
          v139.i16[6] = *(_WORD *)&v52[2 * v140];
          v139.i16[7] = *(_WORD *)&v52[2 * *((void *)&v140 + 1)];
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, v100), v101));
          uint32x4_t v143 = vmovl_high_u16(v142);
          uint32x4_t v144 = vmovl_u16(*(uint16x4_t *)v142.i8);
          v145.i16[0] = *(_WORD *)&v52[2 * v144.u32[0]];
          v145.i16[1] = *(_WORD *)&v52[2 * v144.u32[1]];
          v145.i16[2] = *(_WORD *)&v52[2 * v144.u32[2]];
          v145.i16[3] = *(_WORD *)&v52[2 * v144.u32[3]];
          v145.i16[4] = *(_WORD *)&v52[2 * v143.u32[0]];
          v145.i16[5] = *(_WORD *)&v52[2 * v143.u32[1]];
          v145.i16[6] = *(_WORD *)&v52[2 * v143.u32[2]];
          v145.i16[7] = *(_WORD *)&v52[2 * v143.u32[3]];
          uint16x8_t v146 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v130, v100), v101));
          float16x8_t v147 = (float16x8_t)vmovl_high_u16(v146);
          *(void *)&long long v135 = v147.u32[2];
          *((void *)&v135 + 1) = v147.u32[3];
          long long v148 = v135;
          *(void *)&long long v135 = v147.u32[0];
          *((void *)&v135 + 1) = v147.u32[1];
          uint32x4_t v149 = vmovl_u16(*(uint16x4_t *)v146.i8);
          v147.i16[0] = *(_WORD *)&v52[2 * v149.u32[0]];
          v147.i16[1] = *(_WORD *)&v52[2 * v149.u32[1]];
          v147.i16[2] = *(_WORD *)&v52[2 * v149.u32[2]];
          v147.i16[3] = *(_WORD *)&v52[2 * v149.u32[3]];
          v147.i16[4] = *(_WORD *)&v52[2 * v135];
          v147.i16[5] = *(_WORD *)&v52[2 * *((void *)&v135 + 1)];
          v147.i16[6] = *(_WORD *)&v52[2 * v148];
          v147.i16[7] = *(_WORD *)&v52[2 * *((void *)&v148 + 1)];
          uint16x8_t v150 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, v100), v101));
          uint32x4_t v151 = vmovl_high_u16(v150);
          uint32x4_t v152 = vmovl_u16(*(uint16x4_t *)v150.i8);
          v131.i16[0] = *(_WORD *)&v52[2 * v152.u32[0]];
          v131.i16[1] = *(_WORD *)&v52[2 * v152.u32[1]];
          v131.i16[2] = *(_WORD *)&v52[2 * v152.u32[2]];
          v131.i16[3] = *(_WORD *)&v52[2 * v152.u32[3]];
          v131.i16[4] = *(_WORD *)&v52[2 * v151.u32[0]];
          v131.i16[5] = *(_WORD *)&v52[2 * v151.u32[1]];
          v131.i16[6] = *(_WORD *)&v52[2 * v151.u32[2]];
          v131.i16[7] = *(_WORD *)&v52[2 * v151.u32[3]];
          uint16x8_t v153 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v132, v100), v101));
          uint32x4_t v154 = vmovl_high_u16(v153);
          uint32x4_t v155 = vmovl_u16(*(uint16x4_t *)v153.i8);
          v132.i16[0] = *(_WORD *)&v52[2 * v155.u32[0]];
          v132.i16[1] = *(_WORD *)&v52[2 * v155.u32[1]];
          v132.i16[2] = *(_WORD *)&v52[2 * v155.u32[2]];
          v132.i16[3] = *(_WORD *)&v52[2 * v155.u32[3]];
          v132.i16[4] = *(_WORD *)&v52[2 * v154.u32[0]];
          v132.i16[5] = *(_WORD *)&v52[2 * v154.u32[1]];
          v132.i16[6] = *(_WORD *)&v52[2 * v154.u32[2]];
          v132.i16[7] = *(_WORD *)&v52[2 * v154.u32[3]];
          uint16x8_t v156 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v134, v369), v139, v368), v145, v367), vmaxq_f16(vmaxq_f16(v134, v139), v145), v366), v100), v101));
          uint32x4_t v157 = vmovl_high_u16(v156);
          uint32x4_t v158 = vmovl_u16(*(uint16x4_t *)v156.i8);
          v125.i16[0] = *(_WORD *)&v48[2 * v158.u32[0]];
          v125.i16[1] = *(_WORD *)&v48[2 * v158.u32[1]];
          v125.i16[2] = *(_WORD *)&v48[2 * v158.u32[2]];
          v125.i16[3] = *(_WORD *)&v48[2 * v158.u32[3]];
          v125.i16[4] = *(_WORD *)&v48[2 * v157.u32[0]];
          v125.i16[5] = *(_WORD *)&v48[2 * v157.u32[1]];
          v125.i16[6] = *(_WORD *)&v48[2 * v157.u32[2]];
          v125.i16[7] = *(_WORD *)&v48[2 * v157.u32[3]];
          float16x8_t v159 = vmulq_f16(v134, (float16x8_t)v125);
          float16x8_t v160 = vmulq_f16(v139, (float16x8_t)v125);
          float16x8_t v161 = vmulq_f16(v145, (float16x8_t)v125);
          uint16x8_t v162 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v147, v369), v131, v368), v132, v367), vmaxq_f16(vmaxq_f16(v147, v131), v132), v366), (float16x8_t)0), v101));
          uint32x4_t v163 = vmovl_high_u16(v162);
          float16x8_t v164 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v162.i8);
          v164.i16[0] = *(_WORD *)&v48[2 * v164.u32[0]];
          v164.i16[1] = *(_WORD *)&v48[2 * v164.u32[1]];
          v164.i16[2] = *(_WORD *)&v48[2 * v164.u32[2]];
          v164.i16[3] = *(_WORD *)&v48[2 * v164.u32[3]];
          v164.i16[4] = *(_WORD *)&v48[2 * v163.u32[0]];
          v164.i16[5] = *(_WORD *)&v48[2 * v163.u32[1]];
          v164.i16[6] = *(_WORD *)&v48[2 * v163.u32[2]];
          v164.i16[7] = *(_WORD *)&v48[2 * v163.u32[3]];
          float16x8_t v165 = vmulq_f16(v147, v164);
          float16x8_t v166 = vmulq_f16(v131, v164);
          float16x8_t v167 = vmulq_f16(v132, v164);
          float16x8_t v168 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v159, v362), v160, v361), v161, v360);
          float16x8_t v169 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v161, _H10), v160, v358), v159, v359);
          float16x8_t v170 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v165, v365), v166, v364), v167, v363);
          float16x8_t v171 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v165, v362), v166, v361), v167, v360);
          float16x8_t v100 = 0uLL;
          float16x8_t v172 = vmlaq_n_f16(vmulq_n_f16(v167, _H10), v166, v358);
          uint16x8_t v173 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v159, v365), v160, v364), v161, v363), (float16x8_t)0), v101));
          float16x8_t v174 = (float16x8_t)vmovl_high_u16(v173);
          *(void *)&long long v135 = v174.u32[2];
          *((void *)&v135 + 1) = v174.u32[3];
          long long v175 = v135;
          *(void *)&long long v135 = v174.u32[0];
          *((void *)&v135 + 1) = v174.u32[1];
          uint32x4_t v176 = vmovl_u16(*(uint16x4_t *)v173.i8);
          v174.i16[7] = (unint64_t)v176.u32[1] >> 48;
          v174.i16[0] = *(_WORD *)&v53[2 * v176.u32[0]];
          v174.i16[1] = *(_WORD *)&v53[2 * v176.u32[1]];
          v174.i16[2] = *(_WORD *)&v53[2 * v176.u32[2]];
          v174.i16[3] = *(_WORD *)&v53[2 * v176.u32[3]];
          v174.i16[4] = *(_WORD *)&v53[2 * v135];
          v174.i16[5] = *(_WORD *)&v53[2 * *((void *)&v135 + 1)];
          v174.i16[6] = *(_WORD *)&v53[2 * v175];
          v177 = (__int16 *)&v53[2 * *((void *)&v175 + 1)];
          uint16x8_t v178 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v168, (float16x8_t)0), v101));
          float16x8_t v179 = (float16x8_t)vmovl_high_u16(v178);
          *(void *)&long long v135 = v179.u32[2];
          *((void *)&v135 + 1) = v179.u32[3];
          long long v180 = v135;
          *(void *)&long long v135 = v179.u32[0];
          *((void *)&v135 + 1) = v179.u32[1];
          uint32x4_t v181 = vmovl_u16(*(uint16x4_t *)v178.i8);
          v179.i16[7] = (unint64_t)v181.u32[1] >> 48;
          v179.i16[0] = *(_WORD *)&v53[2 * v181.u32[0]];
          v179.i16[1] = *(_WORD *)&v53[2 * v181.u32[1]];
          uint64_t v182 = *((void *)&v180 + 1);
          v179.i16[2] = *(_WORD *)&v53[2 * v181.u32[2]];
          v179.i16[3] = *(_WORD *)&v53[2 * v181.u32[3]];
          v179.i16[4] = *(_WORD *)&v53[2 * v135];
          v179.i16[5] = *(_WORD *)&v53[2 * *((void *)&v135 + 1)];
          v179.i16[6] = *(_WORD *)&v53[2 * v180];
          float16x8_t v183 = (float16x8_t)vuzp1q_s16((int16x8_t)v174, (int16x8_t)v179);
          v174.i16[7] = *v177;
          v179.i16[7] = *(_WORD *)&v53[2 * v182];
          uint16x8_t v184 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v169, (float16x8_t)0), v101));
          int16x8_t v185 = (int16x8_t)vmovl_high_u16(v184);
          *(void *)&long long v135 = v185.u32[2];
          *((void *)&v135 + 1) = v185.u32[3];
          long long v186 = v135;
          *(void *)&long long v135 = v185.u32[0];
          *((void *)&v135 + 1) = v185.u32[1];
          uint32x4_t v187 = vmovl_u16(*(uint16x4_t *)v184.i8);
          v185.i16[0] = *(_WORD *)&v53[2 * v187.u32[0]];
          v185.i16[1] = *(_WORD *)&v53[2 * v187.u32[1]];
          v185.i16[2] = *(_WORD *)&v53[2 * v187.u32[2]];
          v185.i16[3] = *(_WORD *)&v53[2 * v187.u32[3]];
          v185.i16[4] = *(_WORD *)&v53[2 * v135];
          v185.i16[5] = *(_WORD *)&v53[2 * *((void *)&v135 + 1)];
          v185.i16[6] = *(_WORD *)&v53[2 * v186];
          v188 = (__int16 *)&v53[2 * *((void *)&v186 + 1)];
          float16x8_t v189 = (float16x8_t)v185;
          v189.i16[7] = *v188;
          uint16x8_t v190 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v170, (float16x8_t)0), v101));
          uint32x4_t v191 = vmovl_high_u16(v190);
          float16x8_t v192 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v190.i8);
          *(void *)&long long v135 = v191.u32[2];
          *((void *)&v135 + 1) = v191.u32[3];
          long long v193 = v135;
          *(void *)&long long v135 = v191.u32[0];
          *((void *)&v135 + 1) = v191.u32[1];
          long long v194 = v135;
          *((void *)&v135 + 1) = v192.u32[3];
          v192.i16[7] = (unint64_t)v192.u32[3] >> 48;
          v192.i16[0] = *(_WORD *)&v53[2 * v192.u32[0]];
          v192.i16[1] = *(_WORD *)&v53[2 * v192.u32[1]];
          v192.i16[2] = *(_WORD *)&v53[2 * v192.u32[2]];
          v192.i16[3] = *(_WORD *)&v53[2 * *((void *)&v135 + 1)];
          v192.i16[4] = *(_WORD *)&v53[2 * v194];
          v192.i16[5] = *(_WORD *)&v53[2 * *((void *)&v194 + 1)];
          v192.i16[6] = *(_WORD *)&v53[2 * v193];
          v195 = (__int16 *)&v53[2 * *((void *)&v193 + 1)];
          uint16x8_t v196 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v171, (float16x8_t)0), v101));
          uint32x4_t v197 = vmovl_high_u16(v196);
          float16x8_t v198 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v196.i8);
          *(void *)&long long v135 = v197.u32[2];
          *((void *)&v135 + 1) = v197.u32[3];
          long long v199 = v135;
          *(void *)&long long v135 = v197.u32[0];
          *((void *)&v135 + 1) = v197.u32[1];
          long long v200 = v135;
          *((void *)&v135 + 1) = v198.u32[3];
          v198.i16[7] = (unint64_t)v198.u32[3] >> 48;
          v198.i16[0] = *(_WORD *)&v53[2 * v198.u32[0]];
          v198.i16[1] = *(_WORD *)&v53[2 * v198.u32[1]];
          v198.i16[2] = *(_WORD *)&v53[2 * v198.u32[2]];
          v198.i16[3] = *(_WORD *)&v53[2 * *((void *)&v135 + 1)];
          v198.i16[4] = *(_WORD *)&v53[2 * v200];
          v198.i16[5] = *(_WORD *)&v53[2 * *((void *)&v200 + 1)];
          v198.i16[6] = *(_WORD *)&v53[2 * v199];
          float16x8_t v201 = (float16x8_t)vuzp1q_s16((int16x8_t)v192, (int16x8_t)v198);
          v192.i16[7] = *v195;
          v198.i16[7] = *(_WORD *)&v53[2 * *((void *)&v199 + 1)];
          uint16x8_t v202 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v172, v165, v359), (float16x8_t)0), v101));
          int16x8_t v203 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v202.i8);
          uint32x4_t v204 = vmovl_high_u16(v202);
          *(void *)&long long v135 = v204.u32[2];
          *((void *)&v135 + 1) = v204.u32[3];
          long long v205 = v135;
          *((void *)&v135 + 1) = v203.u32[3];
          v203.i16[7] = (unint64_t)v203.u32[3] >> 48;
          v203.i16[0] = *(_WORD *)&v53[2 * v203.u32[0]];
          v203.i16[1] = *(_WORD *)&v53[2 * v203.u32[1]];
          v203.i16[2] = *(_WORD *)&v53[2 * v203.u32[2]];
          v203.i16[3] = *(_WORD *)&v53[2 * *((void *)&v135 + 1)];
          v203.i16[4] = *(_WORD *)&v53[2 * v204.u32[0]];
          v203.i16[5] = *(_WORD *)&v53[2 * v204.u32[1]];
          v203.i16[6] = *(_WORD *)&v53[2 * v205];
          float16x8_t v206 = (float16x8_t)v203;
          v206.i16[7] = *(_WORD *)&v53[2 * *((void *)&v205 + 1)];
          *v73++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v392, v174, _H11), v179, v371), v189, v370), v392), v389)));
          *v107++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v392, v192, _H11), v198, v371), v206, v370), v392), v389)));
          int16x8_t v207 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v183, (float16x8_t)vuzp2q_s16((int16x8_t)v174, (int16x8_t)v179)), v201), (float16x8_t)vuzp2q_s16((int16x8_t)v192, (int16x8_t)v198));
          float16x8_t v208 = (float16x8_t)vtrn1q_s16(v203, v203);
          v101.i64[0] = 0x9000900090009000;
          v101.i64[1] = 0x9000900090009000;
          _D0 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v391, v66, (float16x8_t)vzip1q_s16(v207, v207)), v98, (float16x8_t)vzip2q_s16(v207, v207)), v99, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v185, v185), (float16x8_t)vtrn2q_s16((int16x8_t)v189, (int16x8_t)v189)), v208), (float16x8_t)vtrn2q_s16((int16x8_t)v206, (int16x8_t)v206))), v388), v387)));
          result[v105 / 8] = _D0;
          v105 += 8;
        }
        while ((int)v105 < (int)v16 - 7);
        v77 += v105;
        v209 = &v79[v105];
        v210 = &result[v105 / 8];
        size_t v211 = v16 & 0xFFFFFFF8;
        uint64_t v28 = v354;
        v8.i32[0] = v410;
        float v36 = v408;
        float v37 = v409;
        float v51 = v353;
      }
      for (; v16 > v211; float16x8_t v99 = (float16x8_t)v400)
      {
        _D0.i8[0] = v77[1];
        float v212 = (float)_D0.u32[0] - v37;
        unsigned int v213 = v8.u32[1];
        float v214 = v8.f32[1] * v212;
        LOBYTE(v213) = v78->i8[0];
        float v215 = _S31 * (float)((float)v213 - v36);
        float v216 = (float)(v8.f32[1] * v212) + v215;
        float v217 = 8191.0;
        if (v216 <= 8191.0)
        {
          float v217 = v214 + v215;
          if (v216 < 0.0) {
            float v217 = 0.0;
          }
        }
        LOBYTE(v216) = *v77;
        float v218 = (float)LODWORD(v216) - v37;
        float v219 = (float)(v9.f32[1] * v212) + (float)(v218 * v9.f32[0]);
        float v220 = 8191.0;
        if ((float)(v215 + v219) <= 8191.0)
        {
          float v220 = v215 + v219;
          if ((float)(v215 + v219) < 0.0) {
            float v220 = 0.0;
          }
        }
        float v221 = v8.f32[0] * v218;
        float v222 = (float)(v8.f32[0] * v218) + v215;
        float v223 = 8191.0;
        if (v222 <= 8191.0)
        {
          float v223 = v222;
          if (v222 < 0.0) {
            float v223 = 0.0;
          }
        }
        LOBYTE(v222) = v78->i8[1];
        float v224 = _S31 * (float)((float)LODWORD(v222) - v36);
        float v225 = v214 + v224;
        float v226 = 8191.0;
        if (v225 <= 8191.0)
        {
          float v226 = v225;
          if (v225 < 0.0) {
            float v226 = 0.0;
          }
        }
        float v227 = 8191.0;
        if ((float)(v219 + v224) <= 8191.0)
        {
          float v227 = v219 + v224;
          if ((float)(v219 + v224) < 0.0) {
            float v227 = 0.0;
          }
        }
        float v228 = v221 + v224;
        float v229 = 8191.0;
        if (v228 <= 8191.0)
        {
          float v229 = v228;
          if (v228 < 0.0) {
            float v229 = 0.0;
          }
        }
        LOBYTE(v228) = v209[1];
        float v230 = (float)LODWORD(v228) - v37;
        unsigned int v231 = v8.u32[1];
        float v232 = v8.f32[1] * v230;
        LOBYTE(v231) = v106->i8[0];
        float v233 = _S31 * (float)((float)v231 - v36);
        float v234 = (float)(v8.f32[1] * v230) + v233;
        float v235 = 8191.0;
        if (v234 <= 8191.0)
        {
          float v235 = v232 + v233;
          if (v234 < 0.0) {
            float v235 = 0.0;
          }
        }
        LOBYTE(v234) = *v209;
        float v236 = (float)LODWORD(v234) - v37;
        float v237 = (float)(v9.f32[1] * v230) + (float)(v236 * v9.f32[0]);
        float v238 = 8191.0;
        if ((float)(v233 + v237) <= 8191.0)
        {
          float v238 = v233 + v237;
          if ((float)(v233 + v237) < 0.0) {
            float v238 = 0.0;
          }
        }
        float v239 = v8.f32[0] * v236;
        float v240 = (float)(v8.f32[0] * v236) + v233;
        float v241 = 8191.0;
        if (v240 <= 8191.0)
        {
          float v241 = v240;
          if (v240 < 0.0) {
            float v241 = 0.0;
          }
        }
        v101.i8[0] = v106->i8[1];
        *(float *)v101.i32 = _S31 * (float)((float)v101.u32[0] - v36);
        float v242 = v232 + *(float *)v101.i32;
        BOOL v243 = (float)(v232 + *(float *)v101.i32) <= 8191.0;
        float v244 = 8191.0;
        if (v243)
        {
          float v244 = v242;
          if (v242 < 0.0) {
            float v244 = 0.0;
          }
        }
        float v245 = v237 + *(float *)v101.i32;
        BOOL v243 = (float)(v237 + *(float *)v101.i32) <= 8191.0;
        float v246 = 8191.0;
        if (v243)
        {
          float v246 = v245;
          if (v245 < 0.0) {
            float v246 = 0.0;
          }
        }
        float v247 = v239 + *(float *)v101.i32;
        BOOL v243 = (float)(v239 + *(float *)v101.i32) <= 8191.0;
        float v248 = 8191.0;
        if (v243)
        {
          float v248 = v247;
          if (v247 < 0.0) {
            float v248 = 0.0;
          }
        }
        _H0 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v217, 0.0), 8191.0))];
        __asm { FCVT            S1, H0 }
        _H0 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v220, 0.0), 8191.0))];
        __asm { FCVT            S2, H0 }
        _H0 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v223, 0.0), 8191.0))];
        __asm { FCVT            S3, H0 }
        _H21 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v226, 0.0), 8191.0))];
        _H10 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v227, 0.0), 8191.0))];
        _H29 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v229, 0.0), 8191.0))];
        _H23 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v235, 0.0), 8191.0))];
        _H24 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v238, 0.0), 8191.0))];
        _H26 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v241, 0.0), 8191.0))];
        _H4 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v244, 0.0), 8191.0))];
        _H5 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v246, 0.0), 8191.0))];
        _H7 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v248, 0.0), 8191.0))];
        float v264 = (float)((float)((float)(v375 * _S2) + (float)(v376 * _S1)) + (float)(v374 * _S3))
             + (float)(v373 * fmaxf(_S1, fmaxf(_S2, _S3)));
        float v265 = 8191.0;
        if (v264 <= 8191.0)
        {
          float v265 = v264;
          if (v264 < 0.0) {
            float v265 = 0.0;
          }
        }
        __asm
        {
          FCVT            S16, H21
          FCVT            S12, H10
          FCVT            S20, H29
        }
        _H21 = *(_WORD *)&v48[2 * llroundf(v265)];
        float v270 = (float)((float)((float)(v375 * _S12) + (float)(v376 * _S16)) + (float)(v374 * _S20))
             + (float)(v373 * fmaxf(_S16, fmaxf(_S12, _S20)));
        float v271 = 8191.0;
        if (v270 <= 8191.0)
        {
          float v271 = v270;
          if (v270 < 0.0) {
            float v271 = 0.0;
          }
        }
        __asm
        {
          FCVT            S31, H23
          FCVT            S9, H24
          FCVT            S28, H26
        }
        _H30 = *(_WORD *)&v48[2 * llroundf(v271)];
        float v276 = (float)((float)((float)(v375 * _S9) + (float)(v376 * _S31)) + (float)(v374 * _S28))
             + (float)(v373 * fmaxf(_S31, fmaxf(_S9, _S28)));
        float v277 = 8191.0;
        if (v276 <= 8191.0)
        {
          float v277 = v276;
          if (v276 < 0.0) {
            float v277 = 0.0;
          }
        }
        __asm
        {
          FCVT            S26, H4
          FCVT            S29, H5
          FCVT            S10, H7
          FCVT            S4, H21
        }
        float v282 = _S1 * _S4;
        float v283 = _S2 * _S4;
        float v284 = _S3 * _S4;
        __asm { FCVT            S1, H30 }
        float v286 = _S16 * _S1;
        float v287 = _S12 * _S1;
        float v288 = _S20 * _S1;
        _H0 = *(_WORD *)&v48[2 * llroundf(v277)];
        __asm { FCVT            S0, H0 }
        float v291 = _S31 * _S0;
        float v292 = _S9 * _S0;
        float v293 = _S28 * _S0;
        float v294 = (float)((float)((float)(v375 * _S29) + (float)(v376 * _S26)) + (float)(v374 * _S10))
             + (float)(v373 * fmaxf(_S26, fmaxf(_S29, _S10)));
        float v295 = 8191.0;
        if (v294 <= 8191.0)
        {
          float v295 = v294;
          if (v294 < 0.0) {
            float v295 = 0.0;
          }
        }
        _H0 = *(_WORD *)&v48[2 * llroundf(v295)];
        __asm { FCVT            S0, H0 }
        _S16 = _S26 * _S0;
        float v299 = _S29 * _S0;
        float v300 = _S10 * _S0;
        float v301 = (float)((float)(v405 * v283) + (float)(v282 * v406)) + (float)(v284 * v386);
        float v302 = (float)((float)(v384 * v283) + (float)(v282 * v385)) + (float)(v284 * v383);
        _S21 = (float)((float)(v379 * v283) + (float)(v282 * v381)) + (float)(v284 * v378);
        float v304 = (float)((float)(v405 * v287) + (float)(v286 * v406)) + (float)(v288 * v386);
        _S24 = (float)((float)(v384 * v287) + (float)(v286 * v385)) + (float)(v288 * v383);
        _S5 = (float)((float)(v379 * v287) + (float)(v286 * v381)) + (float)(v288 * v378);
        float v307 = (float)((float)(v405 * v292) + (float)(v291 * v406)) + (float)(v293 * v386);
        float v308 = (float)((float)(v384 * v292) + (float)(v291 * v385)) + (float)(v293 * v383);
        float v309 = (float)((float)(v379 * v292) + (float)(v291 * v381)) + (float)(v293 * v378);
        float v310 = (float)((float)(v405 * v299) + (float)(_S16 * v406)) + (float)(v300 * v386);
        float v311 = (float)((float)(v384 * v299) + (float)(_S16 * v385)) + (float)(v300 * v383);
        _S0 = (float)((float)(v379 * v299) + (float)(_S16 * v381)) + (float)(v300 * v378);
        _H1 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v301, 0.0), 8191.0))];
        __asm { FCVT            S3, H1 }
        _H1 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v302, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H4 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v304, 0.0), 8191.0))];
        __asm { FCVT            S4, H4 }
        _H7 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0))];
        LOWORD(_S5) = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
        __asm
        {
          FCVT            S7, H7
          FCVT            S5, H5
        }
        LOWORD(_S16) = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v307, 0.0), 8191.0))];
        __asm { FCVT            S20, H16 }
        LOWORD(_S16) = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v308, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        LOWORD(_S21) = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v309, 0.0), 8191.0))];
        __asm { FCVT            S23, H21 }
        LOWORD(_S21) = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v310, 0.0), 8191.0))];
        __asm { FCVT            S21, H21 }
        LOWORD(_S24) = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v311, 0.0), 8191.0))];
        LOWORD(_S0) = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
        __asm
        {
          FCVT            S24, H24
          FCVT            S26, H0
        }
        float v330 = (float)((float)((float)(v407 * _S1) + (float)(v398 * _S3)) + (float)(v399 * _S2)) + v47;
        if (v330 < v47) {
          float v331 = v47;
        }
        else {
          float v331 = (float)((float)((float)(v407 * _S1) + (float)(v398 * _S3)) + (float)(v399 * _S2)) + v47;
        }
        BOOL v243 = v330 <= v394;
        float v332 = (float)((float)((float)(v407 * _S7) + (float)(v398 * _S4)) + (float)(v399 * _S5)) + v47;
        if (!v243) {
          float v331 = v394;
        }
        __int8 v333 = llroundf(v331);
        if (v332 < v47) {
          float v334 = v47;
        }
        else {
          float v334 = (float)((float)((float)(v407 * _S7) + (float)(v398 * _S4)) + (float)(v399 * _S5)) + v47;
        }
        BOOL v243 = v332 <= v394;
        float v335 = (float)((float)((float)(v407 * _S16) + (float)(v398 * _S20)) + (float)(v399 * _S23)) + v47;
        if (!v243) {
          float v334 = v394;
        }
        __int8 v336 = llroundf(v334);
        if (v335 < v47) {
          float v337 = v47;
        }
        else {
          float v337 = (float)((float)((float)(v407 * _S16) + (float)(v398 * _S20)) + (float)(v399 * _S23)) + v47;
        }
        BOOL v243 = v335 <= v394;
        float v338 = (float)((float)((float)(v407 * _S24) + (float)(v398 * _S21)) + (float)(v399 * _S26)) + v47;
        if (!v243) {
          float v337 = v394;
        }
        __int8 v339 = llroundf(v337);
        if (v338 < v47) {
          float v340 = v47;
        }
        else {
          float v340 = (float)((float)((float)(v407 * _S24) + (float)(v398 * _S21)) + (float)(v399 * _S26)) + v47;
        }
        if (v338 <= v394) {
          float v341 = v340;
        }
        else {
          float v341 = v394;
        }
        __int8 v342 = llroundf(v341);
        float v343 = (float)((float)(_S3 + _S4) + _S20) + _S21;
        float v344 = (float)((float)(_S1 + _S7) + _S16) + _S24;
        v73->i8[0] = v333;
        v73->i8[1] = v336;
        v107->i8[0] = v339;
        v107->i8[1] = v342;
        float v345 = (float)((float)(_S2 + _S5) + _S23) + _S26;
        float v346 = (float)((float)(v356 + (float)(v343 * *(float *)&v404)) + (float)(v344 * *(float *)&v403))
             + (float)(v345 * *(float *)&v401);
        float v347 = v51;
        if (v346 <= v51)
        {
          float v347 = (float)((float)(v356 + (float)(v343 * *(float *)&v404)) + (float)(v344 * *(float *)&v403))
               + (float)(v345 * *(float *)&v401);
          if (v346 < v411) {
            float v347 = v411;
          }
        }
        float v348 = (float)((float)(v356 + (float)(v343 * *((float *)&v404 + 1))) + (float)(v344 * *((float *)&v403 + 1)))
             + (float)(v345 * *((float *)&v401 + 1));
        unsigned char *v210 = llroundf(v347);
        *(float *)_D0.i32 = v51;
        float v36 = v408;
        float v37 = v409;
        _S31 = v377;
        v8.i32[0] = v410;
        float16x8_t v58 = v382;
        _H10 = v357;
        v101.i64[0] = 0x9000900090009000;
        v101.i64[1] = 0x9000900090009000;
        if (v348 <= v51)
        {
          *(float *)_D0.i32 = v348;
          if (v348 < v411) {
            *(float *)_D0.i32 = v411;
          }
        }
        v211 += 2;
        v77 += 2;
        v78 = (int8x8_t *)((char *)v78 + 2);
        v209 += 2;
        v106 = (int8x8_t *)((char *)v106 + 2);
        v210[1] = llroundf(*(float *)_D0.i32);
        int v73 = (int8x8_t *)((char *)v73 + 2);
        v107 = (int8x8_t *)((char *)v107 + 2);
        v210 += 2;
        v9.i32[0] = v396;
        float16x8_t v54 = v397;
        float16x8_t v57 = v395;
        float16x8_t v66 = v393;
        float16x8_t v98 = (float16x8_t)v402;
      }
      v78 = (int8x8_t *)&v102[v28];
      int v77 = &v103[v27];
      int v73 = (int8x8_t *)&v104[v30];
      uint64_t result = (void *)((char *)result + v355);
      v15 += 2;
      v79 += 2 * v27;
    }
    while (v19 > v15);
    if (v352 && v351)
    {
      do
      {
        uint64_t result = memcpy(v49, v29, v16);
        v29 += v349;
        v49 += v350;
        --v19;
      }
      while (v19);
    }
    else if (v351)
    {
      do
      {
        if (v16) {
          uint64_t result = memset(v49, 255, v16);
        }
        v49 += v350;
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

char *vt_Copy_422vf_TRC_Tone_Mat_TRC_420vf_GCD(char *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    size_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 36);
    uint64_t v12 = *(void *)(result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = *((void *)result + 14);
    uint64_t v15 = (void *)*((void *)result + 16);
    uint64_t v16 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v17 = *((void *)result + 19);
    uint64_t v19 = (void *)*((void *)result + 7);
    uint64_t v18 = (uint64_t *)*((void *)result + 8);
    uint64_t v20 = (uint64_t *)*((void *)result + 17);
    uint64_t v21 = *v18;
    uint64_t v22 = v18[1];
    uint64_t v23 = v18[2];
    uint64_t v208 = v19[2];
    uint64_t v24 = (char *)(v208 + v23 * v12 + v11);
    uint64_t v25 = *v20;
    uint64_t v26 = v20[1];
    uint64_t v27 = v20[2];
    uint64_t v28 = v15[2];
    uint64_t v29 = (char *)(v28 + v27 * v16 + v14);
    *(float *)&unsigned int v30 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    float v31 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v32 = (float)LODWORD(a5);
    float v33 = *(float *)&v30 * *(float *)v17;
    float v34 = *(float *)&v30 * *(float *)(v17 + 8);
    float v35 = *(float *)&v30 * *(float *)(v17 + 16);
    float v36 = *(float *)&v30 * *(float *)(v17 + 20);
    float v37 = *(float *)&v30 * *(float *)(v17 + 28);
    LOWORD(v30) = *(_WORD *)(v17 + 144);
    float v38 = (float)v30;
    LOWORD(v30) = *(_WORD *)(v17 + 146);
    float v39 = (float)v30;
    LOWORD(v30) = *(_WORD *)(v17 + 148);
    float v40 = (float)v30;
    LOWORD(v30) = *(_WORD *)(v17 + 150);
    *(float *)&unsigned int v41 = (float)v30;
    float v239 = *(float *)&v41;
    LOWORD(v41) = *(_WORD *)(v17 + 152);
    float v42 = (float)v41;
    float v231 = *(float *)(v17 + 40);
    float v232 = *(float *)(v17 + 36);
    float v229 = *(float *)(v17 + 48) * 0.25;
    float v230 = *(float *)(v17 + 44);
    float v227 = *(float *)(v17 + 56) * 0.25;
    float v228 = *(float *)(v17 + 52) * 0.25;
    float v225 = *(float *)(v17 + 64) * 0.25;
    float v226 = *(float *)(v17 + 60) * 0.25;
    float v43 = *(float *)(v17 + 72);
    float v223 = *(float *)(v17 + 68) * 0.25;
    float v224 = v43;
    float v221 = *(float *)(v17 + 80);
    float v222 = *(float *)(v17 + 76);
    float v219 = *(float *)(v17 + 88);
    float v220 = *(float *)(v17 + 84);
    float v217 = *(float *)(v17 + 96);
    float v218 = *(float *)(v17 + 92);
    float v216 = *(float *)(v17 + 100);
    float v44 = *(float *)(v17 + 104);
    float v214 = v44;
    uint64_t v45 = v17 + 164;
    uint64_t v46 = v19[1];
    float v47 = (unsigned char *)(*v19 + *v18 * v12 + v11);
    uint64_t result = (char *)(v46 + v22 * v12 + v11);
    uint64_t v48 = v17 + 16548;
    if (!v46) {
      uint64_t result = 0;
    }
    uint64_t v49 = *v15 + v25 * v16;
    uint64_t v50 = v15[1] + v26 * (v16 / 2);
    uint64_t v51 = v17 + 32932;
    int v52 = (unsigned char *)(v49 + v14);
    uint64_t v53 = v50 + v14;
    float v54 = *(float *)(v17 + 108);
    float v55 = *(float *)(v17 + 112);
    float v57 = *(float *)(v17 + 116);
    float v56 = *(float *)(v17 + 120);
    float v237 = (float)LODWORD(a5);
    float v238 = v31;
    float v235 = v34;
    float v236 = v33;
    float v233 = v42;
    float v234 = v39;
    float v215 = v37;
    float v212 = v35;
    float v213 = v36;
    float v210 = v54;
    float v211 = v55;
    float v209 = v57;
    do
    {
      float16x8_t v58 = &v52[v25];
      int v59 = &result[v22];
      int v60 = &v47[v21];
      if (v10)
      {
        size_t v61 = 0;
        int v62 = &v47[v21];
        int v63 = &v52[v25];
        do
        {
          LOBYTE(v44) = result[v61 + 1];
          float v64 = (float)LODWORD(v44) - v32;
          float v65 = v34 * v64;
          LOBYTE(v43) = *v47;
          float v66 = v33 * (float)((float)LODWORD(v43) - v31);
          float v67 = (float)(v34 * v64) + v66;
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = (float)(v34 * v64) + v66;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          LOBYTE(v67) = result[v61];
          float v69 = (float)LODWORD(v67) - v32;
          float v70 = (float)(v36 * v64) + (float)(v69 * v35);
          float v71 = 8191.0;
          if ((float)(v66 + v70) <= 8191.0)
          {
            float v71 = v66 + v70;
            if ((float)(v66 + v70) < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v37 * v69;
          float v73 = v72 + v66;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          LOBYTE(v73) = v47[1];
          float v75 = v33 * (float)((float)LODWORD(v73) - v31);
          float v76 = v65 + v75;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = 8191.0;
          if ((float)(v70 + v75) <= 8191.0)
          {
            float v78 = v70 + v75;
            if ((float)(v70 + v75) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v72 + v75;
          BOOL v80 = (float)(v72 + v75) <= 8191.0;
          float v81 = 8191.0;
          if (v80)
          {
            float v81 = v79;
            if (v79 < 0.0) {
              float v81 = 0.0;
            }
          }
          LOBYTE(v79) = v59[v61 + 1];
          *(float *)&unsigned int v82 = (float)LODWORD(v79);
          float v83 = *(float *)&v82 - v32;
          float v84 = v34 * (float)(*(float *)&v82 - v32);
          LOBYTE(v82) = *v62;
          float v85 = v33 * (float)((float)v82 - v31);
          float v86 = 8191.0;
          if ((float)(v84 + v85) <= 8191.0)
          {
            float v86 = v84 + v85;
            if ((float)(v84 + v85) < 0.0) {
              float v86 = 0.0;
            }
          }
          LOBYTE(v42) = v59[v61];
          float v87 = (float)LODWORD(v42) - v32;
          float v88 = (float)(v36 * v83) + (float)(v87 * v35);
          float v89 = 8191.0;
          if ((float)(v85 + v88) <= 8191.0)
          {
            float v89 = v85 + v88;
            if ((float)(v85 + v88) < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v37 * v87;
          float v91 = v90 + v85;
          BOOL v80 = (float)(v90 + v85) <= 8191.0;
          float v92 = 8191.0;
          if (v80)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          LOBYTE(v72) = v62[1];
          float v93 = v33 * (float)((float)LODWORD(v72) - v31);
          float v94 = v84 + v93;
          BOOL v80 = (float)(v84 + v93) <= 8191.0;
          float v95 = 8191.0;
          if (v80)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          float v96 = v88 + v93;
          float v97 = 8191.0;
          if (v96 <= 8191.0)
          {
            float v97 = v96;
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          float v98 = v90 + v93;
          float v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          _H20 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S28, H20 }
          _H20 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          unsigned int v107 = llroundf(fminf(fmaxf(v74, 0.0), 8191.0));
          __asm { FCVT            S19, H20 }
          _H20 = *(_WORD *)(v45 + 2 * v107);
          __asm { FCVT            S30, H20 }
          _H22 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H20 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          float v120 = fmaxf(_S28, fmaxf(_S19, _S30));
          float v121 = (float)((float)((float)(v55 * _S19) + (float)(v54 * _S28)) + (float)(v57 * _S30)) + (float)(v56 * v120);
          float v122 = 8191.0;
          if (v121 <= 8191.0)
          {
            float v122 = (float)((float)((float)(v55 * _S19) + (float)(v54 * _S28)) + (float)(v57 * _S30))
                 + (float)(v56 * v120);
            if (v121 < 0.0) {
              float v122 = 0.0;
            }
          }
          __asm
          {
            FCVT            S3, H22
            FCVT            S17, H23
            FCVT            S21, H20
          }
          _H22 = *(_WORD *)(v48 + 2 * llroundf(v122));
          float v127 = (float)((float)((float)(v55 * _S17) + (float)(v54 * _S3)) + (float)(v57 * _S21))
               + (float)(v56 * fmaxf(_S3, fmaxf(_S17, _S21)));
          float v128 = 8191.0;
          if (v127 <= 8191.0)
          {
            float v128 = v127;
            if (v127 < 0.0) {
              float v128 = 0.0;
            }
          }
          __asm
          {
            FCVT            S8, H5
            FCVT            S9, H6
            FCVT            S10, H7
          }
          _H5 = *(_WORD *)(v48 + 2 * llroundf(v128));
          float v133 = fmaxf(_S8, fmaxf(_S9, _S10));
          float v134 = (float)((float)((float)(v55 * _S9) + (float)(v54 * _S8)) + (float)(v57 * _S10)) + (float)(v56 * v133);
          float v135 = 8191.0;
          if (v134 <= 8191.0)
          {
            float v135 = (float)((float)((float)(v55 * _S9) + (float)(v54 * _S8)) + (float)(v57 * _S10)) + (float)(v56 * v133);
            if (v134 < 0.0) {
              float v135 = 0.0;
            }
          }
          __asm
          {
            FCVT            S23, H1
            FCVT            S29, H2
            FCVT            S31, H4
            FCVT            S1, H22
          }
          float v140 = _S28 * _S1;
          float v141 = _S19 * _S1;
          float v142 = _S30 * _S1;
          __asm { FCVT            S1, H5 }
          float v144 = _S3 * _S1;
          float v145 = _S17 * _S1;
          float v146 = _S21 * _S1;
          LOWORD(_S1) = *(_WORD *)(v48 + 2 * llroundf(v135));
          __asm { FCVT            S2, H1 }
          float v148 = _S8 * _S2;
          float v149 = _S9 * _S2;
          float v150 = _S10 * _S2;
          float v151 = (float)((float)((float)(v55 * _S29) + (float)(v54 * _S23)) + (float)(v57 * _S31))
               + (float)(v56 * fmaxf(_S23, fmaxf(_S29, _S31)));
          float v152 = 8191.0;
          if (v151 <= 8191.0)
          {
            float v152 = v151;
            if (v151 < 0.0) {
              float v152 = 0.0;
            }
          }
          _H17 = *(_WORD *)(v48 + 2 * llroundf(v152));
          __asm { FCVT            S17, H17 }
          float v155 = _S23 * _S17;
          _S22 = _S29 * _S17;
          _S17 = _S31 * _S17;
          float v158 = (float)((float)(v222 * v141) + (float)(v140 * v224)) + (float)(v142 * v221);
          float v159 = (float)((float)(v219 * v141) + (float)(v140 * v220)) + (float)(v142 * v218);
          float v160 = (float)((float)(v216 * v141) + (float)(v140 * v217)) + (float)(v142 * v214);
          float v161 = (float)((float)(v222 * v145) + (float)(v144 * v224)) + (float)(v146 * v221);
          _S20 = (float)((float)(v219 * v145) + (float)(v144 * v220)) + (float)(v146 * v218);
          float v163 = (float)((float)(v216 * v145) + (float)(v144 * v217)) + (float)(v146 * v214);
          float v164 = (float)((float)(v222 * v149) + (float)(v148 * v224)) + (float)(v150 * v221);
          float v165 = (float)((float)(v219 * v149) + (float)(v148 * v220)) + (float)(v150 * v218);
          float v166 = (float)((float)(v216 * v149) + (float)(v148 * v217)) + (float)(v150 * v214);
          float v167 = (float)((float)(v222 * _S22) + (float)(v155 * v224)) + (float)(_S17 * v221);
          float v168 = (float)((float)(v219 * _S22) + (float)(v155 * v220)) + (float)(_S17 * v218);
          _S21 = (float)((float)(v216 * _S22) + (float)(v155 * v217)) + (float)(_S17 * v214);
          _H1 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          __asm { FCVT            S4, H2 }
          _H2 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          __asm { FCVT            S5, H2 }
          _H2 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          __asm { FCVT            S6, H2 }
          _H2 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S7, H3
          }
          _H3 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          _H3 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S17) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S20) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          LOWORD(_S22) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H22
            FCVT            S21, H21
          }
          float v190 = (float)((float)((float)(v231 * _S4) + (float)(v232 * _S1)) + (float)(v230 * _S5)) + v38;
          if (v190 < v38) {
            float v191 = v38;
          }
          else {
            float v191 = (float)((float)((float)(v231 * _S4) + (float)(v232 * _S1)) + (float)(v230 * _S5)) + v38;
          }
          BOOL v80 = v190 <= v40;
          float v192 = (float)((float)((float)(v231 * _S2) + (float)(v232 * _S6)) + (float)(v230 * _S7)) + v38;
          if (!v80) {
            float v191 = v40;
          }
          char v193 = llroundf(v191);
          if (v192 < v38) {
            float v194 = v38;
          }
          else {
            float v194 = (float)((float)((float)(v231 * _S2) + (float)(v232 * _S6)) + (float)(v230 * _S7)) + v38;
          }
          BOOL v80 = v192 <= v40;
          float v195 = (float)((float)((float)(v231 * _S3) + (float)(v232 * _S19)) + (float)(v230 * _S17)) + v38;
          if (!v80) {
            float v194 = v40;
          }
          char v196 = llroundf(v194);
          if (v195 < v38) {
            float v197 = v38;
          }
          else {
            float v197 = (float)((float)((float)(v231 * _S3) + (float)(v232 * _S19)) + (float)(v230 * _S17)) + v38;
          }
          BOOL v80 = v195 <= v40;
          float v198 = (float)((float)((float)(v231 * _S22) + (float)(v232 * _S20)) + (float)(v230 * _S21)) + v38;
          if (!v80) {
            float v197 = v40;
          }
          char v199 = llroundf(v197);
          if (v198 < v38) {
            float v200 = v38;
          }
          else {
            float v200 = (float)((float)((float)(v231 * _S22) + (float)(v232 * _S20)) + (float)(v230 * _S21)) + v38;
          }
          if (v198 <= v40) {
            float v201 = v200;
          }
          else {
            float v201 = v40;
          }
          float v202 = (float)((float)(_S1 + _S6) + _S19) + _S20;
          float v203 = (float)((float)(_S4 + _S2) + _S3) + _S22;
          *int v52 = v193;
          v52[1] = v196;
          *int v63 = v199;
          v63[1] = llroundf(v201);
          float v204 = (float)(_S5 + _S7) + _S17;
          float v42 = v233;
          float v43 = v204 + _S21;
          float v205 = (float)((float)(v234 + (float)(v202 * v229)) + (float)(v203 * v228)) + (float)(v43 * v227);
          float v206 = v233;
          if (v205 <= v233)
          {
            float v206 = (float)((float)(v234 + (float)(v202 * v229)) + (float)(v203 * v228)) + (float)(v43 * v227);
            if (v205 < v239) {
              float v206 = v239;
            }
          }
          float v207 = (float)((float)(v234 + (float)(v202 * v226)) + (float)(v203 * v225)) + (float)(v43 * v223);
          *(unsigned char *)(v53 + v61) = llroundf(v206);
          float v44 = v233;
          float v32 = v237;
          float v31 = v238;
          float v34 = v235;
          float v33 = v236;
          float v35 = v212;
          float v36 = v213;
          float v37 = v215;
          if (v207 <= v233)
          {
            float v44 = v207;
            if (v207 < v239) {
              float v44 = v239;
            }
          }
          v47 += 2;
          v62 += 2;
          v52 += 2;
          v63 += 2;
          *(unsigned char *)(v53 + v61 + 1) = llroundf(v44);
          v61 += 2;
          float v54 = v210;
          float v55 = v211;
          float v57 = v209;
        }
        while (v10 > v61);
      }
      float v47 = &v60[v21];
      uint64_t result = &v59[v22];
      int v52 = &v58[v25];
      v53 += v26;
      v9 += 2;
    }
    while (v13 > v9);
    if (v208 && v28)
    {
      do
      {
        uint64_t result = (char *)memcpy(v29, v24, v10);
        v24 += v23;
        v29 += v27;
        --v13;
      }
      while (v13);
    }
    else if (v28)
    {
      do
      {
        if (v10) {
          uint64_t result = (char *)memset(v29, 255, v10);
        }
        v29 += v27;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_420vf_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, float32x4_t a6, double a7, double a8)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = 2 * *result;
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (2 * v14 != 2 * v13)
  {
    unint64_t v15 = 0;
    size_t v16 = *(void *)(result + 20);
    uint64_t v17 = *(void *)(result + 36);
    uint64_t v18 = *(void *)(result + 44) + 2 * v13;
    unint64_t v19 = 2 * v14 - 2 * v13;
    uint64_t v20 = *((void *)result + 14);
    uint64_t v21 = (uint64_t *)*((void *)result + 16);
    uint64_t v22 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v12);
    uint64_t v23 = (float32x2_t *)*((void *)result + 19);
    uint64_t v24 = (void *)*((void *)result + 7);
    uint64_t v25 = (uint64_t *)*((void *)result + 8);
    uint64_t v26 = (uint64_t *)*((void *)result + 17);
    uint64_t v27 = *v25;
    uint64_t v28 = v25[1];
    uint64_t v295 = v25[2];
    uint64_t v298 = v24[2];
    uint64_t v29 = (char *)(v298 + v295 * v18 + v17);
    uint64_t v30 = *v26;
    uint64_t v31 = v26[1];
    uint64_t v296 = v26[2];
    uint64_t v297 = v21[2];
    float v32 = (float)v23[16].u32[0];
    unsigned int v33 = v23[17].u16[2];
    unsigned int v34 = v23[17].u16[3];
    v35.i32[0] = v23[3].i32[1];
    LODWORD(a3) = 1174403072;
    LODWORD(v26) = v23[18].u16[0];
    float v36 = (float)v33;
    *(short float *)v9.i16 = (short float)v33;
    unsigned int v37 = v23[18].u16[1];
    float v38 = (float)v34;
    short float v39 = (short float)v34;
    unsigned int v40 = v23[18].u16[2];
    LODWORD(a4) = v23[5].i32[1];
    v10.i32[0] = v23[6].i32[0];
    float v342 = *(float *)&a4;
    v42.i32[0] = v23[6].i32[1];
    v41.i32[0] = v23[7].i32[0];
    v35.i32[1] = v23[1].i32[0];
    v10.i32[1] = v23[7].i32[1];
    v42.i32[1] = v23[8].i32[0];
    v41.i32[1] = v23[8].i32[1];
    unsigned int v43 = v23[18].u16[3];
    float v44 = (float)v26;
    *(short float *)&a4 = (short float)v26;
    unsigned int v45 = v23[19].u16[0];
    _S11 = v23[4].i32[1];
    _S28 = v23[5].f32[0];
    _S14 = v23[9].i32[0];
    _S9 = v23[9].i32[1];
    *(float *)&a5 = (float)v37;
    float v302 = (float)v37;
    *(short float *)&a5 = (short float)v37;
    uint64_t v50 = (char *)&v23[20] + 4;
    uint64_t v51 = (char *)(v297 + v296 * v22 + v20);
    float v332 = (float)v40;
    *(float *)&a8 = (float)v43;
    float v345 = (float)v43;
    float v52 = (float)v45;
    _S4 = (float)(8191.0 / v32) * v23->f32[0];
    *(short float *)&a8 = (short float)v40;
    float v54 = (char *)&v23[2068] + 4;
    float16x8_t v55 = (float16x8_t)vdupq_lane_s16(v9, 0);
    *(float32x2_t *)v8.f32 = vmul_n_f32(v35, 8191.0 / v32);
    *(float16x4_t *)&_Q6 = vcvt_f16_f32(v8);
    *((double *)&_Q6 + 1) = a3;
    float16x8_t v56 = (float16x8_t)vdupq_lane_s32(*(int32x2_t *)&_Q6, 0);
    *(short float *)&_Q6 = -v39;
    *(float32x2_t *)a6.f32 = vmul_n_f32(v23[2], 8191.0 / v32);
    unint64_t v347 = a6.i64[0];
    int32x2_t v58 = (int32x2_t)vcvt_f16_f32(a6);
    *(double *)&v59.i64[1] = a3;
    float16x8_t v60 = (float16x8_t)vdupq_lane_s32(v58, 0);
    float16x8_t v61 = vmulq_n_f16(v56, -v39);
    __asm { FMOV            V3.2S, #0.25 }
    *(float32x2_t *)v10.f32 = vmul_f32(*(float32x2_t *)v10.f32, _D3);
    float32x4_t v67 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float16x8_t v322 = (float16x8_t)v67;
    *(float32x2_t *)v67.f32 = vmul_f32(v42, _D3);
    uint64_t v341 = v67.i64[0];
    float16x8_t v68 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v67), 0);
    *(float32x2_t *)v59.f32 = vmul_f32(v41, _D3);
    uint64_t v340 = v59.i64[0];
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    float16x8_t v70 = vmulq_n_f16(v60, *(short float *)&_Q6);
    float16x8_t v338 = v70;
    int32x4_t v339 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v59), 0);
    int16x8_t v71 = vdupq_lane_s16(*(int16x4_t *)&a5, 0);
    int16x8_t v72 = vdupq_lane_s16(*(int16x4_t *)&a8, 0);
    *(short float *)v70.i16 = (short float)v43;
    int16x8_t v73 = vdupq_lane_s16(*(int16x4_t *)v70.i8, 0);
    float16x8_t v326 = (float16x8_t)v73;
    *(short float *)v73.i16 = (short float)v45;
    int16x8_t v74 = vdupq_lane_s16(*(int16x4_t *)v73.i8, 0);
    if (v22 >= 0) {
      uint64_t v75 = v22;
    }
    else {
      uint64_t v75 = v22 + 1;
    }
    uint64_t v76 = *v21;
    float v77 = (unsigned char *)(v21[1] + v31 * (v75 >> 1) + v20);
    uint64_t result = (unsigned __int8 *)(v76 + v30 * v22 + v20);
    BOOL v80 = v24;
    uint64_t v78 = *v24;
    uint64_t v79 = v80[1];
    float v81 = (unsigned char *)(v79 + v28 * v18 + v17);
    if (!v79) {
      float v81 = 0;
    }
    unsigned int v82 = (int8x8_t *)(v78 + v27 * v18 + v17);
    float v83 = &v81[v28];
    __asm { FCVT            H10, S4 }
    short float v315 = _H10;
    float v337 = v23[4].f32[1];
    __asm
    {
      FCVT            H10, S11
      FCVT            H11, S28
    }
    _Q3.i32[0] = v23[5].i32[1];
    __asm { FCVT            H3, S3 }
    short float v312 = *(short float *)_Q3.i16;
    float v336 = v23[9].f32[0];
    __asm { FCVT            H3, S14 }
    float v335 = v23[9].f32[1];
    __asm { FCVT            H6, S9 }
    short float v310 = *(short float *)&_Q6;
    float16x8_t v88 = v338;
    float v324 = v23[10].f32[0];
    __asm { FCVT            H6, S22 }
    float v323 = v23[10].f32[1];
    __asm { FCVT            H12, S12 }
    float v321 = v23[11].f32[0];
    __asm { FCVT            H13, S13 }
    float v319 = v23[11].f32[1];
    __asm { FCVT            H7, S2 }
    short float v306 = _H7;
    float v318 = v23[12].f32[0];
    __asm { FCVT            H7, S19 }
    float v317 = v23[12].f32[1];
    __asm { FCVT            H2, S23 }
    short float v304 = _H2;
    float v316 = v23[13].f32[0];
    __asm { FCVT            H2, S17 }
    float v346 = v8.f32[0];
    float16x8_t v95 = (float16x8_t)v339;
    float16x8_t v327 = (float16x8_t)v72;
    float16x8_t v328 = (float16x8_t)v71;
    float16x8_t v325 = (float16x8_t)v74;
    short float v311 = *(short float *)_Q3.i16;
    short float v303 = _H2;
    uint64_t v301 = v31;
    float16x8_t v334 = v61;
    float16x8_t v333 = v60;
    float16x8_t v330 = v69;
    float16x8_t v331 = v56;
    float16x8_t v329 = v55;
    float16x8_t v320 = v68;
    float v343 = v38;
    float v344 = _S4;
    short float v313 = _H11;
    short float v314 = _H10;
    short float v308 = _H12;
    long long v309 = _Q6;
    short float v307 = _H13;
    short float v305 = _H7;
    float v299 = (float)v45;
    float v300 = v36;
    do
    {
      float v96 = (char *)v82 + v27;
      float v97 = &v81[v28];
      float v98 = &result[v30];
      if ((int)v16 < 8)
      {
        size_t v189 = 0;
        v188 = v77;
        float16x8_t v101 = (int8x8_t *)&result[v30];
        uint32x4_t v187 = &v81[v28];
        float16x8_t v100 = (int8x8_t *)((char *)v82 + v27);
      }
      else
      {
        uint64_t v99 = 0;
        float16x8_t v100 = (int8x8_t *)((char *)v82 + v27);
        float16x8_t v101 = (int8x8_t *)&result[v30];
        v102.i64[0] = 0x9000900090009000;
        v102.i64[1] = 0x9000900090009000;
        do
        {
          int8x8_t v103 = *(int8x8_t *)&v81[v99];
          *(int8x8_t *)v104.i8 = vzip1_s8(v103, 0);
          v104.u64[1] = (unint64_t)vzip2_s8(v103, 0);
          float16x8_t v105 = vcvtq_f16_u16(v104);
          int16x8_t v106 = (int16x8_t)vmlaq_f16(v61, v56, v105);
          int8x16_t v107 = (int8x16_t)vmlaq_f16(v88, v60, v105);
          v105.i64[0] = vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u64[0];
          *(int16x4_t *)v108.i8 = vuzp1_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v105.i8);
          *(int16x4_t *)v105.i8 = vuzp2_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v105.i8);
          *(double *)&v105.i64[1] = a3;
          *(double *)&v108.i64[1] = a3;
          v106.i64[0] = vextq_s8(v107, v107, 8uLL).u64[0];
          *(float16x4_t *)v106.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v106.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v106.i8));
          *(double *)&v106.i64[1] = a3;
          int8x8_t v109 = *v82++;
          float16x8_t v110 = (float16x8_t)vzip1q_s16(v106, v106);
          *(int8x8_t *)v106.i8 = vzip1_s8(v109, 0);
          v106.u64[1] = (unint64_t)vzip2_s8(v109, 0);
          float16x8_t v111 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v106), v55);
          float16x8_t v112 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v105, (int16x8_t)v105), v111, v315);
          float16x8_t v113 = vmlaq_n_f16(v110, v111, v315);
          float16x8_t v114 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v108, v108), v111, v315);
          v111.i64[0] = *(void *)&v83[v99];
          *(int8x8_t *)v107.i8 = vzip1_s8(*(int8x8_t *)v111.i8, 0);
          v107.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v111.i8, 0);
          float16x8_t v115 = vcvtq_f16_u16((uint16x8_t)v107);
          int8x16_t v116 = (int8x16_t)vmlaq_f16(v61, v56, v115);
          int8x16_t v117 = (int8x16_t)vmlaq_f16(v88, v60, v115);
          v115.i64[0] = vextq_s8(v116, v116, 8uLL).u64[0];
          *(int16x4_t *)v118.i8 = vuzp1_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8);
          *(int16x4_t *)v115.i8 = vuzp2_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8);
          *(double *)&v115.i64[1] = a3;
          float16x8_t v119 = (float16x8_t)vzip1q_s16((int16x8_t)v115, (int16x8_t)v115);
          *(double *)&v118.i64[1] = a3;
          v115.i64[0] = vextq_s8(v117, v117, 8uLL).u64[0];
          *(float16x4_t *)v115.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v115.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v115.i8));
          *(double *)&v115.i64[1] = a3;
          int8x8_t v120 = *v100++;
          *(int8x8_t *)v117.i8 = vzip1_s8(v120, 0);
          v117.u64[1] = (unint64_t)vzip2_s8(v120, 0);
          float16x8_t v121 = (float16x8_t)vzip1q_s16((int16x8_t)v115, (int16x8_t)v115);
          float16x8_t v122 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v117), v55);
          float16x8_t v123 = vmlaq_n_f16(v119, v122, v315);
          float16x8_t v124 = vmlaq_n_f16(v121, v122, v315);
          float16x8_t v125 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v118, v118), v122, v315);
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v112, (float16x8_t)0), v102));
          uint32x4_t v127 = vmovl_high_u16(v126);
          uint32x4_t v128 = vmovl_u16(*(uint16x4_t *)v126.i8);
          v129.i16[0] = *(_WORD *)&v50[2 * v128.u32[0]];
          v129.i16[1] = *(_WORD *)&v50[2 * v128.u32[1]];
          v129.i16[2] = *(_WORD *)&v50[2 * v128.u32[2]];
          v129.i16[3] = *(_WORD *)&v50[2 * v128.u32[3]];
          v129.i16[4] = *(_WORD *)&v50[2 * v127.u32[0]];
          v129.i16[5] = *(_WORD *)&v50[2 * v127.u32[1]];
          v129.i16[6] = *(_WORD *)&v50[2 * v127.u32[2]];
          v129.i16[7] = *(_WORD *)&v50[2 * v127.u32[3]];
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, (float16x8_t)0), v102));
          uint32x4_t v131 = vmovl_high_u16(v130);
          uint32x4_t v132 = vmovl_u16(*(uint16x4_t *)v130.i8);
          v113.i16[0] = *(_WORD *)&v50[2 * v132.u32[0]];
          v113.i16[1] = *(_WORD *)&v50[2 * v132.u32[1]];
          v113.i16[2] = *(_WORD *)&v50[2 * v132.u32[2]];
          v113.i16[3] = *(_WORD *)&v50[2 * v132.u32[3]];
          v113.i16[4] = *(_WORD *)&v50[2 * v131.u32[0]];
          v113.i16[5] = *(_WORD *)&v50[2 * v131.u32[1]];
          v113.i16[6] = *(_WORD *)&v50[2 * v131.u32[2]];
          v113.i16[7] = *(_WORD *)&v50[2 * v131.u32[3]];
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v102));
          uint32x4_t v134 = vmovl_high_u16(v133);
          uint32x4_t v135 = vmovl_u16(*(uint16x4_t *)v133.i8);
          v136.i64[0] = 0x9000900090009000;
          v136.i64[1] = 0x9000900090009000;
          v137.i16[0] = *(_WORD *)&v50[2 * v135.u32[0]];
          v137.i16[1] = *(_WORD *)&v50[2 * v135.u32[1]];
          v137.i16[2] = *(_WORD *)&v50[2 * v135.u32[2]];
          v137.i16[3] = *(_WORD *)&v50[2 * v135.u32[3]];
          v137.i16[4] = *(_WORD *)&v50[2 * v134.u32[0]];
          v137.i16[5] = *(_WORD *)&v50[2 * v134.u32[1]];
          v137.i16[6] = *(_WORD *)&v50[2 * v134.u32[2]];
          v137.i16[7] = *(_WORD *)&v50[2 * v134.u32[3]];
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v136));
          uint32x4_t v139 = vmovl_high_u16(v138);
          uint32x4_t v140 = vmovl_u16(*(uint16x4_t *)v138.i8);
          v114.i16[0] = *(_WORD *)&v50[2 * v140.u32[0]];
          v114.i16[1] = *(_WORD *)&v50[2 * v140.u32[1]];
          v114.i16[2] = *(_WORD *)&v50[2 * v140.u32[2]];
          v114.i16[3] = *(_WORD *)&v50[2 * v140.u32[3]];
          v114.i16[4] = *(_WORD *)&v50[2 * v139.u32[0]];
          v114.i16[5] = *(_WORD *)&v50[2 * v139.u32[1]];
          v114.i16[6] = *(_WORD *)&v50[2 * v139.u32[2]];
          v114.i16[7] = *(_WORD *)&v50[2 * v139.u32[3]];
          uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, (float16x8_t)0), v136));
          uint32x4_t v142 = vmovl_high_u16(v141);
          float16x8_t v143 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v141.i8);
          v143.i16[0] = *(_WORD *)&v50[2 * v143.u32[0]];
          v143.i16[1] = *(_WORD *)&v50[2 * v143.u32[1]];
          v143.i16[2] = *(_WORD *)&v50[2 * v143.u32[2]];
          v143.i16[3] = *(_WORD *)&v50[2 * v143.u32[3]];
          v143.i16[4] = *(_WORD *)&v50[2 * v142.u32[0]];
          v143.i16[5] = *(_WORD *)&v50[2 * v142.u32[1]];
          v143.i16[6] = *(_WORD *)&v50[2 * v142.u32[2]];
          v143.i16[7] = *(_WORD *)&v50[2 * v142.u32[3]];
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v125, (float16x8_t)0), v136));
          uint32x4_t v145 = vmovl_high_u16(v144);
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v144.i8);
          v147.i16[0] = *(_WORD *)&v50[2 * v146.u32[0]];
          v147.i16[1] = *(_WORD *)&v50[2 * v146.u32[1]];
          v147.i16[2] = *(_WORD *)&v50[2 * v146.u32[2]];
          v147.i16[3] = *(_WORD *)&v50[2 * v146.u32[3]];
          v147.i16[4] = *(_WORD *)&v50[2 * v145.u32[0]];
          v147.i16[5] = *(_WORD *)&v50[2 * v145.u32[1]];
          v147.i16[6] = *(_WORD *)&v50[2 * v145.u32[2]];
          v147.i16[7] = *(_WORD *)&v50[2 * v145.u32[3]];
          v124.i16[7] = HIWORD(v309);
          float16x8_t v148 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v311), v113, v310), v137, *(short float *)&v309);
          float16x8_t v149 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v308), v113, v307), v137, v306);
          float16x8_t v150 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v137, v303), v113, v304), v129, v305);
          float16x8_t v151 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v114, v311), v143, v310), v147, *(short float *)&v309);
          float16x8_t v152 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v114, v308), v143, v307), v147, v306);
          float16x8_t v153 = vmlaq_n_f16(vmulq_n_f16(v147, v303), v143, v304);
          uint16x8_t v154 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v148, (float16x8_t)0), v136));
          uint32x4_t v155 = vmovl_high_u16(v154);
          uint32x4_t v156 = vmovl_u16(*(uint16x4_t *)v154.i8);
          v124.i16[0] = *(_WORD *)&v54[2 * v156.u32[0]];
          v124.i16[1] = *(_WORD *)&v54[2 * v156.u32[1]];
          v124.i16[2] = *(_WORD *)&v54[2 * v156.u32[2]];
          v124.i16[3] = *(_WORD *)&v54[2 * v156.u32[3]];
          v124.i16[4] = *(_WORD *)&v54[2 * v155.u32[0]];
          v124.i16[5] = *(_WORD *)&v54[2 * v155.u32[1]];
          v124.i16[6] = *(_WORD *)&v54[2 * v155.u32[2]];
          uint16x8_t v157 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v149, (float16x8_t)0), v136));
          uint32x4_t v158 = vmovl_high_u16(v157);
          uint32x4_t v159 = vmovl_u16(*(uint16x4_t *)v157.i8);
          v113.i16[0] = *(_WORD *)&v54[2 * v159.u32[0]];
          v113.i16[1] = *(_WORD *)&v54[2 * v159.u32[1]];
          v113.i16[2] = *(_WORD *)&v54[2 * v159.u32[2]];
          v113.i16[3] = *(_WORD *)&v54[2 * v159.u32[3]];
          v113.i16[4] = *(_WORD *)&v54[2 * v158.u32[0]];
          v113.i16[5] = *(_WORD *)&v54[2 * v158.u32[1]];
          v113.i16[6] = *(_WORD *)&v54[2 * v158.u32[2]];
          float16x8_t v160 = (float16x8_t)vuzp1q_s16((int16x8_t)v124, (int16x8_t)v113);
          v124.i16[7] = *(_WORD *)&v54[2 * v155.u32[3]];
          v113.i16[7] = *(_WORD *)&v54[2 * v158.u32[3]];
          uint16x8_t v161 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v150, (float16x8_t)0), v136));
          uint32x4_t v162 = vmovl_high_u16(v161);
          *(void *)&long long v163 = v162.u32[2];
          *((void *)&v163 + 1) = v162.u32[3];
          long long v164 = v163;
          *(void *)&long long v163 = v162.u32[0];
          *((void *)&v163 + 1) = v162.u32[1];
          long long v165 = v163;
          int16x8_t v166 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v161.i8);
          *((void *)&v163 + 1) = v166.u32[3];
          v166.i16[7] = (unint64_t)v166.u32[1] >> 48;
          v166.i16[0] = *(_WORD *)&v54[2 * v166.u32[0]];
          v166.i16[1] = *(_WORD *)&v54[2 * v166.u32[1]];
          v166.i16[2] = *(_WORD *)&v54[2 * v166.u32[2]];
          v166.i16[3] = *(_WORD *)&v54[2 * *((void *)&v163 + 1)];
          v166.i16[4] = *(_WORD *)&v54[2 * v165];
          v166.i16[5] = *(_WORD *)&v54[2 * *((void *)&v165 + 1)];
          v166.i16[6] = *(_WORD *)&v54[2 * v164];
          float16x8_t v167 = (float16x8_t)v166;
          v167.i16[7] = *(_WORD *)&v54[2 * *((void *)&v164 + 1)];
          float16x8_t v168 = vmaxq_f16(v151, (float16x8_t)0);
          v102.i64[0] = 0x9000900090009000;
          v102.i64[1] = 0x9000900090009000;
          uint16x8_t v169 = vcvtq_u16_f16(vminq_f16(v168, v102));
          uint32x4_t v170 = vmovl_high_u16(v169);
          float16x8_t v171 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v169.i8);
          *(void *)&long long v163 = v170.u32[2];
          *((void *)&v163 + 1) = v170.u32[3];
          long long v172 = v163;
          *(void *)&long long v163 = v170.u32[0];
          *((void *)&v163 + 1) = v170.u32[1];
          long long v173 = v163;
          *((void *)&v163 + 1) = v171.u32[3];
          v171.i16[7] = (unint64_t)v171.u32[3] >> 48;
          v171.i16[0] = *(_WORD *)&v54[2 * v171.u32[0]];
          v171.i16[1] = *(_WORD *)&v54[2 * v171.u32[1]];
          v171.i16[2] = *(_WORD *)&v54[2 * v171.u32[2]];
          v171.i16[3] = *(_WORD *)&v54[2 * *((void *)&v163 + 1)];
          v171.i16[4] = *(_WORD *)&v54[2 * v173];
          v171.i16[5] = *(_WORD *)&v54[2 * *((void *)&v173 + 1)];
          v171.i16[6] = *(_WORD *)&v54[2 * v172];
          float16x8_t v174 = (__int16 *)&v54[2 * *((void *)&v172 + 1)];
          uint16x8_t v175 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v152, (float16x8_t)0), v102));
          uint32x4_t v176 = vmovl_high_u16(v175);
          float16x8_t v177 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v175.i8);
          *(void *)&long long v163 = v176.u32[2];
          *((void *)&v163 + 1) = v176.u32[3];
          long long v178 = v163;
          *(void *)&long long v163 = v176.u32[0];
          *((void *)&v163 + 1) = v176.u32[1];
          long long v179 = v163;
          *((void *)&v163 + 1) = v177.u32[3];
          v177.i16[7] = (unint64_t)v177.u32[3] >> 48;
          v177.i16[0] = *(_WORD *)&v54[2 * v177.u32[0]];
          v177.i16[1] = *(_WORD *)&v54[2 * v177.u32[1]];
          v177.i16[2] = *(_WORD *)&v54[2 * v177.u32[2]];
          v177.i16[3] = *(_WORD *)&v54[2 * *((void *)&v163 + 1)];
          v177.i16[4] = *(_WORD *)&v54[2 * v179];
          v177.i16[5] = *(_WORD *)&v54[2 * *((void *)&v179 + 1)];
          v177.i16[6] = *(_WORD *)&v54[2 * v178];
          float16x8_t v180 = (float16x8_t)vuzp1q_s16((int16x8_t)v171, (int16x8_t)v177);
          v171.i16[7] = *v174;
          v177.i16[7] = *(_WORD *)&v54[2 * *((void *)&v178 + 1)];
          uint16x8_t v181 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v153, v114, v305), (float16x8_t)0), v102));
          int16x8_t v182 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v181.i8);
          uint32x4_t v183 = vmovl_high_u16(v181);
          *(void *)&long long v163 = v183.u32[2];
          *((void *)&v163 + 1) = v183.u32[3];
          long long v184 = v163;
          *((void *)&v163 + 1) = v182.u32[3];
          v182.i16[7] = (unint64_t)v182.u32[3] >> 48;
          v182.i16[0] = *(_WORD *)&v54[2 * v182.u32[0]];
          v182.i16[1] = *(_WORD *)&v54[2 * v182.u32[1]];
          v182.i16[2] = *(_WORD *)&v54[2 * v182.u32[2]];
          v182.i16[3] = *(_WORD *)&v54[2 * *((void *)&v163 + 1)];
          v182.i16[4] = *(_WORD *)&v54[2 * v183.u32[0]];
          v182.i16[5] = *(_WORD *)&v54[2 * v183.u32[1]];
          v182.i16[6] = *(_WORD *)&v54[2 * v184];
          float16x8_t v185 = (float16x8_t)v182;
          v185.i16[7] = *(_WORD *)&v54[2 * *((void *)&v184 + 1)];
          *(int8x8_t *)uint64_t result = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v69, v124, v314), v113, v313), v167, v312), v69), v327)));
          result += 8;
          *v101++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v69, v171, v314), v177, v313), v185, v312), v69), v327)));
          int16x8_t v74 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v160, (float16x8_t)vuzp2q_s16((int16x8_t)v124, (int16x8_t)v113)), v180), (float16x8_t)vuzp2q_s16((int16x8_t)v171, (int16x8_t)v177));
          float16x8_t v186 = vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v166, v166), (float16x8_t)vtrn2q_s16((int16x8_t)v167, (int16x8_t)v167)), (float16x8_t)vtrn1q_s16(v182, v182));
          _Q3 = (float16x8_t)vzip1q_s16(v74, v74);
          *(int8x8_t *)v74.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v328, v322, _Q3), v68, (float16x8_t)vzip2q_s16(v74, v74)), v95, vaddq_f16(v186, (float16x8_t)vtrn2q_s16((int16x8_t)v185, (int16x8_t)v185))), v326), v325)));
          *(void *)&v77[v99] = v74.i64[0];
          v99 += 8;
        }
        while ((int)v99 < (int)v16 - 7);
        v81 += v99;
        uint32x4_t v187 = &v83[v99];
        v188 = &v77[v99];
        size_t v189 = v16 & 0xFFFFFFF8;
        uint64_t v31 = v301;
        float v52 = v299;
        float v36 = v300;
        float v38 = v343;
        _S4 = v344;
      }
      for (; v16 > v189; float16x8_t v95 = (float16x8_t)v339)
      {
        v74.i8[0] = v81[1];
        float v190 = (float)v74.u32[0] - v38;
        float v191 = v8.f32[1] * v190;
        _Q3.i8[0] = v82->i8[0];
        float v192 = _S4 * (float)((float)_Q3.u32[0] - v36);
        float v193 = (float)(v8.f32[1] * v190) + v192;
        float v194 = 8191.0;
        if (v193 <= 8191.0)
        {
          float v194 = v191 + v192;
          if (v193 < 0.0) {
            float v194 = 0.0;
          }
        }
        LOBYTE(v193) = *v81;
        float v195 = (float)LODWORD(v193) - v38;
        float v196 = (float)(*((float *)&v347 + 1) * v190) + (float)(v195 * *(float *)&v347);
        float v197 = 8191.0;
        if ((float)(v192 + v196) <= 8191.0)
        {
          float v197 = v192 + v196;
          if ((float)(v192 + v196) < 0.0) {
            float v197 = 0.0;
          }
        }
        float v198 = v346 * v195;
        float v199 = v198 + v192;
        float v200 = 8191.0;
        if (v199 <= 8191.0)
        {
          float v200 = v199;
          if (v199 < 0.0) {
            float v200 = 0.0;
          }
        }
        LOBYTE(v199) = v82->i8[1];
        float v201 = _S4 * (float)((float)LODWORD(v199) - v36);
        float v202 = v191 + v201;
        float v203 = 8191.0;
        if (v202 <= 8191.0)
        {
          float v203 = v202;
          if (v202 < 0.0) {
            float v203 = 0.0;
          }
        }
        float v204 = 8191.0;
        if ((float)(v196 + v201) <= 8191.0)
        {
          float v204 = v196 + v201;
          if ((float)(v196 + v201) < 0.0) {
            float v204 = 0.0;
          }
        }
        float v205 = v198 + v201;
        float v206 = 8191.0;
        if ((float)(v198 + v201) <= 8191.0)
        {
          float v206 = v198 + v201;
          if (v205 < 0.0) {
            float v206 = 0.0;
          }
        }
        LOBYTE(v205) = v187[1];
        float v207 = (float)LODWORD(v205) - v38;
        unsigned int v208 = v8.u32[1];
        float v209 = v8.f32[1] * v207;
        LOBYTE(v208) = v100->i8[0];
        float v210 = _S4 * (float)((float)v208 - v36);
        float v211 = (float)(v8.f32[1] * v207) + v210;
        float v212 = 8191.0;
        if (v211 <= 8191.0)
        {
          float v212 = v209 + v210;
          if (v211 < 0.0) {
            float v212 = 0.0;
          }
        }
        LOBYTE(v211) = *v187;
        float v213 = (float)LODWORD(v211) - v38;
        unsigned int v214 = v347;
        float v215 = (float)(*((float *)&v347 + 1) * v207) + (float)(v213 * *(float *)&v347);
        float v216 = 8191.0;
        if ((float)(v210 + v215) <= 8191.0)
        {
          float v216 = v210 + v215;
          if ((float)(v210 + v215) < 0.0) {
            float v216 = 0.0;
          }
        }
        float v217 = v346 * v213;
        float v218 = v217 + v210;
        BOOL v219 = (float)(v217 + v210) <= 8191.0;
        float v220 = 8191.0;
        if (v219)
        {
          float v220 = v218;
          if (v218 < 0.0) {
            float v220 = 0.0;
          }
        }
        LOBYTE(v214) = v100->i8[1];
        float v221 = _S4 * (float)((float)v214 - v36);
        float v222 = v209 + v221;
        BOOL v219 = (float)(v209 + v221) <= 8191.0;
        float v223 = 8191.0;
        if (v219)
        {
          float v223 = v222;
          if (v222 < 0.0) {
            float v223 = 0.0;
          }
        }
        float v224 = v215 + v221;
        BOOL v219 = (float)(v215 + v221) <= 8191.0;
        float v225 = 8191.0;
        if (v219)
        {
          float v225 = v224;
          if (v224 < 0.0) {
            float v225 = 0.0;
          }
        }
        float v226 = v36;
        float v227 = v217 + v221;
        float v228 = 8191.0;
        if (v227 <= 8191.0)
        {
          float v228 = v227;
          if (v227 < 0.0) {
            float v228 = 0.0;
          }
        }
        _H6 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v194, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        _H17 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v197, 0.0), 8191.0))];
        __asm { FCVT            S17, H17 }
        _H19 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v200, 0.0), 8191.0))];
        __asm { FCVT            S19, H19 }
        _H22 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v203, 0.0), 8191.0))];
        __asm { FCVT            S22, H22 }
        _H23 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v204, 0.0), 8191.0))];
        _H27 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v206, 0.0), 8191.0))];
        __asm
        {
          FCVT            S23, H23
          FCVT            S27, H27
        }
        _H11 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v212, 0.0), 8191.0))];
        unsigned int v242 = llroundf(fminf(fmaxf(v216, 0.0), 8191.0));
        __asm { FCVT            S7, H11 }
        _H11 = *(_WORD *)&v50[2 * v242];
        __asm { FCVT            S11, H11 }
        _H1 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v220, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v223, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H3 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v225, 0.0), 8191.0))];
        _H5 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v228, 0.0), 8191.0))];
        __asm
        {
          FCVT            S3, H3
          FCVT            S5, H5
        }
        float v254 = (float)((float)(v335 * _S17) + (float)(_S6 * v336)) + (float)(_S19 * v324);
        float v255 = (float)((float)(v321 * _S17) + (float)(_S6 * v323)) + (float)(_S19 * v319);
        _S6 = (float)((float)(v317 * _S17) + (float)(_S6 * v318)) + (float)(_S19 * v316);
        _S16 = (float)((float)(v335 * _S23) + (float)(_S22 * v336)) + (float)(_S27 * v324);
        float v258 = (float)((float)(v321 * _S23) + (float)(_S22 * v323)) + (float)(_S27 * v319);
        float v259 = (float)((float)(v317 * _S23) + (float)(_S22 * v318)) + (float)(_S27 * v316);
        float v260 = (float)((float)(v335 * _S11) + (float)(_S7 * v336)) + (float)(_S1 * v324);
        float v261 = (float)((float)(v321 * _S11) + (float)(_S7 * v323)) + (float)(_S1 * v319);
        _S7 = (float)((float)(v317 * _S11) + (float)(_S7 * v318)) + (float)(_S1 * v316);
        float v263 = (float)((float)(v335 * _S3) + (float)(_S2 * v336)) + (float)(_S5 * v324);
        float v264 = (float)((float)(v321 * _S3) + (float)(_S2 * v323)) + (float)(_S5 * v319);
        _S5 = (float)((float)(v317 * _S3) + (float)(_S2 * v318)) + (float)(_S5 * v316);
        LOWORD(_S1) = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v254, 0.0), 8191.0))];
        __asm { FCVT            S19, H1 }
        LOWORD(_S1) = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v255, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        LOWORD(_S2) = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0))];
        __asm { FCVT            S17, H2 }
        LOWORD(_S2) = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        LOWORD(_S3) = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v258, 0.0), 8191.0))];
        LOWORD(_S6) = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v259, 0.0), 8191.0))];
        __asm
        {
          FCVT            S23, H3
          FCVT            S22, H6
        }
        LOWORD(_S3) = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v260, 0.0), 8191.0))];
        __asm { FCVT            S6, H3 }
        LOWORD(_S3) = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v261, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        LOWORD(_S7) = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0))];
        __asm { FCVT            S27, H7 }
        LOWORD(_S7) = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v263, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        LOWORD(_S16) = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v264, 0.0), 8191.0))];
        LOWORD(_S5) = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
        __asm
        {
          FCVT            S16, H16
          FCVT            S5, H5
        }
        float v278 = (float)((float)((float)(_S28 * _S1) + (float)(v337 * _S19)) + (float)(v342 * _S17)) + v44;
        if (v278 < v44) {
          float v279 = v44;
        }
        else {
          float v279 = (float)((float)((float)(_S28 * _S1) + (float)(v337 * _S19)) + (float)(v342 * _S17)) + v44;
        }
        BOOL v219 = v278 <= v332;
        float v280 = (float)((float)((float)(_S28 * _S23) + (float)(v337 * _S2)) + (float)(v342 * _S22)) + v44;
        if (!v219) {
          float v279 = v332;
        }
        unsigned __int8 v281 = llroundf(v279);
        if (v280 < v44) {
          float v282 = v44;
        }
        else {
          float v282 = (float)((float)((float)(_S28 * _S23) + (float)(v337 * _S2)) + (float)(v342 * _S22)) + v44;
        }
        BOOL v219 = v280 <= v332;
        float v283 = (float)((float)((float)(_S28 * _S3) + (float)(v337 * _S6)) + (float)(v342 * _S27)) + v44;
        if (!v219) {
          float v282 = v332;
        }
        unsigned __int8 v284 = llroundf(v282);
        if (v283 < v44) {
          float v285 = v44;
        }
        else {
          float v285 = (float)((float)((float)(_S28 * _S3) + (float)(v337 * _S6)) + (float)(v342 * _S27)) + v44;
        }
        BOOL v219 = v283 <= v332;
        float v286 = (float)((float)((float)(_S28 * _S16) + (float)(v337 * _S7)) + (float)(v342 * _S5)) + v44;
        if (!v219) {
          float v285 = v332;
        }
        __int8 v287 = llroundf(v285);
        if (v286 < v44) {
          float v288 = v44;
        }
        else {
          float v288 = (float)((float)((float)(_S28 * _S16) + (float)(v337 * _S7)) + (float)(v342 * _S5)) + v44;
        }
        if (v286 <= v332) {
          float v289 = v288;
        }
        else {
          float v289 = v332;
        }
        float v290 = (float)((float)(_S19 + _S2) + _S6) + _S7;
        float v291 = (float)((float)(_S1 + _S23) + _S3) + _S16;
        *uint64_t result = v281;
        result[1] = v284;
        v101->i8[0] = v287;
        v101->i8[1] = llroundf(v289);
        *(float *)_Q3.i32 = (float)((float)(_S17 + _S22) + _S27) + _S5;
        float v292 = (float)((float)(v302 + (float)(v290 * v10.f32[0])) + (float)(v291 * *(float *)&v341))
             + (float)(*(float *)_Q3.i32 * *(float *)&v340);
        float v293 = v52;
        if (v292 <= v52)
        {
          float v293 = (float)((float)(v302 + (float)(v290 * v10.f32[0])) + (float)(v291 * *(float *)&v341))
               + (float)(*(float *)_Q3.i32 * *(float *)&v340);
          if (v292 < v345) {
            float v293 = v345;
          }
        }
        float v294 = (float)((float)(v302 + (float)(v290 * v10.f32[1])) + (float)(v291 * *((float *)&v341 + 1)))
             + (float)(*(float *)_Q3.i32 * *((float *)&v340 + 1));
        unsigned char *v188 = llroundf(v293);
        *(float *)v74.i32 = v52;
        float v36 = v226;
        float v38 = v343;
        _S4 = v344;
        float16x8_t v88 = v338;
        if (v294 <= v52)
        {
          *(float *)v74.i32 = v294;
          if (v294 < v345) {
            *(float *)v74.i32 = v345;
          }
        }
        v189 += 2;
        v81 += 2;
        unsigned int v82 = (int8x8_t *)((char *)v82 + 2);
        v187 += 2;
        float16x8_t v100 = (int8x8_t *)((char *)v100 + 2);
        v188[1] = llroundf(*(float *)v74.i32);
        result += 2;
        float16x8_t v101 = (int8x8_t *)((char *)v101 + 2);
        v188 += 2;
        float16x8_t v55 = v329;
        float16x8_t v69 = v330;
        float16x8_t v56 = v331;
        float16x8_t v60 = v333;
        float16x8_t v61 = v334;
        float16x8_t v68 = v320;
      }
      unsigned int v82 = (int8x8_t *)&v96[v27];
      float v81 = &v97[v28];
      uint64_t result = &v98[v30];
      v77 += v31;
      v15 += 2;
      v83 += 2 * v28;
    }
    while (v19 > v15);
    if (v298 && v297)
    {
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v51, v29, v16);
        v29 += v295;
        v51 += v296;
        --v19;
      }
      while (v19);
    }
    else if (v297)
    {
      do
      {
        if (v16) {
          uint64_t result = (unsigned __int8 *)memset(v51, 255, v16);
        }
        v51 += v296;
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

char *vt_Copy_422vf_TRC_Mat_TRC_420vf_GCD(char *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    size_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 36);
    uint64_t v12 = *(void *)(result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = *((void *)result + 14);
    uint64_t v15 = (void *)*((void *)result + 16);
    uint64_t v16 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v17 = *((void *)result + 19);
    uint64_t v19 = (void *)*((void *)result + 7);
    uint64_t v18 = (uint64_t *)*((void *)result + 8);
    uint64_t v20 = (uint64_t *)*((void *)result + 17);
    uint64_t v21 = *v18;
    uint64_t v22 = v18[1];
    uint64_t v23 = v18[2];
    uint64_t v24 = v19[2];
    uint64_t v25 = (char *)(v24 + v23 * v12 + v11);
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    uint64_t v30 = (char *)(v29 + v28 * v16 + v14);
    *(float *)&unsigned int v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    float v32 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v33 = (float)LODWORD(a5);
    float v34 = *(float *)&v31 * *(float *)v17;
    float v35 = *(float *)&v31 * *(float *)(v17 + 8);
    float v36 = *(float *)&v31 * *(float *)(v17 + 16);
    float v37 = *(float *)&v31 * *(float *)(v17 + 20);
    float v38 = *(float *)&v31 * *(float *)(v17 + 28);
    LOWORD(v31) = *(_WORD *)(v17 + 144);
    float v39 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 146);
    float v40 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 148);
    float v41 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 150);
    *(float *)&unsigned int v42 = (float)v31;
    float v191 = *(float *)&v42;
    LOWORD(v42) = *(_WORD *)(v17 + 152);
    float v43 = (float)v42;
    float v183 = *(float *)(v17 + 40);
    float v184 = *(float *)(v17 + 36);
    float v181 = *(float *)(v17 + 48) * 0.25;
    float v182 = *(float *)(v17 + 44);
    float v179 = *(float *)(v17 + 56) * 0.25;
    float v180 = *(float *)(v17 + 52) * 0.25;
    float v177 = *(float *)(v17 + 64) * 0.25;
    float v178 = *(float *)(v17 + 60) * 0.25;
    float v44 = *(float *)(v17 + 68) * 0.25;
    float v175 = v44;
    float v176 = *(float *)(v17 + 72);
    float v46 = *(float *)(v17 + 76);
    float v45 = *(float *)(v17 + 80);
    float v47 = *(float *)(v17 + 84);
    float v48 = *(float *)(v17 + 88);
    float v49 = *(float *)(v17 + 92);
    float v50 = *(float *)(v17 + 96);
    float v51 = *(float *)(v17 + 100);
    float v52 = *(float *)(v17 + 104);
    uint64_t v53 = v19[1];
    float v54 = (unsigned char *)(*v19 + v21 * v12 + v11);
    uint64_t result = (char *)(v53 + v22 * v12 + v11);
    uint64_t v55 = v17 + 16548;
    uint64_t v56 = v17 + 164;
    if (!v53) {
      uint64_t result = 0;
    }
    uint64_t v57 = v15[1];
    int32x2_t v58 = (unsigned char *)(*v15 + v26 * v16 + v14);
    uint64_t v59 = v57 + v27 * (v16 / 2) + v14;
    float v189 = v35;
    float v190 = (float)LODWORD(a5);
    float v187 = v38;
    float v188 = v36;
    float v185 = v43;
    float v186 = v40;
    do
    {
      float16x8_t v60 = &v58[v26];
      float16x8_t v61 = &result[v22];
      int v62 = &v54[v21];
      if (v10)
      {
        size_t v63 = 0;
        float v64 = &v54[v21];
        float v65 = &v58[v26];
        do
        {
          LOBYTE(v44) = result[v63 + 1];
          *(float *)&unsigned int v66 = (float)LODWORD(v44);
          float v67 = *(float *)&v66 - v33;
          float v68 = v35 * (float)(*(float *)&v66 - v33);
          LOBYTE(v66) = *v54;
          float v69 = v34 * (float)((float)v66 - v32);
          float v70 = v68 + v69;
          float v71 = 8191.0;
          if ((float)(v68 + v69) <= 8191.0)
          {
            float v71 = v68 + v69;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          LOBYTE(v70) = result[v63];
          float v72 = (float)LODWORD(v70) - v33;
          float v73 = (float)(v37 * v67) + (float)(v72 * v36);
          float v74 = 8191.0;
          if ((float)(v69 + v73) <= 8191.0)
          {
            float v74 = v69 + v73;
            if ((float)(v69 + v73) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v38 * v72;
          float v76 = v75 + v69;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          LOBYTE(v76) = v54[1];
          float v78 = v34 * (float)((float)LODWORD(v76) - v32);
          float v79 = 8191.0;
          if ((float)(v68 + v78) <= 8191.0)
          {
            float v79 = v68 + v78;
            if ((float)(v68 + v78) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v73 + v78;
          float v81 = 8191.0;
          if ((float)(v73 + v78) <= 8191.0)
          {
            float v81 = v73 + v78;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v75 + v78;
          float v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          LOBYTE(v80) = v61[v63 + 1];
          float v84 = (float)LODWORD(v80) - v33;
          float v85 = v35 * v84;
          LOBYTE(v68) = *v64;
          float v86 = v34 * (float)((float)LODWORD(v68) - v32);
          float v87 = 8191.0;
          if ((float)((float)(v35 * v84) + v86) <= 8191.0)
          {
            float v87 = (float)(v35 * v84) + v86;
            if (v87 < 0.0) {
              float v87 = 0.0;
            }
          }
          LOBYTE(v82) = v61[v63];
          float v88 = (float)LODWORD(v82) - v33;
          float v89 = (float)(v37 * v84) + (float)(v88 * v36);
          float v90 = 8191.0;
          if ((float)(v86 + v89) <= 8191.0)
          {
            float v90 = v86 + v89;
            if ((float)(v86 + v89) < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v38 * v88;
          float v92 = v91 + v86;
          BOOL v93 = (float)(v91 + v86) <= 8191.0;
          float v94 = 8191.0;
          if (v93)
          {
            float v94 = v92;
            if (v92 < 0.0) {
              float v94 = 0.0;
            }
          }
          LOBYTE(v35) = v64[1];
          float v95 = v34 * (float)((float)LODWORD(v35) - v32);
          float v96 = v85 + v95;
          BOOL v93 = (float)(v85 + v95) <= 8191.0;
          float v97 = 8191.0;
          if (v93)
          {
            float v97 = v96;
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          float v98 = v89 + v95;
          float v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          float v100 = v34;
          float v101 = v32;
          float v102 = v91 + v95;
          float v103 = 8191.0;
          if (v102 <= 8191.0)
          {
            float v103 = v102;
            if (v102 < 0.0) {
              float v103 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          _H19 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          unsigned int v121 = llroundf(fminf(fmaxf(v90, 0.0), 8191.0));
          __asm { FCVT            S4, H19 }
          _H19 = *(_WORD *)(v56 + 2 * v121);
          __asm { FCVT            S19, H19 }
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S17, H17
          }
          float v133 = (float)((float)(v46 * _S2) + (float)(_S1 * v176)) + (float)(_S24 * v45);
          float v134 = (float)((float)(v48 * _S2) + (float)(_S1 * v47)) + (float)(_S24 * v49);
          _S1 = (float)((float)(v51 * _S2) + (float)(_S1 * v50)) + (float)(_S24 * v52);
          _S2 = (float)((float)(v46 * _S26) + (float)(_S25 * v176)) + (float)(_S27 * v45);
          float v137 = (float)((float)(v48 * _S26) + (float)(_S25 * v47)) + (float)(_S27 * v49);
          float v138 = (float)((float)(v51 * _S26) + (float)(_S25 * v50)) + (float)(_S27 * v52);
          float v139 = (float)((float)(v46 * _S19) + (float)(_S4 * v176)) + (float)(_S5 * v45);
          float v140 = (float)((float)(v48 * _S19) + (float)(_S4 * v47)) + (float)(_S5 * v49);
          _S3 = (float)((float)(v51 * _S19) + (float)(_S4 * v50)) + (float)(_S5 * v52);
          float v142 = (float)((float)(v46 * _S7) + (float)(_S6 * v176)) + (float)(_S17 * v45);
          float v143 = (float)((float)(v48 * _S7) + (float)(_S6 * v47)) + (float)(_S17 * v49);
          _S17 = (float)((float)(v51 * _S7) + (float)(_S6 * v50)) + (float)(_S17 * v52);
          LOWORD(_S4) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          __asm { FCVT            S19, H4 }
          LOWORD(_S4) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S5, H1 }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm { FCVT            S6, H1 }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          LOWORD(_S2) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          __asm
          {
            FCVT            S25, H1
            FCVT            S24, H2
          }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v139, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v140, 0.0), 8191.0)));
          __asm { FCVT            S7, H2 }
          LOWORD(_S2) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S26, H2 }
          LOWORD(_S2) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S3) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          LOWORD(_S17) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S17, H17
          }
          float v157 = (float)((float)((float)(v183 * _S4) + (float)(v184 * _S19)) + (float)(v182 * _S5)) + v39;
          if (v157 < v39) {
            float v158 = v39;
          }
          else {
            float v158 = (float)((float)((float)(v183 * _S4) + (float)(v184 * _S19)) + (float)(v182 * _S5)) + v39;
          }
          BOOL v93 = v157 <= v41;
          float v159 = (float)((float)((float)(v183 * _S25) + (float)(v184 * _S6)) + (float)(v182 * _S24)) + v39;
          if (!v93) {
            float v158 = v41;
          }
          char v160 = llroundf(v158);
          if (v159 < v39) {
            float v161 = v39;
          }
          else {
            float v161 = (float)((float)((float)(v183 * _S25) + (float)(v184 * _S6)) + (float)(v182 * _S24)) + v39;
          }
          BOOL v93 = v159 <= v41;
          float v162 = (float)((float)((float)(v183 * _S7) + (float)(v184 * _S1)) + (float)(v182 * _S26)) + v39;
          if (!v93) {
            float v161 = v41;
          }
          char v163 = llroundf(v161);
          if (v162 < v39) {
            float v164 = v39;
          }
          else {
            float v164 = (float)((float)((float)(v183 * _S7) + (float)(v184 * _S1)) + (float)(v182 * _S26)) + v39;
          }
          BOOL v93 = v162 <= v41;
          float v165 = (float)((float)((float)(v183 * _S3) + (float)(v184 * _S2)) + (float)(v182 * _S17)) + v39;
          if (!v93) {
            float v164 = v41;
          }
          char v166 = llroundf(v164);
          if (v165 < v39) {
            float v167 = v39;
          }
          else {
            float v167 = (float)((float)((float)(v183 * _S3) + (float)(v184 * _S2)) + (float)(v182 * _S17)) + v39;
          }
          if (v165 <= v41) {
            float v168 = v167;
          }
          else {
            float v168 = v41;
          }
          float v169 = (float)((float)(_S19 + _S6) + _S1) + _S2;
          float v170 = (float)((float)(_S4 + _S25) + _S7) + _S3;
          *int32x2_t v58 = v160;
          v58[1] = v163;
          *float v65 = v166;
          v65[1] = llroundf(v168);
          float v171 = (float)((float)(_S5 + _S24) + _S26) + _S17;
          float v172 = (float)((float)(v186 + (float)(v169 * v181)) + (float)(v170 * v180)) + (float)(v171 * v179);
          float v173 = v185;
          if (v172 <= v185)
          {
            float v173 = (float)((float)(v186 + (float)(v169 * v181)) + (float)(v170 * v180)) + (float)(v171 * v179);
            if (v172 < v191) {
              float v173 = v191;
            }
          }
          float v174 = (float)((float)(v186 + (float)(v169 * v178)) + (float)(v170 * v177)) + (float)(v171 * v175);
          *(unsigned char *)(v59 + v63) = llroundf(v173);
          float v44 = v185;
          float v32 = v101;
          float v35 = v189;
          float v33 = v190;
          float v34 = v100;
          if (v174 <= v185)
          {
            float v44 = v174;
            if (v174 < v191) {
              float v44 = v191;
            }
          }
          v54 += 2;
          v64 += 2;
          v58 += 2;
          v65 += 2;
          *(unsigned char *)(v59 + v63 + 1) = llroundf(v44);
          v63 += 2;
          float v38 = v187;
          float v36 = v188;
        }
        while (v10 > v63);
      }
      float v54 = &v62[v21];
      uint64_t result = &v61[v22];
      int32x2_t v58 = &v60[v26];
      v59 += v27;
      v9 += 2;
    }
    while (v13 > v9);
    if (v24 && v29)
    {
      do
      {
        uint64_t result = (char *)memcpy(v30, v25, v10);
        v25 += v23;
        v30 += v28;
        --v13;
      }
      while (v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          uint64_t result = (char *)memset(v30, 255, v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_420vf_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_420vf_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double _D0)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = 2 * *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    unint64_t v12 = 0;
    size_t v13 = *(void *)(result + 20);
    uint64_t v14 = *(void *)(result + 36);
    uint64_t v15 = *(void *)(result + 44) + 2 * v10;
    unint64_t v16 = 2 * v11 - 2 * v10;
    uint64_t v17 = *((void *)result + 14);
    uint64_t v18 = (uint64_t *)*((void *)result + 16);
    uint64_t v19 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v9);
    uint64_t v20 = (float32x2_t *)*((void *)result + 19);
    uint64_t v21 = (void *)*((void *)result + 7);
    size_t v22 = (uint64_t *)*((void *)result + 8);
    uint64_t v23 = (uint64_t *)*((void *)result + 17);
    uint64_t v24 = *v22;
    uint64_t v25 = v22[1];
    uint64_t v165 = v22[2];
    uint64_t v167 = v21[2];
    uint64_t v26 = (char *)(v167 + v165 * v15 + v14);
    uint64_t v27 = *v23;
    uint64_t v28 = v23[1];
    uint64_t v29 = v23[2];
    uint64_t v166 = v18[2];
    unsigned int v30 = v20[17].u16[2];
    unsigned int v31 = v20[17].u16[3];
    v32.i32[0] = v20[3].i32[1];
    unsigned int v33 = v20[18].u16[0];
    unsigned int v34 = v20[18].u16[1];
    unsigned int v35 = v20[18].u16[2];
    unsigned int v36 = v20[18].u16[3];
    unsigned int v37 = v20[19].u16[0];
    LODWORD(_D0) = v20[4].i32[1];
    _S1 = v20[5].f32[0];
    _S2 = v20[5].f32[1];
    v40.i32[0] = v20[6].i32[0];
    v42.i32[0] = v20[6].i32[1];
    v41.i32[0] = v20[7].i32[0];
    float v43 = (float)v30;
    *(short float *)v3.i16 = (short float)v30;
    float v44 = (char *)(v166 + v29 * v19 + v17);
    float v45 = (float)v20[17].u32[0] / (float)v20[16].u32[0];
    float v46 = (float)v31;
    _S5 = v45 * v20->f32[0];
    float v48 = (float)v33;
    float v187 = (float)v34;
    float v49 = (float)v35;
    float v186 = (float)v36;
    float v50 = (float)v37;
    float32x4_t v57 = (float32x4_t)vdupq_lane_s16(v3, 0);
    float16x8_t v170 = (float16x8_t)v57;
    __asm { FCVT            H8, S5 }
    short float v56 = -(short float)v31;
    v32.i32[1] = v20[1].i32[0];
    *(float32x2_t *)v57.f32 = vmul_n_f32(v32, v45);
    float16x8_t v62 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v57), 0);
    *(float32x2_t *)v4.f32 = vmul_n_f32(v20[2], v45);
    float16x8_t v58 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v168 = vmulq_n_f16(v62, v56);
    float16x8_t v169 = v62;
    float16x8_t v59 = vmulq_n_f16(v58, v56);
    __asm { FCVT            H9, S0 }
    v40.i32[1] = v20[7].i32[1];
    __asm { FMOV            V17.2S, #0.25 }
    *(float32x2_t *)v62.i8 = vmul_f32(v40, _D17);
    int32x4_t v63 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)v62), 0);
    v42.i32[1] = v20[8].i32[0];
    *(float32x2_t *)v5.f32 = vmul_f32(v42, _D17);
    __asm { FCVT            H13, S1 }
    int32x4_t v65 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    v41.i32[1] = v20[8].i32[1];
    *(float32x2_t *)v6.f32 = vmul_f32(v41, _D17);
    int16x4_t v66 = (int16x4_t)vcvt_f16_f32(v6);
    int32x4_t v67 = vdupq_lane_s32((int32x2_t)v66, 0);
    *(short float *)v66.i16 = (short float)v33;
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(v66, 0);
    *(short float *)v66.i16 = (short float)v34;
    int16x8_t v69 = vdupq_lane_s16(v66, 0);
    *(short float *)v66.i16 = (short float)v35;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(v66, 0);
    *(short float *)v66.i16 = (short float)v36;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(v66, 0);
    *(short float *)v66.i16 = (short float)v37;
    float16x8_t v72 = (float16x8_t)vdupq_lane_s16(v66, 0);
    if (v19 >= 0) {
      uint64_t v73 = v19;
    }
    else {
      uint64_t v73 = v19 + 1;
    }
    uint64_t v74 = *v18;
    float v75 = (unsigned char *)(v18[1] + v28 * (v73 >> 1) + v17);
    float v76 = (int8x8_t *)(v74 + v27 * v19 + v17);
    float v79 = v21;
    uint64_t v77 = *v21;
    uint64_t v78 = v79[1];
    uint64_t result = (unsigned __int8 *)(v78 + v25 * v15 + v14);
    if (!v78) {
      uint64_t result = 0;
    }
    float v80 = (int8x8_t *)(v77 + v24 * v15 + v14);
    float v81 = &result[v25];
    __asm { FCVT            H14, S2 }
    uint64_t v83 = v57.i64[0];
    float v185 = v4.f32[0];
    uint64_t v84 = v62.i64[0];
    float v184 = v5.f32[0];
    v85.i32[0] = v6.i32[1];
    float v171 = v6.f32[0];
    short float v179 = _H9;
    float16x8_t v180 = v58;
    int32x4_t v178 = v63;
    float16x8_t v183 = (float16x8_t)v65;
    short float v176 = _H13;
    float16x8_t v177 = v59;
    float16x8_t v182 = (float16x8_t)v67;
    float16x8_t v174 = v70;
    int16x8_t v175 = v69;
    short float v172 = _H14;
    float16x8_t v173 = v71;
    float16x8_t v181 = v72;
    do
    {
      float v86 = (char *)v80 + v24;
      float v87 = &result[v25];
      float v88 = (char *)v76 + v27;
      if ((int)v13 < 8)
      {
        size_t v121 = 0;
        int8x8_t v120 = v75;
        float v91 = (int8x8_t *)((char *)v76 + v27);
        float16x8_t v119 = &result[v25];
        float v90 = (int8x8_t *)((char *)v80 + v24);
      }
      else
      {
        uint64_t v89 = 0;
        float v90 = (int8x8_t *)((char *)v80 + v24);
        float v91 = (int8x8_t *)((char *)v76 + v27);
        float16x8_t v92 = (float16x8_t)v69;
        short float v93 = _H14;
        do
        {
          int8x8_t v94 = *(int8x8_t *)&result[v89];
          *(int8x8_t *)v95.i8 = vzip1_s8(v94, 0);
          v95.u64[1] = (unint64_t)vzip2_s8(v94, 0);
          float16x8_t v96 = vcvtq_f16_u16(v95);
          int8x16_t v97 = (int8x16_t)vmlaq_f16(v168, v169, v96);
          float16x8_t v98 = (float16x8_t)v63;
          int8x16_t v99 = (int8x16_t)vmlaq_f16(v59, v58, v96);
          v96.i64[0] = vextq_s8(v97, v97, 8uLL).u64[0];
          *(int16x4_t *)v100.i8 = vuzp1_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v96.i8);
          *(int16x4_t *)v96.i8 = vuzp2_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v96.i8);
          *(double *)&v96.i64[1] = _D0;
          float16x8_t v101 = (float16x8_t)vzip1q_s16((int16x8_t)v96, (int16x8_t)v96);
          *(double *)&v100.i64[1] = _D0;
          v96.i64[0] = vextq_s8(v99, v99, 8uLL).u64[0];
          *(float16x4_t *)v96.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v96.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v96.i8));
          *(double *)&v96.i64[1] = _D0;
          int8x8_t v102 = *v80++;
          float16x8_t v103 = (float16x8_t)vzip1q_s16((int16x8_t)v96, (int16x8_t)v96);
          *(int8x8_t *)v96.i8 = vzip1_s8(v102, 0);
          v96.u64[1] = (unint64_t)vzip2_s8(v102, 0);
          float16x8_t v104 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v96), v170);
          float16x8_t v105 = vmlaq_n_f16(v101, v104, _H8);
          float16x8_t v106 = vmlaq_n_f16(v103, v104, _H8);
          float16x8_t v107 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v100, v100), v104, _H8);
          v104.i64[0] = *(void *)&v81[v89];
          *(int8x8_t *)v99.i8 = vzip1_s8(*(int8x8_t *)v104.i8, 0);
          v99.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v104.i8, 0);
          float16x8_t v108 = vcvtq_f16_u16((uint16x8_t)v99);
          int8x16_t v109 = (int8x16_t)vmlaq_f16(v168, v169, v108);
          int8x16_t v110 = (int8x16_t)vmlaq_f16(v59, v58, v108);
          v108.i64[0] = vextq_s8(v109, v109, 8uLL).u64[0];
          *(int16x4_t *)v111.i8 = vuzp1_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v108.i8);
          *(int16x4_t *)v108.i8 = vuzp2_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v108.i8);
          *(double *)&v108.i64[1] = _D0;
          float16x8_t v112 = (float16x8_t)vzip1q_s16((int16x8_t)v108, (int16x8_t)v108);
          *(double *)&v111.i64[1] = _D0;
          float16x8_t v113 = (float16x8_t)vzip1q_s16(v111, v111);
          v111.i64[0] = vextq_s8(v110, v110, 8uLL).u64[0];
          *(float16x4_t *)v111.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v111.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v111.i8));
          *(double *)&v111.i64[1] = _D0;
          int8x8_t v114 = *v90++;
          *(int8x8_t *)v110.i8 = vzip1_s8(v114, 0);
          v110.u64[1] = (unint64_t)vzip2_s8(v114, 0);
          float16x8_t v115 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v110), v170);
          float16x8_t v116 = vmlaq_n_f16(v112, v115, _H8);
          float16x8_t v117 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v111, v111), v115, _H8);
          float16x8_t v72 = vmlaq_n_f16(v113, v115, _H8);
          *v76++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v68, v105, _H9), v106, _H13), v107, v93), v68), v70)));
          *v91++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v68, v116, _H9), v117, _H13), v72, v93), v68), v70)));
          int16x8_t v118 = (int16x8_t)vaddq_f16((float16x8_t)vuzp2q_s16((int16x8_t)v116, (int16x8_t)v117), vaddq_f16(vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v105, (int16x8_t)v106), (float16x8_t)vuzp2q_s16((int16x8_t)v105, (int16x8_t)v106)), (float16x8_t)vuzp1q_s16((int16x8_t)v116, (int16x8_t)v117)));
          int32x4_t v63 = (int32x4_t)v98;
          float16x8_t v7 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v92, v98, (float16x8_t)vzip1q_s16(v118, v118)), v183, (float16x8_t)vzip2q_s16(v118, v118)), v182, vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v72, (int16x8_t)v72), vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v107, (int16x8_t)v107), (float16x8_t)vtrn2q_s16((int16x8_t)v107, (int16x8_t)v107)), (float16x8_t)vtrn1q_s16((int16x8_t)v72, (int16x8_t)v72))));
          v72.i32[0] = v181.i32[0];
          int8x8_t v85 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v7, v71), v181)));
          *(int8x8_t *)&v75[v89] = v85;
          v89 += 8;
        }
        while ((int)v89 < (int)v13 - 7);
        result += v89;
        float16x8_t v119 = &v81[v89];
        int8x8_t v120 = &v75[v89];
        size_t v121 = v13 & 0xFFFFFFF8;
      }
      while (v13 > v121)
      {
        v85.i8[0] = *result;
        float v122 = (float)v85.u32[0] - v46;
        v72.i8[0] = result[1];
        float v123 = (float)v72.u32[0] - v46;
        *(float *)&unsigned int v124 = *((float *)&v83 + 1) * v123;
        *(float *)&unsigned int v125 = v4.f32[1] * v123;
        unsigned int v127 = LODWORD(v185);
        unsigned int v126 = v83;
        float v128 = *(float *)&v125 + (float)(v122 * v185);
        *(float *)&unsigned int v129 = *(float *)&v83 * v122;
        LOBYTE(v125) = v80->i8[0];
        float v130 = _S5 * (float)((float)v125 - v43);
        v7.i8[0] = v80->i8[1];
        float v131 = _S5 * (float)((float)v7.u32[0] - v43);
        float v132 = *(float *)&v124 + v130;
        float v133 = v130 + v128;
        float v134 = *(float *)&v129 + v130;
        *(float *)v72.i32 = *(float *)&v124 + v131;
        float v135 = v128 + v131;
        float v136 = *(float *)&v129 + v131;
        LOBYTE(v129) = *v119;
        float v137 = (float)v129 - v46;
        LOBYTE(v124) = v119[1];
        float v138 = (float)v124 - v46;
        v4.f32[0] = *((float *)&v83 + 1) * v138;
        float v139 = (float)(v4.f32[1] * v138) + (float)(v137 * v185);
        float v140 = *(float *)&v83 * v137;
        LOBYTE(v126) = v90->i8[0];
        float v141 = _S5 * (float)((float)v126 - v43);
        LOBYTE(v127) = v90->i8[1];
        float v142 = _S5 * (float)((float)v127 - v43);
        float v143 = v4.f32[0] + v141;
        float v144 = v141 + v139;
        float v145 = v140 + v141;
        v4.f32[0] = v4.f32[0] + v142;
        float v146 = v139 + v142;
        *(float *)v85.i32 = v140 + v142;
        float v147 = (float)((float)((float)(_S1 * v133) + (float)(*(float *)&_D0 * v132)) + (float)(_S2 * v134)) + v48;
        if (v147 < v48) {
          float v148 = v48;
        }
        else {
          float v148 = (float)((float)((float)(_S1 * v133) + (float)(*(float *)&_D0 * v132)) + (float)(_S2 * v134)) + v48;
        }
        BOOL v149 = v147 <= v49;
        float v150 = (float)((float)((float)(_S1 * v135) + (float)(*(float *)&_D0 * *(float *)v72.i32)) + (float)(_S2 * v136))
             + v48;
        if (!v149) {
          float v148 = v49;
        }
        __int8 v151 = llroundf(v148);
        if (v150 < v48) {
          float v152 = v48;
        }
        else {
          float v152 = (float)((float)((float)(_S1 * v135) + (float)(*(float *)&_D0 * *(float *)v72.i32)) + (float)(_S2 * v136))
        }
               + v48;
        BOOL v149 = v150 <= v49;
        float v153 = (float)((float)((float)(_S1 * v144) + (float)(*(float *)&_D0 * v143)) + (float)(_S2 * v145)) + v48;
        if (!v149) {
          float v152 = v49;
        }
        __int8 v154 = llroundf(v152);
        if (v153 < v48) {
          float v155 = v48;
        }
        else {
          float v155 = (float)((float)((float)(_S1 * v144) + (float)(*(float *)&_D0 * v143)) + (float)(_S2 * v145)) + v48;
        }
        BOOL v149 = v153 <= v49;
        float v156 = (float)((float)((float)(_S1 * v146) + (float)(*(float *)&_D0 * v4.f32[0]))
                     + (float)(_S2 * *(float *)v85.i32))
             + v48;
        if (!v149) {
          float v155 = v49;
        }
        __int8 v157 = llroundf(v155);
        if (v156 < v48) {
          float v158 = v48;
        }
        else {
          float v158 = (float)((float)((float)(_S1 * v146) + (float)(*(float *)&_D0 * v4.f32[0]))
        }
                       + (float)(_S2 * *(float *)v85.i32))
               + v48;
        if (v156 <= v49) {
          float v159 = v158;
        }
        else {
          float v159 = v49;
        }
        float v160 = (float)((float)(v132 + *(float *)v72.i32) + v143) + v4.f32[0];
        float v161 = (float)((float)(v133 + v135) + v144) + v146;
        v76->i8[0] = v151;
        v76->i8[1] = v154;
        v91->i8[0] = v157;
        v91->i8[1] = llroundf(v159);
        float v162 = (float)((float)(v134 + v136) + v145) + *(float *)v85.i32;
        float v163 = (float)((float)(v187 + (float)(v160 * *(float *)&v84)) + (float)(v161 * v184)) + (float)(v162 * v171);
        float v164 = v50;
        if (v163 <= v50)
        {
          float v164 = (float)((float)(v187 + (float)(v160 * *(float *)&v84)) + (float)(v161 * v184)) + (float)(v162 * v171);
          if (v163 < v186) {
            float v164 = v186;
          }
        }
        *(float *)v85.i32 = (float)(v187 + (float)(v160 * *((float *)&v84 + 1))) + (float)(v161 * v5.f32[1]);
        *(float *)v7.i32 = *(float *)v85.i32 + (float)(v162 * v6.f32[1]);
        *int8x8_t v120 = llroundf(v164);
        *(float *)v72.i32 = v50;
        if (*(float *)v7.i32 <= v50)
        {
          *(float *)v85.i32 = v186;
          v72.i32[0] = v7.i32[0];
          if (*(float *)v7.i32 < v186) {
            *(float *)v72.i32 = v186;
          }
        }
        v121 += 2;
        result += 2;
        float v80 = (int8x8_t *)((char *)v80 + 2);
        v119 += 2;
        float v90 = (int8x8_t *)((char *)v90 + 2);
        v120[1] = llroundf(*(float *)v72.i32);
        float v76 = (int8x8_t *)((char *)v76 + 2);
        float v91 = (int8x8_t *)((char *)v91 + 2);
        v120 += 2;
      }
      float v80 = (int8x8_t *)&v86[v24];
      uint64_t result = &v87[v25];
      float v76 = (int8x8_t *)&v88[v27];
      v75 += v28;
      v12 += 2;
      v81 += 2 * v25;
      _H9 = v179;
      float16x8_t v58 = v180;
      float16x8_t v59 = v177;
      int32x4_t v63 = v178;
      int16x8_t v69 = v175;
      _H13 = v176;
      float16x8_t v71 = v173;
      float16x8_t v70 = v174;
      _H14 = v172;
    }
    while (v16 > v12);
    if (v167 && v166)
    {
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v44, v26, v13);
        v26 += v165;
        v44 += v29;
        --v16;
      }
      while (v16);
    }
    else if (v166)
    {
      do
      {
        if (v13) {
          uint64_t result = (unsigned __int8 *)memset(v44, 255, v13);
        }
        v44 += v29;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v14 = *(void *)(result + 28);
  unint64_t v15 = 2 * *result;
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (2 * v17 != 2 * v16)
  {
    unint64_t v18 = 0;
    size_t v19 = *(void *)(result + 20);
    uint64_t v20 = *(void *)(result + 36);
    uint64_t v21 = *(void *)(result + 44) + 2 * v16;
    unint64_t v22 = 2 * v17 - 2 * v16;
    uint64_t v23 = *((void *)result + 14);
    uint64_t v24 = (void *)*((void *)result + 16);
    uint64_t v25 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v15);
    uint64_t v26 = *((void *)result + 19);
    uint64_t v28 = (void *)*((void *)result + 7);
    uint64_t v27 = (uint64_t *)*((void *)result + 8);
    uint64_t v29 = (uint64_t *)*((void *)result + 17);
    uint64_t v30 = *v27;
    uint64_t v31 = v27[1];
    uint64_t v32 = v27[2];
    uint64_t v33 = v28[2];
    uint64_t v34 = (char *)(v33 + v32 * v21 + v20);
    uint64_t v35 = *v29;
    uint64_t v36 = v29[1];
    uint64_t v37 = v29[2];
    uint64_t v38 = v24[2];
    float v39 = (float)*(unsigned int *)(v26 + 136) / (float)*(unsigned int *)(v26 + 128);
    LOWORD(a6) = *(_WORD *)(v26 + 140);
    LOWORD(a7) = *(_WORD *)(v26 + 142);
    float v40 = *(float *)v26;
    float v41 = *(float *)(v26 + 8);
    float v42 = *(float *)(v26 + 16);
    float v43 = *(float *)(v26 + 20);
    float v44 = *(float *)(v26 + 28);
    LOWORD(v9) = *(_WORD *)(v26 + 144);
    LOWORD(v10) = *(_WORD *)(v26 + 146);
    LOWORD(v11) = *(_WORD *)(v26 + 148);
    LOWORD(v12) = *(_WORD *)(v26 + 150);
    LOWORD(v13) = *(_WORD *)(v26 + 152);
    float v45 = *(float *)(v26 + 36);
    float v46 = *(float *)(v26 + 40);
    float v47 = *(float *)(v26 + 44);
    float v48 = *(float *)(v26 + 48);
    float v49 = *(float *)(v26 + 52);
    float v50 = *(float *)(v26 + 56);
    float v51 = *(float *)(v26 + 60);
    float v52 = *(float *)(v26 + 64);
    float v53 = *(float *)(v26 + 68);
    uint64_t v54 = v28[1];
    uint64_t v55 = (unsigned char *)(*v28 + v30 * v21 + v20);
    uint64_t v56 = v54 + v31 * v21 + v20;
    float32x4_t v57 = (char *)(v38 + v37 * v25 + v23);
    float v58 = (float)LODWORD(a6);
    float v59 = (float)LODWORD(a7);
    float v60 = v39 * v40;
    float v61 = v39 * v41;
    float v62 = v39 * v42;
    float v63 = v39 * v43;
    float v64 = v39 * v44;
    float v65 = (float)v9;
    float v66 = (float)v10;
    float v67 = (float)v11;
    float v68 = (float)v12;
    float v69 = (float)v13;
    float v70 = 0.25;
    float v124 = v49 * 0.25;
    float v125 = v48 * 0.25;
    float v123 = v50 * 0.25;
    float v71 = v51 * 0.25;
    float v72 = v52 * 0.25;
    float v73 = v53 * 0.25;
    if (!v54) {
      uint64_t v56 = 0;
    }
    uint64_t result = (unsigned __int8 *)(*v24 + v35 * v25 + v23);
    uint64_t v74 = v24[1] + v36 * (v25 / 2) + v23;
    do
    {
      float v75 = &result[v35];
      uint64_t v76 = v56 + v31;
      uint64_t v77 = &v55[v30];
      if (v19)
      {
        size_t v78 = 0;
        float v79 = &v55[v30];
        float v80 = &result[v35];
        do
        {
          LOBYTE(v53) = *(unsigned char *)(v56 + v78);
          *(float *)&unsigned int v81 = (float)LODWORD(v53) - v59;
          LOBYTE(v70) = *(unsigned char *)(v56 + v78 + 1);
          float v82 = (float)LODWORD(v70) - v59;
          float v83 = v61 * v82;
          *(float *)&unsigned int v84 = v63 * v82;
          float v85 = *(float *)&v84 + (float)(*(float *)&v81 * v62);
          *(float *)&unsigned int v86 = v64 * *(float *)&v81;
          LOBYTE(v81) = *v55;
          float v87 = v60 * (float)((float)v81 - v58);
          LOBYTE(v84) = v55[1];
          *(float *)&unsigned int v88 = v60 * (float)((float)v84 - v58);
          float v89 = v83 + v87;
          float v90 = v87 + v85;
          float v91 = *(float *)&v86 + v87;
          float v92 = v83 + *(float *)&v88;
          float v93 = v85 + *(float *)&v88;
          float v94 = *(float *)&v86 + *(float *)&v88;
          LOBYTE(v86) = *(unsigned char *)(v76 + v78);
          float v95 = (float)v86 - v59;
          LOBYTE(v88) = *(unsigned char *)(v76 + v78 + 1);
          float v96 = (float)v88 - v59;
          float v97 = v61 * v96;
          float v98 = (float)(v63 * v96) + (float)(v95 * v62);
          float v99 = v64 * v95;
          LOBYTE(v7) = *v79;
          float v100 = v60 * (float)((float)LODWORD(v7) - v58);
          LOBYTE(v8) = v79[1];
          float v101 = v60 * (float)((float)LODWORD(v8) - v58);
          float v102 = v97 + v100;
          float v103 = v100 + v98;
          float v7 = v99 + v100;
          float v104 = v97 + v101;
          float v105 = v98 + v101;
          float v106 = v99 + v101;
          float v107 = (float)((float)((float)(v46 * v90) + (float)(v45 * v89)) + (float)(v47 * v91)) + v65;
          if (v107 < v65) {
            float v108 = v65;
          }
          else {
            float v108 = (float)((float)((float)(v46 * v90) + (float)(v45 * v89)) + (float)(v47 * v91)) + v65;
          }
          BOOL v109 = v107 <= v67;
          float v110 = (float)((float)((float)(v46 * v93) + (float)(v45 * v92)) + (float)(v47 * v94)) + v65;
          if (!v109) {
            float v108 = v67;
          }
          unsigned __int8 v111 = llroundf(v108);
          if (v110 < v65) {
            float v112 = v65;
          }
          else {
            float v112 = (float)((float)((float)(v46 * v93) + (float)(v45 * v92)) + (float)(v47 * v94)) + v65;
          }
          BOOL v109 = v110 <= v67;
          float v113 = (float)((float)((float)(v46 * v103) + (float)(v45 * v102)) + (float)(v47 * v7)) + v65;
          if (!v109) {
            float v112 = v67;
          }
          unsigned __int8 v114 = llroundf(v112);
          if (v113 < v65) {
            float v115 = v65;
          }
          else {
            float v115 = (float)((float)((float)(v46 * v103) + (float)(v45 * v102)) + (float)(v47 * v7)) + v65;
          }
          BOOL v109 = v113 <= v67;
          float v8 = (float)((float)((float)(v46 * v105) + (float)(v45 * v104)) + (float)(v47 * v106)) + v65;
          if (!v109) {
            float v115 = v67;
          }
          unsigned __int8 v116 = llroundf(v115);
          if (v8 < v65) {
            float v117 = v65;
          }
          else {
            float v117 = (float)((float)((float)(v46 * v105) + (float)(v45 * v104)) + (float)(v47 * v106)) + v65;
          }
          if (v8 > v67) {
            float v117 = v67;
          }
          float v118 = (float)((float)(v89 + v92) + v102) + v104;
          float v119 = (float)((float)(v90 + v93) + v103) + v105;
          *uint64_t result = v111;
          result[1] = v114;
          *float v80 = v116;
          v80[1] = llroundf(v117);
          float v120 = (float)((float)(v91 + v94) + v7) + v106;
          float v121 = (float)((float)(v66 + (float)(v118 * v125)) + (float)(v119 * v124)) + (float)(v120 * v123);
          float v122 = v69;
          if (v121 <= v69)
          {
            float v122 = (float)((float)(v66 + (float)(v118 * v125)) + (float)(v119 * v124)) + (float)(v120 * v123);
            if (v121 < v68) {
              float v122 = v68;
            }
          }
          float v70 = (float)((float)(v66 + (float)(v118 * v71)) + (float)(v119 * v72)) + (float)(v120 * v73);
          *(unsigned char *)(v74 + v78) = llroundf(v122);
          float v53 = v69;
          if (v70 <= v69)
          {
            float v53 = v70;
            if (v70 < v68) {
              float v53 = v68;
            }
          }
          v55 += 2;
          v79 += 2;
          result += 2;
          v80 += 2;
          *(unsigned char *)(v74 + v78 + 1) = llroundf(v53);
          v78 += 2;
        }
        while (v19 > v78);
      }
      uint64_t v55 = &v77[v30];
      uint64_t v56 = v76 + v31;
      uint64_t result = &v75[v35];
      v74 += v36;
      v18 += 2;
    }
    while (v22 > v18);
    if (v33 && v38)
    {
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v57, v34, v19);
        v34 += v32;
        v57 += v37;
        --v22;
      }
      while (v22);
    }
    else if (v38)
    {
      do
      {
        if (v19) {
          uint64_t result = (unsigned __int8 *)memset(v57, 255, v19);
        }
        v57 += v37;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_422vf_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD(float32x2_t *result, uint64_t a2, double a3, double a4, double a5, int16x4_t a6, float32x4_t a7)
{
  uint64_t v9 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v10 = 2 * result->u8[0];
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (2 * v12 != 2 * v11)
  {
    unint64_t v13 = 0;
    unint64_t v14 = *(unint64_t *)((char *)&result[2] + 4);
    uint64_t v15 = *(uint64_t *)((char *)&result[4] + 4);
    uint64_t v16 = *(void *)((char *)&result[5] + 4) + 2 * v11;
    unint64_t v17 = 2 * v12 - 2 * v11;
    float32x2_t v18 = result[14];
    uint64_t v19 = (uint64_t *)result[16];
    uint64_t v20 = *(void *)&result[15] + 2 * (*(void *)&result[13] * a2 / v10);
    uint64_t v21 = (float32x2_t *)result[19];
    size_t v22 = (void *)result[7];
    uint64_t v23 = (uint64_t *)result[8];
    uint64_t v24 = (uint64_t *)result[17];
    uint64_t v25 = *v23;
    uint64_t v26 = v23[1];
    uint64_t v417 = v23[2];
    v416 = (unsigned __int8 *)(v22[2] + v417 * v16 + v15);
    uint64_t v27 = *v24;
    uint64_t v28 = v24[1];
    uint64_t v420 = v22[2];
    uint64_t v421 = v24[2];
    uint64_t v419 = v19[2];
    LODWORD(v24) = v21[17].u16[2];
    unsigned int v29 = v21[17].u16[3];
    a6.i32[0] = v21->i32[0];
    v30.i32[0] = v21[3].i32[1];
    unsigned int v31 = v21[18].u16[0];
    unsigned int v32 = v21[18].u16[1];
    unsigned int v33 = v21[18].u16[2];
    float v34 = (float)v24;
    *(short float *)a7.i16 = (short float)v24;
    unsigned int v35 = v21[18].u16[3];
    v36.i32[0] = v21[6].i32[0];
    v30.i32[1] = v21[1].i32[0];
    v36.i32[1] = v21[7].i32[1];
    LODWORD(v23) = v21[19].u16[0];
    _S10 = v21[4].i32[1];
    float v488 = v21[5].f32[0];
    float v489 = v21[5].f32[1];
    v39.i32[0] = v21[6].i32[1];
    v38.i32[0] = v21[7].i32[0];
    float v40 = (float)v29;
    v39.i32[1] = v21[8].i32[0];
    float v487 = v21[9].f32[0];
    float v486 = v21[9].f32[1];
    v38.i32[1] = v21[8].i32[1];
    float v41 = (char *)&v21[2068] + 4;
    __b = (_WORD *)(v419 + v421 * v20 + 2 * *(void *)&v18);
    float v42 = 8191.0 / (float)v21[16].u32[0];
    _S20 = v42 * v21->f32[0];
    float v44 = (float)v31;
    float v45 = (float)v32;
    float v478 = (float)v33;
    *(float *)&a5 = (float)v35;
    float v494 = (float)v35;
    float v46 = (float)v23;
    *(short float *)&a5 = (short float)v31;
    uint64_t result = (float32x2_t *)((char *)v21 + 164);
    *(short float *)a6.i16 = (short float)v32;
    float16x8_t v47 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)a7.f32, 0);
    *(float32x2_t *)v8.f32 = vmul_n_f32(v30, v42);
    float v48 = (char *)&v21[4116] + 4;
    *(float32x2_t *)v7.f32 = vmul_n_f32(v21[2], v42);
    *(float16x4_t *)&v49.u32[2] = vcvt_f16_f32(v7);
    *(short float *)v30.i16 = -(short float)v29;
    float16x8_t v50 = (float16x8_t)vdupq_lane_s32(*(int32x2_t *)&v49.u32[2], 0);
    __asm { FMOV            V0.2S, #0.25 }
    *(float32x2_t *)a7.f32 = vmul_f32(v36, _D0);
    unint64_t v485 = a7.i64[0];
    int32x2_t v56 = (int32x2_t)vcvt_f16_f32(a7);
    *(float32x2_t *)&v57.u32[2] = _D0;
    float16x8_t v58 = (float16x8_t)vdupq_lane_s32(v56, 0);
    *(float32x2_t *)v57.f32 = vmul_f32(v39, _D0);
    uint64_t v484 = v57.i64[0];
    float16x8_t v59 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v57), 0);
    *(float32x2_t *)v49.f32 = vmul_f32(v38, _D0);
    uint64_t v483 = v49.i64[0];
    *(float16x4_t *)v49.f32 = vcvt_f16_f32(v49);
    float16x8_t v60 = (float16x8_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 0);
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a5, 0);
    float16x8_t v460 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v8), 0);
    float16x8_t v62 = vmulq_n_f16(v460, *(short float *)v30.i16);
    int16x8_t v63 = vdupq_lane_s16(a6, 0);
    *(short float *)v49.i16 = (short float)v33;
    int16x8_t v64 = vdupq_lane_s16(*(int16x4_t *)v49.f32, 0);
    *(short float *)v49.i16 = (short float)v35;
    int16x8_t v65 = vdupq_lane_s16(*(int16x4_t *)v49.f32, 0);
    float16x8_t v473 = (float16x8_t)v65;
    float16x8_t v474 = (float16x8_t)v64;
    *(short float *)v65.i16 = (short float)v23;
    int16x8_t v66 = vdupq_lane_s16(*(int16x4_t *)v65.i8, 0);
    float16x8_t v67 = vmulq_n_f16(v50, *(short float *)v30.i16);
    unsigned int v68 = v21[16].u8[4];
    if (v68 >= 0x11) {
      unsigned __int8 v69 = 0;
    }
    else {
      unsigned __int8 v69 = 16 - v68;
    }
    if (v20 >= 0) {
      uint64_t v70 = v20;
    }
    else {
      uint64_t v70 = v20 + 1;
    }
    uint64_t v71 = *v19;
    uint64_t v72 = v19[1] + v28 * (v70 >> 1) + 2 * *(void *)&v18;
    float v73 = (uint16x8_t *)(v71 + v27 * v20 + 2 * *(void *)&v18);
    uint64_t v74 = v22[1];
    if (v74) {
      float v75 = (unsigned char *)(v74 + v26 * v16 + v15);
    }
    else {
      float v75 = 0;
    }
    uint64_t v76 = (int8x8_t *)(*v22 + v25 * v16 + v15);
    unsigned __int8 v77 = v69;
    unint64_t v424 = v14 & 0xFFFFFFF8;
    size_t v78 = &v75[v26];
    uint64_t v79 = 2 * v26;
    _S21 = v21[13].f32[0];
    __asm { FCVT            H8, S20 }
    short float v454 = _H8;
    float v482 = v21[4].f32[1];
    __asm { FCVT            H8, S10 }
    _S10 = v21[5].i32[0];
    __asm { FCVT            H10, S10 }
    short float v452 = *(short float *)&_S10;
    _S10 = v21[5].i32[1];
    __asm { FCVT            H10, S10 }
    short float v451 = *(short float *)&_S10;
    float v458 = v21[13].f32[1];
    __asm { FCVT            H2, S2 }
    float v457 = v21[14].f32[0];
    __asm { FCVT            H4, S4 }
    float v456 = v21[14].f32[1];
    __asm { FCVT            H5, S5 }
    float v455 = v21[15].f32[0];
    __asm { FCVT            H6, S6 }
    _S10 = v21[9].i32[0];
    __asm { FCVT            H10, S10 }
    short float v446 = *(short float *)&_S10;
    _S10 = v21[9].i32[1];
    __asm { FCVT            H10, S10 }
    short float v445 = *(short float *)&_S10;
    float v469 = v21[10].f32[0];
    __asm { FCVT            H7, S7 }
    float v468 = v21[10].f32[1];
    __asm { FCVT            H10, S26 }
    short float v443 = *(short float *)&_S10;
    float v466 = v21[11].f32[0];
    __asm { FCVT            H10, S24 }
    short float v442 = *(short float *)&_S10;
    float v464 = v21[11].f32[1];
    __asm { FCVT            H15, S15 }
    float v462 = v21[12].f32[0];
    __asm { FCVT            H10, S22 }
    short float v440 = *(short float *)&_S10;
    float v461 = v21[12].f32[1];
    __asm { FCVT            H10, S16 }
    short float v439 = *(short float *)&_S10;
    float v459 = _S21;
    __asm { FCVT            H10, S21 }
    short float v438 = *(short float *)&_S10;
    float v93 = _S20;
    uint16x8_t v437 = (uint16x8_t)vdupq_n_s16(v69);
    v94.i64[0] = 0x9000900090009000;
    v94.i64[1] = 0x9000900090009000;
    float16x8_t v497 = v62;
    float16x8_t v475 = (float16x8_t)v63;
    float16x8_t v476 = v61;
    float16x8_t v471 = v67;
    float16x8_t v472 = (float16x8_t)v66;
    short float v449 = _H4;
    short float v450 = _H2;
    unint64_t v430 = v17;
    unint64_t v431 = v14;
    uint64_t v428 = v26;
    uint64_t v429 = v25;
    uint64_t v426 = v28;
    uint64_t v427 = v27;
    float16x8_t v480 = v50;
    __int32 v481 = v7.i32[0];
    float16x8_t v479 = v58;
    float16x8_t v477 = v60;
    int v470 = v14 - 7;
    unsigned __int8 v425 = v69;
    uint64_t v423 = 2 * v26;
    __int32 v467 = v8.i32[0];
    float16x8_t v465 = v59;
    float16x8_t v463 = v47;
    float v492 = v34;
    float v493 = v40;
    short float v453 = _H8;
    short float v447 = _H6;
    short float v448 = _H5;
    short float v444 = _H7;
    short float v441 = _H15;
    float v422 = v45;
    do
    {
      float v95 = (int8x8_t *)((char *)v76 + v25);
      float v96 = &v75[v26];
      float v97 = &v73->i8[v27];
      v436 = (char *)v76 + v25;
      if ((int)v14 < 8)
      {
        unint64_t v268 = 0;
        float v100 = (int16x8_t *)v72;
        float v99 = (uint16x8_t *)((char *)v73 + v27);
        v267 = &v75[v26];
      }
      else
      {
        v432 = &v75[v26];
        v433 = &v73->i8[v27];
        uint64_t v434 = v72;
        unint64_t v435 = v13;
        uint64_t v98 = 0;
        float v99 = (uint16x8_t *)((char *)v73 + v27);
        float v100 = (int16x8_t *)v72;
        v490 = v78;
        v491 = v75;
        do
        {
          v496 = v73;
          int8x8_t v101 = *(int8x8_t *)&v75[v98];
          *(int8x8_t *)v102.i8 = vzip1_s8(v101, 0);
          v102.u64[1] = (unint64_t)vzip2_s8(v101, 0);
          float16x8_t v103 = vcvtq_f16_u16(v102);
          int16x8_t v104 = (int16x8_t)vmlaq_f16(v62, v460, v103);
          int8x16_t v105 = (int8x16_t)vmlaq_f16(v471, v50, v103);
          v103.i64[0] = vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u64[0];
          *(int16x4_t *)v106.i8 = vuzp1_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v103.i8);
          *(int16x4_t *)v104.i8 = vuzp2_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v103.i8);
          v104.i64[1] = v104.i64[0];
          v103.i64[0] = vextq_s8(v105, v105, 8uLL).u64[0];
          v106.i64[1] = v104.i64[0];
          v495 = v76 + 1;
          *(int8x8_t *)v107.i8 = vzip1_s8(*v76, 0);
          *(float16x4_t *)v103.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v103.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v103.i8));
          v107.u64[1] = (unint64_t)vzip2_s8(*v76, 0);
          v105.i64[0] = *(void *)&v78[v98];
          v103.i64[1] = v104.i64[0];
          float16x8_t v108 = vcvtq_f16_u16(v107);
          *(int8x8_t *)v107.i8 = vzip1_s8(*(int8x8_t *)v105.i8, 0);
          v107.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v105.i8, 0);
          float16x8_t v109 = (float16x8_t)vzip1q_s16(v104, v104);
          float16x8_t v110 = vsubq_f16(v108, v47);
          float16x8_t v111 = vcvtq_f16_u16(v107);
          int16x8_t v112 = (int16x8_t)vmlaq_f16(v62, v460, v111);
          int8x16_t v113 = (int8x16_t)vmlaq_f16(v471, v50, v111);
          v111.i64[0] = vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL).u64[0];
          *(int16x4_t *)v114.i8 = vuzp2_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v111.i8);
          v114.i64[1] = v109.i64[0];
          *(int16x4_t *)v111.i8 = vuzp1_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v111.i8);
          v111.i64[1] = v109.i64[0];
          v112.i64[0] = vextq_s8(v113, v113, 8uLL).u64[0];
          float16x8_t v115 = vmlaq_n_f16(v109, v110, v454);
          *(float16x4_t *)v112.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v112.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v112.i8));
          v112.i64[1] = v115.i64[0];
          float16x8_t v116 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v106, v106), v110, v454);
          float16x8_t v117 = (float16x8_t)vzip1q_s16((int16x8_t)v111, (int16x8_t)v111);
          int8x8_t v118 = *v95++;
          *(int8x8_t *)v113.i8 = vzip1_s8(v118, 0);
          float16x8_t v119 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v103, (int16x8_t)v103), v110, v454);
          v113.u64[1] = (unint64_t)vzip2_s8(v118, 0);
          float16x8_t v120 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v113), v47);
          float16x8_t v121 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v114, v114), v120, v454);
          float16x8_t v122 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v112, v112), v120, v454);
          float16x8_t v123 = vmlaq_n_f16(v117, v120, v454);
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v94));
          uint32x4_t v125 = vmovl_high_u16(v124);
          uint32x4_t v126 = vmovl_u16(*(uint16x4_t *)v124.i8);
          uint64_t v127 = v126.u32[1];
          uint64_t v128 = v126.u32[3];
          v129.i16[0] = result->i16[v126.u32[0]];
          uint64_t v130 = v125.u32[1];
          uint64_t v131 = v125.u32[3];
          float v132 = (__int16 *)result + v126.u32[2];
          uint64_t v133 = v125.u32[2];
          uint16x8_t v134 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, (float16x8_t)0), v94));
          float v135 = (__int16 *)result + v125.u32[0];
          uint32x4_t v136 = vmovl_high_u16(v134);
          v137.i64[0] = v136.u32[2];
          v137.i64[1] = v136.u32[3];
          float16x8_t v138 = v137;
          v137.i64[0] = v136.u32[0];
          v137.i64[1] = v136.u32[1];
          float16x8_t v139 = v137;
          uint32x4_t v140 = vmovl_u16(*(uint16x4_t *)v134.i8);
          v137.i64[0] = v140.u32[2];
          v137.i64[1] = v140.u32[3];
          float16x8_t v141 = v137;
          float v142 = (__int16 *)result + v133;
          uint64_t v143 = v140.u32[1];
          v144.i64[0] = 0x9000900090009000;
          v144.i64[1] = 0x9000900090009000;
          v145.i16[0] = result->i16[v140.u32[0]];
          uint64_t v146 = v139.i64[1];
          float v147 = (__int16 *)result + v127;
          float v148 = (__int16 *)result + v139.i64[0];
          BOOL v149 = (__int16 *)result + v128;
          float v150 = (__int16 *)result + v138.i64[0];
          uint16x8_t v151 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)0), v144));
          uint32x4_t v152 = vmovl_high_u16(v151);
          v138.i64[0] = v152.u32[2];
          uint32x4_t v153 = vmovl_u16(*(uint16x4_t *)v151.i8);
          v129.i16[1] = *v147;
          v116.i16[0] = result->i16[v153.u32[0]];
          __int8 v154 = (__int16 *)result + v153.u32[1];
          float v155 = (__int16 *)result + v143;
          float v156 = (__int16 *)result + v153.u32[2];
          __int8 v157 = (__int16 *)result + v153.u32[3];
          float v158 = (__int16 *)result + v152.u32[0];
          float v159 = (__int16 *)result + v152.u32[1];
          float v160 = (__int16 *)result + v152.u32[3];
          uint16x8_t v161 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v144));
          float16x8_t v162 = (float16x8_t)vmovl_high_u16(v161);
          v137.i64[0] = v162.u32[2];
          v137.i64[1] = v162.u32[3];
          float16x8_t v163 = v137;
          v137.i64[0] = v162.u32[0];
          v116.i16[1] = *v154;
          uint32x4_t v164 = vmovl_u16(*(uint16x4_t *)v161.i8);
          v129.i16[2] = *v132;
          v162.i16[0] = result->i16[v164.u32[0]];
          v145.i16[1] = *v155;
          v116.i16[2] = *v156;
          v129.i16[3] = *v149;
          uint64_t v165 = (__int16 *)result + v137.i64[0];
          v145.i16[2] = result->i16[v141.i64[0]];
          uint64_t v166 = (__int16 *)result + v162.u32[1];
          uint64_t v167 = (__int16 *)result + v163.i64[0];
          float16x8_t v168 = (__int16 *)result + v163.i64[1];
          v116.i16[3] = *v157;
          v162.i16[1] = result->i16[v164.u32[1]];
          v162.i16[2] = result->i16[v164.u32[2]];
          v129.i16[4] = *v135;
          v162.i16[3] = result->i16[v164.u32[3]];
          v145.i16[3] = result->i16[v141.i64[1]];
          uint16x8_t v169 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v144));
          float16x8_t v170 = (float16x8_t)vmovl_high_u16(v169);
          v137.i64[0] = v170.u32[2];
          v137.i64[1] = v170.u32[3];
          float16x8_t v171 = v137;
          v137.i64[0] = v170.u32[0];
          v116.i16[4] = *v158;
          uint32x4_t v172 = vmovl_u16(*(uint16x4_t *)v169.i8);
          v162.i16[4] = *v165;
          v170.i16[0] = result->i16[v172.u32[0]];
          v129.i16[5] = result->i16[v130];
          v145.i16[4] = *v148;
          v116.i16[5] = *v159;
          v162.i16[5] = *v166;
          float16x8_t v173 = (__int16 *)result + v170.u32[1];
          float16x8_t v174 = (__int16 *)result + v171.i64[0];
          int16x8_t v175 = (__int16 *)result + v171.i64[1];
          v129.i16[6] = *v142;
          v170.i16[1] = result->i16[v172.u32[1]];
          v170.i16[2] = result->i16[v172.u32[2]];
          v145.i16[5] = result->i16[v146];
          v170.i16[3] = result->i16[v172.u32[3]];
          v170.i16[4] = result->i16[v137.i64[0]];
          v116.i16[6] = result->i16[v138.i64[0]];
          uint16x8_t v176 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v144));
          uint32x4_t v177 = vmovl_high_u16(v176);
          v162.i16[6] = *v167;
          uint32x4_t v178 = vmovl_u16(*(uint16x4_t *)v176.i8);
          v170.i16[5] = *v173;
          v129.i16[7] = result->i16[v131];
          v123.i16[0] = result->i16[v178.u32[0]];
          v145.i16[6] = *v150;
          v116.i16[7] = *v160;
          v162.i16[7] = *v168;
          v170.i16[6] = *v174;
          v123.i16[1] = result->i16[v178.u32[1]];
          v145.i16[7] = result->i16[v138.i64[1]];
          v123.i16[2] = result->i16[v178.u32[2]];
          v123.i16[3] = result->i16[v178.u32[3]];
          v170.i16[7] = *v175;
          v123.i16[4] = result->i16[v177.u32[0]];
          v123.i16[5] = result->i16[v177.u32[1]];
          v123.i16[6] = result->i16[v177.u32[2]];
          v123.i16[7] = result->i16[v177.u32[3]];
          uint16x8_t v179 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v450), v145, v449), v116, v448), vmaxq_f16(vmaxq_f16(v129, v145), v116), v447), (float16x8_t)0), v144));
          uint32x4_t v180 = vmovl_high_u16(v179);
          uint32x4_t v181 = vmovl_u16(*(uint16x4_t *)v179.i8);
          uint64_t v182 = v181.u32[1];
          uint64_t v183 = v181.u32[0];
          v137.i64[0] = v180.u32[2];
          v137.i64[1] = v180.u32[3];
          uint64_t v184 = v181.u32[3];
          uint64_t v185 = v180.u32[1];
          uint64_t v186 = v181.u32[2];
          uint64_t v187 = v180.u32[0];
          uint16x8_t v188 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v162, v450), v170, v449), v123, v448), vmaxq_f16(vmaxq_f16(v162, v170), v123), v447), (float16x8_t)0), v144));
          uint32x4_t v189 = vmovl_u16(*(uint16x4_t *)v188.i8);
          v138.i16[0] = *(_WORD *)&v41[2 * v183];
          float v190 = (__int16 *)&v41[2 * v137.i64[1]];
          v138.i16[1] = *(_WORD *)&v41[2 * v182];
          v138.i16[2] = *(_WORD *)&v41[2 * v186];
          float16x8_t v191 = (float16x8_t)vmovl_high_u16(v188);
          v138.i16[3] = *(_WORD *)&v41[2 * v184];
          v137.i64[1] = v191.u32[3];
          v138.i16[4] = *(_WORD *)&v41[2 * v187];
          uint64_t v192 = v191.u32[0];
          v138.i16[5] = *(_WORD *)&v41[2 * v185];
          v191.i16[0] = *(_WORD *)&v41[2 * v189.u32[0]];
          v138.i16[6] = *(_WORD *)&v41[2 * v137.i64[0]];
          v138.i16[7] = *v190;
          float v193 = (__int16 *)&v41[2 * v191.u32[1]];
          v191.i16[1] = *(_WORD *)&v41[2 * v189.u32[1]];
          v191.i16[2] = *(_WORD *)&v41[2 * v189.u32[2]];
          float16x8_t v194 = vmulq_f16(v129, v138);
          uint64_t v195 = v191.u32[2];
          v191.i16[3] = *(_WORD *)&v41[2 * v189.u32[3]];
          v191.i16[4] = *(_WORD *)&v41[2 * v192];
          float16x8_t v196 = vmulq_f16(v145, v138);
          v191.i16[5] = *v193;
          v191.i16[6] = *(_WORD *)&v41[2 * v195];
          float16x8_t v197 = vmulq_f16(v116, v138);
          v191.i16[7] = *(_WORD *)&v41[2 * v137.i64[1]];
          float16x8_t v198 = vmulq_f16(v162, v191);
          float16x8_t v199 = vmulq_f16(v170, v191);
          float16x8_t v200 = vmulq_f16(v123, v191);
          v123.i16[7] = v58.i16[7];
          v116.i16[7] = v59.i16[7];
          float16x8_t v201 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v194, v443), v196, v442), v197, v441);
          float16x8_t v202 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v197, v438), v196, v439), v194, v440);
          float16x8_t v203 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v198, v446), v199, v445), v200, v444);
          float16x8_t v204 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v198, v443), v199, v442), v200, v441);
          float16x8_t v205 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v200, v438), v199, v439), v198, v440);
          uint16x8_t v206 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v194, v446), v196, v445), v197, v444), (float16x8_t)0), v144));
          uint32x4_t v207 = vmovl_high_u16(v206);
          v137.i64[0] = v207.u32[2];
          v137.i64[1] = v207.u32[3];
          float16x8_t v208 = v137;
          v137.i64[0] = v207.u32[0];
          v137.i64[1] = v207.u32[1];
          float16x8_t v209 = v137;
          uint32x4_t v210 = vmovl_u16(*(uint16x4_t *)v206.i8);
          v137.i64[0] = v210.u32[2];
          v137.i64[1] = v210.u32[3];
          float16x8_t v211 = v137;
          uint64_t v212 = v210.u32[1];
          uint64_t v213 = v210.u32[0];
          uint64_t v214 = v209.i64[1];
          uint64_t v215 = v209.i64[0];
          uint16x8_t v216 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v201, (float16x8_t)0), v144));
          uint32x4_t v217 = vmovl_high_u16(v216);
          uint32x4_t v218 = vmovl_u16(*(uint16x4_t *)v216.i8);
          v116.i16[0] = *(_WORD *)&v48[2 * v213];
          uint64_t v219 = v218.u32[1];
          v123.i16[0] = *(_WORD *)&v48[2 * v218.u32[0]];
          uint64_t v220 = v218.u32[3];
          float v221 = (__int16 *)&v48[2 * v218.u32[2]];
          uint64_t v222 = v217.u32[1];
          uint64_t v223 = v217.u32[0];
          uint64_t v224 = v217.u32[3];
          float v225 = (__int16 *)&v48[2 * v212];
          uint64_t v226 = v217.u32[2];
          uint16x8_t v227 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v202, (float16x8_t)0), v144));
          int16x8_t v228 = (int16x8_t)vmovl_high_u16(v227);
          v137.i64[0] = v228.u32[2];
          v137.i64[1] = v228.u32[3];
          float16x8_t v229 = v137;
          v137.i64[0] = v228.u32[0];
          uint32x4_t v230 = vmovl_u16(*(uint16x4_t *)v227.i8);
          v228.i16[0] = *(_WORD *)&v48[2 * v230.u32[0]];
          float v231 = (__int16 *)&v48[2 * v220];
          float v232 = (__int16 *)&v48[2 * v230.u32[1]];
          float v233 = (__int16 *)&v48[2 * v230.u32[2]];
          float v234 = (__int16 *)&v48[2 * v230.u32[3]];
          uint64_t v235 = v228.u32[1];
          uint64_t v236 = v229.i64[1];
          v116.i16[1] = *v225;
          uint64_t v237 = v229.i64[0];
          v123.i16[1] = *(_WORD *)&v48[2 * v219];
          uint16x8_t v238 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v203, (float16x8_t)0), v144));
          uint32x4_t v239 = vmovl_high_u16(v238);
          uint32x4_t v240 = vmovl_u16(*(uint16x4_t *)v238.i8);
          v228.i16[1] = *v232;
          v116.i16[2] = *(_WORD *)&v48[2 * v211.i64[0]];
          v203.i16[0] = *(_WORD *)&v48[2 * v240.u32[0]];
          v123.i16[2] = *v221;
          v228.i16[2] = *v233;
          v203.i16[1] = *(_WORD *)&v48[2 * v240.u32[1]];
          v116.i16[3] = *(_WORD *)&v48[2 * v211.i64[1]];
          float v241 = (__int16 *)&v48[2 * v240.u32[3]];
          v203.i16[2] = *(_WORD *)&v48[2 * v240.u32[2]];
          v123.i16[3] = *v231;
          uint16x8_t v242 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v204, (float16x8_t)0), v144));
          uint32x4_t v243 = vmovl_u16(*(uint16x4_t *)v242.i8);
          v228.i16[3] = *v234;
          v204.i16[7] = (unint64_t)v243.u32[1] >> 48;
          v203.i16[3] = *v241;
          v204.i16[0] = *(_WORD *)&v48[2 * v243.u32[0]];
          v116.i16[4] = *(_WORD *)&v48[2 * v215];
          v123.i16[4] = *(_WORD *)&v48[2 * v223];
          v228.i16[4] = *(_WORD *)&v48[2 * v137.i64[0]];
          v203.i16[4] = *(_WORD *)&v48[2 * v239.u32[0]];
          v116.i16[5] = *(_WORD *)&v48[2 * v214];
          v204.i16[1] = *(_WORD *)&v48[2 * v243.u32[1]];
          v123.i16[5] = *(_WORD *)&v48[2 * v222];
          size_t v78 = v490;
          v204.i16[2] = *(_WORD *)&v48[2 * v243.u32[2]];
          v228.i16[5] = *(_WORD *)&v48[2 * v235];
          float v244 = (__int16 *)&v48[2 * v239.u32[3]];
          v203.i16[5] = *(_WORD *)&v48[2 * v239.u32[1]];
          uint32x4_t v245 = vmovl_high_u16(v242);
          v116.i16[6] = *(_WORD *)&v48[2 * v208.i64[0]];
          v204.i16[3] = *(_WORD *)&v48[2 * v243.u32[3]];
          v123.i16[6] = *(_WORD *)&v48[2 * v226];
          v204.i16[4] = *(_WORD *)&v48[2 * v245.u32[0]];
          v228.i16[6] = *(_WORD *)&v48[2 * v237];
          uint64_t v246 = v245.u32[3];
          v203.i16[6] = *(_WORD *)&v48[2 * v239.u32[2]];
          float v247 = (__int16 *)&v48[2 * v245.u32[2]];
          v204.i16[5] = *(_WORD *)&v48[2 * v245.u32[1]];
          float16x8_t v248 = vmaxq_f16(v205, (float16x8_t)0);
          v94.i64[0] = 0x9000900090009000;
          v94.i64[1] = 0x9000900090009000;
          _S21 = *(float *)v474.i32;
          v204.i16[6] = *v247;
          uint16x8_t v249 = vcvtq_u16_f16(vminq_f16(v248, v94));
          uint32x4_t v250 = vmovl_high_u16(v249);
          int16x8_t v251 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v249.i8);
          float16x8_t v252 = (float16x8_t)vuzp1q_s16((int16x8_t)v116, (int16x8_t)v123);
          v116.i16[7] = *(_WORD *)&v48[2 * v208.i64[1]];
          v137.i64[0] = v250.u32[0];
          v137.i64[1] = v250.u32[1];
          float16x8_t v253 = v137;
          v137.i64[1] = v251.u32[3];
          v251.i16[7] = (unint64_t)v251.u32[3] >> 48;
          v251.i16[0] = *(_WORD *)&v48[2 * v251.u32[0]];
          uint64_t v254 = v253.i64[1];
          v123.i16[7] = *(_WORD *)&v48[2 * v224];
          v251.i16[1] = *(_WORD *)&v48[2 * v251.u32[1]];
          uint64_t v255 = v253.i64[0];
          float16x8_t v256 = (float16x8_t)vuzp1q_s16((int16x8_t)v203, (int16x8_t)v204);
          float v75 = v491;
          v203.i16[7] = *v244;
          v257 = (__int16 *)&v48[2 * v255];
          v251.i16[2] = *(_WORD *)&v48[2 * v251.u32[2]];
          uint64_t v258 = v250.u32[3];
          v251.i16[3] = *(_WORD *)&v48[2 * v137.i64[1]];
          v204.i16[7] = *(_WORD *)&v48[2 * v246];
          float v259 = (__int16 *)&v48[2 * v250.u32[2]];
          v251.i16[4] = *v257;
          float16x8_t v260 = vmlaq_n_f16(vmlaq_n_f16(v61, v116, v453), v123, v452);
          float16x8_t v261 = (float16x8_t)vuzp2q_s16((int16x8_t)v116, (int16x8_t)v123);
          float16x8_t v62 = v497;
          float16x8_t v262 = vmlaq_n_f16(vmlaq_n_f16(v61, v203, v453), v204, v452);
          float16x8_t v263 = (float16x8_t)v228;
          v251.i16[5] = *(_WORD *)&v48[2 * v254];
          uint64_t v76 = v495;
          v251.i16[6] = *v259;
          v263.i16[7] = *(_WORD *)&v48[2 * v236];
          float16x8_t v264 = vaddq_f16(v252, v261);
          float16x8_t v265 = (float16x8_t)v251;
          v265.i16[7] = *(_WORD *)&v48[2 * v258];
          uint16x8_t *v496 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v260, v263, v451), v61), v474)), v437);
          float v73 = v496 + 1;
          int16x8_t v266 = (int16x8_t)vaddq_f16(vaddq_f16(v264, v256), (float16x8_t)vuzp2q_s16((int16x8_t)v203, (int16x8_t)v204));
          *v99++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v262, v265, v451), v61), v474)), v437);
          int16x8_t v66 = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v475, v58, (float16x8_t)vzip1q_s16(v266, v266)), v59, (float16x8_t)vzip2q_s16(v266, v266)), v60, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v228, v228), (float16x8_t)vtrn2q_s16((int16x8_t)v263, (int16x8_t)v263)), (float16x8_t)vtrn1q_s16(v251, v251)), (float16x8_t)vtrn2q_s16((int16x8_t)v265, (int16x8_t)v265))), v473), v472)), v437);
          *v100++ = v66;
          v98 += 8;
        }
        while ((int)v98 < v470);
        float v75 = &v491[v98];
        v267 = &v490[v98];
        uint64_t v79 = v423;
        unint64_t v268 = v424;
        unint64_t v17 = v430;
        unint64_t v14 = v431;
        uint64_t v72 = v434;
        unint64_t v13 = v435;
        uint64_t v26 = v428;
        uint64_t v25 = v429;
        uint64_t v28 = v426;
        uint64_t v27 = v427;
        unsigned __int8 v77 = v425;
        float v96 = v432;
        float v97 = v433;
        float v93 = _S20;
        float v45 = v422;
        float v34 = v492;
        float v40 = v493;
      }
      for (; v14 > v268; float16x8_t v60 = v477)
      {
        v66.i8[0] = v75[1];
        float v269 = (float)v66.u32[0] - v40;
        unsigned int v270 = v8.u32[1];
        float v271 = v8.f32[1] * v269;
        LOBYTE(v270) = v76->i8[0];
        float v272 = v93 * (float)((float)v270 - v34);
        float v273 = (float)(v8.f32[1] * v269) + v272;
        float v274 = 8191.0;
        if (v273 <= 8191.0)
        {
          float v274 = v271 + v272;
          if (v273 < 0.0) {
            float v274 = 0.0;
          }
        }
        LOBYTE(v273) = *v75;
        float v275 = (float)LODWORD(v273) - v40;
        float v276 = (float)(v7.f32[1] * v269) + (float)(v275 * v7.f32[0]);
        float v277 = 8191.0;
        if ((float)(v272 + v276) <= 8191.0)
        {
          float v277 = v272 + v276;
          if ((float)(v272 + v276) < 0.0) {
            float v277 = 0.0;
          }
        }
        float v278 = v8.f32[0] * v275;
        float v279 = (float)(v8.f32[0] * v275) + v272;
        float v280 = 8191.0;
        if (v279 <= 8191.0)
        {
          float v280 = v279;
          if (v279 < 0.0) {
            float v280 = 0.0;
          }
        }
        LOBYTE(v279) = v76->i8[1];
        float v281 = v93 * (float)((float)LODWORD(v279) - v34);
        float v282 = 8191.0;
        if ((float)(v271 + v281) <= 8191.0)
        {
          float v282 = v271 + v281;
          if ((float)(v271 + v281) < 0.0) {
            float v282 = 0.0;
          }
        }
        float v283 = 8191.0;
        if ((float)(v276 + v281) <= 8191.0)
        {
          float v283 = v276 + v281;
          if ((float)(v276 + v281) < 0.0) {
            float v283 = 0.0;
          }
        }
        float v284 = v278 + v281;
        float v285 = 8191.0;
        if ((float)(v278 + v281) <= 8191.0)
        {
          float v285 = v278 + v281;
          if (v284 < 0.0) {
            float v285 = 0.0;
          }
        }
        LOBYTE(v284) = v267[1];
        float v286 = (float)LODWORD(v284) - v40;
        unsigned int v287 = v8.u32[1];
        float v288 = v8.f32[1] * v286;
        LOBYTE(v287) = v95->i8[0];
        float v289 = v93 * (float)((float)v287 - v34);
        float v290 = (float)(v8.f32[1] * v286) + v289;
        float v291 = 8191.0;
        if (v290 <= 8191.0)
        {
          float v291 = v288 + v289;
          if (v290 < 0.0) {
            float v291 = 0.0;
          }
        }
        LOBYTE(v290) = *v267;
        float v292 = (float)LODWORD(v290) - v40;
        float v293 = (float)(v7.f32[1] * v286) + (float)(v292 * v7.f32[0]);
        float v294 = 8191.0;
        if ((float)(v289 + v293) <= 8191.0)
        {
          float v294 = v289 + v293;
          if ((float)(v289 + v293) < 0.0) {
            float v294 = 0.0;
          }
        }
        float v295 = v8.f32[0] * v292;
        float v296 = (float)(v8.f32[0] * v292) + v289;
        float v297 = 8191.0;
        if (v296 <= 8191.0)
        {
          float v297 = v296;
          if (v296 < 0.0) {
            float v297 = 0.0;
          }
        }
        LOBYTE(_S21) = v95->i8[1];
        float v298 = v93 * (float)((float)LODWORD(_S21) - v34);
        float v299 = v288 + v298;
        BOOL v300 = (float)(v288 + v298) <= 8191.0;
        float v301 = 8191.0;
        if (v300)
        {
          float v301 = v299;
          if (v299 < 0.0) {
            float v301 = 0.0;
          }
        }
        float v302 = v93;
        float v303 = v293 + v298;
        BOOL v300 = (float)(v293 + v298) <= 8191.0;
        float v304 = 8191.0;
        if (v300)
        {
          float v304 = v303;
          if (v303 < 0.0) {
            float v304 = 0.0;
          }
        }
        float v305 = v46;
        float v306 = v295 + v298;
        BOOL v300 = (float)(v295 + v298) <= 8191.0;
        float v307 = 8191.0;
        if (v300)
        {
          float v307 = v306;
          if (v306 < 0.0) {
            float v307 = 0.0;
          }
        }
        _H0 = result->i16[llroundf(fminf(fmaxf(v274, 0.0), 8191.0))];
        __asm { FCVT            S1, H0 }
        _H0 = result->i16[llroundf(fminf(fmaxf(v277, 0.0), 8191.0))];
        unsigned int v311 = llroundf(fminf(fmaxf(v280, 0.0), 8191.0));
        __asm { FCVT            S2, H0 }
        _H0 = result->i16[v311];
        __asm { FCVT            S22, H0 }
        _H21 = result->i16[llroundf(fminf(fmaxf(v282, 0.0), 8191.0))];
        _H9 = result->i16[llroundf(fminf(fmaxf(v283, 0.0), 8191.0))];
        _H28 = result->i16[llroundf(fminf(fmaxf(v285, 0.0), 8191.0))];
        _H25 = result->i16[llroundf(fminf(fmaxf(v291, 0.0), 8191.0))];
        _H26 = result->i16[llroundf(fminf(fmaxf(v294, 0.0), 8191.0))];
        _H15 = result->i16[llroundf(fminf(fmaxf(v297, 0.0), 8191.0))];
        _H3 = result->i16[llroundf(fminf(fmaxf(v301, 0.0), 8191.0))];
        _H4 = result->i16[llroundf(fminf(fmaxf(v304, 0.0), 8191.0))];
        _H5 = result->i16[llroundf(fminf(fmaxf(v307, 0.0), 8191.0))];
        float v324 = (float)((float)((float)(v457 * _S2) + (float)(v458 * _S1)) + (float)(v456 * _S22))
             + (float)(v455 * fmaxf(_S1, fmaxf(_S2, _S22)));
        float v325 = 8191.0;
        if (v324 <= 8191.0)
        {
          float v325 = v324;
          if (v324 < 0.0) {
            float v325 = 0.0;
          }
        }
        __asm
        {
          FCVT            S6, H21
          FCVT            S7, H9
          FCVT            S16, H28
        }
        _H21 = *(_WORD *)&v41[2 * llroundf(v325)];
        float v330 = (float)((float)((float)(v457 * _S7) + (float)(v458 * _S6)) + (float)(v456 * _S16))
             + (float)(v455 * fmaxf(_S6, fmaxf(_S7, _S16)));
        float v331 = 8191.0;
        if (v330 <= 8191.0)
        {
          float v331 = v330;
          if (v330 < 0.0) {
            float v331 = 0.0;
          }
        }
        __asm
        {
          FCVT            S30, H25
          FCVT            S8, H26
          FCVT            S15, H15
        }
        _H27 = *(_WORD *)&v41[2 * llroundf(v331)];
        float v336 = (float)((float)((float)(v457 * _S8) + (float)(v458 * _S30)) + (float)(v456 * _S15))
             + (float)(v455 * fmaxf(_S30, fmaxf(_S8, _S15)));
        float v337 = 8191.0;
        if (v336 <= 8191.0)
        {
          float v337 = v336;
          if (v336 < 0.0) {
            float v337 = 0.0;
          }
        }
        __asm
        {
          FCVT            S26, H3
          FCVT            S28, H4
          FCVT            S9, H5
          FCVT            S3, H21
        }
        float v342 = _S1 * _S3;
        float v343 = _S2 * _S3;
        float v344 = _S22 * _S3;
        __asm { FCVT            S1, H27 }
        float v346 = _S6 * _S1;
        float v347 = _S7 * _S1;
        float v348 = _S16 * _S1;
        _H0 = *(_WORD *)&v41[2 * llroundf(v337)];
        __asm { FCVT            S0, H0 }
        float v351 = _S30 * _S0;
        float v352 = _S8 * _S0;
        float v353 = _S15 * _S0;
        float v354 = (float)((float)((float)(v457 * _S28) + (float)(v458 * _S26)) + (float)(v456 * _S9))
             + (float)(v455 * fmaxf(_S26, fmaxf(_S28, _S9)));
        float v355 = 8191.0;
        if (v354 <= 8191.0)
        {
          float v355 = v354;
          if (v354 < 0.0) {
            float v355 = 0.0;
          }
        }
        _H0 = *(_WORD *)&v41[2 * llroundf(v355)];
        __asm { FCVT            S0, H0 }
        _S7 = _S26 * _S0;
        _S16 = _S28 * _S0;
        float v360 = _S9 * _S0;
        float v361 = (float)((float)(v486 * v343) + (float)(v342 * v487)) + (float)(v344 * v469);
        float v362 = (float)((float)(v466 * v343) + (float)(v342 * v468)) + (float)(v344 * v464);
        _S21 = (float)((float)(v461 * v343) + (float)(v342 * v462)) + (float)(v344 * v459);
        float v364 = (float)((float)(v486 * v347) + (float)(v346 * v487)) + (float)(v348 * v469);
        float v365 = (float)((float)(v466 * v347) + (float)(v346 * v468)) + (float)(v348 * v464);
        _S5 = (float)((float)(v461 * v347) + (float)(v346 * v462)) + (float)(v348 * v459);
        _S6 = (float)((float)(v486 * v352) + (float)(v351 * v487)) + (float)(v353 * v469);
        float v368 = (float)((float)(v466 * v352) + (float)(v351 * v468)) + (float)(v353 * v464);
        float v369 = (float)((float)(v461 * v352) + (float)(v351 * v462)) + (float)(v353 * v459);
        float v370 = (float)((float)(v486 * _S16) + (float)(_S7 * v487)) + (float)(v360 * v469);
        float v371 = (float)((float)(v466 * _S16) + (float)(_S7 * v468)) + (float)(v360 * v464);
        float v372 = (float)((float)(v461 * _S16) + (float)(_S7 * v462)) + (float)(v360 * v459);
        _H1 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v361, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v362, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H3 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0))];
        _H4 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v364, 0.0), 8191.0))];
        __asm
        {
          FCVT            S3, H3
          FCVT            S4, H4
        }
        LOWORD(_S7) = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v365, 0.0), 8191.0))];
        __asm { FCVT            S22, H7 }
        LOWORD(_S5) = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        LOWORD(_S6) = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        LOWORD(_S7) = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v368, 0.0), 8191.0))];
        __asm { FCVT            S25, H7 }
        LOWORD(_S7) = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v369, 0.0), 8191.0))];
        LOWORD(_S16) = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v370, 0.0), 8191.0))];
        __asm
        {
          FCVT            S7, H7
          FCVT            S16, H16
        }
        LOWORD(_S21) = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v371, 0.0), 8191.0))];
        unsigned int v387 = llroundf(fminf(fmaxf(v372, 0.0), 8191.0));
        __asm { FCVT            S0, H21 }
        LOWORD(_S21) = *(_WORD *)&v48[2 * v387];
        __asm { FCVT            S21, H21 }
        float v389 = (float)((float)((float)(v488 * _S2) + (float)(v482 * _S1)) + (float)(v489 * _S3)) + v44;
        if (v389 < v44) {
          float v390 = v44;
        }
        else {
          float v390 = (float)((float)((float)(v488 * _S2) + (float)(v482 * _S1)) + (float)(v489 * _S3)) + v44;
        }
        BOOL v300 = v389 <= v478;
        float v391 = (float)((float)((float)(v488 * _S22) + (float)(v482 * _S4)) + (float)(v489 * _S5)) + v44;
        if (!v300) {
          float v390 = v478;
        }
        unsigned int v392 = llroundf(v390);
        if (v391 < v44) {
          float v393 = v44;
        }
        else {
          float v393 = (float)((float)((float)(v488 * _S22) + (float)(v482 * _S4)) + (float)(v489 * _S5)) + v44;
        }
        BOOL v300 = v391 <= v478;
        float v394 = (float)((float)((float)(v488 * _S25) + (float)(v482 * _S6)) + (float)(v489 * _S7)) + v44;
        if (!v300) {
          float v393 = v478;
        }
        unsigned int v395 = llroundf(v393);
        if (v394 < v44) {
          float v396 = v44;
        }
        else {
          float v396 = (float)((float)((float)(v488 * _S25) + (float)(v482 * _S6)) + (float)(v489 * _S7)) + v44;
        }
        BOOL v300 = v394 <= v478;
        float v397 = (float)((float)((float)(v488 * _S0) + (float)(v482 * _S16)) + (float)(v489 * _S21)) + v44;
        if (!v300) {
          float v396 = v478;
        }
        unsigned int v398 = llroundf(v396);
        if (v397 < v44) {
          float v399 = v44;
        }
        else {
          float v399 = (float)((float)((float)(v488 * _S0) + (float)(v482 * _S16)) + (float)(v489 * _S21)) + v44;
        }
        if (v397 <= v478) {
          float v400 = v399;
        }
        else {
          float v400 = v478;
        }
        float v401 = (float)((float)(_S1 + _S4) + _S6) + _S16;
        float v402 = (float)((float)(_S2 + _S22) + _S25) + _S0;
        v73->i16[0] = v392 << v77;
        v73->i16[1] = v395 << v77;
        v99->i16[0] = v398 << v77;
        v99->i16[1] = llroundf(v400) << v77;
        float v403 = (float)((float)(_S3 + _S5) + _S7) + _S21;
        float v404 = (float)((float)(v45 + (float)(v401 * *(float *)&v485)) + (float)(v402 * *(float *)&v484))
             + (float)(v403 * *(float *)&v483);
        float v46 = v305;
        float v405 = v305;
        if (v404 <= v305)
        {
          float v405 = (float)((float)(v45 + (float)(v401 * *(float *)&v485)) + (float)(v402 * *(float *)&v484))
               + (float)(v403 * *(float *)&v483);
          if (v404 < v494) {
            float v405 = v494;
          }
        }
        *(float *)v66.i32 = (float)((float)(v45 + (float)(v401 * *((float *)&v485 + 1)))
                                  + (float)(v402 * *((float *)&v484 + 1)))
                          + (float)(v403 * *((float *)&v483 + 1));
        v100->i16[0] = llroundf(v405) << v77;
        float v406 = v305;
        float v34 = v492;
        float v40 = v493;
        float v93 = v302;
        float16x8_t v47 = v463;
        float16x8_t v62 = v497;
        v94.i64[0] = 0x9000900090009000;
        v94.i64[1] = 0x9000900090009000;
        if (*(float *)v66.i32 <= v46)
        {
          float v406 = *(float *)v66.i32;
          if (*(float *)v66.i32 < v494) {
            float v406 = v494;
          }
        }
        v268 += 2;
        v75 += 2;
        uint64_t v76 = (int8x8_t *)((char *)v76 + 2);
        v267 += 2;
        float v95 = (int8x8_t *)((char *)v95 + 2);
        v100->i16[1] = llroundf(v406) << v77;
        float v73 = (uint16x8_t *)((char *)v73 + 4);
        float v99 = (uint16x8_t *)((char *)v99 + 4);
        float v100 = (int16x8_t *)((char *)v100 + 4);
        v8.i32[0] = v467;
        float16x8_t v50 = v480;
        v7.i32[0] = v481;
        float16x8_t v58 = v479;
        float16x8_t v59 = v465;
        float16x8_t v61 = v476;
      }
      uint64_t v76 = (int8x8_t *)&v436[v25];
      float v75 = &v96[v26];
      float v73 = (uint16x8_t *)&v97[v27];
      v72 += v28;
      v13 += 2;
      v78 += v79;
    }
    while (v17 > v13);
    if (v420 && v419)
    {
      uint64_t v407 = 0;
      float v408 = v416;
      float v409 = __b;
      do
      {
        if (v14)
        {
          unint64_t v410 = v14;
          float v411 = v409;
          v412 = v408;
          do
          {
            __int16 v413 = *v412++;
            *v411++ = v413 | (v413 << 8);
            --v410;
          }
          while (v410);
        }
        v408 += v417;
        float v409 = (_WORD *)((char *)v409 + v421);
        ++v407;
      }
      while (v407 != v17);
    }
    else
    {
      uint64_t v414 = v421;
      v415 = (char *)__b;
      if (v419)
      {
        do
        {
          if (v14)
          {
            uint64_t result = (float32x2_t *)memset(v415, 255, 2 * v14);
            uint64_t v414 = v421;
          }
          v415 += v414;
          --v17;
        }
        while (v17);
      }
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Tone_Mat_TRC_xf420_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = 2 * *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    uint64_t v12 = *(void *)((char *)result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (uint64_t *)result[16];
    uint64_t v16 = result[15] + 2 * (result[13] * a2 / v6);
    uint64_t v17 = result[19];
    uint64_t v18 = (void *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v218 = v18[2];
    uint64_t v24 = (unsigned __int8 *)(v218 + v23 * v12 + v11);
    uint64_t v25 = *v20;
    uint64_t v26 = v20[1];
    uint64_t v27 = v20[2];
    uint64_t v217 = v15[2];
    uint64_t v28 = (char *)(v217 + v27 * v16 + 2 * v14);
    *(float *)&unsigned int v29 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    float v30 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v31 = (float)LODWORD(a5);
    float v32 = *(float *)&v29 * *(float *)v17;
    float v33 = *(float *)&v29 * *(float *)(v17 + 8);
    float v34 = *(float *)&v29 * *(float *)(v17 + 16);
    float v35 = *(float *)&v29 * *(float *)(v17 + 20);
    float v36 = *(float *)&v29 * *(float *)(v17 + 28);
    LOWORD(v29) = *(_WORD *)(v17 + 144);
    float v37 = (float)v29;
    LOWORD(v29) = *(_WORD *)(v17 + 146);
    float v38 = (float)v29;
    LOWORD(v29) = *(_WORD *)(v17 + 148);
    float v39 = (float)v29;
    LOWORD(v29) = *(_WORD *)(v17 + 150);
    *(float *)&unsigned int v40 = (float)v29;
    float v248 = *(float *)&v40;
    LOWORD(v40) = *(_WORD *)(v17 + 152);
    float v41 = (float)v40;
    float v240 = *(float *)(v17 + 40);
    float v241 = *(float *)(v17 + 36);
    float v238 = *(float *)(v17 + 48) * 0.25;
    float v239 = *(float *)(v17 + 44);
    float v236 = *(float *)(v17 + 56) * 0.25;
    float v237 = *(float *)(v17 + 52) * 0.25;
    float v234 = *(float *)(v17 + 64) * 0.25;
    float v235 = *(float *)(v17 + 60) * 0.25;
    float v42 = *(float *)(v17 + 72);
    float v232 = *(float *)(v17 + 68) * 0.25;
    float v233 = v42;
    float v230 = *(float *)(v17 + 80);
    float v231 = *(float *)(v17 + 76);
    float v228 = *(float *)(v17 + 88);
    float v229 = *(float *)(v17 + 84);
    float v226 = *(float *)(v17 + 96);
    float v227 = *(float *)(v17 + 92);
    float v43 = *(float *)(v17 + 104);
    float v224 = v43;
    float v225 = *(float *)(v17 + 100);
    uint64_t v44 = v17 + 164;
    uint64_t result = (void *)(v17 + 16548);
    uint64_t v45 = v18[1];
    float v46 = (unsigned char *)(*v18 + v21 * v12 + v11);
    uint64_t v47 = v45 + v22 * v12 + v11;
    if (!v45) {
      uint64_t v47 = 0;
    }
    unsigned int v48 = *(unsigned __int8 *)(v17 + 132);
    char v49 = 16 - v48;
    _CF = v48 >= 0x11;
    uint64_t v52 = *v15;
    uint64_t v51 = v15[1];
    uint64_t v53 = v52 + v25 * v16;
    if (_CF) {
      char v49 = 0;
    }
    uint64_t v54 = v51 + v20[1] * (v16 / 2);
    uint64_t v55 = v17 + 32932;
    int32x2_t v56 = (char *)(v53 + 2 * v14);
    uint64_t v57 = v54 + 2 * v14;
    char v58 = v49;
    float v59 = *(float *)(v17 + 108);
    float v60 = *(float *)(v17 + 112);
    float v62 = *(float *)(v17 + 116);
    float v61 = *(float *)(v17 + 120);
    float v246 = (float)LODWORD(a5);
    float v247 = v30;
    float v244 = v33;
    float v245 = v32;
    float v242 = v41;
    float v243 = v38;
    float v222 = v35;
    float v223 = v36;
    float v220 = v60;
    float v221 = v34;
    float v219 = v59;
    do
    {
      int16x8_t v63 = &v56[v25];
      uint64_t v64 = v47 + v22;
      int16x8_t v65 = &v46[v21];
      if (v10)
      {
        unint64_t v66 = 0;
        float16x8_t v67 = &v46[v21];
        unsigned int v68 = &v56[v25];
        do
        {
          LOBYTE(v43) = *(unsigned char *)(v47 + v66 + 1);
          float v69 = (float)LODWORD(v43) - v31;
          float v70 = v33 * v69;
          LOBYTE(v42) = *v46;
          float v71 = v32 * (float)((float)LODWORD(v42) - v30);
          float v72 = (float)(v33 * v69) + v71;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = (float)(v33 * v69) + v71;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          LOBYTE(v72) = *(unsigned char *)(v47 + v66);
          float v74 = (float)LODWORD(v72) - v31;
          float v75 = (float)(v35 * v69) + (float)(v74 * v34);
          float v76 = 8191.0;
          if ((float)(v71 + v75) <= 8191.0)
          {
            float v76 = v71 + v75;
            if ((float)(v71 + v75) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v36 * v74;
          float v78 = v77 + v71;
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          LOBYTE(v78) = v46[1];
          float v80 = v32 * (float)((float)LODWORD(v78) - v30);
          float v81 = v70 + v80;
          float v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = 8191.0;
          if ((float)(v75 + v80) <= 8191.0)
          {
            float v83 = v75 + v80;
            if ((float)(v75 + v80) < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v77 + v80;
          BOOL v85 = (float)(v77 + v80) <= 8191.0;
          float v86 = 8191.0;
          if (v85)
          {
            float v86 = v84;
            if (v84 < 0.0) {
              float v86 = 0.0;
            }
          }
          LOBYTE(v84) = *(unsigned char *)(v64 + v66 + 1);
          *(float *)&unsigned int v87 = (float)LODWORD(v84);
          float v88 = *(float *)&v87 - v31;
          float v89 = v33 * (float)(*(float *)&v87 - v31);
          LOBYTE(v87) = *v67;
          float v90 = v32 * (float)((float)v87 - v30);
          float v91 = 8191.0;
          if ((float)(v89 + v90) <= 8191.0)
          {
            float v91 = v89 + v90;
            if ((float)(v89 + v90) < 0.0) {
              float v91 = 0.0;
            }
          }
          LOBYTE(v41) = *(unsigned char *)(v64 + v66);
          float v92 = (float)LODWORD(v41) - v31;
          float v93 = (float)(v35 * v88) + (float)(v92 * v34);
          float v94 = 8191.0;
          if ((float)(v90 + v93) <= 8191.0)
          {
            float v94 = v90 + v93;
            if ((float)(v90 + v93) < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v36 * v92;
          float v96 = v95 + v90;
          BOOL v85 = (float)(v95 + v90) <= 8191.0;
          float v97 = 8191.0;
          if (v85)
          {
            float v97 = v96;
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          LOBYTE(v77) = v67[1];
          float v98 = v32 * (float)((float)LODWORD(v77) - v30);
          float v99 = v89 + v98;
          BOOL v85 = (float)(v89 + v98) <= 8191.0;
          float v100 = 8191.0;
          if (v85)
          {
            float v100 = v99;
            if (v99 < 0.0) {
              float v100 = 0.0;
            }
          }
          float v101 = v93 + v98;
          float v102 = 8191.0;
          if (v101 <= 8191.0)
          {
            float v102 = v101;
            if (v101 < 0.0) {
              float v102 = 0.0;
            }
          }
          float v103 = v95 + v98;
          float v104 = 8191.0;
          if (v103 <= 8191.0)
          {
            float v104 = v103;
            if (v103 < 0.0) {
              float v104 = 0.0;
            }
          }
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S28, H20 }
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          unsigned int v111 = llroundf(fminf(fmaxf(v79, 0.0), 8191.0));
          __asm { FCVT            S19, H20 }
          _H20 = *(_WORD *)(v44 + 2 * v111);
          __asm { FCVT            S30, H20 }
          _H22 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          float v124 = fmaxf(_S28, fmaxf(_S19, _S30));
          float v125 = (float)((float)((float)(v60 * _S19) + (float)(v59 * _S28)) + (float)(v62 * _S30)) + (float)(v61 * v124);
          float v126 = 8191.0;
          if (v125 <= 8191.0)
          {
            float v126 = (float)((float)((float)(v60 * _S19) + (float)(v59 * _S28)) + (float)(v62 * _S30))
                 + (float)(v61 * v124);
            if (v125 < 0.0) {
              float v126 = 0.0;
            }
          }
          __asm
          {
            FCVT            S3, H22
            FCVT            S17, H23
            FCVT            S21, H20
          }
          _H22 = *((_WORD *)result + llroundf(v126));
          float v131 = (float)((float)((float)(v60 * _S17) + (float)(v59 * _S3)) + (float)(v62 * _S21))
               + (float)(v61 * fmaxf(_S3, fmaxf(_S17, _S21)));
          float v132 = 8191.0;
          if (v131 <= 8191.0)
          {
            float v132 = v131;
            if (v131 < 0.0) {
              float v132 = 0.0;
            }
          }
          __asm
          {
            FCVT            S8, H5
            FCVT            S9, H6
            FCVT            S10, H7
          }
          _H5 = *((_WORD *)result + llroundf(v132));
          float v137 = fmaxf(_S8, fmaxf(_S9, _S10));
          float v138 = (float)((float)((float)(v60 * _S9) + (float)(v59 * _S8)) + (float)(v62 * _S10)) + (float)(v61 * v137);
          float v139 = 8191.0;
          if (v138 <= 8191.0)
          {
            float v139 = (float)((float)((float)(v60 * _S9) + (float)(v59 * _S8)) + (float)(v62 * _S10)) + (float)(v61 * v137);
            if (v138 < 0.0) {
              float v139 = 0.0;
            }
          }
          __asm
          {
            FCVT            S23, H1
            FCVT            S29, H2
            FCVT            S31, H4
            FCVT            S1, H22
          }
          float v144 = _S28 * _S1;
          float v145 = _S19 * _S1;
          float v146 = _S30 * _S1;
          __asm { FCVT            S1, H5 }
          float v148 = _S3 * _S1;
          float v149 = _S17 * _S1;
          float v150 = _S21 * _S1;
          LOWORD(_S1) = *((_WORD *)result + llroundf(v139));
          __asm { FCVT            S2, H1 }
          float v152 = _S8 * _S2;
          float v153 = _S9 * _S2;
          float v154 = _S10 * _S2;
          float v155 = (float)((float)((float)(v60 * _S29) + (float)(v59 * _S23)) + (float)(v62 * _S31))
               + (float)(v61 * fmaxf(_S23, fmaxf(_S29, _S31)));
          float v156 = 8191.0;
          if (v155 <= 8191.0)
          {
            float v156 = v155;
            if (v155 < 0.0) {
              float v156 = 0.0;
            }
          }
          _H17 = *((_WORD *)result + llroundf(v156));
          __asm { FCVT            S17, H17 }
          float v159 = _S23 * _S17;
          _S22 = _S29 * _S17;
          float v161 = _S31 * _S17;
          float v162 = (float)((float)(v231 * v145) + (float)(v144 * v233)) + (float)(v146 * v230);
          float v163 = (float)((float)(v228 * v145) + (float)(v144 * v229)) + (float)(v146 * v227);
          float v164 = (float)((float)(v225 * v145) + (float)(v144 * v226)) + (float)(v146 * v224);
          _S19 = (float)((float)(v231 * v149) + (float)(v148 * v233)) + (float)(v150 * v230);
          _S20 = (float)((float)(v228 * v149) + (float)(v148 * v229)) + (float)(v150 * v227);
          float v167 = (float)((float)(v225 * v149) + (float)(v148 * v226)) + (float)(v150 * v224);
          float v168 = (float)((float)(v231 * v153) + (float)(v152 * v233)) + (float)(v154 * v230);
          float v169 = (float)((float)(v228 * v153) + (float)(v152 * v229)) + (float)(v154 * v227);
          _S3 = (float)((float)(v225 * v153) + (float)(v152 * v226)) + (float)(v154 * v224);
          float v171 = (float)((float)(v231 * _S22) + (float)(v159 * v233)) + (float)(v161 * v230);
          float v172 = (float)((float)(v228 * _S22) + (float)(v159 * v229)) + (float)(v161 * v227);
          float v173 = (float)((float)(v225 * _S22) + (float)(v159 * v226)) + (float)(v161 * v224);
          _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          __asm { FCVT            S5, H1 }
          _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S1, H1
            FCVT            S6, H2
          }
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S17, H2 }
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          __asm { FCVT            S7, H2 }
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S19) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S3) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S20) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S20, H20
          }
          LOWORD(_S22) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0)));
          unsigned int v191 = llroundf(fminf(fmaxf(v173, 0.0), 8191.0));
          __asm { FCVT            S21, H22 }
          LOWORD(_S22) = *(_WORD *)(v55 + 2 * v191);
          __asm { FCVT            S22, H22 }
          float v194 = (float)((float)((float)(v240 * _S5) + (float)(v241 * _S4)) + (float)(v239 * _S1)) + v37;
          if (v194 < v37) {
            float v195 = v37;
          }
          else {
            float v195 = (float)((float)((float)(v240 * _S5) + (float)(v241 * _S4)) + (float)(v239 * _S1)) + v37;
          }
          BOOL v85 = v194 <= v39;
          float v196 = (float)((float)((float)(v240 * _S17) + (float)(v241 * _S6)) + (float)(v239 * _S7)) + v37;
          if (!v85) {
            float v195 = v39;
          }
          unsigned int v197 = llroundf(v195);
          if (v196 < v37) {
            float v198 = v37;
          }
          else {
            float v198 = (float)((float)((float)(v240 * _S17) + (float)(v241 * _S6)) + (float)(v239 * _S7)) + v37;
          }
          BOOL v85 = v196 <= v39;
          float v199 = (float)((float)((float)(v240 * _S19) + (float)(v241 * _S2)) + (float)(v239 * _S3)) + v37;
          if (!v85) {
            float v198 = v39;
          }
          unsigned int v200 = llroundf(v198);
          if (v199 < v37) {
            float v201 = v37;
          }
          else {
            float v201 = (float)((float)((float)(v240 * _S19) + (float)(v241 * _S2)) + (float)(v239 * _S3)) + v37;
          }
          BOOL v85 = v199 <= v39;
          float v202 = (float)((float)((float)(v240 * _S21) + (float)(v241 * _S20)) + (float)(v239 * _S22)) + v37;
          if (!v85) {
            float v201 = v39;
          }
          unsigned int v203 = llroundf(v201);
          if (v202 < v37) {
            float v204 = v37;
          }
          else {
            float v204 = (float)((float)((float)(v240 * _S21) + (float)(v241 * _S20)) + (float)(v239 * _S22)) + v37;
          }
          if (v202 <= v39) {
            float v205 = v204;
          }
          else {
            float v205 = v39;
          }
          float v206 = (float)((float)(_S4 + _S6) + _S2) + _S20;
          float v207 = (float)((float)(_S5 + _S17) + _S19) + _S21;
          *(_WORD *)int32x2_t v56 = v197 << v58;
          *((_WORD *)v56 + 1) = v200 << v58;
          *(_WORD *)unsigned int v68 = v203 << v58;
          *((_WORD *)v68 + 1) = llroundf(v205) << v58;
          float v41 = v242;
          float v208 = (float)((float)(_S1 + _S7) + _S3) + _S22;
          float v209 = (float)((float)(v243 + (float)(v206 * v238)) + (float)(v207 * v237)) + (float)(v208 * v236);
          float v42 = v242;
          if (v209 <= v242)
          {
            float v42 = (float)((float)(v243 + (float)(v206 * v238)) + (float)(v207 * v237)) + (float)(v208 * v236);
            if (v209 < v248) {
              float v42 = v248;
            }
          }
          uint32x4_t v210 = (_WORD *)(v57 + 2 * v66);
          float v211 = (float)((float)(v243 + (float)(v206 * v235)) + (float)(v207 * v234)) + (float)(v208 * v232);
          _WORD *v210 = llroundf(v42) << v58;
          float v43 = v242;
          float v31 = v246;
          float v30 = v247;
          float v33 = v244;
          float v32 = v245;
          float v34 = v221;
          float v35 = v222;
          float v36 = v223;
          if (v211 <= v242)
          {
            float v43 = v211;
            if (v211 < v248) {
              float v43 = v248;
            }
          }
          v46 += 2;
          v67 += 2;
          v56 += 4;
          v68 += 4;
          v210[1] = llroundf(v43) << v58;
          v66 += 2;
          float v59 = v219;
          float v60 = v220;
        }
        while (v10 > v66);
      }
      float v46 = &v65[v21];
      uint64_t v47 = v64 + v22;
      int32x2_t v56 = &v63[v25];
      v57 += v26;
      v9 += 2;
    }
    while (v13 > v9);
    if (v218 && v217)
    {
      uint64_t v212 = 0;
      do
      {
        if (v10)
        {
          unint64_t v213 = v10;
          uint64_t v214 = v28;
          uint64_t v215 = v24;
          do
          {
            __int16 v216 = *v215++;
            *v214++ = v216 | (v216 << 8);
            --v213;
          }
          while (v213);
        }
        v24 += v23;
        v28 += v27;
        ++v212;
      }
      while (v212 != v13);
    }
    else if (v217)
    {
      do
      {
        if (v10) {
          uint64_t result = memset(v28, 255, 2 * v10);
        }
        v28 += v27;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_422vf_TRC_Mat_TRC_xf420_neon_fp16_GCD(float32x2_t *result, uint64_t a2, double a3, float32x4_t _Q1, double a5, double a6, double a7)
{
  uint64_t v11 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v12 = 2 * result->u8[0];
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (2 * v14 != 2 * v13)
  {
    unint64_t v15 = 0;
    unint64_t v16 = *(unint64_t *)((char *)&result[2] + 4);
    uint64_t v17 = *(uint64_t *)((char *)&result[4] + 4);
    uint64_t v18 = *(void *)((char *)&result[5] + 4) + 2 * v13;
    unint64_t v19 = 2 * v14 - 2 * v13;
    float32x2_t v20 = result[14];
    unint64_t v21 = *(void *)&result[13] * a2 / v12;
    size_t v22 = (void *)result[16];
    uint64_t v23 = *(void *)&result[15] + 2 * v21;
    uint64_t v24 = (float32x2_t *)result[19];
    uint64_t v25 = (void *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = (uint64_t *)result[17];
    uint64_t v28 = *v26;
    uint64_t v29 = v26[1];
    uint64_t v358 = v26[2];
    short float v357 = (unsigned __int8 *)(v25[2] + v358 * v18 + v17);
    uint64_t v30 = *v27;
    uint64_t v31 = v27[1];
    uint64_t v361 = v25[2];
    uint64_t v362 = v27[2];
    uint64_t v360 = v22[2];
    LODWORD(v26) = v24[17].u16[2];
    LODWORD(v27) = v24[17].u16[3];
    v32.i32[0] = v24[3].i32[1];
    unsigned int v33 = v24[18].u16[0];
    LODWORD(a3) = 1174403072;
    unsigned int v34 = v24[18].u16[1];
    float v35 = (float)v26;
    *(short float *)_Q1.i16 = (short float)v26;
    unsigned int v36 = v24[18].u16[2];
    float v37 = (float)v27;
    unsigned int v38 = v24[18].u16[3];
    LODWORD(_Q12) = v24[5].i32[1];
    v39.i32[0] = v24[6].i32[0];
    v40.i32[0] = v24[6].i32[1];
    v41.i32[0] = v24[7].i32[0];
    v32.i32[1] = v24[1].i32[0];
    v39.i32[1] = v24[7].i32[1];
    v40.i32[1] = v24[8].i32[0];
    v41.i32[1] = v24[8].i32[1];
    LODWORD(v26) = v24[19].u16[0];
    _S10 = v24[4].i32[1];
    _S6 = v24[5].i32[0];
    LODWORD(a5) = v24[9].i32[1];
    float v422 = *(float *)&a5;
    float v423 = v24[9].f32[0];
    float v44 = (float)v33;
    *(short float *)&a5 = (short float)v33;
    uint64_t v45 = (char *)&v24[20] + 4;
    __b = (_WORD *)(v360 + v362 * v23 + 2 * *(void *)&v20);
    float v46 = 8191.0 / (float)v24[16].u32[0];
    _S9 = v46 * v24->f32[0];
    float v378 = (float)v34;
    float v416 = (float)v36;
    *(float *)&a7 = (float)v38;
    float v429 = (float)v38;
    float v48 = (float)v26;
    *(short float *)&a7 = (short float)v34;
    uint64_t result = (float32x2_t *)((char *)v24 + 16548);
    float16x8_t v49 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q1.f32, 0);
    *(short float *)_Q1.i16 = -(short float)v27;
    *(float32x2_t *)v8.f32 = vmul_n_f32(v32, v46);
    float16x8_t v50 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v8), 0);
    *(float32x2_t *)v10.f32 = vmul_n_f32(v24[2], v46);
    float16x8_t v51 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float32x4_t v52 = (float32x4_t)vmulq_n_f16(v50, *(short float *)_Q1.i16);
    float16x8_t v396 = (float16x8_t)v52;
    float16x8_t v53 = vmulq_n_f16(v51, *(short float *)_Q1.i16);
    __asm { FMOV            V1.2S, #0.25 }
    *(float32x2_t *)v52.f32 = vmul_f32(v39, *(float32x2_t *)_Q1.f32);
    uint64_t v421 = v52.i64[0];
    float16x8_t v58 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v52), 0);
    *(float32x2_t *)v9.f32 = vmul_f32(v40, *(float32x2_t *)_Q1.f32);
    _Q3 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v9), 0);
    *(float32x2_t *)_Q1.f32 = vmul_f32(v41, *(float32x2_t *)_Q1.f32);
    unint64_t v420 = _Q1.i64[0];
    int32x4_t v60 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(_Q1), 0);
    float16x8_t v410 = (float16x8_t)v60;
    int16x8_t v61 = vdupq_lane_s16(*(int16x4_t *)&a5, 0);
    int16x8_t v62 = vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    *(short float *)v60.i16 = (short float)v36;
    int16x8_t v63 = vdupq_lane_s16(*(int16x4_t *)v60.i8, 0);
    *(short float *)v60.i16 = (short float)v38;
    int16x8_t v64 = vdupq_lane_s16(*(int16x4_t *)v60.i8, 0);
    float16x8_t v406 = (float16x8_t)v64;
    *(short float *)v64.i16 = (short float)v26;
    int16x8_t v65 = vdupq_lane_s16(*(int16x4_t *)v64.i8, 0);
    unsigned int v66 = v24[16].u8[4];
    if (v66 >= 0x11) {
      unsigned __int8 v67 = 0;
    }
    else {
      unsigned __int8 v67 = 16 - v66;
    }
    if (v23 >= 0) {
      uint64_t v68 = v23;
    }
    else {
      uint64_t v68 = v23 + 1;
    }
    uint64_t v69 = v22[1] + v31 * (v68 >> 1) + 2 * *(void *)&v20;
    float v70 = (uint16x8_t *)(*v22 + v30 * v23 + 2 * *(void *)&v20);
    uint64_t v71 = v25[1];
    float v72 = (unsigned char *)(v71 + v29 * v18 + v17);
    if (!v71) {
      float v72 = 0;
    }
    float v73 = (int8x8_t *)(*v25 + v28 * v18 + v17);
    unsigned __int8 v74 = v67;
    unint64_t v365 = v16 & 0xFFFFFFF8;
    float v75 = &v72[v29];
    uint64_t v76 = 2 * v29;
    __asm { FCVT            H11, S9 }
    short float v392 = _H11;
    float v417 = v24[5].f32[0];
    float v418 = v24[4].f32[1];
    __asm { FCVT            H11, S10 }
    float16x8_t v79 = _Q3;
    __asm { FCVT            H6, S6 }
    short float v390 = _H6;
    float v419 = v24[5].f32[1];
    __asm { FCVT            H6, S12 }
    _S2 = v24[9].i32[0];
    __asm { FCVT            H3, S2 }
    short float v388 = _H3;
    _S2 = v24[9].i32[1];
    __asm { FCVT            H3, S2 }
    float v403 = v24[10].f32[0];
    __asm { FCVT            H5, S22 }
    short float v386 = _H5;
    float v401 = v24[10].f32[1];
    __asm { FCVT            H5, S23 }
    float v399 = v24[11].f32[0];
    __asm { FCVT            H12, S24 }
    short float v384 = *(short float *)&_Q12;
    float v397 = v24[11].f32[1];
    __asm { FCVT            H12, S26 }
    float v395 = v24[12].f32[0];
    __asm { FCVT            H13, S13 }
    float v394 = v24[12].f32[1];
    __asm { FCVT            H2, S18 }
    short float v381 = *(short float *)&_S2;
    float v393 = v24[13].f32[0];
    __asm { FCVT            H2, S20 }
    uint16x8_t v379 = (uint16x8_t)vdupq_n_s16(v67);
    uint64_t v88 = v9.i64[0];
    float16x8_t v408 = (float16x8_t)v62;
    float16x8_t v409 = (float16x8_t)v61;
    float16x8_t v407 = (float16x8_t)v63;
    float16x8_t v405 = (float16x8_t)v65;
    short float v387 = *(short float *)_Q3.i16;
    short float v380 = *(short float *)&_S2;
    unint64_t v371 = v19;
    unint64_t v372 = v16;
    uint64_t v369 = v29;
    uint64_t v370 = v28;
    uint64_t v367 = v31;
    uint64_t v368 = v30;
    __int32 v414 = v10.i32[0];
    float16x8_t v415 = v51;
    float16x8_t v412 = v58;
    float16x8_t v413 = v53;
    float16x8_t v411 = v79;
    int v404 = v16 - 7;
    unsigned __int8 v366 = v67;
    uint64_t v364 = 2 * v29;
    float16x8_t v402 = v49;
    __int32 v400 = v8.i32[0];
    float16x8_t v398 = v50;
    float v427 = v37;
    float v428 = _S9;
    float v426 = v35;
    short float v391 = _H11;
    short float v389 = _H6;
    short float v385 = _H5;
    short float v382 = _H13;
    long long v383 = _Q12;
    float v363 = v48;
    do
    {
      float v89 = (char *)v73 + v28;
      float v90 = &v72[v29];
      float v91 = &v70->i8[v30];
      if ((int)v16 < 8)
      {
        unint64_t v240 = 0;
        float v95 = (int16x8_t *)v69;
        float v94 = (uint16x8_t *)((char *)v70 + v30);
        float v239 = &v72[v29];
        float v93 = (int8x8_t *)((char *)v73 + v28);
        float v241 = v378;
      }
      else
      {
        float v373 = (char *)v73 + v28;
        float v374 = &v72[v29];
        uint64_t v376 = v69;
        unint64_t v377 = v15;
        uint64_t v92 = 0;
        float v93 = (int8x8_t *)((char *)v73 + v28);
        float v375 = &v70->i8[v30];
        float v94 = (uint16x8_t *)((char *)v70 + v30);
        float v95 = (int16x8_t *)v69;
        v96.i64[0] = 0x9000900090009000;
        v96.i64[1] = 0x9000900090009000;
        unint64_t v424 = v75;
        unsigned __int8 v425 = v72;
        do
        {
          int8x8_t v97 = *(int8x8_t *)&v72[v92];
          *(int8x8_t *)v98.i8 = vzip1_s8(v97, 0);
          v98.u64[1] = (unint64_t)vzip2_s8(v97, 0);
          float16x8_t v99 = vcvtq_f16_u16(v98);
          int16x8_t v100 = (int16x8_t)vmlaq_f16(v396, v50, v99);
          int8x16_t v101 = (int8x16_t)vmlaq_f16(v53, v51, v99);
          v99.i64[0] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u64[0];
          *(int16x4_t *)v102.i8 = vuzp1_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
          *(int16x4_t *)v99.i8 = vuzp2_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
          *(double *)&v99.i64[1] = a3;
          v100.i64[0] = vextq_s8(v101, v101, 8uLL).u64[0];
          float16x4_t v103 = (float16x4_t)vuzp1_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8);
          int8x8_t v104 = *v73++;
          *(double *)&v102.i64[1] = a3;
          *(int16x4_t *)v100.i8 = vuzp2_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8);
          *(int8x8_t *)v101.i8 = vzip1_s8(v104, 0);
          v101.u64[1] = (unint64_t)vzip2_s8(v104, 0);
          *(float16x4_t *)v100.i8 = vadd_f16(v103, *(float16x4_t *)v100.i8);
          float16x8_t v105 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v101), v49);
          int8x8_t v106 = *(int8x8_t *)&v75[v92];
          *(double *)&v100.i64[1] = a3;
          *(int8x8_t *)v107.i8 = vzip1_s8(v106, 0);
          v107.u64[1] = (unint64_t)vzip2_s8(v106, 0);
          float16x8_t v108 = vcvtq_f16_u16(v107);
          float16x8_t v109 = (float16x8_t)vzip1q_s16((int16x8_t)v99, (int16x8_t)v99);
          int16x8_t v110 = (int16x8_t)vmlaq_f16(v396, v50, v108);
          int8x16_t v111 = (int8x16_t)vmlaq_f16(v53, v51, v108);
          v108.i64[0] = vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL).u64[0];
          float16x8_t v112 = (float16x8_t)vzip1q_s16(v102, v102);
          *(int16x4_t *)v102.i8 = vuzp1_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v108.i8);
          *(int16x4_t *)v110.i8 = vuzp2_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v108.i8);
          *(double *)&v110.i64[1] = a3;
          float16x8_t v113 = (float16x8_t)vzip1q_s16(v110, v110);
          float16x8_t v114 = (float16x8_t)vzip1q_s16(v100, v100);
          *(double *)&v102.i64[1] = a3;
          v100.i64[0] = vextq_s8(v111, v111, 8uLL).u64[0];
          *(float16x4_t *)v100.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v100.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v100.i8));
          *(double *)&v100.i64[1] = a3;
          int8x8_t v115 = *v93++;
          float16x8_t v116 = vmlaq_n_f16(v112, v105, v392);
          float16x8_t v117 = (float16x8_t)vzip1q_s16(v102, v102);
          *(int8x8_t *)v102.i8 = vzip1_s8(v115, 0);
          v102.u64[1] = (unint64_t)vzip2_s8(v115, 0);
          float16x8_t v118 = vmlaq_n_f16(v114, v105, v392);
          float16x8_t v119 = (float16x8_t)vzip1q_s16(v100, v100);
          float16x8_t v120 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v102), v49);
          float16x8_t v121 = vmlaq_n_f16(v113, v120, v392);
          float16x8_t v122 = vmlaq_n_f16(v117, v120, v392);
          float16x8_t v123 = vmlaq_n_f16(v119, v120, v392);
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v109, v105, v392), (float16x8_t)0), v96));
          uint32x4_t v125 = vmovl_high_u16(v124);
          *(void *)&long long v126 = v125.u32[2];
          *((void *)&v126 + 1) = v125.u32[3];
          long long v127 = v126;
          *(void *)&long long v126 = v125.u32[0];
          *((void *)&v126 + 1) = v125.u32[1];
          long long v128 = v126;
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v124.i8);
          *(void *)&long long v126 = v129.u32[2];
          *((void *)&v126 + 1) = v129.u32[3];
          uint64_t v130 = v129.u32[1];
          v131.i16[0] = *(_WORD *)&v45[2 * v129.u32[0]];
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v96));
          uint32x4_t v133 = vmovl_high_u16(v132);
          uint32x4_t v134 = vmovl_u16(*(uint16x4_t *)v132.i8);
          uint64_t v135 = v134.u32[1];
          uint64_t v136 = v134.u32[3];
          v137.i16[0] = *(_WORD *)&v45[2 * v134.u32[0]];
          float v138 = (__int16 *)&v45[2 * v134.u32[2]];
          uint64_t v139 = v133.u32[1];
          uint32x4_t v140 = (__int16 *)&v45[2 * v130];
          float16x8_t v141 = (__int16 *)&v45[2 * v133.u32[0]];
          uint64_t v142 = v133.u32[3];
          uint64_t v143 = (__int16 *)&v45[2 * v133.u32[2]];
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)0), v96));
          uint32x4_t v145 = vmovl_high_u16(v144);
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v144.i8);
          v109.i64[0] = 0x9000900090009000;
          v109.i64[1] = 0x9000900090009000;
          v147.i16[0] = *(_WORD *)&v45[2 * v146.u32[0]];
          v131.i16[1] = *v140;
          float v148 = (__int16 *)&v45[2 * v146.u32[1]];
          float v149 = (__int16 *)&v45[2 * v146.u32[2]];
          float v150 = (__int16 *)&v45[2 * v135];
          uint16x8_t v151 = (__int16 *)&v45[2 * v146.u32[3]];
          float v152 = (__int16 *)&v45[2 * v145.u32[0]];
          float v153 = (__int16 *)&v45[2 * v145.u32[1]];
          float v154 = (__int16 *)&v45[2 * v145.u32[2]];
          float v155 = (__int16 *)&v45[2 * v145.u32[3]];
          uint16x8_t v156 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v109));
          uint32x4_t v157 = vmovl_high_u16(v156);
          uint32x4_t v158 = vmovl_u16(*(uint16x4_t *)v156.i8);
          v147.i16[1] = *v148;
          v131.i16[2] = *(_WORD *)&v45[2 * v126];
          v116.i16[0] = *(_WORD *)&v45[2 * v158.u32[0]];
          v137.i16[1] = *v150;
          v147.i16[2] = *v149;
          float v159 = (__int16 *)&v45[2 * v157.u32[0]];
          v131.i16[3] = *(_WORD *)&v45[2 * *((void *)&v126 + 1)];
          v116.i16[1] = *(_WORD *)&v45[2 * v158.u32[1]];
          v137.i16[2] = *v138;
          float v160 = (__int16 *)&v45[2 * v157.u32[1]];
          float v161 = (__int16 *)&v45[2 * v157.u32[2]];
          float v162 = (__int16 *)&v45[2 * v157.u32[3]];
          v147.i16[3] = *v151;
          v116.i16[2] = *(_WORD *)&v45[2 * v158.u32[2]];
          v116.i16[3] = *(_WORD *)&v45[2 * v158.u32[3]];
          v131.i16[4] = *(_WORD *)&v45[2 * v128];
          uint16x8_t v163 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v109));
          uint32x4_t v164 = vmovl_high_u16(v163);
          v137.i16[3] = *(_WORD *)&v45[2 * v136];
          float16x8_t v165 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v163.i8);
          v147.i16[4] = *v152;
          v116.i16[4] = *v159;
          v165.i16[0] = *(_WORD *)&v45[2 * v165.u32[0]];
          v131.i16[5] = *(_WORD *)&v45[2 * *((void *)&v128 + 1)];
          v137.i16[4] = *v141;
          v147.i16[5] = *v153;
          uint64_t v166 = (__int16 *)&v45[2 * v164.u32[1]];
          v116.i16[5] = *v160;
          float v167 = (__int16 *)&v45[2 * v164.u32[2]];
          float v168 = (__int16 *)&v45[2 * v164.u32[3]];
          v165.i16[1] = *(_WORD *)&v45[2 * v165.u32[1]];
          v131.i16[6] = *(_WORD *)&v45[2 * v127];
          v165.i16[2] = *(_WORD *)&v45[2 * v165.u32[2]];
          v165.i16[3] = *(_WORD *)&v45[2 * v165.u32[3]];
          v137.i16[5] = *(_WORD *)&v45[2 * v139];
          v165.i16[4] = *(_WORD *)&v45[2 * v164.u32[0]];
          v147.i16[6] = *v154;
          uint16x8_t v169 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v109));
          uint32x4_t v170 = vmovl_high_u16(v169);
          v116.i16[6] = *v161;
          uint32x4_t v171 = vmovl_u16(*(uint16x4_t *)v169.i8);
          v165.i16[5] = *v166;
          v108.i16[0] = *(_WORD *)&v45[2 * v171.u32[0]];
          v131.i16[7] = *(_WORD *)&v45[2 * *((void *)&v127 + 1)];
          v137.i16[6] = *v143;
          v147.i16[7] = *v155;
          v116.i16[7] = *v162;
          v165.i16[6] = *v167;
          v108.i16[1] = *(_WORD *)&v45[2 * v171.u32[1]];
          v108.i16[2] = *(_WORD *)&v45[2 * v171.u32[2]];
          v137.i16[7] = *(_WORD *)&v45[2 * v142];
          v108.i16[3] = *(_WORD *)&v45[2 * v171.u32[3]];
          v108.i16[4] = *(_WORD *)&v45[2 * v170.u32[0]];
          v165.i16[7] = *v168;
          v108.i16[5] = *(_WORD *)&v45[2 * v170.u32[1]];
          v108.i16[6] = *(_WORD *)&v45[2 * v170.u32[2]];
          v108.i16[7] = *(_WORD *)&v45[2 * v170.u32[3]];
          v122.i16[7] = v79.i16[7];
          float16x8_t v172 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v131, v388), v137, v387), v147, v386);
          v123.i16[7] = HIWORD(v383);
          float16x8_t v173 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v131, v385), v137, v384), v147, *(short float *)&v383);
          float16x8_t v174 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v147, v380), v137, v381), v131, v382);
          float16x8_t v175 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v116, v388), v165, v387), v108, v386);
          float16x8_t v176 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v116, v385), v165, v384), v108, *(short float *)&v383);
          float16x8_t v177 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v108, v380), v165, v381), v116, v382);
          uint16x8_t v178 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v172, (float16x8_t)0), v109));
          uint32x4_t v179 = vmovl_high_u16(v178);
          *(void *)&long long v126 = v179.u32[2];
          *((void *)&v126 + 1) = v179.u32[3];
          long long v180 = v126;
          *(void *)&long long v126 = v179.u32[0];
          *((void *)&v126 + 1) = v179.u32[1];
          long long v181 = v126;
          uint32x4_t v182 = vmovl_u16(*(uint16x4_t *)v178.i8);
          *(void *)&long long v126 = v182.u32[2];
          *((void *)&v126 + 1) = v182.u32[3];
          uint64_t v183 = v182.u32[1];
          uint64_t v184 = v182.u32[0];
          uint64_t v185 = *((void *)&v181 + 1);
          uint64_t v186 = v181;
          uint16x8_t v187 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v173, (float16x8_t)0), v109));
          uint32x4_t v188 = vmovl_high_u16(v187);
          uint32x4_t v189 = vmovl_u16(*(uint16x4_t *)v187.i8);
          v131.i16[0] = result->i16[v184];
          uint64_t v190 = v189.u32[1];
          v122.i16[0] = result->i16[v189.u32[0]];
          uint64_t v191 = v189.u32[3];
          uint64_t v192 = (__int16 *)result + v189.u32[2];
          uint64_t v193 = v188.u32[1];
          uint64_t v194 = v188.u32[0];
          uint64_t v195 = v188.u32[3];
          float v196 = (__int16 *)result + v183;
          uint64_t v197 = v188.u32[2];
          uint16x8_t v198 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v174, (float16x8_t)0), v109));
          uint32x4_t v199 = vmovl_high_u16(v198);
          uint32x4_t v200 = vmovl_u16(*(uint16x4_t *)v198.i8);
          float v201 = (__int16 *)result + v190;
          v123.i16[0] = result->i16[v200.u32[0]];
          float v202 = (__int16 *)result + v191;
          unsigned int v203 = (__int16 *)result + v200.u32[1];
          float v204 = (__int16 *)result + v200.u32[2];
          float v205 = (__int16 *)result + v200.u32[3];
          uint64_t v206 = v199.u32[1];
          uint64_t v207 = v199.u32[3];
          v131.i16[1] = *v196;
          uint64_t v208 = v199.u32[0];
          uint64_t v209 = v199.u32[2];
          v122.i16[1] = *v201;
          uint16x8_t v210 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v175, (float16x8_t)0), v109));
          uint32x4_t v211 = vmovl_high_u16(v210);
          uint32x4_t v212 = vmovl_u16(*(uint16x4_t *)v210.i8);
          v123.i16[1] = *v203;
          v131.i16[2] = result->i16[v126];
          v175.i16[0] = result->i16[v212.u32[0]];
          v122.i16[2] = *v192;
          v123.i16[2] = *v204;
          v175.i16[1] = result->i16[v212.u32[1]];
          v131.i16[3] = result->i16[*((void *)&v126 + 1)];
          unint64_t v213 = (__int16 *)result + v212.u32[3];
          v175.i16[2] = result->i16[v212.u32[2]];
          v122.i16[3] = *v202;
          float16x8_t v214 = vmaxq_f16(v176, (float16x8_t)0);
          v96.i64[0] = 0x9000900090009000;
          v96.i64[1] = 0x9000900090009000;
          uint16x8_t v215 = vcvtq_u16_f16(vminq_f16(v214, v96));
          uint32x4_t v216 = vmovl_u16(*(uint16x4_t *)v215.i8);
          v123.i16[3] = *v205;
          v175.i16[3] = *v213;
          v116.i16[0] = result->i16[v216.u32[0]];
          v131.i16[4] = result->i16[v186];
          uint64_t v217 = (__int16 *)result + v193;
          v122.i16[4] = result->i16[v194];
          uint64_t v218 = (__int16 *)result + v195;
          v123.i16[4] = result->i16[v208];
          float v219 = (__int16 *)result + v207;
          v175.i16[4] = result->i16[v211.u32[0]];
          v131.i16[5] = result->i16[v185];
          v116.i16[1] = result->i16[v216.u32[1]];
          v122.i16[5] = *v217;
          v116.i16[2] = result->i16[v216.u32[2]];
          v123.i16[5] = result->i16[v206];
          float v220 = (__int16 *)result + v211.u32[3];
          v175.i16[5] = result->i16[v211.u32[1]];
          float v75 = v424;
          uint32x4_t v221 = vmovl_high_u16(v215);
          v131.i16[6] = result->i16[v180];
          v116.i16[3] = result->i16[v216.u32[3]];
          v122.i16[6] = result->i16[v197];
          v116.i16[4] = result->i16[v221.u32[0]];
          v123.i16[6] = result->i16[v209];
          uint64_t v222 = v221.u32[3];
          v175.i16[6] = result->i16[v211.u32[2]];
          v116.i16[5] = result->i16[v221.u32[1]];
          v116.i16[6] = result->i16[v221.u32[2]];
          uint16x8_t v223 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v177, (float16x8_t)0), v96));
          uint32x4_t v224 = vmovl_high_u16(v223);
          int16x8_t v225 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v223.i8);
          float16x8_t v226 = (float16x8_t)vuzp1q_s16((int16x8_t)v131, (int16x8_t)v122);
          v131.i16[7] = result->i16[*((void *)&v180 + 1)];
          *(void *)&long long v126 = v224.u32[0];
          *((void *)&v126 + 1) = v224.u32[1];
          long long v227 = v126;
          *((void *)&v126 + 1) = v225.u32[3];
          v225.i16[7] = (unint64_t)v225.u32[3] >> 48;
          uint64_t v228 = *((void *)&v126 + 1);
          v225.i16[0] = result->i16[v225.u32[0]];
          uint64_t v229 = *((void *)&v227 + 1);
          v122.i16[7] = *v218;
          v225.i16[1] = result->i16[v225.u32[1]];
          uint64_t v230 = v227;
          float16x8_t v231 = (float16x8_t)vuzp1q_s16((int16x8_t)v175, (int16x8_t)v116);
          *((void *)&v126 + 1) = v224.u32[3];
          v175.i16[7] = *v220;
          v225.i16[2] = result->i16[v225.u32[2]];
          v225.i16[3] = result->i16[v228];
          v116.i16[7] = result->i16[v222];
          float v232 = (__int16 *)result + v224.u32[2];
          v225.i16[4] = result->i16[v230];
          float16x8_t v233 = vmlaq_n_f16(vmlaq_n_f16(v409, v131, v391), v122, v390);
          float16x8_t v234 = (float16x8_t)vuzp2q_s16((int16x8_t)v131, (int16x8_t)v122);
          float16x8_t v235 = v123;
          v225.i16[5] = result->i16[v229];
          v225.i16[6] = *v232;
          v235.i16[7] = *v219;
          float v72 = v425;
          float16x8_t v236 = vaddq_f16(v226, v234);
          float16x8_t v237 = (float16x8_t)v225;
          v237.i16[7] = result->i16[*((void *)&v126 + 1)];
          *v70++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v233, v235, v389), v409), v407)), v379);
          int16x8_t v238 = (int16x8_t)vaddq_f16(vaddq_f16(v236, v231), (float16x8_t)vuzp2q_s16((int16x8_t)v175, (int16x8_t)v116));
          *v94++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v409, v175, v391), v116, v390), v237, v389), v409), v407)), v379);
          _Q3 = (float16x8_t)vzip1q_s16(v238, v238);
          int16x8_t v65 = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v408, v58, _Q3), v79, (float16x8_t)vzip2q_s16(v238, v238)), v410, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v123, (int16x8_t)v123), (float16x8_t)vtrn2q_s16((int16x8_t)v235, (int16x8_t)v235)), (float16x8_t)vtrn1q_s16(v225, v225)), (float16x8_t)vtrn2q_s16((int16x8_t)v237, (int16x8_t)v237))), v406), v405)), v379);
          *v95++ = v65;
          v92 += 8;
        }
        while ((int)v92 < v404);
        float v72 = &v425[v92];
        float v239 = &v424[v92];
        uint64_t v76 = v364;
        unint64_t v240 = v365;
        unint64_t v19 = v371;
        unint64_t v16 = v372;
        uint64_t v69 = v376;
        unint64_t v15 = v377;
        uint64_t v29 = v369;
        uint64_t v28 = v370;
        uint64_t v31 = v367;
        uint64_t v30 = v368;
        unsigned __int8 v74 = v366;
        float v90 = v374;
        float v91 = v375;
        float v89 = v373;
        float v241 = v378;
        float v35 = v426;
        float v37 = v427;
        float v48 = v363;
        _S9 = v428;
      }
      for (; v16 > v240; float16x8_t v79 = v411)
      {
        v65.i8[0] = v72[1];
        float v242 = (float)v65.u32[0] - v37;
        float v243 = v8.f32[1] * v242;
        _Q3.i8[0] = v73->i8[0];
        float v244 = _S9 * (float)((float)_Q3.u32[0] - v35);
        float v245 = (float)(v8.f32[1] * v242) + v244;
        float v246 = 8191.0;
        if (v245 <= 8191.0)
        {
          float v246 = v243 + v244;
          if (v245 < 0.0) {
            float v246 = 0.0;
          }
        }
        LOBYTE(v245) = *v72;
        float v247 = (float)LODWORD(v245) - v37;
        float v248 = (float)(v10.f32[1] * v242) + (float)(v247 * v10.f32[0]);
        float v249 = 8191.0;
        if ((float)(v244 + v248) <= 8191.0)
        {
          float v249 = v244 + v248;
          if ((float)(v244 + v248) < 0.0) {
            float v249 = 0.0;
          }
        }
        float v250 = v8.f32[0] * v247;
        float v251 = v250 + v244;
        float v252 = 8191.0;
        if (v251 <= 8191.0)
        {
          float v252 = v251;
          if (v251 < 0.0) {
            float v252 = 0.0;
          }
        }
        LOBYTE(v251) = v73->i8[1];
        float v253 = _S9 * (float)((float)LODWORD(v251) - v35);
        float v254 = v243 + v253;
        float v255 = 8191.0;
        if (v254 <= 8191.0)
        {
          float v255 = v254;
          if (v254 < 0.0) {
            float v255 = 0.0;
          }
        }
        float v256 = 8191.0;
        if ((float)(v248 + v253) <= 8191.0)
        {
          float v256 = v248 + v253;
          if ((float)(v248 + v253) < 0.0) {
            float v256 = 0.0;
          }
        }
        float v257 = v250 + v253;
        float v258 = 8191.0;
        if ((float)(v250 + v253) <= 8191.0)
        {
          float v258 = v250 + v253;
          if (v257 < 0.0) {
            float v258 = 0.0;
          }
        }
        LOBYTE(v257) = v239[1];
        float v259 = (float)LODWORD(v257) - v37;
        unsigned int v260 = v8.u32[1];
        float v261 = v8.f32[1] * v259;
        LOBYTE(v260) = v93->i8[0];
        float v262 = _S9 * (float)((float)v260 - v35);
        float v263 = (float)(v8.f32[1] * v259) + v262;
        float v264 = 8191.0;
        if (v263 <= 8191.0)
        {
          float v264 = v261 + v262;
          if (v263 < 0.0) {
            float v264 = 0.0;
          }
        }
        LOBYTE(v263) = *v239;
        float v265 = (float)LODWORD(v263) - v37;
        unsigned int v266 = v10.u32[1];
        float v267 = (float)(v10.f32[1] * v259) + (float)(v265 * v10.f32[0]);
        float v268 = 8191.0;
        if ((float)(v262 + v267) <= 8191.0)
        {
          float v268 = v262 + v267;
          if ((float)(v262 + v267) < 0.0) {
            float v268 = 0.0;
          }
        }
        float v269 = v8.f32[0] * v265;
        float v270 = v269 + v262;
        BOOL v271 = (float)(v269 + v262) <= 8191.0;
        float v272 = 8191.0;
        if (v271)
        {
          float v272 = v270;
          if (v270 < 0.0) {
            float v272 = 0.0;
          }
        }
        LOBYTE(v266) = v93->i8[1];
        float v273 = _S9 * (float)((float)v266 - v35);
        float v274 = v261 + v273;
        BOOL v271 = (float)(v261 + v273) <= 8191.0;
        float v275 = 8191.0;
        if (v271)
        {
          float v275 = v274;
          if (v274 < 0.0) {
            float v275 = 0.0;
          }
        }
        float v276 = v267 + v273;
        BOOL v271 = (float)(v267 + v273) <= 8191.0;
        float v277 = 8191.0;
        if (v271)
        {
          float v277 = v276;
          if (v276 < 0.0) {
            float v277 = 0.0;
          }
        }
        float v278 = v241;
        float v279 = v269 + v273;
        float v280 = 8191.0;
        if (v279 <= 8191.0)
        {
          float v280 = v279;
          if (v279 < 0.0) {
            float v280 = 0.0;
          }
        }
        _H5 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v246, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        _H18 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v249, 0.0), 8191.0))];
        __asm { FCVT            S18, H18 }
        _H20 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v252, 0.0), 8191.0))];
        _H27 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v255, 0.0), 8191.0))];
        __asm
        {
          FCVT            S20, H20
          FCVT            S27, H27
        }
        _H22 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v256, 0.0), 8191.0))];
        __asm { FCVT            S22, H22 }
        _H28 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v258, 0.0), 8191.0))];
        __asm { FCVT            S28, H28 }
        _H23 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v264, 0.0), 8191.0))];
        __asm { FCVT            S23, H23 }
        _H6 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v268, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        _H1 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v272, 0.0), 8191.0))];
        _H2 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v275, 0.0), 8191.0))];
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H2
        }
        _H3 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v277, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H4 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v280, 0.0), 8191.0))];
        __asm { FCVT            S4, H4 }
        float v305 = (float)((float)(v422 * _S18) + (float)(_S5 * v423)) + (float)(_S20 * v403);
        float v306 = (float)((float)(v399 * _S18) + (float)(_S5 * v401)) + (float)(_S20 * v397);
        _S5 = (float)((float)(v394 * _S18) + (float)(_S5 * v395)) + (float)(_S20 * v393);
        float v308 = (float)((float)(v422 * _S22) + (float)(_S27 * v423)) + (float)(_S28 * v403);
        float v309 = (float)((float)(v399 * _S22) + (float)(_S27 * v401)) + (float)(_S28 * v397);
        float v310 = (float)((float)(v394 * _S22) + (float)(_S27 * v395)) + (float)(_S28 * v393);
        float v311 = (float)((float)(v422 * _S6) + (float)(_S23 * v423)) + (float)(_S1 * v403);
        float v312 = (float)((float)(v399 * _S6) + (float)(_S23 * v401)) + (float)(_S1 * v397);
        _S6 = (float)((float)(v394 * _S6) + (float)(_S23 * v395)) + (float)(_S1 * v393);
        float v314 = (float)((float)(v422 * _S3) + (float)(_S2 * v423)) + (float)(_S4 * v403);
        float v315 = (float)((float)(v399 * _S3) + (float)(_S2 * v401)) + (float)(_S4 * v397);
        float v316 = (float)((float)(v394 * _S3) + (float)(_S2 * v395)) + (float)(_S4 * v393);
        LOWORD(_S1) = result->i16[llroundf(fminf(fmaxf(v305, 0.0), 8191.0))];
        __asm { FCVT            S18, H1 }
        LOWORD(_S1) = result->i16[llroundf(fminf(fmaxf(v306, 0.0), 8191.0))];
        __asm { FCVT            S20, H1 }
        LOWORD(_S1) = result->i16[llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
        LOWORD(_S2) = result->i16[llroundf(fminf(fmaxf(v308, 0.0), 8191.0))];
        __asm
        {
          FCVT            S1, H1
          FCVT            S22, H2
        }
        LOWORD(_S2) = result->i16[llroundf(fminf(fmaxf(v309, 0.0), 8191.0))];
        __asm { FCVT            S23, H2 }
        LOWORD(_S2) = result->i16[llroundf(fminf(fmaxf(v310, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        LOWORD(_S3) = result->i16[llroundf(fminf(fmaxf(v311, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        LOWORD(_S5) = result->i16[llroundf(fminf(fmaxf(v312, 0.0), 8191.0))];
        __asm { FCVT            S27, H5 }
        LOWORD(_S5) = result->i16[llroundf(fminf(fmaxf(_S6, 0.0), 8191.0))];
        LOWORD(_S6) = result->i16[llroundf(fminf(fmaxf(v314, 0.0), 8191.0))];
        __asm
        {
          FCVT            S28, H5
          FCVT            S5, H6
        }
        LOWORD(_S6) = result->i16[llroundf(fminf(fmaxf(v315, 0.0), 8191.0))];
        unsigned int v327 = llroundf(fminf(fmaxf(v316, 0.0), 8191.0));
        __asm { FCVT            S4, H6 }
        LOWORD(_S6) = result->i16[v327];
        __asm { FCVT            S6, H6 }
        float v330 = (float)((float)((float)(v417 * _S20) + (float)(v418 * _S18)) + (float)(v419 * _S1)) + v44;
        if (v330 < v44) {
          float v331 = v44;
        }
        else {
          float v331 = (float)((float)((float)(v417 * _S20) + (float)(v418 * _S18)) + (float)(v419 * _S1)) + v44;
        }
        BOOL v271 = v330 <= v416;
        float v332 = (float)((float)((float)(v417 * _S23) + (float)(v418 * _S22)) + (float)(v419 * _S2)) + v44;
        if (!v271) {
          float v331 = v416;
        }
        unsigned int v333 = llroundf(v331);
        if (v332 < v44) {
          float v334 = v44;
        }
        else {
          float v334 = (float)((float)((float)(v417 * _S23) + (float)(v418 * _S22)) + (float)(v419 * _S2)) + v44;
        }
        BOOL v271 = v332 <= v416;
        float v335 = (float)((float)((float)(v417 * _S27) + (float)(v418 * _S3)) + (float)(v419 * _S28)) + v44;
        if (!v271) {
          float v334 = v416;
        }
        unsigned int v336 = llroundf(v334);
        if (v335 < v44) {
          float v337 = v44;
        }
        else {
          float v337 = (float)((float)((float)(v417 * _S27) + (float)(v418 * _S3)) + (float)(v419 * _S28)) + v44;
        }
        BOOL v271 = v335 <= v416;
        float v338 = (float)((float)((float)(v417 * _S4) + (float)(v418 * _S5)) + (float)(v419 * _S6)) + v44;
        if (!v271) {
          float v337 = v416;
        }
        unsigned int v339 = llroundf(v337);
        if (v338 < v44) {
          float v340 = v44;
        }
        else {
          float v340 = (float)((float)((float)(v417 * _S4) + (float)(v418 * _S5)) + (float)(v419 * _S6)) + v44;
        }
        if (v338 <= v416) {
          float v341 = v340;
        }
        else {
          float v341 = v416;
        }
        float v342 = (float)((float)(_S18 + _S22) + _S3) + _S5;
        float v343 = (float)((float)(_S20 + _S23) + _S27) + _S4;
        v70->i16[0] = v333 << v74;
        v70->i16[1] = v336 << v74;
        v94->i16[0] = v339 << v74;
        v94->i16[1] = llroundf(v341) << v74;
        float v241 = v278;
        float v344 = (float)((float)(_S1 + _S2) + _S28) + _S6;
        float v345 = (float)((float)(v278 + (float)(v342 * *(float *)&v421)) + (float)(v343 * *(float *)&v88))
             + (float)(v344 * *(float *)&v420);
        float v346 = v48;
        if (v345 <= v48)
        {
          float v346 = (float)((float)(v278 + (float)(v342 * *(float *)&v421)) + (float)(v343 * *(float *)&v88))
               + (float)(v344 * *(float *)&v420);
          if (v345 < v429) {
            float v346 = v429;
          }
        }
        *(float *)_Q3.i32 = (float)(v278 + (float)(v342 * *((float *)&v421 + 1))) + (float)(v343 * *((float *)&v88 + 1));
        *(float *)v65.i32 = *(float *)_Q3.i32 + (float)(v344 * *((float *)&v420 + 1));
        v95->i16[0] = llroundf(v346) << v74;
        float v347 = v48;
        float v35 = v426;
        float v37 = v427;
        _S9 = v428;
        float16x8_t v50 = v398;
        if (*(float *)v65.i32 <= v48)
        {
          float v347 = *(float *)v65.i32;
          if (*(float *)v65.i32 < v429) {
            float v347 = v429;
          }
        }
        v240 += 2;
        v72 += 2;
        float v73 = (int8x8_t *)((char *)v73 + 2);
        v239 += 2;
        float v93 = (int8x8_t *)((char *)v93 + 2);
        v95->i16[1] = llroundf(v347) << v74;
        float v70 = (uint16x8_t *)((char *)v70 + 4);
        float v94 = (uint16x8_t *)((char *)v94 + 4);
        float v95 = (int16x8_t *)((char *)v95 + 4);
        float16x8_t v49 = v402;
        v8.i32[0] = v400;
        v10.i32[0] = v414;
        float16x8_t v51 = v415;
        float16x8_t v58 = v412;
        float16x8_t v53 = v413;
      }
      float v73 = (int8x8_t *)&v89[v28];
      float v72 = &v90[v29];
      float v70 = (uint16x8_t *)&v91[v30];
      v69 += v31;
      v15 += 2;
      v75 += v76;
    }
    while (v19 > v15);
    if (v361 && v360)
    {
      uint64_t v348 = 0;
      uint64_t v349 = v357;
      uint64_t v350 = __b;
      do
      {
        if (v16)
        {
          unint64_t v351 = v16;
          float v352 = v350;
          float v353 = v349;
          do
          {
            __int16 v354 = *v353++;
            *v352++ = v354 | (v354 << 8);
            --v351;
          }
          while (v351);
        }
        v349 += v358;
        uint64_t v350 = (_WORD *)((char *)v350 + v362);
        ++v348;
      }
      while (v348 != v19);
    }
    else
    {
      uint64_t v355 = v362;
      float v356 = (char *)__b;
      if (v360)
      {
        do
        {
          if (v16)
          {
            uint64_t result = (float32x2_t *)memset(v356, 255, 2 * v16);
            uint64_t v355 = v362;
          }
          v356 += v355;
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 36);
    uint64_t v12 = *(void *)(result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = *((void *)result + 14);
    uint64_t v15 = (void *)*((void *)result + 16);
    uint64_t v16 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v17 = *((void *)result + 19);
    uint64_t v18 = (void *)*((void *)result + 7);
    uint64_t v19 = (uint64_t *)*((void *)result + 8);
    uint64_t v20 = (uint64_t *)*((void *)result + 17);
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v174 = v18[2];
    uint64_t v24 = (unsigned __int8 *)(v174 + v23 * v12 + v11);
    uint64_t v25 = *v20;
    uint64_t v26 = v20[1];
    uint64_t v27 = v20[2];
    uint64_t v28 = v15[2];
    uint64_t v29 = (char *)(v28 + v27 * v16 + 2 * v14);
    *(float *)&unsigned int v30 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    float v31 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v32 = (float)LODWORD(a5);
    float v33 = *(float *)&v30 * *(float *)v17;
    float v34 = *(float *)&v30 * *(float *)(v17 + 8);
    float v35 = *(float *)&v30 * *(float *)(v17 + 16);
    float v36 = *(float *)&v30 * *(float *)(v17 + 20);
    float v37 = *(float *)&v30 * *(float *)(v17 + 28);
    LOWORD(v30) = *(_WORD *)(v17 + 144);
    float v38 = (float)v30;
    LOWORD(v30) = *(_WORD *)(v17 + 146);
    float v39 = (float)v30;
    LOWORD(v30) = *(_WORD *)(v17 + 148);
    float v40 = (float)v30;
    LOWORD(v30) = *(_WORD *)(v17 + 150);
    *(float *)&unsigned int v41 = (float)v30;
    float v199 = *(float *)&v41;
    LOWORD(v41) = *(_WORD *)(v17 + 152);
    float v42 = (float)v41;
    float v192 = *(float *)(v17 + 40);
    float v193 = *(float *)(v17 + 36);
    float v190 = *(float *)(v17 + 48) * 0.25;
    float v191 = *(float *)(v17 + 44);
    float v188 = *(float *)(v17 + 56) * 0.25;
    float v189 = *(float *)(v17 + 52) * 0.25;
    float v186 = *(float *)(v17 + 64) * 0.25;
    float v187 = *(float *)(v17 + 60) * 0.25;
    float v184 = *(float *)(v17 + 68) * 0.25;
    float v185 = *(float *)(v17 + 72);
    float v182 = *(float *)(v17 + 80);
    float v183 = *(float *)(v17 + 76);
    float v180 = *(float *)(v17 + 88);
    float v181 = *(float *)(v17 + 84);
    float v178 = *(float *)(v17 + 96);
    float v179 = *(float *)(v17 + 92);
    float v43 = *(float *)(v17 + 104);
    float v176 = v43;
    float v177 = *(float *)(v17 + 100);
    uint64_t v44 = v17 + 164;
    uint64_t v45 = v18[1];
    uint64_t result = (unsigned __int8 *)(*v18 + v21 * v12 + v11);
    uint64_t v46 = v45 + v22 * v12 + v11;
    uint64_t v47 = v17 + 16548;
    if (!v45) {
      uint64_t v46 = 0;
    }
    unsigned int v48 = *(unsigned __int8 *)(v17 + 132);
    uint64_t v49 = v15[1];
    float16x8_t v50 = (char *)(*v15 + v25 * v16 + 2 * v14);
    if (v48 >= 0x11) {
      char v51 = 0;
    }
    else {
      char v51 = 16 - v48;
    }
    uint64_t v52 = v49 + v26 * (v16 / 2) + 2 * v14;
    char v53 = v51;
    float v197 = v33;
    float v198 = (float)LODWORD(a5);
    float v195 = v39;
    float v196 = v34;
    float v194 = v42;
    float v175 = v37;
    do
    {
      uint64_t v54 = &v50[v25];
      uint64_t v55 = v46 + v22;
      int32x2_t v56 = &result[v21];
      if (v10)
      {
        unint64_t v57 = 0;
        float16x8_t v58 = &result[v21];
        float v59 = &v50[v25];
        do
        {
          LOBYTE(v43) = *(unsigned char *)(v46 + v57 + 1);
          *(float *)&unsigned int v60 = (float)LODWORD(v43);
          float v61 = *(float *)&v60 - v32;
          float v62 = v34 * (float)(*(float *)&v60 - v32);
          LOBYTE(v60) = *result;
          float v63 = v33 * (float)((float)v60 - v31);
          float v64 = v62 + v63;
          float v65 = 8191.0;
          if ((float)(v62 + v63) <= 8191.0)
          {
            float v65 = v62 + v63;
            if (v64 < 0.0) {
              float v65 = 0.0;
            }
          }
          LOBYTE(v64) = *(unsigned char *)(v46 + v57);
          float v66 = (float)LODWORD(v64) - v32;
          float v67 = (float)(v36 * v61) + (float)(v66 * v35);
          float v68 = 8191.0;
          if ((float)(v63 + v67) <= 8191.0)
          {
            float v68 = v63 + v67;
            if ((float)(v63 + v67) < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v37 * v66;
          float v70 = v69 + v63;
          float v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            float v71 = v70;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          LOBYTE(v70) = result[1];
          float v72 = v33 * (float)((float)LODWORD(v70) - v31);
          float v73 = 8191.0;
          if ((float)(v62 + v72) <= 8191.0)
          {
            float v73 = v62 + v72;
            if ((float)(v62 + v72) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v67 + v72;
          float v75 = 8191.0;
          if ((float)(v67 + v72) <= 8191.0)
          {
            float v75 = v67 + v72;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v69 + v72;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          LOBYTE(v74) = *(unsigned char *)(v55 + v57 + 1);
          float v78 = (float)LODWORD(v74) - v32;
          float v79 = v34 * v78;
          LOBYTE(v62) = *v58;
          float v80 = v33 * (float)((float)LODWORD(v62) - v31);
          float v81 = 8191.0;
          if ((float)((float)(v34 * v78) + v80) <= 8191.0)
          {
            float v81 = (float)(v34 * v78) + v80;
            if (v81 < 0.0) {
              float v81 = 0.0;
            }
          }
          LOBYTE(v76) = *(unsigned char *)(v55 + v57);
          float v82 = (float)LODWORD(v76) - v32;
          float v83 = (float)(v36 * v78) + (float)(v82 * v35);
          float v84 = 8191.0;
          if ((float)(v80 + v83) <= 8191.0)
          {
            float v84 = v80 + v83;
            if ((float)(v80 + v83) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v37 * v82;
          float v86 = v85 + v80;
          BOOL v87 = (float)(v85 + v80) <= 8191.0;
          float v88 = 8191.0;
          if (v87)
          {
            float v88 = v86;
            if (v86 < 0.0) {
              float v88 = 0.0;
            }
          }
          LOBYTE(v34) = v58[1];
          float v89 = v33 * (float)((float)LODWORD(v34) - v31);
          float v90 = v79 + v89;
          BOOL v87 = (float)(v79 + v89) <= 8191.0;
          float v91 = 8191.0;
          if (v87)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v83 + v89;
          float v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v31;
          float v95 = v85 + v89;
          float v96 = 8191.0;
          if (v95 <= 8191.0)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H24 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H25
          }
          _H26 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H19 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H4 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H5
            FCVT            S6, H6
          }
          _H7 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H17 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          float v125 = (float)((float)(v183 * _S2) + (float)(_S1 * v185)) + (float)(_S24 * v182);
          float v126 = (float)((float)(v180 * _S2) + (float)(_S1 * v181)) + (float)(_S24 * v179);
          _S1 = (float)((float)(v177 * _S2) + (float)(_S1 * v178)) + (float)(_S24 * v176);
          _S2 = (float)((float)(v183 * _S26) + (float)(_S25 * v185)) + (float)(_S27 * v182);
          _S3 = (float)((float)(v180 * _S26) + (float)(_S25 * v181)) + (float)(_S27 * v179);
          float v130 = (float)((float)(v177 * _S26) + (float)(_S25 * v178)) + (float)(_S27 * v176);
          float v131 = (float)((float)(v183 * _S4) + (float)(_S19 * v185)) + (float)(_S5 * v182);
          float v132 = (float)((float)(v180 * _S4) + (float)(_S19 * v181)) + (float)(_S5 * v179);
          float v133 = (float)((float)(v177 * _S4) + (float)(_S19 * v178)) + (float)(_S5 * v176);
          float v134 = (float)((float)(v183 * _S7) + (float)(_S6 * v185)) + (float)(_S17 * v182);
          float v135 = (float)((float)(v180 * _S7) + (float)(_S6 * v181)) + (float)(_S17 * v179);
          float v136 = (float)((float)(v177 * _S7) + (float)(_S6 * v178)) + (float)(_S17 * v176);
          LOWORD(_S4) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          LOWORD(_S1) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          LOWORD(_S2) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H1
            FCVT            S24, H2
          }
          LOWORD(_S1) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          unsigned int v141 = llroundf(fminf(fmaxf(v130, 0.0), 8191.0));
          __asm { FCVT            S25, H1 }
          LOWORD(_S1) = *(_WORD *)(v47 + 2 * v141);
          __asm { FCVT            S6, H1 }
          LOWORD(_S1) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S7, H1 }
          LOWORD(_S1) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          LOWORD(_S1) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          LOWORD(_S2) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H1
            FCVT            S1, H2
          }
          LOWORD(_S2) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S3) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          float v150 = (float)((float)((float)(v192 * _S19) + (float)(v193 * _S4)) + (float)(v191 * _S5)) + v38;
          if (v150 < v38) {
            float v151 = v38;
          }
          else {
            float v151 = (float)((float)((float)(v192 * _S19) + (float)(v193 * _S4)) + (float)(v191 * _S5)) + v38;
          }
          BOOL v87 = v150 <= v40;
          float v152 = (float)((float)((float)(v192 * _S25) + (float)(v193 * _S24)) + (float)(v191 * _S6)) + v38;
          if (!v87) {
            float v151 = v40;
          }
          unsigned int v153 = llroundf(v151);
          if (v152 < v38) {
            float v154 = v38;
          }
          else {
            float v154 = (float)((float)((float)(v192 * _S25) + (float)(v193 * _S24)) + (float)(v191 * _S6)) + v38;
          }
          BOOL v87 = v152 <= v40;
          float v155 = (float)((float)((float)(v192 * _S26) + (float)(v193 * _S7)) + (float)(v191 * _S27)) + v38;
          if (!v87) {
            float v154 = v40;
          }
          unsigned int v156 = llroundf(v154);
          if (v155 < v38) {
            float v157 = v38;
          }
          else {
            float v157 = (float)((float)((float)(v192 * _S26) + (float)(v193 * _S7)) + (float)(v191 * _S27)) + v38;
          }
          BOOL v87 = v155 <= v40;
          float v158 = (float)((float)((float)(v192 * _S2) + (float)(v193 * _S1)) + (float)(v191 * _S3)) + v38;
          if (!v87) {
            float v157 = v40;
          }
          unsigned int v159 = llroundf(v157);
          if (v158 < v38) {
            float v160 = v38;
          }
          else {
            float v160 = (float)((float)((float)(v192 * _S2) + (float)(v193 * _S1)) + (float)(v191 * _S3)) + v38;
          }
          if (v158 <= v40) {
            float v161 = v160;
          }
          else {
            float v161 = v40;
          }
          float v162 = (float)((float)(_S4 + _S24) + _S7) + _S1;
          float v163 = (float)((float)(_S19 + _S25) + _S26) + _S2;
          *(_WORD *)float16x8_t v50 = v153 << v53;
          *((_WORD *)v50 + 1) = v156 << v53;
          *(_WORD *)float v59 = v159 << v53;
          *((_WORD *)v59 + 1) = llroundf(v161) << v53;
          float v164 = (float)((float)(_S5 + _S6) + _S27) + _S3;
          float v165 = (float)((float)(v195 + (float)(v162 * v190)) + (float)(v163 * v189)) + (float)(v164 * v188);
          float v166 = v194;
          if (v165 <= v194)
          {
            float v166 = (float)((float)(v195 + (float)(v162 * v190)) + (float)(v163 * v189)) + (float)(v164 * v188);
            if (v165 < v199) {
              float v166 = v199;
            }
          }
          float v167 = (_WORD *)(v52 + 2 * v57);
          float v168 = (float)((float)(v195 + (float)(v162 * v187)) + (float)(v163 * v186)) + (float)(v164 * v184);
          *float v167 = llroundf(v166) << v53;
          float v43 = v194;
          float v31 = v94;
          float v32 = v198;
          float v34 = v196;
          float v37 = v175;
          if (v168 <= v194)
          {
            float v43 = v168;
            if (v168 < v199) {
              float v43 = v199;
            }
          }
          result += 2;
          v58 += 2;
          v50 += 4;
          v59 += 4;
          v167[1] = llroundf(v43) << v53;
          v57 += 2;
          float v33 = v197;
        }
        while (v10 > v57);
      }
      uint64_t result = &v56[v21];
      uint64_t v46 = v55 + v22;
      float16x8_t v50 = &v54[v25];
      v52 += v26;
      v9 += 2;
    }
    while (v13 > v9);
    if (v174 && v28)
    {
      uint64_t v169 = 0;
      do
      {
        if (v10)
        {
          unint64_t v170 = v10;
          uint32x4_t v171 = v29;
          float16x8_t v172 = v24;
          do
          {
            __int16 v173 = *v172++;
            *v171++ = v173 | (v173 << 8);
            --v170;
          }
          while (v170);
        }
        v24 += v23;
        v29 += v27;
        ++v169;
      }
      while (v169 != v13);
    }
    else if (v28)
    {
      do
      {
        if (v10) {
          uint64_t result = (unsigned __int8 *)memset(v29, 255, 2 * v10);
        }
        v29 += v27;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_xf420_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_xf420_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, float32x4_t _Q0, double a4, double a5, double a6, float32x4_t a7, float32x4_t a8)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = 2 * *result;
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (2 * v14 != 2 * v13)
  {
    unint64_t v15 = 0;
    unint64_t v16 = *(void *)(result + 20);
    uint64_t v17 = *(void *)(result + 36);
    uint64_t v18 = *(void *)(result + 44) + 2 * v13;
    unint64_t v19 = 2 * v14 - 2 * v13;
    uint64_t v20 = *((void *)result + 14);
    uint64_t v21 = (uint64_t *)*((void *)result + 16);
    uint64_t v22 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v12);
    uint64_t v23 = (float32x2_t *)*((void *)result + 19);
    uint64_t v24 = (void *)*((void *)result + 7);
    uint64_t v25 = (uint64_t *)*((void *)result + 8);
    uint64_t v26 = (uint64_t *)*((void *)result + 17);
    uint64_t v27 = *v25;
    uint64_t v28 = v25[1];
    uint64_t v29 = v25[2];
    uint64_t v191 = v24[2];
    uint64_t v30 = (unsigned __int8 *)(v191 + v29 * v18 + v17);
    uint64_t v31 = *v26;
    uint64_t v32 = v26[1];
    uint64_t v33 = v26[2];
    uint64_t v190 = v21[2];
    unsigned int v34 = v23[17].u16[2];
    unsigned int v35 = v23[17].u16[3];
    v36.i32[0] = v23[3].i32[1];
    unsigned int v37 = v23[18].u16[0];
    unsigned int v38 = v23[18].u16[1];
    unsigned int v39 = v23[18].u16[2];
    unsigned int v40 = v23[18].u16[3];
    unsigned int v41 = v23[19].u16[0];
    _Q0.i32[0] = v23[4].i32[1];
    _S23 = v23[5].f32[1];
    v42.i32[0] = v23[6].i32[0];
    v45.i32[0] = v23[6].i32[1];
    v44.i32[0] = v23[7].i32[0];
    *(short float *)v9.i16 = (short float)v34;
    uint64_t v46 = (char *)(v190 + v33 * v22 + 2 * v20);
    float v47 = (float)v23[17].u32[0] / (float)v23[16].u32[0];
    float v208 = (float)v35;
    float v48 = (float)v37;
    float v49 = (float)v38;
    float v50 = (float)v39;
    float v205 = (float)v40;
    float v51 = (float)v41;
    float v211 = v47 * v23->f32[0];
    float v212 = (float)v34;
    __asm { FCVT            H8, S1 }
    float16x8_t v57 = (float16x8_t)vdupq_lane_s16(v9, 0);
    v36.i32[1] = v23[1].i32[0];
    *(float32x2_t *)a7.f32 = vmul_n_f32(v36, v47);
    short float v58 = -(short float)v35;
    float16x8_t v59 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a7), 0);
    *(float32x2_t *)v10.f32 = vmul_n_f32(v23[2], v47);
    _Q16.i64[1] = _Q0.i64[0];
    float16x8_t v60 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float16x8_t v193 = vmulq_n_f16(v59, v58);
    float16x8_t v61 = vmulq_n_f16(v60, v58);
    float v210 = _Q0.f32[0];
    __asm { FCVT            H10, S0 }
    v42.i32[1] = v23[7].i32[1];
    __asm { FMOV            V16.2S, #0.25 }
    *(float32x2_t *)_Q0.f32 = vmul_f32(v42, *(float32x2_t *)_Q16.f32);
    int32x4_t v63 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(_Q0), 0);
    v45.i32[1] = v23[8].i32[0];
    *(float32x2_t *)a8.f32 = vmul_f32(v45, *(float32x2_t *)_Q16.f32);
    float16x8_t v203 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a8), 0);
    v44.i32[1] = v23[8].i32[1];
    *(float32x2_t *)_Q16.f32 = vmul_f32(v44, *(float32x2_t *)_Q16.f32);
    int16x4_t v65 = (int16x4_t)vcvt_f16_f32(_Q16);
    float v209 = v23[5].f32[0];
    __asm { FCVT            H9, S22 }
    float16x8_t v66 = (float16x8_t)vdupq_lane_s32((int32x2_t)v65, 0);
    *(short float *)v65.i16 = (short float)v37;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(v65, 0);
    *(short float *)v65.i16 = (short float)v38;
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(v65, 0);
    *(short float *)v65.i16 = (short float)v39;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(v65, 0);
    *(short float *)v65.i16 = (short float)v40;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(v65, 0);
    *(short float *)v65.i16 = (short float)v41;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(v65, 0);
    unsigned int v72 = v23[16].u8[4];
    unsigned __int8 v73 = 16 - v72;
    if (v72 >= 0x11) {
      unsigned __int8 v73 = 0;
    }
    if (v22 >= 0) {
      uint64_t v74 = v22;
    }
    else {
      uint64_t v74 = v22 + 1;
    }
    uint64_t v75 = *v21;
    uint64_t v76 = v21[1] + v32 * (v74 >> 1) + 2 * v20;
    uint64_t result = (unsigned __int8 *)(v75 + v31 * v22 + 2 * v20);
    float v79 = v24;
    uint64_t v77 = *v24;
    uint64_t v78 = v79[1];
    if (v78) {
      float v80 = (__int8 *)(v78 + v28 * v18 + v17);
    }
    else {
      float v80 = 0;
    }
    float v81 = (int8x8_t *)(v77 + v27 * v18 + v17);
    unsigned __int8 v82 = v73;
    float v83 = &v80[v28];
    float v84 = _S23;
    __asm { FCVT            H2, S23 }
    uint16x8_t v86 = (uint16x8_t)vdupq_n_s16(v73);
    float32x4_t v194 = a7;
    float v207 = a7.f32[1];
    v87.i32[0] = v10.i32[1];
    float v206 = v10.f32[1];
    float v204 = _Q0.f32[0];
    unint64_t v88 = a8.i64[0];
    float v202 = _Q0.f32[1];
    uint64_t v89 = _Q16.i64[0];
    short float v200 = _H10;
    float16x8_t v201 = v59;
    float16x8_t v198 = v67;
    float16x8_t v199 = v68;
    short float v196 = _H2;
    float16x8_t v197 = v71;
    uint16x8_t v195 = v86;
    float v192 = (float)v38;
    do
    {
      float v90 = (char *)v81 + v27;
      float v91 = &v80[v28];
      float v92 = &result[v31];
      if ((int)v16 < 8)
      {
        unint64_t v130 = 0;
        float v96 = (uint16x8_t *)v76;
        float v95 = (uint16x8_t *)&result[v31];
        uint32x4_t v129 = &v80[v28];
        float v94 = (int8x8_t *)((char *)v81 + v27);
        float32x4_t v131 = v194;
      }
      else
      {
        uint64_t v93 = 0;
        float v94 = (int8x8_t *)((char *)v81 + v27);
        float v95 = (uint16x8_t *)&result[v31];
        float v96 = (uint16x8_t *)v76;
        do
        {
          int8x8_t v97 = *(int8x8_t *)&v80[v93];
          *(int8x8_t *)v98.i8 = vzip1_s8(v97, 0);
          v98.u64[1] = (unint64_t)vzip2_s8(v97, 0);
          float16x8_t v99 = vcvtq_f16_u16(v98);
          int16x8_t v100 = (int16x8_t)vmlaq_f16(v193, v59, v99);
          int8x16_t v101 = (int8x16_t)vmlaq_f16(v61, v60, v99);
          v99.i64[0] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u64[0];
          *(int16x4_t *)v102.i8 = vuzp1_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
          *(int16x4_t *)v99.i8 = vuzp2_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
          v99.i64[1] = v193.i64[0];
          v100.i64[0] = vextq_s8(v101, v101, 8uLL).u64[0];
          float16x4_t v103 = (float16x4_t)vuzp1_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8);
          int8x8_t v104 = *v81++;
          v102.i64[1] = v193.i64[0];
          *(int16x4_t *)v100.i8 = vuzp2_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8);
          *(int8x8_t *)v101.i8 = vzip1_s8(v104, 0);
          v101.u64[1] = (unint64_t)vzip2_s8(v104, 0);
          *(float16x4_t *)v100.i8 = vadd_f16(v103, *(float16x4_t *)v100.i8);
          float16x8_t v105 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v101), v57);
          v101.i64[0] = *(void *)&v83[v93];
          v100.i64[1] = v193.i64[0];
          *(int8x8_t *)v106.i8 = vzip1_s8(*(int8x8_t *)v101.i8, 0);
          v106.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v101.i8, 0);
          float16x8_t v107 = vcvtq_f16_u16(v106);
          float16x8_t v108 = (float16x8_t)vzip1q_s16((int16x8_t)v99, (int16x8_t)v99);
          float16x8_t v109 = (float16x8_t)v63;
          float16x8_t v110 = v68;
          int16x8_t v111 = (int16x8_t)vmlaq_f16(v193, v59, v107);
          int8x16_t v112 = (int8x16_t)vmlaq_f16(v61, v60, v107);
          v107.i64[0] = vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL).u64[0];
          float16x8_t v113 = (float16x8_t)vzip1q_s16(v102, v102);
          *(int16x4_t *)v102.i8 = vuzp1_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v107.i8);
          *(int16x4_t *)v107.i8 = vuzp2_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v107.i8);
          v107.i64[1] = v193.i64[0];
          v102.i64[1] = v193.i64[0];
          v111.i64[0] = vextq_s8(v112, v112, 8uLL).u64[0];
          float16x8_t v114 = v59;
          float16x8_t v115 = vmlaq_n_f16(v108, v105, _H8);
          *(float16x4_t *)v111.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v111.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v111.i8));
          v111.i64[1] = v193.i64[0];
          int8x8_t v116 = *v94++;
          float16x8_t v117 = vmlaq_n_f16(v113, v105, _H8);
          *(int8x8_t *)v118.i8 = vzip1_s8(v116, 0);
          v118.u64[1] = (unint64_t)vzip2_s8(v116, 0);
          float16x8_t v119 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v100, v100), v105, _H8);
          float16x8_t v120 = (float16x8_t)vzip1q_s16(v111, v111);
          float16x8_t v121 = vsubq_f16(vcvtq_f16_u16(v118), v57);
          float16x8_t v122 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v107, (int16x8_t)v107), v121, _H8);
          float16x8_t v123 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v102, v102), v121, _H8);
          float16x8_t v124 = vmlaq_n_f16(v120, v121, _H8);
          float16x8_t v125 = vmlaq_n_f16(vmlaq_n_f16(v67, v115, _H10), v119, *(short float *)&_Q9);
          float16x8_t v126 = vmlaq_n_f16(vmlaq_n_f16(v67, v122, _H10), v124, *(short float *)&_Q9);
          float16x8_t v59 = v114;
          int16x8_t v127 = (int16x8_t)vaddq_f16((float16x8_t)vuzp2q_s16((int16x8_t)v122, (int16x8_t)v124), vaddq_f16(vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v115, (int16x8_t)v119), (float16x8_t)vuzp2q_s16((int16x8_t)v115, (int16x8_t)v119)), (float16x8_t)vuzp1q_s16((int16x8_t)v122, (int16x8_t)v124)));
          uint16x8_t v128 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v125, v117, _H2), v67), v69)), v86);
          float16x8_t v68 = v110;
          int32x4_t v63 = (int32x4_t)v109;
          *(uint16x8_t *)uint64_t result = v128;
          result += 16;
          *v95++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v126, v123, _H2), v67), v69)), v86);
          uint16x8_t v87 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v68, v109, (float16x8_t)vzip1q_s16(v127, v127)), v203, (float16x8_t)vzip2q_s16(v127, v127)), v66, vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v123, (int16x8_t)v123), vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v117, (int16x8_t)v117), (float16x8_t)vtrn2q_s16((int16x8_t)v117, (int16x8_t)v117)), (float16x8_t)vtrn1q_s16((int16x8_t)v123, (int16x8_t)v123)))), v70), v71)), v86);
          *v96++ = v87;
          v93 += 8;
        }
        while ((int)v93 < (int)v16 - 7);
        v80 += v93;
        uint32x4_t v129 = &v83[v93];
        unint64_t v130 = v16 & 0xFFFFFFF8;
        float32x4_t v131 = v194;
        float v49 = v192;
      }
      for (; v16 > v130; float16x8_t v60 = v151)
      {
        float16x8_t v132 = v70;
        float16x8_t v133 = v69;
        float16x8_t v134 = v66;
        float v135 = v51;
        int32x4_t v136 = v63;
        float16x8_t v137 = v61;
        float16x8_t v138 = v57;
        v87.i8[0] = *v80;
        *(float *)&unsigned int v139 = (float)v87.u32[0];
        *(float *)&unsigned int v140 = *(float *)&v139 - v208;
        LOBYTE(v139) = v80[1];
        float v141 = (float)v139 - v208;
        *(float *)v87.i32 = v207 * v141;
        float v142 = (float)(v206 * v141) + (float)(*(float *)&v140 * v10.f32[0]);
        float v143 = v131.f32[0] * *(float *)&v140;
        LOBYTE(v140) = v81->i8[0];
        float v144 = v211 * (float)((float)v140 - v212);
        float v145 = *(float *)v87.i32 + v144;
        float v146 = v144 + v142;
        float v147 = v143 + v144;
        float v148 = (float)((float)((float)(v209 * (float)(v144 + v142)) + (float)(v210 * (float)(*(float *)v87.i32 + v144)))
                     + (float)(v84 * (float)(v143 + v144)))
             + v48;
        float v149 = v50;
        if (v148 <= v50)
        {
          float v149 = v148;
          if (v148 < v48) {
            float v149 = v48;
          }
        }
        long long v150 = _Q9;
        float16x8_t v151 = v60;
        float v152 = v49;
        LOBYTE(v148) = v81->i8[1];
        unsigned int v156 = LODWORD(v211);
        float v157 = v211 * (float)((float)LODWORD(v148) - v212);
        float v153 = *(float *)v87.i32 + v157;
        float v154 = v142 + v157;
        float v155 = v143 + v157;
        v68.i8[0] = *v129;
        LOBYTE(v156) = v129[1];
        LOBYTE(v143) = v94->i8[0];
        LOBYTE(v157) = v94->i8[1];
        float v158 = (float)((float)((float)(v209 * v154) + (float)(v210 * v153)) + (float)(v84 * v155)) + v48;
        *(_WORD *)uint64_t result = llroundf(v149) << v82;
        float v159 = v50;
        if (v158 <= v50)
        {
          float v159 = (float)((float)((float)(v209 * v154) + (float)(v210 * v153)) + (float)(v84 * v155)) + v48;
          if (v158 < v48) {
            float v159 = v48;
          }
        }
        float v160 = (float)v68.u32[0] - v208;
        float v161 = (float)v156 - v208;
        float v162 = v207 * v161;
        float32x4_t v163 = v10;
        float v164 = (float)(v206 * v161) + (float)(v160 * v10.f32[0]);
        float32x4_t v165 = v131;
        float v166 = v131.f32[0] * v160;
        float v167 = v211 * (float)((float)LODWORD(v143) - v212);
        float v168 = (float)(v207 * v161) + v167;
        float v169 = v167 + v164;
        float v170 = v166 + v167;
        float v171 = (float)((float)((float)(v209 * v169) + (float)(v210 * v168)) + (float)(v84 * v170)) + v48;
        *((_WORD *)result + 1) = llroundf(v159) << v82;
        float v172 = v50;
        if (v171 <= v50)
        {
          float v172 = (float)((float)((float)(v209 * v169) + (float)(v210 * v168)) + (float)(v84 * v170)) + v48;
          if (v171 < v48) {
            float v172 = v48;
          }
        }
        float v173 = v211 * (float)((float)LODWORD(v157) - v212);
        float v174 = v162 + v173;
        float v175 = v164 + v173;
        float v176 = v166 + v173;
        float v177 = (float)((float)((float)(v209 * v175) + (float)(v210 * v174)) + (float)(v84 * v176)) + v48;
        v95->i16[0] = llroundf(v172) << v82;
        float v178 = v50;
        if (v177 <= v50)
        {
          float v178 = (float)((float)((float)(v209 * v175) + (float)(v210 * v174)) + (float)(v84 * v176)) + v48;
          if (v177 < v48) {
            float v178 = v48;
          }
        }
        v95->i16[1] = llroundf(v178) << v82;
        float v179 = (float)((float)(v145 + v153) + v168) + v174;
        float v49 = v152;
        *(float *)v68.i32 = v152 + (float)(v179 * v204);
        float v180 = (float)((float)(v146 + v154) + v169) + v175;
        float v181 = (float)((float)(v147 + v155) + v170) + v176;
        float v182 = (float)(*(float *)v68.i32 + (float)(v180 * *(float *)&v88)) + (float)(v181 * *(float *)&v89);
        float v51 = v135;
        float v183 = v135;
        float32x4_t v131 = v165;
        _Q9 = v150;
        if (v182 <= v135)
        {
          float v183 = (float)(*(float *)v68.i32 + (float)(v180 * *(float *)&v88)) + (float)(v181 * *(float *)&v89);
          if (v182 < v205) {
            float v183 = v205;
          }
        }
        *(float *)v87.i32 = (float)((float)(v49 + (float)(v179 * v202)) + (float)(v180 * *((float *)&v88 + 1)))
                          + (float)(v181 * *((float *)&v89 + 1));
        v96->i16[0] = llroundf(v183) << v82;
        float v184 = v135;
        float16x8_t v57 = v138;
        float32x4_t v10 = v163;
        float16x8_t v61 = v137;
        int32x4_t v63 = v136;
        float16x8_t v66 = v134;
        float16x8_t v69 = v133;
        float16x8_t v70 = v132;
        if (*(float *)v87.i32 <= v51)
        {
          float v184 = *(float *)v87.i32;
          if (*(float *)v87.i32 < v205) {
            float v184 = v205;
          }
        }
        v130 += 2;
        v80 += 2;
        float v81 = (int8x8_t *)((char *)v81 + 2);
        v129 += 2;
        float v94 = (int8x8_t *)((char *)v94 + 2);
        v96->i16[1] = llroundf(v184) << v82;
        result += 4;
        float v95 = (uint16x8_t *)((char *)v95 + 4);
        float v96 = (uint16x8_t *)((char *)v96 + 4);
      }
      float v81 = (int8x8_t *)&v90[v27];
      float v80 = &v91[v28];
      uint64_t result = &v92[v31];
      v76 += v32;
      v15 += 2;
      v83 += 2 * v28;
      _H10 = v200;
      float16x8_t v59 = v201;
      float16x8_t v67 = v198;
      float16x8_t v68 = v199;
      _H2 = v196;
      float16x8_t v71 = v197;
      uint16x8_t v86 = v195;
    }
    while (v19 > v15);
    if (v191 && v190)
    {
      uint64_t v185 = 0;
      do
      {
        if (v16)
        {
          unint64_t v186 = v16;
          float v187 = v46;
          float v188 = v30;
          do
          {
            __int16 v189 = *v188++;
            *v187++ = v189 | (v189 << 8);
            --v186;
          }
          while (v186);
        }
        v30 += v29;
        v46 += v33;
        ++v185;
      }
      while (v185 != v19);
    }
    else if (v190)
    {
      do
      {
        if (v16) {
          uint64_t result = (unsigned __int8 *)memset(v46, 255, 2 * v16);
        }
        v46 += v33;
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_xf420_GCD);
  return 0;
}

char *vt_Copy_422vf_rgb_xf420_GCD(char *result, uint64_t a2)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 36);
    uint64_t v13 = *(void *)(result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = *((void *)result + 14);
    uint64_t v16 = (void *)*((void *)result + 16);
    uint64_t v17 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v7);
    uint64_t v18 = *((void *)result + 19);
    uint64_t v20 = (void *)*((void *)result + 7);
    uint64_t v19 = (uint64_t *)*((void *)result + 8);
    uint64_t v21 = (uint64_t *)*((void *)result + 17);
    uint64_t v22 = *v19;
    uint64_t v23 = v19[1];
    uint64_t v24 = v19[2];
    uint64_t v25 = v20[1];
    uint64_t v26 = v20[2];
    uint64_t v27 = (unsigned __int8 *)(v26 + v24 * v13 + v12);
    uint64_t v28 = *v21;
    uint64_t v29 = v21[1];
    uint64_t v30 = v21[2];
    uint64_t v31 = v16[2];
    uint64_t v32 = (unsigned char *)(*v20 + v22 * v13 + v12);
    uint64_t result = (char *)(v25 + v23 * v13 + v12);
    uint64_t v33 = (char *)(v31 + v30 * v17 + 2 * v15);
    *(float *)&unsigned int v34 = (float)*(unsigned int *)(v18 + 128);
    *(float *)&unsigned int v35 = (float)*(unsigned int *)(v18 + 136);
    float v36 = *(float *)&v35 / *(float *)&v34;
    LOWORD(v34) = *(_WORD *)(v18 + 140);
    float v37 = (float)v34;
    LOWORD(v35) = *(_WORD *)(v18 + 142);
    float v38 = (float)v35;
    float v39 = v36 * *(float *)v18;
    float v40 = v36 * *(float *)(v18 + 8);
    float v41 = v36 * *(float *)(v18 + 16);
    float v42 = v36 * *(float *)(v18 + 20);
    float v43 = *(float *)(v18 + 28);
    float v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v18 + 144);
    float v45 = (float)LODWORD(v43);
    LOWORD(v4) = *(_WORD *)(v18 + 146);
    float v46 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v18 + 148);
    float v47 = (float)v5;
    LOWORD(v5) = *(_WORD *)(v18 + 150);
    float v48 = (float)v5;
    LOWORD(v5) = *(_WORD *)(v18 + 152);
    float v49 = (float)v5;
    float v50 = *(float *)(v18 + 36);
    float v51 = *(float *)(v18 + 40);
    float v52 = *(float *)(v18 + 44);
    float v53 = 0.25;
    float v114 = *(float *)(v18 + 52) * 0.25;
    float v115 = *(float *)(v18 + 48) * 0.25;
    float v112 = *(float *)(v18 + 60) * 0.25;
    float v113 = *(float *)(v18 + 56) * 0.25;
    float v111 = *(float *)(v18 + 64) * 0.25;
    float v54 = *(float *)(v18 + 68);
    float v55 = v54 * 0.25;
    if (!v25) {
      uint64_t result = 0;
    }
    unsigned int v56 = *(unsigned __int8 *)(v18 + 132);
    uint64_t v57 = v16[1];
    short float v58 = (char *)(*v16 + v28 * v17 + 2 * v15);
    if (v56 >= 0x11) {
      char v59 = 0;
    }
    else {
      char v59 = 16 - v56;
    }
    uint64_t v60 = v57 + v29 * (v17 / 2) + 2 * v15;
    char v61 = v59;
    do
    {
      float v62 = &v58[v28];
      int32x4_t v63 = &result[v23];
      float v64 = &v32[v22];
      if (v11)
      {
        unint64_t v65 = 0;
        float16x8_t v66 = &v32[v22];
        float16x8_t v67 = &v58[v28];
        do
        {
          LOBYTE(v54) = result[v65];
          *(float *)&unsigned int v68 = (float)LODWORD(v54) - v38;
          LOBYTE(v53) = result[v65 + 1];
          float v69 = (float)LODWORD(v53) - v38;
          float v70 = v40 * v69;
          float v71 = (float)(v42 * v69) + (float)(*(float *)&v68 * v41);
          float v72 = v44 * *(float *)&v68;
          LOBYTE(v68) = *v32;
          float v73 = v39 * (float)((float)v68 - v37);
          float v74 = v70 + v73;
          float v75 = v73 + v71;
          float v76 = v72 + v73;
          float v77 = (float)((float)((float)(v51 * (float)(v73 + v71)) + (float)(v50 * (float)(v70 + v73)))
                      + (float)(v52 * (float)(v72 + v73)))
              + v45;
          float v78 = v47;
          if (v77 <= v47)
          {
            float v78 = v77;
            if (v77 < v45) {
              float v78 = v45;
            }
          }
          LOBYTE(v77) = v32[1];
          float v79 = v39 * (float)((float)LODWORD(v77) - v37);
          float v80 = v70 + v79;
          float v81 = v71 + v79;
          float v82 = v72 + v79;
          LOBYTE(v72) = v63[v65];
          LOBYTE(v71) = v63[v65 + 1];
          LOBYTE(v2) = *v66;
          LOBYTE(v3) = v66[1];
          float v83 = (float)((float)((float)(v51 * v81) + (float)(v50 * v80)) + (float)(v52 * v82)) + v45;
          *(_WORD *)short float v58 = llroundf(v78) << v61;
          float v84 = v47;
          if (v83 <= v47)
          {
            float v84 = (float)((float)((float)(v51 * v81) + (float)(v50 * v80)) + (float)(v52 * v82)) + v45;
            if (v83 < v45) {
              float v84 = v45;
            }
          }
          float v85 = (float)LODWORD(v72) - v38;
          float v86 = (float)LODWORD(v71) - v38;
          float v87 = v40 * v86;
          float v88 = (float)(v42 * v86) + (float)(v85 * v41);
          float v89 = v44 * v85;
          float v90 = v39 * (float)((float)LODWORD(v2) - v37);
          float v91 = v87 + v90;
          float v92 = v90 + v88;
          float v2 = v89 + v90;
          float v93 = (float)((float)((float)(v51 * (float)(v90 + v88)) + (float)(v50 * (float)(v87 + v90)))
                      + (float)(v52 * (float)(v89 + v90)))
              + v45;
          *((_WORD *)v58 + 1) = llroundf(v84) << v61;
          float v94 = v47;
          if (v93 <= v47)
          {
            float v94 = v93;
            if (v93 < v45) {
              float v94 = v45;
            }
          }
          float v95 = v39 * (float)((float)LODWORD(v3) - v37);
          float v96 = v87 + v95;
          float v97 = v88 + v95;
          float v3 = v89 + v95;
          float v98 = (float)((float)((float)(v51 * v97) + (float)(v50 * (float)(v87 + v95)))
                      + (float)(v52 * (float)(v89 + v95)))
              + v45;
          *(_WORD *)float16x8_t v67 = llroundf(v94) << v61;
          float v99 = v47;
          if (v98 <= v47)
          {
            float v99 = v98;
            if (v98 < v45) {
              float v99 = v45;
            }
          }
          *((_WORD *)v67 + 1) = llroundf(v99) << v61;
          float v100 = (float)((float)(v74 + v80) + v91) + v96;
          float v101 = (float)((float)(v75 + v81) + v92) + v97;
          float v102 = (float)((float)(v76 + v82) + v2) + v3;
          float v103 = (float)((float)(v46 + (float)(v100 * v115)) + (float)(v101 * v114)) + (float)(v102 * v113);
          float v104 = v49;
          if (v103 <= v49)
          {
            float v104 = (float)((float)(v46 + (float)(v100 * v115)) + (float)(v101 * v114)) + (float)(v102 * v113);
            if (v103 < v48) {
              float v104 = v48;
            }
          }
          float16x8_t v105 = (_WORD *)(v60 + 2 * v65);
          float v53 = (float)((float)(v46 + (float)(v100 * v112)) + (float)(v101 * v111)) + (float)(v102 * v55);
          *float16x8_t v105 = llroundf(v104) << v61;
          float v54 = v49;
          if (v53 <= v49)
          {
            float v54 = v53;
            if (v53 < v48) {
              float v54 = v48;
            }
          }
          v32 += 2;
          v66 += 2;
          v58 += 4;
          v67 += 4;
          v105[1] = llroundf(v54) << v61;
          v65 += 2;
        }
        while (v11 > v65);
      }
      uint64_t v32 = &v64[v22];
      uint64_t result = &v63[v23];
      short float v58 = &v62[v28];
      v60 += v29;
      v10 += 2;
    }
    while (v14 > v10);
    if (v26 && v31)
    {
      uint64_t v106 = 0;
      do
      {
        if (v11)
        {
          unint64_t v107 = v11;
          float16x8_t v108 = v33;
          float16x8_t v109 = v27;
          do
          {
            __int16 v110 = *v109++;
            *v108++ = v110 | (v110 << 8);
            --v107;
          }
          while (v107);
        }
        v27 += v24;
        v33 += v30;
        ++v106;
      }
      while (v106 != v14);
    }
    else if (v31)
    {
      do
      {
        if (v11) {
          uint64_t result = (char *)memset(v33, 255, 2 * v11);
        }
        v33 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD(void *result, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, double a6, double a7, double a8, int16x4_t a9)
{
  uint64_t v14 = *(void *)((char *)result + 28);
  unint64_t v15 = *(unsigned __int8 *)result;
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (v17 != v16)
  {
    uint64_t v18 = 0;
    size_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    unint64_t v21 = v16 + *(void *)((char *)result + 44);
    unint64_t v22 = v17 - v16;
    uint64_t v23 = result[14];
    unint64_t v24 = result[13] * a2 / v15;
    uint64_t v25 = (void *)result[16];
    unint64_t v26 = v24 + result[15];
    uint64_t v27 = (float32x2_t *)result[19];
    uint64_t v28 = (void *)result[7];
    uint64_t v29 = (uint64_t *)result[8];
    uint64_t v30 = (uint64_t *)result[17];
    uint64_t v31 = *v29;
    uint64_t v32 = v29[1];
    uint64_t v235 = v29[2];
    uint64_t v237 = v28[2];
    uint64_t v33 = (char *)(v237 + v235 * v21 + v20);
    uint64_t v34 = *v30;
    uint64_t v35 = v30[1];
    uint64_t v36 = v30[2];
    uint64_t v236 = v25[2];
    uint64_t v37 = (char *)(v236 + v36 * v26 + v23);
    unsigned int v38 = v27[17].u16[2];
    unsigned int v39 = v27[17].u16[3];
    v40.i32[0] = v27[3].i32[1];
    a4.f32[0] = (float)v38;
    *(short float *)v9.i16 = (short float)v38;
    unsigned int v41 = v27[18].u16[0];
    float v282 = (float)v39;
    float v283 = a4.f32[0];
    short float v42 = (short float)v39;
    unsigned int v43 = v27[18].u16[1];
    _S11 = v27[5].i32[1];
    v45.i32[0] = v27[6].i32[0];
    v47.i32[0] = v27[6].i32[1];
    v46.i32[0] = v27[7].i32[0];
    v40.i32[1] = v27[1].i32[0];
    v45.i32[1] = v27[7].i32[1];
    v47.i32[1] = v27[8].i32[0];
    v46.i32[1] = v27[8].i32[1];
    unsigned int v48 = v27[18].u16[2];
    float v49 = (float)v41;
    *(short float *)v11.i16 = (short float)v41;
    unsigned int v50 = v27[18].u16[3];
    float v281 = (float)v43;
    *(short float *)v12.i16 = (short float)v43;
    unsigned int v51 = v27[19].u16[0];
    _S13 = v27[4].i32[1];
    _S9 = v27[5].i32[0];
    _S14 = v27[9].i32[0];
    _S15 = v27[9].i32[1];
    float v255 = (float)v48;
    *(short float *)v13.i16 = (short float)v48;
    unsigned int v56 = (char *)&v27[2068] + 4;
    float v57 = 8191.0 / (float)v27[16].u32[0];
    _S19 = v57 * v27->f32[0];
    *(float *)&a8 = (float)v50;
    float v278 = (float)v50;
    float v59 = (float)v51;
    *(short float *)&a8 = (short float)v50;
    uint64_t v60 = (char *)&v27[20] + 4;
    *(short float *)a9.i16 = (short float)v51;
    uint64_t v61 = v25[1];
    _ZF = v61 == 0;
    uint64_t v63 = v61 + v35 * v26;
    uint64_t v64 = *v25 + *v30 * v26;
    unint64_t v65 = (char *)&v27[4116] + 4;
    *(float32x2_t *)v10.f32 = vmul_n_f32(v40, v57);
    *(float32x2_t *)a3.f32 = vmul_n_f32(v27[2], v57);
    float16x8_t v249 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float16x8_t v247 = vmulq_n_f16(v249, -v42);
    *(float32x2_t *)a4.f32 = vmul_f32(v45, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)a5.f32 = vmul_f32(v47, (float32x2_t)0x3F0000003F000000);
    float32x4_t v66 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    float16x8_t v271 = (float16x8_t)v66;
    *(float32x2_t *)v66.f32 = vmul_f32(v46, (float32x2_t)0x3F0000003F000000);
    int32x4_t v67 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v66), 0);
    float16x8_t v244 = (float16x8_t)vdupq_lane_s16(v12, 0);
    float16x8_t v245 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a4), 0);
    _Q4 = vdupq_lane_s16(v13, 0);
    float16x8_t v248 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a3), 0);
    float16x8_t v268 = vmulq_n_f16(v248, -v42);
    float16x8_t v269 = (float16x8_t)_Q4;
    int16x8_t v69 = vdupq_lane_s16(*(int16x4_t *)&a8, 0);
    float16x8_t v242 = (float16x8_t)vdupq_lane_s16(v11, 0);
    float16x8_t v243 = (float16x8_t)vdupq_lane_s16(a9, 0);
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(v9, 0);
    uint64_t result = (void *)(v63 + v23);
    if (_ZF) {
      uint64_t result = 0;
    }
    float v71 = (int8x8_t *)(v64 + v23);
    float v74 = v28;
    uint64_t v73 = *v28;
    uint64_t v72 = v74[1];
    _ZF = v72 == 0;
    float v75 = (unsigned char *)(v72 + v32 * v21 + v20);
    if (_ZF) {
      float v75 = 0;
    }
    float v76 = (int8x8_t *)(v73 + v31 * v21 + v20);
    _S31 = v27[13].f32[1];
    _S30 = v27[14].f32[0];
    __asm { FCVT            H8, S19 }
    short float v241 = _H8;
    float v276 = v27[4].f32[1];
    __asm { FCVT            H13, S13 }
    short float v267 = _H13;
    float v275 = v27[5].f32[0];
    __asm { FCVT            H13, S9 }
    float v277 = v27[5].f32[1];
    __asm { FCVT            H11, S11 }
    short float v265 = _H11;
    short float v266 = _H13;
    __asm
    {
      FCVT            H10, S31
      FCVT            H9, S30
    }
    float v279 = v27[15].f32[0];
    float v280 = v27[14].f32[1];
    __asm
    {
      FCVT            H12, S22
      FCVT            H11, S16
    }
    short float v257 = _H11;
    float v274 = v27[9].f32[0];
    __asm { FCVT            H8, S14 }
    float v273 = v27[9].f32[1];
    __asm { FCVT            H14, S15 }
    float v264 = v27[10].f32[0];
    __asm { FCVT            H11, S17 }
    short float v240 = _H11;
    float v263 = v27[10].f32[1];
    __asm { FCVT            H11, S23 }
    float v262 = v27[11].f32[0];
    __asm { FCVT            H4, S24 }
    float v261 = v27[11].f32[1];
    __asm { FCVT            H13, S26 }
    short float v239 = _H13;
    float v260 = v27[12].f32[0];
    __asm { FCVT            H13, S25 }
    float v259 = v27[12].f32[1];
    __asm { FCVT            H15, S29 }
    short float v238 = _H15;
    float v258 = v27[13].f32[0];
    __asm { FCVT            H15, S28 }
    unint64_t v98 = a3.i64[0];
    float v272 = a5.f32[0];
    unint64_t v99 = a4.i64[0];
    float v253 = a5.f32[1];
    v100.i32[0] = v66.i32[1];
    float v252 = v66.f32[1];
    float v270 = v66.f32[0];
    v101.i64[0] = 0x9000900090009000;
    v101.i64[1] = 0x9000900090009000;
    int16x8_t v250 = v69;
    int32x4_t v251 = v67;
    float v246 = _S19;
    short float v256 = _H11;
    short float v254 = _H13;
    do
    {
      if ((int)v19 < 8)
      {
        size_t v164 = 0;
        float32x4_t v163 = result;
        float v104 = v71;
        float v162 = v75;
        float v103 = v76;
      }
      else
      {
        uint64_t v102 = 0;
        float v103 = v76;
        float v104 = v71;
        float16x8_t v105 = (float16x8_t)v67;
        float16x8_t v106 = (float16x8_t)v69;
        do
        {
          int8x8_t v107 = *(int8x8_t *)&v75[v102 * 8];
          *(int8x8_t *)v108.i8 = vzip1_s8(v107, 0);
          v108.u64[1] = (unint64_t)vzip2_s8(v107, 0);
          float16x8_t v109 = vcvtq_f16_u16(v108);
          int16x8_t v110 = (int16x8_t)vmlaq_f16(v247, v249, v109);
          int8x16_t v111 = (int8x16_t)vmlaq_f16(v268, v248, v109);
          v109.i64[0] = vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL).u64[0];
          *(int16x4_t *)v112.i8 = vuzp1_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v109.i8);
          *(int16x4_t *)v109.i8 = vuzp2_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v109.i8);
          v109.i64[1] = v109.i64[0];
          float16x8_t v113 = (float16x8_t)vzip1q_s16((int16x8_t)v109, (int16x8_t)v109);
          v112.i64[1] = v113.i64[0];
          float16x8_t v114 = (float16x8_t)vzip1q_s16(v112, v112);
          v110.i64[0] = vextq_s8(v111, v111, 8uLL).u64[0];
          *(float16x4_t *)v110.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v110.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v110.i8));
          v110.i64[1] = v113.i64[0];
          int8x8_t v115 = *v103++;
          *(int8x8_t *)v112.i8 = vzip1_s8(v115, 0);
          v112.u64[1] = (unint64_t)vzip2_s8(v115, 0);
          float16x8_t v116 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v112), v70);
          float16x8_t v117 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v110, v110), v116, v241);
          float16x8_t v118 = vmlaq_n_f16(v114, v116, v241);
          uint16x8_t v119 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v113, v116, v241), (float16x8_t)0), v101));
          uint32x4_t v120 = vmovl_high_u16(v119);
          uint32x4_t v121 = vmovl_u16(*(uint16x4_t *)v119.i8);
          v122.i16[0] = *(_WORD *)&v60[2 * v121.u32[0]];
          v122.i16[1] = *(_WORD *)&v60[2 * v121.u32[1]];
          v122.i16[2] = *(_WORD *)&v60[2 * v121.u32[2]];
          v122.i16[3] = *(_WORD *)&v60[2 * v121.u32[3]];
          v122.i16[4] = *(_WORD *)&v60[2 * v120.u32[0]];
          v122.i16[5] = *(_WORD *)&v60[2 * v120.u32[1]];
          v122.i16[6] = *(_WORD *)&v60[2 * v120.u32[2]];
          v122.i16[7] = *(_WORD *)&v60[2 * v120.u32[3]];
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, (float16x8_t)0), v101));
          uint32x4_t v124 = vmovl_high_u16(v123);
          uint32x4_t v125 = vmovl_u16(*(uint16x4_t *)v123.i8);
          v126.i16[0] = *(_WORD *)&v60[2 * v125.u32[0]];
          v126.i16[1] = *(_WORD *)&v60[2 * v125.u32[1]];
          v126.i16[2] = *(_WORD *)&v60[2 * v125.u32[2]];
          v126.i16[3] = *(_WORD *)&v60[2 * v125.u32[3]];
          v126.i16[4] = *(_WORD *)&v60[2 * v124.u32[0]];
          v126.i16[5] = *(_WORD *)&v60[2 * v124.u32[1]];
          v126.i16[6] = *(_WORD *)&v60[2 * v124.u32[2]];
          v126.i16[7] = *(_WORD *)&v60[2 * v124.u32[3]];
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v101));
          uint32x4_t v128 = vmovl_high_u16(v127);
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v127.i8);
          v118.i16[0] = *(_WORD *)&v60[2 * v129.u32[0]];
          v118.i16[1] = *(_WORD *)&v60[2 * v129.u32[1]];
          v118.i16[2] = *(_WORD *)&v60[2 * v129.u32[2]];
          v118.i16[3] = *(_WORD *)&v60[2 * v129.u32[3]];
          v118.i16[4] = *(_WORD *)&v60[2 * v128.u32[0]];
          v118.i16[5] = *(_WORD *)&v60[2 * v128.u32[1]];
          v118.i16[6] = *(_WORD *)&v60[2 * v128.u32[2]];
          v118.i16[7] = *(_WORD *)&v60[2 * v128.u32[3]];
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v122, _H10), v126, _H9), v118, _H12), vmaxq_f16(vmaxq_f16(v122, v126), v118), v257), (float16x8_t)0), v101));
          uint32x4_t v131 = vmovl_high_u16(v130);
          float16x8_t v132 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v130.i8);
          v132.i16[0] = *(_WORD *)&v56[2 * v132.u32[0]];
          v132.i16[1] = *(_WORD *)&v56[2 * v132.u32[1]];
          v132.i16[2] = *(_WORD *)&v56[2 * v132.u32[2]];
          v132.i16[3] = *(_WORD *)&v56[2 * v132.u32[3]];
          v132.i16[4] = *(_WORD *)&v56[2 * v131.u32[0]];
          v132.i16[5] = *(_WORD *)&v56[2 * v131.u32[1]];
          v132.i16[6] = *(_WORD *)&v56[2 * v131.u32[2]];
          v132.i16[7] = *(_WORD *)&v56[2 * v131.u32[3]];
          float16x8_t v133 = vmulq_f16(v122, v132);
          float16x8_t v134 = vmulq_f16(v126, v132);
          float16x8_t v135 = vmulq_f16(v118, v132);
          v122.i16[7] = _Q4.i16[7];
          float16x8_t v136 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v133, v256), v134, *(short float *)_Q4.i16), v135, v239);
          float16x8_t v137 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v135, _H15), v134, v238), v133, v254);
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v133, _H8), v134, _H14), v135, v240), (float16x8_t)0), v101));
          uint32x4_t v139 = vmovl_high_u16(v138);
          uint32x4_t v140 = vmovl_u16(*(uint16x4_t *)v138.i8);
          v122.i16[0] = *(_WORD *)&v65[2 * v140.u32[0]];
          v122.i16[1] = *(_WORD *)&v65[2 * v140.u32[1]];
          v122.i16[2] = *(_WORD *)&v65[2 * v140.u32[2]];
          v122.i16[3] = *(_WORD *)&v65[2 * v140.u32[3]];
          v122.i16[4] = *(_WORD *)&v65[2 * v139.u32[0]];
          v122.i16[5] = *(_WORD *)&v65[2 * v139.u32[1]];
          v122.i16[6] = *(_WORD *)&v65[2 * v139.u32[2]];
          float16x8_t v141 = v122;
          v141.i16[7] = *(_WORD *)&v65[2 * v139.u32[3]];
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v136, (float16x8_t)0), v101));
          int16x8_t v143 = (int16x8_t)vmovl_high_u16(v142);
          uint32x4_t v144 = vmovl_u16(*(uint16x4_t *)v142.i8);
          *(void *)&long long v145 = v143.u32[2];
          *((void *)&v145 + 1) = v143.u32[3];
          long long v146 = v145;
          *(void *)&long long v145 = v143.u32[0];
          v143.i16[0] = *(_WORD *)&v65[2 * v144.u32[0]];
          float v147 = (__int16 *)&v65[2 * v143.u32[1]];
          uint64_t v148 = *((void *)&v146 + 1);
          v143.i16[1] = *(_WORD *)&v65[2 * v144.u32[1]];
          v143.i16[2] = *(_WORD *)&v65[2 * v144.u32[2]];
          v143.i16[3] = *(_WORD *)&v65[2 * v144.u32[3]];
          v143.i16[4] = *(_WORD *)&v65[2 * v145];
          v143.i16[5] = *v147;
          v143.i16[6] = *(_WORD *)&v65[2 * v146];
          uint16x8_t v149 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v137, (float16x8_t)0), v101));
          uint32x4_t v150 = vmovl_u16(*(uint16x4_t *)v149.i8);
          uint64_t v151 = v150.u32[1];
          uint64_t v152 = v150.u32[0];
          float16x8_t v153 = (float16x8_t)v143;
          v153.i16[7] = *(_WORD *)&v65[2 * v148];
          int16x8_t v154 = (int16x8_t)vmovl_high_u16(v149);
          uint64_t v155 = v150.u32[3];
          uint64_t v156 = v150.u32[2];
          *(void *)&long long v145 = v154.u32[2];
          *((void *)&v145 + 1) = v154.u32[3];
          long long v157 = v145;
          *(void *)&long long v145 = v154.u32[0];
          v154.i16[7] = (unint64_t)v154.u32[1] >> 48;
          v154.i16[0] = *(_WORD *)&v65[2 * v152];
          float v158 = (__int16 *)&v65[2 * v154.u32[1]];
          v154.i16[1] = *(_WORD *)&v65[2 * v151];
          v154.i16[2] = *(_WORD *)&v65[2 * v156];
          v154.i16[3] = *(_WORD *)&v65[2 * v155];
          v154.i16[4] = *(_WORD *)&v65[2 * v145];
          v154.i16[5] = *v158;
          v154.i16[6] = *(_WORD *)&v65[2 * v157];
          float v159 = (__int16 *)&v65[2 * *((void *)&v157 + 1)];
          float16x8_t v160 = (float16x8_t)v154;
          v160.i16[7] = *v159;
          *v104++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v242, v141, v267), v153, v266), v160, v265), v242), v269)));
          int16x8_t v161 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v122, v143), (float16x8_t)vuzp2q_s16((int16x8_t)v141, (int16x8_t)v153));
          int8x8_t v100 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v244, v245, (float16x8_t)vzip1q_s16(v161, v161)), v271, (float16x8_t)vzip2q_s16(v161, v161)), v105, vaddq_f16((float16x8_t)vtrn1q_s16(v154, v154), (float16x8_t)vtrn2q_s16((int16x8_t)v160, (int16x8_t)v160))), v106), v243)));
          result[v102++] = v100;
        }
        while ((int)(v102 * 8) < (int)v19 - 7);
        float v162 = &v75[v102 * 8];
        float32x4_t v163 = &result[v102];
        size_t v164 = v19 & 0xFFFFFFF8;
        _S19 = v246;
      }
      for (; v19 > v164; v101.i64[1] = 0x9000900090009000)
      {
        float16x8_t v165 = v70;
        v100.i8[0] = v162[1];
        unsigned int v166 = LODWORD(v282);
        unsigned int v167 = LODWORD(v283);
        float v168 = (float)v100.u32[0] - v282;
        float v169 = v10.f32[1] * v168;
        LOBYTE(v166) = v103->i8[0];
        float v170 = _S19 * (float)((float)v166 - v283);
        float v171 = (float)(v10.f32[1] * v168) + v170;
        float v172 = 8191.0;
        if (v171 <= 8191.0)
        {
          float v172 = (float)(v10.f32[1] * v168) + v170;
          if (v171 < 0.0) {
            float v172 = 0.0;
          }
        }
        LOBYTE(v167) = *v162;
        float v173 = (float)v167 - v282;
        float v174 = (float)(*((float *)&v98 + 1) * v168) + (float)(v173 * *(float *)&v98);
        float v175 = 8191.0;
        if ((float)(v170 + v174) <= 8191.0)
        {
          float v175 = v170 + v174;
          if ((float)(v170 + v174) < 0.0) {
            float v175 = 0.0;
          }
        }
        float v176 = v10.f32[0] * v173;
        float v177 = v176 + v170;
        float v178 = 8191.0;
        if (v177 <= 8191.0)
        {
          float v178 = v177;
          if (v177 < 0.0) {
            float v178 = 0.0;
          }
        }
        LOBYTE(v177) = v103->i8[1];
        float v179 = _S19 * (float)((float)LODWORD(v177) - v283);
        float v180 = v169 + v179;
        float v181 = 8191.0;
        if (v180 <= 8191.0)
        {
          float v181 = v180;
          if (v180 < 0.0) {
            float v181 = 0.0;
          }
        }
        float v182 = v174 + v179;
        float v183 = 8191.0;
        if (v182 <= 8191.0)
        {
          float v183 = v182;
          if (v182 < 0.0) {
            float v183 = 0.0;
          }
        }
        float v184 = v176 + v179;
        float v185 = 8191.0;
        if (v184 <= 8191.0)
        {
          float v185 = v184;
          if (v184 < 0.0) {
            float v185 = 0.0;
          }
        }
        _H3 = *(_WORD *)&v60[2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0))];
        __asm { FCVT            S20, H3 }
        _H3 = *(_WORD *)&v60[2 * llroundf(fminf(fmaxf(v175, 0.0), 8191.0))];
        __asm { FCVT            S11, H3 }
        _H3 = *(_WORD *)&v60[2 * llroundf(fminf(fmaxf(v178, 0.0), 8191.0))];
        __asm { FCVT            S13, H3 }
        float v192 = (float)((float)((float)(_S30 * _S11) + (float)(_S31 * _S20)) + (float)(v280 * _S13))
             + (float)(v279 * fmaxf(_S20, fmaxf(_S11, _S13)));
        float v193 = 8191.0;
        if (v192 <= 8191.0)
        {
          float v193 = v192;
          if (v192 < 0.0) {
            float v193 = 0.0;
          }
        }
        _H1 = *(_WORD *)&v60[2 * llroundf(fminf(fmaxf(v181, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H0 = *(_WORD *)&v60[2 * llroundf(fminf(fmaxf(v183, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        _H2 = *(_WORD *)&v60[2 * llroundf(fminf(fmaxf(v185, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H5 = *(_WORD *)&v56[2 * llroundf(v193)];
        float v201 = (float)((float)((float)(_S30 * _S0) + (float)(_S31 * _S1)) + (float)(v280 * _S2))
             + (float)(v279 * fmaxf(_S1, fmaxf(_S0, _S2)));
        float v202 = 8191.0;
        if (v201 <= 8191.0)
        {
          float v202 = v201;
          if (v201 < 0.0) {
            float v202 = 0.0;
          }
        }
        __asm { FCVT            S5, H5 }
        float v204 = _S20 * _S5;
        float v205 = _S11 * _S5;
        float v206 = _S13 * _S5;
        _H3 = *(_WORD *)&v56[2 * llroundf(v202)];
        __asm { FCVT            S3, H3 }
        _S1 = _S1 * _S3;
        float v210 = _S0 * _S3;
        _S2 = _S2 * _S3;
        _S3 = (float)((float)(v273 * v205) + (float)(v204 * v274)) + (float)(v206 * v264);
        float v213 = (float)((float)(v262 * v205) + (float)(v204 * v263)) + (float)(v206 * v261);
        _S5 = (float)((float)(v259 * v205) + (float)(v204 * v260)) + (float)(v206 * v258);
        _S6 = (float)((float)(v273 * v210) + (float)(_S1 * v274)) + (float)(_S2 * v264);
        float v216 = (float)((float)(v262 * v210) + (float)(_S1 * v263)) + (float)(_S2 * v261);
        _S0 = (float)((float)(v259 * v210) + (float)(_S1 * v260)) + (float)(_S2 * v258);
        LOWORD(_S1) = *(_WORD *)&v65[2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
        LOWORD(_S2) = *(_WORD *)&v65[2 * llroundf(fminf(fmaxf(v213, 0.0), 8191.0))];
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H2
        }
        LOWORD(_S3) = *(_WORD *)&v65[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        LOWORD(_S5) = *(_WORD *)&v65[2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        LOWORD(_S6) = *(_WORD *)&v65[2 * llroundf(fminf(fmaxf(v216, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        LOWORD(_S0) = *(_WORD *)&v65[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
        __asm { FCVT            S20, H0 }
        float v224 = (float)((float)((float)(v275 * _S2) + (float)(v276 * _S1)) + (float)(v277 * _S3)) + v49;
        float v225 = (float)((float)((float)(v275 * _S6) + (float)(v276 * _S5)) + (float)(v277 * _S20)) + v49;
        if (v224 < v49) {
          float v226 = v49;
        }
        else {
          float v226 = (float)((float)((float)(v275 * _S2) + (float)(v276 * _S1)) + (float)(v277 * _S3)) + v49;
        }
        if (v224 <= v255) {
          float v227 = v226;
        }
        else {
          float v227 = v255;
        }
        v104->i8[0] = llroundf(v227);
        if (v225 < v49) {
          float v228 = v49;
        }
        else {
          float v228 = (float)((float)((float)(v275 * _S6) + (float)(v276 * _S5)) + (float)(v277 * _S20)) + v49;
        }
        if (v225 > v255) {
          float v228 = v255;
        }
        v104->i8[1] = llroundf(v228);
        float v229 = _S1 + _S5;
        float v230 = _S2 + _S6;
        float v231 = _S3 + _S20;
        float v232 = (float)((float)(v281 + (float)(v229 * *(float *)&v99)) + (float)(v230 * v272))
             + (float)((float)(_S3 + _S20) * v270);
        float v233 = v59;
        if (v232 <= v59)
        {
          float v233 = (float)((float)(v281 + (float)(v229 * *(float *)&v99)) + (float)(v230 * v272)) + (float)(v231 * v270);
          if (v232 < v278) {
            float v233 = v278;
          }
        }
        *(float *)v100.i32 = (float)((float)(v281 + (float)(v229 * *((float *)&v99 + 1))) + (float)(v230 * v253))
                           + (float)(v231 * v252);
        *float32x4_t v163 = llroundf(v233);
        float v234 = v59;
        float16x8_t v70 = v165;
        if (*(float *)v100.i32 <= v59)
        {
          float v234 = *(float *)v100.i32;
          if (*(float *)v100.i32 < v278) {
            float v234 = v278;
          }
        }
        v163[1] = llroundf(v234);
        v163 += 2;
        v164 += 2;
        v162 += 2;
        float v103 = (int8x8_t *)((char *)v103 + 2);
        float v104 = (int8x8_t *)((char *)v104 + 2);
        v101.i64[0] = 0x9000900090009000;
      }
      float v76 = (int8x8_t *)((char *)v76 + v31);
      v75 += v32;
      float v71 = (int8x8_t *)((char *)v71 + v34);
      uint64_t result = (void *)((char *)result + v35);
      ++v18;
      int16x8_t v69 = v250;
      int32x4_t v67 = v251;
    }
    while (v18 != v22);
    if (v237 && v236)
    {
      do
      {
        uint64_t result = memcpy(v37, v33, v19);
        v33 += v235;
        v37 += v36;
        --v22;
      }
      while (v22);
    }
    else if (v236)
    {
      do
      {
        if (v19) {
          uint64_t result = memset(v37, 255, v19);
        }
        v37 += v36;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Tone_Mat_TRC_422vf_GCD(void *result, uint64_t a2, double a3, float a4, double a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    size_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    unint64_t v16 = result[13] * a2 / v7;
    uint64_t v17 = (void *)result[16];
    unint64_t v18 = v16 + result[15];
    uint64_t v19 = result[19];
    uint64_t v20 = (void *)result[7];
    uint64_t v21 = (uint64_t *)result[8];
    size_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v26 = v20[2];
    uint64_t v27 = (char *)(v26 + v25 * v13 + v12);
    uint64_t v28 = *v22;
    uint64_t v29 = v22[1];
    uint64_t v30 = v22[2];
    uint64_t v31 = v17[2];
    uint64_t v32 = (char *)(v31 + v30 * v18 + v15);
    LOWORD(a4) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    float v34 = (float)LODWORD(a6);
    float v160 = v33 * *(float *)v19;
    float v161 = (float)LODWORD(a4);
    float v157 = v33 * *(float *)(v19 + 16);
    float v158 = v33 * *(float *)(v19 + 8);
    float v35 = v33 * *(float *)(v19 + 20);
    *(float *)&unsigned int v36 = v33 * *(float *)(v19 + 28);
    float v155 = *(float *)&v36;
    float v156 = v35;
    LOWORD(v36) = *(_WORD *)(v19 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v19 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v19 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v19 + 150);
    *(float *)&unsigned int v40 = (float)v36;
    float v159 = *(float *)&v40;
    LOWORD(v40) = *(_WORD *)(v19 + 152);
    float v41 = (float)v40;
    float v42 = *(float *)(v19 + 36);
    float v43 = *(float *)(v19 + 40);
    float v44 = *(float *)(v19 + 44);
    float v153 = *(float *)(v19 + 52) * 0.5;
    float v154 = *(float *)(v19 + 48) * 0.5;
    float v151 = *(float *)(v19 + 60) * 0.5;
    float v152 = *(float *)(v19 + 56) * 0.5;
    float v45 = *(float *)(v19 + 72);
    float v46 = *(float *)(v19 + 68) * 0.5;
    float v149 = v46;
    float v150 = *(float *)(v19 + 64) * 0.5;
    float v48 = *(float *)(v19 + 76);
    float v47 = *(float *)(v19 + 80);
    float v49 = *(float *)(v19 + 84);
    float v50 = *(float *)(v19 + 88);
    float v51 = *(float *)(v19 + 92);
    float v52 = *(float *)(v19 + 96);
    float v53 = *(float *)(v19 + 100);
    float v54 = *(float *)(v19 + 104);
    uint64_t v55 = v19 + 164;
    uint64_t v56 = v19 + 16548;
    uint64_t v57 = v17[1];
    _ZF = v57 == 0;
    uint64_t v59 = v57 + v29 * v18;
    uint64_t v60 = *v17 + v28 * v18;
    uint64_t v61 = v19 + 32932;
    uint64_t result = (void *)(v59 + v15);
    if (_ZF) {
      uint64_t result = 0;
    }
    float v62 = (unsigned char *)(v60 + v15);
    unint64_t v65 = v20;
    uint64_t v64 = *v20;
    uint64_t v63 = v65[1];
    _ZF = v63 == 0;
    uint64_t v66 = v63 + v24 * v13 + v12;
    if (_ZF) {
      uint64_t v66 = 0;
    }
    int32x4_t v67 = (unsigned char *)(v64 + v23 * v13 + v12);
    float v69 = *(float *)(v19 + 108);
    float v68 = *(float *)(v19 + 112);
    float v70 = *(float *)(v19 + 116);
    float v71 = *(float *)(v19 + 120);
    do
    {
      if (v11)
      {
        size_t v72 = 0;
        uint64_t v73 = v67;
        float v74 = v62;
        do
        {
          LOBYTE(v46) = *(unsigned char *)(v66 + v72 + 1);
          float v75 = (float)LODWORD(v46) - v34;
          unsigned int v76 = LODWORD(v158);
          float v77 = v158 * v75;
          LOBYTE(v76) = *v73;
          float v78 = v160 * (float)((float)v76 - v161);
          float v79 = (float)(v158 * v75) + v78;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = (float)(v158 * v75) + v78;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          LOBYTE(v79) = *(unsigned char *)(v66 + v72);
          float v81 = v34;
          float v82 = (float)LODWORD(v79) - v34;
          float v83 = (float)(v156 * v75) + (float)(v82 * v157);
          float v84 = 8191.0;
          if ((float)(v78 + v83) <= 8191.0)
          {
            float v84 = v78 + v83;
            if ((float)(v78 + v83) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v155 * v82;
          float v86 = v85 + v78;
          BOOL v87 = (float)(v85 + v78) <= 8191.0;
          float v88 = 8191.0;
          if (v87)
          {
            float v88 = v86;
            if (v86 < 0.0) {
              float v88 = 0.0;
            }
          }
          LOBYTE(v86) = v73[1];
          float v89 = v160 * (float)((float)LODWORD(v86) - v161);
          float v90 = v77 + v89;
          BOOL v87 = (float)(v77 + v89) <= 8191.0;
          float v91 = 8191.0;
          if (v87)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v83 + v89;
          BOOL v87 = (float)(v83 + v89) <= 8191.0;
          float v93 = 8191.0;
          if (v87)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v85 + v89;
          BOOL v87 = (float)(v85 + v89) <= 8191.0;
          float v95 = 8191.0;
          if (v87)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H19 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          float v108 = fmaxf(_S24, fmaxf(_S25, _S26));
          float v109 = (float)((float)((float)(v68 * _S25) + (float)(v69 * _S24)) + (float)(v70 * _S26)) + (float)(v71 * v108);
          float v110 = 8191.0;
          if (v109 <= 8191.0)
          {
            float v110 = (float)((float)((float)(v68 * _S25) + (float)(v69 * _S24)) + (float)(v70 * _S26))
                 + (float)(v71 * v108);
            if (v109 < 0.0) {
              float v110 = 0.0;
            }
          }
          __asm
          {
            FCVT            S27, H19
            FCVT            S28, H28
            FCVT            S30, H30
          }
          _H19 = *(_WORD *)(v56 + 2 * llroundf(v110));
          float v115 = (float)((float)((float)(v68 * _S28) + (float)(v69 * _S27)) + (float)(v70 * _S30))
               + (float)(v71 * fmaxf(_S27, fmaxf(_S28, _S30)));
          float v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            float v116 = v115;
            if (v115 < 0.0) {
              float v116 = 0.0;
            }
          }
          __asm { FCVT            S0, H19 }
          float v118 = _S24 * _S0;
          float v119 = _S25 * _S0;
          float v120 = _S26 * _S0;
          _H1 = *(_WORD *)(v56 + 2 * llroundf(v116));
          __asm { FCVT            S1, H1 }
          _S25 = _S27 * _S1;
          _S26 = _S28 * _S1;
          float v125 = _S30 * _S1;
          float v126 = (float)((float)(v48 * v119) + (float)(v118 * v45)) + (float)(v120 * v47);
          float v127 = (float)((float)(v50 * v119) + (float)(v118 * v49)) + (float)(v120 * v51);
          _S0 = (float)((float)(v53 * v119) + (float)(v118 * v52)) + (float)(v120 * v54);
          _S19 = (float)((float)(v48 * _S26) + (float)(_S25 * v45)) + (float)(v125 * v47);
          _S24 = (float)((float)(v50 * _S26) + (float)(_S25 * v49)) + (float)(v125 * v51);
          _S1 = (float)((float)(v53 * _S26) + (float)(_S25 * v52)) + (float)(v125 * v54);
          LOWORD(_S25) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          LOWORD(_S26) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm
          {
            FCVT            S25, H25
            FCVT            S26, H26
          }
          LOWORD(_S0) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S19) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S24) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S1) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          float v138 = (float)((float)((float)(v43 * _S26) + (float)(v42 * _S25)) + (float)(v44 * _S0)) + v37;
          float v139 = (float)((float)((float)(v43 * _S24) + (float)(v42 * _S19)) + (float)(v44 * _S1)) + v37;
          if (v138 < v37) {
            float v140 = v37;
          }
          else {
            float v140 = (float)((float)((float)(v43 * _S26) + (float)(v42 * _S25)) + (float)(v44 * _S0)) + v37;
          }
          if (v138 <= v39) {
            float v141 = v140;
          }
          else {
            float v141 = v39;
          }
          *float v74 = llroundf(v141);
          if (v139 < v37) {
            float v142 = v37;
          }
          else {
            float v142 = (float)((float)((float)(v43 * _S24) + (float)(v42 * _S19)) + (float)(v44 * _S1)) + v37;
          }
          if (v139 > v39) {
            float v142 = v39;
          }
          v74[1] = llroundf(v142);
          float v143 = _S25 + _S19;
          float v144 = _S26 + _S24;
          float v145 = _S0 + _S1;
          float v146 = (float)((float)(v38 + (float)(v143 * v154)) + (float)(v144 * v153))
               + (float)((float)(_S0 + _S1) * v152);
          float v147 = v41;
          if (v146 <= v41)
          {
            float v147 = v146;
            if (v146 < v159) {
              float v147 = v159;
            }
          }
          float v148 = (float)((float)(v38 + (float)(v143 * v151)) + (float)(v144 * v150)) + (float)(v145 * v149);
          *((unsigned char *)result + v72) = llroundf(v147);
          float v46 = v41;
          if (v148 <= v41)
          {
            float v46 = v148;
            if (v148 < v159) {
              float v46 = v159;
            }
          }
          *((unsigned char *)result + v72 + 1) = llroundf(v46);
          v72 += 2;
          v73 += 2;
          v74 += 2;
          float v34 = v81;
        }
        while (v11 > v72);
      }
      v67 += v23;
      v66 += v24;
      v62 += v28;
      uint64_t result = (void *)((char *)result + v29);
      ++v10;
    }
    while (v10 != v14);
    if (v26 && v31)
    {
      do
      {
        uint64_t result = memcpy(v32, v27, v11);
        v27 += v25;
        v32 += v30;
        --v14;
      }
      while (v14);
    }
    else if (v31)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v32, 255, v11);
        }
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Mat_TRC_422vf_neon_fp16_GCD(void *result, uint64_t a2, float32x4_t a3)
{
  uint64_t v13 = *(void *)((char *)result + 28);
  unint64_t v14 = *(unsigned __int8 *)result;
  unint64_t v15 = v13 * a2 / v14;
  unint64_t v16 = (v13 + v13 * a2) / v14;
  if (v16 != v15)
  {
    uint64_t v17 = 0;
    size_t v18 = *(void *)((char *)result + 20);
    uint64_t v19 = *(void *)((char *)result + 36);
    unint64_t v20 = v15 + *(void *)((char *)result + 44);
    unint64_t v21 = v16 - v15;
    uint64_t v22 = result[14];
    uint64_t v23 = (void *)result[16];
    unint64_t v24 = result[13] * a2 / v14 + result[15];
    uint64_t v25 = (float32x2_t *)result[19];
    uint64_t v26 = (uint64_t *)result[7];
    uint64_t v27 = (uint64_t *)result[8];
    uint64_t v28 = (uint64_t *)result[17];
    uint64_t v29 = *v27;
    uint64_t v30 = v27[1];
    uint64_t v31 = v27[2];
    uint64_t v225 = v26[2];
    uint64_t v32 = (char *)(v225 + v31 * v20 + v19);
    uint64_t v33 = *v28;
    uint64_t v34 = v28[1];
    uint64_t v35 = v28[2];
    uint64_t v224 = v23[2];
    uint64_t v36 = (char *)(v224 + v35 * v24 + v22);
    float v37 = (float)v25[16].u32[0];
    unsigned int v38 = v25[17].u16[2];
    unsigned int v39 = v25[17].u16[3];
    float v40 = (float)v38;
    *(short float *)v7.i16 = (short float)v38;
    v41.i32[0] = v25[3].i32[1];
    float v42 = (float)v39;
    *(short float *)v8.i16 = (short float)v39;
    unsigned int v43 = v25[18].u16[0];
    _S5 = v25[5].i32[1];
    v45.i32[0] = v25[6].i32[0];
    v47.i32[0] = v25[6].i32[1];
    v46.i32[0] = v25[7].i32[0];
    v41.i32[1] = v25[1].i32[0];
    v45.i32[1] = v25[7].i32[1];
    v47.i32[1] = v25[8].i32[0];
    v46.i32[1] = v25[8].i32[1];
    unsigned int v48 = v25[18].u16[1];
    float v49 = (float)v43;
    *(short float *)v3.i16 = (short float)v43;
    unsigned int v50 = v25[18].u16[2];
    float v51 = (float)v48;
    *(short float *)v6.i16 = (short float)v48;
    unsigned int v52 = v25[18].u16[3];
    float v53 = (float)v50;
    *(short float *)v9.i16 = (short float)v50;
    unsigned int v54 = v25[19].u16[0];
    _S7 = v25[4].i32[1];
    _S16 = v25[5].f32[0];
    _S11 = v25[9].f32[0];
    _S13 = v25[9].i32[1];
    *(float *)v10.i32 = (float)v52;
    float v259 = (float)v52;
    *(short float *)v10.i16 = (short float)v52;
    uint64_t v59 = (char *)&v25[20] + 4;
    _S9 = (float)(8191.0 / v37) * v25->f32[0];
    float v61 = (float)v54;
    *(short float *)v12.i16 = (short float)v54;
    uint64_t v62 = v23[1];
    _ZF = v62 == 0;
    uint64_t v64 = v62 + v34 * v24;
    uint64_t v65 = *v23 + *v28 * v24;
    uint64_t v66 = (char *)&v25[2068] + 4;
    int16x8_t v67 = vdupq_lane_s16(v7, 0);
    short float v68 = -*(short float *)v8.i16;
    *(float32x2_t *)v8.f32 = vmul_n_f32(v41, 8191.0 / v37);
    float16x8_t v69 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v8), 0);
    *(float32x2_t *)v11.f32 = vmul_n_f32(v25[2], 8191.0 / v37);
    float16x8_t v253 = vmulq_n_f16(v69, v68);
    *(float32x2_t *)v4.f32 = vmul_f32(v45, (float32x2_t)0x3F0000003F000000);
    float16x8_t v231 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    *(float32x2_t *)v5.f32 = vmul_f32(v47, (float32x2_t)0x3F0000003F000000);
    float16x8_t v251 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    float v70 = _S9;
    *(float32x2_t *)a3.f32 = vmul_f32(v46, (float32x2_t)0x3F0000003F000000);
    float16x8_t v227 = (float16x8_t)vdupq_lane_s16(v3, 0);
    int16x8_t v71 = vdupq_lane_s16(v6, 0);
    float16x8_t v228 = (float16x8_t)vdupq_lane_s16(v9, 0);
    float16x8_t v229 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a3), 0);
    float16x8_t v248 = (float16x8_t)vdupq_lane_s16(v10, 0);
    int16x8_t v72 = vdupq_lane_s16(v12, 0);
    float16x8_t v254 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v11), 0);
    float16x8_t v73 = vmulq_n_f16(v254, v68);
    float v74 = (unsigned char *)(v64 + v22);
    if (_ZF) {
      float v74 = 0;
    }
    uint64_t result = (void *)(v65 + v22);
    uint64_t v76 = *v26;
    uint64_t v75 = v26[1];
    float v77 = (unsigned char *)(v75 + v30 * v20 + v19);
    if (!v75) {
      float v77 = 0;
    }
    float v78 = (int8x8_t *)(v76 + v29 * v20 + v19);
    _S22 = v25[10].f32[0];
    _S23 = v25[10].f32[1];
    _S24 = v25[11].f32[0];
    _S25 = v25[11].f32[1];
    _S26 = v25[12].f32[0];
    _S29 = v25[12].f32[1];
    _S28 = v25[13].f32[0];
    __asm { FCVT            H9, S9 }
    float v257 = v25[4].f32[1];
    __asm { FCVT            H7, S7 }
    short float v246 = _H7;
    float16x8_t v91 = v69;
    __asm { FCVT            H10, S16 }
    short float v245 = _H10;
    float v258 = v25[5].f32[1];
    __asm { FCVT            H5, S5 }
    short float v244 = _H5;
    float16x8_t v94 = (float16x8_t)v67;
    __asm { FCVT            H10, S11 }
    short float v243 = _H10;
    float v256 = v25[9].f32[1];
    __asm { FCVT            H10, S13 }
    short float v242 = _H10;
    __asm { FCVT            H10, S22 }
    short float v241 = _H10;
    __asm { FCVT            H10, S23 }
    short float v240 = _H10;
    __asm { FCVT            H10, S24 }
    short float v239 = _H10;
    __asm { FCVT            H10, S25 }
    short float v238 = _H10;
    __asm { FCVT            H10, S26 }
    short float v237 = _H10;
    __asm { FCVT            H10, S29 }
    short float v236 = _H10;
    __asm { FCVT            H10, S28 }
    short float v235 = _H10;
    float v104 = _S22;
    uint64_t v105 = v8.i64[0];
    float v255 = v11.f32[0];
    float v252 = v5.f32[0];
    uint64_t v106 = v4.i64[0];
    float v234 = v11.f32[1];
    float16x8_t v249 = (float16x8_t)v71;
    float v250 = a3.f32[0];
    a3.i32[0] = a3.i32[1];
    float v232 = a3.f32[1];
    float v233 = v5.f32[1];
    v107.i64[0] = 0x9000900090009000;
    v107.i64[1] = 0x9000900090009000;
    float16x8_t v247 = (float16x8_t)v72;
    float16x8_t v108 = v73;
    float v230 = v70;
    float32_t v226 = v25[10].f32[0];
    do
    {
      if ((int)v18 < 8)
      {
        size_t v160 = 0;
        float v159 = v74;
        int8x16_t v111 = (int8x8_t *)result;
        float v158 = v77;
        float v110 = v78;
      }
      else
      {
        uint64_t v109 = 0;
        float v110 = v78;
        int8x16_t v111 = (int8x8_t *)result;
        do
        {
          int8x8_t v112 = *(int8x8_t *)&v77[v109];
          *(int8x8_t *)v113.i8 = vzip1_s8(v112, 0);
          v113.u64[1] = (unint64_t)vzip2_s8(v112, 0);
          float16x8_t v114 = vcvtq_f16_u16(v113);
          int16x8_t v115 = (int16x8_t)vmlaq_f16(v253, v91, v114);
          int8x16_t v116 = (int8x16_t)vmlaq_f16(v73, v254, v114);
          v114.i64[0] = vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL).u64[0];
          *(int16x4_t *)v117.i8 = vuzp1_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v114.i8);
          *(int16x4_t *)v114.i8 = vuzp2_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v114.i8);
          v114.i64[1] = v114.i64[0];
          float16x8_t v118 = (float16x8_t)vzip1q_s16((int16x8_t)v114, (int16x8_t)v114);
          v117.i64[1] = v118.i64[0];
          v115.i64[0] = vextq_s8(v116, v116, 8uLL).u64[0];
          *(float16x4_t *)v115.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8));
          v115.i64[1] = v118.i64[0];
          int8x8_t v119 = *v110++;
          *(int8x8_t *)v120.i8 = vzip1_s8(v119, 0);
          v120.u64[1] = (unint64_t)vzip2_s8(v119, 0);
          float16x8_t v121 = vsubq_f16(vcvtq_f16_u16(v120), v94);
          float16x8_t v122 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v115, v115), v121, _H9);
          float16x8_t v123 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v117, v117), v121, _H9);
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v118, v121, _H9), (float16x8_t)0), v107));
          float16x8_t v125 = (float16x8_t)vmovl_high_u16(v124);
          uint32x4_t v126 = vmovl_u16(*(uint16x4_t *)v124.i8);
          v127.i16[0] = *(_WORD *)&v59[2 * v126.u32[0]];
          v127.i16[1] = *(_WORD *)&v59[2 * v126.u32[1]];
          v127.i16[2] = *(_WORD *)&v59[2 * v126.u32[2]];
          v127.i16[3] = *(_WORD *)&v59[2 * v126.u32[3]];
          v127.i16[4] = *(_WORD *)&v59[2 * v125.u32[0]];
          v127.i16[5] = *(_WORD *)&v59[2 * v125.u32[1]];
          v127.i16[6] = *(_WORD *)&v59[2 * v125.u32[2]];
          v127.i16[7] = *(_WORD *)&v59[2 * v125.u32[3]];
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v107));
          uint32x4_t v129 = vmovl_high_u16(v128);
          uint32x4_t v130 = vmovl_u16(*(uint16x4_t *)v128.i8);
          v125.i16[0] = *(_WORD *)&v59[2 * v130.u32[0]];
          v125.i16[1] = *(_WORD *)&v59[2 * v130.u32[1]];
          v125.i16[2] = *(_WORD *)&v59[2 * v130.u32[2]];
          v125.i16[3] = *(_WORD *)&v59[2 * v130.u32[3]];
          v125.i16[4] = *(_WORD *)&v59[2 * v129.u32[0]];
          v125.i16[5] = *(_WORD *)&v59[2 * v129.u32[1]];
          v125.i16[6] = *(_WORD *)&v59[2 * v129.u32[2]];
          v125.i16[7] = *(_WORD *)&v59[2 * v129.u32[3]];
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v107));
          uint32x4_t v132 = vmovl_high_u16(v131);
          float16x8_t v133 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v131.i8);
          v133.i16[0] = *(_WORD *)&v59[2 * v133.u32[0]];
          v133.i16[1] = *(_WORD *)&v59[2 * v133.u32[1]];
          v133.i16[2] = *(_WORD *)&v59[2 * v133.u32[2]];
          v133.i16[3] = *(_WORD *)&v59[2 * v133.u32[3]];
          v133.i16[4] = *(_WORD *)&v59[2 * v132.u32[0]];
          v133.i16[5] = *(_WORD *)&v59[2 * v132.u32[1]];
          v133.i16[6] = *(_WORD *)&v59[2 * v132.u32[2]];
          v133.i16[7] = *(_WORD *)&v59[2 * v132.u32[3]];
          float16x8_t v134 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v127, v240), v125, v239), v133, v238);
          float16x8_t v135 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v133, v235), v125, v236), v127, v237);
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v127, v243), v125, v242), v133, v241), (float16x8_t)0), v107));
          uint32x4_t v137 = vmovl_high_u16(v136);
          uint32x4_t v138 = vmovl_u16(*(uint16x4_t *)v136.i8);
          v127.i16[0] = *(_WORD *)&v66[2 * v138.u32[0]];
          v127.i16[1] = *(_WORD *)&v66[2 * v138.u32[1]];
          v127.i16[2] = *(_WORD *)&v66[2 * v138.u32[2]];
          v127.i16[3] = *(_WORD *)&v66[2 * v138.u32[3]];
          v127.i16[4] = *(_WORD *)&v66[2 * v137.u32[0]];
          v127.i16[5] = *(_WORD *)&v66[2 * v137.u32[1]];
          v127.i16[6] = *(_WORD *)&v66[2 * v137.u32[2]];
          float16x8_t v139 = v127;
          v139.i16[7] = *(_WORD *)&v66[2 * v137.u32[3]];
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v134, (float16x8_t)0), v107));
          uint32x4_t v141 = vmovl_high_u16(v140);
          uint32x4_t v142 = vmovl_u16(*(uint16x4_t *)v140.i8);
          v125.i16[7] = (unint64_t)v142.u32[1] >> 48;
          v125.i16[0] = *(_WORD *)&v66[2 * v142.u32[0]];
          uint64_t v143 = v141.u32[3];
          v125.i16[1] = *(_WORD *)&v66[2 * v142.u32[1]];
          v125.i16[2] = *(_WORD *)&v66[2 * v142.u32[2]];
          v125.i16[3] = *(_WORD *)&v66[2 * v142.u32[3]];
          v125.i16[4] = *(_WORD *)&v66[2 * v141.u32[0]];
          v125.i16[5] = *(_WORD *)&v66[2 * v141.u32[1]];
          v125.i16[6] = *(_WORD *)&v66[2 * v141.u32[2]];
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v135, (float16x8_t)0), v107));
          uint32x4_t v145 = vmovl_u16(*(uint16x4_t *)v144.i8);
          uint64_t v146 = v145.u32[1];
          uint64_t v147 = v145.u32[0];
          float16x8_t v148 = v125;
          v148.i16[7] = *(_WORD *)&v66[2 * v143];
          uint32x4_t v149 = vmovl_high_u16(v144);
          uint64_t v150 = v145.u32[3];
          uint64_t v151 = v145.u32[2];
          *(void *)&long long v152 = v149.u32[2];
          *((void *)&v152 + 1) = v149.u32[3];
          long long v153 = v152;
          *(void *)&long long v152 = v149.u32[0];
          a3.i16[7] = (unint64_t)v149.u32[1] >> 48;
          a3.i16[0] = *(_WORD *)&v66[2 * v147];
          float v154 = (unsigned __int16 *)&v66[2 * v149.u32[1]];
          a3.i16[1] = *(_WORD *)&v66[2 * v146];
          a3.i16[2] = *(_WORD *)&v66[2 * v151];
          a3.i16[3] = *(_WORD *)&v66[2 * v150];
          a3.i16[4] = *(_WORD *)&v66[2 * v152];
          a3.i16[5] = *v154;
          a3.i16[6] = *(_WORD *)&v66[2 * v153];
          float v155 = (__int16 *)&v66[2 * *((void *)&v153 + 1)];
          float16x8_t v156 = (float16x8_t)a3;
          v156.i16[7] = *v155;
          *v111++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v227, v139, v246), v148, v245), v156, v244), v227), v228)));
          float16x8_t v73 = v108;
          int16x8_t v157 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v127, (int16x8_t)v125), (float16x8_t)vuzp2q_s16((int16x8_t)v139, (int16x8_t)v148));
          *(int8x8_t *)a3.f32 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v249, v231, (float16x8_t)vzip1q_s16(v157, v157)), v251, (float16x8_t)vzip2q_s16(v157, v157)), v229, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)a3, (int16x8_t)a3), (float16x8_t)vtrn2q_s16((int16x8_t)v156, (int16x8_t)v156))), v248), v247)));
          *(void *)&v74[v109] = a3.i64[0];
          v109 += 8;
        }
        while ((int)v109 < (int)v18 - 7);
        float v158 = &v77[v109];
        float v159 = &v74[v109];
        size_t v160 = v18 & 0xFFFFFFF8;
        float v70 = v230;
        float v104 = v226;
      }
      for (; v18 > v160; float16x8_t v94 = v178)
      {
        float16x8_t v161 = v91;
        float v162 = v51;
        a3.i8[0] = v158[1];
        float v163 = (float)a3.u32[0] - v42;
        unsigned int v164 = HIDWORD(v105);
        float v165 = *((float *)&v105 + 1) * v163;
        LOBYTE(v164) = v110->i8[0];
        float v166 = (float)v164 - v40;
        float v167 = v70 * v166;
        float v168 = (float)(*((float *)&v105 + 1) * v163) + (float)(v70 * v166);
        float v169 = 8191.0;
        if (v168 <= 8191.0)
        {
          float v169 = (float)(*((float *)&v105 + 1) * v163) + (float)(v70 * v166);
          if (v168 < 0.0) {
            float v169 = 0.0;
          }
        }
        LOBYTE(v166) = *v158;
        float v170 = (float)LODWORD(v166) - v42;
        float v171 = (float)(v234 * v163) + (float)(v170 * v255);
        float v172 = 8191.0;
        if ((float)(v167 + v171) <= 8191.0)
        {
          float v172 = v167 + v171;
          if ((float)(v167 + v171) < 0.0) {
            float v172 = 0.0;
          }
        }
        unsigned int v173 = v105;
        float v174 = *(float *)&v105 * v170;
        float v175 = v174 + v167;
        BOOL v176 = (float)(v174 + v167) <= 8191.0;
        float v177 = 8191.0;
        if (v176)
        {
          float v177 = v175;
          if (v175 < 0.0) {
            float v177 = 0.0;
          }
        }
        float16x8_t v178 = v94;
        LOBYTE(v173) = v110->i8[1];
        float v179 = v70 * (float)((float)v173 - v40);
        float v180 = v165 + v179;
        float v181 = 8191.0;
        if (v180 <= 8191.0)
        {
          float v181 = v180;
          if (v180 < 0.0) {
            float v181 = 0.0;
          }
        }
        float v182 = v42;
        float v183 = v171 + v179;
        BOOL v176 = (float)(v171 + v179) <= 8191.0;
        float v184 = 8191.0;
        if (v176)
        {
          float v184 = v183;
          if (v183 < 0.0) {
            float v184 = 0.0;
          }
        }
        float v185 = v40;
        float v186 = v174 + v179;
        float v187 = 8191.0;
        if (v186 <= 8191.0)
        {
          float v187 = v186;
          if (v186 < 0.0) {
            float v187 = 0.0;
          }
        }
        _H19 = *(_WORD *)&v59[2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0))];
        _H27 = *(_WORD *)&v59[2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0))];
        __asm
        {
          FCVT            S19, H19
          FCVT            S27, H27
        }
        _H30 = *(_WORD *)&v59[2 * llroundf(fminf(fmaxf(v177, 0.0), 8191.0))];
        unsigned int v193 = llroundf(fminf(fmaxf(v181, 0.0), 8191.0));
        __asm { FCVT            S0, H30 }
        _H30 = *(_WORD *)&v59[2 * v193];
        __asm { FCVT            S30, H30 }
        _H31 = *(_WORD *)&v59[2 * llroundf(fminf(fmaxf(v184, 0.0), 8191.0))];
        __asm { FCVT            S31, H31 }
        _H8 = *(_WORD *)&v59[2 * llroundf(fminf(fmaxf(v187, 0.0), 8191.0))];
        __asm { FCVT            S8, H8 }
        float v201 = (float)((float)(v256 * _S27) + (float)(_S19 * _S11)) + (float)(_S0 * v104);
        float v202 = (float)((float)(_S24 * _S27) + (float)(_S19 * _S23)) + (float)(_S0 * _S25);
        _S0 = (float)((float)(_S29 * _S27) + (float)(_S19 * _S26)) + (float)(_S0 * _S28);
        _S19 = (float)((float)(v256 * _S31) + (float)(_S30 * _S11)) + (float)(_S8 * v104);
        _S27 = (float)((float)(_S24 * _S31) + (float)(_S30 * _S23)) + (float)(_S8 * _S25);
        _S30 = (float)((float)(_S29 * _S31) + (float)(_S30 * _S26)) + (float)(_S8 * _S28);
        LOWORD(_S31) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(v201, 0.0), 8191.0))];
        LOWORD(_S8) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(v202, 0.0), 8191.0))];
        __asm
        {
          FCVT            S31, H31
          FCVT            S8, H8
        }
        LOWORD(_S0) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        LOWORD(_S19) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0))];
        __asm { FCVT            S19, H19 }
        LOWORD(_S27) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(_S27, 0.0), 8191.0))];
        __asm { FCVT            S27, H27 }
        LOWORD(_S30) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(_S30, 0.0), 8191.0))];
        __asm { FCVT            S30, H30 }
        float v213 = (float)((float)((float)(_S16 * _S8) + (float)(v257 * _S31)) + (float)(v258 * _S0)) + v49;
        float v214 = (float)((float)((float)(_S16 * _S27) + (float)(v257 * _S19)) + (float)(v258 * _S30)) + v49;
        if (v213 < v49) {
          float v215 = v49;
        }
        else {
          float v215 = (float)((float)((float)(_S16 * _S8) + (float)(v257 * _S31)) + (float)(v258 * _S0)) + v49;
        }
        if (v213 > v53) {
          float v215 = v53;
        }
        v111->i8[0] = llroundf(v215);
        if (v214 < v49) {
          float v216 = v49;
        }
        else {
          float v216 = (float)((float)((float)(_S16 * _S27) + (float)(v257 * _S19)) + (float)(v258 * _S30)) + v49;
        }
        if (v214 > v53) {
          float v216 = v53;
        }
        v111->i8[1] = llroundf(v216);
        float v217 = _S31 + _S19;
        float v51 = v162;
        float v218 = _S8 + _S27;
        float v219 = _S0 + _S30;
        float v220 = (float)((float)(v162 + (float)(v217 * *(float *)&v106)) + (float)(v218 * v252)) + (float)(v219 * v250);
        float v221 = v61;
        if (v220 <= v61)
        {
          float v221 = (float)((float)(v162 + (float)(v217 * *(float *)&v106)) + (float)(v218 * v252)) + (float)(v219 * v250);
          if (v220 < v259) {
            float v221 = v259;
          }
        }
        a3.f32[0] = (float)(v162 + (float)(v217 * *((float *)&v106 + 1))) + (float)(v218 * v233);
        float v222 = a3.f32[0] + (float)(v219 * v232);
        *float v159 = llroundf(v221);
        float v223 = v61;
        float v40 = v185;
        float16x8_t v91 = v161;
        float16x8_t v73 = v108;
        if (v222 <= v61)
        {
          a3.f32[0] = v259;
          float v223 = v222;
          if (v222 < v259) {
            float v223 = v259;
          }
        }
        v159[1] = llroundf(v223);
        v159 += 2;
        v160 += 2;
        v158 += 2;
        float v110 = (int8x8_t *)((char *)v110 + 2);
        int8x16_t v111 = (int8x8_t *)((char *)v111 + 2);
        float v42 = v182;
      }
      float v78 = (int8x8_t *)((char *)v78 + v29);
      v77 += v30;
      uint64_t result = (void *)((char *)result + v33);
      v74 += v34;
      ++v17;
    }
    while (v17 != v21);
    if (v225 && v224)
    {
      do
      {
        uint64_t result = memcpy(v36, v32, v18);
        v32 += v31;
        v36 += v35;
        --v21;
      }
      while (v21);
    }
    else if (v224)
    {
      do
      {
        if (v18) {
          uint64_t result = memset(v36, 255, v18);
        }
        v36 += v35;
        --v21;
      }
      while (v21);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Mat_TRC_422vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    size_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (uint64_t *)result[16];
    unint64_t v17 = result[13] * a2 / v7 + result[15];
    uint64_t v18 = result[19];
    uint64_t v19 = (uint64_t *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = (char *)(v25 + v24 * v13 + v12);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (char *)(v30 + v29 * v17 + v15);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    float v33 = (float)LODWORD(a5);
    float v34 = (float)LODWORD(a6);
    float v35 = v32 * *(float *)v18;
    float v134 = v32 * *(float *)(v18 + 16);
    float v135 = v32 * *(float *)(v18 + 8);
    float v132 = v32 * *(float *)(v18 + 28);
    *(float *)&unsigned int v36 = v132;
    float v133 = v32 * *(float *)(v18 + 20);
    LOWORD(v36) = *(_WORD *)(v18 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 150);
    float v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 152);
    float v41 = (float)v36;
    float v42 = *(float *)(v18 + 36);
    float v43 = *(float *)(v18 + 40);
    float v44 = *(float *)(v18 + 44);
    float v130 = *(float *)(v18 + 52) * 0.5;
    float v131 = *(float *)(v18 + 48) * 0.5;
    float v128 = *(float *)(v18 + 60) * 0.5;
    float v129 = *(float *)(v18 + 56) * 0.5;
    float v127 = *(float *)(v18 + 64) * 0.5;
    float v45 = *(float *)(v18 + 68);
    float v46 = *(float *)(v18 + 72);
    float v47 = v45 * 0.5;
    float v49 = *(float *)(v18 + 76);
    float v48 = *(float *)(v18 + 80);
    float v50 = *(float *)(v18 + 84);
    float v51 = *(float *)(v18 + 88);
    float v52 = *(float *)(v18 + 92);
    float v53 = *(float *)(v18 + 96);
    float v54 = *(float *)(v18 + 100);
    float v55 = *(float *)(v18 + 104);
    uint64_t v56 = v18 + 164;
    uint64_t v57 = v18 + 16548;
    uint64_t v59 = *v16;
    uint64_t v58 = v16[1];
    uint64_t v60 = v58 + v28 * v17 + v15;
    if (!v58) {
      uint64_t v60 = 0;
    }
    uint64_t result = (void *)(v59 + v27 * v17 + v15);
    uint64_t v62 = *v19;
    uint64_t v61 = v19[1];
    uint64_t v63 = v61 + v23 * v13 + v12;
    if (!v61) {
      uint64_t v63 = 0;
    }
    uint64_t v64 = (unsigned char *)(v62 + v22 * v13 + v12);
    do
    {
      if (v11)
      {
        size_t v65 = 0;
        uint64_t v66 = v64;
        int16x8_t v67 = result;
        do
        {
          LOBYTE(v45) = *(unsigned char *)(v63 + v65 + 1);
          float v68 = (float)LODWORD(v45) - v34;
          unsigned int v69 = LODWORD(v135);
          float v70 = v135 * v68;
          LOBYTE(v69) = *v66;
          float v71 = v35 * (float)((float)v69 - v33);
          float v72 = (float)(v135 * v68) + v71;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = (float)(v135 * v68) + v71;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          LOBYTE(v72) = *(unsigned char *)(v63 + v65);
          float v74 = (float)LODWORD(v72) - v34;
          float v75 = (float)(v133 * v68) + (float)(v74 * v134);
          float v76 = 8191.0;
          if ((float)(v71 + v75) <= 8191.0)
          {
            float v76 = v71 + v75;
            if ((float)(v71 + v75) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v132 * v74;
          float v78 = v77 + v71;
          BOOL v79 = (float)(v77 + v71) <= 8191.0;
          float v80 = 8191.0;
          if (v79)
          {
            float v80 = v78;
            if (v78 < 0.0) {
              float v80 = 0.0;
            }
          }
          LOBYTE(v78) = v66[1];
          float v81 = v35 * (float)((float)LODWORD(v78) - v33);
          float v82 = v70 + v81;
          float v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v75 + v81;
          BOOL v79 = (float)(v75 + v81) <= 8191.0;
          float v85 = 8191.0;
          if (v79)
          {
            float v85 = v84;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v77 + v81;
          BOOL v79 = (float)(v77 + v81) <= 8191.0;
          float v87 = 8191.0;
          if (v79)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm
          {
            FCVT            S4, H4
            FCVT            S5, H5
          }
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v104 = (float)((float)(v49 * _S5) + (float)(_S4 * v46)) + (float)(_S6 * v48);
          float v105 = (float)((float)(v51 * _S5) + (float)(_S4 * v50)) + (float)(_S6 * v52);
          _S4 = (float)((float)(v54 * _S5) + (float)(_S4 * v53)) + (float)(_S6 * v55);
          _S5 = (float)((float)(v49 * _S24) + (float)(_S7 * v46)) + (float)(_S25 * v48);
          _S6 = (float)((float)(v51 * _S24) + (float)(_S7 * v50)) + (float)(_S25 * v52);
          float v109 = (float)((float)(v54 * _S24) + (float)(_S7 * v53)) + (float)(_S25 * v55);
          LOWORD(_S24) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          LOWORD(_S25) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H25
          }
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S26, H4 }
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          float v116 = (float)((float)((float)(v43 * _S25) + (float)(v42 * _S24)) + (float)(v44 * _S26)) + v37;
          float v117 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
          if (v116 < v37) {
            float v118 = v37;
          }
          else {
            float v118 = (float)((float)((float)(v43 * _S25) + (float)(v42 * _S24)) + (float)(v44 * _S26)) + v37;
          }
          if (v116 <= v39) {
            float v119 = v118;
          }
          else {
            float v119 = v39;
          }
          *int16x8_t v67 = llroundf(v119);
          if (v117 < v37) {
            float v120 = v37;
          }
          else {
            float v120 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
          }
          if (v117 > v39) {
            float v120 = v39;
          }
          v67[1] = llroundf(v120);
          float v121 = _S24 + _S4;
          float v122 = _S25 + _S5;
          float v123 = _S26 + _S6;
          float v124 = (float)((float)(v38 + (float)(v121 * v131)) + (float)(v122 * v130)) + (float)(v123 * v129);
          float v125 = v41;
          if (v124 <= v41)
          {
            float v125 = (float)((float)(v38 + (float)(v121 * v131)) + (float)(v122 * v130)) + (float)(v123 * v129);
            if (v124 < v40) {
              float v125 = v40;
            }
          }
          float v45 = (float)((float)(v38 + (float)(v121 * v128)) + (float)(v122 * v127)) + (float)(v123 * v47);
          *(unsigned char *)(v60 + v65) = llroundf(v125);
          float v126 = v41;
          if (v45 <= v41)
          {
            float v126 = v45;
            if (v45 < v40) {
              float v126 = v40;
            }
          }
          *(unsigned char *)(v60 + v65 + 1) = llroundf(v126);
          v65 += 2;
          v66 += 2;
          v67 += 2;
        }
        while (v11 > v65);
      }
      v64 += v22;
      v63 += v23;
      uint64_t result = (void *)((char *)result + v27);
      v60 += v28;
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      do
      {
        uint64_t result = memcpy(v31, v26, v11);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v31, 255, v11);
        }
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_422vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_422vf_rgb_422vf_neon_fp16_GCD(void *result, uint64_t a2, double _D0)
{
  uint64_t v8 = *(void *)((char *)result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    size_t v13 = *(void *)((char *)result + 20);
    uint64_t v14 = *(void *)((char *)result + 36);
    unint64_t v15 = v10 + *(void *)((char *)result + 44);
    unint64_t v16 = v11 - v10;
    uint64_t v17 = result[14];
    uint64_t v18 = (uint64_t *)result[16];
    unint64_t v19 = result[13] * a2 / v9 + result[15];
    uint64_t v20 = (float32x2_t *)result[19];
    size_t v22 = (uint64_t *)result[7];
    uint64_t v21 = (uint64_t *)result[8];
    uint64_t v23 = (uint64_t *)result[17];
    uint64_t v24 = *v21;
    uint64_t v25 = v21[1];
    uint64_t v26 = v21[2];
    uint64_t v131 = v22[2];
    uint64_t v27 = (char *)(v131 + v26 * v15 + v14);
    uint64_t v28 = *v23;
    uint64_t v29 = v23[1];
    uint64_t v30 = v23[2];
    uint64_t v31 = v18[2];
    uint64_t v32 = (char *)(v31 + v30 * v19 + v17);
    LODWORD(_D0) = v20[17].i32[0];
    unsigned int v33 = v20[17].u16[2];
    unsigned int v34 = v20[17].u16[3];
    v35.i32[0] = v20[3].i32[1];
    unsigned int v36 = v20[18].u16[0];
    unsigned int v37 = v20[18].u16[1];
    unsigned int v38 = v20[18].u16[2];
    unsigned int v39 = v20[18].u16[3];
    unsigned int v40 = v20[19].u16[0];
    _S10 = v20[4].f32[1];
    _S1 = v20[5].f32[0];
    _S2 = v20[5].f32[1];
    v5.i32[0] = v20[6].i32[0];
    v44.i32[0] = v20[6].i32[1];
    v4.i32[0] = v20[7].i32[0];
    float v45 = (float)v33;
    *(short float *)v6.i16 = (short float)v33;
    *(float *)v7.i32 = (float)LODWORD(_D0) / (float)v20[16].u32[0];
    float v46 = (float)v34;
    float v47 = (float)v36;
    float v48 = (float)v37;
    float v49 = (float)v38;
    float v50 = (float)v39;
    float v51 = (float)v40;
    _S18 = *(float *)v7.i32 * v20->f32[0];
    __asm { FCVT            H8, S18 }
    float16x8_t v58 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v6.f32, 0);
    v35.i32[1] = v20[1].i32[0];
    *(float32x2_t *)v6.f32 = vmul_n_f32(v35, *(float *)v7.i32);
    float16x8_t v59 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v6), 0);
    *(float32x2_t *)v7.i8 = vmul_n_f32(v20[2], *(float *)v7.i32);
    short float v60 = -(short float)v34;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)v7), 0);
    float16x8_t v62 = vmulq_n_f16(v59, v60);
    float16x8_t v63 = vmulq_n_f16(v61, v60);
    __asm
    {
      FCVT            H9, S10
      FCVT            H7, S1
    }
    short float v136 = _H7;
    v5.i32[1] = v20[7].i32[1];
    *(float32x2_t *)v3.f32 = vmul_f32(*(float32x2_t *)v5.f32, (float32x2_t)0x3F0000003F000000);
    int32x4_t v66 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    v44.i32[1] = v20[8].i32[0];
    *(float32x2_t *)v5.f32 = vmul_f32(v44, (float32x2_t)0x3F0000003F000000);
    float16x8_t v67 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    v4.i32[1] = v20[8].i32[1];
    *(float32x2_t *)v4.f32 = vmul_f32(*(float32x2_t *)v4.f32, (float32x2_t)0x3F0000003F000000);
    int16x4_t v68 = (int16x4_t)vcvt_f16_f32(v4);
    float16x8_t v69 = (float16x8_t)vdupq_lane_s32((int32x2_t)v68, 0);
    *(short float *)v68.i16 = (short float)v36;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(v68, 0);
    *(short float *)v68.i16 = (short float)v37;
    int16x8_t v71 = vdupq_lane_s16(v68, 0);
    *(short float *)v68.i16 = (short float)v38;
    int16x8_t v72 = vdupq_lane_s16(v68, 0);
    *(short float *)v68.i16 = (short float)v39;
    int16x8_t v73 = vdupq_lane_s16(v68, 0);
    float16x8_t v134 = (float16x8_t)v73;
    *(short float *)v73.i16 = (short float)v40;
    float16x8_t v74 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v73.i8, 0);
    uint64_t v75 = *v18;
    uint64_t v76 = v18[1];
    float v77 = (unsigned char *)(v76 + v29 * v19 + v17);
    if (!v76) {
      float v77 = 0;
    }
    float v78 = (int8x8_t *)(v75 + v28 * v19 + v17);
    uint64_t v79 = *v22;
    uint64_t v80 = v22[1];
    float v81 = (__int8 *)(v80 + v25 * v15 + v14);
    if (!v80) {
      float v81 = 0;
    }
    uint64_t result = (void *)(v79 + v24 * v15 + v14);
    __asm { FCVT            H0, S2 }
    float v150 = *(float *)v7.i32;
    float v151 = v6.f32[0];
    v6.i32[0] = v6.i32[1];
    float v137 = *(float *)&v7.i32[1];
    uint64_t v82 = v5.i64[0];
    float v83 = v20[4].f32[1];
    v84.i32[0] = v4.i32[1];
    float v149 = v4.f32[1];
    float32_t v138 = v4.f32[0];
    float16x8_t v148 = v59;
    float16x8_t v146 = v62;
    float16x8_t v147 = v61;
    int32x4_t v144 = v66;
    short float v145 = _H9;
    float16x8_t v142 = v69;
    float16x8_t v143 = v67;
    int16x8_t v140 = v72;
    int16x8_t v141 = v71;
    double v139 = _D0;
    __int32 v135 = v3.i32[0];
    float v133 = (float)v39;
    __int32 v132 = v6.i32[1];
    do
    {
      if ((int)v13 < 8)
      {
        size_t v107 = 0;
        uint64_t v106 = v77;
        float v87 = v78;
        float v105 = v81;
        float v86 = (int8x8_t *)result;
        float v108 = v138;
      }
      else
      {
        uint64_t v85 = 0;
        float v86 = (int8x8_t *)result;
        float v87 = v78;
        float16x8_t v88 = (float16x8_t)v66;
        float16x8_t v89 = (float16x8_t)v71;
        float16x8_t v90 = (float16x8_t)v72;
        do
        {
          int8x8_t v91 = *(int8x8_t *)&v81[v85];
          *(int8x8_t *)v92.i8 = vzip1_s8(v91, 0);
          v92.u64[1] = (unint64_t)vzip2_s8(v91, 0);
          float16x8_t v93 = vcvtq_f16_u16(v92);
          int8x16_t v94 = (int8x16_t)vmlaq_f16(v62, v59, v93);
          int16x8_t v95 = (int16x8_t)vmlaq_f16(v63, v61, v93);
          v93.i64[0] = vextq_s8(v94, v94, 8uLL).u64[0];
          *(int16x4_t *)v96.i8 = vuzp1_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v93.i8);
          *(int16x4_t *)v93.i8 = vuzp2_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v93.i8);
          *(double *)&v93.i64[1] = _D0;
          *(double *)&v96.i64[1] = _D0;
          float16x8_t v97 = (float16x8_t)vzip1q_s16(v96, v96);
          v96.i64[0] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u64[0];
          *(float16x4_t *)v95.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v96.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v96.i8));
          *(double *)&v95.i64[1] = _D0;
          int8x8_t v98 = *v86++;
          *(int8x8_t *)v99.i8 = vzip1_s8(v98, 0);
          v99.u64[1] = (unint64_t)vzip2_s8(v98, 0);
          float16x8_t v100 = vsubq_f16(vcvtq_f16_u16(v99), v58);
          float16x8_t v101 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v93, (int16x8_t)v93), v100, _H8);
          float16x8_t v102 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v95, v95), v100, _H8);
          float16x8_t v103 = vmlaq_n_f16(v97, v100, _H8);
          *v87++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v70, v101, _H9), v102, v136), v103, *(short float *)&_D0), v70), v90)));
          int16x8_t v104 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v101, (int16x8_t)v102), (float16x8_t)vuzp2q_s16((int16x8_t)v101, (int16x8_t)v102));
          float16x8_t v7 = vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v103, (int16x8_t)v103), (float16x8_t)vtrn2q_s16((int16x8_t)v103, (int16x8_t)v103));
          int8x8_t v84 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v89, v88, (float16x8_t)vzip1q_s16(v104, v104)), v67, (float16x8_t)vzip2q_s16(v104, v104)), v69, v7), v134), v74)));
          *(int8x8_t *)&v77[v85] = v84;
          v85 += 8;
        }
        while ((int)v85 < (int)v13 - 7);
        float v105 = &v81[v85];
        uint64_t v106 = &v77[v85];
        size_t v107 = v13 & 0xFFFFFFF8;
        v3.i32[0] = v135;
        float v108 = v138;
        float v83 = _S10;
        float v50 = v133;
        v6.i32[0] = v132;
      }
      while (v13 > v107)
      {
        float16x8_t v109 = v63;
        float16x8_t v110 = v58;
        v84.i8[0] = *v105;
        *(float *)&unsigned int v111 = (float)v84.u32[0] - v46;
        v7.i8[0] = v105[1];
        float v112 = (float)v7.u32[0] - v46;
        float v113 = v6.f32[0] * v112;
        float v114 = (float)(v137 * v112) + (float)(*(float *)&v111 * v150);
        float v115 = v151 * *(float *)&v111;
        LOBYTE(v111) = v86->i8[0];
        float v116 = _S18 * (float)((float)v111 - v45);
        float v117 = (float)(v6.f32[0] * v112) + v116;
        float v118 = v116 + v114;
        *(float *)v7.i32 = v115 + v116;
        float v119 = (float)((float)((float)(_S1 * (float)(v116 + v114)) + (float)(v83 * v117))
                     + (float)(_S2 * (float)(v115 + v116)))
             + v47;
        *(float *)v84.i32 = v49;
        if (v119 <= v49)
        {
          *(float *)v84.i32 = v119;
          if (v119 < v47) {
            *(float *)v84.i32 = v47;
          }
        }
        LOBYTE(v119) = v86->i8[1];
        float v120 = _S18 * (float)((float)LODWORD(v119) - v45);
        float v121 = v113 + v120;
        float v122 = v114 + v120;
        float v123 = v115 + v120;
        float v124 = (float)((float)((float)(_S1 * v122) + (float)(v83 * v121)) + (float)(_S2 * (float)(v115 + v120))) + v47;
        v87->i8[0] = llroundf(*(float *)v84.i32);
        float v125 = v49;
        if (v124 <= v49)
        {
          float v125 = v124;
          if (v124 < v47) {
            float v125 = v47;
          }
        }
        v87->i8[1] = llroundf(v125);
        float v126 = v117 + v121;
        float v127 = v118 + v122;
        float v128 = *(float *)v7.i32 + v123;
        float v129 = (float)((float)(v48 + (float)((float)(v117 + v121) * v3.f32[0])) + (float)(v127 * *(float *)&v82))
             + (float)(v128 * v108);
        float v130 = v51;
        if (v129 <= v51)
        {
          float v130 = v129;
          if (v129 < v50) {
            float v130 = v50;
          }
        }
        *(float *)v84.i32 = (float)((float)(v48 + (float)(v126 * v3.f32[1])) + (float)(v127 * *((float *)&v82 + 1)))
                          + (float)(v128 * v149);
        unsigned char *v106 = llroundf(v130);
        *(float *)v7.i32 = v51;
        float16x8_t v58 = v110;
        float16x8_t v63 = v109;
        if (*(float *)v84.i32 <= v51)
        {
          v7.i32[0] = v84.i32[0];
          if (*(float *)v84.i32 < v50) {
            *(float *)v7.i32 = v50;
          }
        }
        v106[1] = llroundf(*(float *)v7.i32);
        v106 += 2;
        v107 += 2;
        v105 += 2;
        float v86 = (int8x8_t *)((char *)v86 + 2);
        float v87 = (int8x8_t *)((char *)v87 + 2);
      }
      uint64_t result = (void *)((char *)result + v24);
      v81 += v25;
      float v78 = (int8x8_t *)((char *)v78 + v28);
      v77 += v29;
      ++v12;
      float16x8_t v59 = v148;
      float16x8_t v62 = v146;
      float16x8_t v61 = v147;
      int32x4_t v66 = v144;
      _H9 = v145;
      float16x8_t v69 = v142;
      float16x8_t v67 = v143;
      int16x8_t v72 = v140;
      int16x8_t v71 = v141;
      _D0 = v139;
    }
    while (v12 != v16);
    if (v131 && v31)
    {
      do
      {
        uint64_t result = memcpy(v32, v27, v13);
        v27 += v26;
        v32 += v30;
        --v16;
      }
      while (v16);
    }
    else if (v31)
    {
      do
      {
        if (v13) {
          uint64_t result = memset(v32, 255, v13);
        }
        v32 += v30;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_422vf_GCD);
  return 0;
}

void *vt_Copy_422vf_rgb_422vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v10 = *(void *)((char *)result + 28);
  unint64_t v11 = *(unsigned __int8 *)result;
  unint64_t v12 = v10 * a2 / v11;
  unint64_t v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    uint64_t v14 = 0;
    size_t v15 = *(void *)((char *)result + 20);
    uint64_t v16 = *(void *)((char *)result + 36);
    unint64_t v17 = v12 + *(void *)((char *)result + 44);
    unint64_t v18 = v13 - v12;
    uint64_t v19 = result[14];
    uint64_t v20 = (uint64_t *)result[16];
    unint64_t v21 = result[13] * a2 / v11 + result[15];
    uint64_t v22 = result[19];
    uint64_t v24 = (uint64_t *)result[7];
    uint64_t v23 = (uint64_t *)result[8];
    uint64_t v25 = (uint64_t *)result[17];
    uint64_t v26 = *v23;
    uint64_t v27 = v23[1];
    uint64_t v28 = v23[2];
    uint64_t v29 = v24[2];
    uint64_t v30 = (char *)(v29 + v28 * v17 + v16);
    uint64_t v31 = *v25;
    uint64_t v32 = v25[1];
    uint64_t v33 = v25[2];
    uint64_t v34 = v20[2];
    uint64_t v35 = (char *)(v34 + v33 * v21 + v19);
    *(float *)&unsigned int v36 = (float)*(unsigned int *)(v22 + 136);
    LOWORD(a5) = *(_WORD *)(v22 + 140);
    float v37 = *(float *)&v36 / (float)*(unsigned int *)(v22 + 128);
    float v38 = (float)LODWORD(a5);
    LOWORD(v36) = *(_WORD *)(v22 + 142);
    float v39 = (float)v36;
    float v40 = v37 * *(float *)v22;
    float v41 = v37 * *(float *)(v22 + 8);
    float v42 = v37 * *(float *)(v22 + 16);
    float v43 = v37 * *(float *)(v22 + 20);
    float v44 = *(float *)(v22 + 28);
    float v45 = v37 * v44;
    LOWORD(v44) = *(_WORD *)(v22 + 144);
    float v46 = (float)LODWORD(v44);
    LOWORD(v5) = *(_WORD *)(v22 + 146);
    float v47 = (float)v5;
    LOWORD(v6) = *(_WORD *)(v22 + 148);
    float v48 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v22 + 150);
    float v49 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v22 + 152);
    float v50 = (float)v8;
    float v51 = *(float *)(v22 + 36);
    float v52 = *(float *)(v22 + 40);
    float v53 = *(float *)(v22 + 44);
    float v54 = *(float *)(v22 + 48) * 0.5;
    float v55 = *(float *)(v22 + 52) * 0.5;
    float v56 = *(float *)(v22 + 56) * 0.5;
    float v57 = *(float *)(v22 + 60) * 0.5;
    float v58 = *(float *)(v22 + 64) * 0.5;
    float v59 = *(float *)(v22 + 68);
    float v60 = v59 * 0.5;
    uint64_t v62 = *v20;
    uint64_t v61 = v20[1];
    uint64_t v63 = v61 + v32 * v21 + v19;
    if (!v61) {
      uint64_t v63 = 0;
    }
    uint64_t v64 = (unsigned char *)(v62 + v31 * v21 + v19);
    uint64_t v66 = *v24;
    uint64_t v65 = v24[1];
    uint64_t v67 = v65 + v27 * v17 + v16;
    if (!v65) {
      uint64_t v67 = 0;
    }
    uint64_t result = (void *)(v66 + v26 * v17 + v16);
    do
    {
      if (v15)
      {
        size_t v68 = 0;
        float16x8_t v69 = result;
        float16x8_t v70 = v64;
        do
        {
          LOBYTE(v59) = *(unsigned char *)(v67 + v68);
          *(float *)&unsigned int v71 = (float)LODWORD(v59) - v39;
          LOBYTE(v9) = *(unsigned char *)(v67 + v68 + 1);
          float v72 = (float)LODWORD(v9) - v39;
          float v73 = v41 * v72;
          float v74 = (float)(v43 * v72) + (float)(*(float *)&v71 * v42);
          float v75 = v45 * *(float *)&v71;
          LOBYTE(v71) = *v69;
          float v76 = v40 * (float)((float)v71 - v38);
          float v77 = (float)(v41 * v72) + v76;
          float v78 = v76 + v74;
          float v79 = v75 + v76;
          float v80 = (float)((float)((float)(v52 * v78) + (float)(v51 * v77)) + (float)(v53 * v79)) + v46;
          float v81 = v48;
          if (v80 <= v48)
          {
            float v81 = (float)((float)((float)(v52 * v78) + (float)(v51 * v77)) + (float)(v53 * v79)) + v46;
            if (v80 < v46) {
              float v81 = v46;
            }
          }
          LOBYTE(v80) = v69[1];
          float v82 = v40 * (float)((float)LODWORD(v80) - v38);
          float v83 = v73 + v82;
          float v84 = v74 + v82;
          float v85 = v75 + v82;
          float v86 = (float)((float)((float)(v52 * v84) + (float)(v51 * v83)) + (float)(v53 * (float)(v75 + v82))) + v46;
          unsigned char *v70 = llroundf(v81);
          float v87 = v48;
          if (v86 <= v48)
          {
            float v87 = v86;
            if (v86 < v46) {
              float v87 = v46;
            }
          }
          v70[1] = llroundf(v87);
          float v88 = v77 + v83;
          float v89 = v78 + v84;
          float v90 = v79 + v85;
          float v91 = (float)((float)(v47 + (float)(v88 * v54)) + (float)(v89 * v55)) + (float)(v90 * v56);
          float v92 = v50;
          if (v91 <= v50)
          {
            float v92 = (float)((float)(v47 + (float)(v88 * v54)) + (float)(v89 * v55)) + (float)(v90 * v56);
            if (v91 < v49) {
              float v92 = v49;
            }
          }
          float v59 = (float)((float)(v47 + (float)(v88 * v57)) + (float)(v89 * v58)) + (float)(v90 * v60);
          *(unsigned char *)(v63 + v68) = llroundf(v92);
          float v9 = v50;
          if (v59 <= v50)
          {
            float v9 = v59;
            if (v59 < v49) {
              float v9 = v49;
            }
          }
          *(unsigned char *)(v63 + v68 + 1) = llroundf(v9);
          v68 += 2;
          v69 += 2;
          v70 += 2;
        }
        while (v15 > v68);
      }
      uint64_t result = (void *)((char *)result + v26);
      v67 += v27;
      v64 += v31;
      v63 += v32;
      ++v14;
    }
    while (v14 != v18);
    if (v29 && v34)
    {
      do
      {
        uint64_t result = memcpy(v35, v30, v15);
        v30 += v28;
        v35 += v33;
        --v18;
      }
      while (v18);
    }
    else if (v34)
    {
      do
      {
        if (v15) {
          uint64_t result = memset(v35, 255, v15);
        }
        v35 += v33;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Tone_Mat_TRC_2vuyf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  unint64_t v10 = result[13] * a2 / v6;
  uint64_t v11 = (void *)result[16];
  unint64_t v12 = v10 + result[15];
  uint64_t v13 = (uint64_t *)result[17];
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (char *)(v15 + v14 * v12 + v9);
  unint64_t v17 = v8 / v6;
  if (v15) {
    uint64_t v18 = (_WORD *)(v15 + v14 * v12 + v9);
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17 != v7)
  {
    uint64_t v19 = 0;
    size_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    unint64_t v22 = v7 + *(void *)((char *)result + 44);
    unint64_t v23 = v17 - v7;
    uint64_t v24 = result[19];
    uint64_t v25 = (void *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = (char *)(v30 + v29 * v22 + v21);
    uint64_t v32 = *v13;
    LOWORD(a4) = *(_WORD *)(v24 + 140);
    LOWORD(a5) = *(_WORD *)(v24 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v34 = (float)LODWORD(a5);
    float v165 = v33 * *(float *)v24;
    float v166 = (float)LODWORD(a4);
    float v163 = v33 * *(float *)(v24 + 16);
    float v164 = v33 * *(float *)(v24 + 8);
    float v35 = v33 * *(float *)(v24 + 20);
    *(float *)&unsigned int v36 = v33 * *(float *)(v24 + 28);
    float v161 = *(float *)&v36;
    float v162 = v35;
    LOWORD(v36) = *(_WORD *)(v24 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 150);
    float v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 152);
    float v41 = (float)v36;
    float v42 = *(float *)(v24 + 36);
    float v43 = *(float *)(v24 + 40);
    float v44 = *(float *)(v24 + 44);
    float v159 = *(float *)(v24 + 48) * 0.5;
    float v160 = v38;
    float v157 = *(float *)(v24 + 56) * 0.5;
    float v158 = *(float *)(v24 + 52) * 0.5;
    float v155 = *(float *)(v24 + 64) * 0.5;
    float v156 = *(float *)(v24 + 60) * 0.5;
    float v45 = *(float *)(v24 + 72);
    float v46 = *(float *)(v24 + 68) * 0.5;
    float v154 = v46;
    float v48 = *(float *)(v24 + 76);
    float v47 = *(float *)(v24 + 80);
    float v49 = *(float *)(v24 + 84);
    float v50 = *(float *)(v24 + 88);
    float v51 = *(float *)(v24 + 92);
    float v52 = *(float *)(v24 + 96);
    float v53 = *(float *)(v24 + 100);
    float v54 = *(float *)(v24 + 104);
    uint64_t v55 = v24 + 164;
    uint64_t v56 = v24 + 16548;
    uint64_t v57 = *v11 + v32 * v12;
    uint64_t v58 = v24 + 32932;
    float v59 = (unsigned char *)(v57 + v9);
    uint64_t v60 = v25[1];
    _ZF = v60 == 0;
    uint64_t result = (void *)(v60 + v28 * v22 + v21);
    if (_ZF) {
      uint64_t result = 0;
    }
    uint64_t v62 = (unsigned char *)(*v25 + v27 * v22 + v21);
    float v64 = *(float *)(v24 + 108);
    float v63 = *(float *)(v24 + 112);
    float v65 = *(float *)(v24 + 116);
    float v66 = *(float *)(v24 + 120);
    do
    {
      if (v20)
      {
        size_t v67 = 0;
        size_t v68 = v62;
        float16x8_t v69 = v18;
        float16x8_t v70 = v59;
        do
        {
          LOBYTE(v46) = *((unsigned char *)result + v67 + 1);
          float v71 = (float)LODWORD(v46) - v34;
          unsigned int v72 = LODWORD(v164);
          float v73 = v164 * v71;
          LOBYTE(v72) = *v68;
          float v74 = v165 * (float)((float)v72 - v166);
          float v75 = (float)(v164 * v71) + v74;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = (float)(v164 * v71) + v74;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          LOBYTE(v75) = *((unsigned char *)result + v67);
          float v77 = v34;
          float v78 = (float)LODWORD(v75) - v34;
          float v79 = (float)(v162 * v71) + (float)(v78 * v163);
          float v80 = 8191.0;
          if ((float)(v74 + v79) <= 8191.0)
          {
            float v80 = v74 + v79;
            if ((float)(v74 + v79) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v161 * v78;
          float v82 = (float)(v161 * v78) + v74;
          float v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          LOBYTE(v82) = v68[1];
          float v84 = v165 * (float)((float)LODWORD(v82) - v166);
          float v85 = v73 + v84;
          BOOL v86 = (float)(v73 + v84) <= 8191.0;
          float v87 = 8191.0;
          if (v86)
          {
            float v87 = v85;
            if (v85 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v79 + v84;
          BOOL v86 = (float)(v79 + v84) <= 8191.0;
          float v89 = 8191.0;
          if (v86)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v81 + v84;
          BOOL v86 = (float)(v81 + v84) <= 8191.0;
          float v91 = 8191.0;
          if (v86)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          float v104 = (float)((float)((float)(v63 * _S25) + (float)(v64 * _S24)) + (float)(v65 * _S26))
               + (float)(v66 * fmaxf(_S24, fmaxf(_S25, _S26)));
          float v105 = 8191.0;
          if (v104 <= 8191.0)
          {
            float v105 = v104;
            if (v104 < 0.0) {
              float v105 = 0.0;
            }
          }
          __asm
          {
            FCVT            S28, H1
            FCVT            S30, H27
            FCVT            S1, H2
          }
          _H0 = *(_WORD *)(v56 + 2 * llroundf(v105));
          __asm { FCVT            S0, H0 }
          float v111 = _S24 * _S0;
          float v112 = _S25 * _S0;
          float v113 = _S26 * _S0;
          float v114 = (float)((float)((float)(v63 * _S30) + (float)(v64 * _S28)) + (float)(v65 * _S1))
               + (float)(v66 * fmaxf(_S28, fmaxf(_S30, _S1)));
          float v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            float v115 = v114;
            if (v114 < 0.0) {
              float v115 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v56 + 2 * llroundf(v115));
          __asm { FCVT            S0, H0 }
          float v118 = _S28 * _S0;
          float v119 = _S30 * _S0;
          float v120 = _S1 * _S0;
          _S1 = (float)((float)(v48 * v112) + (float)(v111 * v45)) + (float)(v113 * v47);
          float v122 = (float)((float)(v50 * v112) + (float)(v111 * v49)) + (float)(v113 * v51);
          _S24 = (float)((float)(v53 * v112) + (float)(v111 * v52)) + (float)(v113 * v54);
          float v124 = (float)(v48 * v119) + (float)(v118 * v45);
          float v125 = (float)(v50 * v119) + (float)(v118 * v49);
          _S2 = (float)(v53 * v119) + (float)(v118 * v52);
          _S25 = v124 + (float)(v120 * v47);
          float v128 = v125 + (float)(v120 * v51);
          LOWORD(_S1) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          float v129 = _S2 + (float)(v120 * v54);
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S24) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          LOWORD(_S24) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          unsigned int v135 = llroundf(fminf(fmaxf(v129, 0.0), 8191.0));
          float v136 = (float)(v43 * _S2) + (float)(v42 * _S1);
          _S1 = _S1 + _S24;
          float v138 = _S2 + _S25;
          float v139 = (float)(v160 + (float)(_S1 * v159)) + (float)(v138 * v158);
          float v140 = (float)(v160 + (float)(_S1 * v156)) + (float)(v138 * v155);
          LOWORD(_S1) = *(_WORD *)(v58 + 2 * v135);
          __asm { FCVT            S1, H1 }
          float v142 = v136 + (float)(v44 * _S27);
          float v143 = _S27 + _S1;
          float v144 = v139 + (float)(v143 * v157);
          float v145 = v140 + (float)(v143 * v154);
          if (v144 < v40) {
            float v146 = v40;
          }
          else {
            float v146 = v144;
          }
          float v147 = v142 + v37;
          if (v144 <= v41) {
            float v148 = v146;
          }
          else {
            float v148 = v41;
          }
          char v149 = llroundf(v148);
          if (v147 < v37) {
            float v150 = v37;
          }
          else {
            float v150 = v147;
          }
          unsigned char *v70 = v149;
          if (v147 <= v39) {
            float v151 = v150;
          }
          else {
            float v151 = v39;
          }
          v70[1] = llroundf(v151);
          float v152 = v41;
          if (v145 <= v41)
          {
            float v152 = v145;
            if (v145 < v40) {
              float v152 = v40;
            }
          }
          float v153 = (float)((float)((float)(v43 * _S25) + (float)(v42 * _S24)) + (float)(v44 * _S1)) + v37;
          v70[2] = llroundf(v152);
          float v46 = v39;
          if (v153 <= v39)
          {
            float v46 = v153;
            if (v153 < v37) {
              float v46 = v37;
            }
          }
          v70[3] = llroundf(v46);
          float v34 = v77;
          if (v69) {
            *v69++ = 0;
          }
          v67 += 2;
          v68 += 2;
          v70 += 4;
        }
        while (v20 > v67);
      }
      v62 += v27;
      uint64_t result = (void *)((char *)result + v28);
      v59 += v32;
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      do
      {
        uint64_t result = memcpy(v16, v31, v20);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          uint64_t result = memset(v16, 255, v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Mat_TRC_2vuyf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = v6 + v6 * a2;
  uint64_t v10 = result[14];
  unint64_t v11 = result[13] * a2 / v7;
  uint64_t v12 = (void *)result[16];
  unint64_t v13 = v11 + result[15];
  uint64_t v14 = (uint64_t *)result[17];
  uint64_t v15 = v14[1];
  uint64_t v16 = v12[1];
  uint64_t v17 = (char *)(v16 + v15 * v13 + v10);
  unint64_t v18 = v9 / v7;
  if (v16) {
    uint64_t v19 = (_WORD *)(v16 + v15 * v13 + v10);
  }
  else {
    uint64_t v19 = 0;
  }
  if (v18 != v8)
  {
    uint64_t v20 = 0;
    size_t v21 = *(void *)((char *)result + 20);
    uint64_t v22 = *(void *)((char *)result + 36);
    unint64_t v23 = v8 + *(void *)((char *)result + 44);
    unint64_t v24 = v18 - v8;
    uint64_t v25 = result[19];
    uint64_t v26 = (void *)result[7];
    uint64_t v27 = (uint64_t *)result[8];
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    uint64_t v30 = v27[2];
    uint64_t v31 = v26[2];
    uint64_t v32 = (char *)(v31 + v30 * v23 + v22);
    uint64_t v33 = *v14;
    LOWORD(a5) = *(_WORD *)(v25 + 140);
    LOWORD(a6) = *(_WORD *)(v25 + 142);
    float v34 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    float v35 = (float)LODWORD(a5);
    float v36 = (float)LODWORD(a6);
    float v37 = v34 * *(float *)v25;
    float v141 = v34 * *(float *)(v25 + 16);
    float v142 = v34 * *(float *)(v25 + 8);
    float v139 = v34 * *(float *)(v25 + 28);
    *(float *)&unsigned int v38 = v139;
    float v140 = v34 * *(float *)(v25 + 20);
    LOWORD(v38) = *(_WORD *)(v25 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 150);
    float v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 152);
    float v43 = (float)v38;
    float v44 = *(float *)(v25 + 36);
    float v45 = *(float *)(v25 + 40);
    float v46 = *(float *)(v25 + 44);
    float v137 = *(float *)(v25 + 52) * 0.5;
    float v138 = *(float *)(v25 + 48) * 0.5;
    float v135 = *(float *)(v25 + 60) * 0.5;
    float v136 = *(float *)(v25 + 56) * 0.5;
    float v47 = *(float *)(v25 + 64) * 0.5;
    float v48 = *(float *)(v25 + 68);
    float v49 = *(float *)(v25 + 72);
    float v50 = v48 * 0.5;
    float v52 = *(float *)(v25 + 76);
    float v51 = *(float *)(v25 + 80);
    float v53 = *(float *)(v25 + 84);
    float v54 = *(float *)(v25 + 88);
    float v55 = *(float *)(v25 + 92);
    float v56 = *(float *)(v25 + 96);
    float v57 = *(float *)(v25 + 100);
    float v58 = *(float *)(v25 + 104);
    uint64_t v59 = v25 + 16548;
    uint64_t v60 = v25 + 164;
    uint64_t v61 = (unsigned char *)(*v12 + v33 * v13 + v10);
    uint64_t v62 = v26[1];
    if (v62) {
      uint64_t v63 = v62 + v29 * v23 + v22;
    }
    else {
      uint64_t v63 = 0;
    }
    uint64_t result = (void *)(*v26 + v28 * v23 + v22);
    do
    {
      if (v21)
      {
        size_t v64 = 0;
        float v65 = result;
        float v66 = v19;
        size_t v67 = v61;
        do
        {
          LOBYTE(v48) = *(unsigned char *)(v63 + v64 + 1);
          float v68 = (float)LODWORD(v48) - v36;
          unsigned int v69 = LODWORD(v142);
          float v70 = v142 * v68;
          LOBYTE(v69) = *v65;
          float v71 = v37 * (float)((float)v69 - v35);
          float v72 = (float)(v142 * v68) + v71;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = (float)(v142 * v68) + v71;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          LOBYTE(v72) = *(unsigned char *)(v63 + v64);
          float v74 = (float)LODWORD(v72) - v36;
          float v75 = (float)(v140 * v68) + (float)(v74 * v141);
          float v76 = 8191.0;
          if ((float)(v71 + v75) <= 8191.0)
          {
            float v76 = v71 + v75;
            if ((float)(v71 + v75) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v139 * v74;
          float v78 = v77 + v71;
          BOOL v79 = (float)(v77 + v71) <= 8191.0;
          float v80 = 8191.0;
          if (v79)
          {
            float v80 = v78;
            if (v78 < 0.0) {
              float v80 = 0.0;
            }
          }
          LOBYTE(v78) = v65[1];
          float v81 = v37 * (float)((float)LODWORD(v78) - v35);
          float v82 = v70 + v81;
          float v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v75 + v81;
          BOOL v79 = (float)(v75 + v81) <= 8191.0;
          float v85 = 8191.0;
          if (v79)
          {
            float v85 = v84;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v77 + v81;
          BOOL v79 = (float)(v77 + v81) <= 8191.0;
          float v87 = 8191.0;
          if (v79)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          unsigned int v102 = llroundf(fminf(fmaxf(v87, 0.0), 8191.0));
          _S25 = (float)((float)(v52 * _S5) + (float)(_S4 * v49)) + (float)(_S6 * v51);
          float v104 = (float)((float)(v54 * _S5) + (float)(_S4 * v53)) + (float)(_S6 * v55);
          _S4 = (float)((float)(v57 * _S5) + (float)(_S4 * v56)) + (float)(_S6 * v58);
          float v106 = (float)(v52 * _S24) + (float)(_S7 * v49);
          float v107 = (float)(v54 * _S24) + (float)(_S7 * v53);
          float v108 = (float)(v57 * _S24) + (float)(_S7 * v56);
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * v102);
          __asm { FCVT            S24, H24 }
          _S5 = v106 + (float)(_S24 * v51);
          float v111 = v107 + (float)(_S24 * v55);
          LOWORD(_S25) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          float v112 = v108 + (float)(_S24 * v58);
          __asm { FCVT            S24, H25 }
          LOWORD(_S25) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          LOWORD(_S4) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S26, H4 }
          LOWORD(_S4) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          unsigned int v118 = llroundf(fminf(fmaxf(v112, 0.0), 8191.0));
          float v119 = (float)(v45 * _S25) + (float)(v44 * _S24);
          _S6 = _S24 + _S4;
          float v121 = _S25 + _S5;
          float v122 = (float)(v40 + (float)((float)(_S24 + _S4) * v138)) + (float)(v121 * v137);
          float v123 = (float)(v40 + (float)(_S6 * v135)) + (float)(v121 * v47);
          LOWORD(_S6) = *(_WORD *)(v59 + 2 * v118);
          __asm { FCVT            S6, H6 }
          float v125 = v119 + (float)(v46 * _S26);
          float v126 = v122 + (float)((float)(_S26 + _S6) * v136);
          float v127 = v123 + (float)((float)(_S26 + _S6) * v50);
          if (v126 < v42) {
            float v128 = v42;
          }
          else {
            float v128 = v126;
          }
          BOOL v79 = v126 <= v43;
          float v129 = v125 + v39;
          if (!v79) {
            float v128 = v43;
          }
          char v130 = llroundf(v128);
          if (v129 < v39) {
            float v131 = v39;
          }
          else {
            float v131 = v125 + v39;
          }
          *size_t v67 = v130;
          if (v129 <= v41) {
            float v132 = v131;
          }
          else {
            float v132 = v41;
          }
          v67[1] = llroundf(v132);
          float v133 = v43;
          if (v127 <= v43)
          {
            float v133 = v127;
            if (v127 < v42) {
              float v133 = v42;
            }
          }
          float v48 = (float)((float)((float)(v45 * _S5) + (float)(v44 * _S4)) + (float)(v46 * _S6)) + v39;
          v67[2] = llroundf(v133);
          float v134 = v41;
          if (v48 <= v41)
          {
            float v134 = v48;
            if (v48 < v39) {
              float v134 = v39;
            }
          }
          v67[3] = llroundf(v134);
          if (v66) {
            *v66++ = 0;
          }
          v64 += 2;
          v65 += 2;
          v67 += 4;
        }
        while (v21 > v64);
      }
      uint64_t result = (void *)((char *)result + v28);
      v63 += v29;
      v61 += v33;
      ++v20;
    }
    while (v20 != v24);
    if (v31 && v19)
    {
      do
      {
        uint64_t result = memcpy(v17, v32, v21);
        v32 += v30;
        v17 += v15;
        --v24;
      }
      while (v24);
    }
    else if (v19)
    {
      do
      {
        if (v21) {
          uint64_t result = memset(v17, 255, v21);
        }
        v17 += v15;
        --v24;
      }
      while (v24);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v14 = *(void *)(result + 28);
  unint64_t v15 = *result;
  unint64_t v16 = v14 * a2 / v15;
  uint64_t v17 = *((void *)result + 14);
  uint64_t v18 = (void *)*((void *)result + 16);
  unint64_t v19 = *((void *)result + 13) * a2 / v15 + *((void *)result + 15);
  uint64_t v20 = (uint64_t *)*((void *)result + 17);
  uint64_t v21 = v20[1];
  uint64_t v22 = v18[1];
  uint64_t v23 = (char *)(v22 + v21 * v19 + v17);
  unint64_t v24 = (v14 + v14 * a2) / v15;
  if (v22) {
    uint64_t v25 = (_WORD *)(v22 + v21 * v19 + v17);
  }
  else {
    uint64_t v25 = 0;
  }
  if (v24 != v16)
  {
    uint64_t v26 = 0;
    size_t v27 = *(void *)(result + 20);
    uint64_t v28 = *(void *)(result + 36);
    unint64_t v29 = v16 + *(void *)(result + 44);
    unint64_t v30 = v24 - v16;
    uint64_t v31 = *((void *)result + 19);
    uint64_t v32 = (void *)*((void *)result + 7);
    uint64_t v33 = (uint64_t *)*((void *)result + 8);
    uint64_t v34 = *v33;
    uint64_t v35 = v33[1];
    uint64_t v36 = v33[2];
    uint64_t v37 = v32[2];
    LOWORD(a6) = *(_WORD *)(v31 + 140);
    LOWORD(a7) = *(_WORD *)(v31 + 142);
    float v38 = (float)*(unsigned int *)(v31 + 136) / (float)*(unsigned int *)(v31 + 128);
    LOWORD(v9) = *(_WORD *)(v31 + 144);
    LOWORD(v10) = *(_WORD *)(v31 + 146);
    LOWORD(v11) = *(_WORD *)(v31 + 148);
    LOWORD(v12) = *(_WORD *)(v31 + 150);
    LOWORD(v13) = *(_WORD *)(v31 + 152);
    float v39 = *(float *)(v31 + 36);
    float v40 = *(float *)(v31 + 40);
    float v41 = *(float *)(v31 + 44);
    float v42 = *(float *)(v31 + 68);
    float v43 = (char *)(v37 + v36 * v29 + v28);
    uint64_t v44 = *v20;
    float v45 = (float)LODWORD(a6);
    float v46 = (float)LODWORD(a7);
    float v47 = v38 * *(float *)v31;
    float v48 = v38 * *(float *)(v31 + 8);
    float v49 = v38 * *(float *)(v31 + 16);
    float v50 = v38 * *(float *)(v31 + 20);
    float v51 = v38 * *(float *)(v31 + 28);
    float v52 = (float)v9;
    float v53 = (float)v10;
    float v54 = (float)v11;
    float v55 = (float)v12;
    float v56 = (float)v13;
    float v57 = 0.5;
    float v58 = *(float *)(v31 + 48) * 0.5;
    float v59 = *(float *)(v31 + 52) * 0.5;
    float v60 = *(float *)(v31 + 56) * 0.5;
    float v61 = *(float *)(v31 + 60) * 0.5;
    float v62 = *(float *)(v31 + 64) * 0.5;
    float v63 = v42 * 0.5;
    size_t v64 = (unsigned char *)(*v18 + v44 * v19 + v17);
    uint64_t v65 = v32[1];
    uint64_t result = (unsigned __int8 *)(v65 + v35 * v29 + v28);
    if (v65) {
      uint64_t v66 = v65 + v35 * v29 + v28;
    }
    else {
      uint64_t v66 = 0;
    }
    size_t v67 = (unsigned __int8 *)(*v32 + v34 * v29 + v28);
    do
    {
      if (v27)
      {
        size_t v68 = 0;
        uint64_t result = v67;
        unsigned int v69 = v64;
        float v70 = v25;
        do
        {
          LOBYTE(v42) = *(unsigned char *)(v66 + v68);
          float v71 = (float)LODWORD(v42) - v46;
          LOBYTE(v57) = *(unsigned char *)(v66 + v68 + 1);
          float v72 = (float)LODWORD(v57) - v46;
          float v73 = v48 * v72;
          float v74 = (float)(v50 * v72) + (float)(v71 * v49);
          float v75 = v51 * v71;
          LOBYTE(v7) = *result;
          float v76 = v47 * (float)((float)LODWORD(v7) - v45);
          LOBYTE(v8) = result[1];
          float v77 = v47 * (float)((float)LODWORD(v8) - v45);
          float v78 = v73 + v76;
          float v79 = v76 + v74;
          float v80 = v75 + v76;
          float v81 = v73 + v77;
          float v82 = v74 + v77;
          float v83 = v75 + v77;
          float v84 = (float)((float)((float)(v40 * v79) + (float)(v39 * v78)) + (float)(v41 * v80)) + v52;
          float v42 = (float)((float)((float)(v40 * v82) + (float)(v39 * v81)) + (float)(v41 * v83)) + v52;
          float v85 = v78 + v81;
          float v86 = v79 + v82;
          float v87 = (float)(v53 + (float)(v85 * v58)) + (float)(v86 * v59);
          float v7 = v80 + v83;
          float v8 = v87 + (float)(v7 * v60);
          float v88 = (float)(v53 + (float)(v85 * v61)) + (float)(v86 * v62);
          if (v8 < v55) {
            float v89 = v55;
          }
          else {
            float v89 = v87 + (float)(v7 * v60);
          }
          if (v8 > v56) {
            float v89 = v56;
          }
          float v90 = v88 + (float)(v7 * v63);
          *unsigned int v69 = llroundf(v89);
          if (v84 < v52) {
            float v91 = v52;
          }
          else {
            float v91 = v84;
          }
          if (v84 > v54) {
            float v91 = v54;
          }
          v69[1] = llroundf(v91);
          if (v90 < v55) {
            float v92 = v55;
          }
          else {
            float v92 = v90;
          }
          if (v90 <= v56) {
            float v93 = v92;
          }
          else {
            float v93 = v56;
          }
          v69[2] = llroundf(v93);
          float v57 = v54;
          if (v42 <= v54)
          {
            float v57 = v42;
            if (v42 < v52) {
              float v57 = v52;
            }
          }
          v69[3] = llroundf(v57);
          if (v70) {
            *v70++ = 0;
          }
          v68 += 2;
          result += 2;
          v69 += 4;
        }
        while (v27 > v68);
      }
      v67 += v34;
      v66 += v35;
      v64 += v44;
      ++v26;
    }
    while (v26 != v30);
    if (v37 && v25)
    {
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v23, v43, v27);
        v43 += v36;
        v23 += v21;
        --v30;
      }
      while (v30);
    }
    else if (v25)
    {
      do
      {
        if (v27) {
          uint64_t result = (unsigned __int8 *)memset(v23, 255, v27);
        }
        v23 += v21;
        --v30;
      }
      while (v30);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Tone_Mat_TRC_yuvsf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  unint64_t v10 = result[13] * a2 / v6;
  uint64_t v11 = (void *)result[16];
  unint64_t v12 = v10 + result[15];
  uint64_t v13 = (uint64_t *)result[17];
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (char *)(v15 + v14 * v12 + v9);
  unint64_t v17 = v8 / v6;
  if (v15) {
    uint64_t v18 = (_WORD *)(v15 + v14 * v12 + v9);
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17 != v7)
  {
    uint64_t v19 = 0;
    size_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    unint64_t v22 = v7 + *(void *)((char *)result + 44);
    unint64_t v23 = v17 - v7;
    uint64_t v24 = result[19];
    uint64_t v25 = (void *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = (char *)(v30 + v29 * v22 + v21);
    uint64_t v32 = *v13;
    LOWORD(a4) = *(_WORD *)(v24 + 140);
    LOWORD(a5) = *(_WORD *)(v24 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v34 = (float)LODWORD(a5);
    float v167 = v33 * *(float *)v24;
    float v168 = (float)LODWORD(a4);
    float v165 = v33 * *(float *)(v24 + 16);
    float v166 = v33 * *(float *)(v24 + 8);
    float v35 = v33 * *(float *)(v24 + 20);
    *(float *)&unsigned int v36 = v33 * *(float *)(v24 + 28);
    float v163 = *(float *)&v36;
    float v164 = v35;
    LOWORD(v36) = *(_WORD *)(v24 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 150);
    float v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 152);
    float v41 = (float)v36;
    float v42 = *(float *)(v24 + 36);
    float v43 = *(float *)(v24 + 40);
    float v44 = *(float *)(v24 + 44);
    float v161 = *(float *)(v24 + 48) * 0.5;
    float v162 = v38;
    float v159 = *(float *)(v24 + 56) * 0.5;
    float v160 = *(float *)(v24 + 52) * 0.5;
    float v157 = *(float *)(v24 + 64) * 0.5;
    float v158 = *(float *)(v24 + 60) * 0.5;
    float v45 = *(float *)(v24 + 72);
    float v46 = *(float *)(v24 + 68) * 0.5;
    float v156 = v46;
    float v48 = *(float *)(v24 + 76);
    float v47 = *(float *)(v24 + 80);
    float v49 = *(float *)(v24 + 84);
    float v50 = *(float *)(v24 + 88);
    float v51 = *(float *)(v24 + 92);
    float v52 = *(float *)(v24 + 96);
    float v53 = *(float *)(v24 + 100);
    float v54 = *(float *)(v24 + 104);
    uint64_t v55 = v24 + 164;
    uint64_t v56 = v24 + 16548;
    uint64_t v57 = *v11 + v32 * v12;
    uint64_t v58 = v24 + 32932;
    float v59 = (unsigned char *)(v57 + v9);
    uint64_t v60 = v25[1];
    _ZF = v60 == 0;
    uint64_t result = (void *)(v60 + v28 * v22 + v21);
    if (_ZF) {
      uint64_t result = 0;
    }
    float v62 = (unsigned char *)(*v25 + v27 * v22 + v21);
    float v64 = *(float *)(v24 + 108);
    float v63 = *(float *)(v24 + 112);
    float v65 = *(float *)(v24 + 116);
    float v66 = *(float *)(v24 + 120);
    do
    {
      if (v20)
      {
        size_t v67 = 0;
        size_t v68 = v62;
        unsigned int v69 = v18;
        float v70 = v59;
        do
        {
          LOBYTE(v46) = *((unsigned char *)result + v67 + 1);
          float v71 = (float)LODWORD(v46) - v34;
          unsigned int v72 = LODWORD(v166);
          float v73 = v166 * v71;
          LOBYTE(v72) = *v68;
          float v74 = v167 * (float)((float)v72 - v168);
          float v75 = (float)(v166 * v71) + v74;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = (float)(v166 * v71) + v74;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          LOBYTE(v75) = *((unsigned char *)result + v67);
          float v77 = v34;
          float v78 = (float)LODWORD(v75) - v34;
          float v79 = (float)(v164 * v71) + (float)(v78 * v165);
          float v80 = 8191.0;
          if ((float)(v74 + v79) <= 8191.0)
          {
            float v80 = v74 + v79;
            if ((float)(v74 + v79) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v163 * v78;
          float v82 = (float)(v163 * v78) + v74;
          float v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          LOBYTE(v82) = v68[1];
          float v84 = v167 * (float)((float)LODWORD(v82) - v168);
          float v85 = v73 + v84;
          BOOL v86 = (float)(v73 + v84) <= 8191.0;
          float v87 = 8191.0;
          if (v86)
          {
            float v87 = v85;
            if (v85 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v79 + v84;
          BOOL v86 = (float)(v79 + v84) <= 8191.0;
          float v89 = 8191.0;
          if (v86)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v81 + v84;
          BOOL v86 = (float)(v81 + v84) <= 8191.0;
          float v91 = 8191.0;
          if (v86)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          float v104 = (float)((float)((float)(v63 * _S25) + (float)(v64 * _S24)) + (float)(v65 * _S26))
               + (float)(v66 * fmaxf(_S24, fmaxf(_S25, _S26)));
          float v105 = 8191.0;
          if (v104 <= 8191.0)
          {
            float v105 = v104;
            if (v104 < 0.0) {
              float v105 = 0.0;
            }
          }
          __asm
          {
            FCVT            S28, H1
            FCVT            S30, H27
            FCVT            S1, H2
          }
          _H0 = *(_WORD *)(v56 + 2 * llroundf(v105));
          __asm { FCVT            S0, H0 }
          float v111 = _S24 * _S0;
          float v112 = _S25 * _S0;
          float v113 = _S26 * _S0;
          float v114 = (float)((float)((float)(v63 * _S30) + (float)(v64 * _S28)) + (float)(v65 * _S1))
               + (float)(v66 * fmaxf(_S28, fmaxf(_S30, _S1)));
          float v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            float v115 = v114;
            if (v114 < 0.0) {
              float v115 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v56 + 2 * llroundf(v115));
          __asm { FCVT            S0, H0 }
          float v118 = _S28 * _S0;
          float v119 = _S30 * _S0;
          float v120 = _S1 * _S0;
          _S1 = (float)((float)(v48 * v112) + (float)(v111 * v45)) + (float)(v113 * v47);
          float v122 = (float)((float)(v50 * v112) + (float)(v111 * v49)) + (float)(v113 * v51);
          _S24 = (float)((float)(v53 * v112) + (float)(v111 * v52)) + (float)(v113 * v54);
          float v124 = (float)(v48 * v119) + (float)(v118 * v45);
          float v125 = (float)(v50 * v119) + (float)(v118 * v49);
          _S2 = (float)(v53 * v119) + (float)(v118 * v52);
          _S25 = v124 + (float)(v120 * v47);
          float v128 = v125 + (float)(v120 * v51);
          float v129 = _S2 + (float)(v120 * v54);
          LOWORD(_S1) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          unsigned int v132 = llroundf(fminf(fmaxf(_S24, 0.0), 8191.0));
          LOWORD(_S24) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          unsigned int v135 = llroundf(fminf(fmaxf(v129, 0.0), 8191.0));
          float v136 = (float)(v43 * _S2) + (float)(v42 * _S1);
          float v137 = (float)(v43 * _S25) + (float)(v42 * _S24);
          float v138 = _S1 + _S24;
          LOWORD(_S24) = *(_WORD *)(v58 + 2 * v132);
          float v139 = _S2 + _S25;
          LOWORD(_S25) = *(_WORD *)(v58 + 2 * v135);
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H25
          }
          float v142 = (float)(v136 + (float)(v44 * _S24)) + v37;
          float v143 = v137 + (float)(v44 * _S25);
          float v144 = _S24 + _S25;
          float v145 = (float)(v162 + (float)(v138 * v161)) + (float)(v139 * v160);
          float v146 = (float)(v162 + (float)(v138 * v158)) + (float)(v139 * v157);
          if (v142 < v37) {
            float v147 = v37;
          }
          else {
            float v147 = v142;
          }
          BOOL v86 = v142 <= v39;
          float v148 = v145 + (float)(v144 * v159);
          if (!v86) {
            float v147 = v39;
          }
          char v149 = llroundf(v147);
          if (v148 < v40) {
            float v150 = v40;
          }
          else {
            float v150 = v145 + (float)(v144 * v159);
          }
          if (v148 <= v41) {
            float v151 = v150;
          }
          else {
            float v151 = v41;
          }
          char v152 = llroundf(v151);
          float v153 = v146 + (float)(v144 * v156);
          if ((float)(v143 + v37) < v37) {
            float v154 = v37;
          }
          else {
            float v154 = v143 + v37;
          }
          unsigned char *v70 = v149;
          v70[1] = v152;
          if ((float)(v143 + v37) <= v39) {
            float v155 = v154;
          }
          else {
            float v155 = v39;
          }
          v70[2] = llroundf(v155);
          float v46 = v41;
          if (v153 <= v41)
          {
            float v46 = v153;
            if (v153 < v40) {
              float v46 = v40;
            }
          }
          v70[3] = llroundf(v46);
          float v34 = v77;
          if (v69) {
            *v69++ = 0;
          }
          v67 += 2;
          v68 += 2;
          v70 += 4;
        }
        while (v20 > v67);
      }
      v62 += v27;
      uint64_t result = (void *)((char *)result + v28);
      v59 += v32;
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      do
      {
        uint64_t result = memcpy(v16, v31, v20);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          uint64_t result = memset(v16, 255, v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Mat_TRC_yuvsf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = v6 + v6 * a2;
  uint64_t v10 = result[14];
  unint64_t v11 = result[13] * a2 / v7;
  uint64_t v12 = (void *)result[16];
  unint64_t v13 = v11 + result[15];
  uint64_t v14 = (uint64_t *)result[17];
  uint64_t v15 = v14[1];
  uint64_t v16 = v12[1];
  uint64_t v17 = (char *)(v16 + v15 * v13 + v10);
  unint64_t v18 = v9 / v7;
  if (v16) {
    uint64_t v19 = (_WORD *)(v16 + v15 * v13 + v10);
  }
  else {
    uint64_t v19 = 0;
  }
  if (v18 != v8)
  {
    uint64_t v20 = 0;
    size_t v21 = *(void *)((char *)result + 20);
    uint64_t v22 = *(void *)((char *)result + 36);
    unint64_t v23 = v8 + *(void *)((char *)result + 44);
    unint64_t v24 = v18 - v8;
    uint64_t v25 = result[19];
    uint64_t v26 = (void *)result[7];
    uint64_t v27 = (uint64_t *)result[8];
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    uint64_t v30 = v27[2];
    uint64_t v31 = v26[2];
    uint64_t v32 = (char *)(v31 + v30 * v23 + v22);
    uint64_t v33 = *v14;
    LOWORD(a5) = *(_WORD *)(v25 + 140);
    LOWORD(a6) = *(_WORD *)(v25 + 142);
    float v34 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    float v35 = (float)LODWORD(a5);
    float v36 = (float)LODWORD(a6);
    float v37 = v34 * *(float *)v25;
    float v144 = v34 * *(float *)(v25 + 16);
    float v145 = v34 * *(float *)(v25 + 8);
    float v142 = v34 * *(float *)(v25 + 28);
    *(float *)&unsigned int v38 = v142;
    float v143 = v34 * *(float *)(v25 + 20);
    LOWORD(v38) = *(_WORD *)(v25 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 150);
    float v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 152);
    float v43 = (float)v38;
    float v44 = *(float *)(v25 + 36);
    float v45 = *(float *)(v25 + 40);
    float v46 = *(float *)(v25 + 44);
    float v140 = *(float *)(v25 + 52) * 0.5;
    float v141 = *(float *)(v25 + 48) * 0.5;
    float v138 = *(float *)(v25 + 60) * 0.5;
    float v139 = *(float *)(v25 + 56) * 0.5;
    float v47 = *(float *)(v25 + 64) * 0.5;
    float v48 = *(float *)(v25 + 68);
    float v49 = *(float *)(v25 + 72);
    float v50 = v48 * 0.5;
    float v52 = *(float *)(v25 + 76);
    float v51 = *(float *)(v25 + 80);
    float v53 = *(float *)(v25 + 84);
    float v54 = *(float *)(v25 + 88);
    float v55 = *(float *)(v25 + 92);
    float v56 = *(float *)(v25 + 96);
    float v57 = *(float *)(v25 + 100);
    float v58 = *(float *)(v25 + 104);
    uint64_t v59 = v25 + 16548;
    uint64_t v60 = v25 + 164;
    float v61 = (unsigned char *)(*v12 + v33 * v13 + v10);
    uint64_t v62 = v26[1];
    if (v62) {
      uint64_t v63 = v62 + v29 * v23 + v22;
    }
    else {
      uint64_t v63 = 0;
    }
    uint64_t result = (void *)(*v26 + v28 * v23 + v22);
    do
    {
      if (v21)
      {
        size_t v64 = 0;
        float v65 = result;
        float v66 = v19;
        size_t v67 = v61;
        do
        {
          LOBYTE(v48) = *(unsigned char *)(v63 + v64 + 1);
          float v68 = (float)LODWORD(v48) - v36;
          unsigned int v69 = LODWORD(v145);
          float v70 = v145 * v68;
          LOBYTE(v69) = *v65;
          float v71 = v37 * (float)((float)v69 - v35);
          float v72 = (float)(v145 * v68) + v71;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = (float)(v145 * v68) + v71;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          LOBYTE(v72) = *(unsigned char *)(v63 + v64);
          float v74 = (float)LODWORD(v72) - v36;
          float v75 = (float)(v143 * v68) + (float)(v74 * v144);
          float v76 = 8191.0;
          if ((float)(v71 + v75) <= 8191.0)
          {
            float v76 = v71 + v75;
            if ((float)(v71 + v75) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v142 * v74;
          float v78 = v77 + v71;
          BOOL v79 = (float)(v77 + v71) <= 8191.0;
          float v80 = 8191.0;
          if (v79)
          {
            float v80 = v78;
            if (v78 < 0.0) {
              float v80 = 0.0;
            }
          }
          LOBYTE(v78) = v65[1];
          float v81 = v37 * (float)((float)LODWORD(v78) - v35);
          float v82 = v70 + v81;
          float v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v75 + v81;
          BOOL v79 = (float)(v75 + v81) <= 8191.0;
          float v85 = 8191.0;
          if (v79)
          {
            float v85 = v84;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v77 + v81;
          BOOL v79 = (float)(v77 + v81) <= 8191.0;
          float v87 = 8191.0;
          if (v79)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          unsigned int v102 = llroundf(fminf(fmaxf(v87, 0.0), 8191.0));
          _S25 = (float)((float)(v52 * _S5) + (float)(_S4 * v49)) + (float)(_S6 * v51);
          float v104 = (float)((float)(v54 * _S5) + (float)(_S4 * v53)) + (float)(_S6 * v55);
          _S4 = (float)((float)(v57 * _S5) + (float)(_S4 * v56)) + (float)(_S6 * v58);
          float v106 = (float)(v52 * _S24) + (float)(_S7 * v49);
          float v107 = (float)(v54 * _S24) + (float)(_S7 * v53);
          float v108 = (float)(v57 * _S24) + (float)(_S7 * v56);
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * v102);
          __asm { FCVT            S24, H24 }
          _S5 = v106 + (float)(_S24 * v51);
          float v111 = v107 + (float)(_S24 * v55);
          float v112 = v108 + (float)(_S24 * v58);
          LOWORD(_S24) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          unsigned int v115 = llroundf(fminf(fmaxf(_S4, 0.0), 8191.0));
          LOWORD(_S4) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          unsigned int v118 = llroundf(fminf(fmaxf(v112, 0.0), 8191.0));
          float v119 = (float)(v45 * _S25) + (float)(v44 * _S24);
          float v120 = (float)(v45 * _S5) + (float)(v44 * _S4);
          float v121 = _S24 + _S4;
          LOWORD(_S24) = *(_WORD *)(v59 + 2 * v115);
          float v122 = _S25 + _S5;
          LOWORD(_S25) = *(_WORD *)(v59 + 2 * v118);
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H25
          }
          float v125 = (float)(v119 + (float)(v46 * _S24)) + v39;
          float v126 = v120 + (float)(v46 * _S25);
          float v127 = _S24 + _S25;
          float v128 = (float)(v40 + (float)(v121 * v141)) + (float)(v122 * v140);
          float v129 = (float)(v40 + (float)(v121 * v138)) + (float)(v122 * v47);
          if (v125 < v39) {
            float v130 = v39;
          }
          else {
            float v130 = v125;
          }
          BOOL v79 = v125 <= v41;
          float v131 = v128 + (float)(v127 * v139);
          if (!v79) {
            float v130 = v41;
          }
          char v132 = llroundf(v130);
          if (v131 < v42) {
            float v133 = v42;
          }
          else {
            float v133 = v128 + (float)(v127 * v139);
          }
          if (v131 > v43) {
            float v133 = v43;
          }
          char v134 = llroundf(v133);
          float v48 = v129 + (float)(v127 * v50);
          if ((float)(v126 + v39) < v39) {
            float v135 = v39;
          }
          else {
            float v135 = v126 + v39;
          }
          *size_t v67 = v132;
          v67[1] = v134;
          if ((float)(v126 + v39) <= v41) {
            float v136 = v135;
          }
          else {
            float v136 = v41;
          }
          v67[2] = llroundf(v136);
          float v137 = v43;
          if (v48 <= v43)
          {
            float v137 = v48;
            if (v48 < v42) {
              float v137 = v42;
            }
          }
          v67[3] = llroundf(v137);
          if (v66) {
            *v66++ = 0;
          }
          v64 += 2;
          v65 += 2;
          v67 += 4;
        }
        while (v21 > v64);
      }
      uint64_t result = (void *)((char *)result + v28);
      v63 += v29;
      v61 += v33;
      ++v20;
    }
    while (v20 != v24);
    if (v31 && v19)
    {
      do
      {
        uint64_t result = memcpy(v17, v32, v21);
        v32 += v30;
        v17 += v15;
        --v24;
      }
      while (v24);
    }
    else if (v19)
    {
      do
      {
        if (v21) {
          uint64_t result = memset(v17, 255, v21);
        }
        v17 += v15;
        --v24;
      }
      while (v24);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v14 = *(void *)(result + 28);
  unint64_t v15 = *result;
  unint64_t v16 = v14 * a2 / v15;
  uint64_t v17 = *((void *)result + 14);
  uint64_t v18 = (void *)*((void *)result + 16);
  unint64_t v19 = *((void *)result + 13) * a2 / v15 + *((void *)result + 15);
  uint64_t v20 = (uint64_t *)*((void *)result + 17);
  uint64_t v21 = v20[1];
  uint64_t v22 = v18[1];
  uint64_t v23 = (char *)(v22 + v21 * v19 + v17);
  unint64_t v24 = (v14 + v14 * a2) / v15;
  if (v22) {
    uint64_t v25 = (_WORD *)(v22 + v21 * v19 + v17);
  }
  else {
    uint64_t v25 = 0;
  }
  if (v24 != v16)
  {
    uint64_t v26 = 0;
    size_t v27 = *(void *)(result + 20);
    uint64_t v28 = *(void *)(result + 36);
    unint64_t v29 = v16 + *(void *)(result + 44);
    unint64_t v30 = v24 - v16;
    uint64_t v31 = *((void *)result + 19);
    uint64_t v32 = (void *)*((void *)result + 7);
    uint64_t v33 = (uint64_t *)*((void *)result + 8);
    uint64_t v34 = *v33;
    uint64_t v35 = v33[1];
    uint64_t v36 = v33[2];
    uint64_t v37 = v32[2];
    LOWORD(a6) = *(_WORD *)(v31 + 140);
    LOWORD(a7) = *(_WORD *)(v31 + 142);
    float v38 = (float)*(unsigned int *)(v31 + 136) / (float)*(unsigned int *)(v31 + 128);
    LOWORD(v9) = *(_WORD *)(v31 + 144);
    LOWORD(v10) = *(_WORD *)(v31 + 146);
    LOWORD(v11) = *(_WORD *)(v31 + 148);
    LOWORD(v12) = *(_WORD *)(v31 + 150);
    LOWORD(v13) = *(_WORD *)(v31 + 152);
    float v39 = *(float *)(v31 + 36);
    float v40 = *(float *)(v31 + 40);
    float v41 = *(float *)(v31 + 44);
    float v42 = *(float *)(v31 + 68);
    float v43 = (char *)(v37 + v36 * v29 + v28);
    uint64_t v44 = *v20;
    float v45 = (float)LODWORD(a6);
    float v46 = (float)LODWORD(a7);
    float v47 = v38 * *(float *)v31;
    float v48 = v38 * *(float *)(v31 + 8);
    float v49 = v38 * *(float *)(v31 + 16);
    float v50 = v38 * *(float *)(v31 + 20);
    float v51 = v38 * *(float *)(v31 + 28);
    float v52 = (float)v9;
    float v53 = (float)v10;
    float v54 = (float)v11;
    float v55 = (float)v12;
    float v56 = (float)v13;
    float v57 = 0.5;
    float v58 = *(float *)(v31 + 48) * 0.5;
    float v59 = *(float *)(v31 + 52) * 0.5;
    float v60 = *(float *)(v31 + 56) * 0.5;
    float v61 = *(float *)(v31 + 60) * 0.5;
    float v62 = *(float *)(v31 + 64) * 0.5;
    float v63 = v42 * 0.5;
    size_t v64 = (unsigned char *)(*v18 + v44 * v19 + v17);
    uint64_t v65 = v32[1];
    uint64_t result = (unsigned __int8 *)(v65 + v35 * v29 + v28);
    if (v65) {
      uint64_t v66 = v65 + v35 * v29 + v28;
    }
    else {
      uint64_t v66 = 0;
    }
    size_t v67 = (unsigned __int8 *)(*v32 + v34 * v29 + v28);
    do
    {
      if (v27)
      {
        size_t v68 = 0;
        uint64_t result = v67;
        unsigned int v69 = v64;
        float v70 = v25;
        do
        {
          LOBYTE(v42) = *(unsigned char *)(v66 + v68);
          float v71 = (float)LODWORD(v42) - v46;
          LOBYTE(v57) = *(unsigned char *)(v66 + v68 + 1);
          float v72 = (float)LODWORD(v57) - v46;
          float v73 = v48 * v72;
          float v74 = (float)(v50 * v72) + (float)(v71 * v49);
          float v75 = v51 * v71;
          LOBYTE(v7) = *result;
          float v76 = v47 * (float)((float)LODWORD(v7) - v45);
          LOBYTE(v8) = result[1];
          float v77 = v47 * (float)((float)LODWORD(v8) - v45);
          float v78 = v73 + v76;
          float v79 = v76 + v74;
          float v80 = v75 + v76;
          float v81 = v73 + v77;
          float v82 = v74 + v77;
          float v83 = v75 + v77;
          float v84 = (float)((float)((float)(v40 * v79) + (float)(v39 * v78)) + (float)(v41 * (float)(v75 + v76))) + v52;
          float v7 = (float)((float)((float)(v40 * v82) + (float)(v39 * v81)) + (float)(v41 * v83)) + v52;
          float v85 = v78 + v81;
          float v86 = v79 + v82;
          float v87 = (float)(v53 + (float)((float)(v78 + v81) * v58)) + (float)(v86 * v59);
          float v88 = v80 + v83;
          float v89 = v87 + (float)((float)(v80 + v83) * v60);
          if (v84 < v52) {
            float v90 = v52;
          }
          else {
            float v90 = v84;
          }
          if (v84 > v54) {
            float v90 = v54;
          }
          *unsigned int v69 = llroundf(v90);
          if (v89 < v55) {
            float v91 = v55;
          }
          else {
            float v91 = v89;
          }
          if (v89 <= v56) {
            float v92 = v91;
          }
          else {
            float v92 = v56;
          }
          v69[1] = llroundf(v92);
          float v8 = v54;
          if (v7 <= v54)
          {
            float v8 = v7;
            if (v7 < v52) {
              float v8 = v52;
            }
          }
          float v42 = (float)((float)(v53 + (float)(v85 * v61)) + (float)(v86 * v62)) + (float)(v88 * v63);
          v69[2] = llroundf(v8);
          float v57 = v56;
          if (v42 <= v56)
          {
            float v57 = v42;
            if (v42 < v55) {
              float v57 = v55;
            }
          }
          v69[3] = llroundf(v57);
          if (v70) {
            *v70++ = 0;
          }
          v68 += 2;
          result += 2;
          v69 += 4;
        }
        while (v27 > v68);
      }
      v67 += v34;
      v66 += v35;
      v64 += v44;
      ++v26;
    }
    while (v26 != v30);
    if (v37 && v25)
    {
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v23, v43, v27);
        v43 += v36;
        v23 += v21;
        --v30;
      }
      while (v30);
    }
    else if (v25)
    {
      do
      {
        if (v27) {
          uint64_t result = (unsigned __int8 *)memset(v23, 255, v27);
        }
        v23 += v21;
        --v30;
      }
      while (v30);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_422vf_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD(float32x2_t *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, __n128 _Q5, __n128 _Q6, int16x4_t a10)
{
  uint64_t v15 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v16 = result->u8[0];
  unint64_t v17 = v15 * a2 / v16;
  unint64_t v18 = (v15 + v15 * a2) / v16;
  if (v18 != v17)
  {
    uint64_t v19 = 0;
    unint64_t v20 = *(unint64_t *)((char *)&result[2] + 4);
    uint64_t v21 = *(uint64_t *)((char *)&result[4] + 4);
    unint64_t v22 = v17 + *(void *)((char *)&result[5] + 4);
    unint64_t v23 = v18 - v17;
    float32x2_t v24 = result[14];
    uint64_t v25 = (void *)result[16];
    unint64_t v26 = *(void *)&result[13] * a2 / v16 + *(void *)&result[15];
    size_t v27 = (float32x2_t *)result[19];
    uint64_t v28 = (uint64_t *)result[7];
    uint64_t v29 = (uint64_t *)result[8];
    uint64_t v30 = (uint64_t *)result[17];
    uint64_t v31 = *v29;
    uint64_t v32 = v29[1];
    uint64_t v269 = v29[2];
    uint64_t v273 = v28[2];
    uint64_t v33 = (unsigned __int8 *)(v273 + v269 * v22 + v21);
    uint64_t v34 = *v30;
    uint64_t v35 = v30[1];
    uint64_t v270 = v30[2];
    uint64_t v272 = v25[2];
    uint64_t v36 = (char *)(v272 + v270 * v26 + 2 * *(void *)&v24);
    unsigned int v37 = v27[17].u16[2];
    unsigned int v38 = v27[17].u16[3];
    unsigned int v39 = v27[18].u16[0];
    float v40 = (float)v37;
    *(short float *)v14.i16 = (short float)v37;
    unsigned int v41 = v27[18].u16[1];
    LODWORD(a4) = v27[5].i32[1];
    LODWORD(v30) = v27[18].u16[2];
    float v325 = (float)v38;
    float v326 = *(float *)&a4;
    short float v45 = (short float)v38;
    unsigned int v46 = v27[18].u16[3];
    float v47 = (float)v39;
    *(short float *)&a4 = (short float)v39;
    unsigned int v48 = v27[19].u16[0];
    _S4 = v27[4].i32[1];
    _S14 = v27[5].i32[0];
    float v313 = v27[9].f32[1];
    float v314 = v27[9].f32[0];
    *(float *)&a5 = (float)v41;
    float v324 = (float)v41;
    *(short float *)&a5 = (short float)v41;
    float v51 = (char *)&v27[2068] + 4;
    float v52 = 8191.0 / (float)v27[16].u32[0];
    float v53 = (float)v30;
    _S19 = v52 * v27->f32[0];
    _Q5.n128_f32[0] = (float)v46;
    float v317 = (float)v46;
    float v55 = (float)v48;
    *(short float *)_Q5.n128_u16 = (short float)v30;
    uint64_t result = (float32x2_t *)((char *)v27 + 164);
    *(short float *)_Q6.n128_u16 = (short float)v46;
    unsigned int v56 = v27[16].u8[4];
    if (v56 >= 0x11) {
      unsigned __int8 v57 = 0;
    }
    else {
      unsigned __int8 v57 = 16 - v56;
    }
    uint64_t v58 = v25[1];
    _ZF = v58 == 0;
    uint64_t v60 = v58 + v35 * v26;
    uint64_t v61 = *v25 + v34 * v26;
    float v62 = (char *)&v27[4116] + 4;
    v42.i32[1] = v27[1].i32[0];
    v42.i32[0] = v27[3].i32[1];
    *(float32x2_t *)v12.f32 = vmul_n_f32(v42, v52);
    *(float32x2_t *)v10.f32 = vmul_n_f32(v27[2], v52);
    float16x8_t v63 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    short float v64 = -v45;
    float16x8_t v311 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v12), 0);
    float16x8_t v309 = vmulq_n_f16(v311, v64);
    float16x8_t v310 = v63;
    float16x8_t v308 = vmulq_n_f16(v63, v64);
    v13.i32[1] = v27[7].i32[1];
    v13.i32[0] = v27[6].i32[0];
    *(float32x2_t *)v63.i8 = vmul_f32(*(float32x2_t *)v13.f32, (float32x2_t)0x3F0000003F000000);
    uint64_t v312 = v63.i64[0];
    float16x8_t v295 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)v63), 0);
    v43.i32[1] = v27[8].i32[0];
    v43.i32[0] = v27[6].i32[1];
    *(float32x2_t *)v13.f32 = vmul_f32(v43, (float32x2_t)0x3F0000003F000000);
    float16x8_t v65 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v13), 0);
    v44.i32[1] = v27[8].i32[1];
    v44.i32[0] = v27[7].i32[0];
    *(float32x2_t *)v11.f32 = vmul_f32(v44, (float32x2_t)0x3F0000003F000000);
    float16x8_t v66 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v11), 0);
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a5, 0);
    int16x8_t v69 = vdupq_lane_s16((int16x4_t)_Q5.n128_u64[0], 0);
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16((int16x4_t)_Q6.n128_u64[0], 0);
    *(short float *)a10.i16 = (short float)v48;
    int16x8_t v71 = vdupq_lane_s16(a10, 0);
    float16x8_t v72 = (float16x8_t)vdupq_lane_s16(v14, 0);
    float v73 = (int16x8_t *)(v60 + 2 * *(void *)&v24);
    if (_ZF) {
      float v74 = 0;
    }
    else {
      float v74 = v73;
    }
    float v75 = (uint16x8_t *)(v61 + 2 * *(void *)&v24);
    uint64_t v76 = *v28;
    uint64_t v77 = v28[1];
    _ZF = v77 == 0;
    float v78 = (unsigned char *)(v77 + v32 * v22 + v21);
    if (_ZF) {
      float v79 = 0;
    }
    else {
      float v79 = v78;
    }
    float v80 = (int8x8_t *)(v76 + v31 * v22 + v21);
    unsigned __int8 v81 = v57;
    _Q5.n128_u32[0] = v27[14].u32[1];
    __asm { FCVT            H9, S19 }
    short float v278 = _H9;
    float v323 = v27[4].f32[1];
    __asm { FCVT            H4, S4 }
    short float v271 = _H4;
    float v322 = v27[5].f32[0];
    __asm { FCVT            H14, S14 }
    short float v303 = _H14;
    _S9 = v27[5].i32[1];
    __asm { FCVT            H14, S9 }
    short float v302 = _H14;
    float v320 = v27[14].f32[0];
    float v321 = v27[13].f32[1];
    __asm
    {
      FCVT            H2, S2
      FCVT            H3, S3
    }
    float v318 = v27[15].f32[0];
    float v319 = _Q5.n128_f32[0];
    __asm
    {
      FCVT            H9, S5
      FCVT            H5, S6
    }
    _Q6.n128_u32[0] = v27[9].u32[1];
    _S4 = v27[9].i32[0];
    __asm
    {
      FCVT            H4, S4
      FCVT            H6, S6
    }
    float32_t v285 = v27[10].f32[1];
    float32_t v286 = v27[10].f32[0];
    __asm { FCVT            H14, S20 }
    short float v298 = _H14;
    __asm { FCVT            H14, S28 }
    short float v297 = _H14;
    float v307 = v27[11].f32[0];
    __asm { FCVT            H14, S26 }
    short float v277 = _H14;
    float v305 = v27[11].f32[1];
    __asm { FCVT            H14, S24 }
    short float v276 = _H14;
    float32_t v284 = v27[12].f32[0];
    __asm { FCVT            H14, S30 }
    short float v275 = _H14;
    float v306 = v27[12].f32[1];
    __asm { FCVT            H14, S22 }
    short float v274 = _H14;
    float v304 = v27[13].f32[0];
    __asm { FCVT            H14, S27 }
    uint16x8_t v101 = (uint16x8_t)vdupq_n_s16(v57);
    uint64_t v102 = v13.i64[0];
    float32_t v287 = v11.f32[0];
    uint16x8_t v288 = v101;
    float v296 = v11.f32[1];
    v103.i64[0] = 0x9000900090009000;
    v103.i64[1] = 0x9000900090009000;
    float16x8_t v293 = v66;
    float16x8_t v294 = v67;
    int16x8_t v291 = v69;
    float16x8_t v292 = v68;
    int16x8_t v289 = v71;
    float16x8_t v290 = v70;
    short float v300 = _H3;
    short float v301 = _H2;
    short float v299 = *(short float *)&_S4;
    uint64_t v282 = *v29;
    unint64_t v283 = v23;
    uint64_t v280 = v34;
    uint64_t v281 = v29[1];
    uint64_t v279 = v35;
    __n128 v316 = _Q5;
    __n128 v315 = _Q6;
    do
    {
      if ((int)v20 < 8)
      {
        unint64_t v180 = 0;
        float v107 = v74;
        float v106 = v75;
        float v179 = v79;
        float v105 = v80;
        float v181 = v287;
        float v182 = v285;
        float v183 = v286;
        float v184 = v284;
      }
      else
      {
        uint64_t v104 = 0;
        float v105 = v80;
        float v106 = v75;
        float v107 = v74;
        float16x8_t v108 = (float16x8_t)v69;
        float16x8_t v109 = (float16x8_t)v71;
        do
        {
          int8x8_t v110 = *(int8x8_t *)&v79[v104];
          *(int8x8_t *)v111.i8 = vzip1_s8(v110, 0);
          v111.u64[1] = (unint64_t)vzip2_s8(v110, 0);
          float16x8_t v112 = vcvtq_f16_u16(v111);
          int8x16_t v113 = (int8x16_t)vmlaq_f16(v309, v311, v112);
          int16x8_t v114 = (int16x8_t)vmlaq_f16(v308, v310, v112);
          v112.i64[0] = vextq_s8(v113, v113, 8uLL).u64[0];
          *(int16x4_t *)v115.i8 = vuzp1_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v112.i8);
          *(int16x4_t *)v112.i8 = vuzp2_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v112.i8);
          v112.i64[1] = v112.i64[0];
          v113.i64[0] = vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).u64[0];
          v115.i64[1] = v112.i64[0];
          *(float16x4_t *)v114.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v113.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v113.i8));
          int8x8_t v116 = *v105++;
          v114.i64[1] = v112.i64[0];
          *(int8x8_t *)v117.i8 = vzip1_s8(v116, 0);
          v117.u64[1] = (unint64_t)vzip2_s8(v116, 0);
          float16x8_t v118 = (float16x8_t)vzip1q_s16(v115, v115);
          float16x8_t v119 = vsubq_f16(vcvtq_f16_u16(v117), v72);
          float16x8_t v120 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v114, v114), v119, v278);
          float16x8_t v121 = vmlaq_n_f16(v118, v119, v278);
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v112, (int16x8_t)v112), v119, v278), (float16x8_t)0), v103));
          uint32x4_t v123 = vmovl_high_u16(v122);
          *(void *)&long long v124 = v123.u32[2];
          *((void *)&v124 + 1) = v123.u32[3];
          long long v125 = v124;
          *(void *)&long long v124 = v123.u32[0];
          *((void *)&v124 + 1) = v123.u32[1];
          long long v126 = v124;
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v122.i8);
          *((void *)&v124 + 1) = v127.u32[3];
          uint64_t v128 = v127.u32[2];
          v129.i16[0] = result->i16[v127.u32[0]];
          float v130 = (__int16 *)result + v127.u32[1];
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v103));
          uint32x4_t v132 = vmovl_high_u16(v131);
          uint32x4_t v133 = vmovl_u16(*(uint16x4_t *)v131.i8);
          v134.i16[0] = result->i16[v133.u32[0]];
          v129.i16[1] = *v130;
          float v135 = (__int16 *)result + v133.u32[3];
          float v136 = (__int16 *)result + v132.u32[0];
          v129.i16[2] = result->i16[v128];
          float v137 = (__int16 *)result + v132.u32[1];
          v134.i16[1] = result->i16[v133.u32[1]];
          v129.i16[3] = result->i16[*((void *)&v124 + 1)];
          float v138 = (__int16 *)result + v132.u32[2];
          float v139 = (__int16 *)result + v132.u32[3];
          v134.i16[2] = result->i16[v133.u32[2]];
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v103));
          float16x8_t v141 = (float16x8_t)vmovl_high_u16(v140);
          *(void *)&long long v124 = v141.u32[2];
          *((void *)&v124 + 1) = v141.u32[3];
          long long v142 = v124;
          *(void *)&long long v124 = v141.u32[0];
          *((void *)&v124 + 1) = v141.u32[1];
          v129.i16[4] = result->i16[v126];
          uint32x4_t v143 = vmovl_u16(*(uint16x4_t *)v140.i8);
          v134.i16[3] = *v135;
          v141.i16[0] = result->i16[v143.u32[0]];
          v129.i16[5] = result->i16[*((void *)&v126 + 1)];
          v134.i16[4] = *v136;
          v129.i16[6] = result->i16[v125];
          v134.i16[5] = *v137;
          v129.i16[7] = result->i16[*((void *)&v125 + 1)];
          v141.i16[1] = result->i16[v143.u32[1]];
          v141.i16[2] = result->i16[v143.u32[2]];
          v134.i16[6] = *v138;
          v141.i16[3] = result->i16[v143.u32[3]];
          v141.i16[4] = result->i16[v124];
          v134.i16[7] = *v139;
          v141.i16[5] = result->i16[*((void *)&v124 + 1)];
          v141.i16[6] = result->i16[v142];
          v141.i16[7] = result->i16[*((void *)&v142 + 1)];
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v301), v134, v300), v141, _H9), vmaxq_f16(vmaxq_f16(v129, v134), v141), *(short float *)v316.n128_u16), (float16x8_t)0), v103));
          uint32x4_t v145 = vmovl_u16(*(uint16x4_t *)v144.i8);
          uint64_t v146 = v145.u32[1];
          uint64_t v147 = v145.u32[0];
          uint64_t v148 = v145.u32[3];
          float16x8_t v149 = (float16x8_t)vmovl_high_u16(v144);
          uint64_t v150 = v145.u32[2];
          *(void *)&long long v124 = v149.u32[2];
          *((void *)&v124 + 1) = v149.u32[3];
          long long v151 = v124;
          *((void *)&v124 + 1) = v149.u32[1];
          uint64_t v152 = v149.u32[0];
          v149.i16[0] = *(_WORD *)&v51[2 * v147];
          v149.i16[1] = *(_WORD *)&v51[2 * v146];
          v149.i16[2] = *(_WORD *)&v51[2 * v150];
          v149.i16[3] = *(_WORD *)&v51[2 * v148];
          v149.i16[4] = *(_WORD *)&v51[2 * v152];
          v149.i16[5] = *(_WORD *)&v51[2 * *((void *)&v124 + 1)];
          v149.i16[6] = *(_WORD *)&v51[2 * v151];
          v149.i16[7] = *(_WORD *)&v51[2 * *((void *)&v151 + 1)];
          float16x8_t v153 = vmulq_f16(v129, v149);
          float16x8_t v154 = vmulq_f16(v134, v149);
          float16x8_t v155 = vmulq_f16(v141, v149);
          float16x8_t v156 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v153, v297), v154, v277), v155, v276);
          float16x8_t v157 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v155, _H14), v154, v274), v153, v275);
          uint16x8_t v158 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v153, v299), v154, *(short float *)v315.n128_u16), v155, v298), (float16x8_t)0), v103));
          uint32x4_t v159 = vmovl_high_u16(v158);
          uint32x4_t v160 = vmovl_u16(*(uint16x4_t *)v158.i8);
          *(void *)&long long v124 = v159.u32[2];
          *((void *)&v124 + 1) = v159.u32[3];
          long long v161 = v124;
          *(void *)&long long v124 = v159.u32[0];
          *((void *)&v124 + 1) = v159.u32[1];
          long long v162 = v124;
          *((void *)&v124 + 1) = v160.u32[3];
          v129.i16[0] = *(_WORD *)&v62[2 * v160.u32[0]];
          uint64_t v163 = *((void *)&v162 + 1);
          float v164 = (__int16 *)&v62[2 * v160.u32[2]];
          float v165 = (__int16 *)&v62[2 * v162];
          float v166 = (__int16 *)&v62[2 * v160.u32[1]];
          uint16x8_t v167 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v156, (float16x8_t)0), v103));
          uint32x4_t v168 = vmovl_high_u16(v167);
          uint32x4_t v169 = vmovl_u16(*(uint16x4_t *)v167.i8);
          v134.i16[0] = *(_WORD *)&v62[2 * v169.u32[0]];
          v129.i16[1] = *v166;
          v134.i16[1] = *(_WORD *)&v62[2 * v169.u32[1]];
          v129.i16[2] = *v164;
          v129.i16[3] = *(_WORD *)&v62[2 * *((void *)&v124 + 1)];
          v134.i16[2] = *(_WORD *)&v62[2 * v169.u32[2]];
          v134.i16[3] = *(_WORD *)&v62[2 * v169.u32[3]];
          v129.i16[4] = *v165;
          uint16x8_t v170 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v157, (float16x8_t)0), v103));
          int16x8_t v171 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v170.i8);
          *((void *)&v124 + 1) = v171.u32[3];
          v134.i16[4] = *(_WORD *)&v62[2 * v168.u32[0]];
          v171.i16[7] = (unint64_t)v171.u32[1] >> 48;
          v129.i16[5] = *(_WORD *)&v62[2 * v163];
          v171.i16[0] = *(_WORD *)&v62[2 * v171.u32[0]];
          uint64_t v172 = *((void *)&v124 + 1);
          v134.i16[5] = *(_WORD *)&v62[2 * v168.u32[1]];
          uint32x4_t v173 = vmovl_high_u16(v170);
          *(void *)&long long v124 = v173.u32[2];
          *((void *)&v124 + 1) = v173.u32[3];
          v129.i16[6] = *(_WORD *)&v62[2 * v161];
          v134.i16[6] = *(_WORD *)&v62[2 * v168.u32[2]];
          float v174 = (__int16 *)&v62[2 * v173.u32[0]];
          float v175 = (__int16 *)&v62[2 * v173.u32[1]];
          float16x8_t v176 = (float16x8_t)vuzp1q_s16((int16x8_t)v129, (int16x8_t)v134);
          v171.i16[1] = *(_WORD *)&v62[2 * v171.u32[1]];
          v129.i16[7] = *(_WORD *)&v62[2 * *((void *)&v161 + 1)];
          v171.i16[2] = *(_WORD *)&v62[2 * v171.u32[2]];
          v171.i16[3] = *(_WORD *)&v62[2 * v172];
          v171.i16[4] = *v174;
          v171.i16[5] = *v175;
          v134.i16[7] = *(_WORD *)&v62[2 * v168.u32[3]];
          v171.i16[6] = *(_WORD *)&v62[2 * v124];
          float16x8_t v177 = (float16x8_t)v171;
          v177.i16[7] = *(_WORD *)&v62[2 * *((void *)&v124 + 1)];
          *v106++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v67, v129, v271), v134, v303), v177, v302), v67), v108)), v101);
          int16x8_t v178 = (int16x8_t)vaddq_f16(v176, (float16x8_t)vuzp2q_s16((int16x8_t)v129, (int16x8_t)v134));
          int16x8_t v69 = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v68, v295, (float16x8_t)vzip1q_s16(v178, v178)), v65, (float16x8_t)vzip2q_s16(v178, v178)), v66, vaddq_f16((float16x8_t)vtrn1q_s16(v171, v171), (float16x8_t)vtrn2q_s16((int16x8_t)v177, (int16x8_t)v177))), v70), v109)), v101);
          *v107++ = v69;
          v104 += 8;
        }
        while ((int)v104 < (int)v20 - 7);
        float v179 = &v79[v104];
        unint64_t v180 = v20 & 0xFFFFFFF8;
        uint64_t v35 = v279;
        uint64_t v31 = v282;
        unint64_t v23 = v283;
        uint64_t v34 = v280;
        uint64_t v32 = v281;
        float v181 = v287;
        float v182 = v285;
        float v183 = v286;
        float v184 = v284;
        _Q5 = v316;
        _Q6 = v315;
      }
      for (; v20 > v180; _Q5 = v186)
      {
        __n128 v185 = _Q6;
        __n128 v186 = _Q5;
        float16x8_t v187 = v72;
        v69.i8[0] = v179[1];
        float v188 = (float)v69.u32[0] - v325;
        unsigned int v189 = v12.u32[1];
        float v190 = v12.f32[1] * v188;
        LOBYTE(v189) = v105->i8[0];
        float v191 = _S19 * (float)((float)v189 - v40);
        float v192 = (float)(v12.f32[1] * v188) + v191;
        float v193 = 8191.0;
        if (v192 <= 8191.0)
        {
          float v193 = (float)(v12.f32[1] * v188) + v191;
          if (v192 < 0.0) {
            float v193 = 0.0;
          }
        }
        LOBYTE(v192) = *v179;
        float v194 = (float)LODWORD(v192) - v325;
        float v195 = (float)(v10.f32[1] * v188) + (float)(v194 * v10.f32[0]);
        float v196 = 8191.0;
        if ((float)(v191 + v195) <= 8191.0)
        {
          float v196 = v191 + v195;
          if ((float)(v191 + v195) < 0.0) {
            float v196 = 0.0;
          }
        }
        unsigned int v197 = v12.i32[0];
        float v198 = v12.f32[0] * v194;
        float v199 = v198 + v191;
        BOOL v200 = (float)(v198 + v191) <= 8191.0;
        float v201 = 8191.0;
        if (v200)
        {
          float v201 = v199;
          if (v199 < 0.0) {
            float v201 = 0.0;
          }
        }
        LOBYTE(v197) = v105->i8[1];
        float v202 = _S19 * (float)((float)v197 - v40);
        float v203 = v190 + v202;
        float v204 = 8191.0;
        if (v203 <= 8191.0)
        {
          float v204 = v203;
          if (v203 < 0.0) {
            float v204 = 0.0;
          }
        }
        float v205 = v195 + v202;
        float v206 = 8191.0;
        if (v205 <= 8191.0)
        {
          float v206 = v205;
          if (v205 < 0.0) {
            float v206 = 0.0;
          }
        }
        float v207 = v198 + v202;
        float v208 = 8191.0;
        if (v207 <= 8191.0)
        {
          float v208 = v207;
          if (v207 < 0.0) {
            float v208 = 0.0;
          }
        }
        float v209 = _S19;
        _H5 = result->i16[llroundf(fminf(fmaxf(v193, 0.0), 8191.0))];
        __asm { FCVT            S20, H5 }
        _H1 = result->i16[llroundf(fminf(fmaxf(v196, 0.0), 8191.0))];
        unsigned int v213 = llroundf(fminf(fmaxf(v201, 0.0), 8191.0));
        __asm { FCVT            S0, H1 }
        _H1 = result->i16[v213];
        __asm { FCVT            S1, H1 }
        float v217 = (float)((float)((float)(v320 * _S0) + (float)(v321 * _S20)) + (float)(v319 * _S1))
             + (float)(v318 * fmaxf(_S20, fmaxf(_S0, _S1)));
        float v218 = 8191.0;
        if (v217 <= 8191.0)
        {
          float v218 = v217;
          if (v217 < 0.0) {
            float v218 = 0.0;
          }
        }
        float v219 = v40;
        _H5 = result->i16[llroundf(fminf(fmaxf(v204, 0.0), 8191.0))];
        __asm { FCVT            S6, H5 }
        _H2 = result->i16[llroundf(fminf(fmaxf(v206, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H3 = result->i16[llroundf(fminf(fmaxf(v208, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H7 = *(_WORD *)&v51[2 * llroundf(v218)];
        float v227 = (float)((float)((float)(v320 * _S2) + (float)(v321 * _S6)) + (float)(v319 * _S3))
             + (float)(v318 * fmaxf(_S6, fmaxf(_S2, _S3)));
        float v228 = 8191.0;
        if (v227 <= 8191.0)
        {
          float v228 = v227;
          if (v227 < 0.0) {
            float v228 = 0.0;
          }
        }
        __asm { FCVT            S7, H7 }
        float v230 = _S20 * _S7;
        _S0 = _S0 * _S7;
        _S1 = _S1 * _S7;
        _H5 = *(_WORD *)&v51[2 * llroundf(v228)];
        __asm { FCVT            S5, H5 }
        float v235 = _S6 * _S5;
        _S2 = _S2 * _S5;
        float v237 = _S3 * _S5;
        float v238 = (float)((float)(v313 * _S0) + (float)(v230 * v314)) + (float)(_S1 * v183);
        float v239 = (float)((float)(v307 * _S0) + (float)(v230 * v182)) + (float)(_S1 * v305);
        float v240 = (float)((float)(v306 * _S0) + (float)(v230 * v184)) + (float)(_S1 * v304);
        float v241 = (float)((float)(v313 * _S2) + (float)(v235 * v314)) + (float)(v237 * v183);
        float v242 = (float)((float)(v307 * _S2) + (float)(v235 * v182)) + (float)(v237 * v305);
        unsigned int v243 = llroundf(fminf(fmaxf(v238, 0.0), 8191.0));
        float v244 = (float)((float)(v306 * _S2) + (float)(v235 * v184)) + (float)(v237 * v304);
        LOWORD(_S0) = *(_WORD *)&v62[2 * v243];
        __asm { FCVT            S0, H0 }
        LOWORD(_S1) = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v239, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        LOWORD(_S2) = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v240, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H3 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v241, 0.0), 8191.0))];
        _H6 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v242, 0.0), 8191.0))];
        _H20 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v244, 0.0), 8191.0))];
        float v251 = (float)((float)((float)(v322 * _S1) + (float)(v323 * _S0)) + (float)(v326 * _S2)) + v47;
        float v252 = v53;
        if (v251 <= v53)
        {
          float v252 = (float)((float)((float)(v322 * _S1) + (float)(v323 * _S0)) + (float)(v326 * _S2)) + v47;
          if (v251 < v47) {
            float v252 = v47;
          }
        }
        __asm
        {
          FCVT            S7, H3
          FCVT            S6, H6
          FCVT            S3, H20
        }
        float v256 = (float)((float)((float)(v322 * _S6) + (float)(v323 * _S7)) + (float)(v326 * _S3)) + v47;
        v106->i16[0] = llroundf(v252) << v81;
        float v257 = v53;
        float v40 = v219;
        if (v256 <= v53)
        {
          float v257 = (float)((float)((float)(v322 * _S6) + (float)(v323 * _S7)) + (float)(v326 * _S3)) + v47;
          if (v256 < v47) {
            float v257 = v47;
          }
        }
        v106->i16[1] = llroundf(v257) << v81;
        float v258 = _S0 + _S7;
        float v259 = _S1 + _S6;
        float v260 = _S2 + _S3;
        float v261 = (float)((float)(v324 + (float)(v258 * *(float *)&v312)) + (float)(v259 * *(float *)&v102))
             + (float)(v260 * v181);
        float v262 = (float)v48;
        _S19 = v209;
        if (v261 <= v55)
        {
          float v262 = (float)((float)(v324 + (float)(v258 * *(float *)&v312)) + (float)(v259 * *(float *)&v102))
               + (float)(v260 * v181);
          if (v261 < v317) {
            float v262 = v317;
          }
        }
        *(float *)v69.i32 = (float)((float)(v324 + (float)(v258 * *((float *)&v312 + 1)))
                                  + (float)(v259 * *((float *)&v102 + 1)))
                          + (float)(v260 * v296);
        v107->i16[0] = llroundf(v262) << v81;
        float v263 = (float)v48;
        float16x8_t v72 = v187;
        _Q6 = v185;
        if (*(float *)v69.i32 <= v55)
        {
          float v263 = *(float *)v69.i32;
          if (*(float *)v69.i32 < v317) {
            float v263 = v317;
          }
        }
        v180 += 2;
        v179 += 2;
        v107->i16[1] = llroundf(v263) << v81;
        float v105 = (int8x8_t *)((char *)v105 + 2);
        float v106 = (uint16x8_t *)((char *)v106 + 4);
        float v107 = (int16x8_t *)((char *)v107 + 4);
      }
      float v80 = (int8x8_t *)((char *)v80 + v31);
      v79 += v32;
      float v75 = (uint16x8_t *)((char *)v75 + v34);
      float v74 = (int16x8_t *)((char *)v74 + v35);
      ++v19;
      float16x8_t v66 = v293;
      float16x8_t v67 = v294;
      int16x8_t v69 = v291;
      float16x8_t v68 = v292;
      int16x8_t v71 = v289;
      float16x8_t v70 = v290;
      uint16x8_t v101 = v288;
    }
    while (v19 != v23);
    if (v273 && v272)
    {
      uint64_t v264 = 0;
      do
      {
        if (v20)
        {
          unint64_t v265 = v20;
          short float v266 = v36;
          short float v267 = v33;
          do
          {
            __int16 v268 = *v267++;
            *v266++ = v268 | (v268 << 8);
            --v265;
          }
          while (v265);
        }
        v33 += v269;
        v36 += v270;
        ++v264;
      }
      while (v264 != v23);
    }
    else if (v272)
    {
      do
      {
        if (v20) {
          uint64_t result = (float32x2_t *)memset(v36, 255, 2 * v20);
        }
        v36 += v270;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Tone_Mat_TRC_xf422_GCD(void *result, uint64_t a2, double a3, float a4, double a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (void *)result[16];
    unint64_t v17 = result[13] * a2 / v7 + result[15];
    uint64_t v18 = result[19];
    uint64_t v19 = (uint64_t *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    unint64_t v26 = (unsigned __int8 *)(v25 + v24 * v13 + v12);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (char *)(v30 + v29 * v17 + 2 * v15);
    LOWORD(a4) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    float v33 = (float)LODWORD(a6);
    float v171 = v32 * *(float *)v18;
    float v172 = (float)LODWORD(a4);
    float v168 = v32 * *(float *)(v18 + 16);
    float v169 = v32 * *(float *)(v18 + 8);
    float v34 = v32 * *(float *)(v18 + 20);
    *(float *)&unsigned int v35 = v32 * *(float *)(v18 + 28);
    float v166 = *(float *)&v35;
    float v167 = v34;
    LOWORD(v35) = *(_WORD *)(v18 + 144);
    float v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 146);
    float v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 148);
    float v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 150);
    *(float *)&unsigned int v39 = (float)v35;
    float v170 = *(float *)&v39;
    LOWORD(v39) = *(_WORD *)(v18 + 152);
    float v40 = (float)v39;
    float v41 = *(float *)(v18 + 36);
    float v42 = *(float *)(v18 + 40);
    float v43 = *(float *)(v18 + 44);
    float v164 = *(float *)(v18 + 52) * 0.5;
    float v165 = *(float *)(v18 + 48) * 0.5;
    float v162 = *(float *)(v18 + 60) * 0.5;
    float v163 = *(float *)(v18 + 56) * 0.5;
    float v44 = *(float *)(v18 + 72);
    float v45 = *(float *)(v18 + 68) * 0.5;
    float v160 = v45;
    float v161 = *(float *)(v18 + 64) * 0.5;
    float v47 = *(float *)(v18 + 76);
    float v46 = *(float *)(v18 + 80);
    float v48 = *(float *)(v18 + 84);
    float v49 = *(float *)(v18 + 88);
    float v50 = *(float *)(v18 + 92);
    float v51 = *(float *)(v18 + 96);
    float v52 = *(float *)(v18 + 100);
    float v53 = *(float *)(v18 + 104);
    uint64_t v54 = v18 + 164;
    uint64_t result = (void *)(v18 + 16548);
    unsigned int v55 = *(unsigned __int8 *)(v18 + 132);
    if (v55 >= 0x11) {
      char v56 = 0;
    }
    else {
      char v56 = 16 - v55;
    }
    uint64_t v57 = v16[1];
    _ZF = v57 == 0;
    uint64_t v59 = v57 + v28 * v17;
    uint64_t v60 = *v16 + v27 * v17;
    uint64_t v61 = v18 + 32932;
    uint64_t v62 = v59 + 2 * v15;
    if (_ZF) {
      uint64_t v62 = 0;
    }
    float16x8_t v63 = (_WORD *)(v60 + 2 * v15);
    uint64_t v65 = *v19;
    uint64_t v64 = v19[1];
    uint64_t v66 = v64 + v23 * v13 + v12;
    if (!v64) {
      uint64_t v66 = 0;
    }
    float16x8_t v67 = (unsigned char *)(v65 + v22 * v13 + v12);
    char v68 = v56;
    float v70 = *(float *)(v18 + 108);
    float v69 = *(float *)(v18 + 112);
    float v71 = *(float *)(v18 + 116);
    float v72 = *(float *)(v18 + 120);
    do
    {
      if (v11)
      {
        unint64_t v73 = 0;
        float v74 = v67;
        float v75 = v63;
        do
        {
          LOBYTE(v45) = *(unsigned char *)(v66 + v73 + 1);
          float v76 = (float)LODWORD(v45) - v33;
          unsigned int v77 = LODWORD(v169);
          float v78 = v169 * v76;
          LOBYTE(v77) = *v74;
          float v79 = (float)v77 - v172;
          float v80 = v171 * v79;
          float v81 = (float)(v169 * v76) + (float)(v171 * v79);
          float v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            float v82 = (float)(v169 * v76) + (float)(v171 * v79);
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          LOBYTE(v79) = *(unsigned char *)(v66 + v73);
          float v83 = v33;
          float v84 = (float)LODWORD(v79) - v33;
          float v85 = (float)(v167 * v76) + (float)(v84 * v168);
          float v86 = 8191.0;
          if ((float)(v80 + v85) <= 8191.0)
          {
            float v86 = v80 + v85;
            if ((float)(v80 + v85) < 0.0) {
              float v86 = 0.0;
            }
          }
          unsigned int v87 = LODWORD(v166);
          float v88 = v166 * v84;
          float v89 = v88 + v80;
          BOOL v90 = (float)(v88 + v80) <= 8191.0;
          float v91 = 8191.0;
          if (v90)
          {
            float v91 = v89;
            if (v89 < 0.0) {
              float v91 = 0.0;
            }
          }
          LOBYTE(v87) = v74[1];
          float v92 = v171 * (float)((float)v87 - v172);
          float v93 = v78 + v92;
          float v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v85 + v92;
          BOOL v90 = (float)(v85 + v92) <= 8191.0;
          float v96 = 8191.0;
          if (v90)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v88 + v92;
          BOOL v90 = (float)(v88 + v92) <= 8191.0;
          float v98 = 8191.0;
          if (v90)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H19 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          float v111 = (float)((float)((float)(v69 * _S25) + (float)(v70 * _S24)) + (float)(v71 * _S26))
               + (float)(v72 * fmaxf(_S24, fmaxf(_S25, _S26)));
          float v112 = 8191.0;
          if (v111 <= 8191.0)
          {
            float v112 = v111;
            if (v111 < 0.0) {
              float v112 = 0.0;
            }
          }
          __asm
          {
            FCVT            S27, H19
            FCVT            S28, H28
            FCVT            S30, H30
          }
          _H19 = *((_WORD *)result + llroundf(v112));
          float v117 = (float)((float)((float)(v69 * _S28) + (float)(v70 * _S27)) + (float)(v71 * _S30))
               + (float)(v72 * fmaxf(_S27, fmaxf(_S28, _S30)));
          float v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            float v118 = v117;
            if (v117 < 0.0) {
              float v118 = 0.0;
            }
          }
          __asm { FCVT            S18, H19 }
          float v120 = _S24 * _S18;
          _S24 = _S25 * _S18;
          float v122 = _S26 * _S18;
          _H0 = *((_WORD *)result + llroundf(v118));
          __asm { FCVT            S0, H0 }
          _S25 = _S27 * _S0;
          float v126 = _S28 * _S0;
          float v127 = _S30 * _S0;
          float v128 = (float)((float)(v47 * _S24) + (float)(v120 * v44)) + (float)(v122 * v46);
          float v129 = (float)((float)(v49 * _S24) + (float)(v120 * v48)) + (float)(v122 * v50);
          _S18 = (float)((float)(v52 * _S24) + (float)(v120 * v51)) + (float)(v122 * v53);
          float v131 = (float)((float)(v47 * v126) + (float)(_S25 * v44)) + (float)(v127 * v46);
          float v132 = (float)((float)(v49 * v126) + (float)(_S25 * v48)) + (float)(v127 * v50);
          float v133 = (float)((float)(v52 * v126) + (float)(_S25 * v51)) + (float)(v127 * v53);
          LOWORD(_S24) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          LOWORD(_S18) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S26, H18 }
          _H19 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          float v140 = (float)((float)((float)(v42 * _S25) + (float)(v41 * _S24)) + (float)(v43 * _S26)) + v36;
          float v141 = v38;
          if (v140 <= v38)
          {
            float v141 = (float)((float)((float)(v42 * _S25) + (float)(v41 * _S24)) + (float)(v43 * _S26)) + v36;
            if (v140 < v36) {
              float v141 = v36;
            }
          }
          __asm
          {
            FCVT            S28, H19
            FCVT            S27, H27
            FCVT            S19, H30
          }
          float v145 = (float)((float)((float)(v42 * _S27) + (float)(v41 * _S28)) + (float)(v43 * _S19)) + v36;
          *float v75 = llroundf(v141) << v68;
          float v146 = v38;
          if (v145 <= v38)
          {
            float v146 = (float)((float)((float)(v42 * _S27) + (float)(v41 * _S28)) + (float)(v43 * _S19)) + v36;
            if (v145 < v36) {
              float v146 = v36;
            }
          }
          v75[1] = llroundf(v146) << v68;
          float v147 = _S24 + _S28;
          float v148 = _S25 + _S27;
          float v149 = _S26 + _S19;
          float v150 = (float)((float)(v37 + (float)(v147 * v165)) + (float)(v148 * v164)) + (float)(v149 * v163);
          float v151 = v40;
          if (v150 <= v40)
          {
            float v151 = (float)((float)(v37 + (float)(v147 * v165)) + (float)(v148 * v164)) + (float)(v149 * v163);
            if (v150 < v170) {
              float v151 = v170;
            }
          }
          uint64_t v152 = (_WORD *)(v62 + 2 * v73);
          float v45 = (float)(v37 + (float)(v147 * v162)) + (float)(v148 * v161);
          float v153 = v45 + (float)(v149 * v160);
          *uint64_t v152 = llroundf(v151) << v68;
          float v154 = v40;
          if (v153 <= v40)
          {
            float v45 = v170;
            float v154 = v153;
            if (v153 < v170) {
              float v154 = v170;
            }
          }
          v152[1] = llroundf(v154) << v68;
          v73 += 2;
          v74 += 2;
          v75 += 2;
          float v33 = v83;
        }
        while (v11 > v73);
      }
      v67 += v22;
      v66 += v23;
      float16x8_t v63 = (_WORD *)((char *)v63 + v27);
      v62 += v28;
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      uint64_t v155 = 0;
      do
      {
        if (v11)
        {
          unint64_t v156 = v11;
          float16x8_t v157 = v31;
          uint16x8_t v158 = v26;
          do
          {
            __int16 v159 = *v158++;
            *v157++ = v159 | (v159 << 8);
            --v156;
          }
          while (v156);
        }
        v26 += v24;
        v31 += v29;
        ++v155;
      }
      while (v155 != v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v31, 255, 2 * v11);
        }
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_422vf_TRC_Mat_TRC_xf422_neon_fp16_GCD(float32x2_t *result, uint64_t a2, double a3, double a4, int16x4_t a5, double a6, double a7, double a8, __n128 _Q6)
{
  uint64_t v19 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v20 = result->u8[0];
  unint64_t v21 = v19 * a2 / v20;
  unint64_t v22 = (v19 + v19 * a2) / v20;
  if (v22 != v21)
  {
    uint64_t v23 = 0;
    unint64_t v24 = *(unint64_t *)((char *)&result[2] + 4);
    uint64_t v25 = *(uint64_t *)((char *)&result[4] + 4);
    unint64_t v26 = v21 + *(void *)((char *)&result[5] + 4);
    unint64_t v27 = v22 - v21;
    float32x2_t v28 = result[14];
    uint64_t v29 = (void *)result[16];
    unint64_t v30 = *(void *)&result[13] * a2 / v20 + *(void *)&result[15];
    uint64_t v31 = (float32x2_t *)result[19];
    uint64_t v32 = (uint64_t *)result[7];
    uint64_t v33 = (uint64_t *)result[8];
    uint64_t v34 = (uint64_t *)result[17];
    uint64_t v35 = *v33;
    uint64_t v36 = v33[1];
    uint64_t v237 = v33[2];
    uint64_t v239 = v32[2];
    uint64_t v37 = (unsigned __int8 *)(v239 + v237 * v26 + v25);
    uint64_t v38 = *v34;
    uint64_t v39 = v34[1];
    uint64_t v240 = v34[2];
    uint64_t v238 = v29[2];
    uint64_t v40 = (char *)(v238 + v240 * v30 + 2 * *(void *)&v28);
    LODWORD(v34) = v31[17].u16[2];
    unsigned int v41 = v31[17].u16[3];
    float v42 = (float)v34;
    *(short float *)v14.i16 = (short float)v34;
    unsigned int v43 = v31[18].u16[0];
    _S5 = v31[5].i32[1];
    LODWORD(v34) = v31[18].u16[1];
    float v46 = (float)v41;
    short float v47 = (short float)v41;
    float v48 = (float)v43;
    unsigned int v49 = v31[18].u16[2];
    *(short float *)a5.i16 = (short float)v43;
    unsigned int v50 = v31[18].u16[3];
    float v280 = (float)v34;
    float v281 = v46;
    *(short float *)v10.i16 = (short float)v34;
    LODWORD(v34) = v31[19].u16[0];
    _Q6.n128_u32[0] = v31[4].u32[1];
    _S11 = v31[5].i32[0];
    float v52 = (float)v49;
    _S4 = v31[9].i32[0];
    _S10 = v31[9].i32[1];
    *(short float *)v15.i16 = (short float)v49;
    unsigned int v55 = (char *)&v31[20] + 4;
    float v56 = 8191.0 / (float)v31[16].u32[0];
    float v268 = (float)v50;
    _S7 = v56 * v31->f32[0];
    float v58 = (float)v34;
    *(short float *)v17.i16 = (short float)v50;
    *(short float *)v18.i16 = (short float)v34;
    unsigned int v59 = v31[16].u8[4];
    if (v59 >= 0x11) {
      unsigned __int8 v60 = 0;
    }
    else {
      unsigned __int8 v60 = 16 - v59;
    }
    uint64_t v61 = v29[1];
    _ZF = v61 == 0;
    uint64_t v63 = v61 + v39 * v30;
    uint64_t v64 = *v29 + v38 * v30;
    int16x8_t v65 = vdupq_lane_s16(v14, 0);
    v45.i32[1] = v31[1].i32[0];
    v45.i32[0] = v31[3].i32[1];
    *(float32x2_t *)v16.f32 = vmul_n_f32(v45, v56);
    float16x8_t v66 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v16), 0);
    uint64_t result = (float32x2_t *)((char *)v31 + 16548);
    *(float32x2_t *)v9.f32 = vmul_n_f32(v31[2], v56);
    short float v67 = -v47;
    float16x8_t v266 = vmulq_n_f16(v66, v67);
    float16x8_t v267 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v9), 0);
    float16x8_t v265 = vmulq_n_f16(v267, v67);
    v13.i32[1] = v31[7].i32[1];
    v13.i32[0] = v31[6].i32[0];
    *(float32x2_t *)v13.f32 = vmul_f32(*(float32x2_t *)v13.f32, (float32x2_t)0x3F0000003F000000);
    float16x8_t v264 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v13), 0);
    v12.i32[1] = v31[8].i32[0];
    v12.i32[0] = v31[6].i32[1];
    *(float32x2_t *)v12.f32 = vmul_f32(*(float32x2_t *)v12.f32, (float32x2_t)0x3F0000003F000000);
    v11.i32[1] = v31[8].i32[1];
    v11.i32[0] = v31[7].i32[0];
    *(float32x2_t *)v11.f32 = vmul_f32(*(float32x2_t *)v11.f32, (float32x2_t)0x3F0000003F000000);
    float16x8_t v257 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v11), 0);
    float16x8_t v258 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v12), 0);
    int16x8_t v68 = vdupq_lane_s16(a5, 0);
    int16x8_t v69 = vdupq_lane_s16(v10, 0);
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(v15, 0);
    int16x8_t v71 = vdupq_lane_s16(v17, 0);
    float16x8_t v259 = (float16x8_t)vdupq_lane_s16(v18, 0);
    float v72 = (int16x8_t *)(v63 + 2 * *(void *)&v28);
    if (_ZF) {
      float v72 = 0;
    }
    unint64_t v73 = (uint16x8_t *)(v64 + 2 * *(void *)&v28);
    uint64_t v75 = *v32;
    uint64_t v74 = v32[1];
    float v76 = (unsigned char *)(v74 + v36 * v26 + v25);
    if (!v74) {
      float v76 = 0;
    }
    unsigned int v77 = (int8x8_t *)(v75 + v35 * v26 + v25);
    unsigned __int8 v78 = v60;
    _S9 = v31[10].f32[0];
    float v278 = v31[4].f32[1];
    float v279 = _S7;
    __asm
    {
      FCVT            H8, S7
      FCVT            H6, S6
    }
    short float v242 = _H6;
    float v277 = v31[5].f32[0];
    __asm { FCVT            H6, S11 }
    short float v255 = _H6;
    float v276 = v31[5].f32[1];
    __asm { FCVT            H5, S5 }
    short float v256 = _H5;
    float16x8_t v87 = (float16x8_t)v65;
    float v274 = v31[9].f32[1];
    float v275 = v31[9].f32[0];
    __asm
    {
      FCVT            H11, S4
      FCVT            H10, S10
      FCVT            H6, S9
    }
    float v273 = v31[10].f32[1];
    __asm { FCVT            H7, S17 }
    float v270 = v31[11].f32[1];
    float v271 = v31[11].f32[0];
    __asm
    {
      FCVT            H4, S27
      FCVT            H1, S15
    }
    short float v93 = _H4;
    short float v94 = _H1;
    float v269 = v31[12].f32[0];
    __asm { FCVT            H1, S31 }
    _S17 = v31[12].f32[1];
    __asm { FCVT            H12, S22 }
    short float v241 = _H12;
    _S26 = v31[13].f32[0];
    __asm { FCVT            H12, S30 }
    float v100 = _S9;
    int16x8_t v101 = vdupq_n_s16(v60);
    uint64_t v102 = v16.i64[0];
    float v262 = v13.f32[1];
    float v261 = v12.f32[1];
    float v260 = v11.f32[1];
    float16x8_t v103 = v66;
    v104.i64[0] = 0x9000900090009000;
    v104.i64[1] = 0x9000900090009000;
    int16x8_t v254 = v68;
    float16x8_t v263 = (float16x8_t)v69;
    int16x8_t v252 = v71;
    float16x8_t v253 = v70;
    short float v272 = _H10;
    int16x8_t v251 = v101;
    uint64_t v249 = v33[1];
    uint64_t v250 = *v33;
    uint64_t v247 = v39;
    uint64_t v248 = v38;
    __int32 v245 = v12.i32[0];
    __int32 v246 = v13.i32[0];
    __int32 v244 = v11.i32[0];
    float v243 = _S9;
    do
    {
      if ((int)v24 < 8)
      {
        unint64_t v176 = 0;
        float16x8_t v108 = v72;
        float v107 = v73;
        float v175 = v76;
        float v106 = v77;
      }
      else
      {
        uint64_t v105 = 0;
        float v106 = v77;
        float v107 = v73;
        float16x8_t v108 = v72;
        uint16x8_t v109 = (uint16x8_t)v101;
        float16x8_t v110 = (float16x8_t)v68;
        float16x8_t v111 = v70;
        float16x8_t v112 = (float16x8_t)v71;
        do
        {
          int8x8_t v113 = *(int8x8_t *)&v76[v105];
          *(int8x8_t *)v114.i8 = vzip1_s8(v113, 0);
          v114.u64[1] = (unint64_t)vzip2_s8(v113, 0);
          float16x8_t v115 = vcvtq_f16_u16(v114);
          int16x8_t v116 = (int16x8_t)vmlaq_f16(v266, v103, v115);
          int8x16_t v117 = (int8x16_t)vmlaq_f16(v265, v267, v115);
          v115.i64[0] = vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL).u64[0];
          *(int16x4_t *)v118.i8 = vuzp1_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8);
          *(int16x4_t *)v116.i8 = vuzp2_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8);
          v116.i64[1] = v116.i64[0];
          v115.i64[0] = vextq_s8(v117, v117, 8uLL).u64[0];
          float16x8_t v119 = v103;
          v118.i64[1] = v116.i64[0];
          *(float16x4_t *)v115.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v115.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v115.i8));
          int8x8_t v120 = *v106++;
          v115.i64[1] = v116.i64[0];
          *(int8x8_t *)v121.i8 = vzip1_s8(v120, 0);
          v121.u64[1] = (unint64_t)vzip2_s8(v120, 0);
          float16x8_t v122 = vsubq_f16(vcvtq_f16_u16(v121), v87);
          float16x8_t v123 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v118, v118), v122, _H8);
          float16x8_t v124 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v115, (int16x8_t)v115), v122, _H8);
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16(v116, v116), v122, _H8), (float16x8_t)0), v104));
          uint32x4_t v126 = vmovl_high_u16(v125);
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v125.i8);
          *(void *)&long long v128 = v126.u32[2];
          *((void *)&v128 + 1) = v126.u32[3];
          long long v129 = v128;
          *(void *)&long long v128 = v126.u32[0];
          *((void *)&v128 + 1) = v126.u32[1];
          long long v130 = v128;
          *((void *)&v128 + 1) = v127.u32[3];
          v121.i16[0] = *(_WORD *)&v55[2 * v127.u32[0]];
          float v131 = (__int16 *)&v55[2 * v127.u32[2]];
          float v132 = (__int16 *)&v55[2 * v127.u32[1]];
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, (float16x8_t)0), v104));
          uint32x4_t v134 = vmovl_high_u16(v133);
          uint32x4_t v135 = vmovl_u16(*(uint16x4_t *)v133.i8);
          v136.i16[0] = *(_WORD *)&v55[2 * v135.u32[0]];
          v121.i16[1] = *v132;
          float v137 = (__int16 *)&v55[2 * v135.u32[3]];
          float v138 = (__int16 *)&v55[2 * v134.u32[0]];
          v121.i16[2] = *v131;
          float v139 = (__int16 *)&v55[2 * v134.u32[1]];
          v136.i16[1] = *(_WORD *)&v55[2 * v135.u32[1]];
          v121.i16[3] = *(_WORD *)&v55[2 * *((void *)&v128 + 1)];
          float v140 = (__int16 *)&v55[2 * v134.u32[2]];
          float v141 = (__int16 *)&v55[2 * v134.u32[3]];
          v136.i16[2] = *(_WORD *)&v55[2 * v135.u32[2]];
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v104));
          uint32x4_t v143 = vmovl_high_u16(v142);
          float16x8_t v144 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v142.i8);
          v121.i16[4] = *(_WORD *)&v55[2 * v130];
          v136.i16[3] = *v137;
          v121.i16[5] = *(_WORD *)&v55[2 * *((void *)&v130 + 1)];
          v144.i16[0] = *(_WORD *)&v55[2 * v144.u32[0]];
          v136.i16[4] = *v138;
          v121.i16[6] = *(_WORD *)&v55[2 * v129];
          v136.i16[5] = *v139;
          v121.i16[7] = *(_WORD *)&v55[2 * *((void *)&v129 + 1)];
          v144.i16[1] = *(_WORD *)&v55[2 * v144.u32[1]];
          v144.i16[2] = *(_WORD *)&v55[2 * v144.u32[2]];
          v136.i16[6] = *v140;
          v144.i16[3] = *(_WORD *)&v55[2 * v144.u32[3]];
          v144.i16[4] = *(_WORD *)&v55[2 * v143.u32[0]];
          v136.i16[7] = *v141;
          v144.i16[5] = *(_WORD *)&v55[2 * v143.u32[1]];
          v144.i16[6] = *(_WORD *)&v55[2 * v143.u32[2]];
          v144.i16[7] = *(_WORD *)&v55[2 * v143.u32[3]];
          v145.i16[7] = _Q6.n128_i16[7];
          float16x8_t v146 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v121, _H7), v136, v93), v144, v94);
          float16x8_t v147 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v144, _H12), v136, v241), (float16x8_t)v121, _H1);
          uint16x8_t v148 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v121, _H11), v136, _H10), v144, *(short float *)_Q6.n128_u16), (float16x8_t)0), v104));
          uint32x4_t v149 = vmovl_high_u16(v148);
          uint32x4_t v150 = vmovl_u16(*(uint16x4_t *)v148.i8);
          *(void *)&long long v128 = v149.u32[2];
          *((void *)&v128 + 1) = v149.u32[3];
          long long v151 = v128;
          *(void *)&long long v128 = v149.u32[0];
          *((void *)&v128 + 1) = v149.u32[1];
          long long v152 = v128;
          *((void *)&v128 + 1) = v150.u32[3];
          v121.i16[0] = result->i16[v150.u32[0]];
          uint64_t v153 = *((void *)&v152 + 1);
          float v154 = (__int16 *)result + v150.u32[2];
          uint64_t v155 = (__int16 *)result + v152;
          unint64_t v156 = (__int16 *)result + v150.u32[1];
          uint16x8_t v157 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v146, (float16x8_t)0), v104));
          uint32x4_t v158 = vmovl_high_u16(v157);
          uint32x4_t v159 = vmovl_u16(*(uint16x4_t *)v157.i8);
          v145.i16[0] = result->i16[v159.u32[0]];
          v121.i16[1] = *v156;
          v145.i16[1] = result->i16[v159.u32[1]];
          v121.i16[2] = *v154;
          float v160 = (__int16 *)result + v158.u32[0];
          float v161 = (__int16 *)result + v158.u32[1];
          v121.i16[3] = result->i16[*((void *)&v128 + 1)];
          v145.i16[2] = result->i16[v159.u32[2]];
          v145.i16[3] = result->i16[v159.u32[3]];
          float v162 = (__int16 *)result + v158.u32[2];
          float v163 = (__int16 *)result + v158.u32[3];
          v121.i16[4] = *v155;
          uint16x8_t v164 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v147, (float16x8_t)0), v104));
          int16x8_t v165 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v164.i8);
          *((void *)&v128 + 1) = v165.u32[3];
          v145.i16[4] = *v160;
          v165.i16[7] = (unint64_t)v165.u32[1] >> 48;
          v121.i16[5] = result->i16[v153];
          v165.i16[0] = result->i16[v165.u32[0]];
          uint64_t v166 = *((void *)&v128 + 1);
          v145.i16[5] = *v161;
          uint32x4_t v167 = vmovl_high_u16(v164);
          *(void *)&long long v128 = v167.u32[2];
          *((void *)&v128 + 1) = v167.u32[3];
          v121.i16[6] = result->i16[v151];
          v145.i16[6] = *v162;
          float v168 = (__int16 *)result + v167.u32[0];
          float v169 = (__int16 *)result + v167.u32[1];
          float16x8_t v170 = (float16x8_t)vuzp1q_s16((int16x8_t)v121, v145);
          v165.i16[1] = result->i16[v165.u32[1]];
          v121.i16[7] = result->i16[*((void *)&v151 + 1)];
          v165.i16[2] = result->i16[v165.u32[2]];
          v165.i16[3] = result->i16[v166];
          v165.i16[4] = *v168;
          v165.i16[5] = *v169;
          v145.i16[7] = *v163;
          v165.i16[6] = result->i16[v128];
          float16x8_t v70 = vmlaq_n_f16(vmlaq_n_f16(v110, (float16x8_t)v121, v242), (float16x8_t)v145, v255);
          float16x8_t v171 = (float16x8_t)vuzp2q_s16((int16x8_t)v121, v145);
          _H10 = v272;
          float16x8_t v172 = (float16x8_t)v165;
          v172.i16[7] = result->i16[*((void *)&v128 + 1)];
          *v107++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v70, v172, v256), v110), v111)), v109);
          int16x8_t v173 = (int16x8_t)vaddq_f16(v170, v171);
          float16x8_t v174 = (float16x8_t)vtrn2q_s16((int16x8_t)v172, (int16x8_t)v172);
          float16x8_t v103 = v119;
          v70.i32[0] = v258.i32[0];
          int16x8_t v68 = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v263, v264, (float16x8_t)vzip1q_s16(v173, v173)), v258, (float16x8_t)vzip2q_s16(v173, v173)), v257, vaddq_f16((float16x8_t)vtrn1q_s16(v165, v165), v174)), v112), v259)), v109);
          *v108++ = v68;
          v105 += 8;
        }
        while ((int)v105 < (int)v24 - 7);
        float v175 = &v76[v105];
        unint64_t v176 = v24 & 0xFFFFFFF8;
        uint64_t v36 = v249;
        uint64_t v35 = v250;
        uint64_t v39 = v247;
        uint64_t v38 = v248;
        v12.i32[0] = v245;
        v13.i32[0] = v246;
        v11.i32[0] = v244;
        float v100 = v243;
      }
      for (; v24 > v176; float16x8_t v87 = v177)
      {
        float16x8_t v177 = v87;
        v68.i8[0] = v175[1];
        float v178 = (float)v68.u32[0] - v281;
        float v179 = *((float *)&v102 + 1) * v178;
        v70.i8[0] = v106->i8[0];
        float v180 = v279 * (float)((float)v70.u32[0] - v42);
        float v181 = (float)(*((float *)&v102 + 1) * v178) + v180;
        float v182 = 8191.0;
        if (v181 <= 8191.0)
        {
          float v182 = (float)(*((float *)&v102 + 1) * v178) + v180;
          if (v181 < 0.0) {
            float v182 = 0.0;
          }
        }
        LOBYTE(v181) = *v175;
        float v183 = (float)LODWORD(v181) - v281;
        float v184 = (float)(v9.f32[1] * v178) + (float)(v183 * v9.f32[0]);
        float v185 = 8191.0;
        if ((float)(v180 + v184) <= 8191.0)
        {
          float v185 = v180 + v184;
          if ((float)(v180 + v184) < 0.0) {
            float v185 = 0.0;
          }
        }
        float v186 = *(float *)&v102 * v183;
        float v187 = v186 + v180;
        float v188 = 8191.0;
        if ((float)(v186 + v180) <= 8191.0)
        {
          float v188 = v186 + v180;
          if (v187 < 0.0) {
            float v188 = 0.0;
          }
        }
        LOBYTE(v187) = v106->i8[1];
        float v189 = v279 * (float)((float)LODWORD(v187) - v42);
        float v190 = v179 + v189;
        float v191 = 8191.0;
        if (v190 <= 8191.0)
        {
          float v191 = v190;
          if (v190 < 0.0) {
            float v191 = 0.0;
          }
        }
        float v192 = v184 + v189;
        BOOL v193 = (float)(v184 + v189) <= 8191.0;
        float v194 = 8191.0;
        if (v193)
        {
          float v194 = v192;
          if (v192 < 0.0) {
            float v194 = 0.0;
          }
        }
        float v195 = v186 + v189;
        float v196 = 8191.0;
        if (v195 <= 8191.0)
        {
          float v196 = v195;
          if (v195 < 0.0) {
            float v196 = 0.0;
          }
        }
        float v197 = v42;
        _H2 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v182, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H16 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v185, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        _H31 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v188, 0.0), 8191.0))];
        __asm { FCVT            S31, H31 }
        float v204 = (float)((float)(v274 * _S16) + (float)(_S2 * v275)) + (float)(_S31 * v100);
        float v205 = (float)((float)(v271 * _S16) + (float)(_S2 * v273)) + (float)(_S31 * v270);
        _S2 = (float)((float)(_S17 * _S16) + (float)(_S2 * v269)) + (float)(_S31 * _S26);
        LOWORD(_S16) = result->i16[llroundf(fminf(fmaxf(v204, 0.0), 8191.0))];
        __asm { FCVT            S31, H16 }
        LOWORD(_S16) = result->i16[llroundf(fminf(fmaxf(v205, 0.0), 8191.0))];
        __asm { FCVT            S10, H16 }
        LOWORD(_S2) = result->i16[llroundf(fminf(fmaxf(_S2, 0.0), 8191.0))];
        __asm { FCVT            S9, H2 }
        float v210 = (float)((float)((float)(v277 * _S10) + (float)(v278 * _S31)) + (float)(v276 * _S9)) + v48;
        float v211 = v52;
        if (v210 <= v52)
        {
          float v211 = (float)((float)((float)(v277 * _S10) + (float)(v278 * _S31)) + (float)(v276 * _S9)) + v48;
          if (v210 < v48) {
            float v211 = v48;
          }
        }
        _H2 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v191, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H19 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v194, 0.0), 8191.0))];
        _H0 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v196, 0.0), 8191.0))];
        __asm
        {
          FCVT            S19, H19
          FCVT            S0, H0
        }
        float v218 = (float)((float)(v274 * _S19) + (float)(_S2 * v275)) + (float)(_S0 * v100);
        _S3 = (float)((float)(v271 * _S19) + (float)(_S2 * v273)) + (float)(_S0 * v270);
        _S2 = (float)((float)(_S17 * _S19) + (float)(_S2 * v269)) + (float)(_S0 * _S26);
        LOWORD(_S0) = result->i16[llroundf(fminf(fmaxf(v218, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        LOWORD(_S3) = result->i16[llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
        LOWORD(_S2) = result->i16[llroundf(fminf(fmaxf(_S2, 0.0), 8191.0))];
        __asm
        {
          FCVT            S19, H3
          FCVT            S2, H2
        }
        float v224 = (float)((float)((float)(v277 * _S19) + (float)(v278 * _S0)) + (float)(v276 * _S2)) + v48;
        v107->i16[0] = llroundf(v211) << v78;
        float v225 = v52;
        if (v224 <= v52)
        {
          float v225 = (float)((float)((float)(v277 * _S19) + (float)(v278 * _S0)) + (float)(v276 * _S2)) + v48;
          if (v224 < v48) {
            float v225 = v48;
          }
        }
        v107->i16[1] = llroundf(v225) << v78;
        float v226 = _S31 + _S0;
        *(float *)v70.i32 = _S10 + _S19;
        float v227 = _S9 + _S2;
        float v228 = (float)((float)(v280 + (float)(v226 * v13.f32[0])) + (float)((float)(_S10 + _S19) * v12.f32[0]))
             + (float)(v227 * v11.f32[0]);
        float v229 = v58;
        if (v228 <= v58)
        {
          float v229 = v228;
          if (v228 < v268) {
            float v229 = v268;
          }
        }
        *(float *)v68.i32 = (float)((float)(v280 + (float)(v226 * v262)) + (float)(*(float *)v70.i32 * v261))
                          + (float)(v227 * v260);
        v108->i16[0] = llroundf(v229) << v78;
        float v230 = v58;
        float v42 = v197;
        _H10 = v272;
        if (*(float *)v68.i32 <= v58)
        {
          float v230 = *(float *)v68.i32;
          if (*(float *)v68.i32 < v268) {
            float v230 = v268;
          }
        }
        v176 += 2;
        v175 += 2;
        v108->i16[1] = llroundf(v230) << v78;
        float v106 = (int8x8_t *)((char *)v106 + 2);
        float v107 = (uint16x8_t *)((char *)v107 + 4);
        float16x8_t v108 = (int16x8_t *)((char *)v108 + 4);
      }
      unsigned int v77 = (int8x8_t *)((char *)v77 + v35);
      v76 += v36;
      unint64_t v73 = (uint16x8_t *)((char *)v73 + v38);
      float v72 = (int16x8_t *)((char *)v72 + v39);
      ++v23;
      int16x8_t v68 = v254;
      float16x8_t v103 = v66;
      int16x8_t v71 = v252;
      float16x8_t v70 = v253;
      int16x8_t v101 = v251;
    }
    while (v23 != v27);
    if (v239 && v238)
    {
      uint64_t v231 = 0;
      do
      {
        if (v24)
        {
          unint64_t v232 = v24;
          float v233 = v40;
          float v234 = v37;
          do
          {
            __int16 v235 = *v234++;
            *v233++ = v235 | (v235 << 8);
            --v232;
          }
          while (v232);
        }
        v37 += v237;
        v40 += v240;
        ++v231;
      }
      while (v231 != v27);
    }
    else
    {
      uint64_t v236 = v240;
      if (v238)
      {
        do
        {
          if (v24)
          {
            uint64_t result = (float32x2_t *)memset(v40, 255, 2 * v24);
            uint64_t v236 = v240;
          }
          v40 += v236;
          --v27;
        }
        while (v27);
      }
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Mat_TRC_xf422_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    unint64_t v16 = result[13] * a2 / v7;
    uint64_t v17 = (uint64_t *)result[16];
    unint64_t v18 = v16 + result[15];
    uint64_t v19 = result[19];
    uint64_t v20 = (uint64_t *)result[7];
    uint64_t v21 = (uint64_t *)result[8];
    size_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v26 = v20[2];
    unint64_t v27 = (unsigned __int8 *)(v26 + v25 * v13 + v12);
    uint64_t v28 = *v22;
    uint64_t v29 = v22[1];
    uint64_t v30 = v22[2];
    uint64_t v31 = v17[2];
    uint64_t v32 = (char *)(v31 + v30 * v18 + 2 * v15);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v19;
    float v146 = v33 * *(float *)(v19 + 16);
    float v147 = v33 * *(float *)(v19 + 8);
    float v144 = v33 * *(float *)(v19 + 28);
    *(float *)&unsigned int v37 = v144;
    float v145 = v33 * *(float *)(v19 + 20);
    LOWORD(v37) = *(_WORD *)(v19 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 152);
    float v42 = (float)v37;
    float v43 = *(float *)(v19 + 36);
    float v44 = *(float *)(v19 + 40);
    float v45 = *(float *)(v19 + 44);
    float v142 = *(float *)(v19 + 52) * 0.5;
    float v143 = *(float *)(v19 + 48) * 0.5;
    float v140 = *(float *)(v19 + 60) * 0.5;
    float v141 = *(float *)(v19 + 56) * 0.5;
    float v46 = *(float *)(v19 + 72);
    float v47 = *(float *)(v19 + 68) * 0.5;
    float v138 = v47;
    float v139 = *(float *)(v19 + 64) * 0.5;
    float v49 = *(float *)(v19 + 76);
    float v48 = *(float *)(v19 + 80);
    float v50 = *(float *)(v19 + 84);
    float v51 = *(float *)(v19 + 88);
    float v52 = *(float *)(v19 + 92);
    float v53 = *(float *)(v19 + 96);
    float v54 = *(float *)(v19 + 100);
    float v55 = *(float *)(v19 + 104);
    uint64_t v56 = v19 + 164;
    uint64_t result = (void *)(v19 + 16548);
    unsigned int v57 = *(unsigned __int8 *)(v19 + 132);
    if (v57 >= 0x11) {
      char v58 = 0;
    }
    else {
      char v58 = 16 - v57;
    }
    uint64_t v60 = *v17;
    uint64_t v59 = v17[1];
    uint64_t v61 = v59 + v29 * v18 + 2 * v15;
    if (!v59) {
      uint64_t v61 = 0;
    }
    uint64_t v62 = v60 + v28 * v18 + 2 * v15;
    uint64_t v64 = *v20;
    uint64_t v63 = v20[1];
    uint64_t v65 = v63 + v24 * v13 + v12;
    if (!v63) {
      uint64_t v65 = 0;
    }
    float16x8_t v66 = (unsigned char *)(v64 + v23 * v13 + v12);
    char v67 = v58;
    do
    {
      if (v11)
      {
        unint64_t v68 = 0;
        int16x8_t v69 = v66;
        float16x8_t v70 = (_WORD *)v62;
        do
        {
          LOBYTE(v47) = *(unsigned char *)(v65 + v68 + 1);
          float v71 = (float)LODWORD(v47) - v35;
          unsigned int v72 = LODWORD(v147);
          float v73 = v147 * v71;
          LOBYTE(v72) = *v69;
          float v74 = v36 * (float)((float)v72 - v34);
          float v75 = (float)(v147 * v71) + v74;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = (float)(v147 * v71) + v74;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          LOBYTE(v75) = *(unsigned char *)(v65 + v68);
          float v77 = (float)LODWORD(v75) - v35;
          float v78 = (float)(v145 * v71) + (float)(v77 * v146);
          float v79 = 8191.0;
          if ((float)(v74 + v78) <= 8191.0)
          {
            float v79 = v74 + v78;
            if ((float)(v74 + v78) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v144 * v77;
          float v81 = v80 + v74;
          BOOL v82 = (float)(v80 + v74) <= 8191.0;
          float v83 = 8191.0;
          if (v82)
          {
            float v83 = v81;
            if (v81 < 0.0) {
              float v83 = 0.0;
            }
          }
          LOBYTE(v81) = v69[1];
          float v84 = v36 * (float)((float)LODWORD(v81) - v34);
          float v85 = v73 + v84;
          BOOL v82 = (float)(v73 + v84) <= 8191.0;
          float v86 = 8191.0;
          if (v82)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v78 + v84;
          BOOL v82 = (float)(v78 + v84) <= 8191.0;
          float v88 = 8191.0;
          if (v82)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v80 + v84;
          BOOL v82 = (float)(v80 + v84) <= 8191.0;
          float v90 = 8191.0;
          if (v82)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H18 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S18, H18
          }
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          float v107 = (float)((float)(v49 * _S5) + (float)(_S4 * v46)) + (float)(_S6 * v48);
          float v108 = (float)((float)(v51 * _S5) + (float)(_S4 * v50)) + (float)(_S6 * v52);
          _S6 = (float)((float)(v54 * _S5) + (float)(_S4 * v53)) + (float)(_S6 * v55);
          float v110 = (float)((float)(v49 * _S18) + (float)(_S7 * v46)) + (float)(_S24 * v48);
          float v111 = (float)((float)(v51 * _S18) + (float)(_S7 * v50)) + (float)(_S24 * v52);
          float v112 = (float)((float)(v54 * _S18) + (float)(_S7 * v53)) + (float)(_S24 * v55);
          LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *((_WORD *)result + llroundf(fminf(fmaxf(v108, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          _H26 = *((_WORD *)result + llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          float v119 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          float v120 = v40;
          if (v119 <= v40)
          {
            float v120 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
            if (v119 < v38) {
              float v120 = v38;
            }
          }
          __asm
          {
            FCVT            S25, H7
            FCVT            S24, H24
            FCVT            S7, H26
          }
          float v124 = (float)((float)((float)(v44 * _S24) + (float)(v43 * _S25)) + (float)(v45 * _S7)) + v38;
          _WORD *v70 = llroundf(v120) << v67;
          float v125 = v40;
          if (v124 <= v40)
          {
            float v125 = (float)((float)((float)(v44 * _S24) + (float)(v43 * _S25)) + (float)(v45 * _S7)) + v38;
            if (v124 < v38) {
              float v125 = v38;
            }
          }
          v70[1] = llroundf(v125) << v67;
          float v126 = _S4 + _S25;
          float v127 = _S5 + _S24;
          float v128 = _S6 + _S7;
          float v129 = (float)((float)(v39 + (float)(v126 * v143)) + (float)(v127 * v142)) + (float)(v128 * v141);
          float v130 = v42;
          if (v129 <= v42)
          {
            float v130 = (float)((float)(v39 + (float)(v126 * v143)) + (float)(v127 * v142)) + (float)(v128 * v141);
            if (v129 < v41) {
              float v130 = v41;
            }
          }
          float v131 = (_WORD *)(v61 + 2 * v68);
          float v47 = (float)((float)(v39 + (float)(v126 * v140)) + (float)(v127 * v139)) + (float)(v128 * v138);
          *float v131 = llroundf(v130) << v67;
          float v132 = v42;
          if (v47 <= v42)
          {
            float v132 = v47;
            if (v47 < v41) {
              float v132 = v41;
            }
          }
          v131[1] = llroundf(v132) << v67;
          v68 += 2;
          v69 += 2;
          v70 += 2;
        }
        while (v11 > v68);
      }
      v66 += v23;
      v65 += v24;
      v62 += v28;
      v61 += v29;
      ++v10;
    }
    while (v10 != v14);
    if (v26 && v31)
    {
      uint64_t v133 = 0;
      do
      {
        if (v11)
        {
          unint64_t v134 = v11;
          uint32x4_t v135 = v32;
          float16x8_t v136 = v27;
          do
          {
            __int16 v137 = *v136++;
            *v135++ = v137 | (v137 << 8);
            --v134;
          }
          while (v134);
        }
        v27 += v25;
        v32 += v30;
        ++v133;
      }
      while (v133 != v14);
    }
    else if (v31)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v32, 255, 2 * v11);
        }
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_xf422_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_422vf_rgb_xf422_neon_fp16_GCD(void *result, uint64_t a2, double _D0)
{
  uint64_t v7 = *(void *)((char *)result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    uint64_t v11 = 0;
    unint64_t v12 = *(void *)((char *)result + 20);
    uint64_t v13 = *(void *)((char *)result + 36);
    unint64_t v14 = v9 + *(void *)((char *)result + 44);
    unint64_t v15 = v10 - v9;
    uint64_t v16 = result[14];
    uint64_t v17 = (uint64_t *)result[16];
    unint64_t v18 = result[13] * a2 / v8 + result[15];
    uint64_t v19 = (float32x2_t *)result[19];
    uint64_t v20 = (uint64_t *)result[7];
    uint64_t v21 = (uint64_t *)result[8];
    size_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v142 = v20[2];
    uint64_t v26 = (unsigned __int8 *)(v142 + v25 * v14 + v13);
    uint64_t v27 = *v22;
    uint64_t v28 = v22[1];
    uint64_t v29 = v22[2];
    uint64_t v30 = v17[2];
    uint64_t v31 = (char *)(v30 + v29 * v18 + 2 * v16);
    unsigned int v32 = v19[17].u16[2];
    unsigned int v33 = v19[17].u16[3];
    v34.i32[0] = v19[3].i32[1];
    unsigned int v35 = v19[18].u16[0];
    unsigned int v36 = v19[18].u16[1];
    unsigned int v37 = v19[18].u16[2];
    unsigned int v38 = v19[18].u16[3];
    unsigned int v39 = v19[19].u16[0];
    _S29 = v19[4].f32[1];
    LODWORD(_D0) = v19[5].i32[0];
    _S2 = v19[5].f32[1];
    v42.i32[0] = v19[6].i32[0];
    v44.i32[0] = v19[6].i32[1];
    v43.i32[0] = v19[7].i32[0];
    float v45 = (float)v32;
    *(short float *)v4.i16 = (short float)v32;
    v5.f32[0] = (float)v19[17].u32[0] / (float)v19[16].u32[0];
    float v46 = (float)v33;
    float v47 = (float)v35;
    float v48 = (float)v36;
    float v49 = (float)v37;
    _S16 = v5.f32[0] * v19->f32[0];
    float v147 = (float)v38;
    float v51 = (float)v39;
    __asm { FCVT            H8, S16 }
    float16x8_t v57 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v4.f32, 0);
    v34.i32[1] = v19[1].i32[0];
    *(float32x2_t *)v4.f32 = vmul_n_f32(v34, v5.f32[0]);
    float16x8_t v58 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    *(float32x2_t *)v5.f32 = vmul_n_f32(v19[2], v5.f32[0]);
    float16x8_t v59 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    short float v60 = -(short float)v33;
    float16x8_t v61 = vmulq_n_f16(v58, v60);
    float16x8_t v62 = vmulq_n_f16(v59, v60);
    __asm { FCVT            H7, S29 }
    short float v146 = _H7;
    v42.i32[1] = v19[7].i32[1];
    float v148 = *(float *)&_D0;
    __asm { FCVT            H15, S0 }
    *(float32x2_t *)v3.f32 = vmul_f32(v42, (float32x2_t)0x3F0000003F000000);
    *(double *)&v66.i64[1] = _D0;
    int32x4_t v65 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    v44.i32[1] = v19[8].i32[0];
    *(float32x2_t *)v66.f32 = vmul_f32(v44, (float32x2_t)0x3F0000003F000000);
    float16x8_t v67 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v66), 0);
    v43.i32[1] = v19[8].i32[1];
    *(float32x2_t *)v6.f32 = vmul_f32(v43, (float32x2_t)0x3F0000003F000000);
    int16x4_t v68 = (int16x4_t)vcvt_f16_f32(v6);
    int32x4_t v69 = vdupq_lane_s32((int32x2_t)v68, 0);
    *(short float *)v68.i16 = (short float)v35;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(v68, 0);
    *(short float *)v68.i16 = (short float)v36;
    int16x8_t v71 = vdupq_lane_s16(v68, 0);
    *(short float *)v68.i16 = (short float)v37;
    float16x8_t v72 = (float16x8_t)vdupq_lane_s16(v68, 0);
    *(short float *)v68.i16 = (short float)v38;
    float16x8_t v73 = (float16x8_t)vdupq_lane_s16(v68, 0);
    *(short float *)v68.i16 = (short float)v39;
    float16x8_t v74 = (float16x8_t)vdupq_lane_s16(v68, 0);
    unsigned int v75 = v19[16].u8[4];
    if (v75 >= 0x11) {
      unsigned __int8 v76 = 0;
    }
    else {
      unsigned __int8 v76 = 16 - v75;
    }
    uint64_t v78 = *v17;
    uint64_t v77 = v17[1];
    uint64_t v79 = v77 + v28 * v18 + 2 * v16;
    if (!v77) {
      uint64_t v79 = 0;
    }
    uint64_t result = (void *)(v78 + v27 * v18 + 2 * v16);
    uint64_t v81 = *v20;
    uint64_t v80 = v20[1];
    BOOL v82 = (__int8 *)(v80 + v24 * v14 + v13);
    if (!v80) {
      BOOL v82 = 0;
    }
    float v83 = (int8x8_t *)(v81 + v23 * v14 + v13);
    __asm { FCVT            H1, S2 }
    uint16x8_t v85 = (uint16x8_t)vdupq_n_s16(v76);
    uint64_t v86 = v4.i64[0];
    float v87 = (float)v38;
    uint64_t v88 = v5.i64[0];
    float v89 = _S29;
    float v161 = v66.f32[1];
    v90.i32[0] = v6.i32[1];
    float16x8_t v160 = v58;
    float16x8_t v158 = v61;
    float16x8_t v159 = v59;
    int32x4_t v156 = v65;
    float16x8_t v157 = v62;
    int32x4_t v154 = v69;
    float16x8_t v155 = v67;
    float16x8_t v152 = v72;
    int16x8_t v153 = v71;
    float16x8_t v150 = v74;
    float16x8_t v151 = v73;
    short float v149 = _H1;
    __int32 v144 = v66.i32[0];
    __int32 v145 = v3.i32[0];
    float v143 = _S29;
    do
    {
      if ((int)v12 < 8)
      {
        unint64_t v114 = 0;
        short float v94 = (uint16x8_t *)v79;
        short float v93 = (int32x4_t *)result;
        int8x8_t v113 = v82;
        float v92 = v83;
      }
      else
      {
        uint64_t v91 = 0;
        float v92 = v83;
        short float v93 = (int32x4_t *)result;
        short float v94 = (uint16x8_t *)v79;
        float16x8_t v95 = (float16x8_t)v65;
        float16x8_t v96 = (float16x8_t)v69;
        float16x8_t v97 = (float16x8_t)v71;
        do
        {
          int8x8_t v98 = *(int8x8_t *)&v82[v91];
          *(int8x8_t *)v99.i8 = vzip1_s8(v98, 0);
          v99.u64[1] = (unint64_t)vzip2_s8(v98, 0);
          float16x8_t v100 = vcvtq_f16_u16(v99);
          int16x8_t v101 = (int16x8_t)vmlaq_f16(v61, v58, v100);
          int8x16_t v102 = (int8x16_t)vmlaq_f16(v62, v59, v100);
          v100.i64[0] = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u64[0];
          *(int16x4_t *)v103.i8 = vuzp1_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8);
          *(int16x4_t *)v100.i8 = vuzp2_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8);
          v100.i64[1] = v74.i64[0];
          v101.i64[0] = vextq_s8(v102, v102, 8uLL).u64[0];
          v103.i64[1] = v74.i64[0];
          *(float16x4_t *)v101.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v101.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v101.i8));
          int8x8_t v104 = *v92++;
          v101.i64[1] = v74.i64[0];
          *(int8x8_t *)v105.i8 = vzip1_s8(v104, 0);
          v105.u64[1] = (unint64_t)vzip2_s8(v104, 0);
          float16x8_t v106 = (float16x8_t)vzip1q_s16(v103, v103);
          float16x8_t v107 = vsubq_f16(vcvtq_f16_u16(v105), v57);
          float16x8_t v108 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v100, (int16x8_t)v100), v107, _H8);
          float16x8_t v109 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v101, v101), v107, _H8);
          float16x8_t v110 = vmlaq_n_f16(v106, v107, _H8);
          float16x8_t v111 = vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v70, v108, v146), v109, _H15), v110, _H1), v70), v72);
          int16x8_t v112 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v108, (int16x8_t)v109), (float16x8_t)vuzp2q_s16((int16x8_t)v108, (int16x8_t)v109));
          int32x4_t v65 = (int32x4_t)vshlq_u16(vcvtq_u16_f16(v111), v85);
          *v93++ = v65;
          uint16x8_t v90 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v97, v95, (float16x8_t)vzip1q_s16(v112, v112)), v67, (float16x8_t)vzip2q_s16(v112, v112)), v96, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v110, (int16x8_t)v110), (float16x8_t)vtrn2q_s16((int16x8_t)v110, (int16x8_t)v110))), v73), v74)), v85);
          *v94++ = v90;
          v91 += 8;
        }
        while ((int)v91 < (int)v12 - 7);
        int8x8_t v113 = &v82[v91];
        unint64_t v114 = v12 & 0xFFFFFFF8;
        v66.i32[0] = v144;
        v3.i32[0] = v145;
        float v87 = v147;
        float v89 = v143;
      }
      while (v12 > v114)
      {
        float16x8_t v115 = v57;
        v90.i8[0] = *v113;
        *(float *)&unsigned int v116 = (float)v90.u32[0] - v46;
        v65.i8[0] = v113[1];
        float v117 = (float)v65.u32[0] - v46;
        float v118 = *((float *)&v86 + 1) * v117;
        float v119 = (float)(*((float *)&v88 + 1) * v117) + (float)(*(float *)&v116 * *(float *)&v88);
        float v120 = *(float *)&v86 * *(float *)&v116;
        LOBYTE(v116) = v92->i8[0];
        float v121 = _S16 * (float)((float)v116 - v45);
        float v122 = (float)(*((float *)&v86 + 1) * v117) + v121;
        *(float *)v65.i32 = v121 + v119;
        float v123 = v120 + v121;
        float v124 = (float)((float)((float)(v148 * (float)(v121 + v119)) + (float)(v89 * (float)(v118 + v121)))
                     + (float)(_S2 * (float)(v120 + v121)))
             + v47;
        *(float *)v90.i32 = v49;
        if (v124 <= v49)
        {
          *(float *)v90.i32 = v124;
          if (v124 < v47) {
            *(float *)v90.i32 = v47;
          }
        }
        LOBYTE(v124) = v92->i8[1];
        float v125 = _S16 * (float)((float)LODWORD(v124) - v45);
        float v126 = v118 + v125;
        float v127 = v119 + v125;
        float v128 = v120 + v125;
        float v129 = (float)((float)((float)(v148 * v127) + (float)(v89 * v126)) + (float)(_S2 * (float)(v120 + v125))) + v47;
        v93->i16[0] = llroundf(*(float *)v90.i32) << v76;
        float v130 = v49;
        if (v129 <= v49)
        {
          float v130 = v129;
          if (v129 < v47) {
            float v130 = v47;
          }
        }
        v93->i16[1] = llroundf(v130) << v76;
        float v131 = v122 + v126;
        float v132 = *(float *)v65.i32 + v127;
        float v133 = (float)(v48 + (float)((float)(v122 + v126) * v3.f32[0])) + (float)(v132 * v66.f32[0]);
        float v134 = v123 + v128;
        float v135 = v133 + (float)((float)(v123 + v128) * v6.f32[0]);
        float v136 = v51;
        if (v135 <= v51)
        {
          float v136 = v135;
          if (v135 < v87) {
            float v136 = v87;
          }
        }
        *(float *)v90.i32 = (float)((float)(v48 + (float)(v131 * v3.f32[1])) + (float)(v132 * v161))
                          + (float)(v134 * v6.f32[1]);
        v94->i16[0] = llroundf(v136) << v76;
        *(float *)v65.i32 = v51;
        float16x8_t v57 = v115;
        if (*(float *)v90.i32 <= v51)
        {
          v65.i32[0] = v90.i32[0];
          if (*(float *)v90.i32 < v87) {
            *(float *)v65.i32 = v87;
          }
        }
        v114 += 2;
        v113 += 2;
        v94->i16[1] = llroundf(*(float *)v65.i32) << v76;
        float v92 = (int8x8_t *)((char *)v92 + 2);
        short float v93 = (int32x4_t *)((char *)v93 + 4);
        short float v94 = (uint16x8_t *)((char *)v94 + 4);
      }
      float v83 = (int8x8_t *)((char *)v83 + v23);
      v82 += v24;
      uint64_t result = (void *)((char *)result + v27);
      v79 += v28;
      ++v11;
      float16x8_t v58 = v160;
      float16x8_t v61 = v158;
      float16x8_t v59 = v159;
      int32x4_t v65 = v156;
      float16x8_t v62 = v157;
      int32x4_t v69 = v154;
      float16x8_t v67 = v155;
      float16x8_t v72 = v152;
      int16x8_t v71 = v153;
      float16x8_t v74 = v150;
      float16x8_t v73 = v151;
      _H1 = v149;
    }
    while (v11 != v15);
    if (v142 && v30)
    {
      uint64_t v137 = 0;
      do
      {
        if (v12)
        {
          unint64_t v138 = v12;
          float v139 = v31;
          float v140 = v26;
          do
          {
            __int16 v141 = *v140++;
            *v139++ = v141 | (v141 << 8);
            --v138;
          }
          while (v138);
        }
        v26 += v25;
        v31 += v29;
        ++v137;
      }
      while (v137 != v15);
    }
    else if (v30)
    {
      do
      {
        if (v12) {
          uint64_t result = memset(v31, 255, 2 * v12);
        }
        v31 += v29;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_xf422_GCD);
  return 0;
}

void *vt_Copy_422vf_rgb_xf422_GCD(void *result, uint64_t a2)
{
  uint64_t v7 = *(void *)((char *)result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    uint64_t v11 = 0;
    unint64_t v12 = *(void *)((char *)result + 20);
    uint64_t v13 = *(void *)((char *)result + 36);
    unint64_t v14 = v9 + *(void *)((char *)result + 44);
    unint64_t v15 = v10 - v9;
    uint64_t v16 = result[14];
    uint64_t v17 = (uint64_t *)result[16];
    unint64_t v18 = result[13] * a2 / v8 + result[15];
    uint64_t v19 = result[19];
    uint64_t v20 = (uint64_t *)result[7];
    uint64_t v21 = (uint64_t *)result[8];
    size_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v26 = v20[2];
    uint64_t v27 = (unsigned __int8 *)(v26 + v25 * v14 + v13);
    uint64_t v28 = *v22;
    uint64_t v29 = v22[1];
    uint64_t v30 = v22[2];
    uint64_t v31 = v17[2];
    uint64_t v32 = (char *)(v31 + v30 * v18 + 2 * v16);
    *(float *)&unsigned int v33 = (float)*(unsigned int *)(v19 + 128);
    *(float *)&unsigned int v34 = (float)*(unsigned int *)(v19 + 136);
    float v35 = *(float *)&v34 / *(float *)&v33;
    LOWORD(v33) = *(_WORD *)(v19 + 140);
    float v36 = (float)v33;
    LOWORD(v34) = *(_WORD *)(v19 + 142);
    float v37 = (float)v34;
    float v38 = v35 * *(float *)v19;
    float v39 = v35 * *(float *)(v19 + 8);
    float v40 = v35 * *(float *)(v19 + 16);
    float v41 = v35 * *(float *)(v19 + 20);
    float v42 = *(float *)(v19 + 28);
    float v43 = v35 * v42;
    LOWORD(v42) = *(_WORD *)(v19 + 144);
    float v44 = (float)LODWORD(v42);
    LOWORD(v2) = *(_WORD *)(v19 + 146);
    float v45 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v19 + 148);
    float v46 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v19 + 150);
    float v47 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v19 + 152);
    float v48 = (float)v5;
    float v49 = *(float *)(v19 + 36);
    float v50 = *(float *)(v19 + 40);
    float v51 = *(float *)(v19 + 44);
    float v52 = *(float *)(v19 + 48) * 0.5;
    float v53 = *(float *)(v19 + 52) * 0.5;
    float v54 = *(float *)(v19 + 56) * 0.5;
    float v55 = *(float *)(v19 + 60) * 0.5;
    float v56 = *(float *)(v19 + 64) * 0.5;
    float v57 = *(float *)(v19 + 68);
    float v58 = v57 * 0.5;
    unsigned int v59 = *(unsigned __int8 *)(v19 + 132);
    char v60 = 16 - v59;
    if (v59 >= 0x11) {
      char v60 = 0;
    }
    uint64_t v62 = *v17;
    uint64_t v61 = v17[1];
    uint64_t v63 = v61 + v29 * v18 + 2 * v16;
    if (!v61) {
      uint64_t v63 = 0;
    }
    uint64_t result = (void *)(v62 + v28 * v18 + 2 * v16);
    uint64_t v65 = *v20;
    uint64_t v64 = v20[1];
    uint64_t v66 = v64 + v24 * v14 + v13;
    if (!v64) {
      uint64_t v66 = 0;
    }
    float16x8_t v67 = (unsigned char *)(v65 + v23 * v14 + v13);
    char v68 = v60;
    do
    {
      if (v12)
      {
        unint64_t v69 = 0;
        float16x8_t v70 = v67;
        int16x8_t v71 = result;
        do
        {
          LOBYTE(v57) = *(unsigned char *)(v66 + v69);
          *(float *)&unsigned int v72 = (float)LODWORD(v57) - v37;
          LOBYTE(v6) = *(unsigned char *)(v66 + v69 + 1);
          float v73 = (float)LODWORD(v6) - v37;
          float v74 = v39 * v73;
          float v75 = (float)(v41 * v73) + (float)(*(float *)&v72 * v40);
          float v76 = v43 * *(float *)&v72;
          LOBYTE(v72) = *v70;
          float v77 = v38 * (float)((float)v72 - v36);
          float v78 = (float)(v39 * v73) + v77;
          float v79 = v77 + v75;
          float v80 = v76 + v77;
          float v81 = (float)((float)((float)(v50 * v79) + (float)(v49 * v78)) + (float)(v51 * v80)) + v44;
          float v82 = v46;
          if (v81 <= v46)
          {
            float v82 = (float)((float)((float)(v50 * v79) + (float)(v49 * v78)) + (float)(v51 * v80)) + v44;
            if (v81 < v44) {
              float v82 = v44;
            }
          }
          LOBYTE(v81) = v70[1];
          float v83 = v38 * (float)((float)LODWORD(v81) - v36);
          float v84 = v74 + v83;
          float v85 = v75 + v83;
          float v86 = v76 + v83;
          float v87 = (float)((float)((float)(v50 * v85) + (float)(v49 * v84)) + (float)(v51 * (float)(v76 + v83))) + v44;
          _WORD *v71 = llroundf(v82) << v68;
          float v88 = v46;
          if (v87 <= v46)
          {
            float v88 = v87;
            if (v87 < v44) {
              float v88 = v44;
            }
          }
          v71[1] = llroundf(v88) << v68;
          float v89 = v78 + v84;
          float v90 = v79 + v85;
          float v91 = v80 + v86;
          float v92 = (float)((float)(v45 + (float)(v89 * v52)) + (float)(v90 * v53)) + (float)(v91 * v54);
          float v93 = v48;
          if (v92 <= v48)
          {
            float v93 = (float)((float)(v45 + (float)(v89 * v52)) + (float)(v90 * v53)) + (float)(v91 * v54);
            if (v92 < v47) {
              float v93 = v47;
            }
          }
          short float v94 = (_WORD *)(v63 + 2 * v69);
          float v57 = (float)((float)(v45 + (float)(v89 * v55)) + (float)(v90 * v56)) + (float)(v91 * v58);
          *short float v94 = llroundf(v93) << v68;
          float v6 = v48;
          if (v57 <= v48)
          {
            float v6 = v57;
            if (v57 < v47) {
              float v6 = v47;
            }
          }
          v94[1] = llroundf(v6) << v68;
          v69 += 2;
          v70 += 2;
          v71 += 2;
        }
        while (v12 > v69);
      }
      v67 += v23;
      v66 += v24;
      uint64_t result = (void *)((char *)result + v28);
      v63 += v29;
      ++v11;
    }
    while (v11 != v15);
    if (v26 && v31)
    {
      uint64_t v95 = 0;
      do
      {
        if (v12)
        {
          unint64_t v96 = v12;
          float16x8_t v97 = v32;
          int8x8_t v98 = v27;
          do
          {
            __int16 v99 = *v98++;
            *v97++ = v99 | (v99 << 8);
            --v96;
          }
          while (v96);
        }
        v27 += v25;
        v32 += v30;
        ++v95;
      }
      while (v95 != v15);
    }
    else if (v31)
    {
      do
      {
        if (v12) {
          uint64_t result = memset(v32, 255, 2 * v12);
        }
        v32 += v30;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Tone_Mat_TRC_v216_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  uint64_t v10 = (void *)result[16];
  unint64_t v11 = result[13] * a2 / v6 + result[15];
  uint64_t v12 = (uint64_t *)result[17];
  uint64_t v13 = v12[1];
  uint64_t v14 = v10[1];
  uint64_t v15 = (char *)(v14 + v13 * v11 + 2 * v9);
  unint64_t v16 = v8 / v6;
  if (v14) {
    uint64_t v17 = v14 + v13 * v11 + 2 * v9;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16 != v7)
  {
    uint64_t v18 = 0;
    unint64_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    unint64_t v21 = v7 + *(void *)((char *)result + 44);
    unint64_t v22 = v16 - v7;
    uint64_t v23 = result[19];
    uint64_t v24 = (void *)result[7];
    uint64_t v25 = (uint64_t *)result[8];
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = v25[2];
    uint64_t v29 = v24[2];
    uint64_t v30 = (unsigned __int8 *)(v29 + v28 * v21 + v20);
    uint64_t v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    float v33 = (float)LODWORD(a5);
    float v168 = v32 * *(float *)v23;
    float v169 = (float)LODWORD(a4);
    float v166 = v32 * *(float *)(v23 + 16);
    float v167 = v32 * *(float *)(v23 + 8);
    float v34 = v32 * *(float *)(v23 + 20);
    *(float *)&unsigned int v35 = v32 * *(float *)(v23 + 28);
    float v164 = *(float *)&v35;
    float v165 = v34;
    LOWORD(v35) = *(_WORD *)(v23 + 144);
    float v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 146);
    float v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 148);
    float v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 150);
    float v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 152);
    float v40 = (float)v35;
    float v41 = *(float *)(v23 + 36);
    float v42 = *(float *)(v23 + 40);
    float v43 = *(float *)(v23 + 44);
    float v162 = *(float *)(v23 + 48) * 0.5;
    float v163 = v37;
    float v160 = *(float *)(v23 + 56) * 0.5;
    float v161 = *(float *)(v23 + 52) * 0.5;
    float v158 = *(float *)(v23 + 64) * 0.5;
    float v159 = *(float *)(v23 + 60) * 0.5;
    float v44 = *(float *)(v23 + 72);
    float v45 = *(float *)(v23 + 68) * 0.5;
    float v157 = v45;
    float v47 = *(float *)(v23 + 76);
    float v46 = *(float *)(v23 + 80);
    float v48 = *(float *)(v23 + 84);
    float v49 = *(float *)(v23 + 88);
    float v50 = *(float *)(v23 + 92);
    float v51 = *(float *)(v23 + 96);
    float v52 = *(float *)(v23 + 100);
    float v53 = *(float *)(v23 + 104);
    uint64_t v54 = v23 + 164;
    uint64_t v55 = v23 + 16548;
    uint64_t result = (void *)(v23 + 32932);
    uint64_t v56 = *v10 + v31 * v11 + 2 * v9;
    uint64_t v57 = v24[1];
    _ZF = v57 == 0;
    uint64_t v59 = v57 + v27 * v21 + v20;
    if (_ZF) {
      uint64_t v59 = 0;
    }
    char v60 = (unsigned char *)(*v24 + v26 * v21 + v20);
    float v62 = *(float *)(v23 + 108);
    float v61 = *(float *)(v23 + 112);
    float v63 = *(float *)(v23 + 116);
    float v64 = *(float *)(v23 + 120);
    do
    {
      if (v19)
      {
        unint64_t v65 = 0;
        uint64_t v66 = v60;
        float16x8_t v67 = (_DWORD *)v17;
        char v68 = (_WORD *)v56;
        do
        {
          LOBYTE(v45) = *(unsigned char *)(v59 + v65 + 1);
          float v69 = (float)LODWORD(v45) - v33;
          unsigned int v70 = LODWORD(v167);
          float v71 = v167 * v69;
          LOBYTE(v70) = *v66;
          float v72 = v168 * (float)((float)v70 - v169);
          float v73 = (float)(v167 * v69) + v72;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = (float)(v167 * v69) + v72;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          LOBYTE(v73) = *(unsigned char *)(v59 + v65);
          float v75 = v33;
          float v76 = (float)LODWORD(v73) - v33;
          float v77 = (float)(v165 * v69) + (float)(v76 * v166);
          float v78 = 8191.0;
          if ((float)(v72 + v77) <= 8191.0)
          {
            float v78 = v72 + v77;
            if ((float)(v72 + v77) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v164 * v76;
          float v80 = (float)(v164 * v76) + v72;
          float v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          LOBYTE(v80) = v66[1];
          float v82 = v168 * (float)((float)LODWORD(v80) - v169);
          float v83 = v71 + v82;
          BOOL v84 = (float)(v71 + v82) <= 8191.0;
          float v85 = 8191.0;
          if (v84)
          {
            float v85 = v83;
            if (v83 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v77 + v82;
          BOOL v84 = (float)(v77 + v82) <= 8191.0;
          float v87 = 8191.0;
          if (v84)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v79 + v82;
          BOOL v84 = (float)(v79 + v82) <= 8191.0;
          float v89 = 8191.0;
          if (v84)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H1 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          float v102 = (float)((float)((float)(v61 * _S25) + (float)(v62 * _S24)) + (float)(v63 * _S26))
               + (float)(v64 * fmaxf(_S24, fmaxf(_S25, _S26)));
          float v103 = 8191.0;
          if (v102 <= 8191.0)
          {
            float v103 = v102;
            if (v102 < 0.0) {
              float v103 = 0.0;
            }
          }
          __asm
          {
            FCVT            S28, H1
            FCVT            S30, H27
            FCVT            S1, H2
          }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(v103));
          __asm { FCVT            S0, H0 }
          float v109 = _S24 * _S0;
          float v110 = _S25 * _S0;
          float v111 = _S26 * _S0;
          float v112 = (float)((float)((float)(v61 * _S30) + (float)(v62 * _S28)) + (float)(v63 * _S1))
               + (float)(v64 * fmaxf(_S28, fmaxf(_S30, _S1)));
          float v113 = 8191.0;
          if (v112 <= 8191.0)
          {
            float v113 = v112;
            if (v112 < 0.0) {
              float v113 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(v113));
          __asm { FCVT            S0, H0 }
          float v116 = _S28 * _S0;
          float v117 = _S30 * _S0;
          float v118 = _S1 * _S0;
          _S1 = (float)((float)(v47 * v110) + (float)(v109 * v44)) + (float)(v111 * v46);
          float v120 = (float)((float)(v49 * v110) + (float)(v109 * v48)) + (float)(v111 * v50);
          _S24 = (float)((float)(v52 * v110) + (float)(v109 * v51)) + (float)(v111 * v53);
          float v122 = (float)(v47 * v117) + (float)(v116 * v44);
          float v123 = (float)(v49 * v117) + (float)(v116 * v48);
          _S2 = (float)(v52 * v117) + (float)(v116 * v51);
          _S25 = v122 + (float)(v118 * v46);
          float v126 = v123 + (float)(v118 * v50);
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          float v127 = _S2 + (float)(v118 * v53);
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S24) = *((_WORD *)result + llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          LOWORD(_S24) = *((_WORD *)result + llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *((_WORD *)result + llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          unsigned int v133 = llroundf(fminf(fmaxf(v127, 0.0), 8191.0));
          float v134 = (float)(v42 * _S2) + (float)(v41 * _S1);
          _S1 = _S1 + _S24;
          float v136 = _S2 + _S25;
          float v137 = (float)(v163 + (float)(_S1 * v162)) + (float)(v136 * v161);
          float v138 = (float)(v163 + (float)(_S1 * v159)) + (float)(v136 * v158);
          LOWORD(_S1) = *((_WORD *)result + v133);
          __asm { FCVT            S1, H1 }
          float v140 = v134 + (float)(v43 * _S27);
          float v141 = _S27 + _S1;
          float v142 = v137 + (float)(v141 * v160);
          float v143 = v138 + (float)(v141 * v157);
          if (v142 < v36) {
            float v144 = v36;
          }
          else {
            float v144 = v142;
          }
          float v145 = v140 + v36;
          if (v142 <= v38) {
            float v146 = v144;
          }
          else {
            float v146 = v38;
          }
          __int16 v147 = llroundf(v146);
          if (v145 < v39) {
            float v148 = v39;
          }
          else {
            float v148 = v145;
          }
          *char v68 = v147;
          if (v145 <= v40) {
            float v149 = v148;
          }
          else {
            float v149 = v40;
          }
          v68[1] = llroundf(v149);
          float v150 = v38;
          if (v143 <= v38)
          {
            float v150 = v143;
            if (v143 < v36) {
              float v150 = v36;
            }
          }
          float v151 = (float)((float)((float)(v42 * _S25) + (float)(v41 * _S24)) + (float)(v43 * _S1)) + v36;
          v68[2] = llroundf(v150);
          float v45 = v40;
          if (v151 <= v40)
          {
            float v45 = v151;
            if (v151 < v39) {
              float v45 = v39;
            }
          }
          v68[3] = llroundf(v45);
          float v33 = v75;
          if (v67) {
            *v67++ = 0;
          }
          v65 += 2;
          v66 += 2;
          v68 += 4;
        }
        while (v19 > v65);
      }
      v60 += v26;
      v59 += v27;
      v56 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      uint64_t v152 = 0;
      do
      {
        if (v19)
        {
          unint64_t v153 = v19;
          int32x4_t v154 = v15;
          float16x8_t v155 = v30;
          do
          {
            __int16 v156 = *v155++;
            *v154++ = v156 | (v156 << 8);
            --v153;
          }
          while (v153);
        }
        v30 += v28;
        v15 += v13;
        ++v152;
      }
      while (v152 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19) {
          uint64_t result = memset(v15, 255, 2 * v19);
        }
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_v216_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Mat_TRC_v216_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = v6 + v6 * a2;
  uint64_t v10 = result[14];
  uint64_t v11 = (void *)result[16];
  unint64_t v12 = result[13] * a2 / v7 + result[15];
  uint64_t v13 = (uint64_t *)result[17];
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (char *)(v15 + v14 * v12 + 2 * v10);
  unint64_t v17 = v9 / v7;
  if (v15) {
    uint64_t v18 = v15 + v14 * v12 + 2 * v10;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17 != v8)
  {
    uint64_t v19 = 0;
    unint64_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    unint64_t v22 = v8 + *(void *)((char *)result + 44);
    unint64_t v23 = v17 - v8;
    uint64_t v24 = result[19];
    uint64_t v25 = (void *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = (unsigned __int8 *)(v30 + v29 * v22 + v21);
    uint64_t v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v24;
    float v145 = v33 * *(float *)(v24 + 16);
    float v146 = v33 * *(float *)(v24 + 8);
    float v143 = v33 * *(float *)(v24 + 28);
    *(float *)&unsigned int v37 = v143;
    float v144 = v33 * *(float *)(v24 + 20);
    LOWORD(v37) = *(_WORD *)(v24 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 152);
    float v42 = (float)v37;
    float v43 = *(float *)(v24 + 36);
    float v44 = *(float *)(v24 + 40);
    float v45 = *(float *)(v24 + 44);
    float v141 = *(float *)(v24 + 52) * 0.5;
    float v142 = *(float *)(v24 + 48) * 0.5;
    float v139 = *(float *)(v24 + 60) * 0.5;
    float v140 = *(float *)(v24 + 56) * 0.5;
    float v46 = *(float *)(v24 + 64) * 0.5;
    float v47 = *(float *)(v24 + 68);
    float v48 = *(float *)(v24 + 72);
    float v49 = v47 * 0.5;
    float v51 = *(float *)(v24 + 76);
    float v50 = *(float *)(v24 + 80);
    float v52 = *(float *)(v24 + 84);
    float v53 = *(float *)(v24 + 88);
    float v54 = *(float *)(v24 + 92);
    float v55 = *(float *)(v24 + 96);
    float v56 = *(float *)(v24 + 100);
    float v57 = *(float *)(v24 + 104);
    uint64_t v58 = v24 + 16548;
    uint64_t v59 = v24 + 164;
    uint64_t result = (void *)(*v11 + v32 * v12 + 2 * v10);
    uint64_t v60 = v25[1];
    if (v60) {
      uint64_t v61 = v60 + v28 * v22 + v21;
    }
    else {
      uint64_t v61 = 0;
    }
    float v62 = (unsigned char *)(*v25 + v27 * v22 + v21);
    do
    {
      if (v20)
      {
        unint64_t v63 = 0;
        float v64 = v62;
        unint64_t v65 = (_DWORD *)v18;
        uint64_t v66 = result;
        do
        {
          LOBYTE(v47) = *(unsigned char *)(v61 + v63 + 1);
          float v67 = (float)LODWORD(v47) - v35;
          unsigned int v68 = LODWORD(v146);
          float v69 = v146 * v67;
          LOBYTE(v68) = *v64;
          float v70 = v36 * (float)((float)v68 - v34);
          float v71 = (float)(v146 * v67) + v70;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = (float)(v146 * v67) + v70;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          LOBYTE(v71) = *(unsigned char *)(v61 + v63);
          float v73 = (float)LODWORD(v71) - v35;
          float v74 = (float)(v144 * v67) + (float)(v73 * v145);
          float v75 = 8191.0;
          if ((float)(v70 + v74) <= 8191.0)
          {
            float v75 = v70 + v74;
            if ((float)(v70 + v74) < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v143 * v73;
          float v77 = v76 + v70;
          BOOL v78 = (float)(v76 + v70) <= 8191.0;
          float v79 = 8191.0;
          if (v78)
          {
            float v79 = v77;
            if (v77 < 0.0) {
              float v79 = 0.0;
            }
          }
          LOBYTE(v77) = v64[1];
          float v80 = v36 * (float)((float)LODWORD(v77) - v34);
          float v81 = v69 + v80;
          float v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v74 + v80;
          BOOL v78 = (float)(v74 + v80) <= 8191.0;
          float v84 = 8191.0;
          if (v78)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v76 + v80;
          BOOL v78 = (float)(v76 + v80) <= 8191.0;
          float v86 = 8191.0;
          if (v78)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          unsigned int v101 = llroundf(fminf(fmaxf(v86, 0.0), 8191.0));
          _S25 = (float)((float)(v51 * _S5) + (float)(_S4 * v48)) + (float)(_S6 * v50);
          float v103 = (float)((float)(v53 * _S5) + (float)(_S4 * v52)) + (float)(_S6 * v54);
          _S4 = (float)((float)(v56 * _S5) + (float)(_S4 * v55)) + (float)(_S6 * v57);
          float v105 = (float)(v51 * _S24) + (float)(_S7 * v48);
          float v106 = (float)(v53 * _S24) + (float)(_S7 * v52);
          float v107 = (float)(v56 * _S24) + (float)(_S7 * v55);
          LOWORD(_S24) = *(_WORD *)(v59 + 2 * v101);
          __asm { FCVT            S24, H24 }
          _S5 = v105 + (float)(_S24 * v50);
          float v110 = v106 + (float)(_S24 * v54);
          LOWORD(_S25) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          float v111 = v107 + (float)(_S24 * v57);
          __asm { FCVT            S24, H25 }
          LOWORD(_S25) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          LOWORD(_S4) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S26, H4 }
          LOWORD(_S4) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          unsigned int v117 = llroundf(fminf(fmaxf(v111, 0.0), 8191.0));
          float v118 = (float)(v44 * _S25) + (float)(v43 * _S24);
          _S6 = _S24 + _S4;
          float v120 = _S25 + _S5;
          float v121 = (float)(v39 + (float)((float)(_S24 + _S4) * v142)) + (float)(v120 * v141);
          float v122 = (float)(v39 + (float)(_S6 * v139)) + (float)(v120 * v46);
          LOWORD(_S6) = *(_WORD *)(v58 + 2 * v117);
          __asm { FCVT            S6, H6 }
          float v124 = v118 + (float)(v45 * _S26);
          float v125 = v121 + (float)((float)(_S26 + _S6) * v140);
          float v126 = v122 + (float)((float)(_S26 + _S6) * v49);
          if (v125 < v38) {
            float v127 = v38;
          }
          else {
            float v127 = v125;
          }
          BOOL v78 = v125 <= v40;
          float v128 = v124 + v38;
          if (!v78) {
            float v127 = v40;
          }
          __int16 v129 = llroundf(v127);
          if (v128 < v41) {
            float v130 = v41;
          }
          else {
            float v130 = v124 + v38;
          }
          *uint64_t v66 = v129;
          if (v128 <= v42) {
            float v131 = v130;
          }
          else {
            float v131 = v42;
          }
          v66[1] = llroundf(v131);
          float v132 = v40;
          if (v126 <= v40)
          {
            float v132 = v126;
            if (v126 < v38) {
              float v132 = v38;
            }
          }
          float v47 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          v66[2] = llroundf(v132);
          float v133 = v42;
          if (v47 <= v42)
          {
            float v133 = v47;
            if (v47 < v41) {
              float v133 = v41;
            }
          }
          v66[3] = llroundf(v133);
          if (v65) {
            *v65++ = 0;
          }
          v63 += 2;
          v64 += 2;
          v66 += 4;
        }
        while (v20 > v63);
      }
      v62 += v27;
      v61 += v28;
      uint64_t result = (void *)((char *)result + v32);
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      uint64_t v134 = 0;
      do
      {
        if (v20)
        {
          unint64_t v135 = v20;
          float v136 = v16;
          float v137 = v31;
          do
          {
            __int16 v138 = *v137++;
            *v136++ = v138 | (v138 << 8);
            --v135;
          }
          while (v135);
        }
        v31 += v29;
        v16 += v14;
        ++v134;
      }
      while (v134 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          uint64_t result = memset(v16, 255, 2 * v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_v216_GCD);
  return 0;
}

void *vt_Copy_422vf_rgb_v216_GCD(void *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v14 = *(void *)((char *)result + 28);
  unint64_t v15 = *(unsigned __int8 *)result;
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = v14 + v14 * a2;
  uint64_t v18 = result[14];
  uint64_t v19 = (void *)result[16];
  unint64_t v20 = result[13] * a2 / v15 + result[15];
  uint64_t v21 = (uint64_t *)result[17];
  uint64_t v22 = v21[1];
  uint64_t v23 = v19[1];
  uint64_t v24 = (char *)(v23 + v22 * v20 + 2 * v18);
  unint64_t v25 = v17 / v15;
  if (v23) {
    uint64_t v26 = v23 + v22 * v20 + 2 * v18;
  }
  else {
    uint64_t v26 = 0;
  }
  if (v25 != v16)
  {
    uint64_t v27 = 0;
    unint64_t v28 = *(void *)((char *)result + 20);
    uint64_t v29 = *(void *)((char *)result + 36);
    unint64_t v30 = v16 + *(void *)((char *)result + 44);
    unint64_t v31 = v25 - v16;
    uint64_t v32 = result[19];
    uint64_t v33 = (void *)result[7];
    uint64_t v34 = (uint64_t *)result[8];
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    uint64_t v37 = v34[2];
    uint64_t v38 = v33[2];
    LOWORD(a6) = *(_WORD *)(v32 + 140);
    LOWORD(a7) = *(_WORD *)(v32 + 142);
    float v39 = *(float *)v32;
    float v40 = (float)*(unsigned int *)(v32 + 136) / (float)*(unsigned int *)(v32 + 128);
    float v41 = *(float *)(v32 + 8);
    float v42 = *(float *)(v32 + 16);
    float v43 = *(float *)(v32 + 20);
    float v44 = *(float *)(v32 + 28);
    LOWORD(v9) = *(_WORD *)(v32 + 144);
    LOWORD(v10) = *(_WORD *)(v32 + 146);
    LOWORD(v11) = *(_WORD *)(v32 + 148);
    LOWORD(v12) = *(_WORD *)(v32 + 150);
    LOWORD(v13) = *(_WORD *)(v32 + 152);
    float v45 = *(float *)(v32 + 36);
    float v46 = *(float *)(v32 + 40);
    float v47 = *(float *)(v32 + 44);
    float v48 = *(float *)(v32 + 48);
    float v49 = *(float *)(v32 + 52);
    float v50 = *(float *)(v32 + 56);
    float v51 = *(float *)(v32 + 60);
    float v52 = *(float *)(v32 + 64);
    float v53 = *(float *)(v32 + 68);
    float v54 = (unsigned __int8 *)(v38 + v37 * v30 + v29);
    uint64_t v55 = *v21;
    float v56 = (float)LODWORD(a6);
    float v57 = (float)LODWORD(a7);
    float v58 = v40 * v39;
    float v59 = v40 * v41;
    float v60 = v40 * v42;
    float v61 = v40 * v43;
    float v62 = v40 * v44;
    float v63 = (float)v9;
    float v64 = (float)v10;
    float v65 = (float)v11;
    float v66 = (float)v12;
    float v67 = (float)v13;
    float v68 = 0.5;
    float v69 = v48 * 0.5;
    float v70 = v49 * 0.5;
    float v71 = v50 * 0.5;
    float v72 = v51 * 0.5;
    float v73 = v52 * 0.5;
    float v74 = v53 * 0.5;
    uint64_t v75 = *v19 + v55 * v20 + 2 * v18;
    uint64_t v76 = v33[1];
    if (v76) {
      uint64_t v77 = v76 + v36 * v30 + v29;
    }
    else {
      uint64_t v77 = 0;
    }
    uint64_t result = (void *)(*v33 + v35 * v30 + v29);
    do
    {
      if (v28)
      {
        unint64_t v78 = 0;
        float v79 = result;
        float v80 = (_WORD *)v75;
        float v81 = (_DWORD *)v26;
        do
        {
          LOBYTE(v53) = *(unsigned char *)(v77 + v78);
          float v82 = (float)LODWORD(v53) - v57;
          LOBYTE(v68) = *(unsigned char *)(v77 + v78 + 1);
          float v83 = (float)LODWORD(v68) - v57;
          float v84 = v59 * v83;
          float v85 = (float)(v61 * v83) + (float)(v82 * v60);
          float v86 = v62 * v82;
          LOBYTE(v7) = *v79;
          float v87 = v58 * (float)((float)LODWORD(v7) - v56);
          LOBYTE(v8) = v79[1];
          float v88 = v58 * (float)((float)LODWORD(v8) - v56);
          float v89 = v84 + v87;
          float v90 = v87 + v85;
          float v91 = v86 + v87;
          float v92 = v84 + v88;
          float v93 = v85 + v88;
          float v94 = v86 + v88;
          float v95 = (float)((float)((float)(v46 * v90) + (float)(v45 * v89)) + (float)(v47 * v91)) + v63;
          float v53 = (float)((float)((float)(v46 * v93) + (float)(v45 * v92)) + (float)(v47 * v94)) + v63;
          float v96 = v89 + v92;
          float v97 = v90 + v93;
          float v98 = (float)(v64 + (float)(v96 * v69)) + (float)(v97 * v70);
          float v7 = v91 + v94;
          float v8 = v98 + (float)(v7 * v71);
          float v99 = (float)(v64 + (float)(v96 * v72)) + (float)(v97 * v73);
          if (v8 < v63) {
            float v100 = v63;
          }
          else {
            float v100 = v98 + (float)(v7 * v71);
          }
          if (v8 > v65) {
            float v100 = v65;
          }
          float v101 = v99 + (float)(v7 * v74);
          *float v80 = llroundf(v100);
          if (v95 < v66) {
            float v102 = v66;
          }
          else {
            float v102 = v95;
          }
          if (v95 > v67) {
            float v102 = v67;
          }
          v80[1] = llroundf(v102);
          if (v101 < v63) {
            float v103 = v63;
          }
          else {
            float v103 = v101;
          }
          if (v101 <= v65) {
            float v104 = v103;
          }
          else {
            float v104 = v65;
          }
          v80[2] = llroundf(v104);
          float v68 = v67;
          if (v53 <= v67)
          {
            float v68 = v53;
            if (v53 < v66) {
              float v68 = v66;
            }
          }
          v80[3] = llroundf(v68);
          if (v81) {
            *v81++ = 0;
          }
          v78 += 2;
          v79 += 2;
          v80 += 4;
        }
        while (v28 > v78);
      }
      uint64_t result = (void *)((char *)result + v35);
      v77 += v36;
      v75 += v55;
      ++v27;
    }
    while (v27 != v31);
    if (v38 && v26)
    {
      uint64_t v105 = 0;
      do
      {
        if (v28)
        {
          unint64_t v106 = v28;
          float v107 = v24;
          float16x8_t v108 = v54;
          do
          {
            __int16 v109 = *v108++;
            *v107++ = v109 | (v109 << 8);
            --v106;
          }
          while (v106);
        }
        v54 += v37;
        v24 += v22;
        ++v105;
      }
      while (v105 != v31);
    }
    else if (v26)
    {
      do
      {
        if (v28) {
          uint64_t result = memset(v24, 255, 2 * v28);
        }
        v24 += v22;
        --v31;
      }
      while (v31);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_444vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (void *)result[16];
    unint64_t v16 = result[13] * a2 / v6 + result[15];
    uint64_t v17 = (float32x2_t *)result[19];
    uint64_t v18 = (void *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v246 = v19[2];
    uint64_t v249 = v18[2];
    uint64_t v23 = (char *)(v249 + v246 * v12 + v11);
    uint64_t v24 = *v20;
    uint64_t v25 = v20[1];
    uint64_t v247 = v20[2];
    uint64_t v248 = v15[2];
    uint64_t v26 = (char *)(v248 + v247 * v16 + v14);
    unsigned int v27 = v17[17].u16[2];
    LODWORD(v19) = v17[17].u16[3];
    v28.i32[0] = v17[3].i32[1];
    unsigned int v29 = v17[18].u16[0];
    unsigned int v30 = v17[18].u16[1];
    unsigned int v31 = v17[18].u16[2];
    unsigned int v32 = v17[18].u16[3];
    unsigned int v33 = v17[19].u16[0];
    _S16 = v17[4].f32[1];
    _S5 = v17[6].i32[0];
    _S6 = v17[6].i32[1];
    _S7 = v17[7].i32[0];
    uint64_t v38 = (char *)&v17[2068] + 4;
    float v295 = (float)v19;
    float v296 = (float)v27;
    *(float *)&a3 = 8191.0 / (float)v17[16].u32[0];
    float v39 = (float)v29;
    float v40 = (float)v30;
    float v41 = (float)v31;
    *(float *)&a4 = (float)v32;
    float v293 = (float)v32;
    float v294 = *(float *)&a3 * v17->f32[0];
    float v42 = (float)v33;
    float v43 = (char *)&v17[20] + 4;
    *(short float *)&a4 = (short float)v27;
    float v44 = (char *)&v17[4116] + 4;
    float16x8_t v286 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    __asm { FCVT            H8, S21 }
    short float v50 = -(short float)v19;
    v28.i32[1] = v17[1].i32[0];
    *(float32x2_t *)v4.f32 = vmul_n_f32(v28, *(float *)&a3);
    *(double *)&v51.i64[1] = a3;
    *(float32x2_t *)v51.f32 = vmul_n_f32(v17[2], *(float *)&a3);
    float16x8_t v285 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v282 = vmulq_n_f16(v285, v50);
    float16x8_t v283 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v51), 0);
    _Q0 = vmulq_n_f16(v283, v50);
    float16x8_t v281 = _Q0;
    __asm { FCVT            H0, S16 }
    short float v280 = *(short float *)_Q0.i16;
    float v298 = v17[5].f32[0];
    __asm { FCVT            H0, S3 }
    short float v279 = *(short float *)_Q0.i16;
    float v297 = v17[5].f32[1];
    __asm { FCVT            H0, S4 }
    short float v278 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v29;
    int16x8_t v53 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v30;
    int16x8_t v54 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v31;
    int16x8_t v55 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v276 = (float16x8_t)v55;
    float16x8_t v277 = (float16x8_t)v53;
    *(short float *)v55.i16 = (short float)v32;
    int16x8_t v56 = vdupq_lane_s16(*(int16x4_t *)v55.i8, 0);
    float16x8_t v259 = (float16x8_t)v56;
    float16x8_t v260 = (float16x8_t)v54;
    *(short float *)v56.i16 = (short float)v33;
    float16x8_t v258 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v56.i8, 0);
    float v59 = v15;
    uint64_t v57 = *v15;
    uint64_t v58 = v59[1];
    uint64_t result = (void *)(v58 + v25 * v16 + v14);
    if (!v58) {
      uint64_t result = 0;
    }
    uint64_t v60 = v57 + v24 * v16 + v14;
    float v63 = v18;
    uint64_t v61 = *v18;
    uint64_t v62 = v63[1];
    float v64 = (__int8 *)(v62 + v22 * v12 + v11);
    if (!v62) {
      float v64 = 0;
    }
    float v65 = (int8x8_t *)(v61 + v21 * v12 + v11);
    _S26 = v17[9].f32[1];
    _S27 = v17[10].f32[0];
    _S25 = v17[10].f32[1];
    _S10 = v17[11].f32[0];
    _S11 = v17[11].f32[1];
    _S28 = v17[12].f32[0];
    _S29 = v17[13].f32[1];
    _S12 = v17[14].f32[0];
    _S3 = v17[14].f32[1];
    _S4 = v17[15].f32[0];
    float v292 = v17[6].f32[0];
    __asm { FCVT            H5, S5 }
    short float v257 = _H5;
    float v291 = v17[6].f32[1];
    __asm { FCVT            H5, S6 }
    short float v256 = _H5;
    float v290 = v17[7].f32[0];
    __asm { FCVT            H5, S7 }
    short float v255 = _H5;
    float v289 = v17[7].f32[1];
    __asm { FCVT            H0, S0 }
    short float v254 = _H0;
    float v288 = v17[8].f32[0];
    __asm { FCVT            H0, S1 }
    short float v253 = _H0;
    float v287 = v17[8].f32[1];
    __asm { FCVT            H0, S23 }
    short float v252 = _H0;
    __asm { FCVT            H0, S29 }
    short float v274 = _H0;
    __asm { FCVT            H0, S12 }
    short float v273 = _H0;
    __asm { FCVT            H0, S3 }
    short float v272 = _H0;
    __asm { FCVT            H0, S4 }
    short float v271 = _H0;
    float v275 = v17[9].f32[0];
    __asm { FCVT            H0, S24 }
    short float v270 = _H0;
    __asm { FCVT            H0, S26 }
    short float v269 = _H0;
    _S5 = v17[12].f32[1];
    _S13 = v17[13].f32[0];
    __asm { FCVT            H0, S27 }
    short float v268 = _H0;
    __asm { FCVT            H0, S25 }
    short float v267 = _H0;
    __asm { FCVT            H0, S10 }
    short float v266 = _H0;
    __asm { FCVT            H0, S11 }
    short float v265 = _H0;
    __asm { FCVT            H0, S28 }
    short float v264 = _H0;
    __asm { FCVT            H0, S5 }
    short float v263 = _H0;
    uint64_t v96 = v4.i64[0];
    float v284 = v51.f32[0];
    _Q0.i16[1] = v51.i16[3];
    float v262 = v51.f32[1];
    v97.i64[0] = 0x9000900090009000;
    v97.i64[1] = 0x9000900090009000;
    __asm { FCVT            H0, S13 }
    short float v261 = *(short float *)_Q0.i16;
    uint64_t v250 = v20[1];
    uint64_t v251 = *v20;
    do
    {
      if ((int)v10 < 8)
      {
        size_t v172 = 0;
        float v104 = (char *)result;
        uint64_t v103 = v60;
        float16x8_t v171 = v64;
        float v102 = v65;
      }
      else
      {
        uint64_t v99 = v22;
        uint64_t v100 = v21;
        uint64_t v101 = 0;
        float v102 = v65;
        uint64_t v103 = v60;
        float v104 = (char *)result;
        do
        {
          int8x8_t v105 = *(int8x8_t *)&v64[v101];
          *(int8x8_t *)v106.i8 = vzip1_s8(v105, 0);
          v106.u64[1] = (unint64_t)vzip2_s8(v105, 0);
          float16x8_t v107 = vcvtq_f16_u16(v106);
          int8x16_t v108 = (int8x16_t)vmlaq_f16(v282, v285, v107);
          int8x16_t v109 = (int8x16_t)vmlaq_f16(v281, v283, v107);
          v107.i64[0] = vextq_s8(v108, v108, 8uLL).u64[0];
          *(int16x4_t *)v110.i8 = vuzp2_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v107.i8);
          v110.i64[1] = v107.i64[0];
          *(int16x4_t *)v107.i8 = vuzp1_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v107.i8);
          float16x8_t v111 = (float16x8_t)vzip1q_s16(v110, v110);
          v107.i64[1] = v107.i64[0];
          float16x8_t v112 = (float16x8_t)vzip1q_s16((int16x8_t)v107, (int16x8_t)v107);
          v107.i64[0] = vextq_s8(v109, v109, 8uLL).u64[0];
          *(float16x4_t *)v107.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v107.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v107.i8));
          v107.i64[1] = v107.i64[0];
          int8x8_t v113 = *v102++;
          *(int8x8_t *)v110.i8 = vzip1_s8(v113, 0);
          v110.u64[1] = (unint64_t)vzip2_s8(v113, 0);
          float16x8_t v114 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v110), v286);
          uint16x8_t v115 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v111, v114, _H8), (float16x8_t)0), v97));
          uint32x4_t v116 = vmovl_high_u16(v115);
          uint32x4_t v117 = vmovl_u16(*(uint16x4_t *)v115.i8);
          v118.i16[0] = *(_WORD *)&v43[2 * v117.u32[0]];
          v118.i16[1] = *(_WORD *)&v43[2 * v117.u32[1]];
          v118.i16[2] = *(_WORD *)&v43[2 * v117.u32[2]];
          v118.i16[3] = *(_WORD *)&v43[2 * v117.u32[3]];
          v118.i16[4] = *(_WORD *)&v43[2 * v116.u32[0]];
          v118.i16[5] = *(_WORD *)&v43[2 * v116.u32[1]];
          v118.i16[6] = *(_WORD *)&v43[2 * v116.u32[2]];
          v118.i16[7] = *(_WORD *)&v43[2 * v116.u32[3]];
          uint16x8_t v119 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v107, (int16x8_t)v107), v114, _H8), (float16x8_t)0), v97));
          uint32x4_t v120 = vmovl_high_u16(v119);
          uint32x4_t v121 = vmovl_u16(*(uint16x4_t *)v119.i8);
          v122.i16[0] = *(_WORD *)&v43[2 * v121.u32[0]];
          v122.i16[1] = *(_WORD *)&v43[2 * v121.u32[1]];
          v122.i16[2] = *(_WORD *)&v43[2 * v121.u32[2]];
          v122.i16[3] = *(_WORD *)&v43[2 * v121.u32[3]];
          v122.i16[4] = *(_WORD *)&v43[2 * v120.u32[0]];
          v122.i16[5] = *(_WORD *)&v43[2 * v120.u32[1]];
          v122.i16[6] = *(_WORD *)&v43[2 * v120.u32[2]];
          v122.i16[7] = *(_WORD *)&v43[2 * v120.u32[3]];
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v112, v114, _H8), (float16x8_t)0), v97));
          uint32x4_t v124 = vmovl_high_u16(v123);
          uint32x4_t v125 = vmovl_u16(*(uint16x4_t *)v123.i8);
          v112.i16[0] = *(_WORD *)&v43[2 * v125.u32[0]];
          v112.i16[1] = *(_WORD *)&v43[2 * v125.u32[1]];
          v112.i16[2] = *(_WORD *)&v43[2 * v125.u32[2]];
          v112.i16[3] = *(_WORD *)&v43[2 * v125.u32[3]];
          v112.i16[4] = *(_WORD *)&v43[2 * v124.u32[0]];
          v112.i16[5] = *(_WORD *)&v43[2 * v124.u32[1]];
          v112.i16[6] = *(_WORD *)&v43[2 * v124.u32[2]];
          v112.i16[7] = *(_WORD *)&v43[2 * v124.u32[3]];
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v118, v274), v122, v273), v112, v272), vmaxq_f16(vmaxq_f16(v118, v122), v112), v271), (float16x8_t)0), v97));
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v126.i8);
          float16x8_t v128 = (float16x8_t)vmovl_high_u16(v126);
          uint64_t v129 = v128.u32[0];
          v128.i16[0] = *(_WORD *)&v38[2 * v127.u32[0]];
          float v130 = (__int16 *)&v38[2 * v129];
          float v131 = (__int16 *)&v38[2 * v128.u32[1]];
          float v132 = (__int16 *)&v38[2 * v128.u32[2]];
          float v133 = (__int16 *)&v38[2 * v128.u32[3]];
          v128.i16[1] = *(_WORD *)&v38[2 * v127.u32[1]];
          v128.i16[2] = *(_WORD *)&v38[2 * v127.u32[2]];
          v128.i16[3] = *(_WORD *)&v38[2 * v127.u32[3]];
          v128.i16[4] = *v130;
          v128.i16[5] = *v131;
          v128.i16[6] = *v132;
          v128.i16[7] = *v133;
          float16x8_t v134 = vmulq_f16(v118, v128);
          float16x8_t v135 = vmulq_f16(v122, v128);
          float16x8_t v136 = vmulq_f16(v112, v128);
          float16x8_t v137 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v134, v267), v135, v266), v136, v265);
          float16x8_t v138 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v136, v261), v135, v263), v134, v264);
          uint16x8_t v139 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v134, v270), v135, v269), v136, v268), (float16x8_t)0), v97));
          uint32x4_t v140 = vmovl_u16(*(uint16x4_t *)v139.i8);
          uint64_t v141 = v140.u32[1];
          uint64_t v142 = v140.u32[0];
          uint32x4_t v143 = vmovl_high_u16(v139);
          uint64_t v144 = v140.u32[3];
          uint64_t v145 = v140.u32[2];
          uint64_t v146 = v143.u32[1];
          uint64_t v147 = v143.u32[0];
          uint64_t v148 = v143.u32[3];
          uint64_t v149 = v143.u32[2];
          uint16x8_t v150 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v137, (float16x8_t)0), v97));
          uint32x4_t v151 = vmovl_u16(*(uint16x4_t *)v150.i8);
          uint64_t v152 = v151.u32[1];
          uint64_t v153 = v151.u32[0];
          v154.i16[0] = *(_WORD *)&v44[2 * v142];
          v154.i16[1] = *(_WORD *)&v44[2 * v141];
          v154.i16[2] = *(_WORD *)&v44[2 * v145];
          v154.i16[3] = *(_WORD *)&v44[2 * v144];
          v154.i16[4] = *(_WORD *)&v44[2 * v147];
          v154.i16[5] = *(_WORD *)&v44[2 * v146];
          v154.i16[6] = *(_WORD *)&v44[2 * v149];
          v154.i16[7] = *(_WORD *)&v44[2 * v148];
          uint32x4_t v155 = vmovl_high_u16(v150);
          uint64_t v156 = v151.u32[3];
          uint64_t v157 = v151.u32[2];
          uint64_t v158 = v155.u32[1];
          uint64_t v159 = v155.u32[0];
          uint64_t v160 = v155.u32[3];
          uint64_t v161 = v155.u32[2];
          uint16x8_t v162 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v138, (float16x8_t)0), v97));
          float32x4_t v51 = (float32x4_t)vmovl_u16(*(uint16x4_t *)v162.i8);
          _Q0.i16[0] = *(_WORD *)&v44[2 * v153];
          _Q0.i16[1] = *(_WORD *)&v44[2 * v152];
          _Q0.i16[2] = *(_WORD *)&v44[2 * v157];
          _Q0.i16[3] = *(_WORD *)&v44[2 * v156];
          _Q0.i16[4] = *(_WORD *)&v44[2 * v159];
          _Q0.i16[5] = *(_WORD *)&v44[2 * v158];
          _Q0.i16[6] = *(_WORD *)&v44[2 * v161];
          _Q0.i16[7] = *(_WORD *)&v44[2 * v160];
          uint32x4_t v163 = vmovl_high_u16(v162);
          uint64_t v164 = v163.u32[0];
          v168.i16[0] = *(_WORD *)&v44[2 * v51.u32[0]];
          float v165 = (__int16 *)&v44[2 * v163.u32[1]];
          float v166 = (__int16 *)&v44[2 * v163.u32[2]];
          float v167 = (__int16 *)&v44[2 * v163.u32[3]];
          v168.i16[1] = *(_WORD *)&v44[2 * v51.u32[1]];
          v168.i16[2] = *(_WORD *)&v44[2 * v51.u32[2]];
          v168.i16[3] = *(_WORD *)&v44[2 * v51.u32[3]];
          v168.i16[4] = *(_WORD *)&v44[2 * v164];
          v168.i16[5] = *v165;
          v168.i16[6] = *v166;
          v168.i16[7] = *v167;
          *(int8x8_t *)v51.f32 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v277, v154, v280), _Q0, v279), v168, v278), v277), v276)));
          *(void *)uint64_t v103 = v51.i64[0];
          v103 += 8;
          if (v104)
          {
            float16x8_t v169 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v260, v154, v254), _Q0, v253), v168, v252);
            *(int8x8_t *)_Q0.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v260, v154, v257), _Q0, v256), v168, v255), v259), v258), v259), v258)));
            float32x4_t v51 = (float32x4_t)vcvtq_u16_f16(v169);
            int8x8_t v170 = vmovn_s16((int16x8_t)v51);
            vst2_s8(v104, (int8x8x2_t)_Q0);
            v104 += 16;
          }
          v101 += 8;
        }
        while ((int)v101 < (int)v10 - 7);
        float16x8_t v171 = &v64[v101];
        uint64_t v21 = v100;
        uint64_t v22 = v99;
        uint64_t v24 = v251;
        size_t v172 = v10 & 0xFFFFFFF8;
        uint64_t v25 = v250;
      }
      while (v10 > v172)
      {
        float v173 = _S16;
        _Q0.i8[0] = v171[1];
        float v174 = (float)_Q0.u32[0] - v295;
        float v175 = *((float *)&v96 + 1) * v174;
        v51.i8[0] = v102->i8[0];
        v51.f32[0] = (float)v51.u32[0] - v296;
        float v176 = v294 * v51.f32[0];
        float v177 = (float)(*((float *)&v96 + 1) * v174) + (float)(v294 * v51.f32[0]);
        float v178 = 8191.0;
        if (v177 <= 8191.0)
        {
          float v178 = (float)(*((float *)&v96 + 1) * v174) + v176;
          if (v177 < 0.0) {
            float v178 = 0.0;
          }
        }
        v51.i8[0] = *v171;
        float v179 = (float)v51.u32[0] - v295;
        float v180 = (float)(v262 * v174) + (float)(v179 * v284);
        float v181 = 8191.0;
        if ((float)(v176 + v180) <= 8191.0)
        {
          float v181 = v176 + v180;
          if ((float)(v176 + v180) < 0.0) {
            float v181 = 0.0;
          }
        }
        unsigned int v182 = v96;
        float v183 = *(float *)&v96 * v179;
        float v184 = v183 + v176;
        BOOL v185 = (float)(v183 + v176) <= 8191.0;
        float v186 = 8191.0;
        if (v185)
        {
          float v186 = v184;
          if (v184 < 0.0) {
            float v186 = 0.0;
          }
        }
        LOBYTE(v182) = v102->i8[1];
        float v187 = v294 * (float)((float)v182 - v296);
        float v188 = v175 + v187;
        float v189 = 8191.0;
        if (v188 <= 8191.0)
        {
          float v189 = v188;
          if (v188 < 0.0) {
            float v189 = 0.0;
          }
        }
        float v190 = v180 + v187;
        float v191 = 8191.0;
        if (v190 <= 8191.0)
        {
          float v191 = v190;
          if (v190 < 0.0) {
            float v191 = 0.0;
          }
        }
        float v192 = v183 + v187;
        float v193 = 8191.0;
        if (v192 <= 8191.0)
        {
          float v193 = v192;
          if (v192 < 0.0) {
            float v193 = 0.0;
          }
        }
        _H2 = *(_WORD *)&v43[2 * llroundf(fminf(fmaxf(v178, 0.0), 8191.0))];
        __asm { FCVT            S21, H2 }
        _H2 = *(_WORD *)&v43[2 * llroundf(fminf(fmaxf(v181, 0.0), 8191.0))];
        unsigned int v197 = llroundf(fminf(fmaxf(v186, 0.0), 8191.0));
        __asm { FCVT            S6, H2 }
        _H2 = *(_WORD *)&v43[2 * v197];
        __asm { FCVT            S23, H2 }
        float v201 = (float)((float)((float)(_S12 * _S6) + (float)(_S29 * _S21)) + (float)(_S3 * _S23))
             + (float)(_S4 * fmaxf(_S21, fmaxf(_S6, _S23)));
        float v202 = 8191.0;
        if (v201 <= 8191.0)
        {
          float v202 = v201;
          if (v201 < 0.0) {
            float v202 = 0.0;
          }
        }
        _H2 = *(_WORD *)&v43[2 * llroundf(fminf(fmaxf(v189, 0.0), 8191.0))];
        __asm { FCVT            S7, H2 }
        _H0 = *(_WORD *)&v43[2 * llroundf(fminf(fmaxf(v191, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        _H1 = *(_WORD *)&v43[2 * llroundf(fminf(fmaxf(v193, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H16 = *(_WORD *)&v38[2 * llroundf(v202)];
        float v210 = (float)((float)((float)(_S12 * _S0) + (float)(_S29 * _S7)) + (float)(_S3 * _S1))
             + (float)(_S4 * fmaxf(_S7, fmaxf(_S0, _S1)));
        float v211 = 8191.0;
        if (v210 <= 8191.0)
        {
          float v211 = v210;
          if (v210 < 0.0) {
            float v211 = 0.0;
          }
        }
        __asm { FCVT            S16, H16 }
        float v213 = _S21 * _S16;
        float v214 = _S6 * _S16;
        float v215 = _S23 * _S16;
        _H2 = *(_WORD *)&v38[2 * llroundf(v211)];
        __asm { FCVT            S2, H2 }
        float v218 = _S7 * _S2;
        _S0 = _S0 * _S2;
        _S1 = _S1 * _S2;
        float v221 = (float)((float)(_S26 * v214) + (float)(v213 * v275)) + (float)(v215 * _S27);
        float v222 = (float)((float)(_S10 * v214) + (float)(v213 * _S25)) + (float)(v215 * _S11);
        float v223 = (float)((float)(_S5 * v214) + (float)(v213 * _S28)) + (float)(v215 * _S13);
        float v224 = (float)((float)(_S26 * _S0) + (float)(v218 * v275)) + (float)(_S1 * _S27);
        float v225 = (float)((float)(_S10 * _S0) + (float)(v218 * _S25)) + (float)(_S1 * _S11);
        unsigned int v226 = llroundf(fminf(fmaxf(v221, 0.0), 8191.0));
        float v227 = (float)((float)(_S5 * _S0) + (float)(v218 * _S28)) + (float)(_S1 * _S13);
        LOWORD(_S0) = *(_WORD *)&v44[2 * v226];
        __asm { FCVT            S0, H0 }
        LOWORD(_S1) = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v222, 0.0), 8191.0))];
        __asm { FCVT            S6, H1 }
        LOWORD(_S1) = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v223, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H21 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v224, 0.0), 8191.0))];
        _H23 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v225, 0.0), 8191.0))];
        _H24 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v227, 0.0), 8191.0))];
        _S16 = v173;
        float v234 = (float)((float)((float)(v298 * _S6) + (float)(v173 * _S0)) + (float)(v297 * _S1)) + v39;
        float v235 = v41;
        if (v234 <= v41)
        {
          float v235 = (float)((float)((float)(v298 * _S6) + (float)(v173 * _S0)) + (float)(v297 * _S1)) + v39;
          if (v234 < v39) {
            float v235 = v39;
          }
        }
        *(unsigned char *)uint64_t v103 = llroundf(v235);
        if (v104)
        {
          float v236 = (float)((float)(v40 + (float)(_S0 * v292)) + (float)(_S6 * v291)) + (float)(_S1 * v290);
          float v237 = v42;
          if (v236 <= v42)
          {
            float v237 = (float)((float)(v40 + (float)(_S0 * v292)) + (float)(_S6 * v291)) + (float)(_S1 * v290);
            if (v236 < v293) {
              float v237 = v293;
            }
          }
          float v238 = (float)((float)(v40 + (float)(_S0 * v289)) + (float)(_S6 * v288)) + (float)(_S1 * v287);
          char *v104 = llroundf(v237);
          float v239 = v42;
          if (v238 <= v42)
          {
            float v239 = v238;
            if (v238 < v293) {
              float v239 = v293;
            }
          }
          v104[1] = llroundf(v239);
          v104 += 2;
        }
        __asm
        {
          FCVT            S0, H21
          FCVT            S1, H23
          FCVT            S6, H24
        }
        v51.f32[0] = (float)((float)((float)(v298 * _S1) + (float)(v173 * *(float *)_Q0.i32)) + (float)(v297 * _S6))
                   + v39;
        float v242 = v41;
        if (v51.f32[0] <= v41)
        {
          float v242 = (float)((float)((float)(v298 * _S1) + (float)(v173 * *(float *)_Q0.i32)) + (float)(v297 * _S6)) + v39;
          if (v51.f32[0] < v39) {
            float v242 = v39;
          }
        }
        *(unsigned char *)(v103 + 1) = llroundf(v242);
        if (v104)
        {
          float v243 = (float)((float)(v40 + (float)(*(float *)_Q0.i32 * v292)) + (float)(_S1 * v291)) + (float)(_S6 * v290);
          float v244 = v42;
          if (v243 <= v42)
          {
            float v244 = (float)((float)(v40 + (float)(*(float *)_Q0.i32 * v292)) + (float)(_S1 * v291)) + (float)(_S6 * v290);
            if (v243 < v293) {
              float v244 = v293;
            }
          }
          v51.f32[0] = v288;
          *(float *)_Q0.i32 = (float)((float)(v40 + (float)(*(float *)_Q0.i32 * v289)) + (float)(_S1 * v288))
                            + (float)(_S6 * v287);
          char *v104 = llroundf(v244);
          float v245 = v42;
          if (*(float *)_Q0.i32 <= v42)
          {
            float v245 = *(float *)_Q0.i32;
            if (*(float *)_Q0.i32 < v293) {
              float v245 = v293;
            }
          }
          v104[1] = llroundf(v245);
          v104 += 2;
        }
        v172 += 2;
        v171 += 2;
        float v102 = (int8x8_t *)((char *)v102 + 2);
        v103 += 2;
      }
      float v65 = (int8x8_t *)((char *)v65 + v21);
      v64 += v22;
      v60 += v24;
      uint64_t result = (void *)((char *)result + v25);
      ++v9;
    }
    while (v9 != v13);
    if (v249 && v248)
    {
      do
      {
        uint64_t result = memcpy(v26, v23, v10);
        v23 += v246;
        v26 += v247;
        --v13;
      }
      while (v13);
    }
    else if (v248)
    {
      do
      {
        if (v10) {
          uint64_t result = memset(v26, 255, v10);
        }
        v26 += v247;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Tone_Mat_TRC_444vf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    unint64_t v15 = result[13] * a2 / v6;
    uint64_t v16 = (void *)result[16];
    unint64_t v17 = v15 + result[15];
    uint64_t v18 = result[19];
    uint64_t v19 = (void *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = (char *)(v25 + v24 * v12 + v11);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (char *)(v30 + v29 * v17 + v14);
    LOWORD(a4) = *(_WORD *)(v18 + 140);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    float v33 = (float)LODWORD(a5);
    float v162 = v32 * *(float *)v18;
    float v163 = (float)LODWORD(a4);
    float v153 = v32 * *(float *)(v18 + 16);
    float v154 = v32 * *(float *)(v18 + 8);
    float v34 = v32 * *(float *)(v18 + 20);
    *(float *)&unsigned int v35 = v32 * *(float *)(v18 + 28);
    float v151 = *(float *)&v35;
    float v152 = v34;
    LOWORD(v35) = *(_WORD *)(v18 + 144);
    float v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 146);
    float v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 148);
    float v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 150);
    float v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 152);
    float v40 = (float)v35;
    float v41 = *(float *)(v18 + 36);
    float v42 = *(float *)(v18 + 40);
    float v43 = *(float *)(v18 + 44);
    float v160 = *(float *)(v18 + 48);
    float v161 = v39;
    float v158 = *(float *)(v18 + 56);
    float v159 = *(float *)(v18 + 52);
    float v156 = *(float *)(v18 + 64);
    float v157 = *(float *)(v18 + 60);
    _S0 = *(float *)(v18 + 68);
    float v45 = *(float *)(v18 + 72);
    float v155 = _S0;
    float v47 = *(float *)(v18 + 76);
    float v46 = *(float *)(v18 + 80);
    float v48 = *(float *)(v18 + 84);
    float v49 = *(float *)(v18 + 88);
    float v50 = *(float *)(v18 + 92);
    float v51 = *(float *)(v18 + 96);
    float v52 = *(float *)(v18 + 100);
    float v53 = *(float *)(v18 + 104);
    uint64_t v54 = v18 + 164;
    uint64_t v55 = v18 + 16548;
    uint64_t v56 = v16[1];
    _ZF = v56 == 0;
    uint64_t v58 = v56 + v28 * v17;
    uint64_t v59 = *v16 + v27 * v17;
    uint64_t v60 = v18 + 32932;
    uint64_t result = (void *)(v58 + v14);
    if (_ZF) {
      uint64_t result = 0;
    }
    uint64_t v61 = (unsigned char *)(v59 + v14);
    float v64 = v19;
    uint64_t v63 = *v19;
    uint64_t v62 = v64[1];
    _ZF = v62 == 0;
    uint64_t v65 = v62 + v23 * v12 + v11;
    if (_ZF) {
      uint64_t v65 = 0;
    }
    float v66 = (unsigned char *)(v63 + v22 * v12 + v11);
    float v68 = *(float *)(v18 + 108);
    float v67 = *(float *)(v18 + 112);
    float v69 = *(float *)(v18 + 116);
    float v70 = *(float *)(v18 + 120);
    do
    {
      if (v10)
      {
        size_t v71 = 0;
        float v72 = v66;
        float v73 = v61;
        float v74 = result;
        do
        {
          LOBYTE(_S0) = *(unsigned char *)(v65 + v71 + 1);
          float v75 = (float)LODWORD(_S0) - v33;
          unsigned int v76 = LODWORD(v154);
          float v77 = v154 * v75;
          LOBYTE(v76) = *v72;
          float v78 = v162 * (float)((float)v76 - v163);
          float v79 = (float)(v154 * v75) + v78;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = (float)(v154 * v75) + v78;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          LOBYTE(v79) = *(unsigned char *)(v65 + v71);
          float v81 = v33;
          float v82 = (float)LODWORD(v79) - v33;
          float v83 = (float)(v152 * v75) + (float)(v82 * v153);
          float v84 = 8191.0;
          if ((float)(v78 + v83) <= 8191.0)
          {
            float v84 = v78 + v83;
            if ((float)(v78 + v83) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v151 * v82;
          float v86 = v85 + v78;
          BOOL v87 = (float)(v85 + v78) <= 8191.0;
          float v88 = 8191.0;
          if (v87)
          {
            float v88 = v86;
            if (v86 < 0.0) {
              float v88 = 0.0;
            }
          }
          LOBYTE(v86) = v72[1];
          float v89 = v162 * (float)((float)LODWORD(v86) - v163);
          float v90 = v77 + v89;
          BOOL v87 = (float)(v77 + v89) <= 8191.0;
          float v91 = 8191.0;
          if (v87)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v83 + v89;
          BOOL v87 = (float)(v83 + v89) <= 8191.0;
          float v93 = 8191.0;
          if (v87)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v85 + v89;
          BOOL v87 = (float)(v85 + v89) <= 8191.0;
          float v95 = 8191.0;
          if (v87)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S1, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S2, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H19 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          float v108 = fmaxf(_S1, fmaxf(_S2, _S26));
          float v109 = (float)((float)((float)(v67 * _S2) + (float)(v68 * _S1)) + (float)(v69 * _S26)) + (float)(v70 * v108);
          float v110 = 8191.0;
          if (v109 <= 8191.0)
          {
            float v110 = (float)((float)((float)(v67 * _S2) + (float)(v68 * _S1)) + (float)(v69 * _S26)) + (float)(v70 * v108);
            if (v109 < 0.0) {
              float v110 = 0.0;
            }
          }
          __asm
          {
            FCVT            S27, H19
            FCVT            S28, H28
            FCVT            S29, H29
          }
          _H19 = *(_WORD *)(v55 + 2 * llroundf(v110));
          float v115 = (float)((float)((float)(v67 * _S28) + (float)(v68 * _S27)) + (float)(v69 * _S29))
               + (float)(v70 * fmaxf(_S27, fmaxf(_S28, _S29)));
          float v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            float v116 = v115;
            if (v115 < 0.0) {
              float v116 = 0.0;
            }
          }
          __asm { FCVT            S0, H19 }
          float v118 = _S1 * _S0;
          float v119 = _S2 * _S0;
          float v120 = _S26 * _S0;
          _H19 = *(_WORD *)(v55 + 2 * llroundf(v116));
          __asm { FCVT            S19, H19 }
          _S24 = _S27 * _S19;
          float v124 = _S28 * _S19;
          float v125 = _S29 * _S19;
          float v126 = (float)((float)(v47 * v119) + (float)(v118 * v45)) + (float)(v120 * v46);
          float v127 = (float)((float)(v49 * v119) + (float)(v118 * v48)) + (float)(v120 * v50);
          _S0 = (float)((float)(v52 * v119) + (float)(v118 * v51)) + (float)(v120 * v53);
          float v129 = (float)((float)(v47 * v124) + (float)(_S24 * v45)) + (float)(v125 * v46);
          float v130 = (float)((float)(v49 * v124) + (float)(_S24 * v48)) + (float)(v125 * v50);
          float v131 = (float)((float)(v52 * v124) + (float)(_S24 * v51)) + (float)(v125 * v53);
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S28, H24 }
          LOWORD(_S0) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S29, H0 }
          _H0 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          float v138 = (float)((float)((float)(v42 * _S28) + (float)(v41 * _S27)) + (float)(v43 * _S29)) + v36;
          float v139 = v38;
          if (v138 <= v38)
          {
            float v139 = (float)((float)((float)(v42 * _S28) + (float)(v41 * _S27)) + (float)(v43 * _S29)) + v36;
            if (v138 < v36) {
              float v139 = v36;
            }
          }
          *float v73 = llroundf(v139);
          if (v74)
          {
            float v140 = (float)((float)(v37 + (float)(_S27 * v160)) + (float)(_S28 * v159)) + (float)(_S29 * v158);
            float v141 = v40;
            if (v140 <= v40)
            {
              float v141 = (float)((float)(v37 + (float)(_S27 * v160)) + (float)(_S28 * v159)) + (float)(_S29 * v158);
              if (v140 < v161) {
                float v141 = v161;
              }
            }
            float v142 = (float)((float)(v37 + (float)(_S27 * v157)) + (float)(_S28 * v156)) + (float)(_S29 * v155);
            *float v74 = llroundf(v141);
            float v143 = v40;
            if (v142 <= v40)
            {
              float v143 = (float)((float)(v37 + (float)(_S27 * v157)) + (float)(_S28 * v156)) + (float)(_S29 * v155);
              if (v142 < v161) {
                float v143 = v161;
              }
            }
            v74[1] = llroundf(v143);
            v74 += 2;
          }
          float v33 = v81;
          __asm
          {
            FCVT            S0, H0
            FCVT            S2, H24
            FCVT            S26, H26
          }
          float v146 = (float)((float)((float)(v42 * _S2) + (float)(v41 * _S0)) + (float)(v43 * _S26)) + v36;
          float v147 = v38;
          if (v146 <= v38)
          {
            float v147 = (float)((float)((float)(v42 * _S2) + (float)(v41 * _S0)) + (float)(v43 * _S26)) + v36;
            if (v146 < v36) {
              float v147 = v36;
            }
          }
          v73[1] = llroundf(v147);
          if (v74)
          {
            float v148 = (float)((float)(v37 + (float)(_S0 * v160)) + (float)(_S2 * v159)) + (float)(_S26 * v158);
            float v149 = v40;
            if (v148 <= v40)
            {
              float v149 = (float)((float)(v37 + (float)(_S0 * v160)) + (float)(_S2 * v159)) + (float)(_S26 * v158);
              if (v148 < v161) {
                float v149 = v161;
              }
            }
            _S0 = (float)((float)(v37 + (float)(_S0 * v157)) + (float)(_S2 * v156)) + (float)(_S26 * v155);
            *float v74 = llroundf(v149);
            float v150 = v40;
            if (_S0 <= v40)
            {
              float v150 = _S0;
              if (_S0 < v161) {
                float v150 = v161;
              }
            }
            v74[1] = llroundf(v150);
            v74 += 2;
          }
          v71 += 2;
          v72 += 2;
          v73 += 2;
        }
        while (v10 > v71);
      }
      v66 += v22;
      v65 += v23;
      v61 += v27;
      uint64_t result = (void *)((char *)result + v28);
      ++v9;
    }
    while (v9 != v13);
    if (v25 && v30)
    {
      do
      {
        uint64_t result = memcpy(v31, v26, v10);
        v26 += v24;
        v31 += v29;
        --v13;
      }
      while (v13);
    }
    else if (v30)
    {
      do
      {
        if (v10) {
          uint64_t result = memset(v31, 255, v10);
        }
        v31 += v29;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_444vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Mat_TRC_444vf_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, float32x4_t a8, float32x4_t _Q6)
{
  uint64_t v9 = *(void *)((char *)result + 28);
  unint64_t v10 = *(unsigned __int8 *)result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    size_t v14 = *(void *)((char *)result + 20);
    uint64_t v15 = *(void *)((char *)result + 36);
    unint64_t v16 = v11 + *(void *)((char *)result + 44);
    unint64_t v17 = v12 - v11;
    uint64_t v18 = result[14];
    uint64_t v19 = (uint64_t *)result[16];
    unint64_t v20 = result[13] * a2 / v10 + result[15];
    uint64_t v21 = (float32x2_t *)result[19];
    size_t v22 = (uint64_t *)result[7];
    uint64_t v23 = (uint64_t *)result[8];
    uint64_t v24 = (uint64_t *)result[17];
    uint64_t v25 = *v23;
    uint64_t v26 = v23[1];
    uint64_t v210 = v23[2];
    uint64_t v212 = v22[2];
    uint64_t v27 = (char *)(v212 + v210 * v16 + v15);
    uint64_t v28 = *v24;
    uint64_t v29 = v24[1];
    uint64_t v30 = v24[2];
    uint64_t v211 = v19[2];
    uint64_t v31 = (char *)(v211 + v30 * v20 + v18);
    *(float *)&a6 = (float)v21[16].u32[0];
    unsigned int v32 = v21[17].u16[2];
    unsigned int v33 = v21[17].u16[3];
    a8.i32[0] = v21[3].i32[1];
    unsigned int v34 = v21[18].u16[0];
    unsigned int v35 = v21[18].u16[1];
    unsigned int v36 = v21[18].u16[2];
    unsigned int v37 = v21[18].u16[3];
    unsigned int v38 = v21[19].u16[0];
    _S1 = v21[4].i32[1];
    _S7 = v21[5].i32[0];
    _S16 = v21[5].i32[1];
    _S21 = v21[6].i32[0];
    _S30 = v21[6].i32[1];
    _S10 = v21[7].i32[0];
    _S11 = v21[7].i32[1];
    _S12 = v21[8].i32[0];
    LODWORD(a3) = 1174403072;
    float v47 = (float)v33;
    float v48 = (float)v34;
    float v49 = (float)v35;
    float v50 = (float)v36;
    float v247 = (float)v37;
    float v248 = (float)v32;
    _Q6.f32[0] = 8191.0 / *(float *)&a6;
    float v51 = (float)v38;
    *(short float *)&a6 = (short float)v32;
    float16x8_t v240 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a6, 0);
    _S2 = _Q6.f32[0] * v21->f32[0];
    short float v53 = -(short float)v33;
    a8.i32[1] = v21[1].i32[0];
    *(float32x2_t *)a8.f32 = vmul_n_f32(*(float32x2_t *)a8.f32, _Q6.f32[0]);
    *(float32x2_t *)_Q6.f32 = vmul_n_f32(v21[2], _Q6.f32[0]);
    _S25 = v21[8].i32[1];
    _S13 = v21[9].i32[0];
    uint64_t v56 = (char *)&v21[20] + 4;
    uint64_t v57 = (char *)&v21[2068] + 4;
    float16x8_t v239 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a8), 0);
    float16x8_t v58 = vmulq_n_f16(v239, v53);
    float16x8_t v237 = v58;
    float16x8_t v238 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(_Q6), 0);
    *(short float *)v58.i16 = (short float)v34;
    int16x8_t v59 = vdupq_lane_s16(*(int16x4_t *)v58.i8, 0);
    float16x8_t v236 = (float16x8_t)v59;
    *(short float *)v59.i16 = (short float)v35;
    int16x8_t v60 = vdupq_lane_s16(*(int16x4_t *)v59.i8, 0);
    float16x8_t v221 = (float16x8_t)v60;
    *(short float *)v60.i16 = (short float)v36;
    int16x8_t v61 = vdupq_lane_s16(*(int16x4_t *)v60.i8, 0);
    float16x8_t v235 = (float16x8_t)v61;
    *(short float *)v61.i16 = (short float)v37;
    float16x8_t v62 = vmulq_n_f16(v238, v53);
    float16x8_t v234 = v62;
    *(short float *)v62.i16 = (short float)v38;
    float16x8_t v219 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v62.i8, 0);
    float16x8_t v220 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v61.i8, 0);
    uint64_t v64 = *v19;
    uint64_t v63 = v19[1];
    uint64_t v65 = (char *)(v63 + v29 * v20 + v18);
    if (!v63) {
      uint64_t v65 = 0;
    }
    uint64_t result = (void *)(v64 + v28 * v20 + v18);
    uint64_t v67 = *v22;
    uint64_t v66 = v22[1];
    float v68 = (unsigned char *)(v66 + v26 * v16 + v15);
    if (!v66) {
      float v68 = 0;
    }
    float v69 = (int8x8_t *)(v67 + v25 * v16 + v15);
    _S15 = v21[9].f32[1];
    _S24 = v21[10].f32[0];
    _S26 = v21[10].f32[1];
    _S27 = v21[11].f32[0];
    _S28 = v21[11].f32[1];
    _S29 = v21[12].f32[0];
    float v76 = _S2;
    __asm { FCVT            H8, S2 }
    float v82 = v21[4].f32[1];
    __asm { FCVT            H1, S1 }
    short float v233 = _H1;
    float v84 = v21[5].f32[0];
    __asm { FCVT            H1, S7 }
    short float v232 = _H1;
    float v86 = v21[5].f32[1];
    __asm { FCVT            H1, S16 }
    short float v231 = _H1;
    float v246 = v21[6].f32[0];
    __asm { FCVT            H1, S21 }
    short float v218 = _H1;
    float v245 = v21[6].f32[1];
    __asm { FCVT            H1, S30 }
    short float v217 = _H1;
    float v244 = v21[7].f32[0];
    __asm { FCVT            H1, S10 }
    short float v216 = _H1;
    float v243 = v21[7].f32[1];
    __asm { FCVT            H1, S11 }
    short float v215 = _H1;
    float v242 = v21[8].f32[0];
    __asm { FCVT            H1, S12 }
    short float v214 = _H1;
    float v241 = v21[8].f32[1];
    __asm { FCVT            H1, S25 }
    short float v213 = _H1;
    float v94 = v21[9].f32[0];
    __asm { FCVT            H1, S13 }
    short float v230 = _H1;
    __asm { FCVT            H1, S15 }
    short float v229 = _H1;
    _S13 = v21[12].f32[1];
    _S11 = v21[13].f32[0];
    __asm { FCVT            H1, S24 }
    short float v228 = _H1;
    __asm { FCVT            H1, S26 }
    short float v227 = _H1;
    __asm { FCVT            H1, S27 }
    short float v226 = _H1;
    __asm { FCVT            H1, S28 }
    short float v225 = _H1;
    __asm { FCVT            H1, S29 }
    short float v224 = _H1;
    __asm { FCVT            H1, S13 }
    short float v223 = _H1;
    __asm { FCVT            H1, S11 }
    short float v222 = _H1;
    unint64_t v106 = _Q6.i64[0];
    v107.i64[0] = 0x9000900090009000;
    v107.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v14 < 8)
      {
        size_t v149 = 0;
        float16x8_t v111 = v65;
        float v110 = (int8x8_t *)result;
        float v148 = v68;
        float v109 = v69;
      }
      else
      {
        uint64_t v108 = 0;
        float v109 = v69;
        float v110 = (int8x8_t *)result;
        float16x8_t v111 = v65;
        do
        {
          int8x8_t v112 = *(int8x8_t *)&v68[v108];
          *(int8x8_t *)v113.i8 = vzip1_s8(v112, 0);
          v113.u64[1] = (unint64_t)vzip2_s8(v112, 0);
          float16x8_t v114 = vcvtq_f16_u16(v113);
          int8x16_t v115 = (int8x16_t)vmlaq_f16(v237, v239, v114);
          int8x16_t v116 = (int8x16_t)vmlaq_f16(v234, v238, v114);
          v114.i64[0] = vextq_s8(v115, v115, 8uLL).u64[0];
          *(int16x4_t *)v117.i8 = vuzp2_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v114.i8);
          *(double *)&v117.i64[1] = a3;
          *(int16x4_t *)v114.i8 = vuzp1_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v114.i8);
          *(double *)&v114.i64[1] = a3;
          float16x8_t v118 = (float16x8_t)vzip1q_s16((int16x8_t)v114, (int16x8_t)v114);
          v114.i64[0] = vextq_s8(v116, v116, 8uLL).u64[0];
          *(float16x4_t *)v114.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v114.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v114.i8));
          *(double *)&v114.i64[1] = a3;
          int8x8_t v119 = *v109++;
          *(int8x8_t *)v120.i8 = vzip1_s8(v119, 0);
          v120.u64[1] = (unint64_t)vzip2_s8(v119, 0);
          float16x8_t v121 = vsubq_f16(vcvtq_f16_u16(v120), v240);
          float16x8_t v122 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v114, (int16x8_t)v114), v121, _H8);
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16(v117, v117), v121, _H8), (float16x8_t)0), v107));
          uint32x4_t v124 = vmovl_high_u16(v123);
          float16x8_t v125 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v123.i8);
          v125.i16[0] = *(_WORD *)&v56[2 * v125.u32[0]];
          v125.i16[1] = *(_WORD *)&v56[2 * v125.u32[1]];
          v125.i16[2] = *(_WORD *)&v56[2 * v125.u32[2]];
          v125.i16[3] = *(_WORD *)&v56[2 * v125.u32[3]];
          v125.i16[4] = *(_WORD *)&v56[2 * v124.u32[0]];
          v125.i16[5] = *(_WORD *)&v56[2 * v124.u32[1]];
          v125.i16[6] = *(_WORD *)&v56[2 * v124.u32[2]];
          v125.i16[7] = *(_WORD *)&v56[2 * v124.u32[3]];
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v107));
          uint32x4_t v127 = vmovl_high_u16(v126);
          uint32x4_t v128 = vmovl_u16(*(uint16x4_t *)v126.i8);
          v129.i16[0] = *(_WORD *)&v56[2 * v128.u32[0]];
          v129.i16[1] = *(_WORD *)&v56[2 * v128.u32[1]];
          v129.i16[2] = *(_WORD *)&v56[2 * v128.u32[2]];
          v129.i16[3] = *(_WORD *)&v56[2 * v128.u32[3]];
          v129.i16[4] = *(_WORD *)&v56[2 * v127.u32[0]];
          v129.i16[5] = *(_WORD *)&v56[2 * v127.u32[1]];
          v129.i16[6] = *(_WORD *)&v56[2 * v127.u32[2]];
          v129.i16[7] = *(_WORD *)&v56[2 * v127.u32[3]];
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v118, v121, _H8), (float16x8_t)0), v107));
          uint32x4_t v131 = vmovl_high_u16(v130);
          float16x8_t v132 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v130.i8);
          v132.i16[0] = *(_WORD *)&v56[2 * v132.u32[0]];
          v132.i16[1] = *(_WORD *)&v56[2 * v132.u32[1]];
          v132.i16[2] = *(_WORD *)&v56[2 * v132.u32[2]];
          v132.i16[3] = *(_WORD *)&v56[2 * v132.u32[3]];
          v132.i16[4] = *(_WORD *)&v56[2 * v131.u32[0]];
          v132.i16[5] = *(_WORD *)&v56[2 * v131.u32[1]];
          v132.i16[6] = *(_WORD *)&v56[2 * v131.u32[2]];
          v132.i16[7] = *(_WORD *)&v56[2 * v131.u32[3]];
          float16x8_t v133 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v125, v227), v129, v226), v132, v225);
          float16x8_t v134 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v132, v222), v129, v223), v125, v224);
          uint16x8_t v135 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v125, v230), v129, v229), v132, v228), (float16x8_t)0), v107));
          uint32x4_t v136 = vmovl_high_u16(v135);
          uint32x4_t v137 = vmovl_u16(*(uint16x4_t *)v135.i8);
          _Q6.i16[0] = *(_WORD *)&v57[2 * v137.u32[0]];
          _Q6.i16[1] = *(_WORD *)&v57[2 * v137.u32[1]];
          _Q6.i16[2] = *(_WORD *)&v57[2 * v137.u32[2]];
          _Q6.i16[3] = *(_WORD *)&v57[2 * v137.u32[3]];
          _Q6.i16[4] = *(_WORD *)&v57[2 * v136.u32[0]];
          _Q6.i16[5] = *(_WORD *)&v57[2 * v136.u32[1]];
          _Q6.i16[6] = *(_WORD *)&v57[2 * v136.u32[2]];
          _Q6.i16[7] = *(_WORD *)&v57[2 * v136.u32[3]];
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v133, (float16x8_t)0), v107));
          uint32x4_t v139 = vmovl_high_u16(v138);
          uint32x4_t v140 = vmovl_u16(*(uint16x4_t *)v138.i8);
          v141.i16[0] = *(_WORD *)&v57[2 * v140.u32[0]];
          v141.i16[1] = *(_WORD *)&v57[2 * v140.u32[1]];
          v141.i16[2] = *(_WORD *)&v57[2 * v140.u32[2]];
          v141.i16[3] = *(_WORD *)&v57[2 * v140.u32[3]];
          v141.i16[4] = *(_WORD *)&v57[2 * v139.u32[0]];
          v141.i16[5] = *(_WORD *)&v57[2 * v139.u32[1]];
          v141.i16[6] = *(_WORD *)&v57[2 * v139.u32[2]];
          v141.i16[7] = *(_WORD *)&v57[2 * v139.u32[3]];
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v134, (float16x8_t)0), v107));
          uint32x4_t v143 = vmovl_high_u16(v142);
          uint32x4_t v144 = vmovl_u16(*(uint16x4_t *)v142.i8);
          v145.i16[0] = *(_WORD *)&v57[2 * v144.u32[0]];
          v145.i16[1] = *(_WORD *)&v57[2 * v144.u32[1]];
          v145.i16[2] = *(_WORD *)&v57[2 * v144.u32[2]];
          v145.i16[3] = *(_WORD *)&v57[2 * v144.u32[3]];
          v145.i16[4] = *(_WORD *)&v57[2 * v143.u32[0]];
          v145.i16[5] = *(_WORD *)&v57[2 * v143.u32[1]];
          v145.i16[6] = *(_WORD *)&v57[2 * v143.u32[2]];
          v145.i16[7] = *(_WORD *)&v57[2 * v143.u32[3]];
          *v110++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v236, (float16x8_t)_Q6, v233), v141, v232), v145, v231), v236), v235)));
          if (v111)
          {
            float16x8_t v146 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v221, (float16x8_t)_Q6, v215), v141, v214), v145, v213);
            *(int8x8_t *)_Q6.f32 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v221, (float16x8_t)_Q6, v218), v141, v217), v145, v216), v220), v219), v220), v219)));
            int8x8_t v147 = vmovn_s16((int16x8_t)vcvtq_u16_f16(v146));
            vst2_s8(v111, (int8x8x2_t)_Q6);
            v111 += 16;
          }
          v108 += 8;
        }
        while ((int)v108 < (int)v14 - 7);
        float v148 = &v68[v108];
        size_t v149 = v14 & 0xFFFFFFF8;
      }
      while (v14 > v149)
      {
        _Q6.i8[0] = v148[1];
        *(float *)&unsigned int v150 = (float)_Q6.u32[0];
        float v151 = *(float *)&v150 - v47;
        float v152 = a8.f32[1] * (float)(*(float *)&v150 - v47);
        LOBYTE(v150) = v109->i8[0];
        float v153 = v76 * (float)((float)v150 - v248);
        float v154 = v152 + v153;
        _Q6.i32[0] = 1174403072;
        if ((float)(v152 + v153) <= 8191.0)
        {
          _Q6.f32[0] = v152 + v153;
          if (v154 < 0.0) {
            _Q6.i32[0] = 0;
          }
        }
        LOBYTE(v154) = *v148;
        float v155 = v47;
        float v156 = (float)LODWORD(v154) - v47;
        float v157 = (float)(*((float *)&v106 + 1) * v151) + (float)(v156 * *(float *)&v106);
        float v158 = 8191.0;
        if ((float)(v153 + v157) <= 8191.0)
        {
          float v158 = v153 + v157;
          if ((float)(v153 + v157) < 0.0) {
            float v158 = 0.0;
          }
        }
        float v159 = a8.f32[0] * v156;
        float v160 = (float)(a8.f32[0] * v156) + v153;
        float v161 = 8191.0;
        if (v160 <= 8191.0)
        {
          float v161 = v160;
          if (v160 < 0.0) {
            float v161 = 0.0;
          }
        }
        LOBYTE(v160) = v109->i8[1];
        float v162 = v76 * (float)((float)LODWORD(v160) - v248);
        float v163 = v152 + v162;
        if (v163 < 0.0) {
          float v164 = 0.0;
        }
        else {
          float v164 = v163;
        }
        if (v163 <= 8191.0) {
          float v165 = v164;
        }
        else {
          float v165 = 8191.0;
        }
        float v166 = v157 + v162;
        if ((float)(v157 + v162) < 0.0) {
          float v167 = 0.0;
        }
        else {
          float v167 = v157 + v162;
        }
        if (v166 <= 8191.0) {
          float v168 = v167;
        }
        else {
          float v168 = 8191.0;
        }
        float v169 = v159 + v162;
        if (v169 < 0.0) {
          float v170 = 0.0;
        }
        else {
          float v170 = v169;
        }
        unsigned int v171 = llroundf(fminf(fmaxf(_Q6.f32[0], 0.0), 8191.0));
        if (v169 <= 8191.0) {
          float v172 = v170;
        }
        else {
          float v172 = 8191.0;
        }
        _H1 = *(_WORD *)&v56[2 * v171];
        __asm { FCVT            S1, H1 }
        _H6 = *(_WORD *)&v56[2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        _H7 = *(_WORD *)&v56[2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        float v179 = (float)((float)(_S15 * _S6) + (float)(_S1 * v94)) + (float)(_S7 * _S24);
        float v180 = (float)((float)(_S27 * _S6) + (float)(_S1 * _S26)) + (float)(_S7 * _S28);
        _S1 = (float)((float)(_S13 * _S6) + (float)(_S1 * _S29)) + (float)(_S7 * _S11);
        LOWORD(_S6) = *(_WORD *)&v57[2 * llroundf(fminf(fmaxf(v179, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        LOWORD(_S7) = *(_WORD *)&v57[2 * llroundf(fminf(fmaxf(v180, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        LOWORD(_S1) = *(_WORD *)&v57[2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0))];
        __asm { FCVT            S30, H1 }
        float v185 = (float)((float)((float)(v84 * _S7) + (float)(v82 * _S6)) + (float)(v86 * _S30)) + v48;
        float v186 = v50;
        if (v185 <= v50)
        {
          float v186 = (float)((float)((float)(v84 * _S7) + (float)(v82 * _S6)) + (float)(v86 * _S30)) + v48;
          if (v185 < v48) {
            float v186 = (float)v34;
          }
        }
        _H1 = *(_WORD *)&v56[2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H16 = *(_WORD *)&v56[2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        _H10 = *(_WORD *)&v56[2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0))];
        __asm { FCVT            S10, H10 }
        float v193 = (float)((float)(_S15 * _S16) + (float)(_S1 * v94)) + (float)(_S10 * _S24);
        float v194 = (float)((float)(_S27 * _S16) + (float)(_S1 * _S26)) + (float)(_S10 * _S28);
        float v195 = (float)((float)(_S13 * _S16) + (float)(_S1 * _S29)) + (float)(_S10 * _S11);
        _H10 = *(_WORD *)&v57[2 * llroundf(fminf(fmaxf(v193, 0.0), 8191.0))];
        _H12 = *(_WORD *)&v57[2 * llroundf(fminf(fmaxf(v194, 0.0), 8191.0))];
        _H14 = *(_WORD *)&v57[2 * llroundf(fminf(fmaxf(v195, 0.0), 8191.0))];
        v110->i8[0] = llroundf(v186);
        if (v111)
        {
          float v199 = (float)((float)(v49 + (float)(_S6 * v246)) + (float)(_S7 * v245)) + (float)(_S30 * v244);
          float v200 = v51;
          if (v199 <= v51)
          {
            float v200 = (float)((float)(v49 + (float)(_S6 * v246)) + (float)(_S7 * v245)) + (float)(_S30 * v244);
            if (v199 < v247) {
              float v200 = v247;
            }
          }
          float v201 = (float)((float)(v49 + (float)(_S6 * v243)) + (float)(_S7 * v242)) + (float)(_S30 * v241);
          *float16x8_t v111 = llroundf(v200);
          float v202 = v51;
          if (v201 <= v51)
          {
            float v202 = v201;
            if (v201 < v247) {
              float v202 = v247;
            }
          }
          v111[1] = llroundf(v202);
          v111 += 2;
        }
        __asm
        {
          FCVT            S6, H10
          FCVT            S7, H12
          FCVT            S21, H14
        }
        float v205 = (float)((float)(v84 * _S7) + (float)(v82 * _Q6.f32[0])) + (float)(v86 * _S21);
        float v206 = v50;
        if ((float)(v205 + v48) <= v50)
        {
          float v206 = v205 + v48;
          if ((float)(v205 + v48) < v48) {
            float v206 = (float)v34;
          }
        }
        v110->i8[1] = llroundf(v206);
        float v47 = v155;
        if (v111)
        {
          float v207 = (float)((float)(v49 + (float)(_Q6.f32[0] * v246)) + (float)(_S7 * v245)) + (float)(_S21 * v244);
          float v208 = v51;
          if (v207 <= v51)
          {
            float v208 = (float)((float)(v49 + (float)(_Q6.f32[0] * v246)) + (float)(_S7 * v245)) + (float)(_S21 * v244);
            if (v207 < v247) {
              float v208 = v247;
            }
          }
          _Q6.f32[0] = (float)((float)(v49 + (float)(_Q6.f32[0] * v243)) + (float)(_S7 * v242)) + (float)(_S21 * v241);
          *float16x8_t v111 = llroundf(v208);
          float v209 = v51;
          if (_Q6.f32[0] <= v51)
          {
            float v209 = _Q6.f32[0];
            if (_Q6.f32[0] < v247) {
              float v209 = v247;
            }
          }
          v111[1] = llroundf(v209);
          v111 += 2;
        }
        v149 += 2;
        v148 += 2;
        float v109 = (int8x8_t *)((char *)v109 + 2);
        float v110 = (int8x8_t *)((char *)v110 + 2);
      }
      float v69 = (int8x8_t *)((char *)v69 + v25);
      v68 += v26;
      uint64_t result = (void *)((char *)result + v28);
      v65 += v29;
      ++v13;
    }
    while (v13 != v17);
    if (v212 && v211)
    {
      do
      {
        uint64_t result = memcpy(v31, v27, v14);
        v27 += v210;
        v31 += v30;
        --v17;
      }
      while (v17);
    }
    else if (v211)
    {
      do
      {
        if (v14) {
          uint64_t result = memset(v31, 255, v14);
        }
        v31 += v30;
        --v17;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Mat_TRC_444vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    size_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (uint64_t *)result[16];
    unint64_t v17 = result[13] * a2 / v7 + result[15];
    uint64_t v18 = result[19];
    uint64_t v19 = (uint64_t *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = (char *)(v25 + v24 * v13 + v12);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (char *)(v30 + v29 * v17 + v15);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    float v33 = (float)LODWORD(a5);
    float v34 = (float)LODWORD(a6);
    float v35 = v32 * *(float *)v18;
    float v133 = v32 * *(float *)(v18 + 16);
    float v134 = v32 * *(float *)(v18 + 8);
    float v131 = v32 * *(float *)(v18 + 28);
    *(float *)&unsigned int v36 = v131;
    float v132 = v32 * *(float *)(v18 + 20);
    LOWORD(v36) = *(_WORD *)(v18 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 150);
    float v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 152);
    float v41 = (float)v36;
    float v42 = *(float *)(v18 + 36);
    float v43 = *(float *)(v18 + 40);
    float v44 = *(float *)(v18 + 44);
    float v138 = *(float *)(v18 + 52);
    float v139 = *(float *)(v18 + 48);
    float v136 = *(float *)(v18 + 60);
    float v137 = *(float *)(v18 + 56);
    _S4 = *(float *)(v18 + 64);
    float v46 = *(float *)(v18 + 68);
    float v135 = _S4;
    float v47 = *(float *)(v18 + 72);
    float v48 = *(float *)(v18 + 76);
    float v49 = *(float *)(v18 + 80);
    float v50 = *(float *)(v18 + 84);
    float v51 = *(float *)(v18 + 88);
    float v52 = *(float *)(v18 + 92);
    float v53 = *(float *)(v18 + 96);
    float v54 = *(float *)(v18 + 100);
    float v55 = *(float *)(v18 + 104);
    uint64_t v56 = v18 + 164;
    uint64_t v57 = v18 + 16548;
    uint64_t v59 = *v16;
    uint64_t v58 = v16[1];
    int16x8_t v60 = (unsigned char *)(v58 + v28 * v17 + v15);
    if (!v58) {
      int16x8_t v60 = 0;
    }
    uint64_t result = (void *)(v59 + v27 * v17 + v15);
    uint64_t v62 = *v19;
    uint64_t v61 = v19[1];
    uint64_t v63 = v61 + v23 * v13 + v12;
    if (!v61) {
      uint64_t v63 = 0;
    }
    uint64_t v64 = (unsigned char *)(v62 + v22 * v13 + v12);
    do
    {
      if (v11)
      {
        size_t v65 = 0;
        uint64_t v66 = v64;
        uint64_t v67 = result;
        float v68 = v60;
        do
        {
          LOBYTE(_S4) = *(unsigned char *)(v63 + v65 + 1);
          float v69 = (float)LODWORD(_S4) - v34;
          unsigned int v70 = LODWORD(v134);
          float v71 = v134 * v69;
          LOBYTE(v70) = *v66;
          float v72 = v35 * (float)((float)v70 - v33);
          float v73 = (float)(v134 * v69) + v72;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = (float)(v134 * v69) + v72;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          LOBYTE(v73) = *(unsigned char *)(v63 + v65);
          float v75 = (float)LODWORD(v73) - v34;
          float v76 = (float)(v132 * v69) + (float)(v75 * v133);
          float v77 = 8191.0;
          if ((float)(v72 + v76) <= 8191.0)
          {
            float v77 = v72 + v76;
            if ((float)(v72 + v76) < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v131 * v75;
          float v79 = (float)(v131 * v75) + v72;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          LOBYTE(v79) = v66[1];
          float v81 = v35 * (float)((float)LODWORD(v79) - v33);
          float v82 = v71 + v81;
          if (v82 < 0.0) {
            float v83 = 0.0;
          }
          else {
            float v83 = v82;
          }
          if (v82 > 8191.0) {
            float v83 = 8191.0;
          }
          float v84 = v76 + v81;
          if ((float)(v76 + v81) < 0.0) {
            float v85 = 0.0;
          }
          else {
            float v85 = v76 + v81;
          }
          if (v84 <= 8191.0) {
            float v86 = v85;
          }
          else {
            float v86 = 8191.0;
          }
          if ((float)(v78 + v81) < 0.0) {
            float v87 = 0.0;
          }
          else {
            float v87 = v78 + v81;
          }
          unsigned int v88 = llroundf(fminf(fmaxf(v74, 0.0), 8191.0));
          if ((float)(v78 + v81) <= 8191.0) {
            float v89 = v87;
          }
          else {
            float v89 = 8191.0;
          }
          _H4 = *(_WORD *)(v56 + 2 * v88);
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          float v100 = (float)((float)(v48 * _S5) + (float)(_S4 * v47)) + (float)(_S6 * v49);
          float v101 = (float)((float)(v51 * _S5) + (float)(_S4 * v50)) + (float)(_S6 * v52);
          _S6 = (float)((float)(v54 * _S5) + (float)(_S4 * v53)) + (float)(_S6 * v55);
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          float v106 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
          float v107 = v39;
          if (v106 <= v39)
          {
            float v107 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
            if (v106 < v37) {
              float v107 = v37;
            }
          }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v114 = (float)((float)(v48 * _S24) + (float)(_S7 * v47)) + (float)(_S25 * v49);
          float v115 = (float)((float)(v51 * _S24) + (float)(_S7 * v50)) + (float)(_S25 * v52);
          float v116 = (float)((float)(v54 * _S24) + (float)(_S7 * v53)) + (float)(_S25 * v55);
          _H7 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          *uint64_t v67 = llroundf(v107);
          if (v68)
          {
            float v120 = (float)((float)(v38 + (float)(_S4 * v139)) + (float)(_S5 * v138)) + (float)(_S6 * v137);
            float v121 = v41;
            if (v120 <= v41)
            {
              float v121 = (float)((float)(v38 + (float)(_S4 * v139)) + (float)(_S5 * v138)) + (float)(_S6 * v137);
              if (v120 < v40) {
                float v121 = v40;
              }
            }
            float v122 = (float)((float)(v38 + (float)(_S4 * v136)) + (float)(_S5 * v135)) + (float)(_S6 * v46);
            *float v68 = llroundf(v121);
            float v123 = v41;
            if (v122 <= v41)
            {
              float v123 = v122;
              if (v122 < v40) {
                float v123 = v40;
              }
            }
            v68[1] = llroundf(v123);
            v68 += 2;
          }
          __asm
          {
            FCVT            S4, H7
            FCVT            S5, H24
            FCVT            S6, H25
          }
          float v126 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
          float v127 = v39;
          if (v126 <= v39)
          {
            float v127 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
            if (v126 < v37) {
              float v127 = v37;
            }
          }
          v67[1] = llroundf(v127);
          if (v68)
          {
            float v128 = (float)((float)(v38 + (float)(_S4 * v139)) + (float)(_S5 * v138)) + (float)(_S6 * v137);
            float v129 = v41;
            if (v128 <= v41)
            {
              float v129 = (float)((float)(v38 + (float)(_S4 * v139)) + (float)(_S5 * v138)) + (float)(_S6 * v137);
              if (v128 < v40) {
                float v129 = v40;
              }
            }
            _S4 = (float)((float)(v38 + (float)(_S4 * v136)) + (float)(_S5 * v135)) + (float)(_S6 * v46);
            *float v68 = llroundf(v129);
            float v130 = v41;
            if (_S4 <= v41)
            {
              float v130 = _S4;
              if (_S4 < v40) {
                float v130 = v40;
              }
            }
            v68[1] = llroundf(v130);
            v68 += 2;
          }
          v65 += 2;
          v66 += 2;
          v67 += 2;
        }
        while (v11 > v65);
      }
      v64 += v22;
      v63 += v23;
      uint64_t result = (void *)((char *)result + v27);
      v60 += v28;
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      do
      {
        uint64_t result = memcpy(v31, v26, v11);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v31, 255, v11);
        }
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_444vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_444vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_422vf_rgb_444vf_neon_fp16_GCD(void *result, uint64_t a2, double a3)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    size_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (uint64_t *)result[16];
    unint64_t v17 = result[13] * a2 / v7 + result[15];
    uint64_t v18 = (float32x2_t *)result[19];
    uint64_t v20 = (uint64_t *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v19;
    uint64_t v23 = v19[1];
    uint64_t v24 = v19[2];
    uint64_t v25 = v20[2];
    uint64_t v26 = (char *)(v25 + v24 * v13 + v12);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (char *)(v30 + v29 * v17 + v15);
    unsigned int v32 = v18[17].u16[2];
    unsigned int v33 = v18[17].u16[3];
    v34.i32[0] = v18[3].i32[1];
    unsigned int v35 = v18[18].u16[0];
    unsigned int v36 = v18[18].u16[1];
    unsigned int v37 = v18[18].u16[2];
    unsigned int v38 = v18[18].u16[3];
    *(float *)&a3 = (float)v32;
    *(short float *)v3.i16 = (short float)v32;
    unsigned int v39 = v18[19].u16[0];
    _S1 = v18[4].f32[1];
    _S2 = v18[5].f32[0];
    _S3 = v18[5].f32[1];
    _S4 = v18[6].f32[0];
    _S5 = v18[6].f32[1];
    _S6 = v18[7].f32[0];
    _S7 = v18[7].f32[1];
    _S16 = v18[8].f32[0];
    _S17 = v18[8].f32[1];
    v4.f32[0] = (float)v18[17].u32[0] / (float)v18[16].u32[0];
    float v49 = (float)v33;
    float v50 = (float)v35;
    float v51 = (float)v36;
    float v52 = (float)v37;
    _S22 = v4.f32[0] * v18->f32[0];
    float v54 = (float)v38;
    float v55 = (float)v39;
    __asm { FCVT            H8, S22 }
    float16x8_t v140 = (float16x8_t)vdupq_lane_s16(v3, 0);
    v34.i32[1] = v18[1].i32[0];
    *(float32x2_t *)v5.f32 = vmul_n_f32(v34, v4.f32[0]);
    *(float32x2_t *)v4.f32 = vmul_n_f32(v18[2], v4.f32[0]);
    short float v61 = -(short float)v33;
    float16x8_t v139 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    float16x8_t v62 = vmulq_n_f16(v139, v61);
    float16x8_t v137 = v62;
    float16x8_t v138 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v63 = vmulq_n_f16(v138, v61);
    __asm { FCVT            H9, S1 }
    short float v135 = _H9;
    float16x8_t v136 = v63;
    __asm { FCVT            H9, S2 }
    *(short float *)v63.i16 = (short float)v35;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    *(short float *)v63.i16 = (short float)v36;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    *(short float *)v63.i16 = (short float)v37;
    int16x8_t v68 = vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    float16x8_t v133 = (float16x8_t)v68;
    short float v134 = _H9;
    *(short float *)v68.i16 = (short float)v38;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v68.i8, 0);
    *(short float *)v68.i16 = (short float)v39;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v68.i8, 0);
    uint64_t v72 = *v16;
    uint64_t v71 = v16[1];
    float v73 = (char *)(v71 + v28 * v17 + v15);
    if (!v71) {
      float v73 = 0;
    }
    uint64_t v74 = v72 + v27 * v17 + v15;
    uint64_t v76 = *v20;
    uint64_t v75 = v20[1];
    float v77 = (__int8 *)(v75 + v23 * v13 + v12);
    if (!v75) {
      float v77 = 0;
    }
    uint64_t result = (void *)(v76 + v22 * v13 + v12);
    __asm { FCVT            H9, S3 }
    short float v132 = _H9;
    __asm { FCVT            H9, S4 }
    short float v131 = _H9;
    __asm { FCVT            H9, S5 }
    short float v130 = _H9;
    __asm { FCVT            H9, S6 }
    short float v129 = _H9;
    __asm { FCVT            H9, S7 }
    short float v128 = _H9;
    __asm { FCVT            H9, S16 }
    short float v127 = _H9;
    __asm { FCVT            H9, S17 }
    short float v126 = _H9;
    uint64_t v85 = v5.i64[0];
    v86.i32[0] = v4.i32[1];
    do
    {
      if ((int)v11 < 8)
      {
        size_t v104 = 0;
        float v90 = v73;
        uint64_t v89 = v74;
        uint64_t v103 = v77;
        unsigned int v88 = (int8x8_t *)result;
      }
      else
      {
        uint64_t v87 = 0;
        unsigned int v88 = (int8x8_t *)result;
        uint64_t v89 = v74;
        float v90 = v73;
        do
        {
          int8x8_t v91 = *(int8x8_t *)&v77[v87];
          *(int8x8_t *)v92.i8 = vzip1_s8(v91, 0);
          v92.u64[1] = (unint64_t)vzip2_s8(v91, 0);
          float16x8_t v93 = vcvtq_f16_u16(v92);
          int8x16_t v94 = (int8x16_t)vmlaq_f16(v137, v139, v93);
          int8x16_t v95 = (int8x16_t)vmlaq_f16(v136, v138, v93);
          v93.i64[0] = vextq_s8(v94, v94, 8uLL).u64[0];
          *(int16x4_t *)v96.i8 = vuzp1_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v93.i8);
          *(int16x4_t *)v93.i8 = vuzp2_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v93.i8);
          *(double *)&v93.i64[1] = a3;
          *(double *)&v96.i64[1] = a3;
          float16x8_t v97 = (float16x8_t)vzip1q_s16((int16x8_t)v93, (int16x8_t)v93);
          v93.i64[0] = vextq_s8(v95, v95, 8uLL).u64[0];
          *(float16x4_t *)v93.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v93.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v93.i8));
          *(double *)&v93.i64[1] = a3;
          float16x8_t v98 = (float16x8_t)vzip1q_s16((int16x8_t)v93, (int16x8_t)v93);
          int8x8_t v99 = *v88++;
          *(int8x8_t *)v62.i8 = vzip1_s8(v99, 0);
          v62.u64[1] = (unint64_t)vzip2_s8(v99, 0);
          float16x8_t v86 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v62), v140);
          float16x8_t v100 = vmlaq_n_f16(v97, v86, _H8);
          float16x8_t v101 = vmlaq_n_f16(v98, v86, _H8);
          float16x8_t v102 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v96, v96), v86, _H8);
          v62.i32[0] = v133.i32[0];
          *(int8x8_t *)v86.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v66, v100, v135), v101, v134), v102, v132), v66), v133)));
          *(void *)uint64_t v89 = v86.i64[0];
          v89 += 8;
          if (v90)
          {
            float16x8_t v62 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v67, v100, v128), v101, v127), v102, v126);
            v141.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v67, v100, v131), v101, v130), v102, v129), v69), v70), v69), v70)));
            float16x8_t v86 = (float16x8_t)vcvtq_u16_f16(v62);
            v141.val[1] = vmovn_s16((int16x8_t)v86);
            vst2_s8(v90, v141);
            v90 += 16;
          }
          v87 += 8;
        }
        while ((int)v87 < (int)v11 - 7);
        uint64_t v103 = &v77[v87];
        size_t v104 = v11 & 0xFFFFFFF8;
      }
      while (v11 > v104)
      {
        v86.i8[0] = *v103;
        *(float *)&unsigned int v105 = (float)v86.u32[0] - v49;
        v62.i8[0] = v103[1];
        float v106 = (float)v62.u32[0] - v49;
        float v107 = *((float *)&v85 + 1) * v106;
        float v108 = (float)(v4.f32[1] * v106) + (float)(*(float *)&v105 * v4.f32[0]);
        float v109 = *(float *)&v85 * *(float *)&v105;
        LOBYTE(v105) = v88->i8[0];
        float v110 = _S22 * (float)((float)v105 - *(float *)&a3);
        float v111 = (float)(*((float *)&v85 + 1) * v106) + v110;
        float v112 = v110 + v108;
        float v113 = v109 + v110;
        float v114 = (float)((float)((float)(_S2 * (float)(v110 + v108)) + (float)(_S1 * v111))
                     + (float)(_S3 * (float)(v109 + v110)))
             + v50;
        *(float *)v86.i32 = v52;
        if (v114 <= v52)
        {
          *(float *)v86.i32 = v114;
          if (v114 < v50) {
            *(float *)v86.i32 = v50;
          }
        }
        LOBYTE(v114) = v88->i8[1];
        *(unsigned char *)uint64_t v89 = llroundf(*(float *)v86.i32);
        if (v90)
        {
          float v115 = (float)((float)(v51 + (float)(v111 * _S4)) + (float)(v112 * _S5)) + (float)(v113 * _S6);
          float v116 = (float)v39;
          if (v115 <= v55)
          {
            float v116 = (float)((float)(v51 + (float)(v111 * _S4)) + (float)(v112 * _S5)) + (float)(v113 * _S6);
            if (v115 < v54) {
              float v116 = v54;
            }
          }
          float v117 = (float)((float)(v51 + (float)(v111 * _S7)) + (float)(v112 * _S16)) + (float)(v113 * _S17);
          *float v90 = llroundf(v116);
          float v118 = (float)v39;
          if (v117 <= v55)
          {
            if (v117 < v54) {
              float v118 = v54;
            }
            else {
              float v118 = v117;
            }
          }
          v90[1] = llroundf(v118);
          v90 += 2;
        }
        float v119 = _S22 * (float)((float)LODWORD(v114) - *(float *)&a3);
        float v120 = v107 + v119;
        float v121 = v108 + v119;
        float v122 = v109 + v119;
        *(float *)v62.i32 = (float)((float)((float)(_S2 * v121) + (float)(_S1 * v120))
                                  + (float)(_S3 * (float)(v109 + v119)))
                          + v50;
        *(float *)v86.i32 = v52;
        if (*(float *)v62.i32 <= v52)
        {
          v86.i32[0] = v62.i32[0];
          if (*(float *)v62.i32 < v50) {
            *(float *)v86.i32 = v50;
          }
        }
        *(unsigned char *)(v89 + 1) = llroundf(*(float *)v86.i32);
        if (v90)
        {
          float v123 = (float)((float)(v51 + (float)(v120 * _S4)) + (float)(v121 * _S5)) + (float)(v122 * _S6);
          float v124 = (float)v39;
          if (v123 <= v55)
          {
            float v124 = (float)((float)(v51 + (float)(v120 * _S4)) + (float)(v121 * _S5)) + (float)(v122 * _S6);
            if (v123 < v54) {
              float v124 = v54;
            }
          }
          *(float *)v62.i32 = (float)(v51 + (float)(v120 * _S7)) + (float)(v121 * _S16);
          float v125 = *(float *)v62.i32 + (float)(v122 * _S17);
          *float v90 = llroundf(v124);
          *(float *)v86.i32 = (float)v39;
          if (v125 <= v55)
          {
            *(float *)v86.i32 = *(float *)v62.i32 + (float)(v122 * _S17);
            if (v125 < v54) {
              *(float *)v86.i32 = v54;
            }
          }
          v90[1] = llroundf(*(float *)v86.i32);
          v90 += 2;
        }
        v104 += 2;
        v103 += 2;
        unsigned int v88 = (int8x8_t *)((char *)v88 + 2);
        v89 += 2;
      }
      uint64_t result = (void *)((char *)result + v22);
      v77 += v23;
      v74 += v27;
      v73 += v28;
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      do
      {
        uint64_t result = memcpy(v31, v26, v11);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v31, 255, v11);
        }
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_444vf_GCD);
  return 0;
}

void *vt_Copy_422vf_rgb_444vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v11 = *(void *)((char *)result + 28);
  unint64_t v12 = *(unsigned __int8 *)result;
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (v14 != v13)
  {
    uint64_t v15 = 0;
    size_t v16 = *(void *)((char *)result + 20);
    uint64_t v17 = *(void *)((char *)result + 36);
    unint64_t v18 = v13 + *(void *)((char *)result + 44);
    unint64_t v19 = v14 - v13;
    uint64_t v20 = result[14];
    uint64_t v21 = (uint64_t *)result[16];
    unint64_t v22 = result[13] * a2 / v12 + result[15];
    uint64_t v23 = result[19];
    uint64_t v25 = (uint64_t *)result[7];
    uint64_t v24 = (uint64_t *)result[8];
    uint64_t v26 = (uint64_t *)result[17];
    uint64_t v27 = *v24;
    uint64_t v28 = v24[1];
    uint64_t v29 = v24[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = (char *)(v30 + v29 * v18 + v17);
    uint64_t v32 = *v26;
    uint64_t v33 = v26[1];
    uint64_t v34 = v26[2];
    uint64_t v35 = v21[2];
    uint64_t v36 = (char *)(v35 + v34 * v22 + v20);
    *(float *)&unsigned int v37 = (float)*(unsigned int *)(v23 + 136);
    LOWORD(a5) = *(_WORD *)(v23 + 140);
    float v38 = *(float *)&v37 / (float)*(unsigned int *)(v23 + 128);
    float v39 = (float)LODWORD(a5);
    LOWORD(v37) = *(_WORD *)(v23 + 142);
    float v40 = (float)v37;
    float v41 = v38 * *(float *)v23;
    float v42 = v38 * *(float *)(v23 + 8);
    float v43 = v38 * *(float *)(v23 + 16);
    float v44 = v38 * *(float *)(v23 + 20);
    float v45 = *(float *)(v23 + 28);
    float v46 = v38 * v45;
    LOWORD(v45) = *(_WORD *)(v23 + 144);
    float v47 = (float)LODWORD(v45);
    LOWORD(v6) = *(_WORD *)(v23 + 146);
    float v48 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v23 + 148);
    float v49 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v23 + 150);
    float v50 = (float)v8;
    LOWORD(v9) = *(_WORD *)(v23 + 152);
    float v51 = (float)v9;
    float v52 = *(float *)(v23 + 36);
    float v53 = *(float *)(v23 + 40);
    float v54 = *(float *)(v23 + 44);
    float v55 = *(float *)(v23 + 48);
    float v56 = *(float *)(v23 + 52);
    float v57 = *(float *)(v23 + 56);
    float v58 = *(float *)(v23 + 60);
    float v59 = *(float *)(v23 + 64);
    float v60 = *(float *)(v23 + 68);
    uint64_t v62 = *v21;
    uint64_t v61 = v21[1];
    float16x8_t v63 = (unsigned char *)(v61 + v33 * v22 + v20);
    if (!v61) {
      float16x8_t v63 = 0;
    }
    uint64_t v64 = (unsigned char *)(v62 + v32 * v22 + v20);
    uint64_t v66 = *v25;
    uint64_t v65 = v25[1];
    uint64_t v67 = v65 + v28 * v18 + v17;
    if (!v65) {
      uint64_t v67 = 0;
    }
    uint64_t result = (void *)(v66 + v27 * v18 + v17);
    do
    {
      if (v16)
      {
        size_t v68 = 0;
        float16x8_t v69 = result;
        float16x8_t v70 = v64;
        uint64_t v71 = v63;
        do
        {
          LOBYTE(v10) = *(unsigned char *)(v67 + v68);
          *(float *)&unsigned int v72 = (float)LODWORD(v10);
          float v73 = *(float *)&v72 - v40;
          LOBYTE(v72) = *(unsigned char *)(v67 + v68 + 1);
          float v74 = (float)v72 - v40;
          float v75 = v42 * v74;
          float v76 = (float)(v44 * v74) + (float)(v73 * v43);
          float v77 = v46 * v73;
          LOBYTE(v5) = *v69;
          float v78 = v41 * (float)((float)LODWORD(v5) - v39);
          float v79 = v75 + v78;
          float v80 = v78 + v76;
          float v81 = v77 + v78;
          float v82 = (float)((float)((float)(v53 * (float)(v78 + v76)) + (float)(v52 * (float)(v75 + v78)))
                      + (float)(v54 * (float)(v77 + v78)))
              + v47;
          float v83 = v49;
          if (v82 <= v49)
          {
            float v83 = v82;
            if (v82 < v47) {
              float v83 = v47;
            }
          }
          LOBYTE(v82) = v69[1];
          unsigned char *v70 = llroundf(v83);
          if (v71)
          {
            float v84 = (float)((float)(v48 + (float)(v79 * v55)) + (float)(v80 * v56)) + (float)(v81 * v57);
            float v85 = v51;
            if (v84 <= v51)
            {
              float v85 = (float)((float)(v48 + (float)(v79 * v55)) + (float)(v80 * v56)) + (float)(v81 * v57);
              if (v84 < v50) {
                float v85 = v50;
              }
            }
            float v86 = (float)((float)(v48 + (float)(v79 * v58)) + (float)(v80 * v59)) + (float)(v81 * v60);
            unsigned char *v71 = llroundf(v85);
            float v87 = v51;
            if (v86 <= v51)
            {
              if (v86 < v50) {
                float v87 = v50;
              }
              else {
                float v87 = v86;
              }
            }
            v71[1] = llroundf(v87);
            v71 += 2;
          }
          float v88 = v41 * (float)((float)LODWORD(v82) - v39);
          float v10 = v75 + v88;
          float v89 = v76 + v88;
          float v90 = v77 + v88;
          float v91 = (float)((float)((float)(v53 * v89) + (float)(v52 * v10)) + (float)(v54 * v90)) + v47;
          float v5 = v49;
          if (v91 <= v49)
          {
            float v5 = (float)((float)((float)(v53 * v89) + (float)(v52 * v10)) + (float)(v54 * v90)) + v47;
            if (v91 < v47) {
              float v5 = v47;
            }
          }
          v70[1] = llroundf(v5);
          if (v71)
          {
            float v92 = (float)((float)(v48 + (float)(v10 * v55)) + (float)(v89 * v56)) + (float)(v90 * v57);
            float v5 = v51;
            if (v92 <= v51)
            {
              float v5 = (float)((float)(v48 + (float)(v10 * v55)) + (float)(v89 * v56)) + (float)(v90 * v57);
              if (v92 < v50) {
                float v5 = v50;
              }
            }
            float v10 = (float)((float)(v48 + (float)(v10 * v58)) + (float)(v89 * v59)) + (float)(v90 * v60);
            unsigned char *v71 = llroundf(v5);
            float v93 = v51;
            if (v10 <= v51)
            {
              float v93 = v10;
              if (v10 < v50) {
                float v93 = v50;
              }
            }
            v71[1] = llroundf(v93);
            v71 += 2;
          }
          v68 += 2;
          v69 += 2;
          v70 += 2;
        }
        while (v16 > v68);
      }
      uint64_t result = (void *)((char *)result + v27);
      v67 += v28;
      v64 += v32;
      v63 += v33;
      ++v15;
    }
    while (v15 != v19);
    if (v30 && v35)
    {
      do
      {
        uint64_t result = memcpy(v36, v31, v16);
        v31 += v29;
        v36 += v34;
        --v19;
      }
      while (v19);
    }
    else if (v35)
    {
      do
      {
        if (v16) {
          uint64_t result = memset(v36, 255, v16);
        }
        v36 += v34;
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_xf444_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_422vf_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD(float32x2_t *result, uint64_t a2, double a3, double a4)
{
  uint64_t v5 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v6 = result->u8[0];
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(unint64_t *)((char *)&result[2] + 4);
    uint64_t v11 = *(uint64_t *)((char *)&result[4] + 4);
    unint64_t v12 = v7 + *(void *)((char *)&result[5] + 4);
    unint64_t v13 = v8 - v7;
    float32x2_t v14 = result[14];
    uint64_t v15 = (uint64_t *)result[16];
    unint64_t v16 = *(void *)&result[13] * a2 / v6 + *(void *)&result[15];
    uint64_t v17 = (float32x2_t *)result[19];
    uint64_t v18 = (uint64_t *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v247 = v19[2];
    uint64_t v250 = v18[2];
    uint64_t v23 = (unsigned __int8 *)(v250 + v247 * v12 + v11);
    uint64_t v24 = *v20;
    uint64_t v25 = v20[1];
    uint64_t v248 = v20[2];
    uint64_t v249 = v15[2];
    uint64_t v26 = (char *)(v249 + v248 * v16 + 2 * *(void *)&v14);
    unsigned int v27 = v17[17].u16[2];
    unsigned int v28 = v17[17].u16[3];
    v29.i32[0] = v17[3].i32[1];
    unsigned int v30 = v17[18].u16[0];
    unsigned int v31 = v17[18].u16[1];
    unsigned int v32 = v17[18].u16[2];
    unsigned int v33 = v17[18].u16[3];
    unsigned int v34 = v17[19].u16[0];
    _S17 = v17[4].f32[1];
    _S6 = v17[6].i32[1];
    _Q7.i32[0] = v17[7].i32[0];
    uint64_t v38 = (char *)&v17[2068] + 4;
    *(float *)&a3 = 8191.0 / (float)v17[16].u32[0];
    float v302 = (float)v28;
    float v303 = (float)v27;
    float v39 = (float)v30;
    float v40 = (float)v31;
    float v41 = (float)v32;
    *(float *)&a4 = (float)v33;
    float v300 = (float)v33;
    float v301 = *(float *)&a3 * v17->f32[0];
    float v42 = (float)v34;
    uint64_t result = (float32x2_t *)((char *)v17 + 164);
    *(short float *)&a4 = (short float)v27;
    float v43 = (char *)&v17[4116] + 4;
    __asm { FCVT            H8, S16 }
    float16x8_t v293 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    v29.i32[1] = v17[1].i32[0];
    *(float32x2_t *)v4.f32 = vmul_n_f32(v29, *(float *)&a3);
    *(double *)&v50.i64[1] = a3;
    short float v49 = -(short float)v28;
    *(float32x2_t *)v50.f32 = vmul_n_f32(v17[2], *(float *)&a3);
    float16x8_t v291 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v288 = vmulq_n_f16(v291, v49);
    float16x8_t v289 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v50), 0);
    _Q0 = vmulq_n_f16(v289, v49);
    float16x8_t v287 = _Q0;
    __asm { FCVT            H0, S17 }
    short float v286 = *(short float *)_Q0.i16;
    float v305 = v17[5].f32[0];
    __asm { FCVT            H0, S3 }
    short float v285 = *(short float *)_Q0.i16;
    float v304 = v17[5].f32[1];
    __asm { FCVT            H0, S4 }
    short float v284 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v30;
    int16x8_t v52 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v31;
    int16x8_t v53 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v32;
    int16x8_t v54 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v282 = (float16x8_t)v54;
    float16x8_t v283 = (float16x8_t)v52;
    *(short float *)v54.i16 = (short float)v33;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)v54.i8, 0);
    float16x8_t v260 = (float16x8_t)_Q0;
    float16x8_t v261 = (float16x8_t)v53;
    *(short float *)_Q0.i16 = (short float)v34;
    float16x8_t v259 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float v299 = v17[6].f32[0];
    __asm { FCVT            H0, S5 }
    short float v258 = *(short float *)_Q0.i16;
    unsigned int v56 = v17[16].u8[4];
    if (v56 >= 0x11) {
      unsigned __int8 v57 = 0;
    }
    else {
      unsigned __int8 v57 = 16 - v56;
    }
    uint64_t v59 = *v15;
    uint64_t v58 = v15[1];
    uint64_t v60 = v58 + v25 * v16 + 2 * *(void *)&v14;
    if (!v58) {
      uint64_t v60 = 0;
    }
    uint64_t v61 = v59 + v24 * v16 + 2 * *(void *)&v14;
    uint64_t v63 = *v18;
    uint64_t v62 = v18[1];
    uint64_t v64 = (__int8 *)(v62 + v22 * v12 + v11);
    if (!v62) {
      uint64_t v64 = 0;
    }
    uint64_t v65 = (int8x8_t *)(v63 + v21 * v12 + v11);
    unsigned __int8 v66 = v57;
    _S23 = v17[9].f32[1];
    _S24 = v17[10].f32[0];
    _S25 = v17[10].f32[1];
    _S3 = v17[13].f32[1];
    _S4 = v17[14].f32[0];
    float v298 = v17[6].f32[1];
    __asm { FCVT            H5, S6 }
    short float v257 = _H5;
    float v297 = v17[7].f32[0];
    __asm { FCVT            H5, S7 }
    short float v256 = _H5;
    float v294 = v17[7].f32[1];
    __asm { FCVT            H5, S31 }
    _S11 = v17[14].f32[1];
    _S12 = v17[15].f32[0];
    float v296 = v17[8].f32[0];
    __asm { FCVT            H0, S0 }
    short float v255 = _H0;
    float v295 = v17[8].f32[1];
    __asm { FCVT            H0, S1 }
    short float v254 = _H0;
    __asm { FCVT            H0, S3 }
    short float v275 = _H0;
    __asm { FCVT            H0, S4 }
    short float v274 = _H0;
    __asm { FCVT            H0, S11 }
    short float v273 = _H0;
    __asm { FCVT            H0, S12 }
    short float v272 = _H0;
    float v281 = v17[9].f32[0];
    __asm { FCVT            H0, S21 }
    short float v271 = _H0;
    __asm { FCVT            H0, S23 }
    short float v270 = _H0;
    __asm { FCVT            H0, S24 }
    short float v269 = _H0;
    __asm { FCVT            H0, S25 }
    short float v268 = _H0;
    float v280 = v17[11].f32[0];
    __asm { FCVT            H0, S26 }
    short float v267 = _H0;
    float v279 = v17[11].f32[1];
    __asm { FCVT            H0, S27 }
    short float v266 = _H0;
    float v278 = v17[12].f32[0];
    __asm { FCVT            H0, S28 }
    short float v265 = _H0;
    float v277 = v17[12].f32[1];
    __asm { FCVT            H0, S29 }
    short float v264 = _H0;
    uint16x8_t v91 = (uint16x8_t)vdupq_n_s16(v57);
    float v292 = v4.f32[0];
    float v290 = v50.f32[0];
    _Q0.i16[1] = v50.i16[3];
    float v263 = v50.f32[1];
    v92.i64[0] = 0x9000900090009000;
    v92.i64[1] = 0x9000900090009000;
    float v276 = v17[13].f32[0];
    __asm { FCVT            H0, S10 }
    short float v262 = *(short float *)_Q0.i16;
    uint64_t v252 = *v20;
    uint64_t v253 = v19[1];
    uint64_t v251 = v20[1];
    float v94 = _S24;
    float v95 = _S25;
    do
    {
      if ((int)v10 < 8)
      {
        unint64_t v168 = 0;
        float16x8_t v100 = (__int16 *)v60;
        int8x8_t v99 = (uint16x8_t *)v61;
        float v167 = v64;
        float16x8_t v98 = v65;
      }
      else
      {
        uint64_t v96 = v21;
        uint64_t v97 = 0;
        float16x8_t v98 = v65;
        int8x8_t v99 = (uint16x8_t *)v61;
        float16x8_t v100 = (__int16 *)v60;
        do
        {
          int8x8_t v101 = *(int8x8_t *)&v64[v97];
          *(int8x8_t *)v102.i8 = vzip1_s8(v101, 0);
          v102.u64[1] = (unint64_t)vzip2_s8(v101, 0);
          float16x8_t v103 = vcvtq_f16_u16(v102);
          int8x16_t v104 = (int8x16_t)vmlaq_f16(v288, v291, v103);
          int16x8_t v105 = (int16x8_t)vmlaq_f16(v287, v289, v103);
          v103.i64[0] = vextq_s8(v104, v104, 8uLL).u64[0];
          *(int16x4_t *)v106.i8 = vuzp2_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v103.i8);
          v106.i64[1] = v103.i64[0];
          *(int16x4_t *)v103.i8 = vuzp1_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v103.i8);
          float16x8_t v107 = (float16x8_t)vzip1q_s16(v106, v106);
          v103.i64[1] = v103.i64[0];
          float16x8_t v108 = (float16x8_t)vzip1q_s16((int16x8_t)v103, (int16x8_t)v103);
          v106.i64[0] = vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u64[0];
          *(float16x4_t *)v105.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v106.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v106.i8));
          v105.i64[1] = v108.i64[0];
          int8x8_t v109 = *v98++;
          *(int8x8_t *)v110.i8 = vzip1_s8(v109, 0);
          v110.u64[1] = (unint64_t)vzip2_s8(v109, 0);
          float16x8_t v111 = vsubq_f16(vcvtq_f16_u16(v110), v293);
          uint16x8_t v112 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v107, v111, _H8), (float16x8_t)0), v92));
          uint32x4_t v113 = vmovl_high_u16(v112);
          uint32x4_t v114 = vmovl_u16(*(uint16x4_t *)v112.i8);
          v115.i16[0] = result->i16[v114.u32[0]];
          v115.i16[1] = result->i16[v114.u32[1]];
          v115.i16[2] = result->i16[v114.u32[2]];
          v115.i16[3] = result->i16[v114.u32[3]];
          v115.i16[4] = result->i16[v113.u32[0]];
          v115.i16[5] = result->i16[v113.u32[1]];
          v115.i16[6] = result->i16[v113.u32[2]];
          v115.i16[7] = result->i16[v113.u32[3]];
          uint16x8_t v116 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16(v105, v105), v111, _H8), (float16x8_t)0), v92));
          uint32x4_t v117 = vmovl_high_u16(v116);
          uint32x4_t v118 = vmovl_u16(*(uint16x4_t *)v116.i8);
          v119.i16[0] = result->i16[v118.u32[0]];
          v119.i16[1] = result->i16[v118.u32[1]];
          v119.i16[2] = result->i16[v118.u32[2]];
          v119.i16[3] = result->i16[v118.u32[3]];
          v119.i16[4] = result->i16[v117.u32[0]];
          v119.i16[5] = result->i16[v117.u32[1]];
          v119.i16[6] = result->i16[v117.u32[2]];
          v119.i16[7] = result->i16[v117.u32[3]];
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v108, v111, _H8), (float16x8_t)0), v92));
          uint32x4_t v121 = vmovl_high_u16(v120);
          float16x8_t v122 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v120.i8);
          v122.i16[0] = result->i16[v122.u32[0]];
          v122.i16[1] = result->i16[v122.u32[1]];
          v122.i16[2] = result->i16[v122.u32[2]];
          v122.i16[3] = result->i16[v122.u32[3]];
          v122.i16[4] = result->i16[v121.u32[0]];
          v122.i16[5] = result->i16[v121.u32[1]];
          v122.i16[6] = result->i16[v121.u32[2]];
          v122.i16[7] = result->i16[v121.u32[3]];
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v115, v275), v119, v274), v122, v273), vmaxq_f16(vmaxq_f16(v115, v119), v122), v272), (float16x8_t)0), v92));
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v123.i8);
          float16x8_t v125 = (float16x8_t)vmovl_high_u16(v123);
          uint64_t v126 = v125.u32[0];
          v125.i16[0] = *(_WORD *)&v38[2 * v124.u32[0]];
          short float v127 = (__int16 *)&v38[2 * v126];
          short float v128 = (__int16 *)&v38[2 * v125.u32[1]];
          short float v129 = (__int16 *)&v38[2 * v125.u32[2]];
          short float v130 = (__int16 *)&v38[2 * v125.u32[3]];
          v125.i16[1] = *(_WORD *)&v38[2 * v124.u32[1]];
          v125.i16[2] = *(_WORD *)&v38[2 * v124.u32[2]];
          v125.i16[3] = *(_WORD *)&v38[2 * v124.u32[3]];
          v125.i16[4] = *v127;
          v125.i16[5] = *v128;
          v125.i16[6] = *v129;
          v125.i16[7] = *v130;
          float16x8_t v131 = vmulq_f16(v115, v125);
          float16x8_t v132 = vmulq_f16(v119, v125);
          float16x8_t v133 = vmulq_f16(v122, v125);
          _Q7 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v131, v268), v132, v267), v133, v266);
          float16x8_t v134 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v133, v262), v132, v264), v131, v265);
          uint16x8_t v135 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v131, v271), v132, v270), v133, v269), (float16x8_t)0), v92));
          uint32x4_t v136 = vmovl_u16(*(uint16x4_t *)v135.i8);
          uint64_t v137 = v136.u32[1];
          uint64_t v138 = v136.u32[0];
          uint32x4_t v139 = vmovl_high_u16(v135);
          uint64_t v140 = v136.u32[3];
          uint64_t v141 = v136.u32[2];
          uint64_t v142 = v139.u32[1];
          uint64_t v143 = v139.u32[0];
          uint64_t v144 = v139.u32[3];
          uint64_t v145 = v139.u32[2];
          uint16x8_t v146 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(_Q7, (float16x8_t)0), v92));
          uint32x4_t v147 = vmovl_u16(*(uint16x4_t *)v146.i8);
          uint64_t v148 = v147.u32[1];
          uint64_t v149 = v147.u32[0];
          _Q0.i16[0] = *(_WORD *)&v43[2 * v138];
          _Q0.i16[1] = *(_WORD *)&v43[2 * v137];
          _Q0.i16[2] = *(_WORD *)&v43[2 * v141];
          _Q0.i16[3] = *(_WORD *)&v43[2 * v140];
          _Q0.i16[4] = *(_WORD *)&v43[2 * v143];
          _Q0.i16[5] = *(_WORD *)&v43[2 * v142];
          _Q0.i16[6] = *(_WORD *)&v43[2 * v145];
          _Q0.i16[7] = *(_WORD *)&v43[2 * v144];
          uint32x4_t v150 = vmovl_high_u16(v146);
          uint64_t v151 = v147.u32[3];
          uint64_t v152 = v147.u32[2];
          uint64_t v153 = v150.u32[1];
          uint64_t v154 = v150.u32[0];
          uint64_t v155 = v150.u32[3];
          uint64_t v156 = v150.u32[2];
          uint16x8_t v157 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v134, (float16x8_t)0), v92));
          uint32x4_t v158 = vmovl_u16(*(uint16x4_t *)v157.i8);
          v159.i16[0] = *(_WORD *)&v43[2 * v149];
          v159.i16[1] = *(_WORD *)&v43[2 * v148];
          v159.i16[2] = *(_WORD *)&v43[2 * v152];
          v159.i16[3] = *(_WORD *)&v43[2 * v151];
          v159.i16[4] = *(_WORD *)&v43[2 * v154];
          v159.i16[5] = *(_WORD *)&v43[2 * v153];
          v159.i16[6] = *(_WORD *)&v43[2 * v156];
          v159.i16[7] = *(_WORD *)&v43[2 * v155];
          uint32x4_t v160 = vmovl_high_u16(v157);
          uint64_t v161 = v160.u32[0];
          v165.i16[0] = *(_WORD *)&v43[2 * v158.u32[0]];
          float v162 = (__int16 *)&v43[2 * v160.u32[1]];
          float v163 = (__int16 *)&v43[2 * v160.u32[2]];
          float v164 = (__int16 *)&v43[2 * v160.u32[3]];
          v165.i16[1] = *(_WORD *)&v43[2 * v158.u32[1]];
          v165.i16[2] = *(_WORD *)&v43[2 * v158.u32[2]];
          v165.i16[3] = *(_WORD *)&v43[2 * v158.u32[3]];
          v165.i16[4] = *(_WORD *)&v43[2 * v161];
          v165.i16[5] = *v162;
          v165.i16[6] = *v163;
          v165.i16[7] = *v164;
          _Q7.i32[0] = v282.i32[0];
          *v99++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v283, _Q0, v286), v159, v285), v165, v284), v283), v282)), v91);
          if (v100)
          {
            _Q7 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v261, _Q0, _H5), v159, v255), v165, v254);
            _Q0 = (float16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v261, _Q0, v258), v159, v257), v165, v256), v260), v259), v260), v259)), v91);
            uint16x8_t v166 = vshlq_u16(vcvtq_u16_f16(_Q7), v91);
            vst2q_s16(v100, *(int16x8x2_t *)_Q0.i8);
            v100 += 16;
          }
          v97 += 8;
        }
        while ((int)v97 < (int)v10 - 7);
        float v167 = &v64[v97];
        uint64_t v21 = v96;
        uint64_t v24 = v252;
        uint64_t v22 = v253;
        unint64_t v168 = v10 & 0xFFFFFFF8;
        uint64_t v25 = v251;
      }
      while (v10 > v168)
      {
        float v169 = _S17;
        _Q0.i8[0] = v167[1];
        float v170 = (float)_Q0.u32[0] - v302;
        unsigned int v171 = v4.u32[1];
        float v172 = v4.f32[1] * v170;
        LOBYTE(v171) = v98->i8[0];
        float v173 = v301 * (float)((float)v171 - v303);
        v4.f32[0] = (float)(v4.f32[1] * v170) + v173;
        float v174 = 8191.0;
        if (v4.f32[0] <= 8191.0)
        {
          float v174 = (float)(v4.f32[1] * v170) + v173;
          if (v4.f32[0] < 0.0) {
            float v174 = 0.0;
          }
        }
        _Q7.i8[0] = *v167;
        float v175 = (float)_Q7.u32[0] - v302;
        float v176 = (float)(v263 * v170) + (float)(v175 * v290);
        float v177 = 8191.0;
        if ((float)(v173 + v176) <= 8191.0)
        {
          float v177 = v173 + v176;
          if ((float)(v173 + v176) < 0.0) {
            float v177 = 0.0;
          }
        }
        unsigned int v178 = LODWORD(v292);
        float v179 = v292 * v175;
        float v180 = v179 + v173;
        BOOL v181 = (float)(v179 + v173) <= 8191.0;
        float v182 = 8191.0;
        if (v181)
        {
          float v182 = v180;
          if (v180 < 0.0) {
            float v182 = 0.0;
          }
        }
        LOBYTE(v178) = v98->i8[1];
        float v183 = v301 * (float)((float)v178 - v303);
        float v184 = v172 + v183;
        float v185 = 8191.0;
        if (v184 <= 8191.0)
        {
          float v185 = v184;
          if (v184 < 0.0) {
            float v185 = 0.0;
          }
        }
        float v186 = v176 + v183;
        float v187 = 8191.0;
        if (v186 <= 8191.0)
        {
          float v187 = v186;
          if (v186 < 0.0) {
            float v187 = 0.0;
          }
        }
        float v188 = v179 + v183;
        float v189 = 8191.0;
        if (v188 <= 8191.0)
        {
          float v189 = v188;
          if (v188 < 0.0) {
            float v189 = 0.0;
          }
        }
        _H0 = result->i16[llroundf(fminf(fmaxf(v174, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        _H7 = result->i16[llroundf(fminf(fmaxf(v177, 0.0), 8191.0))];
        unsigned int v193 = llroundf(fminf(fmaxf(v182, 0.0), 8191.0));
        __asm { FCVT            S6, H7 }
        _H7 = result->i16[v193];
        __asm { FCVT            S21, H7 }
        float v197 = (float)((float)((float)(_S4 * _S6) + (float)(_S3 * _S0)) + (float)(_S11 * _S21))
             + (float)(_S12 * fmaxf(_S0, fmaxf(_S6, _S21)));
        float v198 = 8191.0;
        if (v197 <= 8191.0)
        {
          float v198 = v197;
          if (v197 < 0.0) {
            float v198 = 0.0;
          }
        }
        _H7 = result->i16[llroundf(fminf(fmaxf(v185, 0.0), 8191.0))];
        __asm { FCVT            S16, H7 }
        _H1 = result->i16[llroundf(fminf(fmaxf(v187, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = result->i16[llroundf(fminf(fmaxf(v189, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H17 = *(_WORD *)&v38[2 * llroundf(v198)];
        float v206 = (float)((float)((float)(_S4 * _S1) + (float)(_S3 * _S16)) + (float)(_S11 * _S2))
             + (float)(_S12 * fmaxf(_S16, fmaxf(_S1, _S2)));
        float v207 = 8191.0;
        if (v206 <= 8191.0)
        {
          float v207 = v206;
          if (v206 < 0.0) {
            float v207 = 0.0;
          }
        }
        __asm { FCVT            S17, H17 }
        float v209 = _S0 * _S17;
        float v210 = _S6 * _S17;
        float v211 = _S21 * _S17;
        _H7 = *(_WORD *)&v38[2 * llroundf(v207)];
        __asm { FCVT            S7, H7 }
        float v214 = _S16 * _S7;
        _S1 = _S1 * _S7;
        _S2 = _S2 * _S7;
        float v217 = (float)((float)(_S23 * v210) + (float)(v209 * v281)) + (float)(v211 * v94);
        float v218 = (float)((float)(v280 * v210) + (float)(v209 * v95)) + (float)(v211 * v279);
        _S0 = (float)((float)(v277 * v210) + (float)(v209 * v278)) + (float)(v211 * v276);
        float v220 = (float)((float)(_S23 * _S1) + (float)(v214 * v281)) + (float)(_S2 * v94);
        float v221 = (float)((float)(v280 * _S1) + (float)(v214 * v95)) + (float)(_S2 * v279);
        unsigned int v222 = llroundf(fminf(fmaxf(v217, 0.0), 8191.0));
        float v223 = (float)((float)(v277 * _S1) + (float)(v214 * v278)) + (float)(_S2 * v276);
        LOWORD(_S1) = *(_WORD *)&v43[2 * v222];
        __asm { FCVT            S1, H1 }
        LOWORD(_S2) = *(_WORD *)&v43[2 * llroundf(fminf(fmaxf(v218, 0.0), 8191.0))];
        __asm { FCVT            S6, H2 }
        LOWORD(_S0) = *(_WORD *)&v43[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
        __asm { FCVT            S2, H0 }
        _H0 = *(_WORD *)&v43[2 * llroundf(fminf(fmaxf(v220, 0.0), 8191.0))];
        _H21 = *(_WORD *)&v43[2 * llroundf(fminf(fmaxf(v221, 0.0), 8191.0))];
        _H24 = *(_WORD *)&v43[2 * llroundf(fminf(fmaxf(v223, 0.0), 8191.0))];
        _S17 = v169;
        float v230 = (float)((float)((float)(v305 * _S6) + (float)(v169 * _S1)) + (float)(v304 * _S2)) + v39;
        float v231 = v41;
        if (v230 <= v41)
        {
          float v231 = (float)((float)((float)(v305 * _S6) + (float)(v169 * _S1)) + (float)(v304 * _S2)) + v39;
          if (v230 < v39) {
            float v231 = v39;
          }
        }
        v99->i16[0] = llroundf(v231) << v66;
        if (v100)
        {
          float v232 = (float)((float)(v40 + (float)(_S1 * v299)) + (float)(_S6 * v298)) + (float)(_S2 * v297);
          float v233 = v42;
          if (v232 <= v42)
          {
            float v233 = (float)((float)(v40 + (float)(_S1 * v299)) + (float)(_S6 * v298)) + (float)(_S2 * v297);
            if (v232 < v300) {
              float v233 = v300;
            }
          }
          float v234 = (float)((float)(v40 + (float)(_S1 * v294)) + (float)(_S6 * v296)) + (float)(_S2 * v295);
          *float16x8_t v100 = llroundf(v233) << v66;
          float v235 = v42;
          if (v234 <= v42)
          {
            float v235 = v234;
            if (v234 < v300) {
              float v235 = v300;
            }
          }
          v100[1] = llroundf(v235) << v66;
          v100 += 2;
        }
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H21
          FCVT            S2, H24
        }
        *(float *)_Q7.i32 = (float)((float)((float)(v305 * _S1) + (float)(v169 * *(float *)_Q0.i32))
                                  + (float)(v304 * _S2))
                          + v39;
        float v238 = v41;
        if (*(float *)_Q7.i32 <= v41)
        {
          float v238 = (float)((float)((float)(v305 * _S1) + (float)(v169 * *(float *)_Q0.i32)) + (float)(v304 * _S2)) + v39;
          if (*(float *)_Q7.i32 < v39) {
            float v238 = v39;
          }
        }
        v99->i16[1] = llroundf(v238) << v66;
        if (v100)
        {
          float v239 = (float)((float)(v40 + (float)(*(float *)_Q0.i32 * v299)) + (float)(_S1 * v298)) + (float)(_S2 * v297);
          float v240 = v42;
          if (v239 <= v42)
          {
            float v240 = (float)((float)(v40 + (float)(*(float *)_Q0.i32 * v299)) + (float)(_S1 * v298)) + (float)(_S2 * v297);
            if (v239 < v300) {
              float v240 = v300;
            }
          }
          *(float *)_Q7.i32 = v296;
          *(float *)_Q0.i32 = (float)((float)(v40 + (float)(*(float *)_Q0.i32 * v294)) + (float)(_S1 * v296))
                            + (float)(_S2 * v295);
          *float16x8_t v100 = llroundf(v240) << v66;
          float v241 = v42;
          if (*(float *)_Q0.i32 <= v42)
          {
            float v241 = *(float *)_Q0.i32;
            if (*(float *)_Q0.i32 < v300) {
              float v241 = v300;
            }
          }
          v100[1] = llroundf(v241) << v66;
          v100 += 2;
        }
        v168 += 2;
        v167 += 2;
        float16x8_t v98 = (int8x8_t *)((char *)v98 + 2);
        int8x8_t v99 = (uint16x8_t *)((char *)v99 + 4);
      }
      uint64_t v65 = (int8x8_t *)((char *)v65 + v21);
      v64 += v22;
      v61 += v24;
      v60 += v25;
      ++v9;
    }
    while (v9 != v13);
    if (v250 && v249)
    {
      uint64_t v242 = 0;
      do
      {
        if (v10)
        {
          unint64_t v243 = v10;
          float v244 = v26;
          float v245 = v23;
          do
          {
            __int16 v246 = *v245++;
            *v244++ = v246 | (v246 << 8);
            --v243;
          }
          while (v243);
        }
        v23 += v247;
        v26 += v248;
        ++v242;
      }
      while (v242 != v13);
    }
    else if (v249)
    {
      do
      {
        if (v10) {
          uint64_t result = (float32x2_t *)memset(v26, 255, 2 * v10);
        }
        v26 += v248;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Tone_Mat_TRC_xf444_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (void *)result[16];
    unint64_t v16 = result[13] * a2 / v6 + result[15];
    uint64_t v17 = result[19];
    uint64_t v18 = (uint64_t *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = v18[2];
    uint64_t v25 = (unsigned __int8 *)(v24 + v23 * v12 + v11);
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    uint64_t v30 = (char *)(v29 + v28 * v16 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    float v32 = (float)LODWORD(a5);
    float v168 = v31 * *(float *)v17;
    float v169 = (float)LODWORD(a4);
    float v159 = v31 * *(float *)(v17 + 16);
    float v160 = v31 * *(float *)(v17 + 8);
    float v33 = v31 * *(float *)(v17 + 20);
    *(float *)&unsigned int v34 = v31 * *(float *)(v17 + 28);
    float v157 = *(float *)&v34;
    float v158 = v33;
    LOWORD(v34) = *(_WORD *)(v17 + 144);
    float v35 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 146);
    float v36 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 148);
    float v37 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 150);
    float v38 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 152);
    float v39 = (float)v34;
    float v40 = *(float *)(v17 + 36);
    float v41 = *(float *)(v17 + 40);
    float v42 = *(float *)(v17 + 44);
    float v166 = *(float *)(v17 + 48);
    float v167 = v38;
    float v164 = *(float *)(v17 + 56);
    float v165 = *(float *)(v17 + 52);
    float v162 = *(float *)(v17 + 64);
    float v163 = *(float *)(v17 + 60);
    _S0 = *(float *)(v17 + 68);
    float v44 = *(float *)(v17 + 72);
    float v161 = _S0;
    float v46 = *(float *)(v17 + 76);
    float v45 = *(float *)(v17 + 80);
    float v47 = *(float *)(v17 + 84);
    float v48 = *(float *)(v17 + 88);
    float v49 = *(float *)(v17 + 92);
    float v50 = *(float *)(v17 + 96);
    float v51 = *(float *)(v17 + 100);
    float v52 = *(float *)(v17 + 104);
    uint64_t v53 = v17 + 164;
    uint64_t result = (void *)(v17 + 16548);
    unsigned int v54 = *(unsigned __int8 *)(v17 + 132);
    if (v54 >= 0x11) {
      char v55 = 0;
    }
    else {
      char v55 = 16 - v54;
    }
    uint64_t v56 = v15[1];
    _ZF = v56 == 0;
    uint64_t v58 = v56 + v27 * v16;
    uint64_t v59 = *v15 + v26 * v16;
    uint64_t v60 = v17 + 32932;
    uint64_t v61 = (_WORD *)(v58 + 2 * v14);
    if (_ZF) {
      uint64_t v61 = 0;
    }
    uint64_t v62 = (_WORD *)(v59 + 2 * v14);
    uint64_t v64 = *v18;
    uint64_t v63 = v18[1];
    uint64_t v65 = v63 + v22 * v12 + v11;
    if (!v63) {
      uint64_t v65 = 0;
    }
    unsigned __int8 v66 = (unsigned char *)(v64 + v21 * v12 + v11);
    char v67 = v55;
    float v69 = *(float *)(v17 + 108);
    float v68 = *(float *)(v17 + 112);
    float v70 = *(float *)(v17 + 116);
    float v71 = *(float *)(v17 + 120);
    do
    {
      if (v10)
      {
        unint64_t v72 = 0;
        float v73 = v66;
        float v74 = v62;
        float v75 = v61;
        do
        {
          LOBYTE(_S0) = *(unsigned char *)(v65 + v72 + 1);
          float v76 = (float)LODWORD(_S0) - v32;
          unsigned int v77 = LODWORD(v160);
          float v78 = v160 * v76;
          LOBYTE(v77) = *v73;
          float v79 = v168 * (float)((float)v77 - v169);
          float v80 = (float)(v160 * v76) + v79;
          float v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            float v81 = (float)(v160 * v76) + v79;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          LOBYTE(v80) = *(unsigned char *)(v65 + v72);
          float v82 = v32;
          float v83 = (float)LODWORD(v80) - v32;
          float v84 = (float)(v158 * v76) + (float)(v83 * v159);
          float v85 = 8191.0;
          if ((float)(v79 + v84) <= 8191.0)
          {
            float v85 = v79 + v84;
            if ((float)(v79 + v84) < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v157 * v83;
          float v87 = v86 + v79;
          BOOL v88 = (float)(v86 + v79) <= 8191.0;
          float v89 = 8191.0;
          if (v88)
          {
            float v89 = v87;
            if (v87 < 0.0) {
              float v89 = 0.0;
            }
          }
          LOBYTE(v87) = v73[1];
          float v90 = v168 * (float)((float)LODWORD(v87) - v169);
          float v91 = v78 + v90;
          BOOL v88 = (float)(v78 + v90) <= 8191.0;
          float v92 = 8191.0;
          if (v88)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v84 + v90;
          BOOL v88 = (float)(v84 + v90) <= 8191.0;
          float v94 = 8191.0;
          if (v88)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v86 + v90;
          BOOL v88 = (float)(v86 + v90) <= 8191.0;
          float v96 = 8191.0;
          if (v88)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S1, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S2, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H19 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          float v109 = fmaxf(_S1, fmaxf(_S2, _S26));
          float v110 = (float)((float)((float)(v68 * _S2) + (float)(v69 * _S1)) + (float)(v70 * _S26)) + (float)(v71 * v109);
          float v111 = 8191.0;
          if (v110 <= 8191.0)
          {
            float v111 = (float)((float)((float)(v68 * _S2) + (float)(v69 * _S1)) + (float)(v70 * _S26)) + (float)(v71 * v109);
            if (v110 < 0.0) {
              float v111 = 0.0;
            }
          }
          __asm
          {
            FCVT            S27, H19
            FCVT            S28, H28
            FCVT            S29, H29
          }
          _H19 = *((_WORD *)result + llroundf(v111));
          float v116 = (float)((float)((float)(v68 * _S28) + (float)(v69 * _S27)) + (float)(v70 * _S29))
               + (float)(v71 * fmaxf(_S27, fmaxf(_S28, _S29)));
          float v117 = 8191.0;
          if (v116 <= 8191.0)
          {
            float v117 = v116;
            if (v116 < 0.0) {
              float v117 = 0.0;
            }
          }
          __asm { FCVT            S0, H19 }
          float v119 = _S1 * _S0;
          float v120 = _S2 * _S0;
          float v121 = _S26 * _S0;
          _H19 = *((_WORD *)result + llroundf(v117));
          __asm { FCVT            S19, H19 }
          _S24 = _S27 * _S19;
          float v125 = _S28 * _S19;
          float v126 = _S29 * _S19;
          float v127 = (float)((float)(v46 * v120) + (float)(v119 * v44)) + (float)(v121 * v45);
          float v128 = (float)((float)(v48 * v120) + (float)(v119 * v47)) + (float)(v121 * v49);
          _S0 = (float)((float)(v51 * v120) + (float)(v119 * v50)) + (float)(v121 * v52);
          float v130 = (float)((float)(v46 * v125) + (float)(_S24 * v44)) + (float)(v126 * v45);
          float v131 = (float)((float)(v48 * v125) + (float)(_S24 * v47)) + (float)(v126 * v49);
          float v132 = (float)((float)(v51 * v125) + (float)(_S24 * v50)) + (float)(v126 * v52);
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S28, H24 }
          LOWORD(_S0) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S29, H0 }
          _H0 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          float v139 = (float)((float)((float)(v41 * _S28) + (float)(v40 * _S27)) + (float)(v42 * _S29)) + v35;
          float v140 = v37;
          if (v139 <= v37)
          {
            float v140 = (float)((float)((float)(v41 * _S28) + (float)(v40 * _S27)) + (float)(v42 * _S29)) + v35;
            if (v139 < v35) {
              float v140 = v35;
            }
          }
          *float v74 = llroundf(v140) << v67;
          if (v75)
          {
            float v141 = (float)((float)(v36 + (float)(_S27 * v166)) + (float)(_S28 * v165)) + (float)(_S29 * v164);
            float v142 = v39;
            if (v141 <= v39)
            {
              float v142 = (float)((float)(v36 + (float)(_S27 * v166)) + (float)(_S28 * v165)) + (float)(_S29 * v164);
              if (v141 < v167) {
                float v142 = v167;
              }
            }
            float v143 = (float)((float)(v36 + (float)(_S27 * v163)) + (float)(_S28 * v162)) + (float)(_S29 * v161);
            *float v75 = llroundf(v142) << v67;
            float v144 = v39;
            if (v143 <= v39)
            {
              float v144 = (float)((float)(v36 + (float)(_S27 * v163)) + (float)(_S28 * v162)) + (float)(_S29 * v161);
              if (v143 < v167) {
                float v144 = v167;
              }
            }
            v75[1] = llroundf(v144) << v67;
            v75 += 2;
          }
          float v32 = v82;
          __asm
          {
            FCVT            S0, H0
            FCVT            S2, H24
            FCVT            S26, H26
          }
          float v147 = (float)((float)((float)(v41 * _S2) + (float)(v40 * _S0)) + (float)(v42 * _S26)) + v35;
          float v148 = v37;
          if (v147 <= v37)
          {
            float v148 = (float)((float)((float)(v41 * _S2) + (float)(v40 * _S0)) + (float)(v42 * _S26)) + v35;
            if (v147 < v35) {
              float v148 = v35;
            }
          }
          v74[1] = llroundf(v148) << v67;
          if (v75)
          {
            float v149 = (float)((float)(v36 + (float)(_S0 * v166)) + (float)(_S2 * v165)) + (float)(_S26 * v164);
            float v150 = v39;
            if (v149 <= v39)
            {
              float v150 = (float)((float)(v36 + (float)(_S0 * v166)) + (float)(_S2 * v165)) + (float)(_S26 * v164);
              if (v149 < v167) {
                float v150 = v167;
              }
            }
            _S0 = (float)((float)(v36 + (float)(_S0 * v163)) + (float)(_S2 * v162)) + (float)(_S26 * v161);
            *float v75 = llroundf(v150) << v67;
            float v151 = v39;
            if (_S0 <= v39)
            {
              float v151 = _S0;
              if (_S0 < v167) {
                float v151 = v167;
              }
            }
            v75[1] = llroundf(v151) << v67;
            v75 += 2;
          }
          v72 += 2;
          v73 += 2;
          v74 += 2;
        }
        while (v10 > v72);
      }
      v66 += v21;
      v65 += v22;
      uint64_t v62 = (_WORD *)((char *)v62 + v26);
      uint64_t v61 = (_WORD *)((char *)v61 + v27);
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      uint64_t v152 = 0;
      do
      {
        if (v10)
        {
          unint64_t v153 = v10;
          uint64_t v154 = v30;
          uint64_t v155 = v25;
          do
          {
            __int16 v156 = *v155++;
            *v154++ = v156 | (v156 << 8);
            --v153;
          }
          while (v153);
        }
        v25 += v23;
        v30 += v28;
        ++v152;
      }
      while (v152 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          uint64_t result = memset(v30, 255, 2 * v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_xf444_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_422vf_TRC_Mat_TRC_xf444_neon_fp16_GCD(float32x2_t *result, uint64_t a2, double a3, double a4, float32x4_t a5, double a6, double a7, float32x4_t a8)
{
  uint64_t v8 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v9 = result->u8[0];
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = *(unint64_t *)((char *)&result[2] + 4);
    uint64_t v14 = *(uint64_t *)((char *)&result[4] + 4);
    unint64_t v15 = v10 + *(void *)((char *)&result[5] + 4);
    unint64_t v16 = v11 - v10;
    float32x2_t v17 = result[14];
    unint64_t v18 = *(void *)&result[13] * a2 / v9;
    uint64_t v19 = (uint64_t *)result[16];
    unint64_t v20 = v18 + *(void *)&result[15];
    uint64_t v21 = (float32x2_t *)result[19];
    size_t v22 = (uint64_t *)result[7];
    uint64_t v23 = (uint64_t *)result[8];
    uint64_t v24 = (uint64_t *)result[17];
    uint64_t v25 = *v23;
    uint64_t v26 = v23[1];
    uint64_t v210 = v23[2];
    uint64_t v212 = v22[2];
    uint64_t v27 = (unsigned __int8 *)(v212 + v210 * v15 + v14);
    uint64_t v28 = *v24;
    uint64_t v29 = v24[1];
    uint64_t v30 = v24[2];
    uint64_t v211 = v19[2];
    uint64_t v31 = (char *)(v211 + v30 * v20 + 2 * *(void *)&v17);
    unsigned int v32 = v21[17].u16[2];
    unsigned int v33 = v21[17].u16[3];
    v34.i32[0] = v21[3].i32[1];
    unsigned int v35 = v21[18].u16[0];
    unsigned int v36 = v21[18].u16[1];
    unsigned int v37 = v21[18].u16[2];
    unsigned int v38 = v21[18].u16[3];
    unsigned int v39 = v21[19].u16[0];
    _S19 = v21[4].f32[1];
    _S6 = v21[5].f32[0];
    _Q7.i32[0] = v21[5].i32[1];
    _S16 = v21[6].i32[0];
    _S18 = v21[6].i32[1];
    _S23 = v21[7].i32[0];
    _S25 = v21[7].i32[1];
    _S12 = v21[8].i32[0];
    _S14 = v21[8].i32[1];
    _S15 = v21[9].i32[0];
    float v50 = (char *)&v21[20] + 4;
    a8.f32[0] = 8191.0 / (float)v21[16].u32[0];
    float v248 = (float)v33;
    float v249 = (float)v32;
    float v51 = (float)v35;
    float v52 = (float)v36;
    *(float *)&a3 = (float)v37;
    *(float *)&a6 = (float)v38;
    float v246 = (float)v38;
    float v247 = a8.f32[0] * v21->f32[0];
    float v53 = (float)v39;
    *(short float *)&a6 = (short float)v32;
    uint64_t result = (float32x2_t *)((char *)v21 + 16548);
    __asm { FCVT            H8, S17 }
    float16x8_t v239 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a6, 0);
    v34.i32[1] = v21[1].i32[0];
    *(float32x2_t *)a5.f32 = vmul_n_f32(v34, a8.f32[0]);
    short float v59 = -(short float)v33;
    *(float32x2_t *)a8.f32 = vmul_n_f32(v21[2], a8.f32[0]);
    float16x8_t v237 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    float16x8_t v235 = vmulq_n_f16(v237, v59);
    float16x8_t v236 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a8), 0);
    float16x8_t v60 = vmulq_n_f16(v236, v59);
    float16x8_t v234 = v60;
    *(short float *)v60.i16 = (short float)v35;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v60.i8, 0);
    *(short float *)v60.i16 = (short float)v36;
    int16x8_t v62 = vdupq_lane_s16(*(int16x4_t *)v60.i8, 0);
    *(short float *)v60.i16 = (short float)v37;
    int16x8_t v63 = vdupq_lane_s16(*(int16x4_t *)v60.i8, 0);
    float16x8_t v233 = (float16x8_t)v63;
    *(short float *)v63.i16 = (short float)v38;
    int16x8_t v64 = vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    float16x8_t v220 = (float16x8_t)v64;
    float16x8_t v221 = (float16x8_t)v62;
    *(short float *)v64.i16 = (short float)v39;
    float16x8_t v219 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v64.i8, 0);
    unsigned int v65 = v21[16].u8[4];
    if (v65 >= 0x11) {
      unsigned __int8 v66 = 0;
    }
    else {
      unsigned __int8 v66 = 16 - v65;
    }
    uint64_t v68 = *v19;
    uint64_t v67 = v19[1];
    uint64_t v69 = v67 + v29 * v20 + 2 * *(void *)&v17;
    if (!v67) {
      uint64_t v69 = 0;
    }
    uint64_t v70 = v68 + v28 * v20 + 2 * *(void *)&v17;
    uint64_t v72 = *v22;
    uint64_t v71 = v22[1];
    float v73 = (unsigned char *)(v71 + v26 * v15 + v14);
    if (!v71) {
      float v73 = 0;
    }
    float v74 = (int8x8_t *)(v72 + v25 * v15 + v14);
    _S27 = v21[9].f32[1];
    _S28 = v21[10].f32[0];
    _S29 = v21[10].f32[1];
    _S30 = v21[11].f32[0];
    _S31 = v21[11].f32[1];
    _S9 = v21[12].f32[0];
    __asm { FCVT            H3, S19 }
    short float v232 = _H3;
    __asm { FCVT            H3, S6 }
    short float v231 = _H3;
    float v83 = v21[5].f32[1];
    __asm { FCVT            H3, S7 }
    short float v230 = _H3;
    _S13 = v21[12].f32[1];
    _S10 = v21[13].f32[0];
    float v245 = v21[6].f32[0];
    __asm { FCVT            H3, S16 }
    short float v218 = _H3;
    float v244 = v21[6].f32[1];
    __asm { FCVT            H3, S18 }
    short float v217 = _H3;
    float v243 = v21[7].f32[0];
    __asm { FCVT            H3, S23 }
    short float v216 = _H3;
    float v242 = v21[7].f32[1];
    __asm { FCVT            H3, S25 }
    short float v215 = _H3;
    float v241 = v21[8].f32[0];
    __asm { FCVT            H3, S12 }
    short float v214 = _H3;
    float v240 = v21[8].f32[1];
    __asm { FCVT            H3, S14 }
    short float v213 = _H3;
    float v93 = v21[9].f32[0];
    __asm { FCVT            H3, S15 }
    short float v229 = _H3;
    __asm { FCVT            H3, S27 }
    short float v228 = _H3;
    __asm { FCVT            H3, S28 }
    short float v227 = _H3;
    __asm { FCVT            H3, S29 }
    short float v226 = _H3;
    __asm { FCVT            H3, S30 }
    short float v225 = _H3;
    __asm { FCVT            H3, S31 }
    short float v224 = _H3;
    __asm { FCVT            H3, S9 }
    short float v223 = _H3;
    __asm { FCVT            H3, S13 }
    short float v222 = _H3;
    uint16x8_t v102 = (uint16x8_t)vdupq_n_s16(v66);
    __asm { FCVT            H4, S10 }
    float v238 = a5.f32[0];
    unint64_t v104 = a8.i64[0];
    v105.i64[0] = 0x9000900090009000;
    v105.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v13 < 8)
      {
        unint64_t v145 = 0;
        float v109 = (__int16 *)v69;
        float16x8_t v108 = (uint16x8_t *)v70;
        float v144 = v73;
        float16x8_t v107 = v74;
      }
      else
      {
        uint64_t v106 = 0;
        float16x8_t v107 = v74;
        float16x8_t v108 = (uint16x8_t *)v70;
        float v109 = (__int16 *)v69;
        do
        {
          int8x8_t v110 = *(int8x8_t *)&v73[v106];
          *(int8x8_t *)v111.i8 = vzip1_s8(v110, 0);
          v111.u64[1] = (unint64_t)vzip2_s8(v110, 0);
          float16x8_t v112 = vcvtq_f16_u16(v111);
          int8x16_t v113 = (int8x16_t)vmlaq_f16(v235, v237, v112);
          int8x16_t v114 = (int8x16_t)vmlaq_f16(v234, v236, v112);
          v112.i64[0] = vextq_s8(v113, v113, 8uLL).u64[0];
          *(int16x4_t *)v115.i8 = vuzp2_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v112.i8);
          *(double *)&v115.i64[1] = a3;
          *(int16x4_t *)v112.i8 = vuzp1_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v112.i8);
          *(double *)&v112.i64[1] = a3;
          float16x8_t v116 = (float16x8_t)vzip1q_s16((int16x8_t)v112, (int16x8_t)v112);
          v112.i64[0] = vextq_s8(v114, v114, 8uLL).u64[0];
          *(float16x4_t *)v112.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v112.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v112.i8));
          *(double *)&v112.i64[1] = a3;
          int8x8_t v117 = *v107++;
          *(int8x8_t *)v118.i8 = vzip1_s8(v117, 0);
          v118.u64[1] = (unint64_t)vzip2_s8(v117, 0);
          float16x8_t v119 = vsubq_f16(vcvtq_f16_u16(v118), v239);
          float16x8_t v120 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v112, (int16x8_t)v112), v119, _H8);
          uint16x8_t v121 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16(v115, v115), v119, _H8), (float16x8_t)0), v105));
          uint32x4_t v122 = vmovl_high_u16(v121);
          float16x8_t v123 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v121.i8);
          v123.i16[0] = *(_WORD *)&v50[2 * v123.u32[0]];
          v123.i16[1] = *(_WORD *)&v50[2 * v123.u32[1]];
          v123.i16[2] = *(_WORD *)&v50[2 * v123.u32[2]];
          v123.i16[3] = *(_WORD *)&v50[2 * v123.u32[3]];
          v123.i16[4] = *(_WORD *)&v50[2 * v122.u32[0]];
          v123.i16[5] = *(_WORD *)&v50[2 * v122.u32[1]];
          v123.i16[6] = *(_WORD *)&v50[2 * v122.u32[2]];
          v123.i16[7] = *(_WORD *)&v50[2 * v122.u32[3]];
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v105));
          uint32x4_t v125 = vmovl_high_u16(v124);
          uint32x4_t v126 = vmovl_u16(*(uint16x4_t *)v124.i8);
          v127.i16[0] = *(_WORD *)&v50[2 * v126.u32[0]];
          v127.i16[1] = *(_WORD *)&v50[2 * v126.u32[1]];
          v127.i16[2] = *(_WORD *)&v50[2 * v126.u32[2]];
          v127.i16[3] = *(_WORD *)&v50[2 * v126.u32[3]];
          v127.i16[4] = *(_WORD *)&v50[2 * v125.u32[0]];
          v127.i16[5] = *(_WORD *)&v50[2 * v125.u32[1]];
          v127.i16[6] = *(_WORD *)&v50[2 * v125.u32[2]];
          v127.i16[7] = *(_WORD *)&v50[2 * v125.u32[3]];
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v116, v119, _H8), (float16x8_t)0), v105));
          uint32x4_t v129 = vmovl_high_u16(v128);
          float16x8_t v130 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v128.i8);
          v130.i16[0] = *(_WORD *)&v50[2 * v130.u32[0]];
          v130.i16[1] = *(_WORD *)&v50[2 * v130.u32[1]];
          v130.i16[2] = *(_WORD *)&v50[2 * v130.u32[2]];
          v130.i16[3] = *(_WORD *)&v50[2 * v130.u32[3]];
          v130.i16[4] = *(_WORD *)&v50[2 * v129.u32[0]];
          v130.i16[5] = *(_WORD *)&v50[2 * v129.u32[1]];
          v130.i16[6] = *(_WORD *)&v50[2 * v129.u32[2]];
          v130.i16[7] = *(_WORD *)&v50[2 * v129.u32[3]];
          float16x8_t v131 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v123, v226), v127, v225), v130, v224);
          float16x8_t v132 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v130, _H4), v127, v222), v123, v223);
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v123, v229), v127, v228), v130, v227), (float16x8_t)0), v105));
          uint32x4_t v134 = vmovl_high_u16(v133);
          uint32x4_t v135 = vmovl_u16(*(uint16x4_t *)v133.i8);
          _Q7.i16[0] = result->i16[v135.u32[0]];
          _Q7.i16[1] = result->i16[v135.u32[1]];
          _Q7.i16[2] = result->i16[v135.u32[2]];
          _Q7.i16[3] = result->i16[v135.u32[3]];
          _Q7.i16[4] = result->i16[v134.u32[0]];
          _Q7.i16[5] = result->i16[v134.u32[1]];
          _Q7.i16[6] = result->i16[v134.u32[2]];
          _Q7.i16[7] = result->i16[v134.u32[3]];
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, (float16x8_t)0), v105));
          uint32x4_t v137 = vmovl_high_u16(v136);
          uint32x4_t v138 = vmovl_u16(*(uint16x4_t *)v136.i8);
          v139.i16[0] = result->i16[v138.u32[0]];
          v139.i16[1] = result->i16[v138.u32[1]];
          v139.i16[2] = result->i16[v138.u32[2]];
          v139.i16[3] = result->i16[v138.u32[3]];
          v139.i16[4] = result->i16[v137.u32[0]];
          v139.i16[5] = result->i16[v137.u32[1]];
          v139.i16[6] = result->i16[v137.u32[2]];
          v139.i16[7] = result->i16[v137.u32[3]];
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v132, (float16x8_t)0), v105));
          uint32x4_t v141 = vmovl_high_u16(v140);
          uint32x4_t v142 = vmovl_u16(*(uint16x4_t *)v140.i8);
          v143.i16[0] = result->i16[v142.u32[0]];
          v143.i16[1] = result->i16[v142.u32[1]];
          v143.i16[2] = result->i16[v142.u32[2]];
          v143.i16[3] = result->i16[v142.u32[3]];
          v143.i16[4] = result->i16[v141.u32[0]];
          v143.i16[5] = result->i16[v141.u32[1]];
          v143.i16[6] = result->i16[v141.u32[2]];
          v143.i16[7] = result->i16[v141.u32[3]];
          *v108++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v61, _Q7, v232), v139, v231), v143, v230), v61), v233)), v102);
          if (v109)
          {
            v250.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v221, _Q7, v218), v139, v217), v143, v216), v220), v219), v220), v219)), v102);
            _Q7 = (float16x8_t)vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v221, _Q7, v215), v139, v214), v143, v213));
            v250.val[1] = (int16x8_t)vshlq_u16((uint16x8_t)_Q7, v102);
            vst2q_s16(v109, v250);
            v109 += 16;
          }
          v106 += 8;
        }
        while ((int)v106 < (int)v13 - 7);
        float v144 = &v73[v106];
        unint64_t v145 = v13 & 0xFFFFFFF8;
      }
      while (v13 > v145)
      {
        _Q7.i8[0] = v144[1];
        *(float *)&unsigned int v146 = (float)_Q7.u32[0];
        float v147 = *(float *)&v146 - v248;
        float v148 = a5.f32[1] * v147;
        LOBYTE(v146) = v107->i8[0];
        float v149 = v247 * (float)((float)v146 - v249);
        float v150 = (float)(a5.f32[1] * v147) + v149;
        _Q7.i32[0] = 1174403072;
        if (v150 <= 8191.0)
        {
          *(float *)_Q7.i32 = (float)(a5.f32[1] * v147) + v149;
          if (v150 < 0.0) {
            _Q7.i32[0] = 0;
          }
        }
        LOBYTE(v150) = *v144;
        float v151 = (float)LODWORD(v150) - v248;
        float v152 = (float)(*((float *)&v104 + 1) * v147) + (float)(v151 * *(float *)&v104);
        float v153 = 8191.0;
        if ((float)(v149 + v152) <= 8191.0)
        {
          float v153 = v149 + v152;
          if ((float)(v149 + v152) < 0.0) {
            float v153 = 0.0;
          }
        }
        float v154 = v238 * v151;
        float v155 = v154 + v149;
        BOOL v156 = (float)(v154 + v149) <= 8191.0;
        float v157 = 8191.0;
        if (v156)
        {
          float v157 = v155;
          if (v155 < 0.0) {
            float v157 = 0.0;
          }
        }
        LOBYTE(v155) = v107->i8[1];
        float v158 = v247 * (float)((float)LODWORD(v155) - v249);
        float v159 = v148 + v158;
        if (v159 < 0.0) {
          float v160 = 0.0;
        }
        else {
          float v160 = v159;
        }
        if (v159 > 8191.0) {
          float v160 = 8191.0;
        }
        float v161 = v152 + v158;
        if ((float)(v152 + v158) < 0.0) {
          float v162 = 0.0;
        }
        else {
          float v162 = v152 + v158;
        }
        if (v161 <= 8191.0) {
          float v163 = v162;
        }
        else {
          float v163 = 8191.0;
        }
        float v164 = v154 + v158;
        if (v164 < 0.0) {
          float v165 = 0.0;
        }
        else {
          float v165 = v164;
        }
        unsigned int v166 = llroundf(fminf(fmaxf(*(float *)_Q7.i32, 0.0), 8191.0));
        if (v164 <= 8191.0) {
          float v167 = v165;
        }
        else {
          float v167 = 8191.0;
        }
        _H2 = *(_WORD *)&v50[2 * v166];
        __asm { FCVT            S2, H2 }
        _H7 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        _H16 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        float v174 = (float)((float)(_S27 * _S7) + (float)(_S2 * v93)) + (float)(_S16 * _S28);
        float v175 = (float)((float)(_S30 * _S7) + (float)(_S2 * _S29)) + (float)(_S16 * _S31);
        _S2 = (float)((float)(_S13 * _S7) + (float)(_S2 * _S9)) + (float)(_S16 * _S10);
        LOWORD(_S7) = result->i16[llroundf(fminf(fmaxf(v174, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        LOWORD(_S16) = result->i16[llroundf(fminf(fmaxf(v175, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        LOWORD(_S2) = result->i16[llroundf(fminf(fmaxf(_S2, 0.0), 8191.0))];
        __asm { FCVT            S12, H2 }
        float v180 = (float)((float)((float)(_S6 * _S16) + (float)(_S19 * _S7)) + (float)(v83 * _S12)) + v51;
        float v181 = *(float *)&a3;
        if (v180 <= *(float *)&a3)
        {
          float v181 = (float)((float)((float)(_S6 * _S16) + (float)(_S19 * _S7)) + (float)(v83 * _S12)) + v51;
          if (v180 < v51) {
            float v181 = v51;
          }
        }
        _H2 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H18 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0))];
        __asm { FCVT            S18, H18 }
        _H25 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0))];
        __asm { FCVT            S25, H25 }
        float v188 = (float)((float)(_S27 * _S18) + (float)(_S2 * v93)) + (float)(_S25 * _S28);
        float v189 = (float)((float)(_S30 * _S18) + (float)(_S2 * _S29)) + (float)(_S25 * _S31);
        float v190 = (float)((float)(_S13 * _S18) + (float)(_S2 * _S9)) + (float)(_S25 * _S10);
        _H25 = result->i16[llroundf(fminf(fmaxf(v188, 0.0), 8191.0))];
        _H14 = result->i16[llroundf(fminf(fmaxf(v189, 0.0), 8191.0))];
        _H15 = result->i16[llroundf(fminf(fmaxf(v190, 0.0), 8191.0))];
        v108->i16[0] = llroundf(v181) << v66;
        if (v109)
        {
          float v194 = (float)((float)(v52 + (float)(_S7 * v245)) + (float)(_S16 * v244)) + (float)(_S12 * v243);
          float v195 = v53;
          if (v194 <= v53)
          {
            float v195 = (float)((float)(v52 + (float)(_S7 * v245)) + (float)(_S16 * v244)) + (float)(_S12 * v243);
            if (v194 < v246) {
              float v195 = v246;
            }
          }
          float v196 = (float)((float)(v52 + (float)(_S7 * v242)) + (float)(_S16 * v241)) + (float)(_S12 * v240);
          *float v109 = llroundf(v195) << v66;
          float v197 = v53;
          if (v196 <= v53)
          {
            float v197 = v196;
            if (v196 < v246) {
              float v197 = v246;
            }
          }
          v109[1] = llroundf(v197) << v66;
          v109 += 2;
        }
        __asm
        {
          FCVT            S7, H25
          FCVT            S16, H14
          FCVT            S23, H15
        }
        float v200 = (float)((float)(_S6 * _S16) + (float)(_S19 * *(float *)_Q7.i32)) + (float)(v83 * _S23);
        float v201 = *(float *)&a3;
        if ((float)(v200 + v51) <= *(float *)&a3)
        {
          float v201 = v200 + v51;
          if ((float)(v200 + v51) < v51) {
            float v201 = v51;
          }
        }
        v108->i16[1] = llroundf(v201) << v66;
        if (v109)
        {
          float v202 = (float)((float)(v52 + (float)(*(float *)_Q7.i32 * v245)) + (float)(_S16 * v244)) + (float)(_S23 * v243);
          float v203 = v53;
          if (v202 <= v53)
          {
            float v203 = (float)((float)(v52 + (float)(*(float *)_Q7.i32 * v245)) + (float)(_S16 * v244))
                 + (float)(_S23 * v243);
            if (v202 < v246) {
              float v203 = v246;
            }
          }
          *(float *)_Q7.i32 = (float)((float)(v52 + (float)(*(float *)_Q7.i32 * v242)) + (float)(_S16 * v241))
                            + (float)(_S23 * v240);
          *float v109 = llroundf(v203) << v66;
          float v204 = v53;
          if (*(float *)_Q7.i32 <= v53)
          {
            float v204 = *(float *)_Q7.i32;
            if (*(float *)_Q7.i32 < v246) {
              float v204 = v246;
            }
          }
          v109[1] = llroundf(v204) << v66;
          v109 += 2;
        }
        v145 += 2;
        v144 += 2;
        float16x8_t v107 = (int8x8_t *)((char *)v107 + 2);
        float16x8_t v108 = (uint16x8_t *)((char *)v108 + 4);
      }
      float v74 = (int8x8_t *)((char *)v74 + v25);
      v73 += v26;
      v70 += v28;
      v69 += v29;
      ++v12;
    }
    while (v12 != v16);
    if (v212 && v211)
    {
      uint64_t v205 = 0;
      do
      {
        if (v13)
        {
          unint64_t v206 = v13;
          float v207 = v31;
          float v208 = v27;
          do
          {
            __int16 v209 = *v208++;
            *v207++ = v209 | (v209 << 8);
            --v206;
          }
          while (v206);
        }
        v27 += v210;
        v31 += v30;
        ++v205;
      }
      while (v205 != v16);
    }
    else if (v211)
    {
      do
      {
        if (v13) {
          uint64_t result = (float32x2_t *)memset(v31, 255, 2 * v13);
        }
        v31 += v30;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

void *vt_Copy_422vf_TRC_Mat_TRC_xf444_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    unint64_t v16 = result[13] * a2 / v7;
    uint64_t v17 = (uint64_t *)result[16];
    unint64_t v18 = v16 + result[15];
    uint64_t v19 = result[19];
    uint64_t v20 = (uint64_t *)result[7];
    uint64_t v21 = (uint64_t *)result[8];
    size_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v26 = v20[2];
    uint64_t v27 = (unsigned __int8 *)(v26 + v25 * v13 + v12);
    uint64_t v28 = *v22;
    uint64_t v29 = v22[1];
    uint64_t v30 = v22[2];
    uint64_t v31 = v17[2];
    uint64_t v32 = (char *)(v31 + v30 * v18 + 2 * v15);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v19;
    float v142 = v33 * *(float *)(v19 + 16);
    float v143 = v33 * *(float *)(v19 + 8);
    float v140 = v33 * *(float *)(v19 + 28);
    *(float *)&unsigned int v37 = v140;
    float v141 = v33 * *(float *)(v19 + 20);
    LOWORD(v37) = *(_WORD *)(v19 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 152);
    float v42 = (float)v37;
    float v43 = *(float *)(v19 + 36);
    float v44 = *(float *)(v19 + 40);
    float v45 = *(float *)(v19 + 44);
    float v147 = *(float *)(v19 + 52);
    float v148 = *(float *)(v19 + 48);
    float v145 = *(float *)(v19 + 60);
    float v146 = *(float *)(v19 + 56);
    _S4 = *(float *)(v19 + 64);
    float v47 = *(float *)(v19 + 68);
    float v144 = _S4;
    float v48 = *(float *)(v19 + 72);
    float v49 = *(float *)(v19 + 76);
    float v50 = *(float *)(v19 + 80);
    float v51 = *(float *)(v19 + 84);
    float v52 = *(float *)(v19 + 88);
    float v53 = *(float *)(v19 + 92);
    float v54 = *(float *)(v19 + 96);
    float v55 = *(float *)(v19 + 100);
    float v56 = *(float *)(v19 + 104);
    uint64_t v57 = v19 + 164;
    uint64_t result = (void *)(v19 + 16548);
    unsigned int v58 = *(unsigned __int8 *)(v19 + 132);
    if (v58 >= 0x11) {
      char v59 = 0;
    }
    else {
      char v59 = 16 - v58;
    }
    uint64_t v61 = *v17;
    uint64_t v60 = v17[1];
    uint64_t v62 = v60 + v29 * v18 + 2 * v15;
    if (!v60) {
      uint64_t v62 = 0;
    }
    uint64_t v63 = v61 + v28 * v18 + 2 * v15;
    uint64_t v65 = *v20;
    uint64_t v64 = v20[1];
    uint64_t v66 = v64 + v24 * v13 + v12;
    if (!v64) {
      uint64_t v66 = 0;
    }
    uint64_t v67 = (unsigned char *)(v65 + v23 * v13 + v12);
    char v68 = v59;
    do
    {
      if (v11)
      {
        unint64_t v69 = 0;
        uint64_t v70 = v67;
        uint64_t v71 = (_WORD *)v63;
        uint64_t v72 = (_WORD *)v62;
        do
        {
          LOBYTE(_S4) = *(unsigned char *)(v66 + v69 + 1);
          float v73 = (float)LODWORD(_S4) - v35;
          unsigned int v74 = LODWORD(v143);
          float v75 = v143 * v73;
          LOBYTE(v74) = *v70;
          float v76 = v36 * (float)((float)v74 - v34);
          float v77 = (float)(v143 * v73) + v76;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = (float)(v143 * v73) + v76;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          LOBYTE(v77) = *(unsigned char *)(v66 + v69);
          float v79 = (float)LODWORD(v77) - v35;
          float v80 = (float)(v141 * v73) + (float)(v79 * v142);
          float v81 = 8191.0;
          if ((float)(v76 + v80) <= 8191.0)
          {
            float v81 = v76 + v80;
            if ((float)(v76 + v80) < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v140 * v79;
          float v83 = (float)(v140 * v79) + v76;
          float v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          LOBYTE(v83) = v70[1];
          float v85 = v36 * (float)((float)LODWORD(v83) - v34);
          float v86 = v75 + v85;
          if (v86 < 0.0) {
            float v87 = 0.0;
          }
          else {
            float v87 = v86;
          }
          if (v86 > 8191.0) {
            float v87 = 8191.0;
          }
          float v88 = v80 + v85;
          if ((float)(v80 + v85) < 0.0) {
            float v89 = 0.0;
          }
          else {
            float v89 = v80 + v85;
          }
          if (v88 <= 8191.0) {
            float v90 = v89;
          }
          else {
            float v90 = 8191.0;
          }
          if ((float)(v82 + v85) < 0.0) {
            float v91 = 0.0;
          }
          else {
            float v91 = v82 + v85;
          }
          unsigned int v92 = llroundf(fminf(fmaxf(v78, 0.0), 8191.0));
          if ((float)(v82 + v85) <= 8191.0) {
            float v93 = v91;
          }
          else {
            float v93 = 8191.0;
          }
          _H4 = *(_WORD *)(v57 + 2 * v92);
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          float v104 = (float)((float)(v49 * _S5) + (float)(_S4 * v48)) + (float)(_S6 * v50);
          float v105 = (float)((float)(v52 * _S5) + (float)(_S4 * v51)) + (float)(_S6 * v53);
          _S6 = (float)((float)(v55 * _S5) + (float)(_S4 * v54)) + (float)(_S6 * v56);
          LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *((_WORD *)result + llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          float v110 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          float v111 = v40;
          if (v110 <= v40)
          {
            float v111 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
            if (v110 < v38) {
              float v111 = v38;
            }
          }
          _H7 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v118 = (float)((float)(v49 * _S24) + (float)(_S7 * v48)) + (float)(_S25 * v50);
          float v119 = (float)((float)(v52 * _S24) + (float)(_S7 * v51)) + (float)(_S25 * v53);
          float v120 = (float)((float)(v55 * _S24) + (float)(_S7 * v54)) + (float)(_S25 * v56);
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H25 = *((_WORD *)result + llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _WORD *v71 = llroundf(v111) << v68;
          if (v72)
          {
            float v124 = (float)((float)(v39 + (float)(_S4 * v148)) + (float)(_S5 * v147)) + (float)(_S6 * v146);
            float v125 = v42;
            if (v124 <= v42)
            {
              float v125 = (float)((float)(v39 + (float)(_S4 * v148)) + (float)(_S5 * v147)) + (float)(_S6 * v146);
              if (v124 < v41) {
                float v125 = v41;
              }
            }
            float v126 = (float)((float)(v39 + (float)(_S4 * v145)) + (float)(_S5 * v144)) + (float)(_S6 * v47);
            _WORD *v72 = llroundf(v125) << v68;
            float v127 = v42;
            if (v126 <= v42)
            {
              float v127 = v126;
              if (v126 < v41) {
                float v127 = v41;
              }
            }
            v72[1] = llroundf(v127) << v68;
            v72 += 2;
          }
          __asm
          {
            FCVT            S4, H7
            FCVT            S5, H24
            FCVT            S6, H25
          }
          float v130 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          float v131 = v40;
          if (v130 <= v40)
          {
            float v131 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
            if (v130 < v38) {
              float v131 = v38;
            }
          }
          v71[1] = llroundf(v131) << v68;
          if (v72)
          {
            float v132 = (float)((float)(v39 + (float)(_S4 * v148)) + (float)(_S5 * v147)) + (float)(_S6 * v146);
            float v133 = v42;
            if (v132 <= v42)
            {
              float v133 = (float)((float)(v39 + (float)(_S4 * v148)) + (float)(_S5 * v147)) + (float)(_S6 * v146);
              if (v132 < v41) {
                float v133 = v41;
              }
            }
            _S4 = (float)((float)(v39 + (float)(_S4 * v145)) + (float)(_S5 * v144)) + (float)(_S6 * v47);
            _WORD *v72 = llroundf(v133) << v68;
            float v134 = v42;
            if (_S4 <= v42)
            {
              float v134 = _S4;
              if (_S4 < v41) {
                float v134 = v41;
              }
            }
            v72[1] = llroundf(v134) << v68;
            v72 += 2;
          }
          v69 += 2;
          v70 += 2;
          v71 += 2;
        }
        while (v11 > v69);
      }
      v67 += v23;
      v66 += v24;
      v63 += v28;
      v62 += v29;
      ++v10;
    }
    while (v10 != v14);
    if (v26 && v31)
    {
      uint64_t v135 = 0;
      do
      {
        if (v11)
        {
          unint64_t v136 = v11;
          uint32x4_t v137 = v32;
          uint32x4_t v138 = v27;
          do
          {
            __int16 v139 = *v138++;
            *v137++ = v139 | (v139 << 8);
            --v136;
          }
          while (v136);
        }
        v27 += v25;
        v32 += v30;
        ++v135;
      }
      while (v135 != v14);
    }
    else if (v31)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v32, 255, 2 * v11);
        }
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_xf444_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_xf444_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_422vf_rgb_xf444_neon_fp16_GCD(void *result, uint64_t a2, double a3)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (uint64_t *)result[16];
    unint64_t v17 = result[13] * a2 / v7 + result[15];
    uint64_t v18 = (float32x2_t *)result[19];
    uint64_t v19 = (uint64_t *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = (unsigned __int8 *)(v25 + v24 * v13 + v12);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (char *)(v30 + v29 * v17 + 2 * v15);
    unsigned int v32 = v18[17].u16[2];
    unsigned int v33 = v18[17].u16[3];
    v34.i32[0] = v18[3].i32[1];
    unsigned int v35 = v18[18].u16[0];
    unsigned int v36 = v18[18].u16[1];
    unsigned int v37 = v18[18].u16[2];
    unsigned int v38 = v18[18].u16[3];
    *(float *)&a3 = (float)v32;
    *(short float *)v4.i16 = (short float)v32;
    unsigned int v39 = v18[19].u16[0];
    _S1 = v18[4].f32[1];
    _S2 = v18[5].f32[0];
    _S3 = v18[5].f32[1];
    _S27 = v18[6].f32[0];
    _S28 = v18[6].f32[1];
    _S29 = v18[7].f32[0];
    _S30 = v18[7].f32[1];
    _S31 = v18[8].f32[0];
    _S10 = v18[8].f32[1];
    *(float *)v5.i32 = (float)v18[17].u32[0] / (float)v18[16].u32[0];
    float v49 = (float)v33;
    float v50 = (float)v35;
    float v51 = (float)v36;
    float v52 = (float)v37;
    float v53 = (float)v38;
    _S23 = *(float *)v5.i32 * v18->f32[0];
    float v55 = (float)v39;
    __asm { FCVT            H8, S23 }
    float16x8_t v152 = (float16x8_t)vdupq_lane_s16(v4, 0);
    short float v61 = -(short float)v33;
    v34.i32[1] = v18[1].i32[0];
    *(float32x2_t *)v3.f32 = vmul_n_f32(v34, *(float *)v5.i32);
    *(float32x2_t *)v5.i8 = vmul_n_f32(v18[2], *(float *)v5.i32);
    int16x4_t v62 = (int16x4_t)vcvt_f16_f32((float32x4_t)v5);
    float16x8_t v150 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    float16x8_t v147 = vmulq_n_f16(v150, v61);
    float16x8_t v148 = (float16x8_t)vdupq_lane_s32((int32x2_t)v62, 0);
    __asm { FCVT            H5, S1 }
    short float v145 = _H5;
    float16x8_t v146 = vmulq_n_f16(v148, v61);
    __asm { FCVT            H5, S2 }
    short float v144 = _H5;
    *(short float *)v62.i16 = (short float)v35;
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(v62, 0);
    *(short float *)v62.i16 = (short float)v36;
    float16x8_t v140 = (float16x8_t)vdupq_lane_s16(v62, 0);
    *(short float *)v62.i16 = (short float)v37;
    float16x8_t v143 = (float16x8_t)vdupq_lane_s16(v62, 0);
    *(short float *)v62.i16 = (short float)v38;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(v62, 0);
    *(short float *)v62.i16 = (short float)v39;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(v62, 0);
    unsigned int v68 = v18[16].u8[4];
    unsigned __int8 v69 = 16 - v68;
    if (v68 >= 0x11) {
      unsigned __int8 v69 = 0;
    }
    uint64_t v71 = *v16;
    uint64_t v70 = v16[1];
    uint64_t v72 = v70 + v28 * v17 + 2 * v15;
    if (!v70) {
      uint64_t v72 = 0;
    }
    uint64_t result = (void *)(v71 + v27 * v17 + 2 * v15);
    uint64_t v74 = *v19;
    uint64_t v73 = v19[1];
    float v75 = (__int8 *)(v73 + v23 * v13 + v12);
    if (!v73) {
      float v75 = 0;
    }
    float v76 = (int8x8_t *)(v74 + v22 * v13 + v12);
    unsigned __int8 v77 = v69;
    __asm { FCVT            H5, S3 }
    short float v142 = _H5;
    float v79 = _S27;
    __asm
    {
      FCVT            H6, S27
      FCVT            H7, S28
    }
    short float v139 = _H7;
    float v82 = _S29;
    __asm { FCVT            H9, S29 }
    short float v138 = _H9;
    float v84 = _S30;
    __asm { FCVT            H9, S30 }
    short float v137 = _H9;
    float v86 = _S31;
    __asm { FCVT            H9, S31 }
    short float v136 = _H9;
    float v88 = _S10;
    __asm { FCVT            H9, S10 }
    short float v135 = _H9;
    uint16x8_t v90 = (uint16x8_t)vdupq_n_s16(v69);
    float v151 = v3.f32[0];
    v91.i32[0] = v5.i32[1];
    float v141 = *(float *)&v5.i32[1];
    float v149 = *(float *)v5.i32;
    do
    {
      if ((int)v11 < 8)
      {
        unint64_t v110 = 0;
        float v95 = (__int16 *)v72;
        float v94 = (uint16x8_t *)result;
        float v109 = v75;
        float v93 = v76;
      }
      else
      {
        uint64_t v92 = 0;
        float v93 = v76;
        float v94 = (uint16x8_t *)result;
        float v95 = (__int16 *)v72;
        do
        {
          int8x8_t v96 = *(int8x8_t *)&v75[v92];
          *(int8x8_t *)v97.i8 = vzip1_s8(v96, 0);
          v97.u64[1] = (unint64_t)vzip2_s8(v96, 0);
          float16x8_t v98 = vcvtq_f16_u16(v97);
          int8x16_t v99 = (int8x16_t)vmlaq_f16(v147, v150, v98);
          int8x16_t v100 = (int8x16_t)vmlaq_f16(v146, v148, v98);
          v98.i64[0] = vextq_s8(v99, v99, 8uLL).u64[0];
          *(int16x4_t *)v101.i8 = vuzp1_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v98.i8);
          *(int16x4_t *)v98.i8 = vuzp2_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v98.i8);
          *(double *)&v98.i64[1] = a3;
          *(double *)&v101.i64[1] = a3;
          float16x8_t v102 = (float16x8_t)vzip1q_s16((int16x8_t)v98, (int16x8_t)v98);
          v98.i64[0] = vextq_s8(v100, v100, 8uLL).u64[0];
          *(float16x4_t *)v98.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v98.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v98.i8));
          *(double *)&v98.i64[1] = a3;
          float16x8_t v103 = (float16x8_t)vzip1q_s16((int16x8_t)v98, (int16x8_t)v98);
          int8x8_t v104 = *v93++;
          *(int8x8_t *)v5.i8 = vzip1_s8(v104, 0);
          v5.u64[1] = (unint64_t)vzip2_s8(v104, 0);
          float16x8_t v105 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v5), v152);
          float16x8_t v106 = vmlaq_n_f16(v102, v105, _H8);
          float16x8_t v107 = vmlaq_n_f16(v103, v105, _H8);
          float16x8_t v108 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v101, v101), v105, _H8);
          v5.i32[0] = v143.i32[0];
          uint16x8_t v91 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v65, v106, v145), v107, v144), v108, v142), v65), v143)), v90);
          *v94++ = v91;
          if (v95)
          {
            float16x8_t v5 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v140, v106, v137), v107, v136), v108, v135);
            v153.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v140, v106, _H6), v107, v139), v108, v138), v66), v67), v66), v67)), v90);
            uint16x8_t v91 = vcvtq_u16_f16(v5);
            v153.val[1] = (int16x8_t)vshlq_u16(v91, v90);
            vst2q_s16(v95, v153);
            v95 += 16;
          }
          v92 += 8;
        }
        while ((int)v92 < (int)v11 - 7);
        float v109 = &v75[v92];
        unint64_t v110 = v11 & 0xFFFFFFF8;
      }
      while (v11 > v110)
      {
        v91.i8[0] = *v109;
        *(float *)&unsigned int v111 = (float)v91.u32[0] - v49;
        v5.i8[0] = v109[1];
        float v112 = (float)v5.u32[0] - v49;
        float v113 = v3.f32[1] * v112;
        float v114 = (float)(v141 * v112) + (float)(*(float *)&v111 * v149);
        float v115 = v151 * *(float *)&v111;
        LOBYTE(v111) = v93->i8[0];
        float v116 = _S23 * (float)((float)v111 - *(float *)&a3);
        float v117 = (float)(v3.f32[1] * v112) + v116;
        float v118 = v116 + v114;
        *(float *)v5.i32 = v115 + v116;
        float v119 = (float)((float)((float)(_S2 * (float)(v116 + v114)) + (float)(_S1 * (float)(v113 + v116)))
                     + (float)(_S3 * (float)(v115 + v116)))
             + v50;
        *(float *)v91.i32 = v52;
        if (v119 <= v52)
        {
          *(float *)v91.i32 = v119;
          if (v119 < v50) {
            *(float *)v91.i32 = v50;
          }
        }
        LOBYTE(v119) = v93->i8[1];
        v94->i16[0] = llroundf(*(float *)v91.i32) << v77;
        if (v95)
        {
          float v120 = (float)((float)(v51 + (float)(v117 * v79)) + (float)(v118 * _S28)) + (float)(*(float *)v5.i32 * v82);
          float v121 = v55;
          if (v120 <= v55)
          {
            float v121 = (float)((float)(v51 + (float)(v117 * v79)) + (float)(v118 * _S28)) + (float)(*(float *)v5.i32 * v82);
            if (v120 < v53) {
              float v121 = v53;
            }
          }
          float v122 = (float)((float)(v51 + (float)(v117 * v84)) + (float)(v118 * v86)) + (float)(*(float *)v5.i32 * v88);
          *float v95 = llroundf(v121) << v77;
          float v123 = v55;
          if (v122 <= v55)
          {
            if (v122 < v53) {
              float v123 = v53;
            }
            else {
              float v123 = v122;
            }
          }
          v95[1] = llroundf(v123) << v77;
          v95 += 2;
        }
        float v124 = _S23 * (float)((float)LODWORD(v119) - *(float *)&a3);
        *(float *)v5.i32 = v113 + v124;
        float v125 = v114 + v124;
        float v126 = v115 + v124;
        float v127 = (float)((float)((float)(_S2 * (float)(v114 + v124)) + (float)(_S1 * *(float *)v5.i32))
                     + (float)(_S3 * v126))
             + v50;
        *(float *)v91.i32 = v52;
        if (v127 <= v52)
        {
          *(float *)v91.i32 = v127;
          if (v127 < v50) {
            *(float *)v91.i32 = v50;
          }
        }
        v94->i16[1] = llroundf(*(float *)v91.i32) << v77;
        if (v95)
        {
          float v128 = (float)((float)(v51 + (float)(*(float *)v5.i32 * v79)) + (float)(v125 * _S28)) + (float)(v126 * v82);
          float v129 = v55;
          if (v128 <= v55)
          {
            float v129 = (float)((float)(v51 + (float)(*(float *)v5.i32 * v79)) + (float)(v125 * _S28)) + (float)(v126 * v82);
            if (v128 < v53) {
              float v129 = v53;
            }
          }
          *(float *)v5.i32 = (float)((float)(v51 + (float)(*(float *)v5.i32 * v84)) + (float)(v125 * v86))
                           + (float)(v126 * v88);
          *float v95 = llroundf(v129) << v77;
          *(float *)v91.i32 = v55;
          if (*(float *)v5.i32 <= v55)
          {
            v91.i32[0] = v5.i32[0];
            if (*(float *)v5.i32 < v53) {
              *(float *)v91.i32 = v53;
            }
          }
          v95[1] = llroundf(*(float *)v91.i32) << v77;
          v95 += 2;
        }
        v110 += 2;
        v109 += 2;
        float v93 = (int8x8_t *)((char *)v93 + 2);
        float v94 = (uint16x8_t *)((char *)v94 + 4);
      }
      float v76 = (int8x8_t *)((char *)v76 + v22);
      v75 += v23;
      uint64_t result = (void *)((char *)result + v27);
      v72 += v28;
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      uint64_t v130 = 0;
      do
      {
        if (v11)
        {
          unint64_t v131 = v11;
          float v132 = v31;
          float v133 = v26;
          do
          {
            __int16 v134 = *v133++;
            *v132++ = v134 | (v134 << 8);
            --v131;
          }
          while (v131);
        }
        v26 += v24;
        v31 += v29;
        ++v130;
      }
      while (v130 != v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v31, 255, 2 * v11);
        }
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_xf444_GCD);
  return 0;
}

void *vt_Copy_422vf_rgb_xf444_GCD(void *result, uint64_t a2)
{
  uint64_t v8 = *(void *)((char *)result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = *(void *)((char *)result + 20);
    uint64_t v14 = *(void *)((char *)result + 36);
    unint64_t v15 = v10 + *(void *)((char *)result + 44);
    unint64_t v16 = v11 - v10;
    uint64_t v17 = result[14];
    uint64_t v18 = (uint64_t *)result[16];
    unint64_t v19 = result[13] * a2 / v9 + result[15];
    uint64_t v20 = result[19];
    uint64_t v21 = (uint64_t *)result[7];
    size_t v22 = (uint64_t *)result[8];
    uint64_t v23 = (uint64_t *)result[17];
    uint64_t v24 = *v22;
    uint64_t v25 = v22[1];
    uint64_t v26 = v22[2];
    uint64_t v27 = v21[2];
    uint64_t v28 = (unsigned __int8 *)(v27 + v26 * v15 + v14);
    uint64_t v29 = *v23;
    uint64_t v30 = v23[1];
    uint64_t v31 = v23[2];
    uint64_t v32 = v18[2];
    uint64_t v33 = (char *)(v32 + v31 * v19 + 2 * v17);
    *(float *)&unsigned int v34 = (float)*(unsigned int *)(v20 + 128);
    *(float *)&unsigned int v35 = (float)*(unsigned int *)(v20 + 136);
    float v36 = *(float *)&v35 / *(float *)&v34;
    LOWORD(v34) = *(_WORD *)(v20 + 140);
    float v37 = (float)v34;
    LOWORD(v35) = *(_WORD *)(v20 + 142);
    float v38 = (float)v35;
    float v39 = v36 * *(float *)v20;
    float v40 = v36 * *(float *)(v20 + 8);
    float v41 = v36 * *(float *)(v20 + 16);
    float v42 = v36 * *(float *)(v20 + 20);
    float v43 = *(float *)(v20 + 28);
    float v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v20 + 144);
    float v45 = (float)LODWORD(v43);
    LOWORD(v3) = *(_WORD *)(v20 + 146);
    float v46 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v20 + 148);
    float v47 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v20 + 150);
    float v48 = (float)v5;
    LOWORD(v6) = *(_WORD *)(v20 + 152);
    float v49 = (float)v6;
    float v50 = *(float *)(v20 + 36);
    float v51 = *(float *)(v20 + 40);
    float v52 = *(float *)(v20 + 44);
    float v53 = *(float *)(v20 + 48);
    float v54 = *(float *)(v20 + 52);
    float v55 = *(float *)(v20 + 56);
    float v56 = *(float *)(v20 + 60);
    float v57 = *(float *)(v20 + 64);
    float v58 = *(float *)(v20 + 68);
    unsigned int v59 = *(unsigned __int8 *)(v20 + 132);
    char v60 = 16 - v59;
    if (v59 >= 0x11) {
      char v60 = 0;
    }
    uint64_t v62 = *v18;
    uint64_t v61 = v18[1];
    uint64_t v63 = v61 + v30 * v19 + 2 * v17;
    if (!v61) {
      uint64_t v63 = 0;
    }
    uint64_t result = (void *)(v62 + v29 * v19 + 2 * v17);
    uint64_t v65 = *v21;
    uint64_t v64 = v21[1];
    uint64_t v66 = v64 + v25 * v15 + v14;
    if (!v64) {
      uint64_t v66 = 0;
    }
    float16x8_t v67 = (unsigned char *)(v65 + v24 * v15 + v14);
    char v68 = v60;
    do
    {
      if (v13)
      {
        unint64_t v69 = 0;
        uint64_t v70 = v67;
        uint64_t v71 = result;
        uint64_t v72 = (_WORD *)v63;
        do
        {
          LOBYTE(v7) = *(unsigned char *)(v66 + v69);
          *(float *)&unsigned int v73 = (float)LODWORD(v7);
          float v74 = *(float *)&v73 - v38;
          LOBYTE(v73) = *(unsigned char *)(v66 + v69 + 1);
          float v75 = (float)v73 - v38;
          float v76 = v40 * v75;
          float v77 = (float)(v42 * v75) + (float)(v74 * v41);
          float v78 = v44 * v74;
          LOBYTE(v2) = *v70;
          float v79 = v39 * (float)((float)LODWORD(v2) - v37);
          float v80 = v76 + v79;
          float v81 = v79 + v77;
          float v82 = v78 + v79;
          float v83 = (float)((float)((float)(v51 * (float)(v79 + v77)) + (float)(v50 * (float)(v76 + v79)))
                      + (float)(v52 * (float)(v78 + v79)))
              + v45;
          float v84 = v47;
          if (v83 <= v47)
          {
            float v84 = v83;
            if (v83 < v45) {
              float v84 = v45;
            }
          }
          LOBYTE(v83) = v70[1];
          _WORD *v71 = llroundf(v84) << v68;
          if (v72)
          {
            float v85 = (float)((float)(v46 + (float)(v80 * v53)) + (float)(v81 * v54)) + (float)(v82 * v55);
            float v86 = v49;
            if (v85 <= v49)
            {
              float v86 = (float)((float)(v46 + (float)(v80 * v53)) + (float)(v81 * v54)) + (float)(v82 * v55);
              if (v85 < v48) {
                float v86 = v48;
              }
            }
            float v87 = (float)((float)(v46 + (float)(v80 * v56)) + (float)(v81 * v57)) + (float)(v82 * v58);
            _WORD *v72 = llroundf(v86) << v68;
            float v88 = v49;
            if (v87 <= v49)
            {
              if (v87 < v48) {
                float v88 = v48;
              }
              else {
                float v88 = v87;
              }
            }
            v72[1] = llroundf(v88) << v68;
            v72 += 2;
          }
          float v89 = v39 * (float)((float)LODWORD(v83) - v37);
          float v7 = v76 + v89;
          float v90 = v77 + v89;
          float v91 = v78 + v89;
          float v92 = (float)((float)((float)(v51 * v90) + (float)(v50 * v7)) + (float)(v52 * v91)) + v45;
          float v2 = v47;
          if (v92 <= v47)
          {
            float v2 = (float)((float)((float)(v51 * v90) + (float)(v50 * v7)) + (float)(v52 * v91)) + v45;
            if (v92 < v45) {
              float v2 = v45;
            }
          }
          v71[1] = llroundf(v2) << v68;
          if (v72)
          {
            float v93 = (float)((float)(v46 + (float)(v7 * v53)) + (float)(v90 * v54)) + (float)(v91 * v55);
            float v2 = v49;
            if (v93 <= v49)
            {
              float v2 = (float)((float)(v46 + (float)(v7 * v53)) + (float)(v90 * v54)) + (float)(v91 * v55);
              if (v93 < v48) {
                float v2 = v48;
              }
            }
            float v7 = (float)((float)(v46 + (float)(v7 * v56)) + (float)(v90 * v57)) + (float)(v91 * v58);
            _WORD *v72 = llroundf(v2) << v68;
            float v94 = v49;
            if (v7 <= v49)
            {
              float v94 = v7;
              if (v7 < v48) {
                float v94 = v48;
              }
            }
            v72[1] = llroundf(v94) << v68;
            v72 += 2;
          }
          v69 += 2;
          v70 += 2;
          v71 += 2;
        }
        while (v13 > v69);
      }
      v67 += v24;
      v66 += v25;
      uint64_t result = (void *)((char *)result + v29);
      v63 += v30;
      ++v12;
    }
    while (v12 != v16);
    if (v27 && v32)
    {
      uint64_t v95 = 0;
      do
      {
        if (v13)
        {
          unint64_t v96 = v13;
          uint16x8_t v97 = v33;
          float16x8_t v98 = v28;
          do
          {
            __int16 v99 = *v98++;
            *v97++ = v99 | (v99 << 8);
            --v96;
          }
          while (v96);
        }
        v28 += v26;
        v33 += v31;
        ++v95;
      }
      while (v95 != v16);
    }
    else if (v32)
    {
      do
      {
        if (v13) {
          uint64_t result = memset(v33, 255, 2 * v13);
        }
        v33 += v31;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_BGRA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

char *vt_Copy_422vf_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, float32x4_t a4)
{
  char v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = *(void *)(a1 + 20);
  uint64_t v8 = *(void *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 44);
  uint64_t v10 = *(void *)(a1 + 28);
  unint64_t v11 = *a1;
  unint64_t v12 = v10 * a2 / v11;
  uint64_t v13 = v12 + v9;
  unint64_t v14 = (v10 + v10 * a2) / v11;
  uint64_t v15 = v14 + v9;
  uint64_t v16 = *((void *)a1 + 15);
  uint64_t v241 = *((void *)a1 + 14);
  uint64_t v17 = (float32x2_t *)*((void *)a1 + 19);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 7);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 8);
  unint64_t v20 = *((void *)a1 + 13) * a2;
  uint64_t v21 = *v18;
  uint64_t v22 = v18[1];
  uint64_t v23 = v18[2];
  uint64_t v238 = *v19;
  uint64_t v24 = v19[1];
  uint64_t v25 = v19[2];
  uint64_t v26 = **((void **)a1 + 17);
  uint64_t v221 = **((void **)a1 + 16);
  unsigned int v27 = v17[16].u32[0];
  uint64_t v28 = v17[19].u8[6];
  v248[0] = v17[19].i8[6];
  uint64_t v29 = v17[19].u8[7];
  v248[1] = v17[19].i8[7];
  uint64_t v30 = v17[20].u8[0];
  v248[2] = v17[20].i8[0];
  uint64_t v31 = v17[20].u8[1];
  v248[3] = v17[20].i8[1];
  unsigned int v32 = v17[17].u16[2];
  uint64_t result = (char *)v17[17].u16[3];
  float v34 = v17->f32[0];
  __int32 v35 = v17[1].i32[0];
  float32x2_t v36 = v17[2];
  v37.i32[0] = v17[3].i32[1];
  float v245 = v17[9].f32[0];
  float v244 = v17[9].f32[1];
  _S3 = v17[10].f32[1];
  float v243 = v17[10].f32[0];
  _S4 = v17[11].f32[0];
  _S5 = v17[11].f32[1];
  unint64_t v219 = v26 * (v20 / v11 + v16);
  _S6 = v17[12].f32[0];
  _S7 = v17[12].f32[1];
  _S16 = v17[13].f32[0];
  _S17 = v17[13].f32[1];
  _S18 = v17[14].f32[0];
  _S19 = v17[14].f32[1];
  _S20 = v17[15].f32[0];
  long long v246 = 0u;
  long long v247 = 0u;
  do
  {
    int v48 = 0;
    char v49 = v248[v6];
    do
    {
      *(unsigned char *)(((unint64_t)&v246 + ((v49 + 4 * v48) & 0xF8)) | (v49 + 4 * (_BYTE)v48) & 7) = v5 + v48;
      ++v48;
    }
    while (v48 != 8);
    ++v6;
    v5 += 8;
  }
  while (v6 != 4);
  if (v14 != v12)
  {
    uint64_t v50 = 0;
    float v51 = (char *)&v17[2068] + 4;
    float v52 = 8191.0 / (float)v27;
    float v53 = (float)v32;
    float v54 = (float)result;
    _S24 = v52 * v34;
    float v56 = (char *)&v17[20] + 4;
    *(short float *)v4.i16 = (short float)v32;
    __asm { FCVT            H8, S24 }
    float16x8_t v242 = (float16x8_t)vdupq_lane_s16(v4, 0);
    short float v62 = -(short float)result;
    v37.i32[1] = v35;
    *(float32x2_t *)a4.f32 = vmul_n_f32(v37, v52);
    v63.i64[1] = v242.i64[0];
    *(float32x2_t *)v63.f32 = vmul_n_f32(v36, v52);
    float16x8_t v240 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a4), 0);
    float16x8_t v236 = vmulq_n_f16(v240, v62);
    float16x8_t v237 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v63), 0);
    uint64_t result = (char *)&v17[4116] + 4;
    __asm { FCVT            H0, S17 }
    short float v234 = _H0;
    float16x8_t v235 = vmulq_n_f16(v237, v62);
    __asm { FCVT            H0, S18 }
    short float v233 = _H0;
    __asm { FCVT            H0, S19 }
    short float v232 = _H0;
    __asm { FCVT            H0, S20 }
    short float v231 = _H0;
    _S0 = v245;
    __asm { FCVT            H0, S0 }
    short float v230 = *(short float *)&_S0;
    _S0 = v244;
    __asm { FCVT            H0, S0 }
    short float v229 = *(short float *)&_S0;
    _S0 = v243;
    __asm { FCVT            H0, S0 }
    short float v228 = *(short float *)&_S0;
    __asm { FCVT            H0, S3 }
    short float v227 = *(short float *)&_S0;
    __asm { FCVT            H0, S4 }
    short float v226 = *(short float *)&_S0;
    __asm { FCVT            H0, S5 }
    short float v225 = *(short float *)&_S0;
    __asm { FCVT            H0, S6 }
    short float v224 = *(short float *)&_S0;
    __asm { FCVT            H0, S7 }
    short float v223 = *(short float *)&_S0;
    __asm { FCVT            H0, S16 }
    short float v222 = *(short float *)&_S0;
    uint64_t v71 = v25 + v23 * v13 + v8;
    uint64_t v72 = v221 + v219 + 4 * v241;
    if (!v25) {
      uint64_t v71 = 0;
    }
    if (v24) {
      unsigned int v73 = (unsigned char *)(v24 + v22 * v13 + v8);
    }
    else {
      unsigned int v73 = 0;
    }
    float v74 = (int8x8_t *)(v238 + v21 * v13 + v8);
    unint64_t v75 = a4.i64[0];
    LODWORD(v76) = v63.i32[1];
    float v220 = v63.f32[1];
    float v239 = v63.f32[0];
    uint64_t v218 = v30 + 4;
    uint64_t v217 = v29 + 4;
    uint64_t v216 = v28 + 4;
    uint64_t v77 = v31 + 4;
    v78.i64[0] = 0x9000900090009000;
    v78.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v7 < 8)
      {
        unint64_t v133 = 0;
        float v132 = v73;
        uint64_t v84 = v71;
        float v83 = (_OWORD *)v72;
        float v82 = v74;
      }
      else
      {
        uint64_t v79 = 0;
        int8x8_t v81 = *(int8x8_t *)((char *)&v246 + 8);
        int8x8_t v80 = (int8x8_t)v246;
        float v82 = v74;
        float v83 = (_OWORD *)v72;
        uint64_t v84 = v71;
        int8x8_t v85 = *(int8x8_t *)((char *)&v247 + 8);
        int8x8_t v86 = (int8x8_t)v247;
        do
        {
          int8x8_t v87 = *(int8x8_t *)&v73[v79];
          int8x8_t v88 = 0;
          *(int8x8_t *)v89.i8 = vzip1_s8(v87, 0);
          v89.u64[1] = (unint64_t)vzip2_s8(v87, 0);
          float16x8_t v90 = vcvtq_f16_u16(v89);
          int8x16_t v91 = (int8x16_t)vmlaq_f16(v236, v240, v90);
          int8x16_t v92 = (int8x16_t)vmlaq_f16(v235, v237, v90);
          v90.i64[0] = vextq_s8(v91, v91, 8uLL).u64[0];
          *(int16x4_t *)v93.i8 = vuzp1_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v90.i8);
          *(int16x4_t *)v90.i8 = vuzp2_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v90.i8);
          v90.i64[1] = v237.i64[0];
          float16x8_t v94 = (float16x8_t)vzip1q_s16((int16x8_t)v90, (int16x8_t)v90);
          v93.i64[1] = v237.i64[0];
          v90.i64[0] = vextq_s8(v92, v92, 8uLL).u64[0];
          *(float16x4_t *)v90.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v90.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v90.i8));
          int8x8_t v95 = *v82++;
          *(int8x8_t *)v96.i8 = vzip1_s8(v95, 0);
          v96.u64[1] = (unint64_t)vzip2_s8(v95, 0);
          float16x8_t v97 = (float16x8_t)vzip1q_s16((int16x8_t)v90, (int16x8_t)v90);
          float16x8_t v98 = vsubq_f16(vcvtq_f16_u16(v96), v242);
          float16x8_t v99 = vmlaq_n_f16(v94, v98, _H8);
          float16x8_t v100 = vmlaq_n_f16(v97, v98, _H8);
          float16x8_t v101 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v93, v93), v98, _H8);
          if (v84)
          {
            int8x8_t v102 = *(int8x8_t *)v84;
            v84 += 8;
            int8x8_t v88 = v102;
          }
          uint16x8_t v103 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v99, (float16x8_t)0), v78));
          v249.val[1] = (int8x16_t)vmovl_high_u16(v103);
          uint32x4_t v104 = vmovl_u16(*(uint16x4_t *)v103.i8);
          v105.i16[0] = *(_WORD *)&v56[2 * v104.u32[0]];
          v105.i16[1] = *(_WORD *)&v56[2 * v104.u32[1]];
          v105.i16[2] = *(_WORD *)&v56[2 * v104.u32[2]];
          v105.i16[3] = *(_WORD *)&v56[2 * v104.u32[3]];
          v105.i16[4] = *(_WORD *)&v56[2 * v249.val[1].u32[0]];
          v105.i16[5] = *(_WORD *)&v56[2 * v249.val[1].u32[1]];
          v105.i16[6] = *(_WORD *)&v56[2 * v249.val[1].u32[2]];
          v105.i16[7] = *(_WORD *)&v56[2 * v249.val[1].u32[3]];
          uint16x8_t v106 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v100, (float16x8_t)0), v78));
          uint32x4_t v107 = vmovl_high_u16(v106);
          uint32x4_t v108 = vmovl_u16(*(uint16x4_t *)v106.i8);
          v109.i16[0] = *(_WORD *)&v56[2 * v108.u32[0]];
          v109.i16[1] = *(_WORD *)&v56[2 * v108.u32[1]];
          v109.i16[2] = *(_WORD *)&v56[2 * v108.u32[2]];
          v109.i16[3] = *(_WORD *)&v56[2 * v108.u32[3]];
          v109.i16[4] = *(_WORD *)&v56[2 * v107.u32[0]];
          v109.i16[5] = *(_WORD *)&v56[2 * v107.u32[1]];
          v109.i16[6] = *(_WORD *)&v56[2 * v107.u32[2]];
          v109.i16[7] = *(_WORD *)&v56[2 * v107.u32[3]];
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v101, (float16x8_t)0), v78));
          uint32x4_t v111 = vmovl_high_u16(v110);
          uint32x4_t v112 = vmovl_u16(*(uint16x4_t *)v110.i8);
          v113.i16[0] = *(_WORD *)&v56[2 * v112.u32[0]];
          v113.i16[1] = *(_WORD *)&v56[2 * v112.u32[1]];
          v113.i16[2] = *(_WORD *)&v56[2 * v112.u32[2]];
          v113.i16[3] = *(_WORD *)&v56[2 * v112.u32[3]];
          v113.i16[4] = *(_WORD *)&v56[2 * v111.u32[0]];
          v113.i16[5] = *(_WORD *)&v56[2 * v111.u32[1]];
          v113.i16[6] = *(_WORD *)&v56[2 * v111.u32[2]];
          v113.i16[7] = *(_WORD *)&v56[2 * v111.u32[3]];
          uint16x8_t v114 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v105, v234), v109, v233), v113, v232), vmaxq_f16(vmaxq_f16(v105, v109), v113), v231), (float16x8_t)0), v78));
          uint32x4_t v115 = vmovl_high_u16(v114);
          uint32x4_t v116 = vmovl_u16(*(uint16x4_t *)v114.i8);
          v249.val[1].i16[0] = *(_WORD *)&v51[2 * v116.u32[0]];
          v249.val[1].i16[1] = *(_WORD *)&v51[2 * v116.u32[1]];
          v249.val[1].i16[2] = *(_WORD *)&v51[2 * v116.u32[2]];
          v249.val[1].i16[3] = *(_WORD *)&v51[2 * v116.u32[3]];
          v249.val[1].i16[4] = *(_WORD *)&v51[2 * v115.u32[0]];
          v249.val[1].i16[5] = *(_WORD *)&v51[2 * v115.u32[1]];
          v249.val[1].i16[6] = *(_WORD *)&v51[2 * v115.u32[2]];
          v249.val[1].i16[7] = *(_WORD *)&v51[2 * v115.u32[3]];
          float16x8_t v117 = vmulq_f16(v105, (float16x8_t)v249.val[1]);
          float16x8_t v118 = vmulq_f16(v109, (float16x8_t)v249.val[1]);
          float16x8_t v119 = vmulq_f16(v113, (float16x8_t)v249.val[1]);
          float16x8_t v120 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v117, v227), v118, v226), v119, v225);
          float16x8_t v121 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v119, v222), v118, v223), v117, v224);
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v117, v230), v118, v229), v119, v228), (float16x8_t)0), v78));
          uint32x4_t v123 = vmovl_high_u16(v122);
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v122.i8);
          v105.i16[0] = *(_WORD *)&result[2 * v124.u32[0]];
          v105.i16[1] = *(_WORD *)&result[2 * v124.u32[1]];
          v105.i16[2] = *(_WORD *)&result[2 * v124.u32[2]];
          v105.i16[3] = *(_WORD *)&result[2 * v124.u32[3]];
          v105.i16[4] = *(_WORD *)&result[2 * v123.u32[0]];
          v105.i16[5] = *(_WORD *)&result[2 * v123.u32[1]];
          v105.i16[6] = *(_WORD *)&result[2 * v123.u32[2]];
          v105.i16[7] = *(_WORD *)&result[2 * v123.u32[3]];
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v78));
          uint32x4_t v126 = vmovl_high_u16(v125);
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v125.i8);
          v120.i16[0] = *(_WORD *)&result[2 * v127.u32[0]];
          v120.i16[1] = *(_WORD *)&result[2 * v127.u32[1]];
          v120.i16[2] = *(_WORD *)&result[2 * v127.u32[2]];
          v120.i16[3] = *(_WORD *)&result[2 * v127.u32[3]];
          v120.i16[4] = *(_WORD *)&result[2 * v126.u32[0]];
          v120.i16[5] = *(_WORD *)&result[2 * v126.u32[1]];
          v120.i16[6] = *(_WORD *)&result[2 * v126.u32[2]];
          v120.i16[7] = *(_WORD *)&result[2 * v126.u32[3]];
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v78));
          uint32x4_t v129 = vmovl_high_u16(v128);
          uint32x4_t v130 = vmovl_u16(*(uint16x4_t *)v128.i8);
          v249.val[1].i16[0] = *(_WORD *)&result[2 * v130.u32[0]];
          v249.val[1].i16[1] = *(_WORD *)&result[2 * v130.u32[1]];
          v249.val[1].i16[2] = *(_WORD *)&result[2 * v130.u32[2]];
          v249.val[1].i16[3] = *(_WORD *)&result[2 * v130.u32[3]];
          v249.val[1].i16[4] = *(_WORD *)&result[2 * v129.u32[0]];
          v249.val[1].i16[5] = *(_WORD *)&result[2 * v129.u32[1]];
          v249.val[1].i16[6] = *(_WORD *)&result[2 * v129.u32[2]];
          v249.val[1].i16[7] = *(_WORD *)&result[2 * v129.u32[3]];
          float16x8_t v131 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          *(int8x8_t *)v249.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v249.val[1], (float16x8_t)0), v131)));
          v249.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v105, (float16x8_t)0), v131)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v131)));
          v249.val[1].u64[1] = (unint64_t)vorr_s8(v88, (int8x8_t)vceqd_s64(v84, 0));
          *(int8x8_t *)&long long v76 = vqtbl2_s8(v249, v80);
          *((int8x8_t *)&v76 + 1) = vqtbl2_s8(v249, v81);
          *(int8x8_t *)v129.i8 = vqtbl2_s8(v249, v86);
          v129.u64[1] = (unint64_t)vqtbl2_s8(v249, v85);
          _OWORD *v83 = v76;
          v83[1] = v129;
          v83 += 2;
          v79 += 8;
        }
        while ((int)v79 < (int)v7 - 7);
        float v132 = &v73[v79];
        unint64_t v133 = v7 & 0xFFFFFFF8;
      }
      if (v7 > v133)
      {
        __int16 v134 = (char *)v83 + v218;
        short float v135 = (char *)v83 + v217;
        short float v136 = (char *)v83 + v216;
        short float v137 = (char *)v83 + v77;
        do
        {
          LOBYTE(v76) = v132[1];
          float v138 = (float)v76 - v54;
          unsigned int v139 = HIDWORD(v75);
          float v140 = *((float *)&v75 + 1) * v138;
          LOBYTE(v139) = v82->i8[0];
          float v141 = (float)v139 - v53;
          float v142 = _S24 * v141;
          float v143 = (float)(*((float *)&v75 + 1) * v138) + (float)(_S24 * v141);
          float v144 = 8191.0;
          if (v143 <= 8191.0)
          {
            float v144 = (float)(*((float *)&v75 + 1) * v138) + (float)(_S24 * v141);
            if (v143 < 0.0) {
              float v144 = 0.0;
            }
          }
          LOBYTE(v141) = *v132;
          float v145 = (float)LODWORD(v141) - v54;
          float v146 = (float)(v220 * v138) + (float)(v145 * v239);
          float v147 = 8191.0;
          if ((float)(v142 + v146) <= 8191.0)
          {
            float v147 = v142 + v146;
            if ((float)(v142 + v146) < 0.0) {
              float v147 = 0.0;
            }
          }
          unsigned int v148 = v75;
          float v149 = *(float *)&v75 * v145;
          float v150 = (float)(*(float *)&v75 * v145) + v142;
          float v151 = 8191.0;
          if (v150 <= 8191.0)
          {
            float v151 = v150;
            if (v150 < 0.0) {
              float v151 = 0.0;
            }
          }
          LOBYTE(v148) = v82->i8[1];
          float v152 = _S24 * (float)((float)v148 - v53);
          float v153 = v140 + v152;
          float v154 = 8191.0;
          if (v153 <= 8191.0)
          {
            float v154 = v153;
            if (v153 < 0.0) {
              float v154 = 0.0;
            }
          }
          float v155 = v146 + v152;
          float v156 = 8191.0;
          if (v155 <= 8191.0)
          {
            float v156 = v155;
            if (v155 < 0.0) {
              float v156 = 0.0;
            }
          }
          float v157 = v149 + v152;
          BOOL v158 = (float)(v149 + v152) <= 8191.0;
          float v159 = 8191.0;
          if (v158)
          {
            float v159 = v157;
            if (v157 < 0.0) {
              float v159 = 0.0;
            }
          }
          if (v84)
          {
            char v160 = *(unsigned char *)v84;
            char v161 = *(unsigned char *)(v84 + 1);
            v84 += 2;
          }
          else
          {
            char v160 = 0;
            char v161 = 0;
          }
          _H0 = *(_WORD *)&v56[2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0))];
          __asm { FCVT            S11, H0 }
          _H0 = *(_WORD *)&v56[2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0))];
          __asm { FCVT            S31, H0 }
          _H0 = *(_WORD *)&v56[2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0))];
          __asm { FCVT            S9, H0 }
          _H10 = *(_WORD *)&v56[2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0))];
          _H12 = *(_WORD *)&v56[2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0))];
          _H13 = *(_WORD *)&v56[2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0))];
          float v171 = fmaxf(_S11, fmaxf(_S31, _S9));
          float v172 = (float)((float)((float)(_S18 * _S31) + (float)(_S17 * _S11)) + (float)(_S19 * _S9))
               + (float)(_S20 * v171);
          float v173 = 8191.0;
          if (v172 <= 8191.0)
          {
            float v173 = (float)((float)((float)(_S18 * _S31) + (float)(_S17 * _S11)) + (float)(_S19 * _S9))
                 + (float)(_S20 * v171);
            if (v172 < 0.0) {
              float v173 = 0.0;
            }
          }
          __asm
          {
            FCVT            S10, H10
            FCVT            S12, H12
            FCVT            S13, H13
          }
          _H14 = *(_WORD *)&v51[2 * llroundf(v173)];
          float v178 = fmaxf(_S10, fmaxf(_S12, _S13));
          float v179 = (float)((float)((float)(_S18 * _S12) + (float)(_S17 * _S10)) + (float)(_S19 * _S13))
               + (float)(_S20 * v178);
          float v180 = 8191.0;
          if (v179 <= 8191.0)
          {
            float v180 = (float)((float)((float)(_S18 * _S12) + (float)(_S17 * _S10)) + (float)(_S19 * _S13))
                 + (float)(_S20 * v178);
            if (v179 < 0.0) {
              float v180 = 0.0;
            }
          }
          __asm { FCVT            S0, H14 }
          float v182 = _S11 * _S0;
          float v183 = _S31 * _S0;
          float v184 = _S9 * _S0;
          _H25 = *(_WORD *)&v51[2 * llroundf(v180)];
          __asm { FCVT            S25, H25 }
          float v187 = _S10 * _S25;
          float v188 = _S12 * _S25;
          float v189 = _S13 * _S25;
          float v190 = (float)((float)(v244 * v183) + (float)(v182 * v245)) + (float)(v184 * v243);
          float v191 = (float)((float)(_S4 * v183) + (float)(v182 * _S3)) + (float)(v184 * _S5);
          float v192 = (float)((float)(_S7 * v183) + (float)(v182 * _S6)) + (float)(v184 * _S16);
          float v193 = (float)((float)(v244 * v188) + (float)(v187 * v245)) + (float)(v189 * v243);
          float v194 = (float)((float)(_S4 * v188) + (float)(v187 * _S3)) + (float)(v189 * _S5);
          float v195 = (float)((float)(_S7 * v188) + (float)(v187 * _S6)) + (float)(v189 * _S16);
          short float v196 = *(short float *)&result[2 * llroundf(fminf(fmaxf(v190, 0.0), 8191.0))];
          short float v197 = *(short float *)&result[2 * llroundf(fminf(fmaxf(v191, 0.0), 8191.0))];
          short float v198 = *(short float *)&result[2 * llroundf(fminf(fmaxf(v192, 0.0), 8191.0))];
          short float v199 = *(short float *)&result[2 * llroundf(fminf(fmaxf(v193, 0.0), 8191.0))];
          short float v200 = *(short float *)&result[2 * llroundf(fminf(fmaxf(v194, 0.0), 8191.0))];
          *(float *)&long long v76 = fminf(fmaxf(v195, 0.0), 8191.0);
          short float v201 = *(short float *)&result[2 * llroundf(*(float *)&v76)];
          if (v84) {
            char v202 = v160;
          }
          else {
            char v202 = -1;
          }
          if (v84) {
            char v203 = v161;
          }
          else {
            char v203 = -1;
          }
          if (v196 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H13, #0 }
            if (_NF) {
              _S13 = 0.0;
            }
            else {
              __asm { FCVT            S13, H13 }
            }
          }
          else
          {
            _S13 = 255.0;
          }
          *(v136 - 4) = llroundf(_S13);
          if (v197 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H12, #0 }
            if (_NF) {
              _S12 = 0.0;
            }
            else {
              __asm { FCVT            S12, H12 }
            }
          }
          else
          {
            _S12 = 255.0;
          }
          *(v135 - 4) = llroundf(_S12);
          if (v198 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H11, #0 }
            if (_NF) {
              _S11 = 0.0;
            }
            else {
              __asm { FCVT            S11, H11 }
            }
          }
          else
          {
            _S11 = 255.0;
          }
          *(v134 - 4) = llroundf(_S11);
          *(v137 - 4) = v202;
          if (v199 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H10, #0 }
            if (_NF) {
              _S10 = 0.0;
            }
            else {
              __asm { FCVT            S10, H10 }
            }
          }
          else
          {
            _S10 = 255.0;
          }
          *short float v136 = llroundf(_S10);
          if (v200 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H9, #0 }
            if (_NF) {
              _S9 = 0.0;
            }
            else {
              __asm { FCVT            S9, H9 }
            }
          }
          else
          {
            _S9 = 255.0;
          }
          *short float v135 = llroundf(_S9);
          if (v201 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H30, #0 }
            if (_NF) {
              _S30 = 0.0;
            }
            else {
              __asm { FCVT            S30, H30 }
            }
          }
          else
          {
            _S30 = 255.0;
          }
          *__int16 v134 = llroundf(_S30);
          v134 += 8;
          *short float v137 = v203;
          v137 += 8;
          v133 += 2;
          v135 += 8;
          v136 += 8;
          v132 += 2;
          float v82 = (int8x8_t *)((char *)v82 + 2);
        }
        while (v7 > v133);
      }
      float v74 = (int8x8_t *)((char *)v74 + v21);
      v73 += v22;
      v71 += v23;
      v72 += v26;
      ++v50;
    }
    while (v50 != v15 - v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    uint64_t v38 = v14 + 164;
    uint64_t v39 = v14 + 16548;
    uint64_t v40 = v14 + 32932;
    float v41 = *(float *)(v14 + 104);
    float v42 = *(float *)(v14 + 108);
    float v43 = *(float *)(v14 + 112);
    float v44 = *(float *)(v14 + 116);
    float v45 = *(float *)(v14 + 120);
    float v46 = (void *)*((void *)result + 16);
    uint64_t v47 = *((void *)result + 14);
    unint64_t v48 = *((void *)result + 13) * a2 / v7 + *((void *)result + 15);
    uint64_t v49 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 161);
    uint64_t v50 = *(unsigned __int8 *)(v14 + 160);
    uint64_t v51 = *(unsigned __int8 *)(v14 + 159);
    uint64_t v52 = *(unsigned __int8 *)(v14 + 158);
    uint64_t v53 = *v46 + v48 * v20 + 4 * v47;
    uint64_t v54 = v15[2];
    if (v54) {
      float v55 = (char *)(v54 + v19 * v12 + v49);
    }
    else {
      float v55 = 0;
    }
    uint64_t v57 = *v15;
    uint64_t v56 = v15[1];
    uint64_t v58 = v56 + v18 * v12 + v49;
    if (!v56) {
      uint64_t v58 = 0;
    }
    unsigned int v59 = (unsigned char *)(v57 + v17 * v12 + v49);
    do
    {
      if (v11)
      {
        unint64_t v60 = 0;
        uint64_t v61 = v59;
        uint64_t v62 = v53;
        float32x4_t v63 = v55;
        do
        {
          LOBYTE(_S30) = *(unsigned char *)(v58 + v60 + 1);
          *(float *)&unsigned int v64 = (float)LODWORD(_S30);
          float v65 = *(float *)&v64 - v24;
          float v66 = v26 * (float)(*(float *)&v64 - v24);
          LOBYTE(v64) = *v61;
          float v67 = v25 * (float)((float)v64 - v23);
          float v68 = v66 + v67;
          float v69 = 8191.0;
          if ((float)(v66 + v67) <= 8191.0)
          {
            float v69 = v66 + v67;
            if (v68 < 0.0) {
              float v69 = 0.0;
            }
          }
          LOBYTE(v68) = *(unsigned char *)(v58 + v60);
          float v70 = (float)LODWORD(v68) - v24;
          float v71 = (float)(v28 * v65) + (float)(v70 * v27);
          float v72 = 8191.0;
          if ((float)(v67 + v71) <= 8191.0)
          {
            float v72 = v67 + v71;
            if ((float)(v67 + v71) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v29 * v70;
          float v74 = (float)(v29 * v70) + v67;
          float v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          LOBYTE(v74) = v61[1];
          float v76 = v25 * (float)((float)LODWORD(v74) - v23);
          float v77 = v66 + v76;
          BOOL v78 = (float)(v66 + v76) <= 8191.0;
          float v79 = 8191.0;
          if (v78)
          {
            float v79 = v77;
            if (v77 < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v71 + v76;
          float v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v73 + v76;
          BOOL v78 = (float)(v73 + v76) <= 8191.0;
          float v83 = 8191.0;
          if (v78)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          if (v63)
          {
            char v84 = *v63;
            char v85 = v63[1];
            v63 += 2;
          }
          else
          {
            char v84 = 0;
            char v85 = 0;
          }
          _S10 = fmaxf(v69, 0.0);
          float v87 = 8191.0;
          LOWORD(_S10) = *(_WORD *)(v38 + 2 * llroundf(fminf(_S10, 8191.0)));
          __asm { FCVT            S10, H10 }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          float v100 = (float)((float)((float)(v43 * _S31) + (float)(v42 * _S10)) + (float)(v44 * _S8))
               + (float)(v45 * fmaxf(_S10, fmaxf(_S31, _S8)));
          float v101 = 8191.0;
          if (v100 <= 8191.0)
          {
            float v101 = v100;
            if (v100 < 0.0) {
              float v101 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H9
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v39 + 2 * llroundf(v101));
          float v106 = fmaxf(_S9, fmaxf(_S11, _S12));
          float v107 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S9)) + (float)(v44 * _S12)) + (float)(v45 * v106);
          if (v107 <= 8191.0)
          {
            float v87 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S9)) + (float)(v44 * _S12)) + (float)(v45 * v106);
            if (v107 < 0.0) {
              float v87 = 0.0;
            }
          }
          __asm { FCVT            S13, H13 }
          float v109 = _S10 * _S13;
          float v110 = _S31 * _S13;
          float v111 = _S8 * _S13;
          _H30 = *(_WORD *)(v39 + 2 * llroundf(v87));
          __asm { FCVT            S30, H30 }
          float v114 = _S9 * _S30;
          float v115 = _S11 * _S30;
          float v116 = _S12 * _S30;
          float v117 = (float)((float)(v31 * v110) + (float)(v109 * v30)) + (float)(v111 * v32);
          float v118 = (float)((float)(v34 * v110) + (float)(v109 * v33)) + (float)(v111 * v35);
          float v119 = (float)((float)(v37 * v110) + (float)(v109 * v36)) + (float)(v111 * v41);
          float v120 = (float)((float)(v31 * v115) + (float)(v114 * v30)) + (float)(v116 * v32);
          float v121 = (float)((float)(v34 * v115) + (float)(v114 * v33)) + (float)(v116 * v35);
          float v122 = (float)((float)(v37 * v115) + (float)(v114 * v36)) + (float)(v116 * v41);
          short float v123 = *(short float *)(v40 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          short float v124 = *(short float *)(v40 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          short float v125 = *(short float *)(v40 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          short float v126 = *(short float *)(v40 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          short float v127 = *(short float *)(v40 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          short float v128 = *(short float *)(v40 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          if (v63) {
            char v129 = v84;
          }
          else {
            char v129 = -1;
          }
          if (v63) {
            char v130 = v85;
          }
          else {
            char v130 = -1;
          }
          if (v123 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H12, #0 }
            if (_NF) {
              _S12 = 0.0;
            }
            else {
              __asm { FCVT            S12, H12 }
            }
          }
          else
          {
            _S12 = 255.0;
          }
          *(unsigned char *)(v62 + v52) = llroundf(_S12);
          if (v124 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H11, #0 }
            if (_NF) {
              _S11 = 0.0;
            }
            else {
              __asm { FCVT            S11, H11 }
            }
          }
          else
          {
            _S11 = 255.0;
          }
          *(unsigned char *)(v62 + v51) = llroundf(_S11);
          if (v125 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H10, #0 }
            if (_NF) {
              _S10 = 0.0;
            }
            else {
              __asm { FCVT            S10, H10 }
            }
          }
          else
          {
            _S10 = 255.0;
          }
          *(unsigned char *)(v62 + v50) = llroundf(_S10);
          result[v62] = v129;
          if (v126 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H9, #0 }
            if (_NF) {
              _S9 = 0.0;
            }
            else {
              __asm { FCVT            S9, H9 }
            }
          }
          else
          {
            _S9 = 255.0;
          }
          uint64_t v139 = v62 + 4;
          *(unsigned char *)(v62 + 4 + v52) = llroundf(_S9);
          if (v127 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H8, #0 }
            if (_NF) {
              _S8 = 0.0;
            }
            else {
              __asm { FCVT            S8, H8 }
            }
          }
          else
          {
            _S8 = 255.0;
          }
          *(unsigned char *)(v139 + v51) = llroundf(_S8);
          if (v128 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H30, #0 }
            if (_NF) {
              _S30 = 0.0;
            }
            else {
              __asm { FCVT            S30, H30 }
            }
          }
          else
          {
            _S30 = 255.0;
          }
          *(unsigned char *)(v139 + v50) = llroundf(_S30);
          result[v139] = v130;
          v62 += 8;
          v60 += 2;
          v61 += 2;
        }
        while (v11 > v60);
      }
      v59 += v17;
      v58 += v18;
      v55 += v19;
      v53 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_BGRA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double _D0)
{
  char v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = *(void *)(a1 + 20);
  uint64_t v10 = *(void *)(a1 + 36);
  uint64_t v11 = *(void *)(a1 + 44);
  uint64_t v12 = *(void *)(a1 + 28);
  unint64_t v13 = *a1;
  unint64_t v14 = v12 * a2 / v13;
  uint64_t v15 = v14 + v11;
  unint64_t v16 = (v12 + v12 * a2) / v13;
  uint64_t v17 = v16 + v11;
  uint64_t v18 = *((void *)a1 + 15);
  uint64_t v194 = *((void *)a1 + 14);
  uint64_t v19 = (float32x2_t *)*((void *)a1 + 19);
  unint64_t v20 = *((void *)a1 + 13) * a2;
  size_t v22 = (uint64_t *)*((void *)a1 + 7);
  uint64_t v21 = (uint64_t *)*((void *)a1 + 8);
  uint64_t v23 = *v21;
  uint64_t v24 = v21[1];
  uint64_t v25 = v21[2];
  uint64_t v26 = *v22;
  uint64_t v27 = v22[1];
  uint64_t v28 = v22[2];
  uint64_t v29 = **((void **)a1 + 17);
  uint64_t v190 = **((void **)a1 + 16);
  uint64_t v192 = v26;
  unsigned int v30 = v19[16].u32[0];
  uint64_t v31 = v19[19].u8[6];
  v211[0] = v19[19].i8[6];
  uint64_t v32 = v19[19].u8[7];
  v211[1] = v19[19].i8[7];
  uint64_t v33 = v19[20].u8[0];
  v211[2] = v19[20].i8[0];
  uint64_t v34 = v19[20].u8[1];
  v211[3] = v19[20].i8[1];
  unsigned int v35 = v19[17].u16[2];
  unsigned int v36 = v19[17].u16[3];
  float v37 = v19->f32[0];
  v5.i32[0] = v19[1].i32[0];
  float32x2_t v38 = v19[2];
  v39.i32[0] = v19[3].i32[1];
  LODWORD(_D0) = v19[9].i32[0];
  _S1 = v19[9].f32[1];
  unint64_t v188 = v29 * (v20 / v13 + v18);
  _S2 = v19[10].f32[0];
  _S3 = v19[10].f32[1];
  _S4 = v19[11].f32[0];
  _S5 = v19[11].f32[1];
  _S6 = v19[12].f32[0];
  _S7 = v19[12].f32[1];
  _S16 = v19[13].f32[0];
  long long v209 = 0u;
  long long v210 = 0u;
  do
  {
    int v48 = 0;
    uint64_t result = v211[v8];
    do
    {
      *(unsigned char *)(((unint64_t)&v209 + ((result + 4 * v48) & 0xF8)) | ((_BYTE)result
                                                                                           + 4 * (_BYTE)v48) & 7) = v7 + v48;
      ++v48;
    }
    while (v48 != 8);
    ++v8;
    v7 += 8;
  }
  while (v8 != 4);
  if (v16 != v14)
  {
    uint64_t v50 = 0;
    uint64_t v51 = (char *)&v19[20] + 4;
    uint64_t v52 = (char *)&v19[2068] + 4;
    float v53 = 8191.0 / (float)v30;
    float v54 = (float)v35;
    float v55 = (float)v36;
    _S20 = v53 * v37;
    __asm { FCVT            H8, S20 }
    *(short float *)v6.i16 = (short float)v35;
    v39.i32[1] = v5.i32[0];
    *(float32x2_t *)v4.f32 = vmul_n_f32(v39, v53);
    *(float32x2_t *)v5.f32 = vmul_n_f32(v38, v53);
    short float v62 = -(short float)v36;
    float16x8_t v207 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v208 = (float16x8_t)vdupq_lane_s16(v6, 0);
    _Q22 = vmulq_n_f16(v207, v62);
    float16x8_t v205 = _Q22;
    float16x8_t v206 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    float16x8_t v64 = vmulq_n_f16(v206, v62);
    __asm { FCVT            H9, S0 }
    short float v204 = _H9;
    __asm { FCVT            H9, S1 }
    short float v203 = _H9;
    __asm { FCVT            H9, S2 }
    short float v202 = _H9;
    __asm { FCVT            H9, S3 }
    short float v201 = _H9;
    __asm { FCVT            H9, S4 }
    short float v200 = _H9;
    __asm { FCVT            H9, S5 }
    short float v199 = _H9;
    __asm { FCVT            H9, S6 }
    short float v198 = _H9;
    __asm { FCVT            H9, S7 }
    short float v197 = _H9;
    __asm { FCVT            H9, S16 }
    short float v196 = *(short float *)_D9.i16;
    uint64_t result = v190 + v188 + 4 * v194;
    if (v28) {
      uint64_t v73 = v28 + v25 * v15 + v10;
    }
    else {
      uint64_t v73 = 0;
    }
    if (v27) {
      float v74 = (unsigned char *)(v27 + v24 * v15 + v10);
    }
    else {
      float v74 = 0;
    }
    float v75 = (int8x8_t *)(v192 + v23 * v15 + v10);
    float v195 = v4.f32[1];
    uint64_t v76 = v5.i64[0];
    uint64_t v191 = v33 + 4;
    uint64_t v189 = v32 + 4;
    uint64_t v77 = v31 + 4;
    v78.i64[0] = 0x9000900090009000;
    v78.i64[1] = 0x9000900090009000;
    __int32 v193 = v4.i32[0];
    do
    {
      if ((int)v9 < 8)
      {
        unint64_t v125 = 0;
        short float v124 = v74;
        uint64_t v83 = v73;
        float v82 = (_OWORD *)result;
        float v81 = v75;
      }
      else
      {
        uint64_t v79 = 0;
        int8x8_t v80 = *(int8x8_t *)((char *)&v209 + 8);
        _Q22.i64[0] = v209;
        float v81 = v75;
        float v82 = (_OWORD *)result;
        uint64_t v83 = v73;
        int8x8_t v85 = *(int8x8_t *)((char *)&v210 + 8);
        int8x8_t v84 = (int8x8_t)v210;
        do
        {
          int8x8_t v86 = *(int8x8_t *)&v74[v79];
          int8x8_t v87 = 0;
          *(int8x8_t *)v88.i8 = vzip1_s8(v86, 0);
          v88.u64[1] = (unint64_t)vzip2_s8(v86, 0);
          float16x8_t v89 = vcvtq_f16_u16(v88);
          int16x8_t v90 = (int16x8_t)vmlaq_f16(v205, v207, v89);
          int8x16_t v91 = (int8x16_t)vmlaq_f16(v64, v206, v89);
          v89.i64[0] = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u64[0];
          *(int16x4_t *)v92.i8 = vuzp1_s16(*(int16x4_t *)v90.i8, *(int16x4_t *)v89.i8);
          *(int16x4_t *)v89.i8 = vuzp2_s16(*(int16x4_t *)v90.i8, *(int16x4_t *)v89.i8);
          *(double *)&v89.i64[1] = _D0;
          float16x8_t v93 = (float16x8_t)vzip1q_s16((int16x8_t)v89, (int16x8_t)v89);
          *(double *)&v92.i64[1] = _D0;
          float16x8_t v94 = (float16x8_t)vzip1q_s16(v92, v92);
          v90.i64[0] = vextq_s8(v91, v91, 8uLL).u64[0];
          *(float16x4_t *)v90.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v90.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v90.i8));
          *(double *)&v90.i64[1] = _D0;
          int8x8_t v95 = *v81++;
          *(int8x8_t *)v92.i8 = vzip1_s8(v95, 0);
          v92.u64[1] = (unint64_t)vzip2_s8(v95, 0);
          float16x8_t v96 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v92), v208);
          float16x8_t v97 = vmlaq_n_f16(v93, v96, _H8);
          float16x8_t v98 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v90, v90), v96, _H8);
          float16x8_t v99 = vmlaq_n_f16(v94, v96, _H8);
          if (v83)
          {
            int8x8_t v100 = *(int8x8_t *)v83;
            v83 += 8;
            int8x8_t v87 = v100;
          }
          uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v97, (float16x8_t)0), v78));
          float16x8_t v102 = (float16x8_t)vmovl_high_u16(v101);
          float16x8_t v103 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v101.i8);
          v103.i16[0] = *(_WORD *)&v51[2 * v103.u32[0]];
          v103.i16[1] = *(_WORD *)&v51[2 * v103.u32[1]];
          v103.i16[2] = *(_WORD *)&v51[2 * v103.u32[2]];
          v103.i16[3] = *(_WORD *)&v51[2 * v103.u32[3]];
          v103.i16[4] = *(_WORD *)&v51[2 * v102.u32[0]];
          v103.i16[5] = *(_WORD *)&v51[2 * v102.u32[1]];
          v103.i16[6] = *(_WORD *)&v51[2 * v102.u32[2]];
          v103.i16[7] = *(_WORD *)&v51[2 * v102.u32[3]];
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v98, (float16x8_t)0), v78));
          uint32x4_t v105 = vmovl_high_u16(v104);
          uint32x4_t v106 = vmovl_u16(*(uint16x4_t *)v104.i8);
          v102.i16[0] = *(_WORD *)&v51[2 * v106.u32[0]];
          v102.i16[1] = *(_WORD *)&v51[2 * v106.u32[1]];
          v102.i16[2] = *(_WORD *)&v51[2 * v106.u32[2]];
          v102.i16[3] = *(_WORD *)&v51[2 * v106.u32[3]];
          v102.i16[4] = *(_WORD *)&v51[2 * v105.u32[0]];
          v102.i16[5] = *(_WORD *)&v51[2 * v105.u32[1]];
          v102.i16[6] = *(_WORD *)&v51[2 * v105.u32[2]];
          v102.i16[7] = *(_WORD *)&v51[2 * v105.u32[3]];
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v99, (float16x8_t)0), v78));
          uint32x4_t v108 = vmovl_high_u16(v107);
          float16x8_t v109 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v107.i8);
          v109.i16[0] = *(_WORD *)&v51[2 * v109.u32[0]];
          v109.i16[1] = *(_WORD *)&v51[2 * v109.u32[1]];
          v109.i16[2] = *(_WORD *)&v51[2 * v109.u32[2]];
          v109.i16[3] = *(_WORD *)&v51[2 * v109.u32[3]];
          v109.i16[4] = *(_WORD *)&v51[2 * v108.u32[0]];
          v109.i16[5] = *(_WORD *)&v51[2 * v108.u32[1]];
          v109.i16[6] = *(_WORD *)&v51[2 * v108.u32[2]];
          v109.i16[7] = *(_WORD *)&v51[2 * v108.u32[3]];
          float16x8_t v110 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v103, v201), v102, v200), v109, v199);
          float16x8_t v111 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v109, v196), v102, v197), v103, v198);
          uint16x8_t v112 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v103, v204), v102, v203), v109, v202), (float16x8_t)0), v78));
          uint32x4_t v113 = vmovl_high_u16(v112);
          float16x8_t v114 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v112.i8);
          v114.i16[0] = *(_WORD *)&v52[2 * v114.u32[0]];
          v114.i16[1] = *(_WORD *)&v52[2 * v114.u32[1]];
          v114.i16[2] = *(_WORD *)&v52[2 * v114.u32[2]];
          v114.i16[3] = *(_WORD *)&v52[2 * v114.u32[3]];
          v114.i16[4] = *(_WORD *)&v52[2 * v113.u32[0]];
          v114.i16[5] = *(_WORD *)&v52[2 * v113.u32[1]];
          v114.i16[6] = *(_WORD *)&v52[2 * v113.u32[2]];
          v114.i16[7] = *(_WORD *)&v52[2 * v113.u32[3]];
          uint16x8_t v115 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v110, (float16x8_t)0), v78));
          float16x8_t v116 = (float16x8_t)vmovl_high_u16(v115);
          v117.i64[0] = v116.u32[2];
          v117.i64[1] = v116.u32[3];
          float16x8_t v118 = v117;
          v117.i64[0] = v116.u32[0];
          v110.i64[1] = v116.u32[1];
          uint32x4_t v119 = vmovl_u16(*(uint16x4_t *)v115.i8);
          v116.i16[0] = *(_WORD *)&v52[2 * v119.u32[0]];
          v116.i16[1] = *(_WORD *)&v52[2 * v119.u32[1]];
          v116.i16[2] = *(_WORD *)&v52[2 * v119.u32[2]];
          v116.i16[3] = *(_WORD *)&v52[2 * v119.u32[3]];
          v116.i16[4] = *(_WORD *)&v52[2 * v117.i64[0]];
          v116.i16[5] = *(_WORD *)&v52[2 * v110.i64[1]];
          v116.i16[6] = *(_WORD *)&v52[2 * v118.i64[0]];
          v116.i16[7] = *(_WORD *)&v52[2 * v118.i64[1]];
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v111, (float16x8_t)0), v78));
          uint32x4_t v121 = vmovl_high_u16(v120);
          uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v120.i8);
          v118.i16[0] = *(_WORD *)&v52[2 * v122.u32[0]];
          v118.i16[1] = *(_WORD *)&v52[2 * v122.u32[1]];
          v118.i16[2] = *(_WORD *)&v52[2 * v122.u32[2]];
          v118.i16[3] = *(_WORD *)&v52[2 * v122.u32[3]];
          v118.i16[4] = *(_WORD *)&v52[2 * v121.u32[0]];
          v118.i16[5] = *(_WORD *)&v52[2 * v121.u32[1]];
          v118.i16[6] = *(_WORD *)&v52[2 * v121.u32[2]];
          v118.i16[7] = *(_WORD *)&v52[2 * v121.u32[3]];
          *(int8x8_t *)v122.i8 = vorr_s8(v87, (int8x8_t)vceqd_s64(v83, 0));
          float16x8_t v123 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          *(int8x8_t *)v212.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v123)));
          v212.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v123)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)0), v123)));
          v212.val[1].i64[1] = v122.i64[0];
          *(int8x8_t *)v114.i8 = vqtbl2_s8(v212, *(int8x8_t *)_Q22.i8);
          v114.u64[1] = (unint64_t)vqtbl2_s8(v212, v80);
          *(int8x8_t *)v122.i8 = vqtbl2_s8(v212, v84);
          _D9 = vqtbl2_s8(v212, v85);
          v122.u64[1] = (unint64_t)_D9;
          *float v82 = v114;
          v82[1] = v122;
          v82 += 2;
          v79 += 8;
        }
        while ((int)v79 < (int)v9 - 7);
        short float v124 = &v74[v79];
        unint64_t v125 = v9 & 0xFFFFFFF8;
        v4.i32[0] = v193;
      }
      if (v9 > v125)
      {
        short float v126 = (char *)v82 + v191;
        short float v127 = (char *)v82 + v189;
        short float v128 = (char *)v82 + v77;
        char v129 = (char *)v82 + v34 + 4;
        do
        {
          _Q22.i8[0] = v124[1];
          float v130 = (float)_Q22.u32[0] - v55;
          unsigned int v131 = LODWORD(v195);
          float v132 = v195 * v130;
          LOBYTE(v131) = v81->i8[0];
          float v133 = _S20 * (float)((float)v131 - v54);
          float v134 = (float)(v195 * v130) + v133;
          float v135 = 8191.0;
          if (v134 <= 8191.0)
          {
            float v135 = (float)(v195 * v130) + v133;
            if (v134 < 0.0) {
              float v135 = 0.0;
            }
          }
          LOBYTE(v134) = *v124;
          float v136 = (float)LODWORD(v134) - v55;
          float v137 = (float)(*((float *)&v76 + 1) * v130) + (float)(v136 * *(float *)&v76);
          float v138 = 8191.0;
          if ((float)(v133 + v137) <= 8191.0)
          {
            float v138 = v133 + v137;
            if ((float)(v133 + v137) < 0.0) {
              float v138 = 0.0;
            }
          }
          float v139 = v4.f32[0] * v136;
          float v140 = v139 + v133;
          BOOL v141 = (float)(v139 + v133) <= 8191.0;
          float v142 = 8191.0;
          if (v141)
          {
            float v142 = v140;
            if (v140 < 0.0) {
              float v142 = 0.0;
            }
          }
          _D9.i8[0] = v81->i8[1];
          float v143 = _S20 * (float)((float)_D9.u32[0] - v54);
          float v144 = v132 + v143;
          float v145 = 8191.0;
          if (v144 <= 8191.0)
          {
            float v145 = v144;
            if (v144 < 0.0) {
              float v145 = 0.0;
            }
          }
          float v146 = v137 + v143;
          BOOL v141 = (float)(v137 + v143) <= 8191.0;
          float v147 = 8191.0;
          if (v141)
          {
            float v147 = v146;
            if (v146 < 0.0) {
              float v147 = 0.0;
            }
          }
          float v148 = v139 + v143;
          float v149 = 8191.0;
          if (v148 <= 8191.0)
          {
            if (v148 < 0.0) {
              float v149 = 0.0;
            }
            else {
              float v149 = v148;
            }
          }
          if (v83)
          {
            char v150 = *(unsigned char *)v83;
            char v151 = *(unsigned char *)(v83 + 1);
            v83 += 2;
          }
          else
          {
            char v150 = 0;
            char v151 = 0;
          }
          _H9 = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0))];
          _H23 = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0))];
          __asm
          {
            FCVT            S9, H9
            FCVT            S23, H23
          }
          _H24 = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0))];
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0))];
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0))];
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0))];
          __asm { FCVT            S27, H27 }
          float v164 = (float)((float)(_S1 * _S23) + (float)(_S9 * *(float *)&_D0)) + (float)(_S24 * _S2);
          float v165 = (float)((float)(_S4 * _S23) + (float)(_S9 * _S3)) + (float)(_S24 * _S5);
          float v166 = (float)((float)(_S7 * _S23) + (float)(_S9 * _S6)) + (float)(_S24 * _S16);
          float v167 = (float)((float)(_S1 * _S26) + (float)(_S25 * *(float *)&_D0)) + (float)(_S27 * _S2);
          *(float *)_D9.i32 = (float)((float)(_S4 * _S26) + (float)(_S25 * _S3)) + (float)(_S27 * _S5);
          float v168 = (float)((float)(_S7 * _S26) + (float)(_S25 * _S6)) + (float)(_S27 * _S16);
          short float v169 = *(short float *)&v52[2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0))];
          short float v170 = *(short float *)&v52[2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0))];
          short float v171 = *(short float *)&v52[2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0))];
          short float v172 = *(short float *)&v52[2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0))];
          short float v173 = *(short float *)&v52[2 * llroundf(fminf(fmaxf(*(float *)_D9.i32, 0.0), 8191.0))];
          short float v174 = *(short float *)&v52[2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0))];
          if (v83) {
            char v175 = v150;
          }
          else {
            char v175 = -1;
          }
          if (v83) {
            char v176 = v151;
          }
          else {
            char v176 = -1;
          }
          if (v169 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H11, #0 }
            if (_NF) {
              _S11 = 0.0;
            }
            else {
              __asm { FCVT            S11, H11 }
            }
          }
          else
          {
            _S11 = 255.0;
          }
          *(v128 - 4) = llroundf(_S11);
          if (v170 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H27, #0 }
            if (_NF) {
              _S27 = 0.0;
            }
            else {
              __asm { FCVT            S27, H27 }
            }
          }
          else
          {
            _S27 = 255.0;
          }
          *(v127 - 4) = llroundf(_S27);
          if (v171 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H26, #0 }
            if (_NF) {
              _S26 = 0.0;
            }
            else {
              __asm { FCVT            S26, H26 }
            }
          }
          else
          {
            _S26 = 255.0;
          }
          *(v126 - 4) = llroundf(_S26);
          *(v129 - 4) = v175;
          if (v172 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H25, #0 }
            if (_NF) {
              _S25 = 0.0;
            }
            else {
              __asm { FCVT            S25, H25 }
            }
          }
          else
          {
            _S25 = 255.0;
          }
          *short float v128 = llroundf(_S25);
          if (v173 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H24, #0 }
            if (_NF) {
              _S24 = 0.0;
            }
            else {
              __asm { FCVT            S24, H24 }
            }
          }
          else
          {
            _S24 = 255.0;
          }
          *short float v127 = llroundf(_S24);
          if (v174 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H22, #0 }
            if (_NF) {
              _Q22.i32[0] = 0;
            }
            else {
              __asm { FCVT            S22, H22 }
            }
          }
          else
          {
            _Q22.i32[0] = 1132396544;
          }
          *short float v126 = llroundf(*(float *)_Q22.i32);
          v126 += 8;
          *char v129 = v176;
          v129 += 8;
          v125 += 2;
          v127 += 8;
          v128 += 8;
          v124 += 2;
          float v81 = (int8x8_t *)((char *)v81 + 2);
        }
        while (v9 > v125);
      }
      float v75 = (int8x8_t *)((char *)v75 + v23);
      v74 += v24;
      v73 += v25;
      result += v29;
      ++v50;
    }
    while (v50 != v17 - v15);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    float v38 = *(float *)(v14 + 104);
    uint64_t v39 = v14 + 164;
    uint64_t v40 = v14 + 16548;
    float v41 = (void *)*((void *)result + 16);
    uint64_t v42 = *((void *)result + 14);
    unint64_t v43 = *((void *)result + 13) * a2 / v7 + *((void *)result + 15);
    uint64_t v44 = *(void *)(result + 36);
    uint64_t v45 = *(unsigned __int8 *)(v14 + 161);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 160);
    uint64_t v46 = *(unsigned __int8 *)(v14 + 159);
    uint64_t v47 = *(unsigned __int8 *)(v14 + 158);
    uint64_t v48 = *v41 + v43 * v20 + 4 * v42;
    uint64_t v49 = v15[2];
    if (v49) {
      uint64_t v50 = (char *)(v49 + v19 * v12 + v44);
    }
    else {
      uint64_t v50 = 0;
    }
    uint64_t v52 = *v15;
    uint64_t v51 = v15[1];
    uint64_t v53 = v51 + v18 * v12 + v44;
    if (!v51) {
      uint64_t v53 = 0;
    }
    float v54 = (unsigned char *)(v52 + v17 * v12 + v44);
    do
    {
      if (v11)
      {
        unint64_t v55 = 0;
        uint64_t v56 = v54;
        uint64_t v57 = v48;
        uint64_t v58 = v50;
        do
        {
          LOBYTE(_S26) = *(unsigned char *)(v53 + v55 + 1);
          *(float *)&unsigned int v59 = (float)LODWORD(_S26);
          float v60 = *(float *)&v59 - v24;
          float v61 = v26 * (float)(*(float *)&v59 - v24);
          LOBYTE(v59) = *v56;
          float v62 = v25 * (float)((float)v59 - v23);
          float v63 = v61 + v62;
          float v64 = 8191.0;
          if ((float)(v61 + v62) <= 8191.0)
          {
            float v64 = v61 + v62;
            if (v63 < 0.0) {
              float v64 = 0.0;
            }
          }
          LOBYTE(v63) = *(unsigned char *)(v53 + v55);
          float v65 = (float)LODWORD(v63) - v24;
          float v66 = (float)(v28 * v60) + (float)(v65 * v27);
          float v67 = 8191.0;
          if ((float)(v62 + v66) <= 8191.0)
          {
            float v67 = v62 + v66;
            if ((float)(v62 + v66) < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = v29 * v65;
          float v69 = v68 + v62;
          BOOL v70 = (float)(v68 + v62) <= 8191.0;
          float v71 = 8191.0;
          if (v70)
          {
            float v71 = v69;
            if (v69 < 0.0) {
              float v71 = 0.0;
            }
          }
          LOBYTE(v69) = v56[1];
          float v72 = v25 * (float)((float)LODWORD(v69) - v23);
          float v73 = v61 + v72;
          BOOL v70 = (float)(v61 + v72) <= 8191.0;
          float v74 = 8191.0;
          if (v70)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v66 + v72;
          BOOL v70 = (float)(v66 + v72) <= 8191.0;
          float v76 = 8191.0;
          if (v70)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v68 + v72;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
            else {
              float v78 = v77;
            }
          }
          if (v58)
          {
            char v79 = *v58;
            char v80 = v58[1];
            v58 += 2;
          }
          else
          {
            char v79 = 0;
            char v80 = 0;
          }
          _H26 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          float v97 = (float)((float)(v31 * _S27) + (float)(_S26 * v30)) + (float)(_S28 * v32);
          float v98 = (float)((float)(v34 * _S27) + (float)(_S26 * v33)) + (float)(_S28 * v35);
          float v99 = (float)((float)(v37 * _S27) + (float)(_S26 * v36)) + (float)(_S28 * v38);
          float v100 = (float)((float)(v31 * _S30) + (float)(_S29 * v30)) + (float)(_S31 * v32);
          float v101 = (float)((float)(v34 * _S30) + (float)(_S29 * v33)) + (float)(_S31 * v35);
          float v102 = (float)((float)(v37 * _S30) + (float)(_S29 * v36)) + (float)(_S31 * v38);
          short float v103 = *(short float *)(v40 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          short float v104 = *(short float *)(v40 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          short float v105 = *(short float *)(v40 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          short float v106 = *(short float *)(v40 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          short float v107 = *(short float *)(v40 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          short float v108 = *(short float *)(v40 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          if (v58) {
            char v109 = v79;
          }
          else {
            char v109 = -1;
          }
          if (v58) {
            char v110 = v80;
          }
          else {
            char v110 = -1;
          }
          if (v103 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H8, #0 }
            if (_NF) {
              _S8 = 0.0;
            }
            else {
              __asm { FCVT            S8, H8 }
            }
          }
          else
          {
            _S8 = 255.0;
          }
          *(unsigned char *)(v57 + v47) = llroundf(_S8);
          if (v104 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H31, #0 }
            if (_NF) {
              _S31 = 0.0;
            }
            else {
              __asm { FCVT            S31, H31 }
            }
          }
          else
          {
            _S31 = 255.0;
          }
          *(unsigned char *)(v57 + v46) = llroundf(_S31);
          if (v105 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H30, #0 }
            if (_NF) {
              _S30 = 0.0;
            }
            else {
              __asm { FCVT            S30, H30 }
            }
          }
          else
          {
            _S30 = 255.0;
          }
          result[v57] = llroundf(_S30);
          *(unsigned char *)(v57 + v45) = v109;
          if (v106 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H29, #0 }
            if (_NF) {
              _S29 = 0.0;
            }
            else {
              __asm { FCVT            S29, H29 }
            }
          }
          else
          {
            _S29 = 255.0;
          }
          uint64_t v119 = v57 + 4;
          *(unsigned char *)(v57 + 4 + v47) = llroundf(_S29);
          if (v107 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H28, #0 }
            if (_NF) {
              _S28 = 0.0;
            }
            else {
              __asm { FCVT            S28, H28 }
            }
          }
          else
          {
            _S28 = 255.0;
          }
          *(unsigned char *)(v119 + v46) = llroundf(_S28);
          if (v108 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H26, #0 }
            if (_NF) {
              _S26 = 0.0;
            }
            else {
              __asm { FCVT            S26, H26 }
            }
          }
          else
          {
            _S26 = 255.0;
          }
          result[v119] = llroundf(_S26);
          *(unsigned char *)(v119 + v45) = v110;
          v57 += 8;
          v55 += 2;
          v56 += 2;
        }
        while (v11 > v55);
      }
      v54 += v17;
      v53 += v18;
      v50 += v19;
      v48 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_BGRA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_BGRA_neon_fp16_GCD);
  return 0;
}

int8x8_t *vt_Copy_422vf_rgb_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, double a6, int16x4_t a7, float32x4_t a8, double a9, float32x4_t a10)
{
  char v12 = 0;
  uint64_t v13 = 0;
  unint64_t v14 = *(void *)(a1 + 20);
  uint64_t v15 = *(void *)(a1 + 36);
  uint64_t v16 = *(void *)(a1 + 44);
  uint64_t v17 = *(void *)(a1 + 28);
  unint64_t v18 = *a1;
  unint64_t v19 = v17 * a2 / v18;
  uint64_t v20 = v19 + v16;
  unint64_t v21 = (v17 + v17 * a2) / v18;
  uint64_t v115 = v21 + v16;
  uint64_t v22 = *((void *)a1 + 15);
  uint64_t v118 = *((void *)a1 + 14);
  unint64_t v23 = *((void *)a1 + 13) * a2;
  uint64_t v24 = *((void *)a1 + 19);
  float v26 = (uint64_t *)*((void *)a1 + 7);
  float v25 = (uint64_t *)*((void *)a1 + 8);
  uint64_t v27 = *v25;
  uint64_t v28 = v25[1];
  uint64_t v29 = v25[2];
  uint64_t v30 = v26[1];
  uint64_t v117 = *v26;
  uint64_t v31 = v26[2];
  uint64_t v32 = **((void **)a1 + 17);
  uint64_t v116 = **((void **)a1 + 16);
  unsigned int v33 = *(_DWORD *)(v24 + 128);
  unsigned int v34 = *(_DWORD *)(v24 + 136);
  uint64_t v35 = *(unsigned __int8 *)(v24 + 158);
  v121[0] = *(unsigned char *)(v24 + 158);
  uint64_t v36 = *(unsigned __int8 *)(v24 + 159);
  v121[1] = *(unsigned char *)(v24 + 159);
  uint64_t v37 = *(unsigned __int8 *)(v24 + 160);
  v121[2] = *(unsigned char *)(v24 + 160);
  uint64_t v38 = v23 / v18 + v22;
  uint64_t v39 = *(unsigned __int8 *)(v24 + 161);
  v121[3] = *(unsigned char *)(v24 + 161);
  unsigned int v40 = *(unsigned __int16 *)(v24 + 140);
  unsigned int v41 = *(unsigned __int16 *)(v24 + 142);
  float v42 = *(float *)v24;
  unsigned __int32 v43 = *(_DWORD *)(v24 + 8);
  a10.i64[0] = *(void *)(v24 + 16);
  a8.i32[0] = *(_DWORD *)(v24 + 28);
  HIDWORD(v44) = 0;
  long long v119 = 0u;
  long long v120 = 0u;
  do
  {
    LODWORD(result) = 0;
    char v46 = v121[v13];
    do
    {
      *(unsigned char *)(((unint64_t)&v119 + ((v46 + 4 * (_BYTE)result) & 0xF8)) | (v46
                                                                                                  + 4 * (_BYTE)result) & 7) = v12 + (_BYTE)result;
      uint64_t result = (int8x8_t *)(result + 1);
    }
    while (result != 8);
    ++v13;
    v12 += 8;
  }
  while (v13 != 4);
  if (v21 != v19)
  {
    uint64_t v47 = 0;
    *(float *)&uint64_t v44 = (float)v40;
    float v48 = (float)v34 / (float)v33;
    float v49 = (float)v41;
    _S2 = v48 * v42;
    __asm { FCVT            H3, S2 }
    *(short float *)a7.i16 = (short float)v40;
    float16x8_t v56 = (float16x8_t)vdupq_lane_s16(a7, 0);
    short float v57 = -(short float)v41;
    a8.i32[1] = v43;
    *(float32x2_t *)a8.f32 = vmul_n_f32(*(float32x2_t *)a8.f32, v48);
    float16x8_t v58 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a8), 0);
    *(float32x2_t *)a10.f32 = vmul_n_f32(*(float32x2_t *)a10.f32, v48);
    float16x8_t v59 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a10), 0);
    float16x8_t v60 = vmulq_n_f16(v58, v57);
    float16x8_t v61 = vmulq_n_f16(v59, v57);
    uint64_t v62 = v116 + v32 * v38 + 4 * v118;
    if (v31) {
      uint64_t v63 = v31 + v29 * v20 + v15;
    }
    else {
      uint64_t v63 = 0;
    }
    if (v30) {
      float v64 = (__int8 *)(v30 + v28 * v20 + v15);
    }
    else {
      float v64 = 0;
    }
    uint64_t result = (int8x8_t *)(v117 + v27 * v20 + v15);
    uint64_t v65 = v36 + 4;
    uint64_t v66 = v35 + 4;
    do
    {
      if ((int)v14 < 8)
      {
        unint64_t v86 = 0;
        int8x8_t v85 = v64;
        uint64_t v71 = v63;
        BOOL v70 = (_OWORD *)v62;
        float v69 = result;
      }
      else
      {
        uint64_t v67 = 0;
        int8x8_t v68 = *(int8x8_t *)((char *)&v119 + 8);
        int8x8_t v10 = (int8x8_t)v119;
        float v69 = result;
        BOOL v70 = (_OWORD *)v62;
        uint64_t v71 = v63;
        int8x8_t v11 = *(int8x8_t *)((char *)&v120 + 8);
        int8x8_t v72 = (int8x8_t)v120;
        do
        {
          if (v71)
          {
            int8x8_t v73 = *(int8x8_t *)v71;
            v71 += 8;
            int8x8_t v74 = v73;
          }
          else
          {
            int8x8_t v74 = 0;
          }
          int8x8_t v75 = *(int8x8_t *)&v64[v67];
          *(int8x8_t *)v76.i8 = vzip1_s8(v75, 0);
          v76.u64[1] = (unint64_t)vzip2_s8(v75, 0);
          float16x8_t v77 = vcvtq_f16_u16(v76);
          int16x8_t v78 = (int16x8_t)vmlaq_f16(v60, v58, v77);
          int8x16_t v79 = (int8x16_t)vmlaq_f16(v61, v59, v77);
          v77.i64[0] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u64[0];
          *(int16x4_t *)v122.val[1].i8 = vuzp1_s16(*(int16x4_t *)v78.i8, *(int16x4_t *)v77.i8);
          *(int16x4_t *)v77.i8 = vuzp2_s16(*(int16x4_t *)v78.i8, *(int16x4_t *)v77.i8);
          v78.i64[0] = vextq_s8(v79, v79, 8uLL).u64[0];
          *(float16x4_t *)v78.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v78.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v78.i8));
          int8x8_t v80 = *v69++;
          *(int8x8_t *)v81.i8 = vzip1_s8(v80, 0);
          v77.i64[1] = v44;
          v122.val[1].i64[1] = v44;
          v78.i64[1] = v44;
          v81.u64[1] = (unint64_t)vzip2_s8(v80, 0);
          float16x8_t v82 = vsubq_f16(vcvtq_f16_u16(v81), v56);
          float16x8_t v83 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          *(int8x8_t *)v122.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v122.val[1], (int16x8_t)v122.val[1]), v82, _H3), (float16x8_t)0), v83)));
          v122.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v77, (int16x8_t)v77), v82, _H3), (float16x8_t)0), v83)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16(v78, v78), v82, _H3), (float16x8_t)0), v83)));
          v122.val[1].u64[1] = (unint64_t)vorr_s8(v74, (int8x8_t)vceqd_s64(v71, 0));
          *(int8x8_t *)&long long v84 = vqtbl2_s8(v122, v10);
          *((int8x8_t *)&v84 + 1) = vqtbl2_s8(v122, v68);
          *(int8x8_t *)v82.i8 = vqtbl2_s8(v122, v72);
          v82.u64[1] = (unint64_t)vqtbl2_s8(v122, v11);
          _OWORD *v70 = v84;
          v70[1] = v82;
          v70 += 2;
          v67 += 8;
        }
        while ((int)v67 < (int)v14 - 7);
        int8x8_t v85 = &v64[v67];
        unint64_t v86 = v14 & 0xFFFFFFF8;
      }
      if (v14 > v86)
      {
        int8x8_t v87 = (char *)v70 + v37 + 4;
        uint16x8_t v88 = (char *)v70 + v65;
        float16x8_t v89 = (char *)v70 + v66;
        int16x8_t v90 = (char *)v70 + v39 + 4;
        do
        {
          if (v71)
          {
            char v91 = *(unsigned char *)v71;
            char v92 = *(unsigned char *)(v71 + 1);
            v71 += 2;
          }
          else
          {
            char v91 = 0;
            char v92 = 0;
          }
          v10.i8[0] = *v85;
          *(float *)&unsigned int v93 = (float)v10.u32[0];
          float v94 = *(float *)&v93 - v49;
          LOBYTE(v93) = v85[1];
          float v95 = (float)v93 - v49;
          *(float *)v10.i32 = a8.f32[1] * v95;
          float v96 = (float)(a10.f32[1] * v95) + (float)(v94 * a10.f32[0]);
          v11.i8[0] = v69->i8[0];
          *(float *)v11.i32 = (float)v11.u32[0] - *(float *)&v44;
          float v97 = _S2 * *(float *)v11.i32;
          v11.i8[0] = v69->i8[1];
          float v98 = *(float *)v10.i32 + v97;
          float v99 = v97 + v96;
          if (v71) {
            char v100 = v91;
          }
          else {
            char v100 = -1;
          }
          if (v71) {
            char v101 = v92;
          }
          else {
            char v101 = -1;
          }
          if (v98 < 0.0) {
            float v102 = 0.0;
          }
          else {
            float v102 = *(float *)v10.i32 + v97;
          }
          if (v98 <= 255.0) {
            float v103 = v102;
          }
          else {
            float v103 = 255.0;
          }
          *(v89 - 4) = llroundf(v103);
          float v104 = 255.0;
          if (v99 <= 255.0)
          {
            float v104 = v97 + v96;
            if (v99 < 0.0) {
              float v104 = 0.0;
            }
          }
          float v105 = a8.f32[0] * v94;
          *(float *)v11.i32 = _S2 * (float)((float)v11.u32[0] - *(float *)&v44);
          float v106 = v105 + v97;
          float v107 = *(float *)v10.i32 + *(float *)v11.i32;
          float v108 = v96 + *(float *)v11.i32;
          *(v88 - 4) = llroundf(v104);
          float v109 = 255.0;
          if (v106 < 0.0) {
            float v110 = 0.0;
          }
          else {
            float v110 = v106;
          }
          if (v106 <= 255.0) {
            float v111 = v110;
          }
          else {
            float v111 = 255.0;
          }
          *(v87 - 4) = llroundf(v111);
          *(v90 - 4) = v100;
          if (v107 < 0.0) {
            float v112 = 0.0;
          }
          else {
            float v112 = v107;
          }
          if (v107 <= 255.0) {
            float v109 = v112;
          }
          unsigned char *v89 = llroundf(v109);
          float v113 = 255.0;
          if (v108 <= 255.0)
          {
            float v113 = v108;
            if (v108 < 0.0) {
              float v113 = 0.0;
            }
          }
          float v114 = v105 + *(float *)v11.i32;
          unsigned char *v88 = llroundf(v113);
          v10.i32[0] = 1132396544;
          if (v114 <= 255.0)
          {
            *(float *)v10.i32 = v114;
            if (v114 < 0.0) {
              v10.i32[0] = 0;
            }
          }
          *int8x8_t v87 = llroundf(*(float *)v10.i32);
          v87 += 8;
          *int16x8_t v90 = v101;
          v90 += 8;
          v86 += 2;
          v88 += 8;
          v89 += 8;
          v85 += 2;
          float v69 = (int8x8_t *)((char *)v69 + 2);
        }
        while (v14 > v86);
      }
      uint64_t result = (int8x8_t *)((char *)result + v27);
      v64 += v28;
      v63 += v29;
      v62 += v32;
      ++v47;
    }
    while (v47 != v115 - v20);
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    unint64_t v9 = *(void *)(result + 20);
    unint64_t v10 = v6 + *(void *)(result + 44);
    unint64_t v11 = v7 - v6;
    uint64_t v12 = *((void *)result + 19);
    uint64_t v13 = (uint64_t *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = **((void **)result + 17);
    *(float *)&unsigned int v19 = (float)*(unsigned int *)(v12 + 128);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v12 + 136);
    float v21 = *(float *)&v20 / *(float *)&v19;
    LOWORD(v19) = *(_WORD *)(v12 + 140);
    float v22 = (float)v19;
    LOWORD(v20) = *(_WORD *)(v12 + 142);
    float v23 = (float)v20;
    float v24 = v21 * *(float *)v12;
    float v25 = v21 * *(float *)(v12 + 8);
    float v26 = v21 * *(float *)(v12 + 16);
    float v27 = v21 * *(float *)(v12 + 20);
    float v28 = v21 * *(float *)(v12 + 28);
    uint64_t v29 = (void *)*((void *)result + 16);
    uint64_t v30 = *((void *)result + 14);
    unint64_t v31 = *((void *)result + 13) * a2 / v5 + *((void *)result + 15);
    uint64_t v32 = *(void *)(result + 36);
    uint64_t v33 = *(unsigned __int8 *)(v12 + 161);
    uint64_t v34 = *(unsigned __int8 *)(v12 + 160);
    uint64_t v35 = *(unsigned __int8 *)(v12 + 159);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v12 + 158);
    uint64_t v36 = *v29 + v31 * v18 + 4 * v30;
    uint64_t v37 = v13[2];
    if (v37) {
      uint64_t v38 = (char *)(v37 + v17 * v10 + v32);
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v40 = *v13;
    uint64_t v39 = v13[1];
    uint64_t v41 = v39 + v16 * v10 + v32;
    if (!v39) {
      uint64_t v41 = 0;
    }
    float v42 = (unsigned char *)(v40 + v15 * v10 + v32);
    do
    {
      if (v9)
      {
        unint64_t v43 = 0;
        uint64_t v44 = v42;
        uint64_t v45 = v36;
        char v46 = v38;
        do
        {
          if (v46)
          {
            char v47 = *v46;
            char v48 = v46[1];
            v46 += 2;
          }
          else
          {
            char v47 = 0;
            char v48 = 0;
          }
          LOBYTE(v2) = *(unsigned char *)(v41 + v43);
          *(float *)&unsigned int v49 = (float)LODWORD(v2);
          float v50 = *(float *)&v49 - v23;
          LOBYTE(v49) = *(unsigned char *)(v41 + v43 + 1);
          float v51 = (float)v49 - v23;
          float v52 = v25 * v51;
          float v53 = (float)(v27 * v51) + (float)(v50 * v26);
          LOBYTE(v3) = *v44;
          float v55 = (float)LODWORD(v3) - v22;
          float v54 = v24 * v55;
          LOBYTE(v55) = v44[1];
          float v56 = v52 + v54;
          if (v46) {
            char v57 = v47;
          }
          else {
            char v57 = -1;
          }
          if (v46) {
            char v58 = v48;
          }
          else {
            char v58 = -1;
          }
          if (v56 < 0.0) {
            float v59 = 0.0;
          }
          else {
            float v59 = v52 + v54;
          }
          if (v56 <= 255.0) {
            float v60 = v59;
          }
          else {
            float v60 = 255.0;
          }
          result[v45] = llroundf(v60);
          float v61 = 255.0;
          if ((float)(v54 + v53) <= 255.0)
          {
            float v61 = v54 + v53;
            if ((float)(v54 + v53) < 0.0) {
              float v61 = 0.0;
            }
          }
          float v62 = v28 * v50;
          float v3 = v24 * (float)((float)LODWORD(v55) - v22);
          float v63 = v62 + v54;
          float v64 = v52 + v3;
          *(unsigned char *)(v45 + v35) = llroundf(v61);
          float v65 = v53 + v3;
          if (v63 < 0.0) {
            float v66 = 0.0;
          }
          else {
            float v66 = v63;
          }
          if (v63 <= 255.0) {
            float v67 = v66;
          }
          else {
            float v67 = 255.0;
          }
          *(unsigned char *)(v45 + v34) = llroundf(v67);
          *(unsigned char *)(v45 + v33) = v57;
          if (v64 < 0.0) {
            float v68 = 0.0;
          }
          else {
            float v68 = v64;
          }
          if (v64 <= 255.0) {
            float v69 = v68;
          }
          else {
            float v69 = 255.0;
          }
          uint64_t v70 = v45 + 4;
          result[v45 + 4] = llroundf(v69);
          float v71 = 255.0;
          if (v65 <= 255.0)
          {
            float v71 = v65;
            if (v65 < 0.0) {
              float v71 = 0.0;
            }
          }
          *(unsigned char *)(v70 + v35) = llroundf(v71);
          float v2 = 255.0;
          if ((float)(v62 + v3) <= 255.0)
          {
            float v2 = v62 + v3;
            if ((float)(v62 + v3) < 0.0) {
              float v2 = 0.0;
            }
          }
          *(unsigned char *)(v70 + v34) = llroundf(v2);
          *(unsigned char *)(v70 + v33) = v58;
          v45 += 8;
          v43 += 2;
          v44 += 2;
        }
        while (v9 > v43);
      }
      v42 += v15;
      v41 += v16;
      v38 += v17;
      v36 += v18;
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v26 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v21 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v22 = (float)LODWORD(a5);
    float v23 = v26 * *(float *)v13;
    float v147 = v26 * *(float *)(v13 + 16);
    float v148 = v26 * *(float *)(v13 + 8);
    float v24 = v26 * *(float *)(v13 + 20);
    float v25 = v26 * *(float *)(v13 + 28);
    LOWORD(v26) = *(_WORD *)(v13 + 144);
    float v27 = (float)LODWORD(v26);
    float v28 = *(float *)(v13 + 72);
    float v29 = *(float *)(v13 + 76);
    float v30 = *(float *)(v13 + 80);
    float v31 = *(float *)(v13 + 84);
    float v32 = *(float *)(v13 + 88);
    float v33 = *(float *)(v13 + 92);
    float v34 = *(float *)(v13 + 96);
    float v35 = *(float *)(v13 + 100);
    uint64_t v36 = v13 + 164;
    uint64_t v37 = v13 + 16548;
    uint64_t v38 = v13 + 32932;
    float v39 = *(float *)(v13 + 104);
    float v40 = *(float *)(v13 + 108);
    float v41 = *(float *)(v13 + 112);
    float v42 = *(float *)(v13 + 116);
    float v43 = *(float *)(v13 + 120);
    uint64_t v44 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16)
                               + (*((void *)result + 13) * a2 / v6 + *((void *)result + 15)) * v19
                               + 16 * *((void *)result + 14));
    uint64_t v45 = v14[2];
    if (v45) {
      char v46 = (unsigned __int8 *)(v45 + v18 * v11 + v44);
    }
    else {
      char v46 = 0;
    }
    unsigned int v49 = v14;
    uint64_t v48 = *v14;
    uint64_t v47 = v49[1];
    if (v47) {
      uint64_t v50 = v47 + v17 * v11 + v44;
    }
    else {
      uint64_t v50 = 0;
    }
    float v51 = (unsigned char *)(v48 + v16 * v11 + v44);
    do
    {
      if (v10)
      {
        unint64_t v52 = 0;
        float v53 = v51;
        float v54 = (unsigned int *)result;
        float v55 = v46;
        do
        {
          LOBYTE(v26) = *(unsigned char *)(v50 + v52 + 1);
          float v56 = (float)LODWORD(v26) - v22;
          unsigned int v57 = LODWORD(v148);
          float v58 = v148 * v56;
          LOBYTE(v57) = *v53;
          float v59 = v23 * (float)((float)v57 - v21);
          float v60 = (float)(v148 * v56) + v59;
          float v61 = 8191.0;
          if (v60 <= 8191.0)
          {
            float v61 = (float)(v148 * v56) + v59;
            if (v60 < 0.0) {
              float v61 = 0.0;
            }
          }
          LOBYTE(v60) = *(unsigned char *)(v50 + v52);
          float v62 = (float)LODWORD(v60) - v22;
          float v63 = (float)(v24 * v56) + (float)(v62 * v147);
          float v64 = 8191.0;
          if ((float)(v59 + v63) <= 8191.0)
          {
            float v64 = v59 + v63;
            if ((float)(v59 + v63) < 0.0) {
              float v64 = 0.0;
            }
          }
          float v65 = v25 * v62;
          float v66 = (float)(v25 * v62) + v59;
          float v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            float v67 = v66;
            if (v66 < 0.0) {
              float v67 = 0.0;
            }
          }
          LOBYTE(v66) = v53[1];
          float v68 = v23 * (float)((float)LODWORD(v66) - v21);
          float v69 = v58 + v68;
          BOOL v70 = (float)(v58 + v68) <= 8191.0;
          float v71 = 8191.0;
          if (v70)
          {
            float v71 = v69;
            if (v69 < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = 8191.0;
          if ((float)(v63 + v68) <= 8191.0)
          {
            float v72 = v63 + v68;
            if ((float)(v63 + v68) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v65 + v68;
          BOOL v70 = (float)(v65 + v68) <= 8191.0;
          float v74 = 8191.0;
          if (v70)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          if (v55)
          {
            unsigned int v75 = *v55;
            unsigned int v76 = v55[1];
            v55 += 2;
          }
          else
          {
            unsigned int v75 = 0;
            unsigned int v76 = 0;
          }
          _S4 = fmaxf(v61, 0.0);
          float v78 = 8191.0;
          LOWORD(_S4) = *(_WORD *)(v36 + 2 * llroundf(fminf(_S4, 8191.0)));
          __asm { FCVT            S13, H4 }
          LOWORD(_S4) = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S10, H4 }
          LOWORD(_S4) = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S11, H4 }
          _H8 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          float v89 = (float)((float)((float)(v41 * _S10) + (float)(v40 * _S13)) + (float)(v42 * _S11))
              + (float)(v43 * fmaxf(_S13, fmaxf(_S10, _S11)));
          float v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          __asm
          {
            FCVT            S12, H8
            FCVT            S14, H14
            FCVT            S15, H15
          }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(v90));
          float v95 = fmaxf(_S12, fmaxf(_S14, _S15));
          float v96 = (float)((float)((float)(v41 * _S14) + (float)(v40 * _S12)) + (float)(v42 * _S15)) + (float)(v43 * v95);
          if (v96 <= 8191.0)
          {
            float v78 = (float)((float)((float)(v41 * _S14) + (float)(v40 * _S12)) + (float)(v42 * _S15)) + (float)(v43 * v95);
            if (v96 < 0.0) {
              float v78 = 0.0;
            }
          }
          __asm { FCVT            S4, H8 }
          float v98 = _S13 * _S4;
          float v99 = _S10 * _S4;
          float v100 = _S11 * _S4;
          _H9 = *(_WORD *)(v37 + 2 * llroundf(v78));
          __asm { FCVT            S9, H9 }
          float v103 = _S12 * _S9;
          float v104 = _S14 * _S9;
          float v105 = _S15 * _S9;
          float v106 = (float)((float)(v29 * v99) + (float)(v98 * v28)) + (float)(v100 * v30);
          float v107 = (float)((float)(v32 * v99) + (float)(v98 * v31)) + (float)(v100 * v33);
          float v108 = (float)((float)(v35 * v99) + (float)(v98 * v34)) + (float)(v100 * v39);
          float v109 = (float)((float)(v29 * v104) + (float)(v103 * v28)) + (float)(v105 * v30);
          float v110 = (float)((float)(v32 * v104) + (float)(v103 * v31)) + (float)(v105 * v33);
          float v111 = (float)((float)(v35 * v104) + (float)(v103 * v34)) + (float)(v105 * v39);
          _H12 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v108, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          if (v55)
          {
            float v118 = (double)v75 * 3.0 / 255.0;
            unsigned int v119 = llroundf(v118);
            float v120 = (double)v76 * 3.0 / 255.0;
            unsigned int v121 = llroundf(v120);
          }
          else
          {
            unsigned int v119 = 3;
            unsigned int v121 = 3;
          }
          __asm { FCVT            S4, H11 }
          float v123 = v27 + _S4;
          float v124 = 1023.0;
          float v125 = 1023.0;
          if (v123 <= 1023.0)
          {
            float v125 = v123;
            if (v123 < 0.0) {
              float v125 = 0.0;
            }
          }
          __asm { FCVT            S4, H14 }
          float v127 = v27 + _S4;
          float v128 = 1023.0;
          if (v127 <= 1023.0)
          {
            float v128 = v127;
            if (v127 < 0.0) {
              float v128 = 0.0;
            }
          }
          __asm { FCVT            S4, H12 }
          float v130 = v27 + _S4;
          float v131 = 1023.0;
          if (v130 <= 1023.0)
          {
            float v131 = v130;
            if (v130 < 0.0) {
              float v131 = 0.0;
            }
          }
          __asm { FCVT            S4, H13 }
          unsigned int v133 = llroundf(v125);
          unsigned int v134 = llroundf(v131);
          float v135 = (float)v119;
          unsigned int v136 = llroundf(v128) << 10;
          if (v135 > 3.0) {
            float v135 = 3.0;
          }
          *float v54 = v136 | v133 | (llroundf(v135) << 30) | (v134 << 20);
          float v137 = v27 + _S4;
          float v138 = 1023.0;
          if (v137 <= 1023.0)
          {
            float v138 = v137;
            if (v137 < 0.0) {
              float v138 = 0.0;
            }
          }
          __asm { FCVT            S4, H10 }
          float v140 = v27 + _S4;
          float v141 = 1023.0;
          if (v140 <= 1023.0)
          {
            float v141 = v140;
            if (v140 < 0.0) {
              float v141 = 0.0;
            }
          }
          __asm { FCVT            S4, H9 }
          float v143 = v27 + _S4;
          if (v143 <= 1023.0)
          {
            float v124 = v143;
            if (v143 < 0.0) {
              float v124 = 0.0;
            }
          }
          unsigned int v144 = llroundf(v138);
          unsigned int v145 = llroundf(v141) << 10;
          unsigned int v146 = llroundf(v124);
          float v26 = (float)v121;
          if ((float)v121 > 3.0) {
            float v26 = 3.0;
          }
          v54[1] = v145 | v144 | (llroundf(v26) << 30) | (v146 << 20);
          v52 += 2;
          v53 += 2;
          v54 += 2;
        }
        while (v10 > v52);
      }
      v51 += v16;
      v50 += v17;
      v46 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = *(float *)(v14 + 28);
    float v30 = v22 * v29;
    LOWORD(v29) = *(_WORD *)(v14 + 144);
    float v31 = (float)LODWORD(v29);
    float v32 = *(float *)(v14 + 72);
    float v33 = *(float *)(v14 + 76);
    float v34 = *(float *)(v14 + 80);
    float v35 = *(float *)(v14 + 84);
    float v36 = *(float *)(v14 + 88);
    float v37 = *(float *)(v14 + 92);
    float v38 = *(float *)(v14 + 96);
    float v39 = *(float *)(v14 + 100);
    float v40 = *(float *)(v14 + 104);
    uint64_t v41 = v14 + 164;
    uint64_t v42 = v14 + 16548;
    uint64_t v43 = *(void *)(result + 36);
    uint64_t v44 = **((void **)result + 16)
        + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
        + 16 * *((void *)result + 14);
    uint64_t v45 = v15[2];
    if (v45) {
      uint64_t result = (unsigned __int8 *)(v45 + v19 * v12 + v43);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v48 = v15;
    uint64_t v47 = *v15;
    uint64_t v46 = v48[1];
    if (v46) {
      uint64_t v49 = v46 + v18 * v12 + v43;
    }
    else {
      uint64_t v49 = 0;
    }
    uint64_t v50 = (unsigned char *)(v47 + v17 * v12 + v43);
    do
    {
      if (v11)
      {
        unint64_t v51 = 0;
        unint64_t v52 = v50;
        float v53 = (_DWORD *)v44;
        float v54 = result;
        do
        {
          LOBYTE(v5) = *(unsigned char *)(v49 + v51 + 1);
          *(float *)&unsigned int v55 = (float)LODWORD(v5);
          float v56 = *(float *)&v55 - v24;
          float v57 = v26 * (float)(*(float *)&v55 - v24);
          LOBYTE(v55) = *v52;
          float v58 = v25 * (float)((float)v55 - v23);
          float v59 = v57 + v58;
          float v60 = 8191.0;
          if ((float)(v57 + v58) <= 8191.0)
          {
            float v60 = v57 + v58;
            if (v59 < 0.0) {
              float v60 = 0.0;
            }
          }
          LOBYTE(v59) = *(unsigned char *)(v49 + v51);
          float v61 = (float)LODWORD(v59) - v24;
          float v62 = (float)(v28 * v56) + (float)(v61 * v27);
          float v63 = 8191.0;
          if ((float)(v58 + v62) <= 8191.0)
          {
            float v63 = v58 + v62;
            if ((float)(v58 + v62) < 0.0) {
              float v63 = 0.0;
            }
          }
          float v64 = v30 * v61;
          float v65 = v64 + v58;
          BOOL v66 = (float)(v64 + v58) <= 8191.0;
          float v67 = 8191.0;
          if (v66)
          {
            float v67 = v65;
            if (v65 < 0.0) {
              float v67 = 0.0;
            }
          }
          LOBYTE(v65) = v52[1];
          float v68 = v25 * (float)((float)LODWORD(v65) - v23);
          float v69 = v57 + v68;
          BOOL v66 = (float)(v57 + v68) <= 8191.0;
          float v70 = 8191.0;
          if (v66)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v62 + v68;
          BOOL v66 = (float)(v62 + v68) <= 8191.0;
          float v72 = 8191.0;
          if (v66)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v64 + v68;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
            else {
              float v74 = v73;
            }
          }
          if (v54)
          {
            unsigned int v75 = *v54;
            unsigned int v76 = v54[1];
            v54 += 2;
          }
          else
          {
            unsigned int v75 = 0;
            unsigned int v76 = 0;
          }
          _H29 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v60, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm
          {
            FCVT            S29, H29
            FCVT            S30, H30
          }
          _H31 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H10 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          float v93 = (float)((float)(v33 * _S30) + (float)(_S29 * v32)) + (float)(_S31 * v34);
          float v94 = (float)((float)(v36 * _S30) + (float)(_S29 * v35)) + (float)(_S31 * v37);
          float v95 = (float)((float)(v39 * _S30) + (float)(_S29 * v38)) + (float)(_S31 * v40);
          float v96 = (float)((float)(v33 * _S9) + (float)(_S8 * v32)) + (float)(_S10 * v34);
          float v97 = (float)((float)(v36 * _S9) + (float)(_S8 * v35)) + (float)(_S10 * v37);
          float v98 = (float)((float)(v39 * _S9) + (float)(_S8 * v38)) + (float)(_S10 * v40);
          _H8 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          if (v54)
          {
            float v105 = (double)v75 * 3.0 / 255.0;
            unsigned int v106 = llroundf(v105);
            float v107 = (double)v76 * 3.0 / 255.0;
            unsigned int v108 = llroundf(v107);
          }
          else
          {
            unsigned int v106 = 3;
            unsigned int v108 = 3;
          }
          __asm { FCVT            S31, H31 }
          float v110 = v31 + _S31;
          float v111 = 1023.0;
          float v112 = 1023.0;
          if (v110 <= 1023.0)
          {
            float v112 = v110;
            if (v110 < 0.0) {
              float v112 = 0.0;
            }
          }
          __asm { FCVT            S10, H10 }
          float v114 = v31 + _S10;
          BOOL v66 = (float)(v31 + _S10) <= 1023.0;
          float v115 = 1023.0;
          if (v66)
          {
            float v115 = v114;
            if (v114 < 0.0) {
              float v115 = 0.0;
            }
          }
          __asm { FCVT            S8, H8 }
          float v117 = v31 + _S8;
          BOOL v66 = (float)(v31 + _S8) <= 1023.0;
          float v118 = 1023.0;
          if (v66)
          {
            float v118 = v117;
            if (v117 < 0.0) {
              float v118 = 0.0;
            }
          }
          __asm { FCVT            S9, H9 }
          unsigned int v120 = llroundf(v112);
          unsigned int v121 = llroundf(v118);
          float v122 = (float)v106;
          unsigned int v123 = llroundf(v115) << 10;
          if (v122 > 3.0) {
            float v122 = 3.0;
          }
          _DWORD *v53 = v123 | v120 | (llroundf(v122) << 30) | (v121 << 20);
          float v124 = v31 + _S9;
          float v125 = 1023.0;
          if (v124 <= 1023.0)
          {
            float v125 = v124;
            if (v124 < 0.0) {
              float v125 = 0.0;
            }
          }
          __asm { FCVT            S30, H30 }
          float v127 = v31 + _S30;
          BOOL v66 = (float)(v31 + _S30) <= 1023.0;
          float v128 = 1023.0;
          if (v66)
          {
            float v128 = v127;
            if (v127 < 0.0) {
              float v128 = 0.0;
            }
          }
          __asm { FCVT            S29, H29 }
          float v130 = v31 + _S29;
          if (v130 <= 1023.0)
          {
            float v111 = v130;
            if (v130 < 0.0) {
              float v111 = 0.0;
            }
          }
          unsigned int v131 = llroundf(v125);
          unsigned int v132 = llroundf(v128) << 10;
          unsigned int v133 = llroundf(v111);
          float v5 = (float)v108;
          if ((float)v108 > 3.0) {
            float v5 = 3.0;
          }
          v53[1] = v132 | v131 | (llroundf(v5) << 30) | (v133 << 20);
          v51 += 2;
          v52 += 2;
          v53 += 2;
        }
        while (v11 > v51);
      }
      v50 += v17;
      v49 += v18;
      result += v19;
      v44 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v14;
    uint64_t v17 = v14[1];
    uint64_t v18 = v14[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v13 + 136);
    float v22 = *(float *)&v21 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v23 = (float)v20;
    LOWORD(v21) = *(_WORD *)(v13 + 142);
    float v24 = (float)v21;
    float v25 = v22 * *(float *)v13;
    float v26 = v22 * *(float *)(v13 + 8);
    float v27 = v22 * *(float *)(v13 + 16);
    float v28 = v22 * *(float *)(v13 + 20);
    float v29 = *(float *)(v13 + 28);
    float v30 = v22 * v29;
    LOWORD(v29) = *(_WORD *)(v13 + 144);
    float v31 = (float)LODWORD(v29);
    uint64_t v32 = *((void *)result + 14);
    uint64_t v33 = (void *)*((void *)result + 16);
    unint64_t v34 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v35 = *(void *)(result + 36);
    uint64_t v36 = *v33 + v34 * v19 + 16 * v32;
    uint64_t v37 = v15[2];
    if (v37) {
      uint64_t v38 = (unsigned char *)(v37 + v18 * v11 + v35);
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v40 = *v15;
    uint64_t v39 = v15[1];
    uint64_t v41 = v39 + v17 * v11 + v35;
    if (!v39) {
      uint64_t v41 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v40 + v16 * v11 + v35);
    do
    {
      if (v10)
      {
        unint64_t v42 = 0;
        uint64_t v43 = result;
        uint64_t v44 = (_DWORD *)v36;
        uint64_t v45 = v38;
        do
        {
          if (v45)
          {
            LOBYTE(v2) = *v45;
            LOBYTE(v3) = v45[1];
            v45 += 2;
            float v46 = (double)*(unint64_t *)&v2 * 3.0 / 255.0;
            unsigned int v47 = llroundf(v46);
            double v2 = (double)v3 * 3.0 / 255.0;
            *(float *)&double v2 = v2;
            unsigned int v48 = llroundf(*(float *)&v2);
          }
          else
          {
            unsigned int v47 = 3;
            unsigned int v48 = 3;
          }
          LOBYTE(v2) = *(unsigned char *)(v41 + v42);
          float v49 = (float)LODWORD(v2) - v24;
          float v50 = v30 * v49;
          LOBYTE(v4) = *v43;
          float v51 = v25 * (float)((float)LODWORD(v4) - v23);
          float v52 = (float)((float)(v30 * v49) + v51) + v31;
          float v53 = 1023.0;
          if (v52 <= 1023.0)
          {
            float v53 = (float)((float)(v30 * v49) + v51) + v31;
            if (v52 < 0.0) {
              float v53 = 0.0;
            }
          }
          LOBYTE(v52) = *(unsigned char *)(v41 + v42 + 1);
          float v54 = (float)LODWORD(v52) - v24;
          float v55 = (float)(v28 * v54) + (float)(v49 * v27);
          float v56 = (float)(v51 + v55) + v31;
          float v57 = 1023.0;
          if (v56 <= 1023.0)
          {
            float v57 = (float)(v51 + v55) + v31;
            if (v56 < 0.0) {
              float v57 = 0.0;
            }
          }
          float v58 = v26 * v54;
          LOBYTE(v54) = v43[1];
          float v59 = v25 * (float)((float)LODWORD(v54) - v23);
          float v60 = v55 + v59;
          float v61 = v50 + v59;
          unsigned int v62 = llroundf(v53);
          unsigned int v63 = llroundf(v57) << 10;
          float v64 = (float)(v58 + v51) + v31;
          if (v64 < 0.0) {
            float v65 = 0.0;
          }
          else {
            float v65 = v64;
          }
          if (v64 <= 1023.0) {
            float v66 = v65;
          }
          else {
            float v66 = 1023.0;
          }
          unsigned int v67 = llroundf(v66);
          float v68 = (float)v47;
          if ((float)v47 > 3.0) {
            float v68 = 3.0;
          }
          *uint64_t v44 = v63 | v62 | (llroundf(v68) << 30) | (v67 << 20);
          float v69 = v61 + v31;
          if (v69 < 0.0) {
            float v70 = 0.0;
          }
          else {
            float v70 = v69;
          }
          if (v69 <= 1023.0) {
            float v71 = v70;
          }
          else {
            float v71 = 1023.0;
          }
          float v4 = 1023.0;
          if ((float)(v60 + v31) <= 1023.0)
          {
            float v4 = v60 + v31;
            if ((float)(v60 + v31) < 0.0) {
              float v4 = 0.0;
            }
          }
          float v72 = (float)(v58 + v59) + v31;
          LODWORD(v3) = 1149222912;
          if (v72 <= 1023.0)
          {
            *(float *)&unint64_t v3 = v72;
            if (v72 < 0.0) {
              unint64_t v3 = 0;
            }
          }
          unsigned int v73 = llroundf(v71);
          unsigned int v74 = llroundf(v4) << 10;
          unsigned int v75 = llroundf(*(float *)&v3);
          *(float *)&double v2 = (float)v48;
          if ((float)v48 > 3.0) {
            *(float *)&double v2 = 3.0;
          }
          v44[1] = v74 | v73 | (llroundf(*(float *)&v2) << 30) | (v75 << 20);
          v42 += 2;
          v43 += 2;
          v44 += 2;
        }
        while (v10 > v42);
      }
      result += v16;
      v41 += v17;
      v38 += v18;
      v36 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    uint64_t v38 = v14 + 164;
    uint64_t v39 = v14 + 16548;
    uint64_t v40 = v14 + 32932;
    float v41 = *(float *)(v14 + 104);
    float v42 = *(float *)(v14 + 108);
    float v43 = *(float *)(v14 + 112);
    float v44 = *(float *)(v14 + 116);
    float v45 = *(float *)(v14 + 120);
    uint64_t v46 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16)
                               + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
                               + 8 * *((void *)result + 14));
    uint64_t v47 = v15[2];
    if (v47) {
      unsigned int v48 = (unsigned __int8 *)(v47 + v19 * v12 + v46);
    }
    else {
      unsigned int v48 = 0;
    }
    float v51 = v15;
    uint64_t v50 = *v15;
    uint64_t v49 = v51[1];
    if (v49) {
      uint64_t v52 = v49 + v18 * v12 + v46;
    }
    else {
      uint64_t v52 = 0;
    }
    float v53 = (unsigned char *)(v50 + v17 * v12 + v46);
    do
    {
      if (v11)
      {
        unint64_t v54 = 0;
        float v55 = v53;
        float v56 = result;
        float v57 = v48;
        do
        {
          LOBYTE(_S30) = *(unsigned char *)(v52 + v54 + 1);
          *(float *)&unsigned int v58 = (float)LODWORD(_S30);
          float v59 = *(float *)&v58 - v24;
          float v60 = v26 * (float)(*(float *)&v58 - v24);
          LOBYTE(v58) = *v55;
          float v61 = v25 * (float)((float)v58 - v23);
          float v62 = v60 + v61;
          float v63 = 8191.0;
          if ((float)(v60 + v61) <= 8191.0)
          {
            float v63 = v60 + v61;
            if (v62 < 0.0) {
              float v63 = 0.0;
            }
          }
          LOBYTE(v62) = *(unsigned char *)(v52 + v54);
          float v64 = (float)LODWORD(v62) - v24;
          float v65 = (float)(v28 * v59) + (float)(v64 * v27);
          float v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            float v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v29 * v64;
          float v68 = (float)(v29 * v64) + v61;
          float v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            float v69 = v68;
            if (v68 < 0.0) {
              float v69 = 0.0;
            }
          }
          LOBYTE(v68) = v55[1];
          float v70 = v25 * (float)((float)LODWORD(v68) - v23);
          float v71 = v60 + v70;
          BOOL v72 = (float)(v60 + v70) <= 8191.0;
          float v73 = 8191.0;
          if (v72)
          {
            float v73 = v71;
            if (v71 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v65 + v70;
          float v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v67 + v70;
          BOOL v72 = (float)(v67 + v70) <= 8191.0;
          float v77 = 8191.0;
          if (v72)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          if (v57)
          {
            __int16 v78 = *v57;
            __int16 v79 = v57[1];
            v57 += 2;
          }
          else
          {
            __int16 v78 = 0;
            __int16 v79 = 0;
          }
          _S10 = fmaxf(v63, 0.0);
          float v81 = 8191.0;
          LOWORD(_S10) = *(_WORD *)(v38 + 2 * llroundf(fminf(_S10, 8191.0)));
          __asm { FCVT            S10, H10 }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          float v94 = (float)((float)((float)(v43 * _S31) + (float)(v42 * _S10)) + (float)(v44 * _S8))
              + (float)(v45 * fmaxf(_S10, fmaxf(_S31, _S8)));
          float v95 = 8191.0;
          if (v94 <= 8191.0)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H9
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v39 + 2 * llroundf(v95));
          float v100 = fmaxf(_S9, fmaxf(_S11, _S12));
          float v101 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S9)) + (float)(v44 * _S12)) + (float)(v45 * v100);
          if (v101 <= 8191.0)
          {
            float v81 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S9)) + (float)(v44 * _S12)) + (float)(v45 * v100);
            if (v101 < 0.0) {
              float v81 = 0.0;
            }
          }
          __asm { FCVT            S13, H13 }
          float v103 = _S10 * _S13;
          float v104 = _S31 * _S13;
          float v105 = _S8 * _S13;
          _H30 = *(_WORD *)(v39 + 2 * llroundf(v81));
          __asm { FCVT            S30, H30 }
          float v108 = _S9 * _S30;
          float v109 = _S11 * _S30;
          float v110 = _S12 * _S30;
          _S12 = (float)((float)(v31 * v104) + (float)(v103 * v30)) + (float)(v105 * v32);
          float v112 = (float)((float)(v34 * v104) + (float)(v103 * v33)) + (float)(v105 * v35);
          float v113 = (float)((float)(v37 * v104) + (float)(v103 * v36)) + (float)(v105 * v41);
          float v114 = (float)((float)(v31 * v109) + (float)(v108 * v30)) + (float)(v110 * v32);
          float v115 = (float)((float)(v34 * v109) + (float)(v108 * v33)) + (float)(v110 * v35);
          float v116 = (float)((float)(v37 * v109) + (float)(v108 * v36)) + (float)(v110 * v41);
          LOWORD(_S12) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S13, H12 }
          _H11 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          _S30 = fminf(fmaxf(v116, 0.0), 8191.0);
          LOWORD(_S30) = *(_WORD *)(v40 + 2 * llroundf(_S30));
          __int16 v122 = v78 | (v78 << 8);
          if (v57) {
            __int16 v123 = v122;
          }
          else {
            __int16 v123 = -1;
          }
          __int16 v124 = v79 | (v79 << 8);
          if (!v57) {
            __int16 v124 = -1;
          }
          float v125 = 65535.0;
          float v126 = 65535.0;
          if (_S13 <= 65535.0)
          {
            __asm { FCMP            H12, #0 }
            float v126 = _S13;
            if (_NF) {
              float v126 = 0.0;
            }
          }
          __asm { FCVT            S13, H11 }
          *float v56 = llroundf(v126);
          float v129 = 65535.0;
          if (_S13 <= 65535.0)
          {
            __asm { FCMP            H11, #0 }
            float v129 = _S13;
            if (_NF) {
              float v129 = 0.0;
            }
          }
          __asm { FCVT            S13, H10 }
          v56[1] = llroundf(v129);
          float v132 = 65535.0;
          if (_S13 <= 65535.0)
          {
            __asm { FCMP            H10, #0 }
            float v132 = _S13;
            if (_NF) {
              float v132 = 0.0;
            }
          }
          __asm { FCVT            S12, H9 }
          v56[2] = llroundf(v132);
          v56[3] = v123;
          float v135 = 65535.0;
          if (_S12 <= 65535.0)
          {
            __asm { FCMP            H9, #0 }
            float v135 = _S12;
            if (_NF) {
              float v135 = 0.0;
            }
          }
          __asm { FCVT            S11, H8 }
          v56[4] = llroundf(v135);
          float v138 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v138 = _S11;
            if (_NF) {
              float v138 = 0.0;
            }
          }
          __asm { FCVT            S8, H30 }
          v56[5] = llroundf(v138);
          if (_S8 <= 65535.0)
          {
            __asm { FCMP            H30, #0 }
            float v125 = _S8;
            if (_NF) {
              float v125 = 0.0;
            }
          }
          v56[6] = llroundf(v125);
          v56[7] = v124;
          v54 += 2;
          v55 += 2;
          v56 += 8;
        }
        while (v11 > v54);
      }
      v53 += v17;
      v52 += v18;
      v48 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    float v38 = *(float *)(v14 + 104);
    uint64_t v39 = v14 + 164;
    uint64_t v40 = v14 + 16548;
    uint64_t v41 = *(void *)(result + 36);
    uint64_t v42 = **((void **)result + 16)
        + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
        + 8 * *((void *)result + 14);
    uint64_t v43 = v15[2];
    if (v43) {
      uint64_t result = (unsigned __int8 *)(v43 + v19 * v12 + v41);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v46 = v15;
    uint64_t v45 = *v15;
    uint64_t v44 = v46[1];
    if (v44) {
      uint64_t v47 = v44 + v18 * v12 + v41;
    }
    else {
      uint64_t v47 = 0;
    }
    unsigned int v48 = (unsigned char *)(v45 + v17 * v12 + v41);
    do
    {
      if (v11)
      {
        unint64_t v49 = 0;
        uint64_t v50 = v48;
        float v51 = (_WORD *)v42;
        uint64_t v52 = result;
        do
        {
          LOBYTE(_S26) = *(unsigned char *)(v47 + v49 + 1);
          *(float *)&unsigned int v53 = (float)LODWORD(_S26);
          float v54 = *(float *)&v53 - v24;
          float v55 = v26 * (float)(*(float *)&v53 - v24);
          LOBYTE(v53) = *v50;
          float v56 = v25 * (float)((float)v53 - v23);
          float v57 = v55 + v56;
          float v58 = 8191.0;
          if ((float)(v55 + v56) <= 8191.0)
          {
            float v58 = v55 + v56;
            if (v57 < 0.0) {
              float v58 = 0.0;
            }
          }
          LOBYTE(v57) = *(unsigned char *)(v47 + v49);
          float v59 = (float)LODWORD(v57) - v24;
          float v60 = (float)(v28 * v54) + (float)(v59 * v27);
          float v61 = 8191.0;
          if ((float)(v56 + v60) <= 8191.0)
          {
            float v61 = v56 + v60;
            if ((float)(v56 + v60) < 0.0) {
              float v61 = 0.0;
            }
          }
          float v62 = v29 * v59;
          float v63 = v62 + v56;
          BOOL v64 = (float)(v62 + v56) <= 8191.0;
          float v65 = 8191.0;
          if (v64)
          {
            float v65 = v63;
            if (v63 < 0.0) {
              float v65 = 0.0;
            }
          }
          LOBYTE(v63) = v50[1];
          float v66 = v25 * (float)((float)LODWORD(v63) - v23);
          float v67 = v55 + v66;
          BOOL v64 = (float)(v55 + v66) <= 8191.0;
          float v68 = 8191.0;
          if (v64)
          {
            float v68 = v67;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v60 + v66;
          BOOL v64 = (float)(v60 + v66) <= 8191.0;
          float v70 = 8191.0;
          if (v64)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v62 + v66;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
            else {
              float v72 = v71;
            }
          }
          if (v52)
          {
            __int16 v73 = *v52;
            __int16 v74 = v52[1];
            v52 += 2;
          }
          else
          {
            __int16 v73 = 0;
            __int16 v74 = 0;
          }
          _H26 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v58, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm
          {
            FCVT            S29, H29
            FCVT            S30, H30
          }
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _S8 = (float)((float)(v31 * _S27) + (float)(_S26 * v30)) + (float)(_S28 * v32);
          float v92 = (float)((float)(v34 * _S27) + (float)(_S26 * v33)) + (float)(_S28 * v35);
          float v93 = (float)((float)(v37 * _S27) + (float)(_S26 * v36)) + (float)(_S28 * v38);
          float v94 = (float)((float)(v31 * _S30) + (float)(_S29 * v30)) + (float)(_S31 * v32);
          float v95 = (float)((float)(v34 * _S30) + (float)(_S29 * v33)) + (float)(_S31 * v35);
          float v96 = (float)((float)(v37 * _S30) + (float)(_S29 * v36)) + (float)(_S31 * v38);
          LOWORD(_S8) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          __asm { FCVT            S9, H8 }
          _H31 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _S26 = fminf(fmaxf(v96, 0.0), 8191.0);
          LOWORD(_S26) = *(_WORD *)(v40 + 2 * llroundf(_S26));
          __int16 v102 = v73 | (v73 << 8);
          if (v52) {
            __int16 v103 = v102;
          }
          else {
            __int16 v103 = -1;
          }
          __int16 v104 = v74 | (v74 << 8);
          if (!v52) {
            __int16 v104 = -1;
          }
          float v105 = 65535.0;
          float v106 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v106 = _S9;
            if (_NF) {
              float v106 = 0.0;
            }
          }
          __asm { FCVT            S9, H31 }
          *float v51 = llroundf(v106);
          float v109 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v109 = _S9;
            if (_NF) {
              float v109 = 0.0;
            }
          }
          __asm { FCVT            S9, H30 }
          v51[1] = llroundf(v109);
          float v112 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCMP            H30, #0 }
            float v112 = _S9;
            if (_NF) {
              float v112 = 0.0;
            }
          }
          __asm { FCVT            S8, H29 }
          v51[2] = llroundf(v112);
          v51[3] = v103;
          float v115 = 65535.0;
          if (_S8 <= 65535.0)
          {
            __asm { FCMP            H29, #0 }
            float v115 = _S8;
            if (_NF) {
              float v115 = 0.0;
            }
          }
          __asm { FCVT            S31, H28 }
          v51[4] = llroundf(v115);
          float v118 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H28, #0 }
            float v118 = _S31;
            if (_NF) {
              float v118 = 0.0;
            }
          }
          __asm { FCVT            S28, H26 }
          v51[5] = llroundf(v118);
          if (_S28 <= 65535.0)
          {
            __asm { FCMP            H26, #0 }
            float v105 = _S28;
            if (_NF) {
              float v105 = 0.0;
            }
          }
          v51[6] = llroundf(v105);
          v51[7] = v104;
          v49 += 2;
          v50 += 2;
          v51 += 8;
        }
        while (v11 > v49);
      }
      v48 += v17;
      v47 += v18;
      result += v19;
      v42 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v14;
    uint64_t v17 = v14[1];
    uint64_t v18 = v14[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v13 + 136);
    float v22 = *(float *)&v21 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v23 = (float)v20;
    LOWORD(v21) = *(_WORD *)(v13 + 142);
    float v24 = (float)v21;
    float v25 = v22 * *(float *)v13;
    float v26 = v22 * *(float *)(v13 + 8);
    float v27 = v22 * *(float *)(v13 + 16);
    float v28 = v22 * *(float *)(v13 + 20);
    float v29 = v22 * *(float *)(v13 + 28);
    uint64_t v30 = *((void *)result + 14);
    uint64_t v31 = (void *)*((void *)result + 16);
    unint64_t v32 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v33 = *(void *)(result + 36);
    uint64_t v34 = *v31 + v32 * v19 + 8 * v30;
    uint64_t v35 = v15[2];
    if (v35) {
      uint64_t v36 = (unsigned __int8 *)(v35 + v18 * v11 + v33);
    }
    else {
      uint64_t v36 = 0;
    }
    uint64_t v38 = *v15;
    uint64_t v37 = v15[1];
    uint64_t v39 = v37 + v17 * v11 + v33;
    if (!v37) {
      uint64_t v39 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v38 + v16 * v11 + v33);
    do
    {
      if (v10)
      {
        unint64_t v40 = 0;
        uint64_t v41 = result;
        uint64_t v42 = (_WORD *)v34;
        uint64_t v43 = v36;
        do
        {
          if (v43)
          {
            __int16 v44 = *v43;
            __int16 v45 = v43[1];
            v43 += 2;
          }
          else
          {
            __int16 v44 = 0;
            __int16 v45 = 0;
          }
          LOBYTE(v2) = *(unsigned char *)(v39 + v40);
          *(float *)&unsigned int v46 = (float)LODWORD(v2);
          float v47 = *(float *)&v46 - v24;
          LOBYTE(v46) = *(unsigned char *)(v39 + v40 + 1);
          float v48 = (float)v46 - v24;
          float v49 = v26 * v48;
          float v50 = (float)(v28 * v48) + (float)(v47 * v27);
          LOBYTE(v3) = *v41;
          float v51 = v25 * (float)((float)LODWORD(v3) - v23);
          LOBYTE(v4) = v41[1];
          float v52 = v49 + v51;
          float v53 = v51 + v50;
          __int16 v54 = v44 | (v44 << 8);
          if (v43) {
            __int16 v55 = v54;
          }
          else {
            __int16 v55 = -1;
          }
          __int16 v56 = v45 | (v45 << 8);
          if (!v43) {
            __int16 v56 = -1;
          }
          if (v52 < 0.0) {
            float v57 = 0.0;
          }
          else {
            float v57 = v49 + v51;
          }
          if (v52 <= 65535.0) {
            float v58 = v57;
          }
          else {
            float v58 = 65535.0;
          }
          *uint64_t v42 = llroundf(v58);
          float v59 = 65535.0;
          if (v53 <= 65535.0)
          {
            float v59 = v51 + v50;
            if (v53 < 0.0) {
              float v59 = 0.0;
            }
          }
          float v60 = v29 * v47;
          float v4 = v25 * (float)((float)LODWORD(v4) - v23);
          float v61 = v60 + v51;
          float v62 = v49 + v4;
          v42[1] = llroundf(v59);
          if (v61 < 0.0) {
            float v63 = 0.0;
          }
          else {
            float v63 = v61;
          }
          if (v61 <= 65535.0) {
            float v64 = v63;
          }
          else {
            float v64 = 65535.0;
          }
          float v65 = v50 + v4;
          v42[2] = llroundf(v64);
          v42[3] = v55;
          if (v62 < 0.0) {
            float v3 = 0.0;
          }
          else {
            float v3 = v62;
          }
          if (v62 <= 65535.0) {
            float v66 = v3;
          }
          else {
            float v66 = 65535.0;
          }
          v42[4] = llroundf(v66);
          float v67 = 65535.0;
          if (v65 <= 65535.0)
          {
            float v67 = v65;
            if (v65 < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = v60 + v4;
          v42[5] = llroundf(v67);
          float v2 = 65535.0;
          if (v68 <= 65535.0)
          {
            float v2 = v68;
            if (v68 < 0.0) {
              float v2 = 0.0;
            }
          }
          v42[6] = llroundf(v2);
          v42[7] = v56;
          v40 += 2;
          v41 += 2;
          v42 += 8;
        }
        while (v10 > v40);
      }
      result += v16;
      v39 += v17;
      v36 += v18;
      v34 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v142 = v22 * *(float *)(v14 + 8);
    float v26 = v22 * *(float *)(v14 + 16);
    float v27 = v22 * *(float *)(v14 + 20);
    float v28 = v22 * *(float *)(v14 + 28);
    float v29 = *(float *)(v14 + 72);
    float v30 = *(float *)(v14 + 76);
    float v31 = *(float *)(v14 + 80);
    float v32 = *(float *)(v14 + 84);
    float v33 = *(float *)(v14 + 88);
    float v34 = *(float *)(v14 + 92);
    float v35 = *(float *)(v14 + 96);
    float v36 = *(float *)(v14 + 100);
    uint64_t v37 = v14 + 164;
    uint64_t v38 = v14 + 16548;
    uint64_t v39 = v14 + 32932;
    float v40 = *(float *)(v14 + 104);
    float v41 = *(float *)(v14 + 108);
    float v42 = *(float *)(v14 + 112);
    float v43 = *(float *)(v14 + 116);
    float v44 = *(float *)(v14 + 120);
    uint64_t v45 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16)
                               + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
                               + 8 * *((void *)result + 14));
    uint64_t v46 = v15[2];
    if (v46) {
      float v47 = (unsigned __int8 *)(v46 + v19 * v12 + v45);
    }
    else {
      float v47 = 0;
    }
    float v50 = v15;
    uint64_t v49 = *v15;
    uint64_t v48 = v50[1];
    if (v48) {
      uint64_t v51 = v48 + v18 * v12 + v45;
    }
    else {
      uint64_t v51 = 0;
    }
    float v52 = (unsigned char *)(v49 + v17 * v12 + v45);
    do
    {
      if (v11)
      {
        unint64_t v53 = 0;
        __int16 v54 = v52;
        __int16 v55 = result;
        __int16 v56 = v47;
        do
        {
          LOBYTE(v5) = *(unsigned char *)(v51 + v53 + 1);
          *(float *)&unsigned int v57 = (float)LODWORD(v5);
          float v58 = *(float *)&v57 - v24;
          float v59 = v142 * (float)(*(float *)&v57 - v24);
          LOBYTE(v57) = *v54;
          float v60 = v25 * (float)((float)v57 - v23);
          float v61 = v59 + v60;
          float v62 = 8191.0;
          if ((float)(v59 + v60) <= 8191.0)
          {
            float v62 = v59 + v60;
            if (v61 < 0.0) {
              float v62 = 0.0;
            }
          }
          LOBYTE(v61) = *(unsigned char *)(v51 + v53);
          float v63 = (float)LODWORD(v61) - v24;
          float v64 = (float)(v27 * v58) + (float)(v63 * v26);
          float v65 = 8191.0;
          if ((float)(v60 + v64) <= 8191.0)
          {
            float v65 = v60 + v64;
            if ((float)(v60 + v64) < 0.0) {
              float v65 = 0.0;
            }
          }
          float v66 = v28 * v63;
          float v67 = (float)(v28 * v63) + v60;
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = v67;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          LOBYTE(v67) = v54[1];
          float v69 = v25 * (float)((float)LODWORD(v67) - v23);
          float v70 = v59 + v69;
          BOOL v71 = (float)(v59 + v69) <= 8191.0;
          float v72 = 8191.0;
          if (v71)
          {
            float v72 = v70;
            if (v70 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v64 + v69;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v66 + v69;
          BOOL v71 = (float)(v66 + v69) <= 8191.0;
          float v76 = 8191.0;
          if (v71)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          if (v56)
          {
            int v77 = *v56;
            int v78 = v56[1];
            v56 += 2;
          }
          else
          {
            int v77 = 0;
            int v78 = 0;
          }
          _S10 = fmaxf(v62, 0.0);
          float v80 = 8191.0;
          LOWORD(_S10) = *(_WORD *)(v37 + 2 * llroundf(fminf(_S10, 8191.0)));
          __asm { FCVT            S10, H10 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          float v93 = (float)((float)((float)(v42 * _S31) + (float)(v41 * _S10)) + (float)(v43 * _S8))
              + (float)(v44 * fmaxf(_S10, fmaxf(_S31, _S8)));
          float v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H9
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v38 + 2 * llroundf(v94));
          float v99 = fmaxf(_S9, fmaxf(_S11, _S12));
          float v100 = (float)((float)((float)(v42 * _S11) + (float)(v41 * _S9)) + (float)(v43 * _S12)) + (float)(v44 * v99);
          if (v100 <= 8191.0)
          {
            float v80 = (float)((float)((float)(v42 * _S11) + (float)(v41 * _S9)) + (float)(v43 * _S12)) + (float)(v44 * v99);
            if (v100 < 0.0) {
              float v80 = 0.0;
            }
          }
          __asm { FCVT            S13, H13 }
          float v102 = _S10 * _S13;
          float v103 = _S31 * _S13;
          float v104 = _S8 * _S13;
          _H30 = *(_WORD *)(v38 + 2 * llroundf(v80));
          __asm { FCVT            S30, H30 }
          float v107 = _S9 * _S30;
          float v108 = _S11 * _S30;
          float v109 = _S12 * _S30;
          float v110 = (float)((float)(v30 * v103) + (float)(v102 * v29)) + (float)(v104 * v31);
          float v111 = (float)((float)(v33 * v103) + (float)(v102 * v32)) + (float)(v104 * v34);
          float v112 = (float)((float)(v36 * v103) + (float)(v102 * v35)) + (float)(v104 * v40);
          float v113 = (float)((float)(v30 * v108) + (float)(v107 * v29)) + (float)(v109 * v31);
          float v114 = (float)((float)(v33 * v108) + (float)(v107 * v32)) + (float)(v109 * v34);
          float v115 = (float)((float)(v36 * v108) + (float)(v107 * v35)) + (float)(v109 * v40);
          LOWORD(_S13) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S14, H13 }
          _H11 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          int v122 = v77 | (v77 << 8);
          if (v56) {
            unsigned int v123 = v122;
          }
          else {
            unsigned int v123 = -1;
          }
          unsigned int v124 = v78 | (v78 << 8);
          if (!v56) {
            unsigned int v124 = -1;
          }
          float v5 = 65535.0;
          float v125 = 65535.0;
          if (_S14 <= 65535.0)
          {
            __asm { FCMP            H13, #0 }
            float v125 = _S14;
            if (_NF) {
              float v125 = 0.0;
            }
          }
          __asm { FCVT            S14, H11 }
          float v128 = 65535.0;
          if (_S14 <= 65535.0)
          {
            __asm { FCMP            H11, #0 }
            float v128 = _S14;
            if (_NF) {
              float v128 = 0.0;
            }
          }
          __asm { FCVT            S14, H10 }
          float v131 = 65535.0;
          if (_S14 <= 65535.0)
          {
            __asm { FCMP            H10, #0 }
            float v131 = _S14;
            if (_NF) {
              float v131 = 0.0;
            }
          }
          unsigned int v133 = llroundf(v131);
          __asm { FCVT            S11, H9 }
          *__int16 v55 = bswap32(v123) >> 16;
          v55[1] = __rev16(llroundf(v125));
          v55[2] = __rev16(llroundf(v128));
          v55[3] = __rev16(v133);
          float v135 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCMP            H9, #0 }
            float v135 = _S11;
            if (_NF) {
              float v135 = 0.0;
            }
          }
          __asm { FCVT            S11, H8 }
          float v138 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v138 = _S11;
            if (_NF) {
              float v138 = 0.0;
            }
          }
          __asm { FCVT            S8, H31 }
          if (_S8 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v5 = _S8;
            if (_NF) {
              float v5 = 0.0;
            }
          }
          v55[4] = bswap32(v124) >> 16;
          v55[5] = __rev16(llroundf(v135));
          v55[6] = __rev16(llroundf(v138));
          v55[7] = __rev16(llroundf(v5));
          v53 += 2;
          v54 += 2;
          v55 += 8;
        }
        while (v11 > v53);
      }
      v52 += v17;
      v51 += v18;
      v47 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    float v38 = *(float *)(v14 + 104);
    uint64_t v39 = v14 + 164;
    uint64_t v40 = v14 + 16548;
    uint64_t v41 = *(void *)(result + 36);
    uint64_t v42 = **((void **)result + 16)
        + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
        + 8 * *((void *)result + 14);
    uint64_t v43 = v15[2];
    if (v43) {
      uint64_t result = (unsigned __int8 *)(v43 + v19 * v12 + v41);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v46 = v15;
    uint64_t v45 = *v15;
    uint64_t v44 = v46[1];
    if (v44) {
      uint64_t v47 = v44 + v18 * v12 + v41;
    }
    else {
      uint64_t v47 = 0;
    }
    uint64_t v48 = (unsigned char *)(v45 + v17 * v12 + v41);
    do
    {
      if (v11)
      {
        unint64_t v49 = 0;
        float v50 = v48;
        uint64_t v51 = (_WORD *)v42;
        float v52 = result;
        do
        {
          LOBYTE(v5) = *(unsigned char *)(v47 + v49 + 1);
          *(float *)&unsigned int v53 = (float)LODWORD(v5);
          float v54 = *(float *)&v53 - v24;
          float v55 = v26 * (float)(*(float *)&v53 - v24);
          LOBYTE(v53) = *v50;
          float v56 = v25 * (float)((float)v53 - v23);
          float v57 = v55 + v56;
          float v58 = 8191.0;
          if ((float)(v55 + v56) <= 8191.0)
          {
            float v58 = v55 + v56;
            if (v57 < 0.0) {
              float v58 = 0.0;
            }
          }
          LOBYTE(v57) = *(unsigned char *)(v47 + v49);
          float v59 = (float)LODWORD(v57) - v24;
          float v60 = (float)(v28 * v54) + (float)(v59 * v27);
          float v61 = 8191.0;
          if ((float)(v56 + v60) <= 8191.0)
          {
            float v61 = v56 + v60;
            if ((float)(v56 + v60) < 0.0) {
              float v61 = 0.0;
            }
          }
          float v62 = v29 * v59;
          float v63 = v62 + v56;
          BOOL v64 = (float)(v62 + v56) <= 8191.0;
          float v65 = 8191.0;
          if (v64)
          {
            float v65 = v63;
            if (v63 < 0.0) {
              float v65 = 0.0;
            }
          }
          LOBYTE(v63) = v50[1];
          float v66 = v25 * (float)((float)LODWORD(v63) - v23);
          float v67 = v55 + v66;
          BOOL v64 = (float)(v55 + v66) <= 8191.0;
          float v68 = 8191.0;
          if (v64)
          {
            float v68 = v67;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v60 + v66;
          BOOL v64 = (float)(v60 + v66) <= 8191.0;
          float v70 = 8191.0;
          if (v64)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v62 + v66;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
            else {
              float v72 = v71;
            }
          }
          if (v52)
          {
            int v73 = *v52;
            int v74 = v52[1];
            v52 += 2;
          }
          else
          {
            int v73 = 0;
            int v74 = 0;
          }
          _H26 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v58, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm
          {
            FCVT            S29, H29
            FCVT            S30, H30
          }
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          float v91 = (float)((float)(v31 * _S27) + (float)(_S26 * v30)) + (float)(_S28 * v32);
          float v92 = (float)((float)(v34 * _S27) + (float)(_S26 * v33)) + (float)(_S28 * v35);
          float v93 = (float)((float)(v37 * _S27) + (float)(_S26 * v36)) + (float)(_S28 * v38);
          float v94 = (float)((float)(v31 * _S30) + (float)(_S29 * v30)) + (float)(_S31 * v32);
          float v95 = (float)((float)(v34 * _S30) + (float)(_S29 * v33)) + (float)(_S31 * v35);
          unsigned int v96 = llroundf(fminf(fmaxf(v91, 0.0), 8191.0));
          float v97 = (float)((float)(v37 * _S30) + (float)(_S29 * v36)) + (float)(_S31 * v38);
          _H9 = *(_WORD *)(v40 + 2 * v96);
          __asm { FCVT            S10, H9 }
          _H31 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          int v105 = v73 | (v73 << 8);
          if (v52) {
            unsigned int v106 = v105;
          }
          else {
            unsigned int v106 = -1;
          }
          unsigned int v107 = v74 | (v74 << 8);
          if (!v52) {
            unsigned int v107 = -1;
          }
          float v5 = 65535.0;
          float v108 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCMP            H9, #0 }
            float v108 = _S10;
            if (_NF) {
              float v108 = 0.0;
            }
          }
          __asm { FCVT            S10, H31 }
          float v111 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v111 = _S10;
            if (_NF) {
              float v111 = 0.0;
            }
          }
          __asm { FCVT            S10, H30 }
          float v114 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCMP            H30, #0 }
            float v114 = _S10;
            if (_NF) {
              float v114 = 0.0;
            }
          }
          unsigned int v116 = llroundf(v114);
          __asm { FCVT            S31, H29 }
          *uint64_t v51 = bswap32(v106) >> 16;
          v51[1] = __rev16(llroundf(v108));
          v51[2] = __rev16(llroundf(v111));
          v51[3] = __rev16(v116);
          float v118 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H29, #0 }
            float v118 = _S31;
            if (_NF) {
              float v118 = 0.0;
            }
          }
          __asm { FCVT            S31, H28 }
          float v121 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H28, #0 }
            float v121 = _S31;
            if (_NF) {
              float v121 = 0.0;
            }
          }
          __asm { FCVT            S28, H27 }
          if (_S28 <= 65535.0)
          {
            __asm { FCMP            H27, #0 }
            float v5 = _S28;
            if (_NF) {
              float v5 = 0.0;
            }
          }
          v51[4] = bswap32(v107) >> 16;
          v51[5] = __rev16(llroundf(v118));
          v51[6] = __rev16(llroundf(v121));
          v51[7] = __rev16(llroundf(v5));
          v49 += 2;
          v50 += 2;
          v51 += 8;
        }
        while (v11 > v49);
      }
      v48 += v17;
      v47 += v18;
      result += v19;
      v42 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v14;
    uint64_t v17 = v14[1];
    uint64_t v18 = v14[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v13 + 136);
    float v22 = *(float *)&v21 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v23 = (float)v20;
    LOWORD(v21) = *(_WORD *)(v13 + 142);
    float v24 = (float)v21;
    float v25 = v22 * *(float *)v13;
    float v26 = v22 * *(float *)(v13 + 8);
    float v27 = v22 * *(float *)(v13 + 16);
    float v28 = v22 * *(float *)(v13 + 20);
    float v29 = v22 * *(float *)(v13 + 28);
    uint64_t v30 = *((void *)result + 14);
    uint64_t v31 = (void *)*((void *)result + 16);
    unint64_t v32 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v33 = *(void *)(result + 36);
    uint64_t v34 = *v31 + v32 * v19 + 8 * v30;
    uint64_t v35 = v15[2];
    if (v35) {
      uint64_t v36 = (unsigned __int8 *)(v35 + v18 * v11 + v33);
    }
    else {
      uint64_t v36 = 0;
    }
    uint64_t v38 = *v15;
    uint64_t v37 = v15[1];
    uint64_t v39 = v37 + v17 * v11 + v33;
    if (!v37) {
      uint64_t v39 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v38 + v16 * v11 + v33);
    do
    {
      if (v10)
      {
        unint64_t v40 = 0;
        uint64_t v41 = result;
        uint64_t v42 = (_WORD *)v34;
        uint64_t v43 = v36;
        do
        {
          if (v43)
          {
            int v44 = *v43;
            int v45 = v43[1];
            v43 += 2;
          }
          else
          {
            int v44 = 0;
            int v45 = 0;
          }
          LOBYTE(v2) = *(unsigned char *)(v39 + v40);
          float v46 = (float)LODWORD(v2) - v24;
          LOBYTE(v3) = *(unsigned char *)(v39 + v40 + 1);
          float v47 = (float)LODWORD(v3) - v24;
          float v48 = v26 * v47;
          float v49 = (float)(v28 * v47) + (float)(v46 * v27);
          LOBYTE(v4) = *v41;
          float v50 = v25 * (float)((float)LODWORD(v4) - v23);
          float v51 = v48 + v50;
          float v52 = v50 + v49;
          int v53 = v44 | (v44 << 8);
          if (v43) {
            unsigned int v54 = v53;
          }
          else {
            unsigned int v54 = -1;
          }
          unsigned int v55 = v45 | (v45 << 8);
          if (!v43) {
            unsigned int v55 = -1;
          }
          if (v51 < 0.0) {
            float v56 = 0.0;
          }
          else {
            float v56 = v48 + v50;
          }
          if (v51 <= 65535.0) {
            float v57 = v56;
          }
          else {
            float v57 = 65535.0;
          }
          float v58 = 65535.0;
          if (v52 <= 65535.0)
          {
            float v58 = v50 + v49;
            if (v52 < 0.0) {
              float v58 = 0.0;
            }
          }
          float v59 = v29 * v46;
          LOBYTE(v52) = v41[1];
          float v60 = v25 * (float)((float)LODWORD(v52) - v23);
          float v61 = v59 + v50;
          float v62 = v48 + v60;
          unsigned int v63 = llroundf(v57);
          float v64 = v49 + v60;
          unsigned int v65 = llroundf(v58);
          if (v61 < 0.0) {
            float v66 = 0.0;
          }
          else {
            float v66 = v61;
          }
          if (v61 > 65535.0) {
            float v66 = 65535.0;
          }
          *uint64_t v42 = bswap32(v54) >> 16;
          v42[1] = __rev16(v63);
          v42[2] = __rev16(v65);
          v42[3] = __rev16(llroundf(v66));
          if (v62 < 0.0) {
            float v3 = 0.0;
          }
          else {
            float v3 = v62;
          }
          if (v62 > 65535.0) {
            float v3 = 65535.0;
          }
          float v67 = 65535.0;
          if (v64 <= 65535.0)
          {
            float v67 = v64;
            if (v64 < 0.0) {
              float v67 = 0.0;
            }
          }
          float v4 = v59 + v60;
          float v2 = 65535.0;
          if (v4 <= 65535.0)
          {
            float v2 = v4;
            if (v4 < 0.0) {
              float v2 = 0.0;
            }
          }
          v42[4] = bswap32(v55) >> 16;
          v42[5] = __rev16(llroundf(v3));
          v42[6] = __rev16(llroundf(v67));
          v42[7] = __rev16(llroundf(v2));
          v40 += 2;
          v41 += 2;
          v42 += 8;
        }
        while (v10 > v40);
      }
      result += v16;
      v39 += v17;
      v36 += v18;
      v34 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_RGhA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD(unint64_t result, uint64_t a2, double _D0)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44);
    uint64_t v12 = v7 + v11;
    uint64_t v13 = v8 + v11;
    uint64_t v14 = *(float32x2_t **)(result + 152);
    uint64_t v15 = *(uint64_t **)(result + 56);
    uint64_t v16 = *(uint64_t **)(result + 64);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = v16[2];
    unsigned int v20 = v14[17].u16[2];
    LODWORD(v16) = v14[17].u16[3];
    v21.i32[0] = v14[3].i32[1];
    LODWORD(_D0) = v14[9].i32[0];
    _S1 = v14[9].f32[1];
    _S2 = v14[10].f32[0];
    _S3 = v14[10].f32[1];
    _S4 = v14[11].f32[0];
    _S5 = v14[11].f32[1];
    _S6 = v14[12].f32[0];
    _S7 = v14[12].f32[1];
    _S16 = v14[13].f32[0];
    _S17 = v14[13].f32[1];
    _S18 = v14[14].f32[0];
    _S19 = v14[14].f32[1];
    _S20 = v14[15].f32[0];
    uint64_t v222 = v13 - v12;
    uint64_t v34 = (char *)&v14[2068] + 4;
    v3.f32[0] = 8191.0 / (float)v14[16].u32[0];
    float v35 = (float)v20;
    float v36 = (float)v16;
    _S24 = v3.f32[0] * v14->f32[0];
    uint64_t v38 = (char *)&v14[20] + 4;
    uint64_t v39 = (char *)&v14[4116] + 4;
    __asm { FCVT            H8, S24 }
    *(short float *)v4.i16 = (short float)v20;
    float32x4_t v46 = (float32x4_t)vdupq_lane_s16(v4, 0);
    float16x8_t v249 = (float16x8_t)v46;
    short float v45 = -(short float)v16;
    v21.i32[1] = v14[1].i32[0];
    *(float32x2_t *)v46.f32 = vmul_n_f32(v21, v3.f32[0]);
    *(float32x2_t *)v3.f32 = vmul_n_f32(v14[2], v3.f32[0]);
    float16x8_t v247 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v46), 0);
    float16x8_t v245 = vmulq_n_f16(v247, v45);
    float16x8_t v246 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    float16x8_t v47 = vmulq_n_f16(v246, v45);
    __asm { FCVT            H9, S17 }
    short float v243 = _H9;
    float16x8_t v244 = v47;
    __asm { FCVT            H9, S18 }
    short float v242 = _H9;
    __asm { FCVT            H9, S19 }
    short float v241 = _H9;
    __asm { FCVT            H9, S20 }
    short float v240 = _H9;
    __asm { FCVT            H9, S0 }
    short float v239 = _H9;
    __asm { FCVT            H9, S1 }
    short float v238 = _H9;
    __asm { FCVT            H9, S2 }
    short float v237 = _H9;
    uint64_t v55 = v15[2];
    uint64_t v224 = v19;
    uint64_t v225 = v17;
    uint64_t v56 = *(void *)(result + 36);
    uint64_t v57 = *(void *)(result + 112);
    uint64_t v59 = *v15;
    uint64_t v58 = *(void *)(*(void *)(result + 56) + 8);
    float v60 = (unsigned char *)(v58 + v17 * v12 + v56);
    uint64_t v223 = **(void **)(result + 136);
    uint64_t result = **(void **)(result + 128) + v223 * (*(void *)(result + 104) * a2 / v6 + *(void *)(result + 120));
    float v61 = (unsigned __int8 *)(result + 8 * v57);
    if (v55) {
      float v62 = (int8x8_t *)(v55 + v19 * v12 + v56);
    }
    else {
      float v62 = 0;
    }
    if (v58) {
      unsigned int v63 = v60;
    }
    else {
      unsigned int v63 = 0;
    }
    int16x8x2_t v250 = v63;
    float v64 = (int8x8_t *)(v59 + v18 * v12 + v56);
    __asm { FCVT            H9, S3 }
    short float v236 = _H9;
    __asm { FCVT            H9, S4 }
    short float v235 = _H9;
    __asm { FCVT            H9, S5 }
    short float v234 = _H9;
    __asm { FCVT            H9, S6 }
    short float v233 = _H9;
    __asm { FCVT            H9, S7 }
    short float v232 = _H9;
    __asm { FCVT            H9, S16 }
    short float v231 = _H9;
    float v248 = v46.f32[0];
    float v71 = v3.f32[1];
    float v230 = v46.f32[1];
    v72.i64[0] = 0x9000900090009000;
    v72.i64[1] = 0x9000900090009000;
    do
    {
      short float v228 = v61;
      uint64_t v229 = v9;
      short float v226 = v64;
      short float v227 = v62;
      if ((int)v10 < 8)
      {
        unint64_t v159 = 0;
        BOOL v158 = v250;
      }
      else
      {
        uint64_t v73 = 0;
        do
        {
          if (v62 && (int8x8_t v74 = *v62, ++v62, v75 = v74, v62))
          {
            *(int8x8_t *)v76.i8 = vzip1_s8(v75, 0);
            v76.u64[1] = (unint64_t)vzip2_s8(v75, 0);
            float16x8_t v77 = vmulq_f16(vcvtq_f16_u16(v76), (float16x8_t)vdupq_n_s16(0x1C04u));
          }
          else
          {
            v77.i64[0] = 0x3C003C003C003C00;
            v77.i64[1] = 0x3C003C003C003C00;
          }
          int8x8_t v78 = *(int8x8_t *)&v250[v73];
          *(int8x8_t *)v79.i8 = vzip1_s8(v78, 0);
          v79.u64[1] = (unint64_t)vzip2_s8(v78, 0);
          float16x8_t v80 = vcvtq_f16_u16(v79);
          int16x8_t v81 = (int16x8_t)vmlaq_f16(v245, v247, v80);
          int8x16_t v82 = (int8x16_t)vmlaq_f16(v244, v246, v80);
          v80.i64[0] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u64[0];
          *(int16x4_t *)v83.i8 = vuzp1_s16(*(int16x4_t *)v81.i8, *(int16x4_t *)v80.i8);
          *(int16x4_t *)v80.i8 = vuzp2_s16(*(int16x4_t *)v81.i8, *(int16x4_t *)v80.i8);
          *(double *)&v80.i64[1] = _D0;
          *(double *)&v83.i64[1] = _D0;
          v81.i64[0] = vextq_s8(v82, v82, 8uLL).u64[0];
          *(float16x4_t *)v81.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v81.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v81.i8));
          *(double *)&v81.i64[1] = _D0;
          int8x8_t v84 = *v64++;
          *(int8x8_t *)v85.i8 = vzip1_s8(v84, 0);
          v85.u64[1] = (unint64_t)vzip2_s8(v84, 0);
          float16x8_t v86 = vsubq_f16(vcvtq_f16_u16(v85), v249);
          uint16x8_t v87 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v80, (int16x8_t)v80), v86, _H8), (float16x8_t)0), v72));
          float16x8_t v88 = (float16x8_t)vmovl_high_u16(v87);
          uint32x4_t v89 = vmovl_u16(*(uint16x4_t *)v87.i8);
          v90.i16[0] = *(_WORD *)&v38[2 * v89.u32[0]];
          v90.i16[1] = *(_WORD *)&v38[2 * v89.u32[1]];
          v90.i16[2] = *(_WORD *)&v38[2 * v89.u32[2]];
          v90.i16[3] = *(_WORD *)&v38[2 * v89.u32[3]];
          v90.i16[4] = *(_WORD *)&v38[2 * v88.u32[0]];
          v90.i16[5] = *(_WORD *)&v38[2 * v88.u32[1]];
          v90.i16[6] = *(_WORD *)&v38[2 * v88.u32[2]];
          v90.i16[7] = *(_WORD *)&v38[2 * v88.u32[3]];
          uint16x8_t v91 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16(v81, v81), v86, _H8), (float16x8_t)0), v72));
          uint32x4_t v92 = vmovl_high_u16(v91);
          uint32x4_t v93 = vmovl_u16(*(uint16x4_t *)v91.i8);
          v88.i16[0] = *(_WORD *)&v38[2 * v93.u32[0]];
          v88.i16[1] = *(_WORD *)&v38[2 * v93.u32[1]];
          v88.i16[2] = *(_WORD *)&v38[2 * v93.u32[2]];
          v88.i16[3] = *(_WORD *)&v38[2 * v93.u32[3]];
          v88.i16[4] = *(_WORD *)&v38[2 * v92.u32[0]];
          v88.i16[5] = *(_WORD *)&v38[2 * v92.u32[1]];
          v88.i16[6] = *(_WORD *)&v38[2 * v92.u32[2]];
          v88.i16[7] = *(_WORD *)&v38[2 * v92.u32[3]];
          uint16x8_t v94 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16(v83, v83), v86, _H8), (float16x8_t)0), v72));
          uint32x4_t v95 = vmovl_high_u16(v94);
          uint32x4_t v96 = vmovl_u16(*(uint16x4_t *)v94.i8);
          v83.i16[0] = *(_WORD *)&v38[2 * v96.u32[0]];
          v83.i16[1] = *(_WORD *)&v38[2 * v96.u32[1]];
          v83.i16[2] = *(_WORD *)&v38[2 * v96.u32[2]];
          v83.i16[3] = *(_WORD *)&v38[2 * v96.u32[3]];
          v83.i16[4] = *(_WORD *)&v38[2 * v95.u32[0]];
          v83.i16[5] = *(_WORD *)&v38[2 * v95.u32[1]];
          v83.i16[6] = *(_WORD *)&v38[2 * v95.u32[2]];
          v83.i16[7] = *(_WORD *)&v38[2 * v95.u32[3]];
          uint16x8_t v97 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v90, v243), v88, v242), (float16x8_t)v83, v241), vmaxq_f16(vmaxq_f16(v90, v88), (float16x8_t)v83), v240), (float16x8_t)0), v72));
          uint32x4_t v98 = vmovl_u16(*(uint16x4_t *)v97.i8);
          float16x8_t v99 = (float16x8_t)vmovl_high_u16(v97);
          uint64_t v100 = v99.u32[0];
          v99.i16[0] = *(_WORD *)&v34[2 * v98.u32[0]];
          float v101 = (__int16 *)&v34[2 * v99.u32[1]];
          float v102 = (__int16 *)&v34[2 * v99.u32[2]];
          v99.i16[1] = *(_WORD *)&v34[2 * v98.u32[1]];
          v99.i16[2] = *(_WORD *)&v34[2 * v98.u32[2]];
          v99.i16[3] = *(_WORD *)&v34[2 * v98.u32[3]];
          v99.i16[4] = *(_WORD *)&v34[2 * v100];
          v99.i16[5] = *v101;
          float v103 = (__int16 *)&v34[2 * v99.u32[3]];
          v99.i16[6] = *v102;
          v99.i16[7] = *v103;
          float16x8_t v104 = vmulq_f16(v90, v99);
          float16x8_t v105 = vmulq_f16(v88, v99);
          float16x8_t v106 = vmulq_f16((float16x8_t)v83, v99);
          float16x8_t v107 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v104, v236), v105, v235), v106, v234);
          float16x8_t v108 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v106, v231), v105, v232), v104, v233);
          uint16x8_t v109 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v104, v239), v105, v238), v106, v237), (float16x8_t)0), v72));
          uint32x4_t v110 = vmovl_u16(*(uint16x4_t *)v109.i8);
          uint64_t v111 = v110.u32[1];
          uint64_t v112 = v110.u32[0];
          uint32x4_t v113 = vmovl_high_u16(v109);
          uint64_t v114 = v110.u32[3];
          uint64_t v115 = v110.u32[2];
          uint64_t v116 = v113.u32[1];
          uint64_t v117 = v113.u32[3];
          uint64_t v118 = v113.u32[0];
          uint64_t v119 = v113.u32[2];
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v107, (float16x8_t)0), v72));
          uint32x4_t v121 = vmovl_u16(*(uint16x4_t *)v120.i8);
          uint64_t v122 = v121.u32[1];
          uint64_t v123 = v121.u32[0];
          uint32x4_t v124 = vmovl_high_u16(v120);
          uint64_t v125 = v121.u32[3];
          uint64_t v126 = v121.u32[2];
          uint64_t v127 = v124.u32[1];
          uint64_t v128 = v124.u32[0];
          uint64_t result = v124.u32[3];
          uint64_t v129 = v124.u32[2];
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v108, (float16x8_t)0), v72));
          uint32x4_t v131 = vmovl_u16(*(uint16x4_t *)v130.i8);
          uint32x4_t v132 = vmovl_high_u16(v130);
          uint64_t v133 = v132.u32[0];
          __int16 v134 = *(_WORD *)&v39[2 * v112];
          __int16 v135 = *(_WORD *)&v39[2 * v111];
          __int16 v136 = *(_WORD *)&v39[2 * v115];
          __int16 v137 = *(_WORD *)&v39[2 * v114];
          __int16 v138 = *(_WORD *)&v39[2 * v118];
          __int16 v139 = *(_WORD *)&v39[2 * v116];
          __int16 v140 = *(_WORD *)&v39[2 * v119];
          __int16 v141 = *(_WORD *)&v39[2 * v117];
          float v71 = *(float *)&v132.i32[2];
          __int16 v142 = *(_WORD *)&v39[2 * v123];
          __int16 v143 = *(_WORD *)&v39[2 * v122];
          __int16 v144 = *(_WORD *)&v39[2 * v126];
          __int16 v145 = *(_WORD *)&v39[2 * v125];
          __int16 v146 = *(_WORD *)&v39[2 * v128];
          __int16 v147 = *(_WORD *)&v39[2 * v127];
          __int16 v148 = *(_WORD *)&v39[2 * v129];
          __int16 v149 = *(_WORD *)&v39[2 * result];
          __int16 v150 = *(_WORD *)&v39[2 * v131.u32[0]];
          __int16 v151 = *(_WORD *)&v39[2 * v131.u32[1]];
          __int16 v152 = *(_WORD *)&v39[2 * v131.u32[2]];
          __int16 v153 = *(_WORD *)&v39[2 * v131.u32[3]];
          __int16 v154 = *(_WORD *)&v39[2 * v133];
          __int16 v155 = *(_WORD *)&v39[2 * v132.u32[1]];
          __int16 v156 = *(_WORD *)&v39[2 * v132.u32[2]];
          __int16 v157 = *(_WORD *)&v39[2 * v132.u32[3]];
          vst4q_s16((__int16 *)v61, *(int16x8x4_t *)(&v77 - 3));
          v61 += 64;
          v73 += 8;
        }
        while ((int)v73 < (int)v10 - 7);
        BOOL v158 = &v250[v73];
        unint64_t v159 = v10 & 0xFFFFFFF8;
      }
      while (v10 > v159)
      {
        LOBYTE(v71) = v158[1];
        float v160 = (float)LODWORD(v71) - v36;
        unsigned int v161 = LODWORD(v230);
        float v162 = v230 * v160;
        LOBYTE(v161) = v64->i8[0];
        float v163 = _S24 * (float)((float)v161 - v35);
        float v164 = (float)(v230 * v160) + v163;
        float v165 = 8191.0;
        if (v164 <= 8191.0)
        {
          float v165 = (float)(v230 * v160) + v163;
          if (v164 < 0.0) {
            float v165 = 0.0;
          }
        }
        LOBYTE(v164) = *v158;
        float v166 = (float)LODWORD(v164) - v36;
        float v167 = (float)(v3.f32[1] * v160) + (float)(v166 * v3.f32[0]);
        float v168 = 8191.0;
        if ((float)(v163 + v167) <= 8191.0)
        {
          float v168 = v163 + v167;
          if ((float)(v163 + v167) < 0.0) {
            float v168 = 0.0;
          }
        }
        float v169 = v248 * v166;
        float v170 = (float)(v248 * v166) + v163;
        float v171 = 8191.0;
        if (v170 <= 8191.0)
        {
          float v171 = v170;
          if (v170 < 0.0) {
            float v171 = 0.0;
          }
        }
        LOBYTE(v170) = v64->i8[1];
        float v172 = _S24 * (float)((float)LODWORD(v170) - v35);
        float v173 = v162 + v172;
        BOOL v174 = (float)(v162 + v172) <= 8191.0;
        float v175 = 8191.0;
        if (v174)
        {
          float v175 = v173;
          if (v173 < 0.0) {
            float v175 = 0.0;
          }
        }
        float v176 = 8191.0;
        if ((float)(v167 + v172) <= 8191.0)
        {
          float v176 = v167 + v172;
          if ((float)(v167 + v172) < 0.0) {
            float v176 = 0.0;
          }
        }
        float v177 = v169 + v172;
        BOOL v174 = (float)(v169 + v172) <= 8191.0;
        float v178 = 8191.0;
        if (v174)
        {
          float v178 = v177;
          if (v177 < 0.0) {
            float v178 = 0.0;
          }
        }
        if (v62)
        {
          unsigned int v179 = v62->u8[0];
          unsigned int v180 = v62->u8[1];
          float v62 = (int8x8_t *)((char *)v62 + 2);
        }
        else
        {
          unsigned int v179 = 0;
          unsigned int v180 = 0;
        }
        _H25 = *(_WORD *)&v38[2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0))];
        __asm { FCVT            S11, H25 }
        _H25 = *(_WORD *)&v38[2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0))];
        __asm { FCVT            S31, H25 }
        _H25 = *(_WORD *)&v38[2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0))];
        __asm { FCVT            S9, H25 }
        _H10 = *(_WORD *)&v38[2 * llroundf(fminf(fmaxf(v175, 0.0), 8191.0))];
        _H12 = *(_WORD *)&v38[2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0))];
        _H13 = *(_WORD *)&v38[2 * llroundf(fminf(fmaxf(v178, 0.0), 8191.0))];
        float v190 = fmaxf(_S11, fmaxf(_S31, _S9));
        float v191 = (float)((float)((float)(_S18 * _S31) + (float)(_S17 * _S11)) + (float)(_S19 * _S9))
             + (float)(_S20 * v190);
        float v192 = 8191.0;
        if (v191 <= 8191.0)
        {
          float v192 = (float)((float)((float)(_S18 * _S31) + (float)(_S17 * _S11)) + (float)(_S19 * _S9))
               + (float)(_S20 * v190);
          if (v191 < 0.0) {
            float v192 = 0.0;
          }
        }
        __asm
        {
          FCVT            S10, H10
          FCVT            S12, H12
          FCVT            S13, H13
        }
        _H14 = *(_WORD *)&v34[2 * llroundf(v192)];
        float v197 = (float)((float)((float)(_S18 * _S12) + (float)(_S17 * _S10)) + (float)(_S19 * _S13))
             + (float)(_S20 * fmaxf(_S10, fmaxf(_S12, _S13)));
        float v198 = 8191.0;
        if (v197 <= 8191.0)
        {
          float v198 = v197;
          if (v197 < 0.0) {
            float v198 = 0.0;
          }
        }
        __asm { FCVT            S25, H14 }
        float v200 = _S11 * _S25;
        float v201 = _S31 * _S25;
        float v202 = _S9 * _S25;
        _H27 = *(_WORD *)&v34[2 * llroundf(v198)];
        __asm { FCVT            S27, H27 }
        float v205 = _S10 * _S27;
        float v206 = _S12 * _S27;
        float v207 = _S13 * _S27;
        float v208 = (float)((float)(_S1 * v201) + (float)(v200 * *(float *)&_D0)) + (float)(v202 * _S2);
        float v209 = (float)((float)(_S4 * v201) + (float)(v200 * _S3)) + (float)(v202 * _S5);
        float v210 = (float)((float)(_S7 * v201) + (float)(v200 * _S6)) + (float)(v202 * _S16);
        float v211 = (float)((float)(_S1 * v206) + (float)(v205 * *(float *)&_D0)) + (float)(v207 * _S2);
        float v212 = (float)((float)(_S4 * v206) + (float)(v205 * _S3)) + (float)(v207 * _S5);
        float v213 = (float)((float)(_S7 * v206) + (float)(v205 * _S6)) + (float)(v207 * _S16);
        LOWORD(v205) = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v208, 0.0), 8191.0))];
        LOWORD(v206) = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v209, 0.0), 8191.0))];
        float v71 = fminf(fmaxf(v210, 0.0), 8191.0);
        LOWORD(v71) = *(_WORD *)&v39[2 * llroundf(v71)];
        __int16 v214 = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v211, 0.0), 8191.0))];
        __int16 v215 = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v212, 0.0), 8191.0))];
        __int16 v216 = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v213, 0.0), 8191.0))];
        _S30 = (float)v179 * 0.0039216;
        __asm { FCVT            H30, S30 }
        _S12 = (float)v180 * 0.0039216;
        __asm { FCVT            H12, S12 }
        *(_WORD *)float v61 = LOWORD(v205);
        *((_WORD *)v61 + 1) = LOWORD(v206);
        *((_WORD *)v61 + 2) = LOWORD(v71);
        if (v62) {
          short float v221 = _H30;
        }
        else {
          LOWORD(v221) = COERCE_UNSIGNED_INT(1.0);
        }
        *((short float *)v61 + 3) = v221;
        *((_WORD *)v61 + 4) = v214;
        *((_WORD *)v61 + 5) = v215;
        *((_WORD *)v61 + 6) = v216;
        v159 += 2;
        if (v62) {
          *(short float *)&float v71 = _H12;
        }
        else {
          LOWORD(v71) = COERCE_UNSIGNED_INT(1.0);
        }
        *((_WORD *)v61 + 7) = LOWORD(v71);
        v158 += 2;
        float v64 = (int8x8_t *)((char *)v64 + 2);
        v61 += 16;
      }
      float v64 = (int8x8_t *)((char *)v226 + v18);
      v250 += v225;
      float v62 = (int8x8_t *)((char *)v227 + v224);
      float v61 = &v228[v223];
      uint64_t v9 = v229 + 1;
    }
    while (v229 + 1 != v222);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v124 = v22 * *(float *)(v14 + 8);
    float v26 = v22 * *(float *)(v14 + 16);
    float v27 = v22 * *(float *)(v14 + 20);
    float v28 = v22 * *(float *)(v14 + 28);
    float v29 = *(float *)(v14 + 72);
    float v30 = *(float *)(v14 + 76);
    float v31 = *(float *)(v14 + 80);
    float v32 = *(float *)(v14 + 84);
    float v33 = *(float *)(v14 + 88);
    float v34 = *(float *)(v14 + 92);
    float v35 = *(float *)(v14 + 96);
    float v36 = *(float *)(v14 + 100);
    uint64_t v37 = v14 + 164;
    uint64_t v38 = v14 + 16548;
    uint64_t v39 = v14 + 32932;
    float v40 = *(float *)(v14 + 104);
    float v41 = *(float *)(v14 + 108);
    float v42 = *(float *)(v14 + 112);
    float v43 = *(float *)(v14 + 116);
    float v44 = *(float *)(v14 + 120);
    uint64_t v45 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16)
                               + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
                               + 8 * *((void *)result + 14));
    uint64_t v46 = v15[2];
    if (v46) {
      float16x8_t v47 = (unsigned __int8 *)(v46 + v19 * v12 + v45);
    }
    else {
      float16x8_t v47 = 0;
    }
    float v50 = v15;
    uint64_t v49 = *v15;
    uint64_t v48 = v50[1];
    if (v48) {
      uint64_t v51 = v48 + v18 * v12 + v45;
    }
    else {
      uint64_t v51 = 0;
    }
    float v52 = (unsigned char *)(v49 + v17 * v12 + v45);
    do
    {
      if (v11)
      {
        unint64_t v53 = 0;
        unsigned int v54 = v52;
        uint64_t v55 = result;
        uint64_t v56 = v47;
        do
        {
          LOBYTE(v5) = *(unsigned char *)(v51 + v53 + 1);
          *(float *)&unsigned int v57 = (float)LODWORD(v5);
          float v58 = *(float *)&v57 - v24;
          float v59 = v124 * (float)(*(float *)&v57 - v24);
          LOBYTE(v57) = *v54;
          float v60 = v25 * (float)((float)v57 - v23);
          float v61 = v59 + v60;
          float v62 = 8191.0;
          if ((float)(v59 + v60) <= 8191.0)
          {
            float v62 = v59 + v60;
            if (v61 < 0.0) {
              float v62 = 0.0;
            }
          }
          LOBYTE(v61) = *(unsigned char *)(v51 + v53);
          float v63 = (float)LODWORD(v61) - v24;
          float v64 = (float)(v27 * v58) + (float)(v63 * v26);
          float v65 = 8191.0;
          if ((float)(v60 + v64) <= 8191.0)
          {
            float v65 = v60 + v64;
            if ((float)(v60 + v64) < 0.0) {
              float v65 = 0.0;
            }
          }
          float v66 = v28 * v63;
          float v67 = (float)(v28 * v63) + v60;
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = v67;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          LOBYTE(v67) = v54[1];
          float v69 = v25 * (float)((float)LODWORD(v67) - v23);
          float v70 = v59 + v69;
          BOOL v71 = (float)(v59 + v69) <= 8191.0;
          float v72 = 8191.0;
          if (v71)
          {
            float v72 = v70;
            if (v70 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v64 + v69;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v66 + v69;
          BOOL v71 = (float)(v66 + v69) <= 8191.0;
          float v76 = 8191.0;
          if (v71)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          if (v56)
          {
            unsigned int v77 = *v56;
            unsigned int v78 = v56[1];
            v56 += 2;
          }
          else
          {
            unsigned int v77 = 0;
            unsigned int v78 = 0;
          }
          _S11 = fmaxf(v62, 0.0);
          float v80 = 8191.0;
          LOWORD(_S11) = *(_WORD *)(v37 + 2 * llroundf(fminf(_S11, 8191.0)));
          __asm { FCVT            S11, H11 }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          float v93 = (float)((float)((float)(v42 * _S8) + (float)(v41 * _S11)) + (float)(v43 * _S9))
              + (float)(v44 * fmaxf(_S11, fmaxf(_S8, _S9)));
          float v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          __asm
          {
            FCVT            S10, H10
            FCVT            S12, H12
            FCVT            S13, H13
          }
          _H14 = *(_WORD *)(v38 + 2 * llroundf(v94));
          float v99 = fmaxf(_S10, fmaxf(_S12, _S13));
          float v100 = (float)((float)((float)(v42 * _S12) + (float)(v41 * _S10)) + (float)(v43 * _S13)) + (float)(v44 * v99);
          if (v100 <= 8191.0)
          {
            float v80 = (float)((float)((float)(v42 * _S12) + (float)(v41 * _S10)) + (float)(v43 * _S13)) + (float)(v44 * v99);
            if (v100 < 0.0) {
              float v80 = 0.0;
            }
          }
          __asm { FCVT            S4, H14 }
          float v102 = _S11 * _S4;
          float v103 = _S8 * _S4;
          float v104 = _S9 * _S4;
          _H31 = *(_WORD *)(v38 + 2 * llroundf(v80));
          __asm { FCVT            S31, H31 }
          float v107 = _S10 * _S31;
          float v108 = _S12 * _S31;
          float v109 = _S13 * _S31;
          float v110 = (float)((float)(v30 * v103) + (float)(v102 * v29)) + (float)(v104 * v31);
          float v111 = (float)((float)(v33 * v103) + (float)(v102 * v32)) + (float)(v104 * v34);
          float v112 = (float)((float)(v36 * v103) + (float)(v102 * v35)) + (float)(v104 * v40);
          float v113 = (float)((float)(v30 * v108) + (float)(v107 * v29)) + (float)(v109 * v31);
          float v114 = (float)((float)(v33 * v108) + (float)(v107 * v32)) + (float)(v109 * v34);
          float v115 = (float)((float)(v36 * v108) + (float)(v107 * v35)) + (float)(v109 * v40);
          LOWORD(v107) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          LOWORD(v108) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          LOWORD(v112) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          __int16 v116 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __int16 v117 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          float v5 = fminf(fmaxf(v115, 0.0), 8191.0);
          LOWORD(v5) = *(_WORD *)(v39 + 2 * llroundf(v5));
          _S12 = (float)v77 * 0.0039216;
          __asm { FCVT            H12, S12 }
          _S13 = (float)v78 * 0.0039216;
          __asm { FCVT            H13, S13 }
          *(_WORD *)uint64_t v55 = LOWORD(v107);
          *((_WORD *)v55 + 1) = LOWORD(v108);
          *((_WORD *)v55 + 2) = LOWORD(v112);
          if (v56) {
            short float v122 = _H12;
          }
          else {
            LOWORD(v122) = COERCE_UNSIGNED_INT(1.0);
          }
          *((short float *)v55 + 3) = v122;
          *((_WORD *)v55 + 4) = v116;
          *((_WORD *)v55 + 5) = v117;
          *((_WORD *)v55 + 6) = LOWORD(v5);
          if (v56) {
            short float v123 = _H13;
          }
          else {
            LOWORD(v123) = COERCE_UNSIGNED_INT(1.0);
          }
          *((short float *)v55 + 7) = v123;
          v53 += 2;
          v54 += 2;
          v55 += 16;
        }
        while (v11 > v53);
      }
      v52 += v17;
      v51 += v18;
      v47 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_RGhA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_RGhA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double _D0)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44);
    uint64_t v13 = v8 + v12;
    uint64_t v14 = v9 + v12;
    uint64_t v15 = (float32x2_t *)*((void *)result + 19);
    uint64_t v16 = (uint64_t *)*((void *)result + 7);
    uint64_t v17 = (uint64_t *)*((void *)result + 8);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = **((void **)result + 17);
    unsigned int v22 = v15[17].u16[2];
    unsigned int v23 = v15[17].u16[3];
    v3.i32[0] = v15->i32[0];
    v24.i32[0] = v15[3].i32[1];
    LODWORD(_D0) = v15[9].i32[0];
    _S1 = v15[9].f32[1];
    _S2 = v15[10].f32[0];
    _S3 = v15[10].f32[1];
    _S4 = v15[11].f32[0];
    _S5 = v15[11].f32[1];
    _S6 = v15[12].f32[0];
    _S7 = v15[12].f32[1];
    _S16 = v15[13].f32[0];
    uint64_t v33 = v14 - v13;
    uint64_t v34 = (char *)&v15[20] + 4;
    float v35 = (float)v22;
    v4.f32[0] = 8191.0 / (float)v15[16].u32[0];
    float v36 = (float)v23;
    _S20 = v4.f32[0] * v15->f32[0];
    uint64_t v38 = (char *)&v15[2068] + 4;
    __asm { FCVT            H8, S20 }
    *(short float *)v3.i16 = (short float)v22;
    v24.i32[1] = v15[1].i32[0];
    *(float32x2_t *)v5.f32 = vmul_n_f32(v24, v4.f32[0]);
    *(float32x2_t *)v4.f32 = vmul_n_f32(v15[2], v4.f32[0]);
    short float v44 = -(short float)v23;
    float16x8_t v195 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    float16x8_t v196 = (float16x8_t)vdupq_lane_s16(v3, 0);
    float16x8_t v193 = vmulq_n_f16(v195, v44);
    float16x8_t v194 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v45 = vmulq_n_f16(v194, v44);
    __asm { FCVT            H9, S0 }
    short float v191 = _H9;
    float16x8_t v192 = v45;
    __asm { FCVT            H9, S1 }
    short float v190 = _H9;
    __asm { FCVT            H9, S2 }
    short float v189 = _H9;
    __asm { FCVT            H9, S3 }
    short float v188 = _H9;
    __asm { FCVT            H9, S4 }
    short float v187 = _H9;
    __asm { FCVT            H9, S5 }
    short float v186 = _H9;
    __asm { FCVT            H9, S6 }
    short float v185 = _H9;
    __asm { FCVT            H9, S7 }
    short float v184 = _H9;
    __asm { FCVT            H9, S16 }
    short float v183 = _H9;
    uint64_t v55 = v16[2];
    uint64_t v56 = *(void *)(result + 36);
    uint64_t v57 = *v16;
    uint64_t v58 = *(void *)(*((void *)result + 7) + 8);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16)
                               + v21 * (*((void *)result + 13) * a2 / v7 + *((void *)result + 15))
                               + 8 * *((void *)result + 14));
    if (v55) {
      float v59 = (int8x8_t *)(v55 + v20 * v13 + v56);
    }
    else {
      float v59 = 0;
    }
    if (v58) {
      float v60 = (unsigned char *)(v58 + v19 * v13 + v56);
    }
    else {
      float v60 = 0;
    }
    float v61 = (int8x8_t *)(v57 + v18 * v13 + v56);
    v62.i32[0] = v5.i32[1];
    float v182 = v5.f32[1];
    float v63 = v5.f32[0];
    v64.i64[0] = 0x9000900090009000;
    v64.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v11 < 8)
      {
        unint64_t v133 = 0;
        uint32x4_t v132 = v60;
        float v68 = v59;
        float v67 = (__int16 *)result;
        float v66 = v61;
      }
      else
      {
        uint64_t v65 = 0;
        float v66 = v61;
        float v67 = (__int16 *)result;
        float v68 = v59;
        do
        {
          if (v68 && (int8x8_t v69 = *v68, ++v68, v70 = v69, v68))
          {
            *(int8x8_t *)v71.i8 = vzip1_s8(v70, 0);
            v71.u64[1] = (unint64_t)vzip2_s8(v70, 0);
            float16x8_t v72 = vmulq_f16(vcvtq_f16_u16(v71), (float16x8_t)vdupq_n_s16(0x1C04u));
          }
          else
          {
            v72.i64[0] = 0x3C003C003C003C00;
            v72.i64[1] = 0x3C003C003C003C00;
          }
          int8x8_t v73 = *(int8x8_t *)&v60[v65];
          *(int8x8_t *)v74.i8 = vzip1_s8(v73, 0);
          v74.u64[1] = (unint64_t)vzip2_s8(v73, 0);
          float16x8_t v75 = vcvtq_f16_u16(v74);
          int8x16_t v76 = (int8x16_t)vmlaq_f16(v193, v195, v75);
          int16x8_t v77 = (int16x8_t)vmlaq_f16(v192, v194, v75);
          v75.i64[0] = vextq_s8(v76, v76, 8uLL).u64[0];
          *(int16x4_t *)v78.i8 = vuzp1_s16(*(int16x4_t *)v76.i8, *(int16x4_t *)v75.i8);
          *(int16x4_t *)v75.i8 = vuzp2_s16(*(int16x4_t *)v76.i8, *(int16x4_t *)v75.i8);
          *(double *)&v75.i64[1] = _D0;
          *(double *)&v78.i64[1] = _D0;
          float16x8_t v79 = (float16x8_t)vzip1q_s16(v78, v78);
          v78.i64[0] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u64[0];
          *(float16x4_t *)v77.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v78.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v78.i8));
          *(double *)&v77.i64[1] = _D0;
          int8x8_t v80 = *v66++;
          *(int8x8_t *)v81.i8 = vzip1_s8(v80, 0);
          v81.u64[1] = (unint64_t)vzip2_s8(v80, 0);
          float16x8_t v82 = vsubq_f16(vcvtq_f16_u16(v81), v196);
          float16x8_t v83 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v77, v77), v82, _H8);
          float16x8_t v84 = vmlaq_n_f16(v79, v82, _H8);
          uint16x8_t v85 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v75, (int16x8_t)v75), v82, _H8), (float16x8_t)0), v64));
          float16x8_t v86 = (float16x8_t)vmovl_high_u16(v85);
          *(void *)&long long v87 = v86.u32[2];
          *((void *)&v87 + 1) = v86.u32[3];
          long long v88 = v87;
          *(void *)&long long v87 = v86.u32[0];
          *((void *)&v87 + 1) = v86.u32[1];
          uint32x4_t v89 = vmovl_u16(*(uint16x4_t *)v85.i8);
          v86.i16[0] = *(_WORD *)&v34[2 * v89.u32[0]];
          v86.i16[1] = *(_WORD *)&v34[2 * v89.u32[1]];
          v86.i16[2] = *(_WORD *)&v34[2 * v89.u32[2]];
          v86.i16[3] = *(_WORD *)&v34[2 * v89.u32[3]];
          v86.i16[4] = *(_WORD *)&v34[2 * v87];
          v86.i16[5] = *(_WORD *)&v34[2 * *((void *)&v87 + 1)];
          v86.i16[6] = *(_WORD *)&v34[2 * v88];
          v86.i16[7] = *(_WORD *)&v34[2 * *((void *)&v88 + 1)];
          uint16x8_t v90 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v83, (float16x8_t)0), v64));
          float16x8_t v91 = (float16x8_t)vmovl_high_u16(v90);
          *(void *)&long long v87 = v91.u32[2];
          *((void *)&v87 + 1) = v91.u32[3];
          long long v92 = v87;
          *(void *)&long long v87 = v91.u32[0];
          *((void *)&v87 + 1) = v91.u32[1];
          uint32x4_t v93 = vmovl_u16(*(uint16x4_t *)v90.i8);
          v91.i16[0] = *(_WORD *)&v34[2 * v93.u32[0]];
          v91.i16[1] = *(_WORD *)&v34[2 * v93.u32[1]];
          v91.i16[2] = *(_WORD *)&v34[2 * v93.u32[2]];
          v91.i16[3] = *(_WORD *)&v34[2 * v93.u32[3]];
          v91.i16[4] = *(_WORD *)&v34[2 * v87];
          v91.i16[5] = *(_WORD *)&v34[2 * *((void *)&v87 + 1)];
          v91.i16[6] = *(_WORD *)&v34[2 * v92];
          v91.i16[7] = *(_WORD *)&v34[2 * *((void *)&v92 + 1)];
          uint16x8_t v94 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v84, (float16x8_t)0), v64));
          uint32x4_t v95 = vmovl_high_u16(v94);
          float16x8_t v96 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v94.i8);
          v96.i16[0] = *(_WORD *)&v34[2 * v96.u32[0]];
          v96.i16[1] = *(_WORD *)&v34[2 * v96.u32[1]];
          v96.i16[2] = *(_WORD *)&v34[2 * v96.u32[2]];
          v96.i16[3] = *(_WORD *)&v34[2 * v96.u32[3]];
          v96.i16[4] = *(_WORD *)&v34[2 * v95.u32[0]];
          v96.i16[5] = *(_WORD *)&v34[2 * v95.u32[1]];
          v96.i16[6] = *(_WORD *)&v34[2 * v95.u32[2]];
          v96.i16[7] = *(_WORD *)&v34[2 * v95.u32[3]];
          float16x8_t v97 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v86, v188), v91, v187), v96, v186);
          float16x8_t v98 = vmlaq_n_f16(vmulq_n_f16(v96, v183), v91, v184);
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v86, v191), v91, v190), v96, v189), (float16x8_t)0), v64));
          uint32x4_t v100 = vmovl_high_u16(v99);
          uint32x4_t v101 = vmovl_u16(*(uint16x4_t *)v99.i8);
          __int16 v102 = *(_WORD *)&v38[2 * v101.u32[0]];
          __int16 v103 = *(_WORD *)&v38[2 * v101.u32[1]];
          __int16 v104 = *(_WORD *)&v38[2 * v101.u32[2]];
          __int16 v105 = *(_WORD *)&v38[2 * v101.u32[3]];
          __int16 v106 = *(_WORD *)&v38[2 * v100.u32[0]];
          __int16 v107 = *(_WORD *)&v38[2 * v100.u32[1]];
          __int16 v108 = *(_WORD *)&v38[2 * v100.u32[2]];
          __int16 v109 = *(_WORD *)&v38[2 * v100.u32[3]];
          float16x8_t v110 = vmlaq_n_f16(v98, v86, v185);
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v97, (float16x8_t)0), v64));
          uint32x4_t v112 = vmovl_high_u16(v111);
          uint32x4_t v113 = vmovl_u16(*(uint16x4_t *)v111.i8);
          __int16 v114 = *(_WORD *)&v38[2 * v113.u32[0]];
          __int16 v115 = *(_WORD *)&v38[2 * v113.u32[1]];
          __int16 v116 = *(_WORD *)&v38[2 * v113.u32[2]];
          __int16 v117 = *(_WORD *)&v38[2 * v113.u32[3]];
          __int16 v118 = *(_WORD *)&v38[2 * v112.u32[0]];
          __int16 v119 = *(_WORD *)&v38[2 * v112.u32[1]];
          __int16 v120 = *(_WORD *)&v38[2 * v112.u32[2]];
          __int16 v121 = *(_WORD *)&v38[2 * v112.u32[3]];
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v110, (float16x8_t)0), v64));
          uint32x4_t v123 = vmovl_high_u16(v122);
          uint32x4_t v62 = vmovl_u16(*(uint16x4_t *)v122.i8);
          __int16 v124 = *(_WORD *)&v38[2 * v62.u32[0]];
          __int16 v125 = *(_WORD *)&v38[2 * v62.u32[1]];
          __int16 v126 = *(_WORD *)&v38[2 * v62.u32[2]];
          __int16 v127 = *(_WORD *)&v38[2 * v62.u32[3]];
          __int16 v128 = *(_WORD *)&v38[2 * v123.u32[0]];
          __int16 v129 = *(_WORD *)&v38[2 * v123.u32[1]];
          __int16 v130 = *(_WORD *)&v38[2 * v123.u32[2]];
          __int16 v131 = *(_WORD *)&v38[2 * v123.u32[3]];
          vst4q_s16(v67, *(int16x8x4_t *)(&v72 - 3));
          v67 += 32;
          v65 += 8;
        }
        while ((int)v65 < (int)v11 - 7);
        uint32x4_t v132 = &v60[v65];
        unint64_t v133 = v11 & 0xFFFFFFF8;
      }
      while (v11 > v133)
      {
        v62.i8[0] = v132[1];
        float v134 = (float)v62.u32[0] - v36;
        unsigned int v135 = LODWORD(v182);
        float v136 = v182 * v134;
        LOBYTE(v135) = v66->i8[0];
        float v137 = (float)v135 - v35;
        float v138 = _S20 * v137;
        float v139 = (float)(v182 * v134) + (float)(_S20 * v137);
        float v140 = 8191.0;
        if (v139 <= 8191.0)
        {
          float v140 = (float)(v182 * v134) + (float)(_S20 * v137);
          if (v139 < 0.0) {
            float v140 = 0.0;
          }
        }
        LOBYTE(v137) = *v132;
        float v141 = (float)LODWORD(v137) - v36;
        float v142 = v4.f32[1] * v134;
        float v143 = (float)(v4.f32[1] * v134) + (float)(v141 * v4.f32[0]);
        float v144 = 8191.0;
        if ((float)(v138 + v143) <= 8191.0)
        {
          float v144 = v138 + v143;
          if ((float)(v138 + v143) < 0.0) {
            float v144 = 0.0;
          }
        }
        float v145 = v63 * v141;
        float v146 = v145 + v138;
        BOOL v147 = (float)(v145 + v138) <= 8191.0;
        float v148 = 8191.0;
        if (v147)
        {
          float v148 = v146;
          if (v146 < 0.0) {
            float v148 = 0.0;
          }
        }
        LOBYTE(v142) = v66->i8[1];
        float v149 = _S20 * (float)((float)LODWORD(v142) - v35);
        float v150 = v136 + v149;
        float v151 = 8191.0;
        if (v150 <= 8191.0)
        {
          float v151 = v150;
          if (v150 < 0.0) {
            float v151 = 0.0;
          }
        }
        float v152 = v143 + v149;
        BOOL v147 = (float)(v143 + v149) <= 8191.0;
        float v153 = 8191.0;
        if (v147)
        {
          float v153 = v152;
          if (v152 < 0.0) {
            float v153 = 0.0;
          }
        }
        float v154 = v145 + v149;
        BOOL v147 = (float)(v145 + v149) <= 8191.0;
        float v155 = 8191.0;
        if (v147)
        {
          float v155 = v154;
          if (v154 < 0.0) {
            float v155 = 0.0;
          }
        }
        if (v68)
        {
          unsigned int v156 = v68->u8[0];
          unsigned int v157 = v68->u8[1];
          float v68 = (int8x8_t *)((char *)v68 + 2);
        }
        else
        {
          unsigned int v156 = 0;
          unsigned int v157 = 0;
        }
        _H25 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v140, 0.0), 8191.0))];
        __asm { FCVT            S25, H25 }
        _H24 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0))];
        __asm { FCVT            S24, H24 }
        _H26 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0))];
        _H17 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0))];
        __asm
        {
          FCVT            S26, H26
          FCVT            S17, H17
        }
        _H9 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0))];
        __asm { FCVT            S9, H9 }
        _H10 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0))];
        __asm { FCVT            S10, H10 }
        float v170 = (float)((float)(_S1 * _S24) + (float)(_S25 * *(float *)&_D0)) + (float)(_S26 * _S2);
        float v171 = (float)((float)(_S4 * _S24) + (float)(_S25 * _S3)) + (float)(_S26 * _S5);
        float v172 = (float)((float)(_S7 * _S24) + (float)(_S25 * _S6)) + (float)(_S26 * _S16);
        float v173 = (float)((float)(_S1 * _S9) + (float)(_S17 * *(float *)&_D0)) + (float)(_S10 * _S2);
        float v174 = (float)((float)(_S4 * _S9) + (float)(_S17 * _S3)) + (float)(_S10 * _S5);
        float v175 = (float)((float)(_S7 * _S9) + (float)(_S17 * _S6)) + (float)(_S10 * _S16);
        LOWORD(_S9) = *(_WORD *)&v38[2 * llroundf(fminf(fmaxf(v170, 0.0), 8191.0))];
        LOWORD(_S10) = *(_WORD *)&v38[2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0))];
        LOWORD(v172) = *(_WORD *)&v38[2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0))];
        __int16 v176 = *(_WORD *)&v38[2 * llroundf(fminf(fmaxf(v173, 0.0), 8191.0))];
        __int16 v177 = *(_WORD *)&v38[2 * llroundf(fminf(fmaxf(v174, 0.0), 8191.0))];
        *(float *)v62.i32 = fminf(fmaxf(v175, 0.0), 8191.0);
        v62.i16[0] = *(_WORD *)&v38[2 * llroundf(*(float *)v62.i32)];
        _S23 = (float)v156 * 0.0039216;
        __asm { FCVT            H23, S23 }
        _S11 = (float)v157 * 0.0039216;
        __asm { FCVT            H11, S11 }
        *float v67 = LOWORD(_S9);
        v67[1] = LOWORD(_S10);
        v67[2] = LOWORD(v172);
        if (!v68) {
          _H23 = COERCE_UNSIGNED_INT(1.0);
        }
        v67[3] = _H23;
        v67[4] = v176;
        v67[5] = v177;
        v67[6] = v62.i16[0];
        v133 += 2;
        if (v68) {
          *(short float *)v62.i16 = _H11;
        }
        else {
          v62.i16[0] = COERCE_UNSIGNED_INT(1.0);
        }
        v67[7] = v62.i16[0];
        v132 += 2;
        float v66 = (int8x8_t *)((char *)v66 + 2);
        v67 += 8;
      }
      float v61 = (int8x8_t *)((char *)v61 + v18);
      v60 += v19;
      float v59 = (int8x8_t *)((char *)v59 + v20);
      result += v21;
      ++v10;
    }
    while (v10 != v33);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    float v38 = *(float *)(v14 + 104);
    uint64_t v39 = v14 + 164;
    uint64_t v40 = v14 + 16548;
    uint64_t v41 = *(void *)(result + 36);
    uint64_t v42 = **((void **)result + 16)
        + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
        + 8 * *((void *)result + 14);
    uint64_t v43 = v15[2];
    if (v43) {
      uint64_t result = (unsigned __int8 *)(v43 + v19 * v12 + v41);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v46 = v15;
    uint64_t v45 = *v15;
    uint64_t v44 = v46[1];
    if (v44) {
      uint64_t v47 = v44 + v18 * v12 + v41;
    }
    else {
      uint64_t v47 = 0;
    }
    uint64_t v48 = (unsigned char *)(v45 + v17 * v12 + v41);
    do
    {
      if (v11)
      {
        unint64_t v49 = 0;
        float v50 = v48;
        uint64_t v51 = v42;
        float v52 = result;
        do
        {
          LOBYTE(v5) = *(unsigned char *)(v47 + v49 + 1);
          *(float *)&unsigned int v53 = (float)LODWORD(v5);
          float v54 = *(float *)&v53 - v24;
          float v55 = v26 * (float)(*(float *)&v53 - v24);
          LOBYTE(v53) = *v50;
          float v56 = v25 * (float)((float)v53 - v23);
          float v57 = v55 + v56;
          float v58 = 8191.0;
          if ((float)(v55 + v56) <= 8191.0)
          {
            float v58 = v55 + v56;
            if (v57 < 0.0) {
              float v58 = 0.0;
            }
          }
          LOBYTE(v57) = *(unsigned char *)(v47 + v49);
          float v59 = (float)LODWORD(v57) - v24;
          float v60 = (float)(v28 * v54) + (float)(v59 * v27);
          float v61 = 8191.0;
          if ((float)(v56 + v60) <= 8191.0)
          {
            float v61 = v56 + v60;
            if ((float)(v56 + v60) < 0.0) {
              float v61 = 0.0;
            }
          }
          float v62 = v29 * v59;
          float v63 = v62 + v56;
          BOOL v64 = (float)(v62 + v56) <= 8191.0;
          float v65 = 8191.0;
          if (v64)
          {
            float v65 = v63;
            if (v63 < 0.0) {
              float v65 = 0.0;
            }
          }
          LOBYTE(v63) = v50[1];
          float v66 = v25 * (float)((float)LODWORD(v63) - v23);
          float v67 = v55 + v66;
          BOOL v64 = (float)(v55 + v66) <= 8191.0;
          float v68 = 8191.0;
          if (v64)
          {
            float v68 = v67;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v60 + v66;
          BOOL v64 = (float)(v60 + v66) <= 8191.0;
          float v70 = 8191.0;
          if (v64)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v62 + v66;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          if (v52)
          {
            unsigned int v73 = *v52;
            unsigned int v74 = v52[1];
            v52 += 2;
          }
          else
          {
            unsigned int v73 = 0;
            unsigned int v74 = 0;
          }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v58, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S28, H28
          }
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          float v91 = (float)((float)(v31 * _S28) + (float)(_S27 * v30)) + (float)(_S29 * v32);
          float v92 = (float)((float)(v34 * _S28) + (float)(_S27 * v33)) + (float)(_S29 * v35);
          float v93 = (float)((float)(v37 * _S28) + (float)(_S27 * v36)) + (float)(_S29 * v38);
          float v94 = (float)((float)(v31 * _S31) + (float)(_S30 * v30)) + (float)(_S8 * v32);
          float v95 = (float)((float)(v34 * _S31) + (float)(_S30 * v33)) + (float)(_S8 * v35);
          float v96 = (float)((float)(v37 * _S31) + (float)(_S30 * v36)) + (float)(_S8 * v38);
          LOWORD(_S31) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          LOWORD(_S8) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          float v5 = fminf(fmaxf(v93, 0.0), 8191.0);
          LOWORD(v5) = *(_WORD *)(v40 + 2 * llroundf(v5));
          __int16 v97 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __int16 v98 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          __int16 v99 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _S9 = (float)v73 * 0.0039216;
          __asm { FCVT            H9, S9 }
          _S10 = (float)v74 * 0.0039216;
          __asm { FCVT            H10, S10 }
          *(_WORD *)uint64_t v51 = LOWORD(_S31);
          *(_WORD *)(v51 + 2) = LOWORD(_S8);
          *(_WORD *)(v51 + 4) = LOWORD(v5);
          if (v52) {
            short float v104 = _H9;
          }
          else {
            LOWORD(v104) = COERCE_UNSIGNED_INT(1.0);
          }
          *(short float *)(v51 + 6) = v104;
          *(_WORD *)(v51 + 8) = v97;
          *(_WORD *)(v51 + 10) = v98;
          *(_WORD *)(v51 + 12) = v99;
          if (v52) {
            *(short float *)&float v5 = _H10;
          }
          else {
            LOWORD(v5) = COERCE_UNSIGNED_INT(1.0);
          }
          *(_WORD *)(v51 + 14) = LOWORD(v5);
          v49 += 2;
          v50 += 2;
          v51 += 16;
        }
        while (v11 > v49);
      }
      v48 += v17;
      v47 += v18;
      result += v19;
      v42 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_RGhA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_RGhA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_RGhA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, double a6, int16x4_t a7, float32x4_t a8, double a9, float32x4_t a10)
{
  uint64_t v14 = *(void *)(result + 28);
  unint64_t v15 = *result;
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (v17 != v16)
  {
    uint64_t v18 = 0;
    unint64_t v19 = *(void *)(result + 20);
    uint64_t v20 = *(void *)(result + 44);
    uint64_t v21 = v16 + v20;
    uint64_t v22 = v17 + v20;
    uint64_t v23 = (float32x2_t *)*((void *)result + 19);
    float v25 = (uint64_t *)*((void *)result + 7);
    uint64_t v24 = (uint64_t *)*((void *)result + 8);
    uint64_t v26 = *v24;
    uint64_t v27 = v24[1];
    uint64_t v28 = v24[2];
    uint64_t v29 = **((void **)result + 17);
    unsigned int v30 = v23[17].u16[2];
    unsigned int v31 = v23[17].u16[3];
    a8.i32[0] = v23[3].i32[1];
    uint64_t v32 = v22 - v21;
    a10.f32[0] = 1.0 / (float)v23[16].u32[0];
    *(float *)&a3 = (float)v30;
    float v33 = (float)v31;
    _S2 = a10.f32[0] * v23->f32[0];
    __asm { FCVT            H3, S2 }
    *(short float *)a7.i16 = (short float)v30;
    float16x8_t v40 = (float16x8_t)vdupq_lane_s16(a7, 0);
    a8.i32[1] = v23[1].i32[0];
    *(float32x2_t *)a8.f32 = vmul_n_f32(*(float32x2_t *)a8.f32, a10.f32[0]);
    float16x8_t v41 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a8), 0);
    short float v42 = -(short float)v31;
    *(float32x2_t *)a10.f32 = vmul_n_f32(v23[2], a10.f32[0]);
    float16x8_t v43 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a10), 0);
    float16x8_t v44 = vmulq_n_f16(v41, v42);
    float16x8_t v45 = vmulq_n_f16(v43, v42);
    uint64_t v46 = v25[2];
    uint64_t v47 = *(void *)(result + 36);
    uint64_t v49 = *v25;
    uint64_t v48 = v25[1];
    float v50 = (__int8 *)(v48 + v27 * v21 + v47);
    uint64_t v51 = **((void **)result + 16)
        + v29 * (*((void *)result + 13) * a2 / v15 + *((void *)result + 15))
        + 8 * *((void *)result + 14);
    if (v46) {
      float v52 = (int8x8_t *)(v46 + v28 * v21 + v47);
    }
    else {
      float v52 = 0;
    }
    if (!v48) {
      float v50 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v49 + v26 * v21 + v47);
    do
    {
      if ((int)v19 < 8)
      {
        unint64_t v70 = 0;
        float v69 = v50;
        float v56 = v52;
        float v55 = (__int16 *)v51;
        float v54 = (int8x8_t *)result;
      }
      else
      {
        uint64_t v53 = 0;
        float v54 = (int8x8_t *)result;
        float v55 = (__int16 *)v51;
        float v56 = v52;
        do
        {
          if (v56)
          {
            int8x8_t v57 = *v56++;
            *(int8x8_t *)v58.i8 = vzip1_s8(v57, 0);
            v58.u64[1] = (unint64_t)vzip2_s8(v57, 0);
            _Q26 = vmulq_f16(vcvtq_f16_u16(v58), (float16x8_t)vdupq_n_s16(0x1C04u));
          }
          else
          {
            _Q26.i32[0] = 1006648320;
            _Q26.i16[2] = 15360;
            _Q26.i16[3] = 15360;
            _Q26.i16[4] = 15360;
            _Q26.i16[5] = 15360;
            _Q26.i16[6] = 15360;
            _Q26.i16[7] = 15360;
          }
          int8x8_t v59 = *(int8x8_t *)&v50[v53];
          *(int8x8_t *)v60.i8 = vzip1_s8(v59, 0);
          v60.u64[1] = (unint64_t)vzip2_s8(v59, 0);
          float16x8_t v61 = vcvtq_f16_u16(v60);
          int8x16_t v62 = (int8x16_t)vmlaq_f16(v44, v41, v61);
          int8x16_t v63 = (int8x16_t)vmlaq_f16(v45, v43, v61);
          v61.i64[0] = vextq_s8(v62, v62, 8uLL).u64[0];
          *(int16x4_t *)v64.i8 = vuzp2_s16(*(int16x4_t *)v62.i8, *(int16x4_t *)v61.i8);
          *(double *)&v64.i64[1] = a3;
          *(int16x4_t *)v61.i8 = vuzp1_s16(*(int16x4_t *)v62.i8, *(int16x4_t *)v61.i8);
          *(double *)&v61.i64[1] = a3;
          float16x8_t v65 = (float16x8_t)vzip1q_s16((int16x8_t)v61, (int16x8_t)v61);
          v61.i64[0] = vextq_s8(v63, v63, 8uLL).u64[0];
          *(float16x4_t *)v61.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v63.i8, *(int16x4_t *)v61.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v63.i8, *(int16x4_t *)v61.i8));
          *(double *)&v61.i64[1] = a3;
          float16x8_t v66 = (float16x8_t)vzip1q_s16((int16x8_t)v61, (int16x8_t)v61);
          int8x8_t v67 = *v54++;
          *(int8x8_t *)v62.i8 = vzip1_s8(v67, 0);
          v62.u64[1] = (unint64_t)vzip2_s8(v67, 0);
          _Q27 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v62), v40);
          _Q23 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v64, v64), _Q27, _H3);
          _Q24 = vmlaq_n_f16(v66, _Q27, _H3);
          float16x8_t v68 = vmlaq_n_f16(v65, _Q27, _H3);
          vst4q_s16(v55, *(int16x8x4_t *)_Q23.i8);
          v55 += 32;
          v53 += 8;
        }
        while ((int)v53 < (int)v19 - 7);
        float v69 = &v50[v53];
        unint64_t v70 = v19 & 0xFFFFFFF8;
      }
      while (v19 > v70)
      {
        if (v56)
        {
          unsigned int v71 = v56->u8[0];
          unsigned int v72 = v56->u8[1];
          float v56 = (int8x8_t *)((char *)v56 + 2);
        }
        else
        {
          unsigned int v71 = 0;
          unsigned int v72 = 0;
        }
        _Q23.i8[0] = *v69;
        float v73 = (float)_Q23.u32[0] - v33;
        _Q24.i8[0] = v69[1];
        float v74 = (float)_Q24.u32[0] - v33;
        float v75 = a8.f32[1] * v74;
        float v76 = (float)(a10.f32[1] * v74) + (float)(v73 * a10.f32[0]);
        float v77 = a8.f32[0] * v73;
        _Q26.i8[0] = v54->i8[0];
        float v78 = _S2 * (float)((float)_Q26.u32[0] - *(float *)&a3);
        _Q27.i8[0] = v54->i8[1];
        float v79 = _S2 * (float)((float)_Q27.u32[0] - *(float *)&a3);
        _S28 = v75 + v78;
        _S29 = v78 + v76;
        *(float *)_Q26.i32 = v77 + v78;
        _S25 = v75 + v79;
        *(float *)_Q24.i32 = v76 + v79;
        *(float *)_Q23.i32 = v77 + v79;
        _S30 = (float)v71 * 0.0039216;
        __asm { FCVT            H30, S30 }
        *(float *)_Q27.i32 = (float)v72 * 0.0039216;
        __asm
        {
          FCVT            H27, S27
          FCVT            H28, S28
        }
        *float v55 = LOWORD(_S28);
        __asm { FCVT            H28, S29 }
        v55[1] = LOWORD(_S28);
        __asm { FCVT            H26, S26 }
        v55[2] = _Q26.i16[0];
        if (v56) {
          *(short float *)_Q26.i16 = _H30;
        }
        else {
          _Q26.i16[0] = COERCE_UNSIGNED_INT(1.0);
        }
        v55[3] = _Q26.i16[0];
        __asm { FCVT            H25, S25 }
        v55[4] = _H25;
        __asm { FCVT            H24, S24 }
        v55[5] = _Q24.i16[0];
        __asm { FCVT            H23, S23 }
        v55[6] = _H23;
        v70 += 2;
        if (_ZF) {
          _Q23.i16[0] = COERCE_UNSIGNED_INT(1.0);
        }
        else {
          _Q23.i16[0] = _Q27.i16[0];
        }
        v55[7] = _Q23.i16[0];
        v69 += 2;
        float v54 = (int8x8_t *)((char *)v54 + 2);
        v55 += 8;
      }
      result += v26;
      v50 += v27;
      float v52 = (int8x8_t *)((char *)v52 + v28);
      v51 += v29;
      ++v18;
    }
    while (v18 != v32);
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v16 = (uint64_t *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v15;
    uint64_t v18 = v15[1];
    uint64_t v19 = v15[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    unsigned int v22 = 1.0;
    float v23 = 1.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v24 = (float)v21;
    LOWORD(v22) = *(_WORD *)(v14 + 142);
    float v25 = (float)v22;
    float v26 = v23 * *(float *)v14;
    float v27 = v23 * *(float *)(v14 + 8);
    float v28 = v23 * *(float *)(v14 + 16);
    float v29 = v23 * *(float *)(v14 + 20);
    float v30 = v23 * *(float *)(v14 + 28);
    uint64_t v31 = *((void *)result + 14);
    uint64_t v32 = (void *)*((void *)result + 16);
    unint64_t v33 = *((void *)result + 13) * a2 / v7 + *((void *)result + 15);
    uint64_t v34 = *(void *)(result + 36);
    uint64_t v35 = *v32 + v33 * v20 + 8 * v31;
    uint64_t v36 = v16[2];
    if (v36) {
      uint64_t v37 = (unsigned __int8 *)(v36 + v19 * v12 + v34);
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v39 = *v16;
    uint64_t v38 = v16[1];
    uint64_t v40 = v38 + v18 * v12 + v34;
    if (!v38) {
      uint64_t v40 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v39 + v17 * v12 + v34);
    do
    {
      if (v11)
      {
        unint64_t v41 = 0;
        short float v42 = result;
        float16x8_t v43 = (_WORD *)v35;
        float16x8_t v44 = v37;
        do
        {
          if (v44)
          {
            unsigned int v45 = *v44;
            unsigned int v46 = v44[1];
            v44 += 2;
          }
          else
          {
            unsigned int v45 = 0;
            unsigned int v46 = 0;
          }
          LOBYTE(_S17) = *(unsigned char *)(v40 + v41);
          float v47 = (float)LODWORD(_S17) - v25;
          LOBYTE(_S18) = *(unsigned char *)(v40 + v41 + 1);
          float v48 = (float)LODWORD(_S18) - v25;
          float v49 = v27 * v48;
          float v50 = (float)(v29 * v48) + (float)(v47 * v28);
          float v51 = v30 * v47;
          LOBYTE(_S20) = *v42;
          float v52 = v26 * (float)((float)LODWORD(_S20) - v24);
          LOBYTE(_S21) = v42[1];
          float v53 = v26 * (float)((float)LODWORD(_S21) - v24);
          _S22 = v49 + v52;
          _S23 = v52 + v50;
          _S20 = v51 + v52;
          _S19 = v49 + v53;
          _S18 = v50 + v53;
          _S17 = v51 + v53;
          _S21 = (float)v45 * 0.0039216;
          __asm { FCVT            H21, S21 }
          _S24 = (float)v46 * 0.0039216;
          __asm
          {
            FCVT            H24, S24
            FCVT            H22, S22
          }
          _WORD *v43 = LOWORD(_S22);
          __asm { FCVT            H22, S23 }
          v43[1] = LOWORD(_S22);
          __asm { FCVT            H20, S20 }
          v43[2] = LOWORD(_S20);
          if (v44) {
            *(short float *)&_S20 = *(short float *)&_S21;
          }
          else {
            LOWORD(_S20) = COERCE_UNSIGNED_INT(1.0);
          }
          v43[3] = LOWORD(_S20);
          __asm { FCVT            H19, S19 }
          v43[4] = _H19;
          __asm { FCVT            H18, S18 }
          v43[5] = LOWORD(_S18);
          __asm { FCVT            H17, S17 }
          v43[6] = _H17;
          if (_ZF) {
            LOWORD(_S17) = COERCE_UNSIGNED_INT(1.0);
          }
          else {
            *(short float *)&_S17 = _H24;
          }
          v43[7] = LOWORD(_S17);
          v41 += 2;
          v42 += 2;
          v43 += 8;
        }
        while (v11 > v41);
      }
      result += v17;
      v40 += v18;
      v37 += v19;
      v35 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_RGfA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, int16x4_t a3)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44);
    uint64_t v12 = v7 + v11;
    uint64_t v13 = v8 + v11;
    uint64_t v14 = (float32x2_t *)*((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    unsigned int v20 = v14[17].u16[2];
    unsigned int v21 = v14[17].u16[3];
    a3.i32[0] = v14->i32[0];
    v22.i32[0] = v14[3].i32[1];
    _D2.i32[0] = v14[9].i32[0];
    _S27 = v14[10].f32[1];
    _S4 = v14[11].f32[0];
    _S5 = v14[11].f32[1];
    _S6 = v14[12].f32[0];
    _S7 = v14[12].f32[1];
    _S16 = v14[13].f32[0];
    _S17 = v14[13].f32[1];
    _S18 = v14[14].f32[0];
    _S19 = v14[14].f32[1];
    _S20 = v14[15].f32[0];
    uint64_t v220 = v13 - v12;
    uint64_t v34 = (char *)&v14[2068] + 4;
    v3.f32[0] = 8191.0 / (float)v14[16].u32[0];
    float v35 = (float)v20;
    float v36 = (float)v21;
    _S24 = v3.f32[0] * v14->f32[0];
    uint64_t v38 = (char *)&v14[20] + 4;
    uint64_t v39 = (char *)&v14[4116] + 4;
    __asm { FCVT            H8, S24 }
    *(short float *)a3.i16 = (short float)v20;
    float16x8_t v245 = (float16x8_t)vdupq_lane_s16(a3, 0);
    short float v45 = -(short float)v21;
    v22.i32[1] = v14[1].i32[0];
    *(float32x2_t *)v4.f32 = vmul_n_f32(v22, v3.f32[0]);
    *(float32x2_t *)v3.f32 = vmul_n_f32(v14[2], v3.f32[0]);
    float16x8_t v244 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v241 = vmulq_n_f16(v244, v45);
    float16x8_t v242 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    float16x8_t v240 = vmulq_n_f16(v242, v45);
    __asm { FCVT            H0, S17 }
    short float v239 = _H0;
    __asm { FCVT            H0, S18 }
    short float v238 = _H0;
    __asm { FCVT            H0, S19 }
    short float v237 = _H0;
    __asm { FCVT            H0, S20 }
    short float v236 = _H0;
    float v249 = *(float *)_D2.i32;
    __asm { FCVT            H0, S2 }
    short float v235 = _H0;
    float v248 = v14[9].f32[1];
    __asm { FCVT            H0, S3 }
    short float v234 = _H0;
    float v247 = v14[10].f32[0];
    __asm { FCVT            H0, S26 }
    short float v233 = _H0;
    uint64_t v53 = v15[2];
    uint64_t v222 = v19;
    uint64_t v223 = v18;
    uint64_t v54 = *(void *)(result + 36);
    uint64_t v55 = *v15;
    uint64_t v56 = *(void *)(*((void *)result + 7) + 8);
    uint64_t v221 = **((void **)result + 17);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16)
                               + v221 * (*((void *)result + 13) * a2 / v6 + *((void *)result + 15))
                               + 16 * *((void *)result + 14));
    if (v53) {
      int8x8_t v57 = (float16x4_t *)(v53 + v19 * v12 + v54);
    }
    else {
      int8x8_t v57 = 0;
    }
    if (v56) {
      uint16x8_t v58 = (__int8 *)(v56 + v18 * v12 + v54);
    }
    else {
      uint16x8_t v58 = 0;
    }
    uint64_t v224 = v17;
    int8x8_t v59 = (unsigned char *)(v55 + v17 * v12 + v54);
    float v246 = _S27;
    __asm { FCVT            H0, S27 }
    short float v232 = _H0;
    __asm { FCVT            H0, S4 }
    short float v231 = _H0;
    __asm { FCVT            H0, S5 }
    short float v230 = _H0;
    __asm { FCVT            H0, S6 }
    short float v229 = _H0;
    __asm { FCVT            H0, S7 }
    short float v228 = _H0;
    __asm { FCVT            H0, S16 }
    short float v227 = _H0;
    _Q0.i32[0] = v3.i32[1];
    float v226 = v3.f32[1];
    float v243 = v3.f32[0];
    v67.i64[0] = 0x9000900090009000;
    v67.i64[1] = 0x9000900090009000;
    while (1)
    {
      uint64_t v225 = v9;
      if ((int)v10 >= 8) {
        break;
      }
      unint64_t v153 = 0;
      float v152 = v58;
      unsigned int v71 = v57;
      float v148 = (float *)result;
      float v69 = v59;
LABEL_52:
      while (v10 > v153)
      {
        _Q0.i8[0] = v152[1];
        float v154 = (float)_Q0.u32[0] - v36;
        unsigned int v155 = v4.u32[1];
        float v156 = v4.f32[1] * v154;
        LOBYTE(v155) = *v69;
        float v157 = _S24 * (float)((float)v155 - v35);
        float v158 = (float)(v4.f32[1] * v154) + v157;
        float v159 = 8191.0;
        if (v158 <= 8191.0)
        {
          float v159 = (float)(v4.f32[1] * v154) + v157;
          if (v158 < 0.0) {
            float v159 = 0.0;
          }
        }
        _D2.i8[0] = *v152;
        float v160 = (float)_D2.u32[0] - v36;
        float v161 = (float)(v226 * v154) + (float)(v160 * v243);
        float v162 = 8191.0;
        if ((float)(v157 + v161) <= 8191.0)
        {
          float v162 = v157 + v161;
          if ((float)(v157 + v161) < 0.0) {
            float v162 = 0.0;
          }
        }
        unsigned int v163 = v4.i32[0];
        float v164 = v4.f32[0] * v160;
        float v165 = (float)(v4.f32[0] * v160) + v157;
        float v166 = 8191.0;
        if (v165 <= 8191.0)
        {
          float v166 = v165;
          if (v165 < 0.0) {
            float v166 = 0.0;
          }
        }
        LOBYTE(v163) = v69[1];
        float v167 = _S24 * (float)((float)v163 - v35);
        float v168 = v156 + v167;
        float v169 = 8191.0;
        if (v168 <= 8191.0)
        {
          float v169 = v168;
          if (v168 < 0.0) {
            float v169 = 0.0;
          }
        }
        float v170 = v161 + v167;
        float v171 = 8191.0;
        if (v170 <= 8191.0)
        {
          float v171 = v170;
          if (v170 < 0.0) {
            float v171 = 0.0;
          }
        }
        float v172 = v164 + v167;
        BOOL v173 = (float)(v164 + v167) <= 8191.0;
        float v174 = 8191.0;
        if (v173)
        {
          float v174 = v172;
          if (v172 < 0.0) {
            float v174 = 0.0;
          }
        }
        if (v71)
        {
          unsigned int v175 = v71->u8[0];
          unsigned int v176 = v71->u8[1];
          unsigned int v71 = (float16x4_t *)((char *)v71 + 2);
        }
        else
        {
          unsigned int v175 = 0;
          unsigned int v176 = 0;
        }
        _H2 = *(_WORD *)&v38[2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0))];
        __asm { FCVT            S30, H2 }
        _H1 = *(_WORD *)&v38[2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0))];
        unsigned int v180 = llroundf(fminf(fmaxf(v166, 0.0), 8191.0));
        __asm { FCVT            S25, H1 }
        _H1 = *(_WORD *)&v38[2 * v180];
        __asm { FCVT            S1, H1 }
        _H27 = *(_WORD *)&v38[2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0))];
        _H31 = *(_WORD *)&v38[2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0))];
        _H9 = *(_WORD *)&v38[2 * llroundf(fminf(fmaxf(v174, 0.0), 8191.0))];
        float v187 = fmaxf(_S30, fmaxf(_S25, _S1));
        float v188 = (float)((float)((float)(_S18 * _S25) + (float)(_S17 * _S30)) + (float)(_S19 * _S1))
             + (float)(_S20 * v187);
        float v189 = 8191.0;
        if (v188 <= 8191.0)
        {
          float v189 = (float)((float)((float)(_S18 * _S25) + (float)(_S17 * _S30)) + (float)(_S19 * _S1))
               + (float)(_S20 * v187);
          if (v188 < 0.0) {
            float v189 = 0.0;
          }
        }
        __asm
        {
          FCVT            S27, H27
          FCVT            S31, H31
          FCVT            S9, H9
        }
        _H10 = *(_WORD *)&v34[2 * llroundf(v189)];
        float v194 = fmaxf(_S27, fmaxf(_S31, _S9));
        float v195 = (float)((float)((float)(_S18 * _S31) + (float)(_S17 * _S27)) + (float)(_S19 * _S9))
             + (float)(_S20 * v194);
        float v196 = 8191.0;
        if (v195 <= 8191.0)
        {
          float v196 = (float)((float)((float)(_S18 * _S31) + (float)(_S17 * _S27)) + (float)(_S19 * _S9))
               + (float)(_S20 * v194);
          if (v195 < 0.0) {
            float v196 = 0.0;
          }
        }
        __asm { FCVT            S2, H10 }
        float v198 = _S30 * _S2;
        float v199 = _S25 * _S2;
        float v200 = _S1 * _S2;
        LOWORD(_S2) = *(_WORD *)&v34[2 * llroundf(v196)];
        __asm { FCVT            S2, H2 }
        float v202 = _S27 * _S2;
        _S30 = _S31 * _S2;
        float v204 = _S9 * _S2;
        float v205 = (float)((float)(v248 * v199) + (float)(v198 * v249)) + (float)(v200 * v247);
        float v206 = (float)((float)(_S4 * v199) + (float)(v198 * v246)) + (float)(v200 * _S5);
        float v207 = (float)((float)(_S7 * v199) + (float)(v198 * _S6)) + (float)(v200 * _S16);
        _S3 = (float)((float)(v248 * _S30) + (float)(v202 * v249)) + (float)(v204 * v247);
        _S25 = (float)((float)(_S4 * _S30) + (float)(v202 * v246)) + (float)(v204 * _S5);
        float v210 = (float)(_S7 * _S30) + (float)(v202 * _S6);
        LOWORD(_S30) = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v205, 0.0), 8191.0))];
        float v211 = v210 + (float)(v204 * _S16);
        __asm { FCVT            S27, H30 }
        LOWORD(_S30) = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v206, 0.0), 8191.0))];
        unsigned int v213 = llroundf(fminf(fmaxf(v207, 0.0), 8191.0));
        __asm { FCVT            S1, H30 }
        LOWORD(_S30) = *(_WORD *)&v39[2 * v213];
        __asm { FCVT            S30, H30 }
        LOWORD(_S3) = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        LOWORD(_S25) = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0))];
        __asm { FCVT            S25, H25 }
        _H0 = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v211, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        *(float *)_D2.i32 = (float)v175 * 0.0039216;
        if (!v71) {
          *(float *)_D2.i32 = 1.0;
        }
        *(_DWORD *)float v148 = _S27;
        *((_DWORD *)v148 + 1) = _S1;
        float v219 = (float)v176 * 0.0039216;
        *((_DWORD *)v148 + 2) = _S30;
        v148[3] = *(float *)_D2.i32;
        if (!v71) {
          float v219 = 1.0;
        }
        *((_DWORD *)v148 + 4) = _S3;
        *((_DWORD *)v148 + 5) = _S25;
        v153 += 2;
        v148[6] = _Q0.f32[0];
        v148[7] = v219;
        v152 += 2;
        v69 += 2;
        v148 += 8;
      }
      v59 += v224;
      v58 += v223;
      int8x8_t v57 = (float16x4_t *)((char *)v57 + v222);
      result += v221;
      uint64_t v9 = v225 + 1;
      if (v225 + 1 == v220) {
        return result;
      }
    }
    uint64_t v68 = 0;
    float v69 = v59;
    unint64_t v70 = (float *)result;
    unsigned int v71 = v57;
    while (v71)
    {
      float16x4_t v72 = *v71++;
      float16x4_t v73 = v72;
      if (!v71) {
        goto LABEL_15;
      }
      *(int8x8_t *)v74.i8 = vzip1_s8((int8x8_t)v73, 0);
      v74.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v73, 0);
      int8x16_t v75 = (int8x16_t)vmulq_f16(vcvtq_f16_u16(v74), (float16x8_t)vdupq_n_s16(0x1C04u));
      _Q12 = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
      float16x4_t v73 = (float16x4_t)vextq_s8(v75, v75, 8uLL).u64[0];
      float32x4_t v77 = vcvtq_f32_f16(v73);
LABEL_16:
      int8x8_t v78 = *(int8x8_t *)&v58[v68];
      *(int8x8_t *)v79.i8 = vzip1_s8(v78, 0);
      v79.u64[1] = (unint64_t)vzip2_s8(v78, 0);
      float16x8_t v80 = vcvtq_f16_u16(v79);
      int8x16_t v81 = (int8x16_t)vmlaq_f16(v241, v244, v80);
      int8x16_t v82 = (int8x16_t)vmlaq_f16(v240, v242, v80);
      v80.i64[0] = vextq_s8(v81, v81, 8uLL).u64[0];
      *(int16x4_t *)v83.i8 = vuzp1_s16(*(int16x4_t *)v81.i8, *(int16x4_t *)v80.i8);
      *(int16x4_t *)v80.i8 = vuzp2_s16(*(int16x4_t *)v81.i8, *(int16x4_t *)v80.i8);
      v80.u64[1] = (unint64_t)v73;
      v83.u64[1] = (unint64_t)v73;
      float16x8_t v84 = (float16x8_t)vzip1q_s16(v83, v83);
      v83.i64[0] = vextq_s8(v82, v82, 8uLL).u64[0];
      *(float16x4_t *)v85.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v83.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v83.i8));
      v85.u64[1] = (unint64_t)v73;
      int8x8_t v86 = *(int8x8_t *)v69;
      v69 += 8;
      *(int8x8_t *)v83.i8 = vzip1_s8(v86, 0);
      v83.u64[1] = (unint64_t)vzip2_s8(v86, 0);
      float16x8_t v87 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v83), v245);
      float16x8_t v88 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v85, v85), v87, _H8);
      float16x8_t v89 = vmlaq_n_f16(v84, v87, _H8);
      uint16x8_t v90 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v80, (int16x8_t)v80), v87, _H8), (float16x8_t)0), v67));
      uint32x4_t v91 = vmovl_high_u16(v90);
      float16x8_t v92 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v90.i8);
      v92.i16[0] = *(_WORD *)&v38[2 * v92.u32[0]];
      v92.i16[1] = *(_WORD *)&v38[2 * v92.u32[1]];
      v92.i16[2] = *(_WORD *)&v38[2 * v92.u32[2]];
      v92.i16[3] = *(_WORD *)&v38[2 * v92.u32[3]];
      v92.i16[4] = *(_WORD *)&v38[2 * v91.u32[0]];
      v92.i16[5] = *(_WORD *)&v38[2 * v91.u32[1]];
      v92.i16[6] = *(_WORD *)&v38[2 * v91.u32[2]];
      v92.i16[7] = *(_WORD *)&v38[2 * v91.u32[3]];
      uint16x8_t v93 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v88, (float16x8_t)0), v67));
      float16x8_t v94 = (float16x8_t)vmovl_high_u16(v93);
      *(void *)&long long v95 = v94.u32[2];
      *((void *)&v95 + 1) = v94.u32[3];
      long long v96 = v95;
      *(void *)&long long v95 = v94.u32[0];
      *((void *)&v95 + 1) = v94.u32[1];
      uint32x4_t v97 = vmovl_u16(*(uint16x4_t *)v93.i8);
      v94.i16[0] = *(_WORD *)&v38[2 * v97.u32[0]];
      v94.i16[1] = *(_WORD *)&v38[2 * v97.u32[1]];
      v94.i16[2] = *(_WORD *)&v38[2 * v97.u32[2]];
      v94.i16[3] = *(_WORD *)&v38[2 * v97.u32[3]];
      v94.i16[4] = *(_WORD *)&v38[2 * v95];
      v94.i16[5] = *(_WORD *)&v38[2 * *((void *)&v95 + 1)];
      v94.i16[6] = *(_WORD *)&v38[2 * v96];
      v94.i16[7] = *(_WORD *)&v38[2 * *((void *)&v96 + 1)];
      uint16x8_t v98 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v89, (float16x8_t)0), v67));
      uint32x4_t v99 = vmovl_high_u16(v98);
      uint32x4_t v100 = vmovl_u16(*(uint16x4_t *)v98.i8);
      v89.i16[0] = *(_WORD *)&v38[2 * v100.u32[0]];
      v89.i16[1] = *(_WORD *)&v38[2 * v100.u32[1]];
      v89.i16[2] = *(_WORD *)&v38[2 * v100.u32[2]];
      v89.i16[3] = *(_WORD *)&v38[2 * v100.u32[3]];
      v89.i16[4] = *(_WORD *)&v38[2 * v99.u32[0]];
      v89.i16[5] = *(_WORD *)&v38[2 * v99.u32[1]];
      v89.i16[6] = *(_WORD *)&v38[2 * v99.u32[2]];
      v89.i16[7] = *(_WORD *)&v38[2 * v99.u32[3]];
      uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v92, v239), v94, v238), v89, v237), vmaxq_f16(vmaxq_f16(v92, v94), v89), v236), (float16x8_t)0), v67));
      uint32x4_t v102 = vmovl_u16(*(uint16x4_t *)v101.i8);
      float16x8_t v103 = (float16x8_t)vmovl_high_u16(v101);
      uint64_t v104 = v103.u32[0];
      v103.i16[0] = *(_WORD *)&v34[2 * v102.u32[0]];
      __int16 v105 = (__int16 *)&v34[2 * v104];
      __int16 v106 = (__int16 *)&v34[2 * v103.u32[1]];
      __int16 v107 = (__int16 *)&v34[2 * v103.u32[2]];
      __int16 v108 = (__int16 *)&v34[2 * v103.u32[3]];
      v103.i16[1] = *(_WORD *)&v34[2 * v102.u32[1]];
      v103.i16[2] = *(_WORD *)&v34[2 * v102.u32[2]];
      v103.i16[3] = *(_WORD *)&v34[2 * v102.u32[3]];
      v103.i16[4] = *v105;
      v103.i16[5] = *v106;
      v103.i16[6] = *v107;
      v103.i16[7] = *v108;
      float16x8_t v109 = vmulq_f16(v92, v103);
      float16x8_t v110 = vmulq_f16(v94, v103);
      float16x8_t v111 = vmulq_f16(v89, v103);
      float16x8_t v112 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v109, v232), v110, v231), v111, v230);
      float16x8_t v113 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v111, v227), v110, v228), v109, v229);
      uint16x8_t v114 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v109, v235), v110, v234), v111, v233), (float16x8_t)0), v67));
      uint32x4_t v115 = vmovl_high_u16(v114);
      uint32x4_t v116 = vmovl_u16(*(uint16x4_t *)v114.i8);
      v110.i64[1] = v116.u32[3];
      uint64_t v117 = v116.u32[1];
      uint64_t v118 = v116.u32[2];
      v110.i16[0] = *(_WORD *)&v39[2 * v116.u32[0]];
      uint64_t v119 = v115.u32[1];
      uint64_t v120 = v115.u32[0];
      uint64_t v121 = v115.u32[3];
      uint64_t v122 = v115.u32[2];
      uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v112, (float16x8_t)0), v67));
      uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v123.i8);
      uint64_t v125 = v124.u32[1];
      uint64_t v126 = v124.u32[0];
      v110.i16[1] = *(_WORD *)&v39[2 * v117];
      v110.i16[2] = *(_WORD *)&v39[2 * v118];
      v110.i16[3] = *(_WORD *)&v39[2 * v110.i64[1]];
      v110.i16[4] = *(_WORD *)&v39[2 * v120];
      v110.i16[5] = *(_WORD *)&v39[2 * v119];
      v110.i16[6] = *(_WORD *)&v39[2 * v122];
      v110.i16[7] = *(_WORD *)&v39[2 * v121];
      uint32x4_t v127 = vmovl_high_u16(v123);
      uint64_t v128 = v124.u32[3];
      uint64_t v129 = v124.u32[2];
      uint64_t v130 = v127.u32[1];
      uint64_t v131 = v127.u32[0];
      uint64_t v132 = v127.u32[3];
      uint64_t v133 = v127.u32[2];
      uint16x8_t v134 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, (float16x8_t)0), v67));
      int8x16_t v135 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v134.i8);
      uint64_t v136 = v135.u32[1];
      uint64_t v137 = v135.u32[0];
      int8x16_t v138 = (int8x16_t)vmovl_high_u16(v134);
      uint64_t v139 = v135.u32[3];
      uint64_t v140 = v135.u32[2];
      uint64_t v141 = v138.u32[0];
      v135.i16[0] = *(_WORD *)&v39[2 * v126];
      v135.i16[1] = *(_WORD *)&v39[2 * v125];
      v135.i16[2] = *(_WORD *)&v39[2 * v129];
      v135.i16[3] = *(_WORD *)&v39[2 * v128];
      v135.i16[4] = *(_WORD *)&v39[2 * v131];
      v135.i16[5] = *(_WORD *)&v39[2 * v130];
      v135.i16[6] = *(_WORD *)&v39[2 * v133];
      v135.i16[7] = *(_WORD *)&v39[2 * v132];
      v138.i16[0] = *(_WORD *)&v39[2 * v137];
      float v142 = (__int16 *)&v39[2 * v138.u32[1]];
      float v143 = (__int16 *)&v39[2 * v138.u32[2]];
      float v144 = (__int16 *)&v39[2 * v138.u32[3]];
      v138.i16[1] = *(_WORD *)&v39[2 * v136];
      v138.i16[2] = *(_WORD *)&v39[2 * v140];
      v138.i16[3] = *(_WORD *)&v39[2 * v139];
      v138.i16[4] = *(_WORD *)&v39[2 * v141];
      v138.i16[5] = *v142;
      v138.i16[6] = *v143;
      v138.i16[7] = *v144;
      float32x4_t v145 = vcvtq_f32_f16(*(float16x4_t *)v110.i8);
      float32x4_t v146 = vcvtq_f32_f16(*(float16x4_t *)v135.i8);
      float32x4_t v147 = vcvtq_f32_f16(*(float16x4_t *)v138.i8);
      float v148 = v70 + 32;
      vst4q_f32(v70, *(float32x4x4_t *)(&_Q12 - 3));
      float v149 = v70 + 16;
      float32x4_t v150 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL));
      float32x4_t v151 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v135, v135, 8uLL));
      _D2 = (float16x4_t)vextq_s8(v138, v138, 8uLL).u64[0];
      _Q0 = vcvtq_f32_f16(_D2);
      vst4q_f32(v149, *(float32x4x4_t *)(&_Q0 - 2));
      v68 += 8;
      unint64_t v70 = v148;
      if ((int)v68 >= (int)v10 - 7)
      {
        float v152 = &v58[v68];
        unint64_t v153 = v10 & 0xFFFFFFF8;
        goto LABEL_52;
      }
    }
    float16x4_t v73 = 0;
LABEL_15:
    __asm { FMOV            V12.4S, #1.0 }
    float32x4_t v77 = _Q12;
    goto LABEL_16;
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v123 = v22 * *(float *)(v14 + 8);
    float v26 = v22 * *(float *)(v14 + 16);
    float v27 = v22 * *(float *)(v14 + 20);
    float v28 = v22 * *(float *)(v14 + 28);
    float v29 = *(float *)(v14 + 72);
    float v30 = *(float *)(v14 + 76);
    float v31 = *(float *)(v14 + 80);
    float v32 = *(float *)(v14 + 84);
    float v33 = *(float *)(v14 + 88);
    float v34 = *(float *)(v14 + 92);
    float v35 = *(float *)(v14 + 96);
    float v36 = *(float *)(v14 + 100);
    uint64_t v37 = v14 + 164;
    uint64_t v38 = v14 + 16548;
    uint64_t v39 = v14 + 32932;
    float v40 = *(float *)(v14 + 104);
    float v41 = *(float *)(v14 + 108);
    float v42 = *(float *)(v14 + 112);
    float v43 = *(float *)(v14 + 116);
    float v44 = *(float *)(v14 + 120);
    uint64_t v45 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16)
                               + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
                               + 16 * *((void *)result + 14));
    uint64_t v46 = v15[2];
    if (v46) {
      float v47 = (unsigned __int8 *)(v46 + v19 * v12 + v45);
    }
    else {
      float v47 = 0;
    }
    float v50 = v15;
    uint64_t v49 = *v15;
    uint64_t v48 = v50[1];
    if (v48) {
      uint64_t v51 = v48 + v18 * v12 + v45;
    }
    else {
      uint64_t v51 = 0;
    }
    float v52 = (unsigned char *)(v49 + v17 * v12 + v45);
    do
    {
      if (v11)
      {
        unint64_t v53 = 0;
        uint64_t v54 = v52;
        uint64_t v55 = result;
        uint64_t v56 = v47;
        do
        {
          LOBYTE(_S31) = *(unsigned char *)(v51 + v53 + 1);
          *(float *)&unsigned int v57 = (float)_S31;
          float v58 = *(float *)&v57 - v24;
          float v59 = v123 * (float)(*(float *)&v57 - v24);
          LOBYTE(v57) = *v54;
          float v60 = v25 * (float)((float)v57 - v23);
          float v61 = v59 + v60;
          float v62 = 8191.0;
          if ((float)(v59 + v60) <= 8191.0)
          {
            float v62 = v59 + v60;
            if (v61 < 0.0) {
              float v62 = 0.0;
            }
          }
          LOBYTE(v61) = *(unsigned char *)(v51 + v53);
          float v63 = (float)LODWORD(v61) - v24;
          float v64 = (float)(v27 * v58) + (float)(v63 * v26);
          float v65 = 8191.0;
          if ((float)(v60 + v64) <= 8191.0)
          {
            float v65 = v60 + v64;
            if ((float)(v60 + v64) < 0.0) {
              float v65 = 0.0;
            }
          }
          float v66 = v28 * v63;
          float v67 = (float)(v28 * v63) + v60;
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = v67;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          LOBYTE(v67) = v54[1];
          float v69 = v25 * (float)((float)LODWORD(v67) - v23);
          float v70 = v59 + v69;
          BOOL v71 = (float)(v59 + v69) <= 8191.0;
          float v72 = 8191.0;
          if (v71)
          {
            float v72 = v70;
            if (v70 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v64 + v69;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v66 + v69;
          BOOL v71 = (float)(v66 + v69) <= 8191.0;
          float v76 = 8191.0;
          if (v71)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          if (v56)
          {
            unsigned int v77 = *v56;
            unsigned int v78 = v56[1];
            v56 += 2;
          }
          else
          {
            unsigned int v77 = 0;
            unsigned int v78 = 0;
          }
          _S11 = fmaxf(v62, 0.0);
          float v80 = 8191.0;
          LOWORD(_S11) = *(_WORD *)(v37 + 2 * llroundf(fminf(_S11, 8191.0)));
          __asm { FCVT            S11, H11 }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          float v93 = (float)((float)((float)(v42 * _S8) + (float)(v41 * _S11)) + (float)(v43 * _S9))
              + (float)(v44 * fmaxf(_S11, fmaxf(_S8, _S9)));
          float v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          __asm
          {
            FCVT            S10, H10
            FCVT            S12, H12
            FCVT            S13, H13
          }
          _H14 = *(_WORD *)(v38 + 2 * llroundf(v94));
          float v99 = fmaxf(_S10, fmaxf(_S12, _S13));
          float v100 = (float)((float)((float)(v42 * _S12) + (float)(v41 * _S10)) + (float)(v43 * _S13)) + (float)(v44 * v99);
          if (v100 <= 8191.0)
          {
            float v80 = (float)((float)((float)(v42 * _S12) + (float)(v41 * _S10)) + (float)(v43 * _S13)) + (float)(v44 * v99);
            if (v100 < 0.0) {
              float v80 = 0.0;
            }
          }
          __asm { FCVT            S4, H14 }
          float v102 = _S11 * _S4;
          float v103 = _S8 * _S4;
          float v104 = _S9 * _S4;
          _H31 = *(_WORD *)(v38 + 2 * llroundf(v80));
          __asm { FCVT            S31, H31 }
          _S9 = _S10 * _S31;
          _S10 = _S12 * _S31;
          float v109 = _S13 * _S31;
          float v110 = (float)((float)(v30 * v103) + (float)(v102 * v29)) + (float)(v104 * v31);
          float v111 = (float)((float)(v33 * v103) + (float)(v102 * v32)) + (float)(v104 * v34);
          _S4 = (float)((float)(v36 * v103) + (float)(v102 * v35)) + (float)(v104 * v40);
          _S8 = (float)((float)(v30 * _S10) + (float)(_S9 * v29)) + (float)(v109 * v31);
          _S11 = (float)((float)(v33 * _S10) + (float)(_S9 * v32)) + (float)(v109 * v34);
          _S31 = (float)((float)(v36 * _S10) + (float)(_S9 * v35)) + (float)(v109 * v40);
          LOWORD(_S9) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          LOWORD(_S10) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S4) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S8) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          LOWORD(_S11) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          LOWORD(_S31) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S31, 0.0), 8191.0)));
          __asm
          {
            FCVT            S11, H11
            FCVT            S31, H31
          }
          float v121 = (float)v77 * 0.0039216;
          if (!v56) {
            float v121 = 1.0;
          }
          *(_DWORD *)uint64_t v55 = _S9;
          *((_DWORD *)v55 + 1) = _S10;
          *((_DWORD *)v55 + 2) = _S4;
          *((float *)v55 + 3) = v121;
          if (v56) {
            float v122 = (float)v78 * 0.0039216;
          }
          else {
            float v122 = 1.0;
          }
          *((_DWORD *)v55 + 4) = _S8;
          *((_DWORD *)v55 + 5) = _S11;
          *((_DWORD *)v55 + 6) = _S31;
          *((float *)v55 + 7) = v122;
          v53 += 2;
          v54 += 2;
          v55 += 32;
        }
        while (v11 > v53);
      }
      v52 += v17;
      v51 += v18;
      v47 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_RGfA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_RGfA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    unint64_t v9 = *(void *)(result + 20);
    uint64_t v10 = *(void *)(result + 44);
    uint64_t v11 = v6 + v10;
    uint64_t v12 = v7 + v10;
    uint64_t v13 = (float32x2_t *)*((void *)result + 19);
    uint64_t v14 = (uint64_t *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    unsigned int v20 = v13[17].u16[2];
    unsigned int v21 = v13[17].u16[3];
    v22.i32[0] = v13[3].i32[1];
    _S1 = v13[9].f32[1];
    _S2 = v13[10].f32[0];
    _S3 = v13[10].f32[1];
    _S4 = v13[11].f32[0];
    _S5 = v13[11].f32[1];
    _S6 = v13[12].f32[0];
    _S7 = v13[12].f32[1];
    _S16 = v13[13].f32[0];
    uint64_t v31 = v12 - v11;
    uint64_t v32 = (char *)&v13[20] + 4;
    float v33 = (float)v20;
    float v34 = 8191.0 / (float)v13[16].u32[0];
    float v35 = (float)v21;
    _S20 = v34 * v13->f32[0];
    uint64_t v37 = (char *)&v13[2068] + 4;
    __asm { FCVT            H8, S20 }
    *(short float *)v2.i16 = (short float)v20;
    float32x4_t v43 = (float32x4_t)vdupq_lane_s16(v2, 0);
    float16x8_t v182 = (float16x8_t)v43;
    v22.i32[1] = v13[1].i32[0];
    *(float32x2_t *)v3.f32 = vmul_n_f32(v22, v34);
    *(float32x2_t *)v43.f32 = vmul_n_f32(v13[2], v34);
    short float v44 = -(short float)v21;
    float16x8_t v181 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    float16x8_t v178 = vmulq_n_f16(v181, v44);
    float16x8_t v179 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v43), 0);
    float v183 = v13[9].f32[0];
    __asm { FCVT            H0, S0 }
    short float v176 = _H0;
    float16x8_t v177 = vmulq_n_f16(v179, v44);
    __asm { FCVT            H0, S1 }
    short float v175 = _H0;
    __asm { FCVT            H0, S2 }
    short float v174 = _H0;
    __asm { FCVT            H0, S3 }
    short float v173 = _H0;
    __asm { FCVT            H0, S4 }
    short float v172 = _H0;
    __asm { FCVT            H0, S5 }
    short float v171 = _H0;
    __asm { FCVT            H0, S6 }
    short float v170 = _H0;
    __asm { FCVT            H0, S7 }
    short float v169 = _H0;
    __asm { FCVT            H0, S16 }
    short float v168 = _H0;
    uint64_t v54 = v14[2];
    uint64_t v55 = *(void *)(result + 36);
    uint64_t v56 = *v14;
    uint64_t v57 = *(void *)(*((void *)result + 7) + 8);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16)
                               + v19 * (*((void *)result + 13) * a2 / v5 + *((void *)result + 15))
                               + 16 * *((void *)result + 14));
    if (v54) {
      float v58 = (int8x8_t *)(v54 + v18 * v11 + v55);
    }
    else {
      float v58 = 0;
    }
    if (v57) {
      float v59 = (unsigned char *)(v57 + v17 * v11 + v55);
    }
    else {
      float v59 = 0;
    }
    float v60 = (int8x8_t *)(v56 + v16 * v11 + v55);
    uint64_t v61 = v3.i64[0];
    v62.i32[0] = v43.i32[1];
    float v167 = v43.f32[1];
    float v180 = v43.f32[0];
    v63.i64[0] = 0x9000900090009000;
    v63.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v9 < 8)
      {
        unint64_t v114 = 0;
        float16x8_t v113 = v59;
        float v67 = v58;
        float v111 = (float *)result;
        float v65 = v60;
      }
      else
      {
        uint64_t v64 = 0;
        float v65 = v60;
        float v66 = (float *)result;
        float v67 = v58;
        do
        {
          if (v67 && (int8x8_t v68 = *v67, ++v67, v69 = v68, v67))
          {
            *(int8x8_t *)v70.i8 = vzip1_s8(v69, 0);
            v70.u64[1] = (unint64_t)vzip2_s8(v69, 0);
            int8x16_t v71 = (int8x16_t)vmulq_f16(vcvtq_f16_u16(v70), (float16x8_t)vdupq_n_s16(0x1C04u));
            _Q14 = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
            float32x4_t v73 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL));
          }
          else
          {
            __asm { FMOV            V14.4S, #1.0 }
            float32x4_t v73 = _Q14;
          }
          int8x8_t v74 = *(int8x8_t *)&v59[v64];
          *(int8x8_t *)v75.i8 = vzip1_s8(v74, 0);
          v75.u64[1] = (unint64_t)vzip2_s8(v74, 0);
          float16x8_t v76 = vcvtq_f16_u16(v75);
          int8x16_t v77 = (int8x16_t)vmlaq_f16(v178, v181, v76);
          int8x16_t v78 = (int8x16_t)vmlaq_f16(v177, v179, v76);
          v76.i64[0] = vextq_s8(v77, v77, 8uLL).u64[0];
          *(int16x4_t *)v79.i8 = vuzp1_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v76.i8);
          *(int16x4_t *)v76.i8 = vuzp2_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v76.i8);
          v76.i64[1] = v179.i64[0];
          v79.i64[1] = v179.i64[0];
          float16x8_t v80 = (float16x8_t)vzip1q_s16(v79, v79);
          v79.i64[0] = vextq_s8(v78, v78, 8uLL).u64[0];
          *(float16x4_t *)v79.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v78.i8, *(int16x4_t *)v79.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v78.i8, *(int16x4_t *)v79.i8));
          int8x8_t v81 = *v65++;
          *(int8x8_t *)v78.i8 = vzip1_s8(v81, 0);
          v78.u64[1] = (unint64_t)vzip2_s8(v81, 0);
          float16x8_t v82 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v78), v182);
          uint16x8_t v83 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v76, (int16x8_t)v76), v82, _H8), (float16x8_t)0), v63));
          uint32x4_t v84 = vmovl_high_u16(v83);
          float16x8_t v85 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v83.i8);
          v85.i16[0] = *(_WORD *)&v32[2 * v85.u32[0]];
          v85.i16[1] = *(_WORD *)&v32[2 * v85.u32[1]];
          v85.i16[2] = *(_WORD *)&v32[2 * v85.u32[2]];
          v85.i16[3] = *(_WORD *)&v32[2 * v85.u32[3]];
          v85.i16[4] = *(_WORD *)&v32[2 * v84.u32[0]];
          v85.i16[5] = *(_WORD *)&v32[2 * v84.u32[1]];
          v85.i16[6] = *(_WORD *)&v32[2 * v84.u32[2]];
          v85.i16[7] = *(_WORD *)&v32[2 * v84.u32[3]];
          uint16x8_t v86 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16(v79, v79), v82, _H8), (float16x8_t)0), v63));
          uint32x4_t v87 = vmovl_high_u16(v86);
          uint32x4_t v88 = vmovl_u16(*(uint16x4_t *)v86.i8);
          v76.i16[0] = *(_WORD *)&v32[2 * v88.u32[0]];
          v76.i16[1] = *(_WORD *)&v32[2 * v88.u32[1]];
          v76.i16[2] = *(_WORD *)&v32[2 * v88.u32[2]];
          v76.i16[3] = *(_WORD *)&v32[2 * v88.u32[3]];
          v76.i16[4] = *(_WORD *)&v32[2 * v87.u32[0]];
          v76.i16[5] = *(_WORD *)&v32[2 * v87.u32[1]];
          v76.i16[6] = *(_WORD *)&v32[2 * v87.u32[2]];
          v76.i16[7] = *(_WORD *)&v32[2 * v87.u32[3]];
          uint16x8_t v89 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v80, v82, _H8), (float16x8_t)0), v63));
          uint32x4_t v90 = vmovl_high_u16(v89);
          float16x8_t v91 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v89.i8);
          v91.i16[0] = *(_WORD *)&v32[2 * v91.u32[0]];
          v91.i16[1] = *(_WORD *)&v32[2 * v91.u32[1]];
          v91.i16[2] = *(_WORD *)&v32[2 * v91.u32[2]];
          v91.i16[3] = *(_WORD *)&v32[2 * v91.u32[3]];
          v91.i16[4] = *(_WORD *)&v32[2 * v90.u32[0]];
          v91.i16[5] = *(_WORD *)&v32[2 * v90.u32[1]];
          v91.i16[6] = *(_WORD *)&v32[2 * v90.u32[2]];
          v91.i16[7] = *(_WORD *)&v32[2 * v90.u32[3]];
          float16x8_t v92 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v85, v173), v76, v172), v91, v171);
          float16x8_t v93 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v91, v168), v76, v169), v85, v170);
          uint16x8_t v94 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v85, v176), v76, v175), v91, v174), (float16x8_t)0), v63));
          int8x16_t v95 = (int8x16_t)vmovl_high_u16(v94);
          *(void *)&long long v96 = v95.u32[2];
          *((void *)&v96 + 1) = v95.u32[3];
          long long v97 = v96;
          *(void *)&long long v96 = v95.u32[0];
          *((void *)&v96 + 1) = v95.u32[1];
          uint32x4_t v98 = vmovl_u16(*(uint16x4_t *)v94.i8);
          v95.i16[0] = *(_WORD *)&v37[2 * v98.u32[0]];
          v95.i16[1] = *(_WORD *)&v37[2 * v98.u32[1]];
          v95.i16[2] = *(_WORD *)&v37[2 * v98.u32[2]];
          v95.i16[3] = *(_WORD *)&v37[2 * v98.u32[3]];
          v95.i16[4] = *(_WORD *)&v37[2 * v96];
          v95.i16[5] = *(_WORD *)&v37[2 * *((void *)&v96 + 1)];
          v95.i16[6] = *(_WORD *)&v37[2 * v97];
          v95.i16[7] = *(_WORD *)&v37[2 * *((void *)&v97 + 1)];
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v92, (float16x8_t)0), v63));
          uint32x4_t v100 = vmovl_high_u16(v99);
          uint32x4_t v101 = vmovl_u16(*(uint16x4_t *)v99.i8);
          v76.i16[0] = *(_WORD *)&v37[2 * v101.u32[0]];
          v76.i16[1] = *(_WORD *)&v37[2 * v101.u32[1]];
          v76.i16[2] = *(_WORD *)&v37[2 * v101.u32[2]];
          v76.i16[3] = *(_WORD *)&v37[2 * v101.u32[3]];
          v76.i16[4] = *(_WORD *)&v37[2 * v100.u32[0]];
          v76.i16[5] = *(_WORD *)&v37[2 * v100.u32[1]];
          v76.i16[6] = *(_WORD *)&v37[2 * v100.u32[2]];
          v76.i16[7] = *(_WORD *)&v37[2 * v100.u32[3]];
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v93, (float16x8_t)0), v63));
          uint32x4_t v103 = vmovl_high_u16(v102);
          int8x16_t v104 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v102.i8);
          v104.i16[0] = *(_WORD *)&v37[2 * v104.u32[0]];
          v104.i16[1] = *(_WORD *)&v37[2 * v104.u32[1]];
          v104.i16[2] = *(_WORD *)&v37[2 * v104.u32[2]];
          v104.i16[3] = *(_WORD *)&v37[2 * v104.u32[3]];
          v104.i16[4] = *(_WORD *)&v37[2 * v103.u32[0]];
          v104.i16[5] = *(_WORD *)&v37[2 * v103.u32[1]];
          v104.i16[6] = *(_WORD *)&v37[2 * v103.u32[2]];
          v104.i16[7] = *(_WORD *)&v37[2 * v103.u32[3]];
          float32x4_t v105 = vcvtq_f32_f16(*(float16x4_t *)v95.i8);
          float32x4_t v106 = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
          float32x4_t v107 = vcvtq_f32_f16(*(float16x4_t *)v104.i8);
          float32x4_t v108 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL));
          float32x4_t v109 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL));
          float16x4_t v62 = (float16x4_t)vextq_s8(v104, v104, 8uLL).u64[0];
          float32x4_t v110 = vcvtq_f32_f16(v62);
          float v111 = v66 + 32;
          vst4q_f32(v66, *(float32x4x4_t *)(&_Q14 - 3));
          float16x8_t v112 = v66 + 16;
          vst4q_f32(v112, *(float32x4x4_t *)(&v73 - 3));
          v64 += 8;
          float v66 = v111;
        }
        while ((int)v64 < (int)v9 - 7);
        float16x8_t v113 = &v59[v64];
        unint64_t v114 = v9 & 0xFFFFFFF8;
      }
      while (v9 > v114)
      {
        v62.i8[0] = v113[1];
        float v115 = (float)v62.u32[0] - v35;
        unsigned int v116 = HIDWORD(v61);
        float v117 = *((float *)&v61 + 1) * v115;
        LOBYTE(v116) = v65->i8[0];
        float v118 = (float)v116 - v33;
        float v119 = _S20 * v118;
        float v120 = (float)(*((float *)&v61 + 1) * v115) + (float)(_S20 * v118);
        float v121 = 8191.0;
        if (v120 <= 8191.0)
        {
          float v121 = (float)(*((float *)&v61 + 1) * v115) + (float)(_S20 * v118);
          if (v120 < 0.0) {
            float v121 = 0.0;
          }
        }
        LOBYTE(v118) = *v113;
        float v122 = (float)LODWORD(v118) - v35;
        float v123 = (float)(v167 * v115) + (float)(v122 * v180);
        float v124 = 8191.0;
        if ((float)(v119 + v123) <= 8191.0)
        {
          float v124 = v119 + v123;
          if ((float)(v119 + v123) < 0.0) {
            float v124 = 0.0;
          }
        }
        unsigned int v125 = v61;
        float v126 = *(float *)&v61 * v122;
        float v127 = v126 + v119;
        BOOL v128 = (float)(v126 + v119) <= 8191.0;
        float v129 = 8191.0;
        if (v128)
        {
          float v129 = v127;
          if (v127 < 0.0) {
            float v129 = 0.0;
          }
        }
        LOBYTE(v125) = v65->i8[1];
        float v130 = _S20 * (float)((float)v125 - v33);
        float v131 = v117 + v130;
        float v132 = 8191.0;
        if (v131 <= 8191.0)
        {
          float v132 = v131;
          if (v131 < 0.0) {
            float v132 = 0.0;
          }
        }
        float v133 = v123 + v130;
        BOOL v128 = (float)(v123 + v130) <= 8191.0;
        float v134 = 8191.0;
        if (v128)
        {
          float v134 = v133;
          if (v133 < 0.0) {
            float v134 = 0.0;
          }
        }
        float v135 = v126 + v130;
        float v136 = 8191.0;
        if (v135 <= 8191.0)
        {
          float v136 = v135;
          if (v135 < 0.0) {
            float v136 = 0.0;
          }
        }
        if (v67)
        {
          unsigned int v137 = v67->u8[0];
          unsigned int v138 = v67->u8[1];
          float v67 = (int8x8_t *)((char *)v67 + 2);
        }
        else
        {
          unsigned int v137 = 0;
          unsigned int v138 = 0;
        }
        _H0 = *(_WORD *)&v32[2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        _H23 = *(_WORD *)&v32[2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0))];
        __asm { FCVT            S23, H23 }
        _H24 = *(_WORD *)&v32[2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0))];
        __asm { FCVT            S24, H24 }
        _H25 = *(_WORD *)&v32[2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0))];
        __asm { FCVT            S25, H25 }
        _H26 = *(_WORD *)&v32[2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0))];
        __asm { FCVT            S26, H26 }
        _H27 = *(_WORD *)&v32[2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0))];
        __asm { FCVT            S27, H27 }
        float v151 = (float)((float)(_S1 * _S23) + (float)(_S0 * v183)) + (float)(_S24 * _S2);
        float v152 = (float)((float)(_S4 * _S23) + (float)(_S0 * _S3)) + (float)(_S24 * _S5);
        float v153 = (float)((float)(_S7 * _S23) + (float)(_S0 * _S6)) + (float)(_S24 * _S16);
        _S23 = (float)((float)(_S1 * _S26) + (float)(_S25 * v183)) + (float)(_S27 * _S2);
        _S24 = (float)((float)(_S4 * _S26) + (float)(_S25 * _S3)) + (float)(_S27 * _S5);
        float v156 = (float)(_S7 * _S26) + (float)(_S25 * _S6);
        LOWORD(_S26) = *(_WORD *)&v37[2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0))];
        float v157 = v156 + (float)(_S27 * _S16);
        __asm { FCVT            S26, H26 }
        LOWORD(_S27) = *(_WORD *)&v37[2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0))];
        unsigned int v159 = llroundf(fminf(fmaxf(v153, 0.0), 8191.0));
        __asm { FCVT            S0, H27 }
        LOWORD(_S27) = *(_WORD *)&v37[2 * v159];
        __asm { FCVT            S27, H27 }
        LOWORD(_S23) = *(_WORD *)&v37[2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0))];
        __asm { FCVT            S23, H23 }
        LOWORD(_S24) = *(_WORD *)&v37[2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0))];
        __asm { FCVT            S24, H24 }
        _H22 = *(_WORD *)&v37[2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0))];
        __asm { FCVT            S22, H22 }
        float v166 = (float)v137 * 0.0039216;
        if (!v67) {
          float v166 = 1.0;
        }
        *(_DWORD *)float v111 = _S26;
        *((_DWORD *)v111 + 1) = _S0;
        *(float *)v62.i32 = (float)v138 * 0.0039216;
        *((_DWORD *)v111 + 2) = _S27;
        v111[3] = v166;
        if (!v67) {
          *(float *)v62.i32 = 1.0;
        }
        *((_DWORD *)v111 + 4) = _S23;
        *((_DWORD *)v111 + 5) = _S24;
        v114 += 2;
        *((_DWORD *)v111 + 6) = _S22;
        v111[7] = *(float *)v62.i32;
        v113 += 2;
        float v65 = (int8x8_t *)((char *)v65 + 2);
        v111 += 8;
      }
      float v60 = (int8x8_t *)((char *)v60 + v16);
      v59 += v17;
      float v58 = (int8x8_t *)((char *)v58 + v18);
      result += v19;
      ++v8;
    }
    while (v8 != v31);
  }
  return result;
}

uint64_t vt_Copy_422vf_TRC_Mat_TRC_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_TRC_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    float v38 = *(float *)(v14 + 104);
    uint64_t v39 = v14 + 164;
    uint64_t v40 = v14 + 16548;
    uint64_t v41 = *(void *)(result + 36);
    uint64_t v42 = **((void **)result + 16)
        + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
        + 16 * *((void *)result + 14);
    uint64_t v43 = v15[2];
    if (v43) {
      uint64_t result = (unsigned __int8 *)(v43 + v19 * v12 + v41);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v46 = v15;
    uint64_t v45 = *v15;
    uint64_t v44 = v46[1];
    if (v44) {
      uint64_t v47 = v44 + v18 * v12 + v41;
    }
    else {
      uint64_t v47 = 0;
    }
    uint64_t v48 = (unsigned char *)(v45 + v17 * v12 + v41);
    do
    {
      if (v11)
      {
        unint64_t v49 = 0;
        float v50 = v48;
        uint64_t v51 = v42;
        float v52 = result;
        do
        {
          LOBYTE(v5) = *(unsigned char *)(v47 + v49 + 1);
          *(float *)&unsigned int v53 = (float)LODWORD(v5);
          float v54 = *(float *)&v53 - v24;
          float v55 = v26 * (float)(*(float *)&v53 - v24);
          LOBYTE(v53) = *v50;
          float v56 = v25 * (float)((float)v53 - v23);
          float v57 = v55 + v56;
          float v58 = 8191.0;
          if ((float)(v55 + v56) <= 8191.0)
          {
            float v58 = v55 + v56;
            if (v57 < 0.0) {
              float v58 = 0.0;
            }
          }
          LOBYTE(v57) = *(unsigned char *)(v47 + v49);
          float v59 = (float)LODWORD(v57) - v24;
          float v60 = (float)(v28 * v54) + (float)(v59 * v27);
          float v61 = 8191.0;
          if ((float)(v56 + v60) <= 8191.0)
          {
            float v61 = v56 + v60;
            if ((float)(v56 + v60) < 0.0) {
              float v61 = 0.0;
            }
          }
          float v62 = v29 * v59;
          float v63 = v62 + v56;
          BOOL v64 = (float)(v62 + v56) <= 8191.0;
          float v65 = 8191.0;
          if (v64)
          {
            float v65 = v63;
            if (v63 < 0.0) {
              float v65 = 0.0;
            }
          }
          LOBYTE(v63) = v50[1];
          float v66 = v25 * (float)((float)LODWORD(v63) - v23);
          float v67 = v55 + v66;
          BOOL v64 = (float)(v55 + v66) <= 8191.0;
          float v68 = 8191.0;
          if (v64)
          {
            float v68 = v67;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v60 + v66;
          BOOL v64 = (float)(v60 + v66) <= 8191.0;
          float v70 = 8191.0;
          if (v64)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v62 + v66;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          if (v52)
          {
            unsigned int v73 = *v52;
            unsigned int v74 = v52[1];
            v52 += 2;
          }
          else
          {
            unsigned int v73 = 0;
            unsigned int v74 = 0;
          }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v58, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm
          {
            FCVT            S31, H31
            FCVT            S8, H8
          }
          float v91 = (float)((float)(v31 * _S28) + (float)(_S27 * v30)) + (float)(_S29 * v32);
          float v92 = (float)((float)(v34 * _S28) + (float)(_S27 * v33)) + (float)(_S29 * v35);
          _S27 = (float)((float)(v37 * _S28) + (float)(_S27 * v36)) + (float)(_S29 * v38);
          _S28 = (float)((float)(v31 * _S31) + (float)(_S30 * v30)) + (float)(_S8 * v32);
          _S29 = (float)((float)(v34 * _S31) + (float)(_S30 * v33)) + (float)(_S8 * v35);
          _S30 = (float)((float)(v37 * _S31) + (float)(_S30 * v36)) + (float)(_S8 * v38);
          LOWORD(_S31) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          LOWORD(_S8) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          LOWORD(_S27) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S27, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          LOWORD(_S28) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S28, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          LOWORD(_S29) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S29, 0.0), 8191.0)));
          LOWORD(_S30) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S30, 0.0), 8191.0)));
          __asm
          {
            FCVT            S29, H29
            FCVT            S30, H30
          }
          float v103 = (float)v73 * 0.0039216;
          if (!v52) {
            float v103 = 1.0;
          }
          *(_DWORD *)uint64_t v51 = _S31;
          *(_DWORD *)(v51 + 4) = _S8;
          *(_DWORD *)(v51 + 8) = _S27;
          *(float *)(v51 + 12) = v103;
          if (v52) {
            float v5 = (float)v74 * 0.0039216;
          }
          else {
            float v5 = 1.0;
          }
          *(_DWORD *)(v51 + 16) = _S28;
          *(_DWORD *)(v51 + 20) = _S29;
          *(_DWORD *)(v51 + 24) = _S30;
          *(float *)(v51 + 28) = v5;
          v49 += 2;
          v50 += 2;
          v51 += 32;
        }
        while (v11 > v49);
      }
      v48 += v17;
      v47 += v18;
      result += v19;
      v42 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_RGfA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_RGfA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_RGfA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, int16x4_t a8, float32x4_t a9)
{
  uint64_t v14 = *(void *)(result + 28);
  unint64_t v15 = *result;
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (v17 != v16)
  {
    uint64_t v18 = 0;
    unint64_t v19 = *(void *)(result + 20);
    uint64_t v20 = *(void *)(result + 44);
    uint64_t v21 = v16 + v20;
    uint64_t v22 = v17 + v20;
    uint64_t v23 = (float32x2_t *)*((void *)result + 19);
    float v25 = (uint64_t *)*((void *)result + 7);
    uint64_t v24 = (uint64_t *)*((void *)result + 8);
    uint64_t v26 = *v24;
    uint64_t v27 = v24[1];
    uint64_t v28 = v24[2];
    uint64_t v29 = **((void **)result + 17);
    unsigned int v30 = v23[17].u16[2];
    unsigned int v31 = v23[17].u16[3];
    a9.i32[0] = v23[3].i32[1];
    uint64_t v32 = v22 - v21;
    LODWORD(a3) = 1.0;
    v9.f32[0] = 1.0 / (float)v23[16].u32[0];
    float v33 = (float)v30;
    float v34 = (float)v31;
    _S3 = v9.f32[0] * v23->f32[0];
    __asm { FCVT            H4, S3 }
    *(short float *)a8.i16 = (short float)v30;
    float16x8_t v41 = (float16x8_t)vdupq_lane_s16(a8, 0);
    a9.i32[1] = v23[1].i32[0];
    *(float32x2_t *)a9.f32 = vmul_n_f32(*(float32x2_t *)a9.f32, v9.f32[0]);
    float16x8_t v42 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a9), 0);
    short float v43 = -(short float)v31;
    *(float32x2_t *)v9.f32 = vmul_n_f32(v23[2], v9.f32[0]);
    float16x8_t v44 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v9), 0);
    float16x8_t v45 = vmulq_n_f16(v42, v43);
    float16x8_t v46 = vmulq_n_f16(v44, v43);
    uint64_t v47 = v25[2];
    uint64_t v48 = *(void *)(result + 36);
    uint64_t v50 = *v25;
    uint64_t v49 = v25[1];
    uint64_t v51 = (__int8 *)(v49 + v27 * v21 + v48);
    uint64_t v52 = **((void **)result + 16)
        + v29 * (*((void *)result + 13) * a2 / v15 + *((void *)result + 15))
        + 16 * *((void *)result + 14);
    if (v47) {
      unsigned int v53 = (int8x8_t *)(v47 + v28 * v21 + v48);
    }
    else {
      unsigned int v53 = 0;
    }
    if (!v49) {
      uint64_t v51 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v50 + v26 * v21 + v48);
    __asm { FMOV            V23.4S, #1.0 }
    do
    {
      if ((int)v19 < 8)
      {
        unint64_t v82 = 0;
        int8x8_t v81 = v51;
        float v58 = v53;
        int16x8_t v79 = (float *)v52;
        float v56 = (int8x8_t *)result;
      }
      else
      {
        uint64_t v55 = 0;
        float v56 = (int8x8_t *)result;
        float v57 = (float *)v52;
        float v58 = v53;
        do
        {
          if (v58)
          {
            int8x8_t v59 = *v58++;
            *(int8x8_t *)v60.i8 = vzip1_s8(v59, 0);
            v60.u64[1] = (unint64_t)vzip2_s8(v59, 0);
            int8x16_t v61 = (int8x16_t)vmulq_f16(vcvtq_f16_u16(v60), (float16x8_t)vdupq_n_s16(0x1C04u));
            float32x4_t v12 = vcvtq_f32_f16(*(float16x4_t *)v61.i8);
            float32x4_t v62 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL));
          }
          else
          {
            float32x4_t v12 = _Q23;
            float32x4_t v62 = _Q23;
          }
          int8x8_t v63 = *(int8x8_t *)&v51[v55];
          *(int8x8_t *)v64.i8 = vzip1_s8(v63, 0);
          v64.u64[1] = (unint64_t)vzip2_s8(v63, 0);
          float16x8_t v65 = vcvtq_f16_u16(v64);
          int16x8_t v66 = (int16x8_t)vmlaq_f16(v45, v42, v65);
          int8x16_t v67 = (int8x16_t)vmlaq_f16(v46, v44, v65);
          v65.i64[0] = vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL).u64[0];
          *(int16x4_t *)v68.i8 = vuzp1_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v65.i8);
          *(int16x4_t *)v65.i8 = vuzp2_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v65.i8);
          *(double *)&v65.i64[1] = a3;
          *(double *)&v68.i64[1] = a3;
          v66.i64[0] = vextq_s8(v67, v67, 8uLL).u64[0];
          *(float16x4_t *)v66.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v67.i8, *(int16x4_t *)v66.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v67.i8, *(int16x4_t *)v66.i8));
          *(double *)&v66.i64[1] = a3;
          float16x8_t v69 = (float16x8_t)vzip1q_s16(v68, v68);
          int8x8_t v70 = *v56++;
          *(int8x8_t *)v71.i8 = vzip1_s8(v70, 0);
          v71.u64[1] = (unint64_t)vzip2_s8(v70, 0);
          float16x8_t v72 = vsubq_f16(vcvtq_f16_u16(v71), v41);
          int8x16_t v73 = (int8x16_t)vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v65, (int16x8_t)v65), v72, _H4);
          int8x16_t v74 = (int8x16_t)vmlaq_n_f16((float16x8_t)vzip1q_s16(v66, v66), v72, _H4);
          int8x16_t v75 = (int8x16_t)vmlaq_n_f16(v69, v72, _H4);
          float32x4_t v10 = vcvtq_f32_f16(*(float16x4_t *)v73.i8);
          float32x4_t v11 = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
          float32x4_t v76 = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
          float32x4_t v13 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL));
          float32x4_t v77 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL));
          float32x4_t v78 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL));
          int16x8_t v79 = v57 + 32;
          vst4q_f32(v57, *(float32x4x4_t *)v10.f32);
          float16x8_t v80 = v57 + 16;
          vst4q_f32(v80, *(float32x4x4_t *)v13.f32);
          v55 += 8;
          float v57 = v79;
        }
        while ((int)v55 < (int)v19 - 7);
        int8x8_t v81 = &v51[v55];
        unint64_t v82 = v19 & 0xFFFFFFF8;
      }
      while (v19 > v82)
      {
        if (v58)
        {
          unsigned int v83 = v58->u8[0];
          unsigned int v84 = v58->u8[1];
          float v58 = (int8x8_t *)((char *)v58 + 2);
        }
        else
        {
          unsigned int v83 = 0;
          unsigned int v84 = 0;
        }
        v10.i8[0] = *v81;
        float v85 = (float)v10.u32[0] - v34;
        v11.i8[0] = v81[1];
        float v86 = (float)v11.u32[0] - v34;
        float v87 = a9.f32[1] * v86;
        float v88 = (float)(v9.f32[1] * v86) + (float)(v85 * v9.f32[0]);
        float v89 = a9.f32[0] * v85;
        v12.i8[0] = v56->i8[0];
        float v90 = _S3 * (float)((float)v12.u32[0] - v33);
        v13.i8[0] = v56->i8[1];
        float v91 = _S3 * (float)((float)v13.u32[0] - v33);
        float v92 = v87 + v90;
        float v93 = v90 + v88;
        v12.f32[0] = v89 + v90;
        float v94 = v87 + v91;
        v11.f32[0] = v88 + v91;
        v10.f32[0] = v89 + v91;
        v13.f32[0] = (float)v83 * 0.0039216;
        if (!v58) {
          v13.f32[0] = 1.0;
        }
        *int16x8_t v79 = v92;
        v79[1] = v93;
        v79[2] = v12.f32[0];
        v79[3] = v13.f32[0];
        if (v58) {
          v12.f32[0] = (float)v84 * 0.0039216;
        }
        else {
          v12.f32[0] = 1.0;
        }
        v79[4] = v94;
        v79[5] = v11.f32[0];
        v82 += 2;
        v79[6] = v10.f32[0];
        v79[7] = v12.f32[0];
        v81 += 2;
        float v56 = (int8x8_t *)((char *)v56 + 2);
        v79 += 8;
      }
      result += v26;
      v51 += v27;
      unsigned int v53 = (int8x8_t *)((char *)v53 + v28);
      v52 += v29;
      ++v18;
    }
    while (v18 != v32);
  }
  return result;
}

uint64_t vt_Copy_422vf_rgb_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_422vf_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_422vf_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = *result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    unint64_t v14 = *(void *)(result + 20);
    unint64_t v15 = v11 + *(void *)(result + 44);
    unint64_t v16 = v12 - v11;
    uint64_t v17 = *((void *)result + 19);
    uint64_t v19 = (uint64_t *)*((void *)result + 7);
    uint64_t v18 = (uint64_t *)*((void *)result + 8);
    uint64_t v20 = *v18;
    uint64_t v21 = v18[1];
    uint64_t v22 = v18[2];
    uint64_t v23 = **((void **)result + 17);
    *(float *)&unsigned int v24 = (float)*(unsigned int *)(v17 + 128);
    float v25 = 1.0 / *(float *)&v24;
    LOWORD(v24) = *(_WORD *)(v17 + 140);
    float v26 = (float)v24;
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v27 = (float)LODWORD(a5);
    float v28 = v25 * *(float *)v17;
    float v29 = v25 * *(float *)(v17 + 8);
    float v30 = v25 * *(float *)(v17 + 16);
    float v31 = v25 * *(float *)(v17 + 20);
    float v32 = v25 * *(float *)(v17 + 28);
    uint64_t v33 = *((void *)result + 14);
    uint64_t v34 = (void *)*((void *)result + 16);
    unint64_t v35 = *((void *)result + 13) * a2 / v10 + *((void *)result + 15);
    uint64_t v36 = *(void *)(result + 36);
    uint64_t v37 = *v34 + v35 * v23 + 16 * v33;
    uint64_t v38 = v19[2];
    if (v38) {
      uint64_t v39 = (unsigned __int8 *)(v38 + v22 * v15 + v36);
    }
    else {
      uint64_t v39 = 0;
    }
    uint64_t v41 = *v19;
    uint64_t v40 = v19[1];
    uint64_t v42 = v40 + v21 * v15 + v36;
    if (!v40) {
      uint64_t v42 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v41 + v20 * v15 + v36);
    do
    {
      if (v14)
      {
        unint64_t v43 = 0;
        float16x8_t v44 = result;
        float16x8_t v45 = (float *)v37;
        float16x8_t v46 = v39;
        do
        {
          if (v46)
          {
            unsigned int v47 = *v46;
            unsigned int v48 = v46[1];
            v46 += 2;
          }
          else
          {
            unsigned int v47 = 0;
            unsigned int v48 = 0;
          }
          LOBYTE(v5) = *(unsigned char *)(v42 + v43);
          float v49 = (float)LODWORD(v5) - v27;
          LOBYTE(v6) = *(unsigned char *)(v42 + v43 + 1);
          float v50 = (float)LODWORD(v6) - v27;
          float v51 = v29 * v50;
          float v52 = (float)(v31 * v50) + (float)(v49 * v30);
          float v53 = v32 * v49;
          LOBYTE(v7) = *v44;
          float v54 = v28 * (float)((float)LODWORD(v7) - v26);
          LOBYTE(v8) = v44[1];
          float v55 = v28 * (float)((float)LODWORD(v8) - v26);
          float v56 = v51 + v54;
          float v57 = v54 + v52;
          float v58 = v53 + v54;
          float v59 = v51 + v55;
          float v6 = v52 + v55;
          float v5 = v53 + v55;
          float v8 = (float)v47 * 0.0039216;
          if (!v46) {
            float v8 = 1.0;
          }
          float *v45 = v56;
          v45[1] = v57;
          v45[2] = v58;
          v45[3] = v8;
          if (v46) {
            float v7 = (float)v48 * 0.0039216;
          }
          else {
            float v7 = 1.0;
          }
          v45[4] = v59;
          v45[5] = v6;
          v45[6] = v5;
          v45[7] = v7;
          v43 += 2;
          v44 += 2;
          v45 += 8;
        }
        while (v14 > v43);
      }
      result += v20;
      v42 += v21;
      v39 += v22;
      v37 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t VTCMSessionIsSupported()
{
  if (VTCMSessionIsSupported_onceToken != -1) {
    dispatch_once_f(&VTCMSessionIsSupported_onceToken, &VTCMSessionIsSupported_cmSessionIsSupported, (dispatch_function_t)vt_checkCMSessionIsSupported);
  }
  return VTCMSessionIsSupported_cmSessionIsSupported;
}

unsigned char *vt_checkCMSessionIsSupported(unsigned char *result)
{
  if (MEMORY[0x1E4F74F58]) {
    BOOL v1 = MEMORY[0x1E4F74F50] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  BOOL v3 = v1 || MEMORY[0x1E4F74F48] == 0 || MEMORY[0x1E4F74F40] == 0;
  if (!v3
    && *MEMORY[0x1E4F75880]
    && *MEMORY[0x1E4F75C98]
    && *MEMORY[0x1E4F75D30]
    && *MEMORY[0x1E4F75DA8]
    && *MEMORY[0x1E4F75ED0]
    && *MEMORY[0x1E4F75FA0]
    && *MEMORY[0x1E4F75FB8])
  {
    if (*MEMORY[0x1E4F750A0]) {
      *uint64_t result = 1;
    }
  }
  return result;
}

uint64_t CMSessionAddResource(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4) {
    *a4 = 0;
  }
  return 0;
}

uint64_t CMSessionRemoveResource()
{
  return 0;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

char *vt_Copy_BGRA_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v9 = 0;
  unint64_t v10 = *(void *)(a1 + 20);
  uint64_t v353 = *(void *)(a1 + 36);
  uint64_t v11 = *(void *)(a1 + 44);
  uint64_t v12 = *(void *)(a1 + 28);
  unint64_t v13 = 2 * *a1;
  uint64_t v14 = 2 * (v12 * a2 / v13);
  uint64_t v15 = v11 + v14;
  uint64_t v16 = 2 * ((v12 + v12 * a2) / v13);
  uint64_t v17 = v11 + v16;
  uint64_t v18 = *((void *)a1 + 14);
  unint64_t v19 = *((void *)a1 + 13) * a2;
  uint64_t v20 = *((void *)a1 + 19);
  uint64_t v22 = *((void *)a1 + 15);
  uint64_t v21 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v23 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v24 = **((void **)a1 + 8);
  uint64_t v25 = **((void **)a1 + 7);
  uint64_t v296 = *v23;
  uint64_t v26 = v23[1];
  uint64_t v27 = v23[2];
  uint64_t v349 = *v21;
  uint64_t v28 = v21[1];
  uint64_t v29 = v21[2];
  uint64_t v330 = v28;
  unsigned int v30 = *(_DWORD *)(v20 + 128);
  int v357 = *(_DWORD *)(v20 + 154);
  unsigned int v31 = *(unsigned __int16 *)(v20 + 144);
  unsigned int v32 = *(unsigned __int16 *)(v20 + 146);
  unsigned int v33 = *(unsigned __int16 *)(v20 + 148);
  unsigned int v34 = *(unsigned __int16 *)(v20 + 150);
  unsigned int v35 = *(unsigned __int16 *)(v20 + 152);
  float v347 = *(float *)(v20 + 36);
  float v346 = *(float *)(v20 + 40);
  a6.i32[0] = *(_DWORD *)(v20 + 48);
  float v345 = *(float *)(v20 + 44);
  v37.i32[0] = *(_DWORD *)(v20 + 52);
  v36.i32[0] = *(_DWORD *)(v20 + 56);
  unsigned __int32 v38 = *(_DWORD *)(v20 + 60);
  a7.i32[0] = *(_DWORD *)(v20 + 64);
  uint64_t v39 = v22 + 2 * (v19 / v13);
  a5.i32[0] = *(_DWORD *)(v20 + 68);
  float v344 = *(float *)(v20 + 72);
  float v343 = *(float *)(v20 + 76);
  float v342 = *(float *)(v20 + 80);
  if (v39 >= 0) {
    uint64_t v40 = v22 + 2 * (v19 / v13);
  }
  else {
    uint64_t v40 = v39 + 1;
  }
  float v341 = *(float *)(v20 + 84);
  float v340 = *(float *)(v20 + 88);
  uint64_t v295 = v26;
  uint64_t v41 = v26 * (v40 >> 1);
  float v339 = *(float *)(v20 + 92);
  float v338 = *(float *)(v20 + 96);
  float v337 = *(float *)(v20 + 100);
  _S22 = *(float *)(v20 + 108);
  float v336 = *(float *)(v20 + 104);
  _S23 = *(float *)(v20 + 112);
  _S29 = *(float *)(v20 + 116);
  _S10 = *(float *)(v20 + 120);
  long long v355 = 0u;
  long long v356 = 0u;
  do
  {
    unsigned int v46 = 0;
    char v47 = *((unsigned char *)&v357 + v9);
    do
    {
      uint64_t result = (char *)&v355 + 8 * ((v9 + (v46 >> 3)) & 0x1F);
      result[v46] = v47 + 4 * v46;
      ++v46;
    }
    while (v46 != 8);
    ++v9;
  }
  while (v9 != 4);
  uint64_t v49 = v296;
  if (v16 != v14)
  {
    unint64_t v50 = 0;
    unint64_t v294 = v17 - v15;
    *(float *)&_Q6 = (float)v30;
    uint64_t v52 = v20 + 16548;
    float v335 = (float)v31;
    *(float *)v53.i32 = (float)v32;
    float v333 = (float)v33;
    float v348 = (float)v34;
    _S25 = 8191.0 / (float)v30;
    a6.i32[1] = v38;
    __asm { FMOV            V5.2S, #0.25 }
    v37.i32[1] = a7.i32[0];
    *(float32x2_t *)a6.f32 = vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)&_Q5);
    *(float32x2_t *)a7.f32 = vmul_f32(v37, *(float32x2_t *)&_Q5);
    v36.i32[1] = a5.i32[0];
    *(float32x2_t *)a5.f32 = vmul_f32(v36, *(float32x2_t *)&_Q5);
    uint64_t v60 = v20 + 32932;
    uint64_t v61 = v20 + 164;
    _S0 = v347;
    __asm { FCVT            H0, S0 }
    short float v327 = *(short float *)&_S0;
    _S1 = v346;
    __asm { FCVT            H1, S1 }
    float16x8_t v325 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a6), 0);
    short float v326 = *(short float *)&_S1;
    _S1 = v345;
    __asm { FCVT            H1, S1 }
    float16x8_t v323 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a7), 0);
    short float v324 = *(short float *)&_S1;
    _D0 = (int16x4_t)vcvt_f16_f32(a5);
    int32x4_t v66 = vdupq_lane_s32((int32x2_t)_D0, 0);
    __asm { FCVT            H0, S22 }
    short float v321 = *(short float *)_D0.i16;
    float16x8_t v322 = (float16x8_t)v66;
    __asm { FCVT            H0, S23 }
    short float v320 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S29 }
    short float v319 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S10 }
    short float v318 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v344;
    __asm { FCVT            H0, S0 }
    short float v317 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v343;
    __asm { FCVT            H0, S0 }
    short float v316 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v342;
    __asm { FCVT            H0, S0 }
    short float v315 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v341;
    __asm { FCVT            H0, S0 }
    short float v314 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v340;
    __asm { FCVT            H0, S0 }
    short float v313 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v339;
    __asm { FCVT            H0, S0 }
    short float v312 = *(short float *)_D0.i16;
    *(short float *)_D0.i16 = (short float)v31;
    int16x8_t v67 = vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v32;
    int16x8_t v68 = vdupq_lane_s16(_D0, 0);
    float16x8_t v310 = (float16x8_t)v68;
    float16x8_t v311 = (float16x8_t)v67;
    *(short float *)v68.i16 = (short float)v33;
    int16x8_t v69 = vdupq_lane_s16(*(int16x4_t *)v68.i8, 0);
    *(short float *)v68.i16 = (short float)v34;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)v68.i8, 0);
    float16x8_t v308 = (float16x8_t)_Q0;
    float16x8_t v309 = (float16x8_t)v69;
    *(float *)_Q0.i32 = v338;
    __asm { FCVT            H0, S0 }
    short float v307 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v35;
    int16x8_t v71 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    if (v29) {
      uint64_t v72 = v29 + v27 * v39 + v18;
    }
    else {
      uint64_t v72 = 0;
    }
    uint64_t result = (char *)(v330 + v41 + v18);
    int8x16_t v73 = (int8x8_t *)(v349 + v296 * v39 + v18);
    int8x16_t v74 = (char *)(v25 + v24 * v15 + 4 * v353);
    _S0 = v337;
    __asm { FCVT            H0, S0 }
    unsigned __int32 v305 = LODWORD(_S0);
    float16x8_t v306 = (float16x8_t)v71;
    _S0 = v336;
    __asm { FCVT            H0, S0 }
    short float v304 = *(short float *)&_S0;
    __asm { FCVT            H0, S25 }
    short float v303 = *(short float *)&_S0;
    float v329 = a7.f32[0];
    unsigned int v77 = a6.u32[1];
    float v331 = a6.f32[0];
    float v301 = a7.f32[1];
    float v302 = a6.f32[1];
    LODWORD(v78) = a5.i32[1];
    float v328 = a5.f32[0];
    float v299 = _S23;
    float v300 = a5.f32[1];
    float v334 = (float)v32;
    float v332 = (float)v35;
    float v297 = _S10;
    float v298 = 8191.0 / (float)v30;
    do
    {
      int16x8_t v79 = &v74[v24];
      float16x8_t v80 = (char *)v73 + v49;
      uint64_t v81 = v72 + v27;
      if ((int)v10 < 8)
      {
        unint64_t v181 = 0;
        float v85 = &v74[v24];
        unsigned int v84 = (int8x8_t *)((char *)v73 + v49);
        float v180 = result;
        unsigned int v83 = (int8x8_t *)(v72 + v27);
      }
      else
      {
        uint64_t v82 = 0;
        unsigned int v83 = (int8x8_t *)(v72 + v27);
        unsigned int v84 = (int8x8_t *)((char *)v73 + v49);
        float v85 = &v74[v24];
        do
        {
          int8x8_t v354 = *(int8x8_t *)((char *)&v356 + 8);
          *(void *)&long long v78 = *(void *)v74;
          uint64_t v86 = *((void *)v74 + 1);
          a5.i64[0] = *((void *)v74 + 2);
          unint64_t v87 = *((void *)v74 + 3);
          v74 += 32;
          *((void *)&v78 + 1) = v86;
          a5.i64[1] = v87;
          float32x4_t v88 = a5;
          int8x8_t v89 = vqtbl2_s8(*(int8x16x2_t *)&v78, *(int8x8_t *)&v355);
          int8x8_t v90 = vqtbl2_s8(*(int8x16x2_t *)&v78, *(int8x8_t *)((char *)&v355 + 8));
          long long v350 = v78;
          float32x4_t v351 = a5;
          unsigned __int32 v352 = a5.u32[0];
          int8x8_t v91 = vqtbl2_s8(*(int8x16x2_t *)&v78, *(int8x8_t *)&v356);
          *(int8x8_t *)v92.i8 = vzip1_s8(v89, 0);
          v92.u64[1] = (unint64_t)vzip2_s8(v89, 0);
          float16x8_t v93 = vcvtq_f16_u16(v92);
          *(int8x8_t *)v92.i8 = vzip1_s8(v90, 0);
          v92.u64[1] = (unint64_t)vzip2_s8(v90, 0);
          *(int8x8_t *)v94.i8 = vzip1_s8(v91, 0);
          v94.u64[1] = (unint64_t)vzip2_s8(v91, 0);
          float16x8_t v95 = vcvtq_f16_u16(v92);
          float16x8_t v96 = vcvtq_f16_u16(v94);
          float16x8_t v97 = vmulq_n_f16(v93, v303);
          *(void *)&long long v99 = *(void *)v85;
          v94.i64[0] = *((void *)v85 + 1);
          *(void *)&_Q6 = *((void *)v85 + 2);
          v92.i64[0] = *((void *)v85 + 3);
          v85 += 32;
          float16x8_t v98 = vmulq_n_f16(v96, v303);
          *((void *)&v99 + 1) = v94.i64[0];
          *((void *)&_Q6 + 1) = v92.i64[0];
          _Q5 = _Q6;
          int8x8_t v100 = vqtbl2_s8(*(int8x16x2_t *)(&_Q5 - 1), *(int8x8_t *)&v355);
          int8x8_t v101 = vqtbl2_s8(*(int8x16x2_t *)(&_Q5 - 1), *(int8x8_t *)((char *)&v355 + 8));
          int8x8_t v102 = vqtbl2_s8(*(int8x16x2_t *)(&_Q5 - 1), *(int8x8_t *)&v356);
          *(int8x8_t *)v96.i8 = vzip1_s8(v100, 0);
          v96.u64[1] = (unint64_t)vzip2_s8(v100, 0);
          *(int8x8_t *)v103.i8 = vzip1_s8(v101, 0);
          v103.u64[1] = (unint64_t)vzip2_s8(v101, 0);
          float16x8_t v104 = vcvtq_f16_u16((uint16x8_t)v96);
          *(int8x8_t *)v96.i8 = vzip1_s8(v102, 0);
          v96.u64[1] = (unint64_t)vzip2_s8(v102, 0);
          float16x8_t v105 = vmulq_n_f16(vcvtq_f16_u16(v103), v303);
          v106.i64[0] = 0x9000900090009000;
          v106.i64[1] = 0x9000900090009000;
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v97, (float16x8_t)0), v106));
          uint32x4_t v108 = vmovl_high_u16(v107);
          float16x8_t v109 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v107.i8);
          v109.i16[0] = *(_WORD *)(v61 + 2 * v109.u32[0]);
          v109.i16[1] = *(_WORD *)(v61 + 2 * v109.u32[1]);
          v109.i16[2] = *(_WORD *)(v61 + 2 * v109.u32[2]);
          v109.i16[3] = *(_WORD *)(v61 + 2 * v109.u32[3]);
          v109.i16[4] = *(_WORD *)(v61 + 2 * v108.u32[0]);
          v109.i16[5] = *(_WORD *)(v61 + 2 * v108.u32[1]);
          v109.i16[6] = *(_WORD *)(v61 + 2 * v108.u32[2]);
          v109.i16[7] = *(_WORD *)(v61 + 2 * v108.u32[3]);
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(v95, v303), (float16x8_t)0), v106));
          uint32x4_t v111 = vmovl_high_u16(v110);
          float16x8_t v112 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v110.i8);
          v112.i16[0] = *(_WORD *)(v61 + 2 * v112.u32[0]);
          v112.i16[1] = *(_WORD *)(v61 + 2 * v112.u32[1]);
          v112.i16[2] = *(_WORD *)(v61 + 2 * v112.u32[2]);
          v112.i16[3] = *(_WORD *)(v61 + 2 * v112.u32[3]);
          v112.i16[4] = *(_WORD *)(v61 + 2 * v111.u32[0]);
          v112.i16[5] = *(_WORD *)(v61 + 2 * v111.u32[1]);
          v112.i16[6] = *(_WORD *)(v61 + 2 * v111.u32[2]);
          v112.i16[7] = *(_WORD *)(v61 + 2 * v111.u32[3]);
          uint16x8_t v113 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v98, (float16x8_t)0), v106));
          float16x8_t v114 = (float16x8_t)vmovl_high_u16(v113);
          *(void *)&long long v115 = v114.u32[2];
          *((void *)&v115 + 1) = v114.u32[3];
          long long v116 = v115;
          *(void *)&long long v115 = v114.u32[0];
          *((void *)&v115 + 1) = v114.u32[1];
          uint32x4_t v117 = vmovl_u16(*(uint16x4_t *)v113.i8);
          v114.i16[0] = *(_WORD *)(v61 + 2 * v117.u32[0]);
          v114.i16[1] = *(_WORD *)(v61 + 2 * v117.u32[1]);
          v114.i16[2] = *(_WORD *)(v61 + 2 * v117.u32[2]);
          v114.i16[3] = *(_WORD *)(v61 + 2 * v117.u32[3]);
          v114.i16[4] = *(_WORD *)(v61 + 2 * v115);
          v114.i16[5] = *(_WORD *)(v61 + 2 * *((void *)&v115 + 1));
          v114.i16[6] = *(_WORD *)(v61 + 2 * v116);
          v114.i16[7] = *(_WORD *)(v61 + 2 * *((void *)&v116 + 1));
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(v104, v303), (float16x8_t)0), v106));
          uint32x4_t v119 = vmovl_high_u16(v118);
          float16x8_t v120 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v118.i8);
          v120.i16[0] = *(_WORD *)(v61 + 2 * v120.u32[0]);
          v120.i16[1] = *(_WORD *)(v61 + 2 * v120.u32[1]);
          v120.i16[2] = *(_WORD *)(v61 + 2 * v120.u32[2]);
          v120.i16[3] = *(_WORD *)(v61 + 2 * v120.u32[3]);
          v120.i16[4] = *(_WORD *)(v61 + 2 * v119.u32[0]);
          v120.i16[5] = *(_WORD *)(v61 + 2 * v119.u32[1]);
          v120.i16[6] = *(_WORD *)(v61 + 2 * v119.u32[2]);
          v120.i16[7] = *(_WORD *)(v61 + 2 * v119.u32[3]);
          uint16x8_t v121 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v105, (float16x8_t)0), v106));
          float16x8_t v122 = (float16x8_t)vmovl_high_u16(v121);
          *(void *)&long long v115 = v122.u32[2];
          *((void *)&v115 + 1) = v122.u32[3];
          long long v123 = v115;
          *(void *)&long long v115 = v122.u32[0];
          *((void *)&v115 + 1) = v122.u32[1];
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v121.i8);
          v122.i16[0] = *(_WORD *)(v61 + 2 * v124.u32[0]);
          v122.i16[1] = *(_WORD *)(v61 + 2 * v124.u32[1]);
          v122.i16[2] = *(_WORD *)(v61 + 2 * v124.u32[2]);
          v122.i16[3] = *(_WORD *)(v61 + 2 * v124.u32[3]);
          v122.i16[4] = *(_WORD *)(v61 + 2 * v115);
          v122.i16[5] = *(_WORD *)(v61 + 2 * *((void *)&v115 + 1));
          v122.i16[6] = *(_WORD *)(v61 + 2 * v123);
          v122.i16[7] = *(_WORD *)(v61 + 2 * *((void *)&v123 + 1));
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16((uint16x8_t)v96), v303), (float16x8_t)0), v106));
          uint32x4_t v126 = vmovl_high_u16(v125);
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v125.i8);
          v96.i16[0] = *(_WORD *)(v61 + 2 * v127.u32[0]);
          v96.i16[1] = *(_WORD *)(v61 + 2 * v127.u32[1]);
          v96.i16[2] = *(_WORD *)(v61 + 2 * v127.u32[2]);
          v96.i16[3] = *(_WORD *)(v61 + 2 * v127.u32[3]);
          v96.i16[4] = *(_WORD *)(v61 + 2 * v126.u32[0]);
          v96.i16[5] = *(_WORD *)(v61 + 2 * v126.u32[1]);
          v96.i16[6] = *(_WORD *)(v61 + 2 * v126.u32[2]);
          v96.i16[7] = *(_WORD *)(v61 + 2 * v126.u32[3]);
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v109, v321), v112, v320), v114, v319), vmaxq_f16(vmaxq_f16(v109, v112), v114), v318), (float16x8_t)0), v106));
          uint32x4_t v129 = vmovl_high_u16(v128);
          uint32x4_t v130 = vmovl_u16(*(uint16x4_t *)v128.i8);
          v131.i16[0] = *(_WORD *)(v52 + 2 * v130.u32[0]);
          v131.i16[1] = *(_WORD *)(v52 + 2 * v130.u32[1]);
          v131.i16[2] = *(_WORD *)(v52 + 2 * v130.u32[2]);
          v131.i16[3] = *(_WORD *)(v52 + 2 * v130.u32[3]);
          v131.i16[4] = *(_WORD *)(v52 + 2 * v129.u32[0]);
          v131.i16[5] = *(_WORD *)(v52 + 2 * v129.u32[1]);
          v131.i16[6] = *(_WORD *)(v52 + 2 * v129.u32[2]);
          v131.i16[7] = *(_WORD *)(v52 + 2 * v129.u32[3]);
          float16x8_t v132 = vmulq_f16(v109, v131);
          float16x8_t v133 = vmulq_f16(v112, v131);
          float16x8_t v134 = vmulq_f16(v114, v131);
          uint16x8_t v135 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v120, v321), v122, v320), v96, v319), vmaxq_f16(vmaxq_f16(v120, v122), v96), v318), (float16x8_t)0), v106));
          uint32x4_t v136 = vmovl_high_u16(v135);
          float16x8_t v137 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v135.i8);
          v137.i16[0] = *(_WORD *)(v52 + 2 * v137.u32[0]);
          v137.i16[1] = *(_WORD *)(v52 + 2 * v137.u32[1]);
          v137.i16[2] = *(_WORD *)(v52 + 2 * v137.u32[2]);
          v137.i16[3] = *(_WORD *)(v52 + 2 * v137.u32[3]);
          v137.i16[4] = *(_WORD *)(v52 + 2 * v136.u32[0]);
          v137.i16[5] = *(_WORD *)(v52 + 2 * v136.u32[1]);
          v137.i16[6] = *(_WORD *)(v52 + 2 * v136.u32[2]);
          v137.i16[7] = *(_WORD *)(v52 + 2 * v136.u32[3]);
          float16x8_t v138 = vmulq_f16(v120, v137);
          float16x8_t v139 = vmulq_f16(v122, v137);
          float16x8_t v140 = vmulq_f16(v96, v137);
          float16x8_t v141 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v132, v317), v133, v316), v134, v315);
          float16x8_t v142 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v132, v314), v133, v313), v134, v312);
          a5.i32[0] = v305;
          float16x8_t v143 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v134, v304), v133, *(short float *)&v305), v132, v307);
          float16x8_t v144 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v138, v317), v139, v316), v140, v315);
          float16x8_t v145 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v138, v314), v139, v313), v140, v312);
          float16x8_t v146 = (float16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v141, (float16x8_t)0), v106));
          uint32x4_t v147 = vmovl_high_u16((uint16x8_t)v146);
          uint32x4_t v148 = vmovl_u16(*(uint16x4_t *)v146.i8);
          v146.i16[7] = (unint64_t)v148.u32[1] >> 48;
          v146.i16[0] = *(_WORD *)(v60 + 2 * v148.u32[0]);
          v146.i16[1] = *(_WORD *)(v60 + 2 * v148.u32[1]);
          v146.i16[2] = *(_WORD *)(v60 + 2 * v148.u32[2]);
          v146.i16[3] = *(_WORD *)(v60 + 2 * v148.u32[3]);
          v146.i16[4] = *(_WORD *)(v60 + 2 * v147.u32[0]);
          v146.i16[5] = *(_WORD *)(v60 + 2 * v147.u32[1]);
          v146.i16[6] = *(_WORD *)(v60 + 2 * v147.u32[2]);
          float v149 = (__int16 *)(v60 + 2 * v147.u32[3]);
          float16x8_t v150 = (float16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v142, (float16x8_t)0), v106));
          uint32x4_t v151 = vmovl_high_u16((uint16x8_t)v150);
          *((void *)&v115 + 1) = v151.u32[3];
          uint32x4_t v152 = vmovl_u16(*(uint16x4_t *)v150.i8);
          v150.i16[7] = (unint64_t)v152.u32[1] >> 48;
          v150.i16[0] = *(_WORD *)(v60 + 2 * v152.u32[0]);
          v150.i16[1] = *(_WORD *)(v60 + 2 * v152.u32[1]);
          v150.i16[2] = *(_WORD *)(v60 + 2 * v152.u32[2]);
          v150.i16[3] = *(_WORD *)(v60 + 2 * v152.u32[3]);
          v150.i16[4] = *(_WORD *)(v60 + 2 * v151.u32[0]);
          v150.i16[5] = *(_WORD *)(v60 + 2 * v151.u32[1]);
          v150.i16[6] = *(_WORD *)(v60 + 2 * v151.u32[2]);
          float16x8_t v153 = (float16x8_t)vuzp1q_s16((int16x8_t)v146, (int16x8_t)v150);
          v146.i16[7] = *v149;
          v150.i16[7] = *(_WORD *)(v60 + 2 * *((void *)&v115 + 1));
          float16x8_t v154 = vmulq_n_f16(v140, v304);
          uint16x8_t v155 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v143, (float16x8_t)0), v106));
          uint32x4_t v156 = vmovl_high_u16(v155);
          int16x8_t v157 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v155.i8);
          *(void *)&long long v115 = v156.u32[2];
          *((void *)&v115 + 1) = v156.u32[3];
          long long v158 = v115;
          *(void *)&long long v115 = v156.u32[0];
          *((void *)&v115 + 1) = v156.u32[1];
          long long v159 = v115;
          *((void *)&v115 + 1) = v157.u32[3];
          v157.i16[7] = (unint64_t)v157.u32[3] >> 48;
          v157.i16[0] = *(_WORD *)(v60 + 2 * v157.u32[0]);
          v157.i16[1] = *(_WORD *)(v60 + 2 * v157.u32[1]);
          v157.i16[2] = *(_WORD *)(v60 + 2 * v157.u32[2]);
          v157.i16[3] = *(_WORD *)(v60 + 2 * *((void *)&v115 + 1));
          v157.i16[4] = *(_WORD *)(v60 + 2 * v159);
          v157.i16[5] = *(_WORD *)(v60 + 2 * *((void *)&v159 + 1));
          v157.i16[6] = *(_WORD *)(v60 + 2 * v158);
          float16x8_t v160 = vmlaq_n_f16(v154, v139, *(short float *)&v305);
          float v161 = (__int16 *)(v60 + 2 * *((void *)&v158 + 1));
          float16x8_t v162 = (float16x8_t)v157;
          v162.i16[7] = *v161;
          uint16x8_t v163 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v144, (float16x8_t)0), v106));
          float16x8_t v164 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v163.i8);
          uint32x4_t v165 = vmovl_high_u16(v163);
          *(void *)&long long v115 = v165.u32[2];
          *((void *)&v115 + 1) = v165.u32[3];
          long long v166 = v115;
          *((void *)&v115 + 1) = v164.u32[3];
          v164.i16[7] = (unint64_t)v164.u32[3] >> 48;
          v164.i16[0] = *(_WORD *)(v60 + 2 * v164.u32[0]);
          v164.i16[1] = *(_WORD *)(v60 + 2 * v164.u32[1]);
          v164.i16[2] = *(_WORD *)(v60 + 2 * v164.u32[2]);
          v164.i16[3] = *(_WORD *)(v60 + 2 * *((void *)&v115 + 1));
          v164.i16[4] = *(_WORD *)(v60 + 2 * v165.u32[0]);
          v164.i16[5] = *(_WORD *)(v60 + 2 * v165.u32[1]);
          v164.i16[6] = *(_WORD *)(v60 + 2 * v166);
          float v167 = (__int16 *)(v60 + 2 * *((void *)&v166 + 1));
          uint16x8_t v168 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v145, (float16x8_t)0), v106));
          float16x8_t v169 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v168.i8);
          uint32x4_t v170 = vmovl_high_u16(v168);
          *(void *)&long long v115 = v170.u32[2];
          *((void *)&v115 + 1) = v170.u32[3];
          long long v171 = v115;
          *((void *)&v115 + 1) = v169.u32[3];
          v169.i16[7] = (unint64_t)v169.u32[3] >> 48;
          v169.i16[0] = *(_WORD *)(v60 + 2 * v169.u32[0]);
          v169.i16[1] = *(_WORD *)(v60 + 2 * v169.u32[1]);
          v169.i16[2] = *(_WORD *)(v60 + 2 * v169.u32[2]);
          v169.i16[3] = *(_WORD *)(v60 + 2 * *((void *)&v115 + 1));
          v169.i16[4] = *(_WORD *)(v60 + 2 * v170.u32[0]);
          v169.i16[5] = *(_WORD *)(v60 + 2 * v170.u32[1]);
          v169.i16[6] = *(_WORD *)(v60 + 2 * v171);
          float16x8_t v53 = (float16x8_t)vuzp1q_s16((int16x8_t)v164, (int16x8_t)v169);
          v164.i16[7] = *v167;
          v169.i16[7] = *(_WORD *)(v60 + 2 * *((void *)&v171 + 1));
          uint16x8_t v172 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v160, v138, v307), (float16x8_t)0), v106));
          uint32x4_t v173 = vmovl_high_u16(v172);
          int16x8_t v174 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v172.i8);
          *(void *)&long long v115 = v173.u32[2];
          *((void *)&v115 + 1) = v173.u32[3];
          long long v175 = v115;
          *(void *)&long long v115 = v173.u32[0];
          *((void *)&v115 + 1) = v173.u32[1];
          long long v176 = v115;
          *((void *)&v115 + 1) = v174.u32[3];
          v174.i16[7] = (unint64_t)v174.u32[3] >> 48;
          v174.i16[0] = *(_WORD *)(v60 + 2 * v174.u32[0]);
          v174.i16[1] = *(_WORD *)(v60 + 2 * v174.u32[1]);
          v174.i16[2] = *(_WORD *)(v60 + 2 * v174.u32[2]);
          v174.i16[3] = *(_WORD *)(v60 + 2 * *((void *)&v115 + 1));
          v174.i16[4] = *(_WORD *)(v60 + 2 * v176);
          v174.i16[5] = *(_WORD *)(v60 + 2 * *((void *)&v176 + 1));
          v174.i16[6] = *(_WORD *)(v60 + 2 * v175);
          float16x8_t v177 = (float16x8_t)v174;
          v177.i16[7] = *(_WORD *)(v60 + 2 * *((void *)&v175 + 1));
          unsigned int v77 = v309.i32[0];
          *v73++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v311, v146, v327), v150, v326), v162, v324), v311), v309)));
          *v84++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v311, v164, v327), v169, v326), v177, v324), v311), v309)));
          _Q17 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v153, (float16x8_t)vuzp2q_s16((int16x8_t)v146, (int16x8_t)v150)), v53), (float16x8_t)vuzp2q_s16((int16x8_t)v164, (int16x8_t)v169));
          _S18 = *(float *)v323.i32;
          float16x8_t v178 = vmlaq_f16(vmlaq_f16(v310, v325, (float16x8_t)vzip1q_s16(_Q17, _Q17)), v323, (float16x8_t)vzip2q_s16(_Q17, _Q17));
          _Q17.i32[0] = v322.i32[0];
          LODWORD(v78) = v306.i32[0];
          *(int8x8_t *)&result[v82] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(v178, v322, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v157, v157), (float16x8_t)vtrn2q_s16((int16x8_t)v162, (int16x8_t)v162)), (float16x8_t)vtrn1q_s16(v174, v174)), (float16x8_t)vtrn2q_s16((int16x8_t)v177, (int16x8_t)v177))), v308), v306)));
          if (v72)
          {
            long long v179 = v350;
            _Q17 = (int16x8_t)v351;
            _S18 = *(float *)&v352;
            *(int8x8_t *)&long long v78 = vqtbl2_s8(*(int8x16x2_t *)(&_Q17 - 1), v354);
            *(void *)uint64_t v72 = v78;
            v72 += 8;
            *v83++ = vqtbl2_s8(*(int8x16x2_t *)(&_Q5 - 1), v354);
          }
          _S10 = v297;
          v82 += 8;
        }
        while ((int)v82 < (int)v10 - 7);
        float v180 = &result[v82];
        unint64_t v181 = v10 & 0xFFFFFFF8;
      }
      if (v10 > v181)
      {
        uint64_t v182 = 0;
        float v183 = v74 + 4;
        short float v184 = v85 + 4;
        do
        {
          uint64_t v185 = v182 + v357;
          LOBYTE(v78) = v183[v185 - 4];
          uint64_t v186 = v182 + BYTE1(v357);
          LOBYTE(v77) = v183[v186 - 4];
          uint64_t v187 = v182 + BYTE2(v357);
          a5.i8[0] = v183[v187 - 4];
          _H0 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25 * (float)v78, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25 * (float)v77, 0.0), 8191.0)));
          unsigned int v191 = llroundf(fminf(fmaxf(_S25 * (float)a5.u32[0], 0.0), 8191.0));
          __asm { FCVT            S2, H1 }
          _H1 = *(_WORD *)(v61 + 2 * v191);
          __asm { FCVT            S1, H1 }
          float v195 = (float)((float)((float)(_S23 * _S2) + (float)(_S22 * _S0)) + (float)(_S29 * _S1))
               + (float)(_S10 * fmaxf(_S0, fmaxf(_S2, _S1)));
          float v196 = 8191.0;
          if (v195 <= 8191.0)
          {
            float v196 = v195;
            if (v195 < 0.0) {
              float v196 = 0.0;
            }
          }
          LOBYTE(v195) = v183[v185];
          LOBYTE(_Q5) = v183[v186];
          LOBYTE(_Q6) = v183[v187];
          _H4 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25 * (float)LODWORD(v195), 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25 * (float)_Q5, 0.0), 8191.0)));
          unsigned int v200 = llroundf(fminf(fmaxf(_S25 * (float)_Q6, 0.0), 8191.0));
          __asm { FCVT            S6, H5 }
          _H5 = *(_WORD *)(v61 + 2 * v200);
          __asm { FCVT            S5, H5 }
          float v204 = (float)((float)((float)(_S23 * _S6) + (float)(_S22 * _S4)) + (float)(_S29 * _S5))
               + (float)(_S10 * fmaxf(_S4, fmaxf(_S6, _S5)));
          float v205 = 8191.0;
          if (v204 <= 8191.0)
          {
            float v205 = v204;
            if (v204 < 0.0) {
              float v205 = 0.0;
            }
          }
          float v206 = &v184[v185];
          LOBYTE(v204) = *(v206 - 4);
          float v207 = &v184[v186];
          _Q17.i8[0] = *(v207 - 4);
          float v208 = &v184[v187];
          LOBYTE(_S18) = *(v208 - 4);
          _H16 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25 * (float)LODWORD(v204), 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          _H17 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25 * (float)_Q17.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H18 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25 * (float)LODWORD(_S18), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          float v215 = fmaxf(_S16, fmaxf(_S17, _S18));
          float v216 = (float)((float)((float)(_S23 * _S17) + (float)(_S22 * _S16)) + (float)(_S29 * _S18))
               + (float)(_S10 * v215);
          float v217 = 8191.0;
          if (v216 <= 8191.0)
          {
            float v217 = (float)((float)((float)(_S23 * _S17) + (float)(_S22 * _S16)) + (float)(_S29 * _S18))
                 + (float)(_S10 * v215);
            if (v216 < 0.0) {
              float v217 = 0.0;
            }
          }
          LOBYTE(v216) = *v206;
          LOBYTE(v215) = *v207;
          v53.i8[0] = *v208;
          _H19 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25 * (float)LODWORD(v216), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25 * (float)LODWORD(v215), 0.0), 8191.0)));
          __asm { FCVT            S12, H20 }
          _H20 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25 * (float)v53.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S14, H20 }
          _H3 = *(_WORD *)(v52 + 2 * llroundf(v196));
          __asm { FCVT            S3, H3 }
          float v226 = _S0 * _S3;
          float v227 = _S2 * _S3;
          float v228 = _S1 * _S3;
          _H0 = *(_WORD *)(v52 + 2 * llroundf(v205));
          __asm { FCVT            S0, H0 }
          float v231 = _S4 * _S0;
          float v232 = _S6 * _S0;
          float v233 = _S5 * _S0;
          LOWORD(_S0) = *(_WORD *)(v52 + 2 * llroundf(v217));
          __asm { FCVT            S1, H0 }
          float v235 = _S16 * _S1;
          float v236 = _S17 * _S1;
          float v237 = _S18 * _S1;
          float v238 = (float)((float)((float)(_S23 * _S12) + (float)(_S22 * _S19)) + (float)(_S29 * _S14))
               + (float)(_S10 * fmaxf(_S19, fmaxf(_S12, _S14)));
          float v239 = 8191.0;
          if (v238 <= 8191.0)
          {
            float v239 = v238;
            if (v238 < 0.0) {
              float v239 = 0.0;
            }
          }
          uint64_t v240 = v182 + HIBYTE(v357);
          char v241 = v183[v240 - 4];
          char v242 = v183[v240];
          float v243 = &v184[v240];
          __int8 v244 = *(v243 - 4);
          __int8 v245 = *v243;
          _H5 = *(_WORD *)(v52 + 2 * llroundf(v239));
          __asm { FCVT            S5, H5 }
          _S7 = _S19 * _S5;
          _S16 = _S12 * _S5;
          _S5 = _S14 * _S5;
          float v251 = (float)((float)(v343 * v227) + (float)(v226 * v344)) + (float)(v228 * v342);
          _S18 = (float)((float)(v340 * v227) + (float)(v226 * v341)) + (float)(v228 * v339);
          _S19 = (float)((float)(v337 * v227) + (float)(v226 * v338)) + (float)(v228 * v336);
          float v254 = (float)((float)(v343 * v232) + (float)(v231 * v344)) + (float)(v233 * v342);
          float v255 = (float)((float)(v340 * v232) + (float)(v231 * v341)) + (float)(v233 * v339);
          _S6 = (float)((float)(v337 * v232) + (float)(v231 * v338)) + (float)(v233 * v336);
          float v257 = (float)((float)(v343 * v236) + (float)(v235 * v344)) + (float)(v237 * v342);
          float v258 = (float)((float)(v340 * v236) + (float)(v235 * v341)) + (float)(v237 * v339);
          float v259 = (float)((float)(v337 * v236) + (float)(v235 * v338)) + (float)(v237 * v336);
          float v260 = (float)((float)(v343 * _S16) + (float)(_S7 * v344)) + (float)(_S5 * v342);
          float v261 = (float)((float)(v340 * _S16) + (float)(_S7 * v341)) + (float)(_S5 * v339);
          LODWORD(v243) = llroundf(fminf(fmaxf(v251, 0.0), 8191.0));
          _S17 = (float)((float)(v337 * _S16) + (float)(_S7 * v338)) + (float)(_S5 * v336);
          _H0 = *(_WORD *)(v60 + 2 * v243);
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H3 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v254, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v255, 0.0), 8191.0)));
          __asm
          {
            FCVT            S4, H3
            FCVT            S3, H5
          }
          LOWORD(_S5) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v257, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v258, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S16) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v259, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          LOWORD(_S18) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v260, 0.0), 8191.0)));
          LOWORD(_S19) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v261, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H18
            FCVT            S19, H19
          }
          LOWORD(_S17) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          if (v72)
          {
            char v275 = v241;
          }
          else
          {
            __int8 v244 = 0;
            char v275 = 0;
          }
          if (v72)
          {
            __int8 v276 = v245;
          }
          else
          {
            char v242 = 0;
            __int8 v276 = 0;
          }
          float v277 = (float)((float)((float)(v346 * _S1) + (float)(v347 * _S0)) + (float)(v345 * _S2)) + v335;
          if (v277 < v335) {
            float v278 = v335;
          }
          else {
            float v278 = (float)((float)((float)(v346 * _S1) + (float)(v347 * _S0)) + (float)(v345 * _S2)) + v335;
          }
          BOOL v279 = v277 <= v333;
          float v280 = (float)((float)((float)(v346 * _S3) + (float)(v347 * _S4)) + (float)(v345 * *(float *)&_Q5)) + v335;
          if (!v279) {
            float v278 = v333;
          }
          __int8 v281 = llroundf(v278);
          if (v280 < v335) {
            float v282 = v335;
          }
          else {
            float v282 = (float)((float)((float)(v346 * _S3) + (float)(v347 * _S4)) + (float)(v345 * *(float *)&_Q5)) + v335;
          }
          BOOL v279 = v280 <= v333;
          float v283 = (float)((float)((float)(v346 * _S7) + (float)(v347 * *(float *)&_Q6)) + (float)(v345 * _S16)) + v335;
          if (!v279) {
            float v282 = v333;
          }
          __int8 v284 = llroundf(v282);
          if (v283 < v335) {
            float v285 = v335;
          }
          else {
            float v285 = (float)((float)((float)(v346 * _S7) + (float)(v347 * *(float *)&_Q6)) + (float)(v345 * _S16)) + v335;
          }
          BOOL v279 = v283 <= v333;
          float v286 = (float)((float)((float)(v346 * _S19) + (float)(v347 * _S18)) + (float)(v345 * *(float *)_Q17.i32))
               + v335;
          if (!v279) {
            float v285 = v333;
          }
          __int8 v287 = llroundf(v285);
          if (v286 < v335) {
            float v288 = v335;
          }
          else {
            float v288 = (float)((float)((float)(v346 * _S19) + (float)(v347 * _S18)) + (float)(v345 * *(float *)_Q17.i32))
          }
                 + v335;
          if (v286 <= v333) {
            float v289 = v288;
          }
          else {
            float v289 = v333;
          }
          float v290 = (float)((float)(_S0 + _S4) + *(float *)&_Q6) + _S18;
          float v291 = (float)((float)(_S1 + _S3) + _S7) + _S19;
          v73->i8[0] = v281;
          v73->i8[1] = v284;
          v84->i8[0] = v287;
          v84->i8[1] = llroundf(v289);
          *(float *)v53.i32 = v334;
          a5.f32[0] = (float)((float)(_S2 + *(float *)&_Q5) + _S16) + *(float *)_Q17.i32;
          float v292 = (float)((float)(v334 + (float)(v290 * v331)) + (float)(v291 * v329)) + (float)(a5.f32[0] * v328);
          float v293 = v332;
          if (v292 <= v332)
          {
            float v293 = (float)((float)(v334 + (float)(v290 * v331)) + (float)(v291 * v329)) + (float)(a5.f32[0] * v328);
            if (v292 < v348) {
              float v293 = v348;
            }
          }
          *(float *)&long long v78 = (float)((float)(v334 + (float)(v290 * v302)) + (float)(v291 * v301))
                         + (float)(a5.f32[0] * v300);
          *float v180 = llroundf(v293);
          unsigned int v77 = LODWORD(v332);
          if (*(float *)&v78 <= v332)
          {
            unsigned int v77 = v78;
            if (*(float *)&v78 < v348) {
              unsigned int v77 = LODWORD(v348);
            }
          }
          v180[1] = llroundf(*(float *)&v77);
          if (v72)
          {
            *(unsigned char *)uint64_t v72 = v275;
            *(unsigned char *)(v72 + 1) = v242;
            v72 += 2;
            v83->i8[0] = v244;
            v83->i8[1] = v276;
            unsigned int v83 = (int8x8_t *)((char *)v83 + 2);
          }
          _S25 = v298;
          _S23 = v299;
          v181 += 2;
          v182 += 8;
          int8x16_t v73 = (int8x8_t *)((char *)v73 + 2);
          unsigned int v84 = (int8x8_t *)((char *)v84 + 2);
          v180 += 2;
        }
        while (v10 > v181);
      }
      int8x16_t v74 = &v79[v24];
      uint64_t v49 = v296;
      int8x16_t v73 = (int8x8_t *)&v80[v296];
      result += v295;
      uint64_t v72 = v81 + v27;
      v50 += 2;
    }
    while (v294 > v50);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = 2 * *result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    unint64_t v11 = 0;
    unint64_t v12 = *(void *)(result + 20);
    uint64_t v13 = *(void *)(result + 44) + 2 * v9;
    unint64_t v174 = 2 * v10 - 2 * v9;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 17);
    uint64_t v16 = **((void **)result + 8);
    uint64_t v17 = *v15;
    uint64_t v18 = v15[1];
    uint64_t v19 = v15[2];
    float v20 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    LOWORD(a5) = *(_WORD *)(v14 + 144);
    float v21 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 146);
    float v22 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 148);
    float v23 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 150);
    *(float *)&unsigned int v24 = (float)LODWORD(a6);
    float v198 = *(float *)&v24;
    LOWORD(v24) = *(_WORD *)(v14 + 152);
    float v25 = (float)v24;
    float v194 = *(float *)(v14 + 40);
    float v195 = *(float *)(v14 + 36);
    float v192 = *(float *)(v14 + 48) * 0.25;
    float v193 = *(float *)(v14 + 44);
    float v190 = *(float *)(v14 + 56) * 0.25;
    float v191 = *(float *)(v14 + 52) * 0.25;
    float v188 = *(float *)(v14 + 64) * 0.25;
    float v189 = *(float *)(v14 + 60) * 0.25;
    float v26 = *(float *)(v14 + 72);
    float v186 = *(float *)(v14 + 68) * 0.25;
    float v187 = v26;
    float v184 = *(float *)(v14 + 80);
    float v185 = *(float *)(v14 + 76);
    float v182 = *(float *)(v14 + 88);
    float v183 = *(float *)(v14 + 84);
    float v180 = *(float *)(v14 + 96);
    float v181 = *(float *)(v14 + 92);
    float v27 = *(float *)(v14 + 100);
    float v28 = *(float *)(v14 + 104);
    float v29 = *(float *)(v14 + 108);
    float v178 = v28;
    float v179 = v27;
    uint64_t v30 = v14 + 164;
    uint64_t v31 = v14 + 16548;
    uint64_t v32 = v14 + 32932;
    float v33 = *(float *)(v14 + 112);
    float v34 = *(float *)(v14 + 116);
    float v35 = *(float *)(v14 + 120);
    uint64_t v36 = *((void *)result + 14);
    unint64_t v37 = *((void *)result + 13) * a2;
    uint64_t v38 = (void *)*((void *)result + 16);
    uint64_t v39 = *((void *)result + 15) + 2 * (v37 / v8);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v16 * v13 + 4 * *(void *)(result + 36));
    uint64_t v40 = v38[1];
    uint64_t v41 = (unsigned char *)(*v38 + v39 * v17 + v36);
    uint64_t v42 = v38[2];
    if (v42) {
      unint64_t v43 = (unsigned __int8 *)(v42 + v39 * v19 + v36);
    }
    else {
      unint64_t v43 = 0;
    }
    uint64_t v44 = *(unsigned __int8 *)(v14 + 157);
    uint64_t v45 = *(unsigned __int8 *)(v14 + 156);
    uint64_t v172 = v18;
    uint64_t v173 = v17;
    uint64_t v46 = v40 + v39 / 2 * v18;
    uint64_t v47 = *(unsigned __int8 *)(v14 + 155);
    uint64_t v48 = *(unsigned __int8 *)(v14 + 154);
    uint64_t v49 = v46 + v36;
    uint64_t v171 = v19;
    float v196 = v25;
    float v197 = v22;
    float v175 = v33;
    float v176 = v34;
    float v177 = v29;
    do
    {
      unint64_t v50 = &v43[v19];
      float v51 = &v41[v17];
      uint64_t v52 = v16;
      float16x8_t v53 = &result[v16];
      if (v12)
      {
        unint64_t v54 = 0;
        float v55 = v50;
        float v56 = &v41[v17];
        float v57 = &result[v16];
        do
        {
          LOBYTE(v28) = result[v48];
          LOBYTE(v27) = result[v47];
          LOBYTE(v26) = result[v45];
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v28), 0.0), 8191.0)));
          float v59 = v20 * (float)LODWORD(v26);
          __asm { FCVT            S14, H3 }
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v27), 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v59, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          float v69 = fmaxf(_S14, fmaxf(_S15, _S18));
          float v70 = (float)((float)((float)(v33 * _S15) + (float)(v29 * _S14)) + (float)(v34 * _S18)) + (float)(v35 * v69);
          float v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            float v71 = (float)((float)((float)(v33 * _S15) + (float)(v29 * _S14)) + (float)(v34 * _S18)) + (float)(v35 * v69);
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          LOBYTE(v70) = result[v48 + 4];
          LOBYTE(v69) = result[v47 + 4];
          LOBYTE(v59) = result[v45 + 4];
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v70), 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v69), 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v59), 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          float v78 = fmaxf(_S20, fmaxf(_S21, _S22));
          float v79 = (float)((float)((float)(v33 * _S21) + (float)(v29 * _S20)) + (float)(v34 * _S22)) + (float)(v35 * v78);
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = (float)((float)((float)(v33 * _S21) + (float)(v29 * _S20)) + (float)(v34 * _S22)) + (float)(v35 * v78);
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          LOBYTE(v79) = v57[v48];
          LOBYTE(v78) = v57[v47];
          *(float *)&unsigned int v81 = (float)LODWORD(v78);
          _S6 = v20 * *(float *)&v81;
          LOBYTE(v81) = v57[v45];
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v79), 0.0), 8191.0)));
          float v84 = v20 * (float)v81;
          __asm { FCVT            S5, H3 }
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S6) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S7, H6 }
          float v89 = (float)((float)((float)(v33 * _S3) + (float)(v29 * _S5)) + (float)(v34 * _S7))
              + (float)(v35 * fmaxf(_S5, fmaxf(_S3, _S7)));
          float v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          LOBYTE(v89) = v57[v48 + 4];
          LOBYTE(v22) = v57[v47 + 4];
          LOBYTE(v6) = v57[v45 + 4];
          _H16 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v89), 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          _H17 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v22), 0.0), 8191.0)));
          unsigned int v94 = llroundf(fminf(fmaxf(v20 * (float)v6, 0.0), 8191.0));
          __asm { FCVT            S23, H17 }
          _H17 = *(_WORD *)(v30 + 2 * v94);
          __asm { FCVT            S25, H17 }
          _H17 = *(_WORD *)(v31 + 2 * llroundf(v71));
          __asm { FCVT            S19, H17 }
          float v100 = _S14 * _S19;
          float v101 = _S15 * _S19;
          float v102 = _S18 * _S19;
          _H18 = *(_WORD *)(v31 + 2 * llroundf(v80));
          __asm { FCVT            S18, H18 }
          float v105 = _S20 * _S18;
          float v106 = _S21 * _S18;
          float v107 = _S22 * _S18;
          _H6 = *(_WORD *)(v31 + 2 * llroundf(v90));
          __asm { FCVT            S6, H6 }
          float v110 = _S5 * _S6;
          float v111 = _S3 * _S6;
          float v112 = _S7 * _S6;
          float v113 = (float)((float)((float)(v33 * _S23) + (float)(v29 * _S16)) + (float)(v34 * _S25))
               + (float)(v35 * fmaxf(_S16, fmaxf(_S23, _S25)));
          float v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            float v114 = v113;
            if (v113 < 0.0) {
              float v114 = 0.0;
            }
          }
          unsigned __int8 v115 = result[v44];
          unsigned __int8 v116 = v57[v44];
          _H6 = *(_WORD *)(v31 + 2 * llroundf(v114));
          __asm { FCVT            S6, H6 }
          _S7 = _S16 * _S6;
          float v120 = _S23 * _S6;
          float v121 = _S25 * _S6;
          float v122 = (float)((float)(v185 * v101) + (float)(v100 * v187)) + (float)(v102 * v184);
          float v123 = (float)((float)(v182 * v101) + (float)(v100 * v183)) + (float)(v102 * v181);
          float v124 = (float)((float)(v179 * v101) + (float)(v100 * v180)) + (float)(v102 * v178);
          float v125 = (float)((float)(v185 * v106) + (float)(v105 * v187)) + (float)(v107 * v184);
          float v126 = (float)((float)(v182 * v106) + (float)(v105 * v183)) + (float)(v107 * v181);
          float v127 = (float)((float)(v179 * v106) + (float)(v105 * v180)) + (float)(v107 * v178);
          float v128 = (float)((float)(v185 * v111) + (float)(v110 * v187)) + (float)(v112 * v184);
          float v129 = (float)((float)(v182 * v111) + (float)(v110 * v183)) + (float)(v112 * v181);
          _S3 = (float)((float)(v179 * v111) + (float)(v110 * v180)) + (float)(v112 * v178);
          float v131 = (float)((float)(v185 * v120) + (float)(_S7 * v187)) + (float)(v121 * v184);
          float v132 = (float)((float)(v182 * v120) + (float)(_S7 * v183)) + (float)(v121 * v181);
          _S6 = (float)((float)(v179 * v120) + (float)(_S7 * v180)) + (float)(v121 * v178);
          _H5 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _H5 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          _H5 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          _H5 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H5
            FCVT            S21, H7
          }
          _H5 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S24, H5 }
          _H5 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S7) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S14, H7 }
          LOWORD(_S3) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          LOWORD(_S3) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S7, H7
          }
          LOWORD(_S6) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          if (v43)
          {
            unsigned __int8 v152 = result[v44 + 4];
          }
          else
          {
            unsigned __int8 v116 = 0;
            unsigned __int8 v115 = 0;
            unsigned __int8 v152 = 0;
          }
          if (v43) {
            unsigned __int8 v153 = v57[v44 + 4];
          }
          else {
            unsigned __int8 v153 = 0;
          }
          unsigned int v6 = LODWORD(v195);
          float v154 = (float)((float)((float)(v194 * _S19) + (float)(v195 * _S18)) + (float)(v193 * _S20)) + v21;
          if (v154 < v21) {
            float v155 = v21;
          }
          else {
            float v155 = (float)((float)((float)(v194 * _S19) + (float)(v195 * _S18)) + (float)(v193 * _S20)) + v21;
          }
          BOOL v156 = v154 <= v23;
          float v157 = (float)((float)((float)(v194 * _S21) + (float)(v195 * _S22)) + (float)(v193 * _S24)) + v21;
          if (!v156) {
            float v155 = v23;
          }
          char v158 = llroundf(v155);
          if (v157 < v21) {
            float v159 = v21;
          }
          else {
            float v159 = (float)((float)((float)(v194 * _S21) + (float)(v195 * _S22)) + (float)(v193 * _S24)) + v21;
          }
          BOOL v156 = v157 <= v23;
          float v160 = (float)((float)((float)(v194 * _S14) + (float)(v195 * _S5)) + (float)(v193 * _S15)) + v21;
          if (!v156) {
            float v159 = v23;
          }
          char v161 = llroundf(v159);
          if (v160 < v21) {
            float v162 = v21;
          }
          else {
            float v162 = (float)((float)((float)(v194 * _S14) + (float)(v195 * _S5)) + (float)(v193 * _S15)) + v21;
          }
          BOOL v156 = v160 <= v23;
          float v163 = (float)((float)((float)(v194 * _S7) + (float)(v195 * _S3)) + (float)(v193 * _S6)) + v21;
          if (!v156) {
            float v162 = v23;
          }
          char v164 = llroundf(v162);
          if (v163 < v21) {
            float v165 = v21;
          }
          else {
            float v165 = (float)((float)((float)(v194 * _S7) + (float)(v195 * _S3)) + (float)(v193 * _S6)) + v21;
          }
          if (v163 <= v23) {
            float v166 = v165;
          }
          else {
            float v166 = v23;
          }
          float v167 = (float)((float)(_S18 + _S22) + _S5) + _S3;
          float v168 = (float)((float)(_S19 + _S21) + _S14) + _S7;
          unsigned char *v41 = v158;
          v41[1] = v161;
          *float v56 = v164;
          v56[1] = llroundf(v166);
          float v22 = v197;
          float v26 = (float)((float)(_S20 + _S24) + _S15) + _S6;
          float v169 = (float)((float)(v197 + (float)(v167 * v192)) + (float)(v168 * v191)) + (float)(v26 * v190);
          float v170 = v196;
          if (v169 <= v196)
          {
            float v170 = (float)((float)(v197 + (float)(v167 * v192)) + (float)(v168 * v191)) + (float)(v26 * v190);
            if (v169 < v198) {
              float v170 = v198;
            }
          }
          float v28 = (float)((float)(v197 + (float)(v167 * v189)) + (float)(v168 * v188)) + (float)(v26 * v186);
          *(unsigned char *)(v49 + v54) = llroundf(v170);
          float v27 = v196;
          if (v28 <= v196)
          {
            float v27 = v28;
            if (v28 < v198) {
              float v27 = v198;
            }
          }
          *(unsigned char *)(v49 + v54 + 1) = llroundf(v27);
          float v34 = v176;
          float v29 = v177;
          if (v43)
          {
            unsigned __int8 *v43 = v115;
            v43[1] = v152;
            v43 += 2;
            *float v55 = v116;
            v55[1] = v153;
            v55 += 2;
          }
          float v33 = v175;
          result += 8;
          v57 += 8;
          v41 += 2;
          v56 += 2;
          v54 += 2;
        }
        while (v12 > v54);
      }
      uint64_t result = &v53[v52];
      uint64_t v16 = v52;
      uint64_t v17 = v173;
      uint64_t v41 = &v51[v173];
      v49 += v172;
      uint64_t v19 = v171;
      unint64_t v43 = &v50[v171];
      v11 += 2;
    }
    while (v174 > v11);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_BGRA_TRC_Mat_TRC_420vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, float16x8_t a4, float32x4_t a5, double a6, double a7, double a8, double a9, float16x8_t _Q7)
{
  uint64_t v14 = 0;
  unint64_t v15 = *(void *)(a1 + 20);
  uint64_t v284 = *(void *)(a1 + 36);
  uint64_t v16 = *(void *)(a1 + 44);
  uint64_t v17 = *(void *)(a1 + 28);
  unint64_t v18 = 2 * *a1;
  uint64_t v19 = 2 * (v17 * a2 / v18);
  uint64_t v20 = v16 + v19;
  uint64_t v21 = 2 * ((v17 + v17 * a2) / v18);
  uint64_t v22 = v16 + v21;
  uint64_t v23 = *((void *)a1 + 14);
  unint64_t v24 = *((void *)a1 + 13) * a2;
  uint64_t v25 = *((void *)a1 + 19);
  uint64_t v27 = *((void *)a1 + 15);
  float v26 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v28 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v29 = **((void **)a1 + 8);
  uint64_t v30 = **((void **)a1 + 7);
  uint64_t v241 = *v28;
  uint64_t v31 = v28[1];
  uint64_t v32 = v28[2];
  uint64_t v268 = *v26;
  uint64_t v34 = v26[1];
  uint64_t v33 = v26[2];
  unsigned int v35 = *(_DWORD *)(v25 + 128);
  int v293 = *(_DWORD *)(v25 + 154);
  unsigned int v36 = *(unsigned __int16 *)(v25 + 144);
  unsigned int v37 = *(unsigned __int16 *)(v25 + 146);
  unsigned int v38 = *(unsigned __int16 *)(v25 + 148);
  unsigned int v39 = *(unsigned __int16 *)(v25 + 150);
  unsigned int v40 = *(unsigned __int16 *)(v25 + 152);
  float v282 = *(float *)(v25 + 36);
  float v281 = *(float *)(v25 + 40);
  float v280 = *(float *)(v25 + 44);
  v41.i32[0] = *(_DWORD *)(v25 + 48);
  a5.i32[0] = *(_DWORD *)(v25 + 52);
  uint64_t v42 = v27 + 2 * (v24 / v18);
  a4.i32[0] = *(_DWORD *)(v25 + 56);
  __int32 v43 = *(_DWORD *)(v25 + 60);
  unsigned __int32 v44 = *(_DWORD *)(v25 + 64);
  v45.i32[0] = *(_DWORD *)(v25 + 68);
  if (v42 >= 0) {
    uint64_t v46 = v27 + 2 * (v24 / v18);
  }
  else {
    uint64_t v46 = v42 + 1;
  }
  float v279 = *(float *)(v25 + 72);
  uint64_t v240 = v31;
  uint64_t v47 = v31 * (v46 >> 1);
  float v278 = *(float *)(v25 + 76);
  float v277 = *(float *)(v25 + 80);
  float v276 = *(float *)(v25 + 84);
  float v275 = *(float *)(v25 + 88);
  float v274 = *(float *)(v25 + 92);
  float v273 = *(float *)(v25 + 96);
  float v272 = *(float *)(v25 + 100);
  float v271 = *(float *)(v25 + 104);
  _Q6.i64[1] = 0;
  long long v291 = 0u;
  long long v292 = 0u;
  do
  {
    unsigned int v49 = 0;
    int v50 = *((unsigned __int8 *)&v293 + v14);
    do
    {
      unint64_t result = v50 + 4 * v49;
      *((unsigned char *)&v291 + 8 * (((_BYTE)v14 + (v49 >> 3)) & 0x1F) + v49) = v50 + 4 * v49;
      ++v49;
    }
    while (v49 != 8);
    ++v14;
  }
  while (v14 != 4);
  uint64_t v52 = v241;
  if (v21 != v19)
  {
    unint64_t v53 = 0;
    unint64_t v239 = v22 - v20;
    uint64_t v54 = v25 + 16548;
    uint64_t v55 = v25 + 164;
    _S21 = 8191.0 / (float)v35;
    float v57 = (float)v36;
    float v290 = (float)v37;
    float v270 = (float)v38;
    float v283 = (float)v39;
    float v289 = (float)v40;
    v41.i32[1] = v43;
    __asm { FMOV            V5.2S, #0.25 }
    *(float32x2_t *)_Q6.i8 = vmul_f32(v41, *(float32x2_t *)_Q5.i8);
    a5.i32[1] = v44;
    *(float32x2_t *)a5.f32 = vmul_f32(*(float32x2_t *)a5.f32, *(float32x2_t *)_Q5.i8);
    a4.i32[1] = v45.i32[0];
    *(float32x2_t *)a4.i8 = vmul_f32(*(float32x2_t *)a4.i8, *(float32x2_t *)_Q5.i8);
    _S0 = v282;
    __asm { FCVT            H0, S0 }
    short float v265 = *(short float *)&_S0;
    _S0 = v281;
    __asm { FCVT            H0, S0 }
    short float v263 = *(short float *)&_S0;
    float16x8_t v264 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)_Q6), 0);
    _S0 = v280;
    __asm { FCVT            H0, S0 }
    short float v261 = *(short float *)&_S0;
    float16x8_t v262 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    _D0 = (int16x4_t)vcvt_f16_f32((float32x4_t)a4);
    int32x4_t v67 = vdupq_lane_s32((int32x2_t)_D0, 0);
    *(float *)_D0.i32 = v279;
    __asm { FCVT            H0, S0 }
    short float v259 = *(short float *)_D0.i16;
    float16x8_t v260 = (float16x8_t)v67;
    *(float *)_D0.i32 = v278;
    __asm { FCVT            H0, S0 }
    short float v258 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v277;
    __asm { FCVT            H0, S0 }
    short float v257 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v276;
    __asm { FCVT            H0, S0 }
    short float v256 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v275;
    __asm { FCVT            H0, S0 }
    short float v255 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v274;
    __asm { FCVT            H0, S0 }
    short float v254 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v273;
    __asm { FCVT            H0, S0 }
    short float v253 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v272;
    __asm { FCVT            H0, S0 }
    unsigned __int32 v252 = _D0.i32[0];
    *(float *)_D0.i32 = v271;
    __asm { FCVT            H0, S0 }
    float v251 = *(float *)_D0.i32;
    *(short float *)_D0.i16 = (short float)v36;
    int16x8_t v68 = vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v37;
    int16x8_t v69 = vdupq_lane_s16(_D0, 0);
    float16x8_t v249 = (float16x8_t)v69;
    float16x8_t v250 = (float16x8_t)v68;
    *(short float *)v69.i16 = (short float)v38;
    int16x8_t v70 = vdupq_lane_s16(*(int16x4_t *)v69.i8, 0);
    *(short float *)v69.i16 = (short float)v39;
    int16x8_t v71 = vdupq_lane_s16(*(int16x4_t *)v69.i8, 0);
    float16x8_t v247 = (float16x8_t)v71;
    float16x8_t v248 = (float16x8_t)v70;
    *(short float *)v71.i16 = (short float)v40;
    int16x8_t v72 = vdupq_lane_s16(*(int16x4_t *)v71.i8, 0);
    if (v33) {
      uint64_t v73 = v33 + v32 * v42 + v23;
    }
    else {
      uint64_t v73 = 0;
    }
    int8x16_t v74 = (unsigned char *)(v34 + v47 + v23);
    unint64_t result = v268 + v241 * v42 + v23;
    int8x16_t v75 = (uint64_t *)(v30 + v29 * v20 + 4 * v284);
    __asm { FCVT            H0, S21 }
    short float v245 = _H0;
    float16x8_t v246 = (float16x8_t)v72;
    float v267 = a5.f32[0];
    float v77 = *(float *)&_Q6.i32[1];
    float v269 = *(float *)_Q6.i32;
    float v243 = a5.f32[1];
    float v244 = *(float *)&_Q6.i32[1];
    v78.i32[0] = a4.i32[1];
    float v242 = *(float *)&a4.i32[1];
    float v266 = *(float *)a4.i32;
    do
    {
      float v79 = (char *)v75 + v29;
      float v80 = (char *)(result + v52);
      uint64_t v81 = v73 + v32;
      if ((int)v15 < 8)
      {
        unint64_t v165 = 0;
        float v85 = (int8x8_t *)(result + v52);
        char v164 = v74;
        float v84 = (int8x8_t *)(v73 + v32);
        unsigned int v83 = (uint64_t *)((char *)v75 + v29);
      }
      else
      {
        uint64_t v82 = 0;
        unsigned int v83 = (uint64_t *)((char *)v75 + v29);
        float v84 = (int8x8_t *)(v73 + v32);
        float v85 = (int8x8_t *)(result + v52);
        do
        {
          int8x8_t v86 = *(int8x8_t *)((char *)&v292 + 8);
          v294.val[0].i64[0] = *v75;
          uint64_t v87 = v75[1];
          v88.i64[0] = v75[2];
          uint64_t v89 = v75[3];
          v75 += 4;
          v294.val[0].i64[1] = v87;
          v88.i64[1] = v89;
          v294.val[1] = v88;
          int8x8_t v90 = vqtbl2_s8(v294, *(int8x8_t *)&v291);
          int8x8_t v91 = vqtbl2_s8(v294, *(int8x8_t *)((char *)&v291 + 8));
          *(int8x8_t *)a5.f32 = vzip1_s8(v90, 0);
          *(int8x8_t *)&a5.u32[2] = vzip2_s8(v90, 0);
          int8x16_t v285 = v294.val[0];
          float32x4_t v286 = (float32x4_t)v88;
          float v287 = *(float *)v88.i32;
          __int32 v288 = v89;
          int8x8_t v78 = vqtbl2_s8(v294, *(int8x8_t *)&v292);
          *(int8x8_t *)v92.i8 = vzip1_s8(v91, 0);
          v92.u64[1] = (unint64_t)vzip2_s8(v91, 0);
          a4 = vcvtq_f16_u16(v92);
          *(int8x8_t *)v92.i8 = vzip1_s8(v78, 0);
          v92.u64[1] = (unint64_t)vzip2_s8(v78, 0);
          *(void *)&long long v95 = *v83;
          v88.i64[0] = v83[1];
          *(void *)&long long v93 = v83[2];
          uint64_t v94 = v83[3];
          v83 += 4;
          *((void *)&v95 + 1) = v88.i64[0];
          *((void *)&v93 + 1) = v94;
          _Q25 = v93;
          int8x8_t v96 = vqtbl2_s8(*(int8x16x2_t *)(&_Q25 - 1), *(int8x8_t *)&v291);
          int8x8_t v97 = vqtbl2_s8(*(int8x16x2_t *)(&_Q25 - 1), *(int8x8_t *)((char *)&v291 + 8));
          int8x8_t v98 = vqtbl2_s8(*(int8x16x2_t *)(&_Q25 - 1), *(int8x8_t *)&v292);
          *(int8x8_t *)v294.val[0].i8 = vzip1_s8(v96, 0);
          v294.val[0].u64[1] = (unint64_t)vzip2_s8(v96, 0);
          float16x8_t v99 = vcvtq_f16_u16((uint16x8_t)v294.val[0]);
          *(int8x8_t *)v294.val[0].i8 = vzip1_s8(v97, 0);
          v294.val[0].u64[1] = (unint64_t)vzip2_s8(v97, 0);
          float16x8_t v100 = vcvtq_f16_u16((uint16x8_t)v294.val[0]);
          *(int8x8_t *)v294.val[0].i8 = vzip1_s8(v98, 0);
          v294.val[0].u64[1] = (unint64_t)vzip2_s8(v98, 0);
          float16x8_t v101 = vcvtq_f16_u16((uint16x8_t)v294.val[0]);
          float16x8_t v102 = vmulq_n_f16(v99, v245);
          v294.val[0] = (int8x16_t)vmulq_n_f16(v100, v245);
          float16x8_t v103 = vmulq_n_f16(v101, v245);
          v104.i64[0] = 0x9000900090009000;
          v104.i64[1] = 0x9000900090009000;
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16((uint16x8_t)a5), v245), (float16x8_t)0), v104));
          uint32x4_t v106 = vmovl_high_u16(v105);
          float16x8_t v107 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v105.i8);
          v107.i16[0] = *(_WORD *)(v55 + 2 * v107.u32[0]);
          v107.i16[1] = *(_WORD *)(v55 + 2 * v107.u32[1]);
          v107.i16[2] = *(_WORD *)(v55 + 2 * v107.u32[2]);
          v107.i16[3] = *(_WORD *)(v55 + 2 * v107.u32[3]);
          v107.i16[4] = *(_WORD *)(v55 + 2 * v106.u32[0]);
          v107.i16[5] = *(_WORD *)(v55 + 2 * v106.u32[1]);
          v107.i16[6] = *(_WORD *)(v55 + 2 * v106.u32[2]);
          v107.i16[7] = *(_WORD *)(v55 + 2 * v106.u32[3]);
          uint16x8_t v108 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(a4, v245), (float16x8_t)0), v104));
          uint32x4_t v109 = vmovl_high_u16(v108);
          float16x8_t v110 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v108.i8);
          v110.i16[0] = *(_WORD *)(v55 + 2 * v110.u32[0]);
          v110.i16[1] = *(_WORD *)(v55 + 2 * v110.u32[1]);
          v110.i16[2] = *(_WORD *)(v55 + 2 * v110.u32[2]);
          v110.i16[3] = *(_WORD *)(v55 + 2 * v110.u32[3]);
          v110.i16[4] = *(_WORD *)(v55 + 2 * v109.u32[0]);
          v110.i16[5] = *(_WORD *)(v55 + 2 * v109.u32[1]);
          v110.i16[6] = *(_WORD *)(v55 + 2 * v109.u32[2]);
          v110.i16[7] = *(_WORD *)(v55 + 2 * v109.u32[3]);
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v92), v245), (float16x8_t)0), v104));
          uint32x4_t v112 = vmovl_high_u16(v111);
          uint32x4_t v113 = vmovl_u16(*(uint16x4_t *)v111.i8);
          v114.i16[0] = *(_WORD *)(v55 + 2 * v113.u32[0]);
          v114.i16[1] = *(_WORD *)(v55 + 2 * v113.u32[1]);
          v114.i16[2] = *(_WORD *)(v55 + 2 * v113.u32[2]);
          v114.i16[3] = *(_WORD *)(v55 + 2 * v113.u32[3]);
          v114.i16[4] = *(_WORD *)(v55 + 2 * v112.u32[0]);
          v114.i16[5] = *(_WORD *)(v55 + 2 * v112.u32[1]);
          v114.i16[6] = *(_WORD *)(v55 + 2 * v112.u32[2]);
          v114.i16[7] = *(_WORD *)(v55 + 2 * v112.u32[3]);
          uint16x8_t v115 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v102, (float16x8_t)0), v104));
          uint32x4_t v116 = vmovl_high_u16(v115);
          uint32x4_t v117 = vmovl_u16(*(uint16x4_t *)v115.i8);
          v102.i16[0] = *(_WORD *)(v55 + 2 * v117.u32[0]);
          v102.i16[1] = *(_WORD *)(v55 + 2 * v117.u32[1]);
          v102.i16[2] = *(_WORD *)(v55 + 2 * v117.u32[2]);
          v102.i16[3] = *(_WORD *)(v55 + 2 * v117.u32[3]);
          v102.i16[4] = *(_WORD *)(v55 + 2 * v116.u32[0]);
          v102.i16[5] = *(_WORD *)(v55 + 2 * v116.u32[1]);
          v102.i16[6] = *(_WORD *)(v55 + 2 * v116.u32[2]);
          v102.i16[7] = *(_WORD *)(v55 + 2 * v116.u32[3]);
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v294.val[0], (float16x8_t)0), v104));
          uint32x4_t v119 = vmovl_high_u16(v118);
          uint32x4_t v120 = vmovl_u16(*(uint16x4_t *)v118.i8);
          v294.val[0].i16[0] = *(_WORD *)(v55 + 2 * v120.u32[0]);
          v294.val[0].i16[1] = *(_WORD *)(v55 + 2 * v120.u32[1]);
          v294.val[0].i16[2] = *(_WORD *)(v55 + 2 * v120.u32[2]);
          v294.val[0].i16[3] = *(_WORD *)(v55 + 2 * v120.u32[3]);
          v294.val[0].i16[4] = *(_WORD *)(v55 + 2 * v119.u32[0]);
          v294.val[0].i16[5] = *(_WORD *)(v55 + 2 * v119.u32[1]);
          v294.val[0].i16[6] = *(_WORD *)(v55 + 2 * v119.u32[2]);
          v294.val[0].i16[7] = *(_WORD *)(v55 + 2 * v119.u32[3]);
          uint16x8_t v121 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v103, (float16x8_t)0), v104));
          uint32x4_t v122 = vmovl_high_u16(v121);
          uint32x4_t v123 = vmovl_u16(*(uint16x4_t *)v121.i8);
          v124.i16[0] = *(_WORD *)(v55 + 2 * v123.u32[0]);
          v124.i16[1] = *(_WORD *)(v55 + 2 * v123.u32[1]);
          v124.i16[2] = *(_WORD *)(v55 + 2 * v123.u32[2]);
          v124.i16[3] = *(_WORD *)(v55 + 2 * v123.u32[3]);
          v124.i16[4] = *(_WORD *)(v55 + 2 * v122.u32[0]);
          v124.i16[5] = *(_WORD *)(v55 + 2 * v122.u32[1]);
          v124.i16[6] = *(_WORD *)(v55 + 2 * v122.u32[2]);
          v124.i16[7] = *(_WORD *)(v55 + 2 * v122.u32[3]);
          float16x8_t v125 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v107, v259), v110, v258), v114, v257);
          float16x8_t v126 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v107, v256), v110, v255), v114, v254);
          float v77 = v251;
          a5.i32[0] = v252;
          float16x8_t v127 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v114, *(short float *)&v251), v110, *(short float *)&v252), v107, v253);
          float16x8_t v128 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v102, v259), (float16x8_t)v294.val[0], v258), v124, v257);
          float16x8_t v129 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v102, v256), (float16x8_t)v294.val[0], v255), v124, v254);
          float16x8_t v130 = (float16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v125, (float16x8_t)0), v104));
          uint32x4_t v131 = vmovl_high_u16((uint16x8_t)v130);
          uint32x4_t v132 = vmovl_u16(*(uint16x4_t *)v130.i8);
          v130.i16[7] = (unint64_t)v132.u32[1] >> 48;
          v130.i16[0] = *(_WORD *)(v54 + 2 * v132.u32[0]);
          v130.i16[1] = *(_WORD *)(v54 + 2 * v132.u32[1]);
          v130.i16[2] = *(_WORD *)(v54 + 2 * v132.u32[2]);
          v130.i16[3] = *(_WORD *)(v54 + 2 * v132.u32[3]);
          v130.i16[4] = *(_WORD *)(v54 + 2 * v131.u32[0]);
          v130.i16[5] = *(_WORD *)(v54 + 2 * v131.u32[1]);
          v130.i16[6] = *(_WORD *)(v54 + 2 * v131.u32[2]);
          float16x8_t v133 = (__int16 *)(v54 + 2 * v131.u32[3]);
          uint16x8_t v134 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v126, (float16x8_t)0), v104));
          uint32x4_t v135 = vmovl_high_u16(v134);
          uint64_t v136 = v135.u32[3];
          uint32x4_t v137 = vmovl_u16(*(uint16x4_t *)v134.i8);
          v134.i16[7] = (unint64_t)v137.u32[1] >> 48;
          v134.i16[0] = *(_WORD *)(v54 + 2 * v137.u32[0]);
          v134.i16[1] = *(_WORD *)(v54 + 2 * v137.u32[1]);
          _Q6.i16[2] = *(_WORD *)(v54 + 2 * v137.u32[2]);
          _Q6.i16[3] = *(_WORD *)(v54 + 2 * v137.u32[3]);
          _Q6.i16[4] = *(_WORD *)(v54 + 2 * v135.u32[0]);
          _Q6.i16[5] = *(_WORD *)(v54 + 2 * v135.u32[1]);
          _Q6.i16[6] = *(_WORD *)(v54 + 2 * v135.u32[2]);
          float16x8_t v138 = (float16x8_t)vuzp1q_s16((int16x8_t)v130, (int16x8_t)_Q6);
          v130.i16[7] = *v133;
          _Q6.i16[7] = *(_WORD *)(v54 + 2 * v136);
          float16x8_t v139 = vmulq_n_f16(v124, *(short float *)&v251);
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v127, (float16x8_t)0), v104));
          uint32x4_t v141 = vmovl_high_u16(v140);
          int16x8_t v142 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v140.i8);
          *(void *)&long long v143 = v141.u32[2];
          *((void *)&v143 + 1) = v141.u32[3];
          long long v144 = v143;
          *(void *)&long long v143 = v141.u32[0];
          *((void *)&v143 + 1) = v141.u32[1];
          long long v145 = v143;
          *((void *)&v143 + 1) = v142.u32[3];
          v142.i16[7] = (unint64_t)v142.u32[3] >> 48;
          v142.i16[0] = *(_WORD *)(v54 + 2 * v142.u32[0]);
          v142.i16[1] = *(_WORD *)(v54 + 2 * v142.u32[1]);
          v142.i16[2] = *(_WORD *)(v54 + 2 * v142.u32[2]);
          v142.i16[3] = *(_WORD *)(v54 + 2 * *((void *)&v143 + 1));
          v142.i16[4] = *(_WORD *)(v54 + 2 * v145);
          v142.i16[5] = *(_WORD *)(v54 + 2 * *((void *)&v145 + 1));
          v142.i16[6] = *(_WORD *)(v54 + 2 * v144);
          float16x8_t v146 = vmlaq_n_f16(v139, (float16x8_t)v294.val[0], *(short float *)&v252);
          _Q23 = (float16x8_t)v142;
          _Q23.i16[7] = *(_WORD *)(v54 + 2 * *((void *)&v144 + 1));
          uint16x8_t v147 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v128, (float16x8_t)0), v104));
          float16x8_t v148 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v147.i8);
          uint32x4_t v149 = vmovl_high_u16(v147);
          *(void *)&long long v143 = v149.u32[2];
          *((void *)&v143 + 1) = v149.u32[3];
          long long v150 = v143;
          *((void *)&v143 + 1) = v148.u32[3];
          v148.i16[7] = (unint64_t)v148.u32[3] >> 48;
          v148.i16[0] = *(_WORD *)(v54 + 2 * v148.u32[0]);
          v148.i16[1] = *(_WORD *)(v54 + 2 * v148.u32[1]);
          v148.i16[2] = *(_WORD *)(v54 + 2 * v148.u32[2]);
          v148.i16[3] = *(_WORD *)(v54 + 2 * *((void *)&v143 + 1));
          v148.i16[4] = *(_WORD *)(v54 + 2 * v149.u32[0]);
          v148.i16[5] = *(_WORD *)(v54 + 2 * v149.u32[1]);
          v148.i16[6] = *(_WORD *)(v54 + 2 * v150);
          uint32x4_t v151 = (__int16 *)(v54 + 2 * *((void *)&v150 + 1));
          uint16x8_t v152 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v129, (float16x8_t)0), v104));
          float16x8_t v153 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v152.i8);
          uint32x4_t v154 = vmovl_high_u16(v152);
          *(void *)&long long v143 = v154.u32[2];
          *((void *)&v143 + 1) = v154.u32[3];
          long long v155 = v143;
          *((void *)&v143 + 1) = v153.u32[3];
          v153.i16[7] = (unint64_t)v153.u32[3] >> 48;
          v153.i16[0] = *(_WORD *)(v54 + 2 * v153.u32[0]);
          v153.i16[1] = *(_WORD *)(v54 + 2 * v153.u32[1]);
          v153.i16[2] = *(_WORD *)(v54 + 2 * v153.u32[2]);
          v153.i16[3] = *(_WORD *)(v54 + 2 * *((void *)&v143 + 1));
          v153.i16[4] = *(_WORD *)(v54 + 2 * v154.u32[0]);
          v153.i16[5] = *(_WORD *)(v54 + 2 * v154.u32[1]);
          v153.i16[6] = *(_WORD *)(v54 + 2 * v155);
          _Q17 = (float16x8_t)vuzp1q_s16((int16x8_t)v148, (int16x8_t)v153);
          v148.i16[7] = *v151;
          v153.i16[7] = *(_WORD *)(v54 + 2 * *((void *)&v155 + 1));
          uint16x8_t v156 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v146, v102, v253), (float16x8_t)0), v104));
          uint32x4_t v157 = vmovl_high_u16(v156);
          int16x8_t v158 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v156.i8);
          *(void *)&long long v143 = v157.u32[2];
          *((void *)&v143 + 1) = v157.u32[3];
          long long v159 = v143;
          *(void *)&long long v143 = v157.u32[0];
          *((void *)&v143 + 1) = v157.u32[1];
          long long v160 = v143;
          *((void *)&v143 + 1) = v158.u32[3];
          v158.i16[7] = (unint64_t)v158.u32[3] >> 48;
          v158.i16[0] = *(_WORD *)(v54 + 2 * v158.u32[0]);
          v158.i16[1] = *(_WORD *)(v54 + 2 * v158.u32[1]);
          v158.i16[2] = *(_WORD *)(v54 + 2 * v158.u32[2]);
          v158.i16[3] = *(_WORD *)(v54 + 2 * *((void *)&v143 + 1));
          v158.i16[4] = *(_WORD *)(v54 + 2 * v160);
          v158.i16[5] = *(_WORD *)(v54 + 2 * *((void *)&v160 + 1));
          v158.i16[6] = *(_WORD *)(v54 + 2 * v159);
          float16x8_t v161 = (float16x8_t)v158;
          v161.i16[7] = *(_WORD *)(v54 + 2 * *((void *)&v159 + 1));
          a4.i32[0] = v248.i32[0];
          *(int8x8_t *)unint64_t result = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v250, v130, v265), _Q6, v263), _Q23, v261), v250), v248)));
          result += 8;
          *v85++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v250, v148, v265), v153, v263), v161, v261), v250), v248)));
          _Q5 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v138, (float16x8_t)vuzp2q_s16((int16x8_t)v130, (int16x8_t)_Q6)), _Q17), (float16x8_t)vuzp2q_s16((int16x8_t)v148, (int16x8_t)v153));
          float16x8_t v162 = vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v142, v142), (float16x8_t)vtrn2q_s16((int16x8_t)_Q23, (int16x8_t)_Q23)), (float16x8_t)vtrn1q_s16(v158, v158)), (float16x8_t)vtrn2q_s16((int16x8_t)v161, (int16x8_t)v161));
          _S16 = *(float *)v264.i32;
          _Q6.i32[0] = v262.i32[0];
          float16x8_t v163 = vmlaq_f16(vmlaq_f16(v249, v264, (float16x8_t)vzip1q_s16(_Q5, _Q5)), v262, (float16x8_t)vzip2q_s16(_Q5, _Q5));
          _Q5.i32[0] = v260.i32[0];
          _Q7 = vmlaq_f16(v163, v260, v162);
          v78.i32[0] = v246.i32[0];
          int8x8_t v45 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(_Q7, v247), v246)));
          *(int8x8_t *)&v74[v82] = v45;
          if (v73)
          {
            int8x8_t v78 = vqtbl2_s8(*(int8x16x2_t *)(&_Q25 - 1), v86);
            a4 = (float16x8_t)v285;
            a5 = v286;
            float v77 = v287;
            v45.i32[0] = v288;
            *(int8x8_t *)a4.i8 = vqtbl2_s8(*(int8x16x2_t *)a4.i8, v86);
            *(void *)uint64_t v73 = a4.i64[0];
            v73 += 8;
            *v84++ = v78;
          }
          v82 += 8;
        }
        while ((int)v82 < (int)v15 - 7);
        char v164 = &v74[v82];
        unint64_t v165 = v15 & 0xFFFFFFF8;
      }
      if (v15 > v165)
      {
        uint64_t v166 = 0;
        float v167 = (char *)v75 + 4;
        float v168 = (char *)v83 + 4;
        do
        {
          uint64_t v169 = v166 + v293;
          v78.i8[0] = v167[v169 - 4];
          uint64_t v170 = v166 + BYTE1(v293);
          a4.i8[0] = v167[v170 - 4];
          uint64_t v171 = v166 + BYTE2(v293);
          a5.i8[0] = v167[v171 - 4];
          uint64_t v172 = v166 + HIBYTE(v293);
          char v173 = v167[v172 - 4];
          LOBYTE(v77) = v167[v169];
          v45.i8[0] = v167[v170];
          _Q5.i8[0] = v167[v171];
          char v174 = v167[v172];
          float v175 = &v168[v169];
          _Q6.i8[0] = v168[v169 - 4];
          _Q7.i8[0] = v168[v170 - 4];
          float v176 = &v168[v171];
          LOBYTE(_S16) = *(v176 - 4);
          float v177 = &v168[v172];
          __int8 v178 = *(v177 - 4);
          _Q17.i8[0] = *v175;
          _Q23.i8[0] = v168[v170];
          LOBYTE(_Q25) = *v176;
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S21 * (float)v78.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S21 * (float)a4.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S21 * (float)a5.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H3 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S21 * (float)LODWORD(v77), 0.0), 8191.0)));
          _H4 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S21 * (float)v45.u32[0], 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S4, H4
          }
          _H5 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S21 * (float)_Q5.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S21 * (float)_Q6.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S21 * (float)_Q7.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H16 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S21 * (float)LODWORD(_S16), 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          _H17 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S21 * (float)_Q17.u32[0], 0.0), 8191.0)));
          _H23 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S21 * (float)_Q23.u32[0], 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S23, H23
          }
          _H25 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S21 * (float)_Q25, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v203 = (float)((float)(v278 * _S1) + (float)(_S0 * v279)) + (float)(_S2 * v277);
          float v204 = (float)((float)(v275 * _S1) + (float)(_S0 * v276)) + (float)(_S2 * v274);
          _S2 = (float)((float)(v272 * _S1) + (float)(_S0 * v273)) + (float)(_S2 * v271);
          float v206 = (float)((float)(v278 * _S4) + (float)(_S3 * v279)) + (float)(_S5 * v277);
          float v207 = (float)((float)(v275 * _S4) + (float)(_S3 * v276)) + (float)(_S5 * v274);
          _S5 = (float)((float)(v272 * _S4) + (float)(_S3 * v273)) + (float)(_S5 * v271);
          float v209 = (float)((float)(v278 * _S7) + (float)(_S6 * v279)) + (float)(_S16 * v277);
          float v210 = (float)((float)(v275 * _S7) + (float)(_S6 * v276)) + (float)(_S16 * v274);
          _S16 = (float)((float)(v272 * _S7) + (float)(_S6 * v273)) + (float)(_S16 * v271);
          float v212 = (float)((float)(v278 * _S23) + (float)(_S17 * v279)) + (float)(_S25 * v277);
          float v213 = (float)((float)(v275 * _S23) + (float)(_S17 * v276)) + (float)(_S25 * v274);
          _S17 = (float)((float)(v272 * _S23) + (float)(_S17 * v273)) + (float)(_S25 * v271);
          LOWORD(_S0) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v203, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v204, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S3) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v206, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v207, 0.0), 8191.0)));
          __asm
          {
            FCVT            S4, H3
            FCVT            S3, H6
          }
          LOWORD(_S5) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v209, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v210, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S16) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S23, H16 }
          LOWORD(_S16) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v212, 0.0), 8191.0)));
          LOWORD(_S25) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v213, 0.0), 8191.0)));
          __asm
          {
            FCVT            S16, H16
            FCVT            S25, H25
          }
          LOWORD(_S17) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          if (v73)
          {
            char v221 = v173;
          }
          else
          {
            __int8 v178 = 0;
            char v221 = 0;
          }
          if (v73)
          {
            __int8 v222 = *v177;
          }
          else
          {
            char v174 = 0;
            __int8 v222 = 0;
          }
          float v223 = (float)((float)((float)(v281 * _S1) + (float)(v282 * _S0)) + (float)(v280 * _S2)) + v57;
          if (v223 < v57) {
            float v224 = v57;
          }
          else {
            float v224 = (float)((float)((float)(v281 * _S1) + (float)(v282 * _S0)) + (float)(v280 * _S2)) + v57;
          }
          BOOL v225 = v223 <= v270;
          float v226 = (float)((float)((float)(v281 * _S3) + (float)(v282 * _S4)) + (float)(v280 * _S5)) + v57;
          if (!v225) {
            float v224 = v270;
          }
          __int8 v227 = llroundf(v224);
          if (v226 < v57) {
            float v228 = v57;
          }
          else {
            float v228 = (float)((float)((float)(v281 * _S3) + (float)(v282 * _S4)) + (float)(v280 * _S5)) + v57;
          }
          BOOL v225 = v226 <= v270;
          float v229 = (float)((float)((float)(v281 * *(float *)_Q7.i32) + (float)(v282 * *(float *)_Q6.i32))
                       + (float)(v280 * *(float *)_Q23.i32))
               + v57;
          if (!v225) {
            float v228 = v270;
          }
          __int8 v230 = llroundf(v228);
          if (v229 < v57) {
            float v231 = v57;
          }
          else {
            float v231 = (float)((float)((float)(v281 * *(float *)_Q7.i32) + (float)(v282 * *(float *)_Q6.i32))
          }
                         + (float)(v280 * *(float *)_Q23.i32))
                 + v57;
          BOOL v225 = v229 <= v270;
          float v232 = (float)((float)((float)(v281 * *(float *)&_Q25) + (float)(v282 * _S16))
                       + (float)(v280 * *(float *)_Q17.i32))
               + v57;
          if (!v225) {
            float v231 = v270;
          }
          __int8 v233 = llroundf(v231);
          if (v232 < v57) {
            float v234 = v57;
          }
          else {
            float v234 = (float)((float)((float)(v281 * *(float *)&_Q25) + (float)(v282 * _S16))
          }
                         + (float)(v280 * *(float *)_Q17.i32))
                 + v57;
          if (v232 <= v270) {
            float v235 = v234;
          }
          else {
            float v235 = v270;
          }
          float v236 = (float)((float)(_S0 + _S4) + *(float *)_Q6.i32) + _S16;
          float v237 = (float)((float)(_S1 + _S3) + *(float *)_Q7.i32) + *(float *)&_Q25;
          *(unsigned char *)unint64_t result = v227;
          *(unsigned char *)(result + 1) = v230;
          v85->i8[0] = v233;
          v85->i8[1] = llroundf(v235);
          a5.f32[0] = (float)((float)(_S2 + _S5) + *(float *)_Q23.i32) + *(float *)_Q17.i32;
          float v238 = (float)((float)(v290 + (float)(v236 * v269)) + (float)(v237 * v267)) + (float)(a5.f32[0] * v266);
          float v77 = v289;
          if (v238 <= v289)
          {
            float v77 = (float)((float)(v290 + (float)(v236 * v269)) + (float)(v237 * v267)) + (float)(a5.f32[0] * v266);
            if (v238 < v283) {
              float v77 = v283;
            }
          }
          *(float *)_Q5.i32 = v244;
          *(float *)v45.i32 = v243;
          *(float *)v78.i32 = (float)((float)(v290 + (float)(v236 * v244)) + (float)(v237 * v243))
                            + (float)(a5.f32[0] * v242);
          *char v164 = llroundf(v77);
          *(float *)a4.i32 = v289;
          if (*(float *)v78.i32 <= v289)
          {
            a4.i32[0] = v78.i32[0];
            if (*(float *)v78.i32 < v283) {
              *(float *)a4.i32 = v283;
            }
          }
          v164[1] = llroundf(*(float *)a4.i32);
          if (v73)
          {
            *(unsigned char *)uint64_t v73 = v221;
            *(unsigned char *)(v73 + 1) = v174;
            v73 += 2;
            v84->i8[0] = v178;
            v84->i8[1] = v222;
            float v84 = (int8x8_t *)((char *)v84 + 2);
          }
          v165 += 2;
          v166 += 8;
          result += 2;
          float v85 = (int8x8_t *)((char *)v85 + 2);
          v164 += 2;
        }
        while (v15 > v165);
      }
      int8x16_t v75 = (uint64_t *)&v79[v29];
      uint64_t v52 = v241;
      unint64_t result = (unint64_t)&v80[v241];
      v74 += v240;
      uint64_t v73 = v81 + v32;
      v53 += 2;
    }
    while (v239 > v53);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v17 = *(void *)(result + 28);
  unint64_t v18 = 2 * *result;
  unint64_t v19 = v17 * a2 / v18;
  unint64_t v20 = (v17 + v17 * a2) / v18;
  if (2 * v20 != 2 * v19)
  {
    unint64_t v21 = 0;
    unint64_t v22 = *(void *)(result + 20);
    unint64_t v135 = 2 * v20 - 2 * v19;
    uint64_t v23 = *((void *)result + 19);
    uint64_t v24 = (uint64_t *)*((void *)result + 17);
    uint64_t v25 = **((void **)result + 8);
    uint64_t v26 = *v24;
    uint64_t v27 = v24[2];
    float v28 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    LOWORD(a5) = *(_WORD *)(v23 + 144);
    float v29 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 146);
    *(float *)&unsigned int v30 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 148);
    float v31 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 150);
    float v148 = (float)LODWORD(a6);
    float v149 = (float)LODWORD(a8);
    LOWORD(v30) = *(_WORD *)(v23 + 152);
    float v146 = *(float *)(v23 + 36);
    float v147 = (float)v30;
    float v144 = *(float *)(v23 + 44);
    float v145 = *(float *)(v23 + 40);
    float v32 = 0.25;
    float v142 = *(float *)(v23 + 52) * 0.25;
    float v143 = *(float *)(v23 + 48) * 0.25;
    float v33 = *(float *)(v23 + 64);
    float v140 = *(float *)(v23 + 60) * 0.25;
    float v141 = *(float *)(v23 + 56) * 0.25;
    float v34 = *(float *)(v23 + 68);
    float v138 = *(float *)(v23 + 72);
    float v139 = v33 * 0.25;
    float v35 = *(float *)(v23 + 80);
    float v136 = *(float *)(v23 + 76);
    float v137 = v34 * 0.25;
    float v36 = *(float *)(v23 + 84);
    float v37 = *(float *)(v23 + 88);
    float v38 = *(float *)(v23 + 92);
    float v39 = *(float *)(v23 + 96);
    float v41 = *(float *)(v23 + 100);
    float v40 = *(float *)(v23 + 104);
    uint64_t v42 = v23 + 164;
    uint64_t v43 = v23 + 16548;
    uint64_t v44 = *((void *)result + 14);
    int8x8_t v45 = (void *)*((void *)result + 16);
    uint64_t v46 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v18);
    uint64_t v47 = **((void **)result + 7) + v25 * (*(void *)(result + 44) + 2 * v19) + 4 * *(void *)(result + 36);
    uint64_t v48 = v45[1];
    unsigned int v49 = (unsigned char *)(*v45 + v46 * *v24 + v44);
    uint64_t v50 = v45[2];
    if (v50) {
      float v51 = (unsigned __int8 *)(v50 + v46 * v27 + v44);
    }
    else {
      float v51 = 0;
    }
    unint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v23 + 157);
    uint64_t v52 = *(unsigned __int8 *)(v23 + 156);
    if (v46 >= 0) {
      uint64_t v53 = v46;
    }
    else {
      uint64_t v53 = v46 + 1;
    }
    uint64_t v133 = v24[2];
    uint64_t v134 = v24[1];
    uint64_t v54 = v48 + (v53 >> 1) * v134;
    uint64_t v55 = *(unsigned __int8 *)(v23 + 155);
    uint64_t v56 = *(unsigned __int8 *)(v23 + 154);
    uint64_t v57 = v54 + v44;
    do
    {
      float v58 = &v51[v27];
      float v59 = &v49[v26];
      uint64_t v60 = v47 + v25;
      if (v22)
      {
        unint64_t v61 = 0;
        float32x4_t v62 = &v51[v27];
        int8x8_t v63 = &v49[v26];
        uint64_t v64 = v47 + v25;
        do
        {
          LOBYTE(v34) = *(unsigned char *)(v47 + v56);
          LOBYTE(v32) = *(unsigned char *)(v47 + v55);
          LOBYTE(v33) = *(unsigned char *)(v47 + v52);
          LOBYTE(v8) = *(unsigned char *)(v47 + 4 + v56);
          LOBYTE(v9) = *(unsigned char *)(v47 + 4 + v55);
          LOBYTE(_S12) = *(unsigned char *)(v47 + 4 + v52);
          unsigned __int8 v65 = result[v47 + 4];
          LOBYTE(_S13) = *(unsigned char *)(v64 + v56);
          LOBYTE(_S14) = *(unsigned char *)(v64 + v55);
          LOBYTE(_S15) = *(unsigned char *)(v64 + v52);
          unsigned __int8 v66 = result[v64];
          LOBYTE(v14) = *(unsigned char *)(v64 + 4 + v56);
          LOBYTE(v15) = *(unsigned char *)(v64 + 4 + v55);
          LOBYTE(v16) = *(unsigned char *)(v64 + 4 + v52);
          unsigned int v67 = llroundf(fminf(fmaxf(v28 * (float)LODWORD(v34), 0.0), 8191.0));
          _S18 = v28 * (float)LODWORD(v16);
          _H24 = *(_WORD *)(v42 + 2 * v67);
          __asm { FCVT            S24, H24 }
          _H19 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)LODWORD(v32), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)LODWORD(v33), 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          _H10 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)LODWORD(v8), 0.0), 8191.0)));
          _H11 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)LODWORD(v9), 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          _H12 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)LODWORD(_S12), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)LODWORD(_S13), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)LODWORD(_S14), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)LODWORD(_S15), 0.0), 8191.0)));
          __asm { FCVT            S15, H15 }
          _H21 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)v14, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v28 * (float)v15, 0.0), 8191.0)));
          __asm
          {
            FCVT            S21, H21
            FCVT            S22, H22
          }
          LOWORD(_S18) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          float v96 = (float)((float)(v136 * _S19) + (float)(_S24 * v138)) + (float)(_S20 * v35);
          _S3 = (float)((float)(v37 * _S19) + (float)(_S24 * v36)) + (float)(_S20 * v38);
          float v98 = (float)((float)(v41 * _S19) + (float)(_S24 * v39)) + (float)(_S20 * v40);
          float v99 = (float)((float)(v136 * _S11) + (float)(_S10 * v138)) + (float)(_S12 * v35);
          float v16 = (float)((float)(v37 * _S11) + (float)(_S10 * v36)) + (float)(_S12 * v38);
          float v100 = (float)((float)(v41 * _S11) + (float)(_S10 * v39)) + (float)(_S12 * v40);
          float v101 = (float)((float)(v136 * _S14) + (float)(_S13 * v138)) + (float)(_S15 * v35);
          float v102 = (float)((float)(v37 * _S14) + (float)(_S13 * v36)) + (float)(_S15 * v38);
          _S6 = (float)((float)(v41 * _S14) + (float)(_S13 * v39)) + (float)(_S15 * v40);
          float v104 = (float)((float)(v136 * _S22) + (float)(_S21 * v138)) + (float)(_S18 * v35);
          float v105 = (float)((float)(v37 * _S22) + (float)(_S21 * v36)) + (float)(_S18 * v38);
          unsigned int v106 = llroundf(fminf(fmaxf(v96, 0.0), 8191.0));
          _S5 = (float)((float)(v41 * _S22) + (float)(_S21 * v39)) + (float)(_S18 * v40);
          LOWORD(_S18) = *(_WORD *)(v43 + 2 * v106);
          __asm { FCVT            S10, H18 }
          LOWORD(_S3) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S11, H3 }
          LOWORD(_S3) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S12, H3 }
          LOWORD(_S3) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          LOWORD(_S18) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v16, 0.0), 8191.0)));
          __asm
          {
            FCVT            S14, H3
            FCVT            S13, H18
          }
          LOWORD(_S3) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          LOWORD(_S3) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          LOWORD(_S3) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          LOWORD(_S3) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          LOWORD(_S3) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S6, H6
          }
          LOWORD(_S5) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          if (v51)
          {
            unsigned __int8 v116 = result[v47];
          }
          else
          {
            unsigned __int8 v66 = 0;
            unsigned __int8 v116 = 0;
          }
          if (v51)
          {
            unsigned __int8 v117 = result[v64 + 4];
          }
          else
          {
            unsigned __int8 v65 = 0;
            unsigned __int8 v117 = 0;
          }
          unsigned int v14 = LODWORD(v145);
          unsigned int v15 = LODWORD(v144);
          float v118 = (float)((float)((float)(v145 * _S11) + (float)(v146 * _S10)) + (float)(v144 * _S12)) + v29;
          if (v118 < v29) {
            float v119 = v29;
          }
          else {
            float v119 = (float)((float)((float)(v145 * _S11) + (float)(v146 * _S10)) + (float)(v144 * _S12)) + v29;
          }
          BOOL v120 = v118 <= v31;
          float v121 = (float)((float)((float)(v145 * _S13) + (float)(v146 * _S14)) + (float)(v144 * _S15)) + v29;
          if (!v120) {
            float v119 = v31;
          }
          char v122 = llroundf(v119);
          if (v121 < v29) {
            float v123 = v29;
          }
          else {
            float v123 = (float)((float)((float)(v145 * _S13) + (float)(v146 * _S14)) + (float)(v144 * _S15)) + v29;
          }
          BOOL v120 = v121 <= v31;
          float v124 = (float)((float)((float)(v145 * _S19) + (float)(v146 * _S18)) + (float)(v144 * _S20)) + v29;
          if (!v120) {
            float v123 = v31;
          }
          char v125 = llroundf(v123);
          if (v124 < v29) {
            float v126 = v29;
          }
          else {
            float v126 = (float)((float)((float)(v145 * _S19) + (float)(v146 * _S18)) + (float)(v144 * _S20)) + v29;
          }
          BOOL v120 = v124 <= v31;
          float v127 = (float)((float)((float)(v145 * _S6) + (float)(v146 * _S3)) + (float)(v144 * _S5)) + v29;
          if (!v120) {
            float v126 = v31;
          }
          char v128 = llroundf(v126);
          if (v127 < v29) {
            float v129 = v29;
          }
          else {
            float v129 = (float)((float)((float)(v145 * _S6) + (float)(v146 * _S3)) + (float)(v144 * _S5)) + v29;
          }
          if (v127 <= v31) {
            float v130 = v129;
          }
          else {
            float v130 = v31;
          }
          float v131 = (float)((float)(_S10 + _S14) + _S18) + _S3;
          float v132 = (float)((float)(_S11 + _S13) + _S19) + _S6;
          *unsigned int v49 = v122;
          v49[1] = v125;
          *int8x8_t v63 = v128;
          v63[1] = llroundf(v130);
          float v33 = (float)((float)(_S12 + _S15) + _S20) + _S5;
          float v9 = (float)((float)(v148 + (float)(v131 * v143)) + (float)(v132 * v142)) + (float)(v33 * v141);
          float v8 = v147;
          if (v9 <= v147)
          {
            float v8 = (float)((float)(v148 + (float)(v131 * v143)) + (float)(v132 * v142)) + (float)(v33 * v141);
            if (v9 < v149) {
              float v8 = v149;
            }
          }
          float v34 = (float)((float)(v148 + (float)(v131 * v140)) + (float)(v132 * v139)) + (float)(v33 * v137);
          *(unsigned char *)(v57 + v61) = llroundf(v8);
          float v32 = v147;
          if (v34 <= v147)
          {
            float v32 = v34;
            if (v34 < v149) {
              float v32 = v149;
            }
          }
          *(unsigned char *)(v57 + v61 + 1) = llroundf(v32);
          if (v51)
          {
            *float v51 = v116;
            v51[1] = v65;
            v51 += 2;
            *float32x4_t v62 = v66;
            v62[1] = v117;
            v62 += 2;
          }
          v47 += 8;
          v64 += 8;
          v49 += 2;
          v63 += 2;
          v61 += 2;
        }
        while (v22 > v61);
      }
      uint64_t v47 = v60 + v25;
      unsigned int v49 = &v59[v26];
      uint64_t v27 = v133;
      v57 += v134;
      float v51 = &v58[v133];
      v21 += 2;
    }
    while (v135 > v21);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_420vf_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_BGRA_rgb_420vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v6 = 0;
  unint64_t v7 = *(void *)(a1 + 20);
  uint64_t v159 = *(void *)(a1 + 36);
  uint64_t v8 = *(void *)(a1 + 44);
  uint64_t v9 = *(void *)(a1 + 28);
  unint64_t v10 = 2 * *a1;
  uint64_t v11 = 2 * (v9 * a2 / v10);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = 2 * ((v9 + v9 * a2) / v10);
  uint64_t v14 = v8 + v13;
  uint64_t v15 = *((void *)a1 + 14);
  unint64_t v16 = *((void *)a1 + 13) * a2;
  uint64_t v17 = *((void *)a1 + 19);
  uint64_t v18 = *((void *)a1 + 15);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v20 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v21 = **((void **)a1 + 8);
  uint64_t v157 = **((void **)a1 + 7);
  uint64_t v22 = *v20;
  uint64_t v23 = v20[1];
  uint64_t v155 = *v19;
  uint64_t result = v19[2];
  uint64_t v147 = v19[1];
  uint64_t v25 = v20[2];
  unsigned int v26 = *(_DWORD *)(v17 + 128);
  unsigned int v27 = *(_DWORD *)(v17 + 136);
  int v164 = *(_DWORD *)(v17 + 154);
  uint64_t v28 = v18 + 2 * (v16 / v10);
  uint64_t v29 = v21 * v12;
  unsigned int v30 = *(unsigned __int16 *)(v17 + 144);
  unsigned int v31 = *(unsigned __int16 *)(v17 + 146);
  unsigned int v32 = *(unsigned __int16 *)(v17 + 148);
  unsigned int v33 = *(unsigned __int16 *)(v17 + 150);
  if (v28 >= 0) {
    uint64_t v34 = v28;
  }
  else {
    uint64_t v34 = v28 + 1;
  }
  unsigned int v35 = *(unsigned __int16 *)(v17 + 152);
  uint64_t v144 = v23;
  uint64_t v36 = v23 * (v34 >> 1);
  _S0 = *(float *)(v17 + 36);
  _S1 = *(float *)(v17 + 40);
  _S2 = *(float *)(v17 + 44);
  v4.i32[0] = *(_DWORD *)(v17 + 48);
  v3.i32[0] = *(_DWORD *)(v17 + 52);
  v40.i32[0] = *(_DWORD *)(v17 + 56);
  __int32 v42 = *(_DWORD *)(v17 + 60);
  __int32 v41 = *(_DWORD *)(v17 + 64);
  v2.i32[0] = *(_DWORD *)(v17 + 68);
  long long v162 = 0u;
  long long v163 = 0u;
  do
  {
    unsigned int v43 = 0;
    char v44 = *((unsigned char *)&v164 + v6);
    do
    {
      *((unsigned char *)&v162 + 8 * (((_BYTE)v6 + (v43 >> 3)) & 0x1F) + v43) = v44 + 4 * v43;
      ++v43;
    }
    while (v43 != 8);
    ++v6;
  }
  while (v6 != 4);
  if (v13 != v11)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v14 - v12;
    float v47 = (float)v26;
    float v48 = (float)v30;
    float v49 = (float)v31;
    float v50 = (float)v32;
    float v161 = (float)v33;
    float v51 = (float)v35;
    _S16 = (float)v27 / (float)v26;
    v4.i32[1] = v42;
    __asm { FMOV            V22.2S, #0.25 }
    v3.i32[1] = v41;
    *(float32x2_t *)v4.f32 = vmul_f32(*(float32x2_t *)v4.f32, _D22);
    *(float32x2_t *)v3.f32 = vmul_f32(*(float32x2_t *)v3.f32, _D22);
    v40.i32[1] = v2.i32[0];
    *(float32x2_t *)v2.f32 = vmul_f32(v40, _D22);
    __asm
    {
      FCVT            H8, S0
      FCVT            H9, S1
    }
    float16x8_t v154 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    __asm { FCVT            H10, S2 }
    float16x8_t v153 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    int16x4_t v61 = (int16x4_t)vcvt_f16_f32(v2);
    float16x8_t v152 = (float16x8_t)vdupq_lane_s32((int32x2_t)v61, 0);
    *(short float *)v61.i16 = (short float)v30;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(v61, 0);
    *(short float *)v61.i16 = (short float)v31;
    int16x8_t v63 = vdupq_lane_s16(v61, 0);
    *(short float *)v61.i16 = (short float)v32;
    float16x8_t v64 = (float16x8_t)vdupq_lane_s16(v61, 0);
    *(short float *)v61.i16 = (short float)v33;
    int16x8_t v65 = vdupq_lane_s16(v61, 0);
    float16x8_t v150 = (float16x8_t)v65;
    float16x8_t v151 = (float16x8_t)v63;
    *(short float *)v65.i16 = (short float)v35;
    float16x8_t v149 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v65.i8, 0);
    if (result) {
      result += v25 * v28 + v15;
    }
    else {
      uint64_t result = 0;
    }
    unsigned __int8 v66 = (unsigned char *)(v147 + v36 + v15);
    unsigned int v67 = (int8x8_t *)(v155 + v22 * v28 + v15);
    int16x8_t v68 = (char *)(v157 + v29 + 4 * v159);
    __asm { FCVT            H11, S16 }
    float v158 = v3.f32[0];
    v70.i32[0] = v4.i32[1];
    float v160 = v4.f32[0];
    float v146 = v3.f32[1];
    float v148 = v4.f32[1];
    LODWORD(v71) = v2.i32[1];
    float v145 = v2.f32[1];
    float v156 = v2.f32[0];
    do
    {
      int16x8_t v72 = &v68[v21];
      uint64_t v73 = (char *)v67 + v22;
      uint64_t v74 = result + v25;
      if ((int)v7 < 8)
      {
        unint64_t v108 = 0;
        int8x8_t v78 = (int8x8_t *)((char *)v67 + v22);
        float16x8_t v107 = v66;
        float v77 = (int8x8_t *)(result + v25);
        float32x4_t v76 = &v68[v21];
      }
      else
      {
        uint64_t v75 = 0;
        float32x4_t v76 = &v68[v21];
        float v77 = (int8x8_t *)(result + v25);
        int8x8_t v78 = (int8x8_t *)((char *)v67 + v22);
        do
        {
          int8x8_t v79 = *(int8x8_t *)((char *)&v163 + 8);
          *(void *)&long long v71 = *(void *)v68;
          uint64_t v80 = *((void *)v68 + 1);
          v3.i64[0] = *((void *)v68 + 2);
          v4.i64[0] = *((void *)v68 + 3);
          v68 += 32;
          *((void *)&v71 + 1) = v80;
          v3.i64[1] = v4.i64[0];
          float32x4_t v2 = v3;
          int8x8_t v81 = vqtbl2_s8(*(int8x16x2_t *)(&v2 - 1), *(int8x8_t *)&v162);
          int8x8_t v82 = vqtbl2_s8(*(int8x16x2_t *)(&v2 - 1), *(int8x8_t *)((char *)&v162 + 8));
          *(int8x8_t *)v83.i8 = vzip1_s8(v81, 0);
          v83.u64[1] = (unint64_t)vzip2_s8(v81, 0);
          int8x8_t v84 = vqtbl2_s8(*(int8x16x2_t *)(&v2 - 1), *(int8x8_t *)&v163);
          *(int8x8_t *)v85.i8 = vzip1_s8(v82, 0);
          v85.u64[1] = (unint64_t)vzip2_s8(v82, 0);
          *(int8x8_t *)v86.i8 = vzip1_s8(v84, 0);
          v86.u64[1] = (unint64_t)vzip2_s8(v84, 0);
          float16x8_t v87 = vcvtq_f16_u16(v86);
          float16x8_t v88 = vmulq_n_f16(vcvtq_f16_u16(v83), _H11);
          float16x8_t v89 = vmulq_n_f16(vcvtq_f16_u16(v85), _H11);
          float16x8_t v90 = vmulq_n_f16(v87, _H11);
          *(void *)&long long v93 = *(void *)v76;
          v85.i64[0] = *((void *)v76 + 1);
          *(void *)&long long v91 = *((void *)v76 + 2);
          uint64_t v92 = *((void *)v76 + 3);
          v76 += 32;
          *((void *)&v93 + 1) = v85.i64[0];
          *((void *)&v91 + 1) = v92;
          long long v94 = v91;
          int8x8_t v95 = vqtbl2_s8(*(int8x16x2_t *)&v93, *(int8x8_t *)&v162);
          int8x8_t v96 = vqtbl2_s8(*(int8x16x2_t *)&v93, *(int8x8_t *)((char *)&v162 + 8));
          int8x8_t v97 = vqtbl2_s8(*(int8x16x2_t *)&v93, *(int8x8_t *)&v163);
          *(int8x8_t *)v98.i8 = vzip1_s8(v95, 0);
          v98.u64[1] = (unint64_t)vzip2_s8(v95, 0);
          *(int8x8_t *)v99.i8 = vzip1_s8(v96, 0);
          v99.u64[1] = (unint64_t)vzip2_s8(v96, 0);
          *(int8x8_t *)v100.i8 = vzip1_s8(v97, 0);
          v100.u64[1] = (unint64_t)vzip2_s8(v97, 0);
          float16x8_t v101 = vmulq_n_f16(vcvtq_f16_u16(v98), _H11);
          float16x8_t v102 = vmulq_n_f16(vcvtq_f16_u16(v99), _H11);
          float16x8_t v103 = vmulq_n_f16(vcvtq_f16_u16(v100), _H11);
          *v67++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v62, v88, _H8), v89, _H9), v90, _H10), v62), v64)));
          *v78++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v62, v101, _H8), v102, _H9), v103, _H10), v62), v64)));
          int16x8_t v104 = (int16x8_t)vaddq_f16((float16x8_t)vuzp2q_s16((int16x8_t)v101, (int16x8_t)v102), vaddq_f16(vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v88, (int16x8_t)v89), (float16x8_t)vuzp2q_s16((int16x8_t)v88, (int16x8_t)v89)), (float16x8_t)vuzp1q_s16((int16x8_t)v101, (int16x8_t)v102)));
          float16x8_t v105 = vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v103, (int16x8_t)v103), vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v90, (int16x8_t)v90), (float16x8_t)vtrn2q_s16((int16x8_t)v90, (int16x8_t)v90)), (float16x8_t)vtrn1q_s16((int16x8_t)v103, (int16x8_t)v103)));
          float v5 = *(float *)v153.i32;
          float16x8_t v106 = vmlaq_f16(vmlaq_f16(v151, v154, (float16x8_t)vzip1q_s16(v104, v104)), v153, (float16x8_t)vzip2q_s16(v104, v104));
          float v47 = *(float *)v152.i32;
          int8x8_t v70 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(v106, v152, v105), v150), v149)));
          *(int8x8_t *)&v66[v75] = v70;
          if (result)
          {
            int8x8_t v70 = vqtbl2_s8(*(int8x16x2_t *)&v93, v79);
            *(int8x8_t *)&long long v71 = vqtbl2_s8(*(int8x16x2_t *)(&v2 - 1), v79);
            *(void *)uint64_t result = v71;
            result += 8;
            *v77++ = v70;
          }
          v75 += 8;
        }
        while ((int)v75 < (int)v7 - 7);
        float16x8_t v107 = &v66[v75];
        unint64_t v108 = v7 & 0xFFFFFFF8;
      }
      if (v7 > v108)
      {
        uint64_t v109 = 0;
        float16x8_t v110 = v68 + 4;
        uint16x8_t v111 = v76 + 4;
        do
        {
          uint64_t v112 = v109 + v164;
          LOBYTE(v71) = v110[v112 - 4];
          *(float *)&long long v71 = _S16 * (float)v71;
          uint64_t v113 = v109 + BYTE1(v164);
          v2.i8[0] = v110[v113 - 4];
          v2.f32[0] = _S16 * (float)v2.u32[0];
          uint64_t v114 = v109 + BYTE2(v164);
          v3.i8[0] = v110[v114 - 4];
          v3.f32[0] = _S16 * (float)v3.u32[0];
          uint64_t v115 = v109 + HIBYTE(v164);
          v4.i8[0] = v110[v112];
          v4.f32[0] = _S16 * (float)v4.u32[0];
          v70.i8[0] = v110[v113];
          *(float *)&unsigned int v116 = (float)v70.u32[0];
          float v117 = _S16 * *(float *)&v116;
          LOBYTE(v116) = v110[v114];
          *(float *)&unsigned int v118 = (float)v116;
          float v119 = _S16 * *(float *)&v118;
          BOOL v120 = &v111[v112];
          LOBYTE(v118) = *(v120 - 4);
          *(float *)&unsigned int v121 = (float)v118;
          float v122 = _S16 * *(float *)&v121;
          LOBYTE(v121) = v111[v113 - 4];
          *(float *)&unsigned int v123 = (float)v121;
          float v124 = _S16 * *(float *)&v123;
          LOBYTE(v123) = v111[v114 - 4];
          *(float *)&unsigned int v125 = (float)v123;
          float v126 = _S16 * *(float *)&v125;
          LOBYTE(v125) = *v120;
          *(float *)v70.i32 = _S16 * (float)v125;
          LOBYTE(v47) = v111[v113];
          float v47 = _S16 * (float)LODWORD(v47);
          LOBYTE(v5) = v111[v114];
          float v5 = _S16 * (float)LODWORD(v5);
          __int8 v127 = v111[v115];
          if (result) {
            __int8 v128 = v111[v115 - 4];
          }
          else {
            __int8 v128 = 0;
          }
          if (result) {
            char v129 = v110[v115 - 4];
          }
          else {
            char v129 = 0;
          }
          if (result) {
            char v130 = v110[v115];
          }
          else {
            char v130 = 0;
          }
          if (!result) {
            __int8 v127 = 0;
          }
          float v131 = (float)((float)((float)(_S1 * v2.f32[0]) + (float)(_S0 * *(float *)&v71)) + (float)(_S2 * v3.f32[0]))
               + v48;
          float v132 = (float)((float)((float)(_S1 * v117) + (float)(_S0 * v4.f32[0])) + (float)(_S2 * v119)) + v48;
          float v133 = (float)((float)((float)(_S1 * v124) + (float)(_S0 * v122)) + (float)(_S2 * v126)) + v48;
          float v134 = (float)((float)((float)(_S1 * v47) + (float)(_S0 * *(float *)v70.i32)) + (float)(_S2 * v5)) + v48;
          if (v131 < v48) {
            float v135 = v48;
          }
          else {
            float v135 = (float)((float)((float)(_S1 * v2.f32[0]) + (float)(_S0 * *(float *)&v71)) + (float)(_S2 * v3.f32[0]))
          }
                 + v48;
          if (v131 <= v50) {
            float v136 = v135;
          }
          else {
            float v136 = v50;
          }
          __int8 v137 = llroundf(v136);
          if (v132 < v48) {
            float v138 = v48;
          }
          else {
            float v138 = (float)((float)((float)(_S1 * v117) + (float)(_S0 * v4.f32[0])) + (float)(_S2 * v119)) + v48;
          }
          if (v132 > v50) {
            float v138 = v50;
          }
          v67->i8[0] = v137;
          v67->i8[1] = llroundf(v138);
          if (v133 < v48) {
            float v139 = v48;
          }
          else {
            float v139 = (float)((float)((float)(_S1 * v124) + (float)(_S0 * v122)) + (float)(_S2 * v126)) + v48;
          }
          if (v133 > v50) {
            float v139 = v50;
          }
          v78->i8[0] = llroundf(v139);
          if (v134 < v48) {
            float v140 = v48;
          }
          else {
            float v140 = (float)((float)((float)(_S1 * v47) + (float)(_S0 * *(float *)v70.i32)) + (float)(_S2 * v5)) + v48;
          }
          if (v134 > v50) {
            float v140 = v50;
          }
          v78->i8[1] = llroundf(v140);
          float v141 = (float)((float)(*(float *)&v71 + v4.f32[0]) + v122) + *(float *)v70.i32;
          float v142 = (float)((float)(v2.f32[0] + v117) + v124) + v47;
          v3.f32[0] = (float)((float)(v3.f32[0] + v119) + v126) + v5;
          float v143 = (float)((float)(v49 + (float)(v141 * v160)) + (float)(v142 * v158)) + (float)(v3.f32[0] * v156);
          v4.f32[0] = v51;
          if (v143 <= v51)
          {
            v4.f32[0] = (float)((float)(v49 + (float)(v141 * v160)) + (float)(v142 * v158)) + (float)(v3.f32[0] * v156);
            if (v143 < v161) {
              v4.f32[0] = v161;
            }
          }
          *(float *)v70.i32 = v146;
          *(float *)&long long v71 = (float)((float)(v49 + (float)(v141 * v148)) + (float)(v142 * v146))
                         + (float)(v3.f32[0] * v145);
          unsigned char *v107 = llroundf(v4.f32[0]);
          v2.f32[0] = v51;
          if (*(float *)&v71 <= v51)
          {
            v2.i32[0] = v71;
            if (*(float *)&v71 < v161) {
              v2.f32[0] = v161;
            }
          }
          v107[1] = llroundf(v2.f32[0]);
          if (result)
          {
            *(unsigned char *)uint64_t result = v129;
            *(unsigned char *)(result + 1) = v130;
            result += 2;
            v77->i8[0] = v128;
            v77->i8[1] = v127;
            float v77 = (int8x8_t *)((char *)v77 + 2);
          }
          v108 += 2;
          v109 += 8;
          unsigned int v67 = (int8x8_t *)((char *)v67 + 2);
          int8x8_t v78 = (int8x8_t *)((char *)v78 + 2);
          v107 += 2;
        }
        while (v7 > v108);
      }
      int16x8_t v68 = &v72[v21];
      unsigned int v67 = (int8x8_t *)&v73[v22];
      v66 += v144;
      uint64_t result = v74 + v25;
      v45 += 2;
    }
    while (v46 > v45);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v19 = *(void *)(result + 28);
  unint64_t v20 = 2 * *result;
  unint64_t v21 = v19 * a2 / v20;
  unint64_t v22 = (v19 + v19 * a2) / v20;
  if (2 * v22 != 2 * v21)
  {
    unint64_t v23 = 0;
    unint64_t v24 = *(void *)(result + 20);
    uint64_t v25 = *(void *)(result + 44) + 2 * v21;
    unint64_t v26 = 2 * v22 - 2 * v21;
    uint64_t v27 = *((void *)result + 19);
    uint64_t v28 = (uint64_t *)*((void *)result + 17);
    uint64_t v29 = **((void **)result + 8);
    uint64_t v30 = *v28;
    uint64_t v31 = v28[1];
    uint64_t v32 = v28[2];
    *(float *)&unsigned int v33 = (float)*(unsigned int *)(v27 + 136);
    float v34 = *(float *)&v33 / (float)*(unsigned int *)(v27 + 128);
    LOWORD(v33) = *(_WORD *)(v27 + 144);
    float v35 = (float)v33;
    LOWORD(a5) = *(_WORD *)(v27 + 146);
    float v36 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v27 + 148);
    float v37 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v27 + 150);
    float v38 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v27 + 152);
    float v39 = (float)LODWORD(a8);
    float v40 = *(float *)(v27 + 36);
    float v41 = *(float *)(v27 + 40);
    float v42 = *(float *)(v27 + 44);
    float v43 = *(float *)(v27 + 48) * 0.25;
    float v44 = *(float *)(v27 + 52) * 0.25;
    float v45 = *(float *)(v27 + 56) * 0.25;
    float v46 = *(float *)(v27 + 60) * 0.25;
    float v47 = *(float *)(v27 + 64) * 0.25;
    float v48 = *(float *)(v27 + 68);
    float v49 = v48 * 0.25;
    uint64_t v50 = *((void *)result + 14);
    float v51 = (void *)*((void *)result + 16);
    uint64_t v52 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v20);
    uint64_t v53 = **((void **)result + 7) + v29 * v25 + 4 * *(void *)(result + 36);
    uint64_t v54 = (unsigned char *)(*v51 + v52 * v30 + v50);
    uint64_t v55 = v51[2];
    if (v55) {
      uint64_t v56 = (unsigned char *)(v55 + v52 * v32 + v50);
    }
    else {
      uint64_t v56 = 0;
    }
    uint64_t v57 = *(unsigned __int8 *)(v27 + 157);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v27 + 156);
    uint64_t v58 = v51[1] + v52 / 2 * v31;
    uint64_t v59 = *(unsigned __int8 *)(v27 + 155);
    uint64_t v60 = *(unsigned __int8 *)(v27 + 154);
    uint64_t v61 = v58 + v50;
    do
    {
      float16x8_t v62 = &v56[v32];
      int16x8_t v63 = &v54[v30];
      uint64_t v64 = v53 + v29;
      if (v24)
      {
        unint64_t v65 = 0;
        unsigned __int8 v66 = &v56[v32];
        unsigned int v67 = &v54[v30];
        uint64_t v68 = v53 + v29;
        do
        {
          LOBYTE(v48) = *(unsigned char *)(v53 + v60);
          float v69 = v34 * (float)LODWORD(v48);
          LOBYTE(v11) = *(unsigned char *)(v53 + v59);
          float v70 = v34 * (float)LODWORD(v11);
          LOBYTE(v12) = result[v53];
          float v71 = v34 * (float)LODWORD(v12);
          LOBYTE(v13) = *(unsigned char *)(v53 + 4 + v60);
          float v72 = v34 * (float)LODWORD(v13);
          LOBYTE(v14) = *(unsigned char *)(v53 + 4 + v59);
          float v73 = v34 * (float)LODWORD(v14);
          LOBYTE(v15) = result[v53 + 4];
          float v15 = v34 * (float)LODWORD(v15);
          char v74 = *(unsigned char *)(v53 + 4 + v57);
          LOBYTE(v16) = *(unsigned char *)(v68 + v60);
          float v16 = v34 * (float)LODWORD(v16);
          LOBYTE(v17) = *(unsigned char *)(v68 + v59);
          float v17 = v34 * (float)LODWORD(v17);
          LOBYTE(v18) = result[v68];
          float v18 = v34 * (float)LODWORD(v18);
          char v75 = *(unsigned char *)(v68 + v57);
          LOBYTE(v8) = *(unsigned char *)(v68 + 4 + v60);
          LOBYTE(v9) = *(unsigned char *)(v68 + 4 + v59);
          float v8 = v34 * (float)LODWORD(v8);
          float v9 = v34 * (float)LODWORD(v9);
          LOBYTE(v10) = result[v68 + 4];
          float v10 = v34 * (float)LODWORD(v10);
          if (v56)
          {
            char v76 = *(unsigned char *)(v53 + v57);
          }
          else
          {
            char v75 = 0;
            char v76 = 0;
          }
          if (v56)
          {
            char v77 = *(unsigned char *)(v68 + 4 + v57);
          }
          else
          {
            char v74 = 0;
            char v77 = 0;
          }
          float v78 = (float)((float)((float)(v41 * v70) + (float)(v40 * v69)) + (float)(v42 * v71)) + v35;
          float v79 = (float)((float)((float)(v41 * v73) + (float)(v40 * v72)) + (float)(v42 * v15)) + v35;
          float v80 = (float)((float)((float)(v41 * v17) + (float)(v40 * v16)) + (float)(v42 * v18)) + v35;
          if (v78 < v35) {
            float v82 = v35;
          }
          else {
            float v82 = (float)((float)((float)(v41 * v70) + (float)(v40 * v69)) + (float)(v42 * v71)) + v35;
          }
          if (v78 <= v37) {
            float v83 = v82;
          }
          else {
            float v83 = v37;
          }
          *uint64_t v54 = llroundf(v83);
          if (v79 < v35) {
            float v84 = v35;
          }
          else {
            float v84 = (float)((float)((float)(v41 * v73) + (float)(v40 * v72)) + (float)(v42 * v15)) + v35;
          }
          if (v79 > v37) {
            float v84 = v37;
          }
          char v85 = llroundf(v84);
          float v81 = (float)((float)(v41 * v9) + (float)(v40 * v8)) + (float)(v42 * v10);
          float v86 = v81 + v35;
          v54[1] = v85;
          if (v80 < v35) {
            float v87 = v35;
          }
          else {
            float v87 = (float)((float)((float)(v41 * v17) + (float)(v40 * v16)) + (float)(v42 * v18)) + v35;
          }
          if (v80 > v37) {
            float v87 = v37;
          }
          *unsigned int v67 = llroundf(v87);
          if (v86 < v35) {
            float v88 = v35;
          }
          else {
            float v88 = v81 + v35;
          }
          if (v86 <= v37) {
            float v89 = v88;
          }
          else {
            float v89 = v37;
          }
          v67[1] = llroundf(v89);
          float v90 = (float)((float)(v69 + v72) + v16) + v8;
          float v91 = (float)((float)(v70 + v73) + v17) + v9;
          float v12 = (float)((float)(v71 + v15) + v18) + v10;
          float v14 = (float)((float)(v36 + (float)(v90 * v43)) + (float)(v91 * v44)) + (float)(v12 * v45);
          float v13 = v39;
          if (v14 <= v39)
          {
            float v13 = (float)((float)(v36 + (float)(v90 * v43)) + (float)(v91 * v44)) + (float)(v12 * v45);
            if (v14 < v38) {
              float v13 = v38;
            }
          }
          float v48 = (float)((float)(v36 + (float)(v90 * v46)) + (float)(v91 * v47)) + (float)(v12 * v49);
          *(unsigned char *)(v61 + v65) = llroundf(v13);
          float v11 = v39;
          if (v48 <= v39)
          {
            float v11 = v48;
            if (v48 < v38) {
              float v11 = v38;
            }
          }
          *(unsigned char *)(v61 + v65 + 1) = llroundf(v11);
          if (v56)
          {
            *uint64_t v56 = v76;
            v56[1] = v74;
            v56 += 2;
            *unsigned __int8 v66 = v75;
            v66[1] = v77;
            v66 += 2;
          }
          v53 += 8;
          v68 += 8;
          v54 += 2;
          v67 += 2;
          v65 += 2;
        }
        while (v24 > v65);
      }
      uint64_t v53 = v64 + v29;
      uint64_t v54 = &v63[v30];
      v61 += v31;
      uint64_t v56 = &v62[v32];
      v23 += 2;
    }
    while (v26 > v23);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD(void *a1, uint64_t a2, double a3, uint8x8_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, double a8, double a9, float16x8_t _Q7)
{
  uint64_t v11 = 0;
  unint64_t v12 = *(void *)((char *)a1 + 20);
  uint64_t v13 = *(void *)((char *)a1 + 36);
  uint64_t v14 = *(void *)((char *)a1 + 44);
  uint64_t v15 = *(void *)((char *)a1 + 28);
  unint64_t v16 = 2 * *(unsigned __int8 *)a1;
  uint64_t v17 = 2 * (v15 * a2 / v16);
  uint64_t v18 = v14 + v17;
  uint64_t v19 = 2 * ((v15 + v15 * a2) / v16);
  uint64_t v20 = v14 + v19;
  uint64_t v21 = a1[14];
  unint64_t v22 = a1[13] * a2;
  uint64_t v23 = a1[19];
  uint64_t v24 = (uint64_t *)a1[7];
  uint64_t v25 = (uint64_t *)a1[8];
  uint64_t v27 = a1[15];
  unint64_t v26 = (uint64_t *)a1[16];
  uint64_t v28 = (uint64_t *)a1[17];
  uint64_t v29 = *v25;
  uint64_t v30 = *v24;
  uint64_t v31 = v28[1];
  uint64_t v360 = *v28;
  uint64_t v33 = *v26;
  uint64_t result = v26[1];
  unsigned int v34 = *(_DWORD *)(v23 + 128);
  a4.i32[0] = *(_DWORD *)(v23 + 154);
  __int32 v423 = a4.i32[0];
  unsigned int v35 = *(unsigned __int16 *)(v23 + 144);
  unsigned int v36 = *(unsigned __int8 *)(v23 + 132);
  unsigned int v37 = *(unsigned __int16 *)(v23 + 146);
  unsigned int v38 = *(unsigned __int16 *)(v23 + 148);
  unsigned int v39 = *(unsigned __int16 *)(v23 + 150);
  unsigned int v40 = *(unsigned __int16 *)(v23 + 152);
  float v415 = *(float *)(v23 + 36);
  float v414 = *(float *)(v23 + 40);
  a6.i32[0] = *(_DWORD *)(v23 + 48);
  float v413 = *(float *)(v23 + 44);
  v42.i32[0] = *(_DWORD *)(v23 + 52);
  v41.i32[0] = *(_DWORD *)(v23 + 56);
  unsigned __int32 v44 = *(_DWORD *)(v23 + 60);
  __int32 v43 = *(_DWORD *)(v23 + 64);
  uint64_t v45 = v27 + 2 * (v22 / v16);
  uint64_t v361 = v29;
  __int32 v46 = *(_DWORD *)(v23 + 68);
  float v412 = *(float *)(v23 + 72);
  float v411 = *(float *)(v23 + 76);
  float v410 = *(float *)(v23 + 80);
  if (v45 >= 0) {
    uint64_t v47 = v45;
  }
  else {
    uint64_t v47 = v45 + 1;
  }
  float v409 = *(float *)(v23 + 84);
  float v408 = *(float *)(v23 + 88);
  float v407 = *(float *)(v23 + 92);
  float v406 = *(float *)(v23 + 96);
  uint64_t v367 = v31;
  uint64_t v48 = v31 * (v47 >> 1);
  uint16x8_t v49 = vmovl_u8(a4);
  float v405 = *(float *)(v23 + 100);
  _S21 = *(float *)(v23 + 108);
  float v404 = *(float *)(v23 + 104);
  _S22 = *(float *)(v23 + 112);
  _S23 = *(float *)(v23 + 116);
  _S27 = *(float *)(v23 + 120);
  long long v421 = 0u;
  long long v422 = 0u;
  do
  {
    unsigned int v54 = 0;
    char v55 = *((unsigned char *)&v423 + v11);
    do
    {
      *((unsigned char *)&v421 + 8 * (((_BYTE)v11 + (v54 >> 3)) & 0x1F) + v54) = v55 + 4 * v54;
      ++v54;
    }
    while (v54 != 8);
    ++v11;
  }
  while (v11 != 4);
  uint64_t v57 = v360;
  uint64_t v56 = v29;
  if (v19 != v17)
  {
    unint64_t v58 = 0;
    unint64_t v366 = v20 - v18;
    uint64_t v59 = v23 + 16548;
    float v400 = (float)v35;
    float v60 = (float)v37;
    float v399 = (float)v38;
    float v418 = (float)v39;
    _S25 = 8191.0 / (float)v34;
    a6.i32[1] = v44;
    __asm { FMOV            V1.2S, #0.25 }
    v42.i32[1] = v43;
    *(float32x2_t *)a5.f32 = vmul_f32(*(float32x2_t *)a6.f32, _D1);
    *(float32x2_t *)a6.f32 = vmul_f32(v42, _D1);
    v41.i32[1] = v46;
    *(float32x2_t *)a7.f32 = vmul_f32(v41, _D1);
    uint64_t v67 = v23 + 32932;
    uint64_t v68 = v23 + 164;
    _S0 = v415;
    __asm { FCVT            H10, S0 }
    _D1.f32[0] = v414;
    __asm { FCVT            H13, S1 }
    float16x8_t v72 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    _S1 = v413;
    __asm { FCVT            H1, S1 }
    int32x4_t v74 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a6), 0);
    _Q0 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a7), 0);
    float16x8_t v390 = (float16x8_t)_Q0;
    __asm
    {
      FCVT            H5, S21
      FCVT            H7, S22
      FCVT            H9, S23
      FCVT            H12, S27
    }
    *(float *)_Q0.i32 = v412;
    __asm { FCVT            H14, S0 }
    *(float *)_Q0.i32 = v411;
    __asm { FCVT            H15, S0 }
    *(float *)_Q0.i32 = v410;
    __asm { FCVT            H0, S0 }
    short float v383 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v409;
    __asm { FCVT            H0, S0 }
    short float v382 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v408;
    __asm { FCVT            H0, S0 }
    short float v381 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v407;
    __asm { FCVT            H0, S0 }
    short float v380 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v35;
    int16x8_t v80 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v379 = (float16x8_t)v80;
    *(short float *)v80.i16 = (short float)v37;
    int16x8_t v81 = vdupq_lane_s16(*(int16x4_t *)v80.i8, 0);
    float16x8_t v378 = (float16x8_t)v81;
    *(short float *)v81.i16 = (short float)v38;
    int16x8_t v82 = vdupq_lane_s16(*(int16x4_t *)v81.i8, 0);
    float16x8_t v377 = (float16x8_t)v82;
    *(short float *)v82.i16 = (short float)v39;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)v82.i8, 0);
    float16x8_t v376 = (float16x8_t)_Q0;
    *(float *)_Q0.i32 = v406;
    __asm { FCVT            H0, S0 }
    short float v375 = *(short float *)_Q0.i16;
    uint64_t v358 = v49.u16[1];
    *(short float *)_Q0.i16 = (short float)v40;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v374 = (float16x8_t)_Q0;
    unsigned __int8 v85 = 16 - v36;
    if (v36 >= 0x11) {
      unsigned __int8 v85 = 0;
    }
    uint64_t v86 = result + v48 + 2 * v21;
    float v87 = (uint16x8_t *)(v33 + v360 * v45 + 2 * v21);
    float v88 = (int8x16x2_t *)(v30 + v29 * v18 + 4 * v13);
    uint64_t result = (v12 - 7);
    unsigned __int8 v89 = v85;
    unint64_t v356 = v12 & 0xFFFFFFF8;
    *(float *)_Q0.i32 = v405;
    __asm { FCVT            H0, S0 }
    short float v372 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v404;
    __asm
    {
      FCVT            H0, S0
      FCVT            H8, S25
    }
    float16x8_t v92 = (float16x8_t)vdupq_n_s16(v85);
    uint16x8_t v370 = (uint16x8_t)v92;
    float v396 = a6.f32[0];
    unint64_t v93 = a5.i64[0];
    float v369 = a6.f32[1];
    v94.i32[0] = a7.i32[1];
    float v368 = a7.f32[1];
    float v395 = a7.f32[0];
    short float v392 = *(short float *)&_S1;
    float16x8_t v393 = v72;
    int16x8_t v371 = _Q0;
    unint64_t v359 = v12;
    float v403 = _S21;
    float v402 = _S22;
    float v401 = _S23;
    float v398 = (float)v40;
    float v397 = _S25;
    short float v394 = _H13;
    float16x8_t v391 = (float16x8_t)v74;
    short float v388 = *(short float *)_Q7.i16;
    short float v389 = _H5;
    short float v386 = _H12;
    short float v387 = _H9;
    short float v384 = _H15;
    long long v385 = _Q14;
    unsigned int v373 = v12 - 7;
    unsigned __int8 v357 = v85;
    do
    {
      int8x8_t v95 = (char *)v88 + v56;
      int8x8_t v96 = &v87->i8[v57];
      if ((int)v12 < 8)
      {
        unint64_t v249 = 0;
        uint16x8_t v100 = (uint16x8_t *)((char *)v87 + v57);
        uint16x8_t v99 = (int16x8_t *)v86;
        uint16x8_t v98 = (int8x16x2_t *)((char *)v88 + v56);
      }
      else
      {
        uint64_t v364 = v86;
        unint64_t v365 = v58;
        int v97 = 0;
        int8x8_t v417 = *(int8x8_t *)((char *)&v421 + 8);
        int8x8_t v416 = (int8x8_t)v422;
        uint64_t v362 = &v87->i8[v57];
        float v363 = (char *)v88 + v56;
        uint16x8_t v98 = (int8x16x2_t *)((char *)v88 + v56);
        uint16x8_t v99 = (int16x8_t *)v86;
        uint16x8_t v100 = (uint16x8_t *)((char *)v87 + v57);
        v101.i64[0] = 0x9000900090009000;
        v101.i64[1] = 0x9000900090009000;
        do
        {
          unint64_t v420 = v88 + 1;
          int8x8_t v102 = vqtbl2_s8(*v88, *(int8x8_t *)&v421);
          int8x8_t v103 = vqtbl2_s8(*v88, v417);
          *(int8x8_t *)v104.i8 = vzip1_s8(v102, 0);
          v104.u64[1] = (unint64_t)vzip2_s8(v102, 0);
          int8x8_t v105 = vqtbl2_s8(*v88, v416);
          *(int8x8_t *)v106.i8 = vzip1_s8(v103, 0);
          *(int8x8_t *)v107.i8 = vzip1_s8(v105, 0);
          v106.u64[1] = (unint64_t)vzip2_s8(v103, 0);
          float v419 = v98 + 1;
          v107.u64[1] = (unint64_t)vzip2_s8(v105, 0);
          float16x8_t v108 = vcvtq_f16_u16(v107);
          int8x8_t v109 = vqtbl2_s8(*v98, *(int8x8_t *)&v421);
          *(int8x8_t *)v107.i8 = vqtbl2_s8(*v98, v417);
          int8x8_t v110 = vqtbl2_s8(*v98, v416);
          *(int8x8_t *)v111.i8 = vzip1_s8(v109, 0);
          v111.u64[1] = (unint64_t)vzip2_s8(v109, 0);
          *(int8x8_t *)v112.i8 = vzip1_s8(*(int8x8_t *)v107.i8, 0);
          v112.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v107.i8, 0);
          float16x8_t v113 = vcvtq_f16_u16(v112);
          float16x8_t v114 = vmulq_n_f16(v108, _H8);
          *(int8x8_t *)v108.i8 = vzip1_s8(v110, 0);
          v108.u64[1] = (unint64_t)vzip2_s8(v110, 0);
          float16x8_t v115 = vmulq_n_f16(vcvtq_f16_u16((uint16x8_t)v108), _H8);
          uint16x8_t v116 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v104), _H8), (float16x8_t)0), v101));
          uint32x4_t v117 = vmovl_high_u16(v116);
          uint32x4_t v118 = vmovl_u16(*(uint16x4_t *)v116.i8);
          uint64_t v119 = v118.u32[1];
          uint64_t v120 = v118.u32[3];
          v121.i16[0] = *(_WORD *)(v68 + 2 * v118.u32[0]);
          float v122 = (__int16 *)(v68 + 2 * v118.u32[2]);
          uint64_t v123 = v117.u32[1];
          float v124 = (__int16 *)(v68 + 2 * v117.u32[0]);
          uint64_t v125 = v117.u32[3];
          float v126 = (__int16 *)(v68 + 2 * v117.u32[2]);
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v106), _H8), (float16x8_t)0), v101));
          uint32x4_t v128 = vmovl_high_u16(v127);
          v129.i64[0] = v128.u32[2];
          v129.i64[1] = v128.u32[3];
          float16x8_t v130 = v129;
          v129.i64[0] = v128.u32[0];
          v129.i64[1] = v128.u32[1];
          float16x8_t v131 = v129;
          uint32x4_t v132 = vmovl_u16(*(uint16x4_t *)v127.i8);
          float v133 = (__int16 *)(v68 + 2 * v119);
          v129.i64[0] = v132.u32[2];
          v129.i64[1] = v132.u32[3];
          float v134 = (__int16 *)(v68 + 2 * v120);
          v135.i16[0] = *(_WORD *)(v68 + 2 * v132.u32[0]);
          float v136 = (__int16 *)(v68 + 2 * v125);
          __int8 v137 = (__int16 *)(v68 + 2 * v132.u32[1]);
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v101));
          uint32x4_t v139 = vmovl_high_u16(v138);
          uint32x4_t v140 = vmovl_u16(*(uint16x4_t *)v138.i8);
          v141.i64[0] = 0x9000900090009000;
          v141.i64[1] = 0x9000900090009000;
          v142.i16[0] = *(_WORD *)(v68 + 2 * v140.u32[0]);
          float v143 = (__int16 *)(v68 + 2 * v140.u32[1]);
          uint64_t v144 = (__int16 *)(v68 + 2 * v140.u32[2]);
          float v145 = (__int16 *)(v68 + 2 * v140.u32[3]);
          float v146 = (__int16 *)(v68 + 2 * v139.u32[0]);
          uint64_t v147 = (__int16 *)(v68 + 2 * v139.u32[1]);
          float v148 = (__int16 *)(v68 + 2 * v139.u32[2]);
          float16x8_t v149 = (__int16 *)(v68 + 2 * v139.u32[3]);
          v121.i16[1] = *v133;
          uint16x8_t v150 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v111), _H8), (float16x8_t)0), v141));
          uint32x4_t v151 = vmovl_high_u16(v150);
          v135.i16[1] = *v137;
          uint32x4_t v152 = vmovl_u16(*(uint16x4_t *)v150.i8);
          v142.i16[1] = *v143;
          v153.i16[0] = *(_WORD *)(v68 + 2 * v152.u32[0]);
          v121.i16[2] = *v122;
          v135.i16[2] = *(_WORD *)(v68 + 2 * v129.i64[0]);
          float16x8_t v154 = (__int16 *)(v68 + 2 * v152.u32[3]);
          v142.i16[2] = *v144;
          uint64_t v155 = (__int16 *)(v68 + 2 * v151.u32[0]);
          v121.i16[3] = *v134;
          float v156 = (__int16 *)(v68 + 2 * v151.u32[1]);
          uint64_t v157 = (__int16 *)(v68 + 2 * v151.u32[2]);
          float v158 = (__int16 *)(v68 + 2 * v151.u32[3]);
          v135.i16[3] = *(_WORD *)(v68 + 2 * v129.i64[1]);
          v153.i16[1] = *(_WORD *)(v68 + 2 * v152.u32[1]);
          v153.i16[2] = *(_WORD *)(v68 + 2 * v152.u32[2]);
          v142.i16[3] = *v145;
          uint16x8_t v159 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(v113, _H8), (float16x8_t)0), v141));
          uint32x4_t v160 = vmovl_high_u16(v159);
          v153.i16[3] = *v154;
          uint32x4_t v161 = vmovl_u16(*(uint16x4_t *)v159.i8);
          v121.i16[4] = *v124;
          v135.i16[4] = *(_WORD *)(v68 + 2 * v131.i64[0]);
          v162.i16[0] = *(_WORD *)(v68 + 2 * v161.u32[0]);
          v142.i16[4] = *v146;
          v153.i16[4] = *v155;
          v121.i16[5] = *(_WORD *)(v68 + 2 * v123);
          v135.i16[5] = *(_WORD *)(v68 + 2 * v131.i64[1]);
          long long v163 = (__int16 *)(v68 + 2 * v160.u32[2]);
          int v164 = (__int16 *)(v68 + 2 * v160.u32[3]);
          v162.i16[1] = *(_WORD *)(v68 + 2 * v161.u32[1]);
          v142.i16[5] = *v147;
          v162.i16[2] = *(_WORD *)(v68 + 2 * v161.u32[2]);
          v162.i16[3] = *(_WORD *)(v68 + 2 * v161.u32[3]);
          v153.i16[5] = *v156;
          v162.i16[4] = *(_WORD *)(v68 + 2 * v160.u32[0]);
          v162.i16[5] = *(_WORD *)(v68 + 2 * v160.u32[1]);
          v121.i16[6] = *v126;
          uint16x8_t v165 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v141));
          uint32x4_t v166 = vmovl_high_u16(v165);
          v135.i16[6] = *(_WORD *)(v68 + 2 * v130.i64[0]);
          uint32x4_t v167 = vmovl_u16(*(uint16x4_t *)v165.i8);
          v142.i16[6] = *v148;
          v153.i16[6] = *v157;
          v115.i16[0] = *(_WORD *)(v68 + 2 * v167.u32[0]);
          v162.i16[6] = *v163;
          v121.i16[7] = *v136;
          v135.i16[7] = *(_WORD *)(v68 + 2 * v130.i64[1]);
          v142.i16[7] = *v149;
          v115.i16[1] = *(_WORD *)(v68 + 2 * v167.u32[1]);
          v153.i16[7] = *v158;
          v115.i16[2] = *(_WORD *)(v68 + 2 * v167.u32[2]);
          v115.i16[3] = *(_WORD *)(v68 + 2 * v167.u32[3]);
          v162.i16[7] = *v164;
          v115.i16[4] = *(_WORD *)(v68 + 2 * v166.u32[0]);
          v115.i16[5] = *(_WORD *)(v68 + 2 * v166.u32[1]);
          v115.i16[6] = *(_WORD *)(v68 + 2 * v166.u32[2]);
          v115.i16[7] = *(_WORD *)(v68 + 2 * v166.u32[3]);
          uint16x8_t v168 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v121, v389), v135, v388), v142, v387), vmaxq_f16(vmaxq_f16(v121, v135), v142), v386), (float16x8_t)0), v141));
          uint32x4_t v169 = vmovl_high_u16(v168);
          uint32x4_t v170 = vmovl_u16(*(uint16x4_t *)v168.i8);
          uint64_t v171 = v170.u32[1];
          uint64_t v172 = v170.u32[0];
          v129.i64[0] = v169.u32[2];
          v129.i64[1] = v169.u32[3];
          float16x8_t v173 = v129;
          v129.i64[1] = v169.u32[1];
          uint64_t v174 = v170.u32[3];
          uint64_t v175 = v170.u32[2];
          uint64_t v176 = v169.u32[0];
          uint64_t v177 = v173.i64[0];
          uint16x8_t v178 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v153, v389), v162, v388), v115, v387), vmaxq_f16(vmaxq_f16(v153, v162), v115), v386), (float16x8_t)0), v141));
          uint32x4_t v179 = vmovl_u16(*(uint16x4_t *)v178.i8);
          v173.i16[0] = *(_WORD *)(v59 + 2 * v172);
          float v180 = (__int16 *)(v59 + 2 * v173.i64[1]);
          v173.i16[1] = *(_WORD *)(v59 + 2 * v171);
          v173.i16[2] = *(_WORD *)(v59 + 2 * v175);
          float16x8_t v181 = (float16x8_t)vmovl_high_u16(v178);
          v173.i16[3] = *(_WORD *)(v59 + 2 * v174);
          v173.i16[4] = *(_WORD *)(v59 + 2 * v176);
          uint64_t v182 = v181.u32[0];
          v173.i16[5] = *(_WORD *)(v59 + 2 * v129.i64[1]);
          v181.i16[0] = *(_WORD *)(v59 + 2 * v179.u32[0]);
          v173.i16[6] = *(_WORD *)(v59 + 2 * v177);
          uint64_t v183 = v181.u32[3];
          v173.i16[7] = *v180;
          float v184 = (__int16 *)(v59 + 2 * v181.u32[1]);
          v181.i16[1] = *(_WORD *)(v59 + 2 * v179.u32[1]);
          v181.i16[2] = *(_WORD *)(v59 + 2 * v179.u32[2]);
          float16x8_t v185 = vmulq_f16(v121, v173);
          uint64_t v186 = v181.u32[2];
          v181.i16[3] = *(_WORD *)(v59 + 2 * v179.u32[3]);
          v181.i16[4] = *(_WORD *)(v59 + 2 * v182);
          float16x8_t v187 = vmulq_f16(v135, v173);
          v181.i16[5] = *v184;
          v181.i16[6] = *(_WORD *)(v59 + 2 * v186);
          float16x8_t v188 = vmulq_f16(v142, v173);
          v181.i16[7] = *(_WORD *)(v59 + 2 * v183);
          float16x8_t v189 = vmulq_f16(v153, v181);
          float16x8_t v190 = vmulq_f16(v162, v181);
          float16x8_t v191 = vmulq_f16(v115, v181);
          v121.i16[7] = HIWORD(v385);
          float16x8_t v192 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v185, v382), v187, v381), v188, v380);
          v135.i16[7] = v371.i16[7];
          float16x8_t v193 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v188, *(short float *)v371.i16), v187, v372), v185, v375);
          float16x8_t v194 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v189, *(short float *)&v385), v190, v384), v191, v383);
          float16x8_t v195 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v189, v382), v190, v381), v191, v380);
          float16x8_t v196 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v191, *(short float *)v371.i16), v190, v372), v189, v375);
          uint16x8_t v197 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v185, *(short float *)&v385), v187, v384), v188, v383), (float16x8_t)0), v141));
          uint32x4_t v198 = vmovl_high_u16(v197);
          v129.i64[0] = v198.u32[2];
          v129.i64[1] = v198.u32[3];
          float16x8_t v199 = v129;
          v129.i64[0] = v198.u32[0];
          v129.i64[1] = v198.u32[1];
          float16x8_t v200 = v129;
          uint32x4_t v201 = vmovl_u16(*(uint16x4_t *)v197.i8);
          v129.i64[0] = v201.u32[2];
          v129.i64[1] = v201.u32[3];
          float16x8_t v202 = v129;
          uint64_t v203 = v201.u32[1];
          uint64_t v204 = v201.u32[0];
          uint64_t v205 = v200.i64[1];
          uint64_t v206 = v200.i64[0];
          uint16x8_t v207 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v192, (float16x8_t)0), v141));
          uint32x4_t v208 = vmovl_high_u16(v207);
          v129.i64[0] = v208.u32[2];
          v129.i64[1] = v208.u32[3];
          float16x8_t v209 = v129;
          v129.i64[0] = v208.u32[0];
          v129.i64[1] = v208.u32[1];
          float16x8_t v210 = v129;
          uint32x4_t v211 = vmovl_u16(*(uint16x4_t *)v207.i8);
          v121.i16[0] = *(_WORD *)(v67 + 2 * v204);
          v129.i64[0] = v211.u32[2];
          v129.i64[1] = v211.u32[3];
          uint64_t v212 = v211.u32[1];
          v135.i16[0] = *(_WORD *)(v67 + 2 * v211.u32[0]);
          uint64_t v213 = v210.i64[1];
          uint64_t v214 = v210.i64[0];
          uint16x8_t v215 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v193, (float16x8_t)0), v141));
          uint32x4_t v216 = vmovl_high_u16(v215);
          uint32x4_t v217 = vmovl_u16(*(uint16x4_t *)v215.i8);
          v153.i16[0] = *(_WORD *)(v67 + 2 * v217.u32[0]);
          uint64_t v218 = (__int16 *)(v67 + 2 * v217.u32[1]);
          float v219 = (__int16 *)(v67 + 2 * v217.u32[2]);
          uint64_t v220 = (__int16 *)(v67 + 2 * v217.u32[3]);
          uint64_t v221 = v216.u32[1];
          uint64_t v222 = v216.u32[3];
          v121.i16[1] = *(_WORD *)(v67 + 2 * v203);
          uint64_t v223 = v216.u32[0];
          uint64_t v224 = v216.u32[2];
          v135.i16[1] = *(_WORD *)(v67 + 2 * v212);
          uint16x8_t v225 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v194, (float16x8_t)0), v141));
          uint32x4_t v226 = vmovl_high_u16(v225);
          uint32x4_t v227 = vmovl_u16(*(uint16x4_t *)v225.i8);
          v153.i16[1] = *v218;
          v121.i16[2] = *(_WORD *)(v67 + 2 * v202.i64[0]);
          v194.i16[0] = *(_WORD *)(v67 + 2 * v227.u32[0]);
          v135.i16[2] = *(_WORD *)(v67 + 2 * v129.i64[0]);
          v153.i16[2] = *v219;
          v194.i16[1] = *(_WORD *)(v67 + 2 * v227.u32[1]);
          v121.i16[3] = *(_WORD *)(v67 + 2 * v202.i64[1]);
          float v228 = (__int16 *)(v67 + 2 * v227.u32[3]);
          v194.i16[2] = *(_WORD *)(v67 + 2 * v227.u32[2]);
          v135.i16[3] = *(_WORD *)(v67 + 2 * v129.i64[1]);
          uint16x8_t v229 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v195, (float16x8_t)0), v141));
          uint32x4_t v230 = vmovl_u16(*(uint16x4_t *)v229.i8);
          v153.i16[3] = *v220;
          v194.i16[3] = *v228;
          v195.i16[0] = *(_WORD *)(v67 + 2 * v230.u32[0]);
          v121.i16[4] = *(_WORD *)(v67 + 2 * v206);
          v135.i16[4] = *(_WORD *)(v67 + 2 * v214);
          float v231 = (__int16 *)(v67 + 2 * v209.i64[1]);
          v153.i16[4] = *(_WORD *)(v67 + 2 * v223);
          float v232 = (__int16 *)(v67 + 2 * v222);
          uint16x8_t v98 = v419;
          v194.i16[4] = *(_WORD *)(v67 + 2 * v226.u32[0]);
          v121.i16[5] = *(_WORD *)(v67 + 2 * v205);
          v195.i16[1] = *(_WORD *)(v67 + 2 * v230.u32[1]);
          v135.i16[5] = *(_WORD *)(v67 + 2 * v213);
          v195.i16[2] = *(_WORD *)(v67 + 2 * v230.u32[2]);
          v153.i16[5] = *(_WORD *)(v67 + 2 * v221);
          __int8 v233 = (__int16 *)(v67 + 2 * v226.u32[3]);
          v194.i16[5] = *(_WORD *)(v67 + 2 * v226.u32[1]);
          uint32x4_t v234 = vmovl_high_u16(v229);
          v121.i16[6] = *(_WORD *)(v67 + 2 * v199.i64[0]);
          float v88 = v420;
          v195.i16[3] = *(_WORD *)(v67 + 2 * v230.u32[3]);
          v135.i16[6] = *(_WORD *)(v67 + 2 * v209.i64[0]);
          v195.i16[4] = *(_WORD *)(v67 + 2 * v234.u32[0]);
          v153.i16[6] = *(_WORD *)(v67 + 2 * v224);
          uint64_t v235 = v234.u32[3];
          v194.i16[6] = *(_WORD *)(v67 + 2 * v226.u32[2]);
          float v236 = (__int16 *)(v67 + 2 * v234.u32[2]);
          v195.i16[5] = *(_WORD *)(v67 + 2 * v234.u32[1]);
          float16x8_t v237 = vmaxq_f16(v196, (float16x8_t)0);
          v101.i64[0] = 0x9000900090009000;
          v101.i64[1] = 0x9000900090009000;
          v195.i16[6] = *v236;
          uint16x8_t v238 = vcvtq_u16_f16(vminq_f16(v237, v101));
          uint32x4_t v239 = vmovl_high_u16(v238);
          int16x8_t v240 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v238.i8);
          float16x8_t v241 = (float16x8_t)vuzp1q_s16((int16x8_t)v121, (int16x8_t)v135);
          v121.i16[7] = *(_WORD *)(v67 + 2 * v199.i64[1]);
          v129.i64[0] = v239.u32[0];
          v129.i64[1] = v239.u32[1];
          float16x8_t v242 = v129;
          v129.i64[1] = v240.u32[3];
          v240.i16[7] = (unint64_t)v240.u32[3] >> 48;
          v240.i16[0] = *(_WORD *)(v67 + 2 * v240.u32[0]);
          uint64_t v243 = v242.i64[1];
          v135.i16[7] = *v231;
          v240.i16[1] = *(_WORD *)(v67 + 2 * v240.u32[1]);
          uint64_t v244 = v242.i64[0];
          float16x8_t v245 = (float16x8_t)vuzp1q_s16((int16x8_t)v194, (int16x8_t)v195);
          uint64_t result = v373;
          v194.i16[7] = *v233;
          v240.i16[2] = *(_WORD *)(v67 + 2 * v240.u32[2]);
          v240.i16[3] = *(_WORD *)(v67 + 2 * v129.i64[1]);
          v195.i16[7] = *(_WORD *)(v67 + 2 * v235);
          v240.i16[4] = *(_WORD *)(v67 + 2 * v244);
          _Q7 = (float16x8_t)vuzp2q_s16((int16x8_t)v194, (int16x8_t)v195);
          float16x8_t v92 = v153;
          v240.i16[5] = *(_WORD *)(v67 + 2 * v243);
          v240.i16[6] = *(_WORD *)(v67 + 2 * v239.u32[2]);
          v92.i16[7] = *v232;
          float16x8_t v246 = (float16x8_t)v240;
          v246.i16[7] = *(_WORD *)(v67 + 2 * v239.u32[3]);
          *v87++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v379, v121, _H10), v135, _H13), v92, v392), v379), v377)), v370);
          int16x8_t v247 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v241, (float16x8_t)vuzp2q_s16((int16x8_t)v121, (int16x8_t)v135)), v245), _Q7);
          *v100++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v379, v194, _H10), v195, _H13), v246, v392), v379), v377)), v370);
          float16x8_t v94 = (float16x8_t)vzip1q_s16(v247, v247);
          float16x8_t v248 = vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v378, v72, v94), v391, (float16x8_t)vzip2q_s16(v247, v247)), v390, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v153, (int16x8_t)v153), (float16x8_t)vtrn2q_s16((int16x8_t)v92, (int16x8_t)v92)), (float16x8_t)vtrn1q_s16(v240, v240)), (float16x8_t)vtrn2q_s16((int16x8_t)v246, (int16x8_t)v246))), v376);
          _S1 = *(float *)v374.i32;
          _Q0 = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(v248, v374)), v370);
          *v99++ = _Q0;
          v97 += 8;
        }
        while (v97 < (int)v373);
        unint64_t v249 = v356;
        unint64_t v12 = v359;
        uint64_t v57 = v360;
        uint64_t v56 = v361;
        int8x8_t v96 = v362;
        uint64_t v86 = v364;
        unint64_t v58 = v365;
        unsigned __int8 v89 = v357;
        int8x8_t v95 = v363;
      }
      if (v12 > v249)
      {
        uint64_t v250 = 0;
        float v251 = (char *)v88 + v358;
        unsigned __int32 v252 = (char *)v98 + v358;
        do
        {
          uint64_t v253 = v250 + v423;
          _Q0.i8[0] = v88->val[0].i8[v253];
          LOBYTE(_S1) = v251[v250];
          uint64_t v254 = v250 + BYTE2(v423);
          v94.i8[0] = v88->val[0].i8[v254];
          _H0 = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(_S25 * (float)_Q0.u32[0], 0.0), 8191.0)));
          *(float *)v94.i32 = _S25 * (float)v94.u32[0];
          __asm { FCVT            S26, H0 }
          _H0 = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(_S25 * (float)LODWORD(_S1), 0.0), 8191.0)));
          __asm { FCVT            S28, H0 }
          _H0 = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(*(float *)v94.i32, 0.0), 8191.0)));
          __asm { FCVT            S9, H0 }
          float v261 = fmaxf(_S26, fmaxf(_S28, _S9));
          float v262 = (float)((float)((float)(_S22 * _S28) + (float)(_S21 * _S26)) + (float)(_S23 * _S9))
               + (float)(_S27 * v261);
          float v263 = 8191.0;
          if (v262 <= 8191.0)
          {
            float v263 = (float)((float)((float)(_S22 * _S28) + (float)(_S21 * _S26)) + (float)(_S23 * _S9))
                 + (float)(_S27 * v261);
            if (v262 < 0.0) {
              float v263 = 0.0;
            }
          }
          LOBYTE(v262) = v88->val[0].i8[v253 + 4];
          LOBYTE(v261) = v251[v250 + 4];
          v94.i8[0] = v88->val[0].i8[v254 + 4];
          _H0 = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(_S25 * (float)LODWORD(v262), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(_S25 * (float)LODWORD(v261), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          _H0 = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(_S25 * (float)v94.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          float v270 = fmaxf(_S14, fmaxf(_S15, _S0));
          float v271 = (float)((float)((float)(_S22 * _S15) + (float)(_S21 * _S14)) + (float)(_S23 * _S0))
               + (float)(_S27 * v270);
          float v272 = 8191.0;
          if (v271 <= 8191.0)
          {
            float v272 = (float)((float)((float)(_S22 * _S15) + (float)(_S21 * _S14)) + (float)(_S23 * _S0))
                 + (float)(_S27 * v270);
            if (v271 < 0.0) {
              float v272 = 0.0;
            }
          }
          LOBYTE(v271) = v98->val[0].i8[v253];
          LOBYTE(v270) = v252[v250];
          *(float *)&unsigned int v273 = (float)LODWORD(v270);
          float v274 = _S25 * *(float *)&v273;
          LOBYTE(v273) = v98->val[0].i8[v254];
          _H1 = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(_S25 * (float)LODWORD(v271), 0.0), 8191.0)));
          float v276 = _S25 * (float)v273;
          __asm { FCVT            S2, H1 }
          _H1 = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(v274, 0.0), 8191.0)));
          __asm { FCVT            S3, H1 }
          _H1 = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(v276, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          float v282 = (float)((float)((float)(_S22 * _S3) + (float)(_S21 * _S2)) + (float)(_S23 * _S4))
               + (float)(_S27 * fmaxf(_S2, fmaxf(_S3, _S4)));
          float v283 = 8191.0;
          if (v282 <= 8191.0)
          {
            float v283 = v282;
            if (v282 < 0.0) {
              float v283 = 0.0;
            }
          }
          LOBYTE(v282) = v98->val[0].i8[v253 + 4];
          _Q7.i8[0] = v252[v250 + 4];
          v92.i8[0] = v98->val[0].i8[v254 + 4];
          _H5 = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(_S25 * (float)LODWORD(v282), 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H7 = *(_WORD *)(v68 + 2 * llroundf(fminf(fmaxf(_S25 * (float)_Q7.u32[0], 0.0), 8191.0)));
          unsigned int v287 = llroundf(fminf(fmaxf(_S25 * (float)v92.u32[0], 0.0), 8191.0));
          __asm { FCVT            S16, H7 }
          _H7 = *(_WORD *)(v68 + 2 * v287);
          __asm { FCVT            S17, H7 }
          _H7 = *(_WORD *)(v59 + 2 * llroundf(v263));
          __asm { FCVT            S18, H7 }
          float v293 = _S26 * _S18;
          float v294 = _S28 * _S18;
          float v295 = _S9 * _S18;
          LOWORD(_S18) = *(_WORD *)(v59 + 2 * llroundf(v272));
          __asm { FCVT            S18, H18 }
          float v297 = _S14 * _S18;
          float v298 = _S15 * _S18;
          float v299 = _S0 * _S18;
          _H0 = *(_WORD *)(v59 + 2 * llroundf(v283));
          __asm { FCVT            S1, H0 }
          float v302 = _S2 * _S1;
          float v303 = _S3 * _S1;
          float v304 = _S4 * _S1;
          float v305 = (float)((float)((float)(_S22 * _S16) + (float)(_S21 * _S5)) + (float)(_S23 * _S17))
               + (float)(_S27 * fmaxf(_S5, fmaxf(_S16, _S17)));
          float v306 = 8191.0;
          if (v305 <= 8191.0)
          {
            float v306 = v305;
            if (v305 < 0.0) {
              float v306 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v59 + 2 * llroundf(v306));
          __asm { FCVT            S1, H1 }
          _S4 = _S5 * _S1;
          float v310 = _S16 * _S1;
          float v311 = _S17 * _S1;
          float v312 = (float)((float)(v411 * v298) + (float)(v297 * v412)) + (float)(v299 * v410);
          float v313 = (float)((float)(v408 * v298) + (float)(v297 * v409)) + (float)(v299 * v407);
          float v314 = (float)((float)(v405 * v298) + (float)(v297 * v406)) + (float)(v299 * v404);
          float v315 = (float)((float)(v411 * v303) + (float)(v302 * v412)) + (float)(v304 * v410);
          float v316 = (float)((float)(v408 * v303) + (float)(v302 * v409)) + (float)(v304 * v407);
          _S3 = (float)((float)(v405 * v303) + (float)(v302 * v406)) + (float)(v304 * v404);
          float v318 = (float)((float)(v411 * v310) + (float)(_S4 * v412)) + (float)(v311 * v410);
          float v319 = (float)((float)(v408 * v310) + (float)(_S4 * v409)) + (float)(v311 * v407);
          float v320 = (float)((float)(v405 * v310) + (float)(_S4 * v406)) + (float)(v311 * v404);
          _H0 = *(_WORD *)(v67
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v411 * v294) + (float)(v293 * v412)) + (float)(v295 * v410), 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H2 = *(_WORD *)(v67
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v408 * v294) + (float)(v293 * v409)) + (float)(v295 * v407), 0.0), 8191.0)));
          __asm { FCVT            S26, H2 }
          _H2 = *(_WORD *)(v67
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v405 * v294) + (float)(v293 * v406)) + (float)(v295 * v404), 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v312, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H2
            FCVT            S24, H4
          }
          _H2 = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v313, 0.0), 8191.0)));
          __asm { FCVT            S12, H2 }
          _H2 = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v314, 0.0), 8191.0)));
          __asm { FCVT            S9, H2 }
          _H2 = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v315, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S4) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v316, 0.0), 8191.0)));
          __asm { FCVT            S14, H4 }
          LOWORD(_S3) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v318, 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H3
            FCVT            S3, H4
          }
          LOWORD(_S4) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v319, 0.0), 8191.0)));
          unsigned int v337 = llroundf(fminf(fmaxf(v320, 0.0), 8191.0));
          __asm { FCVT            S1, H4 }
          LOWORD(_S4) = *(_WORD *)(v67 + 2 * v337);
          __asm { FCVT            S4, H4 }
          *(float *)v92.i32 = v415;
          float v340 = (float)((float)((float)(v414 * _S26) + (float)(v415 * _S0)) + (float)(v413 * _S28)) + v400;
          if (v340 < v400) {
            float v341 = v400;
          }
          else {
            float v341 = (float)((float)((float)(v414 * _S26) + (float)(v415 * _S0)) + (float)(v413 * _S28)) + v400;
          }
          BOOL v342 = v340 <= v399;
          float v343 = (float)((float)((float)(v414 * _S12) + (float)(v415 * _S24)) + (float)(v413 * _S9)) + v400;
          if (!v342) {
            float v341 = v399;
          }
          unsigned int v344 = llroundf(v341);
          if (v343 < v400) {
            float v345 = v400;
          }
          else {
            float v345 = (float)((float)((float)(v414 * _S12) + (float)(v415 * _S24)) + (float)(v413 * _S9)) + v400;
          }
          BOOL v342 = v343 <= v399;
          float v346 = (float)((float)((float)(v414 * _S14) + (float)(v415 * _S2)) + (float)(v413 * _S15)) + v400;
          if (!v342) {
            float v345 = v399;
          }
          unsigned int v347 = llroundf(v345);
          if (v346 < v400) {
            float v348 = v400;
          }
          else {
            float v348 = (float)((float)((float)(v414 * _S14) + (float)(v415 * _S2)) + (float)(v413 * _S15)) + v400;
          }
          BOOL v342 = v346 <= v399;
          float v349 = (float)((float)((float)(v414 * _S1) + (float)(v415 * _S3)) + (float)(v413 * _S4)) + v400;
          if (!v342) {
            float v348 = v399;
          }
          unsigned int v350 = llroundf(v348);
          if (v349 < v400) {
            *(float *)_Q7.i32 = v400;
          }
          else {
            *(float *)_Q7.i32 = (float)((float)((float)(v414 * _S1) + (float)(v415 * _S3)) + (float)(v413 * _S4)) + v400;
          }
          if (v349 <= v399) {
            float v351 = *(float *)_Q7.i32;
          }
          else {
            float v351 = v399;
          }
          float v352 = (float)((float)(_S0 + _S24) + _S2) + _S3;
          float v353 = (float)((float)(_S26 + _S12) + _S14) + _S1;
          v87->i16[0] = v344 << v89;
          v87->i16[1] = v347 << v89;
          v100->i16[0] = v350 << v89;
          v100->i16[1] = llroundf(v351) << v89;
          *(float *)v94.i32 = (float)((float)(_S28 + _S9) + _S15) + _S4;
          float v354 = (float)((float)(v60 + (float)(v352 * *(float *)&v93)) + (float)(v353 * v396))
               + (float)(*(float *)v94.i32 * v395);
          float v355 = v398;
          if (v354 <= v398)
          {
            float v355 = (float)((float)(v60 + (float)(v352 * *(float *)&v93)) + (float)(v353 * v396))
                 + (float)(*(float *)v94.i32 * v395);
            if (v354 < v418) {
              float v355 = v418;
            }
          }
          *(float *)_Q0.i32 = (float)((float)(v60 + (float)(v352 * *((float *)&v93 + 1))) + (float)(v353 * v369))
                            + (float)(*(float *)v94.i32 * v368);
          v99->i16[0] = llroundf(v355) << v89;
          _S1 = v398;
          float16x8_t v72 = v393;
          _H13 = v394;
          if (*(float *)_Q0.i32 <= v398)
          {
            _S1 = *(float *)_Q0.i32;
            if (*(float *)_Q0.i32 < v418) {
              _S1 = v418;
            }
          }
          v249 += 2;
          v250 += 8;
          v99->i16[1] = llroundf(_S1) << v89;
          float v87 = (uint16x8_t *)((char *)v87 + 4);
          uint16x8_t v100 = (uint16x8_t *)((char *)v100 + 4);
          uint16x8_t v99 = (int16x8_t *)((char *)v99 + 4);
          _S21 = v403;
          _S22 = v402;
          _S23 = v401;
          _S25 = v397;
        }
        while (v12 > v249);
      }
      float v88 = (int8x16x2_t *)&v95[v56];
      float v87 = (uint16x8_t *)&v96[v57];
      v86 += v367;
      v58 += 2;
    }
    while (v366 > v58);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44) + 2 * v8;
    unint64_t v13 = 2 * v9 - 2 * v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 17);
    uint64_t v16 = **((void **)result + 8);
    uint64_t v17 = *v15;
    uint64_t v18 = v15[1];
    float v19 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    LOWORD(a5) = *(_WORD *)(v14 + 144);
    float v20 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 146);
    float v21 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 148);
    float v22 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 150);
    *(float *)&unsigned int v23 = (float)LODWORD(a6);
    float v188 = *(float *)&v23;
    LOWORD(v23) = *(_WORD *)(v14 + 152);
    float v24 = (float)v23;
    float v184 = *(float *)(v14 + 40);
    float v185 = *(float *)(v14 + 36);
    float v182 = *(float *)(v14 + 48) * 0.25;
    float v183 = *(float *)(v14 + 44);
    float v180 = *(float *)(v14 + 56) * 0.25;
    float v181 = *(float *)(v14 + 52) * 0.25;
    float v178 = *(float *)(v14 + 64) * 0.25;
    float v179 = *(float *)(v14 + 60) * 0.25;
    float v25 = *(float *)(v14 + 72);
    float v176 = *(float *)(v14 + 68) * 0.25;
    float v177 = v25;
    float v174 = *(float *)(v14 + 80);
    float v175 = *(float *)(v14 + 76);
    float v172 = *(float *)(v14 + 88);
    float v173 = *(float *)(v14 + 84);
    float v170 = *(float *)(v14 + 96);
    float v171 = *(float *)(v14 + 92);
    float v26 = *(float *)(v14 + 100);
    float v27 = *(float *)(v14 + 104);
    float v28 = *(float *)(v14 + 108);
    float v168 = v27;
    float v169 = v26;
    uint64_t v29 = v14 + 164;
    uint64_t v30 = v14 + 16548;
    uint64_t v31 = v14 + 32932;
    float v32 = *(float *)(v14 + 112);
    float v33 = *(float *)(v14 + 116);
    float v34 = *(float *)(v14 + 120);
    uint64_t v35 = *((void *)result + 14);
    unint64_t v36 = *((void *)result + 13) * a2 / v7;
    uint64_t v37 = (void *)*((void *)result + 16);
    uint64_t v38 = *((void *)result + 15) + 2 * v36;
    uint64_t v39 = **((void **)result + 7) + v16 * v12 + 4 * *(void *)(result + 36);
    uint64_t v40 = v37[1];
    float32x2_t v41 = (char *)(*v37 + v38 * v17 + 2 * v35);
    unsigned int v42 = *(unsigned __int8 *)(v14 + 132);
    if (v42 >= 0x11) {
      char v43 = 0;
    }
    else {
      char v43 = 16 - v42;
    }
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 156);
    if (v38 >= 0) {
      uint64_t v44 = v38;
    }
    else {
      uint64_t v44 = v38 + 1;
    }
    uint64_t v45 = v40 + (v44 >> 1) * v18;
    uint64_t v46 = *(unsigned __int8 *)(v14 + 155);
    uint64_t v47 = *(unsigned __int8 *)(v14 + 154);
    uint64_t v48 = v45 + 2 * v35;
    char v49 = v43;
    float v186 = v24;
    float v187 = v21;
    float v166 = v32;
    float v167 = v28;
    float v165 = v33;
    do
    {
      uint64_t v50 = &v41[v17];
      uint64_t v51 = v39 + v16;
      if (v11)
      {
        unint64_t v52 = 0;
        uint64_t v53 = v39 + v16;
        unsigned int v54 = &v41[v17];
        do
        {
          LOBYTE(v27) = *(unsigned char *)(v39 + v47);
          LOBYTE(v26) = *(unsigned char *)(v39 + v46);
          LOBYTE(v25) = result[v39];
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v27), 0.0), 8191.0)));
          float v56 = v19 * (float)LODWORD(v25);
          __asm { FCVT            S14, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v26), 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v56, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          float v66 = fmaxf(_S14, fmaxf(_S15, _S18));
          float v67 = (float)((float)((float)(v32 * _S15) + (float)(v28 * _S14)) + (float)(v33 * _S18)) + (float)(v34 * v66);
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = (float)((float)((float)(v32 * _S15) + (float)(v28 * _S14)) + (float)(v33 * _S18)) + (float)(v34 * v66);
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          LOBYTE(v67) = *(unsigned char *)(v39 + 4 + v47);
          LOBYTE(v66) = *(unsigned char *)(v39 + 4 + v46);
          LOBYTE(v56) = result[v39 + 4];
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v67), 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v66), 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v56), 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          float v75 = fmaxf(_S20, fmaxf(_S21, _S22));
          float v76 = (float)((float)((float)(v32 * _S21) + (float)(v28 * _S20)) + (float)(v33 * _S22)) + (float)(v34 * v75);
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = (float)((float)((float)(v32 * _S21) + (float)(v28 * _S20)) + (float)(v33 * _S22)) + (float)(v34 * v75);
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          LOBYTE(v76) = *(unsigned char *)(v53 + v47);
          LOBYTE(v75) = *(unsigned char *)(v53 + v46);
          *(float *)&unsigned int v78 = (float)LODWORD(v75);
          _S6 = v19 * *(float *)&v78;
          LOBYTE(v78) = result[v53];
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v76), 0.0), 8191.0)));
          float v81 = v19 * (float)v78;
          __asm { FCVT            S5, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S6) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S7, H6 }
          float v86 = fmaxf(_S5, fmaxf(_S3, _S7));
          float v87 = (float)((float)((float)(v32 * _S3) + (float)(v28 * _S5)) + (float)(v33 * _S7)) + (float)(v34 * v86);
          float v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            float v88 = (float)((float)((float)(v32 * _S3) + (float)(v28 * _S5)) + (float)(v33 * _S7)) + (float)(v34 * v86);
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          LOBYTE(v87) = *(unsigned char *)(v53 + 4 + v47);
          LOBYTE(v86) = *(unsigned char *)(v53 + 4 + v46);
          *(float *)&unsigned int v89 = (float)LODWORD(v86);
          float v90 = v19 * *(float *)&v89;
          LOBYTE(v89) = result[v53 + 4];
          _H6 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v87), 0.0), 8191.0)));
          float v92 = v19 * (float)v89;
          __asm { FCVT            S16, H6 }
          _H6 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S23, H6 }
          _H6 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S25, H6 }
          _H6 = *(_WORD *)(v30 + 2 * llroundf(v68));
          __asm { FCVT            S19, H6 }
          float v100 = _S14 * _S19;
          float v101 = _S15 * _S19;
          float v102 = _S18 * _S19;
          _H18 = *(_WORD *)(v30 + 2 * llroundf(v77));
          __asm { FCVT            S18, H18 }
          float v105 = _S20 * _S18;
          float v106 = _S21 * _S18;
          float v107 = _S22 * _S18;
          _H17 = *(_WORD *)(v30 + 2 * llroundf(v88));
          __asm { FCVT            S17, H17 }
          float v110 = _S5 * _S17;
          float v111 = _S3 * _S17;
          float v112 = _S7 * _S17;
          float v113 = (float)((float)((float)(v32 * _S23) + (float)(v28 * _S16)) + (float)(v33 * _S25))
               + (float)(v34 * fmaxf(_S16, fmaxf(_S23, _S25)));
          float v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            float v114 = v113;
            if (v113 < 0.0) {
              float v114 = 0.0;
            }
          }
          _H7 = *(_WORD *)(v30 + 2 * llroundf(v114));
          __asm { FCVT            S7, H7 }
          float v117 = _S16 * _S7;
          float v118 = _S23 * _S7;
          _S7 = _S25 * _S7;
          float v120 = (float)((float)(v175 * v101) + (float)(v100 * v177)) + (float)(v102 * v174);
          float v121 = (float)((float)(v172 * v101) + (float)(v100 * v173)) + (float)(v102 * v171);
          _S6 = (float)((float)(v169 * v101) + (float)(v100 * v170)) + (float)(v102 * v168);
          float v123 = (float)((float)(v175 * v106) + (float)(v105 * v177)) + (float)(v107 * v174);
          float v124 = (float)((float)(v172 * v106) + (float)(v105 * v173)) + (float)(v107 * v171);
          float v125 = (float)((float)(v169 * v106) + (float)(v105 * v170)) + (float)(v107 * v168);
          float v126 = (float)((float)(v175 * v111) + (float)(v110 * v177)) + (float)(v112 * v174);
          float v127 = (float)((float)(v172 * v111) + (float)(v110 * v173)) + (float)(v112 * v171);
          _S3 = (float)((float)(v169 * v111) + (float)(v110 * v170)) + (float)(v112 * v168);
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H5
            FCVT            S21, H6
          }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm { FCVT            S24, H5 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          __asm { FCVT            S22, H5 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S14, H6 }
          LOWORD(_S3) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v31
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v175 * v118) + (float)(v117 * v177)) + (float)(_S7 * v174), 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H3
            FCVT            S3, H6
          }
          LOWORD(_S6) = *(_WORD *)(v31
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v172 * v118) + (float)(v117 * v173)) + (float)(_S7 * v171), 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v31
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v169 * v118) + (float)(v117 * v170)) + (float)(_S7 * v168), 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          float v147 = (float)((float)((float)(v184 * _S19) + (float)(v185 * _S18)) + (float)(v183 * _S20)) + v20;
          if (v147 < v20) {
            float v148 = v20;
          }
          else {
            float v148 = (float)((float)((float)(v184 * _S19) + (float)(v185 * _S18)) + (float)(v183 * _S20)) + v20;
          }
          BOOL v149 = v147 <= v22;
          float v150 = (float)((float)((float)(v184 * _S24) + (float)(v185 * _S21)) + (float)(v183 * _S22)) + v20;
          if (!v149) {
            float v148 = v22;
          }
          unsigned int v151 = llroundf(v148);
          if (v150 < v20) {
            float v152 = v20;
          }
          else {
            float v152 = (float)((float)((float)(v184 * _S24) + (float)(v185 * _S21)) + (float)(v183 * _S22)) + v20;
          }
          BOOL v149 = v150 <= v22;
          float v153 = (float)((float)((float)(v184 * _S14) + (float)(v185 * _S5)) + (float)(v183 * _S15)) + v20;
          if (!v149) {
            float v152 = v22;
          }
          unsigned int v154 = llroundf(v152);
          if (v153 < v20) {
            float v155 = v20;
          }
          else {
            float v155 = (float)((float)((float)(v184 * _S14) + (float)(v185 * _S5)) + (float)(v183 * _S15)) + v20;
          }
          BOOL v149 = v153 <= v22;
          float v156 = (float)((float)((float)(v184 * _S6) + (float)(v185 * _S3)) + (float)(v183 * _S7)) + v20;
          if (!v149) {
            float v155 = v22;
          }
          unsigned int v157 = llroundf(v155);
          if (v156 < v20) {
            float v158 = v20;
          }
          else {
            float v158 = (float)((float)((float)(v184 * _S6) + (float)(v185 * _S3)) + (float)(v183 * _S7)) + v20;
          }
          if (v156 <= v22) {
            float v159 = v158;
          }
          else {
            float v159 = v22;
          }
          float v160 = (float)((float)(_S18 + _S21) + _S5) + _S3;
          float v161 = (float)((float)(_S19 + _S24) + _S14) + _S6;
          *(_WORD *)float32x2_t v41 = v151 << v49;
          *((_WORD *)v41 + 1) = v154 << v49;
          *(_WORD *)unsigned int v54 = v157 << v49;
          *((_WORD *)v54 + 1) = llroundf(v159) << v49;
          float v25 = (float)((float)(_S20 + _S22) + _S15) + _S7;
          float v162 = (float)((float)(v187 + (float)(v160 * v182)) + (float)(v161 * v181)) + (float)(v25 * v180);
          float v163 = v186;
          if (v162 <= v186)
          {
            float v163 = (float)((float)(v187 + (float)(v160 * v182)) + (float)(v161 * v181)) + (float)(v25 * v180);
            if (v162 < v188) {
              float v163 = v188;
            }
          }
          int v164 = (_WORD *)(v48 + 2 * v52);
          float v26 = (float)((float)(v187 + (float)(v160 * v179)) + (float)(v161 * v178)) + (float)(v25 * v176);
          *int v164 = llroundf(v163) << v49;
          float v27 = v186;
          if (v26 <= v186)
          {
            float v27 = v26;
            if (v26 < v188) {
              float v27 = v188;
            }
          }
          v39 += 8;
          v53 += 8;
          v41 += 4;
          v54 += 4;
          v164[1] = llroundf(v27) << v49;
          v52 += 2;
          float v32 = v166;
          float v28 = v167;
          float v33 = v165;
        }
        while (v11 > v52);
      }
      uint64_t v39 = v51 + v16;
      float32x2_t v41 = &v50[v17];
      v48 += v18;
      v10 += 2;
    }
    while (v13 > v10);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

uint64_t *vt_Copy_BGRA_TRC_Mat_TRC_xf420_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, float32x4_t a4, int16x8_t _Q2, float32x4_t a6, double a7, double a8, uint8x8_t a9)
{
  uint64_t v15 = 0;
  unint64_t v16 = *(void *)(a1 + 20);
  uint64_t v17 = *(void *)(a1 + 36);
  uint64_t v18 = *(void *)(a1 + 44);
  uint64_t v19 = *(void *)(a1 + 28);
  unint64_t v20 = 2 * *a1;
  uint64_t v21 = 2 * (v19 * a2 / v20);
  uint64_t v22 = v18 + v21;
  uint64_t v23 = 2 * ((v19 + v19 * a2) / v20);
  uint64_t v24 = v18 + v23;
  uint64_t v25 = *((void *)a1 + 14);
  unint64_t v26 = *((void *)a1 + 13) * a2;
  uint64_t v27 = *((void *)a1 + 19);
  uint64_t v29 = *((void *)a1 + 15);
  uint64_t v28 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v30 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v31 = **((void **)a1 + 8);
  uint64_t result = (uint64_t *)**((void **)a1 + 7);
  uint64_t v33 = v30[1];
  uint64_t v285 = *v30;
  uint64_t v34 = *v28;
  uint64_t v35 = v28[1];
  unsigned int v36 = *(_DWORD *)(v27 + 128);
  a9.i32[0] = *(_DWORD *)(v27 + 154);
  __int32 v338 = a9.i32[0];
  unsigned int v37 = *(unsigned __int16 *)(v27 + 144);
  unsigned int v38 = *(unsigned __int8 *)(v27 + 132);
  unsigned int v39 = *(unsigned __int16 *)(v27 + 146);
  unsigned int v40 = *(unsigned __int16 *)(v27 + 148);
  unsigned int v41 = *(unsigned __int16 *)(v27 + 150);
  unsigned int v42 = *(unsigned __int16 *)(v27 + 152);
  float v330 = *(float *)(v27 + 36);
  float v329 = *(float *)(v27 + 40);
  v43.i32[0] = *(_DWORD *)(v27 + 48);
  float v328 = *(float *)(v27 + 44);
  uint64_t v44 = v29 + 2 * (v26 / v20);
  v46.i32[0] = *(_DWORD *)(v27 + 52);
  v45.i32[0] = *(_DWORD *)(v27 + 56);
  __int32 v48 = *(_DWORD *)(v27 + 60);
  __int32 v47 = *(_DWORD *)(v27 + 64);
  if (v44 >= 0) {
    uint64_t v49 = v44;
  }
  else {
    uint64_t v49 = v44 + 1;
  }
  __int32 v50 = *(_DWORD *)(v27 + 68);
  float v327 = *(float *)(v27 + 72);
  float v326 = *(float *)(v27 + 76);
  float v325 = *(float *)(v27 + 80);
  uint64_t v300 = v33;
  uint64_t v51 = v33 * (v49 >> 1);
  float16x8_t v52 = (float16x8_t)vmovl_u8(a9);
  float v324 = *(float *)(v27 + 84);
  float v323 = *(float *)(v27 + 88);
  float v322 = *(float *)(v27 + 92);
  float v321 = *(float *)(v27 + 96);
  float v320 = *(float *)(v27 + 100);
  float v319 = *(float *)(v27 + 104);
  long long v336 = 0u;
  long long v337 = 0u;
  do
  {
    unsigned int v53 = 0;
    char v54 = *((unsigned char *)&v338 + v15);
    do
    {
      *((unsigned char *)&v336 + 8 * (((_BYTE)v15 + (v53 >> 3)) & 0x1F) + v53) = v54 + 4 * v53;
      ++v53;
    }
    while (v53 != 8);
    ++v15;
  }
  while (v15 != 4);
  _ZF = v23 == v21;
  uint64_t v56 = v285;
  if (!_ZF)
  {
    unint64_t v57 = 0;
    unint64_t v58 = v24 - v22;
    uint64_t v59 = v27 + 16548;
    uint64_t v60 = v27 + 164;
    _S21 = 8191.0 / (float)v36;
    float v62 = (float)v37;
    float v335 = (float)v39;
    float v318 = (float)v40;
    float v333 = (float)v41;
    float v334 = (float)v42;
    v43.i32[1] = v48;
    __asm { FMOV            V31.2S, #0.25 }
    *(float32x2_t *)a4.f32 = vmul_f32(v43, *(float32x2_t *)_Q31.i8);
    v46.i32[1] = v47;
    *(float32x2_t *)_Q2.i8 = vmul_f32(v46, *(float32x2_t *)_Q31.i8);
    v45.i32[1] = v50;
    *(float32x2_t *)a6.f32 = vmul_f32(v45, *(float32x2_t *)_Q31.i8);
    _S0 = v330;
    __asm { FCVT            H0, S0 }
    short float v315 = *(short float *)&_S0;
    int32x4_t v68 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a4), 0);
    _S0 = v329;
    __asm { FCVT            H14, S0 }
    int32x4_t v70 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)_Q2), 0);
    _S0 = v328;
    __asm { FCVT            H11, S0 }
    int16x4_t v72 = (int16x4_t)vcvt_f16_f32(a6);
    float16x8_t v73 = (float16x8_t)vdupq_lane_s32((int32x2_t)v72, 0);
    _S0 = v327;
    __asm { FCVT            H12, S0 }
    _S0 = v326;
    __asm { FCVT            H4, S0 }
    _S0 = v325;
    __asm { FCVT            H6, S0 }
    _S0 = v324;
    __asm { FCVT            H5, S0 }
    _S0 = v323;
    __asm { FCVT            H7, S0 }
    _S0 = v322;
    __asm { FCVT            H13, S0 }
    _S0 = v321;
    __asm { FCVT            H8, S0 }
    _S0 = v320;
    __asm { FCVT            H9, S0 }
    *(float *)_Q0.i32 = v319;
    __asm { FCVT            H0, S0 }
    *(short float *)v72.i16 = (short float)v37;
    float16x8_t v88 = (float16x8_t)vdupq_lane_s16(v72, 0);
    *(short float *)v72.i16 = (short float)v39;
    float16x8_t v89 = (float16x8_t)vdupq_lane_s16(v72, 0);
    *(short float *)v72.i16 = (short float)v40;
    int16x8_t v90 = vdupq_lane_s16(v72, 0);
    *(short float *)v72.i16 = (short float)v41;
    float16x8_t v91 = (float16x8_t)vdupq_lane_s16(v72, 0);
    *(short float *)v72.i16 = (short float)v42;
    int16x8_t v92 = vdupq_lane_s16(v72, 0);
    unsigned __int8 v93 = 16 - v38;
    if (v38 >= 0x11) {
      unsigned __int8 v93 = 0;
    }
    uint64_t v94 = v35 + v51 + 2 * v25;
    int8x8_t v95 = (uint16x8_t *)(v34 + v285 * v44 + 2 * v25);
    uint64_t result = (uint64_t *)((char *)result + 4 * v17 + v31 * v22);
    __asm { FCVT            H10, S21 }
    unsigned __int8 v96 = v93;
    uint64_t v280 = v52.u16[1];
    uint16x8_t v97 = (uint16x8_t)vdupq_n_s16(v93);
    unint64_t v279 = v16 & 0xFFFFFFF8;
    float v317 = *(float *)_Q2.i32;
    unint64_t v98 = a4.i64[0];
    float v302 = *(float *)&_Q2.i32[1];
    v99.i32[0] = a6.i32[1];
    float v301 = a6.f32[1];
    float v316 = a6.f32[0];
    float16x8_t v313 = (float16x8_t)v70;
    float16x8_t v314 = (float16x8_t)v68;
    float16x8_t v298 = v73;
    long long v299 = _Q14;
    short float v311 = _H4;
    float v312 = _S11;
    float16x8_t v296 = v88;
    long long v297 = _Q12;
    short float v309 = _H5;
    short float v310 = _H6;
    short float v307 = _H13;
    short float v308 = _H7;
    int16x8_t v305 = _Q9;
    float16x8_t v306 = _Q8;
    short float v304 = *(short float *)_Q0.i16;
    int16x8_t v294 = v90;
    float16x8_t v295 = v89;
    int16x8_t v292 = v92;
    float16x8_t v293 = v91;
    uint16x8_t v290 = v97;
    __int32 v291 = _Q10.i32[0];
    uint64_t v283 = v31;
    unint64_t v284 = v16;
    unint64_t v282 = v58;
    int v303 = v16 - 7;
    unsigned __int8 v281 = v93;
    do
    {
      float v100 = (char *)result + v31;
      float v101 = &v95->i8[v56];
      if ((int)v16 < 8)
      {
        unint64_t v214 = 0;
        float v105 = (uint16x8_t *)v94;
        uint16x8_t v104 = (uint16x8_t *)((char *)v95 + v56);
        int8x8_t v103 = (uint64_t *)((char *)result + v31);
      }
      else
      {
        uint64_t v288 = v94;
        unint64_t v289 = v57;
        int v102 = 0;
        int8x8_t v332 = *(int8x8_t *)((char *)&v336 + 8);
        int8x8_t v331 = (int8x8_t)v337;
        float32x4_t v286 = &v95->i8[v56];
        unsigned int v287 = (char *)result + v31;
        int8x8_t v103 = (uint64_t *)((char *)result + v31);
        uint16x8_t v104 = (uint16x8_t *)((char *)v95 + v56);
        float v105 = (uint16x8_t *)v94;
        short float v106 = *(short float *)_Q10.i16;
        v107.i64[0] = 0x9000900090009000;
        v107.i64[1] = 0x9000900090009000;
        do
        {
          v339.val[0].i64[0] = *result;
          uint64_t v108 = result[1];
          v109.i64[0] = result[2];
          v110.i64[0] = result[3];
          result += 4;
          v339.val[0].i64[1] = v108;
          v109.i64[1] = v110.i64[0];
          v339.val[1] = (int8x16_t)v109;
          float16x8_t v111 = (float16x8_t)v92;
          int8x8_t v112 = vqtbl2_s8(v339, *(int8x8_t *)&v336);
          int8x8_t v113 = vqtbl2_s8(v339, v332);
          *(int8x8_t *)v339.val[0].i8 = vqtbl2_s8(v339, v331);
          *(int8x8_t *)v339.val[1].i8 = vzip1_s8(v112, 0);
          *(int8x8_t *)v109.i8 = vzip1_s8(v113, 0);
          v339.val[1].u64[1] = (unint64_t)vzip2_s8(v112, 0);
          v109.u64[1] = (unint64_t)vzip2_s8(v113, 0);
          *(int8x8_t *)v114.i8 = vzip1_s8(*(int8x8_t *)v339.val[0].i8, 0);
          int8x8_t v115 = vzip2_s8(*(int8x8_t *)v339.val[0].i8, 0);
          v339.val[0] = (int8x16_t)vcvtq_f16_u16((uint16x8_t)v339.val[1]);
          v114.u64[1] = (unint64_t)v115;
          v340.val[0].i64[0] = *v103;
          uint64_t v116 = v103[1];
          v117.i64[0] = v103[2];
          uint64_t v118 = v103[3];
          v103 += 4;
          v339.val[1] = (int8x16_t)vcvtq_f16_u16(v109);
          v340.val[0].i64[1] = v116;
          v117.i64[1] = v118;
          v340.val[1] = (int8x16_t)v117;
          int8x8_t v119 = vqtbl2_s8(v340, *(int8x8_t *)&v336);
          *(int8x8_t *)v109.i8 = vqtbl2_s8(v340, v332);
          *(int8x8_t *)v340.val[1].i8 = vqtbl2_s8(v340, v331);
          *(int8x8_t *)v117.i8 = vzip1_s8(v119, 0);
          v340.val[0] = (int8x16_t)vmulq_n_f16((float16x8_t)v339.val[0], v106);
          v117.u64[1] = (unint64_t)vzip2_s8(v119, 0);
          *(int8x8_t *)v120.i8 = vzip1_s8(*(int8x8_t *)v109.i8, 0);
          v120.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v109.i8, 0);
          *(int8x8_t *)v339.val[0].i8 = vzip1_s8(*(int8x8_t *)v340.val[1].i8, 0);
          float16x8_t v121 = vmulq_n_f16(vcvtq_f16_u16(v114), v106);
          v339.val[0].u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v340.val[1].i8, 0);
          float16x8_t v122 = vmulq_n_f16(vcvtq_f16_u16(v117), v106);
          float16x8_t v123 = vmulq_n_f16(vcvtq_f16_u16(v120), v106);
          v340.val[1] = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v340.val[0], (float16x8_t)0), v107));
          uint32x4_t v124 = vmovl_high_u16((uint16x8_t)v340.val[1]);
          v125.i64[0] = v124.u32[2];
          v125.i64[1] = v124.u32[3];
          int8x16_t v126 = v125;
          v125.i64[0] = v124.u32[0];
          v125.i64[1] = v124.u32[1];
          int8x16_t v127 = v125;
          v340.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v340.val[1].i8);
          v125.i64[0] = v340.val[1].u32[2];
          v125.i64[1] = v340.val[1].u32[3];
          v340.val[0] = v125;
          v125.i64[1] = v340.val[1].u32[1];
          float16x8_t v128 = (float16x8_t)v90;
          v129.i16[0] = *(_WORD *)(v60 + 2 * v340.val[1].u32[0]);
          uint64_t v130 = v127.i64[1];
          uint64_t v131 = v126.i64[1];
          uint32x4_t v132 = (__int16 *)(v60 + 2 * v127.i64[0]);
          float v133 = (__int16 *)(v60 + 2 * v126.i64[0]);
          v340.val[1] = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16((float16x8_t)v339.val[1], v106), (float16x8_t)0), v107));
          float v134 = (__int16 *)(v60 + 2 * v125.i64[1]);
          uint32x4_t v135 = vmovl_high_u16((uint16x8_t)v340.val[1]);
          v125.i64[0] = v135.u32[2];
          v125.i64[1] = v135.u32[3];
          int8x16_t v136 = v125;
          v125.i64[0] = v135.u32[0];
          v125.i64[1] = v135.u32[1];
          int8x16_t v137 = v125;
          v340.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v340.val[1].i8);
          v339.val[1].i16[0] = *(_WORD *)(v60 + 2 * v340.val[1].u32[0]);
          uint16x8_t v138 = (__int16 *)(v60 + 2 * v130);
          v125.i64[1] = v340.val[1].u32[3];
          uint32x4_t v139 = (__int16 *)(v60 + 2 * v340.val[1].u32[2]);
          uint64_t v140 = v137.i64[1];
          float16x8_t v141 = (__int16 *)(v60 + 2 * v340.val[1].u32[1]);
          float16x8_t v142 = (__int16 *)(v60 + 2 * v137.i64[0]);
          v340.val[1] = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v107));
          uint32x4_t v143 = vmovl_high_u16((uint16x8_t)v340.val[1]);
          v340.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v340.val[1].i8);
          v110.i16[0] = *(_WORD *)(v60 + 2 * v340.val[1].u32[0]);
          uint64_t v144 = (__int16 *)(v60 + 2 * v340.val[1].u32[1]);
          float v145 = (__int16 *)(v60 + 2 * v340.val[1].u32[2]);
          float v146 = (__int16 *)(v60 + 2 * v143.u32[0]);
          float v147 = (__int16 *)(v60 + 2 * v340.val[1].u32[3]);
          float v148 = (__int16 *)(v60 + 2 * v143.u32[1]);
          BOOL v149 = (__int16 *)(v60 + 2 * v143.u32[2]);
          float v150 = (__int16 *)(v60 + 2 * v143.u32[3]);
          v340.val[1] = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v107));
          uint32x4_t v151 = vmovl_high_u16((uint16x8_t)v340.val[1]);
          v129.i16[1] = *v134;
          v340.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v340.val[1].i8);
          v339.val[1].i16[1] = *v141;
          v110.i16[1] = *v144;
          v122.i16[0] = *(_WORD *)(v60 + 2 * v340.val[1].u32[0]);
          v129.i16[2] = *(_WORD *)(v60 + 2 * v340.val[0].i64[0]);
          float v152 = (__int16 *)(v60 + 2 * v340.val[1].u32[3]);
          v339.val[1].i16[2] = *v139;
          float v153 = (__int16 *)(v60 + 2 * v151.u32[0]);
          v110.i16[2] = *v145;
          v122.i16[1] = *(_WORD *)(v60 + 2 * v340.val[1].u32[1]);
          v129.i16[3] = *(_WORD *)(v60 + 2 * v340.val[0].i64[1]);
          unsigned int v154 = (__int16 *)(v60 + 2 * v151.u32[1]);
          float v155 = (__int16 *)(v60 + 2 * v151.u32[2]);
          float v156 = (__int16 *)(v60 + 2 * v151.u32[3]);
          v339.val[1].i16[3] = *(_WORD *)(v60 + 2 * v125.i64[1]);
          v122.i16[2] = *(_WORD *)(v60 + 2 * v340.val[1].u32[2]);
          v110.i16[3] = *v147;
          v340.val[1] = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v107));
          uint32x4_t v157 = vmovl_high_u16((uint16x8_t)v340.val[1]);
          v122.i16[3] = *v152;
          v340.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v340.val[1].i8);
          v129.i16[4] = *v132;
          v121.i16[0] = *(_WORD *)(v60 + 2 * v340.val[1].u32[0]);
          v339.val[1].i16[4] = *v142;
          v110.i16[4] = *v146;
          v122.i16[4] = *v153;
          v129.i16[5] = *v138;
          float v158 = (__int16 *)(v60 + 2 * v157.u32[2]);
          float v159 = (__int16 *)(v60 + 2 * v157.u32[3]);
          v339.val[1].i16[5] = *(_WORD *)(v60 + 2 * v140);
          v121.i16[1] = *(_WORD *)(v60 + 2 * v340.val[1].u32[1]);
          v121.i16[2] = *(_WORD *)(v60 + 2 * v340.val[1].u32[2]);
          v110.i16[5] = *v148;
          v121.i16[3] = *(_WORD *)(v60 + 2 * v340.val[1].u32[3]);
          v121.i16[4] = *(_WORD *)(v60 + 2 * v157.u32[0]);
          v122.i16[5] = *v154;
          v121.i16[5] = *(_WORD *)(v60 + 2 * v157.u32[1]);
          v129.i16[6] = *v133;
          v340.val[1] = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16((uint16x8_t)v339.val[0]), v106), (float16x8_t)0), v107));
          uint32x4_t v160 = vmovl_high_u16((uint16x8_t)v340.val[1]);
          v339.val[1].i16[6] = *(_WORD *)(v60 + 2 * v136.i64[0]);
          v340.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v340.val[1].i8);
          v110.i16[6] = *v149;
          v339.val[0].i16[0] = *(_WORD *)(v60 + 2 * v340.val[1].u32[0]);
          v122.i16[6] = *v155;
          v121.i16[6] = *v158;
          v129.i16[7] = *(_WORD *)(v60 + 2 * v131);
          v339.val[1].i16[7] = *(_WORD *)(v60 + 2 * v136.i64[1]);
          v110.i16[7] = *v150;
          v339.val[0].i16[1] = *(_WORD *)(v60 + 2 * v340.val[1].u32[1]);
          v339.val[0].i16[2] = *(_WORD *)(v60 + 2 * v340.val[1].u32[2]);
          v122.i16[7] = *v156;
          v339.val[0].i16[3] = *(_WORD *)(v60 + 2 * v340.val[1].u32[3]);
          v339.val[0].i16[4] = *(_WORD *)(v60 + 2 * v160.u32[0]);
          v121.i16[7] = *v159;
          v339.val[0].i16[5] = *(_WORD *)(v60 + 2 * v160.u32[1]);
          v339.val[0].i16[6] = *(_WORD *)(v60 + 2 * v160.u32[2]);
          v339.val[0].i16[7] = *(_WORD *)(v60 + 2 * v160.u32[3]);
          v340.val[1] = (int8x16_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, *(short float *)&_Q12), (float16x8_t)v339.val[1], v311), v110, v310);
          long long v161 = _Q14;
          float16x8_t v162 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v309), (float16x8_t)v339.val[1], v308), v110, v307);
          v340.val[0] = (int8x16_t)vmulq_n_f16(v110, v304);
          v110.i16[7] = v305.i16[7];
          v340.val[0] = (int8x16_t)vmlaq_n_f16((float16x8_t)v340.val[0], (float16x8_t)v339.val[1], *(short float *)v305.i16);
          _Q9.i16[7] = v306.i16[7];
          v340.val[0] = (int8x16_t)vmlaq_n_f16((float16x8_t)v340.val[0], v129, *(short float *)v306.i16);
          long long v163 = _Q12;
          float16x8_t v164 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v122, *(short float *)&_Q12), v121, v311), (float16x8_t)v339.val[0], v310);
          float16x8_t v165 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v122, v309), v121, v308), (float16x8_t)v339.val[0], v307);
          v339.val[0] = (int8x16_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v339.val[0], v304), v121, *(short float *)v305.i16), v122, *(short float *)v306.i16);
          v340.val[1] = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v340.val[1], (float16x8_t)0), v107));
          uint32x4_t v166 = vmovl_high_u16((uint16x8_t)v340.val[1]);
          v340.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v340.val[1].i8);
          uint64_t v167 = v340.val[1].u32[1];
          uint64_t v168 = v340.val[1].u32[0];
          uint64_t v169 = v340.val[1].u32[3];
          uint64_t v170 = v340.val[1].u32[2];
          uint64_t v171 = v166.u32[1];
          uint64_t v172 = v166.u32[0];
          uint64_t v173 = v166.u32[3];
          v340.val[1] = (int8x16_t)vmaxq_f16(v162, (float16x8_t)0);
          _Q14 = v161;
          v340.val[1] = (int8x16_t)vcvtq_u16_f16(vminq_f16((float16x8_t)v340.val[1], v107));
          uint64_t v174 = v166.u32[2];
          uint32x4_t v175 = vmovl_high_u16((uint16x8_t)v340.val[1]);
          v340.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v340.val[1].i8);
          v129.i16[0] = *(_WORD *)(v59 + 2 * v168);
          uint64_t v176 = v340.val[1].u32[1];
          v110.i16[0] = *(_WORD *)(v59 + 2 * v340.val[1].u32[0]);
          uint64_t v177 = v340.val[1].u32[3];
          float v178 = (__int16 *)(v59 + 2 * v340.val[1].u32[2]);
          uint64_t v179 = v175.u32[1];
          uint64_t v180 = v175.u32[0];
          uint64_t v181 = v175.u32[3];
          float v182 = (__int16 *)(v59 + 2 * v167);
          uint64_t v183 = v175.u32[2];
          v340.val[1] = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v340.val[0], (float16x8_t)0), v107));
          uint32x4_t v184 = vmovl_high_u16((uint16x8_t)v340.val[1]);
          float v185 = (__int16 *)(v59 + 2 * v169);
          v340.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v340.val[1].i8);
          float v186 = (__int16 *)(v59 + 2 * v176);
          _Q9.i16[0] = *(_WORD *)(v59 + 2 * v340.val[1].u32[0]);
          float v187 = (__int16 *)(v59 + 2 * v177);
          float v188 = (__int16 *)(v59 + 2 * v340.val[1].u32[1]);
          float16x8_t v189 = (__int16 *)(v59 + 2 * v340.val[1].u32[2]);
          float16x8_t v190 = (__int16 *)(v59 + 2 * v340.val[1].u32[3]);
          uint64_t v191 = v184.u32[1];
          uint64_t v192 = v184.u32[3];
          v129.i16[1] = *v182;
          uint64_t v193 = v184.u32[0];
          uint64_t v194 = v184.u32[2];
          v110.i16[1] = *v186;
          v340.val[1] = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v164, (float16x8_t)0), v107));
          uint32x4_t v195 = vmovl_high_u16((uint16x8_t)v340.val[1]);
          v340.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v340.val[1].i8);
          _Q9.i16[1] = *v188;
          v129.i16[2] = *(_WORD *)(v59 + 2 * v170);
          v164.i16[0] = *(_WORD *)(v59 + 2 * v340.val[1].u32[0]);
          v110.i16[2] = *v178;
          _Q9.i16[2] = *v189;
          v164.i16[1] = *(_WORD *)(v59 + 2 * v340.val[1].u32[1]);
          v129.i16[3] = *v185;
          float16x8_t v196 = (__int16 *)(v59 + 2 * v340.val[1].u32[3]);
          v164.i16[2] = *(_WORD *)(v59 + 2 * v340.val[1].u32[2]);
          v110.i16[3] = *v187;
          v340.val[1] = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v165, (float16x8_t)0), v107));
          uint32x4_t v197 = vmovl_u16(*(uint16x4_t *)v340.val[1].i8);
          _Q9.i16[3] = *v190;
          v164.i16[3] = *v196;
          v122.i16[0] = *(_WORD *)(v59 + 2 * v197.u32[0]);
          v129.i16[4] = *(_WORD *)(v59 + 2 * v172);
          v110.i16[4] = *(_WORD *)(v59 + 2 * v180);
          uint32x4_t v198 = (__int16 *)(v59 + 2 * v181);
          _Q9.i16[4] = *(_WORD *)(v59 + 2 * v193);
          float16x8_t v199 = (__int16 *)(v59 + 2 * v192);
          v164.i16[4] = *(_WORD *)(v59 + 2 * v195.u32[0]);
          v129.i16[5] = *(_WORD *)(v59 + 2 * v171);
          v122.i16[1] = *(_WORD *)(v59 + 2 * v197.u32[1]);
          v110.i16[5] = *(_WORD *)(v59 + 2 * v179);
          v122.i16[2] = *(_WORD *)(v59 + 2 * v197.u32[2]);
          _Q9.i16[5] = *(_WORD *)(v59 + 2 * v191);
          float16x8_t v200 = (__int16 *)(v59 + 2 * v195.u32[3]);
          v164.i16[5] = *(_WORD *)(v59 + 2 * v195.u32[1]);
          v340.val[1] = (int8x16_t)vmovl_high_u16((uint16x8_t)v340.val[1]);
          v129.i16[6] = *(_WORD *)(v59 + 2 * v174);
          v122.i16[3] = *(_WORD *)(v59 + 2 * v197.u32[3]);
          v110.i16[6] = *(_WORD *)(v59 + 2 * v183);
          v122.i16[4] = *(_WORD *)(v59 + 2 * v340.val[1].u32[0]);
          _Q9.i16[6] = *(_WORD *)(v59 + 2 * v194);
          uint64_t v201 = v340.val[1].u32[3];
          v164.i16[6] = *(_WORD *)(v59 + 2 * v195.u32[2]);
          v122.i16[5] = *(_WORD *)(v59 + 2 * v340.val[1].u32[1]);
          v122.i16[6] = *(_WORD *)(v59 + 2 * v340.val[1].u32[2]);
          v340.val[1] = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v339.val[0], (float16x8_t)0), v107));
          uint32x4_t v202 = vmovl_high_u16((uint16x8_t)v340.val[1]);
          v340.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v340.val[1].i8);
          float16x8_t v203 = (float16x8_t)vuzp1q_s16((int16x8_t)v129, (int16x8_t)v110);
          v129.i16[7] = *(_WORD *)(v59 + 2 * v173);
          v125.i64[0] = v202.u32[0];
          v125.i64[1] = v202.u32[1];
          int8x16_t v204 = v125;
          v125.i64[1] = v340.val[1].u32[3];
          v340.val[1].i16[7] = (unint64_t)v340.val[1].u32[3] >> 48;
          v340.val[1].i16[0] = *(_WORD *)(v59 + 2 * v340.val[1].u32[0]);
          uint64_t v205 = v204.i64[1];
          v110.i16[7] = *v198;
          v340.val[1].i16[1] = *(_WORD *)(v59 + 2 * v340.val[1].u32[1]);
          uint64_t v206 = v204.i64[0];
          float16x8_t v207 = (float16x8_t)vuzp1q_s16((int16x8_t)v164, (int16x8_t)v122);
          v164.i16[7] = *v200;
          v340.val[1].i16[2] = *(_WORD *)(v59 + 2 * v340.val[1].u32[2]);
          uint64_t v208 = v202.u32[3];
          v340.val[1].i16[3] = *(_WORD *)(v59 + 2 * v125.i64[1]);
          v122.i16[7] = *(_WORD *)(v59 + 2 * v201);
          float16x8_t v209 = (__int16 *)(v59 + 2 * v202.u32[2]);
          v340.val[1].i16[4] = *(_WORD *)(v59 + 2 * v206);
          float16x8_t v210 = vmlaq_n_f16(vmlaq_n_f16(v88, v129, v315), v110, *(short float *)&v161);
          v340.val[0] = (int8x16_t)vuzp2q_s16((int16x8_t)v129, (int16x8_t)v110);
          int16x8_t v90 = (int16x8_t)v128;
          _S11 = v312;
          v339.val[0] = (int8x16_t)vmlaq_n_f16(vmlaq_n_f16(v88, v164, v315), v122, *(short float *)&v161);
          float16x8_t v211 = (float16x8_t)vuzp2q_s16((int16x8_t)v164, (int16x8_t)v122);
          _Q12 = v163;
          _Q10 = (float16x8_t)_Q9;
          v340.val[1].i16[5] = *(_WORD *)(v59 + 2 * v205);
          v340.val[1].i16[6] = *v209;
          _Q10.i16[7] = *v199;
          float16x8_t v212 = vaddq_f16(v203, (float16x8_t)v340.val[0]);
          _Q31 = (float16x8_t)v340.val[1];
          _Q31.i16[7] = *(_WORD *)(v59 + 2 * v208);
          *v95++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v210, _Q10, *(short float *)&v312), v88), v128)), v97);
          int16x8_t v213 = (int16x8_t)vaddq_f16(vaddq_f16(v212, v207), v211);
          int16x8_t v92 = (int16x8_t)v111;
          _Q8 = vmlaq_n_f16((float16x8_t)v339.val[0], _Q31, *(short float *)&v312);
          *v104++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(_Q8, v88), v128)), v97);
          _Q2 = vzip1q_s16(v213, v213);
          float16x8_t v99 = (float16x8_t)vzip2q_s16(v213, v213);
          float16x8_t v52 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v89, v314, (float16x8_t)_Q2), v313, v99), v73, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(_Q9, _Q9), (float16x8_t)vtrn2q_s16((int16x8_t)_Q10, (int16x8_t)_Q10)), (float16x8_t)vtrn1q_s16((int16x8_t)v340.val[1], (int16x8_t)v340.val[1])), (float16x8_t)vtrn2q_s16((int16x8_t)_Q31, (int16x8_t)_Q31)));
          _Q0 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(v52, v91), v111)), v97);
          *v105++ = _Q0;
          v102 += 8;
        }
        while (v102 < v303);
        unint64_t v214 = v279;
        uint64_t v31 = v283;
        unint64_t v16 = v284;
        uint64_t v56 = v285;
        float v101 = v286;
        uint64_t v94 = v288;
        unint64_t v57 = v289;
        unint64_t v58 = v282;
        unsigned __int8 v96 = v281;
        float v100 = v287;
      }
      if (v16 > v214)
      {
        uint64_t v215 = 0;
        uint32x4_t v216 = (char *)result + v280;
        uint32x4_t v217 = (char *)v103 + v280;
        do
        {
          uint64_t v218 = v215 + v338;
          _Q0.i8[0] = *((unsigned char *)result + v218);
          v99.i8[0] = v216[v215];
          uint64_t v219 = v215 + BYTE2(v338);
          _Q2.i8[0] = *((unsigned char *)result + v219);
          v52.i8[0] = *((unsigned char *)result + v218 + 4);
          v92.i8[0] = v216[v215 + 4];
          _Q31.i8[0] = *((unsigned char *)result + v219 + 4);
          uint64_t v220 = (char *)v103 + v218;
          _Q8.i8[0] = *v220;
          _Q9.i8[0] = v217[v215];
          _Q10.i8[0] = *((unsigned char *)v103 + v219);
          LOBYTE(_S11) = v220[4];
          LOBYTE(_Q12) = v217[v215 + 4];
          LOBYTE(_Q14) = *((unsigned char *)v103 + v219 + 4);
          _H0 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S21 * (float)_Q0.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S21 * (float)v99.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S21 * (float)_Q2.u32[0], 0.0), 8191.0)));
          _H23 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S21 * (float)v52.u32[0], 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S23, H23
          }
          _H30 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S21 * (float)v92.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S21 * (float)_Q31.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S21 * (float)_Q8.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S21 * (float)_Q9.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H10 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S21 * (float)_Q10.u32[0], 0.0), 8191.0)));
          _H11 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S21 * (float)LODWORD(_S11), 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          _H12 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S21 * (float)_Q12, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H14 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S21 * (float)_Q14, 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          float v245 = (float)((float)(v326 * _S1) + (float)(_S0 * v327)) + (float)(_S2 * v325);
          _S3 = (float)((float)(v323 * _S1) + (float)(_S0 * v324)) + (float)(_S2 * v322);
          _S0 = (float)((float)(v320 * _S1) + (float)(_S0 * v321)) + (float)(_S2 * v319);
          _S1 = (float)((float)(v326 * _S30) + (float)(_S23 * v327)) + (float)(_S31 * v325);
          _S2 = (float)((float)(v323 * _S30) + (float)(_S23 * v324)) + (float)(_S31 * v322);
          float v250 = (float)((float)(v320 * _S30) + (float)(_S23 * v321)) + (float)(_S31 * v319);
          float v251 = (float)((float)(v326 * _S9) + (float)(_S8 * v327)) + (float)(_S10 * v325);
          float v252 = (float)((float)(v323 * _S9) + (float)(_S8 * v324)) + (float)(_S10 * v322);
          float v253 = (float)((float)(v320 * _S9) + (float)(_S8 * v321)) + (float)(_S10 * v319);
          float v254 = (float)((float)(v326 * _S12) + (float)(_S11 * v327)) + (float)(_S14 * v325);
          float v255 = (float)((float)(v323 * _S12) + (float)(_S11 * v324)) + (float)(_S14 * v322);
          float v256 = (float)((float)(v320 * _S12) + (float)(_S11 * v321)) + (float)(_S14 * v319);
          LOWORD(_S23) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v245, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          LOWORD(_S3) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S30, H3 }
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          LOWORD(_S1) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm
          {
            FCVT            S31, H0
            FCVT            S8, H1
          }
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm { FCVT            S10, H0 }
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v250, 0.0), 8191.0)));
          __asm { FCVT            S9, H0 }
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v251, 0.0), 8191.0)));
          __asm { FCVT            S11, H0 }
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v252, 0.0), 8191.0)));
          __asm { FCVT            S12, H0 }
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v253, 0.0), 8191.0)));
          LOWORD(_S1) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v254, 0.0), 8191.0)));
          __asm
          {
            FCVT            S14, H0
            FCVT            S0, H1
          }
          LOWORD(_S1) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v255, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v256, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          float v264 = (float)((float)((float)(v329 * _S30) + (float)(v330 * _S23)) + (float)(v328 * _S31)) + v62;
          if (v264 < v62) {
            float v265 = v62;
          }
          else {
            float v265 = (float)((float)((float)(v329 * _S30) + (float)(v330 * _S23)) + (float)(v328 * _S31)) + v62;
          }
          BOOL v266 = v264 <= v318;
          float v267 = (float)((float)((float)(v329 * *(float *)_Q10.i32) + (float)(v330 * _S8)) + (float)(v328 * _S9)) + v62;
          if (!v266) {
            float v265 = v318;
          }
          unsigned int v268 = llroundf(v265);
          if (v267 < v62) {
            float v269 = v62;
          }
          else {
            float v269 = (float)((float)((float)(v329 * *(float *)_Q10.i32) + (float)(v330 * _S8)) + (float)(v328 * _S9))
          }
                 + v62;
          BOOL v266 = v267 <= v318;
          float v270 = (float)((float)((float)(v329 * *(float *)&_Q12) + (float)(v330 * _S11))
                       + (float)(v328 * *(float *)&_Q14))
               + v62;
          if (!v266) {
            float v269 = v318;
          }
          unsigned int v271 = llroundf(v269);
          if (v270 < v62) {
            float v272 = v62;
          }
          else {
            float v272 = (float)((float)((float)(v329 * *(float *)&_Q12) + (float)(v330 * _S11))
          }
                         + (float)(v328 * *(float *)&_Q14))
                 + v62;
          BOOL v266 = v270 <= v318;
          float v273 = (float)((float)((float)(v329 * _S1) + (float)(v330 * _S0)) + (float)(v328 * *(float *)_Q2.i32)) + v62;
          if (!v266) {
            float v272 = v318;
          }
          unsigned int v274 = llroundf(v272);
          if (v273 < v62) {
            float v275 = v62;
          }
          else {
            float v275 = (float)((float)((float)(v329 * _S1) + (float)(v330 * _S0)) + (float)(v328 * *(float *)_Q2.i32)) + v62;
          }
          if (v273 <= v318) {
            float v276 = v275;
          }
          else {
            float v276 = v318;
          }
          float v277 = (float)((float)(_S23 + _S8) + _S11) + _S0;
          float v278 = (float)((float)(_S30 + *(float *)_Q10.i32) + *(float *)&_Q12) + _S1;
          v95->i16[0] = v268 << v96;
          v95->i16[1] = v271 << v96;
          v104->i16[0] = v274 << v96;
          v104->i16[1] = llroundf(v276) << v96;
          *(float *)_Q31.i32 = (float)((float)(_S31 + _S9) + *(float *)&_Q14) + *(float *)_Q2.i32;
          *(float *)_Q9.i32 = (float)((float)(v335 + (float)(v277 * *(float *)&v98)) + (float)(v278 * v317))
                            + (float)(*(float *)_Q31.i32 * v316);
          *(float *)_Q8.i32 = v334;
          if (*(float *)_Q9.i32 <= v334)
          {
            *(float *)_Q8.i32 = (float)((float)(v335 + (float)(v277 * *(float *)&v98)) + (float)(v278 * v317))
                              + (float)(*(float *)_Q31.i32 * v316);
            if (*(float *)_Q9.i32 < v333) {
              *(float *)_Q8.i32 = v333;
            }
          }
          *(float *)_Q0.i32 = (float)(v335 + (float)(v277 * *((float *)&v98 + 1))) + (float)(v278 * v302);
          *(float *)v99.i32 = v301;
          *(float *)v52.i32 = *(float *)_Q0.i32 + (float)(*(float *)_Q31.i32 * v301);
          v105->i16[0] = llroundf(*(float *)_Q8.i32) << v96;
          *(float *)v92.i32 = v334;
          if (*(float *)v52.i32 <= v334)
          {
            *(float *)_Q0.i32 = v333;
            v92.i32[0] = v52.i32[0];
            if (*(float *)v52.i32 < v333) {
              *(float *)v92.i32 = v333;
            }
          }
          v214 += 2;
          v215 += 8;
          v105->i16[1] = llroundf(*(float *)v92.i32) << v96;
          int8x8_t v95 = (uint16x8_t *)((char *)v95 + 4);
          uint16x8_t v104 = (uint16x8_t *)((char *)v104 + 4);
          float v105 = (uint16x8_t *)((char *)v105 + 4);
        }
        while (v16 > v214);
      }
      uint64_t result = (uint64_t *)&v100[v31];
      int8x8_t v95 = (uint16x8_t *)&v101[v56];
      v94 += v300;
      v57 += 2;
      float16x8_t v73 = v298;
      _Q14 = v299;
      float16x8_t v88 = v296;
      _Q12 = v297;
      int16x8_t v90 = v294;
      float16x8_t v89 = v295;
      int16x8_t v92 = v292;
      float16x8_t v91 = v293;
      uint16x8_t v97 = v290;
      _Q10.i32[0] = v291;
    }
    while (v58 > v57);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v18 = *(void *)(result + 28);
  unint64_t v19 = 2 * *result;
  unint64_t v20 = v18 * a2 / v19;
  unint64_t v21 = (v18 + v18 * a2) / v19;
  if (2 * v21 != 2 * v20)
  {
    unint64_t v22 = 0;
    unint64_t v23 = *(void *)(result + 20);
    uint64_t v24 = *(void *)(result + 44) + 2 * v20;
    unint64_t v25 = 2 * v21 - 2 * v20;
    uint64_t v26 = *((void *)result + 19);
    uint64_t v27 = (uint64_t *)*((void *)result + 17);
    uint64_t v28 = **((void **)result + 8);
    uint64_t v29 = *v27;
    uint64_t v30 = v27[1];
    float v31 = 8191.0 / (float)*(unsigned int *)(v26 + 128);
    LOWORD(a5) = *(_WORD *)(v26 + 144);
    float v32 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v26 + 146);
    LOWORD(a7) = *(_WORD *)(v26 + 148);
    float v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v26 + 150);
    float v138 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v26 + 152);
    float v139 = (float)LODWORD(a9);
    float v140 = (float)LODWORD(a6);
    float v136 = *(float *)(v26 + 40);
    float v137 = *(float *)(v26 + 36);
    float v34 = 0.25;
    float v134 = *(float *)(v26 + 48) * 0.25;
    float v135 = *(float *)(v26 + 44);
    float v132 = *(float *)(v26 + 56) * 0.25;
    float v133 = *(float *)(v26 + 52) * 0.25;
    float v35 = *(float *)(v26 + 64);
    float v130 = v35 * 0.25;
    float v131 = *(float *)(v26 + 60) * 0.25;
    float v36 = *(float *)(v26 + 68);
    float v128 = v36 * 0.25;
    float v129 = *(float *)(v26 + 72);
    float v37 = *(float *)(v26 + 80);
    float v127 = *(float *)(v26 + 76);
    float v38 = *(float *)(v26 + 84);
    float v39 = *(float *)(v26 + 88);
    float v40 = *(float *)(v26 + 92);
    float v41 = *(float *)(v26 + 96);
    float v43 = *(float *)(v26 + 100);
    float v42 = *(float *)(v26 + 104);
    uint64_t v44 = v26 + 164;
    uint64_t v45 = v26 + 16548;
    uint64_t v46 = *((void *)result + 14);
    unint64_t v47 = *((void *)result + 13) * a2 / v19;
    __int32 v48 = (uint64_t *)*((void *)result + 16);
    uint64_t v49 = *((void *)result + 15) + 2 * v47;
    uint64_t v50 = **((void **)result + 7) + v28 * v24 + 4 * *(void *)(result + 36);
    uint64_t v52 = *v48;
    uint64_t v51 = v48[1];
    uint64_t result = (unsigned __int8 *)(v52 + v49 * v29 + 2 * v46);
    unsigned int v53 = *(unsigned __int8 *)(v26 + 132);
    if (v53 >= 0x11) {
      char v54 = 0;
    }
    else {
      char v54 = 16 - v53;
    }
    uint64_t v55 = *(unsigned __int8 *)(v26 + 156);
    if (v49 >= 0) {
      uint64_t v56 = v49;
    }
    else {
      uint64_t v56 = v49 + 1;
    }
    uint64_t v57 = v51 + (v56 >> 1) * v30;
    uint64_t v58 = *(unsigned __int8 *)(v26 + 155);
    uint64_t v59 = *(unsigned __int8 *)(v26 + 154);
    uint64_t v60 = v57 + 2 * v46;
    char v61 = v54;
    do
    {
      float v62 = &result[v29];
      uint64_t v63 = v50 + v28;
      if (v23)
      {
        unint64_t v64 = 0;
        uint64_t v65 = v50 + v28;
        float v66 = &result[v29];
        do
        {
          LOBYTE(v36) = *(unsigned char *)(v50 + v59);
          LOBYTE(v34) = *(unsigned char *)(v50 + v58);
          LOBYTE(v35) = *(unsigned char *)(v50 + v55);
          LOBYTE(v9) = *(unsigned char *)(v50 + 4 + v59);
          LOBYTE(v10) = *(unsigned char *)(v50 + 4 + v58);
          LOBYTE(_S12) = *(unsigned char *)(v50 + 4 + v55);
          LOBYTE(_S13) = *(unsigned char *)(v65 + v59);
          LOBYTE(_S14) = *(unsigned char *)(v65 + v58);
          LOBYTE(_S15) = *(unsigned char *)(v65 + v55);
          LOBYTE(v15) = *(unsigned char *)(v65 + 4 + v59);
          LOBYTE(v16) = *(unsigned char *)(v65 + 4 + v58);
          LOBYTE(_S24) = *(unsigned char *)(v65 + 4 + v55);
          _H18 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v36), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v34), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v35), 0.0), 8191.0)));
          _H10 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v9), 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H20
            FCVT            S10, H10
          }
          _H11 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S12), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S13), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S14), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S15), 0.0), 8191.0)));
          _H21 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)v15, 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H15
            FCVT            S21, H21
          }
          _H22 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)v16, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H24 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S24), 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _S5 = (float)((float)(v127 * _S19) + (float)(_S18 * v129)) + (float)(_S20 * v37);
          _S3 = (float)((float)(v39 * _S19) + (float)(_S18 * v38)) + (float)(_S20 * v40);
          float v96 = (float)((float)(v43 * _S19) + (float)(_S18 * v41)) + (float)(_S20 * v42);
          float v97 = (float)((float)(v127 * _S11) + (float)(_S10 * v129)) + (float)(_S12 * v37);
          float v98 = (float)((float)(v39 * _S11) + (float)(_S10 * v38)) + (float)(_S12 * v40);
          float v99 = (float)((float)(v43 * _S11) + (float)(_S10 * v41)) + (float)(_S12 * v42);
          float v100 = (float)((float)(v127 * _S14) + (float)(_S13 * v129)) + (float)(_S15 * v37);
          float v101 = (float)((float)(v39 * _S14) + (float)(_S13 * v38)) + (float)(_S15 * v40);
          _S6 = (float)((float)(v43 * _S14) + (float)(_S13 * v41)) + (float)(_S15 * v42);
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S10, H5 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S11, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H3
            FCVT            S13, H5
          }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm { FCVT            S14, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v127 * _S22) + (float)(_S21 * v129)) + (float)(_S24 * v37), 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H3
            FCVT            S3, H5
          }
          LOWORD(_S5) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v39 * _S22) + (float)(_S21 * v38)) + (float)(_S24 * v40), 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v43 * _S22) + (float)(_S21 * v41)) + (float)(_S24 * v42), 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          unsigned int v15 = LODWORD(v136);
          unsigned int v16 = LODWORD(v135);
          float v111 = (float)((float)((float)(v136 * _S11) + (float)(v137 * _S10)) + (float)(v135 * _S12)) + v32;
          if (v111 < v32) {
            float v112 = v32;
          }
          else {
            float v112 = (float)((float)((float)(v136 * _S11) + (float)(v137 * _S10)) + (float)(v135 * _S12)) + v32;
          }
          BOOL v113 = v111 <= v33;
          float v114 = (float)((float)((float)(v136 * _S15) + (float)(v137 * _S13)) + (float)(v135 * _S14)) + v32;
          if (!v113) {
            float v112 = v33;
          }
          unsigned int v115 = llroundf(v112);
          if (v114 < v32) {
            float v116 = v32;
          }
          else {
            float v116 = (float)((float)((float)(v136 * _S15) + (float)(v137 * _S13)) + (float)(v135 * _S14)) + v32;
          }
          BOOL v113 = v114 <= v33;
          float v117 = (float)((float)((float)(v136 * _S19) + (float)(v137 * _S18)) + (float)(v135 * _S20)) + v32;
          if (!v113) {
            float v116 = v33;
          }
          unsigned int v118 = llroundf(v116);
          if (v117 < v32) {
            float v119 = v32;
          }
          else {
            float v119 = (float)((float)((float)(v136 * _S19) + (float)(v137 * _S18)) + (float)(v135 * _S20)) + v32;
          }
          BOOL v113 = v117 <= v33;
          float v120 = (float)((float)((float)(v136 * _S5) + (float)(v137 * _S3)) + (float)(v135 * _S6)) + v32;
          if (!v113) {
            float v119 = v33;
          }
          unsigned int v121 = llroundf(v119);
          if (v120 < v32) {
            float v122 = v32;
          }
          else {
            float v122 = (float)((float)((float)(v136 * _S5) + (float)(v137 * _S3)) + (float)(v135 * _S6)) + v32;
          }
          if (v120 <= v33) {
            float v123 = v122;
          }
          else {
            float v123 = v33;
          }
          float v124 = (float)((float)(_S10 + _S13) + _S18) + _S3;
          float v125 = (float)((float)(_S11 + _S15) + _S19) + _S5;
          *(_WORD *)uint64_t result = v115 << v61;
          *((_WORD *)result + 1) = v118 << v61;
          *(_WORD *)float v66 = v121 << v61;
          *((_WORD *)v66 + 1) = llroundf(v123) << v61;
          float v9 = v139;
          float v35 = (float)((float)(_S12 + _S14) + _S20) + _S6;
          float v10 = (float)((float)(v140 + (float)(v124 * v134)) + (float)(v125 * v133)) + (float)(v35 * v132);
          if (v10 <= v139)
          {
            float v9 = (float)((float)(v140 + (float)(v124 * v134)) + (float)(v125 * v133)) + (float)(v35 * v132);
            if (v10 < v138) {
              float v9 = v138;
            }
          }
          int8x16_t v126 = (_WORD *)(v60 + 2 * v64);
          float v34 = (float)((float)(v140 + (float)(v124 * v131)) + (float)(v125 * v130)) + (float)(v35 * v128);
          *int8x16_t v126 = llroundf(v9) << v61;
          float v36 = v139;
          if (v34 <= v139)
          {
            float v36 = v34;
            if (v34 < v138) {
              float v36 = v138;
            }
          }
          v50 += 8;
          v65 += 8;
          result += 4;
          v66 += 4;
          v126[1] = llroundf(v36) << v61;
          v64 += 2;
        }
        while (v23 > v64);
      }
      uint64_t v50 = v63 + v28;
      uint64_t result = &v62[v29];
      v60 += v30;
      v22 += 2;
    }
    while (v25 > v22);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_xf420_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_BGRA_rgb_xf420_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, uint8x8_t a5, double a6, float32x4_t a7, double a8, float32x4_t a9)
{
  uint64_t v11 = 0;
  unint64_t v12 = *(void *)(a1 + 20);
  uint64_t v148 = *(void *)(a1 + 36);
  uint64_t v13 = *(void *)(a1 + 44);
  uint64_t v14 = *(void *)(a1 + 28);
  unint64_t v15 = 2 * *a1;
  uint64_t v16 = 2 * (v14 * a2 / v15);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = 2 * ((v14 + v14 * a2) / v15);
  uint64_t v19 = v13 + v18;
  uint64_t v20 = *((void *)a1 + 14);
  unint64_t v21 = *((void *)a1 + 13) * a2;
  uint64_t v22 = *((void *)a1 + 19);
  uint64_t v23 = *((void *)a1 + 15);
  uint64_t v24 = (uint64_t *)*((void *)a1 + 16);
  unint64_t v25 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v26 = **((void **)a1 + 8);
  uint64_t v146 = **((void **)a1 + 7);
  uint64_t v27 = *v25;
  uint64_t v28 = v25[1];
  uint64_t result = *v24;
  uint64_t v30 = v24[1];
  unsigned int v31 = *(_DWORD *)(v22 + 128);
  unsigned int v32 = *(_DWORD *)(v22 + 136);
  a5.i32[0] = *(_DWORD *)(v22 + 154);
  __int32 v154 = a5.i32[0];
  unsigned int v33 = *(unsigned __int16 *)(v22 + 144);
  uint64_t v34 = v23 + 2 * (v21 / v15);
  uint64_t v35 = v26 * v17;
  unsigned int v36 = *(unsigned __int8 *)(v22 + 132);
  unsigned int v37 = *(unsigned __int16 *)(v22 + 146);
  unsigned int v38 = *(unsigned __int16 *)(v22 + 148);
  unsigned int v39 = *(unsigned __int16 *)(v22 + 150);
  if (v34 >= 0) {
    uint64_t v40 = v34;
  }
  else {
    uint64_t v40 = v34 + 1;
  }
  unsigned int v41 = *(unsigned __int16 *)(v22 + 152);
  _S0 = *(float *)(v22 + 36);
  _S1 = *(float *)(v22 + 40);
  uint64_t v44 = v28 * (v40 >> 1);
  uint16x8_t v45 = vmovl_u8(a5);
  _S2 = *(float *)(v22 + 44);
  v47.i32[0] = *(_DWORD *)(v22 + 48);
  v49.i32[0] = *(_DWORD *)(v22 + 52);
  v48.i32[0] = *(_DWORD *)(v22 + 56);
  __int32 v51 = *(_DWORD *)(v22 + 60);
  v50.i32[0] = *(_DWORD *)(v22 + 64);
  v9.i32[0] = *(_DWORD *)(v22 + 68);
  long long v152 = 0u;
  long long v153 = 0u;
  do
  {
    unsigned int v52 = 0;
    char v53 = *((unsigned char *)&v154 + v11);
    do
    {
      *((unsigned char *)&v152 + 8 * (((_BYTE)v11 + (v52 >> 3)) & 0x1F) + v52) = v53 + 4 * v52;
      ++v52;
    }
    while (v52 != 8);
    ++v11;
  }
  while (v11 != 4);
  if (v18 != v16)
  {
    unint64_t v54 = 0;
    unint64_t v55 = v19 - v17;
    float v56 = (float)v33;
    float v57 = (float)v38;
    float v150 = (float)v39;
    float v151 = (float)v37;
    float v58 = (float)v41;
    _S16 = (float)v32 / (float)v31;
    v47.i32[1] = v51;
    __asm { FMOV            V22.2S, #0.25 }
    v49.i32[1] = v50.i32[0];
    *(float32x2_t *)a7.f32 = vmul_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)_Q22.i8);
    *(float32x2_t *)a9.f32 = vmul_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)_Q22.i8);
    v48.i32[1] = v9.i32[0];
    *(float32x2_t *)v9.i8 = vmul_f32(v48, *(float32x2_t *)_Q22.i8);
    __asm
    {
      FCVT            H9, S0
      FCVT            H10, S1
    }
    float16x8_t v145 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a7), 0);
    __asm { FCVT            H13, S2 }
    float16x8_t v137 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a9), 0);
    *(float16x4_t *)v73.i8 = vcvt_f16_f32((float32x4_t)v9);
    float16x8_t v68 = (float16x8_t)vdupq_lane_s32(*(int32x2_t *)v73.i8, 0);
    *(short float *)v73.i16 = (short float)v33;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v73.i8, 0);
    *(short float *)v73.i16 = (short float)v37;
    int16x8_t v70 = vdupq_lane_s16(*(int16x4_t *)v73.i8, 0);
    *(short float *)v73.i16 = (short float)v38;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v73.i8, 0);
    *(short float *)v73.i16 = (short float)v39;
    float16x8_t v72 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v73.i8, 0);
    *(short float *)v73.i16 = (short float)v41;
    float16x8_t v74 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v73.i8, 0);
    uint64_t v75 = v30 + v44;
    if (v36 >= 0x11) {
      unsigned __int8 v76 = 0;
    }
    else {
      unsigned __int8 v76 = 16 - v36;
    }
    float v77 = (uint16x8_t *)(v75 + 2 * v20);
    uint64_t v78 = result + v27 * v34 + 2 * v20;
    float v79 = (uint64_t *)(v146 + v35 + 4 * v148);
    uint64_t result = v76;
    uint16x8_t v80 = (uint16x8_t)vdupq_n_s16(v76);
    uint64_t v81 = v45.u16[1];
    __asm { FCVT            H11, S16 }
    float v147 = a9.f32[0];
    float v149 = a7.f32[0];
    uint64_t v83 = v9.i64[0];
    int16x8_t v143 = v70;
    float16x8_t v144 = v68;
    short float v141 = _H9;
    float16x8_t v142 = v72;
    short float v139 = _H13;
    short float v140 = _H10;
    float16x8_t v138 = v74;
    do
    {
      float v84 = (char *)v79 + v26;
      uint64_t v85 = v78 + v27;
      if ((int)v12 < 8)
      {
        unint64_t v114 = 0;
        int16x8_t v92 = v77;
        float16x8_t v91 = (uint16x8_t *)(v78 + v27);
        int16x8_t v90 = (uint64_t *)((char *)v79 + v26);
      }
      else
      {
        int v86 = 0;
        short float v87 = _H13;
        int8x8_t v88 = *(int8x8_t *)((char *)&v152 + 8);
        int8x8_t v89 = (int8x8_t)v153;
        int16x8_t v90 = (uint64_t *)((char *)v79 + v26);
        float16x8_t v91 = (uint16x8_t *)(v78 + v27);
        int16x8_t v92 = v77;
        do
        {
          v155.val[0].i64[0] = *v79;
          uint64_t v93 = v79[1];
          v94.i64[0] = v79[2];
          uint64_t v95 = v79[3];
          v79 += 4;
          v155.val[0].i64[1] = v93;
          v94.i64[1] = v95;
          v155.val[1] = (int8x16_t)v94;
          int8x8_t v96 = vqtbl2_s8(v155, *(int8x8_t *)&v152);
          int8x8_t v97 = vqtbl2_s8(v155, v88);
          *(int8x8_t *)v155.val[0].i8 = vqtbl2_s8(v155, v89);
          *(int8x8_t *)v155.val[1].i8 = vzip1_s8(v96, 0);
          *(int8x8_t *)v98.i8 = vzip1_s8(v97, 0);
          v155.val[1].u64[1] = (unint64_t)vzip2_s8(v96, 0);
          v98.u64[1] = (unint64_t)vzip2_s8(v97, 0);
          *(int8x8_t *)v94.i8 = vzip1_s8(*(int8x8_t *)v155.val[0].i8, 0);
          v94.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v155.val[0].i8, 0);
          float16x8_t v99 = (float16x8_t)v70;
          v156.val[0].i64[0] = *v90;
          uint64_t v100 = v90[1];
          v101.i64[0] = v90[2];
          uint64_t v102 = v90[3];
          v90 += 4;
          v155.val[0] = (int8x16_t)vcvtq_f16_u16(v98);
          v156.val[0].i64[1] = v100;
          v101.i64[1] = v102;
          v156.val[1] = v101;
          int8x8_t v103 = vqtbl2_s8(v156, *(int8x8_t *)&v152);
          *(int8x8_t *)v98.i8 = vqtbl2_s8(v156, v88);
          int8x8_t v104 = vqtbl2_s8(v156, v89);
          *(int8x8_t *)v156.val[0].i8 = vzip1_s8(v103, 0);
          v155.val[1] = (int8x16_t)vmulq_n_f16(vcvtq_f16_u16((uint16x8_t)v155.val[1]), _H11);
          v156.val[0].u64[1] = (unint64_t)vzip2_s8(v103, 0);
          float16x8_t v105 = vcvtq_f16_u16((uint16x8_t)v156.val[0]);
          *(int8x8_t *)v156.val[0].i8 = vzip1_s8(*(int8x8_t *)v98.i8, 0);
          v155.val[0] = (int8x16_t)vmulq_n_f16((float16x8_t)v155.val[0], _H11);
          v156.val[0].u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v98.i8, 0);
          float16x8_t v106 = vcvtq_f16_u16((uint16x8_t)v156.val[0]);
          *(int8x8_t *)v156.val[0].i8 = vzip1_s8(v104, 0);
          float16x8_t v107 = vmulq_n_f16(vcvtq_f16_u16(v94), _H11);
          v156.val[0].u64[1] = (unint64_t)vzip2_s8(v104, 0);
          float16x8_t v108 = vmulq_n_f16(v105, _H11);
          float16x8_t v109 = vmulq_n_f16(v106, _H11);
          float16x8_t v110 = vmulq_n_f16(vcvtq_f16_u16((uint16x8_t)v156.val[0]), _H11);
          v156.val[1] = (int8x16_t)vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v69, v108, _H9), v109, _H10), v110, v87), v69), v71);
          uint16x8_t v45 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v69, (float16x8_t)v155.val[1], _H9), (float16x8_t)v155.val[0], _H10), v107, v87), v69), v71));
          float16x8_t v10 = (float16x8_t)vuzp1q_s16((int16x8_t)v155.val[1], (int16x8_t)v155.val[0]);
          v155.val[0] = (int8x16_t)vuzp2q_s16((int16x8_t)v155.val[1], (int16x8_t)v155.val[0]);
          v155.val[1] = (int8x16_t)vuzp1q_s16((int16x8_t)v108, (int16x8_t)v109);
          float16x8_t v111 = (float16x8_t)vuzp2q_s16((int16x8_t)v108, (int16x8_t)v109);
          uint16x8_t v112 = vcvtq_u16_f16((float16x8_t)v156.val[1]);
          int16x8_t v70 = (int16x8_t)v99;
          int16x8_t v113 = (int16x8_t)vaddq_f16(v111, vaddq_f16(vaddq_f16(v10, (float16x8_t)v155.val[0]), (float16x8_t)v155.val[1]));
          float16x8_t v9 = (float16x8_t)vzip1q_s16(v113, v113);
          uint16x8_t v49 = vshlq_u16(v45, v80);
          uint16x8_t v50 = vshlq_u16(v112, v80);
          float16x8_t v47 = vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v110, (int16x8_t)v110), vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v107, (int16x8_t)v107), (float16x8_t)vtrn2q_s16((int16x8_t)v107, (int16x8_t)v107)), (float16x8_t)vtrn1q_s16((int16x8_t)v110, (int16x8_t)v110)));
          v45.i32[0] = v145.i32[0];
          *(uint16x8_t *)uint64_t v78 = v49;
          v78 += 16;
          _Q22 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v99, v145, v9), v137, (float16x8_t)vzip2q_s16(v113, v113)), v68, v47);
          *v91++ = v50;
          uint16x8_t v73 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(_Q22, v72), v74)), v80);
          *v92++ = v73;
          v86 += 8;
        }
        while (v86 < (int)v12 - 7);
        unint64_t v114 = v12 & 0xFFFFFFF8;
      }
      if (v12 > v114)
      {
        uint64_t v115 = 0;
        float v116 = (char *)v79 + v81;
        float v117 = (char *)v90 + v81;
        do
        {
          uint64_t v118 = v115 + v154;
          v73.i8[0] = *((unsigned char *)v79 + v118);
          *(float *)&unsigned int v119 = (float)v73.u32[0];
          float v120 = _S16 * *(float *)&v119;
          LOBYTE(v119) = v116[v115];
          *(float *)&unsigned int v121 = (float)v119;
          float v122 = _S16 * *(float *)&v121;
          uint64_t v123 = v115 + BYTE2(v154);
          LOBYTE(v121) = *((unsigned char *)v79 + v123);
          *(float *)&unsigned int v124 = (float)v121;
          float v125 = _S16 * *(float *)&v124;
          LOBYTE(v124) = *((unsigned char *)v79 + v118 + 4);
          *(float *)v73.i32 = _S16 * (float)v124;
          v9.i8[0] = v116[v115 + 4];
          *(float *)v9.i32 = _S16 * (float)v9.u32[0];
          v49.i8[0] = *((unsigned char *)v79 + v123 + 4);
          *(float *)v49.i32 = _S16 * (float)v49.u32[0];
          int8x16_t v126 = (char *)v90 + v118;
          v47.i8[0] = *v126;
          *(float *)v47.i32 = _S16 * (float)v47.u32[0];
          v50.i8[0] = v117[v115];
          *(float *)v50.i32 = _S16 * (float)v50.u32[0];
          _Q22.i8[0] = *((unsigned char *)v90 + v123);
          *(float *)_Q22.i32 = _S16 * (float)_Q22.u32[0];
          v45.i8[0] = v126[4];
          *(float *)v45.i32 = _S16 * (float)v45.u32[0];
          v70.i8[0] = v117[v115 + 4];
          *(float *)v70.i32 = _S16 * (float)v70.u32[0];
          v10.i8[0] = *((unsigned char *)v90 + v123 + 4);
          *(float *)v10.i32 = _S16 * (float)v10.u32[0];
          float v127 = (float)((float)((float)(_S1 * v122) + (float)(_S0 * v120)) + (float)(_S2 * v125)) + v56;
          float v128 = (float)((float)((float)(_S1 * *(float *)v9.i32) + (float)(_S0 * *(float *)v73.i32))
                       + (float)(_S2 * *(float *)v49.i32))
               + v56;
          float v129 = (float)((float)((float)(_S1 * *(float *)v50.i32) + (float)(_S0 * *(float *)v47.i32))
                       + (float)(_S2 * *(float *)_Q22.i32))
               + v56;
          float v130 = (float)((float)((float)(_S1 * *(float *)v70.i32) + (float)(_S0 * *(float *)v45.i32))
                       + (float)(_S2 * *(float *)v10.i32))
               + v56;
          if (v127 < v56) {
            float v131 = v56;
          }
          else {
            float v131 = (float)((float)((float)(_S1 * v122) + (float)(_S0 * v120)) + (float)(_S2 * v125)) + v56;
          }
          if (v127 > v57) {
            float v131 = v57;
          }
          *(_WORD *)uint64_t v78 = llroundf(v131) << result;
          if (v128 < v56) {
            float v132 = v56;
          }
          else {
            float v132 = (float)((float)((float)(_S1 * *(float *)v9.i32) + (float)(_S0 * *(float *)v73.i32))
          }
                         + (float)(_S2 * *(float *)v49.i32))
                 + v56;
          if (v128 > v57) {
            float v132 = v57;
          }
          *(_WORD *)(v78 + 2) = llroundf(v132) << result;
          if (v129 < v56) {
            float v133 = v56;
          }
          else {
            float v133 = (float)((float)((float)(_S1 * *(float *)v50.i32) + (float)(_S0 * *(float *)v47.i32))
          }
                         + (float)(_S2 * *(float *)_Q22.i32))
                 + v56;
          if (v129 > v57) {
            float v133 = v57;
          }
          v91->i16[0] = llroundf(v133) << result;
          if (v130 < v56) {
            float v134 = v56;
          }
          else {
            float v134 = (float)((float)((float)(_S1 * *(float *)v70.i32) + (float)(_S0 * *(float *)v45.i32))
          }
                         + (float)(_S2 * *(float *)v10.i32))
                 + v56;
          if (v130 > v57) {
            float v134 = v57;
          }
          v91->i16[1] = llroundf(v134) << result;
          float v135 = (float)((float)(v120 + *(float *)v73.i32) + *(float *)v47.i32) + *(float *)v45.i32;
          float v136 = (float)((float)(v122 + *(float *)v9.i32) + *(float *)v50.i32) + *(float *)v70.i32;
          *(float *)v49.i32 = (float)((float)(v125 + *(float *)v49.i32) + *(float *)_Q22.i32) + *(float *)v10.i32;
          *(float *)v50.i32 = (float)((float)(v151 + (float)(v135 * v149)) + (float)(v136 * v147))
                            + (float)(*(float *)v49.i32 * *(float *)&v83);
          *(float *)v47.i32 = v58;
          if (*(float *)v50.i32 <= v58)
          {
            *(float *)v47.i32 = (float)((float)(v151 + (float)(v135 * v149)) + (float)(v136 * v147))
                              + (float)(*(float *)v49.i32 * *(float *)&v83);
            if (*(float *)v50.i32 < v150) {
              *(float *)v47.i32 = v150;
            }
          }
          *(float *)v73.i32 = (float)((float)(v151 + (float)(v135 * a7.f32[1])) + (float)(v136 * a9.f32[1]))
                            + (float)(*(float *)v49.i32 * *((float *)&v83 + 1));
          v92->i16[0] = llroundf(*(float *)v47.i32) << result;
          *(float *)v9.i32 = v58;
          if (*(float *)v73.i32 <= v58)
          {
            v9.i32[0] = v73.i32[0];
            if (*(float *)v73.i32 < v150) {
              *(float *)v9.i32 = v150;
            }
          }
          v114 += 2;
          v115 += 8;
          v92->i16[1] = llroundf(*(float *)v9.i32) << result;
          v78 += 4;
          float16x8_t v91 = (uint16x8_t *)((char *)v91 + 4);
          int16x8_t v92 = (uint16x8_t *)((char *)v92 + 4);
        }
        while (v12 > v114);
      }
      float v79 = (uint64_t *)&v84[v26];
      uint64_t v78 = v85 + v27;
      float v77 = (uint16x8_t *)((char *)v77 + v28);
      v54 += 2;
      int16x8_t v70 = v143;
      float16x8_t v68 = v144;
      _H9 = v141;
      float16x8_t v72 = v142;
      _H13 = v139;
      _H10 = v140;
      float16x8_t v74 = v138;
    }
    while (v55 > v54);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v17 = *(void *)(result + 28);
  unint64_t v18 = 2 * *result;
  unint64_t v19 = v17 * a2 / v18;
  unint64_t v20 = (v17 + v17 * a2) / v18;
  if (2 * v20 != 2 * v19)
  {
    unint64_t v21 = 0;
    unint64_t v22 = *(void *)(result + 20);
    uint64_t v23 = *(void *)(result + 44) + 2 * v19;
    unint64_t v24 = 2 * v20 - 2 * v19;
    uint64_t v25 = *((void *)result + 19);
    uint64_t v26 = (uint64_t *)*((void *)result + 17);
    uint64_t v27 = **((void **)result + 8);
    uint64_t v28 = *v26;
    uint64_t v29 = v26[1];
    *(float *)&unsigned int v30 = (float)*(unsigned int *)(v25 + 136);
    float v31 = *(float *)&v30 / (float)*(unsigned int *)(v25 + 128);
    LOWORD(v30) = *(_WORD *)(v25 + 144);
    float v32 = (float)v30;
    LOWORD(a5) = *(_WORD *)(v25 + 146);
    float v33 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v25 + 148);
    float v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v25 + 150);
    float v35 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v25 + 152);
    float v36 = (float)LODWORD(a8);
    float v37 = *(float *)(v25 + 36);
    float v38 = *(float *)(v25 + 40);
    float v39 = *(float *)(v25 + 44);
    float v40 = *(float *)(v25 + 48) * 0.25;
    float v41 = *(float *)(v25 + 52) * 0.25;
    float v42 = *(float *)(v25 + 56) * 0.25;
    float v43 = *(float *)(v25 + 60) * 0.25;
    float v44 = *(float *)(v25 + 64) * 0.25;
    float v45 = *(float *)(v25 + 68);
    float v46 = v45 * 0.25;
    uint64_t v47 = *((void *)result + 14);
    float32x2_t v48 = (uint64_t *)*((void *)result + 16);
    uint64_t v49 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v18);
    uint64_t v50 = **((void **)result + 7) + v27 * v23 + 4 * *(void *)(result + 36);
    uint64_t v51 = *v48;
    uint64_t v52 = v48[1];
    char v53 = (char *)(v51 + v49 * v28 + 2 * v47);
    unsigned int v54 = *(unsigned __int8 *)(v25 + 132);
    if (v54 >= 0x11) {
      char v55 = 0;
    }
    else {
      char v55 = 16 - v54;
    }
    uint64_t v56 = *(unsigned __int8 *)(v25 + 156);
    if (v49 >= 0) {
      uint64_t v57 = v49;
    }
    else {
      uint64_t v57 = v49 + 1;
    }
    uint64_t v58 = v52 + (v57 >> 1) * v29;
    uint64_t v59 = *(unsigned __int8 *)(v25 + 155);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v25 + 154);
    uint64_t v60 = v58 + 2 * v47;
    char v61 = v55;
    do
    {
      float v62 = &v53[v28];
      uint64_t v63 = v50 + v27;
      if (v22)
      {
        unint64_t v64 = 0;
        uint64_t v65 = v50 + v27;
        float v66 = &v53[v28];
        do
        {
          LOBYTE(v45) = result[v50];
          float v67 = v31 * (float)LODWORD(v45);
          LOBYTE(v11) = *(unsigned char *)(v50 + v59);
          float v68 = v31 * (float)LODWORD(v11);
          LOBYTE(v12) = *(unsigned char *)(v50 + v56);
          float v69 = v31 * (float)LODWORD(v12);
          LOBYTE(v13) = result[v50 + 4];
          float v70 = v31 * (float)LODWORD(v13);
          LOBYTE(v14) = *(unsigned char *)(v50 + 4 + v59);
          LOBYTE(v15) = *(unsigned char *)(v50 + 4 + v56);
          float v71 = v31 * (float)LODWORD(v14);
          float v72 = v31 * (float)LODWORD(v15);
          LOBYTE(v15) = result[v65];
          float v15 = v31 * (float)LODWORD(v15);
          LOBYTE(v16) = *(unsigned char *)(v65 + v59);
          LOBYTE(v8) = *(unsigned char *)(v65 + v56);
          float v73 = v31 * (float)LODWORD(v16);
          float v16 = v31 * (float)LODWORD(v8);
          LOBYTE(v8) = result[v65 + 4];
          float v8 = v31 * (float)LODWORD(v8);
          LOBYTE(v9) = *(unsigned char *)(v65 + 4 + v59);
          float v9 = v31 * (float)LODWORD(v9);
          LOBYTE(v10) = *(unsigned char *)(v65 + 4 + v56);
          float v10 = v31 * (float)LODWORD(v10);
          float v74 = (float)((float)((float)(v38 * v68) + (float)(v37 * v67)) + (float)(v39 * v69)) + v32;
          float v75 = (float)((float)((float)(v38 * v71) + (float)(v37 * v70)) + (float)(v39 * v72)) + v32;
          float v76 = (float)((float)((float)(v38 * v73) + (float)(v37 * v15)) + (float)(v39 * v16)) + v32;
          float v77 = (float)((float)((float)(v38 * v9) + (float)(v37 * v8)) + (float)(v39 * v10)) + v32;
          if (v74 < v32) {
            float v78 = v32;
          }
          else {
            float v78 = (float)((float)((float)(v38 * v68) + (float)(v37 * v67)) + (float)(v39 * v69)) + v32;
          }
          if (v74 <= v34) {
            float v79 = v78;
          }
          else {
            float v79 = v34;
          }
          *(_WORD *)char v53 = llroundf(v79) << v61;
          if (v75 < v32) {
            float v80 = v32;
          }
          else {
            float v80 = (float)((float)((float)(v38 * v71) + (float)(v37 * v70)) + (float)(v39 * v72)) + v32;
          }
          if (v75 > v34) {
            float v80 = v34;
          }
          *((_WORD *)v53 + 1) = llroundf(v80) << v61;
          if (v76 < v32) {
            float v81 = v32;
          }
          else {
            float v81 = (float)((float)((float)(v38 * v73) + (float)(v37 * v15)) + (float)(v39 * v16)) + v32;
          }
          if (v76 > v34) {
            float v81 = v34;
          }
          *(_WORD *)float v66 = llroundf(v81) << v61;
          if (v77 < v32) {
            float v82 = v32;
          }
          else {
            float v82 = (float)((float)((float)(v38 * v9) + (float)(v37 * v8)) + (float)(v39 * v10)) + v32;
          }
          if (v77 > v34) {
            float v82 = v34;
          }
          *((_WORD *)v66 + 1) = llroundf(v82) << v61;
          float v83 = (float)((float)(v67 + v70) + v15) + v8;
          float v84 = (float)((float)(v68 + v71) + v73) + v9;
          float v12 = (float)((float)(v69 + v72) + v16) + v10;
          float v14 = (float)((float)(v33 + (float)(v83 * v40)) + (float)(v84 * v41)) + (float)(v12 * v42);
          float v13 = v36;
          if (v14 <= v36)
          {
            float v13 = (float)((float)(v33 + (float)(v83 * v40)) + (float)(v84 * v41)) + (float)(v12 * v42);
            if (v14 < v35) {
              float v13 = v35;
            }
          }
          uint64_t v85 = (_WORD *)(v60 + 2 * v64);
          float v11 = (float)((float)(v33 + (float)(v83 * v43)) + (float)(v84 * v44)) + (float)(v12 * v46);
          *uint64_t v85 = llroundf(v13) << v61;
          float v45 = v36;
          if (v11 <= v36)
          {
            float v45 = v11;
            if (v11 < v35) {
              float v45 = v35;
            }
          }
          v50 += 8;
          v65 += 8;
          v53 += 4;
          v66 += 4;
          v85[1] = llroundf(v45) << v61;
          v64 += 2;
        }
        while (v22 > v64);
      }
      uint64_t v50 = v63 + v27;
      char v53 = &v62[v28];
      v60 += v29;
      v21 += 2;
    }
    while (v24 > v21);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, float32x4_t a4, float32x4_t a5, double a6, double a7, float32x4_t _Q5, float16x8_t _Q6)
{
  uint64_t v9 = 0;
  unint64_t v10 = *(void *)(a1 + 20);
  uint64_t v214 = *(void *)(a1 + 36);
  uint64_t v11 = *(void *)(a1 + 44);
  uint64_t v12 = *(void *)(a1 + 28);
  unint64_t v13 = *a1;
  unint64_t v14 = v12 * a2 / v13;
  uint64_t v15 = v14 + v11;
  unint64_t v16 = (v12 + v12 * a2) / v13;
  uint64_t v17 = v16 + v11;
  uint64_t v18 = *((void *)a1 + 14);
  uint64_t v19 = *((void *)a1 + 19);
  uint64_t v20 = *((void *)a1 + 15);
  uint64_t v21 = (uint64_t *)*((void *)a1 + 16);
  size_t v22 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v23 = **((void **)a1 + 8);
  uint64_t v212 = **((void **)a1 + 7);
  unint64_t v24 = *((void *)a1 + 13) * a2;
  uint64_t v25 = *v22;
  uint64_t v26 = v22[1];
  uint64_t v27 = v22[2];
  uint64_t v28 = v21[1];
  uint64_t v210 = *v21;
  uint64_t result = v21[2];
  unsigned int v30 = *(_DWORD *)(v19 + 128);
  int v227 = *(_DWORD *)(v19 + 154);
  unsigned int v31 = *(unsigned __int16 *)(v19 + 144);
  unsigned int v32 = *(unsigned __int16 *)(v19 + 146);
  unsigned int v33 = *(unsigned __int16 *)(v19 + 148);
  unsigned int v34 = *(unsigned __int16 *)(v19 + 150);
  unsigned int v35 = *(unsigned __int16 *)(v19 + 152);
  float v223 = *(float *)(v19 + 36);
  float v222 = *(float *)(v19 + 40);
  v36.i32[0] = *(_DWORD *)(v19 + 48);
  float v221 = *(float *)(v19 + 44);
  a5.i32[0] = *(_DWORD *)(v19 + 52);
  v37.i32[0] = *(_DWORD *)(v19 + 56);
  __int32 v39 = *(_DWORD *)(v19 + 60);
  unsigned __int32 v38 = *(_DWORD *)(v19 + 64);
  a4.i32[0] = *(_DWORD *)(v19 + 68);
  float v220 = *(float *)(v19 + 72);
  float v219 = *(float *)(v19 + 76);
  float v218 = *(float *)(v19 + 80);
  float v217 = *(float *)(v19 + 84);
  _S16 = *(float *)(v19 + 92);
  float v216 = *(float *)(v19 + 88);
  uint64_t v41 = v24 / v13 + v20;
  uint64_t v187 = v23 * v15;
  _S17 = *(float *)(v19 + 96);
  _S18 = *(float *)(v19 + 100);
  _S19 = *(float *)(v19 + 104);
  _S20 = *(float *)(v19 + 108);
  _S21 = *(float *)(v19 + 112);
  _S22 = *(float *)(v19 + 116);
  _S23 = *(float *)(v19 + 120);
  long long v225 = 0u;
  long long v226 = 0u;
  do
  {
    unsigned int v49 = 0;
    char v50 = *((unsigned char *)&v227 + v9);
    do
    {
      *((unsigned char *)&v225 + 8 * (((_BYTE)v9 + (v49 >> 3)) & 0x1F) + v49) = v50 + 4 * v49;
      ++v49;
    }
    while (v49 != 8);
    ++v9;
  }
  while (v9 != 4);
  if (v16 != v14)
  {
    uint64_t v51 = 0;
    uint64_t v52 = v17 - v15;
    uint64_t v53 = v19 + 16548;
    _S25 = 8191.0 / (float)v30;
    float v55 = (float)v31;
    float v56 = (float)v32;
    float v57 = (float)v33;
    float v224 = (float)v34;
    float v58 = (float)v35;
    v36.i32[1] = v39;
    *(float32x2_t *)_Q5.f32 = vmul_f32(v36, (float32x2_t)0x3F0000003F000000);
    a5.i32[1] = v38;
    *(float32x2_t *)a5.f32 = vmul_f32(*(float32x2_t *)a5.f32, (float32x2_t)0x3F0000003F000000);
    v37.i32[1] = a4.i32[0];
    *(float32x2_t *)a4.f32 = vmul_f32(v37, (float32x2_t)0x3F0000003F000000);
    uint64_t v59 = v19 + 32932;
    uint64_t v60 = v19 + 164;
    _S0 = v223;
    __asm { FCVT            H0, S0 }
    short float v208 = *(short float *)&_S0;
    float16x8_t v209 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(_Q5), 0);
    _S0 = v222;
    __asm { FCVT            H0, S0 }
    short float v206 = *(short float *)&_S0;
    float16x8_t v207 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    _D0 = (int16x4_t)vcvt_f16_f32(a4);
    int32x4_t v68 = vdupq_lane_s32((int32x2_t)_D0, 0);
    *(float *)_D0.i32 = v221;
    __asm { FCVT            H0, S0 }
    short float v204 = *(short float *)_D0.i16;
    float16x8_t v205 = (float16x8_t)v68;
    __asm { FCVT            H0, S20 }
    short float v203 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S21 }
    short float v202 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S22 }
    short float v201 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S23 }
    short float v200 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v220;
    __asm { FCVT            H0, S0 }
    short float v199 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v219;
    __asm { FCVT            H0, S0 }
    short float v198 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v218;
    __asm { FCVT            H0, S0 }
    short float v197 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v217;
    __asm { FCVT            H0, S0 }
    short float v196 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v216;
    __asm { FCVT            H0, S0 }
    short float v195 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S16 }
    short float v194 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S17 }
    short float v193 = *(short float *)_D0.i16;
    *(short float *)_D0.i16 = (short float)v31;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v32;
    int16x8_t v70 = vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v33;
    int16x8_t v71 = vdupq_lane_s16(_D0, 0);
    float16x8_t v191 = (float16x8_t)v71;
    float16x8_t v192 = (float16x8_t)v70;
    *(short float *)v71.i16 = (short float)v34;
    int16x8_t v72 = vdupq_lane_s16(*(int16x4_t *)v71.i8, 0);
    *(short float *)v71.i16 = (short float)v35;
    float16x8_t v189 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v71.i8, 0);
    float16x8_t v190 = (float16x8_t)v72;
    if (result) {
      result += v27 * v41 + v18;
    }
    else {
      uint64_t result = 0;
    }
    if (v28) {
      float v73 = (unsigned char *)(v28 + v26 * v41 + v18);
    }
    else {
      float v73 = 0;
    }
    float v74 = (int8x8_t *)(v210 + v25 * v41 + v18);
    uint64_t v75 = v212 + v187 + 4 * v214;
    __asm { FCVT            H0, S18 }
    short float v188 = _H0;
    __asm { FCVT            H0, S19 }
    short float v186 = _H0;
    __asm { FCVT            H9, S25 }
    float v213 = a5.f32[0];
    float v215 = _Q5.f32[0];
    float v184 = a5.f32[1];
    float v185 = _Q5.f32[1];
    LODWORD(v79) = a4.i32[1];
    float v183 = a4.f32[1];
    float v211 = a4.f32[0];
    v80.i64[0] = 0x9000900090009000;
    v80.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v10 < 8)
      {
        unint64_t v130 = 0;
        float v84 = v74;
        float v129 = v73;
        uint64_t v83 = result;
        float v82 = (void *)v75;
      }
      else
      {
        uint64_t v81 = 0;
        float v82 = (void *)v75;
        uint64_t v83 = result;
        float v84 = v74;
        do
        {
          int8x8_t v85 = *(int8x8_t *)((char *)&v226 + 8);
          *(void *)&long long v79 = *v82;
          uint64_t v86 = v82[1];
          a5.i64[0] = v82[2];
          unint64_t v87 = v82[3];
          v82 += 4;
          *((void *)&v79 + 1) = v86;
          a5.i64[1] = v87;
          a4 = a5;
          int8x8_t v88 = vqtbl2_s8(*(int8x16x2_t *)(&a4 - 1), *(int8x8_t *)&v225);
          int8x8_t v89 = vqtbl2_s8(*(int8x16x2_t *)(&a4 - 1), *(int8x8_t *)((char *)&v225 + 8));
          *(int8x8_t *)v90.i8 = vzip1_s8(v88, 0);
          v90.u64[1] = (unint64_t)vzip2_s8(v88, 0);
          int8x8_t v91 = vqtbl2_s8(*(int8x16x2_t *)(&a4 - 1), *(int8x8_t *)&v226);
          float16x8_t v92 = vcvtq_f16_u16(v90);
          *(int8x8_t *)v90.i8 = vzip1_s8(v89, 0);
          v90.u64[1] = (unint64_t)vzip2_s8(v89, 0);
          *(int8x8_t *)v93.i8 = vzip1_s8(v91, 0);
          v93.u64[1] = (unint64_t)vzip2_s8(v91, 0);
          uint16x8_t v94 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(v92, _H9), (float16x8_t)0), v80));
          float16x8_t v95 = (float16x8_t)vmovl_high_u16(v94);
          *(void *)&long long v96 = v95.u32[2];
          *((void *)&v96 + 1) = v95.u32[3];
          long long v97 = v96;
          *(void *)&long long v96 = v95.u32[0];
          *((void *)&v96 + 1) = v95.u32[1];
          uint32x4_t v98 = vmovl_u16(*(uint16x4_t *)v94.i8);
          v95.i16[0] = *(_WORD *)(v60 + 2 * v98.u32[0]);
          v95.i16[1] = *(_WORD *)(v60 + 2 * v98.u32[1]);
          v95.i16[2] = *(_WORD *)(v60 + 2 * v98.u32[2]);
          v95.i16[3] = *(_WORD *)(v60 + 2 * v98.u32[3]);
          v95.i16[4] = *(_WORD *)(v60 + 2 * v96);
          v95.i16[5] = *(_WORD *)(v60 + 2 * *((void *)&v96 + 1));
          v95.i16[6] = *(_WORD *)(v60 + 2 * v97);
          v95.i16[7] = *(_WORD *)(v60 + 2 * *((void *)&v97 + 1));
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v90), _H9), (float16x8_t)0), v80));
          uint32x4_t v100 = vmovl_high_u16(v99);
          uint32x4_t v101 = vmovl_u16(*(uint16x4_t *)v99.i8);
          v90.i16[0] = *(_WORD *)(v60 + 2 * v101.u32[0]);
          v90.i16[1] = *(_WORD *)(v60 + 2 * v101.u32[1]);
          v90.i16[2] = *(_WORD *)(v60 + 2 * v101.u32[2]);
          v90.i16[3] = *(_WORD *)(v60 + 2 * v101.u32[3]);
          v90.i16[4] = *(_WORD *)(v60 + 2 * v100.u32[0]);
          v90.i16[5] = *(_WORD *)(v60 + 2 * v100.u32[1]);
          v90.i16[6] = *(_WORD *)(v60 + 2 * v100.u32[2]);
          v90.i16[7] = *(_WORD *)(v60 + 2 * v100.u32[3]);
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v93), _H9), (float16x8_t)0), v80));
          uint32x4_t v103 = vmovl_high_u16(v102);
          uint32x4_t v104 = vmovl_u16(*(uint16x4_t *)v102.i8);
          v93.i16[0] = *(_WORD *)(v60 + 2 * v104.u32[0]);
          v93.i16[1] = *(_WORD *)(v60 + 2 * v104.u32[1]);
          v93.i16[2] = *(_WORD *)(v60 + 2 * v104.u32[2]);
          v93.i16[3] = *(_WORD *)(v60 + 2 * v104.u32[3]);
          v93.i16[4] = *(_WORD *)(v60 + 2 * v103.u32[0]);
          v93.i16[5] = *(_WORD *)(v60 + 2 * v103.u32[1]);
          v93.i16[6] = *(_WORD *)(v60 + 2 * v103.u32[2]);
          v93.i16[7] = *(_WORD *)(v60 + 2 * v103.u32[3]);
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v95, v203), (float16x8_t)v90, v202), (float16x8_t)v93, v201), vmaxq_f16(vmaxq_f16(v95, (float16x8_t)v90), (float16x8_t)v93), v200), (float16x8_t)0), v80));
          uint32x4_t v106 = vmovl_high_u16(v105);
          float16x8_t v107 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v105.i8);
          v107.i16[0] = *(_WORD *)(v53 + 2 * v107.u32[0]);
          v107.i16[1] = *(_WORD *)(v53 + 2 * v107.u32[1]);
          v107.i16[2] = *(_WORD *)(v53 + 2 * v107.u32[2]);
          v107.i16[3] = *(_WORD *)(v53 + 2 * v107.u32[3]);
          v107.i16[4] = *(_WORD *)(v53 + 2 * v106.u32[0]);
          v107.i16[5] = *(_WORD *)(v53 + 2 * v106.u32[1]);
          v107.i16[6] = *(_WORD *)(v53 + 2 * v106.u32[2]);
          v107.i16[7] = *(_WORD *)(v53 + 2 * v106.u32[3]);
          float16x8_t v108 = vmulq_f16(v95, v107);
          float16x8_t v109 = vmulq_f16((float16x8_t)v90, v107);
          float16x8_t v110 = vmulq_f16((float16x8_t)v93, v107);
          float16x8_t v111 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v108, v196), v109, v195), v110, v194);
          float16x8_t v112 = vmulq_n_f16(v110, v186);
          uint16x8_t v113 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v108, v199), v109, v198), v110, v197), (float16x8_t)0), v80));
          uint32x4_t v114 = vmovl_high_u16(v113);
          uint32x4_t v115 = vmovl_u16(*(uint16x4_t *)v113.i8);
          v95.i16[7] = (unint64_t)v115.u32[1] >> 48;
          v95.i16[0] = *(_WORD *)(v59 + 2 * v115.u32[0]);
          v95.i16[1] = *(_WORD *)(v59 + 2 * v115.u32[1]);
          v95.i16[2] = *(_WORD *)(v59 + 2 * v115.u32[2]);
          v95.i16[3] = *(_WORD *)(v59 + 2 * v115.u32[3]);
          v95.i16[4] = *(_WORD *)(v59 + 2 * v114.u32[0]);
          v95.i16[5] = *(_WORD *)(v59 + 2 * v114.u32[1]);
          v95.i16[6] = *(_WORD *)(v59 + 2 * v114.u32[2]);
          float16x8_t v116 = v95;
          v116.i16[7] = *(_WORD *)(v59 + 2 * v114.u32[3]);
          float16x8_t v117 = vmlaq_n_f16(v112, v109, v188);
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v111, (float16x8_t)0), v80));
          uint32x4_t v119 = vmovl_high_u16(v118);
          int16x8_t v120 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v118.i8);
          *(void *)&long long v96 = v119.u32[2];
          *((void *)&v96 + 1) = v119.u32[3];
          long long v121 = v96;
          *(void *)&long long v96 = v119.u32[0];
          *((void *)&v96 + 1) = v119.u32[1];
          long long v122 = v96;
          *((void *)&v96 + 1) = v120.u32[3];
          v120.i16[7] = (unint64_t)v120.u32[3] >> 48;
          v120.i16[0] = *(_WORD *)(v59 + 2 * v120.u32[0]);
          v120.i16[1] = *(_WORD *)(v59 + 2 * v120.u32[1]);
          v120.i16[2] = *(_WORD *)(v59 + 2 * v120.u32[2]);
          v120.i16[3] = *(_WORD *)(v59 + 2 * *((void *)&v96 + 1));
          v120.i16[4] = *(_WORD *)(v59 + 2 * v122);
          v120.i16[5] = *(_WORD *)(v59 + 2 * *((void *)&v122 + 1));
          v120.i16[6] = *(_WORD *)(v59 + 2 * v121);
          _Q5 = (float32x4_t)v120;
          _Q5.i16[7] = *(_WORD *)(v59 + 2 * *((void *)&v121 + 1));
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v117, v108, v193), (float16x8_t)0), v80));
          int16x8_t v124 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v123.i8);
          uint32x4_t v125 = vmovl_high_u16(v123);
          *(void *)&long long v96 = v125.u32[2];
          *((void *)&v96 + 1) = v125.u32[3];
          long long v126 = v96;
          *((void *)&v96 + 1) = v124.u32[3];
          v124.i16[7] = (unint64_t)v124.u32[3] >> 48;
          v124.i16[0] = *(_WORD *)(v59 + 2 * v124.u32[0]);
          v124.i16[1] = *(_WORD *)(v59 + 2 * v124.u32[1]);
          v124.i16[2] = *(_WORD *)(v59 + 2 * v124.u32[2]);
          v124.i16[3] = *(_WORD *)(v59 + 2 * *((void *)&v96 + 1));
          v124.i16[4] = *(_WORD *)(v59 + 2 * v125.u32[0]);
          v124.i16[5] = *(_WORD *)(v59 + 2 * v125.u32[1]);
          v124.i16[6] = *(_WORD *)(v59 + 2 * v126);
          float16x8_t v127 = (float16x8_t)v124;
          v127.i16[7] = *(_WORD *)(v59 + 2 * *((void *)&v126 + 1));
          *v84++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v69, v116, v208), (float16x8_t)_Q5, v206), v127, v204), v69), v191)));
          int16x8_t v128 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v95, v120), (float16x8_t)vuzp2q_s16((int16x8_t)v116, (int16x8_t)_Q5));
          _Q6 = vaddq_f16((float16x8_t)vtrn1q_s16(v124, v124), (float16x8_t)vtrn2q_s16((int16x8_t)v127, (int16x8_t)v127));
          _Q5.i32[0] = v189.i32[0];
          *(int8x8_t *)&v73[v81] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v192, v209, (float16x8_t)vzip1q_s16(v128, v128)), v207, (float16x8_t)vzip2q_s16(v128, v128)), v205, _Q6), v190), v189)));
          if (v83)
          {
            *(int8x8_t *)&long long v79 = vqtbl2_s8(*(int8x16x2_t *)(&a4 - 1), v85);
            *(void *)uint64_t v83 = v79;
            v83 += 8;
          }
          v81 += 8;
        }
        while ((int)v81 < (int)v10 - 7);
        float v129 = &v73[v81];
        unint64_t v130 = v10 & 0xFFFFFFF8;
      }
      if (v10 > v130)
      {
        float v131 = (char *)v82 + 4;
        do
        {
          float v132 = &v131[v227];
          LOBYTE(v79) = *(v132 - 4);
          float v133 = (unsigned __int8 *)&v131[BYTE1(v227)];
          a4.i8[0] = *(v133 - 4);
          float v134 = (unsigned __int8 *)&v131[BYTE2(v227)];
          a5.i8[0] = *(v134 - 4);
          _H0 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S25 * (float)v79, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S25 * (float)a4.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S25 * (float)a5.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          float v141 = (float)((float)((float)(_S21 * _S1) + (float)(_S20 * _S0)) + (float)(_S22 * _S2))
               + (float)(_S23 * fmaxf(_S0, fmaxf(_S1, _S2)));
          float v142 = 8191.0;
          if (v141 <= 8191.0)
          {
            float v142 = v141;
            if (v141 < 0.0) {
              float v142 = 0.0;
            }
          }
          LOBYTE(v141) = *v132;
          _Q5.i8[0] = *v133;
          _Q6.i8[0] = *v134;
          _H4 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S25 * (float)LODWORD(v141), 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S25 * (float)_Q5.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S29, H5 }
          _H5 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S25 * (float)_Q6.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S8, H5 }
          float v149 = fmaxf(_S4, fmaxf(_S29, _S8));
          float v150 = (float)((float)((float)(_S21 * _S29) + (float)(_S20 * _S4)) + (float)(_S22 * _S8))
               + (float)(_S23 * v149);
          float v151 = 8191.0;
          if (v150 <= 8191.0)
          {
            float v151 = (float)((float)((float)(_S21 * _S29) + (float)(_S20 * _S4)) + (float)(_S22 * _S8))
                 + (float)(_S23 * v149);
            if (v150 < 0.0) {
              float v151 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v53 + 2 * llroundf(v142));
          __asm { FCVT            S3, H3 }
          float v154 = _S0 * _S3;
          float v155 = _S1 * _S3;
          float v156 = _S2 * _S3;
          uint32x4_t v157 = &v131[HIBYTE(v227)];
          char v158 = *(v157 - 4);
          char v159 = *v157;
          LOWORD(_S3) = *(_WORD *)(v53 + 2 * llroundf(v151));
          __asm { FCVT            S3, H3 }
          _S4 = _S4 * _S3;
          _S5 = _S29 * _S3;
          float v163 = _S8 * _S3;
          float v164 = (float)((float)(v219 * v155) + (float)(v154 * v220)) + (float)(v156 * v218);
          float v165 = (float)((float)(v216 * v155) + (float)(v154 * v217)) + (float)(v156 * _S16);
          _S0 = (float)((float)(_S18 * v155) + (float)(v154 * _S17)) + (float)(v156 * _S19);
          _S1 = (float)((float)(v219 * _S5) + (float)(_S4 * v220)) + (float)(v163 * v218);
          _S2 = (float)((float)(v216 * _S5) + (float)(_S4 * v217)) + (float)(v163 * _S16);
          float v169 = (float)((float)(_S18 * _S5) + (float)(_S4 * _S17)) + (float)(v163 * _S19);
          LOWORD(_S4) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          __asm
          {
            FCVT            S4, H4
            FCVT            S5, H5
          }
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S6, H0 }
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          float v174 = (float)((float)((float)(v222 * _Q5.f32[0]) + (float)(v223 * _S4)) + (float)(v221 * *(float *)_Q6.i32))
               + v55;
          float v175 = (float)((float)((float)(v222 * _S1) + (float)(v223 * _S0)) + (float)(v221 * _S2)) + v55;
          if (v174 < v55) {
            float v176 = v55;
          }
          else {
            float v176 = (float)((float)((float)(v222 * _Q5.f32[0]) + (float)(v223 * _S4)) + (float)(v221 * *(float *)_Q6.i32))
          }
                 + v55;
          if (v174 <= v57) {
            float v177 = v176;
          }
          else {
            float v177 = v57;
          }
          v84->i8[0] = llroundf(v177);
          if (v175 < v55) {
            float v178 = v55;
          }
          else {
            float v178 = (float)((float)((float)(v222 * _S1) + (float)(v223 * _S0)) + (float)(v221 * _S2)) + v55;
          }
          if (v175 > v57) {
            float v178 = v57;
          }
          v84->i8[1] = llroundf(v178);
          float v179 = _S4 + _S0;
          float v180 = _Q5.f32[0] + _S1;
          a5.f32[0] = *(float *)_Q6.i32 + _S2;
          float v181 = (float)((float)(v56 + (float)(v179 * v215)) + (float)(v180 * v213)) + (float)(a5.f32[0] * v211);
          float v182 = v58;
          if (v181 <= v58)
          {
            float v182 = (float)((float)(v56 + (float)(v179 * v215)) + (float)(v180 * v213)) + (float)(a5.f32[0] * v211);
            if (v181 < v224) {
              float v182 = v224;
            }
          }
          *(float *)&long long v79 = (float)((float)(v56 + (float)(v179 * v185)) + (float)(v180 * v184))
                         + (float)(a5.f32[0] * v183);
          *float v129 = llroundf(v182);
          a4.f32[0] = v58;
          if (*(float *)&v79 <= v58)
          {
            a4.i32[0] = v79;
            if (*(float *)&v79 < v224) {
              a4.f32[0] = v224;
            }
          }
          v129[1] = llroundf(a4.f32[0]);
          if (v83)
          {
            *(unsigned char *)uint64_t v83 = v158;
            *(unsigned char *)(v83 + 1) = v159;
            v83 += 2;
          }
          v131 += 8;
          v130 += 2;
          float v84 = (int8x8_t *)((char *)v84 + 2);
          v129 += 2;
        }
        while (v10 > v130);
      }
      v75 += v23;
      float v74 = (int8x8_t *)((char *)v74 + v25);
      v73 += v26;
      result += v27;
      ++v51;
    }
    while (v51 != v52);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_422vf_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    unint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *((void *)result + 19);
    uint64_t v12 = (uint64_t *)*((void *)result + 17);
    uint64_t v13 = (void *)*((void *)result + 7);
    uint64_t v14 = **((void **)result + 8);
    uint64_t v15 = *v12;
    uint64_t v16 = v12[1];
    uint64_t v17 = v12[2];
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v11 + 128);
    float v19 = 8191.0 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 144);
    float v20 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 146);
    float v21 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 148);
    float v22 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 150);
    *(float *)&unsigned int v23 = (float)v18;
    float v130 = *(float *)&v23;
    LOWORD(v23) = *(_WORD *)(v11 + 152);
    float v24 = (float)v23;
    float v25 = *(float *)(v11 + 36);
    float v26 = *(float *)(v11 + 40);
    float v27 = *(float *)(v11 + 44);
    float v28 = 0.5;
    float v129 = *(float *)(v11 + 48) * 0.5;
    float v128 = *(float *)(v11 + 52) * 0.5;
    float v127 = *(float *)(v11 + 56) * 0.5;
    float v29 = *(float *)(v11 + 64);
    float v126 = *(float *)(v11 + 60) * 0.5;
    float v125 = v29 * 0.5;
    float v30 = *(float *)(v11 + 72);
    float v31 = *(float *)(v11 + 68) * 0.5;
    float v124 = v31;
    float v32 = *(float *)(v11 + 76);
    float v33 = *(float *)(v11 + 80);
    float v34 = *(float *)(v11 + 84);
    float v35 = *(float *)(v11 + 88);
    float v36 = *(float *)(v11 + 92);
    float v37 = *(float *)(v11 + 96);
    float v39 = *(float *)(v11 + 100);
    float v38 = *(float *)(v11 + 104);
    uint64_t v40 = v11 + 164;
    uint64_t v41 = v11 + 16548;
    uint64_t v42 = v11 + 32932;
    float v43 = *(float *)(v11 + 108);
    float v44 = *(float *)(v11 + 112);
    float v45 = *(float *)(v11 + 116);
    float v46 = *(float *)(v11 + 120);
    uint64_t v47 = (uint64_t *)*((void *)result + 16);
    uint64_t v48 = *((void *)result + 14);
    unint64_t v49 = *((void *)result + 13) * a2 / v4 + *((void *)result + 15);
    uint64_t v50 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 157);
    uint64_t v51 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v52 = *(unsigned __int8 *)(v11 + 155);
    uint64_t v53 = *(unsigned __int8 *)(v11 + 154);
    uint64_t v54 = v47[2];
    if (v54) {
      float v55 = (unsigned __int8 *)(v54 + v49 * v17 + v48);
    }
    else {
      float v55 = 0;
    }
    uint64_t v57 = *v47;
    uint64_t v56 = v47[1];
    uint64_t v58 = v56 + v49 * v16 + v48;
    if (!v56) {
      uint64_t v58 = 0;
    }
    uint64_t v59 = (unsigned char *)(v57 + v49 * v15 + v48);
    uint64_t v60 = *v13 + v14 * v9 + 4 * v50;
    do
    {
      if (v8)
      {
        unint64_t v61 = 0;
        float v62 = v55;
        uint64_t v63 = v59;
        uint64_t v64 = v60;
        do
        {
          LOBYTE(v31) = *(unsigned char *)(v64 + v53);
          LOBYTE(v28) = *(unsigned char *)(v64 + v52);
          LOBYTE(v29) = *(unsigned char *)(v64 + v51);
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v31), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v28), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v29), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          float v75 = (float)((float)((float)(v44 * _S15) + (float)(v43 * _S14)) + (float)(v45 * _S18))
              + (float)(v46 * fmaxf(_S14, fmaxf(_S15, _S18)));
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          LOBYTE(v75) = *(unsigned char *)(v64 + 4 + v53);
          LOBYTE(v2) = *(unsigned char *)(v64 + 4 + v52);
          *(float *)&unsigned int v77 = (float)LODWORD(v2);
          float v78 = v19 * *(float *)&v77;
          LOBYTE(v77) = *(unsigned char *)(v64 + 4 + v51);
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v75), 0.0), 8191.0)));
          float v80 = v19 * (float)v77;
          __asm { FCVT            S20, H0 }
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S21, H0 }
          _H0 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S22, H0 }
          float v86 = (float)((float)((float)(v44 * _S21) + (float)(v43 * _S20)) + (float)(v45 * _S22))
              + (float)(v46 * fmaxf(_S20, fmaxf(_S21, _S22)));
          float v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v41 + 2 * llroundf(v76));
          __asm { FCVT            S0, H0 }
          float v90 = _S14 * _S0;
          float v91 = _S15 * _S0;
          float v92 = _S18 * _S0;
          unsigned __int8 v93 = result[v64];
          unsigned __int8 v94 = result[v64 + 4];
          _H18 = *(_WORD *)(v41 + 2 * llroundf(v87));
          __asm { FCVT            S18, H18 }
          _S20 = _S20 * _S18;
          _S21 = _S21 * _S18;
          float v99 = _S22 * _S18;
          _S22 = (float)((float)(v32 * v91) + (float)(v90 * v30)) + (float)(v92 * v33);
          float v101 = (float)((float)(v35 * v91) + (float)(v90 * v34)) + (float)(v92 * v36);
          _S0 = (float)((float)(v39 * v91) + (float)(v90 * v37)) + (float)(v92 * v38);
          _S19 = (float)((float)(v32 * _S21) + (float)(_S20 * v30)) + (float)(v99 * v33);
          float v104 = (float)((float)(v35 * _S21) + (float)(_S20 * v34)) + (float)(v99 * v36);
          _S18 = (float)((float)(v39 * _S21) + (float)(_S20 * v37)) + (float)(v99 * v38);
          LOWORD(_S20) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H20
            FCVT            S21, H21
          }
          LOWORD(_S0) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S19) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S22) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S18) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S24, H18 }
          float v112 = (float)((float)((float)(v26 * _S21) + (float)(v25 * _S20)) + (float)(v27 * _S0)) + v20;
          float v113 = (float)((float)((float)(v26 * _S22) + (float)(v25 * _S19)) + (float)(v27 * _S24)) + v20;
          if (v112 < v20) {
            float v114 = v20;
          }
          else {
            float v114 = (float)((float)((float)(v26 * _S21) + (float)(v25 * _S20)) + (float)(v27 * _S0)) + v20;
          }
          if (v112 <= v22) {
            float v115 = v114;
          }
          else {
            float v115 = v22;
          }
          *uint64_t v63 = llroundf(v115);
          if (v113 < v20) {
            float v116 = v20;
          }
          else {
            float v116 = (float)((float)((float)(v26 * _S22) + (float)(v25 * _S19)) + (float)(v27 * _S24)) + v20;
          }
          if (v113 > v22) {
            float v116 = v22;
          }
          v63[1] = llroundf(v116);
          float v117 = _S20 + _S19;
          float v118 = v21 + (float)((float)(_S20 + _S19) * v129);
          float v119 = _S21 + _S22;
          float v120 = v118 + (float)((float)(_S21 + _S22) * v128);
          float v2 = _S0 + _S24;
          float v121 = v120 + (float)((float)(_S0 + _S24) * v127);
          float v122 = v24;
          if (v121 <= v24)
          {
            float v122 = v121;
            if (v121 < v130) {
              float v122 = v130;
            }
          }
          float v123 = (float)(v21 + (float)(v117 * v126)) + (float)(v119 * v125);
          float v29 = v124;
          float v28 = v123 + (float)(v2 * v124);
          *(unsigned char *)(v58 + v61) = llroundf(v122);
          float v31 = v24;
          if (v28 <= v24)
          {
            float v31 = v28;
            if (v28 < v130) {
              float v31 = v130;
            }
          }
          *(unsigned char *)(v58 + v61 + 1) = llroundf(v31);
          if (v62)
          {
            *float v62 = v93;
            v62[1] = v94;
            v62 += 2;
          }
          v64 += 8;
          v61 += 2;
          v63 += 2;
        }
        while (v8 > v61);
      }
      v60 += v14;
      v59 += v15;
      v58 += v16;
      v55 += v17;
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

unsigned char *vt_Copy_BGRA_TRC_Mat_TRC_422vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, float32x4_t a4, float32x4_t a5, float16x8_t _Q3)
{
  uint64_t v6 = 0;
  unint64_t v7 = *(void *)(a1 + 20);
  uint64_t v191 = *(void *)(a1 + 36);
  uint64_t v8 = *(void *)(a1 + 44);
  uint64_t v9 = *(void *)(a1 + 28);
  unint64_t v10 = *a1;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = v11 + v8;
  unint64_t v13 = (v9 + v9 * a2) / v10;
  uint64_t v14 = v13 + v8;
  uint64_t v15 = *((void *)a1 + 14);
  uint64_t v16 = *((void *)a1 + 19);
  unint64_t v17 = *((void *)a1 + 13) * a2;
  uint64_t v18 = *((void *)a1 + 15);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v20 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v21 = **((void **)a1 + 8);
  uint64_t v189 = **((void **)a1 + 7);
  uint64_t v22 = *v20;
  uint64_t v23 = v20[1];
  uint64_t v24 = v20[2];
  uint64_t v187 = *v19;
  uint64_t result = (unsigned char *)v19[1];
  uint64_t v26 = v19[2];
  unsigned int v27 = *(_DWORD *)(v16 + 128);
  int v199 = *(_DWORD *)(v16 + 154);
  unsigned int v28 = *(unsigned __int16 *)(v16 + 144);
  unsigned int v29 = *(unsigned __int16 *)(v16 + 146);
  unsigned int v30 = *(unsigned __int16 *)(v16 + 148);
  unsigned int v31 = *(unsigned __int16 *)(v16 + 150);
  unsigned int v32 = *(unsigned __int16 *)(v16 + 152);
  float v195 = *(float *)(v16 + 36);
  float v194 = *(float *)(v16 + 40);
  float v193 = *(float *)(v16 + 44);
  v33.i32[0] = *(_DWORD *)(v16 + 48);
  v34.i32[0] = *(_DWORD *)(v16 + 52);
  v35.i32[0] = *(_DWORD *)(v16 + 56);
  __int32 v36 = *(_DWORD *)(v16 + 60);
  __int32 v38 = *(_DWORD *)(v16 + 64);
  __int32 v37 = *(_DWORD *)(v16 + 68);
  _S4 = *(float *)(v16 + 76);
  float v192 = *(float *)(v16 + 72);
  uint64_t v40 = v17 / v10 + v18;
  uint64_t v167 = v21 * v12;
  _S5 = *(float *)(v16 + 80);
  _S6 = *(float *)(v16 + 84);
  _S7 = *(float *)(v16 + 88);
  _S16 = *(float *)(v16 + 92);
  _S17 = *(float *)(v16 + 96);
  _S18 = *(float *)(v16 + 100);
  _S19 = *(float *)(v16 + 104);
  long long v197 = 0u;
  long long v198 = 0u;
  do
  {
    unsigned int v48 = 0;
    char v49 = *((unsigned char *)&v199 + v6);
    do
    {
      *((unsigned char *)&v197 + 8 * (((_BYTE)v6 + (v48 >> 3)) & 0x1F) + v48) = v49 + 4 * v48;
      ++v48;
    }
    while (v48 != 8);
    ++v6;
  }
  while (v6 != 4);
  if (v13 != v11)
  {
    uint64_t v50 = 0;
    uint64_t v51 = v14 - v12;
    uint64_t v52 = v16 + 16548;
    uint64_t v53 = v16 + 164;
    float v54 = (float)v28;
    float v55 = (float)v29;
    float v56 = (float)v30;
    float v196 = (float)v31;
    float v57 = (float)v32;
    _S26 = 8191.0 / (float)v27;
    v33.i32[1] = v36;
    float v59 = 0.5;
    v34.i32[1] = v38;
    *(float32x2_t *)a4.f32 = vmul_f32(v33, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)a5.f32 = vmul_f32(*(float32x2_t *)v34.i8, (float32x2_t)0x3F0000003F000000);
    v35.i32[1] = v37;
    *(float32x2_t *)_Q3.i8 = vmul_f32(v35, (float32x2_t)0x3F0000003F000000);
    _S0 = v195;
    __asm { FCVT            H0, S0 }
    short float v186 = *(short float *)&_S0;
    _S0 = v194;
    __asm { FCVT            H0, S0 }
    short float v185 = *(short float *)&_S0;
    float16x8_t v184 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a4), 0);
    _S0 = v193;
    __asm { FCVT            H0, S0 }
    short float v183 = *(short float *)&_S0;
    float16x8_t v182 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    _Q0 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)_Q3), 0);
    float16x8_t v181 = (float16x8_t)_Q0;
    *(float *)_Q0.i32 = v192;
    __asm { FCVT            H0, S0 }
    short float v180 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S4 }
    short float v179 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S5 }
    short float v178 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S6 }
    short float v177 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S7 }
    short float v176 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S16 }
    short float v175 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S17 }
    short float v174 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S18 }
    short float v173 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S19 }
    int32x4_t v172 = _Q0;
    *(short float *)_Q0.i16 = (short float)v28;
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v29;
    int16x8_t v69 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v171 = (float16x8_t)v69;
    *(short float *)v69.i16 = (short float)v30;
    int16x8_t v70 = vdupq_lane_s16(*(int16x4_t *)v69.i8, 0);
    float16x8_t v170 = (float16x8_t)v70;
    *(short float *)v70.i16 = (short float)v31;
    int16x8_t v71 = vdupq_lane_s16(*(int16x4_t *)v70.i8, 0);
    float16x8_t v169 = (float16x8_t)v71;
    *(short float *)v71.i16 = (short float)v32;
    float16x8_t v168 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v71.i8, 0);
    if (v26) {
      int16x8_t v72 = (int8x8_t *)(v26 + v24 * v40 + v15);
    }
    else {
      int16x8_t v72 = 0;
    }
    if (result) {
      result += v23 * v40 + v15;
    }
    else {
      uint64_t result = 0;
    }
    float v73 = (int8x8_t *)(v187 + v22 * v40 + v15);
    uint64_t v74 = v189 + v167 + 4 * v191;
    __asm { FCVT            H13, S26 }
    float v190 = a5.f32[0];
    unint64_t v76 = a4.i64[0];
    v77.i32[0] = a5.i32[1];
    v78.i32[0] = _Q3.i32[1];
    float v165 = *(float *)&_Q3.i32[1];
    float v188 = *(float *)_Q3.i32;
    float v166 = a5.f32[1];
    v79.i64[0] = 0x9000900090009000;
    v79.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v7 < 8)
      {
        unint64_t v125 = 0;
        float v124 = result;
        uint64_t v83 = v72;
        float v82 = v73;
        uint64_t v81 = (void *)v74;
      }
      else
      {
        uint64_t v80 = 0;
        uint64_t v81 = (void *)v74;
        float v82 = v73;
        uint64_t v83 = v72;
        do
        {
          int8x8_t v84 = *(int8x8_t *)((char *)&v198 + 8);
          *(void *)&long long v87 = *v81;
          uint64_t v85 = v81[1];
          *(void *)&long long v86 = v81[2];
          int8x8_t v78 = (int8x8_t)v81[3];
          v81 += 4;
          *((void *)&v87 + 1) = v85;
          *((int8x8_t *)&v86 + 1) = v78;
          long long v88 = v86;
          int8x8_t v89 = vqtbl2_s8(*(int8x16x2_t *)&v87, *(int8x8_t *)&v197);
          int8x8_t v90 = vqtbl2_s8(*(int8x16x2_t *)&v87, *(int8x8_t *)((char *)&v197 + 8));
          int8x8_t v91 = vqtbl2_s8(*(int8x16x2_t *)&v87, *(int8x8_t *)&v198);
          *(int8x8_t *)v92.i8 = vzip1_s8(v89, 0);
          v92.u64[1] = (unint64_t)vzip2_s8(v89, 0);
          float16x8_t v93 = vcvtq_f16_u16(v92);
          *(int8x8_t *)v92.i8 = vzip1_s8(v90, 0);
          v92.u64[1] = (unint64_t)vzip2_s8(v90, 0);
          float16x8_t v94 = vcvtq_f16_u16(v92);
          *(int8x8_t *)v92.i8 = vzip1_s8(v91, 0);
          v92.u64[1] = (unint64_t)vzip2_s8(v91, 0);
          float16x8_t v95 = vcvtq_f16_u16(v92);
          float16x8_t v96 = vmulq_n_f16(v93, _H13);
          float16x8_t v97 = vmulq_n_f16(v95, _H13);
          uint16x8_t v98 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v96, (float16x8_t)0), v79));
          float16x8_t v99 = (float16x8_t)vmovl_high_u16(v98);
          v100.i64[0] = v99.u32[2];
          v100.i64[1] = v99.u32[3];
          float16x8_t v101 = v100;
          v100.i64[0] = v99.u32[0];
          v100.i64[1] = v99.u32[1];
          int16x8_t v102 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v98.i8);
          v99.i16[0] = *(_WORD *)(v53 + 2 * v102.u32[0]);
          v99.i16[1] = *(_WORD *)(v53 + 2 * v102.u32[1]);
          v99.i16[2] = *(_WORD *)(v53 + 2 * v102.u32[2]);
          v99.i16[3] = *(_WORD *)(v53 + 2 * v102.u32[3]);
          v99.i16[4] = *(_WORD *)(v53 + 2 * v100.i64[0]);
          v99.i16[5] = *(_WORD *)(v53 + 2 * v100.i64[1]);
          v99.i16[6] = *(_WORD *)(v53 + 2 * v101.i64[0]);
          v99.i16[7] = *(_WORD *)(v53 + 2 * v101.i64[1]);
          uint16x8_t v103 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(v94, _H13), (float16x8_t)0), v79));
          uint32x4_t v104 = vmovl_high_u16(v103);
          uint32x4_t v105 = vmovl_u16(*(uint16x4_t *)v103.i8);
          v101.i16[0] = *(_WORD *)(v53 + 2 * v105.u32[0]);
          v101.i16[1] = *(_WORD *)(v53 + 2 * v105.u32[1]);
          v101.i16[2] = *(_WORD *)(v53 + 2 * v105.u32[2]);
          v101.i16[3] = *(_WORD *)(v53 + 2 * v105.u32[3]);
          v101.i16[4] = *(_WORD *)(v53 + 2 * v104.u32[0]);
          v101.i16[5] = *(_WORD *)(v53 + 2 * v104.u32[1]);
          v101.i16[6] = *(_WORD *)(v53 + 2 * v104.u32[2]);
          v101.i16[7] = *(_WORD *)(v53 + 2 * v104.u32[3]);
          uint16x8_t v106 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v97, (float16x8_t)0), v79));
          uint32x4_t v107 = vmovl_high_u16(v106);
          float16x8_t v108 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v106.i8);
          v108.i16[0] = *(_WORD *)(v53 + 2 * v108.u32[0]);
          v108.i16[1] = *(_WORD *)(v53 + 2 * v108.u32[1]);
          v108.i16[2] = *(_WORD *)(v53 + 2 * v108.u32[2]);
          v108.i16[3] = *(_WORD *)(v53 + 2 * v108.u32[3]);
          v108.i16[4] = *(_WORD *)(v53 + 2 * v107.u32[0]);
          v108.i16[5] = *(_WORD *)(v53 + 2 * v107.u32[1]);
          v108.i16[6] = *(_WORD *)(v53 + 2 * v107.u32[2]);
          v108.i16[7] = *(_WORD *)(v53 + 2 * v107.u32[3]);
          float16x8_t v109 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v99, v177), v101, v176), v108, v175);
          v102.i16[7] = v172.i16[7];
          float16x8_t v110 = vmulq_n_f16(v108, *(short float *)v172.i16);
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v99, v180), v101, v179), v108, v178), (float16x8_t)0), v79));
          uint32x4_t v112 = vmovl_high_u16(v111);
          uint32x4_t v113 = vmovl_u16(*(uint16x4_t *)v111.i8);
          v102.i16[0] = *(_WORD *)(v52 + 2 * v113.u32[0]);
          v102.i16[1] = *(_WORD *)(v52 + 2 * v113.u32[1]);
          v102.i16[2] = *(_WORD *)(v52 + 2 * v113.u32[2]);
          v102.i16[3] = *(_WORD *)(v52 + 2 * v113.u32[3]);
          v102.i16[4] = *(_WORD *)(v52 + 2 * v112.u32[0]);
          v102.i16[5] = *(_WORD *)(v52 + 2 * v112.u32[1]);
          v102.i16[6] = *(_WORD *)(v52 + 2 * v112.u32[2]);
          float16x8_t v34 = (float16x8_t)v102;
          v34.i16[7] = *(_WORD *)(v52 + 2 * v112.u32[3]);
          float16x8_t v114 = vmlaq_n_f16(v110, v101, v173);
          uint16x8_t v115 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v109, (float16x8_t)0), v79));
          uint32x4_t v116 = vmovl_high_u16(v115);
          uint32x4_t v117 = vmovl_u16(*(uint16x4_t *)v115.i8);
          v101.i16[0] = *(_WORD *)(v52 + 2 * v117.u32[0]);
          v101.i16[1] = *(_WORD *)(v52 + 2 * v117.u32[1]);
          v101.i16[2] = *(_WORD *)(v52 + 2 * v117.u32[2]);
          v101.i16[3] = *(_WORD *)(v52 + 2 * v117.u32[3]);
          v101.i16[4] = *(_WORD *)(v52 + 2 * v116.u32[0]);
          v101.i16[5] = *(_WORD *)(v52 + 2 * v116.u32[1]);
          v101.i16[6] = *(_WORD *)(v52 + 2 * v116.u32[2]);
          float16x8_t v118 = v101;
          v118.i16[7] = *(_WORD *)(v52 + 2 * v116.u32[3]);
          uint16x8_t v119 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v114, v99, v174), (float16x8_t)0), v79));
          int16x8_t v120 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v119.i8);
          uint32x4_t v121 = vmovl_high_u16(v119);
          v100.i64[0] = v121.u32[2];
          v100.i64[1] = v121.u32[3];
          float16x8_t v122 = v100;
          v100.i64[1] = v120.u32[3];
          v120.i16[7] = (unint64_t)v120.u32[3] >> 48;
          v120.i16[0] = *(_WORD *)(v52 + 2 * v120.u32[0]);
          v120.i16[1] = *(_WORD *)(v52 + 2 * v120.u32[1]);
          v120.i16[2] = *(_WORD *)(v52 + 2 * v120.u32[2]);
          v120.i16[3] = *(_WORD *)(v52 + 2 * v100.i64[1]);
          v120.i16[4] = *(_WORD *)(v52 + 2 * v121.u32[0]);
          v120.i16[5] = *(_WORD *)(v52 + 2 * v121.u32[1]);
          v120.i16[6] = *(_WORD *)(v52 + 2 * v122.i64[0]);
          a5 = (float32x4_t)v120;
          a5.i16[7] = *(_WORD *)(v52 + 2 * v122.i64[1]);
          *v82++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v68, v34, v186), v118, v185), (float16x8_t)a5, v183), v68), v170)));
          int16x8_t v123 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16(v102, (int16x8_t)v101), (float16x8_t)vuzp2q_s16((int16x8_t)v34, (int16x8_t)v118));
          float v59 = *(float *)v184.i32;
          v34.i32[0] = v182.i32[0];
          _Q3 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v171, v184, (float16x8_t)vzip1q_s16(v123, v123)), v182, (float16x8_t)vzip2q_s16(v123, v123)), v181, vaddq_f16((float16x8_t)vtrn1q_s16(v120, v120), (float16x8_t)vtrn2q_s16((int16x8_t)a5, (int16x8_t)a5)));
          a5.i32[0] = v168.i32[0];
          int8x8_t v77 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(_Q3, v169), v168)));
          *(int8x8_t *)&result[v80] = v77;
          if (v83)
          {
            int8x8_t v78 = vqtbl2_s8(*(int8x16x2_t *)&v87, v84);
            *v83++ = v78;
          }
          v80 += 8;
        }
        while ((int)v80 < (int)v7 - 7);
        float v124 = &result[v80];
        unint64_t v125 = v7 & 0xFFFFFFF8;
      }
      if (v7 > v125)
      {
        float v126 = (char *)v81 + 4;
        do
        {
          float v127 = (unsigned __int8 *)&v126[v199];
          v78.i8[0] = *(v127 - 4);
          float v128 = &v126[BYTE1(v199)];
          v77.i8[0] = *(v128 - 4);
          float v129 = &v126[BYTE2(v199)];
          a5.i8[0] = *(v129 - 4);
          float v130 = &v126[HIBYTE(v199)];
          __int8 v131 = *(v130 - 4);
          _Q3.i8[0] = *v127;
          v34.i8[0] = *v128;
          LOBYTE(v59) = *v129;
          __int8 v132 = *v130;
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(_S26 * (float)v78.u32[0], 0.0), 8191.0)));
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(_S26 * (float)v77.u32[0], 0.0), 8191.0)));
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(_S26 * (float)a5.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H3 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(_S26 * (float)_Q3.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H24 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(_S26 * (float)v34.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H27 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(_S26 * (float)LODWORD(v59), 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          float v145 = (float)((float)(_S4 * _S1) + (float)(_S0 * v192)) + (float)(_S2 * _S5);
          float v146 = (float)((float)(_S7 * _S1) + (float)(_S0 * _S6)) + (float)(_S2 * _S16);
          _S0 = (float)((float)(_S18 * _S1) + (float)(_S0 * _S17)) + (float)(_S2 * _S19);
          float v148 = (float)((float)(_S4 * _S24) + (float)(_S3 * v192)) + (float)(_S27 * _S5);
          _S2 = (float)((float)(_S7 * _S24) + (float)(_S3 * _S6)) + (float)(_S27 * _S16);
          _S3 = (float)((float)(_S18 * _S24) + (float)(_S3 * _S17)) + (float)(_S27 * _S19);
          LOWORD(_S24) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          LOWORD(_S27) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H24
            FCVT            S27, H27
          }
          LOWORD(_S0) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          LODWORD(v128) = llroundf(fminf(fmaxf(v148, 0.0), 8191.0));
          __asm { FCVT            S1, H0 }
          LOWORD(_S0) = *(_WORD *)(v52 + 2 * v128);
          __asm { FCVT            S0, H0 }
          LOWORD(_S2) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          float v156 = (float)((float)((float)(v194 * _S27) + (float)(v195 * _S24)) + (float)(v193 * _S1)) + v54;
          float v157 = (float)((float)((float)(v194 * _S2) + (float)(v195 * _S0)) + (float)(v193 * *(float *)_Q3.i32)) + v54;
          if (v156 < v54) {
            float v158 = v54;
          }
          else {
            float v158 = (float)((float)((float)(v194 * _S27) + (float)(v195 * _S24)) + (float)(v193 * _S1)) + v54;
          }
          if (v156 <= v56) {
            float v159 = v158;
          }
          else {
            float v159 = v56;
          }
          v82->i8[0] = llroundf(v159);
          if (v157 < v54) {
            float v160 = v54;
          }
          else {
            float v160 = (float)((float)((float)(v194 * _S2) + (float)(v195 * _S0)) + (float)(v193 * *(float *)_Q3.i32)) + v54;
          }
          if (v157 > v56) {
            float v160 = v56;
          }
          v82->i8[1] = llroundf(v160);
          float v161 = _S24 + _S0;
          float v162 = _S27 + _S2;
          a5.f32[0] = (float)(v55 + (float)(v161 * *(float *)&v76)) + (float)((float)(_S27 + _S2) * v190);
          float v59 = _S1 + *(float *)_Q3.i32;
          float v163 = a5.f32[0] + (float)((float)(_S1 + *(float *)_Q3.i32) * v188);
          float v164 = v57;
          if (v163 <= v57)
          {
            float v164 = a5.f32[0] + (float)(v59 * v188);
            if (v163 < v196) {
              float v164 = v196;
            }
          }
          *(float *)v77.i32 = v165;
          *(float *)v78.i32 = (float)((float)(v55 + (float)(v161 * *((float *)&v76 + 1))) + (float)(v162 * v166))
                            + (float)(v59 * v165);
          *float v124 = llroundf(v164);
          *(float *)v34.i32 = v57;
          if (*(float *)v78.i32 <= v57)
          {
            *(float *)v77.i32 = v196;
            v34.i32[0] = v78.i32[0];
            if (*(float *)v78.i32 < v196) {
              *(float *)v34.i32 = v196;
            }
          }
          v124[1] = llroundf(*(float *)v34.i32);
          if (v83)
          {
            v83->i8[0] = v131;
            v83->i8[1] = v132;
            uint64_t v83 = (int8x8_t *)((char *)v83 + 2);
          }
          v126 += 8;
          v125 += 2;
          float v82 = (int8x8_t *)((char *)v82 + 2);
          v124 += 2;
        }
        while (v7 > v125);
      }
      v74 += v21;
      float v73 = (int8x8_t *)((char *)v73 + v22);
      result += v23;
      int16x8_t v72 = (int8x8_t *)((char *)v72 + v24);
      ++v50;
    }
    while (v50 != v51);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_422vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v15 = *(void *)(result + 28);
  unint64_t v16 = *result;
  unint64_t v17 = v15 * a2 / v16;
  unint64_t v18 = (v15 + v15 * a2) / v16;
  if (v18 != v17)
  {
    uint64_t v19 = 0;
    unint64_t v20 = *(void *)(result + 20);
    unint64_t v21 = v17 + *(void *)(result + 44);
    unint64_t v22 = v18 - v17;
    uint64_t v23 = *((void *)result + 19);
    uint64_t v24 = (uint64_t *)*((void *)result + 17);
    float v25 = (void *)*((void *)result + 7);
    uint64_t v26 = **((void **)result + 8);
    uint64_t v27 = *v24;
    uint64_t v28 = v24[1];
    uint64_t v29 = v24[2];
    float v30 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    LOWORD(a5) = *(_WORD *)(v23 + 144);
    float v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 146);
    float v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 148);
    float v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 150);
    float v34 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v23 + 152);
    float v35 = (float)LODWORD(a9);
    float v36 = *(float *)(v23 + 36);
    float v37 = *(float *)(v23 + 40);
    float v38 = *(float *)(v23 + 44);
    float v107 = *(float *)(v23 + 52) * 0.5;
    float v108 = *(float *)(v23 + 48) * 0.5;
    float v106 = *(float *)(v23 + 56) * 0.5;
    float v39 = *(float *)(v23 + 60) * 0.5;
    float v40 = *(float *)(v23 + 64) * 0.5;
    float v41 = *(float *)(v23 + 72);
    float v42 = *(float *)(v23 + 68) * 0.5;
    float v43 = *(float *)(v23 + 76);
    float v44 = *(float *)(v23 + 80);
    float v45 = *(float *)(v23 + 84);
    float v46 = *(float *)(v23 + 88);
    float v47 = *(float *)(v23 + 92);
    float v48 = *(float *)(v23 + 96);
    float v50 = *(float *)(v23 + 100);
    float v49 = *(float *)(v23 + 104);
    uint64_t v51 = v23 + 164;
    uint64_t v52 = v23 + 16548;
    uint64_t v53 = (uint64_t *)*((void *)result + 16);
    uint64_t v54 = *((void *)result + 14);
    unint64_t v55 = *((void *)result + 13) * a2 / v16 + *((void *)result + 15);
    uint64_t v56 = *(void *)(result + 36);
    uint64_t v57 = *(unsigned __int8 *)(v23 + 157);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v23 + 156);
    uint64_t v58 = *(unsigned __int8 *)(v23 + 155);
    uint64_t v59 = *(unsigned __int8 *)(v23 + 154);
    uint64_t v60 = v53[2];
    if (v60) {
      unint64_t v61 = (unsigned char *)(v60 + v55 * v29 + v54);
    }
    else {
      unint64_t v61 = 0;
    }
    uint64_t v63 = *v53;
    uint64_t v62 = v53[1];
    uint64_t v64 = v62 + v55 * v28 + v54;
    if (!v62) {
      uint64_t v64 = 0;
    }
    uint64_t v65 = (unsigned char *)(v63 + v55 * v27 + v54);
    uint64_t v66 = *v25 + v26 * v21 + 4 * v56;
    do
    {
      if (v20)
      {
        unint64_t v67 = 0;
        uint64_t v68 = v66;
        int16x8_t v69 = v61;
        int16x8_t v70 = v65;
        do
        {
          LOBYTE(v9) = *(unsigned char *)(v68 + v59);
          LOBYTE(v10) = *(unsigned char *)(v68 + v58);
          LOBYTE(v11) = result[v68];
          char v71 = *(unsigned char *)(v68 + v57);
          LOBYTE(v12) = *(unsigned char *)(v68 + 4 + v59);
          LOBYTE(v13) = *(unsigned char *)(v68 + 4 + v58);
          LOBYTE(v14) = result[v68 + 4];
          char v72 = *(unsigned char *)(v68 + 4 + v57);
          _H10 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v9), 0.0), 8191.0)));
          _H11 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          _H12 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v11), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v12), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v13), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v14), 0.0), 8191.0)));
          __asm { FCVT            S15, H15 }
          _S18 = (float)((float)(v43 * _S11) + (float)(_S10 * v41)) + (float)(_S12 * v44);
          _S19 = (float)((float)(v46 * _S11) + (float)(_S10 * v45)) + (float)(_S12 * v47);
          _S10 = (float)((float)(v50 * _S11) + (float)(_S10 * v48)) + (float)(_S12 * v49);
          _S11 = (float)((float)(v43 * _S14) + (float)(_S13 * v41)) + (float)(_S15 * v44);
          _S12 = (float)((float)(v46 * _S14) + (float)(_S13 * v45)) + (float)(_S15 * v47);
          float v94 = (float)((float)(v50 * _S14) + (float)(_S13 * v48)) + (float)(_S15 * v49);
          LOWORD(_S18) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          LOWORD(_S19) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H18
            FCVT            S19, H19
          }
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S14, H10 }
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          float v101 = (float)((float)((float)(v37 * _S19) + (float)(v36 * _S18)) + (float)(v38 * _S14)) + v31;
          float v14 = (float)((float)((float)(v37 * _S11) + (float)(v36 * _S10)) + (float)(v38 * _S12)) + v31;
          if (v101 < v31) {
            float v102 = v31;
          }
          else {
            float v102 = (float)((float)((float)(v37 * _S19) + (float)(v36 * _S18)) + (float)(v38 * _S14)) + v31;
          }
          if (v101 > v33) {
            float v102 = v33;
          }
          unsigned char *v70 = llroundf(v102);
          if (v14 < v31) {
            float v103 = v31;
          }
          else {
            float v103 = (float)((float)((float)(v37 * _S11) + (float)(v36 * _S10)) + (float)(v38 * _S12)) + v31;
          }
          if (v14 > v33) {
            float v103 = v33;
          }
          v70[1] = llroundf(v103);
          float v104 = _S18 + _S10;
          float v105 = _S19 + _S11;
          float v11 = _S14 + _S12;
          float v13 = (float)((float)(v32 + (float)(v104 * v108)) + (float)(v105 * v107)) + (float)(v11 * v106);
          float v12 = v35;
          if (v13 <= v35)
          {
            float v12 = (float)((float)(v32 + (float)(v104 * v108)) + (float)(v105 * v107)) + (float)(v11 * v106);
            if (v13 < v34) {
              float v12 = v34;
            }
          }
          float v9 = (float)((float)(v32 + (float)(v104 * v39)) + (float)(v105 * v40)) + (float)(v11 * v42);
          *(unsigned char *)(v64 + v67) = llroundf(v12);
          float v10 = v35;
          if (v9 <= v35)
          {
            float v10 = v9;
            if (v9 < v34) {
              float v10 = v34;
            }
          }
          *(unsigned char *)(v64 + v67 + 1) = llroundf(v10);
          if (v69)
          {
            *int16x8_t v69 = v71;
            v69[1] = v72;
            v69 += 2;
          }
          v68 += 8;
          v67 += 2;
          v70 += 2;
        }
        while (v20 > v67);
      }
      v66 += v26;
      v65 += v27;
      v64 += v28;
      v61 += v29;
      ++v19;
    }
    while (v19 != v22);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_422vf_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_BGRA_rgb_422vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a1 + 20);
  uint64_t v106 = *(void *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 44);
  uint64_t v10 = *(void *)(a1 + 28);
  unint64_t v11 = *a1;
  unint64_t v12 = v10 * a2 / v11;
  uint64_t v13 = v12 + v9;
  unint64_t v14 = (v10 + v10 * a2) / v11;
  uint64_t v15 = v14 + v9;
  uint64_t v16 = *((void *)a1 + 14);
  unint64_t v17 = *((void *)a1 + 13) * a2;
  uint64_t v18 = *((void *)a1 + 19);
  uint64_t v19 = *((void *)a1 + 15);
  uint64_t v20 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v21 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v22 = **((void **)a1 + 8);
  uint64_t v105 = **((void **)a1 + 7);
  uint64_t v23 = *v21;
  uint64_t v24 = v21[1];
  uint64_t v25 = v21[2];
  uint64_t v104 = *v20;
  uint64_t v27 = v20[1];
  uint64_t v26 = v20[2];
  unsigned int v28 = *(_DWORD *)(v18 + 128);
  unsigned int v29 = *(_DWORD *)(v18 + 136);
  int v116 = *(_DWORD *)(v18 + 154);
  unsigned int v30 = *(unsigned __int16 *)(v18 + 144);
  unsigned int v31 = *(unsigned __int16 *)(v18 + 146);
  unsigned int v32 = *(unsigned __int16 *)(v18 + 148);
  unsigned int v33 = *(unsigned __int16 *)(v18 + 150);
  unsigned int v34 = *(unsigned __int16 *)(v18 + 152);
  uint64_t v35 = v17 / v11 + v19;
  uint64_t v103 = v22 * v13;
  _S0 = *(float *)(v18 + 36);
  _S1 = *(float *)(v18 + 40);
  _S2 = *(float *)(v18 + 44);
  v39.i32[0] = *(_DWORD *)(v18 + 48);
  v4.i32[0] = *(_DWORD *)(v18 + 52);
  v5.i32[0] = *(_DWORD *)(v18 + 56);
  __int32 v41 = *(_DWORD *)(v18 + 60);
  __int32 v40 = *(_DWORD *)(v18 + 64);
  __int32 v42 = *(_DWORD *)(v18 + 68);
  long long v114 = 0u;
  long long v115 = 0u;
  do
  {
    unsigned int v43 = 0;
    uint64_t result = *((unsigned __int8 *)&v116 + v7);
    do
    {
      *((unsigned char *)&v114 + 8 * (((_BYTE)v7 + (v43 >> 3)) & 0x1F) + v43) = result + 4 * v43;
      ++v43;
    }
    while (v43 != 8);
    ++v7;
  }
  while (v7 != 4);
  if (v14 != v12)
  {
    uint64_t v45 = 0;
    uint64_t v46 = v15 - v13;
    _S3 = (float)v29 / (float)v28;
    float v48 = (float)v30;
    float v49 = (float)v31;
    float v50 = (float)v32;
    float v51 = (float)v33;
    float v52 = (float)v34;
    v39.i32[1] = v41;
    *(float32x2_t *)v6.f32 = vmul_f32(v39, (float32x2_t)0x3F0000003F000000);
    v4.i32[1] = v40;
    *(float32x2_t *)v4.f32 = vmul_f32(*(float32x2_t *)v4.f32, (float32x2_t)0x3F0000003F000000);
    v5.i32[1] = v42;
    *(float32x2_t *)v5.f32 = vmul_f32(*(float32x2_t *)v5.f32, (float32x2_t)0x3F0000003F000000);
    __asm { FCVT            H8, S0 }
    short float v112 = _H8;
    float16x8_t v113 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v6), 0);
    int16x4_t v58 = (int16x4_t)vcvt_f16_f32(v5);
    __asm { FCVT            H8, S1 }
    short float v110 = _H8;
    float16x8_t v111 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    int32x4_t v60 = vdupq_lane_s32((int32x2_t)v58, 0);
    *(short float *)v58.i16 = (short float)v30;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(v58, 0);
    *(short float *)v58.i16 = (short float)v31;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(v58, 0);
    *(short float *)v58.i16 = (short float)v32;
    int16x8_t v64 = vdupq_lane_s16(v58, 0);
    float16x8_t v108 = (float16x8_t)v64;
    float16x8_t v109 = (float16x8_t)v60;
    *(short float *)v64.i16 = (short float)v33;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v64.i8, 0);
    *(short float *)v64.i16 = (short float)v34;
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v64.i8, 0);
    __asm { FCVT            H8, S2 }
    short float v107 = *(short float *)_D8.i16;
    if (v26) {
      uint64_t v66 = v26 + v25 * v35 + v16;
    }
    else {
      uint64_t v66 = 0;
    }
    if (v27) {
      unint64_t v67 = (unsigned char *)(v27 + v24 * v35 + v16);
    }
    else {
      unint64_t v67 = 0;
    }
    uint64_t v68 = (int8x8_t *)(v104 + v23 * v35 + v16);
    uint64_t result = v105 + v103 + 4 * v106;
    __asm { FCVT            H11, S3 }
    uint64_t v70 = v4.i64[0];
    uint64_t v71 = v5.i64[0];
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v88 = 0;
        long long v87 = v67;
        uint64_t v75 = v66;
        uint64_t v74 = v68;
        float v73 = (uint64_t *)result;
      }
      else
      {
        uint64_t v72 = 0;
        float v73 = (uint64_t *)result;
        uint64_t v74 = v68;
        uint64_t v75 = v66;
        do
        {
          int8x8_t v3 = *(int8x8_t *)((char *)&v115 + 8);
          v64.i64[0] = *v73;
          uint64_t v76 = v73[1];
          v5.i64[0] = v73[2];
          v60.i64[0] = v73[3];
          v73 += 4;
          v64.i64[1] = v76;
          v5.i64[1] = v60.i64[0];
          float32x4_t v4 = v5;
          int8x8_t v77 = vqtbl2_s8(*(int8x16x2_t *)(&v4 - 1), *(int8x8_t *)&v114);
          int8x8_t v78 = vqtbl2_s8(*(int8x16x2_t *)(&v4 - 1), *(int8x8_t *)((char *)&v114 + 8));
          int8x8_t v79 = vqtbl2_s8(*(int8x16x2_t *)(&v4 - 1), *(int8x8_t *)&v115);
          *(int8x8_t *)v80.i8 = vzip1_s8(v77, 0);
          v80.u64[1] = (unint64_t)vzip2_s8(v77, 0);
          *(int8x8_t *)v81.i8 = vzip1_s8(v78, 0);
          v81.u64[1] = (unint64_t)vzip2_s8(v78, 0);
          *(int8x8_t *)v82.i8 = vzip1_s8(v79, 0);
          v82.u64[1] = (unint64_t)vzip2_s8(v79, 0);
          float16x8_t v83 = vmulq_n_f16(vcvtq_f16_u16(v80), _H11);
          float16x8_t v84 = vmulq_n_f16(vcvtq_f16_u16(v81), _H11);
          float16x8_t v85 = vmulq_n_f16(vcvtq_f16_u16(v82), _H11);
          *v74++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v61, v83, v112), v84, v110), v85, v107), v61), v108)));
          int16x8_t v86 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v83, (int16x8_t)v84), (float16x8_t)vuzp2q_s16((int16x8_t)v83, (int16x8_t)v84));
          _D8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v62, v113, (float16x8_t)vzip1q_s16(v86, v86)), v111, (float16x8_t)vzip2q_s16(v86, v86)), v109, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v85, (int16x8_t)v85), (float16x8_t)vtrn2q_s16((int16x8_t)v85, (int16x8_t)v85))), v63), v65)));
          *(int8x8_t *)&v67[v72] = _D8;
          if (v75)
          {
            *(int8x8_t *)v64.i8 = vqtbl2_s8(*(int8x16x2_t *)(&v4 - 1), v3);
            *(void *)uint64_t v75 = v64.i64[0];
            v75 += 8;
          }
          v72 += 8;
        }
        while ((int)v72 < (int)v8 - 7);
        long long v87 = &v67[v72];
        unint64_t v88 = v8 & 0xFFFFFFF8;
      }
      if (v8 > v88)
      {
        int8x8_t v89 = (char *)v73 + 4;
        do
        {
          int8x8_t v90 = &v89[v116];
          v64.i8[0] = *(v90 - 4);
          *(float *)v64.i32 = _S3 * (float)v64.u32[0];
          int8x8_t v91 = &v89[BYTE1(v116)];
          v4.i8[0] = *(v91 - 4);
          v4.f32[0] = _S3 * (float)v4.u32[0];
          uint16x8_t v92 = &v89[BYTE2(v116)];
          v5.i8[0] = *(v92 - 4);
          v5.f32[0] = _S3 * (float)v5.u32[0];
          float16x8_t v93 = &v89[HIBYTE(v116)];
          char v94 = *(v93 - 4);
          v60.i8[0] = *v90;
          *(float *)v60.i32 = _S3 * (float)v60.u32[0];
          _D8.i8[0] = *v91;
          *(float *)_D8.i32 = _S3 * (float)_D8.u32[0];
          v3.i8[0] = *v92;
          *(float *)v3.i32 = _S3 * (float)v3.u32[0];
          char v95 = *v93;
          float v96 = (float)((float)((float)(_S1 * v4.f32[0]) + (float)(_S0 * *(float *)v64.i32)) + (float)(_S2 * v5.f32[0]))
              + v48;
          float v97 = (float)((float)((float)(_S1 * *(float *)_D8.i32) + (float)(_S0 * *(float *)v60.i32))
                      + (float)(_S2 * *(float *)v3.i32))
              + v48;
          if (v96 < v48) {
            float v98 = v48;
          }
          else {
            float v98 = (float)((float)((float)(_S1 * v4.f32[0]) + (float)(_S0 * *(float *)v64.i32)) + (float)(_S2 * v5.f32[0]))
          }
                + v48;
          if (v96 <= v50) {
            float v99 = v98;
          }
          else {
            float v99 = v50;
          }
          v74->i8[0] = llroundf(v99);
          if (v97 < v48) {
            float v100 = v48;
          }
          else {
            float v100 = (float)((float)((float)(_S1 * *(float *)_D8.i32) + (float)(_S0 * *(float *)v60.i32))
          }
                         + (float)(_S2 * *(float *)v3.i32))
                 + v48;
          if (v97 > v50) {
            float v100 = v50;
          }
          v74->i8[1] = llroundf(v100);
          float v101 = *(float *)v64.i32 + *(float *)v60.i32;
          float v102 = v4.f32[0] + *(float *)_D8.i32;
          v5.f32[0] = v5.f32[0] + *(float *)v3.i32;
          *(float *)v3.i32 = (float)((float)(v49 + (float)(v101 * v6.f32[0])) + (float)(v102 * *(float *)&v70))
                           + (float)(v5.f32[0] * *(float *)&v71);
          *(float *)v60.i32 = v52;
          if (*(float *)v3.i32 <= v52)
          {
            *(float *)v60.i32 = (float)((float)(v49 + (float)(v101 * v6.f32[0])) + (float)(v102 * *(float *)&v70))
                              + (float)(v5.f32[0] * *(float *)&v71);
            if (*(float *)v3.i32 < v51) {
              *(float *)v60.i32 = v51;
            }
          }
          *(float *)v64.i32 = (float)((float)(v49 + (float)(v101 * v6.f32[1])) + (float)(v102 * *((float *)&v70 + 1)))
                            + (float)(v5.f32[0] * *((float *)&v71 + 1));
          *long long v87 = llroundf(*(float *)v60.i32);
          v4.f32[0] = v52;
          if (*(float *)v64.i32 <= v52)
          {
            v4.i32[0] = v64.i32[0];
            if (*(float *)v64.i32 < v51) {
              v4.f32[0] = v51;
            }
          }
          v87[1] = llroundf(v4.f32[0]);
          if (v75)
          {
            *(unsigned char *)uint64_t v75 = v94;
            *(unsigned char *)(v75 + 1) = v95;
            v75 += 2;
          }
          v89 += 8;
          v88 += 2;
          uint64_t v74 = (int8x8_t *)((char *)v74 + 2);
          v87 += 2;
        }
        while (v8 > v88);
      }
      result += v22;
      uint64_t v68 = (int8x8_t *)((char *)v68 + v23);
      v67 += v24;
      v66 += v25;
      ++v45;
    }
    while (v45 != v46);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_422vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_422vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v13 = *(void *)(result + 28);
  unint64_t v14 = *result;
  unint64_t v15 = v13 * a2 / v14;
  unint64_t v16 = (v13 + v13 * a2) / v14;
  if (v16 != v15)
  {
    uint64_t v17 = 0;
    unint64_t v18 = *(void *)(result + 20);
    unint64_t v19 = v15 + *(void *)(result + 44);
    unint64_t v20 = v16 - v15;
    uint64_t v21 = *((void *)result + 19);
    size_t v22 = (uint64_t *)*((void *)result + 17);
    uint64_t v23 = (void *)*((void *)result + 7);
    uint64_t v24 = **((void **)result + 8);
    uint64_t v25 = *v22;
    uint64_t v26 = v22[1];
    uint64_t v27 = v22[2];
    *(float *)&unsigned int v28 = (float)*(unsigned int *)(v21 + 136);
    float v29 = *(float *)&v28 / (float)*(unsigned int *)(v21 + 128);
    LOWORD(v28) = *(_WORD *)(v21 + 144);
    float v30 = (float)v28;
    LOWORD(a5) = *(_WORD *)(v21 + 146);
    float v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v21 + 148);
    float v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v21 + 150);
    float v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v21 + 152);
    float v34 = (float)LODWORD(a8);
    float v35 = *(float *)(v21 + 36);
    float v36 = *(float *)(v21 + 40);
    float v37 = *(float *)(v21 + 44);
    float v38 = *(float *)(v21 + 48) * 0.5;
    float v39 = *(float *)(v21 + 52) * 0.5;
    float v40 = *(float *)(v21 + 56) * 0.5;
    float v41 = *(float *)(v21 + 60) * 0.5;
    float v42 = *(float *)(v21 + 64) * 0.5;
    float v43 = *(float *)(v21 + 68);
    float v44 = v43 * 0.5;
    uint64_t v45 = (void *)*((void *)result + 16);
    uint64_t v46 = *((void *)result + 14);
    unint64_t v47 = *((void *)result + 13) * a2 / v14 + *((void *)result + 15);
    uint64_t v48 = *(void *)(result + 36);
    uint64_t v49 = *(unsigned __int8 *)(v21 + 157);
    uint64_t v50 = *(unsigned __int8 *)(v21 + 156);
    uint64_t v51 = *(unsigned __int8 *)(v21 + 155);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v21 + 154);
    uint64_t v52 = v45[2];
    if (v52) {
      uint64_t v53 = (unsigned char *)(v52 + v47 * v27 + v46);
    }
    else {
      uint64_t v53 = 0;
    }
    uint64_t v56 = v45;
    uint64_t v55 = *v45;
    uint64_t v54 = v56[1];
    BOOL v57 = v54 == 0;
    uint64_t v58 = v54 + v47 * v26 + v46;
    if (v57) {
      uint64_t v58 = 0;
    }
    uint64_t v59 = (unsigned char *)(v55 + v47 * v25 + v46);
    uint64_t v60 = *v23 + v24 * v19 + 4 * v48;
    do
    {
      if (v18)
      {
        unint64_t v61 = 0;
        uint64_t v62 = v60;
        float16x8_t v63 = v53;
        int16x8_t v64 = v59;
        do
        {
          LOBYTE(v43) = result[v62];
          LOBYTE(v8) = *(unsigned char *)(v62 + v51);
          float v65 = v29 * (float)LODWORD(v43);
          float v66 = v29 * (float)LODWORD(v8);
          LOBYTE(v9) = *(unsigned char *)(v62 + v50);
          float v67 = v29 * (float)LODWORD(v9);
          char v68 = *(unsigned char *)(v62 + v49);
          LOBYTE(v10) = result[v62 + 4];
          float v69 = v29 * (float)LODWORD(v10);
          LOBYTE(v11) = *(unsigned char *)(v62 + 4 + v51);
          float v70 = v29 * (float)LODWORD(v11);
          LOBYTE(v12) = *(unsigned char *)(v62 + 4 + v50);
          float v12 = v29 * (float)LODWORD(v12);
          char v71 = *(unsigned char *)(v62 + 4 + v49);
          float v72 = (float)((float)((float)(v36 * v66) + (float)(v35 * v65)) + (float)(v37 * v67)) + v30;
          float v73 = (float)((float)((float)(v36 * v70) + (float)(v35 * v69)) + (float)(v37 * v12)) + v30;
          if (v72 < v30) {
            float v74 = v30;
          }
          else {
            float v74 = (float)((float)((float)(v36 * v66) + (float)(v35 * v65)) + (float)(v37 * v67)) + v30;
          }
          if (v72 <= v32) {
            float v75 = v74;
          }
          else {
            float v75 = v32;
          }
          *int16x8_t v64 = llroundf(v75);
          if (v73 < v30) {
            float v76 = v30;
          }
          else {
            float v76 = (float)((float)((float)(v36 * v70) + (float)(v35 * v69)) + (float)(v37 * v12)) + v30;
          }
          if (v73 > v32) {
            float v76 = v32;
          }
          v64[1] = llroundf(v76);
          float v77 = v65 + v69;
          float v78 = v66 + v70;
          float v9 = v67 + v12;
          float v11 = (float)((float)(v31 + (float)(v77 * v38)) + (float)(v78 * v39)) + (float)(v9 * v40);
          float v10 = v34;
          if (v11 <= v34)
          {
            float v10 = (float)((float)(v31 + (float)(v77 * v38)) + (float)(v78 * v39)) + (float)(v9 * v40);
            if (v11 < v33) {
              float v10 = v33;
            }
          }
          float v43 = (float)((float)(v31 + (float)(v77 * v41)) + (float)(v78 * v42)) + (float)(v9 * v44);
          *(unsigned char *)(v58 + v61) = llroundf(v10);
          float v8 = v34;
          if (v43 <= v34)
          {
            float v8 = v43;
            if (v43 < v33) {
              float v8 = v33;
            }
          }
          *(unsigned char *)(v58 + v61 + 1) = llroundf(v8);
          if (v63)
          {
            *float16x8_t v63 = v68;
            v63[1] = v71;
            v63 += 2;
          }
          v62 += 8;
          v61 += 2;
          v64 += 2;
        }
        while (v18 > v61);
      }
      v60 += v24;
      v59 += v25;
      v58 += v26;
      v53 += v27;
      ++v17;
    }
    while (v17 != v20);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = *result;
  unint64_t v13 = v11 * a2 / v12;
  uint64_t v14 = *((void *)result + 14);
  unint64_t v15 = (void *)*((void *)result + 16);
  unint64_t v16 = *((void *)result + 13) * a2 / v12 + *((void *)result + 15);
  uint64_t v17 = (uint64_t *)*((void *)result + 17);
  unint64_t v18 = (v11 + v11 * a2) / v12;
  uint64_t v19 = (unsigned char *)v15[1];
  if (v19) {
    v19 += v17[1] * v16 + v14;
  }
  if (v18 != v13)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *(void *)(result + 44);
    uint64_t v22 = v13 + v21;
    uint64_t v23 = **((void **)result + 8);
    uint64_t v24 = *v17;
    uint64_t v25 = *((void *)result + 19);
    uint64_t v26 = *v15 + v24 * v16;
    unint64_t v27 = *(void *)(result + 20);
    uint64_t v28 = v18 + v21;
    uint64_t v29 = **((void **)result + 7) + v23 * v22 + 4 * *(void *)(result + 36);
    float v30 = (unsigned char *)(v26 + v14);
    uint64_t v31 = v28 - v22;
    LOWORD(a5) = *(_WORD *)(v25 + 144);
    LOWORD(a6) = *(_WORD *)(v25 + 146);
    LOWORD(a7) = *(_WORD *)(v25 + 148);
    LOWORD(a8) = *(_WORD *)(v25 + 150);
    LOWORD(a9) = *(_WORD *)(v25 + 152);
    float v32 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    float v33 = (float)LODWORD(a5);
    float v34 = (float)LODWORD(a6);
    float v35 = (float)LODWORD(a7);
    float v36 = (float)LODWORD(a8);
    float v37 = (float)LODWORD(a9);
    float v38 = *(float *)(v25 + 36);
    float v39 = *(float *)(v25 + 40);
    float v40 = *(float *)(v25 + 44);
    float v41 = 0.5;
    float v131 = *(float *)(v25 + 48) * 0.5;
    float v130 = *(float *)(v25 + 52) * 0.5;
    float v129 = *(float *)(v25 + 56) * 0.5;
    float v42 = *(float *)(v25 + 64);
    float v128 = *(float *)(v25 + 60) * 0.5;
    float v127 = v42 * 0.5;
    float v43 = *(float *)(v25 + 72);
    float v44 = *(float *)(v25 + 68) * 0.5;
    float v126 = v44;
    float v45 = *(float *)(v25 + 76);
    float v46 = *(float *)(v25 + 80);
    float v47 = *(float *)(v25 + 84);
    float v48 = *(float *)(v25 + 88);
    float v49 = *(float *)(v25 + 92);
    float v50 = *(float *)(v25 + 96);
    float v52 = *(float *)(v25 + 100);
    float v51 = *(float *)(v25 + 104);
    uint64_t v53 = v25 + 164;
    uint64_t v54 = v25 + 16548;
    uint64_t result = (unsigned __int8 *)(v25 + 32932);
    float v55 = *(float *)(v25 + 108);
    float v56 = *(float *)(v25 + 112);
    float v57 = *(float *)(v25 + 116);
    float v58 = *(float *)(v25 + 120);
    uint64_t v59 = *(unsigned __int8 *)(v25 + 157);
    uint64_t v60 = *(unsigned __int8 *)(v25 + 156);
    uint64_t v61 = *(unsigned __int8 *)(v25 + 155);
    uint64_t v62 = *(unsigned __int8 *)(v25 + 154);
    do
    {
      if (v27)
      {
        unint64_t v63 = 0;
        int16x8_t v64 = v19;
        float v65 = v30;
        uint64_t v66 = v29;
        do
        {
          LOBYTE(v44) = *(unsigned char *)(v66 + v62);
          LOBYTE(v41) = *(unsigned char *)(v66 + v61);
          LOBYTE(v42) = *(unsigned char *)(v66 + v60);
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v44), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v41), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v42), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          float v77 = (float)((float)((float)(v56 * _S15) + (float)(v55 * _S14)) + (float)(v57 * _S18))
              + (float)(v58 * fmaxf(_S14, fmaxf(_S15, _S18)));
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          LOBYTE(v77) = *(unsigned char *)(v66 + 4 + v62);
          LOBYTE(v9) = *(unsigned char *)(v66 + 4 + v61);
          LOBYTE(v10) = *(unsigned char *)(v66 + 4 + v60);
          _H19 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v77), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v9), 0.0), 8191.0)));
          _H21 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H20
            FCVT            S21, H21
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(v78));
          __asm { FCVT            S0, H0 }
          float v87 = _S14 * _S0;
          float v88 = _S15 * _S0;
          float v89 = _S18 * _S0;
          float v90 = (float)((float)((float)(v56 * _S22) + (float)(v55 * _S19)) + (float)(v57 * _S21))
              + (float)(v58 * fmaxf(_S19, fmaxf(_S22, _S21)));
          float v91 = 8191.0;
          if (v90 <= 8191.0)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          _H18 = *(_WORD *)(v54 + 2 * llroundf(v91));
          __asm { FCVT            S18, H18 }
          float v94 = _S19 * _S18;
          float v95 = _S22 * _S18;
          _S18 = _S21 * _S18;
          float v97 = (float)((float)(v45 * v88) + (float)(v87 * v43)) + (float)(v89 * v46);
          float v98 = (float)((float)(v48 * v88) + (float)(v87 * v47)) + (float)(v89 * v49);
          _S0 = (float)((float)(v52 * v88) + (float)(v87 * v50)) + (float)(v89 * v51);
          float v100 = (float)(v45 * v95) + (float)(v94 * v43);
          float v101 = (float)(v48 * v95) + (float)(v94 * v47);
          float v102 = (float)(v52 * v95) + (float)(v94 * v50);
          _S20 = v100 + (float)(_S18 * v46);
          float v104 = v101 + (float)(_S18 * v49);
          float v105 = v102 + (float)(_S18 * v51);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0))];
          __asm { FCVT            S21, H18 }
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0))];
          __asm { FCVT            S22, H18 }
          LOWORD(_S0) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
          __asm { FCVT            S15, H0 }
          LOWORD(_S0) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0))];
          LOWORD(_S20) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0))];
          __asm
          {
            FCVT            S18, H0
            FCVT            S14, H20
          }
          unsigned int v111 = llroundf(fminf(fmaxf(v105, 0.0), 8191.0));
          float v112 = (float)(v39 * _S22) + (float)(v38 * _S21);
          float v113 = (float)(v34 + (float)((float)(_S21 + _S18) * v131)) + (float)((float)(_S22 + _S14) * v130);
          float v114 = (float)(v34 + (float)((float)(_S21 + _S18) * v128)) + (float)((float)(_S22 + _S14) * v127);
          LOWORD(_S0) = *(_WORD *)&result[2 * v111];
          __asm { FCVT            S0, H0 }
          float v116 = v112 + (float)(v40 * _S15);
          float v117 = v113 + (float)((float)(_S15 + _S0) * v129);
          float v118 = v114 + (float)((float)(_S15 + _S0) * v126);
          if (v117 < v36) {
            float v119 = v36;
          }
          else {
            float v119 = v117;
          }
          BOOL v120 = v117 <= v37;
          float v121 = v116 + v33;
          if (!v120) {
            float v119 = v37;
          }
          char v122 = llroundf(v119);
          if (v121 < v33) {
            float v123 = v33;
          }
          else {
            float v123 = v116 + v33;
          }
          char v124 = *(unsigned char *)(v66 + v59);
          char v125 = *(unsigned char *)(v66 + 4 + v59);
          *float v65 = v122;
          if (v121 <= v35) {
            float v9 = v123;
          }
          else {
            float v9 = v35;
          }
          v65[1] = llroundf(v9);
          float v10 = v37;
          if (v118 <= v37)
          {
            float v10 = v118;
            if (v118 < v36) {
              float v10 = v36;
            }
          }
          float v42 = v39 * _S14;
          float v44 = (float)((float)((float)(v39 * _S14) + (float)(v38 * _S18)) + (float)(v40 * _S0)) + v33;
          v65[2] = llroundf(v10);
          float v41 = v35;
          if (v44 <= v35)
          {
            float v41 = v44;
            if (v44 < v33) {
              float v41 = v33;
            }
          }
          v65[3] = llroundf(v41);
          if (v64)
          {
            *int16x8_t v64 = v124;
            v64[1] = v125;
            v64 += 2;
          }
          v66 += 8;
          v63 += 2;
          v65 += 4;
        }
        while (v27 > v63);
      }
      v29 += v23;
      v30 += v24;
      ++v20;
    }
    while (v20 != v31);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v15 = *(void *)(result + 28);
  unint64_t v16 = *result;
  unint64_t v17 = v15 * a2 / v16;
  uint64_t v18 = *((void *)result + 14);
  uint64_t v19 = (void *)*((void *)result + 16);
  unint64_t v20 = *((void *)result + 13) * a2 / v16 + *((void *)result + 15);
  long long v21 = (uint64_t *)*((void *)result + 17);
  unint64_t v22 = (v15 + v15 * a2) / v16;
  uint64_t v23 = (unsigned __int8 *)v19[1];
  if (v23) {
    v23 += v21[1] * v20 + v18;
  }
  if (v22 != v17)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(result + 44);
    uint64_t v26 = v17 + v25;
    uint64_t v27 = **((void **)result + 8);
    uint64_t v28 = *v21;
    uint64_t v29 = *((void *)result + 19);
    uint64_t v30 = *v19 + v28 * v20;
    unint64_t v31 = *(void *)(result + 20);
    uint64_t v32 = v22 + v25;
    uint64_t v33 = **((void **)result + 7) + v27 * v26 + 4 * *(void *)(result + 36);
    float v34 = (unsigned char *)(v30 + v18);
    uint64_t v35 = v32 - v26;
    LOWORD(a5) = *(_WORD *)(v29 + 144);
    LOWORD(a6) = *(_WORD *)(v29 + 146);
    LOWORD(a7) = *(_WORD *)(v29 + 148);
    LOWORD(a8) = *(_WORD *)(v29 + 150);
    LOWORD(a9) = *(_WORD *)(v29 + 152);
    float v36 = 8191.0 / (float)*(unsigned int *)(v29 + 128);
    float v37 = (float)LODWORD(a5);
    float v38 = (float)LODWORD(a6);
    float v39 = (float)LODWORD(a7);
    float v40 = (float)LODWORD(a8);
    float v41 = (float)LODWORD(a9);
    float v42 = *(float *)(v29 + 36);
    float v43 = *(float *)(v29 + 40);
    float v44 = *(float *)(v29 + 44);
    float v113 = *(float *)(v29 + 52) * 0.5;
    float v114 = *(float *)(v29 + 48) * 0.5;
    float v45 = *(float *)(v29 + 56) * 0.5;
    float v46 = *(float *)(v29 + 60) * 0.5;
    float v47 = *(float *)(v29 + 64) * 0.5;
    float v48 = *(float *)(v29 + 72);
    float v49 = *(float *)(v29 + 68) * 0.5;
    float v50 = *(float *)(v29 + 76);
    float v51 = *(float *)(v29 + 80);
    float v52 = *(float *)(v29 + 84);
    float v53 = *(float *)(v29 + 88);
    float v54 = *(float *)(v29 + 92);
    float v55 = *(float *)(v29 + 96);
    float v57 = *(float *)(v29 + 100);
    float v56 = *(float *)(v29 + 104);
    uint64_t v58 = v29 + 164;
    uint64_t v59 = v29 + 16548;
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v29 + 157);
    uint64_t v60 = *(unsigned __int8 *)(v29 + 156);
    uint64_t v61 = *(unsigned __int8 *)(v29 + 155);
    uint64_t v62 = *(unsigned __int8 *)(v29 + 154);
    do
    {
      if (v31)
      {
        unint64_t v63 = 0;
        uint64_t v64 = v33;
        float v65 = v23;
        uint64_t v66 = v34;
        do
        {
          LOBYTE(v9) = *(unsigned char *)(v64 + v62);
          LOBYTE(v10) = *(unsigned char *)(v64 + v61);
          LOBYTE(_S12) = *(unsigned char *)(v64 + v60);
          LOBYTE(v12) = *(unsigned char *)(v64 + 4 + v62);
          LOBYTE(v13) = *(unsigned char *)(v64 + 4 + v61);
          LOBYTE(v14) = *(unsigned char *)(v64 + 4 + v60);
          unsigned int v67 = llroundf(fminf(fmaxf(v36 * (float)LODWORD(v9), 0.0), 8191.0));
          float v68 = v36 * (float)LODWORD(v14);
          _H15 = *(_WORD *)(v58 + 2 * v67);
          __asm { FCVT            S15, H15 }
          _H11 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(_S12), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v12), 0.0), 8191.0)));
          _H14 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v13), 0.0), 8191.0)));
          __asm
          {
            FCVT            S13, H13
            FCVT            S14, H14
          }
          unsigned int v83 = llroundf(fminf(fmaxf(v68, 0.0), 8191.0));
          _S10 = (float)((float)(v50 * _S11) + (float)(_S15 * v48)) + (float)(_S12 * v51);
          _S18 = (float)((float)(v53 * _S11) + (float)(_S15 * v52)) + (float)(_S12 * v54);
          _S11 = (float)((float)(v57 * _S11) + (float)(_S15 * v55)) + (float)(_S12 * v56);
          float v87 = (float)(v50 * _S14) + (float)(_S13 * v48);
          float v88 = (float)(v53 * _S14) + (float)(_S13 * v52);
          float v89 = (float)(v57 * _S14) + (float)(_S13 * v55);
          LOWORD(_S14) = *(_WORD *)(v58 + 2 * v83);
          __asm { FCVT            S14, H14 }
          float v91 = v87 + (float)(_S14 * v51);
          float v92 = v88 + (float)(_S14 * v54);
          float v93 = v89 + (float)(_S14 * v56);
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S14, H10 }
          LOWORD(_S18) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S19, H10 }
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          LOWORD(_S11) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          unsigned int v99 = llroundf(fminf(fmaxf(v93, 0.0), 8191.0));
          float v100 = (float)(v43 * _S18) + (float)(v42 * _S14);
          _S12 = _S14 + _S10;
          float v102 = _S18 + _S11;
          float v103 = (float)(v38 + (float)((float)(_S14 + _S10) * v114)) + (float)(v102 * v113);
          float v104 = (float)(v38 + (float)(_S12 * v46)) + (float)(v102 * v47);
          LOWORD(_S12) = *(_WORD *)(v59 + 2 * v99);
          __asm { FCVT            S12, H12 }
          float v14 = v100 + (float)(v44 * _S19);
          float v105 = _S19 + _S12;
          float v106 = v103 + (float)(v105 * v45);
          float v12 = v104 + (float)(v105 * v49);
          if (v106 < v40) {
            float v107 = v40;
          }
          else {
            float v107 = v106;
          }
          float v108 = v14 + v37;
          if (v106 > v41) {
            float v107 = v41;
          }
          char v109 = llroundf(v107);
          if (v108 < v37) {
            float v110 = v37;
          }
          else {
            float v110 = v14 + v37;
          }
          unsigned __int8 v111 = result[v64];
          unsigned __int8 v112 = result[v64 + 4];
          *uint64_t v66 = v109;
          if (v108 > v39) {
            float v110 = v39;
          }
          v66[1] = llroundf(v110);
          float v13 = v41;
          if (v12 <= v41)
          {
            float v13 = v12;
            if (v12 < v40) {
              float v13 = v40;
            }
          }
          float v9 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S10)) + (float)(v44 * _S12)) + v37;
          v66[2] = llroundf(v13);
          float v10 = v39;
          if (v9 <= v39)
          {
            float v10 = v9;
            if (v9 < v37) {
              float v10 = v37;
            }
          }
          v66[3] = llroundf(v10);
          if (v65)
          {
            *float v65 = v111;
            v65[1] = v112;
            v65 += 2;
          }
          v64 += 8;
          v63 += 2;
          v66 += 4;
        }
        while (v31 > v63);
      }
      v33 += v27;
      v34 += v28;
      ++v24;
    }
    while (v24 != v35);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v10 = *(void *)(result + 28);
  unint64_t v11 = *result;
  unint64_t v12 = v10 * a2 / v11;
  uint64_t v13 = *((void *)result + 14);
  float v14 = (void *)*((void *)result + 16);
  unint64_t v15 = *((void *)result + 13) * a2 / v11 + *((void *)result + 15);
  unint64_t v16 = (uint64_t *)*((void *)result + 17);
  unint64_t v17 = (v10 + v10 * a2) / v11;
  uint64_t v18 = (unsigned char *)v14[1];
  if (v18) {
    v18 += v16[1] * v15 + v13;
  }
  if (v17 != v12)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *(void *)(result + 44);
    uint64_t v21 = v12 + v20;
    uint64_t v22 = **((void **)result + 8);
    uint64_t v23 = *v16;
    uint64_t v24 = *v14 + v23 * v15;
    uint64_t v25 = *((void *)result + 19);
    unint64_t v26 = *(void *)(result + 20);
    uint64_t v27 = v17 + v20;
    uint64_t v28 = **((void **)result + 7) + v22 * v21 + 4 * *(void *)(result + 36);
    uint64_t v29 = (unsigned char *)(v24 + v13);
    uint64_t v30 = v27 - v21;
    LOWORD(a5) = *(_WORD *)(v25 + 144);
    LOWORD(a6) = *(_WORD *)(v25 + 146);
    float v31 = (float)*(unsigned int *)(v25 + 136) / (float)*(unsigned int *)(v25 + 128);
    float v32 = (float)LODWORD(a5);
    float v33 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v25 + 148);
    float v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v25 + 150);
    float v35 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v25 + 152);
    float v36 = (float)LODWORD(a8);
    float v37 = *(float *)(v25 + 36);
    float v38 = *(float *)(v25 + 40);
    float v39 = *(float *)(v25 + 44);
    float v40 = *(float *)(v25 + 48) * 0.5;
    float v41 = *(float *)(v25 + 52) * 0.5;
    float v42 = *(float *)(v25 + 56) * 0.5;
    float v43 = *(float *)(v25 + 60) * 0.5;
    float v44 = *(float *)(v25 + 64) * 0.5;
    float v45 = *(float *)(v25 + 68);
    float v46 = v45 * 0.5;
    uint64_t v47 = *(unsigned __int8 *)(v25 + 157);
    uint64_t v48 = *(unsigned __int8 *)(v25 + 156);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v25 + 155);
    uint64_t v49 = *(unsigned __int8 *)(v25 + 154);
    do
    {
      if (v26)
      {
        unint64_t v50 = 0;
        uint64_t v51 = v28;
        float v52 = v18;
        float v53 = v29;
        do
        {
          LOBYTE(v45) = *(unsigned char *)(v51 + v49);
          *(float *)&unsigned int v54 = (float)LODWORD(v45);
          float v55 = v31 * *(float *)&v54;
          LOBYTE(v54) = result[v51];
          *(float *)&unsigned int v56 = (float)v54;
          float v57 = v31 * *(float *)&v56;
          LOBYTE(v56) = *(unsigned char *)(v51 + v48);
          char v58 = *(unsigned char *)(v51 + v47);
          LOBYTE(v8) = *(unsigned char *)(v51 + 4 + v49);
          float v59 = v31 * (float)v56;
          float v60 = v31 * (float)LODWORD(v8);
          LOBYTE(v8) = result[v51 + 4];
          float v61 = v31 * (float)LODWORD(v8);
          LOBYTE(v9) = *(unsigned char *)(v51 + 4 + v48);
          char v62 = *(unsigned char *)(v51 + 4 + v47);
          float v9 = v31 * (float)LODWORD(v9);
          float v63 = (float)((float)((float)(v38 * v57) + (float)(v37 * v55)) + (float)(v39 * v59)) + v32;
          float v64 = v55 + v60;
          float v65 = v57 + v61;
          float v66 = v59 + v9;
          float v67 = (float)((float)(v33 + (float)(v64 * v40)) + (float)(v65 * v41)) + (float)(v66 * v42);
          float v68 = (float)((float)(v33 + (float)(v64 * v43)) + (float)(v65 * v44)) + (float)(v66 * v46);
          if (v67 < v35) {
            float v69 = v35;
          }
          else {
            float v69 = v67;
          }
          if (v67 > v36) {
            float v69 = v36;
          }
          unsigned char *v53 = llroundf(v69);
          if (v63 < v32) {
            float v70 = v32;
          }
          else {
            float v70 = v63;
          }
          if (v63 > v34) {
            float v70 = v34;
          }
          v53[1] = llroundf(v70);
          float v71 = v36;
          if (v68 <= v36)
          {
            float v71 = v68;
            if (v68 < v35) {
              float v71 = v35;
            }
          }
          float v45 = (float)((float)((float)(v38 * v61) + (float)(v37 * v60)) + (float)(v39 * v9)) + v32;
          v53[2] = llroundf(v71);
          float v8 = v34;
          if (v45 <= v34)
          {
            float v8 = v45;
            if (v45 < v32) {
              float v8 = v32;
            }
          }
          v53[3] = llroundf(v8);
          if (v52)
          {
            *float v52 = v58;
            v52[1] = v62;
            v52 += 2;
          }
          v51 += 8;
          v50 += 2;
          v53 += 4;
        }
        while (v26 > v50);
      }
      v28 += v22;
      v29 += v23;
      ++v19;
    }
    while (v19 != v30);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = *result;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = *((void *)result + 14);
  int64x2_t v13 = (void *)*((void *)result + 16);
  unint64_t v14 = *((void *)result + 13) * a2 / v10 + *((void *)result + 15);
  unint64_t v15 = (uint64_t *)*((void *)result + 17);
  unint64_t v16 = (v9 + v9 * a2) / v10;
  uint64_t v17 = (unsigned char *)v13[1];
  if (v17) {
    v17 += v15[1] * v14 + v12;
  }
  if (v16 != v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(result + 44);
    uint64_t v20 = v11 + v19;
    uint64_t v21 = **((void **)result + 8);
    uint64_t v22 = *v15;
    uint64_t v23 = *((void *)result + 19);
    uint64_t v24 = *v13 + v22 * v14;
    unint64_t v25 = *(void *)(result + 20);
    uint64_t v26 = v16 + v19;
    uint64_t v27 = **((void **)result + 7) + v21 * v20 + 4 * *(void *)(result + 36);
    uint64_t v28 = (unsigned char *)(v24 + v12);
    uint64_t v29 = v26 - v20;
    LOWORD(a5) = *(_WORD *)(v23 + 144);
    LOWORD(a6) = *(_WORD *)(v23 + 146);
    LOWORD(a7) = *(_WORD *)(v23 + 148);
    LOWORD(a8) = *(_WORD *)(v23 + 150);
    LOWORD(a9) = *(_WORD *)(v23 + 152);
    float v30 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    float v31 = (float)LODWORD(a5);
    float v32 = (float)LODWORD(a6);
    float v33 = (float)LODWORD(a7);
    float v34 = (float)LODWORD(a8);
    float v35 = (float)LODWORD(a9);
    float v36 = *(float *)(v23 + 36);
    float v37 = *(float *)(v23 + 40);
    float v38 = *(float *)(v23 + 44);
    float v39 = 0.5;
    float v139 = *(float *)(v23 + 48) * 0.5;
    float v138 = *(float *)(v23 + 52) * 0.5;
    float v137 = *(float *)(v23 + 56) * 0.5;
    float v40 = *(float *)(v23 + 64);
    float v136 = *(float *)(v23 + 60) * 0.5;
    float v135 = v40 * 0.5;
    float v41 = *(float *)(v23 + 72);
    float v42 = *(float *)(v23 + 68) * 0.5;
    float v134 = v42;
    float v43 = *(float *)(v23 + 76);
    float v44 = *(float *)(v23 + 80);
    float v45 = *(float *)(v23 + 84);
    float v46 = *(float *)(v23 + 88);
    float v47 = *(float *)(v23 + 92);
    float v48 = *(float *)(v23 + 96);
    float v50 = *(float *)(v23 + 100);
    float v49 = *(float *)(v23 + 104);
    uint64_t v51 = v23 + 164;
    uint64_t v52 = v23 + 16548;
    uint64_t result = (unsigned __int8 *)(v23 + 32932);
    float v53 = *(float *)(v23 + 108);
    float v54 = *(float *)(v23 + 112);
    float v55 = *(float *)(v23 + 116);
    float v56 = *(float *)(v23 + 120);
    uint64_t v57 = *(unsigned __int8 *)(v23 + 157);
    uint64_t v58 = *(unsigned __int8 *)(v23 + 156);
    uint64_t v59 = *(unsigned __int8 *)(v23 + 155);
    uint64_t v60 = *(unsigned __int8 *)(v23 + 154);
    do
    {
      if (v25)
      {
        unint64_t v61 = 0;
        char v62 = v17;
        float v63 = v28;
        uint64_t v64 = v27;
        do
        {
          LOBYTE(v42) = *(unsigned char *)(v64 + v60);
          LOBYTE(v39) = *(unsigned char *)(v64 + v59);
          LOBYTE(v40) = *(unsigned char *)(v64 + v58);
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v42), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v39), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v40), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          float v75 = (float)((float)(v54 * _S15) + (float)(v53 * _S14)) + (float)(v55 * _S18);
          float v76 = v75 + (float)(v56 * fmaxf(_S14, fmaxf(_S15, _S18)));
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          LOBYTE(v75) = *(unsigned char *)(v64 + 4 + v60);
          LOBYTE(v76) = *(unsigned char *)(v64 + 4 + v59);
          *(float *)&unsigned int v78 = (float)LODWORD(v76);
          _S21 = v30 * *(float *)&v78;
          LOBYTE(v78) = *(unsigned char *)(v64 + 4 + v58);
          float v80 = v30 * (float)v78;
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v75), 0.0), 8191.0)));
          __asm { FCVT            S19, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H0
            FCVT            S21, H21
          }
          _H0 = *(_WORD *)(v52 + 2 * llroundf(v77));
          __asm { FCVT            S0, H0 }
          float v88 = _S14 * _S0;
          float v89 = _S15 * _S0;
          float v90 = _S18 * _S0;
          float v91 = (float)((float)((float)(v54 * _S22) + (float)(v53 * _S19)) + (float)(v55 * _S21))
              + (float)(v56 * fmaxf(_S19, fmaxf(_S22, _S21)));
          float v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v52 + 2 * llroundf(v92));
          __asm { FCVT            S0, H0 }
          float v95 = _S19 * _S0;
          float v96 = _S22 * _S0;
          float v97 = _S21 * _S0;
          _S21 = (float)((float)(v43 * v89) + (float)(v88 * v41)) + (float)(v90 * v44);
          float v99 = (float)((float)(v46 * v89) + (float)(v88 * v45)) + (float)(v90 * v47);
          _S18 = (float)((float)(v50 * v89) + (float)(v88 * v48)) + (float)(v90 * v49);
          float v101 = (float)(v43 * v96) + (float)(v95 * v41);
          float v102 = (float)(v46 * v96) + (float)(v95 * v45);
          _S19 = (float)(v50 * v96) + (float)(v95 * v48);
          _S20 = v101 + (float)(v97 * v44);
          float v105 = v102 + (float)(v97 * v47);
          float v106 = _S19 + (float)(v97 * v49);
          LOWORD(_S19) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0))];
          __asm { FCVT            S19, H19 }
          LOWORD(_S21) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0))];
          __asm { FCVT            S21, H21 }
          unsigned int v109 = llroundf(fminf(fmaxf(_S18, 0.0), 8191.0));
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0))];
          __asm { FCVT            S18, H18 }
          LOWORD(_S20) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0))];
          __asm { FCVT            S20, H20 }
          unsigned int v112 = llroundf(fminf(fmaxf(v106, 0.0), 8191.0));
          float v113 = (float)(v37 * _S21) + (float)(v36 * _S19);
          float v114 = (float)(v37 * _S20) + (float)(v36 * _S18);
          float v115 = _S19 + _S18;
          LOWORD(_S19) = *(_WORD *)&result[2 * v109];
          __asm { FCVT            S19, H19 }
          float v117 = _S21 + _S20;
          LOWORD(_S21) = *(_WORD *)&result[2 * v112];
          __asm { FCVT            S21, H21 }
          float v119 = v113 + (float)(v38 * _S19);
          float v120 = v114 + (float)(v38 * _S21);
          float v121 = _S19 + _S21;
          float v122 = (float)(v32 + (float)(v115 * v139)) + (float)(v117 * v138);
          float v123 = (float)(v32 + (float)(v115 * v136)) + (float)(v117 * v135);
          float v124 = v119 + v31;
          float v125 = v122 + (float)(v121 * v137);
          float v39 = v123 + (float)(v121 * v134);
          if (v124 < v31) {
            float v126 = v31;
          }
          else {
            float v126 = v124;
          }
          if (v124 <= v33) {
            float v127 = v126;
          }
          else {
            float v127 = v33;
          }
          char v128 = llroundf(v127);
          if (v125 < v34) {
            float v129 = v34;
          }
          else {
            float v129 = v125;
          }
          float v130 = v120 + v31;
          if (v125 > v35) {
            float v129 = v35;
          }
          char v131 = llroundf(v129);
          if (v130 < v31) {
            float v42 = v31;
          }
          else {
            float v42 = v120 + v31;
          }
          char v132 = *(unsigned char *)(v64 + v57);
          char v133 = *(unsigned char *)(v64 + 4 + v57);
          *float v63 = v128;
          v63[1] = v131;
          if (v130 > v33) {
            float v42 = v33;
          }
          v63[2] = llroundf(v42);
          float v40 = v35;
          if (v39 <= v35)
          {
            float v40 = v39;
            if (v39 < v34) {
              float v40 = v34;
            }
          }
          v63[3] = llroundf(v40);
          if (v62)
          {
            *char v62 = v132;
            v62[1] = v133;
            v62 += 2;
          }
          v64 += 8;
          v61 += 2;
          v63 += 4;
        }
        while (v25 > v61);
      }
      v27 += v21;
      v28 += v22;
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v15 = *(void *)(result + 28);
  unint64_t v16 = *result;
  unint64_t v17 = v15 * a2 / v16;
  uint64_t v18 = *((void *)result + 14);
  uint64_t v19 = (void *)*((void *)result + 16);
  unint64_t v20 = *((void *)result + 13) * a2 / v16 + *((void *)result + 15);
  long long v21 = (uint64_t *)*((void *)result + 17);
  unint64_t v22 = (v15 + v15 * a2) / v16;
  uint64_t v23 = (unsigned __int8 *)v19[1];
  if (v23) {
    v23 += v21[1] * v20 + v18;
  }
  if (v22 != v17)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(result + 44);
    uint64_t v26 = v17 + v25;
    uint64_t v27 = **((void **)result + 8);
    uint64_t v28 = *v21;
    uint64_t v29 = *((void *)result + 19);
    uint64_t v30 = *v19 + v28 * v20;
    unint64_t v31 = *(void *)(result + 20);
    uint64_t v32 = v22 + v25;
    uint64_t v33 = **((void **)result + 7) + v27 * v26 + 4 * *(void *)(result + 36);
    float v34 = (unsigned char *)(v30 + v18);
    uint64_t v35 = v32 - v26;
    LOWORD(a5) = *(_WORD *)(v29 + 144);
    LOWORD(a6) = *(_WORD *)(v29 + 146);
    LOWORD(a7) = *(_WORD *)(v29 + 148);
    LOWORD(a8) = *(_WORD *)(v29 + 150);
    LOWORD(a9) = *(_WORD *)(v29 + 152);
    float v36 = 8191.0 / (float)*(unsigned int *)(v29 + 128);
    float v37 = (float)LODWORD(a5);
    float v38 = (float)LODWORD(a6);
    float v39 = (float)LODWORD(a7);
    float v40 = (float)LODWORD(a8);
    float v41 = (float)LODWORD(a9);
    float v42 = *(float *)(v29 + 36);
    float v43 = *(float *)(v29 + 40);
    float v44 = *(float *)(v29 + 44);
    float v113 = *(float *)(v29 + 48) * 0.5;
    float v45 = *(float *)(v29 + 52) * 0.5;
    float v46 = *(float *)(v29 + 56) * 0.5;
    float v47 = *(float *)(v29 + 60) * 0.5;
    float v48 = *(float *)(v29 + 64) * 0.5;
    float v49 = *(float *)(v29 + 72);
    float v50 = *(float *)(v29 + 68) * 0.5;
    float v51 = *(float *)(v29 + 76);
    float v52 = *(float *)(v29 + 80);
    float v53 = *(float *)(v29 + 84);
    float v54 = *(float *)(v29 + 88);
    float v55 = *(float *)(v29 + 92);
    float v56 = *(float *)(v29 + 96);
    float v58 = *(float *)(v29 + 100);
    float v57 = *(float *)(v29 + 104);
    uint64_t v59 = v29 + 164;
    uint64_t v60 = v29 + 16548;
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v29 + 157);
    uint64_t v61 = *(unsigned __int8 *)(v29 + 156);
    uint64_t v62 = *(unsigned __int8 *)(v29 + 155);
    uint64_t v63 = *(unsigned __int8 *)(v29 + 154);
    do
    {
      if (v31)
      {
        unint64_t v64 = 0;
        uint64_t v65 = v33;
        float v66 = v23;
        float v67 = v34;
        do
        {
          LOBYTE(v9) = *(unsigned char *)(v65 + v63);
          LOBYTE(v10) = *(unsigned char *)(v65 + v62);
          LOBYTE(v11) = *(unsigned char *)(v65 + v61);
          LOBYTE(v12) = *(unsigned char *)(v65 + 4 + v63);
          LOBYTE(v13) = *(unsigned char *)(v65 + 4 + v62);
          LOBYTE(v14) = *(unsigned char *)(v65 + 4 + v61);
          _H10 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v9), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v11), 0.0), 8191.0)));
          _H13 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v12), 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H12
            FCVT            S13, H13
          }
          _H14 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v13), 0.0), 8191.0)));
          unsigned int v81 = llroundf(fminf(fmaxf(v36 * (float)LODWORD(v14), 0.0), 8191.0));
          __asm { FCVT            S14, H14 }
          float v14 = (float)((float)(v51 * _S11) + (float)(_S10 * v49)) + (float)(_S12 * v52);
          _S18 = (float)((float)(v54 * _S11) + (float)(_S10 * v53)) + (float)(_S12 * v55);
          _S10 = (float)((float)(v58 * _S11) + (float)(_S10 * v56)) + (float)(_S12 * v57);
          float v85 = (float)(v51 * _S14) + (float)(_S13 * v49);
          float v86 = (float)(v54 * _S14) + (float)(_S13 * v53);
          float v87 = (float)(v58 * _S14) + (float)(_S13 * v56);
          LOWORD(_S14) = *(_WORD *)(v59 + 2 * v81);
          __asm { FCVT            S14, H14 }
          _S11 = v85 + (float)(_S14 * v52);
          float v90 = v86 + (float)(_S14 * v55);
          float v91 = v87 + (float)(_S14 * v57);
          LOWORD(_S14) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v14, 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          LOWORD(_S18) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          unsigned int v94 = llroundf(fminf(fmaxf(_S10, 0.0), 8191.0));
          LOWORD(_S10) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          unsigned int v97 = llroundf(fminf(fmaxf(v91, 0.0), 8191.0));
          float v98 = (float)(v43 * _S18) + (float)(v42 * _S14);
          float v99 = (float)(v43 * _S11) + (float)(v42 * _S10);
          float v100 = _S14 + _S10;
          LOWORD(_S14) = *(_WORD *)(v60 + 2 * v94);
          __asm { FCVT            S14, H14 }
          float v102 = _S18 + _S11;
          LOWORD(_S11) = *(_WORD *)(v60 + 2 * v97);
          __asm { FCVT            S11, H11 }
          float v12 = v99 + (float)(v44 * _S11);
          float v104 = _S14 + _S11;
          float v11 = (float)(v98 + (float)(v44 * _S14)) + v37;
          float v13 = (float)((float)(v38 + (float)(v100 * v113)) + (float)(v102 * v45)) + (float)(v104 * v46);
          float v9 = (float)((float)(v38 + (float)(v100 * v47)) + (float)(v102 * v48)) + (float)(v104 * v50);
          if (v11 < v37) {
            float v105 = v37;
          }
          else {
            float v105 = v11;
          }
          if (v11 > v39) {
            float v105 = v39;
          }
          char v106 = llroundf(v105);
          if (v13 < v40) {
            float v107 = v40;
          }
          else {
            float v107 = v13;
          }
          float v108 = v12 + v37;
          if (v13 > v41) {
            float v107 = v41;
          }
          char v109 = llroundf(v107);
          if (v108 < v37) {
            float v110 = v37;
          }
          else {
            float v110 = v12 + v37;
          }
          unsigned __int8 v111 = result[v65];
          unsigned __int8 v112 = result[v65 + 4];
          *float v67 = v106;
          v67[1] = v109;
          if (v108 > v39) {
            float v110 = v39;
          }
          v67[2] = llroundf(v110);
          float v10 = v41;
          if (v9 <= v41)
          {
            float v10 = v9;
            if (v9 < v40) {
              float v10 = v40;
            }
          }
          v67[3] = llroundf(v10);
          if (v66)
          {
            *float v66 = v111;
            v66[1] = v112;
            v66 += 2;
          }
          v65 += 8;
          v64 += 2;
          v67 += 4;
        }
        while (v31 > v64);
      }
      v33 += v27;
      v34 += v28;
      ++v24;
    }
    while (v24 != v35);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v13 = *(void *)(result + 28);
  unint64_t v14 = *result;
  unint64_t v15 = v13 * a2 / v14;
  uint64_t v16 = *((void *)result + 14);
  uint64_t v17 = (void *)*((void *)result + 16);
  unint64_t v18 = *((void *)result + 13) * a2 / v14 + *((void *)result + 15);
  uint64_t v19 = (uint64_t *)*((void *)result + 17);
  unint64_t v20 = (v13 + v13 * a2) / v14;
  long long v21 = (unsigned char *)v17[1];
  if (v21) {
    v21 += v19[1] * v18 + v16;
  }
  if (v20 != v15)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *(void *)(result + 44);
    uint64_t v24 = v15 + v23;
    uint64_t v25 = **((void **)result + 8);
    uint64_t v26 = *v19;
    uint64_t v27 = *v17 + v26 * v18;
    uint64_t v28 = *((void *)result + 19);
    unint64_t v29 = *(void *)(result + 20);
    uint64_t v30 = v20 + v23;
    uint64_t v31 = **((void **)result + 7) + v25 * v24 + 4 * *(void *)(result + 36);
    uint64_t v32 = (unsigned char *)(v27 + v16);
    uint64_t v33 = v30 - v24;
    LOWORD(a5) = *(_WORD *)(v28 + 144);
    LOWORD(a6) = *(_WORD *)(v28 + 146);
    float v34 = (float)*(unsigned int *)(v28 + 136) / (float)*(unsigned int *)(v28 + 128);
    float v35 = (float)LODWORD(a5);
    float v36 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v28 + 148);
    float v37 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v28 + 150);
    float v38 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v28 + 152);
    float v39 = (float)LODWORD(a8);
    float v40 = *(float *)(v28 + 36);
    float v41 = *(float *)(v28 + 40);
    float v42 = *(float *)(v28 + 44);
    float v43 = *(float *)(v28 + 48) * 0.5;
    float v44 = *(float *)(v28 + 52) * 0.5;
    float v45 = *(float *)(v28 + 56) * 0.5;
    float v46 = *(float *)(v28 + 60) * 0.5;
    float v47 = *(float *)(v28 + 64) * 0.5;
    float v48 = *(float *)(v28 + 68);
    float v49 = v48 * 0.5;
    uint64_t v50 = *(unsigned __int8 *)(v28 + 157);
    uint64_t v51 = *(unsigned __int8 *)(v28 + 156);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v28 + 155);
    uint64_t v52 = *(unsigned __int8 *)(v28 + 154);
    do
    {
      if (v29)
      {
        unint64_t v53 = 0;
        uint64_t v54 = v31;
        float v55 = v21;
        float v56 = v32;
        do
        {
          LOBYTE(v48) = *(unsigned char *)(v54 + v52);
          float v57 = v34 * (float)LODWORD(v48);
          LOBYTE(v8) = result[v54];
          LOBYTE(v9) = *(unsigned char *)(v54 + v51);
          float v58 = v34 * (float)LODWORD(v8);
          float v59 = v34 * (float)LODWORD(v9);
          char v60 = *(unsigned char *)(v54 + v50);
          LOBYTE(v10) = *(unsigned char *)(v54 + 4 + v52);
          float v61 = v34 * (float)LODWORD(v10);
          LOBYTE(v11) = result[v54 + 4];
          float v11 = v34 * (float)LODWORD(v11);
          LOBYTE(v12) = *(unsigned char *)(v54 + 4 + v51);
          float v12 = v34 * (float)LODWORD(v12);
          char v62 = *(unsigned char *)(v54 + 4 + v50);
          float v63 = (float)((float)((float)(v41 * v58) + (float)(v40 * v57)) + (float)(v42 * v59)) + v35;
          float v64 = (float)((float)((float)(v41 * v11) + (float)(v40 * v61)) + (float)(v42 * v12)) + v35;
          float v65 = v57 + v61;
          float v66 = v58 + v11;
          float v9 = v59 + v12;
          float v10 = (float)((float)(v36 + (float)(v65 * v43)) + (float)(v66 * v44)) + (float)(v9 * v45);
          float v67 = (float)(v36 + (float)(v65 * v46)) + (float)(v66 * v47);
          if (v63 < v35) {
            float v68 = v35;
          }
          else {
            float v68 = v63;
          }
          if (v63 > v37) {
            float v68 = v37;
          }
          float v48 = v67 + (float)(v9 * v49);
          *float v56 = llroundf(v68);
          if (v10 < v38) {
            float v69 = v38;
          }
          else {
            float v69 = v10;
          }
          if (v10 > v39) {
            float v69 = v39;
          }
          v56[1] = llroundf(v69);
          if (v64 < v35) {
            float v70 = v35;
          }
          else {
            float v70 = v64;
          }
          if (v64 > v37) {
            float v70 = v37;
          }
          v56[2] = llroundf(v70);
          float v8 = v39;
          if (v48 <= v39)
          {
            float v8 = v48;
            if (v48 < v38) {
              float v8 = v38;
            }
          }
          v56[3] = llroundf(v8);
          if (v55)
          {
            *float v55 = v60;
            v55[1] = v62;
            v55 += 2;
          }
          v54 += 8;
          v53 += 2;
          v56 += 4;
        }
        while (v29 > v53);
      }
      v31 += v25;
      v32 += v26;
      ++v22;
    }
    while (v22 != v33);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

int16x8_t *vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, float16x8_t a4, double a5, double a6, float16x8_t a7)
{
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a1 + 20);
  uint64_t v227 = *(void *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 44);
  uint64_t v10 = *(void *)(a1 + 28);
  unint64_t v11 = *a1;
  unint64_t v12 = v10 * a2 / v11;
  uint64_t v13 = v12 + v9;
  unint64_t v14 = (v10 + v10 * a2) / v11;
  uint64_t v15 = v14 + v9;
  uint64_t v16 = *((void *)a1 + 14);
  uint64_t v17 = *((void *)a1 + 19);
  uint64_t v18 = *((void *)a1 + 15);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v20 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v21 = **((void **)a1 + 8);
  uint64_t v225 = **((void **)a1 + 7);
  unint64_t v22 = *((void *)a1 + 13) * a2;
  uint64_t v23 = *v20;
  uint64_t v24 = v20[1];
  uint64_t v25 = v20[2];
  uint64_t v26 = v19[1];
  uint64_t v223 = *v19;
  uint64_t result = (int16x8_t *)v19[2];
  unsigned int v28 = *(_DWORD *)(v17 + 128);
  int v240 = *(_DWORD *)(v17 + 154);
  unsigned int v29 = *(unsigned __int16 *)(v17 + 144);
  unsigned int v30 = *(unsigned __int8 *)(v17 + 132);
  unsigned int v31 = *(unsigned __int16 *)(v17 + 146);
  unsigned int v32 = *(unsigned __int16 *)(v17 + 148);
  unsigned int v33 = *(unsigned __int16 *)(v17 + 150);
  unsigned int v34 = *(unsigned __int16 *)(v17 + 152);
  float v237 = *(float *)(v17 + 36);
  float v236 = *(float *)(v17 + 40);
  v35.i32[0] = *(_DWORD *)(v17 + 48);
  float v235 = *(float *)(v17 + 44);
  v37.i32[0] = *(_DWORD *)(v17 + 52);
  v36.i32[0] = *(_DWORD *)(v17 + 56);
  a4.i32[0] = *(_DWORD *)(v17 + 60);
  __int32 v38 = *(_DWORD *)(v17 + 64);
  __int32 v39 = *(_DWORD *)(v17 + 68);
  float v234 = *(float *)(v17 + 72);
  float v233 = *(float *)(v17 + 76);
  float v232 = *(float *)(v17 + 80);
  float v231 = *(float *)(v17 + 84);
  _S16 = *(float *)(v17 + 92);
  float v230 = *(float *)(v17 + 88);
  uint64_t v41 = v22 / v11 + v18;
  uint64_t v200 = v21 * v13;
  _S17 = *(float *)(v17 + 96);
  _S18 = *(float *)(v17 + 100);
  _S19 = *(float *)(v17 + 104);
  _S20 = *(float *)(v17 + 108);
  _S21 = *(float *)(v17 + 112);
  _S22 = *(float *)(v17 + 116);
  _S23 = *(float *)(v17 + 120);
  v49.i64[1] = 0;
  long long v238 = 0u;
  long long v239 = 0u;
  do
  {
    unsigned int v50 = 0;
    char v51 = *((unsigned char *)&v240 + v7);
    do
    {
      *((unsigned char *)&v238 + 8 * (((_BYTE)v7 + (v50 >> 3)) & 0x1F) + v50) = v51 + 4 * v50;
      ++v50;
    }
    while (v50 != 8);
    ++v7;
  }
  while (v7 != 4);
  if (v14 != v12)
  {
    uint64_t v52 = 0;
    uint64_t v53 = v15 - v13;
    uint64_t v54 = v17 + 16548;
    _S25 = 8191.0 / (float)v28;
    float v56 = (float)v29;
    float v57 = (float)v31;
    float v58 = (float)v32;
    float v229 = (float)v33;
    float v59 = (float)v34;
    v35.i32[1] = a4.i32[0];
    *(float32x2_t *)v49.i8 = vmul_f32(v35, (float32x2_t)0x3F0000003F000000);
    v37.i32[1] = v38;
    v36.i32[1] = v39;
    *(float32x2_t *)a7.i8 = vmul_f32(v37, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)a4.i8 = vmul_f32(v36, (float32x2_t)0x3F0000003F000000);
    uint64_t v60 = v17 + 32932;
    uint64_t v61 = v17 + 164;
    _S0 = v237;
    __asm { FCVT            H0, S0 }
    short float v222 = *(short float *)&_S0;
    _S0 = v236;
    __asm { FCVT            H0, S0 }
    short float v221 = *(short float *)&_S0;
    _S0 = v235;
    __asm { FCVT            H0, S0 }
    short float v219 = *(short float *)&_S0;
    float16x8_t v220 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)v49), 0);
    _Q0 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)a4), 0);
    float16x8_t v217 = (float16x8_t)_Q0;
    float16x8_t v218 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)a7), 0);
    __asm { FCVT            H0, S20 }
    short float v216 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S21 }
    short float v215 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S22 }
    short float v214 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S23 }
    short float v213 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v234;
    __asm { FCVT            H0, S0 }
    short float v212 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v233;
    __asm { FCVT            H0, S0 }
    short float v211 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v232;
    __asm { FCVT            H0, S0 }
    short float v210 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v231;
    __asm { FCVT            H0, S0 }
    short float v209 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v230;
    __asm { FCVT            H0, S0 }
    short float v208 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S16 }
    short float v207 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v29;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v31;
    int16x8_t v71 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v32;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v205 = (float16x8_t)_Q0;
    float16x8_t v206 = (float16x8_t)v71;
    *(short float *)_Q0.i16 = (short float)v33;
    int16x8_t v73 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v34;
    float16x8_t v203 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v204 = (float16x8_t)v73;
    __asm { FCVT            H0, S17 }
    short float v202 = *(short float *)_Q0.i16;
    if (v30 >= 0x11) {
      unsigned __int8 v74 = 0;
    }
    else {
      unsigned __int8 v74 = 16 - v30;
    }
    if (result) {
      uint64_t result = (int16x8_t *)((char *)result + 2 * v16 + v25 * v41);
    }
    else {
      uint64_t result = 0;
    }
    if (v26) {
      uint64_t v75 = v26 + v24 * v41 + 2 * v16;
    }
    else {
      uint64_t v75 = 0;
    }
    uint64_t v76 = v223 + v23 * v41 + 2 * v16;
    uint64_t v77 = v225 + v200 + 4 * v227;
    __asm { FCVT            H0, S18 }
    short float v201 = _H0;
    __asm { FCVT            H0, S19 }
    short float v199 = _H0;
    __asm { FCVT            H9, S25 }
    uint16x8_t v81 = (uint16x8_t)vdupq_n_s16(v74);
    float v226 = *(float *)a7.i32;
    float v228 = *(float *)v49.i32;
    float v197 = *(float *)&a7.i32[1];
    float v198 = *(float *)&v49.i32[1];
    v82.i32[0] = a4.i32[1];
    float v196 = *(float *)&a4.i32[1];
    float v224 = *(float *)a4.i32;
    v83.i64[0] = 0x9000900090009000;
    v83.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v139 = 0;
        float v88 = (uint16x8_t *)v76;
        float v87 = (uint16x8_t *)v75;
        float v86 = result;
        float v85 = (void *)v77;
      }
      else
      {
        int v84 = 0;
        float v85 = (void *)v77;
        float v86 = result;
        float v87 = (uint16x8_t *)v75;
        float v88 = (uint16x8_t *)v76;
        do
        {
          *(void *)&long long v92 = *v85;
          uint64_t v89 = v85[1];
          *(void *)&long long v90 = v85[2];
          uint64_t v91 = v85[3];
          v85 += 4;
          *((void *)&v92 + 1) = v89;
          *((void *)&v90 + 1) = v91;
          long long v93 = v90;
          if (v86)
          {
            int8x8_t v94 = vqtbl2_s8(*(int8x16x2_t *)&v92, *(int8x8_t *)((char *)&v239 + 8));
            *(int8x8_t *)v95.i8 = vzip1_s8(v94, 0);
            v95.u64[1] = (unint64_t)vzip2_s8(v94, 0);
            v96.i64[0] = 0x101010101010101;
            v96.i64[1] = 0x101010101010101;
            int16x8_t v97 = vmulq_s16(v95, v96);
          }
          else
          {
            int16x8_t v97 = 0uLL;
          }
          int8x8_t v98 = vqtbl2_s8(*(int8x16x2_t *)&v92, *(int8x8_t *)&v238);
          *(int8x8_t *)v99.i8 = vzip1_s8(v98, 0);
          v99.u64[1] = (unint64_t)vzip2_s8(v98, 0);
          int8x8_t v100 = vqtbl2_s8(*(int8x16x2_t *)&v92, *(int8x8_t *)((char *)&v238 + 8));
          int8x8_t v101 = vqtbl2_s8(*(int8x16x2_t *)&v92, *(int8x8_t *)&v239);
          *(int8x8_t *)v102.i8 = vzip1_s8(v100, 0);
          v102.u64[1] = (unint64_t)vzip2_s8(v100, 0);
          *(int8x8_t *)v103.i8 = vzip1_s8(v101, 0);
          v103.u64[1] = (unint64_t)vzip2_s8(v101, 0);
          float16x8_t v104 = vmulq_n_f16(vcvtq_f16_u16(v102), _H9);
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v99), _H9), (float16x8_t)0), v83));
          uint32x4_t v106 = vmovl_high_u16(v105);
          uint32x4_t v107 = vmovl_u16(*(uint16x4_t *)v105.i8);
          v108.i16[0] = *(_WORD *)(v61 + 2 * v107.u32[0]);
          v108.i16[1] = *(_WORD *)(v61 + 2 * v107.u32[1]);
          v108.i16[2] = *(_WORD *)(v61 + 2 * v107.u32[2]);
          v108.i16[3] = *(_WORD *)(v61 + 2 * v107.u32[3]);
          v108.i16[4] = *(_WORD *)(v61 + 2 * v106.u32[0]);
          v108.i16[5] = *(_WORD *)(v61 + 2 * v106.u32[1]);
          v108.i16[6] = *(_WORD *)(v61 + 2 * v106.u32[2]);
          v108.i16[7] = *(_WORD *)(v61 + 2 * v106.u32[3]);
          uint16x8_t v109 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v104, (float16x8_t)0), v83));
          uint32x4_t v110 = vmovl_high_u16(v109);
          uint32x4_t v111 = vmovl_u16(*(uint16x4_t *)v109.i8);
          v112.i16[0] = *(_WORD *)(v61 + 2 * v111.u32[0]);
          v112.i16[1] = *(_WORD *)(v61 + 2 * v111.u32[1]);
          v112.i16[2] = *(_WORD *)(v61 + 2 * v111.u32[2]);
          v112.i16[3] = *(_WORD *)(v61 + 2 * v111.u32[3]);
          v112.i16[4] = *(_WORD *)(v61 + 2 * v110.u32[0]);
          v112.i16[5] = *(_WORD *)(v61 + 2 * v110.u32[1]);
          v112.i16[6] = *(_WORD *)(v61 + 2 * v110.u32[2]);
          v112.i16[7] = *(_WORD *)(v61 + 2 * v110.u32[3]);
          uint16x8_t v113 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v103), _H9), (float16x8_t)0), v83));
          uint32x4_t v114 = vmovl_high_u16(v113);
          float16x8_t v115 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v113.i8);
          v115.i16[0] = *(_WORD *)(v61 + 2 * v115.u32[0]);
          v115.i16[1] = *(_WORD *)(v61 + 2 * v115.u32[1]);
          v115.i16[2] = *(_WORD *)(v61 + 2 * v115.u32[2]);
          v115.i16[3] = *(_WORD *)(v61 + 2 * v115.u32[3]);
          v115.i16[4] = *(_WORD *)(v61 + 2 * v114.u32[0]);
          v115.i16[5] = *(_WORD *)(v61 + 2 * v114.u32[1]);
          v115.i16[6] = *(_WORD *)(v61 + 2 * v114.u32[2]);
          v115.i16[7] = *(_WORD *)(v61 + 2 * v114.u32[3]);
          uint16x8_t v116 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v108, v216), v112, v215), v115, v214), vmaxq_f16(vmaxq_f16(v108, v112), v115), v213), (float16x8_t)0), v83));
          uint32x4_t v117 = vmovl_high_u16(v116);
          float16x8_t v118 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v116.i8);
          v118.i16[0] = *(_WORD *)(v54 + 2 * v118.u32[0]);
          v118.i16[1] = *(_WORD *)(v54 + 2 * v118.u32[1]);
          v118.i16[2] = *(_WORD *)(v54 + 2 * v118.u32[2]);
          v118.i16[3] = *(_WORD *)(v54 + 2 * v118.u32[3]);
          v118.i16[4] = *(_WORD *)(v54 + 2 * v117.u32[0]);
          v118.i16[5] = *(_WORD *)(v54 + 2 * v117.u32[1]);
          v118.i16[6] = *(_WORD *)(v54 + 2 * v117.u32[2]);
          v118.i16[7] = *(_WORD *)(v54 + 2 * v117.u32[3]);
          float16x8_t v119 = vmulq_f16(v108, v118);
          float16x8_t v120 = vmulq_f16(v112, v118);
          float16x8_t v121 = vmulq_f16(v115, v118);
          float16x8_t v122 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v119, v209), v120, v208), v121, v207);
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v119, v212), v120, v211), v121, v210), (float16x8_t)0), v83));
          uint32x4_t v124 = vmovl_high_u16(v123);
          uint32x4_t v125 = vmovl_u16(*(uint16x4_t *)v123.i8);
          v108.i16[0] = *(_WORD *)(v60 + 2 * v125.u32[0]);
          v108.i16[1] = *(_WORD *)(v60 + 2 * v125.u32[1]);
          v108.i16[2] = *(_WORD *)(v60 + 2 * v125.u32[2]);
          v108.i16[3] = *(_WORD *)(v60 + 2 * v125.u32[3]);
          v108.i16[4] = *(_WORD *)(v60 + 2 * v124.u32[0]);
          v108.i16[5] = *(_WORD *)(v60 + 2 * v124.u32[1]);
          v108.i16[6] = *(_WORD *)(v60 + 2 * v124.u32[2]);
          float16x8_t v126 = v108;
          v126.i16[7] = *(_WORD *)(v60 + 2 * v124.u32[3]);
          float16x8_t v127 = vmlaq_n_f16(vmulq_n_f16(v121, v199), v120, v201);
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v83));
          uint32x4_t v129 = vmovl_high_u16(v128);
          int16x8_t v130 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v128.i8);
          *(void *)&long long v131 = v129.u32[2];
          *((void *)&v131 + 1) = v129.u32[3];
          long long v132 = v131;
          *(void *)&long long v131 = v129.u32[0];
          *((void *)&v131 + 1) = v129.u32[1];
          long long v133 = v131;
          *((void *)&v131 + 1) = v130.u32[3];
          v130.i16[7] = (unint64_t)v130.u32[3] >> 48;
          v130.i16[0] = *(_WORD *)(v60 + 2 * v130.u32[0]);
          v130.i16[1] = *(_WORD *)(v60 + 2 * v130.u32[1]);
          v130.i16[2] = *(_WORD *)(v60 + 2 * v130.u32[2]);
          v130.i16[3] = *(_WORD *)(v60 + 2 * *((void *)&v131 + 1));
          v130.i16[4] = *(_WORD *)(v60 + 2 * v133);
          v130.i16[5] = *(_WORD *)(v60 + 2 * *((void *)&v133 + 1));
          v130.i16[6] = *(_WORD *)(v60 + 2 * v132);
          float16x8_t v49 = (float16x8_t)v130;
          v49.i16[7] = *(_WORD *)(v60 + 2 * *((void *)&v132 + 1));
          uint16x8_t v134 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v127, v119, v202), (float16x8_t)0), v83));
          int16x8_t v135 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v134.i8);
          uint32x4_t v136 = vmovl_high_u16(v134);
          *(void *)&long long v131 = v136.u32[2];
          *((void *)&v131 + 1) = v136.u32[3];
          long long v137 = v131;
          *((void *)&v131 + 1) = v135.u32[3];
          v135.i16[7] = (unint64_t)v135.u32[3] >> 48;
          v135.i16[0] = *(_WORD *)(v60 + 2 * v135.u32[0]);
          v135.i16[1] = *(_WORD *)(v60 + 2 * v135.u32[1]);
          v135.i16[2] = *(_WORD *)(v60 + 2 * v135.u32[2]);
          v135.i16[3] = *(_WORD *)(v60 + 2 * *((void *)&v131 + 1));
          v135.i16[4] = *(_WORD *)(v60 + 2 * v136.u32[0]);
          v135.i16[5] = *(_WORD *)(v60 + 2 * v136.u32[1]);
          v135.i16[6] = *(_WORD *)(v60 + 2 * v137);
          float16x8_t v138 = (float16x8_t)v135;
          v138.i16[7] = *(_WORD *)(v60 + 2 * *((void *)&v137 + 1));
          *v88++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v70, v126, v222), v49, v221), v138, v219), v70), v205)), v81);
          a4 = vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v108, v130), (float16x8_t)vuzp2q_s16((int16x8_t)v126, (int16x8_t)v49));
          v49.i32[0] = v218.i32[0];
          a7 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v206, v220, (float16x8_t)vzip1q_s16((int16x8_t)a4, (int16x8_t)a4)), v218, (float16x8_t)vzip2q_s16((int16x8_t)a4, (int16x8_t)a4)), v217, vaddq_f16((float16x8_t)vtrn1q_s16(v135, v135), (float16x8_t)vtrn2q_s16((int16x8_t)v138, (int16x8_t)v138)));
          a4.i32[0] = v203.i32[0];
          uint16x8_t v82 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(a7, v204), v203)), v81);
          *v87++ = v82;
          if (v86) {
            *v86++ = v97;
          }
          v84 += 8;
        }
        while (v84 < (int)v8 - 7);
        unint64_t v139 = v8 & 0xFFFFFFF8;
      }
      if (v8 > v139)
      {
        short float v140 = (char *)v85 + 4;
        do
        {
          float v141 = &v140[v240];
          v82.i8[0] = *(v141 - 4);
          float v142 = &v140[BYTE1(v240)];
          a4.i8[0] = *(v142 - 4);
          int16x8_t v143 = (unsigned __int8 *)&v140[BYTE2(v240)];
          v49.i8[0] = *(v143 - 4);
          _H0 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25 * (float)v82.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S29, H0 }
          _H0 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25 * (float)a4.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S10, H0 }
          _H0 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25 * (float)v49.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S12, H0 }
          float v150 = fmaxf(_S29, fmaxf(_S10, _S12));
          float v151 = (float)((float)((float)(_S21 * _S10) + (float)(_S20 * _S29)) + (float)(_S22 * _S12))
               + (float)(_S23 * v150);
          float v152 = 8191.0;
          if (v151 <= 8191.0)
          {
            float v152 = (float)((float)((float)(_S21 * _S10) + (float)(_S20 * _S29)) + (float)(_S22 * _S12))
                 + (float)(_S23 * v150);
            if (v151 < 0.0) {
              float v152 = 0.0;
            }
          }
          LOBYTE(v151) = *v141;
          LOBYTE(v150) = *v142;
          a7.i8[0] = *v143;
          _H0 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25 * (float)LODWORD(v151), 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25 * (float)LODWORD(v150), 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25 * (float)a7.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S13, H4 }
          float v159 = fmaxf(_S0, fmaxf(_S1, _S13));
          float v160 = (float)((float)((float)(_S21 * _S1) + (float)(_S20 * _S0)) + (float)(_S22 * _S13))
               + (float)(_S23 * v159);
          float v161 = 8191.0;
          if (v160 <= 8191.0)
          {
            float v161 = (float)((float)((float)(_S21 * _S1) + (float)(_S20 * _S0)) + (float)(_S22 * _S13))
                 + (float)(_S23 * v159);
            if (v160 < 0.0) {
              float v161 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v54 + 2 * llroundf(v152));
          __asm { FCVT            S2, H2 }
          _S4 = _S29 * _S2;
          float v165 = _S10 * _S2;
          float v166 = _S12 * _S2;
          float v167 = (float)((float)(v233 * v165) + (float)(_S4 * v234)) + (float)(v166 * v232);
          float v168 = (float)((float)(v230 * v165) + (float)(_S4 * v231)) + (float)(v166 * _S16);
          _S2 = (float)((float)(_S18 * v165) + (float)(_S4 * _S17)) + (float)(v166 * _S19);
          LOWORD(_S4) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          __asm { FCVT            S29, H4 }
          LOWORD(_S4) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          __asm { FCVT            S10, H4 }
          LOWORD(_S2) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm { FCVT            S12, H2 }
          float v173 = (float)((float)((float)(v236 * _S10) + (float)(v237 * _S29)) + (float)(v235 * _S12)) + v56;
          float v174 = v58;
          if (v173 <= v58)
          {
            float v174 = (float)((float)((float)(v236 * _S10) + (float)(v237 * _S29)) + (float)(v235 * _S12)) + v56;
            if (v173 < v56) {
              float v174 = v56;
            }
          }
          short float v175 = &v140[HIBYTE(v240)];
          __int16 v176 = *(v175 - 4);
          __int16 v177 = *v175;
          _H4 = *(_WORD *)(v54 + 2 * llroundf(v161));
          __asm { FCVT            S4, H4 }
          _S0 = _S0 * _S4;
          float v181 = _S1 * _S4;
          _S4 = _S13 * _S4;
          float v183 = (float)((float)(v233 * v181) + (float)(_S0 * v234)) + (float)(_S4 * v232);
          float v184 = (float)((float)(v230 * v181) + (float)(_S0 * v231)) + (float)(_S4 * _S16);
          _S1 = (float)((float)(_S18 * v181) + (float)(_S0 * _S17)) + (float)(_S4 * _S19);
          LOWORD(_S0) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v183, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v184, 0.0), 8191.0)));
          LOWORD(_S1) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm
          {
            FCVT            S4, H4
            FCVT            S1, H1
          }
          float v189 = (float)((float)((float)(v236 * _S4) + (float)(v237 * _S0)) + (float)(v235 * _S1)) + v56;
          v88->i16[0] = llroundf(v174) << v74;
          float v190 = v58;
          if (v189 <= v58)
          {
            float v190 = (float)((float)((float)(v236 * _S4) + (float)(v237 * _S0)) + (float)(v235 * _S1)) + v56;
            if (v189 < v56) {
              float v190 = v56;
            }
          }
          v88->i16[1] = llroundf(v190) << v74;
          float v191 = _S29 + _S0;
          float v192 = _S10 + _S4;
          float v193 = _S12 + _S1;
          float v194 = (float)((float)(v57 + (float)(v191 * v228)) + (float)((float)(_S10 + _S4) * v226))
               + (float)(v193 * v224);
          *(float *)a7.i32 = v59;
          if (v194 <= v59)
          {
            *(float *)a7.i32 = (float)((float)(v57 + (float)(v191 * v228)) + (float)(v192 * v226))
                             + (float)(v193 * v224);
            if (v194 < v229) {
              *(float *)a7.i32 = v229;
            }
          }
          float v195 = (float)(v57 + (float)(v191 * v198)) + (float)(v192 * v197);
          *(float *)v49.i32 = v196;
          *(float *)v82.i32 = v195 + (float)(v193 * v196);
          v87->i16[0] = llroundf(*(float *)a7.i32) << v74;
          *(float *)a4.i32 = v59;
          if (*(float *)v82.i32 <= v59)
          {
            a4.i32[0] = v82.i32[0];
            if (*(float *)v82.i32 < v229) {
              *(float *)a4.i32 = v229;
            }
          }
          v87->i16[1] = llroundf(*(float *)a4.i32) << v74;
          if (v86)
          {
            v86->i16[0] = v176 | (v176 << 8);
            v86->i16[1] = v177 | (v177 << 8);
            float v86 = (int16x8_t *)((char *)v86 + 4);
          }
          v140 += 8;
          v139 += 2;
          float v88 = (uint16x8_t *)((char *)v88 + 4);
          float v87 = (uint16x8_t *)((char *)v87 + 4);
        }
        while (v8 > v139);
      }
      v77 += v21;
      v76 += v23;
      v75 += v24;
      uint64_t result = (int16x8_t *)((char *)result + v25);
      ++v52;
    }
    while (v52 != v53);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = *result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    unint64_t v14 = *(void *)(result + 20);
    unint64_t v15 = v11 + *(void *)(result + 44);
    unint64_t v16 = v12 - v11;
    uint64_t v17 = *((void *)result + 19);
    uint64_t v18 = (uint64_t *)*((void *)result + 17);
    uint64_t v19 = (void *)*((void *)result + 7);
    uint64_t v20 = **((void **)result + 8);
    uint64_t v21 = *v18;
    uint64_t v22 = v18[1];
    uint64_t v23 = v18[2];
    float v24 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    float v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    float v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    float v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    float v130 = (float)LODWORD(a8);
    LOWORD(a8) = *(_WORD *)(v17 + 152);
    float v28 = (float)LODWORD(a8);
    float v29 = *(float *)(v17 + 40);
    float v131 = *(float *)(v17 + 36);
    float v30 = *(float *)(v17 + 44);
    float v31 = 0.5;
    float v129 = *(float *)(v17 + 48) * 0.5;
    float v128 = *(float *)(v17 + 52) * 0.5;
    float v127 = *(float *)(v17 + 56) * 0.5;
    float v32 = *(float *)(v17 + 64);
    float v126 = *(float *)(v17 + 60) * 0.5;
    float v125 = v32 * 0.5;
    float v33 = *(float *)(v17 + 68);
    float v34 = *(float *)(v17 + 72);
    float v124 = v33 * 0.5;
    float v35 = *(float *)(v17 + 76);
    float v36 = *(float *)(v17 + 80);
    float v37 = *(float *)(v17 + 84);
    float v38 = *(float *)(v17 + 88);
    float v39 = *(float *)(v17 + 92);
    float v40 = *(float *)(v17 + 96);
    float v42 = *(float *)(v17 + 100);
    float v41 = *(float *)(v17 + 104);
    uint64_t v43 = v17 + 164;
    uint64_t v44 = v17 + 16548;
    uint64_t v45 = v17 + 32932;
    float v46 = *(float *)(v17 + 108);
    float v47 = *(float *)(v17 + 112);
    float v48 = *(float *)(v17 + 116);
    float v49 = *(float *)(v17 + 120);
    unsigned int v50 = (uint64_t *)*((void *)result + 16);
    uint64_t v51 = *((void *)result + 14);
    unint64_t v52 = *((void *)result + 13) * a2 / v10 + *((void *)result + 15);
    uint64_t v53 = *(void *)(result + 36);
    unsigned int v54 = *(unsigned __int8 *)(v17 + 132);
    if (v54 >= 0x11) {
      char v55 = 0;
    }
    else {
      char v55 = 16 - v54;
    }
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v17 + 157);
    uint64_t v56 = *(unsigned __int8 *)(v17 + 156);
    uint64_t v57 = *(unsigned __int8 *)(v17 + 155);
    uint64_t v58 = *(unsigned __int8 *)(v17 + 154);
    uint64_t v59 = v50[2];
    if (v59) {
      uint64_t v60 = v59 + v52 * v23 + 2 * v51;
    }
    else {
      uint64_t v60 = 0;
    }
    uint64_t v62 = *v50;
    uint64_t v61 = v50[1];
    uint64_t v63 = v61 + v52 * v22 + 2 * v51;
    if (!v61) {
      uint64_t v63 = 0;
    }
    uint64_t v64 = v62 + v52 * v21 + 2 * v51;
    uint64_t v65 = *v19 + v20 * v15 + 4 * v53;
    char v66 = v55;
    do
    {
      if (v14)
      {
        unint64_t v67 = 0;
        float v68 = (_WORD *)v60;
        float v69 = (_WORD *)v64;
        uint64_t v70 = v65;
        do
        {
          LOBYTE(v33) = *(unsigned char *)(v70 + v58);
          LOBYTE(v31) = *(unsigned char *)(v70 + v57);
          LOBYTE(v32) = *(unsigned char *)(v70 + v56);
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v33), 0.0), 8191.0)));
          __asm { FCVT            S15, H5 }
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v31), 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v32), 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          float v81 = (float)((float)(v47 * _S18) + (float)(v46 * _S15)) + (float)(v48 * _S19);
          float v82 = v81 + (float)(v49 * fmaxf(_S15, fmaxf(_S18, _S19)));
          float v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          LOBYTE(v81) = *(unsigned char *)(v70 + 4 + v58);
          LOBYTE(v82) = *(unsigned char *)(v70 + 4 + v57);
          LOBYTE(v8) = *(unsigned char *)(v70 + 4 + v56);
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v81), 0.0), 8191.0)));
          __asm { FCVT            S14, H5 }
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v82), 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v8), 0.0), 8191.0)));
          __asm { FCVT            S21, H5 }
          float v90 = (float)((float)((float)(v47 * _S20) + (float)(v46 * _S14)) + (float)(v48 * _S21))
              + (float)(v49 * fmaxf(_S14, fmaxf(_S20, _S21)));
          float v91 = 8191.0;
          if (v90 <= 8191.0)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          _H22 = *(_WORD *)(v44 + 2 * llroundf(v83));
          __asm { FCVT            S22, H22 }
          _S18 = _S18 * _S22;
          float v95 = _S19 * _S22;
          _S3 = (float)((float)(v38 * _S18) + (float)((float)(_S15 * _S22) * v37)) + (float)(v95 * v39);
          unsigned int v97 = llroundf(fminf(fmaxf((float)((float)(v35 * _S18) + (float)((float)(_S15 * _S22) * v34)) + (float)(v95 * v36), 0.0), 8191.0));
          float v98 = (float)((float)(v42 * _S18) + (float)((float)(_S15 * _S22) * v40)) + (float)(v95 * v41);
          LOWORD(_S18) = *(_WORD *)(v45 + 2 * v97);
          __asm { FCVT            S15, H18 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          float v102 = (float)((float)((float)(v29 * _S18) + (float)(v131 * _S15)) + (float)(v30 * _S19)) + v25;
          float v103 = v27;
          if (v102 <= v27)
          {
            float v103 = (float)((float)((float)(v29 * _S18) + (float)(v131 * _S15)) + (float)(v30 * _S19)) + v25;
            if (v102 < v25) {
              float v103 = v25;
            }
          }
          __int16 v104 = result[v70];
          __int16 v105 = result[v70 + 4];
          _H3 = *(_WORD *)(v44 + 2 * llroundf(v91));
          __asm { FCVT            S3, H3 }
          _S5 = _S14 * _S3;
          float v109 = _S20 * _S3;
          float v110 = _S21 * _S3;
          float v111 = (float)((float)(v35 * v109) + (float)(_S5 * v34)) + (float)(v110 * v36);
          float v112 = (float)((float)(v38 * v109) + (float)(_S5 * v37)) + (float)(v110 * v39);
          _S3 = (float)((float)(v42 * v109) + (float)(_S5 * v40)) + (float)(v110 * v41);
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H5
            FCVT            S21, H3
          }
          float v117 = (float)((float)((float)(v29 * _S22) + (float)(v131 * _S20)) + (float)(v30 * _S21)) + v25;
          *float v69 = llroundf(v103) << v66;
          float v118 = v27;
          if (v117 <= v27)
          {
            float v118 = (float)((float)((float)(v29 * _S22) + (float)(v131 * _S20)) + (float)(v30 * _S21)) + v25;
            if (v117 < v25) {
              float v118 = v25;
            }
          }
          v69[1] = llroundf(v118) << v66;
          float v119 = _S15 + _S20;
          float v120 = _S18 + _S22;
          float v121 = _S19 + _S21;
          float v122 = (float)((float)(v26 + (float)(v119 * v129)) + (float)(v120 * v128)) + (float)(v121 * v127);
          float v8 = v28;
          if (v122 <= v28)
          {
            float v8 = (float)((float)(v26 + (float)(v119 * v129)) + (float)(v120 * v128)) + (float)(v121 * v127);
            if (v122 < v130) {
              float v8 = v130;
            }
          }
          uint16x8_t v123 = (_WORD *)(v63 + 2 * v67);
          float v33 = v124;
          float v31 = (float)((float)(v26 + (float)(v119 * v126)) + (float)(v120 * v125)) + (float)(v121 * v124);
          *uint16x8_t v123 = llroundf(v8) << v66;
          float v32 = v28;
          if (v31 <= v28)
          {
            float v32 = v31;
            if (v31 < v130) {
              float v32 = v130;
            }
          }
          v123[1] = llroundf(v32) << v66;
          if (v68)
          {
            *float v68 = v104 | (v104 << 8);
            v68[1] = v105 | (v105 << 8);
            v68 += 2;
          }
          v70 += 8;
          v67 += 2;
          v69 += 2;
        }
        while (v14 > v67);
      }
      v65 += v20;
      v64 += v21;
      v63 += v22;
      v60 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

uint16x8_t *vt_Copy_BGRA_TRC_Mat_TRC_xf422_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, float32x4_t a4, float16x8_t a5, float32x4_t a6)
{
  uint64_t v6 = 0;
  unint64_t v7 = *(void *)(a1 + 20);
  uint64_t v206 = *(void *)(a1 + 36);
  uint64_t v8 = *(void *)(a1 + 44);
  uint64_t v9 = *(void *)(a1 + 28);
  unint64_t v10 = *a1;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = v11 + v8;
  unint64_t v13 = (v9 + v9 * a2) / v10;
  uint64_t v14 = v13 + v8;
  uint64_t v15 = *((void *)a1 + 14);
  uint64_t v16 = *((void *)a1 + 19);
  uint64_t v17 = *((void *)a1 + 15);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 16);
  unint64_t v19 = *((void *)a1 + 13) * a2;
  uint64_t v20 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v21 = **((void **)a1 + 8);
  uint64_t v204 = **((void **)a1 + 7);
  uint64_t v22 = *v20;
  uint64_t v23 = v20[1];
  uint64_t v24 = v20[2];
  uint64_t v202 = *v18;
  uint64_t result = (uint16x8_t *)v18[1];
  uint64_t v26 = v18[2];
  unsigned int v27 = *(_DWORD *)(v16 + 128);
  int v211 = *(_DWORD *)(v16 + 154);
  unsigned int v28 = *(unsigned __int16 *)(v16 + 144);
  unsigned int v29 = *(unsigned __int8 *)(v16 + 132);
  unsigned int v30 = *(unsigned __int16 *)(v16 + 146);
  unsigned int v31 = *(unsigned __int16 *)(v16 + 148);
  unsigned int v32 = *(unsigned __int16 *)(v16 + 150);
  unsigned int v33 = *(unsigned __int16 *)(v16 + 152);
  _S9 = *(float *)(v16 + 36);
  _S24 = *(float *)(v16 + 40);
  _S15 = *(float *)(v16 + 44);
  v37.i32[0] = *(_DWORD *)(v16 + 48);
  v38.i32[0] = *(_DWORD *)(v16 + 52);
  v39.i32[0] = *(_DWORD *)(v16 + 56);
  __int32 v40 = *(_DWORD *)(v16 + 60);
  __int32 v41 = *(_DWORD *)(v16 + 64);
  __int32 v42 = *(_DWORD *)(v16 + 68);
  float v208 = *(float *)(v16 + 72);
  uint64_t v43 = v19 / v10 + v17;
  uint64_t v182 = v21 * v12;
  _S4 = *(float *)(v16 + 76);
  _S5 = *(float *)(v16 + 80);
  _S6 = *(float *)(v16 + 84);
  _S7 = *(float *)(v16 + 88);
  _S16 = *(float *)(v16 + 92);
  _S17 = *(float *)(v16 + 96);
  _S18 = *(float *)(v16 + 100);
  _S19 = *(float *)(v16 + 104);
  long long v209 = 0u;
  long long v210 = 0u;
  do
  {
    unsigned int v52 = 0;
    char v53 = *((unsigned char *)&v211 + v6);
    do
    {
      *((unsigned char *)&v209 + 8 * (((_BYTE)v6 + (v52 >> 3)) & 0x1F) + v52) = v53 + 4 * v52;
      ++v52;
    }
    while (v52 != 8);
    ++v6;
  }
  while (v6 != 4);
  if (v13 != v11)
  {
    uint64_t v54 = 0;
    uint64_t v55 = v14 - v12;
    uint64_t v56 = v16 + 16548;
    uint64_t v57 = v16 + 164;
    float v58 = (float)v28;
    float v59 = (float)v30;
    float v60 = (float)v31;
    float v207 = (float)v32;
    float v61 = (float)v33;
    v37.i32[1] = v40;
    _S26 = 8191.0 / (float)v27;
    *(float32x2_t *)a4.f32 = vmul_f32(v37, (float32x2_t)0x3F0000003F000000);
    v38.i32[1] = v41;
    *(float32x2_t *)a5.i8 = vmul_f32(v38, (float32x2_t)0x3F0000003F000000);
    v39.i32[1] = v42;
    *(float32x2_t *)a6.f32 = vmul_f32(v39, (float32x2_t)0x3F0000003F000000);
    __asm { FCVT            H8, S9 }
    float16x8_t v200 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a4), 0);
    short float v201 = _H8;
    __asm { FCVT            H8, S24 }
    float16x8_t v198 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)a5), 0);
    short float v199 = _H8;
    __asm { FCVT            H8, S15 }
    _Q0 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a6), 0);
    float16x8_t v196 = (float16x8_t)_Q0;
    short float v197 = _H8;
    *(float *)_Q0.i32 = v208;
    __asm { FCVT            H0, S0 }
    short float v195 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S4 }
    short float v194 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S5 }
    short float v193 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S6 }
    short float v192 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S7 }
    short float v191 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S16 }
    short float v190 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S17 }
    short float v189 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S18 }
    short float v188 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S19 }
    short float v187 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v28;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v30;
    int16x8_t v72 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v186 = (float16x8_t)v72;
    *(short float *)v72.i16 = (short float)v31;
    int16x8_t v73 = vdupq_lane_s16(*(int16x4_t *)v72.i8, 0);
    float16x8_t v185 = (float16x8_t)v73;
    *(short float *)v73.i16 = (short float)v32;
    int16x8_t v74 = vdupq_lane_s16(*(int16x4_t *)v73.i8, 0);
    float16x8_t v184 = (float16x8_t)v74;
    *(short float *)v74.i16 = (short float)v33;
    float16x8_t v183 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v74.i8, 0);
    if (v29 >= 0x11) {
      unsigned __int8 v75 = 0;
    }
    else {
      unsigned __int8 v75 = 16 - v29;
    }
    if (v26) {
      uint64_t v76 = v26 + v24 * v43 + 2 * v15;
    }
    else {
      uint64_t v76 = 0;
    }
    if (result) {
      uint64_t result = (uint16x8_t *)((char *)result + 2 * v15 + v23 * v43);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v77 = v202 + v22 * v43 + 2 * v15;
    uint64_t v78 = v204 + v182 + 4 * v206;
    __asm { FCVT            H13, S26 }
    uint16x8_t v80 = (uint16x8_t)vdupq_n_s16(v75);
    float v205 = *(float *)a5.i32;
    unint64_t v81 = a4.i64[0];
    unsigned int v82 = a5.u32[1];
    v83.i32[0] = a6.i32[1];
    float v180 = a6.f32[1];
    float v203 = a6.f32[0];
    float v181 = *(float *)&a5.i32[1];
    v84.i64[0] = 0x9000900090009000;
    v84.i64[1] = 0x9000900090009000;
    float v179 = _S15;
    do
    {
      if ((int)v7 < 8)
      {
        unint64_t v133 = 0;
        uint64_t v89 = result;
        float v88 = (int16x8_t *)v76;
        float v87 = (uint16x8_t *)v77;
        float v86 = (void *)v78;
      }
      else
      {
        int v85 = 0;
        float v86 = (void *)v78;
        float v87 = (uint16x8_t *)v77;
        float v88 = (int16x8_t *)v76;
        uint64_t v89 = result;
        do
        {
          *(void *)&long long v93 = *v86;
          uint64_t v90 = v86[1];
          v91.i64[0] = v86[2];
          uint64_t v92 = v86[3];
          v86 += 4;
          *((void *)&v93 + 1) = v90;
          v91.i64[1] = v92;
          uint16x8_t v94 = v91;
          if (v88)
          {
            int8x8_t v95 = vqtbl2_s8(*(int8x16x2_t *)&v93, *(int8x8_t *)((char *)&v210 + 8));
            *(int8x8_t *)v96.i8 = vzip1_s8(v95, 0);
            v96.u64[1] = (unint64_t)vzip2_s8(v95, 0);
            v97.i64[0] = 0x101010101010101;
            v97.i64[1] = 0x101010101010101;
            int16x8_t v98 = vmulq_s16(v96, v97);
          }
          else
          {
            int16x8_t v98 = 0uLL;
          }
          int8x8_t v99 = vqtbl2_s8(*(int8x16x2_t *)&v93, *(int8x8_t *)&v209);
          *(int8x8_t *)v100.i8 = vqtbl2_s8(*(int8x16x2_t *)&v93, *(int8x8_t *)((char *)&v209 + 8));
          int8x8_t v101 = vqtbl2_s8(*(int8x16x2_t *)&v93, *(int8x8_t *)&v210);
          *(int8x8_t *)v94.i8 = vzip1_s8(v99, 0);
          v94.u64[1] = (unint64_t)vzip2_s8(v99, 0);
          *(int8x8_t *)v102.i8 = vzip1_s8(*(int8x8_t *)v100.i8, 0);
          v102.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v100.i8, 0);
          *(int8x8_t *)v103.i8 = vzip1_s8(v101, 0);
          v103.u64[1] = (unint64_t)vzip2_s8(v101, 0);
          float16x8_t v104 = vmulq_n_f16(vcvtq_f16_u16(v103), _H13);
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v94), _H13), (float16x8_t)0), v84));
          uint32x4_t v106 = vmovl_high_u16(v105);
          uint32x4_t v107 = vmovl_u16(*(uint16x4_t *)v105.i8);
          v108.i16[0] = *(_WORD *)(v57 + 2 * v107.u32[0]);
          v108.i16[1] = *(_WORD *)(v57 + 2 * v107.u32[1]);
          v108.i16[2] = *(_WORD *)(v57 + 2 * v107.u32[2]);
          v108.i16[3] = *(_WORD *)(v57 + 2 * v107.u32[3]);
          v108.i16[4] = *(_WORD *)(v57 + 2 * v106.u32[0]);
          v108.i16[5] = *(_WORD *)(v57 + 2 * v106.u32[1]);
          v108.i16[6] = *(_WORD *)(v57 + 2 * v106.u32[2]);
          v108.i16[7] = *(_WORD *)(v57 + 2 * v106.u32[3]);
          uint16x8_t v109 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v102), _H13), (float16x8_t)0), v84));
          uint32x4_t v110 = vmovl_high_u16(v109);
          uint32x4_t v111 = vmovl_u16(*(uint16x4_t *)v109.i8);
          v100.i16[0] = *(_WORD *)(v57 + 2 * v111.u32[0]);
          v100.i16[1] = *(_WORD *)(v57 + 2 * v111.u32[1]);
          v100.i16[2] = *(_WORD *)(v57 + 2 * v111.u32[2]);
          v100.i16[3] = *(_WORD *)(v57 + 2 * v111.u32[3]);
          v100.i16[4] = *(_WORD *)(v57 + 2 * v110.u32[0]);
          v100.i16[5] = *(_WORD *)(v57 + 2 * v110.u32[1]);
          v100.i16[6] = *(_WORD *)(v57 + 2 * v110.u32[2]);
          v100.i16[7] = *(_WORD *)(v57 + 2 * v110.u32[3]);
          uint16x8_t v112 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v104, (float16x8_t)0), v84));
          uint32x4_t v113 = vmovl_high_u16(v112);
          float16x8_t v114 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v112.i8);
          v114.i16[0] = *(_WORD *)(v57 + 2 * v114.u32[0]);
          v114.i16[1] = *(_WORD *)(v57 + 2 * v114.u32[1]);
          v114.i16[2] = *(_WORD *)(v57 + 2 * v114.u32[2]);
          v114.i16[3] = *(_WORD *)(v57 + 2 * v114.u32[3]);
          v114.i16[4] = *(_WORD *)(v57 + 2 * v113.u32[0]);
          v114.i16[5] = *(_WORD *)(v57 + 2 * v113.u32[1]);
          v114.i16[6] = *(_WORD *)(v57 + 2 * v113.u32[2]);
          v114.i16[7] = *(_WORD *)(v57 + 2 * v113.u32[3]);
          float16x8_t v115 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v108, v192), v100, v191), v114, v190);
          float16x8_t v116 = vmulq_n_f16(v114, v187);
          uint16x8_t v117 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v108, v195), v100, v194), v114, v193), (float16x8_t)0), v84));
          uint32x4_t v118 = vmovl_high_u16(v117);
          uint32x4_t v119 = vmovl_u16(*(uint16x4_t *)v117.i8);
          v104.i16[0] = *(_WORD *)(v56 + 2 * v119.u32[0]);
          v104.i16[1] = *(_WORD *)(v56 + 2 * v119.u32[1]);
          v104.i16[2] = *(_WORD *)(v56 + 2 * v119.u32[2]);
          v104.i16[3] = *(_WORD *)(v56 + 2 * v119.u32[3]);
          v104.i16[4] = *(_WORD *)(v56 + 2 * v118.u32[0]);
          v104.i16[5] = *(_WORD *)(v56 + 2 * v118.u32[1]);
          v104.i16[6] = *(_WORD *)(v56 + 2 * v118.u32[2]);
          float16x8_t v120 = v104;
          v120.i16[7] = *(_WORD *)(v56 + 2 * v118.u32[3]);
          float16x8_t v121 = vmlaq_n_f16(v116, v100, v188);
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v84));
          uint32x4_t v123 = vmovl_high_u16(v122);
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v122.i8);
          v100.i16[0] = *(_WORD *)(v56 + 2 * v124.u32[0]);
          v100.i16[1] = *(_WORD *)(v56 + 2 * v124.u32[1]);
          v100.i16[2] = *(_WORD *)(v56 + 2 * v124.u32[2]);
          v100.i16[3] = *(_WORD *)(v56 + 2 * v124.u32[3]);
          v100.i16[4] = *(_WORD *)(v56 + 2 * v123.u32[0]);
          v100.i16[5] = *(_WORD *)(v56 + 2 * v123.u32[1]);
          v100.i16[6] = *(_WORD *)(v56 + 2 * v123.u32[2]);
          float16x8_t v125 = v100;
          v125.i16[7] = *(_WORD *)(v56 + 2 * v123.u32[3]);
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v121, v108, v189), (float16x8_t)0), v84));
          int16x8_t v127 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v126.i8);
          uint32x4_t v128 = vmovl_high_u16(v126);
          *(void *)&long long v129 = v128.u32[2];
          *((void *)&v129 + 1) = v128.u32[3];
          long long v130 = v129;
          *((void *)&v129 + 1) = v127.u32[3];
          v127.i16[7] = (unint64_t)v127.u32[3] >> 48;
          v127.i16[0] = *(_WORD *)(v56 + 2 * v127.u32[0]);
          v127.i16[1] = *(_WORD *)(v56 + 2 * v127.u32[1]);
          v127.i16[2] = *(_WORD *)(v56 + 2 * v127.u32[2]);
          v127.i16[3] = *(_WORD *)(v56 + 2 * *((void *)&v129 + 1));
          v127.i16[4] = *(_WORD *)(v56 + 2 * v128.u32[0]);
          v127.i16[5] = *(_WORD *)(v56 + 2 * v128.u32[1]);
          v127.i16[6] = *(_WORD *)(v56 + 2 * v130);
          float16x8_t v131 = (float16x8_t)v127;
          v131.i16[7] = *(_WORD *)(v56 + 2 * *((void *)&v130 + 1));
          *v87++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v71, v120, v201), v125, v199), v131, v197), v71), v185)), v80);
          int16x8_t v132 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v104, (int16x8_t)v100), (float16x8_t)vuzp2q_s16((int16x8_t)v120, (int16x8_t)v125));
          a5 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v186, v200, (float16x8_t)vzip1q_s16(v132, v132)), v198, (float16x8_t)vzip2q_s16(v132, v132)), v196, vaddq_f16((float16x8_t)vtrn1q_s16(v127, v127), (float16x8_t)vtrn2q_s16((int16x8_t)v131, (int16x8_t)v131)));
          unsigned int v82 = v183.i32[0];
          uint16x8_t v83 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(a5, v184), v183)), v80);
          *v89++ = v83;
          if (v88) {
            *v88++ = v98;
          }
          _S15 = v179;
          v85 += 8;
        }
        while (v85 < (int)v7 - 7);
        unint64_t v133 = v7 & 0xFFFFFFF8;
      }
      if (v7 > v133)
      {
        uint16x8_t v134 = (char *)v86 + 4;
        do
        {
          int16x8_t v135 = &v134[v211];
          v83.i8[0] = *(v135 - 4);
          uint32x4_t v136 = &v134[BYTE1(v211)];
          LOBYTE(v82) = *(v136 - 4);
          long long v137 = &v134[BYTE2(v211)];
          a5.i8[0] = *(v137 - 4);
          unsigned int v138 = llroundf(fminf(fmaxf(_S26 * (float)v83.u32[0], 0.0), 8191.0));
          _S0 = _S26 * (float)a5.u32[0];
          _H2 = *(_WORD *)(v57 + 2 * v138);
          __asm { FCVT            S2, H2 }
          _H1 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S26 * (float)v82, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          float v145 = (float)((float)(_S4 * _S1) + (float)(_S2 * v208)) + (float)(_S0 * _S5);
          float v146 = (float)((float)(_S7 * _S1) + (float)(_S2 * _S6)) + (float)(_S0 * _S16);
          _S1 = (float)(_S18 * _S1) + (float)(_S2 * _S17);
          float v148 = fminf(fmaxf(v145, 0.0), 8191.0);
          _S0 = _S1 + (float)(_S0 * _S19);
          LOWORD(_S1) = *(_WORD *)(v56 + 2 * llroundf(v148));
          __asm { FCVT            S27, H1 }
          _S1 = fminf(fmaxf(v146, 0.0), 8191.0);
          LOWORD(_S1) = *(_WORD *)(v56 + 2 * llroundf(_S1));
          __asm { FCVT            S29, H1 }
          LOWORD(_S0) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S30, H0 }
          float v154 = (float)((float)((float)(_S24 * _S29) + (float)(_S9 * _S27)) + (float)(_S15 * _S30)) + v58;
          float v155 = v60;
          if (v154 <= v60)
          {
            float v155 = (float)((float)((float)(_S24 * _S29) + (float)(_S9 * _S27)) + (float)(_S15 * _S30)) + v58;
            if (v154 < v58) {
              float v155 = v58;
            }
          }
          float v156 = &v134[HIBYTE(v211)];
          __int16 v157 = *(v156 - 4);
          LOBYTE(v154) = *v135;
          LOBYTE(_S1) = *v136;
          LOBYTE(v148) = *v137;
          __int16 v158 = *v156;
          _H0 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S26 * (float)LODWORD(v154), 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S26 * (float)LODWORD(_S1), 0.0), 8191.0)));
          _H2 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S26 * (float)LODWORD(v148), 0.0), 8191.0)));
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H2
          }
          float v165 = (float)((float)(_S4 * _S1) + (float)(_S0 * v208)) + (float)(_S2 * _S5);
          float v166 = (float)((float)(_S7 * _S1) + (float)(_S0 * _S6)) + (float)(_S2 * _S16);
          _S1 = (float)((float)(_S18 * _S1) + (float)(_S0 * _S17)) + (float)(_S2 * _S19);
          LOWORD(_S0) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S2) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          LOWORD(_S1) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S1, H1
          }
          float v171 = (float)((float)((float)(_S24 * _S2) + (float)(_S9 * _S0)) + (float)(_S15 * _S1)) + v58;
          v87->i16[0] = llroundf(v155) << v75;
          float v172 = v60;
          if (v171 <= v60)
          {
            float v172 = (float)((float)((float)(_S24 * _S2) + (float)(_S9 * _S0)) + (float)(_S15 * _S1)) + v58;
            if (v171 < v58) {
              float v172 = v58;
            }
          }
          v87->i16[1] = llroundf(v172) << v75;
          float v173 = _S27 + _S0;
          float v174 = _S29 + _S2;
          float v175 = _S30 + _S1;
          float v176 = (float)((float)(v59 + (float)(v173 * *(float *)&v81)) + (float)(v174 * v205)) + (float)(v175 * v203);
          float v177 = v61;
          if (v176 <= v61)
          {
            float v177 = (float)((float)(v59 + (float)(v173 * *(float *)&v81)) + (float)(v174 * v205)) + (float)(v175 * v203);
            if (v176 < v207) {
              float v177 = v207;
            }
          }
          float v178 = (float)(v59 + (float)(v173 * *((float *)&v81 + 1))) + (float)(v174 * v181);
          *(float *)a5.i32 = v180;
          *(float *)v83.i32 = v178 + (float)(v175 * v180);
          v89->i16[0] = llroundf(v177) << v75;
          unsigned int v82 = LODWORD(v61);
          if (*(float *)v83.i32 <= v61)
          {
            unsigned int v82 = v83.i32[0];
            if (*(float *)v83.i32 < v207) {
              unsigned int v82 = LODWORD(v207);
            }
          }
          v89->i16[1] = llroundf(*(float *)&v82) << v75;
          if (v88)
          {
            v88->i16[0] = v157 | (v157 << 8);
            v88->i16[1] = v158 | (v158 << 8);
            float v88 = (int16x8_t *)((char *)v88 + 4);
          }
          v134 += 8;
          v133 += 2;
          float v87 = (uint16x8_t *)((char *)v87 + 4);
          uint64_t v89 = (uint16x8_t *)((char *)v89 + 4);
        }
        while (v7 > v133);
      }
      v78 += v21;
      v77 += v22;
      uint64_t result = (uint16x8_t *)((char *)result + v23);
      v76 += v24;
      ++v54;
    }
    while (v54 != v55);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = *result;
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (v14 != v13)
  {
    uint64_t v15 = 0;
    unint64_t v16 = *(void *)(result + 20);
    unint64_t v17 = v13 + *(void *)(result + 44);
    unint64_t v18 = v14 - v13;
    uint64_t v19 = *((void *)result + 19);
    uint64_t v20 = (uint64_t *)*((void *)result + 17);
    uint64_t v21 = (void *)*((void *)result + 7);
    uint64_t v22 = **((void **)result + 8);
    uint64_t v23 = *v20;
    uint64_t v24 = v20[1];
    uint64_t v25 = v20[2];
    float v26 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    LOWORD(a5) = *(_WORD *)(v19 + 144);
    float v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v19 + 146);
    float v28 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v19 + 148);
    float v29 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v19 + 150);
    float v30 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v19 + 152);
    float v31 = (float)LODWORD(a9);
    float v32 = *(float *)(v19 + 36);
    float v33 = *(float *)(v19 + 40);
    float v34 = *(float *)(v19 + 44);
    float v35 = 0.5;
    float v113 = *(float *)(v19 + 52) * 0.5;
    float v114 = *(float *)(v19 + 48) * 0.5;
    float v112 = *(float *)(v19 + 56) * 0.5;
    float v36 = *(float *)(v19 + 60) * 0.5;
    float v37 = *(float *)(v19 + 64) * 0.5;
    float v38 = *(float *)(v19 + 68);
    float v39 = *(float *)(v19 + 72);
    float v40 = v38 * 0.5;
    float v41 = *(float *)(v19 + 76);
    float v42 = *(float *)(v19 + 80);
    float v43 = *(float *)(v19 + 84);
    float v44 = *(float *)(v19 + 88);
    float v45 = *(float *)(v19 + 92);
    float v46 = *(float *)(v19 + 96);
    float v48 = *(float *)(v19 + 100);
    float v47 = *(float *)(v19 + 104);
    uint64_t v49 = v19 + 164;
    uint64_t v50 = v19 + 16548;
    uint64_t v51 = (uint64_t *)*((void *)result + 16);
    uint64_t v52 = *((void *)result + 14);
    unint64_t v53 = *((void *)result + 13) * a2 / v12 + *((void *)result + 15);
    uint64_t v54 = *(void *)(result + 36);
    unsigned int v55 = *(unsigned __int8 *)(v19 + 132);
    if (v55 >= 0x11) {
      char v56 = 0;
    }
    else {
      char v56 = 16 - v55;
    }
    uint64_t v57 = *(unsigned __int8 *)(v19 + 157);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v19 + 156);
    uint64_t v58 = *(unsigned __int8 *)(v19 + 155);
    uint64_t v59 = *(unsigned __int8 *)(v19 + 154);
    uint64_t v60 = v51[2];
    if (v60) {
      uint64_t v61 = v60 + v53 * v25 + 2 * v52;
    }
    else {
      uint64_t v61 = 0;
    }
    uint64_t v63 = *v51;
    uint64_t v62 = v51[1];
    uint64_t v64 = v62 + v53 * v24 + 2 * v52;
    if (!v62) {
      uint64_t v64 = 0;
    }
    uint64_t v65 = v63 + v53 * v23 + 2 * v52;
    uint64_t v66 = *v21 + v22 * v17 + 4 * v54;
    char v67 = v56;
    do
    {
      if (v16)
      {
        unint64_t v68 = 0;
        uint64_t v69 = v66;
        uint64_t v70 = (_WORD *)v61;
        float16x8_t v71 = (_WORD *)v65;
        do
        {
          LOBYTE(v38) = *(unsigned char *)(v69 + v59);
          LOBYTE(v35) = *(unsigned char *)(v69 + v58);
          LOBYTE(v9) = result[v69];
          unsigned int v72 = llroundf(fminf(fmaxf(v26 * (float)LODWORD(v38), 0.0), 8191.0));
          _S18 = v26 * (float)LODWORD(v9);
          _H10 = *(_WORD *)(v49 + 2 * v72);
          __asm { FCVT            S10, H10 }
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(v35), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S18) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          float v83 = (float)((float)(v41 * _S19) + (float)(_S10 * v39)) + (float)(_S18 * v42);
          float v84 = (float)((float)(v44 * _S19) + (float)(_S10 * v43)) + (float)(_S18 * v45);
          _S18 = (float)((float)(v48 * _S19) + (float)(_S10 * v46)) + (float)(_S18 * v47);
          LOWORD(_S19) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S10, H19 }
          _S19 = fminf(fmaxf(v84, 0.0), 8191.0);
          LOWORD(_S19) = *(_WORD *)(v50 + 2 * llroundf(_S19));
          __asm { FCVT            S11, H19 }
          LOWORD(_S18) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S12, H18 }
          float v90 = (float)((float)((float)(v33 * _S11) + (float)(v32 * _S10)) + (float)(v34 * _S12)) + v27;
          float v91 = v29;
          if (v90 <= v29)
          {
            float v91 = (float)((float)((float)(v33 * _S11) + (float)(v32 * _S10)) + (float)(v34 * _S12)) + v27;
            if (v90 < v27) {
              float v91 = v27;
            }
          }
          __int16 v92 = *(unsigned __int8 *)(v69 + v57);
          LOBYTE(v90) = *(unsigned char *)(v69 + 4 + v59);
          LOBYTE(_S19) = *(unsigned char *)(v69 + 4 + v58);
          LOBYTE(_S14) = result[v69 + 4];
          __int16 v93 = *(unsigned __int8 *)(v69 + 4 + v57);
          _H18 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(v90), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(_S19), 0.0), 8191.0)));
          _H14 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(_S14), 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H19
            FCVT            S14, H14
          }
          float v100 = (float)((float)(v41 * _S19) + (float)(_S18 * v39)) + (float)(_S14 * v42);
          _S20 = (float)((float)(v44 * _S19) + (float)(_S18 * v43)) + (float)(_S14 * v45);
          float v102 = (float)((float)(v48 * _S19) + (float)(_S18 * v46)) + (float)(_S14 * v47);
          LOWORD(_S19) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __asm { FCVT            S14, H19 }
          LOWORD(_S19) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          LOWORD(_S20) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H19
            FCVT            S15, H20
          }
          float v105 = (float)((float)((float)(v33 * _S18) + (float)(v32 * _S14)) + (float)(v34 * _S15)) + v27;
          _WORD *v71 = llroundf(v91) << v67;
          float v106 = v29;
          if (v105 <= v29)
          {
            float v106 = (float)((float)((float)(v33 * _S18) + (float)(v32 * _S14)) + (float)(v34 * _S15)) + v27;
            if (v105 < v27) {
              float v106 = v27;
            }
          }
          v71[1] = llroundf(v106) << v67;
          float v9 = _S10 + _S14;
          float v107 = _S11 + _S18;
          float v108 = _S12 + _S15;
          float v109 = (float)((float)(v28 + (float)(v9 * v114)) + (float)(v107 * v113))
               + (float)((float)(_S12 + _S15) * v112);
          float v110 = v31;
          if (v109 <= v31)
          {
            float v110 = v109;
            if (v109 < v30) {
              float v110 = v30;
            }
          }
          uint32x4_t v111 = (_WORD *)(v64 + 2 * v68);
          float v38 = (float)((float)(v28 + (float)(v9 * v36)) + (float)(v107 * v37)) + (float)(v108 * v40);
          *uint32x4_t v111 = llroundf(v110) << v67;
          float v35 = v31;
          if (v38 <= v31)
          {
            float v35 = v38;
            if (v38 < v30) {
              float v35 = v30;
            }
          }
          v111[1] = llroundf(v35) << v67;
          if (v70)
          {
            _WORD *v70 = v92 | (v92 << 8);
            v70[1] = v93 | (v93 << 8);
            v70 += 2;
          }
          v69 += 8;
          v68 += 2;
          v71 += 2;
        }
        while (v16 > v68);
      }
      v66 += v22;
      v65 += v23;
      v64 += v24;
      v61 += v25;
      ++v15;
    }
    while (v15 != v18);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_xf422_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_BGRA_rgb_xf422_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v5 = 0;
  unint64_t v6 = *(void *)(a1 + 20);
  uint64_t v120 = *(void *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 44);
  uint64_t v8 = *(void *)(a1 + 28);
  unint64_t v9 = *a1;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = v10 + v7;
  unint64_t v12 = (v8 + v8 * a2) / v9;
  uint64_t v13 = v12 + v7;
  uint64_t v14 = *((void *)a1 + 14);
  unint64_t v15 = *((void *)a1 + 13) * a2;
  uint64_t v16 = *((void *)a1 + 19);
  uint64_t v17 = *((void *)a1 + 15);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v20 = **((void **)a1 + 8);
  uint64_t v119 = **((void **)a1 + 7);
  uint64_t v21 = *v19;
  uint64_t v22 = v19[1];
  uint64_t v23 = v19[2];
  uint64_t v118 = *v18;
  uint64_t v25 = v18[1];
  uint64_t v24 = v18[2];
  unsigned int v26 = *(_DWORD *)(v16 + 128);
  unsigned int v27 = *(_DWORD *)(v16 + 136);
  int v129 = *(_DWORD *)(v16 + 154);
  unsigned int v28 = *(unsigned __int16 *)(v16 + 144);
  unsigned int v29 = *(unsigned __int8 *)(v16 + 132);
  unsigned int v30 = *(unsigned __int16 *)(v16 + 146);
  unsigned int v31 = *(unsigned __int16 *)(v16 + 148);
  unsigned int v32 = *(unsigned __int16 *)(v16 + 150);
  unsigned int v33 = *(unsigned __int16 *)(v16 + 152);
  uint64_t v34 = v15 / v9 + v17;
  uint64_t v117 = v20 * v11;
  _S0 = *(float *)(v16 + 36);
  _S1 = *(float *)(v16 + 40);
  _S2 = *(float *)(v16 + 44);
  v38.i32[0] = *(_DWORD *)(v16 + 48);
  v2.i32[0] = *(_DWORD *)(v16 + 52);
  v3.i32[0] = *(_DWORD *)(v16 + 56);
  __int32 v40 = *(_DWORD *)(v16 + 60);
  __int32 v39 = *(_DWORD *)(v16 + 64);
  v41.i32[0] = *(_DWORD *)(v16 + 68);
  long long v127 = 0u;
  long long v128 = 0u;
  do
  {
    LODWORD(result) = 0;
    char v43 = *((unsigned char *)&v129 + v5);
    do
    {
      *((unsigned char *)&v127 + 8 * (((_BYTE)v5 + (result >> 3)) & 0x1F) + result) = v43 + 4 * result;
      uint64_t result = (result + 1);
    }
    while (result != 8);
    ++v5;
  }
  while (v5 != 4);
  if (v12 != v10)
  {
    uint64_t v44 = 0;
    uint64_t v45 = v13 - v11;
    _S3 = (float)v27 / (float)v26;
    float v47 = (float)v28;
    float v48 = (float)v30;
    float v49 = (float)v31;
    float v50 = (float)v32;
    float v51 = (float)v33;
    v38.i32[1] = v40;
    *(float32x2_t *)v4.f32 = vmul_f32(v38, (float32x2_t)0x3F0000003F000000);
    v2.i32[1] = v39;
    v3.i32[1] = v41.i32[0];
    *(float32x2_t *)v2.f32 = vmul_f32(*(float32x2_t *)v2.f32, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)v3.f32 = vmul_f32(*(float32x2_t *)v3.f32, (float32x2_t)0x3F0000003F000000);
    __asm { FCVT            H8, S0 }
    short float v126 = _H8;
    __asm { FCVT            H8, S1 }
    float16x8_t v124 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    short float v125 = _H8;
    __asm { FCVT            H8, S2 }
    float16x8_t v122 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v2), 0);
    short float v123 = _H8;
    int32x4_t v63 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    float16x8_t v121 = (float16x8_t)v63;
    *(short float *)v63.i16 = (short float)v28;
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    *(short float *)v63.i16 = (short float)v30;
    float16x8_t v60 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    *(short float *)v63.i16 = (short float)v31;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    *(short float *)v63.i16 = (short float)v32;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    *(short float *)v63.i16 = (short float)v33;
    float16x8_t v64 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    if (v29 >= 0x11) {
      unsigned __int8 v65 = 0;
    }
    else {
      unsigned __int8 v65 = 16 - v29;
    }
    if (v24) {
      uint64_t v66 = v24 + v23 * v34 + 2 * v14;
    }
    else {
      uint64_t v66 = 0;
    }
    if (v25) {
      uint64_t v67 = v25 + v22 * v34 + 2 * v14;
    }
    else {
      uint64_t v67 = 0;
    }
    uint64_t v68 = v118 + v21 * v34 + 2 * v14;
    uint64_t result = v119 + v117 + 4 * v120;
    __asm { FCVT            H11, S3 }
    unsigned __int8 v70 = v65;
    uint16x8_t v71 = (uint16x8_t)vdupq_n_s16(v65);
    uint64_t v72 = v2.i64[0];
    uint64_t v73 = v3.i64[0];
    do
    {
      if ((int)v6 < 8)
      {
        unint64_t v97 = 0;
        uint64_t v78 = (int32x4_t *)v67;
        uint64_t v77 = (int16x8_t *)v66;
        uint64_t v76 = (uint16x8_t *)v68;
        unsigned __int8 v75 = (void *)result;
      }
      else
      {
        int v74 = 0;
        unsigned __int8 v75 = (void *)result;
        uint64_t v76 = (uint16x8_t *)v68;
        uint64_t v77 = (int16x8_t *)v66;
        uint64_t v78 = (int32x4_t *)v67;
        do
        {
          *(void *)&long long v82 = *v75;
          uint64_t v79 = v75[1];
          v80.i64[0] = v75[2];
          uint64_t v81 = v75[3];
          v75 += 4;
          *((void *)&v82 + 1) = v79;
          v80.i64[1] = v81;
          uint16x8_t v83 = v80;
          if (v77)
          {
            int8x8_t v84 = vqtbl2_s8(*(int8x16x2_t *)&v82, *(int8x8_t *)((char *)&v128 + 8));
            *(int8x8_t *)v85.i8 = vzip1_s8(v84, 0);
            v85.u64[1] = (unint64_t)vzip2_s8(v84, 0);
            v86.i64[0] = 0x101010101010101;
            v86.i64[1] = 0x101010101010101;
            int16x8_t v87 = vmulq_s16(v85, v86);
          }
          else
          {
            int16x8_t v87 = 0uLL;
          }
          int8x8_t v88 = vqtbl2_s8(*(int8x16x2_t *)&v82, *(int8x8_t *)&v127);
          int8x8_t v89 = vqtbl2_s8(*(int8x16x2_t *)&v82, *(int8x8_t *)((char *)&v127 + 8));
          int8x8_t v90 = vqtbl2_s8(*(int8x16x2_t *)&v82, *(int8x8_t *)&v128);
          *(int8x8_t *)v91.i8 = vzip1_s8(v88, 0);
          v91.u64[1] = (unint64_t)vzip2_s8(v88, 0);
          *(int8x8_t *)v83.i8 = vzip1_s8(v89, 0);
          v83.u64[1] = (unint64_t)vzip2_s8(v89, 0);
          *(int8x8_t *)v92.i8 = vzip1_s8(v90, 0);
          v92.u64[1] = (unint64_t)vzip2_s8(v90, 0);
          float16x8_t v93 = vmulq_n_f16(vcvtq_f16_u16(v91), _H11);
          float16x8_t v94 = vmulq_n_f16(vcvtq_f16_u16(v83), _H11);
          float16x8_t v95 = vmulq_n_f16(vcvtq_f16_u16(v92), _H11);
          *v76++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v59, v93, v126), v94, v125), v95, v123), v59), v61)), v71);
          float32x4_t v2 = (float32x4_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v93, (int16x8_t)v94), (float16x8_t)vuzp2q_s16((int16x8_t)v93, (int16x8_t)v94));
          float16x8_t v96 = vmlaq_f16(vmlaq_f16(v60, v124, (float16x8_t)vzip1q_s16((int16x8_t)v2, (int16x8_t)v2)), v122, (float16x8_t)vzip2q_s16((int16x8_t)v2, (int16x8_t)v2));
          v2.i32[0] = v121.i32[0];
          float16x8_t v41 = vmlaq_f16(v96, v121, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v95, (int16x8_t)v95), (float16x8_t)vtrn2q_s16((int16x8_t)v95, (int16x8_t)v95)));
          int32x4_t v63 = (int32x4_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(v41, v62), v64)), v71);
          *v78++ = v63;
          if (v77) {
            *v77++ = v87;
          }
          v74 += 8;
        }
        while (v74 < (int)v6 - 7);
        unint64_t v97 = v6 & 0xFFFFFFF8;
      }
      if (v6 > v97)
      {
        int16x8_t v98 = (char *)v75 + 4;
        do
        {
          int8x8_t v99 = &v98[v129];
          v63.i8[0] = *(v99 - 4);
          *(float *)&unsigned int v100 = (float)v63.u32[0];
          float v101 = _S3 * *(float *)&v100;
          float v102 = &v98[BYTE1(v129)];
          LOBYTE(v100) = *(v102 - 4);
          *(float *)&unsigned int v103 = (float)v100;
          float v104 = _S3 * *(float *)&v103;
          float v105 = &v98[BYTE2(v129)];
          LOBYTE(v103) = *(v105 - 4);
          float v106 = _S3 * (float)v103;
          *(float *)v63.i32 = (float)((float)((float)(_S1 * v104) + (float)(_S0 * v101)) + (float)(_S2 * v106)) + v47;
          float v107 = v49;
          if (*(float *)v63.i32 <= v49)
          {
            float v107 = (float)((float)((float)(_S1 * v104) + (float)(_S0 * v101)) + (float)(_S2 * v106)) + v47;
            if (*(float *)v63.i32 < v47) {
              float v107 = v47;
            }
          }
          float v108 = &v98[HIBYTE(v129)];
          __int16 v109 = *(v108 - 4);
          v63.i8[0] = *v99;
          *(float *)v63.i32 = _S3 * (float)v63.u32[0];
          v2.i8[0] = *v102;
          v2.f32[0] = _S3 * (float)v2.u32[0];
          v41.i8[0] = *v105;
          *(float *)v41.i32 = _S3 * (float)v41.u32[0];
          __int16 v110 = *v108;
          float v111 = (float)((float)((float)(_S1 * v2.f32[0]) + (float)(_S0 * *(float *)v63.i32))
                       + (float)(_S2 * *(float *)v41.i32))
               + v47;
          v76->i16[0] = llroundf(v107) << v70;
          float v112 = v49;
          if (v111 <= v49)
          {
            float v112 = (float)((float)((float)(_S1 * v2.f32[0]) + (float)(_S0 * *(float *)v63.i32))
                         + (float)(_S2 * *(float *)v41.i32))
                 + v47;
            if (v111 < v47) {
              float v112 = v47;
            }
          }
          v76->i16[1] = llroundf(v112) << v70;
          float v113 = v101 + *(float *)v63.i32;
          float v114 = v104 + v2.f32[0];
          float v115 = v106 + *(float *)v41.i32;
          float v116 = (float)((float)(v48 + (float)(v113 * v4.f32[0])) + (float)(v114 * *(float *)&v72))
               + (float)((float)(v106 + *(float *)v41.i32) * *(float *)&v73);
          *(float *)v41.i32 = v51;
          if (v116 <= v51)
          {
            *(float *)v41.i32 = v116;
            if (v116 < v50) {
              *(float *)v41.i32 = v50;
            }
          }
          *(float *)v63.i32 = (float)((float)(v48 + (float)(v113 * v4.f32[1])) + (float)(v114 * *((float *)&v72 + 1)))
                            + (float)(v115 * *((float *)&v73 + 1));
          v78->i16[0] = llroundf(*(float *)v41.i32) << v70;
          v2.f32[0] = v51;
          if (*(float *)v63.i32 <= v51)
          {
            v2.i32[0] = v63.i32[0];
            if (*(float *)v63.i32 < v50) {
              v2.f32[0] = v50;
            }
          }
          v78->i16[1] = llroundf(v2.f32[0]) << v70;
          if (v77)
          {
            v77->i16[0] = v109 | (v109 << 8);
            v77->i16[1] = v110 | (v110 << 8);
            uint64_t v77 = (int16x8_t *)((char *)v77 + 4);
          }
          v98 += 8;
          v97 += 2;
          uint64_t v76 = (uint16x8_t *)((char *)v76 + 4);
          uint64_t v78 = (int32x4_t *)((char *)v78 + 4);
        }
        while (v6 > v97);
      }
      result += v20;
      v68 += v21;
      v67 += v22;
      v66 += v23;
      ++v44;
    }
    while (v44 != v45);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v12 = *(void *)(result + 28);
  unint64_t v13 = *result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = (v12 + v12 * a2) / v13;
  if (v15 != v14)
  {
    uint64_t v16 = 0;
    unint64_t v17 = *(void *)(result + 20);
    unint64_t v18 = v14 + *(void *)(result + 44);
    unint64_t v19 = v15 - v14;
    uint64_t v20 = *((void *)result + 19);
    uint64_t v21 = (uint64_t *)*((void *)result + 17);
    size_t v22 = (void *)*((void *)result + 7);
    uint64_t v23 = **((void **)result + 8);
    uint64_t v24 = *v21;
    uint64_t v25 = v21[1];
    uint64_t v26 = v21[2];
    *(float *)&unsigned int v27 = (float)*(unsigned int *)(v20 + 136);
    float v28 = *(float *)&v27 / (float)*(unsigned int *)(v20 + 128);
    LOWORD(v27) = *(_WORD *)(v20 + 144);
    float v29 = (float)v27;
    LOWORD(a5) = *(_WORD *)(v20 + 146);
    float v30 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v20 + 148);
    float v31 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v20 + 150);
    float v32 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v20 + 152);
    float v33 = (float)LODWORD(a8);
    float v34 = *(float *)(v20 + 36);
    float v35 = *(float *)(v20 + 40);
    float v36 = *(float *)(v20 + 44);
    float v37 = *(float *)(v20 + 48) * 0.5;
    float v38 = *(float *)(v20 + 52) * 0.5;
    float v39 = *(float *)(v20 + 56) * 0.5;
    float v40 = *(float *)(v20 + 60) * 0.5;
    float v41 = *(float *)(v20 + 64) * 0.5;
    float v42 = *(float *)(v20 + 68);
    float v43 = v42 * 0.5;
    uint64_t v44 = (void *)*((void *)result + 16);
    uint64_t v45 = *((void *)result + 14);
    unint64_t v46 = *((void *)result + 13) * a2 / v13 + *((void *)result + 15);
    uint64_t v47 = *(void *)(result + 36);
    unsigned int v48 = *(unsigned __int8 *)(v20 + 132);
    if (v48 >= 0x11) {
      char v49 = 0;
    }
    else {
      char v49 = 16 - v48;
    }
    uint64_t v50 = *(unsigned __int8 *)(v20 + 157);
    uint64_t v51 = *(unsigned __int8 *)(v20 + 156);
    uint64_t v52 = *(unsigned __int8 *)(v20 + 155);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v20 + 154);
    uint64_t v53 = v44[2];
    if (v53) {
      uint64_t v54 = v53 + v46 * v26 + 2 * v45;
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v57 = v44;
    uint64_t v56 = *v44;
    uint64_t v55 = v57[1];
    BOOL v58 = v55 == 0;
    uint64_t v59 = v55 + v46 * v25 + 2 * v45;
    if (v58) {
      uint64_t v59 = 0;
    }
    uint64_t v60 = v56 + v46 * v24 + 2 * v45;
    uint64_t v61 = *v22 + v23 * v18 + 4 * v47;
    char v62 = v49;
    do
    {
      if (v17)
      {
        unint64_t v63 = 0;
        uint64_t v64 = v61;
        unsigned __int8 v65 = (_WORD *)v54;
        uint64_t v66 = (_WORD *)v60;
        do
        {
          LOBYTE(v42) = result[v64];
          float v67 = v28 * (float)LODWORD(v42);
          LOBYTE(v8) = *(unsigned char *)(v64 + v52);
          float v68 = v28 * (float)LODWORD(v8);
          LOBYTE(v9) = *(unsigned char *)(v64 + v51);
          float v69 = v28 * (float)LODWORD(v9);
          float v70 = (float)((float)((float)(v35 * v68) + (float)(v34 * v67)) + (float)(v36 * v69)) + v29;
          float v71 = v31;
          if (v70 <= v31)
          {
            float v71 = (float)((float)((float)(v35 * v68) + (float)(v34 * v67)) + (float)(v36 * v69)) + v29;
            if (v70 < v29) {
              float v71 = v29;
            }
          }
          __int16 v72 = *(unsigned __int8 *)(v64 + v50);
          LOBYTE(v70) = result[v64 + 4];
          float v73 = v28 * (float)LODWORD(v70);
          LOBYTE(v10) = *(unsigned char *)(v64 + 4 + v52);
          float v74 = v28 * (float)LODWORD(v10);
          LOBYTE(v11) = *(unsigned char *)(v64 + 4 + v51);
          float v11 = v28 * (float)LODWORD(v11);
          __int16 v75 = *(unsigned __int8 *)(v64 + 4 + v50);
          float v76 = (float)((float)((float)(v35 * v74) + (float)(v34 * v73)) + (float)(v36 * v11)) + v29;
          *uint64_t v66 = llroundf(v71) << v62;
          float v77 = v31;
          if (v76 <= v31)
          {
            float v77 = (float)((float)((float)(v35 * v74) + (float)(v34 * v73)) + (float)(v36 * v11)) + v29;
            if (v76 < v29) {
              float v77 = v29;
            }
          }
          v66[1] = llroundf(v77) << v62;
          float v78 = v67 + v73;
          float v79 = v68 + v74;
          float v9 = v69 + v11;
          float v10 = (float)((float)(v30 + (float)(v78 * v37)) + (float)(v79 * v38)) + (float)(v9 * v39);
          float v80 = v33;
          if (v10 <= v33)
          {
            float v80 = (float)((float)(v30 + (float)(v78 * v37)) + (float)(v79 * v38)) + (float)(v9 * v39);
            if (v10 < v32) {
              float v80 = v32;
            }
          }
          uint64_t v81 = (_WORD *)(v59 + 2 * v63);
          float v42 = (float)((float)(v30 + (float)(v78 * v40)) + (float)(v79 * v41)) + (float)(v9 * v43);
          *uint64_t v81 = llroundf(v80) << v62;
          float v8 = v33;
          if (v42 <= v33)
          {
            float v8 = v42;
            if (v42 < v32) {
              float v8 = v32;
            }
          }
          v81[1] = llroundf(v8) << v62;
          if (v65)
          {
            *unsigned __int8 v65 = v72 | (v72 << 8);
            v65[1] = v75 | (v75 << 8);
            v65 += 2;
          }
          v64 += 8;
          v63 += 2;
          v66 += 2;
        }
        while (v17 > v63);
      }
      v61 += v23;
      v60 += v24;
      v59 += v25;
      v54 += v26;
      ++v16;
    }
    while (v16 != v19);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = *result;
  unint64_t v13 = v11 * a2 / v12;
  uint64_t v14 = *((void *)result + 14);
  unint64_t v15 = (void *)*((void *)result + 16);
  unint64_t v16 = *((void *)result + 13) * a2 / v12 + *((void *)result + 15);
  uint64_t v17 = (uint64_t *)*((void *)result + 17);
  unint64_t v18 = (v11 + v11 * a2) / v12;
  uint64_t v19 = (_WORD *)v15[1];
  if (v19) {
    uint64_t v19 = (_WORD *)((char *)v19 + 2 * v14 + v17[1] * v16);
  }
  if (v18 != v13)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *(void *)(result + 44);
    uint64_t v22 = v13 + v21;
    uint64_t v23 = **((void **)result + 8);
    uint64_t v24 = *v17;
    uint64_t v25 = *((void *)result + 19);
    uint64_t v26 = *v15 + v24 * v16;
    unint64_t v27 = *(void *)(result + 20);
    uint64_t v28 = v18 + v21;
    uint64_t v29 = **((void **)result + 7) + v23 * v22 + 4 * *(void *)(result + 36);
    float v30 = (_WORD *)(v26 + 2 * v14);
    uint64_t v31 = v28 - v22;
    LOWORD(a5) = *(_WORD *)(v25 + 144);
    LOWORD(a6) = *(_WORD *)(v25 + 146);
    LOWORD(a7) = *(_WORD *)(v25 + 148);
    LOWORD(a8) = *(_WORD *)(v25 + 150);
    LOWORD(a9) = *(_WORD *)(v25 + 152);
    float v32 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    float v33 = (float)LODWORD(a5);
    float v34 = (float)LODWORD(a6);
    float v35 = (float)LODWORD(a7);
    float v36 = (float)LODWORD(a8);
    float v37 = (float)LODWORD(a9);
    float v38 = *(float *)(v25 + 36);
    float v39 = *(float *)(v25 + 40);
    float v40 = *(float *)(v25 + 44);
    float v41 = 0.5;
    float v131 = *(float *)(v25 + 48) * 0.5;
    float v130 = *(float *)(v25 + 52) * 0.5;
    float v129 = *(float *)(v25 + 56) * 0.5;
    float v42 = *(float *)(v25 + 64);
    float v128 = *(float *)(v25 + 60) * 0.5;
    float v127 = v42 * 0.5;
    float v43 = *(float *)(v25 + 72);
    float v44 = *(float *)(v25 + 68) * 0.5;
    float v126 = v44;
    float v45 = *(float *)(v25 + 76);
    float v46 = *(float *)(v25 + 80);
    float v47 = *(float *)(v25 + 84);
    float v48 = *(float *)(v25 + 88);
    float v49 = *(float *)(v25 + 92);
    float v50 = *(float *)(v25 + 96);
    float v52 = *(float *)(v25 + 100);
    float v51 = *(float *)(v25 + 104);
    uint64_t v53 = v25 + 164;
    uint64_t v54 = v25 + 16548;
    uint64_t result = (unsigned __int8 *)(v25 + 32932);
    float v55 = *(float *)(v25 + 108);
    float v56 = *(float *)(v25 + 112);
    float v57 = *(float *)(v25 + 116);
    float v58 = *(float *)(v25 + 120);
    uint64_t v59 = *(unsigned __int8 *)(v25 + 157);
    uint64_t v60 = *(unsigned __int8 *)(v25 + 156);
    uint64_t v61 = *(unsigned __int8 *)(v25 + 155);
    uint64_t v62 = *(unsigned __int8 *)(v25 + 154);
    do
    {
      if (v27)
      {
        unint64_t v63 = 0;
        uint64_t v64 = v19;
        unsigned __int8 v65 = v30;
        uint64_t v66 = v29;
        do
        {
          LOBYTE(v44) = *(unsigned char *)(v66 + v62);
          LOBYTE(v41) = *(unsigned char *)(v66 + v61);
          LOBYTE(v42) = *(unsigned char *)(v66 + v60);
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v44), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v41), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v42), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          float v77 = (float)((float)((float)(v56 * _S15) + (float)(v55 * _S14)) + (float)(v57 * _S18))
              + (float)(v58 * fmaxf(_S14, fmaxf(_S15, _S18)));
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          LOBYTE(v77) = *(unsigned char *)(v66 + 4 + v62);
          LOBYTE(v9) = *(unsigned char *)(v66 + 4 + v61);
          LOBYTE(v10) = *(unsigned char *)(v66 + 4 + v60);
          _H19 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v77), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v9), 0.0), 8191.0)));
          _H21 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H20
            FCVT            S21, H21
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(v78));
          __asm { FCVT            S0, H0 }
          float v87 = _S14 * _S0;
          float v88 = _S15 * _S0;
          float v89 = _S18 * _S0;
          float v90 = (float)((float)((float)(v56 * _S22) + (float)(v55 * _S19)) + (float)(v57 * _S21))
              + (float)(v58 * fmaxf(_S19, fmaxf(_S22, _S21)));
          float v91 = 8191.0;
          if (v90 <= 8191.0)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          _H18 = *(_WORD *)(v54 + 2 * llroundf(v91));
          __asm { FCVT            S18, H18 }
          float v94 = _S19 * _S18;
          float v95 = _S22 * _S18;
          _S18 = _S21 * _S18;
          float v97 = (float)((float)(v45 * v88) + (float)(v87 * v43)) + (float)(v89 * v46);
          float v98 = (float)((float)(v48 * v88) + (float)(v87 * v47)) + (float)(v89 * v49);
          _S0 = (float)((float)(v52 * v88) + (float)(v87 * v50)) + (float)(v89 * v51);
          float v100 = (float)(v45 * v95) + (float)(v94 * v43);
          float v101 = (float)(v48 * v95) + (float)(v94 * v47);
          float v102 = (float)(v52 * v95) + (float)(v94 * v50);
          _S20 = v100 + (float)(_S18 * v46);
          float v104 = v101 + (float)(_S18 * v49);
          float v105 = v102 + (float)(_S18 * v51);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0))];
          __asm { FCVT            S21, H18 }
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0))];
          __asm { FCVT            S22, H18 }
          LOWORD(_S0) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
          __asm { FCVT            S15, H0 }
          LOWORD(_S0) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0))];
          LOWORD(_S20) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0))];
          __asm
          {
            FCVT            S18, H0
            FCVT            S14, H20
          }
          unsigned int v111 = llroundf(fminf(fmaxf(v105, 0.0), 8191.0));
          float v112 = (float)(v39 * _S22) + (float)(v38 * _S21);
          float v113 = (float)(v34 + (float)((float)(_S21 + _S18) * v131)) + (float)((float)(_S22 + _S14) * v130);
          float v114 = (float)(v34 + (float)((float)(_S21 + _S18) * v128)) + (float)((float)(_S22 + _S14) * v127);
          LOWORD(_S0) = *(_WORD *)&result[2 * v111];
          __asm { FCVT            S0, H0 }
          float v116 = v112 + (float)(v40 * _S15);
          float v117 = v113 + (float)((float)(_S15 + _S0) * v129);
          float v118 = v114 + (float)((float)(_S15 + _S0) * v126);
          if (v117 < v33) {
            float v119 = v33;
          }
          else {
            float v119 = v117;
          }
          BOOL v120 = v117 <= v35;
          float v121 = v116 + v33;
          if (!v120) {
            float v119 = v35;
          }
          __int16 v122 = llroundf(v119);
          if (v121 < v36) {
            float v123 = v36;
          }
          else {
            float v123 = v116 + v33;
          }
          __int16 v124 = *(unsigned __int8 *)(v66 + v59);
          __int16 v125 = *(unsigned __int8 *)(v66 + 4 + v59);
          *unsigned __int8 v65 = v122;
          if (v121 <= v37) {
            float v9 = v123;
          }
          else {
            float v9 = v37;
          }
          v65[1] = llroundf(v9);
          float v10 = v35;
          if (v118 <= v35)
          {
            float v10 = v118;
            if (v118 < v33) {
              float v10 = v33;
            }
          }
          float v42 = v39 * _S14;
          float v44 = (float)((float)((float)(v39 * _S14) + (float)(v38 * _S18)) + (float)(v40 * _S0)) + v33;
          v65[2] = llroundf(v10);
          float v41 = v37;
          if (v44 <= v37)
          {
            float v41 = v44;
            if (v44 < v36) {
              float v41 = v36;
            }
          }
          v65[3] = llroundf(v41);
          if (v64)
          {
            *uint64_t v64 = v124 | (v124 << 8);
            v64[1] = v125 | (v125 << 8);
            v64 += 2;
          }
          v66 += 8;
          v63 += 2;
          v65 += 4;
        }
        while (v27 > v63);
      }
      v29 += v23;
      float v30 = (_WORD *)((char *)v30 + v24);
      ++v20;
    }
    while (v20 != v31);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v15 = *(void *)(result + 28);
  unint64_t v16 = *result;
  unint64_t v17 = v15 * a2 / v16;
  uint64_t v18 = *((void *)result + 14);
  uint64_t v19 = (void *)*((void *)result + 16);
  unint64_t v20 = *((void *)result + 13) * a2 / v16 + *((void *)result + 15);
  long long v21 = (uint64_t *)*((void *)result + 17);
  unint64_t v22 = (v15 + v15 * a2) / v16;
  uint64_t v23 = (_WORD *)v19[1];
  if (v23) {
    uint64_t v23 = (_WORD *)((char *)v23 + 2 * v18 + v21[1] * v20);
  }
  if (v22 != v17)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(result + 44);
    uint64_t v26 = v17 + v25;
    uint64_t v27 = **((void **)result + 8);
    uint64_t v28 = *v21;
    uint64_t v29 = *((void *)result + 19);
    uint64_t v30 = *v19 + v28 * v20;
    unint64_t v31 = *(void *)(result + 20);
    uint64_t v32 = v22 + v25;
    uint64_t v33 = **((void **)result + 7) + v27 * v26 + 4 * *(void *)(result + 36);
    float v34 = (_WORD *)(v30 + 2 * v18);
    uint64_t v35 = v32 - v26;
    LOWORD(a5) = *(_WORD *)(v29 + 144);
    LOWORD(a6) = *(_WORD *)(v29 + 146);
    LOWORD(a7) = *(_WORD *)(v29 + 148);
    LOWORD(a8) = *(_WORD *)(v29 + 150);
    LOWORD(a9) = *(_WORD *)(v29 + 152);
    float v36 = 8191.0 / (float)*(unsigned int *)(v29 + 128);
    float v37 = (float)LODWORD(a5);
    float v38 = (float)LODWORD(a6);
    float v39 = (float)LODWORD(a7);
    float v40 = (float)LODWORD(a8);
    float v41 = (float)LODWORD(a9);
    float v42 = *(float *)(v29 + 36);
    float v43 = *(float *)(v29 + 40);
    float v44 = *(float *)(v29 + 44);
    float v113 = *(float *)(v29 + 52) * 0.5;
    float v114 = *(float *)(v29 + 48) * 0.5;
    float v45 = *(float *)(v29 + 56) * 0.5;
    float v46 = *(float *)(v29 + 60) * 0.5;
    float v47 = *(float *)(v29 + 64) * 0.5;
    float v48 = *(float *)(v29 + 72);
    float v49 = *(float *)(v29 + 68) * 0.5;
    float v50 = *(float *)(v29 + 76);
    float v51 = *(float *)(v29 + 80);
    float v52 = *(float *)(v29 + 84);
    float v53 = *(float *)(v29 + 88);
    float v54 = *(float *)(v29 + 92);
    float v55 = *(float *)(v29 + 96);
    float v57 = *(float *)(v29 + 100);
    float v56 = *(float *)(v29 + 104);
    uint64_t v58 = v29 + 164;
    uint64_t v59 = v29 + 16548;
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v29 + 157);
    uint64_t v60 = *(unsigned __int8 *)(v29 + 156);
    uint64_t v61 = *(unsigned __int8 *)(v29 + 155);
    uint64_t v62 = *(unsigned __int8 *)(v29 + 154);
    do
    {
      if (v31)
      {
        unint64_t v63 = 0;
        uint64_t v64 = v33;
        unsigned __int8 v65 = v23;
        uint64_t v66 = v34;
        do
        {
          LOBYTE(v9) = *(unsigned char *)(v64 + v62);
          LOBYTE(v10) = *(unsigned char *)(v64 + v61);
          LOBYTE(_S12) = *(unsigned char *)(v64 + v60);
          LOBYTE(v12) = *(unsigned char *)(v64 + 4 + v62);
          LOBYTE(v13) = *(unsigned char *)(v64 + 4 + v61);
          LOBYTE(v14) = *(unsigned char *)(v64 + 4 + v60);
          unsigned int v67 = llroundf(fminf(fmaxf(v36 * (float)LODWORD(v9), 0.0), 8191.0));
          float v68 = v36 * (float)LODWORD(v14);
          _H15 = *(_WORD *)(v58 + 2 * v67);
          __asm { FCVT            S15, H15 }
          _H11 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(_S12), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v12), 0.0), 8191.0)));
          _H14 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v13), 0.0), 8191.0)));
          __asm
          {
            FCVT            S13, H13
            FCVT            S14, H14
          }
          unsigned int v83 = llroundf(fminf(fmaxf(v68, 0.0), 8191.0));
          _S10 = (float)((float)(v50 * _S11) + (float)(_S15 * v48)) + (float)(_S12 * v51);
          _S18 = (float)((float)(v53 * _S11) + (float)(_S15 * v52)) + (float)(_S12 * v54);
          _S11 = (float)((float)(v57 * _S11) + (float)(_S15 * v55)) + (float)(_S12 * v56);
          float v87 = (float)(v50 * _S14) + (float)(_S13 * v48);
          float v88 = (float)(v53 * _S14) + (float)(_S13 * v52);
          float v89 = (float)(v57 * _S14) + (float)(_S13 * v55);
          LOWORD(_S14) = *(_WORD *)(v58 + 2 * v83);
          __asm { FCVT            S14, H14 }
          float v91 = v87 + (float)(_S14 * v51);
          float v92 = v88 + (float)(_S14 * v54);
          float v93 = v89 + (float)(_S14 * v56);
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S14, H10 }
          LOWORD(_S18) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S19, H10 }
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          LOWORD(_S11) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          unsigned int v99 = llroundf(fminf(fmaxf(v93, 0.0), 8191.0));
          float v100 = (float)(v43 * _S18) + (float)(v42 * _S14);
          _S12 = _S14 + _S10;
          float v102 = _S18 + _S11;
          float v103 = (float)(v38 + (float)((float)(_S14 + _S10) * v114)) + (float)(v102 * v113);
          float v104 = (float)(v38 + (float)(_S12 * v46)) + (float)(v102 * v47);
          LOWORD(_S12) = *(_WORD *)(v59 + 2 * v99);
          __asm { FCVT            S12, H12 }
          float v14 = v100 + (float)(v44 * _S19);
          float v105 = _S19 + _S12;
          float v106 = v103 + (float)(v105 * v45);
          float v12 = v104 + (float)(v105 * v49);
          if (v106 < v37) {
            float v107 = v37;
          }
          else {
            float v107 = v106;
          }
          float v108 = v14 + v37;
          if (v106 > v39) {
            float v107 = v39;
          }
          __int16 v109 = llroundf(v107);
          if (v108 < v40) {
            float v110 = v40;
          }
          else {
            float v110 = v14 + v37;
          }
          __int16 v111 = result[v64];
          __int16 v112 = result[v64 + 4];
          *uint64_t v66 = v109;
          if (v108 > v41) {
            float v110 = v41;
          }
          v66[1] = llroundf(v110);
          float v13 = v39;
          if (v12 <= v39)
          {
            float v13 = v12;
            if (v12 < v37) {
              float v13 = v37;
            }
          }
          float v9 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S10)) + (float)(v44 * _S12)) + v37;
          v66[2] = llroundf(v13);
          float v10 = v41;
          if (v9 <= v41)
          {
            float v10 = v9;
            if (v9 < v40) {
              float v10 = v40;
            }
          }
          v66[3] = llroundf(v10);
          if (v65)
          {
            *unsigned __int8 v65 = v111 | (v111 << 8);
            v65[1] = v112 | (v112 << 8);
            v65 += 2;
          }
          v64 += 8;
          v63 += 2;
          v66 += 4;
        }
        while (v31 > v63);
      }
      v33 += v27;
      float v34 = (_WORD *)((char *)v34 + v28);
      ++v24;
    }
    while (v24 != v35);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v10 = *(void *)(result + 28);
  unint64_t v11 = *result;
  unint64_t v12 = v10 * a2 / v11;
  uint64_t v13 = *((void *)result + 14);
  float v14 = (void *)*((void *)result + 16);
  unint64_t v15 = *((void *)result + 13) * a2 / v11 + *((void *)result + 15);
  unint64_t v16 = (uint64_t *)*((void *)result + 17);
  unint64_t v17 = (v10 + v10 * a2) / v11;
  uint64_t v18 = (_WORD *)v14[1];
  if (v18) {
    uint64_t v18 = (_WORD *)((char *)v18 + 2 * v13 + v16[1] * v15);
  }
  if (v17 != v12)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *(void *)(result + 44);
    uint64_t v21 = v12 + v20;
    uint64_t v22 = **((void **)result + 8);
    uint64_t v23 = *v16;
    uint64_t v24 = *v14 + v23 * v15;
    uint64_t v25 = *((void *)result + 19);
    unint64_t v26 = *(void *)(result + 20);
    uint64_t v27 = v17 + v20;
    uint64_t v28 = **((void **)result + 7) + v22 * v21 + 4 * *(void *)(result + 36);
    uint64_t v29 = (_WORD *)(v24 + 2 * v13);
    uint64_t v30 = v27 - v21;
    LOWORD(a5) = *(_WORD *)(v25 + 144);
    LOWORD(a6) = *(_WORD *)(v25 + 146);
    float v31 = (float)*(unsigned int *)(v25 + 136) / (float)*(unsigned int *)(v25 + 128);
    float v32 = (float)LODWORD(a5);
    float v33 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v25 + 148);
    float v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v25 + 150);
    float v35 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v25 + 152);
    float v36 = (float)LODWORD(a8);
    float v37 = *(float *)(v25 + 36);
    float v38 = *(float *)(v25 + 40);
    float v39 = *(float *)(v25 + 44);
    float v40 = *(float *)(v25 + 48) * 0.5;
    float v41 = *(float *)(v25 + 52) * 0.5;
    float v42 = *(float *)(v25 + 56) * 0.5;
    float v43 = *(float *)(v25 + 60) * 0.5;
    float v44 = *(float *)(v25 + 64) * 0.5;
    float v45 = *(float *)(v25 + 68);
    float v46 = v45 * 0.5;
    uint64_t v47 = *(unsigned __int8 *)(v25 + 157);
    uint64_t v48 = *(unsigned __int8 *)(v25 + 156);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v25 + 155);
    uint64_t v49 = *(unsigned __int8 *)(v25 + 154);
    do
    {
      if (v26)
      {
        unint64_t v50 = 0;
        uint64_t v51 = v28;
        float v52 = v18;
        float v53 = v29;
        do
        {
          LOBYTE(v45) = *(unsigned char *)(v51 + v49);
          *(float *)&unsigned int v54 = (float)LODWORD(v45);
          float v55 = v31 * *(float *)&v54;
          LOBYTE(v54) = result[v51];
          *(float *)&unsigned int v56 = (float)v54;
          float v57 = v31 * *(float *)&v56;
          LOBYTE(v56) = *(unsigned char *)(v51 + v48);
          __int16 v58 = *(unsigned __int8 *)(v51 + v47);
          LOBYTE(v8) = *(unsigned char *)(v51 + 4 + v49);
          float v59 = v31 * (float)v56;
          float v60 = v31 * (float)LODWORD(v8);
          LOBYTE(v8) = result[v51 + 4];
          float v61 = v31 * (float)LODWORD(v8);
          LOBYTE(v9) = *(unsigned char *)(v51 + 4 + v48);
          __int16 v62 = *(unsigned __int8 *)(v51 + 4 + v47);
          float v9 = v31 * (float)LODWORD(v9);
          float v63 = (float)((float)((float)(v38 * v57) + (float)(v37 * v55)) + (float)(v39 * v59)) + v32;
          float v64 = v55 + v60;
          float v65 = v57 + v61;
          float v66 = v59 + v9;
          float v67 = (float)((float)(v33 + (float)(v64 * v40)) + (float)(v65 * v41)) + (float)(v66 * v42);
          float v68 = (float)((float)(v33 + (float)(v64 * v43)) + (float)(v65 * v44)) + (float)(v66 * v46);
          if (v67 < v32) {
            float v69 = v32;
          }
          else {
            float v69 = v67;
          }
          if (v67 > v34) {
            float v69 = v34;
          }
          _WORD *v53 = llroundf(v69);
          if (v63 < v35) {
            float v70 = v35;
          }
          else {
            float v70 = v63;
          }
          if (v63 > v36) {
            float v70 = v36;
          }
          v53[1] = llroundf(v70);
          float v71 = v34;
          if (v68 <= v34)
          {
            float v71 = v68;
            if (v68 < v32) {
              float v71 = v32;
            }
          }
          float v45 = (float)((float)((float)(v38 * v61) + (float)(v37 * v60)) + (float)(v39 * v9)) + v32;
          v53[2] = llroundf(v71);
          float v8 = v36;
          if (v45 <= v36)
          {
            float v8 = v45;
            if (v45 < v35) {
              float v8 = v35;
            }
          }
          v53[3] = llroundf(v8);
          if (v52)
          {
            *float v52 = v58 | (v58 << 8);
            v52[1] = v62 | (v62 << 8);
            v52 += 2;
          }
          v51 += 8;
          v50 += 2;
          v53 += 4;
        }
        while (v26 > v50);
      }
      v28 += v22;
      uint64_t v29 = (_WORD *)((char *)v29 + v23);
      ++v19;
    }
    while (v19 != v30);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_444vf_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_BGRA_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, float16x8_t a5, double a6, int16x4_t a7)
{
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a1 + 20);
  uint64_t v188 = *(void *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 44);
  uint64_t v10 = *(void *)(a1 + 28);
  unint64_t v11 = *a1;
  unint64_t v12 = v10 * a2 / v11;
  uint64_t v13 = v12 + v9;
  unint64_t v14 = (v10 + v10 * a2) / v11;
  uint64_t v15 = v14 + v9;
  uint64_t v16 = *((void *)a1 + 14);
  uint64_t v17 = *((void *)a1 + 19);
  uint64_t v18 = *((void *)a1 + 15);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 16);
  int64x2_t v20 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v21 = **((void **)a1 + 8);
  uint64_t v187 = **((void **)a1 + 7);
  unint64_t v22 = *((void *)a1 + 13) * a2;
  uint64_t v23 = v20[1];
  uint64_t v192 = *v20;
  uint64_t v24 = v20[2];
  uint64_t v26 = *v19;
  uint64_t v25 = v19[1];
  uint64_t result = (void *)v19[2];
  unsigned int v28 = *(_DWORD *)(v17 + 128);
  int v232 = *(_DWORD *)(v17 + 154);
  unsigned int v29 = *(unsigned __int16 *)(v17 + 144);
  unsigned int v30 = *(unsigned __int16 *)(v17 + 146);
  unsigned int v31 = *(unsigned __int16 *)(v17 + 148);
  unsigned int v32 = *(unsigned __int16 *)(v17 + 150);
  unsigned int v33 = *(unsigned __int16 *)(v17 + 152);
  _S27 = *(float *)(v17 + 36);
  _S28 = *(float *)(v17 + 40);
  _S29 = *(float *)(v17 + 44);
  float v203 = *(float *)(v17 + 52);
  float v204 = *(float *)(v17 + 48);
  float v201 = *(float *)(v17 + 60);
  float v202 = *(float *)(v17 + 56);
  float v199 = *(float *)(v17 + 68);
  float v200 = *(float *)(v17 + 64);
  float v229 = *(float *)(v17 + 72);
  float v228 = *(float *)(v17 + 76);
  float v227 = *(float *)(v17 + 80);
  float v226 = *(float *)(v17 + 84);
  float v225 = *(float *)(v17 + 88);
  uint64_t v37 = v22 / v11 + v18;
  uint64_t v186 = v21 * v13;
  float v224 = *(float *)(v17 + 92);
  float v223 = *(float *)(v17 + 96);
  float v222 = *(float *)(v17 + 100);
  float v221 = *(float *)(v17 + 104);
  float v220 = *(float *)(v17 + 108);
  float v219 = *(float *)(v17 + 112);
  float v218 = *(float *)(v17 + 116);
  float v217 = *(float *)(v17 + 120);
  long long v230 = 0u;
  *(_OWORD *)v231[0].i8 = 0u;
  do
  {
    unsigned int v38 = 0;
    char v39 = *((unsigned char *)&v232 + v7);
    do
    {
      v231[((v7 + (v38 >> 3)) & 0x1F) - 2].i8[v38] = v39 + 4 * v38;
      ++v38;
    }
    while (v38 != 8);
    ++v7;
  }
  while (v7 != 4);
  if (v14 != v12)
  {
    uint64_t v40 = 0;
    _S0 = (float)v28;
    float v42 = (float)v29;
    float v43 = (float)v30;
    float v44 = (float)v31;
    *(float *)_Q1.i32 = (float)v32;
    float v205 = (float)v32;
    float v46 = (float)v33;
    _S12 = 8191.0 / (float)v28;
    __asm { FCVT            H0, S27 }
    short float v216 = *(short float *)&_S0;
    __asm { FCVT            H0, S28 }
    short float v215 = *(short float *)&_S0;
    __asm { FCVT            H0, S29 }
    float v214 = _S0;
    uint64_t v52 = v15 - v13;
    uint64_t v53 = v17 + 16548;
    uint64_t v54 = v17 + 32932;
    uint64_t v55 = v17 + 164;
    _S0 = v204;
    __asm { FCVT            H0, S0 }
    short float v198 = *(short float *)&_S0;
    _S0 = v203;
    __asm { FCVT            H0, S0 }
    short float v197 = *(short float *)&_S0;
    _S0 = v202;
    __asm { FCVT            H0, S0 }
    short float v196 = *(short float *)&_S0;
    _S0 = v201;
    __asm { FCVT            H0, S0 }
    short float v195 = *(short float *)&_S0;
    _S0 = v200;
    __asm { FCVT            H0, S0 }
    short float v194 = *(short float *)&_S0;
    _S0 = v199;
    __asm { FCVT            H0, S0 }
    short float v193 = *(short float *)&_S0;
    _S0 = v220;
    __asm { FCVT            H0, S0 }
    short float v213 = *(short float *)&_S0;
    _S0 = v219;
    __asm { FCVT            H0, S0 }
    short float v212 = *(short float *)&_S0;
    _S0 = v218;
    __asm { FCVT            H0, S0 }
    short float v211 = *(short float *)&_S0;
    _S0 = v217;
    __asm { FCVT            H0, S0 }
    short float v210 = *(short float *)&_S0;
    _S0 = v229;
    __asm { FCVT            H0, S0 }
    short float v209 = *(short float *)&_S0;
    _S0 = v228;
    __asm { FCVT            H0, S0 }
    short float v208 = *(short float *)&_S0;
    _S0 = v227;
    __asm { FCVT            H0, S0 }
    short float v207 = *(short float *)&_S0;
    _S0 = v226;
    __asm { FCVT            H0, S0 }
    short float v206 = *(short float *)&_S0;
    _S0 = v225;
    __asm { FCVT            H10, S0 }
    _S0 = v224;
    __asm { FCVT            H13, S0 }
    _S0 = v223;
    __asm { FCVT            H14, S0 }
    *(short float *)a7.i16 = (short float)v29;
    float16x8_t v76 = (float16x8_t)vdupq_lane_s16(a7, 0);
    *(short float *)a7.i16 = (short float)v30;
    float16x8_t v77 = (float16x8_t)vdupq_lane_s16(a7, 0);
    *(short float *)a7.i16 = (short float)v31;
    float16x8_t v78 = (float16x8_t)vdupq_lane_s16(a7, 0);
    *(short float *)a7.i16 = (short float)v32;
    float16x8_t v79 = (float16x8_t)vdupq_lane_s16(a7, 0);
    *(short float *)a7.i16 = (short float)v33;
    float16x8_t v80 = (float16x8_t)vdupq_lane_s16(a7, 0);
    if (result) {
      uint64_t result = (void *)((char *)result + v24 * v37 + v16);
    }
    else {
      uint64_t result = 0;
    }
    if (v25) {
      uint64_t v81 = (char *)(v25 + v23 * v37 + v16);
    }
    else {
      uint64_t v81 = 0;
    }
    long long v82 = (void *)(v26 + v192 * v37 + v16);
    uint64_t v83 = v187 + v186 + 4 * v188;
    _S0 = v222;
    __asm { FCVT            H15, S0 }
    *(float *)_Q0.i32 = v221;
    __asm { FCVT            H4, S0 }
    v88.i64[0] = 0x9000900090009000;
    v88.i64[1] = 0x9000900090009000;
    __asm { FCVT            H5, S12 }
    float v190 = _S28;
    float v191 = _S27;
    float v189 = _S29;
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v157 = 0;
        float v94 = v82;
        float v93 = v81;
        float v92 = result;
        float v91 = (void *)v83;
      }
      else
      {
        int v90 = 0;
        float v91 = (void *)v83;
        float v92 = result;
        float v93 = v81;
        float v94 = v82;
        do
        {
          int8x8_t v95 = v231[1];
          *(void *)&long long v99 = *v91;
          uint64_t v96 = v91[1];
          *(void *)&long long v97 = v91[2];
          uint64_t v98 = v91[3];
          v91 += 4;
          *((void *)&v99 + 1) = v96;
          *((void *)&v97 + 1) = v98;
          long long v100 = v97;
          int8x8_t v101 = vqtbl2_s8(*(int8x16x2_t *)&v99, *(int8x8_t *)&v230);
          int8x8_t v102 = vqtbl2_s8(*(int8x16x2_t *)&v99, *(int8x8_t *)((char *)&v230 + 8));
          int8x8_t v103 = vqtbl2_s8(*(int8x16x2_t *)&v99, v231[0]);
          *(int8x8_t *)v104.i8 = vzip1_s8(v101, 0);
          v104.u64[1] = (unint64_t)vzip2_s8(v101, 0);
          *(int8x8_t *)v105.i8 = vzip1_s8(v102, 0);
          v105.u64[1] = (unint64_t)vzip2_s8(v102, 0);
          *(int8x8_t *)v106.i8 = vzip1_s8(v103, 0);
          v106.u64[1] = (unint64_t)vzip2_s8(v103, 0);
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v104), _H5), (float16x8_t)0), v88));
          float16x8_t v108 = (float16x8_t)vmovl_high_u16(v107);
          *(void *)&long long v109 = v108.u32[2];
          *((void *)&v109 + 1) = v108.u32[3];
          long long v110 = v109;
          *(void *)&long long v109 = v108.u32[0];
          *((void *)&v109 + 1) = v108.u32[1];
          uint32x4_t v111 = vmovl_u16(*(uint16x4_t *)v107.i8);
          v108.i16[0] = *(_WORD *)(v55 + 2 * v111.u32[0]);
          v108.i16[1] = *(_WORD *)(v55 + 2 * v111.u32[1]);
          v108.i16[2] = *(_WORD *)(v55 + 2 * v111.u32[2]);
          v108.i16[3] = *(_WORD *)(v55 + 2 * v111.u32[3]);
          v108.i16[4] = *(_WORD *)(v55 + 2 * v109);
          v108.i16[5] = *(_WORD *)(v55 + 2 * *((void *)&v109 + 1));
          v108.i16[6] = *(_WORD *)(v55 + 2 * v110);
          v108.i16[7] = *(_WORD *)(v55 + 2 * *((void *)&v110 + 1));
          uint16x8_t v112 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v105), _H5), (float16x8_t)0), v88));
          uint32x4_t v113 = vmovl_high_u16(v112);
          uint32x4_t v114 = vmovl_u16(*(uint16x4_t *)v112.i8);
          v105.i16[0] = *(_WORD *)(v55 + 2 * v114.u32[0]);
          v105.i16[1] = *(_WORD *)(v55 + 2 * v114.u32[1]);
          v105.i16[2] = *(_WORD *)(v55 + 2 * v114.u32[2]);
          v105.i16[3] = *(_WORD *)(v55 + 2 * v114.u32[3]);
          v105.i16[4] = *(_WORD *)(v55 + 2 * v113.u32[0]);
          v105.i16[5] = *(_WORD *)(v55 + 2 * v113.u32[1]);
          v105.i16[6] = *(_WORD *)(v55 + 2 * v113.u32[2]);
          v105.i16[7] = *(_WORD *)(v55 + 2 * v113.u32[3]);
          uint16x8_t v115 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v106), _H5), (float16x8_t)0), v88));
          uint32x4_t v116 = vmovl_high_u16(v115);
          uint32x4_t v117 = vmovl_u16(*(uint16x4_t *)v115.i8);
          v106.i16[0] = *(_WORD *)(v55 + 2 * v117.u32[0]);
          v106.i16[1] = *(_WORD *)(v55 + 2 * v117.u32[1]);
          v106.i16[2] = *(_WORD *)(v55 + 2 * v117.u32[2]);
          v106.i16[3] = *(_WORD *)(v55 + 2 * v117.u32[3]);
          v106.i16[4] = *(_WORD *)(v55 + 2 * v116.u32[0]);
          v106.i16[5] = *(_WORD *)(v55 + 2 * v116.u32[1]);
          v106.i16[6] = *(_WORD *)(v55 + 2 * v116.u32[2]);
          v106.i16[7] = *(_WORD *)(v55 + 2 * v116.u32[3]);
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v108, v213), (float16x8_t)v105, v212), (float16x8_t)v106, v211), vmaxq_f16(vmaxq_f16(v108, (float16x8_t)v105), (float16x8_t)v106), v210), (float16x8_t)0), v88));
          uint32x4_t v119 = vmovl_u16(*(uint16x4_t *)v118.i8);
          float16x8_t v120 = (float16x8_t)vmovl_high_u16(v118);
          uint64_t v121 = v120.u32[0];
          v120.i16[0] = *(_WORD *)(v53 + 2 * v119.u32[0]);
          __int16 v122 = (__int16 *)(v53 + 2 * v121);
          float v123 = (__int16 *)(v53 + 2 * v120.u32[1]);
          __int16 v124 = (__int16 *)(v53 + 2 * v120.u32[2]);
          __int16 v125 = (__int16 *)(v53 + 2 * v120.u32[3]);
          v120.i16[1] = *(_WORD *)(v53 + 2 * v119.u32[1]);
          v120.i16[2] = *(_WORD *)(v53 + 2 * v119.u32[2]);
          v120.i16[3] = *(_WORD *)(v53 + 2 * v119.u32[3]);
          v120.i16[4] = *v122;
          v120.i16[5] = *v123;
          v120.i16[6] = *v124;
          v120.i16[7] = *v125;
          float16x8_t v126 = vmulq_f16(v108, v120);
          a5 = vmulq_f16((float16x8_t)v105, v120);
          float16x8_t v127 = vmulq_f16((float16x8_t)v106, v120);
          float16x8_t v128 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v126, v206), a5, _H10), v127, _H13);
          float16x8_t v129 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v127, _H4), a5, _H15), v126, _H14);
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v126, v209), a5, v208), v127, v207), (float16x8_t)0), v88));
          uint32x4_t v131 = vmovl_u16(*(uint16x4_t *)v130.i8);
          uint64_t v132 = v131.u32[1];
          uint64_t v133 = v131.u32[0];
          uint32x4_t v134 = vmovl_high_u16(v130);
          uint64_t v135 = v131.u32[3];
          uint64_t v136 = v131.u32[2];
          uint64_t v137 = v134.u32[1];
          uint64_t v138 = v134.u32[0];
          uint64_t v139 = v134.u32[3];
          uint64_t v140 = v134.u32[2];
          uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v128, (float16x8_t)0), v88));
          uint32x4_t v142 = vmovl_u16(*(uint16x4_t *)v141.i8);
          uint64_t v143 = v142.u32[1];
          uint64_t v144 = v142.u32[0];
          v145.i16[0] = *(_WORD *)(v54 + 2 * v133);
          v145.i16[1] = *(_WORD *)(v54 + 2 * v132);
          v145.i16[2] = *(_WORD *)(v54 + 2 * v136);
          v145.i16[3] = *(_WORD *)(v54 + 2 * v135);
          v145.i16[4] = *(_WORD *)(v54 + 2 * v138);
          v145.i16[5] = *(_WORD *)(v54 + 2 * v137);
          v145.i16[6] = *(_WORD *)(v54 + 2 * v140);
          v145.i16[7] = *(_WORD *)(v54 + 2 * v139);
          uint32x4_t v146 = vmovl_high_u16(v141);
          uint64_t v147 = v142.u32[3];
          uint64_t v148 = v142.u32[2];
          uint64_t v149 = v146.u32[1];
          uint64_t v150 = v146.u32[0];
          uint64_t v151 = v146.u32[3];
          uint64_t v152 = v146.u32[2];
          uint16x8_t v153 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v129, (float16x8_t)0), v88));
          _Q1 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v153.i8);
          a5.i32[0] = _Q1.i32[0];
          v154.i16[0] = *(_WORD *)(v54 + 2 * v144);
          v154.i16[1] = *(_WORD *)(v54 + 2 * v143);
          v154.i16[2] = *(_WORD *)(v54 + 2 * v148);
          v154.i16[3] = *(_WORD *)(v54 + 2 * v147);
          v154.i16[4] = *(_WORD *)(v54 + 2 * v150);
          v154.i16[5] = *(_WORD *)(v54 + 2 * v149);
          v154.i16[6] = *(_WORD *)(v54 + 2 * v152);
          v154.i16[7] = *(_WORD *)(v54 + 2 * v151);
          _Q0 = (int16x8_t)vmovl_high_u16(v153);
          v155.i16[0] = *(_WORD *)(v54 + 2 * _Q1.u32[0]);
          v155.i16[1] = *(_WORD *)(v54 + 2 * _Q1.u32[1]);
          v155.i16[2] = *(_WORD *)(v54 + 2 * _Q1.u32[2]);
          v155.i16[3] = *(_WORD *)(v54 + 2 * _Q1.u32[3]);
          v155.i16[4] = *(_WORD *)(v54 + 2 * _Q0.u32[0]);
          v155.i16[5] = *(_WORD *)(v54 + 2 * _Q0.u32[1]);
          v155.i16[6] = *(_WORD *)(v54 + 2 * _Q0.u32[2]);
          v155.i16[7] = *(_WORD *)(v54 + 2 * _Q0.u32[3]);
          *(float *)_Q1.i32 = v214;
          *(int8x8_t *)_Q0.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v76, v145, v216), v154, v215), v155, *(short float *)&v214), v76), v78)));
          *v94++ = _Q0.i64[0];
          if (v93)
          {
            _Q1 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v77, v145, v195), v154, v194), v155, v193);
            *(int8x8_t *)a5.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v77, v145, v198), v154, v197), v155, v196), v79), v80), v79), v80)));
            _Q0 = (int16x8_t)vcvtq_u16_f16(_Q1);
            int8x8_t v156 = vmovn_s16(_Q0);
            vst2_s8(v93, (int8x8x2_t)a5);
            v93 += 16;
          }
          if (v92)
          {
            *(int8x8_t *)_Q1.i8 = vqtbl2_s8(*(int8x16x2_t *)&v99, v95);
            a5.i32[0] = (int)v92;
            *(int8x8_t *)_Q0.i8 = vbic_s8(*(int8x8_t *)_Q1.i8, (int8x8_t)vceqd_s64((uint64_t)v92, 0));
            *v92++ = _Q0.i64[0];
          }
          v90 += 8;
        }
        while (v90 < (int)v8 - 7);
        unint64_t v157 = v8 & 0xFFFFFFF8;
        _S28 = v190;
        _S27 = v191;
        _S29 = v189;
      }
      _CF = v8 >= v157;
      unint64_t v158 = v8 - v157;
      if (v158 != 0 && _CF)
      {
        do
        {
          _Q0.i8[0] = *((unsigned char *)v91 + v232);
          _Q1.i8[0] = *((unsigned char *)v91 + BYTE1(v232));
          a5.i8[0] = *((unsigned char *)v91 + BYTE2(v232));
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S12 * (float)_Q0.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S6, H0 }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S12 * (float)_Q1.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S7, H0 }
          _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S12 * (float)a5.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S16, H0 }
          float v165 = fmaxf(_S6, fmaxf(_S7, _S16));
          float v166 = (float)((float)((float)(v219 * _S7) + (float)(v220 * _S6)) + (float)(v218 * _S16))
               + (float)(v217 * v165);
          float v167 = 8191.0;
          if (v166 <= 8191.0)
          {
            float v167 = (float)((float)((float)(v219 * _S7) + (float)(v220 * _S6)) + (float)(v218 * _S16))
                 + (float)(v217 * v165);
            if (v166 < 0.0) {
              float v167 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(v167));
          __asm { FCVT            S0, H0 }
          float v170 = _S6 * _S0;
          float v171 = _S7 * _S0;
          float v172 = _S16 * _S0;
          float v173 = (float)((float)(v228 * v171) + (float)(v170 * v229)) + (float)(v172 * v227);
          float v174 = (float)((float)(v225 * v171) + (float)(v170 * v226)) + (float)(v172 * v224);
          _S1 = (float)(v222 * v171) + (float)(v170 * v223);
          *(float *)a5.i32 = v221;
          _S0 = _S1 + (float)(v172 * v221);
          LOWORD(_S1) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v173, 0.0), 8191.0)));
          __asm { FCVT            S6, H1 }
          *(float *)_Q1.i32 = fminf(fmaxf(v174, 0.0), 8191.0);
          _Q1.i16[0] = *(_WORD *)(v54 + 2 * llroundf(*(float *)_Q1.i32));
          __asm { FCVT            S7, H1 }
          LOWORD(_S0) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S16, H0 }
          *(float *)_Q0.i32 = (float)((float)(_S28 * _S7) + (float)(_S27 * _S6)) + (float)(_S29 * _S16);
          float v180 = v44;
          if ((float)(*(float *)_Q0.i32 + v42) <= v44)
          {
            float v180 = *(float *)_Q0.i32 + v42;
            if ((float)(*(float *)_Q0.i32 + v42) < v42) {
              float v180 = v42;
            }
          }
          char v181 = *((unsigned char *)v91 + HIBYTE(v232));
          *(unsigned char *)float v94 = llroundf(v180);
          float v94 = (void *)((char *)v94 + 1);
          if (v93)
          {
            float v182 = (float)((float)(v43 + (float)(_S6 * v204)) + (float)(_S7 * v203)) + (float)(_S16 * v202);
            float v183 = v46;
            if (v182 <= v46)
            {
              float v183 = (float)((float)(v43 + (float)(_S6 * v204)) + (float)(_S7 * v203)) + (float)(_S16 * v202);
              if (v182 < v205) {
                float v183 = v205;
              }
            }
            *(float *)_Q0.i32 = (float)(v43 + (float)(_S6 * v201)) + (float)(_S7 * v200);
            *(float *)_Q1.i32 = v199;
            float v184 = *(float *)_Q0.i32 + (float)(_S16 * v199);
            char *v93 = llroundf(v183);
            float v185 = v46;
            if (v184 <= v46)
            {
              *(float *)_Q0.i32 = v205;
              float v185 = v184;
              if (v184 < v205) {
                float v185 = v205;
              }
            }
            v93[1] = llroundf(v185);
            v93 += 2;
          }
          if (v92)
          {
            *(unsigned char *)float v92 = v181;
            float v92 = (void *)((char *)v92 + 1);
          }
          float v91 = (void *)((char *)v91 + 4);
          --v158;
        }
        while (v158);
      }
      v83 += v21;
      long long v82 = (void *)((char *)v82 + v192);
      v81 += v23;
      uint64_t result = (void *)((char *)result + v24);
      ++v40;
    }
    while (v40 != v52);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_444vf_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *((void *)result + 19);
    int64x2_t v12 = (uint64_t *)*((void *)result + 17);
    int64x2_t v13 = (void *)*((void *)result + 7);
    uint64_t v14 = **((void **)result + 8);
    uint64_t v15 = *v12;
    uint64_t v16 = v12[1];
    uint64_t v17 = v12[2];
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v11 + 128);
    float v19 = 8191.0 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 144);
    float v20 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 146);
    float v21 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 148);
    float v22 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 150);
    float v23 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 152);
    float v24 = (float)v18;
    float v25 = *(float *)(v11 + 36);
    float v26 = *(float *)(v11 + 40);
    float v28 = *(float *)(v11 + 44);
    float v27 = *(float *)(v11 + 48);
    float v96 = *(float *)(v11 + 52);
    float v97 = v27;
    float v29 = *(float *)(v11 + 56);
    float v30 = *(float *)(v11 + 60);
    float v95 = v29;
    float v31 = *(float *)(v11 + 64);
    float v32 = *(float *)(v11 + 68);
    float v33 = *(float *)(v11 + 72);
    float v34 = *(float *)(v11 + 76);
    float v35 = *(float *)(v11 + 80);
    float v36 = *(float *)(v11 + 84);
    float v37 = *(float *)(v11 + 88);
    float v38 = *(float *)(v11 + 92);
    float v39 = *(float *)(v11 + 96);
    float v40 = *(float *)(v11 + 100);
    float v41 = *(float *)(v11 + 104);
    float v42 = *(float *)(v11 + 108);
    uint64_t v43 = v11 + 164;
    uint64_t v44 = v11 + 16548;
    uint64_t v45 = v11 + 32932;
    float v46 = *(float *)(v11 + 112);
    float v47 = *(float *)(v11 + 116);
    float v48 = *(float *)(v11 + 120);
    uint64_t v49 = (uint64_t *)*((void *)result + 16);
    uint64_t v50 = *((void *)result + 14);
    unint64_t v51 = *((void *)result + 13) * a2 / v4 + *((void *)result + 15);
    uint64_t v52 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 157);
    uint64_t v53 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v54 = *(unsigned __int8 *)(v11 + 155);
    uint64_t v55 = *(unsigned __int8 *)(v11 + 154);
    uint64_t v56 = v49[2];
    if (v56) {
      float v57 = (unsigned __int8 *)(v56 + v51 * v17 + v50);
    }
    else {
      float v57 = 0;
    }
    uint64_t v59 = *v49;
    uint64_t v58 = v49[1];
    float v60 = (unsigned char *)(v58 + v51 * v16 + v50);
    if (!v58) {
      float v60 = 0;
    }
    float v61 = (unsigned char *)(v59 + v51 * v15 + v50);
    uint64_t v62 = *v13 + v14 * v9 + 4 * v52;
    do
    {
      if (v8)
      {
        uint64_t v63 = v8;
        float v64 = v57;
        float v65 = v60;
        float v66 = v61;
        uint64_t v67 = v62;
        do
        {
          LOBYTE(v29) = *(unsigned char *)(v67 + v55);
          LOBYTE(v27) = *(unsigned char *)(v67 + v54);
          LOBYTE(_S18) = *(unsigned char *)(v67 + v53);
          _H0 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v29), 0.0), 8191.0)));
          float v69 = v19 * (float)LODWORD(_S18);
          __asm { FCVT            S18, H0 }
          _H0 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v27), 0.0), 8191.0)));
          unsigned int v76 = llroundf(fminf(fmaxf(v69, 0.0), 8191.0));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v43 + 2 * v76);
          __asm { FCVT            S15, H0 }
          float v80 = (float)((float)((float)(v46 * _S14) + (float)(v42 * _S18)) + (float)(v47 * _S15))
              + (float)(v48 * fmaxf(_S18, fmaxf(_S14, _S15)));
          float v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v44 + 2 * llroundf(v81));
          __asm { FCVT            S0, H0 }
          _S6 = _S18 * _S0;
          float v85 = _S14 * _S0;
          float v86 = _S15 * _S0;
          float v87 = (float)((float)(v34 * v85) + (float)(_S6 * v33)) + (float)(v86 * v35);
          float v88 = (float)((float)(v37 * v85) + (float)(_S6 * v36)) + (float)(v86 * v38);
          _S0 = (float)((float)(v40 * v85) + (float)(_S6 * v39)) + (float)(v86 * v41);
          LOWORD(_S6) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S14, H6 }
          LOWORD(_S6) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S15, H6 }
          LOWORD(_S0) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          float v29 = (float)((float)((float)(v26 * _S15) + (float)(v25 * _S14)) + (float)(v28 * _S18)) + v20;
          float v27 = v22;
          if (v29 <= v22)
          {
            float v27 = (float)((float)((float)(v26 * _S15) + (float)(v25 * _S14)) + (float)(v28 * _S18)) + v20;
            if (v29 < v20) {
              float v27 = v20;
            }
          }
          unsigned __int8 v92 = result[v67];
          *v66++ = llroundf(v27);
          if (v65)
          {
            float v93 = (float)((float)(v21 + (float)(_S14 * v97)) + (float)(_S15 * v96)) + (float)(_S18 * v95);
            float v94 = v24;
            if (v93 <= v24)
            {
              float v94 = (float)((float)(v21 + (float)(_S14 * v97)) + (float)(_S15 * v96)) + (float)(_S18 * v95);
              if (v93 < v23) {
                float v94 = v23;
              }
            }
            float v29 = (float)(v21 + (float)(_S14 * v30)) + (float)(_S15 * v31);
            _S18 = v29 + (float)(_S18 * v32);
            *float v65 = llroundf(v94);
            float v27 = v24;
            if (_S18 <= v24)
            {
              float v27 = _S18;
              if (_S18 < v23) {
                float v27 = v23;
              }
            }
            v65[1] = llroundf(v27);
            v65 += 2;
          }
          if (v64) {
            *v64++ = v92;
          }
          v67 += 4;
          --v63;
        }
        while (v63);
      }
      v62 += v14;
      v61 += v15;
      v60 += v16;
      v57 += v17;
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_444vf_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

char *vt_Copy_BGRA_TRC_Mat_TRC_444vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, int16x4_t a5, double a6, double a7, int16x8_t a8, float16x8_t a9, float a10)
{
  uint64_t v11 = 0;
  unint64_t v12 = *(void *)(a1 + 20);
  uint64_t v137 = *(void *)(a1 + 36);
  uint64_t v13 = *(void *)(a1 + 44);
  uint64_t v14 = *(void *)(a1 + 28);
  unint64_t v15 = *a1;
  unint64_t v16 = v14 * a2 / v15;
  uint64_t v17 = v16 + v13;
  unint64_t v18 = (v14 + v14 * a2) / v15;
  uint64_t v19 = v18 + v13;
  uint64_t v20 = *((void *)a1 + 14);
  uint64_t v21 = *((void *)a1 + 19);
  unint64_t v22 = *((void *)a1 + 13) * a2;
  uint64_t v23 = *((void *)a1 + 15);
  uint64_t v24 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v25 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v26 = **((void **)a1 + 8);
  uint64_t v136 = **((void **)a1 + 7);
  uint64_t v27 = *v25;
  uint64_t v28 = v25[1];
  uint64_t v29 = v25[2];
  uint64_t v135 = *v24;
  uint64_t result = (char *)v24[1];
  uint64_t v31 = v24[2];
  unsigned int v32 = *(_DWORD *)(v21 + 128);
  int v172 = *(_DWORD *)(v21 + 154);
  unsigned int v33 = *(unsigned __int16 *)(v21 + 144);
  unsigned int v34 = *(unsigned __int16 *)(v21 + 146);
  unsigned int v35 = *(unsigned __int16 *)(v21 + 148);
  unsigned int v36 = *(unsigned __int16 *)(v21 + 150);
  unsigned int v37 = *(unsigned __int16 *)(v21 + 152);
  float v169 = *(float *)(v21 + 36);
  float v168 = *(float *)(v21 + 40);
  float v167 = *(float *)(v21 + 44);
  float v148 = *(float *)(v21 + 52);
  float v149 = *(float *)(v21 + 48);
  float v146 = *(float *)(v21 + 60);
  float v147 = *(float *)(v21 + 56);
  LODWORD(a4) = *(_DWORD *)(v21 + 64);
  float v144 = *(float *)(v21 + 68);
  float v145 = *(float *)&a4;
  float v166 = *(float *)(v21 + 72);
  uint64_t v38 = v22 / v15 + v23;
  uint64_t v134 = v26 * v17;
  float v165 = *(float *)(v21 + 76);
  float v164 = *(float *)(v21 + 80);
  float v163 = *(float *)(v21 + 84);
  float v162 = *(float *)(v21 + 88);
  float v161 = *(float *)(v21 + 92);
  float v160 = *(float *)(v21 + 96);
  float v159 = *(float *)(v21 + 100);
  float v158 = *(float *)(v21 + 104);
  _D0.i32[1] = 0;
  long long v170 = 0u;
  *(_OWORD *)v171[0].i8 = 0u;
  do
  {
    unsigned int v40 = 0;
    char v41 = *((unsigned char *)&v172 + v11);
    do
    {
      v171[((v11 + (v40 >> 3)) & 0x1F) - 2].i8[v40] = v41 + 4 * v40;
      ++v40;
    }
    while (v40 != 8);
    ++v11;
  }
  while (v11 != 4);
  if (v18 != v16)
  {
    uint64_t v42 = 0;
    float v43 = (float)v33;
    float v44 = (float)v34;
    _S29 = 8191.0 / (float)v32;
    float v46 = (float)v35;
    float v150 = (float)v36;
    uint64_t v47 = v19 - v17;
    uint64_t v48 = v21 + 16548;
    uint64_t v49 = v21 + 164;
    float v50 = (float)v37;
    *(float *)_D0.i32 = v169;
    __asm { FCVT            H0, S0 }
    short float v157 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v168;
    __asm { FCVT            H0, S0 }
    short float v156 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v167;
    __asm { FCVT            H0, S0 }
    unsigned __int32 v155 = _D0.i32[0];
    *(float *)_D0.i32 = v149;
    __asm { FCVT            H0, S0 }
    short float v143 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v148;
    __asm { FCVT            H0, S0 }
    short float v142 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v147;
    __asm { FCVT            H0, S0 }
    short float v141 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v146;
    __asm { FCVT            H0, S0 }
    short float v140 = *(short float *)_D0.i16;
    _D0.i32[0] = LODWORD(a4);
    __asm { FCVT            H0, S0 }
    short float v139 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v144;
    __asm { FCVT            H0, S0 }
    float v138 = *(float *)_D0.i32;
    *(float *)_D0.i32 = v166;
    __asm { FCVT            H0, S0 }
    short float v154 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v165;
    __asm { FCVT            H0, S0 }
    short float v153 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v164;
    __asm { FCVT            H0, S0 }
    short float v152 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v163;
    __asm { FCVT            H0, S0 }
    short float v151 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v162;
    __asm { FCVT            H13, S0 }
    *(float *)_D0.i32 = v161;
    __asm { FCVT            H14, S0 }
    *(float *)_D0.i32 = v160;
    __asm { FCVT            H15, S0 }
    *(float *)_D0.i32 = v159;
    __asm { FCVT            H3, S0 }
    *(float *)_D0.i32 = v158;
    __asm { FCVT            H4, S0 }
    *(short float *)_D0.i16 = (short float)v33;
    float16x8_t v60 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v34;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)&a4 = (short float)v35;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    *(short float *)a5.i16 = (short float)v36;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(a5, 0);
    *(short float *)v10.i16 = (short float)v37;
    float16x8_t v64 = (float16x8_t)vdupq_lane_s16(v10, 0);
    if (v31) {
      float v65 = (void *)(v31 + v29 * v38 + v20);
    }
    else {
      float v65 = 0;
    }
    if (result) {
      result += v28 * v38 + v20;
    }
    else {
      uint64_t result = 0;
    }
    float v66 = (void *)(v135 + v27 * v38 + v20);
    uint64_t v67 = v136 + v134 + 4 * v137;
    __asm { FCVT            H9, S29 }
    v69.i64[0] = 0x9000900090009000;
    v69.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v12 < 8)
      {
        unint64_t v112 = 0;
        float v74 = result;
        float v73 = v65;
        __int16 v72 = v66;
        float v71 = (void *)v67;
      }
      else
      {
        int v70 = 0;
        float v71 = (void *)v67;
        __int16 v72 = v66;
        float v73 = v65;
        float v74 = result;
        do
        {
          int8x8_t v75 = v171[1];
          *(void *)&long long v79 = *v71;
          uint64_t v76 = v71[1];
          *(void *)&long long v77 = v71[2];
          uint64_t v78 = v71[3];
          v71 += 4;
          *((void *)&v79 + 1) = v76;
          *((void *)&v77 + 1) = v78;
          long long v80 = v77;
          int8x8_t v81 = vqtbl2_s8(*(int8x16x2_t *)&v79, *(int8x8_t *)&v170);
          int8x8_t v82 = vqtbl2_s8(*(int8x16x2_t *)&v79, *(int8x8_t *)((char *)&v170 + 8));
          int8x8_t v83 = vqtbl2_s8(*(int8x16x2_t *)&v79, v171[0]);
          *(int8x8_t *)v84.i8 = vzip1_s8(v81, 0);
          v84.u64[1] = (unint64_t)vzip2_s8(v81, 0);
          *(int8x8_t *)v85.i8 = vzip1_s8(v82, 0);
          v85.u64[1] = (unint64_t)vzip2_s8(v82, 0);
          *(int8x8_t *)v86.i8 = vzip1_s8(v83, 0);
          v86.u64[1] = (unint64_t)vzip2_s8(v83, 0);
          float16x8_t v87 = vmulq_n_f16(vcvtq_f16_u16(v85), _H9);
          uint16x8_t v88 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v84), _H9), (float16x8_t)0), v69));
          float16x8_t v89 = (float16x8_t)vmovl_high_u16(v88);
          *(void *)&long long v90 = v89.u32[2];
          *((void *)&v90 + 1) = v89.u32[3];
          long long v91 = v90;
          *(void *)&long long v90 = v89.u32[0];
          *((void *)&v90 + 1) = v89.u32[1];
          uint32x4_t v92 = vmovl_u16(*(uint16x4_t *)v88.i8);
          v89.i16[0] = *(_WORD *)(v49 + 2 * v92.u32[0]);
          v89.i16[1] = *(_WORD *)(v49 + 2 * v92.u32[1]);
          v89.i16[2] = *(_WORD *)(v49 + 2 * v92.u32[2]);
          v89.i16[3] = *(_WORD *)(v49 + 2 * v92.u32[3]);
          v89.i16[4] = *(_WORD *)(v49 + 2 * v90);
          v89.i16[5] = *(_WORD *)(v49 + 2 * *((void *)&v90 + 1));
          v89.i16[6] = *(_WORD *)(v49 + 2 * v91);
          v89.i16[7] = *(_WORD *)(v49 + 2 * *((void *)&v91 + 1));
          float16x8_t v93 = vmulq_n_f16(vcvtq_f16_u16(v86), _H9);
          uint16x8_t v94 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v87, (float16x8_t)0), v69));
          uint32x4_t v95 = vmovl_high_u16(v94);
          uint32x4_t v96 = vmovl_u16(*(uint16x4_t *)v94.i8);
          v86.i16[0] = *(_WORD *)(v49 + 2 * v96.u32[0]);
          v86.i16[1] = *(_WORD *)(v49 + 2 * v96.u32[1]);
          v86.i16[2] = *(_WORD *)(v49 + 2 * v96.u32[2]);
          v86.i16[3] = *(_WORD *)(v49 + 2 * v96.u32[3]);
          v86.i16[4] = *(_WORD *)(v49 + 2 * v95.u32[0]);
          v86.i16[5] = *(_WORD *)(v49 + 2 * v95.u32[1]);
          v86.i16[6] = *(_WORD *)(v49 + 2 * v95.u32[2]);
          v86.i16[7] = *(_WORD *)(v49 + 2 * v95.u32[3]);
          uint16x8_t v97 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v93, (float16x8_t)0), v69));
          uint32x4_t v98 = vmovl_high_u16(v97);
          float16x8_t v99 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v97.i8);
          v99.i16[0] = *(_WORD *)(v49 + 2 * v99.u32[0]);
          v99.i16[1] = *(_WORD *)(v49 + 2 * v99.u32[1]);
          v99.i16[2] = *(_WORD *)(v49 + 2 * v99.u32[2]);
          v99.i16[3] = *(_WORD *)(v49 + 2 * v99.u32[3]);
          v99.i16[4] = *(_WORD *)(v49 + 2 * v98.u32[0]);
          v99.i16[5] = *(_WORD *)(v49 + 2 * v98.u32[1]);
          v99.i16[6] = *(_WORD *)(v49 + 2 * v98.u32[2]);
          v99.i16[7] = *(_WORD *)(v49 + 2 * v98.u32[3]);
          float16x8_t v100 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v89, v151), (float16x8_t)v86, _H13), v99, _H14);
          float16x8_t v101 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v99, _H4), (float16x8_t)v86, _H3), v89, _H15);
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v89, v154), (float16x8_t)v86, v153), v99, v152), (float16x8_t)0), v69));
          uint32x4_t v103 = vmovl_high_u16(v102);
          uint32x4_t v104 = vmovl_u16(*(uint16x4_t *)v102.i8);
          v105.i16[0] = *(_WORD *)(v48 + 2 * v104.u32[0]);
          v105.i16[1] = *(_WORD *)(v48 + 2 * v104.u32[1]);
          v105.i16[2] = *(_WORD *)(v48 + 2 * v104.u32[2]);
          v105.i16[3] = *(_WORD *)(v48 + 2 * v104.u32[3]);
          v105.i16[4] = *(_WORD *)(v48 + 2 * v103.u32[0]);
          v105.i16[5] = *(_WORD *)(v48 + 2 * v103.u32[1]);
          v105.i16[6] = *(_WORD *)(v48 + 2 * v103.u32[2]);
          v105.i16[7] = *(_WORD *)(v48 + 2 * v103.u32[3]);
          uint16x8_t v106 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v100, (float16x8_t)0), v69));
          uint32x4_t v107 = vmovl_high_u16(v106);
          uint32x4_t v108 = vmovl_u16(*(uint16x4_t *)v106.i8);
          v109.i16[0] = *(_WORD *)(v48 + 2 * v108.u32[0]);
          v109.i16[1] = *(_WORD *)(v48 + 2 * v108.u32[1]);
          v109.i16[2] = *(_WORD *)(v48 + 2 * v108.u32[2]);
          v109.i16[3] = *(_WORD *)(v48 + 2 * v108.u32[3]);
          v109.i16[4] = *(_WORD *)(v48 + 2 * v107.u32[0]);
          v109.i16[5] = *(_WORD *)(v48 + 2 * v107.u32[1]);
          v109.i16[6] = *(_WORD *)(v48 + 2 * v107.u32[2]);
          v109.i16[7] = *(_WORD *)(v48 + 2 * v107.u32[3]);
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v101, (float16x8_t)0), v69));
          a9 = (float16x8_t)vmovl_high_u16(v110);
          a10 = *(float *)&a9.i32[2];
          a8 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v110.i8);
          v111.i16[0] = *(_WORD *)(v48 + 2 * a8.u32[0]);
          v111.i16[1] = *(_WORD *)(v48 + 2 * a8.u32[1]);
          v111.i16[2] = *(_WORD *)(v48 + 2 * a8.u32[2]);
          v111.i16[3] = *(_WORD *)(v48 + 2 * a8.u32[3]);
          v111.i16[4] = *(_WORD *)(v48 + 2 * a9.u32[0]);
          v111.i16[5] = *(_WORD *)(v48 + 2 * a9.u32[1]);
          v111.i16[6] = *(_WORD *)(v48 + 2 * a9.u32[2]);
          v111.i16[7] = *(_WORD *)(v48 + 2 * a9.u32[3]);
          a9.i32[0] = v155;
          *(int8x8_t *)a8.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v60, v105, v157), v109, v156), v111, *(short float *)&v155), v60), v62)));
          *v72++ = a8.i64[0];
          if (v74)
          {
            a10 = v138;
            a9 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v61, v105, v140), v109, v139), v111, *(short float *)&v138);
            v173.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v61, v105, v143), v109, v142), v111, v141), v63), v64), v63), v64)));
            a8 = (int16x8_t)vcvtq_u16_f16(a9);
            v173.val[1] = vmovn_s16(a8);
            vst2_s8(v74, v173);
            v74 += 16;
          }
          if (v73)
          {
            *(int8x8_t *)a9.i8 = vqtbl2_s8(*(int8x16x2_t *)&v79, v75);
            a10 = *(float *)&v73;
            *(int8x8_t *)a8.i8 = vbic_s8(*(int8x8_t *)a9.i8, (int8x8_t)vceqd_s64((uint64_t)v73, 0));
            *v73++ = a8.i64[0];
          }
          v70 += 8;
        }
        while (v70 < (int)v12 - 7);
        unint64_t v112 = v12 & 0xFFFFFFF8;
      }
      _CF = v12 >= v112;
      unint64_t v113 = v12 - v112;
      if (v113 != 0 && _CF)
      {
        do
        {
          a8.i8[0] = *((unsigned char *)v71 + v172);
          a9.i8[0] = *((unsigned char *)v71 + BYTE1(v172));
          LOBYTE(a10) = *((unsigned char *)v71 + BYTE2(v172));
          unsigned int v114 = llroundf(fminf(fmaxf(_S29 * (float)a8.u32[0], 0.0), 8191.0));
          _S5 = _S29 * (float)LODWORD(a10);
          _H7 = *(_WORD *)(v49 + 2 * v114);
          __asm { FCVT            S7, H7 }
          _H6 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S29 * (float)a9.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S5) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          float v121 = (float)((float)(v165 * _S6) + (float)(_S7 * v166)) + (float)(_S5 * v164);
          float v122 = (float)((float)(v162 * _S6) + (float)(_S7 * v163)) + (float)(_S5 * v161);
          _S6 = (float)(v159 * _S6) + (float)(_S7 * v160);
          a10 = v158;
          _S5 = _S6 + (float)(_S5 * v158);
          LOWORD(_S6) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          __asm { FCVT            S21, H6 }
          LOWORD(_S6) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm { FCVT            S22, H6 }
          LOWORD(_S5) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S23, H5 }
          *(float *)a9.i32 = v167;
          *(float *)a8.i32 = (float)((float)(v168 * _S22) + (float)(v169 * _S21)) + (float)(v167 * _S23);
          float v128 = v46;
          if ((float)(*(float *)a8.i32 + v43) <= v46)
          {
            float v128 = *(float *)a8.i32 + v43;
            if ((float)(*(float *)a8.i32 + v43) < v43) {
              float v128 = (float)v33;
            }
          }
          char v129 = *((unsigned char *)v71 + HIBYTE(v172));
          *(unsigned char *)__int16 v72 = llroundf(v128);
          __int16 v72 = (void *)((char *)v72 + 1);
          if (v74)
          {
            float v130 = (float)((float)(v44 + (float)(_S21 * v149)) + (float)(_S22 * v148)) + (float)(_S23 * v147);
            float v131 = v50;
            if (v130 <= v50)
            {
              float v131 = (float)((float)(v44 + (float)(_S21 * v149)) + (float)(_S22 * v148)) + (float)(_S23 * v147);
              if (v130 < v150) {
                float v131 = v150;
              }
            }
            *(float *)a8.i32 = (float)(v44 + (float)(_S21 * v146)) + (float)(_S22 * v145);
            *(float *)a9.i32 = v144;
            float v132 = *(float *)a8.i32 + (float)(_S23 * v144);
            *float v74 = llroundf(v131);
            float v133 = v50;
            if (v132 <= v50)
            {
              *(float *)a8.i32 = v150;
              float v133 = v132;
              if (v132 < v150) {
                float v133 = v150;
              }
            }
            v74[1] = llroundf(v133);
            v74 += 2;
          }
          if (v73)
          {
            *(unsigned char *)float v73 = v129;
            float v73 = (void *)((char *)v73 + 1);
          }
          float v71 = (void *)((char *)v71 + 4);
          --v113;
        }
        while (v113);
      }
      v67 += v26;
      float v66 = (void *)((char *)v66 + v27);
      result += v28;
      float v65 = (void *)((char *)v65 + v29);
      ++v42;
    }
    while (v42 != v47);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_444vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v12 = *(void *)(result + 28);
  unint64_t v13 = *result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = (v12 + v12 * a2) / v13;
  if (v15 != v14)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(result + 20);
    unint64_t v18 = v14 + *(void *)(result + 44);
    unint64_t v19 = v15 - v14;
    uint64_t v20 = *((void *)result + 19);
    long long v21 = (uint64_t *)*((void *)result + 17);
    int64x2_t v22 = (void *)*((void *)result + 7);
    uint64_t v23 = **((void **)result + 8);
    uint64_t v24 = *v21;
    uint64_t v25 = v21[1];
    uint64_t v26 = v21[2];
    float v27 = 8191.0 / (float)*(unsigned int *)(v20 + 128);
    LOWORD(a5) = *(_WORD *)(v20 + 144);
    float v28 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v20 + 146);
    float v29 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v20 + 148);
    float v30 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v20 + 150);
    float v31 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v20 + 152);
    float v32 = (float)LODWORD(a9);
    float v33 = *(float *)(v20 + 36);
    float v34 = *(float *)(v20 + 40);
    float v35 = *(float *)(v20 + 44);
    float v36 = *(float *)(v20 + 48);
    float v37 = *(float *)(v20 + 52);
    float v38 = *(float *)(v20 + 56);
    float v39 = *(float *)(v20 + 60);
    float v40 = *(float *)(v20 + 64);
    float v41 = *(float *)(v20 + 68);
    float v42 = *(float *)(v20 + 72);
    float v43 = *(float *)(v20 + 76);
    float v44 = *(float *)(v20 + 80);
    float v45 = *(float *)(v20 + 84);
    float v46 = *(float *)(v20 + 88);
    float v47 = *(float *)(v20 + 92);
    float v48 = *(float *)(v20 + 96);
    float v50 = *(float *)(v20 + 100);
    float v49 = *(float *)(v20 + 104);
    uint64_t v51 = v20 + 164;
    uint64_t v52 = v20 + 16548;
    uint64_t v53 = (uint64_t *)*((void *)result + 16);
    uint64_t v54 = *((void *)result + 14);
    unint64_t v55 = *((void *)result + 13) * a2 / v13 + *((void *)result + 15);
    uint64_t v56 = *(void *)(result + 36);
    uint64_t v57 = *(unsigned __int8 *)(v20 + 157);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v20 + 156);
    uint64_t v58 = *(unsigned __int8 *)(v20 + 155);
    uint64_t v59 = *(unsigned __int8 *)(v20 + 154);
    uint64_t v60 = v53[2];
    if (v60) {
      float16x8_t v61 = (unsigned char *)(v60 + v55 * v26 + v54);
    }
    else {
      float16x8_t v61 = 0;
    }
    uint64_t v63 = *v53;
    uint64_t v62 = v53[1];
    float16x8_t v64 = (unsigned char *)(v62 + v55 * v25 + v54);
    if (!v62) {
      float16x8_t v64 = 0;
    }
    float v65 = (unsigned char *)(v63 + v55 * v24 + v54);
    uint64_t v66 = *v22 + v23 * v18 + 4 * v56;
    do
    {
      if (v17)
      {
        uint64_t v67 = v17;
        uint64_t v68 = v66;
        float16x8_t v69 = v61;
        int v70 = v64;
        float v71 = v65;
        do
        {
          LOBYTE(_S10) = *(unsigned char *)(v68 + v59);
          LOBYTE(_S11) = *(unsigned char *)(v68 + v58);
          LOBYTE(_S12) = result[v68];
          unsigned int v72 = llroundf(fminf(fmaxf(v27 * (float)LODWORD(_S10), 0.0), 8191.0));
          _S10 = v27 * (float)LODWORD(_S12);
          _H12 = *(_WORD *)(v51 + 2 * v72);
          __asm { FCVT            S12, H12 }
          _H11 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v27 * (float)LODWORD(_S11), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S10) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          float v83 = (float)((float)(v43 * _S11) + (float)(_S12 * v42)) + (float)(_S10 * v44);
          float v84 = (float)((float)(v46 * _S11) + (float)(_S12 * v45)) + (float)(_S10 * v47);
          _S12 = (float)((float)(v50 * _S11) + (float)(_S12 * v48)) + (float)(_S10 * v49);
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          float v86 = (float)((float)((float)(v34 * _S11) + (float)(v33 * _S10)) + (float)(v35 * _S12)) + v28;
          float v87 = v30;
          if (v86 <= v30)
          {
            float v87 = (float)((float)((float)(v34 * _S11) + (float)(v33 * _S10)) + (float)(v35 * _S12)) + v28;
            if (v86 < v28) {
              float v87 = v28;
            }
          }
          char v88 = *(unsigned char *)(v68 + v57);
          *v71++ = llroundf(v87);
          if (v70)
          {
            float v89 = (float)((float)(v29 + (float)(_S10 * v36)) + (float)(_S11 * v37)) + (float)(_S12 * v38);
            float v90 = v32;
            if (v89 <= v32)
            {
              float v90 = (float)((float)(v29 + (float)(_S10 * v36)) + (float)(_S11 * v37)) + (float)(_S12 * v38);
              if (v89 < v31) {
                float v90 = v31;
              }
            }
            _S10 = (float)((float)(v29 + (float)(_S10 * v39)) + (float)(_S11 * v40)) + (float)(_S12 * v41);
            unsigned char *v70 = llroundf(v90);
            _S11 = v32;
            if (_S10 <= v32)
            {
              _S11 = _S10;
              if (_S10 < v31) {
                _S11 = v31;
              }
            }
            v70[1] = llroundf(_S11);
            v70 += 2;
          }
          if (v69) {
            *v69++ = v88;
          }
          v68 += 4;
          --v67;
        }
        while (v67);
      }
      v66 += v23;
      v65 += v24;
      v64 += v25;
      v61 += v26;
      ++v16;
    }
    while (v16 != v19);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_444vf_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_444vf_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_BGRA_rgb_444vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, uint16x8_t a8)
{
  uint64_t v8 = 0;
  unint64_t v9 = *(void *)(a1 + 20);
  uint64_t v106 = *(void *)(a1 + 36);
  uint64_t v10 = *(void *)(a1 + 44);
  uint64_t v11 = *(void *)(a1 + 28);
  unint64_t v12 = *a1;
  unint64_t v13 = v11 * a2 / v12;
  uint64_t v14 = v13 + v10;
  unint64_t v15 = (v11 + v11 * a2) / v12;
  uint64_t v16 = v15 + v10;
  uint64_t v17 = *((void *)a1 + 14);
  unint64_t v18 = *((void *)a1 + 13) * a2;
  uint64_t v19 = *((void *)a1 + 19);
  uint64_t v20 = *((void *)a1 + 15);
  long long v21 = (uint64_t *)*((void *)a1 + 16);
  int64x2_t v22 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v23 = **((void **)a1 + 8);
  uint64_t v105 = **((void **)a1 + 7);
  uint64_t v24 = *v22;
  uint64_t v25 = v22[1];
  uint64_t v26 = v22[2];
  uint64_t v104 = *v21;
  uint64_t v28 = v21[1];
  uint64_t v27 = v21[2];
  unsigned int v29 = *(_DWORD *)(v19 + 128);
  unsigned int v30 = *(_DWORD *)(v19 + 136);
  int v119 = *(_DWORD *)(v19 + 154);
  unsigned int v31 = *(unsigned __int16 *)(v19 + 144);
  unsigned int v32 = *(unsigned __int16 *)(v19 + 146);
  unsigned int v33 = *(unsigned __int16 *)(v19 + 148);
  unsigned int v34 = *(unsigned __int16 *)(v19 + 150);
  unsigned int v35 = *(unsigned __int16 *)(v19 + 152);
  uint64_t v36 = v18 / v12 + v20;
  uint64_t v103 = v23 * v14;
  _S0 = *(float *)(v19 + 36);
  _S1 = *(float *)(v19 + 40);
  _S2 = *(float *)(v19 + 44);
  float v115 = *(float *)(v19 + 52);
  float v116 = *(float *)(v19 + 48);
  float v113 = *(float *)(v19 + 60);
  float v114 = *(float *)(v19 + 56);
  float v111 = *(float *)(v19 + 68);
  float v112 = *(float *)(v19 + 64);
  _D3.i32[1] = 0;
  long long v117 = 0u;
  *(_OWORD *)v118[0].i8 = 0u;
  do
  {
    unsigned int v41 = 0;
    uint64_t result = *((unsigned __int8 *)&v119 + v8);
    do
    {
      v118[((v8 + (v41 >> 3)) & 0x1F) - 2].i8[v41] = result + 4 * v41;
      ++v41;
    }
    while (v41 != 8);
    ++v8;
  }
  while (v8 != 4);
  if (v15 != v13)
  {
    uint64_t v43 = 0;
    uint64_t v44 = v16 - v14;
    *(float *)&a7 = (float)v29;
    _S17 = (float)v30 / (float)v29;
    float v46 = (float)v31;
    float v47 = (float)v32;
    float v48 = (float)v34;
    float v49 = (float)v35;
    __asm
    {
      FCVT            H8, S0
      FCVT            H9, S1
      FCVT            H10, S2
    }
    *(float *)_D3.i32 = v116;
    __asm { FCVT            H3, S3 }
    short float v110 = *(short float *)_D3.i16;
    *(float *)_D3.i32 = v115;
    __asm { FCVT            H3, S3 }
    short float v109 = *(short float *)_D3.i16;
    *(float *)_D3.i32 = v114;
    __asm { FCVT            H3, S3 }
    short float v108 = *(short float *)_D3.i16;
    *(float *)_D3.i32 = v113;
    __asm { FCVT            H3, S3 }
    short float v107 = *(short float *)_D3.i16;
    *(float *)_D3.i32 = v112;
    __asm { FCVT            H7, S3 }
    *(short float *)_D3.i16 = (short float)v31;
    float16x8_t v58 = (float16x8_t)vdupq_lane_s16(_D3, 0);
    *(short float *)_D3.i16 = (short float)v32;
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(_D3, 0);
    *(short float *)_D3.i16 = (short float)v33;
    float16x8_t v60 = (float16x8_t)vdupq_lane_s16(_D3, 0);
    *(short float *)_D3.i16 = (short float)v34;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(_D3, 0);
    _S3 = v111;
    __asm { FCVT            H3, S3 }
    *(short float *)&a7 = (short float)v35;
    float16x8_t v64 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    if (v27) {
      float v65 = (void *)(v27 + v26 * v36 + v17);
    }
    else {
      float v65 = 0;
    }
    if (v28) {
      uint64_t v66 = (char *)(v28 + v25 * v36 + v17);
    }
    else {
      uint64_t v66 = 0;
    }
    uint64_t v67 = (void *)(v104 + v24 * v36 + v17);
    uint64_t result = v105 + v103 + 4 * v106;
    __asm { FCVT            H4, S17 }
    do
    {
      if ((int)v9 < 8)
      {
        unint64_t v90 = 0;
        float v73 = v66;
        unsigned int v72 = v65;
        float v71 = v67;
        int v70 = (void *)result;
      }
      else
      {
        int v69 = 0;
        int v70 = (void *)result;
        float v71 = v67;
        unsigned int v72 = v65;
        float v73 = v66;
        do
        {
          int8x8_t v74 = v118[1];
          *(void *)&long long v78 = *v70;
          uint64_t v75 = v70[1];
          *(void *)&long long v76 = v70[2];
          uint64_t v77 = v70[3];
          v70 += 4;
          *((void *)&v78 + 1) = v75;
          *((void *)&v76 + 1) = v77;
          long long v79 = v76;
          int8x8_t v80 = vqtbl2_s8(*(int8x16x2_t *)&v78, *(int8x8_t *)&v117);
          int8x8_t v81 = vqtbl2_s8(*(int8x16x2_t *)&v78, *(int8x8_t *)((char *)&v117 + 8));
          int8x8_t v82 = vqtbl2_s8(*(int8x16x2_t *)&v78, v118[0]);
          int8x8_t v83 = vzip1_s8(v80, 0);
          a8.u64[1] = (unint64_t)vzip2_s8(v80, 0);
          *(int8x8_t *)v84.i8 = vzip1_s8(v81, 0);
          v84.u64[1] = (unint64_t)vzip2_s8(v81, 0);
          float16x8_t v85 = vcvtq_f16_u16(v84);
          *(int8x8_t *)v84.i8 = vzip1_s8(v82, 0);
          v84.u64[1] = (unint64_t)vzip2_s8(v82, 0);
          float16x8_t v86 = vcvtq_f16_u16(v84);
          float16x8_t v87 = vmulq_n_f16(vcvtq_f16_u16(a8), _H4);
          float16x8_t v88 = vmulq_n_f16(v85, _H4);
          float16x8_t v89 = vmulq_n_f16(v86, _H4);
          *(int8x8_t *)a8.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v58, v87, _H8), v88, _H9), v89, _H10), v58), v60)));
          *v71++ = a8.i64[0];
          if (v73)
          {
            v120.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v59, v87, v110), v88, v109), v89, v108), v61), v64), v61), v64)));
            a8 = vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v59, v87, v107), v88, _H7), v89, _H3));
            v120.val[1] = vmovn_s16((int16x8_t)a8);
            vst2_s8(v73, v120);
            v73 += 16;
          }
          if (v72)
          {
            *(int8x8_t *)a8.i8 = vbic_s8(vqtbl2_s8(*(int8x16x2_t *)&v78, v74), (int8x8_t)vceqd_s64((uint64_t)v72, 0));
            *v72++ = a8.i64[0];
          }
          v69 += 8;
        }
        while (v69 < (int)v9 - 7);
        unint64_t v90 = v9 & 0xFFFFFFF8;
      }
      _CF = v9 >= v90;
      unint64_t v91 = v9 - v90;
      if (v91 != 0 && _CF)
      {
        do
        {
          a8.i8[0] = *((unsigned char *)v70 + v119);
          *(float *)&unsigned int v92 = (float)a8.u32[0];
          float v93 = _S17 * *(float *)&v92;
          LOBYTE(v92) = *((unsigned char *)v70 + BYTE1(v119));
          *(float *)&unsigned int v94 = (float)v92;
          float v95 = _S17 * *(float *)&v94;
          LOBYTE(v94) = *((unsigned char *)v70 + BYTE2(v119));
          float v96 = _S17 * (float)v94;
          *(float *)a8.i32 = (float)((float)(_S1 * v95) + (float)(_S0 * v93)) + (float)(_S2 * v96);
          float v97 = (float)v33;
          if ((float)(*(float *)a8.i32 + v46) <= (float)v33)
          {
            float v97 = *(float *)a8.i32 + v46;
            if ((float)(*(float *)a8.i32 + v46) < v46) {
              float v97 = (float)v31;
            }
          }
          char v98 = *((unsigned char *)v70 + HIBYTE(v119));
          *(unsigned char *)float v71 = llroundf(v97);
          float v71 = (void *)((char *)v71 + 1);
          if (v73)
          {
            float v99 = (float)((float)(v47 + (float)(v93 * v116)) + (float)(v95 * v115)) + (float)(v96 * v114);
            float v100 = v49;
            if (v99 <= v49)
            {
              float v100 = (float)((float)(v47 + (float)(v93 * v116)) + (float)(v95 * v115)) + (float)(v96 * v114);
              if (v99 < v48) {
                float v100 = v48;
              }
            }
            *(float *)a8.i32 = (float)(v47 + (float)(v93 * v113)) + (float)(v95 * v112);
            float v101 = *(float *)a8.i32 + (float)(v96 * v111);
            *float v73 = llroundf(v100);
            float v102 = v49;
            if (v101 <= v49)
            {
              float v102 = *(float *)a8.i32 + (float)(v96 * v111);
              if (v101 < v48) {
                float v102 = v48;
              }
            }
            v73[1] = llroundf(v102);
            v73 += 2;
          }
          if (v72)
          {
            *(unsigned char *)unsigned int v72 = v98;
            unsigned int v72 = (void *)((char *)v72 + 1);
          }
          int v70 = (void *)((char *)v70 + 4);
          --v91;
        }
        while (v91);
      }
      result += v23;
      uint64_t v67 = (void *)((char *)v67 + v24);
      v66 += v25;
      float v65 = (void *)((char *)v65 + v26);
      ++v43;
    }
    while (v43 != v44);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_444vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = *result;
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (v14 != v13)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(result + 20);
    unint64_t v17 = v13 + *(void *)(result + 44);
    unint64_t v18 = v14 - v13;
    uint64_t v19 = *((void *)result + 19);
    int64x2_t v20 = (uint64_t *)*((void *)result + 17);
    long long v21 = (void *)*((void *)result + 7);
    uint64_t v22 = **((void **)result + 8);
    uint64_t v23 = *v20;
    uint64_t v24 = v20[1];
    uint64_t v25 = v20[2];
    *(float *)&unsigned int v26 = (float)*(unsigned int *)(v19 + 136);
    float v27 = *(float *)&v26 / (float)*(unsigned int *)(v19 + 128);
    LOWORD(v26) = *(_WORD *)(v19 + 144);
    float v28 = (float)v26;
    LOWORD(a5) = *(_WORD *)(v19 + 146);
    float v29 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v19 + 148);
    float v30 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v19 + 150);
    float v31 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v19 + 152);
    float v32 = (float)LODWORD(a8);
    float v33 = *(float *)(v19 + 36);
    float v34 = *(float *)(v19 + 40);
    float v35 = *(float *)(v19 + 44);
    float v36 = *(float *)(v19 + 48);
    float v37 = *(float *)(v19 + 52);
    float v38 = *(float *)(v19 + 56);
    float v39 = *(float *)(v19 + 60);
    float v40 = *(float *)(v19 + 64);
    float v41 = *(float *)(v19 + 68);
    float v42 = (void *)*((void *)result + 16);
    uint64_t v43 = *((void *)result + 14);
    unint64_t v44 = *((void *)result + 13) * a2 / v12 + *((void *)result + 15);
    uint64_t v45 = *(void *)(result + 36);
    uint64_t v46 = *(unsigned __int8 *)(v19 + 157);
    uint64_t v47 = *(unsigned __int8 *)(v19 + 156);
    uint64_t v48 = *(unsigned __int8 *)(v19 + 155);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v19 + 154);
    uint64_t v49 = v42[2];
    if (v49) {
      float v50 = (unsigned char *)(v49 + v44 * v25 + v43);
    }
    else {
      float v50 = 0;
    }
    uint64_t v53 = v42;
    uint64_t v52 = *v42;
    uint64_t v51 = v53[1];
    BOOL v54 = v51 == 0;
    unint64_t v55 = (unsigned char *)(v51 + v44 * v24 + v43);
    if (v54) {
      unint64_t v55 = 0;
    }
    uint64_t v56 = (unsigned char *)(v52 + v44 * v23 + v43);
    uint64_t v57 = *v21 + v22 * v17 + 4 * v45;
    do
    {
      if (v16)
      {
        uint64_t v58 = v16;
        uint64_t v59 = v57;
        float16x8_t v60 = v50;
        float16x8_t v61 = v55;
        uint64_t v62 = v56;
        do
        {
          LOBYTE(v8) = result[v59];
          float v8 = v27 * (float)LODWORD(v8);
          LOBYTE(v9) = *(unsigned char *)(v59 + v48);
          float v9 = v27 * (float)LODWORD(v9);
          LOBYTE(v10) = *(unsigned char *)(v59 + v47);
          float v10 = v27 * (float)LODWORD(v10);
          float v63 = (float)((float)((float)(v34 * v9) + (float)(v33 * v8)) + (float)(v35 * v10)) + v28;
          float v64 = v30;
          if (v63 <= v30)
          {
            float v64 = (float)((float)((float)(v34 * v9) + (float)(v33 * v8)) + (float)(v35 * v10)) + v28;
            if (v63 < v28) {
              float v64 = v28;
            }
          }
          char v65 = *(unsigned char *)(v59 + v46);
          *v62++ = llroundf(v64);
          if (v61)
          {
            float v66 = (float)((float)(v29 + (float)(v8 * v36)) + (float)(v9 * v37)) + (float)(v10 * v38);
            float v67 = v32;
            if (v66 <= v32)
            {
              float v67 = (float)((float)(v29 + (float)(v8 * v36)) + (float)(v9 * v37)) + (float)(v10 * v38);
              if (v66 < v31) {
                float v67 = v31;
              }
            }
            float v8 = (float)((float)(v29 + (float)(v8 * v39)) + (float)(v9 * v40)) + (float)(v10 * v41);
            *float16x8_t v61 = llroundf(v67);
            float v9 = v32;
            if (v8 <= v32)
            {
              float v9 = v8;
              if (v8 < v31) {
                float v9 = v31;
              }
            }
            v61[1] = llroundf(v9);
            v61 += 2;
          }
          if (v60) {
            *v60++ = v65;
          }
          v59 += 4;
          --v58;
        }
        while (v58);
      }
      v57 += v22;
      v56 += v23;
      v55 += v24;
      v50 += v25;
      ++v15;
    }
    while (v15 != v18);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf444_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

int16x8_t *vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, float16x8_t a5)
{
  uint64_t v5 = 0;
  unint64_t v6 = *(void *)(a1 + 20);
  uint64_t v149 = *(void *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 44);
  uint64_t v8 = *(void *)(a1 + 28);
  unint64_t v9 = *a1;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = v10 + v7;
  unint64_t v12 = (v8 + v8 * a2) / v9;
  uint64_t v13 = v12 + v7;
  uint64_t v14 = *((void *)a1 + 14);
  uint64_t v15 = *((void *)a1 + 19);
  uint64_t v16 = *((void *)a1 + 15);
  uint64_t v17 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v19 = **((void **)a1 + 8);
  uint64_t v148 = **((void **)a1 + 7);
  unint64_t v20 = *((void *)a1 + 13) * a2;
  uint64_t v21 = *v18;
  uint64_t v22 = v18[1];
  uint64_t v23 = v18[2];
  uint64_t v24 = v17[1];
  uint64_t v147 = *v17;
  uint64_t result = (int16x8_t *)v17[2];
  unsigned int v26 = *(_DWORD *)(v15 + 128);
  int v191 = *(_DWORD *)(v15 + 154);
  unsigned int v27 = *(unsigned __int16 *)(v15 + 144);
  unsigned int v28 = *(unsigned __int8 *)(v15 + 132);
  unsigned int v29 = *(unsigned __int16 *)(v15 + 146);
  unsigned int v30 = *(unsigned __int16 *)(v15 + 148);
  unsigned int v31 = *(unsigned __int16 *)(v15 + 150);
  unsigned int v32 = *(unsigned __int16 *)(v15 + 152);
  _S29 = *(float *)(v15 + 36);
  float v188 = *(float *)(v15 + 40);
  float v187 = *(float *)(v15 + 44);
  float v161 = *(float *)(v15 + 52);
  float v162 = *(float *)(v15 + 48);
  float v159 = *(float *)(v15 + 60);
  float v160 = *(float *)(v15 + 56);
  v34.i32[0] = *(_DWORD *)(v15 + 64);
  float v157 = *(float *)(v15 + 68);
  float v158 = *(float *)v34.i32;
  float v186 = *(float *)(v15 + 72);
  float v185 = *(float *)(v15 + 76);
  float v184 = *(float *)(v15 + 80);
  float v183 = *(float *)(v15 + 84);
  float v182 = *(float *)(v15 + 88);
  uint64_t v35 = v20 / v9 + v16;
  uint64_t v146 = v19 * v11;
  float v181 = *(float *)(v15 + 92);
  float v180 = *(float *)(v15 + 96);
  float v179 = *(float *)(v15 + 100);
  float v178 = *(float *)(v15 + 104);
  float v177 = *(float *)(v15 + 108);
  float v176 = *(float *)(v15 + 112);
  float v175 = *(float *)(v15 + 116);
  float v174 = *(float *)(v15 + 120);
  _D0.i32[1] = 0;
  long long v189 = 0u;
  long long v190 = 0u;
  do
  {
    unsigned int v37 = 0;
    char v38 = *((unsigned char *)&v191 + v5);
    do
    {
      *((unsigned char *)&v189 + 8 * (((_BYTE)v5 + (v37 >> 3)) & 0x1F) + v37) = v38 + 4 * v37;
      ++v37;
    }
    while (v37 != 8);
    ++v5;
  }
  while (v5 != 4);
  if (v12 != v10)
  {
    uint64_t v39 = 0;
    float v40 = (float)v27;
    float v41 = (float)v29;
    float v42 = (float)v30;
    _S10 = 8191.0 / (float)v26;
    float v163 = (float)v31;
    float v44 = (float)v32;
    __asm { FCVT            H0, S29 }
    short float v173 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v188;
    __asm { FCVT            H0, S0 }
    short float v172 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v187;
    __asm { FCVT            H0, S0 }
    __int32 v171 = _D0.i32[0];
    *(float *)_D0.i32 = v162;
    __asm { FCVT            H0, S0 }
    short float v156 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v161;
    __asm { FCVT            H0, S0 }
    short float v155 = *(short float *)_D0.i16;
    uint64_t v49 = v13 - v11;
    uint64_t v50 = v15 + 16548;
    uint64_t v51 = v15 + 32932;
    uint64_t v52 = v15 + 164;
    *(float *)_D0.i32 = v160;
    __asm { FCVT            H0, S0 }
    short float v154 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v159;
    __asm { FCVT            H0, S0 }
    short float v153 = *(short float *)_D0.i16;
    _D0.i32[0] = v34.i32[0];
    __asm { FCVT            H0, S0 }
    short float v152 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v157;
    __asm { FCVT            H0, S0 }
    short float v151 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v177;
    __asm { FCVT            H0, S0 }
    short float v170 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v176;
    __asm { FCVT            H0, S0 }
    short float v169 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v175;
    __asm { FCVT            H0, S0 }
    short float v168 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v174;
    __asm { FCVT            H0, S0 }
    short float v167 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v186;
    __asm { FCVT            H0, S0 }
    short float v165 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v185;
    __asm { FCVT            H7, S0 }
    *(float *)_D0.i32 = v184;
    __asm { FCVT            H0, S0 }
    short float v166 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v183;
    __asm { FCVT            H0, S0 }
    short float v164 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v182;
    __asm { FCVT            H11, S0 }
    *(float *)_D0.i32 = v181;
    __asm { FCVT            H13, S0 }
    *(short float *)_D0.i16 = (short float)v27;
    float16x8_t v56 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v29;
    float16x8_t v57 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v30;
    float16x8_t v58 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v31;
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(float *)_D0.i32 = v180;
    __asm { FCVT            H14, S0 }
    *(short float *)_D0.i16 = (short float)v32;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    if (v28 >= 0x11) {
      unsigned __int8 v62 = 0;
    }
    else {
      unsigned __int8 v62 = 16 - v28;
    }
    if (result) {
      uint64_t result = (int16x8_t *)((char *)result + 2 * v14 + v23 * v35);
    }
    else {
      uint64_t result = 0;
    }
    if (v24) {
      uint64_t v63 = v24 + v22 * v35 + 2 * v14;
    }
    else {
      uint64_t v63 = 0;
    }
    uint64_t v64 = v147 + v21 * v35 + 2 * v14;
    uint64_t v65 = v148 + v146 + 4 * v149;
    _S0 = v179;
    __asm { FCVT            H15, S0 }
    uint16x8_t v68 = (uint16x8_t)vdupq_n_s16(v62);
    *(float *)_Q0.i32 = v178;
    __asm { FCVT            H4, S0 }
    v71.i64[0] = 0x9000900090009000;
    v71.i64[1] = 0x9000900090009000;
    __asm { FCVT            H5, S10 }
    float v150 = _S29;
    do
    {
      if ((int)v6 < 8)
      {
        unint64_t v122 = 0;
        uint64_t v77 = (uint16x8_t *)v64;
        long long v76 = (__int16 *)v63;
        uint64_t v75 = result;
        int8x8_t v74 = (void *)v65;
      }
      else
      {
        int v73 = 0;
        int8x8_t v74 = (void *)v65;
        uint64_t v75 = result;
        long long v76 = (__int16 *)v63;
        uint64_t v77 = (uint16x8_t *)v64;
        do
        {
          *(void *)&long long v81 = *v74;
          uint64_t v78 = v74[1];
          v79.i64[0] = v74[2];
          uint64_t v80 = v74[3];
          v74 += 4;
          *((void *)&v81 + 1) = v78;
          v79.i64[1] = v80;
          uint16x8_t v82 = v79;
          if (v75)
          {
            int8x8_t v83 = vqtbl2_s8(*(int8x16x2_t *)&v81, *(int8x8_t *)((char *)&v190 + 8));
            *(int8x8_t *)v84.i8 = vzip1_s8(v83, 0);
            v84.u64[1] = (unint64_t)vzip2_s8(v83, 0);
            v85.i64[0] = 0x101010101010101;
            v85.i64[1] = 0x101010101010101;
            int16x8_t v86 = vmulq_s16(v84, v85);
          }
          else
          {
            int16x8_t v86 = 0uLL;
          }
          int8x8_t v87 = vqtbl2_s8(*(int8x16x2_t *)&v81, *(int8x8_t *)&v189);
          *(int8x8_t *)v88.i8 = vqtbl2_s8(*(int8x16x2_t *)&v81, *(int8x8_t *)((char *)&v189 + 8));
          int8x8_t v89 = vqtbl2_s8(*(int8x16x2_t *)&v81, *(int8x8_t *)&v190);
          *(int8x8_t *)v82.i8 = vzip1_s8(v87, 0);
          v82.u64[1] = (unint64_t)vzip2_s8(v87, 0);
          *(int8x8_t *)v90.i8 = vzip1_s8(*(int8x8_t *)v88.i8, 0);
          v90.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v88.i8, 0);
          *(int8x8_t *)v91.i8 = vzip1_s8(v89, 0);
          v91.u64[1] = (unint64_t)vzip2_s8(v89, 0);
          uint16x8_t v92 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v82), _H5), (float16x8_t)0), v71));
          uint32x4_t v93 = vmovl_high_u16(v92);
          uint32x4_t v94 = vmovl_u16(*(uint16x4_t *)v92.i8);
          v88.i16[0] = *(_WORD *)(v52 + 2 * v94.u32[0]);
          v88.i16[1] = *(_WORD *)(v52 + 2 * v94.u32[1]);
          v88.i16[2] = *(_WORD *)(v52 + 2 * v94.u32[2]);
          v88.i16[3] = *(_WORD *)(v52 + 2 * v94.u32[3]);
          v88.i16[4] = *(_WORD *)(v52 + 2 * v93.u32[0]);
          v88.i16[5] = *(_WORD *)(v52 + 2 * v93.u32[1]);
          v88.i16[6] = *(_WORD *)(v52 + 2 * v93.u32[2]);
          v88.i16[7] = *(_WORD *)(v52 + 2 * v93.u32[3]);
          uint16x8_t v95 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v90), _H5), (float16x8_t)0), v71));
          uint32x4_t v96 = vmovl_high_u16(v95);
          uint32x4_t v97 = vmovl_u16(*(uint16x4_t *)v95.i8);
          v98.i16[0] = *(_WORD *)(v52 + 2 * v97.u32[0]);
          v98.i16[1] = *(_WORD *)(v52 + 2 * v97.u32[1]);
          v98.i16[2] = *(_WORD *)(v52 + 2 * v97.u32[2]);
          v98.i16[3] = *(_WORD *)(v52 + 2 * v97.u32[3]);
          v98.i16[4] = *(_WORD *)(v52 + 2 * v96.u32[0]);
          v98.i16[5] = *(_WORD *)(v52 + 2 * v96.u32[1]);
          v98.i16[6] = *(_WORD *)(v52 + 2 * v96.u32[2]);
          v98.i16[7] = *(_WORD *)(v52 + 2 * v96.u32[3]);
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v91), _H5), (float16x8_t)0), v71));
          uint32x4_t v100 = vmovl_high_u16(v99);
          uint32x4_t v101 = vmovl_u16(*(uint16x4_t *)v99.i8);
          v102.i16[0] = *(_WORD *)(v52 + 2 * v101.u32[0]);
          v102.i16[1] = *(_WORD *)(v52 + 2 * v101.u32[1]);
          v102.i16[2] = *(_WORD *)(v52 + 2 * v101.u32[2]);
          v102.i16[3] = *(_WORD *)(v52 + 2 * v101.u32[3]);
          v102.i16[4] = *(_WORD *)(v52 + 2 * v100.u32[0]);
          v102.i16[5] = *(_WORD *)(v52 + 2 * v100.u32[1]);
          v102.i16[6] = *(_WORD *)(v52 + 2 * v100.u32[2]);
          v102.i16[7] = *(_WORD *)(v52 + 2 * v100.u32[3]);
          uint16x8_t v103 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v88, v170), v98, v169), v102, v168), vmaxq_f16(vmaxq_f16(v88, v98), v102), v167), (float16x8_t)0), v71));
          uint32x4_t v104 = vmovl_high_u16(v103);
          float16x8_t v105 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v103.i8);
          v105.i16[0] = *(_WORD *)(v50 + 2 * v105.u32[0]);
          v105.i16[1] = *(_WORD *)(v50 + 2 * v105.u32[1]);
          v105.i16[2] = *(_WORD *)(v50 + 2 * v105.u32[2]);
          v105.i16[3] = *(_WORD *)(v50 + 2 * v105.u32[3]);
          v105.i16[4] = *(_WORD *)(v50 + 2 * v104.u32[0]);
          v105.i16[5] = *(_WORD *)(v50 + 2 * v104.u32[1]);
          v105.i16[6] = *(_WORD *)(v50 + 2 * v104.u32[2]);
          v105.i16[7] = *(_WORD *)(v50 + 2 * v104.u32[3]);
          float16x8_t v106 = vmulq_f16(v88, v105);
          a5 = vmulq_f16(v98, v105);
          float16x8_t v107 = vmulq_f16(v102, v105);
          float16x8_t v108 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v106, v164), a5, _H11), v107, _H13);
          float16x8_t v109 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v107, _H4), a5, _H15), v106, _H14);
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v106, v165), a5, _H7), v107, v166), (float16x8_t)0), v71));
          uint32x4_t v111 = vmovl_high_u16(v110);
          uint32x4_t v112 = vmovl_u16(*(uint16x4_t *)v110.i8);
          v113.i16[0] = *(_WORD *)(v51 + 2 * v112.u32[0]);
          v113.i16[1] = *(_WORD *)(v51 + 2 * v112.u32[1]);
          v113.i16[2] = *(_WORD *)(v51 + 2 * v112.u32[2]);
          v113.i16[3] = *(_WORD *)(v51 + 2 * v112.u32[3]);
          v113.i16[4] = *(_WORD *)(v51 + 2 * v111.u32[0]);
          v113.i16[5] = *(_WORD *)(v51 + 2 * v111.u32[1]);
          v113.i16[6] = *(_WORD *)(v51 + 2 * v111.u32[2]);
          v113.i16[7] = *(_WORD *)(v51 + 2 * v111.u32[3]);
          uint16x8_t v114 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v108, (float16x8_t)0), v71));
          uint32x4_t v115 = vmovl_high_u16(v114);
          uint32x4_t v116 = vmovl_u16(*(uint16x4_t *)v114.i8);
          v117.i16[0] = *(_WORD *)(v51 + 2 * v116.u32[0]);
          v117.i16[1] = *(_WORD *)(v51 + 2 * v116.u32[1]);
          v117.i16[2] = *(_WORD *)(v51 + 2 * v116.u32[2]);
          v117.i16[3] = *(_WORD *)(v51 + 2 * v116.u32[3]);
          v117.i16[4] = *(_WORD *)(v51 + 2 * v115.u32[0]);
          v117.i16[5] = *(_WORD *)(v51 + 2 * v115.u32[1]);
          v117.i16[6] = *(_WORD *)(v51 + 2 * v115.u32[2]);
          v117.i16[7] = *(_WORD *)(v51 + 2 * v115.u32[3]);
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v109, (float16x8_t)0), v71));
          float16x8_t v34 = (float16x8_t)vmovl_high_u16(v118);
          a5.i32[0] = v34.i32[2];
          uint32x4_t v119 = vmovl_u16(*(uint16x4_t *)v118.i8);
          v120.i16[0] = *(_WORD *)(v51 + 2 * v119.u32[0]);
          v120.i16[1] = *(_WORD *)(v51 + 2 * v119.u32[1]);
          v120.i16[2] = *(_WORD *)(v51 + 2 * v119.u32[2]);
          v120.i16[3] = *(_WORD *)(v51 + 2 * v119.u32[3]);
          v120.i16[4] = *(_WORD *)(v51 + 2 * v34.u32[0]);
          v120.i16[5] = *(_WORD *)(v51 + 2 * v34.u32[1]);
          v120.i16[6] = *(_WORD *)(v51 + 2 * v34.u32[2]);
          v120.i16[7] = *(_WORD *)(v51 + 2 * v34.u32[3]);
          v34.i32[0] = v171;
          _Q0 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v56, v113, v173), v117, v172), v120, *(short float *)&v171), v56), v58)), v68);
          *v77++ = _Q0;
          if (v76)
          {
            float16x8_t v34 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v57, v113, v153), v117, v152), v120, v151);
            a5 = (float16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v57, v113, v156), v117, v155), v120, v154), v59), v61), v59), v61)), v68);
            _Q0 = vcvtq_u16_f16(v34);
            uint16x8_t v121 = vshlq_u16(_Q0, v68);
            vst2q_s16(v76, *(int16x8x2_t *)a5.i8);
            v76 += 16;
          }
          if (v75) {
            *v75++ = v86;
          }
          v73 += 8;
        }
        while (v73 < (int)v6 - 7);
        unint64_t v122 = v6 & 0xFFFFFFF8;
        _S29 = v150;
      }
      _CF = v6 >= v122;
      unint64_t v123 = v6 - v122;
      if (v123 != 0 && _CF)
      {
        do
        {
          _Q0.i8[0] = *((unsigned char *)v74 + v191);
          v34.i8[0] = *((unsigned char *)v74 + BYTE1(v191));
          a5.i8[0] = *((unsigned char *)v74 + BYTE2(v191));
          _H0 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S10 * (float)_Q0.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S10 * (float)v34.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S10 * (float)a5.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          float v130 = fmaxf(_S0, fmaxf(_S1, _S2));
          float v131 = (float)((float)((float)(v176 * _S1) + (float)(v177 * _S0)) + (float)(v175 * _S2))
               + (float)(v174 * v130);
          float v132 = 8191.0;
          if (v131 <= 8191.0)
          {
            float v132 = (float)((float)((float)(v176 * _S1) + (float)(v177 * _S0)) + (float)(v175 * _S2))
                 + (float)(v174 * v130);
            if (v131 < 0.0) {
              float v132 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v50 + 2 * llroundf(v132));
          __asm { FCVT            S3, H3 }
          float v135 = _S0 * _S3;
          _S1 = _S1 * _S3;
          *(float *)a5.i32 = _S2 * _S3;
          float v137 = (float)((float)(v185 * _S1) + (float)(v135 * v186)) + (float)(*(float *)a5.i32 * v184);
          float v138 = (float)((float)(v182 * _S1) + (float)(v135 * v183)) + (float)(*(float *)a5.i32 * v181);
          _S0 = (float)(v179 * _S1) + (float)(v135 * v180);
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          __asm { FCVT            S27, H1 }
          LOWORD(_S0) = *(_WORD *)(v51
                                 + 2 * llroundf(fminf(fmaxf(_S0 + (float)(*(float *)a5.i32 * v178), 0.0), 8191.0)));
          __asm { FCVT            S28, H0 }
          *(float *)v34.i32 = (float)((float)((float)(v188 * _S27) + (float)(_S29 * _S26)) + (float)(v187 * _S28)) + v40;
          *(float *)_Q0.i32 = v42;
          if (*(float *)v34.i32 <= v42)
          {
            *(float *)_Q0.i32 = (float)((float)((float)(v188 * _S27) + (float)(_S29 * _S26)) + (float)(v187 * _S28))
                              + v40;
            if (*(float *)v34.i32 < v40) {
              *(float *)_Q0.i32 = (float)v27;
            }
          }
          __int16 v143 = *((unsigned __int8 *)v74 + HIBYTE(v191));
          v77->i16[0] = llroundf(*(float *)_Q0.i32) << v62;
          uint64_t v77 = (uint16x8_t *)((char *)v77 + 2);
          if (v76)
          {
            float v144 = (float)((float)(v41 + (float)(_S26 * v162)) + (float)(_S27 * v161)) + (float)(_S28 * v160);
            float v145 = v44;
            if (v144 <= v44)
            {
              float v145 = (float)((float)(v41 + (float)(_S26 * v162)) + (float)(_S27 * v161)) + (float)(_S28 * v160);
              if (v144 < v163) {
                float v145 = v163;
              }
            }
            *(float *)a5.i32 = v157;
            *(float *)v34.i32 = (float)((float)(v41 + (float)(_S26 * v159)) + (float)(_S27 * v158))
                              + (float)(_S28 * v157);
            __int16 *v76 = llroundf(v145) << v62;
            *(float *)_Q0.i32 = v44;
            if (*(float *)v34.i32 <= v44)
            {
              *(float *)_Q0.i32 = (float)((float)(v41 + (float)(_S26 * v159)) + (float)(_S27 * v158))
                                + (float)(_S28 * v157);
              if (*(float *)v34.i32 < v163) {
                *(float *)_Q0.i32 = v163;
              }
            }
            v76[1] = llroundf(*(float *)_Q0.i32) << v62;
            v76 += 2;
          }
          if (v75)
          {
            v75->i16[0] = v143 | (v143 << 8);
            uint64_t v75 = (int16x8_t *)((char *)v75 + 2);
          }
          int8x8_t v74 = (void *)((char *)v74 + 4);
          --v123;
        }
        while (v123);
      }
      v65 += v19;
      v64 += v21;
      v63 += v22;
      uint64_t result = (int16x8_t *)((char *)result + v23);
      ++v39;
    }
    while (v39 != v49);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf444_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *((void *)result + 19);
    int64x2_t v12 = (uint64_t *)*((void *)result + 17);
    int64x2_t v13 = (void *)*((void *)result + 7);
    uint64_t v14 = **((void **)result + 8);
    uint64_t v15 = *v12;
    uint64_t v16 = v12[1];
    uint64_t v17 = v12[2];
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v11 + 128);
    float v19 = 8191.0 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 144);
    float v20 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 146);
    float v21 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 148);
    float v22 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 150);
    float v23 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 152);
    float v24 = (float)v18;
    float v25 = *(float *)(v11 + 36);
    float v26 = *(float *)(v11 + 40);
    float v28 = *(float *)(v11 + 44);
    float v27 = *(float *)(v11 + 48);
    float v99 = *(float *)(v11 + 52);
    float v100 = v27;
    float v29 = *(float *)(v11 + 56);
    float v30 = *(float *)(v11 + 60);
    float v98 = v29;
    float v31 = *(float *)(v11 + 64);
    float v32 = *(float *)(v11 + 68);
    float v33 = *(float *)(v11 + 72);
    float v34 = *(float *)(v11 + 76);
    float v35 = *(float *)(v11 + 80);
    float v36 = *(float *)(v11 + 84);
    float v37 = *(float *)(v11 + 88);
    float v38 = *(float *)(v11 + 92);
    float v39 = *(float *)(v11 + 96);
    float v40 = *(float *)(v11 + 100);
    float v41 = *(float *)(v11 + 104);
    float v42 = *(float *)(v11 + 108);
    uint64_t v43 = v11 + 164;
    uint64_t v44 = v11 + 16548;
    uint64_t v45 = v11 + 32932;
    float v46 = *(float *)(v11 + 112);
    float v47 = *(float *)(v11 + 116);
    float v48 = *(float *)(v11 + 120);
    uint64_t v49 = (uint64_t *)*((void *)result + 16);
    uint64_t v50 = *((void *)result + 14);
    unint64_t v51 = *((void *)result + 13) * a2 / v4 + *((void *)result + 15);
    uint64_t v52 = *(void *)(result + 36);
    unsigned int v53 = *(unsigned __int8 *)(v11 + 132);
    if (v53 >= 0x11) {
      char v54 = 0;
    }
    else {
      char v54 = 16 - v53;
    }
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 157);
    uint64_t v55 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v56 = *(unsigned __int8 *)(v11 + 155);
    uint64_t v57 = *(unsigned __int8 *)(v11 + 154);
    uint64_t v58 = v49[2];
    if (v58) {
      uint64_t v59 = v58 + v51 * v17 + 2 * v50;
    }
    else {
      uint64_t v59 = 0;
    }
    uint64_t v61 = *v49;
    uint64_t v60 = v49[1];
    uint64_t v62 = v60 + v51 * v16 + 2 * v50;
    if (!v60) {
      uint64_t v62 = 0;
    }
    uint64_t v63 = v61 + v51 * v15 + 2 * v50;
    uint64_t v64 = *v13 + v14 * v9 + 4 * v52;
    char v65 = v54;
    do
    {
      if (v8)
      {
        uint64_t v66 = v8;
        float v67 = (_WORD *)v59;
        uint16x8_t v68 = (_WORD *)v62;
        int v69 = (_WORD *)v63;
        uint64_t v70 = v64;
        do
        {
          LOBYTE(v29) = *(unsigned char *)(v70 + v57);
          LOBYTE(v27) = *(unsigned char *)(v70 + v56);
          LOBYTE(_S18) = *(unsigned char *)(v70 + v55);
          _H0 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v29), 0.0), 8191.0)));
          float v72 = v19 * (float)LODWORD(_S18);
          __asm { FCVT            S18, H0 }
          _H0 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v27), 0.0), 8191.0)));
          unsigned int v79 = llroundf(fminf(fmaxf(v72, 0.0), 8191.0));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v43 + 2 * v79);
          __asm { FCVT            S15, H0 }
          float v83 = (float)((float)((float)(v46 * _S14) + (float)(v42 * _S18)) + (float)(v47 * _S15))
              + (float)(v48 * fmaxf(_S18, fmaxf(_S14, _S15)));
          float v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v44 + 2 * llroundf(v84));
          __asm { FCVT            S0, H0 }
          _S6 = _S18 * _S0;
          float v88 = _S14 * _S0;
          float v89 = _S15 * _S0;
          float v90 = (float)((float)(v34 * v88) + (float)(_S6 * v33)) + (float)(v89 * v35);
          float v91 = (float)((float)(v37 * v88) + (float)(_S6 * v36)) + (float)(v89 * v38);
          _S0 = (float)((float)(v40 * v88) + (float)(_S6 * v39)) + (float)(v89 * v41);
          LOWORD(_S6) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S14, H6 }
          LOWORD(_S6) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S15, H6 }
          LOWORD(_S0) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          float v29 = (float)((float)((float)(v26 * _S15) + (float)(v25 * _S14)) + (float)(v28 * _S18)) + v20;
          float v27 = v22;
          if (v29 <= v22)
          {
            float v27 = (float)((float)((float)(v26 * _S15) + (float)(v25 * _S14)) + (float)(v28 * _S18)) + v20;
            if (v29 < v20) {
              float v27 = v20;
            }
          }
          __int16 v95 = result[v70];
          *v69++ = llroundf(v27) << v65;
          if (v68)
          {
            float v96 = (float)((float)(v21 + (float)(_S14 * v100)) + (float)(_S15 * v99)) + (float)(_S18 * v98);
            float v97 = v24;
            if (v96 <= v24)
            {
              float v97 = (float)((float)(v21 + (float)(_S14 * v100)) + (float)(_S15 * v99)) + (float)(_S18 * v98);
              if (v96 < v23) {
                float v97 = v23;
              }
            }
            float v29 = (float)(v21 + (float)(_S14 * v30)) + (float)(_S15 * v31);
            _S18 = v29 + (float)(_S18 * v32);
            *uint16x8_t v68 = llroundf(v97) << v65;
            float v27 = v24;
            if (_S18 <= v24)
            {
              float v27 = _S18;
              if (_S18 < v23) {
                float v27 = v23;
              }
            }
            v68[1] = llroundf(v27) << v65;
            v68 += 2;
          }
          if (v67) {
            *v67++ = v95 | (v95 << 8);
          }
          v70 += 4;
          --v66;
        }
        while (v66);
      }
      v64 += v14;
      v63 += v15;
      v62 += v16;
      v59 += v17;
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_xf444_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

__int16 *vt_Copy_BGRA_TRC_Mat_TRC_xf444_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, int16x4_t a5)
{
  uint64_t v9 = 0;
  unint64_t v10 = *(void *)(a1 + 20);
  uint64_t v137 = *(void *)(a1 + 36);
  uint64_t v11 = *(void *)(a1 + 44);
  uint64_t v12 = *(void *)(a1 + 28);
  unint64_t v13 = *a1;
  unint64_t v14 = v12 * a2 / v13;
  uint64_t v15 = v14 + v11;
  unint64_t v16 = (v12 + v12 * a2) / v13;
  uint64_t v17 = v16 + v11;
  uint64_t v18 = *((void *)a1 + 14);
  uint64_t v19 = *((void *)a1 + 19);
  uint64_t v20 = *((void *)a1 + 15);
  long long v21 = (uint64_t *)*((void *)a1 + 16);
  unint64_t v22 = *((void *)a1 + 13) * a2;
  uint64_t v23 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v24 = **((void **)a1 + 8);
  uint64_t v136 = **((void **)a1 + 7);
  uint64_t v25 = *v23;
  uint64_t v26 = v23[1];
  uint64_t v27 = v23[2];
  uint64_t v135 = *v21;
  uint64_t result = (__int16 *)v21[1];
  uint64_t v29 = v21[2];
  unsigned int v30 = *(_DWORD *)(v19 + 128);
  int v170 = *(_DWORD *)(v19 + 154);
  unsigned int v31 = *(unsigned __int16 *)(v19 + 144);
  unsigned int v32 = *(unsigned __int8 *)(v19 + 132);
  unsigned int v33 = *(unsigned __int16 *)(v19 + 146);
  unsigned int v34 = *(unsigned __int16 *)(v19 + 148);
  unsigned int v35 = *(unsigned __int16 *)(v19 + 150);
  unsigned int v36 = *(unsigned __int16 *)(v19 + 152);
  float v167 = *(float *)(v19 + 36);
  float v166 = *(float *)(v19 + 40);
  float v165 = *(float *)(v19 + 44);
  float v148 = *(float *)(v19 + 52);
  float v149 = *(float *)(v19 + 48);
  float v146 = *(float *)(v19 + 60);
  float v147 = *(float *)(v19 + 56);
  LODWORD(a4) = *(_DWORD *)(v19 + 64);
  float v144 = *(float *)(v19 + 68);
  float v145 = *(float *)&a4;
  float v164 = *(float *)(v19 + 72);
  uint64_t v37 = v22 / v13 + v20;
  uint64_t v134 = v24 * v15;
  float v163 = *(float *)(v19 + 76);
  float v162 = *(float *)(v19 + 80);
  float v161 = *(float *)(v19 + 84);
  float v160 = *(float *)(v19 + 88);
  float v159 = *(float *)(v19 + 92);
  float v158 = *(float *)(v19 + 96);
  float v157 = *(float *)(v19 + 100);
  float v156 = *(float *)(v19 + 104);
  _D0.i32[1] = 0;
  long long v168 = 0u;
  *(_OWORD *)v169[0].i8 = 0u;
  do
  {
    unsigned int v39 = 0;
    char v40 = *((unsigned char *)&v170 + v9);
    do
    {
      v169[((v9 + (v39 >> 3)) & 0x1F) - 2].i8[v39] = v40 + 4 * v39;
      ++v39;
    }
    while (v39 != 8);
    ++v9;
  }
  while (v9 != 4);
  if (v16 != v14)
  {
    uint64_t v41 = 0;
    float v42 = (float)v31;
    float v43 = (float)v33;
    float v44 = (float)v34;
    _S30 = 8191.0 / (float)v30;
    float v150 = (float)v35;
    float v46 = (float)v36;
    *(float *)_D0.i32 = v167;
    __asm { FCVT            H0, S0 }
    short float v155 = *(short float *)_D0.i16;
    uint64_t v51 = v17 - v15;
    uint64_t v52 = v19 + 16548;
    uint64_t v53 = v19 + 164;
    *(float *)_D0.i32 = v166;
    __asm { FCVT            H0, S0 }
    short float v154 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v165;
    __asm { FCVT            H0, S0 }
    short float v153 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v149;
    __asm { FCVT            H0, S0 }
    short float v143 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v148;
    __asm { FCVT            H0, S0 }
    short float v142 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v147;
    __asm { FCVT            H0, S0 }
    short float v141 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v146;
    __asm { FCVT            H0, S0 }
    short float v140 = *(short float *)_D0.i16;
    _D0.i32[0] = LODWORD(a4);
    __asm { FCVT            H0, S0 }
    short float v139 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v144;
    __asm { FCVT            H0, S0 }
    short float v138 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v164;
    __asm { FCVT            H0, S0 }
    short float v152 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v163;
    __asm { FCVT            H0, S0 }
    short float v151 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v162;
    __asm { FCVT            H7, S0 }
    *(float *)_D0.i32 = v161;
    __asm { FCVT            H5, S0 }
    *(float *)_D0.i32 = v160;
    __asm { FCVT            H6, S0 }
    *(float *)_D0.i32 = v159;
    __asm { FCVT            H14, S0 }
    *(float *)_D0.i32 = v158;
    __asm { FCVT            H15, S0 }
    *(float *)_D0.i32 = v157;
    __asm { FCVT            H3, S0 }
    *(float *)_D0.i32 = v156;
    __asm { FCVT            H4, S0 }
    *(short float *)_D0.i16 = (short float)v31;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v33;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)&a4 = (short float)v34;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    *(short float *)a5.i16 = (short float)v35;
    float16x8_t v64 = (float16x8_t)vdupq_lane_s16(a5, 0);
    *(short float *)v5.i16 = (short float)v36;
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(v5, 0);
    if (v32 >= 0x11) {
      unsigned __int8 v66 = 0;
    }
    else {
      unsigned __int8 v66 = 16 - v32;
    }
    if (v29) {
      uint64_t v67 = v29 + v27 * v37 + 2 * v18;
    }
    else {
      uint64_t v67 = 0;
    }
    if (result) {
      uint64_t result = (__int16 *)((char *)result + 2 * v18 + v26 * v37);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v68 = v135 + v25 * v37 + 2 * v18;
    uint64_t v69 = v136 + v134 + 4 * v137;
    uint16x8_t v70 = (uint16x8_t)vdupq_n_s16(v66);
    __asm { FCVT            H9, S30 }
    v72.i64[0] = 0x9000900090009000;
    v72.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v10 < 8)
      {
        unint64_t v117 = 0;
        uint64_t v77 = result;
        long long v76 = (int16x8_t *)v67;
        uint64_t v75 = (uint16x8_t *)v68;
        int8x8_t v74 = (void *)v69;
      }
      else
      {
        int v73 = 0;
        int8x8_t v74 = (void *)v69;
        uint64_t v75 = (uint16x8_t *)v68;
        long long v76 = (int16x8_t *)v67;
        uint64_t v77 = result;
        do
        {
          *(void *)&long long v81 = *v74;
          uint64_t v78 = v74[1];
          *(void *)&long long v79 = v74[2];
          uint64_t v80 = v74[3];
          v74 += 4;
          *((void *)&v81 + 1) = v78;
          *((void *)&v79 + 1) = v80;
          long long v82 = v79;
          if (v76)
          {
            int8x8_t v83 = vqtbl2_s8(*(int8x16x2_t *)&v81, v169[1]);
            *(int8x8_t *)v84.i8 = vzip1_s8(v83, 0);
            v84.u64[1] = (unint64_t)vzip2_s8(v83, 0);
            v85.i64[0] = 0x101010101010101;
            v85.i64[1] = 0x101010101010101;
            _Q22 = vmulq_s16(v84, v85);
          }
          else
          {
            _Q22 = 0uLL;
          }
          int8x8_t v86 = vqtbl2_s8(*(int8x16x2_t *)&v81, *(int8x8_t *)&v168);
          int8x8_t v87 = vqtbl2_s8(*(int8x16x2_t *)&v81, *(int8x8_t *)((char *)&v168 + 8));
          int8x8_t v88 = vqtbl2_s8(*(int8x16x2_t *)&v81, v169[0]);
          *(int8x8_t *)v89.i8 = vzip1_s8(v86, 0);
          v89.u64[1] = (unint64_t)vzip2_s8(v86, 0);
          float16x8_t v90 = vcvtq_f16_u16(v89);
          *(int8x8_t *)v89.i8 = vzip1_s8(v87, 0);
          v89.u64[1] = (unint64_t)vzip2_s8(v87, 0);
          *(int8x8_t *)v91.i8 = vzip1_s8(v88, 0);
          v91.u64[1] = (unint64_t)vzip2_s8(v88, 0);
          float16x8_t v92 = vmulq_n_f16(vcvtq_f16_u16(v89), _H9);
          uint16x8_t v93 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(v90, _H9), (float16x8_t)0), v72));
          uint32x4_t v94 = vmovl_high_u16(v93);
          float16x8_t v95 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v93.i8);
          v95.i16[0] = *(_WORD *)(v53 + 2 * v95.u32[0]);
          v95.i16[1] = *(_WORD *)(v53 + 2 * v95.u32[1]);
          v95.i16[2] = *(_WORD *)(v53 + 2 * v95.u32[2]);
          v95.i16[3] = *(_WORD *)(v53 + 2 * v95.u32[3]);
          v95.i16[4] = *(_WORD *)(v53 + 2 * v94.u32[0]);
          v95.i16[5] = *(_WORD *)(v53 + 2 * v94.u32[1]);
          v95.i16[6] = *(_WORD *)(v53 + 2 * v94.u32[2]);
          v95.i16[7] = *(_WORD *)(v53 + 2 * v94.u32[3]);
          float16x8_t v96 = vmulq_n_f16(vcvtq_f16_u16(v91), _H9);
          uint16x8_t v97 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v92, (float16x8_t)0), v72));
          uint32x4_t v98 = vmovl_high_u16(v97);
          float16x8_t v99 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v97.i8);
          v99.i16[0] = *(_WORD *)(v53 + 2 * v99.u32[0]);
          v99.i16[1] = *(_WORD *)(v53 + 2 * v99.u32[1]);
          v99.i16[2] = *(_WORD *)(v53 + 2 * v99.u32[2]);
          v99.i16[3] = *(_WORD *)(v53 + 2 * v99.u32[3]);
          v99.i16[4] = *(_WORD *)(v53 + 2 * v98.u32[0]);
          v99.i16[5] = *(_WORD *)(v53 + 2 * v98.u32[1]);
          v99.i16[6] = *(_WORD *)(v53 + 2 * v98.u32[2]);
          v99.i16[7] = *(_WORD *)(v53 + 2 * v98.u32[3]);
          uint16x8_t v100 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v96, (float16x8_t)0), v72));
          uint32x4_t v101 = vmovl_high_u16(v100);
          float16x8_t v102 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v100.i8);
          v102.i16[0] = *(_WORD *)(v53 + 2 * v102.u32[0]);
          v102.i16[1] = *(_WORD *)(v53 + 2 * v102.u32[1]);
          v102.i16[2] = *(_WORD *)(v53 + 2 * v102.u32[2]);
          v102.i16[3] = *(_WORD *)(v53 + 2 * v102.u32[3]);
          v102.i16[4] = *(_WORD *)(v53 + 2 * v101.u32[0]);
          v102.i16[5] = *(_WORD *)(v53 + 2 * v101.u32[1]);
          v102.i16[6] = *(_WORD *)(v53 + 2 * v101.u32[2]);
          v102.i16[7] = *(_WORD *)(v53 + 2 * v101.u32[3]);
          float16x8_t v103 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v95, v152), v99, v151), v102, _H7);
          float16x8_t v104 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v95, _H5), v99, _H6), v102, _H14);
          float16x8_t v105 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v102, _H4), v99, _H3), v95, _H15);
          uint16x8_t v106 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v103, (float16x8_t)0), v72));
          uint32x4_t v107 = vmovl_high_u16(v106);
          uint32x4_t v108 = vmovl_u16(*(uint16x4_t *)v106.i8);
          _Q23.i16[0] = *(_WORD *)(v52 + 2 * v108.u32[0]);
          _Q23.i16[1] = *(_WORD *)(v52 + 2 * v108.u32[1]);
          _Q23.i16[2] = *(_WORD *)(v52 + 2 * v108.u32[2]);
          _Q23.i16[3] = *(_WORD *)(v52 + 2 * v108.u32[3]);
          _Q23.i16[4] = *(_WORD *)(v52 + 2 * v107.u32[0]);
          _Q23.i16[5] = *(_WORD *)(v52 + 2 * v107.u32[1]);
          _Q23.i16[6] = *(_WORD *)(v52 + 2 * v107.u32[2]);
          _Q23.i16[7] = *(_WORD *)(v52 + 2 * v107.u32[3]);
          uint16x8_t v109 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v104, (float16x8_t)0), v72));
          uint32x4_t v110 = vmovl_high_u16(v109);
          uint32x4_t v111 = vmovl_u16(*(uint16x4_t *)v109.i8);
          _Q24.i16[0] = *(_WORD *)(v52 + 2 * v111.u32[0]);
          _Q24.i16[1] = *(_WORD *)(v52 + 2 * v111.u32[1]);
          _Q24.i16[2] = *(_WORD *)(v52 + 2 * v111.u32[2]);
          _Q24.i16[3] = *(_WORD *)(v52 + 2 * v111.u32[3]);
          _Q24.i16[4] = *(_WORD *)(v52 + 2 * v110.u32[0]);
          _Q24.i16[5] = *(_WORD *)(v52 + 2 * v110.u32[1]);
          _Q24.i16[6] = *(_WORD *)(v52 + 2 * v110.u32[2]);
          _Q24.i16[7] = *(_WORD *)(v52 + 2 * v110.u32[3]);
          uint16x8_t v112 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v105, (float16x8_t)0), v72));
          uint32x4_t v113 = vmovl_high_u16(v112);
          uint32x4_t v114 = vmovl_u16(*(uint16x4_t *)v112.i8);
          v115.i16[0] = *(_WORD *)(v52 + 2 * v114.u32[0]);
          v115.i16[1] = *(_WORD *)(v52 + 2 * v114.u32[1]);
          v115.i16[2] = *(_WORD *)(v52 + 2 * v114.u32[2]);
          v115.i16[3] = *(_WORD *)(v52 + 2 * v114.u32[3]);
          v115.i16[4] = *(_WORD *)(v52 + 2 * v113.u32[0]);
          v115.i16[5] = *(_WORD *)(v52 + 2 * v113.u32[1]);
          v115.i16[6] = *(_WORD *)(v52 + 2 * v113.u32[2]);
          v115.i16[7] = *(_WORD *)(v52 + 2 * v113.u32[3]);
          *v75++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v61, _Q23, v155), _Q24, v154), v115, v153), v61), v63)), v70);
          if (v77)
          {
            float16x8_t v116 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v62, _Q23, v140), _Q24, v139), v115, v138);
            _Q23 = (float16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v62, _Q23, v143), _Q24, v142), v115, v141), v64), v65), v64), v65)), v70);
            _Q24 = (float16x8_t)vshlq_u16(vcvtq_u16_f16(v116), v70);
            vst2q_s16(v77, *(int16x8x2_t *)_Q23.i8);
            v77 += 16;
          }
          if (v76) {
            *v76++ = _Q22;
          }
          v73 += 8;
        }
        while (v73 < (int)v10 - 7);
        unint64_t v117 = v10 & 0xFFFFFFF8;
      }
      _CF = v10 >= v117;
      unint64_t v118 = v10 - v117;
      if (v118 != 0 && _CF)
      {
        do
        {
          _Q22.i8[0] = *((unsigned char *)v74 + v170);
          _Q23.i8[0] = *((unsigned char *)v74 + BYTE1(v170));
          _Q24.i8[0] = *((unsigned char *)v74 + BYTE2(v170));
          unsigned int v119 = llroundf(fminf(fmaxf(_S30 * (float)_Q22.u32[0], 0.0), 8191.0));
          _S22 = _S30 * (float)_Q24.u32[0];
          _H24 = *(_WORD *)(v53 + 2 * v119);
          __asm { FCVT            S24, H24 }
          _H23 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(_S30 * (float)_Q23.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          LOWORD(_S22) = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          float v126 = (float)((float)(v163 * _S23) + (float)(_S24 * v164)) + (float)(_S22 * v162);
          float v127 = (float)((float)(v160 * _S23) + (float)(_S24 * v161)) + (float)(_S22 * v159);
          _S24 = (float)((float)(v157 * _S23) + (float)(_S24 * v158)) + (float)(_S22 * v156);
          LOWORD(_S22) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          LOWORD(_S24) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          float v129 = (float)((float)((float)(v166 * *(float *)_Q23.i32) + (float)(v167 * *(float *)_Q22.i32))
                       + (float)(v165 * *(float *)_Q24.i32))
               + v42;
          float v130 = v44;
          if (v129 <= v44)
          {
            float v130 = (float)((float)((float)(v166 * *(float *)_Q23.i32) + (float)(v167 * *(float *)_Q22.i32))
                         + (float)(v165 * *(float *)_Q24.i32))
                 + v42;
            if (v129 < v42) {
              float v130 = (float)v31;
            }
          }
          __int16 v131 = *((unsigned __int8 *)v74 + HIBYTE(v170));
          v75->i16[0] = llroundf(v130) << v66;
          uint64_t v75 = (uint16x8_t *)((char *)v75 + 2);
          if (v77)
          {
            float v132 = (float)((float)(v43 + (float)(*(float *)_Q22.i32 * v149)) + (float)(*(float *)_Q23.i32 * v148))
                 + (float)(*(float *)_Q24.i32 * v147);
            float v133 = v46;
            if (v132 <= v46)
            {
              float v133 = (float)((float)(v43 + (float)(*(float *)_Q22.i32 * v149)) + (float)(*(float *)_Q23.i32 * v148))
                   + (float)(*(float *)_Q24.i32 * v147);
              if (v132 < v150) {
                float v133 = v150;
              }
            }
            *(float *)_Q22.i32 = (float)((float)(v43 + (float)(*(float *)_Q22.i32 * v146))
                                       + (float)(*(float *)_Q23.i32 * v145))
                               + (float)(*(float *)_Q24.i32 * v144);
            *uint64_t v77 = llroundf(v133) << v66;
            *(float *)_Q23.i32 = v46;
            if (*(float *)_Q22.i32 <= v46)
            {
              _Q23.i32[0] = _Q22.i32[0];
              if (*(float *)_Q22.i32 < v150) {
                *(float *)_Q23.i32 = v150;
              }
            }
            v77[1] = llroundf(*(float *)_Q23.i32) << v66;
            v77 += 2;
          }
          if (v76)
          {
            v76->i16[0] = v131 | (v131 << 8);
            long long v76 = (int16x8_t *)((char *)v76 + 2);
          }
          int8x8_t v74 = (void *)((char *)v74 + 4);
          --v118;
        }
        while (v118);
      }
      v69 += v24;
      v68 += v25;
      uint64_t result = (__int16 *)((char *)result + v26);
      v67 += v27;
      ++v41;
    }
    while (v41 != v51);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_xf444_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v12 = *(void *)(result + 28);
  unint64_t v13 = *result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = (v12 + v12 * a2) / v13;
  if (v15 != v14)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(result + 20);
    unint64_t v18 = v14 + *(void *)(result + 44);
    unint64_t v19 = v15 - v14;
    uint64_t v20 = *((void *)result + 19);
    long long v21 = (uint64_t *)*((void *)result + 17);
    int64x2_t v22 = (void *)*((void *)result + 7);
    uint64_t v23 = **((void **)result + 8);
    uint64_t v24 = *v21;
    uint64_t v25 = v21[1];
    uint64_t v26 = v21[2];
    float v27 = 8191.0 / (float)*(unsigned int *)(v20 + 128);
    LOWORD(a5) = *(_WORD *)(v20 + 144);
    float v28 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v20 + 146);
    float v29 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v20 + 148);
    float v30 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v20 + 150);
    float v31 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v20 + 152);
    float v32 = (float)LODWORD(a9);
    float v33 = *(float *)(v20 + 36);
    float v34 = *(float *)(v20 + 40);
    float v35 = *(float *)(v20 + 44);
    float v36 = *(float *)(v20 + 48);
    float v37 = *(float *)(v20 + 52);
    float v38 = *(float *)(v20 + 56);
    float v39 = *(float *)(v20 + 60);
    float v40 = *(float *)(v20 + 64);
    float v41 = *(float *)(v20 + 68);
    float v42 = *(float *)(v20 + 72);
    float v43 = *(float *)(v20 + 76);
    float v44 = *(float *)(v20 + 80);
    float v45 = *(float *)(v20 + 84);
    float v46 = *(float *)(v20 + 88);
    float v47 = *(float *)(v20 + 92);
    float v48 = *(float *)(v20 + 96);
    float v50 = *(float *)(v20 + 100);
    float v49 = *(float *)(v20 + 104);
    uint64_t v51 = v20 + 164;
    uint64_t v52 = v20 + 16548;
    uint64_t v53 = (uint64_t *)*((void *)result + 16);
    uint64_t v54 = *((void *)result + 14);
    unint64_t v55 = *((void *)result + 13) * a2 / v13 + *((void *)result + 15);
    uint64_t v56 = *(void *)(result + 36);
    unsigned int v57 = *(unsigned __int8 *)(v20 + 132);
    if (v57 >= 0x11) {
      char v58 = 0;
    }
    else {
      char v58 = 16 - v57;
    }
    uint64_t v59 = *(unsigned __int8 *)(v20 + 157);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v20 + 156);
    uint64_t v60 = *(unsigned __int8 *)(v20 + 155);
    uint64_t v61 = *(unsigned __int8 *)(v20 + 154);
    uint64_t v62 = v53[2];
    if (v62) {
      uint64_t v63 = v62 + v55 * v26 + 2 * v54;
    }
    else {
      uint64_t v63 = 0;
    }
    uint64_t v65 = *v53;
    uint64_t v64 = v53[1];
    uint64_t v66 = v64 + v55 * v25 + 2 * v54;
    if (!v64) {
      uint64_t v66 = 0;
    }
    uint64_t v67 = v65 + v55 * v24 + 2 * v54;
    uint64_t v68 = *v22 + v23 * v18 + 4 * v56;
    char v69 = v58;
    do
    {
      if (v17)
      {
        uint64_t v70 = v17;
        uint64_t v71 = v68;
        float16x8_t v72 = (_WORD *)v63;
        int v73 = (_WORD *)v66;
        int8x8_t v74 = (_WORD *)v67;
        do
        {
          LOBYTE(_S10) = *(unsigned char *)(v71 + v61);
          LOBYTE(_S11) = *(unsigned char *)(v71 + v60);
          LOBYTE(_S12) = result[v71];
          unsigned int v75 = llroundf(fminf(fmaxf(v27 * (float)LODWORD(_S10), 0.0), 8191.0));
          _S10 = v27 * (float)LODWORD(_S12);
          _H12 = *(_WORD *)(v51 + 2 * v75);
          __asm { FCVT            S12, H12 }
          _H11 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v27 * (float)LODWORD(_S11), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S10) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          float v86 = (float)((float)(v43 * _S11) + (float)(_S12 * v42)) + (float)(_S10 * v44);
          float v87 = (float)((float)(v46 * _S11) + (float)(_S12 * v45)) + (float)(_S10 * v47);
          _S12 = (float)((float)(v50 * _S11) + (float)(_S12 * v48)) + (float)(_S10 * v49);
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          float v89 = (float)((float)((float)(v34 * _S11) + (float)(v33 * _S10)) + (float)(v35 * _S12)) + v28;
          float v90 = v30;
          if (v89 <= v30)
          {
            float v90 = (float)((float)((float)(v34 * _S11) + (float)(v33 * _S10)) + (float)(v35 * _S12)) + v28;
            if (v89 < v28) {
              float v90 = v28;
            }
          }
          __int16 v91 = *(unsigned __int8 *)(v71 + v59);
          *v74++ = llroundf(v90) << v69;
          if (v73)
          {
            float v92 = (float)((float)(v29 + (float)(_S10 * v36)) + (float)(_S11 * v37)) + (float)(_S12 * v38);
            float v93 = v32;
            if (v92 <= v32)
            {
              float v93 = (float)((float)(v29 + (float)(_S10 * v36)) + (float)(_S11 * v37)) + (float)(_S12 * v38);
              if (v92 < v31) {
                float v93 = v31;
              }
            }
            _S10 = (float)((float)(v29 + (float)(_S10 * v39)) + (float)(_S11 * v40)) + (float)(_S12 * v41);
            *int v73 = llroundf(v93) << v69;
            _S11 = v32;
            if (_S10 <= v32)
            {
              _S11 = _S10;
              if (_S10 < v31) {
                _S11 = v31;
              }
            }
            v73[1] = llroundf(_S11) << v69;
            v73 += 2;
          }
          if (v72) {
            *v72++ = v91 | (v91 << 8);
          }
          v71 += 4;
          --v70;
        }
        while (v70);
      }
      v68 += v23;
      v67 += v24;
      v66 += v25;
      v63 += v26;
      ++v16;
    }
    while (v16 != v19);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_xf444_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_xf444_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_BGRA_rgb_xf444_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, float16x8_t a8)
{
  uint64_t v8 = 0;
  unint64_t v9 = *(void *)(a1 + 20);
  uint64_t v118 = *(void *)(a1 + 36);
  uint64_t v10 = *(void *)(a1 + 44);
  uint64_t v11 = *(void *)(a1 + 28);
  unint64_t v12 = *a1;
  unint64_t v13 = v11 * a2 / v12;
  uint64_t v14 = v13 + v10;
  unint64_t v15 = (v11 + v11 * a2) / v12;
  uint64_t v16 = v15 + v10;
  uint64_t v17 = *((void *)a1 + 14);
  unint64_t v18 = *((void *)a1 + 13) * a2;
  uint64_t v19 = *((void *)a1 + 19);
  uint64_t v20 = *((void *)a1 + 15);
  long long v21 = (uint64_t *)*((void *)a1 + 16);
  int64x2_t v22 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v23 = **((void **)a1 + 8);
  uint64_t v117 = **((void **)a1 + 7);
  uint64_t v24 = *v22;
  uint64_t v25 = v22[1];
  uint64_t v26 = v22[2];
  uint64_t v116 = *v21;
  uint64_t v28 = v21[1];
  uint64_t v27 = v21[2];
  unsigned int v29 = *(_DWORD *)(v19 + 128);
  unsigned int v30 = *(_DWORD *)(v19 + 136);
  int v130 = *(_DWORD *)(v19 + 154);
  unsigned int v31 = *(unsigned __int16 *)(v19 + 144);
  unsigned int v32 = *(unsigned __int8 *)(v19 + 132);
  unsigned int v33 = *(unsigned __int16 *)(v19 + 146);
  unsigned int v34 = *(unsigned __int16 *)(v19 + 148);
  unsigned int v35 = *(unsigned __int16 *)(v19 + 150);
  unsigned int v36 = *(unsigned __int16 *)(v19 + 152);
  uint64_t v37 = v18 / v12 + v20;
  uint64_t v115 = v23 * v14;
  _S0 = *(float *)(v19 + 36);
  _S1 = *(float *)(v19 + 40);
  _S2 = *(float *)(v19 + 44);
  float v126 = *(float *)(v19 + 52);
  float v127 = *(float *)(v19 + 48);
  float v124 = *(float *)(v19 + 60);
  float v125 = *(float *)(v19 + 56);
  float v122 = *(float *)(v19 + 68);
  float v123 = *(float *)(v19 + 64);
  long long v128 = 0u;
  *(_OWORD *)v129[0].i8 = 0u;
  do
  {
    LODWORD(result) = 0;
    char v42 = *((unsigned char *)&v130 + v8);
    do
    {
      v129[((v8 + (result >> 3)) & 0x1F) - 2].i8[result] = v42 + 4 * result;
      uint64_t result = (result + 1);
    }
    while (result != 8);
    ++v8;
  }
  while (v8 != 4);
  if (v15 != v13)
  {
    uint64_t v43 = 0;
    uint64_t v44 = v16 - v14;
    *(float *)&a7 = (float)v29;
    _S17 = (float)v30 / (float)v29;
    float v46 = (float)v31;
    float v47 = (float)v33;
    float v48 = (float)v35;
    float v49 = (float)v36;
    __asm
    {
      FCVT            H8, S0
      FCVT            H9, S1
      FCVT            H10, S2
    }
    _S3 = v127;
    __asm { FCVT            H7, S3 }
    _S3 = v126;
    __asm { FCVT            H3, S3 }
    short float v121 = *(short float *)&_S3;
    _S3 = v125;
    __asm { FCVT            H3, S3 }
    short float v120 = *(short float *)&_S3;
    _S3 = v124;
    __asm { FCVT            H3, S3 }
    short float v119 = *(short float *)&_S3;
    _S3 = v123;
    __asm { FCVT            H15, S3 }
    _S3 = v122;
    __asm { FCVT            H3, S3 }
    *(short float *)&a7 = (short float)v31;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    *(short float *)&a7 = (short float)v33;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    *(short float *)&a7 = (short float)v34;
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    *(short float *)&a7 = (short float)v35;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    *(short float *)&a7 = (short float)v36;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    if (v32 >= 0x11) {
      unsigned __int8 v71 = 0;
    }
    else {
      unsigned __int8 v71 = 16 - v32;
    }
    if (v27) {
      uint64_t v72 = v27 + v26 * v37 + 2 * v17;
    }
    else {
      uint64_t v72 = 0;
    }
    if (v28) {
      uint64_t v73 = v28 + v25 * v37 + 2 * v17;
    }
    else {
      uint64_t v73 = 0;
    }
    uint64_t v74 = v116 + v24 * v37 + 2 * v17;
    uint64_t result = v117 + v115 + 4 * v118;
    __asm { FCVT            H4, S17 }
    unsigned __int8 v76 = v71;
    uint16x8_t v77 = (uint16x8_t)vdupq_n_s16(v71);
    do
    {
      if ((int)v9 < 8)
      {
        unint64_t v103 = 0;
        long long v82 = (__int16 *)v73;
        long long v81 = (int16x8_t *)v72;
        uint64_t v80 = (uint16x8_t *)v74;
        long long v79 = (void *)result;
      }
      else
      {
        int v78 = 0;
        long long v79 = (void *)result;
        uint64_t v80 = (uint16x8_t *)v74;
        long long v81 = (int16x8_t *)v72;
        long long v82 = (__int16 *)v73;
        do
        {
          *(void *)&long long v86 = *v79;
          uint64_t v83 = v79[1];
          *(void *)&long long v84 = v79[2];
          uint64_t v85 = v79[3];
          v79 += 4;
          *((void *)&v86 + 1) = v83;
          *((void *)&v84 + 1) = v85;
          long long v87 = v84;
          if (v81)
          {
            int8x8_t v88 = vqtbl2_s8(*(int8x16x2_t *)&v86, v129[1]);
            *(int8x8_t *)v89.i8 = vzip1_s8(v88, 0);
            v89.u64[1] = (unint64_t)vzip2_s8(v88, 0);
            v90.i64[0] = 0x101010101010101;
            v90.i64[1] = 0x101010101010101;
            int16x8_t v91 = vmulq_s16(v89, v90);
          }
          else
          {
            int16x8_t v91 = 0uLL;
          }
          int8x8_t v92 = vqtbl2_s8(*(int8x16x2_t *)&v86, *(int8x8_t *)&v128);
          int8x8_t v93 = vqtbl2_s8(*(int8x16x2_t *)&v86, *(int8x8_t *)((char *)&v128 + 8));
          int8x8_t v94 = vqtbl2_s8(*(int8x16x2_t *)&v86, v129[0]);
          *(int8x8_t *)v95.i8 = vzip1_s8(v92, 0);
          v95.u64[1] = (unint64_t)vzip2_s8(v92, 0);
          float16x8_t v96 = vcvtq_f16_u16(v95);
          *(int8x8_t *)v95.i8 = vzip1_s8(v93, 0);
          v95.u64[1] = (unint64_t)vzip2_s8(v93, 0);
          float16x8_t v97 = vcvtq_f16_u16(v95);
          *(int8x8_t *)v95.i8 = vzip1_s8(v94, 0);
          v95.u64[1] = (unint64_t)vzip2_s8(v94, 0);
          float16x8_t v98 = vcvtq_f16_u16(v95);
          float16x8_t v99 = vmulq_n_f16(v96, _H4);
          float16x8_t v100 = vmulq_n_f16(v97, _H4);
          a8 = vmulq_n_f16(v98, _H4);
          *v80++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v66, v99, _H8), v100, _H9), a8, _H10), v66), v68)), v77);
          if (v82)
          {
            float16x8_t v101 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v67, v99, v119), v100, _H15), a8, _H3);
            a8 = (float16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v67, v99, _H7), v100, v121), a8, v120), v69), v70), v69), v70)), v77);
            uint16x8_t v102 = vshlq_u16(vcvtq_u16_f16(v101), v77);
            vst2q_s16(v82, *(int16x8x2_t *)a8.i8);
            v82 += 16;
          }
          if (v81) {
            *v81++ = v91;
          }
          v78 += 8;
        }
        while (v78 < (int)v9 - 7);
        unint64_t v103 = v9 & 0xFFFFFFF8;
      }
      _CF = v9 >= v103;
      unint64_t v104 = v9 - v103;
      if (v104 != 0 && _CF)
      {
        do
        {
          a8.i8[0] = *((unsigned char *)v79 + v130);
          *(float *)&unsigned int v105 = (float)a8.u32[0];
          float v106 = _S17 * *(float *)&v105;
          LOBYTE(v105) = *((unsigned char *)v79 + BYTE1(v130));
          *(float *)&unsigned int v107 = (float)v105;
          float v108 = _S17 * *(float *)&v107;
          LOBYTE(v107) = *((unsigned char *)v79 + BYTE2(v130));
          *(float *)a8.i32 = _S17 * (float)v107;
          float v109 = (float)((float)((float)(_S1 * v108) + (float)(_S0 * v106)) + (float)(_S2 * *(float *)a8.i32)) + v46;
          float v110 = (float)v34;
          if (v109 <= (float)v34)
          {
            float v110 = (float)((float)((float)(_S1 * v108) + (float)(_S0 * v106)) + (float)(_S2 * *(float *)a8.i32)) + v46;
            if (v109 < v46) {
              float v110 = (float)v31;
            }
          }
          __int16 v111 = *((unsigned __int8 *)v79 + HIBYTE(v130));
          v80->i16[0] = llroundf(v110) << v76;
          uint64_t v80 = (uint16x8_t *)((char *)v80 + 2);
          if (v82)
          {
            float v112 = (float)((float)(v47 + (float)(v106 * v127)) + (float)(v108 * v126))
                 + (float)(*(float *)a8.i32 * v125);
            float v113 = v49;
            if (v112 <= v49)
            {
              float v113 = (float)((float)(v47 + (float)(v106 * v127)) + (float)(v108 * v126))
                   + (float)(*(float *)a8.i32 * v125);
              if (v112 < v48) {
                float v113 = v48;
              }
            }
            *(float *)a8.i32 = (float)((float)(v47 + (float)(v106 * v124)) + (float)(v108 * v123))
                             + (float)(*(float *)a8.i32 * v122);
            *long long v82 = llroundf(v113) << v76;
            float v114 = v49;
            if (*(float *)a8.i32 <= v49)
            {
              float v114 = *(float *)a8.i32;
              if (*(float *)a8.i32 < v48) {
                float v114 = v48;
              }
            }
            v82[1] = llroundf(v114) << v76;
            v82 += 2;
          }
          if (v81)
          {
            v81->i16[0] = v111 | (v111 << 8);
            long long v81 = (int16x8_t *)((char *)v81 + 2);
          }
          long long v79 = (void *)((char *)v79 + 4);
          --v104;
        }
        while (v104);
      }
      result += v23;
      v74 += v24;
      v73 += v25;
      v72 += v26;
      ++v43;
    }
    while (v43 != v44);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_xf444_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = *result;
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (v14 != v13)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(result + 20);
    unint64_t v17 = v13 + *(void *)(result + 44);
    unint64_t v18 = v14 - v13;
    uint64_t v19 = *((void *)result + 19);
    int64x2_t v20 = (uint64_t *)*((void *)result + 17);
    long long v21 = (void *)*((void *)result + 7);
    uint64_t v22 = **((void **)result + 8);
    uint64_t v23 = *v20;
    uint64_t v24 = v20[1];
    uint64_t v25 = v20[2];
    *(float *)&unsigned int v26 = (float)*(unsigned int *)(v19 + 136);
    float v27 = *(float *)&v26 / (float)*(unsigned int *)(v19 + 128);
    LOWORD(v26) = *(_WORD *)(v19 + 144);
    float v28 = (float)v26;
    LOWORD(a5) = *(_WORD *)(v19 + 146);
    float v29 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v19 + 148);
    float v30 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v19 + 150);
    float v31 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v19 + 152);
    float v32 = (float)LODWORD(a8);
    float v33 = *(float *)(v19 + 36);
    float v34 = *(float *)(v19 + 40);
    float v35 = *(float *)(v19 + 44);
    float v36 = *(float *)(v19 + 48);
    float v37 = *(float *)(v19 + 52);
    float v38 = *(float *)(v19 + 56);
    float v39 = *(float *)(v19 + 60);
    float v40 = *(float *)(v19 + 64);
    float v41 = *(float *)(v19 + 68);
    char v42 = (void *)*((void *)result + 16);
    uint64_t v43 = *((void *)result + 14);
    unint64_t v44 = *((void *)result + 13) * a2 / v12 + *((void *)result + 15);
    uint64_t v45 = *(void *)(result + 36);
    unsigned int v46 = *(unsigned __int8 *)(v19 + 132);
    if (v46 >= 0x11) {
      char v47 = 0;
    }
    else {
      char v47 = 16 - v46;
    }
    uint64_t v48 = *(unsigned __int8 *)(v19 + 157);
    uint64_t v49 = *(unsigned __int8 *)(v19 + 156);
    uint64_t v50 = *(unsigned __int8 *)(v19 + 155);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v19 + 154);
    uint64_t v51 = v42[2];
    if (v51) {
      uint64_t v52 = v51 + v44 * v25 + 2 * v43;
    }
    else {
      uint64_t v52 = 0;
    }
    unint64_t v55 = v42;
    uint64_t v54 = *v42;
    uint64_t v53 = v55[1];
    BOOL v56 = v53 == 0;
    uint64_t v57 = v53 + v44 * v24 + 2 * v43;
    if (v56) {
      uint64_t v57 = 0;
    }
    uint64_t v58 = v54 + v44 * v23 + 2 * v43;
    uint64_t v59 = *v21 + v22 * v17 + 4 * v45;
    char v60 = v47;
    do
    {
      if (v16)
      {
        uint64_t v61 = v16;
        uint64_t v62 = v59;
        uint64_t v63 = (_WORD *)v52;
        uint64_t v64 = (_WORD *)v57;
        uint64_t v65 = (_WORD *)v58;
        do
        {
          LOBYTE(v8) = result[v62];
          float v8 = v27 * (float)LODWORD(v8);
          LOBYTE(v9) = *(unsigned char *)(v62 + v50);
          float v9 = v27 * (float)LODWORD(v9);
          LOBYTE(v10) = *(unsigned char *)(v62 + v49);
          float v10 = v27 * (float)LODWORD(v10);
          float v66 = (float)((float)((float)(v34 * v9) + (float)(v33 * v8)) + (float)(v35 * v10)) + v28;
          float v67 = v30;
          if (v66 <= v30)
          {
            float v67 = (float)((float)((float)(v34 * v9) + (float)(v33 * v8)) + (float)(v35 * v10)) + v28;
            if (v66 < v28) {
              float v67 = v28;
            }
          }
          __int16 v68 = *(unsigned __int8 *)(v62 + v48);
          *v65++ = llroundf(v67) << v60;
          if (v64)
          {
            float v69 = (float)((float)(v29 + (float)(v8 * v36)) + (float)(v9 * v37)) + (float)(v10 * v38);
            float v70 = v32;
            if (v69 <= v32)
            {
              float v70 = (float)((float)(v29 + (float)(v8 * v36)) + (float)(v9 * v37)) + (float)(v10 * v38);
              if (v69 < v31) {
                float v70 = v31;
              }
            }
            float v8 = (float)((float)(v29 + (float)(v8 * v39)) + (float)(v9 * v40)) + (float)(v10 * v41);
            *uint64_t v64 = llroundf(v70) << v60;
            float v9 = v32;
            if (v8 <= v32)
            {
              float v9 = v8;
              if (v8 < v31) {
                float v9 = v31;
              }
            }
            v64[1] = llroundf(v9) << v60;
            v64 += 2;
          }
          if (v63) {
            *v63++ = v68 | (v68 << 8);
          }
          v62 += 4;
          --v61;
        }
        while (v61);
      }
      v59 += v22;
      v58 += v23;
      v57 += v24;
      v52 += v25;
      ++v15;
    }
    while (v15 != v18);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_BGRA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float _S6, __n128 _Q7)
{
  char v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = *(void *)(result + 20);
  uint64_t v14 = *(void *)(result + 36);
  uint64_t v15 = *(void *)(result + 44);
  uint64_t v16 = *(void *)(result + 28);
  unint64_t v17 = *result;
  unint64_t v18 = v16 * a2 / v17;
  uint64_t v19 = v18 + v15;
  unint64_t v20 = (v16 + v16 * a2) / v17;
  uint64_t v21 = v20 + v15;
  uint64_t v22 = *((void *)result + 14);
  uint64_t v23 = *((void *)result + 19);
  uint64_t v24 = *((void *)result + 15);
  unint64_t v25 = *((void *)result + 13) * a2;
  uint64_t v26 = **((void **)result + 8);
  uint64_t v27 = **((void **)result + 7);
  uint64_t v28 = **((void **)result + 17);
  uint64_t v29 = **((void **)result + 16);
  unsigned int v30 = *(_DWORD *)(v23 + 128);
  uint64_t v213 = *(unsigned __int8 *)(v23 + 154);
  v230[0] = *(unsigned char *)(v23 + 154);
  uint64_t v212 = *(unsigned __int8 *)(v23 + 155);
  v230[1] = *(unsigned char *)(v23 + 155);
  uint64_t v211 = *(unsigned __int8 *)(v23 + 156);
  v230[2] = *(unsigned char *)(v23 + 156);
  uint64_t v210 = *(unsigned __int8 *)(v23 + 157);
  v230[3] = *(unsigned char *)(v23 + 157);
  uint64_t v209 = *(unsigned __int8 *)(v23 + 158);
  v229[0] = *(unsigned char *)(v23 + 158);
  uint64_t v208 = *(unsigned __int8 *)(v23 + 159);
  v229[1] = *(unsigned char *)(v23 + 159);
  uint64_t v207 = *(unsigned __int8 *)(v23 + 160);
  v229[2] = *(unsigned char *)(v23 + 160);
  uint64_t v206 = *(unsigned __int8 *)(v23 + 161);
  v229[3] = *(unsigned char *)(v23 + 161);
  _S20 = *(float *)(v23 + 72);
  _S23 = *(float *)(v23 + 76);
  _S24 = *(float *)(v23 + 80);
  _S25 = *(float *)(v23 + 84);
  _S26 = *(float *)(v23 + 88);
  _S27 = *(float *)(v23 + 92);
  _S28 = *(float *)(v23 + 96);
  _S8 = *(float *)(v23 + 100);
  unint64_t v39 = v28 * (v25 / v17 + v24);
  _S9 = *(float *)(v23 + 104);
  _S10 = *(float *)(v23 + 108);
  _S11 = *(float *)(v23 + 112);
  _S12 = *(float *)(v23 + 116);
  _S13 = *(float *)(v23 + 120);
  long long v227 = 0u;
  long long v228 = 0u;
  long long v225 = 0u;
  long long v226 = 0u;
  do
  {
    unsigned int v45 = 0;
    char v46 = v230[v12];
    char v47 = v229[v12];
    do
    {
      *((unsigned char *)&v227 + 8 * ((v11 + v45) >> 3) + v45) = v46 + 4 * v45;
      *(unsigned char *)(((unint64_t)&v225 + ((v47 + 4 * v45) & 0xF8)) | (v47 + 4 * (_BYTE)v45) & 7) = v11 + v45;
      ++v45;
    }
    while (v45 != 8);
    ++v12;
    v11 += 8;
  }
  while (v12 != 4);
  if (v20 != v18)
  {
    uint64_t v48 = 0;
    _S22 = 8191.0 / (float)v30;
    __asm
    {
      FCVT            H14, S10
      FCVT            H15, S11
    }
    uint64_t v56 = v21 - v19;
    __asm
    {
      FCVT            H0, S12
      FCVT            H1, S13
      FCVT            H2, S20
    }
    uint64_t v60 = v23 + 16548;
    uint64_t v61 = v23 + 32932;
    uint64_t v62 = v23 + 164;
    __asm
    {
      FCVT            H3, S23
      FCVT            H4, S24
      FCVT            H6, S25
      FCVT            H7, S26
      FCVT            H5, S27
    }
    short float v188 = _H5;
    __asm { FCVT            H5, S28 }
    short float v187 = _H5;
    __asm { FCVT            H5, S8 }
    short float v186 = _H5;
    __asm { FCVT            H5, S9 }
    short float v185 = _H5;
    uint64_t v69 = v29 + v39 + 4 * v22;
    uint64_t result = (unsigned __int8 *)(v27 + v26 * v19 + 4 * v14);
    int v70 = v13 - 7;
    __asm { FCVT            H5, S22 }
    unint64_t v184 = v13 & 0xFFFFFFF8;
    v72.i64[0] = 0x9000900090009000;
    v72.i64[1] = 0x9000900090009000;
    short float v220 = _H0;
    short float v221 = _H14;
    short float v218 = _H4;
    short float v219 = _H2;
    float v217 = _S6;
    uint64_t v204 = v26;
    unint64_t v205 = v13;
    uint64_t v203 = v28;
    float v201 = _S23;
    float v202 = _S20;
    float v199 = _S25;
    float v200 = _S24;
    float v197 = _S27;
    float v198 = _S26;
    float v195 = _S8;
    float v196 = _S28;
    float v193 = _S10;
    float v194 = _S9;
    float v191 = _S12;
    float v192 = _S11;
    float v190 = _S13;
    uint64_t v189 = v56;
    __n128 v224 = _Q7;
    do
    {
      if ((int)v13 < 8)
      {
        unint64_t v149 = 0;
        uint64_t v80 = v69;
        long long v79 = (uint64_t *)result;
      }
      else
      {
        uint64_t v215 = v69;
        uint64_t v216 = v48;
        int v73 = 0;
        int8x8_t v74 = *(int8x8_t *)((char *)&v226 + 8);
        int8x8_t v75 = (int8x8_t)v228;
        int8x8_t v222 = *(int8x8_t *)((char *)&v227 + 8);
        int8x8_t v223 = (int8x8_t)v227;
        int8x8_t v76 = *(int8x8_t *)((char *)&v228 + 8);
        int8x8_t v78 = *(int8x8_t *)((char *)&v225 + 8);
        int8x8_t v77 = (int8x8_t)v225;
        float v214 = result;
        long long v79 = (uint64_t *)result;
        uint64_t v80 = v69;
        int8x8_t v81 = (int8x8_t)v226;
        do
        {
          v232.val[0].i64[0] = *v79;
          uint64_t v82 = v79[1];
          v83.i64[0] = v79[2];
          uint64_t v84 = v79[3];
          v79 += 4;
          v232.val[0].i64[1] = v82;
          v83.i64[1] = v84;
          v232.val[1] = v83;
          int8x8_t v85 = vqtbl2_s8(v232, v223);
          int8x8_t v86 = vqtbl2_s8(v232, v222);
          int8x8_t v87 = vqtbl2_s8(v232, v75);
          *(int8x8_t *)v88.i8 = vzip1_s8(v85, 0);
          v88.u64[1] = (unint64_t)vzip2_s8(v85, 0);
          *(int8x8_t *)v89.i8 = vzip1_s8(v86, 0);
          v89.u64[1] = (unint64_t)vzip2_s8(v86, 0);
          float16x8_t v90 = vcvtq_f16_u16(v88);
          *(int8x8_t *)v88.i8 = vzip1_s8(v87, 0);
          v88.u64[1] = (unint64_t)vzip2_s8(v87, 0);
          float16x8_t v91 = vcvtq_f16_u16(v88);
          float16x8_t v92 = vmulq_n_f16(vcvtq_f16_u16(v89), _H5);
          uint16x8_t v93 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(v90, _H5), (float16x8_t)0), v72));
          uint32x4_t v94 = vmovl_high_u16(v93);
          float16x8_t v95 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v93.i8);
          v95.i16[0] = *(_WORD *)(v62 + 2 * v95.u32[0]);
          uint64_t v96 = v94.u32[1];
          float16x8_t v97 = (__int16 *)(v62 + 2 * v94.u32[0]);
          uint64_t v98 = v94.u32[3];
          float16x8_t v99 = (__int16 *)(v62 + 2 * v94.u32[2]);
          uint16x8_t v100 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v92, (float16x8_t)0), v72));
          uint32x4_t v101 = vmovl_high_u16(v100);
          float16x8_t v102 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v100.i8);
          v102.i16[0] = *(_WORD *)(v62 + 2 * v102.u32[0]);
          unint64_t v103 = (__int16 *)(v62 + 2 * v101.u32[0]);
          v95.i16[1] = *(_WORD *)(v62 + 2 * v95.u32[1]);
          unint64_t v104 = (__int16 *)(v62 + 2 * v101.u32[1]);
          v95.i16[2] = *(_WORD *)(v62 + 2 * v95.u32[2]);
          unsigned int v105 = (__int16 *)(v62 + 2 * v101.u32[2]);
          float v106 = (__int16 *)(v62 + 2 * v101.u32[3]);
          v102.i16[1] = *(_WORD *)(v62 + 2 * v102.u32[1]);
          v95.i16[3] = *(_WORD *)(v62 + 2 * v95.u32[3]);
          v102.i16[2] = *(_WORD *)(v62 + 2 * v102.u32[2]);
          v102.i16[3] = *(_WORD *)(v62 + 2 * v102.u32[3]);
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(v91, _H5), (float16x8_t)0), v72));
          uint32x4_t v108 = vmovl_high_u16(v107);
          v95.i16[4] = *v97;
          float16x8_t v109 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v107.i8);
          v102.i16[4] = *v103;
          v109.i16[0] = *(_WORD *)(v62 + 2 * v109.u32[0]);
          v95.i16[5] = *(_WORD *)(v62 + 2 * v96);
          v102.i16[5] = *v104;
          v95.i16[6] = *v99;
          v102.i16[6] = *v105;
          v109.i16[1] = *(_WORD *)(v62 + 2 * v109.u32[1]);
          v95.i16[7] = *(_WORD *)(v62 + 2 * v98);
          v109.i16[2] = *(_WORD *)(v62 + 2 * v109.u32[2]);
          v109.i16[3] = *(_WORD *)(v62 + 2 * v109.u32[3]);
          v102.i16[7] = *v106;
          v109.i16[4] = *(_WORD *)(v62 + 2 * v108.u32[0]);
          v109.i16[5] = *(_WORD *)(v62 + 2 * v108.u32[1]);
          v109.i16[6] = *(_WORD *)(v62 + 2 * v108.u32[2]);
          v109.i16[7] = *(_WORD *)(v62 + 2 * v108.u32[3]);
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v95, _H14), v102, _H15), v109, _H0), vmaxq_f16(vmaxq_f16(v95, v102), v109), _H1), (float16x8_t)0), v72));
          float16x8_t v111 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v110.i8);
          uint32x4_t v112 = vmovl_high_u16(v110);
          v111.i16[0] = *(_WORD *)(v60 + 2 * v111.u32[0]);
          v111.i16[1] = *(_WORD *)(v60 + 2 * v111.u32[1]);
          v111.i16[2] = *(_WORD *)(v60 + 2 * v111.u32[2]);
          v111.i16[3] = *(_WORD *)(v60 + 2 * v111.u32[3]);
          v111.i16[4] = *(_WORD *)(v60 + 2 * v112.u32[0]);
          v111.i16[5] = *(_WORD *)(v60 + 2 * v112.u32[1]);
          v111.i16[6] = *(_WORD *)(v60 + 2 * v112.u32[2]);
          v111.i16[7] = *(_WORD *)(v60 + 2 * v112.u32[3]);
          float16x8_t v113 = vmulq_f16(v95, v111);
          float16x8_t v114 = vmulq_f16(v102, v111);
          float16x8_t v115 = vmulq_f16(v109, v111);
          float16x8_t v116 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v113, _H2), v114, _H3), v115, _H4);
          float16x8_t v117 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v113, *(short float *)&_S6), v114, *(short float *)v224.n128_u16), v115, v188);
          float16x8_t v118 = vmlaq_n_f16(vmulq_n_f16(v115, v185), v114, v186);
          uint16x8_t v119 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)0), v72));
          uint32x4_t v120 = vmovl_u16(*(uint16x4_t *)v119.i8);
          uint64_t v121 = v120.u32[1];
          uint64_t v122 = v120.u32[0];
          uint32x4_t v123 = vmovl_high_u16(v119);
          uint64_t v124 = v120.u32[3];
          uint64_t v125 = v120.u32[2];
          uint64_t v126 = v123.u32[2];
          uint64_t v127 = v123.u32[1];
          uint64_t v128 = v123.u32[0];
          uint64_t v129 = v123.u32[3];
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, (float16x8_t)0), v72));
          v231.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v130.i8);
          uint64_t v131 = v231.val[1].u32[0];
          uint32x4_t v132 = vmovl_high_u16(v130);
          uint64_t v133 = v132.u32[1];
          uint64_t v134 = v132.u32[0];
          uint64_t v135 = v132.u32[3];
          uint64_t v136 = v132.u32[2];
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v118, v113, v187), (float16x8_t)0), v72));
          float16x8_t v138 = (float16x8_t)vmovl_high_u16(v137);
          float16x8_t v139 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v137.i8);
          uint64_t v140 = v139.u32[1];
          uint64_t v141 = v139.u32[0];
          uint64_t v142 = v139.u32[2];
          uint64_t v143 = v138.u32[1];
          v231.val[1].i16[0] = *(_WORD *)(v61 + 2 * v122);
          uint64_t v144 = v138.u32[0];
          v139.i16[0] = *(_WORD *)(v61 + 2 * v131);
          v231.val[1].i16[1] = *(_WORD *)(v61 + 2 * v121);
          v139.i16[1] = *(_WORD *)(v61 + 2 * v231.val[1].u32[1]);
          v231.val[1].i16[2] = *(_WORD *)(v61 + 2 * v125);
          v139.i16[2] = *(_WORD *)(v61 + 2 * v231.val[1].u32[2]);
          v231.val[1].i16[3] = *(_WORD *)(v61 + 2 * v124);
          v139.i16[3] = *(_WORD *)(v61 + 2 * v231.val[1].u32[3]);
          v231.val[1].i16[4] = *(_WORD *)(v61 + 2 * v128);
          v139.i16[4] = *(_WORD *)(v61 + 2 * v134);
          v138.i16[0] = *(_WORD *)(v61 + 2 * v141);
          v231.val[1].i16[5] = *(_WORD *)(v61 + 2 * v127);
          v138.i16[1] = *(_WORD *)(v61 + 2 * v140);
          v139.i16[5] = *(_WORD *)(v61 + 2 * v133);
          v138.i16[2] = *(_WORD *)(v61 + 2 * v142);
          v231.val[1].i16[6] = *(_WORD *)(v61 + 2 * v126);
          float v145 = (__int16 *)(v61 + 2 * v139.u32[3]);
          v139.i16[6] = *(_WORD *)(v61 + 2 * v136);
          float v146 = (__int16 *)(v61 + 2 * v138.u32[2]);
          float v147 = (__int16 *)(v61 + 2 * v138.u32[3]);
          v231.val[1].i16[7] = *(_WORD *)(v61 + 2 * v129);
          v138.i16[3] = *v145;
          v138.i16[4] = *(_WORD *)(v61 + 2 * v144);
          v139.i16[7] = *(_WORD *)(v61 + 2 * v135);
          v138.i16[5] = *(_WORD *)(v61 + 2 * v143);
          v138.i16[6] = *v146;
          v138.i16[7] = *v147;
          *(int8x8_t *)v232.val[0].i8 = vqtbl2_s8(v232, v76);
          float16x8_t v148 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          v232.val[1] = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v231.val[1], (float16x8_t)0), v148));
          *(int8x8_t *)v231.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v138, (float16x8_t)0), v148)));
          v231.val[0] = vuzp1q_s8(v232.val[1], (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v139, (float16x8_t)0), v148)));
          v231.val[1].i64[1] = v232.val[0].i64[0];
          *(int8x8_t *)&_Q16 = vqtbl2_s8(v231, v77);
          *((int8x8_t *)&_Q16 + 1) = vqtbl2_s8(v231, v78);
          *(int8x8_t *)v232.val[1].i8 = vqtbl2_s8(v231, v81);
          v232.val[1].u64[1] = (unint64_t)vqtbl2_s8(v231, v74);
          *(_OWORD *)uint64_t v80 = _Q16;
          *(int8x16_t *)(v80 + 16) = v232.val[1];
          v80 += 32;
          v73 += 8;
        }
        while (v73 < v70);
        unint64_t v149 = v184;
        uint64_t v26 = v204;
        unint64_t v13 = v205;
        uint64_t v28 = v203;
        _S23 = v201;
        _S20 = v202;
        _S25 = v199;
        _S24 = v200;
        _S27 = v197;
        _S26 = v198;
        _S8 = v195;
        _S28 = v196;
        _S10 = v193;
        _S9 = v194;
        _S12 = v191;
        _S11 = v192;
        _S13 = v190;
        uint64_t v69 = v215;
        uint64_t v48 = v216;
        uint64_t v56 = v189;
        _Q7 = v224;
        uint64_t result = v214;
      }
      unint64_t v150 = v13 - v149;
      if (v13 > v149)
      {
        uint64_t v151 = 0;
        short float v152 = (char *)v79 + v210;
        short float v153 = (char *)v79 + v211;
        short float v154 = (char *)v79 + v212;
        short float v155 = (char *)v79 + v213;
        uint64_t v156 = v80 + v206;
        uint64_t v157 = v80 + v207;
        uint64_t v158 = v80 + v208;
        uint64_t v159 = v80 + v209;
        do
        {
          __n128 v160 = _Q7;
          LOBYTE(_S6) = v155[v151];
          _Q7.n128_u8[0] = v154[v151];
          LOBYTE(_Q16) = v153[v151];
          _H6 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(_S22 * (float)LODWORD(_S6), 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(_S22 * (float)_Q7.n128_u32[0], 0.0), 8191.0)));
          unsigned int v164 = llroundf(fminf(fmaxf(_S22 * (float)_Q16, 0.0), 8191.0));
          __asm { FCVT            S16, H7 }
          _H7 = *(_WORD *)(v62 + 2 * v164);
          __asm { FCVT            S18, H7 }
          float v168 = (float)((float)((float)(_S11 * _S16) + (float)(_S10 * _S6)) + (float)(_S12 * _S18))
               + (float)(_S13 * fmaxf(_S6, fmaxf(_S16, _S18)));
          float v169 = 8191.0;
          if (v168 <= 8191.0)
          {
            float v169 = v168;
            if (v168 < 0.0) {
              float v169 = 0.0;
            }
          }
          _H7 = *(_WORD *)(v60 + 2 * llroundf(v169));
          __asm { FCVT            S19, H7 }
          float v172 = _S6 * _S19;
          float v173 = _S16 * _S19;
          float v174 = _S18 * _S19;
          if (*(short float *)(v61
                              + 2
                              * llroundf(fminf(fmaxf((float)((float)(_S23 * v173) + (float)((float)(_S6 * _S19) * _S20))+ (float)((float)(_S18 * _S19) * _S24), 0.0), 8191.0))) <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H18, #0 }
            if (_NF) {
              _S18 = 0.0;
            }
            else {
              __asm { FCVT            S18, H18 }
            }
          }
          else
          {
            _S18 = 255.0;
          }
          char v177 = v152[v151];
          float v178 = (float)((float)(_S26 * v173) + (float)(v172 * _S25)) + (float)(v174 * _S27);
          float v179 = (float)((float)(_S8 * v173) + (float)(v172 * _S28)) + (float)(v174 * _S9);
          short float v180 = *(short float *)(v61 + 2 * llroundf(fminf(fmaxf(v178, 0.0), 8191.0)));
          short float v181 = *(short float *)(v61 + 2 * llroundf(fminf(fmaxf(v179, 0.0), 8191.0)));
          *(unsigned char *)(v159 + v151) = llroundf(_S18);
          if (v180 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H16, #0 }
            if (_NF) {
              LODWORD(_Q16) = 0;
            }
            else {
              __asm { FCVT            S16, H16 }
            }
          }
          else
          {
            LODWORD(_Q16) = 1132396544;
          }
          *(unsigned char *)(v158 + v151) = llroundf(*(float *)&_Q16);
          if (v181 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H7, #0 }
            if (_NF) {
              _S6 = 0.0;
            }
            else {
              __asm { FCVT            S6, H7 }
            }
          }
          else
          {
            _S6 = 255.0;
          }
          _Q7 = v160;
          *(unsigned char *)(v157 + v151) = llroundf(_S6);
          *(unsigned char *)(v156 + v151) = v177;
          v151 += 4;
          --v150;
        }
        while (v150);
      }
      result += v26;
      v69 += v28;
      ++v48;
      _H0 = v220;
      _H14 = v221;
      _H4 = v218;
      _H2 = v219;
      _S6 = v217;
    }
    while (v48 != v56);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = **((void **)result + 8);
    uint64_t v16 = **((void **)result + 17);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    uint64_t v26 = v13 + 164;
    uint64_t v27 = v13 + 16548;
    uint64_t v28 = v13 + 32932;
    float v29 = *(float *)(v13 + 104);
    float v30 = *(float *)(v13 + 108);
    float v31 = *(float *)(v13 + 112);
    float v32 = *(float *)(v13 + 116);
    float v33 = *(float *)(v13 + 120);
    float v34 = (void *)*((void *)result + 16);
    uint64_t v35 = *((void *)result + 14);
    unint64_t v36 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v37 = *(void *)(result + 36);
    uint64_t v38 = *(unsigned __int8 *)(v13 + 161);
    uint64_t v39 = *(unsigned __int8 *)(v13 + 160);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 159);
    uint64_t v40 = *(unsigned __int8 *)(v13 + 158);
    uint64_t v41 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v42 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v43 = *v34 + v36 * v16;
    uint64_t v44 = *(unsigned __int8 *)(v13 + 155);
    uint64_t v45 = *(unsigned __int8 *)(v13 + 154);
    uint64_t v46 = v43 + 4 * v35;
    uint64_t v47 = *v14 + v15 * v11 + 4 * v37;
    do
    {
      if (v10)
      {
        uint64_t v48 = v10;
        uint64_t v49 = v47;
        uint64_t v50 = v46;
        do
        {
          LOBYTE(_S25) = *(unsigned char *)(v49 + v45);
          LOBYTE(_S26) = *(unsigned char *)(v49 + v44);
          LOBYTE(v4) = *(unsigned char *)(v49 + v42);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S25), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S26), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v4), 0.0), 8191.0)));
          __asm { FCVT            S28, H27 }
          float v61 = (float)((float)((float)(v31 * _S26) + (float)(v30 * _S25)) + (float)(v32 * _S28))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S26, _S28)));
          float v62 = 8191.0;
          if (v61 <= 8191.0)
          {
            float v62 = v61;
            if (v61 < 0.0) {
              float v62 = 0.0;
            }
          }
          _H27 = *(_WORD *)(v27 + 2 * llroundf(v62));
          __asm { FCVT            S29, H27 }
          float v65 = _S25 * _S29;
          float v66 = _S26 * _S29;
          float v67 = _S28 * _S29;
          if (*(short float *)(v28
                              + 2
                              * llroundf(fminf(fmaxf((float)((float)(v19 * v66) + (float)(v65 * v18))+ (float)((float)(_S28 * _S29) * v20), 0.0), 8191.0))) <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H28, #0 }
            if (_NF) {
              _S28 = 0.0;
            }
            else {
              __asm { FCVT            S28, H28 }
            }
          }
          else
          {
            _S28 = 255.0;
          }
          char v70 = *(unsigned char *)(v49 + v41);
          float v71 = (float)((float)(v22 * v66) + (float)(v65 * v21)) + (float)(v67 * v23);
          float v4 = v25 * v66;
          float v72 = (float)(v4 + (float)(v65 * v24)) + (float)(v67 * v29);
          short float v73 = *(short float *)(v28 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          short float v74 = *(short float *)(v28 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          *(unsigned char *)(v50 + v40) = llroundf(_S28);
          if (v73 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H26, #0 }
            if (_NF) {
              _S26 = 0.0;
            }
            else {
              __asm { FCVT            S26, H26 }
            }
          }
          else
          {
            _S26 = 255.0;
          }
          result[v50] = llroundf(_S26);
          if (v74 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H25, #0 }
            if (_NF) {
              _S25 = 0.0;
            }
            else {
              __asm { FCVT            S25, H25 }
            }
          }
          else
          {
            _S25 = 255.0;
          }
          v49 += 4;
          *(unsigned char *)(v50 + v39) = llroundf(_S25);
          *(unsigned char *)(v50 + v38) = v70;
          v50 += 4;
          --v48;
        }
        while (v48);
      }
      v47 += v15;
      v46 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_BGRA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

__int16 *vt_Copy_BGRA_TRC_Mat_TRC_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, __n128 _Q2, double _D3)
{
  char v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a1 + 20);
  uint64_t v9 = *(void *)(a1 + 36);
  uint64_t v10 = *(void *)(a1 + 44);
  uint64_t v11 = *(void *)(a1 + 28);
  unint64_t v12 = *a1;
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  uint64_t v15 = *((void *)a1 + 14);
  uint64_t v16 = *((void *)a1 + 19);
  unint64_t v17 = *((void *)a1 + 13) * a2;
  uint64_t v18 = *((void *)a1 + 15);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 16);
  int64x2_t v20 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v21 = **((void **)a1 + 8);
  uint64_t result = (__int16 *)**((void **)a1 + 7);
  uint64_t v23 = *v20;
  uint64_t v24 = *v19;
  unsigned int v25 = *(_DWORD *)(v16 + 128);
  uint64_t v176 = *(unsigned __int8 *)(v16 + 154);
  v183[0] = *(unsigned char *)(v16 + 154);
  uint64_t v175 = *(unsigned __int8 *)(v16 + 155);
  v183[1] = *(unsigned char *)(v16 + 155);
  uint64_t v174 = *(unsigned __int8 *)(v16 + 156);
  v183[2] = *(unsigned char *)(v16 + 156);
  uint64_t v173 = *(unsigned __int8 *)(v16 + 157);
  v183[3] = *(unsigned char *)(v16 + 157);
  uint64_t v172 = *(unsigned __int8 *)(v16 + 158);
  v182[0] = *(unsigned char *)(v16 + 158);
  uint64_t v171 = *(unsigned __int8 *)(v16 + 159);
  v182[1] = *(unsigned char *)(v16 + 159);
  uint64_t v170 = *(unsigned __int8 *)(v16 + 160);
  v182[2] = *(unsigned char *)(v16 + 160);
  uint64_t v169 = *(unsigned __int8 *)(v16 + 161);
  v182[3] = *(unsigned char *)(v16 + 161);
  _S16 = *(float *)(v16 + 72);
  _S19 = *(float *)(v16 + 76);
  _S20 = *(float *)(v16 + 80);
  _S24 = *(float *)(v16 + 84);
  unint64_t v30 = v23 * (v17 / v12 + v18);
  _S25 = *(float *)(v16 + 88);
  _S26 = *(float *)(v16 + 92);
  _S27 = *(float *)(v16 + 96);
  _S28 = *(float *)(v16 + 100);
  _S29 = *(float *)(v16 + 104);
  long long v180 = 0u;
  long long v181 = 0u;
  long long v178 = 0u;
  long long v179 = 0u;
  do
  {
    unsigned int v36 = 0;
    char v37 = v183[v7];
    char v38 = v182[v7];
    do
    {
      *((unsigned char *)&v180 + 8 * ((v6 + v36) >> 3) + v36) = v37 + 4 * v36;
      *(unsigned char *)(((unint64_t)&v178 + ((v38 + 4 * v36) & 0xF8)) | (v38 + 4 * (_BYTE)v36) & 7) = v6 + v36;
      ++v36;
    }
    while (v36 != 8);
    ++v7;
    v6 += 8;
  }
  while (v7 != 4);
  if (v14 != v13)
  {
    uint64_t v39 = 0;
    _S18 = 8191.0 / (float)v25;
    __asm { FCVT            H9, S16 }
    unint64_t v46 = v14 - v13;
    uint64_t v47 = v16 + 16548;
    uint64_t v48 = v16 + 164;
    __asm
    {
      FCVT            H10, S19
      FCVT            H11, S20
      FCVT            H12, S24
      FCVT            H13, S25
      FCVT            H14, S26
      FCVT            H15, S27
      FCVT            H1, S28
      FCVT            H8, S29
    }
    uint64_t v57 = v24 + v30 + 4 * v15;
    uint64_t v58 = (uint64_t)&result[2 * v9] + v21 * (v13 + v10);
    __asm { FCVT            H0, S18 }
    unint64_t v159 = v14 - v13;
    v60.i64[0] = 0x9000900090009000;
    v60.i64[1] = 0x9000900090009000;
    float v167 = _S19;
    float v168 = _S16;
    float v165 = _S24;
    float v166 = _S20;
    float v163 = _S26;
    float v164 = _S25;
    float v161 = _S28;
    float v162 = _S27;
    float v160 = _S29;
    short float v177 = _H8;
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v132 = 0;
        uint64_t v71 = v57;
        char v70 = (uint64_t *)v58;
      }
      else
      {
        uint64_t v61 = v23;
        uint64_t v62 = v21;
        int v63 = 0;
        int8x8_t v65 = *(int8x8_t *)((char *)&v180 + 8);
        int8x8_t v64 = (int8x8_t)v180;
        int8x8_t v67 = *(int8x8_t *)((char *)&v181 + 8);
        int8x8_t v66 = (int8x8_t)v181;
        int8x8_t v69 = *(int8x8_t *)((char *)&v178 + 8);
        int8x8_t v68 = (int8x8_t)v178;
        char v70 = (uint64_t *)v58;
        uint64_t v71 = v57;
        int8x8_t v73 = *(int8x8_t *)((char *)&v179 + 8);
        int8x8_t v72 = (int8x8_t)v179;
        do
        {
          v184.val[0].i64[0] = *v70;
          uint64_t v74 = v70[1];
          v75.i64[0] = v70[2];
          uint64_t v76 = v70[3];
          v70 += 4;
          v184.val[0].i64[1] = v74;
          v75.i64[1] = v76;
          v184.val[1] = v75;
          int8x8_t v77 = vqtbl2_s8(v184, v64);
          int8x8_t v78 = vqtbl2_s8(v184, v65);
          *(int8x8_t *)v79.i8 = vzip1_s8(v77, 0);
          v79.u64[1] = (unint64_t)vzip2_s8(v77, 0);
          int8x8_t v80 = vqtbl2_s8(v184, v66);
          *(int8x8_t *)v81.i8 = vzip1_s8(v78, 0);
          v81.u64[1] = (unint64_t)vzip2_s8(v78, 0);
          float16x8_t v82 = vcvtq_f16_u16(v79);
          *(int8x8_t *)v79.i8 = vzip1_s8(v80, 0);
          v79.u64[1] = (unint64_t)vzip2_s8(v80, 0);
          uint16x8_t v83 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(v82, _H0), (float16x8_t)0), v60));
          uint32x4_t v84 = vmovl_high_u16(v83);
          uint32x4_t v85 = vmovl_u16(*(uint16x4_t *)v83.i8);
          uint64_t v86 = v85.u32[1];
          uint64_t v87 = v85.u32[3];
          v82.i16[0] = *(_WORD *)(v48 + 2 * v85.u32[0]);
          uint64_t v88 = v84.u32[1];
          uint16x8_t v89 = (__int16 *)(v48 + 2 * v85.u32[2]);
          float16x8_t v90 = (__int16 *)(v48 + 2 * v84.u32[0]);
          uint64_t v91 = v84.u32[3];
          float16x8_t v92 = (__int16 *)(v48 + 2 * v84.u32[2]);
          uint16x8_t v93 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v81), _H0), (float16x8_t)0), v60));
          uint32x4_t v94 = vmovl_high_u16(v93);
          float16x8_t v95 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v93.i8);
          v95.i16[0] = *(_WORD *)(v48 + 2 * v95.u32[0]);
          uint64_t v96 = (__int16 *)(v48 + 2 * v94.u32[0]);
          float16x8_t v97 = (__int16 *)(v48 + 2 * v94.u32[1]);
          v82.i16[1] = *(_WORD *)(v48 + 2 * v86);
          uint64_t v98 = (__int16 *)(v48 + 2 * v94.u32[2]);
          v82.i16[2] = *v89;
          float16x8_t v99 = (__int16 *)(v48 + 2 * v94.u32[3]);
          v95.i16[1] = *(_WORD *)(v48 + 2 * v95.u32[1]);
          v95.i16[2] = *(_WORD *)(v48 + 2 * v95.u32[2]);
          uint16x8_t v100 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v79), _H0), (float16x8_t)0), v60));
          uint32x4_t v101 = vmovl_high_u16(v100);
          v82.i16[3] = *(_WORD *)(v48 + 2 * v87);
          uint32x4_t v102 = vmovl_u16(*(uint16x4_t *)v100.i8);
          v95.i16[3] = *(_WORD *)(v48 + 2 * v95.u32[3]);
          v103.i16[0] = *(_WORD *)(v48 + 2 * v102.u32[0]);
          v82.i16[4] = *v90;
          v95.i16[4] = *v96;
          v82.i16[5] = *(_WORD *)(v48 + 2 * v88);
          v95.i16[5] = *v97;
          v82.i16[6] = *v92;
          v103.i16[1] = *(_WORD *)(v48 + 2 * v102.u32[1]);
          v103.i16[2] = *(_WORD *)(v48 + 2 * v102.u32[2]);
          v95.i16[6] = *v98;
          v103.i16[3] = *(_WORD *)(v48 + 2 * v102.u32[3]);
          v103.i16[4] = *(_WORD *)(v48 + 2 * v101.u32[0]);
          v82.i16[7] = *(_WORD *)(v48 + 2 * v91);
          v103.i16[5] = *(_WORD *)(v48 + 2 * v101.u32[1]);
          v103.i16[6] = *(_WORD *)(v48 + 2 * v101.u32[2]);
          v95.i16[7] = *v99;
          v103.i16[7] = *(_WORD *)(v48 + 2 * v101.u32[3]);
          float16x8_t v104 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v82, _H12), v95, _H13), v103, _H14);
          float16x8_t v105 = vmlaq_n_f16(vmulq_n_f16(v103, v177), v95, _H1);
          uint16x8_t v106 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v82, _H9), v95, _H10), v103, _H11), (float16x8_t)0), v60));
          uint32x4_t v107 = vmovl_u16(*(uint16x4_t *)v106.i8);
          uint64_t v108 = v107.u32[1];
          uint64_t v109 = v107.u32[0];
          uint32x4_t v110 = vmovl_high_u16(v106);
          uint64_t v111 = v107.u32[3];
          uint64_t v112 = v107.u32[2];
          uint64_t v113 = v110.u32[2];
          uint64_t v114 = v110.u32[1];
          uint64_t v115 = v110.u32[0];
          uint64_t v116 = v110.u32[3];
          uint16x8_t v117 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v104, (float16x8_t)0), v60));
          uint64_t v118 = v113;
          uint32x4_t v119 = vmovl_high_u16(v117);
          float16x8_t v120 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v117.i8);
          uint64_t v121 = v120.u32[0];
          *(void *)&long long v122 = v119.u32[2];
          *((void *)&v122 + 1) = v119.u32[3];
          long long v123 = v122;
          *((void *)&v122 + 1) = v119.u32[1];
          uint64_t v124 = *((void *)&v123 + 1);
          v120.i16[0] = *(_WORD *)(v47 + 2 * v109);
          uint64_t v125 = v119.u32[0];
          uint64_t v126 = v123;
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v105, v82, _H15), (float16x8_t)0), v60));
          float16x8_t v128 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v127.i8);
          v120.i16[1] = *(_WORD *)(v47 + 2 * v108);
          v82.i16[0] = *(_WORD *)(v47 + 2 * v121);
          v82.i16[1] = *(_WORD *)(v47 + 2 * v120.u32[1]);
          v120.i16[2] = *(_WORD *)(v47 + 2 * v112);
          v82.i16[2] = *(_WORD *)(v47 + 2 * v120.u32[2]);
          uint32x4_t v129 = vmovl_high_u16(v127);
          v120.i16[3] = *(_WORD *)(v47 + 2 * v111);
          v82.i16[3] = *(_WORD *)(v47 + 2 * v120.u32[3]);
          v120.i16[4] = *(_WORD *)(v47 + 2 * v115);
          v128.i16[0] = *(_WORD *)(v47 + 2 * v128.u32[0]);
          v82.i16[4] = *(_WORD *)(v47 + 2 * v125);
          v128.i16[1] = *(_WORD *)(v47 + 2 * v128.u32[1]);
          v120.i16[5] = *(_WORD *)(v47 + 2 * v114);
          uint64_t result = (__int16 *)(v47 + 2 * v124);
          v82.i16[5] = *(_WORD *)(v47 + 2 * *((void *)&v122 + 1));
          v120.i16[6] = *(_WORD *)(v47 + 2 * v118);
          v128.i16[2] = *(_WORD *)(v47 + 2 * v128.u32[2]);
          v82.i16[6] = *(_WORD *)(v47 + 2 * v126);
          v120.i16[7] = *(_WORD *)(v47 + 2 * v116);
          v128.i16[3] = *(_WORD *)(v47 + 2 * v128.u32[3]);
          v128.i16[4] = *(_WORD *)(v47 + 2 * v129.u32[0]);
          v82.i16[7] = *result;
          v128.i16[5] = *(_WORD *)(v47 + 2 * v129.u32[1]);
          v128.i16[6] = *(_WORD *)(v47 + 2 * v129.u32[2]);
          v128.i16[7] = *(_WORD *)(v47 + 2 * v129.u32[3]);
          float16x8_t v130 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          *(int8x8_t *)v184.val[0].i8 = vqtbl2_s8(v184, v67);
          *(int8x8_t *)v75.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v128, (float16x8_t)0), v130)));
          v184.val[1] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v130)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v82, (float16x8_t)0), v130)));
          v75.i64[1] = v184.val[0].i64[0];
          _Q2.n128_u64[0] = (unint64_t)vqtbl2_s8(*(int8x16x2_t *)((char *)&v184 + 16), v68);
          *(int8x8_t *)&_Q2.n128_i8[8] = vqtbl2_s8(*(int8x16x2_t *)((char *)&v184 + 16), v69);
          *(int8x8_t *)&long long v131 = vqtbl2_s8(*(int8x16x2_t *)((char *)&v184 + 16), v72);
          _D3 = COERCE_DOUBLE(vqtbl2_s8(*(int8x16x2_t *)((char *)&v184 + 16), v73));
          *((double *)&v131 + 1) = _D3;
          *(__n128 *)uint64_t v71 = _Q2;
          *(_OWORD *)(v71 + 16) = v131;
          v71 += 32;
          v63 += 8;
        }
        while (v63 < (int)v8 - 7);
        unint64_t v132 = v8 & 0xFFFFFFF8;
        unint64_t v46 = v159;
        uint64_t v21 = v62;
        uint64_t v23 = v61;
        _S19 = v167;
        _S16 = v168;
        _S24 = v165;
        _S20 = v166;
        _S26 = v163;
        _S25 = v164;
        _S28 = v161;
        _S27 = v162;
        _S29 = v160;
      }
      unint64_t v133 = v8 - v132;
      if (v8 > v132)
      {
        uint64_t v134 = 0;
        uint64_t v135 = (char *)v70 + v173;
        uint64_t v136 = (char *)v70 + v174;
        uint16x8_t v137 = (char *)v70 + v175;
        float16x8_t v138 = (char *)v70 + v176;
        uint64_t v139 = v71 + v169;
        uint64_t v140 = v71 + v170;
        uint64_t v141 = v71 + v171;
        uint64_t v142 = v71 + v172;
        do
        {
          _Q2.n128_u8[0] = v138[v134];
          LOBYTE(_D3) = v137[v134];
          *(float *)&unsigned int v143 = (float)LODWORD(_D3);
          float v144 = _S18 * *(float *)&v143;
          LOBYTE(v143) = v136[v134];
          float v145 = _S18 * (float)v143;
          _H2 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S18 * (float)_Q2.n128_u32[0], 0.0), 8191.0)));
          __asm { FCVT            S3, H2 }
          _H2 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          __asm { FCVT            S4, H2 }
          _H2 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          __asm { FCVT            S5, H2 }
          if (*(short float *)(v47
                              + 2
                              * llroundf(fminf(fmaxf((float)((float)(_S19 * _S4) + (float)(*(float *)&_D3 * _S16))+ (float)(_S5 * _S20), 0.0), 8191.0))) <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H6, #0 }
            if (_NF) {
              _S6 = 0.0;
            }
            else {
              __asm { FCVT            S6, H6 }
            }
          }
          else
          {
            _S6 = 255.0;
          }
          char v153 = v135[v134];
          float v154 = (float)((float)(_S25 * _S4) + (float)(*(float *)&_D3 * _S24)) + (float)(_S5 * _S26);
          float v155 = (float)((float)(_S28 * _S4) + (float)(*(float *)&_D3 * _S27)) + (float)(_S5 * _S29);
          short float v156 = *(short float *)(v47 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          *(float *)&_D3 = fminf(fmaxf(v155, 0.0), 8191.0);
          LOWORD(_D3) = *(_WORD *)(v47 + 2 * llroundf(*(float *)&_D3));
          *(unsigned char *)(v142 + v134) = llroundf(_S6);
          if (v156 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H4, #0 }
            if (_NF) {
              _S4 = 0.0;
            }
            else {
              __asm { FCVT            S4, H4 }
            }
          }
          else
          {
            _S4 = 255.0;
          }
          *(unsigned char *)(v141 + v134) = llroundf(_S4);
          if (*(short float *)&_D3 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H3, #0 }
            if (_NF) {
              _Q2.n128_u32[0] = 0;
            }
            else {
              __asm { FCVT            S2, H3 }
            }
          }
          else
          {
            _Q2.n128_u32[0] = 1132396544;
          }
          *(unsigned char *)(v140 + v134) = llroundf(_Q2.n128_f32[0]);
          *(unsigned char *)(v139 + v134) = v153;
          v134 += 4;
          --v133;
        }
        while (v133);
      }
      v58 += v21;
      v57 += v23;
      ++v39;
    }
    while (v39 != v46);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    unint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = **((void **)result + 8);
    uint64_t v16 = **((void **)result + 17);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    float v26 = *(float *)(v13 + 104);
    uint64_t v27 = v13 + 164;
    uint64_t v28 = v13 + 16548;
    float v29 = (void *)*((void *)result + 16);
    uint64_t v30 = *((void *)result + 14);
    unint64_t v31 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v32 = *(void *)(result + 36);
    uint64_t v33 = *(unsigned __int8 *)(v13 + 161);
    uint64_t v34 = *(unsigned __int8 *)(v13 + 160);
    uint64_t v35 = *(unsigned __int8 *)(v13 + 159);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 158);
    uint64_t v36 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v37 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v38 = *v29 + v31 * v16;
    uint64_t v39 = *(unsigned __int8 *)(v13 + 155);
    uint64_t v40 = *(unsigned __int8 *)(v13 + 154);
    uint64_t v41 = v38 + 4 * v30;
    uint64_t v42 = *v14 + v15 * v11 + 4 * v32;
    do
    {
      if (v10)
      {
        uint64_t v43 = v10;
        uint64_t v44 = v42;
        uint64_t v45 = v41;
        do
        {
          LOBYTE(_S21) = *(unsigned char *)(v44 + v40);
          LOBYTE(_S22) = *(unsigned char *)(v44 + v39);
          LOBYTE(v4) = *(unsigned char *)(v44 + v37);
          _H21 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S21), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S22), 0.0), 8191.0)));
          _H24 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v4), 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H22
            FCVT            S22, H24
          }
          if (*(short float *)(v28
                              + 2
                              * llroundf(fminf(fmaxf((float)((float)(v19 * _S23) + (float)(_S21 * v18)) + (float)(_S22 * v20), 0.0), 8191.0))) <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H24, #0 }
            if (_NF) {
              _S24 = 0.0;
            }
            else {
              __asm { FCVT            S24, H24 }
            }
          }
          else
          {
            _S24 = 255.0;
          }
          char v58 = *(unsigned char *)(v44 + v36);
          float v59 = (float)((float)(v22 * _S23) + (float)(_S21 * v21)) + (float)(_S22 * v23);
          float v4 = v25 * _S23;
          float v60 = (float)(v4 + (float)(_S21 * v24)) + (float)(_S22 * v26);
          short float v61 = *(short float *)(v28 + 2 * llroundf(fminf(fmaxf(v59, 0.0), 8191.0)));
          short float v62 = *(short float *)(v28 + 2 * llroundf(fminf(fmaxf(v60, 0.0), 8191.0)));
          result[v45] = llroundf(_S24);
          if (v61 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H22, #0 }
            if (_NF) {
              _S22 = 0.0;
            }
            else {
              __asm { FCVT            S22, H22 }
            }
          }
          else
          {
            _S22 = 255.0;
          }
          *(unsigned char *)(v45 + v35) = llroundf(_S22);
          if (v62 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H21, #0 }
            if (_NF) {
              _S21 = 0.0;
            }
            else {
              __asm { FCVT            S21, H21 }
            }
          }
          else
          {
            _S21 = 255.0;
          }
          v44 += 4;
          *(unsigned char *)(v45 + v34) = llroundf(_S21);
          *(unsigned char *)(v45 + v33) = v58;
          v45 += 4;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      v41 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_BGRA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_BGRA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_BGRA_rgb_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7)
{
  char v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = *(void *)(a1 + 20);
  uint64_t v87 = *(void *)(a1 + 36);
  uint64_t v10 = *(void *)(a1 + 44);
  uint64_t v11 = *(void *)(a1 + 28);
  unint64_t v12 = *a1;
  unint64_t v13 = v11 * a2 / v12;
  uint64_t v14 = v13 + v10;
  unint64_t v15 = (v11 + v11 * a2) / v12;
  uint64_t v85 = v15 + v10;
  uint64_t v16 = *((void *)a1 + 15);
  uint64_t v86 = *((void *)a1 + 14);
  unint64_t v17 = *((void *)a1 + 13) * a2;
  uint64_t v18 = *((void *)a1 + 19);
  uint64_t v19 = **((void **)a1 + 8);
  uint64_t v84 = **((void **)a1 + 7);
  uint64_t v20 = **((void **)a1 + 17);
  uint64_t v83 = **((void **)a1 + 16);
  unsigned int v82 = *(_DWORD *)(v18 + 128);
  unsigned int v21 = *(_DWORD *)(v18 + 136);
  uint64_t v22 = *(unsigned __int8 *)(v18 + 154);
  v93[0] = *(unsigned char *)(v18 + 154);
  uint64_t v23 = *(unsigned __int8 *)(v18 + 155);
  v93[1] = *(unsigned char *)(v18 + 155);
  uint64_t v24 = *(unsigned __int8 *)(v18 + 156);
  v93[2] = *(unsigned char *)(v18 + 156);
  uint64_t v25 = *(unsigned __int8 *)(v18 + 157);
  v93[3] = *(unsigned char *)(v18 + 157);
  uint64_t v26 = *(unsigned __int8 *)(v18 + 158);
  v92[0] = *(unsigned char *)(v18 + 158);
  unint64_t v27 = v20 * (v17 / v12 + v16);
  uint64_t v28 = *(unsigned __int8 *)(v18 + 159);
  v92[1] = *(unsigned char *)(v18 + 159);
  uint64_t v29 = *(unsigned __int8 *)(v18 + 160);
  v92[2] = *(unsigned char *)(v18 + 160);
  uint64_t result = *(unsigned __int8 *)(v18 + 161);
  v92[3] = *(unsigned char *)(v18 + 161);
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  do
  {
    unsigned int v31 = 0;
    char v32 = v93[v8];
    char v33 = v92[v8];
    do
    {
      *((unsigned char *)&v90 + 8 * ((v7 + v31) >> 3) + v31) = v32 + 4 * v31;
      *(unsigned char *)(((unint64_t)&v88 + ((v33 + 4 * v31) & 0xF8)) | (v33 + 4 * (_BYTE)v31) & 7) = v7 + v31;
      ++v31;
    }
    while (v31 != 8);
    ++v8;
    v7 += 8;
  }
  while (v8 != 4);
  if (v15 != v13)
  {
    uint64_t v34 = 0;
    _S0 = (float)v21 / (float)v82;
    uint64_t v36 = v83 + v27 + 4 * v86;
    uint64_t v37 = v84 + v19 * v14 + 4 * v87;
    __asm { FCVT            H1, S0 }
    float16x8_t v43 = (float16x8_t)vdupq_n_s16(0x5BF8u);
    do
    {
      if ((int)v9 < 8)
      {
        unint64_t v64 = 0;
        uint64_t v51 = v36;
        uint64_t v50 = (uint64_t *)v37;
      }
      else
      {
        int v44 = 0;
        int8x8_t v45 = *(int8x8_t *)((char *)&v90 + 8);
        a7 = *(double *)&v90;
        int8x8_t v47 = *(int8x8_t *)((char *)&v91 + 8);
        int8x8_t v46 = (int8x8_t)v91;
        int8x8_t v49 = *(int8x8_t *)((char *)&v88 + 8);
        int8x8_t v48 = (int8x8_t)v88;
        uint64_t v50 = (uint64_t *)v37;
        uint64_t v51 = v36;
        int8x8_t v53 = *(int8x8_t *)((char *)&v89 + 8);
        int8x8_t v52 = (int8x8_t)v89;
        do
        {
          v94.val[0].i64[0] = *v50;
          uint64_t v54 = v50[1];
          v55.i64[0] = v50[2];
          uint64_t v56 = v50[3];
          v50 += 4;
          v94.val[0].i64[1] = v54;
          v55.i64[1] = v56;
          v94.val[1] = v55;
          int8x8_t v57 = vqtbl2_s8(v94, *(int8x8_t *)&a7);
          int8x8_t v58 = vqtbl2_s8(v94, v45);
          int8x8_t v59 = vqtbl2_s8(v94, v46);
          *(int8x8_t *)v60.i8 = vzip1_s8(v57, 0);
          v60.u64[1] = (unint64_t)vzip2_s8(v57, 0);
          *(int8x8_t *)v61.i8 = vzip1_s8(v58, 0);
          *(int8x8_t *)v62.i8 = vzip1_s8(v59, 0);
          v61.u64[1] = (unint64_t)vzip2_s8(v58, 0);
          v62.u64[1] = (unint64_t)vzip2_s8(v59, 0);
          *(int8x8_t *)v94.val[0].i8 = vqtbl2_s8(v94, v47);
          *(int8x8_t *)v55.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v62), _H1), (float16x8_t)0), v43)));
          v94.val[1] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v60), _H1), (float16x8_t)0), v43)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v61), _H1), (float16x8_t)0), v43)));
          v55.i64[1] = v94.val[0].i64[0];
          *(int8x8_t *)v94.val[0].i8 = vqtbl2_s8(*(int8x16x2_t *)((char *)&v94 + 16), v48);
          v94.val[0].u64[1] = (unint64_t)vqtbl2_s8(*(int8x16x2_t *)((char *)&v94 + 16), v49);
          *(int8x8_t *)&long long v63 = vqtbl2_s8(*(int8x16x2_t *)((char *)&v94 + 16), v52);
          *((int8x8_t *)&v63 + 1) = vqtbl2_s8(*(int8x16x2_t *)((char *)&v94 + 16), v53);
          *(int8x16_t *)uint64_t v51 = v94.val[0];
          *(_OWORD *)(v51 + 16) = v63;
          v51 += 32;
          v44 += 8;
        }
        while (v44 < (int)v9 - 7);
        unint64_t v64 = v9 & 0xFFFFFFF8;
      }
      _CF = v9 >= v64;
      unint64_t v65 = v9 - v64;
      if (v65 != 0 && _CF)
      {
        uint64_t v66 = 0;
        int8x8_t v67 = (char *)v50 + v25;
        int8x8_t v68 = (char *)v50 + v24;
        int8x8_t v69 = (char *)v50 + v23;
        char v70 = (char *)v50 + v22;
        uint64_t v71 = v51 + result;
        uint64_t v72 = v51 + v29;
        uint64_t v73 = v51 + v28;
        uint64_t v74 = v51 + v26;
        do
        {
          LOBYTE(a7) = v70[v66];
          *(float *)&a7 = _S0 * (float)LODWORD(a7);
          float v75 = 255.0;
          if (*(float *)&a7 <= 255.0)
          {
            float v75 = *(float *)&a7;
            if (*(float *)&a7 < 0.0) {
              float v75 = 0.0;
            }
          }
          LOBYTE(a7) = v69[v66];
          float v76 = (float)LODWORD(a7);
          LOBYTE(a7) = v68[v66];
          char v77 = v67[v66];
          float v78 = _S0 * v76;
          *(unsigned char *)(v74 + v66) = llroundf(v75);
          float v79 = 255.0;
          if (v78 <= 255.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          char v80 = llroundf(v79);
          float v81 = _S0 * (float)LODWORD(a7);
          *(unsigned char *)(v73 + v66) = v80;
          LODWORD(a7) = 1132396544;
          if (v81 <= 255.0)
          {
            *(float *)&a7 = v81;
            if (v81 < 0.0) {
              LODWORD(a7) = 0;
            }
          }
          *(unsigned char *)(v72 + v66) = llroundf(*(float *)&a7);
          *(unsigned char *)(v71 + v66) = v77;
          v66 += 4;
          --v65;
        }
        while (v65);
      }
      v37 += v19;
      v36 += v20;
      ++v34;
    }
    while (v34 != v85 - v14);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    int64x2_t v11 = (void *)*((void *)result + 16);
    int64x2_t v12 = (void *)*((void *)result + 7);
    uint64_t v13 = **((void **)result + 8);
    uint64_t v14 = **((void **)result + 17);
    float v15 = (float)*(unsigned int *)(v10 + 136);
    float v16 = v15 / (float)*(unsigned int *)(v10 + 128);
    uint64_t v17 = *((void *)result + 14);
    unint64_t v18 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v19 = *(void *)(result + 36);
    uint64_t v20 = *(unsigned __int8 *)(v10 + 161);
    uint64_t v21 = *(unsigned __int8 *)(v10 + 160);
    uint64_t v22 = *(unsigned __int8 *)(v10 + 159);
    uint64_t v23 = *(unsigned __int8 *)(v10 + 158);
    uint64_t v24 = *(unsigned __int8 *)(v10 + 157);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 156);
    uint64_t v25 = *v11 + v18 * v14;
    uint64_t v26 = *(unsigned __int8 *)(v10 + 155);
    uint64_t v27 = *(unsigned __int8 *)(v10 + 154);
    uint64_t v28 = v25 + 4 * v17;
    uint64_t v29 = *v12 + v13 * v8 + 4 * v19;
    do
    {
      if (v7)
      {
        uint64_t v30 = v7;
        uint64_t v31 = v29;
        uint64_t v32 = v28;
        do
        {
          LOBYTE(v15) = *(unsigned char *)(v31 + v27);
          float v33 = v16 * (float)LODWORD(v15);
          float v34 = 255.0;
          if (v33 <= 255.0)
          {
            float v34 = v33;
            if (v33 < 0.0) {
              float v34 = 0.0;
            }
          }
          LOBYTE(v33) = *(unsigned char *)(v31 + v26);
          float v35 = (float)LODWORD(v33);
          LOBYTE(v33) = result[v31];
          char v36 = *(unsigned char *)(v31 + v24);
          float v37 = v16 * v35;
          *(unsigned char *)(v32 + v23) = llroundf(v34);
          float v38 = 255.0;
          if (v37 <= 255.0)
          {
            float v38 = v37;
            if (v37 < 0.0) {
              float v38 = 0.0;
            }
          }
          char v39 = llroundf(v38);
          float v40 = v16 * (float)LODWORD(v33);
          *(unsigned char *)(v32 + v22) = v39;
          float v15 = 255.0;
          if (v40 <= 255.0)
          {
            float v15 = v40;
            if (v40 < 0.0) {
              float v15 = 0.0;
            }
          }
          v31 += 4;
          *(unsigned char *)(v32 + v21) = llroundf(v15);
          *(unsigned char *)(v32 + v20) = v36;
          v32 += 4;
          --v30;
        }
        while (v30);
      }
      v29 += v13;
      v28 += v14;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *((void *)result + 19);
    uint64_t v17 = (void *)*((void *)result + 7);
    uint64_t v18 = **((void **)result + 8);
    uint64_t v19 = **((void **)result + 17);
    float v20 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    float v21 = (float)LODWORD(a5);
    float v22 = *(float *)(v16 + 72);
    float v23 = *(float *)(v16 + 76);
    float v24 = *(float *)(v16 + 80);
    float v25 = *(float *)(v16 + 84);
    float v26 = *(float *)(v16 + 88);
    float v27 = *(float *)(v16 + 92);
    float v28 = *(float *)(v16 + 96);
    float v29 = *(float *)(v16 + 100);
    uint64_t v30 = v16 + 164;
    uint64_t v31 = v16 + 16548;
    uint64_t v32 = v16 + 32932;
    float v33 = *(float *)(v16 + 104);
    float v34 = *(float *)(v16 + 108);
    float v35 = *(float *)(v16 + 112);
    float v36 = *(float *)(v16 + 116);
    float v37 = *(float *)(v16 + 120);
    uint64_t v38 = *((void *)result + 14);
    unint64_t v39 = *((void *)result + 13) * a2 / v9 + *((void *)result + 15);
    uint64_t v40 = *(void *)(result + 36);
    uint64_t v41 = *(unsigned __int8 *)(v16 + 157);
    uint64_t v42 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v43 = **((void **)result + 16) + v39 * v19;
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v16 + 155);
    uint64_t v44 = *(unsigned __int8 *)(v16 + 154);
    int8x8_t v45 = (unsigned int *)(v43 + 16 * v38);
    uint64_t v46 = *v17 + v18 * v14 + 4 * v40;
    do
    {
      if (v13)
      {
        uint64_t v47 = v13;
        int8x8_t v48 = v45;
        uint64_t v49 = v46;
        do
        {
          LOBYTE(v5) = *(unsigned char *)(v49 + v44);
          LOBYTE(v6) = result[v49];
          LOBYTE(v7) = *(unsigned char *)(v49 + v42);
          _H29 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v5), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v6), 0.0), 8191.0)));
          unsigned int v57 = llroundf(fminf(fmaxf(v20 * (float)LODWORD(v7), 0.0), 8191.0));
          __asm { FCVT            S31, H30 }
          _H30 = *(_WORD *)(v30 + 2 * v57);
          __asm { FCVT            S9, H30 }
          float v61 = (float)((float)((float)(v35 * _S31) + (float)(v34 * _S29)) + (float)(v36 * _S9))
              + (float)(v37 * fmaxf(_S29, fmaxf(_S31, _S9)));
          float v62 = 8191.0;
          if (v61 <= 8191.0)
          {
            float v62 = v61;
            if (v61 < 0.0) {
              float v62 = 0.0;
            }
          }
          _H30 = *(_WORD *)(v31 + 2 * llroundf(v62));
          __asm { FCVT            S10, H30 }
          float v65 = _S29 * _S10;
          float v66 = _S31 * _S10;
          float v67 = _S9 * _S10;
          _H29 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v29 * v66) + (float)((float)(_S29 * _S10) * v28))+ (float)((float)(_S9 * _S10) * v33), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          float v70 = v21 + _S29;
          BOOL v71 = (float)(v21 + _S29) <= 1023.0;
          float v72 = 1023.0;
          if (v71)
          {
            float v72 = v70;
            if (v70 < 0.0) {
              float v72 = 0.0;
            }
          }
          _H9 = *(_WORD *)(v32
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v26 * v66) + (float)(v65 * v25)) + (float)(v67 * v27), 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          float v75 = v21 + _S9;
          BOOL v71 = (float)(v21 + _S9) <= 1023.0;
          float v76 = 1023.0;
          if (v71)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          _H30 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v23 * v66) + (float)(v65 * v22)) + (float)(v67 * v24), 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          float v79 = v21 + _S30;
          BOOL v71 = (float)(v21 + _S30) <= 1023.0;
          float v6 = 1023.0;
          if (v71)
          {
            float v6 = v79;
            if (v79 < 0.0) {
              float v6 = 0.0;
            }
          }
          float v7 = (double)*(unsigned __int8 *)(v49 + v41) * 3.0 / 255.0;
          unsigned int v80 = llroundf(v72);
          v49 += 4;
          unsigned int v81 = llroundf(v76) << 10;
          unsigned int v82 = llroundf(v6);
          float v5 = (float)llroundf(v7);
          if (v5 > 3.0) {
            float v5 = 3.0;
          }
          *v48++ = v81 | v80 | (llroundf(v5) << 30) | (v82 << 20);
          --v47;
        }
        while (v47);
      }
      v46 += v18;
      int8x8_t v45 = (unsigned int *)((char *)v45 + v19);
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *((void *)result + 19);
    uint64_t v17 = (void *)*((void *)result + 7);
    uint64_t v18 = **((void **)result + 8);
    uint64_t v19 = **((void **)result + 17);
    float v20 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    float v21 = (float)LODWORD(a5);
    float v22 = *(float *)(v16 + 72);
    float v23 = *(float *)(v16 + 76);
    float v24 = *(float *)(v16 + 80);
    float v25 = *(float *)(v16 + 84);
    float v26 = *(float *)(v16 + 88);
    float v27 = *(float *)(v16 + 92);
    float v28 = *(float *)(v16 + 96);
    float v29 = *(float *)(v16 + 100);
    float v30 = *(float *)(v16 + 104);
    uint64_t v31 = v16 + 164;
    uint64_t v32 = v16 + 16548;
    uint64_t v33 = *((void *)result + 14);
    unint64_t v34 = *((void *)result + 13) * a2 / v9 + *((void *)result + 15);
    uint64_t v35 = *(void *)(result + 36);
    uint64_t v36 = *(unsigned __int8 *)(v16 + 157);
    uint64_t v37 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v38 = **((void **)result + 16) + v34 * v19;
    uint64_t v39 = *(unsigned __int8 *)(v16 + 155);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v16 + 154);
    uint64_t v40 = (unsigned int *)(v38 + 16 * v33);
    uint64_t v41 = *v17 + v18 * v14 + 4 * v35;
    do
    {
      if (v13)
      {
        uint64_t v42 = v13;
        uint64_t v43 = v41;
        uint64_t v44 = v40;
        do
        {
          LOBYTE(v5) = result[v43];
          LOBYTE(v6) = *(unsigned char *)(v43 + v39);
          LOBYTE(v7) = *(unsigned char *)(v43 + v37);
          float v45 = v20 * (float)LODWORD(v7);
          _H25 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v5), 0.0), 8191.0)));
          unsigned int v47 = llroundf(fminf(fmaxf(v20 * (float)LODWORD(v6), 0.0), 8191.0));
          __asm { FCVT            S26, H25 }
          _H25 = *(_WORD *)(v31 + 2 * v47);
          __asm { FCVT            S27, H25 }
          _H25 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v45, 0.0), 8191.0)));
          __asm { FCVT            S28, H25 }
          _H25 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v29 * _S27) + (float)(_S26 * v28)) + (float)(_S28 * v30), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v59 = v21 + _S25;
          BOOL v60 = (float)(v21 + _S25) <= 1023.0;
          float v61 = 1023.0;
          if (v60)
          {
            float v61 = v59;
            if (v59 < 0.0) {
              float v61 = 0.0;
            }
          }
          _H29 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v26 * _S27) + (float)(_S26 * v25)) + (float)(_S28 * v27), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          float v64 = v21 + _S29;
          BOOL v60 = (float)(v21 + _S29) <= 1023.0;
          float v65 = 1023.0;
          if (v60)
          {
            float v65 = v64;
            if (v64 < 0.0) {
              float v65 = 0.0;
            }
          }
          _H26 = *(_WORD *)(v32
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v23 * _S27) + (float)(_S26 * v22)) + (float)(_S28 * v24), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          *(float *)&double v7 = v21 + _S26;
          BOOL v60 = (float)(v21 + _S26) <= 1023.0;
          float v6 = 1023.0;
          if (v60)
          {
            float v6 = *(float *)&v7;
            if (*(float *)&v7 < 0.0) {
              float v6 = 0.0;
            }
          }
          LOBYTE(v7) = *(unsigned char *)(v43 + v36);
          v43 += 4;
          double v7 = (double)*(unint64_t *)&v7 * 3.0 / 255.0;
          *(float *)&double v7 = v7;
          unsigned int v68 = llroundf(v61);
          unsigned int v69 = llroundf(v6);
          float v5 = (float)llroundf(*(float *)&v7);
          unsigned int v70 = llroundf(v65) << 10;
          if (v5 > 3.0) {
            float v5 = 3.0;
          }
          *v44++ = v70 | v68 | (llroundf(v5) << 30) | (v69 << 20);
          --v42;
        }
        while (v42);
      }
      v41 += v18;
      uint64_t v40 = (unsigned int *)((char *)v40 + v19);
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10)
{
  uint64_t v13 = *(void *)(result + 28);
  unint64_t v14 = *result;
  unint64_t v15 = v13 * a2 / v14;
  unint64_t v16 = (v13 + v13 * a2) / v14;
  if (v16 != v15)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(result + 20);
    unint64_t v19 = v15 + *(void *)(result + 44);
    unint64_t v20 = v16 - v15;
    uint64_t v21 = *((void *)result + 19);
    uint64_t v22 = **((void **)result + 8);
    uint64_t v23 = **((void **)result + 17);
    *(float *)&unsigned int v24 = (float)*(unsigned int *)(v21 + 136);
    float v25 = *(float *)&v24 / (float)*(unsigned int *)(v21 + 128);
    LOWORD(v24) = *(_WORD *)(v21 + 144);
    float v26 = (float)v24;
    unint64_t v27 = *((void *)result + 13) * a2 / v14 + *((void *)result + 15);
    uint64_t v28 = *(unsigned __int8 *)(v21 + 157);
    uint64_t v29 = *(unsigned __int8 *)(v21 + 156);
    uint64_t v30 = *(unsigned __int8 *)(v21 + 155);
    uint64_t v31 = *(unsigned __int8 *)(v21 + 154);
    uint64_t v32 = **((void **)result + 16) + v27 * v23 + 16 * *((void *)result + 14);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v22 * v19 + 4 * *(void *)(result + 36));
    do
    {
      if (v18)
      {
        uint64_t v33 = v18;
        unint64_t v34 = result;
        uint64_t v35 = (unsigned int *)v32;
        do
        {
          LOBYTE(a10) = v34[v31];
          LOBYTE(v10) = v34[v30];
          LOBYTE(v11) = v34[v29];
          float v36 = v25 * (float)LODWORD(a10);
          float v37 = (float)LODWORD(v10);
          LOBYTE(v12) = v34[v28];
          double v12 = (double)*(unint64_t *)&v12 * 3.0 / 255.0;
          float v38 = (float)(v25 * (float)LODWORD(v11)) + v26;
          if (v38 < 0.0) {
            float v39 = 0.0;
          }
          else {
            float v39 = v38;
          }
          BOOL v40 = v38 <= 1023.0;
          float v41 = v12;
          if (v40) {
            *(float *)&double v12 = v39;
          }
          else {
            *(float *)&double v12 = 1023.0;
          }
          unsigned int v42 = llroundf(*(float *)&v12);
          unsigned int v43 = llroundf(v41);
          float v44 = (float)(v25 * v37) + v26;
          if (v44 < 0.0) {
            float v11 = 0.0;
          }
          else {
            float v11 = v44;
          }
          if (v44 <= 1023.0) {
            float v45 = v11;
          }
          else {
            float v45 = 1023.0;
          }
          unsigned int v46 = llroundf(v45);
          float v47 = v36 + v26;
          if (v47 < 0.0) {
            float v48 = 0.0;
          }
          else {
            float v48 = v47;
          }
          unsigned int v49 = v46 << 10;
          if (v47 <= 1023.0) {
            float v50 = v48;
          }
          else {
            float v50 = 1023.0;
          }
          float v10 = (float)v43;
          unsigned int v51 = llroundf(v50);
          if (v10 <= 3.0) {
            a10 = v10;
          }
          else {
            a10 = 3.0;
          }
          v34 += 4;
          *v35++ = v49 | v42 | (llroundf(a10) << 30) | (v51 << 20);
          --v33;
        }
        while (v33);
      }
      result += v22;
      v32 += v23;
      ++v17;
    }
    while (v17 != v20);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    unint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = **((void **)result + 8);
    uint64_t v16 = **((void **)result + 17);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    uint64_t v26 = v13 + 164;
    uint64_t v27 = v13 + 16548;
    uint64_t v28 = v13 + 32932;
    float v29 = *(float *)(v13 + 104);
    float v30 = *(float *)(v13 + 108);
    float v31 = *(float *)(v13 + 112);
    float v32 = *(float *)(v13 + 116);
    float v33 = *(float *)(v13 + 120);
    uint64_t v34 = *((void *)result + 14);
    unint64_t v35 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v36 = *(void *)(result + 36);
    uint64_t v37 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v38 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v39 = **((void **)result + 16) + v35 * v16;
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 155);
    uint64_t v40 = *(unsigned __int8 *)(v13 + 154);
    float v41 = (_WORD *)(v39 + 8 * v34);
    uint64_t v42 = *v14 + v15 * v11 + 4 * v36;
    do
    {
      if (v10)
      {
        uint64_t v43 = v10;
        uint64_t v44 = v42;
        float v45 = v41;
        do
        {
          LOBYTE(_S25) = *(unsigned char *)(v44 + v40);
          LOBYTE(v3) = result[v44];
          LOBYTE(v4) = *(unsigned char *)(v44 + v38);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S25), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v4), 0.0), 8191.0)));
          __asm { FCVT            S28, H27 }
          float v56 = (float)((float)((float)(v31 * _S26) + (float)(v30 * _S25)) + (float)(v32 * _S28))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S26, _S28)));
          float v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            float v57 = v56;
            if (v56 < 0.0) {
              float v57 = 0.0;
            }
          }
          _H27 = *(_WORD *)(v27 + 2 * llroundf(v57));
          __asm { FCVT            S29, H27 }
          float v60 = _S25 * _S29;
          float v61 = _S26 * _S29;
          float v62 = _S28 * _S29;
          LOWORD(_S29) = *(_WORD *)(v28
                                  + 2
                                  * llroundf(fminf(fmaxf((float)((float)(v19 * v61) + (float)(v60 * v18))+ (float)((float)(_S28 * _S29) * v20), 0.0), 8191.0)));
          __asm { FCVT            S30, H29 }
          float v64 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCMP            H29, #0 }
            float v64 = _S30;
            if (_NF) {
              float v64 = 0.0;
            }
          }
          __int16 v66 = *(unsigned __int8 *)(v44 + v37);
          float v67 = (float)((float)(v22 * v61) + (float)(v60 * v21)) + (float)(v62 * v23);
          float v68 = (float)((float)(v25 * v61) + (float)(v60 * v24)) + (float)(v62 * v29);
          _H26 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          _S25 = fminf(fmaxf(v68, 0.0), 8191.0);
          LOWORD(_S25) = *(_WORD *)(v28 + 2 * llroundf(_S25));
          __asm { FCVT            S29, H26 }
          _WORD *v45 = llroundf(v64);
          float v4 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCMP            H26, #0 }
            float v4 = _S29;
            if (_NF) {
              float v4 = 0.0;
            }
          }
          __asm { FCVT            S28, H25 }
          v45[1] = llroundf(v4);
          float v3 = 65535.0;
          if (_S28 <= 65535.0)
          {
            __asm { FCMP            H25, #0 }
            float v3 = _S28;
            if (_NF) {
              float v3 = 0.0;
            }
          }
          v44 += 4;
          v45[2] = llroundf(v3);
          v45[3] = v66 | (v66 << 8);
          v45 += 4;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      float v41 = (_WORD *)((char *)v41 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    unint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = **((void **)result + 8);
    uint64_t v16 = **((void **)result + 17);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    float v26 = *(float *)(v13 + 104);
    uint64_t v27 = v13 + 164;
    uint64_t v28 = v13 + 16548;
    uint64_t v29 = *((void *)result + 14);
    unint64_t v30 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v31 = *(void *)(result + 36);
    uint64_t v32 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v33 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v34 = **((void **)result + 16) + v30 * v16;
    uint64_t v35 = *(unsigned __int8 *)(v13 + 155);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 154);
    uint64_t v36 = (_WORD *)(v34 + 8 * v29);
    uint64_t v37 = *v14 + v15 * v11 + 4 * v31;
    do
    {
      if (v10)
      {
        uint64_t v38 = v10;
        uint64_t v39 = v37;
        uint64_t v40 = v36;
        do
        {
          LOBYTE(_S21) = result[v39];
          LOBYTE(v3) = *(unsigned char *)(v39 + v35);
          LOBYTE(v4) = *(unsigned char *)(v39 + v33);
          _H21 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S21), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H23 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v4), 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          _H25 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * _S22) + (float)(_S21 * v18)) + (float)(_S23 * v20), 0.0), 8191.0)));
          __asm { FCVT            S26, H25 }
          float v53 = 65535.0;
          if (_S26 <= 65535.0)
          {
            __asm { FCMP            H25, #0 }
            float v53 = _S26;
            if (_NF) {
              float v53 = 0.0;
            }
          }
          __int16 v55 = *(unsigned __int8 *)(v39 + v32);
          float v56 = (float)((float)(v22 * _S22) + (float)(_S21 * v21)) + (float)(_S23 * v23);
          float v57 = (float)((float)(v25 * _S22) + (float)(_S21 * v24)) + (float)(_S23 * v26);
          _H22 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v56, 0.0), 8191.0)));
          _S21 = fminf(fmaxf(v57, 0.0), 8191.0);
          LOWORD(_S21) = *(_WORD *)(v28 + 2 * llroundf(_S21));
          __asm { FCVT            S25, H22 }
          _WORD *v40 = llroundf(v53);
          float v4 = 65535.0;
          if (_S25 <= 65535.0)
          {
            __asm { FCMP            H22, #0 }
            float v4 = _S25;
            if (_NF) {
              float v4 = 0.0;
            }
          }
          __asm { FCVT            S24, H21 }
          v40[1] = llroundf(v4);
          float v3 = 65535.0;
          if (_S24 <= 65535.0)
          {
            __asm { FCMP            H21, #0 }
            float v3 = _S24;
            if (_NF) {
              float v3 = 0.0;
            }
          }
          v39 += 4;
          v40[2] = llroundf(v3);
          v40[3] = v55 | (v55 << 8);
          v40 += 4;
          --v38;
        }
        while (v38);
      }
      v37 += v15;
      uint64_t v36 = (_WORD *)((char *)v36 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = **((void **)result + 8);
    uint64_t v15 = **((void **)result + 17);
    float v16 = (float)*(unsigned int *)(v13 + 136) / (float)*(unsigned int *)(v13 + 128);
    unint64_t v17 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v18 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v19 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v20 = *(unsigned __int8 *)(v13 + 155);
    uint64_t v21 = *(unsigned __int8 *)(v13 + 154);
    uint64_t v22 = **((void **)result + 16) + v17 * v15 + 8 * *((void *)result + 14);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v14 * v11 + 4 * *(void *)(result + 36));
    do
    {
      if (v10)
      {
        uint64_t v23 = v10;
        uint64_t v24 = result;
        uint64_t v25 = (_WORD *)v22;
        do
        {
          LOBYTE(a5) = v24[v21];
          float v26 = v16 * (float)LODWORD(a5);
          float v27 = 65535.0;
          if (v26 <= 65535.0)
          {
            float v27 = v26;
            if (v26 < 0.0) {
              float v27 = 0.0;
            }
          }
          LOBYTE(v26) = v24[v20];
          float v28 = (float)LODWORD(v26);
          LOBYTE(v26) = v24[v19];
          __int16 v29 = v24[v18];
          float v30 = v16 * v28;
          _WORD *v25 = llroundf(v27);
          float v31 = 65535.0;
          if (v30 <= 65535.0)
          {
            float v31 = v30;
            if (v30 < 0.0) {
              float v31 = 0.0;
            }
          }
          float v32 = v16 * (float)LODWORD(v26);
          v25[1] = llroundf(v31);
          a5 = 65535.0;
          if (v32 <= 65535.0)
          {
            a5 = v32;
            if (v32 < 0.0) {
              a5 = 0.0;
            }
          }
          v24 += 4;
          v25[2] = llroundf(a5);
          v25[3] = v29 | (v29 << 8);
          v25 += 4;
          --v23;
        }
        while (v23);
      }
      result += v14;
      v22 += v15;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = **((void **)result + 8);
    uint64_t v16 = **((void **)result + 17);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    uint64_t v26 = v13 + 164;
    uint64_t v27 = v13 + 16548;
    uint64_t v28 = v13 + 32932;
    float v29 = *(float *)(v13 + 104);
    float v30 = *(float *)(v13 + 108);
    float v31 = *(float *)(v13 + 112);
    float v32 = *(float *)(v13 + 116);
    float v33 = *(float *)(v13 + 120);
    uint64_t v34 = *((void *)result + 14);
    unint64_t v35 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v36 = *(void *)(result + 36);
    uint64_t v37 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v38 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v39 = **((void **)result + 16) + v35 * v16;
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 155);
    uint64_t v40 = *(unsigned __int8 *)(v13 + 154);
    float v41 = (_WORD *)(v39 + 8 * v34);
    uint64_t v42 = *v14 + v15 * v11 + 4 * v36;
    do
    {
      if (v10)
      {
        uint64_t v43 = v10;
        uint64_t v44 = v42;
        float v45 = v41;
        do
        {
          LOBYTE(v2) = *(unsigned char *)(v44 + v40);
          LOBYTE(v3) = result[v44];
          LOBYTE(_S27) = *(unsigned char *)(v44 + v38);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v2), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          unsigned int v53 = llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S27), 0.0), 8191.0));
          __asm { FCVT            S27, H26 }
          _H26 = *(_WORD *)(v26 + 2 * v53);
          __asm { FCVT            S29, H26 }
          float v57 = (float)((float)((float)(v31 * _S27) + (float)(v30 * _S25)) + (float)(v32 * _S29))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S27, _S29)));
          float v58 = 8191.0;
          if (v57 <= 8191.0)
          {
            float v58 = v57;
            if (v57 < 0.0) {
              float v58 = 0.0;
            }
          }
          _H26 = *(_WORD *)(v27 + 2 * llroundf(v58));
          __asm { FCVT            S30, H26 }
          float v61 = _S25 * _S30;
          float v62 = _S27 * _S30;
          _S27 = _S29 * _S30;
          _H29 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * v62) + (float)((float)(_S25 * _S30) * v18))+ (float)((float)(_S29 * _S30) * v20), 0.0), 8191.0)));
          __asm { FCVT            S30, H29 }
          float v2 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCMP            H29, #0 }
            float v2 = _S30;
            if (_NF) {
              float v2 = 0.0;
            }
          }
          _H30 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v22 * v62) + (float)(v61 * v21)) + (float)(_S27 * v23), 0.0), 8191.0)));
          __asm { FCVT            S31, H30 }
          float v68 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H30, #0 }
            float v68 = _S31;
            if (_NF) {
              float v68 = 0.0;
            }
          }
          LOWORD(_S27) = *(_WORD *)(v28
                                  + 2
                                  * llroundf(fminf(fmaxf((float)((float)(v25 * v62) + (float)(v61 * v24)) + (float)(_S27 * v29), 0.0), 8191.0)));
          __asm { FCVT            S28, H27 }
          float v3 = 65535.0;
          if (_S28 <= 65535.0)
          {
            __asm { FCMP            H27, #0 }
            float v3 = _S28;
            if (_NF) {
              float v3 = 0.0;
            }
          }
          int v71 = *(unsigned __int8 *)(v44 + v37);
          v44 += 4;
          _WORD *v45 = __rev16(v71 | (v71 << 8));
          v45[1] = __rev16(llroundf(v2));
          v45[2] = __rev16(llroundf(v68));
          v45[3] = __rev16(llroundf(v3));
          v45 += 4;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      float v41 = (_WORD *)((char *)v41 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = **((void **)result + 8);
    uint64_t v16 = **((void **)result + 17);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    float v26 = *(float *)(v13 + 104);
    uint64_t v27 = v13 + 164;
    uint64_t v28 = v13 + 16548;
    uint64_t v29 = *((void *)result + 14);
    unint64_t v30 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v31 = *(void *)(result + 36);
    uint64_t v32 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v33 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v34 = **((void **)result + 16) + v30 * v16;
    uint64_t v35 = *(unsigned __int8 *)(v13 + 155);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 154);
    uint64_t v36 = (_WORD *)(v34 + 8 * v29);
    uint64_t v37 = *v14 + v15 * v11 + 4 * v31;
    do
    {
      if (v10)
      {
        uint64_t v38 = v10;
        uint64_t v39 = v37;
        uint64_t v40 = v36;
        do
        {
          LOBYTE(v2) = result[v39];
          LOBYTE(v3) = *(unsigned char *)(v39 + v35);
          LOBYTE(_S23) = *(unsigned char *)(v39 + v33);
          float v41 = v17 * (float)LODWORD(_S23);
          _H21 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v2), 0.0), 8191.0)));
          unsigned int v43 = llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0));
          __asm { FCVT            S22, H21 }
          _H21 = *(_WORD *)(v27 + 2 * v43);
          __asm { FCVT            S23, H21 }
          _H21 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v41, 0.0), 8191.0)));
          __asm { FCVT            S24, H21 }
          _H25 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * _S23) + (float)(_S22 * v18)) + (float)(_S24 * v20), 0.0), 8191.0)));
          __asm { FCVT            S26, H25 }
          float v2 = 65535.0;
          if (_S26 <= 65535.0)
          {
            __asm { FCMP            H25, #0 }
            float v2 = _S26;
            if (_NF) {
              float v2 = 0.0;
            }
          }
          _H26 = *(_WORD *)(v28
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v22 * _S23) + (float)(_S22 * v21)) + (float)(_S24 * v23), 0.0), 8191.0)));
          __asm { FCVT            S27, H26 }
          float v58 = 65535.0;
          if (_S27 <= 65535.0)
          {
            __asm { FCMP            H26, #0 }
            float v58 = _S27;
            if (_NF) {
              float v58 = 0.0;
            }
          }
          _S23 = v25 * _S23;
          LOWORD(_S23) = *(_WORD *)(v28
                                  + 2
                                  * llroundf(fminf(fmaxf((float)(_S23 + (float)(_S22 * v24)) + (float)(_S24 * v26), 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          float v3 = 65535.0;
          if (_S24 <= 65535.0)
          {
            __asm { FCMP            H23, #0 }
            float v3 = _S24;
            if (_NF) {
              float v3 = 0.0;
            }
          }
          int v61 = *(unsigned __int8 *)(v39 + v32);
          v39 += 4;
          _WORD *v40 = __rev16(v61 | (v61 << 8));
          v40[1] = __rev16(llroundf(v2));
          v40[2] = __rev16(llroundf(v58));
          v40[3] = __rev16(llroundf(v3));
          v40 += 4;
          --v38;
        }
        while (v38);
      }
      v37 += v15;
      uint64_t v36 = (_WORD *)((char *)v36 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = **((void **)result + 8);
    uint64_t v15 = **((void **)result + 17);
    float v16 = (float)*(unsigned int *)(v13 + 136) / (float)*(unsigned int *)(v13 + 128);
    unint64_t v17 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v18 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v19 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v20 = *(unsigned __int8 *)(v13 + 155);
    uint64_t v21 = *(unsigned __int8 *)(v13 + 154);
    uint64_t v22 = **((void **)result + 16) + v17 * v15 + 8 * *((void *)result + 14);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v14 * v11 + 4 * *(void *)(result + 36));
    do
    {
      if (v10)
      {
        uint64_t v23 = v10;
        uint64_t v24 = result;
        uint64_t v25 = (_WORD *)v22;
        do
        {
          LOBYTE(a5) = v24[v21];
          float v26 = v16 * (float)LODWORD(a5);
          a5 = 65535.0;
          if (v26 <= 65535.0)
          {
            a5 = v26;
            if (v26 < 0.0) {
              a5 = 0.0;
            }
          }
          LOBYTE(v26) = v24[v20];
          float v27 = v16 * (float)LODWORD(v26);
          float v28 = 65535.0;
          if (v27 <= 65535.0)
          {
            float v28 = v27;
            if (v27 < 0.0) {
              float v28 = 0.0;
            }
          }
          LOBYTE(v27) = v24[v19];
          float v29 = v16 * (float)LODWORD(v27);
          float v30 = 65535.0;
          if (v29 <= 65535.0)
          {
            float v30 = v29;
            if (v29 < 0.0) {
              float v30 = 0.0;
            }
          }
          int v31 = v24[v18];
          v24 += 4;
          _WORD *v25 = __rev16(v31 | (v31 << 8));
          v25[1] = __rev16(llroundf(a5));
          v25[2] = __rev16(llroundf(v28));
          v25[3] = __rev16(llroundf(v30));
          v25 += 4;
          --v23;
        }
        while (v23);
      }
      result += v14;
      v22 += v15;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGhA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *(void *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 36);
  uint64_t v5 = *(void *)(a1 + 44);
  uint64_t v6 = *(void *)(a1 + 28);
  unint64_t v7 = *a1;
  unint64_t v8 = v6 * a2 / v7;
  uint64_t v9 = v8 + v5;
  unint64_t v10 = (v6 + v6 * a2) / v7;
  uint64_t v11 = v10 + v5;
  uint64_t v12 = *((void *)a1 + 14);
  unint64_t v13 = *((void *)a1 + 13) * a2;
  uint64_t v14 = *((void *)a1 + 19);
  uint64_t v15 = *((void *)a1 + 15);
  uint64_t v16 = **((void **)a1 + 8);
  uint64_t v17 = **((void **)a1 + 7);
  uint64_t v18 = **((void **)a1 + 17);
  uint64_t v19 = **((void **)a1 + 16);
  uint64_t result = *(unsigned int *)(v14 + 128);
  uint64_t v172 = *(unsigned __int8 *)(v14 + 154);
  v192[0] = *(unsigned char *)(v14 + 154);
  uint64_t v171 = *(unsigned __int8 *)(v14 + 155);
  v192[1] = *(unsigned char *)(v14 + 155);
  uint64_t v170 = *(unsigned __int8 *)(v14 + 156);
  v192[2] = *(unsigned char *)(v14 + 156);
  uint64_t v169 = *(unsigned __int8 *)(v14 + 157);
  v192[3] = *(unsigned char *)(v14 + 157);
  _S20 = *(float *)(v14 + 72);
  _S23 = *(float *)(v14 + 76);
  _S24 = *(float *)(v14 + 80);
  _S25 = *(float *)(v14 + 84);
  uint64_t v25 = v13 / v7 + v15;
  uint64_t v26 = v16 * v9;
  _S26 = *(float *)(v14 + 88);
  _S27 = *(float *)(v14 + 92);
  uint64_t v29 = v18 * v25;
  _S28 = *(float *)(v14 + 96);
  _S8 = *(float *)(v14 + 100);
  _S9 = *(float *)(v14 + 104);
  float v189 = *(float *)(v14 + 108);
  float v188 = *(float *)(v14 + 112);
  float v187 = *(float *)(v14 + 116);
  float v186 = *(float *)(v14 + 120);
  long long v190 = 0u;
  long long v191 = 0u;
  do
  {
    unsigned int v33 = 0;
    char v34 = v192[v2];
    do
    {
      *((unsigned char *)&v190 + 8 * (((_BYTE)v2 + (v33 >> 3)) & 0x1F) + v33) = v34 + 4 * v33;
      ++v33;
    }
    while (v33 != 8);
    ++v2;
  }
  while (v2 != 4);
  if (v10 != v8)
  {
    uint64_t v35 = 0;
    _S22 = 8191.0 / (float)result;
    _S0 = v189;
    __asm { FCVT            H10, S0 }
    _S0 = v188;
    __asm { FCVT            H11, S0 }
    uint64_t v45 = v11 - v9;
    _S0 = v187;
    __asm { FCVT            H12, S0 }
    _S0 = v186;
    __asm
    {
      FCVT            H13, S0
      FCVT            H14, S20
    }
    uint64_t v51 = v14 + 16548;
    uint64_t result = v14 + 32932;
    uint64_t v52 = v14 + 164;
    __asm
    {
      FCVT            H15, S23
      FCVT            H0, S24
      FCVT            H1, S25
      FCVT            H2, S26
      FCVT            H3, S27
      FCVT            H4, S28
      FCVT            H6, S8
      FCVT            H7, S9
    }
    uint64_t v61 = v19 + v29 + 8 * v12;
    uint64_t v62 = v17 + v26 + 4 * v4;
    __asm { FCVT            H5, S22 }
    v64.i64[0] = 0x9000900090009000;
    v64.i64[1] = 0x9000900090009000;
    short float v184 = _H7;
    short float v185 = _H10;
    short float v182 = _H12;
    short float v183 = _H11;
    short float v180 = _H14;
    short float v181 = _H13;
    short float v178 = _H0;
    short float v179 = _H15;
    short float v176 = _H2;
    short float v177 = _H1;
    short float v174 = _H4;
    short float v175 = _H3;
    short float v173 = _H6;
    float v167 = _S23;
    float v168 = _S20;
    float v165 = _S25;
    float v166 = _S24;
    float v163 = _S27;
    float v164 = _S26;
    float v161 = _S8;
    float v162 = _S28;
    float v160 = _S9;
    do
    {
      if ((int)v3 < 8)
      {
        unint64_t v134 = 0;
        unsigned int v69 = (__int16 *)v61;
        float v68 = (uint64_t *)v62;
      }
      else
      {
        int v65 = 0;
        int8x8_t v67 = *(int8x8_t *)((char *)&v190 + 8);
        int8x8_t v66 = (int8x8_t)v190;
        float v68 = (uint64_t *)v62;
        unsigned int v69 = (__int16 *)v61;
        int8x8_t v71 = *(int8x8_t *)((char *)&v191 + 8);
        int8x8_t v70 = (int8x8_t)v191;
        short float v72 = _H6;
        do
        {
          v193.val[0].i64[0] = *v68;
          uint64_t v73 = v68[1];
          v74.i64[0] = v68[2];
          uint64_t v75 = v68[3];
          v68 += 4;
          v193.val[0].i64[1] = v73;
          v74.i64[1] = v75;
          v193.val[1] = v74;
          int8x8_t v76 = vqtbl2_s8(v193, v66);
          int8x8_t v77 = vqtbl2_s8(v193, v67);
          *(int8x8_t *)v78.i8 = vzip1_s8(v76, 0);
          v78.u64[1] = (unint64_t)vzip2_s8(v76, 0);
          *(int8x8_t *)v79.i8 = vzip1_s8(v77, 0);
          v79.u64[1] = (unint64_t)vzip2_s8(v77, 0);
          int8x8_t v80 = vqtbl2_s8(v193, v70);
          *(int8x8_t *)v81.i8 = vzip1_s8(v80, 0);
          v81.u64[1] = (unint64_t)vzip2_s8(v80, 0);
          float16x8_t v82 = vmulq_n_f16(vcvtq_f16_u16(v79), _H5);
          float16x8_t v83 = vmulq_n_f16(vcvtq_f16_u16(v81), _H5);
          uint16x8_t v84 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v78), _H5), (float16x8_t)0), v64));
          uint32x4_t v85 = vmovl_high_u16(v84);
          *(void *)&long long v86 = v85.u32[2];
          *((void *)&v86 + 1) = v85.u32[3];
          long long v87 = v86;
          uint32x4_t v88 = vmovl_u16(*(uint16x4_t *)v84.i8);
          *(void *)&long long v86 = v85.u32[0];
          *((void *)&v86 + 1) = v85.u32[1];
          long long v89 = v86;
          *((void *)&v86 + 1) = v88.u32[3];
          uint64_t v90 = v88.u32[2];
          uint64_t v91 = *((void *)&v89 + 1);
          v78.i16[0] = *(_WORD *)(v52 + 2 * v88.u32[0]);
          float16x8_t v92 = (__int16 *)(v52 + 2 * v89);
          uint64_t v93 = *((void *)&v87 + 1);
          int8x16x2_t v94 = (__int16 *)(v52 + 2 * v88.u32[1]);
          uint16x8_t v95 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v82, (float16x8_t)0), v64));
          uint64_t v96 = (__int16 *)(v52 + 2 * *((void *)&v86 + 1));
          float16x8_t v97 = (float16x8_t)vmovl_high_u16(v95);
          *(void *)&long long v86 = v97.u32[2];
          *((void *)&v86 + 1) = v97.u32[3];
          long long v98 = v86;
          *(void *)&long long v86 = v97.u32[0];
          *((void *)&v87 + 1) = v97.u32[1];
          uint32x4_t v99 = vmovl_u16(*(uint16x4_t *)v95.i8);
          v97.i16[0] = *(_WORD *)(v52 + 2 * v99.u32[0]);
          uint16x8_t v100 = (__int16 *)(v52 + 2 * v93);
          uint32x4_t v101 = (__int16 *)(v52 + 2 * v99.u32[3]);
          v78.i16[1] = *v94;
          v78.i16[2] = *(_WORD *)(v52 + 2 * v90);
          v97.i16[1] = *(_WORD *)(v52 + 2 * v99.u32[1]);
          v97.i16[2] = *(_WORD *)(v52 + 2 * v99.u32[2]);
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v83, (float16x8_t)0), v64));
          v78.i16[3] = *v96;
          uint32x4_t v103 = vmovl_high_u16(v102);
          float16x8_t v104 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v102.i8);
          v97.i16[3] = *v101;
          v78.i16[4] = *v92;
          v104.i16[0] = *(_WORD *)(v52 + 2 * v104.u32[0]);
          v97.i16[4] = *(_WORD *)(v52 + 2 * v86);
          v78.i16[5] = *(_WORD *)(v52 + 2 * v91);
          v97.i16[5] = *(_WORD *)(v52 + 2 * *((void *)&v87 + 1));
          v78.i16[6] = *(_WORD *)(v52 + 2 * v87);
          v104.i16[1] = *(_WORD *)(v52 + 2 * v104.u32[1]);
          v97.i16[6] = *(_WORD *)(v52 + 2 * v98);
          v104.i16[2] = *(_WORD *)(v52 + 2 * v104.u32[2]);
          v104.i16[3] = *(_WORD *)(v52 + 2 * v104.u32[3]);
          v78.i16[7] = *v100;
          v104.i16[4] = *(_WORD *)(v52 + 2 * v103.u32[0]);
          v104.i16[5] = *(_WORD *)(v52 + 2 * v103.u32[1]);
          v97.i16[7] = *(_WORD *)(v52 + 2 * *((void *)&v98 + 1));
          v104.i16[6] = *(_WORD *)(v52 + 2 * v103.u32[2]);
          v104.i16[7] = *(_WORD *)(v52 + 2 * v103.u32[3]);
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v78, v185), v97, _H11), v104, _H12), vmaxq_f16(vmaxq_f16((float16x8_t)v78, v97), v104), _H13), (float16x8_t)0), v64));
          uint32x4_t v106 = vmovl_high_u16(v105);
          uint32x4_t v107 = vmovl_u16(*(uint16x4_t *)v105.i8);
          v108.i16[0] = *(_WORD *)(v51 + 2 * v107.u32[0]);
          v108.i16[1] = *(_WORD *)(v51 + 2 * v107.u32[1]);
          v108.i16[2] = *(_WORD *)(v51 + 2 * v107.u32[2]);
          v108.i16[3] = *(_WORD *)(v51 + 2 * v107.u32[3]);
          v108.i16[4] = *(_WORD *)(v51 + 2 * v106.u32[0]);
          v108.i16[5] = *(_WORD *)(v51 + 2 * v106.u32[1]);
          v108.i16[6] = *(_WORD *)(v51 + 2 * v106.u32[2]);
          *(int8x8_t *)v193.val[0].i8 = vqtbl2_s8(v193, v71);
          v108.i16[7] = *(_WORD *)(v51 + 2 * v106.u32[3]);
          float16x8_t v109 = vmulq_f16((float16x8_t)v78, v108);
          v193.val[1] = (int8x16_t)vmulq_f16(v97, v108);
          float16x8_t v110 = vmulq_f16(v104, v108);
          float16x8_t v111 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v109, _H1), (float16x8_t)v193.val[1], _H2), v110, _H3);
          float16x8_t v112 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v110, v184), (float16x8_t)v193.val[1], v72), v109, _H4);
          uint16x8_t v113 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v109, _H14), (float16x8_t)v193.val[1], _H15), v110, _H0), (float16x8_t)0), v64));
          uint32x4_t v114 = vmovl_high_u16(v113);
          uint32x4_t v115 = vmovl_u16(*(uint16x4_t *)v113.i8);
          v193.val[1].i16[0] = *(_WORD *)(result + 2 * v115.u32[0]);
          uint64_t v116 = (__int16 *)(result + 2 * v115.u32[3]);
          uint16x8_t v117 = (__int16 *)(result + 2 * v114.u32[0]);
          uint64_t v118 = (__int16 *)(result + 2 * v114.u32[1]);
          uint32x4_t v119 = (__int16 *)(result + 2 * v114.u32[2]);
          float16x8_t v120 = (__int16 *)(result + 2 * v114.u32[3]);
          v193.val[1].i16[1] = *(_WORD *)(result + 2 * v115.u32[1]);
          v193.val[1].i16[2] = *(_WORD *)(result + 2 * v115.u32[2]);
          uint16x8_t v121 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v111, (float16x8_t)0), v64));
          uint32x4_t v122 = vmovl_high_u16(v121);
          v193.val[1].i16[3] = *v116;
          *(void *)&long long v86 = v122.u32[2];
          *((void *)&v86 + 1) = v122.u32[3];
          uint32x4_t v123 = vmovl_u16(*(uint16x4_t *)v121.i8);
          v193.val[1].i16[4] = *v117;
          v193.val[1].i16[5] = *v118;
          v193.val[1].i16[6] = *v119;
          v193.val[1].i16[7] = *v120;
          uint64_t v124 = (__int16 *)(result + 2 * v122.u32[0]);
          v74.i16[0] = *(_WORD *)(result + 2 * v123.u32[0]);
          uint64_t v125 = (__int16 *)(result + 2 * v122.u32[1]);
          v74.i16[1] = *(_WORD *)(result + 2 * v123.u32[1]);
          v74.i16[2] = *(_WORD *)(result + 2 * v123.u32[2]);
          v74.i16[3] = *(_WORD *)(result + 2 * v123.u32[3]);
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v112, (float16x8_t)0), v64));
          uint32x4_t v127 = vmovl_high_u16(v126);
          v74.i16[4] = *v124;
          uint16x8_t v128 = (uint16x8_t)vmovl_u16(*(uint16x4_t *)v126.i8);
          v74.i16[5] = *v125;
          v74.i16[6] = *(_WORD *)(result + 2 * v86);
          v74.i16[7] = *(_WORD *)(result + 2 * *((void *)&v86 + 1));
          LOWORD(v75) = *(_WORD *)(result + 2 * v128.u32[0]);
          WORD1(v75) = *(_WORD *)(result + 2 * v128.u32[1]);
          WORD2(v75) = *(_WORD *)(result + 2 * v128.u32[2]);
          HIWORD(v75) = *(_WORD *)(result + 2 * v128.u32[3]);
          __int16 v129 = *(_WORD *)(result + 2 * v127.u32[0]);
          __int16 v130 = *(_WORD *)(result + 2 * v127.u32[1]);
          __int16 v131 = *(_WORD *)(result + 2 * v127.u32[2]);
          *(int8x8_t *)v128.i8 = vzip1_s8(*(int8x8_t *)v193.val[0].i8, 0);
          v128.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v193.val[0].i8, 0);
          __int16 v132 = *(_WORD *)(result + 2 * v127.u32[3]);
          float16x8_t v133 = vmulq_f16(vcvtq_f16_u16(v128), (float16x8_t)vdupq_n_s16(0x1C04u));
          vst4q_s16(v69, *(int16x8x4_t *)v193.val[1].i8);
          v69 += 32;
          v65 += 8;
        }
        while (v65 < (int)v3 - 7);
        unint64_t v134 = v3 & 0xFFFFFFF8;
        _S23 = v167;
        _S20 = v168;
        _S25 = v165;
        _S24 = v166;
        _S27 = v163;
        _S26 = v164;
        _S8 = v161;
        _S28 = v162;
        _S9 = v160;
      }
      _CF = v3 >= v134;
      unint64_t v135 = v3 - v134;
      if (v135 != 0 && _CF)
      {
        uint64_t v136 = (unsigned __int8 *)v68 + v169;
        uint16x8_t v137 = (unsigned __int8 *)v68 + v170;
        float16x8_t v138 = (unsigned __int8 *)v68 + v171;
        uint64_t v139 = (unsigned __int8 *)v68 + v172;
        do
        {
          unsigned int v140 = *v139;
          v139 += 4;
          _S6 = (float)v140;
          unsigned int v142 = *v138;
          v138 += 4;
          _S7 = _S22 * (float)v142;
          unsigned int v144 = *v137;
          v137 += 4;
          LOWORD(_S6) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S22 * _S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          __asm { FCVT            S16, H7 }
          LOWORD(_S7) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S22 * (float)v144, 0.0), 8191.0)));
          __asm { FCVT            S17, H7 }
          float v148 = (float)((float)((float)(v188 * _S16) + (float)(v189 * _S6)) + (float)(v187 * _S17))
               + (float)(v186 * fmaxf(_S6, fmaxf(_S16, _S17)));
          float v149 = 8191.0;
          if (v148 <= 8191.0)
          {
            float v149 = v148;
            if (v148 < 0.0) {
              float v149 = 0.0;
            }
          }
          unsigned int v150 = *v136;
          v136 += 4;
          _H7 = *(_WORD *)(v51 + 2 * llroundf(v149));
          __asm { FCVT            S7, H7 }
          float v153 = _S6 * _S7;
          float v154 = _S16 * _S7;
          float v155 = _S17 * _S7;
          float v156 = (float)((float)(_S23 * v154) + (float)(v153 * _S20)) + (float)(v155 * _S24);
          float v157 = (float)((float)(_S26 * v154) + (float)(v153 * _S25)) + (float)(v155 * _S27);
          _S6 = (float)((float)(_S8 * v154) + (float)(v153 * _S28)) + (float)(v155 * _S9);
          LOWORD(v155) = *(_WORD *)(result + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          LOWORD(v154) = *(_WORD *)(result + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(result + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          _S17 = (float)v150 * 0.0039216;
          *unsigned int v69 = LOWORD(v155);
          v69[1] = LOWORD(v154);
          v69[2] = LOWORD(_S6);
          __asm { FCVT            H6, S17 }
          v69[3] = LOWORD(_S6);
          v69 += 4;
          --v135;
        }
        while (v135);
      }
      v62 += v16;
      v61 += v18;
      ++v35;
      _H12 = v182;
      _H11 = v183;
      _H14 = v180;
      _H13 = v181;
      _H0 = v178;
      _H15 = v179;
      _H2 = v176;
      _H1 = v177;
      _H4 = v174;
      _H3 = v175;
      _H6 = v173;
    }
    while (v35 != v45);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = **((void **)result + 8);
    uint64_t v16 = **((void **)result + 17);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    uint64_t v26 = v13 + 164;
    uint64_t v27 = v13 + 16548;
    uint64_t v28 = v13 + 32932;
    float v29 = *(float *)(v13 + 104);
    float v30 = *(float *)(v13 + 108);
    float v31 = *(float *)(v13 + 112);
    float v32 = *(float *)(v13 + 116);
    float v33 = *(float *)(v13 + 120);
    uint64_t v34 = *((void *)result + 14);
    unint64_t v35 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v36 = *(void *)(result + 36);
    uint64_t v37 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v38 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v39 = **((void **)result + 16) + v35 * v16;
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 155);
    uint64_t v40 = *(unsigned __int8 *)(v13 + 154);
    float v41 = (_WORD *)(v39 + 8 * v34);
    uint64_t v42 = *v14 + v15 * v11 + 4 * v36;
    do
    {
      if (v10)
      {
        uint64_t v43 = v10;
        uint64_t v44 = v42;
        uint64_t v45 = v41;
        do
        {
          LOBYTE(_S25) = *(unsigned char *)(v44 + v40);
          LOBYTE(v3) = result[v44];
          LOBYTE(v4) = *(unsigned char *)(v44 + v38);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(_S25), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v4), 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          float v56 = (float)((float)((float)(v31 * _S26) + (float)(v30 * _S25)) + (float)(v32 * _S27))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S26, _S27)));
          float v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            float v57 = v56;
            if (v56 < 0.0) {
              float v57 = 0.0;
            }
          }
          unsigned int v58 = *(unsigned __int8 *)(v44 + v37);
          _H28 = *(_WORD *)(v27 + 2 * llroundf(v57));
          v44 += 4;
          __asm { FCVT            S28, H28 }
          float v61 = _S25 * _S28;
          float v62 = _S26 * _S28;
          float v63 = _S27 * _S28;
          float v64 = (float)((float)(v19 * v62) + (float)(v61 * v18)) + (float)(v63 * v20);
          float v65 = (float)((float)(v22 * v62) + (float)(v61 * v21)) + (float)(v63 * v23);
          float v66 = (float)((float)(v25 * v62) + (float)(v61 * v24)) + (float)(v63 * v29);
          float v3 = fminf(fmaxf(v64, 0.0), 8191.0);
          LOWORD(v3) = *(_WORD *)(v28 + 2 * llroundf(v3));
          float v4 = fminf(fmaxf(v65, 0.0), 8191.0);
          LOWORD(v4) = *(_WORD *)(v28 + 2 * llroundf(v4));
          _S25 = fminf(fmaxf(v66, 0.0), 8191.0);
          LOWORD(_S25) = *(_WORD *)(v28 + 2 * llroundf(_S25));
          _S28 = (float)v58 * 0.0039216;
          _WORD *v45 = LOWORD(v3);
          v45[1] = LOWORD(v4);
          v45[2] = LOWORD(_S25);
          __asm { FCVT            H25, S28 }
          v45[3] = LOWORD(_S25);
          v45 += 4;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      float v41 = (_WORD *)((char *)v41 + v16);
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_RGhA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_RGhA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *(void *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 36);
  uint64_t v5 = *(void *)(a1 + 44);
  uint64_t v6 = *(void *)(a1 + 28);
  unint64_t v7 = *a1;
  unint64_t v8 = v6 * a2 / v7;
  uint64_t v9 = v8 + v5;
  unint64_t v10 = (v6 + v6 * a2) / v7;
  uint64_t v11 = v10 + v5;
  uint64_t v12 = *((void *)a1 + 14);
  unint64_t v13 = *((void *)a1 + 13) * a2;
  uint64_t v14 = *((void *)a1 + 19);
  uint64_t v15 = *((void *)a1 + 15);
  uint64_t v16 = **((void **)a1 + 8);
  uint64_t v17 = **((void **)a1 + 7);
  uint64_t v18 = **((void **)a1 + 17);
  uint64_t v19 = **((void **)a1 + 16);
  uint64_t result = *(unsigned int *)(v14 + 128);
  uint64_t v133 = *(unsigned __int8 *)(v14 + 154);
  v136[0] = *(unsigned char *)(v14 + 154);
  uint64_t v21 = *(unsigned __int8 *)(v14 + 155);
  v136[1] = *(unsigned char *)(v14 + 155);
  uint64_t v22 = *(unsigned __int8 *)(v14 + 156);
  v136[2] = *(unsigned char *)(v14 + 156);
  uint64_t v23 = *(unsigned __int8 *)(v14 + 157);
  v136[3] = *(unsigned char *)(v14 + 157);
  uint64_t v24 = v13 / v7 + v15;
  uint64_t v25 = v16 * v9;
  _S7 = *(float *)(v14 + 72);
  _S19 = *(float *)(v14 + 76);
  uint64_t v28 = v18 * v24;
  _S20 = *(float *)(v14 + 80);
  _S25 = *(float *)(v14 + 84);
  _S26 = *(float *)(v14 + 88);
  _S27 = *(float *)(v14 + 92);
  _S28 = *(float *)(v14 + 96);
  _S29 = *(float *)(v14 + 100);
  _S16 = *(float *)(v14 + 104);
  long long v134 = 0u;
  long long v135 = 0u;
  do
  {
    unsigned int v36 = 0;
    char v37 = v136[v2];
    do
    {
      *((unsigned char *)&v134 + 8 * (((_BYTE)v2 + (v36 >> 3)) & 0x1F) + v36) = v37 + 4 * v36;
      ++v36;
    }
    while (v36 != 8);
    ++v2;
  }
  while (v2 != 4);
  if (v10 != v8)
  {
    uint64_t v38 = 0;
    float v39 = (float)result;
    uint64_t v40 = v11 - v9;
    uint64_t v41 = v14 + 16548;
    uint64_t result = v14 + 164;
    _S18 = 8191.0 / v39;
    __asm
    {
      FCVT            H8, S7
      FCVT            H9, S19
      FCVT            H10, S20
      FCVT            H11, S25
      FCVT            H12, S26
      FCVT            H13, S27
      FCVT            H14, S28
      FCVT            H15, S29
      FCVT            H0, S16
    }
    uint64_t v56 = v19 + v28 + 8 * v12;
    uint64_t v57 = v17 + v25 + 4 * v4;
    __asm { FCVT            H1, S18 }
    v59.i64[0] = 0x9000900090009000;
    v59.i64[1] = 0x9000900090009000;
    float16x8_t v60 = (float16x8_t)vdupq_n_s16(0x1C04u);
    float v131 = _S19;
    float v132 = _S7;
    float v129 = _S25;
    float v130 = _S20;
    float v127 = _S27;
    float v128 = _S26;
    float v125 = _S29;
    float v126 = _S28;
    do
    {
      if ((int)v3 < 8)
      {
        unint64_t v104 = 0;
        float v65 = (__int16 *)v56;
        float v64 = (uint64_t *)v57;
      }
      else
      {
        int v61 = 0;
        int8x8_t v63 = *(int8x8_t *)((char *)&v134 + 8);
        int8x8_t v62 = (int8x8_t)v134;
        float v64 = (uint64_t *)v57;
        float v65 = (__int16 *)v56;
        int8x8_t v67 = *(int8x8_t *)((char *)&v135 + 8);
        int8x8_t v66 = (int8x8_t)v135;
        do
        {
          v137.val[0].i64[0] = *v64;
          uint64_t v68 = v64[1];
          v69.i64[0] = v64[2];
          uint64_t v70 = v64[3];
          v64 += 4;
          v137.val[0].i64[1] = v68;
          v69.i64[1] = v70;
          v137.val[1] = v69;
          int8x8_t v71 = vqtbl2_s8(v137, v62);
          int8x8_t v72 = vqtbl2_s8(v137, v63);
          int8x8_t v73 = vqtbl2_s8(v137, v66);
          *(int8x8_t *)v74.i8 = vzip1_s8(v71, 0);
          v74.u64[1] = (unint64_t)vzip2_s8(v71, 0);
          float16x8_t v75 = vcvtq_f16_u16(v74);
          *(int8x8_t *)v74.i8 = vzip1_s8(v72, 0);
          v74.u64[1] = (unint64_t)vzip2_s8(v72, 0);
          *(int8x8_t *)v76.i8 = vzip1_s8(v73, 0);
          v76.u64[1] = (unint64_t)vzip2_s8(v73, 0);
          float16x8_t v77 = vmulq_n_f16(vcvtq_f16_u16(v74), _H1);
          uint16x8_t v78 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(v75, _H1), (float16x8_t)0), v59));
          uint32x4_t v79 = vmovl_high_u16(v78);
          float16x8_t v80 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v78.i8);
          v80.i16[0] = *(_WORD *)(result + 2 * v80.u32[0]);
          uint16x8_t v81 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v77, (float16x8_t)0), v59));
          uint32x4_t v82 = vmovl_high_u16(v81);
          uint32x4_t v83 = vmovl_u16(*(uint16x4_t *)v81.i8);
          v77.i16[0] = *(_WORD *)(result + 2 * v83.u32[0]);
          v80.i16[1] = *(_WORD *)(result + 2 * v80.u32[1]);
          uint16x8_t v84 = (__int16 *)(result + 2 * v83.u32[3]);
          v80.i16[2] = *(_WORD *)(result + 2 * v80.u32[2]);
          v77.i16[1] = *(_WORD *)(result + 2 * v83.u32[1]);
          v77.i16[2] = *(_WORD *)(result + 2 * v83.u32[2]);
          v80.i16[3] = *(_WORD *)(result + 2 * v80.u32[3]);
          uint16x8_t v85 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvtq_f16_u16(v76), _H1), (float16x8_t)0), v59));
          uint32x4_t v86 = vmovl_high_u16(v85);
          v77.i16[3] = *v84;
          uint32x4_t v87 = vmovl_u16(*(uint16x4_t *)v85.i8);
          v80.i16[4] = *(_WORD *)(result + 2 * v79.u32[0]);
          v76.i16[0] = *(_WORD *)(result + 2 * v87.u32[0]);
          v77.i16[4] = *(_WORD *)(result + 2 * v82.u32[0]);
          v80.i16[5] = *(_WORD *)(result + 2 * v79.u32[1]);
          v77.i16[5] = *(_WORD *)(result + 2 * v82.u32[1]);
          v80.i16[6] = *(_WORD *)(result + 2 * v79.u32[2]);
          v76.i16[1] = *(_WORD *)(result + 2 * v87.u32[1]);
          v77.i16[6] = *(_WORD *)(result + 2 * v82.u32[2]);
          v76.i16[2] = *(_WORD *)(result + 2 * v87.u32[2]);
          v80.i16[7] = *(_WORD *)(result + 2 * v79.u32[3]);
          v76.i16[3] = *(_WORD *)(result + 2 * v87.u32[3]);
          v76.i16[4] = *(_WORD *)(result + 2 * v86.u32[0]);
          v77.i16[7] = *(_WORD *)(result + 2 * v82.u32[3]);
          v76.i16[5] = *(_WORD *)(result + 2 * v86.u32[1]);
          v76.i16[6] = *(_WORD *)(result + 2 * v86.u32[2]);
          *(int8x8_t *)v137.val[0].i8 = vqtbl2_s8(v137, v67);
          v76.i16[7] = *(_WORD *)(result + 2 * v86.u32[3]);
          v137.val[1] = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v80, _H8), v77, _H9), (float16x8_t)v76, _H10), (float16x8_t)0), v59));
          uint32x4_t v88 = vmovl_high_u16((uint16x8_t)v137.val[1]);
          uint32x4_t v89 = vmovl_u16(*(uint16x4_t *)v137.val[1].i8);
          v137.val[1].i16[0] = *(_WORD *)(v41 + 2 * v89.u32[0]);
          v137.val[1].i16[1] = *(_WORD *)(v41 + 2 * v89.u32[1]);
          uint16x8_t v90 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v80, _H11), v77, _H12), (float16x8_t)v76, _H13), (float16x8_t)0), v59));
          v137.val[1].i16[2] = *(_WORD *)(v41 + 2 * v89.u32[2]);
          uint32x4_t v91 = vmovl_high_u16(v90);
          uint32x4_t v92 = vmovl_u16(*(uint16x4_t *)v90.i8);
          v137.val[1].i16[3] = *(_WORD *)(v41 + 2 * v89.u32[3]);
          v137.val[1].i16[4] = *(_WORD *)(v41 + 2 * v88.u32[0]);
          v137.val[1].i16[5] = *(_WORD *)(v41 + 2 * v88.u32[1]);
          v137.val[1].i16[6] = *(_WORD *)(v41 + 2 * v88.u32[2]);
          uint64_t v93 = (__int16 *)(v41 + 2 * v91.u32[1]);
          v137.val[1].i16[7] = *(_WORD *)(v41 + 2 * v88.u32[3]);
          int8x16x2_t v94 = (__int16 *)(v41 + 2 * v91.u32[2]);
          v88.i16[0] = *(_WORD *)(v41 + 2 * v92.u32[0]);
          v88.i16[1] = *(_WORD *)(v41 + 2 * v92.u32[1]);
          v88.i16[2] = *(_WORD *)(v41 + 2 * v92.u32[2]);
          v88.i16[3] = *(_WORD *)(v41 + 2 * v92.u32[3]);
          uint16x8_t v95 = (__int16 *)(v41 + 2 * v91.u32[3]);
          uint16x8_t v96 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v76, _H0), v77, _H15), v80, _H14), (float16x8_t)0), v59));
          v88.i16[4] = *(_WORD *)(v41 + 2 * v91.u32[0]);
          uint32x4_t v97 = vmovl_high_u16(v96);
          uint16x8_t v98 = (uint16x8_t)vmovl_u16(*(uint16x4_t *)v96.i8);
          v88.i16[5] = *v93;
          v88.i16[6] = *v94;
          v88.i16[7] = *v95;
          LOWORD(v70) = *(_WORD *)(v41 + 2 * v98.u32[0]);
          WORD1(v70) = *(_WORD *)(v41 + 2 * v98.u32[1]);
          WORD2(v70) = *(_WORD *)(v41 + 2 * v98.u32[2]);
          HIWORD(v70) = *(_WORD *)(v41 + 2 * v98.u32[3]);
          __int16 v99 = *(_WORD *)(v41 + 2 * v97.u32[0]);
          __int16 v100 = *(_WORD *)(v41 + 2 * v97.u32[1]);
          __int16 v101 = *(_WORD *)(v41 + 2 * v97.u32[2]);
          *(int8x8_t *)v98.i8 = vzip1_s8(*(int8x8_t *)v137.val[0].i8, 0);
          __int16 v102 = *(_WORD *)(v41 + 2 * v97.u32[3]);
          v98.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v137.val[0].i8, 0);
          float16x8_t v103 = vmulq_f16(vcvtq_f16_u16(v98), v60);
          vst4q_s16(v65, *(int16x8x4_t *)v137.val[1].i8);
          v65 += 32;
          v61 += 8;
        }
        while (v61 < (int)v3 - 7);
        unint64_t v104 = v3 & 0xFFFFFFF8;
        _S19 = v131;
        _S7 = v132;
        _S25 = v129;
        _S20 = v130;
        _S27 = v127;
        _S26 = v128;
        _S29 = v125;
        _S28 = v126;
      }
      _CF = v3 >= v104;
      unint64_t v105 = v3 - v104;
      if (v105 != 0 && _CF)
      {
        uint32x4_t v106 = (unsigned __int8 *)v64 + v23;
        uint32x4_t v107 = (unsigned __int8 *)v64 + v22;
        float16x8_t v108 = (unsigned __int8 *)v64 + v21;
        float16x8_t v109 = (unsigned __int8 *)v64 + v133;
        do
        {
          unsigned int v111 = *v109;
          v109 += 4;
          unsigned int v110 = v111;
          unsigned int v112 = *v108;
          v108 += 4;
          _S3 = (float)v112;
          unsigned int v114 = *v107;
          v107 += 4;
          _S2 = fminf(fmaxf(_S18 * _S3, 0.0), 8191.0);
          LOWORD(_S3) = *(_WORD *)(result + 2 * llroundf(fminf(fmaxf(_S18 * (float)v110, 0.0), 8191.0)));
          LOWORD(_S2) = *(_WORD *)(result + 2 * llroundf(_S2));
          __asm { FCVT            S2, H2 }
          _H4 = *(_WORD *)(result + 2 * llroundf(fminf(fmaxf(_S18 * (float)v114, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S4, H4
          }
          float v120 = (float)((float)(_S19 * _S2) + (float)(_S3 * _S7)) + (float)(_S4 * _S20);
          float v121 = (float)((float)(_S26 * _S2) + (float)(_S3 * _S25)) + (float)(_S4 * _S27);
          _S2 = (float)((float)(_S29 * _S2) + (float)(_S3 * _S28)) + (float)(_S4 * _S16);
          unsigned int v123 = *v106;
          v106 += 4;
          LOWORD(_S3) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          LOWORD(_S2) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          _S5 = (float)v123 * 0.0039216;
          *float v65 = LOWORD(_S3);
          v65[1] = LOWORD(_S4);
          v65[2] = LOWORD(_S2);
          __asm { FCVT            H2, S5 }
          v65[3] = LOWORD(_S2);
          v65 += 4;
          --v105;
        }
        while (v105);
      }
      v57 += v16;
      v56 += v18;
      ++v38;
    }
    while (v38 != v40);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = **((void **)result + 8);
    uint64_t v17 = **((void **)result + 17);
    float v18 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    float v19 = *(float *)(v14 + 72);
    float v20 = *(float *)(v14 + 76);
    float v21 = *(float *)(v14 + 80);
    float v22 = *(float *)(v14 + 84);
    float v23 = *(float *)(v14 + 88);
    float v24 = *(float *)(v14 + 92);
    float v25 = *(float *)(v14 + 96);
    float v26 = *(float *)(v14 + 100);
    float v27 = *(float *)(v14 + 104);
    uint64_t v28 = v14 + 164;
    uint64_t v29 = v14 + 16548;
    uint64_t v30 = *((void *)result + 14);
    unint64_t v31 = *((void *)result + 13) * a2 / v7 + *((void *)result + 15);
    uint64_t v32 = *(void *)(result + 36);
    uint64_t v33 = *(unsigned __int8 *)(v14 + 157);
    uint64_t v34 = *(unsigned __int8 *)(v14 + 156);
    uint64_t v35 = **((void **)result + 16) + v31 * v17;
    uint64_t v36 = *(unsigned __int8 *)(v14 + 155);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 154);
    char v37 = (_WORD *)(v35 + 8 * v30);
    uint64_t v38 = *v15 + v16 * v12 + 4 * v32;
    do
    {
      if (v11)
      {
        uint64_t v39 = v11;
        uint64_t v40 = v38;
        uint64_t v41 = v37;
        do
        {
          LOBYTE(_S21) = result[v40];
          LOBYTE(v3) = *(unsigned char *)(v40 + v36);
          LOBYTE(v4) = *(unsigned char *)(v40 + v34);
          LOBYTE(_S24) = *(unsigned char *)(v40 + v33);
          v40 += 4;
          _H21 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v18 * (float)LODWORD(_S21), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v18 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          unsigned int v50 = llroundf(fminf(fmaxf(v18 * (float)LODWORD(v4), 0.0), 8191.0));
          float v51 = (float)(v20 * _S22) + (float)(_S21 * v19);
          float v52 = (float)(v23 * _S22) + (float)(_S21 * v22);
          float v53 = (float)(v26 * _S22) + (float)(_S21 * v25);
          LOWORD(_S22) = *(_WORD *)(v28 + 2 * v50);
          __asm { FCVT            S22, H22 }
          float v4 = v51 + (float)(_S22 * v21);
          float v55 = v53 + (float)(_S22 * v27);
          float v3 = fminf(fmaxf(v52 + (float)(_S22 * v24), 0.0), 8191.0);
          unsigned int v56 = llroundf(v3);
          LOWORD(v3) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v4, 0.0), 8191.0)));
          _S21 = fminf(fmaxf(v55, 0.0), 8191.0);
          unsigned int v57 = llroundf(_S21);
          LOWORD(_S21) = *(_WORD *)(v29 + 2 * v56);
          LOWORD(v4) = *(_WORD *)(v29 + 2 * v57);
          _S24 = (float)LODWORD(_S24) * 0.0039216;
          _WORD *v41 = LOWORD(v3);
          v41[1] = LOWORD(_S21);
          v41[2] = LOWORD(v4);
          __asm { FCVT            H21, S24 }
          v41[3] = LOWORD(_S21);
          v41 += 4;
          --v39;
        }
        while (v39);
      }
      v38 += v16;
      char v37 = (_WORD *)((char *)v37 + v17);
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_RGhA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_RGhA_neon_fp16_GCD);
  return 0;
}

uint64_t *vt_Copy_BGRA_rgb_RGhA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *(void *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 36);
  uint64_t v5 = *(void *)(a1 + 44);
  uint64_t v6 = *(void *)(a1 + 28);
  unint64_t v7 = *a1;
  unint64_t v8 = v6 * a2 / v7;
  uint64_t v9 = v8 + v5;
  unint64_t v10 = (v6 + v6 * a2) / v7;
  uint64_t v11 = v10 + v5;
  uint64_t v12 = *((void *)a1 + 14);
  unint64_t v13 = *((void *)a1 + 13) * a2;
  uint64_t v14 = *((void *)a1 + 19);
  uint64_t v16 = *((void *)a1 + 15);
  uint64_t v15 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v17 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v18 = **((void **)a1 + 8);
  uint64_t result = (uint64_t *)**((void **)a1 + 7);
  uint64_t v20 = *v17;
  uint64_t v21 = *v15;
  unsigned int v22 = *(_DWORD *)(v14 + 128);
  uint64_t v23 = v18 * v9;
  unint64_t v24 = v20 * (v13 / v7 + v16);
  uint64_t v25 = *(unsigned __int8 *)(v14 + 154);
  v76[0] = *(unsigned char *)(v14 + 154);
  uint64_t v26 = *(unsigned __int8 *)(v14 + 155);
  v76[1] = *(unsigned char *)(v14 + 155);
  uint64_t v27 = *(unsigned __int8 *)(v14 + 156);
  v76[2] = *(unsigned char *)(v14 + 156);
  uint64_t v28 = *(unsigned __int8 *)(v14 + 157);
  v76[3] = v28;
  long long v74 = 0u;
  long long v75 = 0u;
  do
  {
    unsigned int v29 = 0;
    char v30 = v76[v2];
    do
    {
      *((unsigned char *)&v74 + 8 * (((_BYTE)v2 + (v29 >> 3)) & 0x1F) + v29) = v30 + 4 * v29;
      ++v29;
    }
    while (v29 != 8);
    ++v2;
  }
  while (v2 != 4);
  if (v10 != v8)
  {
    uint64_t v31 = 0;
    uint64_t v32 = v11 - v9;
    _S2 = 1.0 / (float)v22;
    uint64_t v34 = v21 + v24 + 8 * v12;
    uint64_t result = (uint64_t *)((char *)result + 4 * v4 + v23);
    __asm { FCVT            H0, S2 }
    uint64_t v40 = (const float *)&dword_193E7D124;
    int32x4_t v41 = (int32x4_t)vld1q_dup_f32(v40);
    *(float *)v41.i32 = _S2;
    float32x4_t v42 = (float32x4_t)vzip1q_s32(v41, v41);
    v42.f32[2] = _S2;
    float16x8_t v43 = (float16x8_t)vdupq_n_s16(0x1C04u);
    do
    {
      if ((int)v3 < 8)
      {
        unint64_t v60 = 0;
        float v48 = (__int16 *)v34;
        float v47 = result;
      }
      else
      {
        int v44 = 0;
        int8x8_t v46 = *(int8x8_t *)((char *)&v74 + 8);
        int8x8_t v45 = (int8x8_t)v74;
        float v47 = result;
        float v48 = (__int16 *)v34;
        int8x8_t v50 = *(int8x8_t *)((char *)&v75 + 8);
        int8x8_t v49 = (int8x8_t)v75;
        do
        {
          v77.val[0].i64[0] = *v47;
          uint64_t v51 = v47[1];
          v52.i64[0] = v47[2];
          uint64_t v53 = v47[3];
          v47 += 4;
          v77.val[0].i64[1] = v51;
          v52.i64[1] = v53;
          v77.val[1] = (int8x16_t)v52;
          int8x8_t v54 = vqtbl2_s8(v77, v45);
          int8x8_t v55 = vqtbl2_s8(v77, v46);
          int8x8_t v56 = vqtbl2_s8(v77, v49);
          *(int8x8_t *)v57.i8 = vzip1_s8(v54, 0);
          v57.u64[1] = (unint64_t)vzip2_s8(v54, 0);
          *(int8x8_t *)v58.i8 = vzip1_s8(v55, 0);
          v58.u64[1] = (unint64_t)vzip2_s8(v55, 0);
          *(int8x8_t *)v77.val[0].i8 = vqtbl2_s8(v77, v50);
          *(int8x8_t *)v77.val[1].i8 = vzip1_s8(v56, 0);
          v77.val[1].u64[1] = (unint64_t)vzip2_s8(v56, 0);
          float16x8_t v59 = vcvtq_f16_u16(v58);
          v78.val[0] = (int16x8_t)vmulq_n_f16(vcvtq_f16_u16(v57), _H0);
          v78.val[1] = (int16x8_t)vmulq_n_f16(v59, _H0);
          *(int8x8_t *)v52.i8 = vzip1_s8(*(int8x8_t *)v77.val[0].i8, 0);
          v78.val[2] = (int16x8_t)vmulq_n_f16(vcvtq_f16_u16((uint16x8_t)v77.val[1]), _H0);
          v52.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v77.val[0].i8, 0);
          v78.val[3] = (int16x8_t)vmulq_f16(vcvtq_f16_u16(v52), v43);
          vst4q_s16(v48, v78);
          v48 += 32;
          v44 += 8;
        }
        while (v44 < (int)v3 - 7);
        unint64_t v60 = v3 & 0xFFFFFFF8;
      }
      _CF = v3 >= v60;
      unint64_t v61 = v3 - v60;
      if (v61 != 0 && _CF)
      {
        int8x8_t v62 = (unsigned __int8 *)v47 + v28;
        int8x8_t v63 = (unsigned __int8 *)v47 + v27;
        float v64 = (unsigned __int8 *)v47 + v26;
        float v65 = (unsigned __int8 *)v47 + v25;
        do
        {
          unsigned __int8 v67 = *v65;
          v65 += 4;
          unsigned __int8 v66 = v67;
          unsigned __int8 v69 = *v64;
          v64 += 4;
          unsigned __int8 v68 = v69;
          unsigned __int8 v71 = *v63;
          v63 += 4;
          unsigned __int8 v70 = v71;
          unsigned __int8 v72 = *v62;
          v62 += 4;
          v73.i16[0] = v66;
          v73.i16[1] = v68;
          v73.i16[2] = v70;
          v73.i16[3] = v72;
          *(float16x4_t *)float v48 = vcvt_f16_f32(vmulq_f32(v42, vcvtq_f32_u32(vmovl_u16(v73))));
          v48 += 4;
          --v61;
        }
        while (v61);
      }
      uint64_t result = (uint64_t *)((char *)result + v18);
      v34 += v20;
      ++v31;
    }
    while (v31 != v32);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    uint64_t v11 = **((void **)result + 8);
    uint64_t v12 = **((void **)result + 17);
    float v13 = 1.0 / (float)*(unsigned int *)(v10 + 128);
    unint64_t v14 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v15 = *(unsigned __int8 *)(v10 + 157);
    uint64_t v16 = *(unsigned __int8 *)(v10 + 156);
    uint64_t v17 = *(unsigned __int8 *)(v10 + 155);
    uint64_t v18 = *(unsigned __int8 *)(v10 + 154);
    uint64_t v19 = **((void **)result + 16) + v14 * v12 + 8 * *((void *)result + 14);
    uint64_t v20 = **((void **)result + 7) + v11 * v8;
    long long v21 = (const float *)&dword_193E7D124;
    int32x4_t v22 = (int32x4_t)vld1q_dup_f32(v21);
    uint64_t result = (unsigned __int8 *)(v20 + 4 * *(void *)(result + 36));
    *(float *)v22.i32 = v13;
    float32x4_t v23 = (float32x4_t)vzip1q_s32(v22, v22);
    v23.f32[2] = v13;
    do
    {
      if (v7)
      {
        uint64_t v24 = v7;
        uint64_t v25 = result;
        uint64_t v26 = (float16x4_t *)v19;
        do
        {
          uint64_t v27 = &v25[v18];
          uint64_t v28 = &v25[v17];
          unsigned int v29 = &v25[v16];
          char v30 = &v25[v15];
          v25 += 4;
          v31.i16[0] = *v27;
          v31.i16[1] = *v28;
          v31.i16[2] = *v29;
          v31.i16[3] = *v30;
          *v26++ = vcvt_f16_f32(vmulq_f32(v23, vcvtq_f32_u32(vmovl_u16(v31))));
          --v24;
        }
        while (v24);
      }
      result += v11;
      v19 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGfA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float32x4_t _Q6, float32x4_t _Q7)
{
  uint64_t v11 = 0;
  unint64_t v12 = *(void *)(a1 + 20);
  uint64_t v13 = *(void *)(a1 + 36);
  uint64_t v14 = *(void *)(a1 + 44);
  uint64_t v15 = *(void *)(a1 + 28);
  unint64_t v16 = *a1;
  unint64_t v17 = v15 * a2 / v16;
  uint64_t v18 = v17 + v14;
  unint64_t v19 = (v15 + v15 * a2) / v16;
  uint64_t v20 = v19 + v14;
  uint64_t v21 = *((void *)a1 + 14);
  unint64_t v22 = *((void *)a1 + 13) * a2;
  uint64_t v23 = *((void *)a1 + 19);
  uint64_t v24 = *((void *)a1 + 15);
  uint64_t v25 = **((void **)a1 + 8);
  uint64_t v26 = **((void **)a1 + 7);
  uint64_t v27 = **((void **)a1 + 17);
  uint64_t v28 = **((void **)a1 + 16);
  uint64_t result = *(unsigned int *)(v23 + 128);
  v210[0] = *(unsigned char *)(v23 + 154);
  uint64_t v30 = *(unsigned __int8 *)(v23 + 155);
  v210[1] = *(unsigned char *)(v23 + 155);
  uint64_t v31 = *(unsigned __int8 *)(v23 + 156);
  v210[2] = *(unsigned char *)(v23 + 156);
  uint64_t v32 = *(unsigned __int8 *)(v23 + 157);
  v210[3] = *(unsigned char *)(v23 + 157);
  _S19 = *(float *)(v23 + 72);
  _S23 = *(float *)(v23 + 76);
  _S24 = *(float *)(v23 + 80);
  _S25 = *(float *)(v23 + 84);
  uint64_t v37 = v22 / v16 + v24;
  _S26 = *(float *)(v23 + 88);
  _S27 = *(float *)(v23 + 92);
  _S28 = *(float *)(v23 + 96);
  _S8 = *(float *)(v23 + 100);
  _S9 = *(float *)(v23 + 104);
  _S10 = *(float *)(v23 + 108);
  float v207 = *(float *)(v23 + 112);
  _S20 = *(float *)(v23 + 120);
  float v206 = *(float *)(v23 + 116);
  long long v208 = 0u;
  long long v209 = 0u;
  do
  {
    unsigned int v45 = 0;
    char v46 = v210[v11];
    do
    {
      *((unsigned char *)&v208 + 8 * (((_BYTE)v11 + (v45 >> 3)) & 0x1F) + v45) = v46 + 4 * v45;
      ++v45;
    }
    while (v45 != 8);
    ++v11;
  }
  while (v11 != 4);
  if (v19 != v17)
  {
    uint64_t v47 = 0;
    _S22 = 8191.0 / (float)result;
    __asm { FCVT            H11, S10 }
    _S0 = v207;
    __asm { FCVT            H12, S0 }
    uint64_t v56 = v20 - v18;
    _S0 = v206;
    __asm
    {
      FCVT            H13, S0
      FCVT            H14, S20
      FCVT            H15, S19
    }
    uint64_t v61 = v23 + 16548;
    uint64_t v62 = v23 + 32932;
    uint64_t result = v23 + 164;
    __asm
    {
      FCVT            H0, S23
      FCVT            H1, S24
      FCVT            H2, S25
      FCVT            H3, S26
      FCVT            H4, S27
      FCVT            H6, S28
      FCVT            H7, S8
      FCVT            H5, S9
    }
    short float v176 = _H5;
    unsigned __int8 v68 = (float *)(v28 + v27 * v37 + 16 * v21);
    uint64_t v69 = v26 + v25 * v18 + 4 * v13;
    int v70 = v12 - 7;
    __asm { FCVT            H5, S22 }
    unint64_t v175 = v12 & 0xFFFFFFF8;
    v72.i64[0] = 0x9000900090009000;
    v72.i64[1] = 0x9000900090009000;
    uint16x4_t v73 = (float *)&unk_193E7D000;
    short float v202 = _H13;
    short float v203 = _H11;
    short float v205 = _H14;
    short float v200 = _H1;
    short float v201 = _H15;
    short float v204 = *(short float *)&_S0;
    short float v198 = _H3;
    short float v199 = _H2;
    unsigned __int32 v196 = _Q6.i32[0];
    short float v197 = _H4;
    unsigned __int32 v195 = _Q7.i32[0];
    uint64_t v190 = v25;
    unint64_t v191 = v12;
    uint64_t v188 = v30;
    uint64_t v189 = v27;
    float v186 = _S23;
    float v187 = _S19;
    float v184 = _S25;
    float v185 = _S24;
    float v182 = _S27;
    float v183 = _S26;
    float v180 = _S8;
    float v181 = _S28;
    float v178 = _S10;
    float v179 = _S9;
    uint64_t v177 = v56;
    do
    {
      if ((int)v12 < 8)
      {
        unint64_t v154 = 0;
        short float v152 = v68;
        int8x16x2_t v77 = (uint64_t *)v69;
      }
      else
      {
        int8x16x2_t v193 = v68;
        uint64_t v194 = v47;
        int v74 = 0;
        int8x8_t v76 = *(int8x8_t *)((char *)&v208 + 8);
        int8x8_t v75 = (int8x8_t)v208;
        uint64_t v192 = v69;
        int8x16x2_t v77 = (uint64_t *)v69;
        int8x8_t v79 = *(int8x8_t *)((char *)&v209 + 8);
        int8x8_t v78 = (int8x8_t)v209;
        short float v80 = *(short float *)_Q6.i16;
        short float v81 = *(short float *)_Q7.i16;
        do
        {
          v211.val[0].i64[0] = *v77;
          uint64_t v82 = v77[1];
          v83.i64[0] = v77[2];
          uint64_t v84 = v77[3];
          v77 += 4;
          v211.val[0].i64[1] = v82;
          v83.i64[1] = v84;
          v211.val[1] = v83;
          int8x8_t v85 = vqtbl2_s8(v211, v75);
          int8x8_t v86 = vqtbl2_s8(v211, v76);
          int8x8_t v87 = vqtbl2_s8(v211, v78);
          *(int8x8_t *)v88.i8 = vzip1_s8(v85, 0);
          v88.u64[1] = (unint64_t)vzip2_s8(v85, 0);
          *(int8x8_t *)v89.i8 = vzip1_s8(v86, 0);
          v89.u64[1] = (unint64_t)vzip2_s8(v86, 0);
          float16x8_t v90 = vcvtq_f16_u16(v88);
          *(int8x8_t *)v88.i8 = vzip1_s8(v87, 0);
          v88.u64[1] = (unint64_t)vzip2_s8(v87, 0);
          float16x8_t v91 = vcvtq_f16_u16(v88);
          float16x8_t v92 = vmulq_n_f16(vcvtq_f16_u16(v89), _H5);
          float16x8_t v93 = vmulq_n_f16(v91, _H5);
          uint16x8_t v94 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(v90, _H5), (float16x8_t)0), v72));
          float16x8_t v95 = (float16x8_t)vmovl_high_u16(v94);
          *(void *)&long long v96 = v95.u32[2];
          *((void *)&v96 + 1) = v95.u32[3];
          long long v97 = v96;
          *(void *)&long long v96 = v95.u32[0];
          *((void *)&v96 + 1) = v95.u32[1];
          long long v98 = v96;
          uint32x4_t v99 = vmovl_u16(*(uint16x4_t *)v94.i8);
          *((void *)&v96 + 1) = v99.u32[3];
          uint64_t v100 = v99.u32[2];
          v95.i16[0] = *(_WORD *)(result + 2 * v99.u32[0]);
          uint64_t v101 = *((void *)&v97 + 1);
          __int16 v102 = (__int16 *)(result + 2 * v99.u32[1]);
          float16x8_t v103 = (__int16 *)(result + 2 * v97);
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v92, (float16x8_t)0), v72));
          float16x8_t v105 = (float16x8_t)vmovl_high_u16(v104);
          uint32x4_t v106 = (__int16 *)(result + 2 * *((void *)&v96 + 1));
          *(void *)&long long v96 = v105.u32[2];
          *((void *)&v96 + 1) = v105.u32[3];
          long long v107 = v96;
          *(void *)&long long v96 = v105.u32[0];
          uint32x4_t v108 = vmovl_u16(*(uint16x4_t *)v104.i8);
          v105.i16[0] = *(_WORD *)(result + 2 * v108.u32[0]);
          v95.i16[1] = *v102;
          float16x8_t v109 = (__int16 *)(result + 2 * v105.u32[1]);
          v95.i16[2] = *(_WORD *)(result + 2 * v100);
          v105.i16[1] = *(_WORD *)(result + 2 * v108.u32[1]);
          v95.i16[3] = *v106;
          v105.i16[2] = *(_WORD *)(result + 2 * v108.u32[2]);
          v105.i16[3] = *(_WORD *)(result + 2 * v108.u32[3]);
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v93, (float16x8_t)0), v72));
          uint32x4_t v111 = vmovl_high_u16(v110);
          v95.i16[4] = *(_WORD *)(result + 2 * v98);
          float16x8_t v112 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v110.i8);
          v105.i16[4] = *(_WORD *)(result + 2 * v96);
          v112.i16[0] = *(_WORD *)(result + 2 * v112.u32[0]);
          v95.i16[5] = *(_WORD *)(result + 2 * *((void *)&v98 + 1));
          v105.i16[5] = *v109;
          v95.i16[6] = *v103;
          v105.i16[6] = *(_WORD *)(result + 2 * v107);
          v112.i16[1] = *(_WORD *)(result + 2 * v112.u32[1]);
          v95.i16[7] = *(_WORD *)(result + 2 * v101);
          v112.i16[2] = *(_WORD *)(result + 2 * v112.u32[2]);
          v112.i16[3] = *(_WORD *)(result + 2 * v112.u32[3]);
          v105.i16[7] = *(_WORD *)(result + 2 * *((void *)&v107 + 1));
          v112.i16[4] = *(_WORD *)(result + 2 * v111.u32[0]);
          v112.i16[5] = *(_WORD *)(result + 2 * v111.u32[1]);
          v112.i16[6] = *(_WORD *)(result + 2 * v111.u32[2]);
          v112.i16[7] = *(_WORD *)(result + 2 * v111.u32[3]);
          uint16x8_t v113 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v95, _H11), v105, _H12), v112, _H13), vmaxq_f16(vmaxq_f16(v95, v105), v112), v205), (float16x8_t)0), v72));
          uint32x4_t v114 = vmovl_u16(*(uint16x4_t *)v113.i8);
          float16x8_t v115 = (float16x8_t)vmovl_high_u16(v113);
          uint64_t v116 = v115.u32[1];
          uint64_t v117 = v115.u32[0];
          v115.i16[0] = *(_WORD *)(v61 + 2 * v114.u32[0]);
          v115.i16[1] = *(_WORD *)(v61 + 2 * v114.u32[1]);
          v115.i16[2] = *(_WORD *)(v61 + 2 * v114.u32[2]);
          uint64_t v118 = (__int16 *)(v61 + 2 * v115.u32[2]);
          v115.i16[3] = *(_WORD *)(v61 + 2 * v114.u32[3]);
          v115.i16[4] = *(_WORD *)(v61 + 2 * v117);
          uint32x4_t v119 = (__int16 *)(v61 + 2 * v115.u32[3]);
          v115.i16[5] = *(_WORD *)(v61 + 2 * v116);
          v115.i16[6] = *v118;
          v115.i16[7] = *v119;
          *(int8x8_t *)v211.val[1].i8 = vqtbl2_s8(v211, v79);
          v211.val[0] = (int8x16_t)vmulq_f16(v95, v115);
          float16x8_t v120 = vmulq_f16(v105, v115);
          float16x8_t v121 = vmulq_f16(v112, v115);
          float16x8_t v122 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v211.val[0], _H2), v120, _H3), v121, _H4);
          float16x8_t v123 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v121, v176), v120, v81), (float16x8_t)v211.val[0], v80);
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v211.val[0], _H15), v120, v204), v121, _H1), (float16x8_t)0), v72));
          uint32x4_t v125 = vmovl_high_u16(v124);
          v211.val[0].i64[1] = v125.u32[3];
          uint32x4_t v126 = vmovl_u16(*(uint16x4_t *)v124.i8);
          v120.i64[1] = v126.u32[3];
          uint64_t v127 = v126.u32[1];
          v120.i16[0] = *(_WORD *)(v62 + 2 * v126.u32[0]);
          uint64_t v128 = v125.u32[1];
          float v129 = (__int16 *)(v62 + 2 * v126.u32[2]);
          uint64_t v130 = v125.u32[2];
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v72));
          _D16.i16[0] = *(_WORD *)(v62 + 2 * v125.u32[0]);
          uint32x4_t v132 = vmovl_high_u16(v131);
          uint32x4_t v133 = vmovl_u16(*(uint16x4_t *)v131.i8);
          v114.i64[1] = v133.u32[3];
          long long v134 = (__int16 *)(v62 + 2 * v130);
          uint64_t v135 = v133.u32[1];
          v122.i16[0] = *(_WORD *)(v62 + 2 * v133.u32[0]);
          uint64_t v136 = v132.u32[1];
          int8x16x2_t v137 = (__int16 *)(v62 + 2 * v133.u32[2]);
          uint64_t v138 = v132.u32[0];
          uint64_t v139 = v132.u32[3];
          uint64_t v140 = v132.u32[2];
          uint64_t v141 = (__int16 *)(v62 + 2 * v127);
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v72));
          uint32x4_t v143 = vmovl_high_u16(v142);
          *(void *)&long long v96 = v143.u32[2];
          *((void *)&v96 + 1) = v143.u32[3];
          long long v144 = v96;
          *(void *)&long long v96 = v143.u32[0];
          *((void *)&v96 + 1) = v143.u32[1];
          long long v145 = v96;
          uint16x8_t v146 = (uint16x8_t)vmovl_u16(*(uint16x4_t *)v142.i8);
          *(void *)&long long v96 = v146.u32[2];
          *((void *)&v96 + 1) = v146.u32[3];
          long long v147 = v96;
          *((void *)&v96 + 1) = v146.u32[1];
          uint64_t v148 = v146.u32[0];
          uint64_t v149 = *((void *)&v145 + 1);
          uint64_t v150 = v145;
          v120.i16[1] = *v141;
          *(int8x8_t *)v146.i8 = vzip1_s8(*(int8x8_t *)v211.val[1].i8, 0);
          v146.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v211.val[1].i8, 0);
          v120.i16[2] = *v129;
          v120.i16[3] = *(_WORD *)(v62 + 2 * v120.i64[1]);
          int8x16_t v151 = (int8x16_t)vmulq_f16(vcvtq_f16_u16(v146), (float16x8_t)vdupq_n_s16(0x1C04u));
          v212.val[3] = vcvtq_f32_f16(*(float16x4_t *)v151.i8);
          v212.val[0] = vcvtq_f32_f16(*(float16x4_t *)v120.i8);
          v211.val[1].i16[0] = *(_WORD *)(v62 + 2 * v138);
          v122.i16[1] = *(_WORD *)(v62 + 2 * v135);
          v122.i16[2] = *v137;
          v122.i16[3] = *(_WORD *)(v62 + 2 * v114.i64[1]);
          v212.val[1] = vcvtq_f32_f16(*(float16x4_t *)v122.i8);
          v120.i16[0] = *(_WORD *)(v62 + 2 * v148);
          v120.i16[1] = *(_WORD *)(v62 + 2 * *((void *)&v96 + 1));
          v120.i16[2] = *(_WORD *)(v62 + 2 * v147);
          v120.i16[3] = *(_WORD *)(v62 + 2 * *((void *)&v147 + 1));
          v212.val[2] = vcvtq_f32_f16(*(float16x4_t *)v120.i8);
          v120.i16[0] = *(_WORD *)(v62 + 2 * v150);
          _D16.i16[1] = *(_WORD *)(v62 + 2 * v128);
          _D16.i16[2] = *v134;
          v211.val[1].i16[1] = *(_WORD *)(v62 + 2 * v136);
          _D16.i16[3] = *(_WORD *)(v62 + 2 * v211.val[0].i64[1]);
          v211.val[1].i16[2] = *(_WORD *)(v62 + 2 * v140);
          v120.i16[1] = *(_WORD *)(v62 + 2 * v149);
          v211.val[1].i16[3] = *(_WORD *)(v62 + 2 * v139);
          v120.i16[2] = *(_WORD *)(v62 + 2 * v144);
          v120.i16[3] = *(_WORD *)(v62 + 2 * *((void *)&v144 + 1));
          short float v152 = v68 + 32;
          vst4q_f32(v68, v212);
          float v153 = v68 + 16;
          v212.val[2] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL));
          _Q6 = vcvtq_f32_f16(_D16);
          _Q7 = vcvtq_f32_f16(*(float16x4_t *)v211.val[1].i8);
          v212.val[1] = vcvtq_f32_f16(*(float16x4_t *)v120.i8);
          vst4q_f32(v153, *(float32x4x4_t *)_Q6.f32);
          v74 += 8;
          unsigned __int8 v68 = v152;
        }
        while (v74 < v70);
        unint64_t v154 = v175;
        uint64_t v25 = v190;
        unint64_t v12 = v191;
        uint64_t v30 = v188;
        uint64_t v27 = v189;
        _S23 = v186;
        _S19 = v187;
        _S25 = v184;
        _S24 = v185;
        _S27 = v182;
        _S26 = v183;
        _S8 = v180;
        _S28 = v181;
        _S10 = v178;
        _S9 = v179;
        unsigned __int8 v68 = v193;
        uint64_t v47 = v194;
        uint64_t v56 = v177;
        uint64_t v69 = v192;
        uint16x4_t v73 = (float *)&unk_193E7D000;
      }
      unint64_t v155 = v12 - v154;
      if (v12 > v154)
      {
        do
        {
          _Q6.i8[0] = *((unsigned char *)v77 + v210[0]);
          _Q7.i8[0] = *((unsigned char *)v77 + v30);
          _D16.i8[0] = *((unsigned char *)v77 + v31);
          _H6 = *(_WORD *)(result + 2 * llroundf(fminf(fmaxf(_S22 * (float)_Q6.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(result + 2 * llroundf(fminf(fmaxf(_S22 * (float)_Q7.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H16 = *(_WORD *)(result + 2 * llroundf(fminf(fmaxf(_S22 * (float)_D16.u32[0], 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          float v162 = (float)((float)((float)(v207 * _S7) + (float)(_S10 * _S6)) + (float)(v206 * _S16))
               + (float)(_S20 * fmaxf(_S6, fmaxf(_S7, _S16)));
          float v163 = 8191.0;
          if (v162 <= 8191.0)
          {
            float v163 = v162;
            if (v162 < 0.0) {
              float v163 = 0.0;
            }
          }
          unsigned int v164 = *((unsigned __int8 *)v77 + v32);
          int8x16x2_t v77 = (uint64_t *)((char *)v77 + 4);
          _H17 = *(_WORD *)(v61 + 2 * llroundf(v163));
          __asm { FCVT            S17, H17 }
          float v167 = _S6 * _S17;
          _S7 = _S7 * _S17;
          _S16 = _S16 * _S17;
          float v170 = (float)((float)(_S23 * _S7) + (float)(v167 * _S19)) + (float)(_S16 * _S24);
          float v171 = (float)((float)(_S26 * _S7) + (float)(v167 * _S25)) + (float)(_S16 * _S27);
          _S6 = (float)((float)(_S8 * _S7) + (float)(v167 * _S28)) + (float)(_S16 * _S9);
          LOWORD(_S7) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v170, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S16) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm
          {
            FCVT            S16, H16
            FCVT            S6, H6
          }
          float v174 = v73[73];
          *(_DWORD *)short float v152 = _S7;
          v152[1] = *(float *)_D16.i32;
          _Q7.f32[0] = (float)v164 * v174;
          v152[2] = _Q6.f32[0];
          v152[3] = _Q7.f32[0];
          v152 += 4;
          --v155;
        }
        while (v155);
      }
      v69 += v25;
      unsigned __int8 v68 = (float *)((char *)v68 + v27);
      ++v47;
      _H13 = v202;
      _H11 = v203;
      _H1 = v200;
      _H15 = v201;
      _H3 = v198;
      _H2 = v199;
      _Q6.i32[0] = v196;
      _H4 = v197;
      _Q7.i32[0] = v195;
    }
    while (v47 != v56);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = **((void **)result + 8);
    uint64_t v16 = **((void **)result + 17);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    uint64_t v26 = v13 + 164;
    uint64_t v27 = v13 + 16548;
    uint64_t v28 = v13 + 32932;
    float v29 = *(float *)(v13 + 104);
    float v30 = *(float *)(v13 + 108);
    float v31 = *(float *)(v13 + 112);
    float v32 = *(float *)(v13 + 116);
    float v33 = *(float *)(v13 + 120);
    uint64_t v34 = *((void *)result + 14);
    unint64_t v35 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v36 = *(void *)(result + 36);
    uint64_t v37 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v38 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v39 = **((void **)result + 16) + v35 * v16;
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 155);
    uint64_t v40 = *(unsigned __int8 *)(v13 + 154);
    uint64_t v41 = v39 + 16 * v34;
    uint64_t v42 = *v14 + v15 * v11 + 4 * v36;
    do
    {
      if (v10)
      {
        uint64_t v43 = v10;
        uint64_t v44 = v42;
        uint64_t v45 = v41;
        do
        {
          LOBYTE(_S25) = *(unsigned char *)(v44 + v40);
          LOBYTE(v3) = result[v44];
          LOBYTE(_S27) = *(unsigned char *)(v44 + v38);
          _H25 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)_S25, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v17 * (float)_S27, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          float v56 = (float)((float)((float)(v31 * _S26) + (float)(v30 * _S25)) + (float)(v32 * _S27))
              + (float)(v33 * fmaxf(_S25, fmaxf(_S26, _S27)));
          float v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            float v57 = v56;
            if (v56 < 0.0) {
              float v57 = 0.0;
            }
          }
          unsigned int v58 = *(unsigned __int8 *)(v44 + v37);
          v44 += 4;
          _H28 = *(_WORD *)(v27 + 2 * llroundf(v57));
          __asm { FCVT            S28, H28 }
          float v61 = _S25 * _S28;
          _S26 = _S26 * _S28;
          _S27 = _S27 * _S28;
          float v64 = (float)((float)(v19 * _S26) + (float)(v61 * v18)) + (float)(_S27 * v20);
          float v65 = (float)((float)(v22 * _S26) + (float)(v61 * v21)) + (float)(_S27 * v23);
          _S25 = (float)((float)(v25 * _S26) + (float)(v61 * v24)) + (float)(_S27 * v29);
          LOWORD(_S26) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          LOWORD(_S27) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          LOWORD(_S25) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          *(_DWORD *)uint64_t v45 = _S26;
          *(_DWORD *)(v45 + 4) = _S27;
          float v3 = (float)v58 * 0.0039216;
          *(_DWORD *)(v45 + 8) = _S25;
          *(float *)(v45 + 12) = v3;
          v45 += 16;
          --v43;
        }
        while (v43);
      }
      v42 += v15;
      v41 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_RGfA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

_WORD *vt_Copy_BGRA_TRC_Mat_TRC_RGfA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, float16x4_t _D2, double a6, float16x4_t _D4)
{
  uint64_t v10 = 0;
  unint64_t v11 = *(void *)(a1 + 20);
  uint64_t v12 = *(void *)(a1 + 36);
  uint64_t v13 = *(void *)(a1 + 44);
  uint64_t v14 = *(void *)(a1 + 28);
  unint64_t v15 = *a1;
  unint64_t v16 = v14 * a2 / v15;
  uint64_t v17 = v16 + v13;
  unint64_t v18 = (v14 + v14 * a2) / v15;
  uint64_t v19 = v18 + v13;
  uint64_t v20 = *((void *)a1 + 14);
  unint64_t v21 = *((void *)a1 + 13) * a2;
  uint64_t v22 = *((void *)a1 + 19);
  uint64_t v23 = *((void *)a1 + 15);
  uint64_t v24 = **((void **)a1 + 8);
  uint64_t v25 = **((void **)a1 + 7);
  uint64_t v26 = **((void **)a1 + 17);
  uint64_t result = (_WORD *)**((void **)a1 + 16);
  unsigned int v28 = *(_DWORD *)(v22 + 128);
  v165[0] = *(unsigned char *)(v22 + 154);
  uint64_t v29 = *(unsigned __int8 *)(v22 + 155);
  v165[1] = *(unsigned char *)(v22 + 155);
  uint64_t v30 = *(unsigned __int8 *)(v22 + 156);
  v165[2] = *(unsigned char *)(v22 + 156);
  uint64_t v31 = *(unsigned __int8 *)(v22 + 157);
  v165[3] = *(unsigned char *)(v22 + 157);
  _S7 = *(float *)(v22 + 72);
  _S20 = *(float *)(v22 + 76);
  unint64_t v34 = v26 * (v21 / v15 + v23);
  _S25 = *(float *)(v22 + 80);
  _S26 = *(float *)(v22 + 84);
  _S27 = *(float *)(v22 + 88);
  _S28 = *(float *)(v22 + 92);
  _S31 = *(float *)(v22 + 96);
  _S19 = *(float *)(v22 + 100);
  _S16 = *(float *)(v22 + 104);
  DWORD1(_Q0) = 0;
  *((void *)&_Q0 + 1) = 0;
  long long v163 = 0u;
  long long v164 = 0u;
  do
  {
    unsigned int v43 = 0;
    char v44 = v165[v10];
    do
    {
      *((unsigned char *)&v163 + 8 * (((_BYTE)v10 + (v43 >> 3)) & 0x1F) + v43) = v44 + 4 * v43;
      ++v43;
    }
    while (v43 != 8);
    ++v10;
  }
  while (v10 != 4);
  if (v18 != v16)
  {
    uint64_t v45 = 0;
    *(float *)&_Q0 = (float)v28;
    uint64_t v46 = v19 - v17;
    uint64_t v47 = v22 + 16548;
    uint64_t v48 = v22 + 164;
    _S18 = 8191.0 / (float)v28;
    __asm
    {
      FCVT            H10, S7
      FCVT            H11, S20
      FCVT            H12, S25
      FCVT            H0, S26
      FCVT            H1, S27
      FCVT            H13, S28
      FCVT            H14, S31
      FCVT            H15, S19
      FCVT            H8, S16
    }
    float16x8_t v59 = (float *)((char *)&result[8 * v20] + v34);
    uint64_t v60 = v25 + v24 * v17 + 4 * v12;
    int v61 = v11 - 7;
    __asm { FCVT            H9, S18 }
    unint64_t v145 = v11 & 0xFFFFFFF8;
    uint64_t v146 = v46;
    v63.i64[0] = 0x9000900090009000;
    v63.i64[1] = 0x9000900090009000;
    float16x8_t v64 = (float16x8_t)vdupq_n_s16(0x1C04u);
    uint64_t v154 = v24;
    unint64_t v155 = v11;
    uint64_t v153 = v26;
    float v151 = _S20;
    float v152 = _S7;
    float v149 = _S26;
    float v150 = _S25;
    float v147 = _S28;
    float v148 = _S27;
    short float v161 = _H10;
    short float v162 = _H1;
    short float v159 = _H15;
    short float v160 = _H14;
    short float v157 = _H8;
    short float v158 = _H9;
    do
    {
      if ((int)v11 < 8)
      {
        unint64_t v130 = 0;
        uint64_t v128 = v59;
        unsigned __int8 v68 = (uint64_t *)v60;
      }
      else
      {
        float v156 = v59;
        int v65 = 0;
        int8x8_t v67 = *(int8x8_t *)((char *)&v163 + 8);
        int8x8_t v66 = (int8x8_t)v163;
        unsigned __int8 v68 = (uint64_t *)v60;
        int8x8_t v70 = *(int8x8_t *)((char *)&v164 + 8);
        int8x8_t v69 = (int8x8_t)v164;
        do
        {
          v166.val[0].i64[0] = *v68;
          uint64_t v71 = v68[1];
          v72.i64[0] = v68[2];
          uint64_t v73 = v68[3];
          v68 += 4;
          v166.val[0].i64[1] = v71;
          v72.i64[1] = v73;
          v166.val[1] = v72;
          int8x8_t v74 = vqtbl2_s8(v166, v66);
          int8x8_t v75 = vqtbl2_s8(v166, v69);
          int8x8_t v76 = vqtbl2_s8(v166, v67);
          *(int8x8_t *)v77.i8 = vzip1_s8(v74, 0);
          v77.u64[1] = (unint64_t)vzip2_s8(v74, 0);
          *(int8x8_t *)v78.i8 = vzip1_s8(v76, 0);
          v78.u64[1] = (unint64_t)vzip2_s8(v76, 0);
          *(int8x8_t *)v79.i8 = vzip1_s8(v75, 0);
          float16x8_t v80 = vcvtq_f16_u16(v78);
          v79.u64[1] = (unint64_t)vzip2_s8(v75, 0);
          float16x8_t v81 = vmulq_n_f16(vcvtq_f16_u16(v77), _H9);
          float16x8_t v82 = vmulq_n_f16(vcvtq_f16_u16(v79), _H9);
          float16x8_t v83 = vmulq_n_f16(v80, _H9);
          uint16x8_t v84 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v81, (float16x8_t)0), v63));
          float16x8_t v85 = (float16x8_t)vmovl_high_u16(v84);
          *(void *)&long long v86 = v85.u32[2];
          *((void *)&v86 + 1) = v85.u32[3];
          long long v87 = v86;
          *(void *)&long long v86 = v85.u32[0];
          *((void *)&v86 + 1) = v85.u32[1];
          long long v88 = v86;
          uint32x4_t v89 = vmovl_u16(*(uint16x4_t *)v84.i8);
          *((void *)&v86 + 1) = v89.u32[3];
          uint64_t v90 = v89.u32[2];
          v85.i16[0] = *(_WORD *)(v48 + 2 * v89.u32[0]);
          float16x8_t v91 = (__int16 *)(v48 + 2 * v89.u32[1]);
          uint16x8_t v92 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v83, (float16x8_t)0), v63));
          uint32x4_t v93 = vmovl_high_u16(v92);
          float16x8_t v94 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v92.i8);
          v94.i16[0] = *(_WORD *)(v48 + 2 * v94.u32[0]);
          float16x8_t v95 = (__int16 *)(v48 + 2 * v93.u32[0]);
          long long v96 = (__int16 *)(v48 + 2 * v93.u32[1]);
          v85.i16[1] = *v91;
          long long v97 = (__int16 *)(v48 + 2 * v93.u32[2]);
          long long v98 = (__int16 *)(v48 + 2 * v93.u32[3]);
          v94.i16[1] = *(_WORD *)(v48 + 2 * v94.u32[1]);
          v85.i16[2] = *(_WORD *)(v48 + 2 * v90);
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v82, (float16x8_t)0), v63));
          uint32x4_t v100 = vmovl_high_u16(v99);
          v94.i16[2] = *(_WORD *)(v48 + 2 * v94.u32[2]);
          float16x8_t v101 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v99.i8);
          v85.i16[3] = *(_WORD *)(v48 + 2 * *((void *)&v86 + 1));
          v94.i16[3] = *(_WORD *)(v48 + 2 * v94.u32[3]);
          v101.i16[0] = *(_WORD *)(v48 + 2 * v101.u32[0]);
          v85.i16[4] = *(_WORD *)(v48 + 2 * v88);
          v94.i16[4] = *v95;
          v85.i16[5] = *(_WORD *)(v48 + 2 * *((void *)&v88 + 1));
          v94.i16[5] = *v96;
          v101.i16[1] = *(_WORD *)(v48 + 2 * v101.u32[1]);
          v85.i16[6] = *(_WORD *)(v48 + 2 * v87);
          v101.i16[2] = *(_WORD *)(v48 + 2 * v101.u32[2]);
          v101.i16[3] = *(_WORD *)(v48 + 2 * v101.u32[3]);
          v94.i16[6] = *v97;
          v101.i16[4] = *(_WORD *)(v48 + 2 * v100.u32[0]);
          v101.i16[5] = *(_WORD *)(v48 + 2 * v100.u32[1]);
          v85.i16[7] = *(_WORD *)(v48 + 2 * *((void *)&v87 + 1));
          v101.i16[6] = *(_WORD *)(v48 + 2 * v100.u32[2]);
          v101.i16[7] = *(_WORD *)(v48 + 2 * v100.u32[3]);
          v94.i16[7] = *v98;
          *(int8x8_t *)v100.i8 = vqtbl2_s8(v166, v70);
          v166.val[0] = (int8x16_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v85, _H10), v94, *(short float *)&_Q11), v101, *(short float *)&_Q12);
          float16x8_t v102 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v85, *(short float *)&_Q0), v94, _H1), v101, *(short float *)&_Q13);
          float16x8_t v103 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v101, v157), v94, _H15), v85, _H14);
          v166.val[0] = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v166.val[0], (float16x8_t)0), v63));
          v166.val[1] = (int8x16_t)vmovl_high_u16((uint16x8_t)v166.val[0]);
          *(void *)&long long v86 = v166.val[1].u32[2];
          *((void *)&v86 + 1) = v166.val[1].u32[3];
          long long v104 = v86;
          *(void *)&long long v86 = v166.val[1].u32[0];
          v166.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v166.val[0].i8);
          LOWORD(a6) = *(_WORD *)(v47 + 2 * v166.val[0].u32[0]);
          _D2.i16[0] = *(_WORD *)(v47 + 2 * v86);
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v102, (float16x8_t)0), v63));
          uint32x4_t v106 = vmovl_high_u16(v105);
          long long v107 = (__int16 *)(v47 + 2 * v104);
          uint32x4_t v108 = vmovl_u16(*(uint16x4_t *)v105.i8);
          LOWORD(v104) = *(_WORD *)(v47 + 2 * v108.u32[0]);
          uint64_t v109 = v106.u32[1];
          uint16x8_t v110 = (__int16 *)(v47 + 2 * v166.val[1].u32[1]);
          _D4.i16[0] = *(_WORD *)(v47 + 2 * v106.u32[0]);
          uint64_t v111 = v106.u32[3];
          float16x8_t v112 = (__int16 *)(v47 + 2 * v106.u32[2]);
          uint16x8_t v113 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v103, (float16x8_t)0), v63));
          uint32x4_t v114 = vmovl_high_u16(v113);
          *(void *)&long long v86 = v114.u32[2];
          *((void *)&v86 + 1) = v114.u32[3];
          long long v115 = v86;
          *((void *)&v86 + 1) = v114.u32[1];
          uint16x8_t v116 = (uint16x8_t)vmovl_u16(*(uint16x4_t *)v113.i8);
          LOWORD(v87) = *(_WORD *)(v47 + 2 * v116.u32[0]);
          uint64_t v117 = (__int16 *)(v47 + 2 * v109);
          uint64_t v118 = (_WORD *)(v47 + 2 * v116.u32[2]);
          uint32x4_t v119 = (__int16 *)(v47 + 2 * v111);
          v85.i16[0] = *(_WORD *)(v47 + 2 * v114.u32[0]);
          uint64_t result = (_WORD *)(v47 + 2 * v116.u32[1]);
          float16x8_t v120 = (_WORD *)(v47 + 2 * v116.u32[3]);
          *(int8x8_t *)v116.i8 = vzip1_s8(*(int8x8_t *)v100.i8, 0);
          v116.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v100.i8, 0);
          float16x8_t v121 = (__int16 *)(v47 + 2 * v115);
          float16x8_t v122 = (__int16 *)(v47 + 2 * *((void *)&v115 + 1));
          int8x16_t v123 = (int8x16_t)vmulq_f16(vcvtq_f16_u16(v116), v64);
          v167.val[3] = vcvtq_f32_f16(*(float16x4_t *)v123.i8);
          long long v124 = _Q11;
          long long v125 = _Q0;
          long long v126 = _Q12;
          long long v127 = _Q13;
          v168.val[3] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL));
          WORD1(a6) = *(_WORD *)(v47 + 2 * v166.val[0].u32[1]);
          WORD2(a6) = *(_WORD *)(v47 + 2 * v166.val[0].u32[2]);
          WORD1(v104) = *(_WORD *)(v47 + 2 * v108.u32[1]);
          HIWORD(a6) = *(_WORD *)(v47 + 2 * v166.val[0].u32[3]);
          WORD2(v104) = *(_WORD *)(v47 + 2 * v108.u32[2]);
          WORD1(v87) = *result;
          WORD3(v104) = *(_WORD *)(v47 + 2 * v108.u32[3]);
          WORD2(v87) = *v118;
          _D2.i16[1] = *v110;
          WORD3(v87) = *v120;
          _D2.i16[2] = *v107;
          _D4.i16[1] = *v117;
          _D2.i16[3] = *(_WORD *)(v47 + 2 * *((void *)&v104 + 1));
          v167.val[0] = vcvtq_f32_f16(*(float16x4_t *)&a6);
          _D4.i16[2] = *v112;
          _D4.i16[3] = *v119;
          v167.val[1] = vcvtq_f32_f16(*(float16x4_t *)&v104);
          v167.val[2] = vcvtq_f32_f16(*(float16x4_t *)&v87);
          v85.i16[1] = *(_WORD *)(v47 + 2 * *((void *)&v86 + 1));
          v85.i16[2] = *v121;
          v168.val[0] = vcvtq_f32_f16(_D2);
          v168.val[1] = vcvtq_f32_f16(_D4);
          v85.i16[3] = *v122;
          v168.val[2] = vcvtq_f32_f16(*(float16x4_t *)v85.i8);
          uint64_t v128 = v59 + 32;
          vst4q_f32(v59, v167);
          float v129 = v59 + 16;
          vst4q_f32(v129, v168);
          _Q13 = v127;
          _Q12 = v126;
          _Q0 = v125;
          _H14 = v160;
          _H10 = v161;
          _H1 = v162;
          _Q11 = v124;
          _H9 = v158;
          _H15 = v159;
          v65 += 8;
          float16x8_t v59 = v128;
        }
        while (v65 < v61);
        unint64_t v130 = v145;
        uint64_t v46 = v146;
        uint64_t v24 = v154;
        unint64_t v11 = v155;
        uint64_t v26 = v153;
        _S20 = v151;
        _S7 = v152;
        _S26 = v149;
        _S25 = v150;
        _S28 = v147;
        _S27 = v148;
        float16x8_t v59 = v156;
      }
      unint64_t v131 = v11 - v130;
      if (v11 > v130)
      {
        do
        {
          _D2.i8[0] = *((unsigned char *)v68 + v29);
          LOBYTE(a6) = *((unsigned char *)v68 + v165[0]);
          _D4.i8[0] = *((unsigned char *)v68 + v30);
          unsigned int v132 = llroundf(fminf(fmaxf(_S18 * (float)_D2.u32[0], 0.0), 8191.0));
          _H2 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S18 * (float)LODWORD(a6), 0.0), 8191.0)));
          _H3 = *(_WORD *)(v48 + 2 * v132);
          __asm
          {
            FCVT            S3, H3
            FCVT            S2, H2
          }
          _H4 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S18 * (float)_D4.u32[0], 0.0), 8191.0)));
          _S5 = (float)(_S20 * _S3) + (float)(_S2 * _S7);
          float v139 = (float)(_S27 * _S3) + (float)(_S2 * _S26);
          *(float *)&unsigned int v140 = _S19 * _S3;
          float v141 = *(float *)&v140 + (float)(_S2 * _S31);
          LOBYTE(v140) = *((unsigned char *)v68 + v31);
          unsigned __int8 v68 = (uint64_t *)((char *)v68 + 4);
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(_S5 + (float)(_S4 * _S25), 0.0), 8191.0)));
          _S2 = fmaxf(v141 + (float)(_S4 * _S16), 0.0);
          LOWORD(_S4) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v139 + (float)(_S4 * _S28), 0.0), 8191.0)));
          LOWORD(_S2) = *(_WORD *)(v47 + 2 * llroundf(fminf(_S2, 8191.0)));
          __asm
          {
            FCVT            S5, H5
            FCVT            S4, H4
            FCVT            S2, H2
          }
          *(_DWORD *)uint64_t v128 = _S5;
          v128[1] = *(float *)_D4.i32;
          *(float *)&a6 = (float)v140 * 0.0039216;
          v128[2] = *(float *)_D2.i32;
          v128[3] = *(float *)&a6;
          v128 += 4;
          --v131;
        }
        while (v131);
      }
      v60 += v24;
      float16x8_t v59 = (float *)((char *)v59 + v26);
      ++v45;
    }
    while (v45 != v46);
  }
  return result;
}

uint64_t vt_Copy_BGRA_TRC_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_TRC_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = **((void **)result + 8);
    uint64_t v16 = **((void **)result + 17);
    float v17 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v18 = *(float *)(v13 + 72);
    float v19 = *(float *)(v13 + 76);
    float v20 = *(float *)(v13 + 80);
    float v21 = *(float *)(v13 + 84);
    float v22 = *(float *)(v13 + 88);
    float v23 = *(float *)(v13 + 92);
    float v24 = *(float *)(v13 + 96);
    float v25 = *(float *)(v13 + 100);
    float v26 = *(float *)(v13 + 104);
    uint64_t v27 = v13 + 164;
    uint64_t v28 = v13 + 16548;
    uint64_t v29 = *((void *)result + 14);
    unint64_t v30 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v31 = *(void *)(result + 36);
    uint64_t v32 = *(unsigned __int8 *)(v13 + 157);
    uint64_t v33 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v34 = **((void **)result + 16) + v30 * v16;
    uint64_t v35 = *(unsigned __int8 *)(v13 + 155);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 154);
    uint64_t v36 = v34 + 16 * v29;
    uint64_t v37 = *v14 + v15 * v11 + 4 * v31;
    do
    {
      if (v10)
      {
        uint64_t v38 = v10;
        uint64_t v39 = v37;
        uint64_t v40 = v36;
        do
        {
          LOBYTE(v2) = result[v39];
          LOBYTE(v3) = *(unsigned char *)(v39 + v35);
          LOBYTE(_S23) = *(unsigned char *)(v39 + v33);
          unsigned int v41 = llroundf(fminf(fmaxf(v17 * (float)LODWORD(v2), 0.0), 8191.0));
          _S21 = v17 * (float)_S23;
          _H23 = *(_WORD *)(v27 + 2 * v41);
          __asm { FCVT            S23, H23 }
          _H22 = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(v17 * (float)LODWORD(v3), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S21) = *(_WORD *)(v27 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _S24 = (float)((float)(v19 * _S22) + (float)(_S23 * v18)) + (float)(_S21 * v20);
          float v53 = (float)((float)(v22 * _S22) + (float)(_S23 * v21)) + (float)(_S21 * v23);
          *(float *)&unsigned int v54 = (float)(v25 * _S22) + (float)(_S23 * v24);
          float v55 = *(float *)&v54 + (float)(_S21 * v26);
          LOBYTE(v54) = *(unsigned char *)(v39 + v32);
          v39 += 4;
          LOWORD(_S23) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          LOWORD(_S24) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v53, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          unsigned int v56 = llroundf(fminf(fmaxf(v55, 0.0), 8191.0));
          __asm { FCVT            S21, H24 }
          LOWORD(_S24) = *(_WORD *)(v28 + 2 * v56);
          __asm { FCVT            S24, H24 }
          float v3 = (float)v54;
          *(_DWORD *)uint64_t v40 = _S23;
          *(_DWORD *)(v40 + 4) = _S21;
          float v2 = v3 * 0.0039216;
          *(_DWORD *)(v40 + 8) = _S24;
          *(float *)(v40 + 12) = v3 * 0.0039216;
          v40 += 16;
          --v38;
        }
        while (v38);
      }
      v37 += v15;
      v36 += v16;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_RGfA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_RGfA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_BGRA_rgb_RGfA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v11 = 0;
  unint64_t v12 = *(void *)(a1 + 20);
  uint64_t v13 = *(void *)(a1 + 36);
  uint64_t v14 = *(void *)(a1 + 44);
  uint64_t v15 = *(void *)(a1 + 28);
  unint64_t v16 = *a1;
  unint64_t v17 = v15 * a2 / v16;
  uint64_t v18 = v17 + v14;
  unint64_t v19 = (v15 + v15 * a2) / v16;
  uint64_t v20 = v19 + v14;
  uint64_t v21 = *((void *)a1 + 14);
  unint64_t v22 = *((void *)a1 + 13) * a2;
  uint64_t v23 = *((void *)a1 + 19);
  uint64_t v24 = *((void *)a1 + 15);
  uint64_t v25 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v26 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v27 = **((void **)a1 + 8);
  uint64_t result = **((void **)a1 + 7);
  uint64_t v29 = *v26;
  uint64_t v30 = *v25;
  unsigned int v31 = *(_DWORD *)(v23 + 128);
  uint64_t v32 = v22 / v16 + v24;
  uint64_t v33 = v27 * v18;
  uint64_t v34 = *v26 * v32;
  v70[0] = *(unsigned char *)(v23 + 154);
  uint64_t v35 = *(unsigned __int8 *)(v23 + 155);
  v70[1] = *(unsigned char *)(v23 + 155);
  uint64_t v36 = *(unsigned __int8 *)(v23 + 156);
  v70[2] = *(unsigned char *)(v23 + 156);
  uint64_t v37 = *(unsigned __int8 *)(v23 + 157);
  v70[3] = v37;
  long long v68 = 0u;
  *(_OWORD *)int8x8_t v69 = 0u;
  do
  {
    unsigned int v38 = 0;
    char v39 = v70[v11];
    do
    {
      *((unsigned char *)&v69[((v11 + (v38 >> 3)) & 0x1F) - 2] + v38) = v39 + 4 * v38;
      ++v38;
    }
    while (v38 != 8);
    ++v11;
  }
  while (v11 != 4);
  if (v19 != v17)
  {
    uint64_t v40 = 0;
    uint64_t v41 = v20 - v18;
    _S0 = 1.0 / (float)v31;
    uint64_t v43 = v30 + v34 + 16 * v21;
    uint64_t v44 = result + v33 + 4 * v13;
    uint64_t result = (v12 - 7);
    __asm { FCVT            H1, S0 }
    float16x8_t v50 = (float16x8_t)vdupq_n_s16(0x1C04u);
    do
    {
      if ((int)v12 < 8)
      {
        unint64_t v66 = 0;
        float16x8_t v64 = (float *)v43;
        uint16x8_t v52 = (uint64_t *)v44;
      }
      else
      {
        int v51 = 0;
        a9 = *((double *)&v68 + 1);
        a8 = *(double *)&v68;
        uint16x8_t v52 = (uint64_t *)v44;
        float v53 = (float *)v43;
        int8x8_t v10 = *(int8x8_t *)&v69[1];
        a10 = v69[0];
        do
        {
          v71.val[0].i64[0] = *v52;
          uint64_t v54 = v52[1];
          v55.i64[0] = v52[2];
          uint64_t v56 = v52[3];
          v52 += 4;
          v71.val[0].i64[1] = v54;
          v55.i64[1] = v56;
          v71.val[1] = (int8x16_t)v55;
          int8x8_t v57 = vqtbl2_s8(v71, *(int8x8_t *)&a8);
          int8x8_t v58 = vqtbl2_s8(v71, *(int8x8_t *)&a9);
          int8x8_t v59 = vqtbl2_s8(v71, *(int8x8_t *)&a10);
          *(int8x8_t *)v71.val[0].i8 = vqtbl2_s8(v71, v10);
          *(int8x8_t *)v71.val[1].i8 = vzip1_s8(v57, 0);
          v71.val[1].u64[1] = (unint64_t)vzip2_s8(v57, 0);
          *(int8x8_t *)v55.i8 = vzip1_s8(v58, 0);
          v55.u64[1] = (unint64_t)vzip2_s8(v58, 0);
          *(int8x8_t *)v60.i8 = vzip1_s8(v59, 0);
          v60.u64[1] = (unint64_t)vzip2_s8(v59, 0);
          v71.val[1] = (int8x16_t)vmulq_n_f16(vcvtq_f16_u16((uint16x8_t)v71.val[1]), _H1);
          int8x16_t v61 = (int8x16_t)vmulq_n_f16(vcvtq_f16_u16(v55), _H1);
          *(int8x8_t *)v62.i8 = vzip1_s8(*(int8x8_t *)v71.val[0].i8, 0);
          int8x16_t v63 = (int8x16_t)vmulq_n_f16(vcvtq_f16_u16(v60), _H1);
          v62.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v71.val[0].i8, 0);
          v71.val[0] = (int8x16_t)vmulq_f16(vcvtq_f16_u16(v62), v50);
          v72.val[3] = vcvtq_f32_f16(*(float16x4_t *)v71.val[0].i8);
          v73.val[3] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v71.val[0], v71.val[0], 8uLL));
          v72.val[0] = vcvtq_f32_f16(*(float16x4_t *)v71.val[1].i8);
          v72.val[1] = vcvtq_f32_f16(*(float16x4_t *)v61.i8);
          v72.val[2] = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
          v73.val[0] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v71.val[1], v71.val[1], 8uLL));
          v73.val[1] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL));
          v73.val[2] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
          float16x8_t v64 = v53 + 32;
          vst4q_f32(v53, v72);
          int v65 = v53 + 16;
          vst4q_f32(v65, v73);
          v51 += 8;
          float v53 = v64;
        }
        while (v51 < (int)result);
        unint64_t v66 = v12 & 0xFFFFFFF8;
      }
      _CF = v12 >= v66;
      unint64_t v67 = v12 - v66;
      if (v67 != 0 && _CF)
      {
        do
        {
          LOBYTE(a8) = *((unsigned char *)v52 + v70[0]);
          *(float *)&a8 = _S0 * (float)LODWORD(a8);
          LOBYTE(a9) = *((unsigned char *)v52 + v35);
          *(float *)&a9 = _S0 * (float)LODWORD(a9);
          LOBYTE(a10) = *((unsigned char *)v52 + v36);
          *(float *)&a10 = _S0 * (float)LODWORD(a10);
          v10.i8[0] = *((unsigned char *)v52 + v37);
          uint16x8_t v52 = (uint64_t *)((char *)v52 + 4);
          *(float *)v10.i32 = (float)v10.u32[0] * 0.0039216;
          *float16x8_t v64 = *(float *)&a8;
          v64[1] = *(float *)&a9;
          v64[2] = *(float *)&a10;
          v64[3] = *(float *)v10.i32;
          v64 += 4;
          --v67;
        }
        while (v67);
      }
      v44 += v27;
      v43 += v29;
      ++v40;
    }
    while (v40 != v41);
  }
  return result;
}

uint64_t vt_Copy_BGRA_rgb_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_BGRA_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_BGRA_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *((void *)result + 19);
    uint64_t v17 = **((void **)result + 8);
    uint64_t v18 = **((void **)result + 17);
    float v19 = 1.0 / (float)*(unsigned int *)(v16 + 128);
    unint64_t v20 = *((void *)result + 13) * a2 / v9 + *((void *)result + 15);
    uint64_t v21 = *(unsigned __int8 *)(v16 + 157);
    uint64_t v22 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v23 = *(unsigned __int8 *)(v16 + 155);
    uint64_t v24 = *(unsigned __int8 *)(v16 + 154);
    uint64_t v25 = **((void **)result + 16) + v20 * v18 + 16 * *((void *)result + 14);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v17 * v14 + 4 * *(void *)(result + 36));
    do
    {
      if (v13)
      {
        uint64_t v26 = v13;
        uint64_t v27 = result;
        uint64_t v28 = (float *)v25;
        do
        {
          LOBYTE(a5) = v27[v24];
          LOBYTE(a6) = v27[v23];
          a6 = v19 * (float)LODWORD(a6);
          LOBYTE(a7) = v27[v22];
          a7 = v19 * (float)LODWORD(a7);
          LOBYTE(a8) = v27[v21];
          v27 += 4;
          a8 = (float)LODWORD(a8);
          *uint64_t v28 = v19 * (float)LODWORD(a5);
          v28[1] = a6;
          a5 = a8 * 0.0039216;
          v28[2] = a7;
          v28[3] = a8 * 0.0039216;
          v28 += 4;
          --v26;
        }
        while (v26);
      }
      result += v17;
      v25 += v18;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_TRC_Tone_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = 2 * *result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    unint64_t v11 = 0;
    unint64_t v12 = *(void *)(result + 20);
    uint64_t v13 = *(void *)(result + 44) + 2 * v9;
    unint64_t v167 = 2 * v10 - 2 * v9;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 17);
    uint64_t v16 = **((void **)result + 8);
    uint64_t v17 = *v15;
    uint64_t v18 = v15[1];
    uint64_t v19 = v15[2];
    float v20 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    LOWORD(a5) = *(_WORD *)(v14 + 144);
    float v21 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 146);
    float v22 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 148);
    float v23 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 150);
    *(float *)&unsigned int v24 = (float)LODWORD(a6);
    float v189 = v22;
    float v190 = *(float *)&v24;
    LOWORD(v24) = *(_WORD *)(v14 + 152);
    float v187 = *(float *)(v14 + 36);
    float v188 = (float)v24;
    float v185 = *(float *)(v14 + 44);
    float v186 = *(float *)(v14 + 40);
    float v183 = *(float *)(v14 + 52) * 0.25;
    float v184 = *(float *)(v14 + 48) * 0.25;
    float v181 = *(float *)(v14 + 60) * 0.25;
    float v182 = *(float *)(v14 + 56) * 0.25;
    float v179 = *(float *)(v14 + 72);
    float v180 = *(float *)(v14 + 64) * 0.25;
    float v25 = *(float *)(v14 + 68) * 0.25;
    float v177 = *(float *)(v14 + 76);
    float v178 = v25;
    float v175 = *(float *)(v14 + 84);
    float v176 = *(float *)(v14 + 80);
    float v173 = *(float *)(v14 + 92);
    float v174 = *(float *)(v14 + 88);
    float v26 = *(float *)(v14 + 96);
    float v171 = *(float *)(v14 + 100);
    float v172 = v26;
    float v27 = *(float *)(v14 + 104);
    float v28 = *(float *)(v14 + 108);
    float v170 = v27;
    uint64_t v29 = v14 + 164;
    uint64_t v30 = v14 + 16548;
    uint64_t v31 = v14 + 32932;
    float v33 = *(float *)(v14 + 112);
    float v32 = *(float *)(v14 + 116);
    float v34 = *(float *)(v14 + 120);
    uint64_t v35 = *((void *)result + 14);
    uint64_t v36 = (void *)*((void *)result + 16);
    uint64_t v37 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v8);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v16 * v13 + 8 * *(void *)(result + 36));
    uint64_t v38 = v36[1];
    uint64_t v39 = (unsigned char *)(*v36 + v37 * v17 + v35);
    uint64_t v40 = v36[2];
    if (v40) {
      uint64_t v41 = (unsigned char *)(v40 + v37 * v19 + v35);
    }
    else {
      uint64_t v41 = 0;
    }
    uint64_t v42 = *(unsigned __int8 *)(v14 + 157);
    uint64_t v43 = *(unsigned __int8 *)(v14 + 156);
    if (v37 >= 0) {
      uint64_t v44 = v37;
    }
    else {
      uint64_t v44 = v37 + 1;
    }
    uint64_t v164 = v18;
    uint64_t v165 = v17;
    uint64_t v45 = *(unsigned __int8 *)(v14 + 155);
    uint64_t v46 = *(unsigned __int8 *)(v14 + 154);
    uint64_t v47 = v38 + (v44 >> 1) * v18 + v35;
    float v168 = *(float *)(v14 + 112);
    float v169 = *(float *)(v14 + 108);
    uint64_t v166 = v16;
    uint64_t v163 = v19;
    do
    {
      uint64_t v48 = &v41[v19];
      int8x8_t v49 = &v39[v17];
      float16x8_t v50 = &result[v16];
      if (v12)
      {
        unint64_t v51 = 0;
        uint16x8_t v52 = &v41[v19];
        float v53 = &v39[v17];
        uint64_t v54 = &result[v16];
        do
        {
          LOWORD(v27) = *(_WORD *)&result[2 * v46];
          LOWORD(v26) = *(_WORD *)&result[2 * v45];
          LOWORD(v25) = *(_WORD *)&result[2 * v43];
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v27), 0.0), 8191.0)));
          float v56 = v20 * (float)LODWORD(v25);
          __asm { FCVT            S14, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v26), 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v56, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          float v66 = fmaxf(_S14, fmaxf(_S15, _S18));
          float v67 = (float)((float)((float)(v33 * _S15) + (float)(v28 * _S14)) + (float)(v32 * _S18)) + (float)(v34 * v66);
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = (float)((float)((float)(v33 * _S15) + (float)(v28 * _S14)) + (float)(v32 * _S18)) + (float)(v34 * v66);
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          LOWORD(v67) = *(_WORD *)&result[2 * v46 + 8];
          LOWORD(v66) = *(_WORD *)&result[2 * v45 + 8];
          LOWORD(v56) = *(_WORD *)&result[2 * v43 + 8];
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v67), 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v66), 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v56), 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          float v75 = fmaxf(_S20, fmaxf(_S21, _S22));
          float v76 = (float)((float)((float)(v33 * _S21) + (float)(v28 * _S20)) + (float)(v32 * _S22)) + (float)(v34 * v75);
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = (float)((float)((float)(v33 * _S21) + (float)(v28 * _S20)) + (float)(v32 * _S22)) + (float)(v34 * v75);
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          LOWORD(v76) = *(_WORD *)&v54[2 * v46];
          LOWORD(v75) = *(_WORD *)&v54[2 * v45];
          *(float *)&unsigned int v78 = (float)LODWORD(v75);
          _S6 = v20 * *(float *)&v78;
          LOWORD(v78) = *(_WORD *)&v54[2 * v43];
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v76), 0.0), 8191.0)));
          float v81 = v20 * (float)v78;
          __asm { FCVT            S5, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S6) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S7, H6 }
          float v86 = (float)((float)((float)(v33 * _S3) + (float)(v28 * _S5)) + (float)(v32 * _S7))
              + (float)(v34 * fmaxf(_S5, fmaxf(_S3, _S7)));
          float v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          LOWORD(v86) = *(_WORD *)&v54[2 * v46 + 8];
          LOWORD(v6) = *(_WORD *)&v54[2 * v45 + 8];
          *(float *)&unsigned int v88 = (float)v6;
          _S23 = v20 * *(float *)&v88;
          LOWORD(v88) = *(_WORD *)&v54[2 * v43 + 8];
          _H6 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v20 * (float)LODWORD(v86), 0.0), 8191.0)));
          float v91 = v20 * (float)v88;
          __asm { FCVT            S17, H6 }
          _H6 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S23) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          float v96 = (float)((float)((float)(v33 * _S6) + (float)(v28 * _S17)) + (float)(v32 * _S23))
              + (float)(v34 * fmaxf(_S17, fmaxf(_S6, _S23)));
          float v97 = 8191.0;
          if (v96 <= 8191.0)
          {
            float v97 = v96;
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          if (v41)
          {
            char v98 = llroundf((float)*(unsigned __int16 *)&result[2 * v42] * 0.0038911);
            char v99 = llroundf((float)*(unsigned __int16 *)&result[2 * v42 + 8] * 0.0038911);
            char v100 = llroundf((float)*(unsigned __int16 *)&v54[2 * v42] * 0.0038911);
            char v101 = llroundf((float)*(unsigned __int16 *)&v54[2 * v42 + 8] * 0.0038911);
          }
          else
          {
            char v100 = 0;
            char v98 = 0;
            char v99 = 0;
            char v101 = 0;
          }
          _H19 = *(_WORD *)(v30 + 2 * llroundf(v68));
          __asm { FCVT            S19, H19 }
          float v104 = _S14 * _S19;
          float v105 = _S15 * _S19;
          float v106 = _S18 * _S19;
          LOWORD(_S19) = *(_WORD *)(v30 + 2 * llroundf(v77));
          __asm { FCVT            S19, H19 }
          float v108 = _S20 * _S19;
          float v109 = _S21 * _S19;
          float v110 = _S22 * _S19;
          _H16 = *(_WORD *)(v30 + 2 * llroundf(v87));
          __asm { FCVT            S16, H16 }
          _S5 = _S5 * _S16;
          _S3 = _S3 * _S16;
          float v115 = _S7 * _S16;
          LOWORD(_S16) = *(_WORD *)(v30 + 2 * llroundf(v97));
          __asm { FCVT            S16, H16 }
          float v117 = _S17 * _S16;
          _S6 = _S6 * _S16;
          _S16 = _S23 * _S16;
          _S22 = (float)((float)(v177 * v105) + (float)(v104 * v179)) + (float)(v106 * v176);
          _S23 = (float)((float)(v174 * v105) + (float)(v104 * v175)) + (float)(v106 * v173);
          _S18 = (float)((float)(v171 * v105) + (float)(v104 * v172)) + (float)(v106 * v170);
          float v123 = (float)((float)(v177 * v109) + (float)(v108 * v179)) + (float)(v110 * v176);
          float v124 = (float)((float)(v174 * v109) + (float)(v108 * v175)) + (float)(v110 * v173);
          _S19 = (float)((float)(v171 * v109) + (float)(v108 * v172)) + (float)(v110 * v170);
          float v126 = (float)((float)(v177 * _S3) + (float)(_S5 * v179)) + (float)(v115 * v176);
          _S21 = (float)((float)(v174 * _S3) + (float)(_S5 * v175)) + (float)(v115 * v173);
          float v128 = (float)((float)(v171 * _S3) + (float)(_S5 * v172)) + (float)(v115 * v170);
          float v129 = (float)((float)(v177 * _S6) + (float)(v117 * v179)) + (float)(_S16 * v176);
          float v130 = (float)((float)(v174 * _S6) + (float)(v117 * v175)) + (float)(_S16 * v173);
          float v131 = (float)((float)(v171 * _S6) + (float)(v117 * v172)) + (float)(_S16 * v170);
          LOWORD(_S3) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm { FCVT            S7, H3 }
          LOWORD(_S3) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S16) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          LOWORD(_S18) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H16
            FCVT            S16, H18
          }
          LOWORD(_S18) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S20, H18 }
          LOWORD(_S18) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S19) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S21) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          LOWORD(_S22) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          LOWORD(_S23) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H22
            FCVT            S23, H23
          }
          float v144 = (float)((float)((float)(v186 * _S3) + (float)(v187 * _S7)) + (float)(v185 * _S5)) + v21;
          if (v144 < v21) {
            float v145 = v21;
          }
          else {
            float v145 = (float)((float)((float)(v186 * _S3) + (float)(v187 * _S7)) + (float)(v185 * _S5)) + v21;
          }
          BOOL v146 = v144 <= v23;
          float v147 = (float)((float)((float)(v186 * _S17) + (float)(v187 * _S6)) + (float)(v185 * _S16)) + v21;
          if (!v146) {
            float v145 = v23;
          }
          char v148 = llroundf(v145);
          if (v147 < v21) {
            float v149 = v21;
          }
          else {
            float v149 = (float)((float)((float)(v186 * _S17) + (float)(v187 * _S6)) + (float)(v185 * _S16)) + v21;
          }
          BOOL v146 = v147 <= v23;
          float v150 = (float)((float)((float)(v186 * _S18) + (float)(v187 * _S20)) + (float)(v185 * _S19)) + v21;
          if (!v146) {
            float v149 = v23;
          }
          char v151 = llroundf(v149);
          if (v150 < v21) {
            float v152 = v21;
          }
          else {
            float v152 = (float)((float)((float)(v186 * _S18) + (float)(v187 * _S20)) + (float)(v185 * _S19)) + v21;
          }
          BOOL v146 = v150 <= v23;
          float v153 = (float)((float)((float)(v186 * _S22) + (float)(v187 * _S21)) + (float)(v185 * _S23)) + v21;
          if (!v146) {
            float v152 = v23;
          }
          char v154 = llroundf(v152);
          if (v153 < v21) {
            float v155 = v21;
          }
          else {
            float v155 = (float)((float)((float)(v186 * _S22) + (float)(v187 * _S21)) + (float)(v185 * _S23)) + v21;
          }
          if (v153 <= v23) {
            float v156 = v155;
          }
          else {
            float v156 = v23;
          }
          float v157 = (float)((float)(_S7 + _S6) + _S20) + _S21;
          float v158 = (float)((float)(_S3 + _S17) + _S18) + _S22;
          *uint64_t v39 = v148;
          v39[1] = v151;
          unsigned char *v53 = v154;
          v53[1] = llroundf(v156);
          HIWORD(v6) = HIWORD(v189);
          float v159 = (float)((float)(_S5 + _S16) + _S19) + _S23;
          float v160 = (float)((float)(v189 + (float)(v157 * v184)) + (float)(v158 * v183)) + (float)(v159 * v182);
          float v161 = v188;
          if (v160 <= v188)
          {
            float v161 = (float)((float)(v189 + (float)(v157 * v184)) + (float)(v158 * v183)) + (float)(v159 * v182);
            if (v160 < v190) {
              float v161 = v190;
            }
          }
          float v162 = (float)(v189 + (float)(v157 * v181)) + (float)(v158 * v180);
          HIWORD(v25) = HIWORD(v178);
          float v27 = v162 + (float)(v159 * v178);
          *(unsigned char *)(v47 + v51) = llroundf(v161);
          float v26 = v188;
          float v33 = v168;
          float v28 = v169;
          if (v27 <= v188)
          {
            float v26 = v27;
            if (v27 < v190) {
              float v26 = v190;
            }
          }
          *(unsigned char *)(v47 + v51 + 1) = llroundf(v26);
          if (v41)
          {
            unsigned char *v41 = v98;
            v41[1] = v99;
            v41 += 2;
            *uint16x8_t v52 = v100;
            v52[1] = v101;
            v52 += 2;
          }
          result += 16;
          v54 += 16;
          v39 += 2;
          v53 += 2;
          v51 += 2;
        }
        while (v12 > v51);
      }
      uint64_t v17 = v165;
      uint64_t v16 = v166;
      uint64_t result = &v50[v166];
      uint64_t v39 = &v49[v165];
      uint64_t v19 = v163;
      v47 += v164;
      uint64_t v41 = &v48[v163];
      v11 += 2;
    }
    while (v167 > v11);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_420vf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v16 = *(void *)(result + 28);
  unint64_t v17 = 2 * *(unsigned __int8 *)result;
  unint64_t v18 = v16 * a2 / v17;
  unint64_t v19 = (v16 + v16 * a2) / v17;
  if (2 * v19 != 2 * v18)
  {
    unint64_t v20 = 0;
    unint64_t v21 = *(void *)(result + 20);
    uint64_t v22 = *(void *)(result + 44) + 2 * v18;
    unint64_t v135 = 2 * v19 - 2 * v18;
    uint64_t v23 = *(void *)(result + 152);
    uint64_t v24 = *(uint64_t **)(result + 136);
    uint64_t v25 = **(void **)(result + 64);
    uint64_t v26 = *v24;
    uint64_t v27 = v24[1];
    uint64_t v28 = v24[2];
    float v29 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    LOWORD(a5) = *(_WORD *)(v23 + 144);
    float v30 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 146);
    *(float *)&unsigned int v31 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 148);
    float v32 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 150);
    float v148 = (float)LODWORD(a6);
    float v149 = (float)LODWORD(a8);
    LOWORD(v31) = *(_WORD *)(v23 + 152);
    float v146 = *(float *)(v23 + 36);
    float v147 = (float)v31;
    float v144 = *(float *)(v23 + 44);
    float v145 = *(float *)(v23 + 40);
    float v33 = 0.25;
    float v34 = *(float *)(v23 + 56);
    float v142 = *(float *)(v23 + 52) * 0.25;
    float v143 = *(float *)(v23 + 48) * 0.25;
    _S22 = *(float *)(v23 + 64);
    float v140 = *(float *)(v23 + 60) * 0.25;
    float v141 = v34 * 0.25;
    float v36 = *(float *)(v23 + 68);
    float v138 = *(float *)(v23 + 72);
    float v139 = _S22 * 0.25;
    float v37 = *(float *)(v23 + 80);
    float v136 = *(float *)(v23 + 76);
    float v137 = v36 * 0.25;
    float v38 = *(float *)(v23 + 84);
    float v39 = *(float *)(v23 + 88);
    float v40 = *(float *)(v23 + 92);
    float v41 = *(float *)(v23 + 96);
    float v43 = *(float *)(v23 + 100);
    float v42 = *(float *)(v23 + 104);
    uint64_t v44 = v23 + 164;
    uint64_t v45 = v23 + 16548;
    uint64_t v46 = *(void *)(result + 112);
    uint64_t v47 = *(void **)(result + 128);
    uint64_t v48 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v17);
    uint64_t v49 = **(void **)(result + 56) + v25 * v22 + 8 * *(void *)(result + 36);
    uint64_t v50 = v47[1];
    unint64_t v51 = (unsigned char *)(*v47 + v48 * v26 + v46);
    uint64_t v52 = v47[2];
    if (v52) {
      float v53 = (unsigned char *)(v52 + v48 * v28 + v46);
    }
    else {
      float v53 = 0;
    }
    uint64_t result = *(unsigned __int8 *)(v23 + 157);
    uint64_t v54 = *(unsigned __int8 *)(v23 + 156);
    uint64_t v133 = v27;
    uint64_t v134 = v26;
    uint64_t v55 = *(unsigned __int8 *)(v23 + 155);
    uint64_t v56 = *(unsigned __int8 *)(v23 + 154);
    uint64_t v57 = v50 + v48 / 2 * v27 + v46;
    uint64_t v132 = v28;
    do
    {
      int8x8_t v58 = &v53[v28];
      int8x8_t v59 = &v51[v26];
      uint64_t v60 = v25;
      uint64_t v61 = v49 + v25;
      if (v21)
      {
        unint64_t v62 = 0;
        int8x16_t v63 = v58;
        float16x8_t v64 = &v51[v26];
        uint64_t v65 = v49 + v25;
        do
        {
          uint64_t v66 = v49 + 8;
          uint64_t v67 = v65 + 8;
          if (v53)
          {
            LOWORD(v36) = *(_WORD *)(v49 + 2 * result);
            HIWORD(v33) = 15231;
            float v68 = (float)LODWORD(v36) * 0.0038911;
            char v69 = llroundf(v68);
            LOWORD(v68) = *(_WORD *)(v66 + 2 * result);
            float v70 = (float)LODWORD(v68) * 0.0038911;
            char v71 = llroundf(v70);
            LOWORD(v70) = *(_WORD *)(v65 + 2 * result);
            float v72 = (float)LODWORD(v70) * 0.0038911;
            char v73 = llroundf(v72);
            LOWORD(v72) = *(_WORD *)(v67 + 2 * result);
            float v36 = (float)LODWORD(v72) * 0.0038911;
            char v74 = llroundf(v36);
          }
          else
          {
            char v73 = 0;
            char v69 = 0;
            char v71 = 0;
            char v74 = 0;
          }
          LOWORD(v36) = *(_WORD *)(v49 + 2 * v56);
          LOWORD(v33) = *(_WORD *)(v49 + 2 * v55);
          LOWORD(v8) = *(_WORD *)(v49 + 2 * v54);
          LOWORD(v9) = *(_WORD *)(v66 + 2 * v56);
          LOWORD(v10) = *(_WORD *)(v66 + 2 * v55);
          LOWORD(_S13) = *(_WORD *)(v66 + 2 * v54);
          LOWORD(_S14) = *(_WORD *)(v65 + 2 * v56);
          LOWORD(_S15) = *(_WORD *)(v65 + 2 * v55);
          LOWORD(v34) = *(_WORD *)(v65 + 2 * v54);
          LOWORD(_S21) = *(_WORD *)(v67 + 2 * v56);
          LOWORD(_S22) = *(_WORD *)(v67 + 2 * v55);
          LOWORD(_S24) = *(_WORD *)(v67 + 2 * v54);
          _H18 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(v36), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(v33), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H10 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(v8), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(v9), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(v10), 0.0), 8191.0)));
          _H13 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(_S13), 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H12
            FCVT            S13, H13
          }
          _H14 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(_S14), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(_S15), 0.0), 8191.0)));
          __asm { FCVT            S15, H15 }
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(v34), 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(_S21), 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(_S22), 0.0), 8191.0)));
          _H24 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v29 * (float)LODWORD(_S24), 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H22
            FCVT            S24, H24
          }
          _S5 = (float)((float)(v136 * _S19) + (float)(_S18 * v138)) + (float)(_S10 * v37);
          _S3 = (float)((float)(v39 * _S19) + (float)(_S18 * v38)) + (float)(_S10 * v40);
          float v102 = (float)((float)(v43 * _S19) + (float)(_S18 * v41)) + (float)(_S10 * v42);
          float v103 = (float)((float)(v136 * _S12) + (float)(_S11 * v138)) + (float)(_S13 * v37);
          _S7 = (float)((float)(v39 * _S12) + (float)(_S11 * v38)) + (float)(_S13 * v40);
          float v105 = (float)((float)(v43 * _S12) + (float)(_S11 * v41)) + (float)(_S13 * v42);
          float v106 = (float)((float)(v136 * _S15) + (float)(_S14 * v138)) + (float)(_S20 * v37);
          _S6 = (float)((float)(v39 * _S15) + (float)(_S14 * v38)) + (float)(_S20 * v40);
          float v34 = (float)((float)(v43 * _S15) + (float)(_S14 * v41)) + (float)(_S20 * v42);
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S12, H5 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S10, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S11, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          __asm { FCVT            S13, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H3
            FCVT            S14, H5
          }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v34, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          LOWORD(_S5) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v136 * _S22) + (float)(_S21 * v138)) + (float)(_S24 * v37), 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v39 * _S22) + (float)(_S21 * v38)) + (float)(_S24 * v40), 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v43 * _S22) + (float)(_S21 * v41)) + (float)(_S24 * v42), 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S7, H7
          }
          HIWORD(_S21) = HIWORD(v145);
          HIWORD(v34) = HIWORD(v146);
          HIWORD(_S22) = HIWORD(v144);
          float v117 = (float)((float)((float)(v145 * _S10) + (float)(v146 * _S12)) + (float)(v144 * _S11)) + v30;
          if (v117 < v30) {
            float v118 = v30;
          }
          else {
            float v118 = (float)((float)((float)(v145 * _S10) + (float)(v146 * _S12)) + (float)(v144 * _S11)) + v30;
          }
          BOOL v119 = v117 <= v32;
          float v120 = (float)((float)((float)(v145 * _S15) + (float)(v146 * _S13)) + (float)(v144 * _S14)) + v30;
          if (!v119) {
            float v118 = v32;
          }
          char v121 = llroundf(v118);
          if (v120 < v30) {
            float v122 = v30;
          }
          else {
            float v122 = (float)((float)((float)(v145 * _S15) + (float)(v146 * _S13)) + (float)(v144 * _S14)) + v30;
          }
          BOOL v119 = v120 <= v32;
          float v123 = (float)((float)((float)(v145 * _S18) + (float)(v146 * _S3)) + (float)(v144 * _S19)) + v30;
          if (!v119) {
            float v122 = v32;
          }
          char v124 = llroundf(v122);
          if (v123 < v30) {
            float v125 = v30;
          }
          else {
            float v125 = (float)((float)((float)(v145 * _S18) + (float)(v146 * _S3)) + (float)(v144 * _S19)) + v30;
          }
          BOOL v119 = v123 <= v32;
          float v126 = (float)((float)((float)(v145 * _S6) + (float)(v146 * _S5)) + (float)(v144 * _S7)) + v30;
          if (!v119) {
            float v125 = v32;
          }
          char v127 = llroundf(v125);
          if (v126 < v30) {
            float v128 = v30;
          }
          else {
            float v128 = (float)((float)((float)(v145 * _S6) + (float)(v146 * _S5)) + (float)(v144 * _S7)) + v30;
          }
          if (v126 <= v32) {
            float v129 = v128;
          }
          else {
            float v129 = v32;
          }
          float v10 = (float)((float)(_S12 + _S13) + _S3) + _S5;
          float v130 = (float)((float)(_S10 + _S15) + _S18) + _S6;
          *unint64_t v51 = v121;
          v51[1] = v124;
          *float16x8_t v64 = v127;
          v64[1] = llroundf(v129);
          float v131 = (float)((float)(_S11 + _S14) + _S19) + _S7;
          float v9 = (float)((float)(v148 + (float)(v10 * v143)) + (float)(v130 * v142)) + (float)(v131 * v141);
          float v8 = v147;
          if (v9 <= v147)
          {
            float v8 = (float)((float)(v148 + (float)(v10 * v143)) + (float)(v130 * v142)) + (float)(v131 * v141);
            if (v9 < v149) {
              float v8 = v149;
            }
          }
          float v36 = (float)((float)(v148 + (float)(v10 * v140)) + (float)(v130 * v139)) + (float)(v131 * v137);
          *(unsigned char *)(v57 + v62) = llroundf(v8);
          float v33 = v147;
          if (v36 <= v147)
          {
            float v33 = v36;
            if (v36 < v149) {
              float v33 = v149;
            }
          }
          *(unsigned char *)(v57 + v62 + 1) = llroundf(v33);
          if (v53)
          {
            unsigned char *v53 = v69;
            v53[1] = v71;
            v53 += 2;
            *int8x16_t v63 = v73;
            v63[1] = v74;
            v63 += 2;
          }
          v49 += 16;
          v65 += 16;
          v51 += 2;
          v64 += 2;
          v62 += 2;
        }
        while (v21 > v62);
      }
      uint64_t v49 = v61 + v60;
      uint64_t v25 = v60;
      uint64_t v26 = v134;
      unint64_t v51 = &v59[v134];
      v57 += v133;
      float v53 = &v58[v132];
      uint64_t v28 = v132;
      v20 += 2;
    }
    while (v135 > v20);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_420vf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_420vf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v19 = *(void *)(result + 28);
  unint64_t v20 = 2 * *(unsigned __int8 *)result;
  unint64_t v21 = v19 * a2 / v20;
  unint64_t v22 = (v19 + v19 * a2) / v20;
  if (2 * v22 != 2 * v21)
  {
    unint64_t v23 = 0;
    unint64_t v24 = *(void *)(result + 20);
    uint64_t v25 = *(void *)(result + 44) + 2 * v21;
    unint64_t v26 = 2 * v22 - 2 * v21;
    uint64_t v27 = *(void *)(result + 152);
    uint64_t v28 = *(uint64_t **)(result + 136);
    uint64_t v29 = **(void **)(result + 64);
    uint64_t v30 = *v28;
    uint64_t v31 = v28[1];
    uint64_t v32 = v28[2];
    *(float *)&unsigned int v33 = (float)*(unsigned int *)(v27 + 136);
    float v34 = *(float *)&v33 / (float)*(unsigned int *)(v27 + 128);
    LOWORD(v33) = *(_WORD *)(v27 + 144);
    float v35 = (float)v33;
    LOWORD(a5) = *(_WORD *)(v27 + 146);
    float v36 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v27 + 148);
    float v37 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v27 + 150);
    float v38 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v27 + 152);
    float v39 = (float)LODWORD(a8);
    float v40 = *(float *)(v27 + 36);
    float v41 = *(float *)(v27 + 40);
    float v42 = *(float *)(v27 + 44);
    float v43 = *(float *)(v27 + 48) * 0.25;
    float v44 = *(float *)(v27 + 52) * 0.25;
    float v45 = *(float *)(v27 + 56) * 0.25;
    float v46 = *(float *)(v27 + 60) * 0.25;
    float v47 = *(float *)(v27 + 64) * 0.25;
    float v48 = *(float *)(v27 + 68);
    float v49 = v48 * 0.25;
    uint64_t v50 = *(void *)(result + 112);
    unint64_t v51 = *(void **)(result + 128);
    uint64_t v52 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v20);
    uint64_t v53 = **(void **)(result + 56) + v29 * v25 + 8 * *(void *)(result + 36);
    uint64_t v54 = (unsigned char *)(*v51 + v52 * v30 + v50);
    uint64_t v55 = v51[2];
    if (v55) {
      uint64_t v56 = (unsigned char *)(v55 + v52 * v32 + v50);
    }
    else {
      uint64_t v56 = 0;
    }
    uint64_t v57 = *(unsigned __int8 *)(v27 + 157);
    uint64_t result = *(unsigned __int8 *)(v27 + 156);
    uint64_t v58 = v51[1] + v52 / 2 * v31;
    uint64_t v59 = *(unsigned __int8 *)(v27 + 155);
    uint64_t v60 = *(unsigned __int8 *)(v27 + 154);
    uint64_t v61 = v58 + v50;
    do
    {
      unint64_t v62 = &v56[v32];
      int8x16_t v63 = &v54[v30];
      uint64_t v64 = v53 + v29;
      if (v24)
      {
        unint64_t v65 = 0;
        uint64_t v66 = &v56[v32];
        uint64_t v67 = &v54[v30];
        uint64_t v68 = v53 + v29;
        do
        {
          uint64_t v69 = v53 + 8;
          uint64_t v70 = v68 + 8;
          if (v56)
          {
            LOWORD(v48) = *(_WORD *)(v53 + 2 * v57);
            HIWORD(v11) = 15231;
            float v71 = (float)LODWORD(v48) * 0.0038911;
            char v72 = llroundf(v71);
            LOWORD(v71) = *(_WORD *)(v69 + 2 * v57);
            float v73 = (float)LODWORD(v71) * 0.0038911;
            char v74 = llroundf(v73);
            LOWORD(v73) = *(_WORD *)(v68 + 2 * v57);
            float v75 = (float)LODWORD(v73) * 0.0038911;
            char v76 = llroundf(v75);
            LOWORD(v75) = *(_WORD *)(v70 + 2 * v57);
            float v48 = (float)LODWORD(v75) * 0.0038911;
            char v77 = llroundf(v48);
          }
          else
          {
            char v76 = 0;
            char v72 = 0;
            char v74 = 0;
            char v77 = 0;
          }
          LOWORD(v48) = *(_WORD *)(v53 + 2 * v60);
          float v78 = v34 * (float)LODWORD(v48);
          LOWORD(v11) = *(_WORD *)(v53 + 2 * v59);
          float v79 = v34 * (float)LODWORD(v11);
          LOWORD(v12) = *(_WORD *)(v53 + 2 * result);
          float v80 = v34 * (float)LODWORD(v12);
          LOWORD(v13) = *(_WORD *)(v69 + 2 * v60);
          float v81 = v34 * (float)LODWORD(v13);
          LOWORD(v14) = *(_WORD *)(v69 + 2 * v59);
          float v82 = v34 * (float)LODWORD(v14);
          LOWORD(v15) = *(_WORD *)(v69 + 2 * result);
          float v15 = v34 * (float)LODWORD(v15);
          LOWORD(v16) = *(_WORD *)(v68 + 2 * v60);
          float v16 = v34 * (float)LODWORD(v16);
          LOWORD(v17) = *(_WORD *)(v68 + 2 * v59);
          float v17 = v34 * (float)LODWORD(v17);
          LOWORD(v18) = *(_WORD *)(v68 + 2 * result);
          float v18 = v34 * (float)LODWORD(v18);
          LOWORD(v8) = *(_WORD *)(v70 + 2 * v60);
          float v8 = v34 * (float)LODWORD(v8);
          LOWORD(v9) = *(_WORD *)(v70 + 2 * v59);
          float v9 = v34 * (float)LODWORD(v9);
          LOWORD(v10) = *(_WORD *)(v70 + 2 * result);
          float v10 = v34 * (float)LODWORD(v10);
          float v83 = (float)((float)((float)(v41 * v79) + (float)(v40 * v78)) + (float)(v42 * v80)) + v35;
          float v84 = (float)((float)((float)(v41 * v82) + (float)(v40 * v81)) + (float)(v42 * v15)) + v35;
          float v85 = (float)((float)((float)(v41 * v17) + (float)(v40 * v16)) + (float)(v42 * v18)) + v35;
          float v86 = (float)((float)((float)(v41 * v9) + (float)(v40 * v8)) + (float)(v42 * v10)) + v35;
          if (v83 < v35) {
            float v87 = v35;
          }
          else {
            float v87 = (float)((float)((float)(v41 * v79) + (float)(v40 * v78)) + (float)(v42 * v80)) + v35;
          }
          if (v83 <= v37) {
            float v88 = v87;
          }
          else {
            float v88 = v37;
          }
          char v89 = llroundf(v88);
          if (v84 < v35) {
            float v90 = v35;
          }
          else {
            float v90 = (float)((float)((float)(v41 * v82) + (float)(v40 * v81)) + (float)(v42 * v15)) + v35;
          }
          if (v84 > v37) {
            float v90 = v37;
          }
          *uint64_t v54 = v89;
          v54[1] = llroundf(v90);
          if (v85 < v35) {
            float v91 = v35;
          }
          else {
            float v91 = (float)((float)((float)(v41 * v17) + (float)(v40 * v16)) + (float)(v42 * v18)) + v35;
          }
          if (v85 > v37) {
            float v91 = v37;
          }
          *uint64_t v67 = llroundf(v91);
          if (v86 < v35) {
            float v92 = v35;
          }
          else {
            float v92 = (float)((float)((float)(v41 * v9) + (float)(v40 * v8)) + (float)(v42 * v10)) + v35;
          }
          if (v86 > v37) {
            float v92 = v37;
          }
          v67[1] = llroundf(v92);
          float v93 = (float)((float)(v78 + v81) + v16) + v8;
          float v94 = (float)((float)(v79 + v82) + v17) + v9;
          float v12 = (float)((float)(v80 + v15) + v18) + v10;
          float v14 = (float)((float)(v36 + (float)(v93 * v43)) + (float)(v94 * v44)) + (float)(v12 * v45);
          float v13 = v39;
          if (v14 <= v39)
          {
            float v13 = (float)((float)(v36 + (float)(v93 * v43)) + (float)(v94 * v44)) + (float)(v12 * v45);
            if (v14 < v38) {
              float v13 = v38;
            }
          }
          float v48 = (float)((float)(v36 + (float)(v93 * v46)) + (float)(v94 * v47)) + (float)(v12 * v49);
          *(unsigned char *)(v61 + v65) = llroundf(v13);
          float v11 = v39;
          if (v48 <= v39)
          {
            float v11 = v48;
            if (v48 < v38) {
              float v11 = v38;
            }
          }
          *(unsigned char *)(v61 + v65 + 1) = llroundf(v11);
          if (v56)
          {
            *uint64_t v56 = v72;
            v56[1] = v74;
            v56 += 2;
            *uint64_t v66 = v76;
            v66[1] = v77;
            v66 += 2;
          }
          v53 += 16;
          v68 += 16;
          v54 += 2;
          v67 += 2;
          v65 += 2;
        }
        while (v24 > v65);
      }
      uint64_t v53 = v64 + v29;
      uint64_t v54 = &v63[v30];
      v61 += v31;
      uint64_t v56 = &v62[v32];
      v23 += 2;
    }
    while (v26 > v23);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_xf420_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44) + 2 * v8;
    unint64_t v13 = 2 * v9 - 2 * v8;
    uint64_t v14 = *(void *)(result + 152);
    uint64_t v15 = *(uint64_t **)(result + 136);
    uint64_t v16 = **(void **)(result + 64);
    uint64_t v17 = *v15;
    uint64_t v18 = v15[1];
    float v19 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    LOWORD(a5) = *(_WORD *)(v14 + 144);
    float v20 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 146);
    float v21 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 148);
    float v22 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 150);
    *(float *)&unsigned int v23 = (float)LODWORD(a6);
    float v188 = *(float *)&v23;
    LOWORD(v23) = *(_WORD *)(v14 + 152);
    float v24 = (float)v23;
    float v184 = *(float *)(v14 + 40);
    float v185 = *(float *)(v14 + 36);
    float v182 = *(float *)(v14 + 48) * 0.25;
    float v183 = *(float *)(v14 + 44);
    float v180 = *(float *)(v14 + 56) * 0.25;
    float v181 = *(float *)(v14 + 52) * 0.25;
    float v178 = *(float *)(v14 + 64) * 0.25;
    float v179 = *(float *)(v14 + 60) * 0.25;
    float v25 = *(float *)(v14 + 72);
    float v176 = *(float *)(v14 + 68) * 0.25;
    float v177 = v25;
    float v174 = *(float *)(v14 + 80);
    float v175 = *(float *)(v14 + 76);
    float v172 = *(float *)(v14 + 88);
    float v173 = *(float *)(v14 + 84);
    float v170 = *(float *)(v14 + 96);
    float v171 = *(float *)(v14 + 92);
    float v26 = *(float *)(v14 + 100);
    float v27 = *(float *)(v14 + 104);
    float v28 = *(float *)(v14 + 108);
    float v168 = v27;
    float v169 = v26;
    uint64_t v29 = v14 + 164;
    uint64_t v30 = v14 + 16548;
    uint64_t v31 = v14 + 32932;
    float v32 = *(float *)(v14 + 112);
    float v33 = *(float *)(v14 + 116);
    float v34 = *(float *)(v14 + 120);
    uint64_t v35 = *(void *)(result + 112);
    unint64_t v36 = *(void *)(result + 104) * a2 / v7;
    uint64_t v37 = *(void **)(result + 128);
    uint64_t v38 = *(void *)(result + 120) + 2 * v36;
    uint64_t v39 = **(void **)(result + 56) + v16 * v12 + 8 * *(void *)(result + 36);
    uint64_t v40 = v37[1];
    float v41 = (char *)(*v37 + v38 * v17 + 2 * v35);
    unsigned int v42 = *(unsigned __int8 *)(v14 + 132);
    if (v42 >= 0x11) {
      char v43 = 0;
    }
    else {
      char v43 = 16 - v42;
    }
    uint64_t result = *(unsigned __int8 *)(v14 + 156);
    if (v38 >= 0) {
      uint64_t v44 = v38;
    }
    else {
      uint64_t v44 = v38 + 1;
    }
    uint64_t v45 = v40 + (v44 >> 1) * v18;
    uint64_t v46 = *(unsigned __int8 *)(v14 + 155);
    uint64_t v47 = *(unsigned __int8 *)(v14 + 154);
    uint64_t v48 = v45 + 2 * v35;
    char v49 = v43;
    float v186 = v24;
    float v187 = v21;
    float v166 = v32;
    float v167 = v28;
    float v165 = v33;
    do
    {
      uint64_t v50 = &v41[v17];
      uint64_t v51 = v39 + v16;
      if (v11)
      {
        unint64_t v52 = 0;
        uint64_t v53 = v39 + v16;
        uint64_t v54 = &v41[v17];
        do
        {
          LOWORD(v27) = *(_WORD *)(v39 + 2 * v47);
          LOWORD(v26) = *(_WORD *)(v39 + 2 * v46);
          LOWORD(v25) = *(_WORD *)(v39 + 2 * result);
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v27), 0.0), 8191.0)));
          float v56 = v19 * (float)LODWORD(v25);
          __asm { FCVT            S14, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v26), 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v56, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          float v66 = fmaxf(_S14, fmaxf(_S15, _S18));
          float v67 = (float)((float)((float)(v32 * _S15) + (float)(v28 * _S14)) + (float)(v33 * _S18)) + (float)(v34 * v66);
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = (float)((float)((float)(v32 * _S15) + (float)(v28 * _S14)) + (float)(v33 * _S18)) + (float)(v34 * v66);
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          LOWORD(v67) = *(_WORD *)(v39 + 8 + 2 * v47);
          LOWORD(v66) = *(_WORD *)(v39 + 8 + 2 * v46);
          LOWORD(v56) = *(_WORD *)(v39 + 8 + 2 * result);
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v67), 0.0), 8191.0)));
          __asm { FCVT            S20, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v66), 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v56), 0.0), 8191.0)));
          __asm { FCVT            S22, H3 }
          float v75 = fmaxf(_S20, fmaxf(_S21, _S22));
          float v76 = (float)((float)((float)(v32 * _S21) + (float)(v28 * _S20)) + (float)(v33 * _S22)) + (float)(v34 * v75);
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = (float)((float)((float)(v32 * _S21) + (float)(v28 * _S20)) + (float)(v33 * _S22)) + (float)(v34 * v75);
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          LOWORD(v76) = *(_WORD *)(v53 + 2 * v47);
          LOWORD(v75) = *(_WORD *)(v53 + 2 * v46);
          *(float *)&unsigned int v78 = (float)LODWORD(v75);
          _S6 = v19 * *(float *)&v78;
          LOWORD(v78) = *(_WORD *)(v53 + 2 * result);
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v76), 0.0), 8191.0)));
          float v81 = v19 * (float)v78;
          __asm { FCVT            S5, H3 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S6) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S7, H6 }
          float v86 = fmaxf(_S5, fmaxf(_S3, _S7));
          float v87 = (float)((float)((float)(v32 * _S3) + (float)(v28 * _S5)) + (float)(v33 * _S7)) + (float)(v34 * v86);
          float v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            float v88 = (float)((float)((float)(v32 * _S3) + (float)(v28 * _S5)) + (float)(v33 * _S7)) + (float)(v34 * v86);
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          LOWORD(v87) = *(_WORD *)(v53 + 8 + 2 * v47);
          LOWORD(v86) = *(_WORD *)(v53 + 8 + 2 * v46);
          *(float *)&unsigned int v89 = (float)LODWORD(v86);
          float v90 = v19 * *(float *)&v89;
          LOWORD(v89) = *(_WORD *)(v53 + 8 + 2 * result);
          _H6 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v87), 0.0), 8191.0)));
          float v92 = v19 * (float)v89;
          __asm { FCVT            S16, H6 }
          _H6 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S23, H6 }
          _H6 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S25, H6 }
          _H6 = *(_WORD *)(v30 + 2 * llroundf(v68));
          __asm { FCVT            S19, H6 }
          float v100 = _S14 * _S19;
          float v101 = _S15 * _S19;
          float v102 = _S18 * _S19;
          _H18 = *(_WORD *)(v30 + 2 * llroundf(v77));
          __asm { FCVT            S18, H18 }
          float v105 = _S20 * _S18;
          float v106 = _S21 * _S18;
          float v107 = _S22 * _S18;
          _H17 = *(_WORD *)(v30 + 2 * llroundf(v88));
          __asm { FCVT            S17, H17 }
          float v110 = _S5 * _S17;
          float v111 = _S3 * _S17;
          float v112 = _S7 * _S17;
          float v113 = (float)((float)((float)(v32 * _S23) + (float)(v28 * _S16)) + (float)(v33 * _S25))
               + (float)(v34 * fmaxf(_S16, fmaxf(_S23, _S25)));
          float v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            float v114 = v113;
            if (v113 < 0.0) {
              float v114 = 0.0;
            }
          }
          _H7 = *(_WORD *)(v30 + 2 * llroundf(v114));
          __asm { FCVT            S7, H7 }
          float v117 = _S16 * _S7;
          float v118 = _S23 * _S7;
          _S7 = _S25 * _S7;
          float v120 = (float)((float)(v175 * v101) + (float)(v100 * v177)) + (float)(v102 * v174);
          float v121 = (float)((float)(v172 * v101) + (float)(v100 * v173)) + (float)(v102 * v171);
          _S6 = (float)((float)(v169 * v101) + (float)(v100 * v170)) + (float)(v102 * v168);
          float v123 = (float)((float)(v175 * v106) + (float)(v105 * v177)) + (float)(v107 * v174);
          float v124 = (float)((float)(v172 * v106) + (float)(v105 * v173)) + (float)(v107 * v171);
          float v125 = (float)((float)(v169 * v106) + (float)(v105 * v170)) + (float)(v107 * v168);
          float v126 = (float)((float)(v175 * v111) + (float)(v110 * v177)) + (float)(v112 * v174);
          float v127 = (float)((float)(v172 * v111) + (float)(v110 * v173)) + (float)(v112 * v171);
          _S3 = (float)((float)(v169 * v111) + (float)(v110 * v170)) + (float)(v112 * v168);
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H5
            FCVT            S21, H6
          }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm { FCVT            S24, H5 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          __asm { FCVT            S22, H5 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S14, H6 }
          LOWORD(_S3) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v31
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v175 * v118) + (float)(v117 * v177)) + (float)(_S7 * v174), 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H3
            FCVT            S3, H6
          }
          LOWORD(_S6) = *(_WORD *)(v31
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v172 * v118) + (float)(v117 * v173)) + (float)(_S7 * v171), 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v31
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v169 * v118) + (float)(v117 * v170)) + (float)(_S7 * v168), 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          float v147 = (float)((float)((float)(v184 * _S19) + (float)(v185 * _S18)) + (float)(v183 * _S20)) + v20;
          if (v147 < v20) {
            float v148 = v20;
          }
          else {
            float v148 = (float)((float)((float)(v184 * _S19) + (float)(v185 * _S18)) + (float)(v183 * _S20)) + v20;
          }
          BOOL v149 = v147 <= v22;
          float v150 = (float)((float)((float)(v184 * _S24) + (float)(v185 * _S21)) + (float)(v183 * _S22)) + v20;
          if (!v149) {
            float v148 = v22;
          }
          unsigned int v151 = llroundf(v148);
          if (v150 < v20) {
            float v152 = v20;
          }
          else {
            float v152 = (float)((float)((float)(v184 * _S24) + (float)(v185 * _S21)) + (float)(v183 * _S22)) + v20;
          }
          BOOL v149 = v150 <= v22;
          float v153 = (float)((float)((float)(v184 * _S14) + (float)(v185 * _S5)) + (float)(v183 * _S15)) + v20;
          if (!v149) {
            float v152 = v22;
          }
          unsigned int v154 = llroundf(v152);
          if (v153 < v20) {
            float v155 = v20;
          }
          else {
            float v155 = (float)((float)((float)(v184 * _S14) + (float)(v185 * _S5)) + (float)(v183 * _S15)) + v20;
          }
          BOOL v149 = v153 <= v22;
          float v156 = (float)((float)((float)(v184 * _S6) + (float)(v185 * _S3)) + (float)(v183 * _S7)) + v20;
          if (!v149) {
            float v155 = v22;
          }
          unsigned int v157 = llroundf(v155);
          if (v156 < v20) {
            float v158 = v20;
          }
          else {
            float v158 = (float)((float)((float)(v184 * _S6) + (float)(v185 * _S3)) + (float)(v183 * _S7)) + v20;
          }
          if (v156 <= v22) {
            float v159 = v158;
          }
          else {
            float v159 = v22;
          }
          float v160 = (float)((float)(_S18 + _S21) + _S5) + _S3;
          float v161 = (float)((float)(_S19 + _S24) + _S14) + _S6;
          *(_WORD *)float v41 = v151 << v49;
          *((_WORD *)v41 + 1) = v154 << v49;
          *(_WORD *)uint64_t v54 = v157 << v49;
          *((_WORD *)v54 + 1) = llroundf(v159) << v49;
          float v25 = (float)((float)(_S20 + _S22) + _S15) + _S7;
          float v162 = (float)((float)(v187 + (float)(v160 * v182)) + (float)(v161 * v181)) + (float)(v25 * v180);
          float v163 = v186;
          if (v162 <= v186)
          {
            float v163 = (float)((float)(v187 + (float)(v160 * v182)) + (float)(v161 * v181)) + (float)(v25 * v180);
            if (v162 < v188) {
              float v163 = v188;
            }
          }
          uint64_t v164 = (_WORD *)(v48 + 2 * v52);
          float v26 = (float)((float)(v187 + (float)(v160 * v179)) + (float)(v161 * v178)) + (float)(v25 * v176);
          *uint64_t v164 = llroundf(v163) << v49;
          float v27 = v186;
          if (v26 <= v186)
          {
            float v27 = v26;
            if (v26 < v188) {
              float v27 = v188;
            }
          }
          v39 += 16;
          v53 += 16;
          v41 += 4;
          v54 += 4;
          v164[1] = llroundf(v27) << v49;
          v52 += 2;
          float v32 = v166;
          float v28 = v167;
          float v33 = v165;
        }
        while (v11 > v52);
      }
      uint64_t v39 = v51 + v16;
      float v41 = &v50[v17];
      v48 += v18;
      v10 += 2;
    }
    while (v13 > v10);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v18 = *(void *)(result + 28);
  unint64_t v19 = 2 * *result;
  unint64_t v20 = v18 * a2 / v19;
  unint64_t v21 = (v18 + v18 * a2) / v19;
  if (2 * v21 != 2 * v20)
  {
    unint64_t v22 = 0;
    unint64_t v23 = *(void *)(result + 20);
    uint64_t v24 = *(void *)(result + 44) + 2 * v20;
    unint64_t v25 = 2 * v21 - 2 * v20;
    uint64_t v26 = *((void *)result + 19);
    float v27 = (uint64_t *)*((void *)result + 17);
    uint64_t v28 = **((void **)result + 8);
    uint64_t v29 = *v27;
    uint64_t v30 = v27[1];
    float v31 = 8191.0 / (float)*(unsigned int *)(v26 + 128);
    LOWORD(a5) = *(_WORD *)(v26 + 144);
    float v32 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v26 + 146);
    LOWORD(a7) = *(_WORD *)(v26 + 148);
    float v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v26 + 150);
    float v136 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v26 + 152);
    float v137 = (float)LODWORD(a9);
    float v138 = (float)LODWORD(a6);
    float v134 = *(float *)(v26 + 40);
    float v135 = *(float *)(v26 + 36);
    float v34 = 0.25;
    float v132 = *(float *)(v26 + 48) * 0.25;
    float v133 = *(float *)(v26 + 44);
    float v130 = *(float *)(v26 + 56) * 0.25;
    float v131 = *(float *)(v26 + 52) * 0.25;
    float v35 = *(float *)(v26 + 64);
    float v128 = v35 * 0.25;
    float v129 = *(float *)(v26 + 60) * 0.25;
    float v36 = *(float *)(v26 + 68);
    float v126 = v36 * 0.25;
    float v127 = *(float *)(v26 + 72);
    float v37 = *(float *)(v26 + 80);
    float v125 = *(float *)(v26 + 76);
    float v38 = *(float *)(v26 + 84);
    float v39 = *(float *)(v26 + 88);
    float v40 = *(float *)(v26 + 92);
    float v41 = *(float *)(v26 + 96);
    float v43 = *(float *)(v26 + 100);
    float v42 = *(float *)(v26 + 104);
    uint64_t v44 = v26 + 164;
    uint64_t v45 = v26 + 16548;
    uint64_t v46 = *((void *)result + 14);
    unint64_t v47 = *((void *)result + 13) * a2 / v19;
    uint64_t v48 = (uint64_t *)*((void *)result + 16);
    uint64_t v49 = *((void *)result + 15) + 2 * v47;
    uint64_t v50 = **((void **)result + 7) + v28 * v24 + 8 * *(void *)(result + 36);
    uint64_t v52 = *v48;
    uint64_t v51 = v48[1];
    uint64_t result = (unsigned __int8 *)(v52 + v49 * v29 + 2 * v46);
    unsigned int v53 = *(unsigned __int8 *)(v26 + 132);
    if (v53 >= 0x11) {
      char v54 = 0;
    }
    else {
      char v54 = 16 - v53;
    }
    uint64_t v55 = *(unsigned __int8 *)(v26 + 156);
    if (v49 >= 0) {
      uint64_t v56 = v49;
    }
    else {
      uint64_t v56 = v49 + 1;
    }
    uint64_t v57 = v51 + (v56 >> 1) * v30;
    uint64_t v58 = *(unsigned __int8 *)(v26 + 155);
    uint64_t v59 = *(unsigned __int8 *)(v26 + 154);
    uint64_t v60 = v57 + 2 * v46;
    char v61 = v54;
    do
    {
      unint64_t v62 = &result[v29];
      uint64_t v63 = v50 + v28;
      if (v23)
      {
        unint64_t v64 = 0;
        uint64_t v65 = v50 + v28;
        float v66 = &result[v29];
        do
        {
          LOWORD(v36) = *(_WORD *)(v50 + 2 * v59);
          LOWORD(v34) = *(_WORD *)(v50 + 2 * v58);
          LOWORD(v35) = *(_WORD *)(v50 + 2 * v55);
          LOWORD(v9) = *(_WORD *)(v50 + 8 + 2 * v59);
          LOWORD(v10) = *(_WORD *)(v50 + 8 + 2 * v58);
          LOWORD(_S12) = *(_WORD *)(v50 + 8 + 2 * v55);
          LOWORD(_S13) = *(_WORD *)(v65 + 2 * v59);
          LOWORD(_S14) = *(_WORD *)(v65 + 2 * v58);
          LOWORD(_S15) = *(_WORD *)(v65 + 2 * v55);
          LOWORD(_S21) = *(_WORD *)(v65 + 8 + 2 * v59);
          LOWORD(_S22) = *(_WORD *)(v65 + 8 + 2 * v58);
          LOWORD(_S24) = *(_WORD *)(v65 + 8 + 2 * v55);
          _H18 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v36), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v34), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v35), 0.0), 8191.0)));
          _H10 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v9), 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H20
            FCVT            S10, H10
          }
          _H11 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S12), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S13), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S14), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S15), 0.0), 8191.0)));
          _H21 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S21), 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H15
            FCVT            S21, H21
          }
          _H22 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S22), 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _H24 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v31 * (float)LODWORD(_S24), 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _S5 = (float)((float)(v125 * _S19) + (float)(_S18 * v127)) + (float)(_S20 * v37);
          _S3 = (float)((float)(v39 * _S19) + (float)(_S18 * v38)) + (float)(_S20 * v40);
          float v94 = (float)((float)(v43 * _S19) + (float)(_S18 * v41)) + (float)(_S20 * v42);
          float v95 = (float)((float)(v125 * _S11) + (float)(_S10 * v127)) + (float)(_S12 * v37);
          float v96 = (float)((float)(v39 * _S11) + (float)(_S10 * v38)) + (float)(_S12 * v40);
          float v97 = (float)((float)(v43 * _S11) + (float)(_S10 * v41)) + (float)(_S12 * v42);
          float v98 = (float)((float)(v125 * _S14) + (float)(_S13 * v127)) + (float)(_S15 * v37);
          float v99 = (float)((float)(v39 * _S14) + (float)(_S13 * v38)) + (float)(_S15 * v40);
          _S6 = (float)((float)(v43 * _S14) + (float)(_S13 * v41)) + (float)(_S15 * v42);
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S10, H5 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S11, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H3
            FCVT            S13, H5
          }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S15, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S14, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v125 * _S22) + (float)(_S21 * v127)) + (float)(_S24 * v37), 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H3
            FCVT            S3, H5
          }
          LOWORD(_S5) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v39 * _S22) + (float)(_S21 * v38)) + (float)(_S24 * v40), 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v45
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v43 * _S22) + (float)(_S21 * v41)) + (float)(_S24 * v42), 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          HIWORD(_S21) = HIWORD(v134);
          HIWORD(_S22) = HIWORD(v133);
          float v109 = (float)((float)((float)(v134 * _S11) + (float)(v135 * _S10)) + (float)(v133 * _S12)) + v32;
          if (v109 < v32) {
            float v110 = v32;
          }
          else {
            float v110 = (float)((float)((float)(v134 * _S11) + (float)(v135 * _S10)) + (float)(v133 * _S12)) + v32;
          }
          BOOL v111 = v109 <= v33;
          float v112 = (float)((float)((float)(v134 * _S15) + (float)(v135 * _S13)) + (float)(v133 * _S14)) + v32;
          if (!v111) {
            float v110 = v33;
          }
          unsigned int v113 = llroundf(v110);
          if (v112 < v32) {
            float v114 = v32;
          }
          else {
            float v114 = (float)((float)((float)(v134 * _S15) + (float)(v135 * _S13)) + (float)(v133 * _S14)) + v32;
          }
          BOOL v111 = v112 <= v33;
          float v115 = (float)((float)((float)(v134 * _S19) + (float)(v135 * _S18)) + (float)(v133 * _S20)) + v32;
          if (!v111) {
            float v114 = v33;
          }
          unsigned int v116 = llroundf(v114);
          if (v115 < v32) {
            float v117 = v32;
          }
          else {
            float v117 = (float)((float)((float)(v134 * _S19) + (float)(v135 * _S18)) + (float)(v133 * _S20)) + v32;
          }
          BOOL v111 = v115 <= v33;
          float v118 = (float)((float)((float)(v134 * _S5) + (float)(v135 * _S3)) + (float)(v133 * _S6)) + v32;
          if (!v111) {
            float v117 = v33;
          }
          unsigned int v119 = llroundf(v117);
          if (v118 < v32) {
            float v120 = v32;
          }
          else {
            float v120 = (float)((float)((float)(v134 * _S5) + (float)(v135 * _S3)) + (float)(v133 * _S6)) + v32;
          }
          if (v118 <= v33) {
            float v121 = v120;
          }
          else {
            float v121 = v33;
          }
          float v122 = (float)((float)(_S10 + _S13) + _S18) + _S3;
          float v123 = (float)((float)(_S11 + _S15) + _S19) + _S5;
          *(_WORD *)uint64_t result = v113 << v61;
          *((_WORD *)result + 1) = v116 << v61;
          *(_WORD *)float v66 = v119 << v61;
          *((_WORD *)v66 + 1) = llroundf(v121) << v61;
          float v9 = v137;
          float v35 = (float)((float)(_S12 + _S14) + _S20) + _S6;
          float v10 = (float)((float)(v138 + (float)(v122 * v132)) + (float)(v123 * v131)) + (float)(v35 * v130);
          if (v10 <= v137)
          {
            float v9 = (float)((float)(v138 + (float)(v122 * v132)) + (float)(v123 * v131)) + (float)(v35 * v130);
            if (v10 < v136) {
              float v9 = v136;
            }
          }
          float v124 = (_WORD *)(v60 + 2 * v64);
          float v34 = (float)((float)(v138 + (float)(v122 * v129)) + (float)(v123 * v128)) + (float)(v35 * v126);
          *float v124 = llroundf(v9) << v61;
          float v36 = v137;
          if (v34 <= v137)
          {
            float v36 = v34;
            if (v34 < v136) {
              float v36 = v136;
            }
          }
          v50 += 16;
          v65 += 16;
          result += 4;
          v66 += 4;
          v124[1] = llroundf(v36) << v61;
          v64 += 2;
        }
        while (v23 > v64);
      }
      uint64_t v50 = v63 + v28;
      uint64_t result = &v62[v29];
      v60 += v30;
      v22 += 2;
    }
    while (v25 > v22);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_xf420_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_xf420_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v17 = *(void *)(result + 28);
  unint64_t v18 = 2 * *(unsigned __int8 *)result;
  unint64_t v19 = v17 * a2 / v18;
  unint64_t v20 = (v17 + v17 * a2) / v18;
  if (2 * v20 != 2 * v19)
  {
    unint64_t v21 = 0;
    unint64_t v22 = *(void *)(result + 20);
    uint64_t v23 = *(void *)(result + 44) + 2 * v19;
    unint64_t v24 = 2 * v20 - 2 * v19;
    uint64_t v25 = *(void *)(result + 152);
    uint64_t v26 = *(uint64_t **)(result + 136);
    uint64_t v27 = **(void **)(result + 64);
    uint64_t v28 = *v26;
    uint64_t v29 = v26[1];
    *(float *)&unsigned int v30 = (float)*(unsigned int *)(v25 + 136);
    float v31 = *(float *)&v30 / (float)*(unsigned int *)(v25 + 128);
    LOWORD(v30) = *(_WORD *)(v25 + 144);
    float v32 = (float)v30;
    LOWORD(a5) = *(_WORD *)(v25 + 146);
    float v33 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v25 + 148);
    float v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v25 + 150);
    float v35 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v25 + 152);
    float v36 = (float)LODWORD(a8);
    float v37 = *(float *)(v25 + 36);
    float v38 = *(float *)(v25 + 40);
    float v39 = *(float *)(v25 + 44);
    float v40 = *(float *)(v25 + 48) * 0.25;
    float v41 = *(float *)(v25 + 52) * 0.25;
    float v42 = *(float *)(v25 + 56) * 0.25;
    float v43 = *(float *)(v25 + 60) * 0.25;
    float v44 = *(float *)(v25 + 64) * 0.25;
    float v45 = *(float *)(v25 + 68);
    float v46 = v45 * 0.25;
    uint64_t v47 = *(void *)(result + 112);
    uint64_t v48 = *(uint64_t **)(result + 128);
    uint64_t v49 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v18);
    uint64_t v50 = **(void **)(result + 56) + v27 * v23 + 8 * *(void *)(result + 36);
    uint64_t v51 = *v48;
    uint64_t v52 = v48[1];
    unsigned int v53 = (char *)(v51 + v49 * v28 + 2 * v47);
    unsigned int v54 = *(unsigned __int8 *)(v25 + 132);
    if (v54 >= 0x11) {
      char v55 = 0;
    }
    else {
      char v55 = 16 - v54;
    }
    uint64_t v56 = *(unsigned __int8 *)(v25 + 156);
    if (v49 >= 0) {
      uint64_t v57 = v49;
    }
    else {
      uint64_t v57 = v49 + 1;
    }
    uint64_t v58 = v52 + (v57 >> 1) * v29;
    uint64_t v59 = *(unsigned __int8 *)(v25 + 155);
    uint64_t result = *(unsigned __int8 *)(v25 + 154);
    uint64_t v60 = v58 + 2 * v47;
    char v61 = v55;
    do
    {
      unint64_t v62 = &v53[v28];
      uint64_t v63 = v50 + v27;
      if (v22)
      {
        unint64_t v64 = 0;
        uint64_t v65 = v50 + v27;
        float v66 = &v53[v28];
        do
        {
          LOWORD(v45) = *(_WORD *)(v50 + 2 * result);
          float v67 = v31 * (float)LODWORD(v45);
          LOWORD(v11) = *(_WORD *)(v50 + 2 * v59);
          float v68 = v31 * (float)LODWORD(v11);
          LOWORD(v12) = *(_WORD *)(v50 + 2 * v56);
          float v69 = v31 * (float)LODWORD(v12);
          LOWORD(v13) = *(_WORD *)(v50 + 8 + 2 * result);
          float v70 = v31 * (float)LODWORD(v13);
          LOWORD(v14) = *(_WORD *)(v50 + 8 + 2 * v59);
          LOWORD(v15) = *(_WORD *)(v50 + 8 + 2 * v56);
          float v71 = v31 * (float)LODWORD(v14);
          float v72 = v31 * (float)LODWORD(v15);
          LOWORD(v15) = *(_WORD *)(v65 + 2 * result);
          float v15 = v31 * (float)LODWORD(v15);
          LOWORD(v16) = *(_WORD *)(v65 + 2 * v59);
          LOWORD(v8) = *(_WORD *)(v65 + 2 * v56);
          float v73 = v31 * (float)LODWORD(v16);
          float v16 = v31 * (float)LODWORD(v8);
          LOWORD(v8) = *(_WORD *)(v65 + 8 + 2 * result);
          float v8 = v31 * (float)LODWORD(v8);
          LOWORD(v9) = *(_WORD *)(v65 + 8 + 2 * v59);
          float v9 = v31 * (float)LODWORD(v9);
          LOWORD(v10) = *(_WORD *)(v65 + 8 + 2 * v56);
          float v10 = v31 * (float)LODWORD(v10);
          float v74 = (float)((float)((float)(v38 * v68) + (float)(v37 * v67)) + (float)(v39 * v69)) + v32;
          float v75 = (float)((float)((float)(v38 * v71) + (float)(v37 * v70)) + (float)(v39 * v72)) + v32;
          float v76 = (float)((float)((float)(v38 * v73) + (float)(v37 * v15)) + (float)(v39 * v16)) + v32;
          float v77 = (float)((float)((float)(v38 * v9) + (float)(v37 * v8)) + (float)(v39 * v10)) + v32;
          if (v74 < v32) {
            float v78 = v32;
          }
          else {
            float v78 = (float)((float)((float)(v38 * v68) + (float)(v37 * v67)) + (float)(v39 * v69)) + v32;
          }
          if (v74 <= v34) {
            float v79 = v78;
          }
          else {
            float v79 = v34;
          }
          *(_WORD *)unsigned int v53 = llroundf(v79) << v61;
          if (v75 < v32) {
            float v80 = v32;
          }
          else {
            float v80 = (float)((float)((float)(v38 * v71) + (float)(v37 * v70)) + (float)(v39 * v72)) + v32;
          }
          if (v75 > v34) {
            float v80 = v34;
          }
          *((_WORD *)v53 + 1) = llroundf(v80) << v61;
          if (v76 < v32) {
            float v81 = v32;
          }
          else {
            float v81 = (float)((float)((float)(v38 * v73) + (float)(v37 * v15)) + (float)(v39 * v16)) + v32;
          }
          if (v76 > v34) {
            float v81 = v34;
          }
          *(_WORD *)float v66 = llroundf(v81) << v61;
          if (v77 < v32) {
            float v82 = v32;
          }
          else {
            float v82 = (float)((float)((float)(v38 * v9) + (float)(v37 * v8)) + (float)(v39 * v10)) + v32;
          }
          if (v77 > v34) {
            float v82 = v34;
          }
          *((_WORD *)v66 + 1) = llroundf(v82) << v61;
          float v83 = (float)((float)(v67 + v70) + v15) + v8;
          float v84 = (float)((float)(v68 + v71) + v73) + v9;
          float v12 = (float)((float)(v69 + v72) + v16) + v10;
          float v14 = (float)((float)(v33 + (float)(v83 * v40)) + (float)(v84 * v41)) + (float)(v12 * v42);
          float v13 = v36;
          if (v14 <= v36)
          {
            float v13 = (float)((float)(v33 + (float)(v83 * v40)) + (float)(v84 * v41)) + (float)(v12 * v42);
            if (v14 < v35) {
              float v13 = v35;
            }
          }
          float v85 = (_WORD *)(v60 + 2 * v64);
          float v11 = (float)((float)(v33 + (float)(v83 * v43)) + (float)(v84 * v44)) + (float)(v12 * v46);
          *float v85 = llroundf(v13) << v61;
          float v45 = v36;
          if (v11 <= v36)
          {
            float v45 = v11;
            if (v11 < v35) {
              float v45 = v35;
            }
          }
          v50 += 16;
          v65 += 16;
          v53 += 4;
          v66 += 4;
          v85[1] = llroundf(v45) << v61;
          v64 += 2;
        }
        while (v22 > v64);
      }
      uint64_t v50 = v63 + v27;
      unsigned int v53 = &v62[v28];
      v60 += v29;
      v21 += 2;
    }
    while (v24 > v21);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_422vf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(uint64_t **)(result + 136);
    uint64_t v18 = *(void **)(result + 56);
    uint64_t v19 = **(void **)(result + 64);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    float v23 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a5) = *(_WORD *)(v16 + 144);
    float v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 146);
    float v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 148);
    float v26 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 150);
    float v133 = (float)LODWORD(a8);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v27 = (float)LODWORD(a8);
    float v28 = *(float *)(v16 + 40);
    float v132 = *(float *)(v16 + 36);
    float v29 = *(float *)(v16 + 44);
    float v30 = 0.5;
    float v131 = *(float *)(v16 + 48) * 0.5;
    float v130 = *(float *)(v16 + 52) * 0.5;
    float v129 = *(float *)(v16 + 56) * 0.5;
    float v31 = *(float *)(v16 + 64);
    float v128 = *(float *)(v16 + 60) * 0.5;
    float v127 = v31 * 0.5;
    float v32 = *(float *)(v16 + 68);
    float v33 = *(float *)(v16 + 72);
    float v126 = v32 * 0.5;
    float v34 = *(float *)(v16 + 76);
    float v35 = *(float *)(v16 + 80);
    float v36 = *(float *)(v16 + 84);
    float v37 = *(float *)(v16 + 88);
    float v38 = *(float *)(v16 + 92);
    float v39 = *(float *)(v16 + 96);
    float v41 = *(float *)(v16 + 100);
    float v40 = *(float *)(v16 + 104);
    uint64_t v42 = v16 + 164;
    uint64_t v43 = v16 + 16548;
    uint64_t v44 = v16 + 32932;
    float v45 = *(float *)(v16 + 108);
    float v46 = *(float *)(v16 + 112);
    float v47 = *(float *)(v16 + 116);
    float v48 = *(float *)(v16 + 120);
    uint64_t v49 = *(uint64_t **)(result + 128);
    uint64_t v50 = *(void *)(result + 112);
    unint64_t v51 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
    uint64_t v52 = *(void *)(result + 36);
    uint64_t result = *(unsigned __int8 *)(v16 + 157);
    uint64_t v53 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v54 = *(unsigned __int8 *)(v16 + 155);
    uint64_t v55 = *(unsigned __int8 *)(v16 + 154);
    uint64_t v56 = v49[2];
    if (v56) {
      uint64_t v57 = (unsigned char *)(v56 + v51 * v22 + v50);
    }
    else {
      uint64_t v57 = 0;
    }
    uint64_t v59 = *v49;
    uint64_t v58 = v49[1];
    uint64_t v60 = v58 + v51 * v21 + v50;
    if (!v58) {
      uint64_t v60 = 0;
    }
    char v61 = (unsigned char *)(v59 + v51 * v20 + v50);
    uint64_t v62 = *v18 + v19 * v14 + 8 * v52;
    do
    {
      if (v13)
      {
        unint64_t v63 = 0;
        unint64_t v64 = v57;
        uint64_t v65 = v61;
        uint64_t v66 = v62;
        do
        {
          LOWORD(v32) = *(_WORD *)(v66 + 2 * v55);
          LOWORD(v30) = *(_WORD *)(v66 + 2 * v54);
          LOWORD(v31) = *(_WORD *)(v66 + 2 * v53);
          _H5 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v23 * (float)LODWORD(v32), 0.0), 8191.0)));
          __asm { FCVT            S14, H5 }
          _H5 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v23 * (float)LODWORD(v30), 0.0), 8191.0)));
          __asm { FCVT            S15, H5 }
          _H5 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v23 * (float)LODWORD(v31), 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          float v77 = (float)((float)(v46 * _S15) + (float)(v45 * _S14)) + (float)(v47 * _S18);
          float v78 = v77 + (float)(v48 * fmaxf(_S14, fmaxf(_S15, _S18)));
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          LOWORD(v77) = *(_WORD *)(v66 + 8 + 2 * v55);
          LOWORD(v78) = *(_WORD *)(v66 + 8 + 2 * v54);
          *(float *)&unsigned int v80 = (float)LODWORD(v78);
          float v81 = v23 * *(float *)&v80;
          LOWORD(v80) = *(_WORD *)(v66 + 8 + 2 * v53);
          _H5 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v23 * (float)LODWORD(v77), 0.0), 8191.0)));
          float v83 = v23 * (float)v80;
          __asm { FCVT            S20, H5 }
          _H5 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S21, H5 }
          _H5 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S22, H5 }
          float v89 = (float)((float)((float)(v46 * _S21) + (float)(v45 * _S20)) + (float)(v47 * _S22))
              + (float)(v48 * fmaxf(_S20, fmaxf(_S21, _S22)));
          float v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          if (v64)
          {
            char v91 = llroundf((float)*(unsigned __int16 *)(v66 + 2 * result) * 0.0038911);
            char v92 = llroundf((float)*(unsigned __int16 *)(v66 + 8 + 2 * result) * 0.0038911);
          }
          else
          {
            char v91 = 0;
            char v92 = 0;
          }
          _H3 = *(_WORD *)(v43 + 2 * llroundf(v79));
          __asm { FCVT            S3, H3 }
          float v95 = _S14 * _S3;
          float v96 = _S15 * _S3;
          float v97 = _S18 * _S3;
          _H5 = *(_WORD *)(v43 + 2 * llroundf(v90));
          __asm { FCVT            S5, H5 }
          _S18 = _S20 * _S5;
          _S20 = _S21 * _S5;
          float v102 = _S22 * _S5;
          _S21 = (float)((float)(v34 * v96) + (float)(v95 * v33)) + (float)(v97 * v35);
          float v104 = (float)((float)(v37 * v96) + (float)(v95 * v36)) + (float)(v97 * v38);
          _S3 = (float)((float)(v41 * v96) + (float)(v95 * v39)) + (float)(v97 * v40);
          _S19 = (float)((float)(v34 * _S20) + (float)(_S18 * v33)) + (float)(v102 * v35);
          float v107 = (float)((float)(v37 * _S20) + (float)(_S18 * v36)) + (float)(v102 * v38);
          _S5 = (float)((float)(v41 * _S20) + (float)(_S18 * v39)) + (float)(v102 * v40);
          LOWORD(_S18) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          LOWORD(_S20) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H18
            FCVT            S20, H20
          }
          LOWORD(_S3) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S19) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S21) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          LOWORD(_S5) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          float v115 = (float)((float)((float)(v28 * _S20) + (float)(v132 * _S18)) + (float)(v29 * _S3)) + v24;
          float v116 = (float)((float)((float)(v28 * _S21) + (float)(v132 * _S19)) + (float)(v29 * _S5)) + v24;
          if (v115 < v24) {
            float v117 = v24;
          }
          else {
            float v117 = (float)((float)((float)(v28 * _S20) + (float)(v132 * _S18)) + (float)(v29 * _S3)) + v24;
          }
          if (v115 <= v26) {
            float v118 = v117;
          }
          else {
            float v118 = v26;
          }
          *uint64_t v65 = llroundf(v118);
          if (v116 < v24) {
            float v119 = v24;
          }
          else {
            float v119 = (float)((float)((float)(v28 * _S21) + (float)(v132 * _S19)) + (float)(v29 * _S5)) + v24;
          }
          if (v116 > v26) {
            float v119 = v26;
          }
          v65[1] = llroundf(v119);
          float v120 = _S18 + _S19;
          float v121 = _S20 + _S21;
          float v122 = (float)(v25 + (float)(v120 * v131)) + (float)((float)(_S20 + _S21) * v130);
          float v123 = _S3 + _S5;
          float v124 = v122 + (float)((float)(_S3 + _S5) * v129);
          float v125 = v27;
          if (v124 <= v27)
          {
            float v125 = v124;
            if (v124 < v133) {
              float v125 = v133;
            }
          }
          HIWORD(v32) = HIWORD(v126);
          float v30 = (float)((float)(v25 + (float)(v120 * v128)) + (float)(v121 * v127)) + (float)(v123 * v126);
          *(unsigned char *)(v60 + v63) = llroundf(v125);
          float v31 = v27;
          if (v30 <= v27)
          {
            float v31 = v30;
            if (v30 < v133) {
              float v31 = v133;
            }
          }
          *(unsigned char *)(v60 + v63 + 1) = llroundf(v31);
          if (v64)
          {
            *unint64_t v64 = v91;
            v64[1] = v92;
            v64 += 2;
          }
          v66 += 16;
          v63 += 2;
          v65 += 2;
        }
        while (v13 > v63);
      }
      v62 += v19;
      v61 += v20;
      v60 += v21;
      v57 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_422vf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v15 = *(void *)(result + 28);
  unint64_t v16 = *(unsigned __int8 *)result;
  unint64_t v17 = v15 * a2 / v16;
  unint64_t v18 = (v15 + v15 * a2) / v16;
  if (v18 != v17)
  {
    uint64_t v19 = 0;
    unint64_t v20 = *(void *)(result + 20);
    unint64_t v21 = v17 + *(void *)(result + 44);
    unint64_t v22 = v18 - v17;
    uint64_t v23 = *(void *)(result + 152);
    uint64_t v24 = *(uint64_t **)(result + 136);
    float v25 = *(void **)(result + 56);
    uint64_t v26 = **(void **)(result + 64);
    uint64_t v27 = *v24;
    uint64_t v28 = v24[1];
    uint64_t v29 = v24[2];
    float v30 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    LOWORD(a5) = *(_WORD *)(v23 + 144);
    float v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 146);
    float v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 148);
    float v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 150);
    float v34 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v23 + 152);
    float v35 = (float)LODWORD(a9);
    float v36 = *(float *)(v23 + 36);
    float v37 = *(float *)(v23 + 40);
    float v38 = *(float *)(v23 + 44);
    float v109 = *(float *)(v23 + 52) * 0.5;
    float v110 = *(float *)(v23 + 48) * 0.5;
    float v108 = *(float *)(v23 + 56) * 0.5;
    float v39 = *(float *)(v23 + 60) * 0.5;
    float v40 = *(float *)(v23 + 64) * 0.5;
    float v41 = *(float *)(v23 + 72);
    float v42 = *(float *)(v23 + 68) * 0.5;
    float v43 = *(float *)(v23 + 76);
    float v44 = *(float *)(v23 + 80);
    float v45 = *(float *)(v23 + 84);
    float v46 = *(float *)(v23 + 88);
    float v47 = *(float *)(v23 + 92);
    float v48 = *(float *)(v23 + 96);
    float v50 = *(float *)(v23 + 100);
    float v49 = *(float *)(v23 + 104);
    uint64_t v51 = v23 + 164;
    uint64_t v52 = v23 + 16548;
    uint64_t v53 = *(uint64_t **)(result + 128);
    uint64_t v54 = *(void *)(result + 112);
    unint64_t v55 = *(void *)(result + 104) * a2 / v16 + *(void *)(result + 120);
    uint64_t v56 = *(void *)(result + 36);
    uint64_t v57 = *(unsigned __int8 *)(v23 + 157);
    uint64_t result = *(unsigned __int8 *)(v23 + 156);
    uint64_t v58 = *(unsigned __int8 *)(v23 + 155);
    uint64_t v59 = *(unsigned __int8 *)(v23 + 154);
    uint64_t v60 = v53[2];
    if (v60) {
      char v61 = (unsigned char *)(v60 + v55 * v29 + v54);
    }
    else {
      char v61 = 0;
    }
    uint64_t v63 = *v53;
    uint64_t v62 = v53[1];
    uint64_t v64 = v62 + v55 * v28 + v54;
    if (!v62) {
      uint64_t v64 = 0;
    }
    uint64_t v65 = (unsigned char *)(v63 + v55 * v27 + v54);
    uint64_t v66 = *v25 + v26 * v21 + 8 * v56;
    do
    {
      if (v20)
      {
        unint64_t v67 = 0;
        uint64_t v68 = v66;
        float v69 = v61;
        float v70 = v65;
        do
        {
          uint64_t v71 = v68 + 8;
          if (v69)
          {
            LOWORD(v9) = *(_WORD *)(v68 + 2 * v57);
            HIWORD(v10) = 15231;
            float v72 = (float)LODWORD(v9) * 0.0038911;
            char v73 = llroundf(v72);
            LOWORD(v72) = *(_WORD *)(v71 + 2 * v57);
            float v9 = (float)LODWORD(v72) * 0.0038911;
            char v74 = llroundf(v9);
          }
          else
          {
            char v73 = 0;
            char v74 = 0;
          }
          LOWORD(v9) = *(_WORD *)(v68 + 2 * v59);
          LOWORD(v10) = *(_WORD *)(v68 + 2 * v58);
          LOWORD(v11) = *(_WORD *)(v68 + 2 * result);
          LOWORD(v12) = *(_WORD *)(v71 + 2 * v59);
          LOWORD(v13) = *(_WORD *)(v71 + 2 * v58);
          LOWORD(v14) = *(_WORD *)(v71 + 2 * result);
          _H10 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v9), 0.0), 8191.0)));
          _H11 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          _H12 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v11), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v12), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v13), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          _H15 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v30 * (float)LODWORD(v14), 0.0), 8191.0)));
          __asm { FCVT            S15, H15 }
          _S18 = (float)((float)(v43 * _S11) + (float)(_S10 * v41)) + (float)(_S12 * v44);
          _S19 = (float)((float)(v46 * _S11) + (float)(_S10 * v45)) + (float)(_S12 * v47);
          _S10 = (float)((float)(v50 * _S11) + (float)(_S10 * v48)) + (float)(_S12 * v49);
          _S11 = (float)((float)(v43 * _S14) + (float)(_S13 * v41)) + (float)(_S15 * v44);
          _S12 = (float)((float)(v46 * _S14) + (float)(_S13 * v45)) + (float)(_S15 * v47);
          float v96 = (float)((float)(v50 * _S14) + (float)(_S13 * v48)) + (float)(_S15 * v49);
          LOWORD(_S18) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          LOWORD(_S19) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H18
            FCVT            S19, H19
          }
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S14, H10 }
          LOWORD(_S10) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          float v103 = (float)((float)((float)(v37 * _S19) + (float)(v36 * _S18)) + (float)(v38 * _S14)) + v31;
          float v14 = (float)((float)((float)(v37 * _S11) + (float)(v36 * _S10)) + (float)(v38 * _S12)) + v31;
          if (v103 < v31) {
            float v104 = v31;
          }
          else {
            float v104 = (float)((float)((float)(v37 * _S19) + (float)(v36 * _S18)) + (float)(v38 * _S14)) + v31;
          }
          if (v103 > v33) {
            float v104 = v33;
          }
          unsigned char *v70 = llroundf(v104);
          if (v14 < v31) {
            float v105 = v31;
          }
          else {
            float v105 = (float)((float)((float)(v37 * _S11) + (float)(v36 * _S10)) + (float)(v38 * _S12)) + v31;
          }
          if (v14 > v33) {
            float v105 = v33;
          }
          v70[1] = llroundf(v105);
          float v106 = _S18 + _S10;
          float v107 = _S19 + _S11;
          float v11 = _S14 + _S12;
          float v13 = (float)((float)(v32 + (float)(v106 * v110)) + (float)(v107 * v109)) + (float)(v11 * v108);
          float v12 = v35;
          if (v13 <= v35)
          {
            float v12 = (float)((float)(v32 + (float)(v106 * v110)) + (float)(v107 * v109)) + (float)(v11 * v108);
            if (v13 < v34) {
              float v12 = v34;
            }
          }
          float v9 = (float)((float)(v32 + (float)(v106 * v39)) + (float)(v107 * v40)) + (float)(v11 * v42);
          *(unsigned char *)(v64 + v67) = llroundf(v12);
          float v10 = v35;
          if (v9 <= v35)
          {
            float v10 = v9;
            if (v9 < v34) {
              float v10 = v34;
            }
          }
          *(unsigned char *)(v64 + v67 + 1) = llroundf(v10);
          if (v69)
          {
            *float v69 = v73;
            v69[1] = v74;
            v69 += 2;
          }
          v68 += 16;
          v67 += 2;
          v70 += 2;
        }
        while (v20 > v67);
      }
      v66 += v26;
      v65 += v27;
      v64 += v28;
      v61 += v29;
      ++v19;
    }
    while (v19 != v22);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_422vf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v14 = *(void *)(result + 28);
  unint64_t v15 = *(unsigned __int8 *)result;
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (v17 != v16)
  {
    uint64_t v18 = 0;
    unint64_t v19 = *(void *)(result + 20);
    unint64_t v20 = v16 + *(void *)(result + 44);
    unint64_t v21 = v17 - v16;
    uint64_t v22 = *(void *)(result + 152);
    uint64_t v23 = *(uint64_t **)(result + 136);
    uint64_t v24 = *(void **)(result + 56);
    uint64_t v25 = **(void **)(result + 64);
    uint64_t v26 = *v23;
    uint64_t v27 = v23[1];
    uint64_t v28 = v23[2];
    *(float *)&unsigned int v29 = (float)*(unsigned int *)(v22 + 136);
    float v30 = *(float *)&v29 / (float)*(unsigned int *)(v22 + 128);
    LOWORD(v29) = *(_WORD *)(v22 + 144);
    float v31 = (float)v29;
    LOWORD(a5) = *(_WORD *)(v22 + 146);
    float v32 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v22 + 148);
    float v33 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v22 + 150);
    float v34 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v22 + 152);
    float v35 = (float)LODWORD(a8);
    float v36 = *(float *)(v22 + 36);
    float v37 = *(float *)(v22 + 40);
    float v38 = *(float *)(v22 + 44);
    float v39 = *(float *)(v22 + 48) * 0.5;
    float v40 = *(float *)(v22 + 52) * 0.5;
    float v41 = *(float *)(v22 + 56) * 0.5;
    float v42 = *(float *)(v22 + 60) * 0.5;
    float v43 = *(float *)(v22 + 64) * 0.5;
    float v44 = *(float *)(v22 + 68) * 0.5;
    float v45 = *(void **)(result + 128);
    uint64_t v46 = *(void *)(result + 112);
    unint64_t v47 = *(void *)(result + 104) * a2 / v15 + *(void *)(result + 120);
    uint64_t v48 = *(void *)(result + 36);
    uint64_t v49 = *(unsigned __int8 *)(v22 + 157);
    uint64_t v50 = *(unsigned __int8 *)(v22 + 156);
    uint64_t v51 = *(unsigned __int8 *)(v22 + 155);
    uint64_t result = *(unsigned __int8 *)(v22 + 154);
    uint64_t v52 = v45[2];
    if (v52) {
      uint64_t v53 = (unsigned char *)(v52 + v47 * v28 + v46);
    }
    else {
      uint64_t v53 = 0;
    }
    uint64_t v56 = v45;
    uint64_t v55 = *v45;
    uint64_t v54 = v56[1];
    BOOL v57 = v54 == 0;
    uint64_t v58 = v54 + v47 * v27 + v46;
    if (v57) {
      uint64_t v58 = 0;
    }
    uint64_t v59 = (unsigned char *)(v55 + v47 * v26 + v46);
    uint64_t v60 = *v24 + v25 * v20 + 8 * v48;
    do
    {
      if (v19)
      {
        unint64_t v61 = 0;
        uint64_t v62 = v60;
        uint64_t v63 = v53;
        uint64_t v64 = v59;
        do
        {
          uint64_t v65 = v62 + 8;
          if (v63)
          {
            LOWORD(v8) = *(_WORD *)(v62 + 2 * v49);
            float v66 = (float)LODWORD(v8) * 0.0038911;
            char v67 = llroundf(v66);
            LOWORD(v66) = *(_WORD *)(v65 + 2 * v49);
            float v8 = (float)LODWORD(v66) * 0.0038911;
            char v68 = llroundf(v8);
          }
          else
          {
            char v67 = 0;
            char v68 = 0;
          }
          LOWORD(v8) = *(_WORD *)(v62 + 2 * result);
          float v69 = v30 * (float)LODWORD(v8);
          LOWORD(v9) = *(_WORD *)(v62 + 2 * v51);
          float v70 = v30 * (float)LODWORD(v9);
          LOWORD(v10) = *(_WORD *)(v62 + 2 * v50);
          float v71 = v30 * (float)LODWORD(v10);
          LOWORD(v11) = *(_WORD *)(v65 + 2 * result);
          float v72 = v30 * (float)LODWORD(v11);
          LOWORD(v12) = *(_WORD *)(v65 + 2 * v51);
          float v73 = v30 * (float)LODWORD(v12);
          LOWORD(v13) = *(_WORD *)(v65 + 2 * v50);
          float v13 = v30 * (float)LODWORD(v13);
          float v74 = (float)((float)((float)(v37 * v70) + (float)(v36 * v69)) + (float)(v38 * v71)) + v31;
          float v75 = (float)((float)((float)(v37 * v73) + (float)(v36 * v72)) + (float)(v38 * v13)) + v31;
          if (v74 < v31) {
            float v76 = v31;
          }
          else {
            float v76 = (float)((float)((float)(v37 * v70) + (float)(v36 * v69)) + (float)(v38 * v71)) + v31;
          }
          if (v74 <= v33) {
            float v77 = v76;
          }
          else {
            float v77 = v33;
          }
          *uint64_t v64 = llroundf(v77);
          if (v75 < v31) {
            float v78 = v31;
          }
          else {
            float v78 = (float)((float)((float)(v37 * v73) + (float)(v36 * v72)) + (float)(v38 * v13)) + v31;
          }
          if (v75 > v33) {
            float v78 = v33;
          }
          v64[1] = llroundf(v78);
          float v79 = v69 + v72;
          float v80 = v70 + v73;
          float v10 = v71 + v13;
          float v12 = (float)((float)(v32 + (float)(v79 * v39)) + (float)(v80 * v40)) + (float)(v10 * v41);
          float v11 = v35;
          if (v12 <= v35)
          {
            float v11 = (float)((float)(v32 + (float)(v79 * v39)) + (float)(v80 * v40)) + (float)(v10 * v41);
            if (v12 < v34) {
              float v11 = v34;
            }
          }
          float v8 = (float)((float)(v32 + (float)(v79 * v42)) + (float)(v80 * v43)) + (float)(v10 * v44);
          *(unsigned char *)(v58 + v61) = llroundf(v11);
          float v9 = v35;
          if (v8 <= v35)
          {
            float v9 = v8;
            if (v8 < v34) {
              float v9 = v34;
            }
          }
          *(unsigned char *)(v58 + v61 + 1) = llroundf(v9);
          if (v63)
          {
            *uint64_t v63 = v67;
            v63[1] = v68;
            v63 += 2;
          }
          v62 += 16;
          v61 += 2;
          v64 += 2;
        }
        while (v19 > v61);
      }
      v60 += v25;
      v59 += v26;
      v58 += v27;
      v53 += v28;
      ++v18;
    }
    while (v18 != v21);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_TRC_Tone_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, double a6, float a7, float a8, float a9, float a10)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = *result;
  unint64_t v13 = v11 * a2 / v12;
  uint64_t v14 = *((void *)result + 14);
  unint64_t v15 = (void *)*((void *)result + 16);
  unint64_t v16 = *((void *)result + 13) * a2 / v12 + *((void *)result + 15);
  uint64_t v17 = (uint64_t *)*((void *)result + 17);
  unint64_t v18 = (v11 + v11 * a2) / v12;
  uint64_t v19 = (unsigned char *)v15[1];
  if (v19) {
    v19 += v17[1] * v16 + v14;
  }
  if (v18 != v13)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *(void *)(result + 44);
    uint64_t v22 = v13 + v21;
    uint64_t v23 = **((void **)result + 8);
    uint64_t v24 = *v17;
    uint64_t v25 = *((void *)result + 19);
    uint64_t v26 = *v15 + v24 * v16;
    unint64_t v27 = *(void *)(result + 20);
    uint64_t v28 = v18 + v21;
    uint64_t v29 = **((void **)result + 7) + v23 * v22 + 8 * *(void *)(result + 36);
    float v30 = (unsigned char *)(v26 + v14);
    uint64_t v31 = v28 - v22;
    LOWORD(a5) = *(_WORD *)(v25 + 144);
    LOWORD(a7) = *(_WORD *)(v25 + 146);
    LOWORD(a8) = *(_WORD *)(v25 + 148);
    LOWORD(a9) = *(_WORD *)(v25 + 150);
    LOWORD(a10) = *(_WORD *)(v25 + 152);
    float v32 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    float v33 = (float)LODWORD(a5);
    float v135 = (float)LODWORD(a7);
    float v34 = (float)LODWORD(a8);
    float v35 = (float)LODWORD(a9);
    float v36 = (float)LODWORD(a10);
    float v37 = *(float *)(v25 + 36);
    float v38 = *(float *)(v25 + 40);
    float v39 = *(float *)(v25 + 44);
    float v40 = 0.5;
    float v133 = *(float *)(v25 + 52) * 0.5;
    float v134 = *(float *)(v25 + 48) * 0.5;
    _S19 = *(float *)(v25 + 64);
    float v131 = *(float *)(v25 + 60) * 0.5;
    float v132 = *(float *)(v25 + 56) * 0.5;
    float v130 = _S19 * 0.5;
    float v42 = *(float *)(v25 + 68) * 0.5;
    float v128 = v42;
    float v129 = *(float *)(v25 + 72);
    float v43 = *(float *)(v25 + 76);
    float v44 = *(float *)(v25 + 80);
    float v45 = *(float *)(v25 + 84);
    float v46 = *(float *)(v25 + 88);
    float v47 = *(float *)(v25 + 92);
    float v48 = *(float *)(v25 + 96);
    float v50 = *(float *)(v25 + 100);
    float v49 = *(float *)(v25 + 104);
    uint64_t v51 = v25 + 164;
    uint64_t v52 = v25 + 16548;
    uint64_t result = (unsigned __int8 *)(v25 + 32932);
    float v53 = *(float *)(v25 + 108);
    float v54 = *(float *)(v25 + 112);
    float v55 = *(float *)(v25 + 116);
    float v56 = *(float *)(v25 + 120);
    uint64_t v57 = *(unsigned __int8 *)(v25 + 157);
    uint64_t v58 = *(unsigned __int8 *)(v25 + 156);
    uint64_t v59 = *(unsigned __int8 *)(v25 + 155);
    uint64_t v60 = *(unsigned __int8 *)(v25 + 154);
    do
    {
      if (v27)
      {
        unint64_t v61 = 0;
        uint64_t v62 = v19;
        uint64_t v63 = v30;
        uint64_t v64 = v29;
        do
        {
          LOWORD(v42) = *(_WORD *)(v64 + 2 * v60);
          LOWORD(v40) = *(_WORD *)(v64 + 2 * v59);
          LOWORD(_S19) = *(_WORD *)(v64 + 2 * v58);
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v42), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v40), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(_S19), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          float v75 = (float)((float)((float)(v54 * _S18) + (float)(v53 * _S14)) + (float)(v55 * _S15))
              + (float)(v56 * fmaxf(_S14, fmaxf(_S18, _S15)));
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          LOWORD(v75) = *(_WORD *)(v64 + 8 + 2 * v60);
          LOWORD(v10) = *(_WORD *)(v64 + 8 + 2 * v59);
          *(float *)&unsigned int v77 = (float)LODWORD(v10);
          float v78 = v32 * *(float *)&v77;
          LOWORD(v77) = *(_WORD *)(v64 + 8 + 2 * v58);
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v75), 0.0), 8191.0)));
          float v80 = v32 * (float)v77;
          __asm { FCVT            S20, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S21, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S22, H0 }
          float v86 = (float)((float)((float)(v54 * _S21) + (float)(v53 * _S20)) + (float)(v55 * _S22))
              + (float)(v56 * fmaxf(_S20, fmaxf(_S21, _S22)));
          float v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          if (v62)
          {
            char v88 = llroundf((float)*(unsigned __int16 *)(v64 + 2 * v57) * 0.0038911);
            char v89 = llroundf((float)*(unsigned __int16 *)(v64 + 8 + 2 * v57) * 0.0038911);
          }
          else
          {
            char v88 = 0;
            char v89 = 0;
          }
          _H0 = *(_WORD *)(v52 + 2 * llroundf(v76));
          __asm { FCVT            S0, H0 }
          float v92 = _S14 * _S0;
          float v93 = _S18 * _S0;
          float v94 = _S15 * _S0;
          _H19 = *(_WORD *)(v52 + 2 * llroundf(v87));
          __asm { FCVT            S19, H19 }
          float v97 = _S20 * _S19;
          float v98 = _S21 * _S19;
          float v99 = _S22 * _S19;
          float v100 = (float)((float)(v43 * v93) + (float)(v92 * v129)) + (float)(v94 * v44);
          float v101 = (float)((float)(v46 * v93) + (float)(v92 * v45)) + (float)(v94 * v47);
          float v102 = (float)((float)(v50 * v93) + (float)(v92 * v48)) + (float)(v94 * v49);
          _S7 = (float)(v43 * v98) + (float)(v97 * v129);
          _S18 = (float)(v46 * v98) + (float)(v97 * v45);
          float v105 = (float)(v50 * v98) + (float)(v97 * v48);
          float v106 = _S18 + (float)(v99 * v47);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0))];
          float v107 = v105 + (float)(v99 * v49);
          __asm { FCVT            S22, H18 }
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0))];
          unsigned int v109 = llroundf(fminf(fmaxf(v102, 0.0), 8191.0));
          __asm { FCVT            S0, H18 }
          LOWORD(_S18) = *(_WORD *)&result[2 * v109];
          __asm { FCVT            S24, H18 }
          LOWORD(_S7) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S7 + (float)(v99 * v44), 0.0), 8191.0))];
          __asm { FCVT            S18, H7 }
          LOWORD(_S7) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0))];
          __asm { FCVT            S19, H7 }
          unsigned int v113 = llroundf(fminf(fmaxf(v107, 0.0), 8191.0));
          float v114 = (float)(v38 * _S0) + (float)(v37 * _S22);
          _S0 = _S0 + _S19;
          float v116 = (float)(v135 + (float)((float)(_S22 + _S18) * v134)) + (float)(_S0 * v133);
          float v117 = (float)(v135 + (float)((float)(_S22 + _S18) * v131)) + (float)(_S0 * v130);
          LOWORD(_S0) = *(_WORD *)&result[2 * v113];
          __asm { FCVT            S0, H0 }
          float v119 = v114 + (float)(v39 * _S24);
          float v120 = v116 + (float)((float)(_S24 + _S0) * v132);
          float v10 = v117 + (float)((float)(_S24 + _S0) * v128);
          if (v120 < v35) {
            float v121 = v35;
          }
          else {
            float v121 = v120;
          }
          float v122 = v119 + v33;
          if (v120 <= v36) {
            float v123 = v121;
          }
          else {
            float v123 = v36;
          }
          char v124 = llroundf(v123);
          if (v122 < v33) {
            float v125 = v33;
          }
          else {
            float v125 = v122;
          }
          *uint64_t v63 = v124;
          if (v122 <= v34) {
            float v126 = v125;
          }
          else {
            float v126 = v34;
          }
          v63[1] = llroundf(v126);
          float v127 = v36;
          if (v10 <= v36)
          {
            float v127 = v10;
            if (v10 < v35) {
              float v127 = v35;
            }
          }
          float v42 = (float)((float)((float)(v38 * _S19) + (float)(v37 * _S18)) + (float)(v39 * _S0)) + v33;
          v63[2] = llroundf(v127);
          float v40 = v34;
          if (v42 <= v34)
          {
            float v40 = v42;
            if (v42 < v33) {
              float v40 = v33;
            }
          }
          v63[3] = llroundf(v40);
          if (v62)
          {
            *uint64_t v62 = v88;
            v62[1] = v89;
            v62 += 2;
          }
          v64 += 16;
          v61 += 2;
          v63 += 4;
        }
        while (v27 > v61);
      }
      v29 += v23;
      v30 += v24;
      ++v20;
    }
    while (v20 != v31);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_2vuyf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v15 = *(void *)(result + 28);
  unint64_t v16 = *(unsigned __int8 *)result;
  unint64_t v17 = v15 * a2 / v16;
  uint64_t v18 = *(void *)(result + 112);
  uint64_t v19 = *(void **)(result + 128);
  unint64_t v20 = *(void *)(result + 104) * a2 / v16 + *(void *)(result + 120);
  long long v21 = *(uint64_t **)(result + 136);
  unint64_t v22 = (v15 + v15 * a2) / v16;
  uint64_t v23 = (unsigned char *)v19[1];
  if (v23) {
    v23 += v21[1] * v20 + v18;
  }
  if (v22 != v17)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(result + 44);
    uint64_t v26 = v17 + v25;
    uint64_t v27 = **(void **)(result + 64);
    uint64_t v28 = *v21;
    uint64_t v29 = *(void *)(result + 152);
    uint64_t v30 = *v19 + v28 * v20;
    unint64_t v31 = *(void *)(result + 20);
    uint64_t v32 = v22 + v25;
    uint64_t v33 = **(void **)(result + 56) + v27 * v26 + 8 * *(void *)(result + 36);
    float v34 = (unsigned char *)(v30 + v18);
    uint64_t v35 = v32 - v26;
    LOWORD(a5) = *(_WORD *)(v29 + 144);
    LOWORD(a6) = *(_WORD *)(v29 + 146);
    LOWORD(a7) = *(_WORD *)(v29 + 148);
    LOWORD(a8) = *(_WORD *)(v29 + 150);
    LOWORD(a9) = *(_WORD *)(v29 + 152);
    float v36 = 8191.0 / (float)*(unsigned int *)(v29 + 128);
    float v37 = (float)LODWORD(a5);
    float v38 = (float)LODWORD(a6);
    float v39 = (float)LODWORD(a7);
    float v40 = (float)LODWORD(a8);
    float v41 = (float)LODWORD(a9);
    float v42 = *(float *)(v29 + 36);
    float v43 = *(float *)(v29 + 40);
    float v44 = *(float *)(v29 + 44);
    float v112 = *(float *)(v29 + 52) * 0.5;
    float v113 = *(float *)(v29 + 48) * 0.5;
    float v45 = *(float *)(v29 + 56) * 0.5;
    float v46 = *(float *)(v29 + 60) * 0.5;
    float v47 = *(float *)(v29 + 64) * 0.5;
    float v48 = *(float *)(v29 + 72);
    float v49 = *(float *)(v29 + 68) * 0.5;
    float v50 = *(float *)(v29 + 76);
    float v51 = *(float *)(v29 + 80);
    float v52 = *(float *)(v29 + 84);
    float v53 = *(float *)(v29 + 88);
    float v54 = *(float *)(v29 + 92);
    float v55 = *(float *)(v29 + 96);
    float v57 = *(float *)(v29 + 100);
    float v56 = *(float *)(v29 + 104);
    uint64_t v58 = v29 + 164;
    uint64_t v59 = v29 + 16548;
    uint64_t result = *(unsigned __int8 *)(v29 + 157);
    uint64_t v60 = *(unsigned __int8 *)(v29 + 156);
    uint64_t v61 = *(unsigned __int8 *)(v29 + 155);
    uint64_t v62 = *(unsigned __int8 *)(v29 + 154);
    do
    {
      if (v31)
      {
        unint64_t v63 = 0;
        uint64_t v64 = v33;
        uint64_t v65 = v23;
        float v66 = v34;
        do
        {
          uint64_t v67 = v64 + 8;
          if (v65)
          {
            LOWORD(v9) = *(_WORD *)(v64 + 2 * result);
            HIWORD(v10) = 15231;
            float v68 = (float)LODWORD(v9) * 0.0038911;
            char v69 = llroundf(v68);
            LOWORD(v68) = *(_WORD *)(v67 + 2 * result);
            float v9 = (float)LODWORD(v68) * 0.0038911;
            char v70 = llroundf(v9);
          }
          else
          {
            char v69 = 0;
            char v70 = 0;
          }
          LOWORD(v9) = *(_WORD *)(v64 + 2 * v62);
          LOWORD(v10) = *(_WORD *)(v64 + 2 * v61);
          LOWORD(_S12) = *(_WORD *)(v64 + 2 * v60);
          LOWORD(v12) = *(_WORD *)(v67 + 2 * v62);
          LOWORD(v13) = *(_WORD *)(v67 + 2 * v61);
          LOWORD(_S15) = *(_WORD *)(v67 + 2 * v60);
          _H10 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v9), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(_S12), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v12), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v13), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          unsigned int v85 = llroundf(fminf(fmaxf(v36 * (float)LODWORD(_S15), 0.0), 8191.0));
          _S15 = (float)((float)(v50 * _S11) + (float)(_S10 * v48)) + (float)(_S12 * v51);
          _S18 = (float)((float)(v53 * _S11) + (float)(_S10 * v52)) + (float)(_S12 * v54);
          _S10 = (float)((float)(v57 * _S11) + (float)(_S10 * v55)) + (float)(_S12 * v56);
          float v89 = (float)(v50 * _S14) + (float)(_S13 * v48);
          float v90 = (float)(v53 * _S14) + (float)(_S13 * v52);
          float v91 = (float)(v57 * _S14) + (float)(_S13 * v55);
          LOWORD(_S14) = *(_WORD *)(v58 + 2 * v85);
          __asm { FCVT            S14, H14 }
          _S11 = v89 + (float)(_S14 * v51);
          float v94 = v90 + (float)(_S14 * v54);
          LOWORD(_S15) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S15, 0.0), 8191.0)));
          float v95 = v91 + (float)(_S14 * v56);
          __asm { FCVT            S14, H15 }
          LOWORD(_S18) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S15, H10 }
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          unsigned int v100 = llroundf(fminf(fmaxf(v95, 0.0), 8191.0));
          float v101 = (float)(v43 * _S18) + (float)(v42 * _S14);
          _S12 = _S14 + _S10;
          float v103 = _S18 + _S11;
          float v104 = (float)(v38 + (float)((float)(_S14 + _S10) * v113)) + (float)(v103 * v112);
          float v105 = (float)(v38 + (float)(_S12 * v46)) + (float)(v103 * v47);
          LOWORD(_S12) = *(_WORD *)(v59 + 2 * v100);
          __asm { FCVT            S12, H12 }
          float v106 = v101 + (float)(v44 * _S15);
          float v107 = v104 + (float)((float)(_S15 + _S12) * v45);
          float v12 = v105 + (float)((float)(_S15 + _S12) * v49);
          if (v107 < v40) {
            float v108 = v40;
          }
          else {
            float v108 = v107;
          }
          float v109 = v106 + v37;
          if (v107 > v41) {
            float v108 = v41;
          }
          char v110 = llroundf(v108);
          if (v109 < v37) {
            float v111 = v37;
          }
          else {
            float v111 = v109;
          }
          *float v66 = v110;
          if (v109 > v39) {
            float v111 = v39;
          }
          v66[1] = llroundf(v111);
          float v13 = v41;
          if (v12 <= v41)
          {
            float v13 = v12;
            if (v12 < v40) {
              float v13 = v40;
            }
          }
          float v9 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S10)) + (float)(v44 * _S12)) + v37;
          v66[2] = llroundf(v13);
          float v10 = v39;
          if (v9 <= v39)
          {
            float v10 = v9;
            if (v9 < v37) {
              float v10 = v37;
            }
          }
          v66[3] = llroundf(v10);
          if (v65)
          {
            *uint64_t v65 = v69;
            v65[1] = v70;
            v65 += 2;
          }
          v64 += 16;
          v63 += 2;
          v66 += 4;
        }
        while (v31 > v63);
      }
      v33 += v27;
      v34 += v28;
      ++v24;
    }
    while (v24 != v35);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_2vuyf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_2vuyf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = *(unsigned __int8 *)result;
  unint64_t v13 = v11 * a2 / v12;
  uint64_t v14 = *(void *)(result + 112);
  uint64_t v15 = *(void **)(result + 128);
  unint64_t v16 = *(void *)(result + 104) * a2 / v12 + *(void *)(result + 120);
  uint64_t v17 = *(uint64_t **)(result + 136);
  unint64_t v18 = (v11 + v11 * a2) / v12;
  uint64_t v19 = (unsigned char *)v15[1];
  if (v19) {
    v19 += v17[1] * v16 + v14;
  }
  if (v18 != v13)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *(void *)(result + 44);
    uint64_t v22 = v13 + v21;
    uint64_t v23 = **(void **)(result + 64);
    uint64_t v24 = *v17;
    uint64_t v25 = *v15 + v24 * v16;
    uint64_t v26 = *(void *)(result + 152);
    unint64_t v27 = *(void *)(result + 20);
    uint64_t v28 = v18 + v21;
    uint64_t v29 = **(void **)(result + 56) + v23 * v22 + 8 * *(void *)(result + 36);
    uint64_t v30 = (unsigned char *)(v25 + v14);
    uint64_t v31 = v28 - v22;
    LOWORD(a5) = *(_WORD *)(v26 + 144);
    LOWORD(a6) = *(_WORD *)(v26 + 146);
    LOWORD(a7) = *(_WORD *)(v26 + 148);
    float v32 = (float)*(unsigned int *)(v26 + 136) / (float)*(unsigned int *)(v26 + 128);
    float v33 = (float)LODWORD(a5);
    float v34 = (float)LODWORD(a6);
    float v35 = (float)LODWORD(a7);
    LOWORD(a7) = *(_WORD *)(v26 + 150);
    float v36 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v26 + 152);
    float v37 = (float)LODWORD(a8);
    float v38 = *(float *)(v26 + 36);
    float v39 = *(float *)(v26 + 40);
    float v40 = *(float *)(v26 + 44);
    float v41 = *(float *)(v26 + 48) * 0.5;
    float v42 = *(float *)(v26 + 52) * 0.5;
    float v43 = *(float *)(v26 + 56) * 0.5;
    float v44 = *(float *)(v26 + 60) * 0.5;
    float v45 = *(float *)(v26 + 64) * 0.5;
    float v46 = *(float *)(v26 + 68) * 0.5;
    uint64_t v47 = *(unsigned __int8 *)(v26 + 157);
    uint64_t v48 = *(unsigned __int8 *)(v26 + 156);
    uint64_t result = *(unsigned __int8 *)(v26 + 155);
    uint64_t v49 = *(unsigned __int8 *)(v26 + 154);
    do
    {
      if (v27)
      {
        unint64_t v50 = 0;
        uint64_t v51 = v29;
        float v52 = v19;
        float v53 = v30;
        do
        {
          uint64_t v54 = v51 + 8;
          if (v52)
          {
            LOWORD(v8) = *(_WORD *)(v51 + 2 * v47);
            float v55 = (float)LODWORD(v8) * 0.0038911;
            char v56 = llroundf(v55);
            LOWORD(v55) = *(_WORD *)(v54 + 2 * v47);
            float v8 = (float)LODWORD(v55) * 0.0038911;
            char v57 = llroundf(v8);
          }
          else
          {
            char v56 = 0;
            char v57 = 0;
          }
          LOWORD(v8) = *(_WORD *)(v51 + 2 * v49);
          LOWORD(v9) = *(_WORD *)(v51 + 2 * result);
          float v58 = v32 * (float)LODWORD(v8);
          *(float *)&unsigned int v59 = (float)LODWORD(v9);
          float v60 = v32 * (float)LODWORD(v9);
          LOWORD(v59) = *(_WORD *)(v51 + 2 * v48);
          *(float *)&unsigned int v61 = (float)v59;
          float v62 = v32 * *(float *)&v61;
          LOWORD(v61) = *(_WORD *)(v54 + 2 * v49);
          LOWORD(v9) = *(_WORD *)(v54 + 2 * result);
          float v63 = v32 * (float)v61;
          float v64 = v32 * (float)LODWORD(v9);
          LOWORD(v10) = *(_WORD *)(v54 + 2 * v48);
          float v10 = v32 * (float)LODWORD(v10);
          float v65 = (float)((float)((float)(v39 * v60) + (float)(v38 * v58)) + (float)(v40 * v62)) + v33;
          float v66 = v58 + v63;
          float v67 = v60 + v64;
          float v68 = v62 + v10;
          float v69 = (float)((float)(v34 + (float)(v66 * v41)) + (float)(v67 * v42)) + (float)(v68 * v43);
          float v70 = (float)((float)(v34 + (float)(v66 * v44)) + (float)(v67 * v45)) + (float)(v68 * v46);
          if (v69 < v36) {
            float v71 = v36;
          }
          else {
            float v71 = v69;
          }
          if (v69 > v37) {
            float v71 = v37;
          }
          unsigned char *v53 = llroundf(v71);
          if (v65 < v33) {
            float v72 = v33;
          }
          else {
            float v72 = v65;
          }
          if (v65 > v35) {
            float v72 = v35;
          }
          v53[1] = llroundf(v72);
          float v73 = v37;
          if (v70 <= v37)
          {
            float v73 = v70;
            if (v70 < v36) {
              float v73 = v36;
            }
          }
          float v8 = (float)((float)((float)(v39 * v64) + (float)(v38 * v63)) + (float)(v40 * v10)) + v33;
          v53[2] = llroundf(v73);
          float v9 = v35;
          if (v8 <= v35)
          {
            float v9 = v8;
            if (v8 < v33) {
              float v9 = v33;
            }
          }
          v53[3] = llroundf(v9);
          if (v52)
          {
            *float v52 = v56;
            v52[1] = v57;
            v52 += 2;
          }
          v51 += 16;
          v50 += 2;
          v53 += 4;
        }
        while (v27 > v50);
      }
      v29 += v23;
      v30 += v24;
      ++v20;
    }
    while (v20 != v31);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_TRC_Tone_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = *result;
  unint64_t v13 = v11 * a2 / v12;
  uint64_t v14 = *((void *)result + 14);
  uint64_t v15 = (void *)*((void *)result + 16);
  unint64_t v16 = *((void *)result + 13) * a2 / v12 + *((void *)result + 15);
  uint64_t v17 = (uint64_t *)*((void *)result + 17);
  unint64_t v18 = (v11 + v11 * a2) / v12;
  uint64_t v19 = (unsigned char *)v15[1];
  if (v19) {
    v19 += v17[1] * v16 + v14;
  }
  if (v18 != v13)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *(void *)(result + 44);
    uint64_t v22 = v13 + v21;
    uint64_t v23 = **((void **)result + 8);
    uint64_t v24 = *v17;
    uint64_t v25 = *((void *)result + 19);
    uint64_t v26 = *v15 + v24 * v16;
    unint64_t v27 = *(void *)(result + 20);
    uint64_t v28 = v18 + v21;
    uint64_t v29 = **((void **)result + 7) + v23 * v22 + 8 * *(void *)(result + 36);
    uint64_t v30 = (unsigned char *)(v26 + v14);
    uint64_t v31 = v28 - v22;
    LOWORD(a5) = *(_WORD *)(v25 + 144);
    LOWORD(a6) = *(_WORD *)(v25 + 146);
    LOWORD(a7) = *(_WORD *)(v25 + 148);
    LOWORD(a8) = *(_WORD *)(v25 + 150);
    LOWORD(a9) = *(_WORD *)(v25 + 152);
    float v32 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    float v33 = (float)LODWORD(a5);
    float v34 = (float)LODWORD(a7);
    float v35 = (float)LODWORD(a8);
    float v36 = (float)LODWORD(a9);
    float v37 = *(float *)(v25 + 40);
    float v133 = *(float *)(v25 + 36);
    float v134 = (float)LODWORD(a6);
    float v38 = *(float *)(v25 + 44);
    float v39 = 0.5;
    float v131 = *(float *)(v25 + 52) * 0.5;
    float v132 = *(float *)(v25 + 48) * 0.5;
    float v40 = *(float *)(v25 + 64);
    float v129 = *(float *)(v25 + 60) * 0.5;
    float v130 = *(float *)(v25 + 56) * 0.5;
    float v41 = *(float *)(v25 + 72);
    float v42 = *(float *)(v25 + 68) * 0.5;
    float v127 = v42;
    float v128 = v40 * 0.5;
    float v43 = *(float *)(v25 + 76);
    float v44 = *(float *)(v25 + 80);
    float v45 = *(float *)(v25 + 84);
    float v46 = *(float *)(v25 + 88);
    float v47 = *(float *)(v25 + 92);
    float v48 = *(float *)(v25 + 96);
    float v50 = *(float *)(v25 + 100);
    float v49 = *(float *)(v25 + 104);
    uint64_t v51 = v25 + 164;
    uint64_t v52 = v25 + 16548;
    uint64_t result = (unsigned __int8 *)(v25 + 32932);
    float v53 = *(float *)(v25 + 108);
    float v54 = *(float *)(v25 + 112);
    float v55 = *(float *)(v25 + 116);
    float v56 = *(float *)(v25 + 120);
    uint64_t v57 = *(unsigned __int8 *)(v25 + 157);
    uint64_t v58 = *(unsigned __int8 *)(v25 + 156);
    uint64_t v59 = *(unsigned __int8 *)(v25 + 155);
    uint64_t v60 = *(unsigned __int8 *)(v25 + 154);
    do
    {
      if (v27)
      {
        unint64_t v61 = 0;
        float v62 = v19;
        float v63 = v30;
        uint64_t v64 = v29;
        do
        {
          LOWORD(v42) = *(_WORD *)(v64 + 2 * v60);
          LOWORD(v39) = *(_WORD *)(v64 + 2 * v59);
          LOWORD(v40) = *(_WORD *)(v64 + 2 * v58);
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v42), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v39), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v40), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          float v75 = (float)((float)((float)(v54 * _S15) + (float)(v53 * _S14)) + (float)(v55 * _S18))
              + (float)(v56 * fmaxf(_S14, fmaxf(_S15, _S18)));
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          LOWORD(v75) = *(_WORD *)(v64 + 8 + 2 * v60);
          LOWORD(v9) = *(_WORD *)(v64 + 8 + 2 * v59);
          LOWORD(v10) = *(_WORD *)(v64 + 8 + 2 * v58);
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v75), 0.0), 8191.0)));
          float v78 = v32 * (float)LODWORD(v10);
          __asm { FCVT            S20, H0 }
          _H0 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v9), 0.0), 8191.0)));
          unsigned int v81 = llroundf(fminf(fmaxf(v78, 0.0), 8191.0));
          __asm { FCVT            S21, H0 }
          _H0 = *(_WORD *)(v51 + 2 * v81);
          __asm { FCVT            S22, H0 }
          float v85 = (float)((float)((float)(v54 * _S21) + (float)(v53 * _S20)) + (float)(v55 * _S22))
              + (float)(v56 * fmaxf(_S20, fmaxf(_S21, _S22)));
          float v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          if (v62)
          {
            char v87 = llroundf((float)*(unsigned __int16 *)(v64 + 2 * v57) * 0.0038911);
            char v88 = llroundf((float)*(unsigned __int16 *)(v64 + 8 + 2 * v57) * 0.0038911);
          }
          else
          {
            char v87 = 0;
            char v88 = 0;
          }
          _H0 = *(_WORD *)(v52 + 2 * llroundf(v76));
          __asm { FCVT            S0, H0 }
          float v91 = _S14 * _S0;
          float v92 = _S15 * _S0;
          float v93 = _S18 * _S0;
          _H18 = *(_WORD *)(v52 + 2 * llroundf(v86));
          __asm { FCVT            S18, H18 }
          _S19 = _S20 * _S18;
          _S20 = _S21 * _S18;
          float v98 = _S22 * _S18;
          float v99 = (float)((float)(v43 * v92) + (float)(v91 * v41)) + (float)(v93 * v44);
          float v100 = (float)((float)(v46 * v92) + (float)(v91 * v45)) + (float)(v93 * v47);
          _S0 = (float)((float)(v50 * v92) + (float)(v91 * v48)) + (float)(v93 * v49);
          _S3 = (float)((float)(v43 * _S20) + (float)(_S19 * v41)) + (float)(v98 * v44);
          float v103 = (float)((float)(v46 * _S20) + (float)(_S19 * v45)) + (float)(v98 * v47);
          float v104 = (float)((float)(v50 * _S20) + (float)(_S19 * v48)) + (float)(v98 * v49);
          LOWORD(_S19) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0))];
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0))];
          __asm { FCVT            S20, H20 }
          unsigned int v107 = llroundf(fminf(fmaxf(_S0, 0.0), 8191.0));
          LOWORD(_S0) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
          __asm { FCVT            S0, H0 }
          LOWORD(_S3) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0))];
          __asm { FCVT            S3, H3 }
          unsigned int v110 = llroundf(fminf(fmaxf(v104, 0.0), 8191.0));
          float v111 = (float)(v37 * _S20) + (float)(v133 * _S19);
          float v112 = (float)(v37 * _S3) + (float)(v133 * _S0);
          float v113 = _S19 + _S0;
          LOWORD(_S19) = *(_WORD *)&result[2 * v107];
          float v114 = _S20 + _S3;
          LOWORD(_S20) = *(_WORD *)&result[2 * v110];
          __asm
          {
            FCVT            S19, H19
            FCVT            S20, H20
          }
          float v117 = (float)(v111 + (float)(v38 * _S19)) + v33;
          float v118 = v112 + (float)(v38 * _S20);
          float v9 = _S19 + _S20;
          float v10 = (float)(v134 + (float)(v113 * v132)) + (float)(v114 * v131);
          float v119 = (float)(v134 + (float)(v113 * v129)) + (float)(v114 * v128);
          if (v117 < v33) {
            float v120 = v33;
          }
          else {
            float v120 = v117;
          }
          BOOL v121 = v117 <= v34;
          float v122 = v10 + (float)(v9 * v130);
          if (!v121) {
            float v120 = v34;
          }
          char v123 = llroundf(v120);
          if (v122 < v35) {
            float v124 = v35;
          }
          else {
            float v124 = v10 + (float)(v9 * v130);
          }
          if (v122 > v36) {
            float v124 = v36;
          }
          char v125 = llroundf(v124);
          float v42 = v119 + (float)(v9 * v127);
          if ((float)(v118 + v33) < v33) {
            float v126 = v33;
          }
          else {
            float v126 = v118 + v33;
          }
          *float v63 = v123;
          v63[1] = v125;
          if ((float)(v118 + v33) <= v34) {
            float v39 = v126;
          }
          else {
            float v39 = v34;
          }
          v63[2] = llroundf(v39);
          float v40 = v36;
          if (v42 <= v36)
          {
            float v40 = v42;
            if (v42 < v35) {
              float v40 = v35;
            }
          }
          v63[3] = llroundf(v40);
          if (v62)
          {
            *float v62 = v87;
            v62[1] = v88;
            v62 += 2;
          }
          v64 += 16;
          v61 += 2;
          v63 += 4;
        }
        while (v27 > v61);
      }
      v29 += v23;
      v30 += v24;
      ++v20;
    }
    while (v20 != v31);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_yuvsf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v15 = *(void *)(result + 28);
  unint64_t v16 = *(unsigned __int8 *)result;
  unint64_t v17 = v15 * a2 / v16;
  uint64_t v18 = *(void *)(result + 112);
  uint64_t v19 = *(void **)(result + 128);
  unint64_t v20 = *(void *)(result + 104) * a2 / v16 + *(void *)(result + 120);
  long long v21 = *(uint64_t **)(result + 136);
  unint64_t v22 = (v15 + v15 * a2) / v16;
  uint64_t v23 = (unsigned char *)v19[1];
  if (v23) {
    v23 += v21[1] * v20 + v18;
  }
  if (v22 != v17)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(result + 44);
    uint64_t v26 = v17 + v25;
    uint64_t v27 = **(void **)(result + 64);
    uint64_t v28 = *v21;
    uint64_t v29 = *(void *)(result + 152);
    uint64_t v30 = *v19 + v28 * v20;
    unint64_t v31 = *(void *)(result + 20);
    uint64_t v32 = v22 + v25;
    uint64_t v33 = **(void **)(result + 56) + v27 * v26 + 8 * *(void *)(result + 36);
    float v34 = (unsigned char *)(v30 + v18);
    uint64_t v35 = v32 - v26;
    LOWORD(a5) = *(_WORD *)(v29 + 144);
    LOWORD(a6) = *(_WORD *)(v29 + 146);
    LOWORD(a7) = *(_WORD *)(v29 + 148);
    LOWORD(a8) = *(_WORD *)(v29 + 150);
    LOWORD(a9) = *(_WORD *)(v29 + 152);
    float v36 = 8191.0 / (float)*(unsigned int *)(v29 + 128);
    float v37 = (float)LODWORD(a5);
    float v38 = (float)LODWORD(a6);
    float v39 = (float)LODWORD(a7);
    float v40 = (float)LODWORD(a8);
    float v41 = (float)LODWORD(a9);
    float v42 = *(float *)(v29 + 36);
    float v43 = *(float *)(v29 + 40);
    float v44 = *(float *)(v29 + 44);
    float v118 = *(float *)(v29 + 48) * 0.5;
    float v45 = *(float *)(v29 + 52) * 0.5;
    float v46 = *(float *)(v29 + 56) * 0.5;
    float v47 = *(float *)(v29 + 60) * 0.5;
    float v48 = *(float *)(v29 + 64) * 0.5;
    float v49 = *(float *)(v29 + 72);
    float v50 = *(float *)(v29 + 68) * 0.5;
    float v51 = *(float *)(v29 + 76);
    float v52 = *(float *)(v29 + 80);
    float v53 = *(float *)(v29 + 84);
    float v54 = *(float *)(v29 + 88);
    float v55 = *(float *)(v29 + 92);
    float v56 = *(float *)(v29 + 96);
    float v58 = *(float *)(v29 + 100);
    float v57 = *(float *)(v29 + 104);
    uint64_t v59 = v29 + 164;
    uint64_t v60 = v29 + 16548;
    uint64_t result = *(unsigned __int8 *)(v29 + 157);
    uint64_t v61 = *(unsigned __int8 *)(v29 + 156);
    uint64_t v62 = *(unsigned __int8 *)(v29 + 155);
    uint64_t v63 = *(unsigned __int8 *)(v29 + 154);
    do
    {
      if (v31)
      {
        unint64_t v64 = 0;
        uint64_t v65 = v33;
        float v66 = v23;
        float v67 = v34;
        do
        {
          uint64_t v68 = v65 + 8;
          if (v66)
          {
            LOWORD(v9) = *(_WORD *)(v65 + 2 * result);
            HIWORD(v10) = 15231;
            float v69 = (float)LODWORD(v9) * 0.0038911;
            char v70 = llroundf(v69);
            LOWORD(v69) = *(_WORD *)(v68 + 2 * result);
            float v9 = (float)LODWORD(v69) * 0.0038911;
            char v71 = llroundf(v9);
          }
          else
          {
            char v70 = 0;
            char v71 = 0;
          }
          LOWORD(v9) = *(_WORD *)(v65 + 2 * v63);
          LOWORD(v10) = *(_WORD *)(v65 + 2 * v62);
          LOWORD(v11) = *(_WORD *)(v65 + 2 * v61);
          LOWORD(v12) = *(_WORD *)(v68 + 2 * v63);
          LOWORD(v13) = *(_WORD *)(v68 + 2 * v62);
          LOWORD(v14) = *(_WORD *)(v68 + 2 * v61);
          _H10 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v9), 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v11), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v12), 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v13), 0.0), 8191.0)));
          __asm { FCVT            S14, H14 }
          unsigned int v86 = llroundf(fminf(fmaxf(v36 * (float)LODWORD(v14), 0.0), 8191.0));
          float v14 = (float)((float)(v51 * _S11) + (float)(_S10 * v49)) + (float)(_S12 * v52);
          float v87 = (float)((float)(v54 * _S11) + (float)(_S10 * v53)) + (float)(_S12 * v55);
          _S10 = (float)((float)(v58 * _S11) + (float)(_S10 * v56)) + (float)(_S12 * v57);
          float v89 = (float)(v51 * _S14) + (float)(_S13 * v49);
          float v90 = (float)(v54 * _S14) + (float)(_S13 * v53);
          float v91 = (float)(v58 * _S14) + (float)(_S13 * v56);
          LOWORD(_S14) = *(_WORD *)(v59 + 2 * v86);
          __asm { FCVT            S14, H14 }
          _S11 = v89 + (float)(_S14 * v52);
          float v94 = v90 + (float)(_S14 * v55);
          float v95 = v91 + (float)(_S14 * v57);
          LOWORD(_S14) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v14, 0.0), 8191.0)));
          unsigned int v96 = llroundf(fminf(fmaxf(v87, 0.0), 8191.0));
          __asm { FCVT            S18, H14 }
          LOWORD(_S14) = *(_WORD *)(v60 + 2 * v96);
          __asm { FCVT            S14, H14 }
          unsigned int v99 = llroundf(fminf(fmaxf(_S10, 0.0), 8191.0));
          LOWORD(_S10) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S11) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          unsigned int v102 = llroundf(fminf(fmaxf(v95, 0.0), 8191.0));
          float v103 = (float)(v43 * _S14) + (float)(v42 * _S18);
          float v104 = (float)(v43 * _S11) + (float)(v42 * _S10);
          float v105 = _S18 + _S10;
          LOWORD(_S10) = *(_WORD *)(v60 + 2 * v99);
          float v106 = _S14 + _S11;
          LOWORD(_S14) = *(_WORD *)(v60 + 2 * v102);
          __asm
          {
            FCVT            S10, H10
            FCVT            S14, H14
          }
          float v109 = (float)(v103 + (float)(v44 * _S10)) + v37;
          float v12 = v104 + (float)(v44 * _S14);
          float v110 = _S10 + _S14;
          float v13 = (float)(v38 + (float)(v105 * v118)) + (float)(v106 * v45);
          float v111 = (float)(v38 + (float)(v105 * v47)) + (float)(v106 * v48);
          if (v109 < v37) {
            float v112 = v37;
          }
          else {
            float v112 = v109;
          }
          BOOL v113 = v109 <= v39;
          float v11 = v13 + (float)(v110 * v46);
          if (!v113) {
            float v112 = v39;
          }
          char v114 = llroundf(v112);
          if (v11 < v40) {
            float v115 = v40;
          }
          else {
            float v115 = v13 + (float)(v110 * v46);
          }
          if (v11 > v41) {
            float v115 = v41;
          }
          char v116 = llroundf(v115);
          float v9 = v111 + (float)(v110 * v50);
          if ((float)(v12 + v37) < v37) {
            float v117 = v37;
          }
          else {
            float v117 = v12 + v37;
          }
          *float v67 = v114;
          v67[1] = v116;
          if ((float)(v12 + v37) > v39) {
            float v117 = v39;
          }
          v67[2] = llroundf(v117);
          float v10 = v41;
          if (v9 <= v41)
          {
            float v10 = v9;
            if (v9 < v40) {
              float v10 = v40;
            }
          }
          v67[3] = llroundf(v10);
          if (v66)
          {
            *float v66 = v70;
            v66[1] = v71;
            v66 += 2;
          }
          v65 += 16;
          v64 += 2;
          v67 += 4;
        }
        while (v31 > v64);
      }
      v33 += v27;
      v34 += v28;
      ++v24;
    }
    while (v24 != v35);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_yuvsf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_yuvsf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v14 = *(void *)(result + 28);
  unint64_t v15 = *(unsigned __int8 *)result;
  unint64_t v16 = v14 * a2 / v15;
  uint64_t v17 = *(void *)(result + 112);
  uint64_t v18 = *(void **)(result + 128);
  unint64_t v19 = *(void *)(result + 104) * a2 / v15 + *(void *)(result + 120);
  int64x2_t v20 = *(uint64_t **)(result + 136);
  unint64_t v21 = (v14 + v14 * a2) / v15;
  int64x2_t v22 = (unsigned char *)v18[1];
  if (v22) {
    v22 += v20[1] * v19 + v17;
  }
  if (v21 != v16)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *(void *)(result + 44);
    uint64_t v25 = v16 + v24;
    uint64_t v26 = **(void **)(result + 64);
    uint64_t v27 = *v20;
    uint64_t v28 = *v18 + v27 * v19;
    uint64_t v29 = *(void *)(result + 152);
    unint64_t v30 = *(void *)(result + 20);
    uint64_t v31 = v21 + v24;
    uint64_t v32 = **(void **)(result + 56) + v26 * v25 + 8 * *(void *)(result + 36);
    uint64_t v33 = (unsigned char *)(v28 + v17);
    uint64_t v34 = v31 - v25;
    LOWORD(a5) = *(_WORD *)(v29 + 144);
    LOWORD(a6) = *(_WORD *)(v29 + 146);
    LOWORD(a7) = *(_WORD *)(v29 + 148);
    float v35 = (float)*(unsigned int *)(v29 + 136) / (float)*(unsigned int *)(v29 + 128);
    float v36 = (float)LODWORD(a5);
    float v37 = (float)LODWORD(a6);
    float v38 = (float)LODWORD(a7);
    LOWORD(a7) = *(_WORD *)(v29 + 150);
    float v39 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v29 + 152);
    float v40 = (float)LODWORD(a8);
    float v41 = *(float *)(v29 + 36);
    float v42 = *(float *)(v29 + 40);
    float v43 = *(float *)(v29 + 44);
    float v44 = *(float *)(v29 + 48) * 0.5;
    float v45 = *(float *)(v29 + 52) * 0.5;
    float v46 = *(float *)(v29 + 56) * 0.5;
    float v47 = *(float *)(v29 + 60) * 0.5;
    float v48 = *(float *)(v29 + 64) * 0.5;
    float v49 = *(float *)(v29 + 68) * 0.5;
    uint64_t v50 = *(unsigned __int8 *)(v29 + 157);
    uint64_t v51 = *(unsigned __int8 *)(v29 + 156);
    uint64_t result = *(unsigned __int8 *)(v29 + 155);
    uint64_t v52 = *(unsigned __int8 *)(v29 + 154);
    do
    {
      if (v30)
      {
        unint64_t v53 = 0;
        uint64_t v54 = v32;
        float v55 = v22;
        float v56 = v33;
        do
        {
          uint64_t v57 = v54 + 8;
          if (v55)
          {
            LOWORD(v8) = *(_WORD *)(v54 + 2 * v50);
            float v58 = (float)LODWORD(v8) * 0.0038911;
            char v59 = llroundf(v58);
            LOWORD(v58) = *(_WORD *)(v57 + 2 * v50);
            float v8 = (float)LODWORD(v58) * 0.0038911;
            char v60 = llroundf(v8);
          }
          else
          {
            char v59 = 0;
            char v60 = 0;
          }
          LOWORD(v8) = *(_WORD *)(v54 + 2 * v52);
          float v61 = v35 * (float)LODWORD(v8);
          LOWORD(v9) = *(_WORD *)(v54 + 2 * result);
          float v62 = v35 * (float)LODWORD(v9);
          LOWORD(v10) = *(_WORD *)(v54 + 2 * v51);
          float v63 = v35 * (float)LODWORD(v10);
          LOWORD(v11) = *(_WORD *)(v57 + 2 * v52);
          float v64 = v35 * (float)LODWORD(v11);
          LOWORD(v12) = *(_WORD *)(v57 + 2 * result);
          float v12 = v35 * (float)LODWORD(v12);
          LOWORD(v13) = *(_WORD *)(v57 + 2 * v51);
          float v13 = v35 * (float)LODWORD(v13);
          float v65 = (float)((float)((float)(v42 * v62) + (float)(v41 * v61)) + (float)(v43 * v63)) + v36;
          float v66 = (float)((float)((float)(v42 * v12) + (float)(v41 * v64)) + (float)(v43 * v13)) + v36;
          float v67 = v61 + v64;
          float v68 = v62 + v12;
          float v10 = v63 + v13;
          float v11 = (float)((float)(v37 + (float)(v67 * v44)) + (float)(v68 * v45)) + (float)(v10 * v46);
          float v69 = (float)(v37 + (float)(v67 * v47)) + (float)(v68 * v48);
          if (v65 < v36) {
            float v70 = v36;
          }
          else {
            float v70 = v65;
          }
          if (v65 > v38) {
            float v70 = v38;
          }
          float v8 = v69 + (float)(v10 * v49);
          *float v56 = llroundf(v70);
          if (v11 < v39) {
            float v71 = v39;
          }
          else {
            float v71 = v11;
          }
          if (v11 > v40) {
            float v71 = v40;
          }
          v56[1] = llroundf(v71);
          if (v66 < v36) {
            float v72 = v36;
          }
          else {
            float v72 = v66;
          }
          if (v66 > v38) {
            float v72 = v38;
          }
          v56[2] = llroundf(v72);
          float v9 = v40;
          if (v8 <= v40)
          {
            float v9 = v8;
            if (v8 < v39) {
              float v9 = v39;
            }
          }
          v56[3] = llroundf(v9);
          if (v55)
          {
            *float v55 = v59;
            v55[1] = v60;
            v55 += 2;
          }
          v54 += 16;
          v53 += 2;
          v56 += 4;
        }
        while (v30 > v53);
      }
      v32 += v26;
      v33 += v27;
      ++v23;
    }
    while (v23 != v34);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_xf422_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = *(unsigned __int8 *)result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    unint64_t v14 = *(void *)(result + 20);
    unint64_t v15 = v11 + *(void *)(result + 44);
    unint64_t v16 = v12 - v11;
    uint64_t v17 = *(void *)(result + 152);
    uint64_t v18 = *(uint64_t **)(result + 136);
    uint64_t v19 = *(void **)(result + 56);
    uint64_t v20 = **(void **)(result + 64);
    uint64_t v21 = *v18;
    uint64_t v22 = v18[1];
    uint64_t v23 = v18[2];
    float v24 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 144);
    float v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v17 + 146);
    float v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v17 + 148);
    float v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v17 + 150);
    float v130 = (float)LODWORD(a8);
    LOWORD(a8) = *(_WORD *)(v17 + 152);
    float v28 = (float)LODWORD(a8);
    float v29 = *(float *)(v17 + 40);
    float v131 = *(float *)(v17 + 36);
    float v30 = *(float *)(v17 + 44);
    float v31 = 0.5;
    float v129 = *(float *)(v17 + 48) * 0.5;
    float v128 = *(float *)(v17 + 52) * 0.5;
    float v127 = *(float *)(v17 + 56) * 0.5;
    float v32 = *(float *)(v17 + 64);
    float v126 = *(float *)(v17 + 60) * 0.5;
    float v125 = v32 * 0.5;
    float v33 = *(float *)(v17 + 68);
    float v34 = *(float *)(v17 + 72);
    float v124 = v33 * 0.5;
    float v35 = *(float *)(v17 + 76);
    float v36 = *(float *)(v17 + 80);
    float v37 = *(float *)(v17 + 84);
    float v38 = *(float *)(v17 + 88);
    float v39 = *(float *)(v17 + 92);
    float v40 = *(float *)(v17 + 96);
    float v42 = *(float *)(v17 + 100);
    float v41 = *(float *)(v17 + 104);
    uint64_t v43 = v17 + 164;
    uint64_t v44 = v17 + 16548;
    uint64_t v45 = v17 + 32932;
    float v46 = *(float *)(v17 + 108);
    float v47 = *(float *)(v17 + 112);
    float v48 = *(float *)(v17 + 116);
    float v49 = *(float *)(v17 + 120);
    uint64_t v50 = *(uint64_t **)(result + 128);
    uint64_t v51 = *(void *)(result + 112);
    unint64_t v52 = *(void *)(result + 104) * a2 / v10 + *(void *)(result + 120);
    uint64_t v53 = *(void *)(result + 36);
    unsigned int v54 = *(unsigned __int8 *)(v17 + 132);
    if (v54 >= 0x11) {
      char v55 = 0;
    }
    else {
      char v55 = 16 - v54;
    }
    uint64_t result = *(unsigned __int8 *)(v17 + 157);
    uint64_t v56 = *(unsigned __int8 *)(v17 + 156);
    uint64_t v57 = *(unsigned __int8 *)(v17 + 155);
    uint64_t v58 = *(unsigned __int8 *)(v17 + 154);
    uint64_t v59 = v50[2];
    if (v59) {
      uint64_t v60 = v59 + v52 * v23 + 2 * v51;
    }
    else {
      uint64_t v60 = 0;
    }
    uint64_t v62 = *v50;
    uint64_t v61 = v50[1];
    uint64_t v63 = v61 + v52 * v22 + 2 * v51;
    if (!v61) {
      uint64_t v63 = 0;
    }
    uint64_t v64 = v62 + v52 * v21 + 2 * v51;
    uint64_t v65 = *v19 + v20 * v15 + 8 * v53;
    char v66 = v55;
    do
    {
      if (v14)
      {
        unint64_t v67 = 0;
        float v68 = (_WORD *)v60;
        float v69 = (_WORD *)v64;
        uint64_t v70 = v65;
        do
        {
          LOWORD(v33) = *(_WORD *)(v70 + 2 * v58);
          LOWORD(v31) = *(_WORD *)(v70 + 2 * v57);
          LOWORD(v32) = *(_WORD *)(v70 + 2 * v56);
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v33), 0.0), 8191.0)));
          __asm { FCVT            S15, H5 }
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v31), 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v32), 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          float v81 = (float)((float)(v47 * _S18) + (float)(v46 * _S15)) + (float)(v48 * _S19);
          float v82 = v81 + (float)(v49 * fmaxf(_S15, fmaxf(_S18, _S19)));
          float v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          LOWORD(v81) = *(_WORD *)(v70 + 8 + 2 * v58);
          LOWORD(v82) = *(_WORD *)(v70 + 8 + 2 * v57);
          LOWORD(v8) = *(_WORD *)(v70 + 8 + 2 * v56);
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v81), 0.0), 8191.0)));
          __asm { FCVT            S14, H5 }
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v82), 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          _H5 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v24 * (float)LODWORD(v8), 0.0), 8191.0)));
          __asm { FCVT            S21, H5 }
          float v90 = (float)((float)((float)(v47 * _S20) + (float)(v46 * _S14)) + (float)(v48 * _S21))
              + (float)(v49 * fmaxf(_S14, fmaxf(_S20, _S21)));
          float v91 = 8191.0;
          if (v90 <= 8191.0)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          _H22 = *(_WORD *)(v44 + 2 * llroundf(v83));
          __asm { FCVT            S22, H22 }
          _S18 = _S18 * _S22;
          float v95 = _S19 * _S22;
          _S3 = (float)((float)(v38 * _S18) + (float)((float)(_S15 * _S22) * v37)) + (float)(v95 * v39);
          unsigned int v97 = llroundf(fminf(fmaxf((float)((float)(v35 * _S18) + (float)((float)(_S15 * _S22) * v34)) + (float)(v95 * v36), 0.0), 8191.0));
          float v98 = (float)((float)(v42 * _S18) + (float)((float)(_S15 * _S22) * v40)) + (float)(v95 * v41);
          LOWORD(_S18) = *(_WORD *)(v45 + 2 * v97);
          __asm { FCVT            S15, H18 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          float v102 = (float)((float)((float)(v29 * _S18) + (float)(v131 * _S15)) + (float)(v30 * _S19)) + v25;
          float v103 = v27;
          if (v102 <= v27)
          {
            float v103 = (float)((float)((float)(v29 * _S18) + (float)(v131 * _S15)) + (float)(v30 * _S19)) + v25;
            if (v102 < v25) {
              float v103 = v25;
            }
          }
          __int16 v104 = *(_WORD *)(v70 + 2 * result);
          __int16 v105 = *(_WORD *)(v70 + 8 + 2 * result);
          _H3 = *(_WORD *)(v44 + 2 * llroundf(v91));
          __asm { FCVT            S3, H3 }
          _S5 = _S14 * _S3;
          float v109 = _S20 * _S3;
          float v110 = _S21 * _S3;
          float v111 = (float)((float)(v35 * v109) + (float)(_S5 * v34)) + (float)(v110 * v36);
          float v112 = (float)((float)(v38 * v109) + (float)(_S5 * v37)) + (float)(v110 * v39);
          _S3 = (float)((float)(v42 * v109) + (float)(_S5 * v40)) + (float)(v110 * v41);
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S20, H5 }
          LOWORD(_S5) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H5
            FCVT            S21, H3
          }
          float v117 = (float)((float)((float)(v29 * _S22) + (float)(v131 * _S20)) + (float)(v30 * _S21)) + v25;
          *float v69 = llroundf(v103) << v66;
          float v118 = v27;
          if (v117 <= v27)
          {
            float v118 = (float)((float)((float)(v29 * _S22) + (float)(v131 * _S20)) + (float)(v30 * _S21)) + v25;
            if (v117 < v25) {
              float v118 = v25;
            }
          }
          v69[1] = llroundf(v118) << v66;
          float v119 = _S15 + _S20;
          float v120 = _S18 + _S22;
          float v121 = _S19 + _S21;
          float v122 = (float)((float)(v26 + (float)(v119 * v129)) + (float)(v120 * v128)) + (float)(v121 * v127);
          float v8 = v28;
          if (v122 <= v28)
          {
            float v8 = (float)((float)(v26 + (float)(v119 * v129)) + (float)(v120 * v128)) + (float)(v121 * v127);
            if (v122 < v130) {
              float v8 = v130;
            }
          }
          char v123 = (_WORD *)(v63 + 2 * v67);
          HIWORD(v33) = HIWORD(v124);
          float v31 = (float)((float)(v26 + (float)(v119 * v126)) + (float)(v120 * v125)) + (float)(v121 * v124);
          *char v123 = llroundf(v8) << v66;
          float v32 = v28;
          if (v31 <= v28)
          {
            float v32 = v31;
            if (v31 < v130) {
              float v32 = v130;
            }
          }
          v123[1] = llroundf(v32) << v66;
          if (v68)
          {
            *float v68 = v104;
            v68[1] = v105;
            v68 += 2;
          }
          v70 += 16;
          v67 += 2;
          v69 += 2;
        }
        while (v14 > v67);
      }
      v65 += v20;
      v64 += v21;
      v63 += v22;
      v60 += v23;
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_xf422_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = *(unsigned __int8 *)result;
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (v14 != v13)
  {
    uint64_t v15 = 0;
    unint64_t v16 = *(void *)(result + 20);
    unint64_t v17 = v13 + *(void *)(result + 44);
    unint64_t v18 = v14 - v13;
    uint64_t v19 = *(void *)(result + 152);
    uint64_t v20 = *(uint64_t **)(result + 136);
    uint64_t v21 = *(void **)(result + 56);
    uint64_t v22 = **(void **)(result + 64);
    uint64_t v23 = *v20;
    uint64_t v24 = v20[1];
    uint64_t v25 = v20[2];
    float v26 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    LOWORD(a5) = *(_WORD *)(v19 + 144);
    float v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v19 + 146);
    float v28 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v19 + 148);
    float v29 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v19 + 150);
    float v30 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v19 + 152);
    float v31 = (float)LODWORD(a9);
    float v32 = *(float *)(v19 + 36);
    float v33 = *(float *)(v19 + 40);
    float v34 = *(float *)(v19 + 44);
    float v35 = 0.5;
    float v113 = *(float *)(v19 + 52) * 0.5;
    float v114 = *(float *)(v19 + 48) * 0.5;
    float v112 = *(float *)(v19 + 56) * 0.5;
    float v36 = *(float *)(v19 + 60) * 0.5;
    float v37 = *(float *)(v19 + 64) * 0.5;
    float v38 = *(float *)(v19 + 68);
    float v39 = *(float *)(v19 + 72);
    float v40 = v38 * 0.5;
    float v41 = *(float *)(v19 + 76);
    float v42 = *(float *)(v19 + 80);
    float v43 = *(float *)(v19 + 84);
    float v44 = *(float *)(v19 + 88);
    float v45 = *(float *)(v19 + 92);
    float v46 = *(float *)(v19 + 96);
    float v48 = *(float *)(v19 + 100);
    float v47 = *(float *)(v19 + 104);
    uint64_t v49 = v19 + 164;
    uint64_t v50 = v19 + 16548;
    uint64_t v51 = *(uint64_t **)(result + 128);
    uint64_t v52 = *(void *)(result + 112);
    unint64_t v53 = *(void *)(result + 104) * a2 / v12 + *(void *)(result + 120);
    uint64_t v54 = *(void *)(result + 36);
    unsigned int v55 = *(unsigned __int8 *)(v19 + 132);
    if (v55 >= 0x11) {
      char v56 = 0;
    }
    else {
      char v56 = 16 - v55;
    }
    uint64_t v57 = *(unsigned __int8 *)(v19 + 157);
    uint64_t result = *(unsigned __int8 *)(v19 + 156);
    uint64_t v58 = *(unsigned __int8 *)(v19 + 155);
    uint64_t v59 = *(unsigned __int8 *)(v19 + 154);
    uint64_t v60 = v51[2];
    if (v60) {
      uint64_t v61 = v60 + v53 * v25 + 2 * v52;
    }
    else {
      uint64_t v61 = 0;
    }
    uint64_t v63 = *v51;
    uint64_t v62 = v51[1];
    uint64_t v64 = v62 + v53 * v24 + 2 * v52;
    if (!v62) {
      uint64_t v64 = 0;
    }
    uint64_t v65 = v63 + v53 * v23 + 2 * v52;
    uint64_t v66 = *v21 + v22 * v17 + 8 * v54;
    char v67 = v56;
    do
    {
      if (v16)
      {
        unint64_t v68 = 0;
        uint64_t v69 = v66;
        uint64_t v70 = (_WORD *)v61;
        float v71 = (_WORD *)v65;
        do
        {
          LOWORD(v38) = *(_WORD *)(v69 + 2 * v59);
          LOWORD(v35) = *(_WORD *)(v69 + 2 * v58);
          LOWORD(v9) = *(_WORD *)(v69 + 2 * result);
          unsigned int v72 = llroundf(fminf(fmaxf(v26 * (float)LODWORD(v38), 0.0), 8191.0));
          _S18 = v26 * (float)LODWORD(v9);
          _H10 = *(_WORD *)(v49 + 2 * v72);
          __asm { FCVT            S10, H10 }
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(v35), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S18) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          float v83 = (float)((float)(v41 * _S19) + (float)(_S10 * v39)) + (float)(_S18 * v42);
          float v84 = (float)((float)(v44 * _S19) + (float)(_S10 * v43)) + (float)(_S18 * v45);
          _S18 = (float)((float)(v48 * _S19) + (float)(_S10 * v46)) + (float)(_S18 * v47);
          LOWORD(_S19) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S10, H19 }
          _S19 = fminf(fmaxf(v84, 0.0), 8191.0);
          LOWORD(_S19) = *(_WORD *)(v50 + 2 * llroundf(_S19));
          __asm { FCVT            S11, H19 }
          LOWORD(_S18) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S12, H18 }
          float v90 = (float)((float)((float)(v33 * _S11) + (float)(v32 * _S10)) + (float)(v34 * _S12)) + v27;
          float v91 = v29;
          if (v90 <= v29)
          {
            float v91 = (float)((float)((float)(v33 * _S11) + (float)(v32 * _S10)) + (float)(v34 * _S12)) + v27;
            if (v90 < v27) {
              float v91 = v27;
            }
          }
          __int16 v92 = *(_WORD *)(v69 + 2 * v57);
          LOWORD(v90) = *(_WORD *)(v69 + 8 + 2 * v59);
          LOWORD(_S19) = *(_WORD *)(v69 + 8 + 2 * v58);
          LOWORD(_S14) = *(_WORD *)(v69 + 8 + 2 * result);
          __int16 v93 = *(_WORD *)(v69 + 8 + 2 * v57);
          _H18 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(v90), 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(_S19), 0.0), 8191.0)));
          _H14 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(_S14), 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H19
            FCVT            S14, H14
          }
          float v100 = (float)((float)(v41 * _S19) + (float)(_S18 * v39)) + (float)(_S14 * v42);
          _S20 = (float)((float)(v44 * _S19) + (float)(_S18 * v43)) + (float)(_S14 * v45);
          float v102 = (float)((float)(v48 * _S19) + (float)(_S18 * v46)) + (float)(_S14 * v47);
          LOWORD(_S19) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __asm { FCVT            S14, H19 }
          LOWORD(_S19) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          LOWORD(_S20) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H19
            FCVT            S15, H20
          }
          float v105 = (float)((float)((float)(v33 * _S18) + (float)(v32 * _S14)) + (float)(v34 * _S15)) + v27;
          _WORD *v71 = llroundf(v91) << v67;
          float v106 = v29;
          if (v105 <= v29)
          {
            float v106 = (float)((float)((float)(v33 * _S18) + (float)(v32 * _S14)) + (float)(v34 * _S15)) + v27;
            if (v105 < v27) {
              float v106 = v27;
            }
          }
          v71[1] = llroundf(v106) << v67;
          float v9 = _S10 + _S14;
          float v107 = _S11 + _S18;
          float v108 = _S12 + _S15;
          float v109 = (float)((float)(v28 + (float)(v9 * v114)) + (float)(v107 * v113))
               + (float)((float)(_S12 + _S15) * v112);
          float v110 = v31;
          if (v109 <= v31)
          {
            float v110 = v109;
            if (v109 < v30) {
              float v110 = v30;
            }
          }
          float v111 = (_WORD *)(v64 + 2 * v68);
          float v38 = (float)((float)(v28 + (float)(v9 * v36)) + (float)(v107 * v37)) + (float)(v108 * v40);
          *float v111 = llroundf(v110) << v67;
          float v35 = v31;
          if (v38 <= v31)
          {
            float v35 = v38;
            if (v38 < v30) {
              float v35 = v30;
            }
          }
          v111[1] = llroundf(v35) << v67;
          if (v70)
          {
            _WORD *v70 = v92;
            v70[1] = v93;
            v70 += 2;
          }
          v69 += 16;
          v68 += 2;
          v71 += 2;
        }
        while (v16 > v68);
      }
      v66 += v22;
      v65 += v23;
      v64 += v24;
      v61 += v25;
      ++v15;
    }
    while (v15 != v18);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_xf422_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v12 = *(void *)(result + 28);
  unint64_t v13 = *(unsigned __int8 *)result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = (v12 + v12 * a2) / v13;
  if (v15 != v14)
  {
    uint64_t v16 = 0;
    unint64_t v17 = *(void *)(result + 20);
    unint64_t v18 = v14 + *(void *)(result + 44);
    unint64_t v19 = v15 - v14;
    uint64_t v20 = *(void *)(result + 152);
    uint64_t v21 = *(uint64_t **)(result + 136);
    size_t v22 = *(void **)(result + 56);
    uint64_t v23 = **(void **)(result + 64);
    uint64_t v24 = *v21;
    uint64_t v25 = v21[1];
    uint64_t v26 = v21[2];
    *(float *)&unsigned int v27 = (float)*(unsigned int *)(v20 + 136);
    float v28 = *(float *)&v27 / (float)*(unsigned int *)(v20 + 128);
    LOWORD(v27) = *(_WORD *)(v20 + 144);
    float v29 = (float)v27;
    LOWORD(a5) = *(_WORD *)(v20 + 146);
    float v30 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v20 + 148);
    float v31 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v20 + 150);
    float v32 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v20 + 152);
    float v33 = (float)LODWORD(a8);
    float v34 = *(float *)(v20 + 36);
    float v35 = *(float *)(v20 + 40);
    float v36 = *(float *)(v20 + 44);
    float v37 = *(float *)(v20 + 48) * 0.5;
    float v38 = *(float *)(v20 + 52) * 0.5;
    float v39 = *(float *)(v20 + 56) * 0.5;
    float v40 = *(float *)(v20 + 60) * 0.5;
    float v41 = *(float *)(v20 + 64) * 0.5;
    float v42 = *(float *)(v20 + 68);
    float v43 = v42 * 0.5;
    float v44 = *(void **)(result + 128);
    uint64_t v45 = *(void *)(result + 112);
    unint64_t v46 = *(void *)(result + 104) * a2 / v13 + *(void *)(result + 120);
    uint64_t v47 = *(void *)(result + 36);
    unsigned int v48 = *(unsigned __int8 *)(v20 + 132);
    if (v48 >= 0x11) {
      char v49 = 0;
    }
    else {
      char v49 = 16 - v48;
    }
    uint64_t v50 = *(unsigned __int8 *)(v20 + 157);
    uint64_t v51 = *(unsigned __int8 *)(v20 + 156);
    uint64_t v52 = *(unsigned __int8 *)(v20 + 155);
    uint64_t result = *(unsigned __int8 *)(v20 + 154);
    uint64_t v53 = v44[2];
    if (v53) {
      uint64_t v54 = v53 + v46 * v26 + 2 * v45;
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v57 = v44;
    uint64_t v56 = *v44;
    uint64_t v55 = v57[1];
    BOOL v58 = v55 == 0;
    uint64_t v59 = v55 + v46 * v25 + 2 * v45;
    if (v58) {
      uint64_t v59 = 0;
    }
    uint64_t v60 = v56 + v46 * v24 + 2 * v45;
    uint64_t v61 = *v22 + v23 * v18 + 8 * v47;
    char v62 = v49;
    do
    {
      if (v17)
      {
        unint64_t v63 = 0;
        uint64_t v64 = v61;
        uint64_t v65 = (_WORD *)v54;
        uint64_t v66 = (_WORD *)v60;
        do
        {
          LOWORD(v42) = *(_WORD *)(v64 + 2 * result);
          float v67 = v28 * (float)LODWORD(v42);
          LOWORD(v8) = *(_WORD *)(v64 + 2 * v52);
          float v68 = v28 * (float)LODWORD(v8);
          LOWORD(v9) = *(_WORD *)(v64 + 2 * v51);
          float v69 = v28 * (float)LODWORD(v9);
          float v70 = (float)((float)((float)(v35 * v68) + (float)(v34 * v67)) + (float)(v36 * v69)) + v29;
          float v71 = v31;
          if (v70 <= v31)
          {
            float v71 = (float)((float)((float)(v35 * v68) + (float)(v34 * v67)) + (float)(v36 * v69)) + v29;
            if (v70 < v29) {
              float v71 = v29;
            }
          }
          __int16 v72 = *(_WORD *)(v64 + 2 * v50);
          LOWORD(v70) = *(_WORD *)(v64 + 8 + 2 * result);
          float v73 = v28 * (float)LODWORD(v70);
          LOWORD(v10) = *(_WORD *)(v64 + 8 + 2 * v52);
          float v74 = v28 * (float)LODWORD(v10);
          LOWORD(v11) = *(_WORD *)(v64 + 8 + 2 * v51);
          float v11 = v28 * (float)LODWORD(v11);
          __int16 v75 = *(_WORD *)(v64 + 8 + 2 * v50);
          float v76 = (float)((float)((float)(v35 * v74) + (float)(v34 * v73)) + (float)(v36 * v11)) + v29;
          *uint64_t v66 = llroundf(v71) << v62;
          float v77 = v31;
          if (v76 <= v31)
          {
            float v77 = (float)((float)((float)(v35 * v74) + (float)(v34 * v73)) + (float)(v36 * v11)) + v29;
            if (v76 < v29) {
              float v77 = v29;
            }
          }
          v66[1] = llroundf(v77) << v62;
          float v78 = v67 + v73;
          float v79 = v68 + v74;
          float v9 = v69 + v11;
          float v10 = (float)((float)(v30 + (float)(v78 * v37)) + (float)(v79 * v38)) + (float)(v9 * v39);
          float v80 = v33;
          if (v10 <= v33)
          {
            float v80 = (float)((float)(v30 + (float)(v78 * v37)) + (float)(v79 * v38)) + (float)(v9 * v39);
            if (v10 < v32) {
              float v80 = v32;
            }
          }
          float v81 = (_WORD *)(v59 + 2 * v63);
          float v42 = (float)((float)(v30 + (float)(v78 * v40)) + (float)(v79 * v41)) + (float)(v9 * v43);
          *float v81 = llroundf(v80) << v62;
          float v8 = v33;
          if (v42 <= v33)
          {
            float v8 = v42;
            if (v42 < v32) {
              float v8 = v32;
            }
          }
          v81[1] = llroundf(v8) << v62;
          if (v65)
          {
            *uint64_t v65 = v72;
            v65[1] = v75;
            v65 += 2;
          }
          v64 += 16;
          v63 += 2;
          v66 += 2;
        }
        while (v17 > v63);
      }
      v61 += v23;
      v60 += v24;
      v59 += v25;
      v54 += v26;
      ++v16;
    }
    while (v16 != v19);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_l64r_TRC_Tone_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = *result;
  unint64_t v13 = v11 * a2 / v12;
  uint64_t v14 = *((void *)result + 14);
  unint64_t v15 = (void *)*((void *)result + 16);
  unint64_t v16 = *((void *)result + 13) * a2 / v12 + *((void *)result + 15);
  uint64_t v17 = (uint64_t *)*((void *)result + 17);
  unint64_t v18 = (v11 + v11 * a2) / v12;
  uint64_t v19 = (_WORD *)v15[1];
  if (v19) {
    uint64_t v19 = (_WORD *)((char *)v19 + 2 * v14 + v17[1] * v16);
  }
  if (v18 != v13)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *(void *)(result + 44);
    uint64_t v22 = v13 + v21;
    uint64_t v23 = **((void **)result + 8);
    uint64_t v24 = *v17;
    uint64_t v25 = *((void *)result + 19);
    uint64_t v26 = *v15 + v24 * v16;
    unint64_t v27 = *(void *)(result + 20);
    uint64_t v28 = v18 + v21;
    uint64_t v29 = **((void **)result + 7) + v23 * v22 + 8 * *(void *)(result + 36);
    float v30 = (_WORD *)(v26 + 2 * v14);
    uint64_t v31 = v28 - v22;
    LOWORD(a5) = *(_WORD *)(v25 + 144);
    LOWORD(a6) = *(_WORD *)(v25 + 146);
    LOWORD(a7) = *(_WORD *)(v25 + 148);
    LOWORD(a8) = *(_WORD *)(v25 + 150);
    LOWORD(a9) = *(_WORD *)(v25 + 152);
    float v32 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    float v33 = (float)LODWORD(a5);
    float v34 = (float)LODWORD(a6);
    float v35 = (float)LODWORD(a7);
    float v36 = (float)LODWORD(a8);
    float v37 = (float)LODWORD(a9);
    float v38 = *(float *)(v25 + 36);
    float v39 = *(float *)(v25 + 40);
    float v40 = *(float *)(v25 + 44);
    float v41 = 0.5;
    float v131 = *(float *)(v25 + 48) * 0.5;
    float v130 = *(float *)(v25 + 52) * 0.5;
    float v129 = *(float *)(v25 + 56) * 0.5;
    float v42 = *(float *)(v25 + 64);
    float v128 = *(float *)(v25 + 60) * 0.5;
    float v127 = v42 * 0.5;
    float v43 = *(float *)(v25 + 72);
    float v44 = *(float *)(v25 + 68) * 0.5;
    float v126 = v44;
    float v45 = *(float *)(v25 + 76);
    float v46 = *(float *)(v25 + 80);
    float v47 = *(float *)(v25 + 84);
    float v48 = *(float *)(v25 + 88);
    float v49 = *(float *)(v25 + 92);
    float v50 = *(float *)(v25 + 96);
    float v52 = *(float *)(v25 + 100);
    float v51 = *(float *)(v25 + 104);
    uint64_t v53 = v25 + 164;
    uint64_t v54 = v25 + 16548;
    uint64_t result = (unsigned __int8 *)(v25 + 32932);
    float v55 = *(float *)(v25 + 108);
    float v56 = *(float *)(v25 + 112);
    float v57 = *(float *)(v25 + 116);
    float v58 = *(float *)(v25 + 120);
    uint64_t v59 = *(unsigned __int8 *)(v25 + 157);
    uint64_t v60 = *(unsigned __int8 *)(v25 + 156);
    uint64_t v61 = *(unsigned __int8 *)(v25 + 155);
    uint64_t v62 = *(unsigned __int8 *)(v25 + 154);
    do
    {
      if (v27)
      {
        unint64_t v63 = 0;
        uint64_t v64 = v19;
        uint64_t v65 = v30;
        uint64_t v66 = v29;
        do
        {
          LOWORD(v44) = *(_WORD *)(v66 + 2 * v62);
          LOWORD(v41) = *(_WORD *)(v66 + 2 * v61);
          LOWORD(v42) = *(_WORD *)(v66 + 2 * v60);
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v44), 0.0), 8191.0)));
          __asm { FCVT            S14, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v41), 0.0), 8191.0)));
          __asm { FCVT            S15, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v42), 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          float v77 = (float)((float)((float)(v56 * _S15) + (float)(v55 * _S14)) + (float)(v57 * _S18))
              + (float)(v58 * fmaxf(_S14, fmaxf(_S15, _S18)));
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          LOWORD(v77) = *(_WORD *)(v66 + 8 + 2 * v62);
          LOWORD(v9) = *(_WORD *)(v66 + 8 + 2 * v61);
          LOWORD(v10) = *(_WORD *)(v66 + 8 + 2 * v60);
          _H19 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v77), 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v9), 0.0), 8191.0)));
          _H21 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v32 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H20
            FCVT            S21, H21
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(v78));
          __asm { FCVT            S0, H0 }
          float v87 = _S14 * _S0;
          float v88 = _S15 * _S0;
          float v89 = _S18 * _S0;
          float v90 = (float)((float)((float)(v56 * _S22) + (float)(v55 * _S19)) + (float)(v57 * _S21))
              + (float)(v58 * fmaxf(_S19, fmaxf(_S22, _S21)));
          float v91 = 8191.0;
          if (v90 <= 8191.0)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          _H18 = *(_WORD *)(v54 + 2 * llroundf(v91));
          __asm { FCVT            S18, H18 }
          float v94 = _S19 * _S18;
          float v95 = _S22 * _S18;
          _S18 = _S21 * _S18;
          float v97 = (float)((float)(v45 * v88) + (float)(v87 * v43)) + (float)(v89 * v46);
          float v98 = (float)((float)(v48 * v88) + (float)(v87 * v47)) + (float)(v89 * v49);
          _S0 = (float)((float)(v52 * v88) + (float)(v87 * v50)) + (float)(v89 * v51);
          float v100 = (float)(v45 * v95) + (float)(v94 * v43);
          float v101 = (float)(v48 * v95) + (float)(v94 * v47);
          float v102 = (float)(v52 * v95) + (float)(v94 * v50);
          _S20 = v100 + (float)(_S18 * v46);
          float v104 = v101 + (float)(_S18 * v49);
          float v105 = v102 + (float)(_S18 * v51);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0))];
          __asm { FCVT            S21, H18 }
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0))];
          __asm { FCVT            S22, H18 }
          LOWORD(_S0) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
          __asm { FCVT            S15, H0 }
          LOWORD(_S0) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0))];
          LOWORD(_S20) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0))];
          __asm
          {
            FCVT            S18, H0
            FCVT            S14, H20
          }
          unsigned int v111 = llroundf(fminf(fmaxf(v105, 0.0), 8191.0));
          float v112 = (float)(v39 * _S22) + (float)(v38 * _S21);
          float v113 = (float)(v34 + (float)((float)(_S21 + _S18) * v131)) + (float)((float)(_S22 + _S14) * v130);
          float v114 = (float)(v34 + (float)((float)(_S21 + _S18) * v128)) + (float)((float)(_S22 + _S14) * v127);
          LOWORD(_S0) = *(_WORD *)&result[2 * v111];
          __asm { FCVT            S0, H0 }
          float v116 = v112 + (float)(v40 * _S15);
          float v117 = v113 + (float)((float)(_S15 + _S0) * v129);
          float v118 = v114 + (float)((float)(_S15 + _S0) * v126);
          if (v117 < v33) {
            float v119 = v33;
          }
          else {
            float v119 = v117;
          }
          BOOL v120 = v117 <= v35;
          float v121 = v116 + v33;
          if (!v120) {
            float v119 = v35;
          }
          __int16 v122 = llroundf(v119);
          if (v121 < v36) {
            float v123 = v36;
          }
          else {
            float v123 = v116 + v33;
          }
          __int16 v124 = *(_WORD *)(v66 + 2 * v59);
          __int16 v125 = *(_WORD *)(v66 + 8 + 2 * v59);
          *uint64_t v65 = v122;
          if (v121 <= v37) {
            float v9 = v123;
          }
          else {
            float v9 = v37;
          }
          v65[1] = llroundf(v9);
          float v10 = v35;
          if (v118 <= v35)
          {
            float v10 = v118;
            if (v118 < v33) {
              float v10 = v33;
            }
          }
          float v42 = v39 * _S14;
          float v44 = (float)((float)((float)(v39 * _S14) + (float)(v38 * _S18)) + (float)(v40 * _S0)) + v33;
          v65[2] = llroundf(v10);
          float v41 = v37;
          if (v44 <= v37)
          {
            float v41 = v44;
            if (v44 < v36) {
              float v41 = v36;
            }
          }
          v65[3] = llroundf(v41);
          if (v64)
          {
            *uint64_t v64 = v124;
            v64[1] = v125;
            v64 += 2;
          }
          v66 += 16;
          v63 += 2;
          v65 += 4;
        }
        while (v27 > v63);
      }
      v29 += v23;
      float v30 = (_WORD *)((char *)v30 + v24);
      ++v20;
    }
    while (v20 != v31);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_v216_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_v216_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v15 = *(void *)(result + 28);
  unint64_t v16 = *(unsigned __int8 *)result;
  unint64_t v17 = v15 * a2 / v16;
  uint64_t v18 = *(void *)(result + 112);
  uint64_t v19 = *(void **)(result + 128);
  unint64_t v20 = *(void *)(result + 104) * a2 / v16 + *(void *)(result + 120);
  long long v21 = *(uint64_t **)(result + 136);
  unint64_t v22 = (v15 + v15 * a2) / v16;
  uint64_t v23 = (_WORD *)v19[1];
  if (v23) {
    uint64_t v23 = (_WORD *)((char *)v23 + 2 * v18 + v21[1] * v20);
  }
  if (v22 != v17)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(result + 44);
    uint64_t v26 = v17 + v25;
    uint64_t v27 = **(void **)(result + 64);
    uint64_t v28 = *v21;
    uint64_t v29 = *(void *)(result + 152);
    uint64_t v30 = *v19 + v28 * v20;
    unint64_t v31 = *(void *)(result + 20);
    uint64_t v32 = v22 + v25;
    uint64_t v33 = **(void **)(result + 56) + v27 * v26 + 8 * *(void *)(result + 36);
    float v34 = (_WORD *)(v30 + 2 * v18);
    uint64_t v35 = v32 - v26;
    LOWORD(a5) = *(_WORD *)(v29 + 144);
    LOWORD(a6) = *(_WORD *)(v29 + 146);
    LOWORD(a7) = *(_WORD *)(v29 + 148);
    LOWORD(a8) = *(_WORD *)(v29 + 150);
    LOWORD(a9) = *(_WORD *)(v29 + 152);
    float v36 = 8191.0 / (float)*(unsigned int *)(v29 + 128);
    float v37 = (float)LODWORD(a5);
    float v38 = (float)LODWORD(a6);
    float v39 = (float)LODWORD(a7);
    float v40 = (float)LODWORD(a8);
    float v41 = (float)LODWORD(a9);
    float v42 = *(float *)(v29 + 36);
    float v43 = *(float *)(v29 + 40);
    float v44 = *(float *)(v29 + 44);
    float v113 = *(float *)(v29 + 52) * 0.5;
    float v114 = *(float *)(v29 + 48) * 0.5;
    float v45 = *(float *)(v29 + 56) * 0.5;
    float v46 = *(float *)(v29 + 60) * 0.5;
    float v47 = *(float *)(v29 + 64) * 0.5;
    float v48 = *(float *)(v29 + 72);
    float v49 = *(float *)(v29 + 68) * 0.5;
    float v50 = *(float *)(v29 + 76);
    float v51 = *(float *)(v29 + 80);
    float v52 = *(float *)(v29 + 84);
    float v53 = *(float *)(v29 + 88);
    float v54 = *(float *)(v29 + 92);
    float v55 = *(float *)(v29 + 96);
    float v57 = *(float *)(v29 + 100);
    float v56 = *(float *)(v29 + 104);
    uint64_t v58 = v29 + 164;
    uint64_t v59 = v29 + 16548;
    uint64_t result = *(unsigned __int8 *)(v29 + 157);
    uint64_t v60 = *(unsigned __int8 *)(v29 + 156);
    uint64_t v61 = *(unsigned __int8 *)(v29 + 155);
    uint64_t v62 = *(unsigned __int8 *)(v29 + 154);
    do
    {
      if (v31)
      {
        unint64_t v63 = 0;
        uint64_t v64 = v33;
        uint64_t v65 = v23;
        uint64_t v66 = v34;
        do
        {
          LOWORD(v9) = *(_WORD *)(v64 + 2 * v62);
          LOWORD(v10) = *(_WORD *)(v64 + 2 * v61);
          LOWORD(_S12) = *(_WORD *)(v64 + 2 * v60);
          LOWORD(v12) = *(_WORD *)(v64 + 8 + 2 * v62);
          LOWORD(v13) = *(_WORD *)(v64 + 8 + 2 * v61);
          LOWORD(v14) = *(_WORD *)(v64 + 8 + 2 * v60);
          unsigned int v67 = llroundf(fminf(fmaxf(v36 * (float)LODWORD(v9), 0.0), 8191.0));
          float v68 = v36 * (float)LODWORD(v14);
          _H15 = *(_WORD *)(v58 + 2 * v67);
          __asm { FCVT            S15, H15 }
          _H11 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v10), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(_S12), 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v12), 0.0), 8191.0)));
          _H14 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v36 * (float)LODWORD(v13), 0.0), 8191.0)));
          __asm
          {
            FCVT            S13, H13
            FCVT            S14, H14
          }
          unsigned int v83 = llroundf(fminf(fmaxf(v68, 0.0), 8191.0));
          _S10 = (float)((float)(v50 * _S11) + (float)(_S15 * v48)) + (float)(_S12 * v51);
          _S18 = (float)((float)(v53 * _S11) + (float)(_S15 * v52)) + (float)(_S12 * v54);
          _S11 = (float)((float)(v57 * _S11) + (float)(_S15 * v55)) + (float)(_S12 * v56);
          float v87 = (float)(v50 * _S14) + (float)(_S13 * v48);
          float v88 = (float)(v53 * _S14) + (float)(_S13 * v52);
          float v89 = (float)(v57 * _S14) + (float)(_S13 * v55);
          LOWORD(_S14) = *(_WORD *)(v58 + 2 * v83);
          __asm { FCVT            S14, H14 }
          float v91 = v87 + (float)(_S14 * v51);
          float v92 = v88 + (float)(_S14 * v54);
          float v93 = v89 + (float)(_S14 * v56);
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S14, H10 }
          LOWORD(_S18) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm { FCVT            S19, H10 }
          LOWORD(_S10) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          LOWORD(_S11) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          unsigned int v99 = llroundf(fminf(fmaxf(v93, 0.0), 8191.0));
          float v100 = (float)(v43 * _S18) + (float)(v42 * _S14);
          _S12 = _S14 + _S10;
          float v102 = _S18 + _S11;
          float v103 = (float)(v38 + (float)((float)(_S14 + _S10) * v114)) + (float)(v102 * v113);
          float v104 = (float)(v38 + (float)(_S12 * v46)) + (float)(v102 * v47);
          LOWORD(_S12) = *(_WORD *)(v59 + 2 * v99);
          __asm { FCVT            S12, H12 }
          float v14 = v100 + (float)(v44 * _S19);
          float v105 = _S19 + _S12;
          float v106 = v103 + (float)(v105 * v45);
          float v12 = v104 + (float)(v105 * v49);
          if (v106 < v37) {
            float v107 = v37;
          }
          else {
            float v107 = v106;
          }
          float v108 = v14 + v37;
          if (v106 > v39) {
            float v107 = v39;
          }
          __int16 v109 = llroundf(v107);
          if (v108 < v40) {
            float v110 = v40;
          }
          else {
            float v110 = v14 + v37;
          }
          __int16 v111 = *(_WORD *)(v64 + 2 * result);
          __int16 v112 = *(_WORD *)(v64 + 8 + 2 * result);
          *uint64_t v66 = v109;
          if (v108 > v41) {
            float v110 = v41;
          }
          v66[1] = llroundf(v110);
          float v13 = v39;
          if (v12 <= v39)
          {
            float v13 = v12;
            if (v12 < v37) {
              float v13 = v37;
            }
          }
          float v9 = (float)((float)((float)(v43 * _S11) + (float)(v42 * _S10)) + (float)(v44 * _S12)) + v37;
          v66[2] = llroundf(v13);
          float v10 = v41;
          if (v9 <= v41)
          {
            float v10 = v9;
            if (v9 < v40) {
              float v10 = v40;
            }
          }
          v66[3] = llroundf(v10);
          if (v65)
          {
            *uint64_t v65 = v111;
            v65[1] = v112;
            v65 += 2;
          }
          v64 += 16;
          v63 += 2;
          v66 += 4;
        }
        while (v31 > v63);
      }
      v33 += v27;
      float v34 = (_WORD *)((char *)v34 + v28);
      ++v24;
    }
    while (v24 != v35);
  }
  return result;
}

uint64_t vt_Copy_l64r_rgb_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_rgb_v216_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_rgb_v216_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8)
{
  uint64_t v10 = *(void *)(result + 28);
  unint64_t v11 = *(unsigned __int8 *)result;
  unint64_t v12 = v10 * a2 / v11;
  uint64_t v13 = *(void *)(result + 112);
  float v14 = *(void **)(result + 128);
  unint64_t v15 = *(void *)(result + 104) * a2 / v11 + *(void *)(result + 120);
  unint64_t v16 = *(uint64_t **)(result + 136);
  unint64_t v17 = (v10 + v10 * a2) / v11;
  uint64_t v18 = (_WORD *)v14[1];
  if (v18) {
    uint64_t v18 = (_WORD *)((char *)v18 + 2 * v13 + v16[1] * v15);
  }
  if (v17 != v12)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *(void *)(result + 44);
    uint64_t v21 = v12 + v20;
    uint64_t v22 = **(void **)(result + 64);
    uint64_t v23 = *v16;
    uint64_t v24 = *v14 + v23 * v15;
    uint64_t v25 = *(void *)(result + 152);
    unint64_t v26 = *(void *)(result + 20);
    uint64_t v27 = v17 + v20;
    uint64_t v28 = **(void **)(result + 56) + v22 * v21 + 8 * *(void *)(result + 36);
    uint64_t v29 = (_WORD *)(v24 + 2 * v13);
    uint64_t v30 = v27 - v21;
    LOWORD(a5) = *(_WORD *)(v25 + 144);
    LOWORD(a6) = *(_WORD *)(v25 + 146);
    float v31 = (float)*(unsigned int *)(v25 + 136) / (float)*(unsigned int *)(v25 + 128);
    float v32 = (float)LODWORD(a5);
    float v33 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v25 + 148);
    float v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v25 + 150);
    float v35 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v25 + 152);
    float v36 = (float)LODWORD(a8);
    float v37 = *(float *)(v25 + 36);
    float v38 = *(float *)(v25 + 40);
    float v39 = *(float *)(v25 + 44);
    float v40 = *(float *)(v25 + 48) * 0.5;
    float v41 = *(float *)(v25 + 52) * 0.5;
    float v42 = *(float *)(v25 + 56) * 0.5;
    float v43 = *(float *)(v25 + 60) * 0.5;
    float v44 = *(float *)(v25 + 64) * 0.5;
    float v45 = *(float *)(v25 + 68);
    float v46 = v45 * 0.5;
    uint64_t v47 = *(unsigned __int8 *)(v25 + 157);
    uint64_t v48 = *(unsigned __int8 *)(v25 + 156);
    uint64_t result = *(unsigned __int8 *)(v25 + 155);
    uint64_t v49 = *(unsigned __int8 *)(v25 + 154);
    do
    {
      if (v26)
      {
        unint64_t v50 = 0;
        uint64_t v51 = v28;
        float v52 = v18;
        float v53 = v29;
        do
        {
          LOWORD(v45) = *(_WORD *)(v51 + 2 * v49);
          *(float *)&unsigned int v54 = (float)LODWORD(v45);
          float v55 = v31 * *(float *)&v54;
          LOWORD(v54) = *(_WORD *)(v51 + 2 * result);
          *(float *)&unsigned int v56 = (float)v54;
          float v57 = v31 * *(float *)&v56;
          LOWORD(v56) = *(_WORD *)(v51 + 2 * v48);
          __int16 v58 = *(_WORD *)(v51 + 2 * v47);
          LOWORD(v8) = *(_WORD *)(v51 + 8 + 2 * v49);
          float v59 = v31 * (float)v56;
          float v60 = v31 * (float)LODWORD(v8);
          LOWORD(v8) = *(_WORD *)(v51 + 8 + 2 * result);
          float v61 = v31 * (float)LODWORD(v8);
          LOWORD(v9) = *(_WORD *)(v51 + 8 + 2 * v48);
          __int16 v62 = *(_WORD *)(v51 + 8 + 2 * v47);
          float v9 = v31 * (float)LODWORD(v9);
          float v63 = (float)((float)((float)(v38 * v57) + (float)(v37 * v55)) + (float)(v39 * v59)) + v32;
          float v64 = v55 + v60;
          float v65 = v57 + v61;
          float v66 = v59 + v9;
          float v67 = (float)((float)(v33 + (float)(v64 * v40)) + (float)(v65 * v41)) + (float)(v66 * v42);
          float v68 = (float)((float)(v33 + (float)(v64 * v43)) + (float)(v65 * v44)) + (float)(v66 * v46);
          if (v67 < v32) {
            float v69 = v32;
          }
          else {
            float v69 = v67;
          }
          if (v67 > v34) {
            float v69 = v34;
          }
          _WORD *v53 = llroundf(v69);
          if (v63 < v35) {
            float v70 = v35;
          }
          else {
            float v70 = v63;
          }
          if (v63 > v36) {
            float v70 = v36;
          }
          v53[1] = llroundf(v70);
          float v71 = v34;
          if (v68 <= v34)
          {
            float v71 = v68;
            if (v68 < v32) {
              float v71 = v32;
            }
          }
          float v45 = (float)((float)((float)(v38 * v61) + (float)(v37 * v60)) + (float)(v39 * v9)) + v32;
          v53[2] = llroundf(v71);
          float v8 = v36;
          if (v45 <= v36)
          {
            float v8 = v45;
            if (v45 < v35) {
              float v8 = v35;
            }
          }
          v53[3] = llroundf(v8);
          if (v52)
          {
            *float v52 = v58;
            v52[1] = v62;
            v52 += 2;
          }
          v51 += 16;
          v50 += 2;
          v53 += 4;
        }
        while (v26 > v50);
      }
      v28 += v22;
      uint64_t v29 = (_WORD *)((char *)v29 + v23);
      ++v19;
    }
    while (v19 != v30);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Tone_Mat_TRC_444vf_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *(void *)(result + 152);
    int64x2_t v12 = *(uint64_t **)(result + 136);
    int64x2_t v13 = *(void **)(result + 56);
    uint64_t v14 = **(void **)(result + 64);
    uint64_t v15 = *v12;
    uint64_t v16 = v12[1];
    uint64_t v17 = v12[2];
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v11 + 128);
    float v19 = 8191.0 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 144);
    float v20 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 146);
    float v21 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 148);
    float v22 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 150);
    float v23 = (float)v18;
    LOWORD(v18) = *(_WORD *)(v11 + 152);
    float v24 = (float)v18;
    float v25 = *(float *)(v11 + 36);
    float v26 = *(float *)(v11 + 40);
    float v27 = *(float *)(v11 + 44);
    float v96 = *(float *)(v11 + 52);
    float v97 = *(float *)(v11 + 48);
    float v28 = *(float *)(v11 + 56);
    float v94 = *(float *)(v11 + 60);
    float v95 = v28;
    float v29 = *(float *)(v11 + 64);
    float v30 = *(float *)(v11 + 68);
    float v93 = v29;
    float v31 = *(float *)(v11 + 72);
    float v32 = *(float *)(v11 + 76);
    float v33 = *(float *)(v11 + 80);
    float v34 = *(float *)(v11 + 84);
    float v35 = *(float *)(v11 + 88);
    float v36 = *(float *)(v11 + 92);
    float v37 = *(float *)(v11 + 96);
    float v38 = *(float *)(v11 + 100);
    float v39 = *(float *)(v11 + 104);
    float v40 = *(float *)(v11 + 108);
    uint64_t v41 = v11 + 164;
    uint64_t v42 = v11 + 16548;
    uint64_t v43 = v11 + 32932;
    float v44 = *(float *)(v11 + 112);
    float v45 = *(float *)(v11 + 116);
    float v46 = *(float *)(v11 + 120);
    uint64_t v47 = *(uint64_t **)(result + 128);
    uint64_t v48 = *(void *)(result + 112);
    unint64_t v49 = *(void *)(result + 104) * a2 / v4 + *(void *)(result + 120);
    uint64_t v50 = *(void *)(result + 36);
    uint64_t result = *(unsigned __int8 *)(v11 + 157);
    uint64_t v51 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v52 = *(unsigned __int8 *)(v11 + 155);
    uint64_t v53 = *(unsigned __int8 *)(v11 + 154);
    uint64_t v54 = v47[2];
    if (v54) {
      float v55 = (unsigned char *)(v54 + v49 * v17 + v48);
    }
    else {
      float v55 = 0;
    }
    uint64_t v57 = *v47;
    uint64_t v56 = v47[1];
    __int16 v58 = (unsigned char *)(v56 + v49 * v16 + v48);
    if (!v56) {
      __int16 v58 = 0;
    }
    float v59 = (unsigned char *)(v57 + v49 * v15 + v48);
    uint64_t v60 = *v13 + v14 * v9 + 8 * v50;
    do
    {
      if (v8)
      {
        uint64_t v61 = v8;
        __int16 v62 = v55;
        float v63 = v58;
        float v64 = v59;
        uint64_t v65 = v60;
        do
        {
          LOWORD(v29) = *(_WORD *)(v65 + 2 * v53);
          LOWORD(v28) = *(_WORD *)(v65 + 2 * v52);
          LOWORD(_S18) = *(_WORD *)(v65 + 2 * v51);
          _H0 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v29), 0.0), 8191.0)));
          float v67 = v19 * (float)LODWORD(_S18);
          __asm { FCVT            S18, H0 }
          _H0 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v19 * (float)LODWORD(v28), 0.0), 8191.0)));
          unsigned int v74 = llroundf(fminf(fmaxf(v67, 0.0), 8191.0));
          __asm { FCVT            S19, H0 }
          _H0 = *(_WORD *)(v41 + 2 * v74);
          __asm { FCVT            S15, H0 }
          float v78 = (float)((float)((float)(v44 * _S19) + (float)(v40 * _S18)) + (float)(v45 * _S15))
              + (float)(v46 * fmaxf(_S18, fmaxf(_S19, _S15)));
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v42 + 2 * llroundf(v79));
          __asm { FCVT            S0, H0 }
          _S6 = _S18 * _S0;
          float v83 = _S19 * _S0;
          float v84 = _S15 * _S0;
          float v85 = (float)((float)(v32 * v83) + (float)(_S6 * v31)) + (float)(v84 * v33);
          float v86 = (float)((float)(v35 * v83) + (float)(_S6 * v34)) + (float)(v84 * v36);
          _S0 = (float)((float)(v38 * v83) + (float)(_S6 * v37)) + (float)(v84 * v39);
          LOWORD(_S6) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S15, H6 }
          LOWORD(_S6) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S18, H6 }
          LOWORD(_S0) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S19, H0 }
          float v29 = (float)((float)((float)(v26 * _S18) + (float)(v25 * _S15)) + (float)(v27 * _S19)) + v20;
          float v28 = v22;
          if (v29 <= v22)
          {
            float v28 = (float)((float)((float)(v26 * _S18) + (float)(v25 * _S15)) + (float)(v27 * _S19)) + v20;
            if (v29 < v20) {
              float v28 = v20;
            }
          }
          unsigned int v90 = *(unsigned __int16 *)(v65 + 2 * result);
          *v64++ = llroundf(v28);
          if (v63)
          {
            float v91 = (float)((float)(v21 + (float)(_S15 * v97)) + (float)(_S18 * v96)) + (float)(_S19 * v95);
            float v92 = v24;
            if (v91 <= v24)
            {
              float v92 = (float)((float)(v21 + (float)(_S15 * v97)) + (float)(_S18 * v96)) + (float)(_S19 * v95);
              if (v91 < v23) {
                float v92 = v23;
              }
            }
            float v29 = (float)(v21 + (float)(_S15 * v94)) + (float)(_S18 * v93);
            _S18 = v29 + (float)(_S19 * v30);
            *float v63 = llroundf(v92);
            float v28 = v24;
            if (_S18 <= v24)
            {
              float v28 = v29 + (float)(_S19 * v30);
              if (_S18 < v23) {
                float v28 = v23;
              }
            }
            v63[1] = llroundf(v28);
            v63 += 2;
          }
          if (v62)
          {
            float v29 = (float)v90 * 0.0038911;
            *v62++ = llroundf(v29);
          }
          v65 += 8;
          --v61;
        }
        while (v61);
      }
      v60 += v14;
      v59 += v15;
      v58 += v16;
      v55 += v17;
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_l64r_TRC_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_l64r_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_l64r_TRC_Mat_TRC_444vf_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = *(unsigned __int8 *)result;
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (v14 != v13)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(result + 20);
    unint64_t v17 = v13 + *(void *)(result + 44);
    unint64_t v18 = v14 - v13;
    uint64_t v19 = *(void *)(result + 152);
    int64x2_t v20 = *(uint64_t **)(result + 136);
    long long v21 = *(void **)(result + 56);
    uint64_t v22 = **(void **)(result + 64);
    uint64_t v23 = *v20;
    uint64_t v24 = v20[1];
    uint64_t v25 = v20[2];
    float v26 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    LOWORD(a5) = *(_WORD *)(v19 + 144);
    float v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v19 + 146);
    float v28 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v19 + 148);
    float v29 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v19 + 150);
    float v30 = (float)LODWORD(a8);
    LOWORD(a9) = *(_WORD *)(v19 + 152);
    float v31 = (float)LODWORD(a9);
    float v32 = *(float *)(v19 + 36);
    float v33 = *(float *)(v19 + 40);
    float v35 = *(float *)(v19 + 44);
    float v34 = *(float *)(v19 + 48);
    float v90 = v34;
    float v36 = *(float *)(v19 + 52);
    float v37 = *(float *)(v19 + 56);
    float v38 = *(float *)(v19 + 60);
    float v39 = *(float *)(v19 + 64);
    float v40 = *(float *)(v19 + 68);
    float v41 = *(float *)(v19 + 72);
    float v42 = *(float *)(v19 + 76);
    float v43 = *(float *)(v19 + 80);
    float v44 = *(float *)(v19 + 84);
    float v45 = *(float *)(v19 + 88);
    float v46 = *(float *)(v19 + 92);
    float v47 = *(float *)(v19 + 96);
    float v49 = *(float *)(v19 + 100);
    float v48 = *(float *)(v19 + 104);
    uint64_t v50 = v19 + 164;
    uint64_t v51 = v19 + 16548;
    uint64_t v52 = *(uint64_t **)(result + 128);
    uint64_t v53 = *(void *)(result + 112);
    unint64_t v54 = *(void *)(result + 104) * a2 / v12 + *(void *)(result + 120);
    uint64_t v55 = *(void *)(result + 36);
    uint64_t v56 = *(unsigned __int8 *)(v19 + 157);
    uint64_t result = *(unsigned __int8 *)(v19 + 156);
    uint64_t v57 = *(unsigned __int8 *)(v19 + 155);
    uint64_t v58 = *(unsigned __int8 *)(v19 + 154);
    uint64_t v59 = v52[2];
    if (v59) {
      uint64_t v60 = (unsigned char *)(v59 + v54 * v25 + v53);
    }
    else {
      uint64_t v60 = 0;
    }
    uint64_t v62 = *v52;
    uint64_t v61 = v52[1];
    float v63 = (unsigned char *)(v61 + v54 * v24 + v53);
    if (!v61) {
      float v63 = 0;
    }
    float v64 = (unsigned char *)(v62 + v54 * v23 + v53);
    uint64_t v65 = *v21 + v22 * v17 + 8 * v55;
    do
    {
      if (v16)
      {
        uint64_t v66 = v16;
        uint64_t v67 = v65;
        float v68 = v60;
        float v69 = v63;
        float v70 = v64;
        do
        {
          LOWORD(v34) = *(_WORD *)(v67 + 2 * v58);
          LOWORD(v9) = *(_WORD *)(v67 + 2 * v57);
          LOWORD(_S12) = *(_WORD *)(v67 + 2 * result);
          unsigned int v71 = llroundf(fminf(fmaxf(v26 * (float)LODWORD(v34), 0.0), 8191.0));
          _S6 = v26 * (float)LODWORD(_S12);
          _H12 = *(_WORD *)(v50 + 2 * v71);
          __asm { FCVT            S12, H12 }
          _H11 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v26 * (float)LODWORD(v9), 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S6) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          float v82 = (float)((float)(v42 * _S11) + (float)(_S12 * v41)) + (float)(_S6 * v43);
          float v83 = (float)((float)(v45 * _S11) + (float)(_S12 * v44)) + (float)(_S6 * v46);
          _S6 = (float)((float)(v49 * _S11) + (float)(_S12 * v47)) + (float)(_S6 * v48);
          LOWORD(_S11) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S12, H11 }
          LOWORD(_S11) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S13, H11 }
          LOWORD(_S6) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S14, H6 }
          float v34 = (float)((float)(v33 * _S13) + (float)(v32 * _S12)) + (float)(v35 * _S14);
          float v9 = v34 + v27;
          float v87 = v29;
          if ((float)(v34 + v27) <= v29)
          {
            float v87 = v34 + v27;
            if (v9 < v27) {
              float v87 = v27;
            }
          }
          LOWORD(v9) = *(_WORD *)(v67 + 2 * v56);
          *v70++ = llroundf(v87);
          if (v69)
          {
            float v88 = (float)((float)(v28 + (float)(_S12 * v90)) + (float)(_S13 * v36)) + (float)(_S14 * v37);
            float v34 = v31;
            if (v88 <= v31)
            {
              float v34 = (float)((float)(v28 + (float)(_S12 * v90)) + (float)(_S13 * v36)) + (float)(_S14 * v37);
              if (v88 < v30) {
                float v34 = v30;
              }
            }
            _S12 = (float)((float)(v28 + (float)(_S12 * v38)) + (float)(_S13 * v39)) + (float)(_S14 * v40);
            *float v69 = llroundf(v34);
            float v89 = v31;
            if (_S12 <= v31)
            {
              float v89 = _S12;
              if (_S12 < v30) {
                float v89 = v30;
              }
            }
            v69[1] = llroundf(v89);
            v69 += 2;
          }
          if (v68)
          {
            float v34 = (float)LODWORD(v9) * 0.0038911;
            *v68++ = llroundf(v34);
          }
          v67 += 8;
          --v66;
        }
        while (v66);
      }
      v65 += v22;
      v64 += v23;
      v63 += v24;
      v60 += v25;
      ++v15;
    }
    while (v15 != v18);
  }
  return result;
}