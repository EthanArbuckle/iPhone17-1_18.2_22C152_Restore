uint64_t vtDecompressionSessionGetBitsPerComponentFromFormatDescription(const opaqueCMFormatDescription *a1)
{
  CMFormatDescriptionGetExtensions(a1);
  FigCFDictionaryGetIntIfPresent();
  return 0;
}

OSStatus VTDecompressionSessionFinishDelayedFrames(VTDecompressionSessionRef session)
{
  if (!session) {
    return -12902;
  }
  if (*((unsigned char *)session + 16))
  {
    return FigSignalErrorAt();
  }
  else if (*((void *)session + 3))
  {
    uint64_t v2 = *((void *)session + 3);
    return VTDecompressionSessionRemoteBridge_FinishDelayedFrames(v2);
  }
  else
  {
    uint64_t v3 = *(void *)(*((void *)session + 4) + 8);
    v4 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      v5 = v4;
    }
    else {
      v5 = 0;
    }
    if (*v5 < 2uLL) {
      return 0;
    }
    v6 = (uint64_t (*)(uint64_t))v5[7];
    if (!v6) {
      return 0;
    }
    OSStatus result = v6(v3);
    if (result == -12782) {
      return 0;
    }
  }
  return result;
}

uint64_t VTVideoDecoderGetTypeID()
{
  MEMORY[0x199705810](&VTVideoDecoderGetClassID_sRegisterVTVideoDecoderTypeOnce, RegisterVTVideoDecoderType);

  return CMBaseClassGetCFTypeID();
}

void VTDecoderSessionRegisterCustomPixelFormat(void *a1, const __CFDictionary *a2)
{
  if (a1 && *a1)
  {
    if (FigCFDictionaryGetInt32IfPresent()) {
      CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType(a2, 0);
    }
  }
}

uint64_t vtDecoderSessionEmitDecodedFrameCommon(uint64_t *a1, const void *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5, OpaqueCMTaggedBufferGroup *a6)
{
  CFTypeRef v80 = 0;
  CFTypeRef v81 = 0;
  if (!a1)
  {
    return FigSignalErrorAt();
  }
  uint64_t v11 = *a1;
  MEMORY[0x1997056B0](*(void *)(*a1 + 104));
  CFDictionaryRef v12 = *(const __CFDictionary **)(v11 + 112);
  v79 = a2;
  if (v12 && (Value = CFDictionaryGetValue(v12, a2)) != 0)
  {
    int v14 = *(_DWORD *)Value;
    v15 = (const void *)Value[1];
    if (v15) {
      v16 = (const opaqueCMFormatDescription *)CFRetain(v15);
    }
    else {
      v16 = 0;
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v11 + 112), a2);
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = FigSignalErrorAt();
    int v14 = 0;
    v16 = 0;
  }
  int v78 = v14;
  if (v14 & 2 | a3)
  {
    a5 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = (uint64_t)a6;
  }
  if ((unint64_t)a5 | v19)
  {
    if (a5)
    {
      vtDecompressionSessionUpdateAttachmentsForEmittedImageBuffer((void *)v11, v16, a5);
      vtDecompressionSessionGeneratePerFrameHDRMetadataforEmittedImageBufferCommon(v11, a5);
    }
    else if (v19)
    {
      CMItemCount Count = CMTaggedBufferGroupGetCount((CMTaggedBufferGroupRef)v19);
      if (Count >= 1)
      {
        CMItemCount v26 = Count;
        for (uint64_t i = 0; i != v26; ++i)
        {
          CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
          if (CVPixelBufferAtIndex) {
            vtDecompressionSessionUpdateAttachmentsForEmittedImageBuffer((void *)v11, v16, CVPixelBufferAtIndex);
          }
        }
      }
      CMItemCount v29 = CMTaggedBufferGroupGetCount((CMTaggedBufferGroupRef)v19);
      if (v29 >= 1)
      {
        CMItemCount v30 = v29;
        for (uint64_t j = 0; j != v30; ++j)
        {
          v32 = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
          if (v32) {
            vtDecompressionSessionGeneratePerFrameHDRMetadataforEmittedImageBufferCommon(v11, v32);
          }
        }
      }
    }
  }
  if (v16) {
    CFRelease(v16);
  }
  if (!((unint64_t)a5 | v19))
  {
    MEMORY[0x1997056C0](*(void *)(v11 + 104));
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    uint64_t v21 = 0;
    v22 = 0;
    if (!a3) {
      goto LABEL_68;
    }
    goto LABEL_75;
  }
  if (a5)
  {
    uint64_t DestinationImageBufferForEmittedFrameIfNecessary = vtDecompressionSessionCreateDestinationImageBufferForEmittedFrameIfNecessary(v11, a4, a5, (CVPixelBufferRef *)&v81);
LABEL_23:
    a3 = DestinationImageBufferForEmittedFrameIfNecessary;
    goto LABEL_24;
  }
  if (!v19)
  {
    uint64_t DestinationImageBufferForEmittedFrameIfNecessary = FigSignalErrorAt();
    goto LABEL_23;
  }
  CMItemCount v33 = CMTaggedBufferGroupGetCount((CMTaggedBufferGroupRef)v19);
  CFTypeRef cf = 0;
  if (v33 < 1)
  {
    a3 = 0;
    goto LABEL_24;
  }
  CFIndex v34 = v33;
  unsigned int v74 = v17;
  uint64_t v35 = 0;
  v36 = 0;
  Mutable = 0;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    v38 = (void *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
    if (v38)
    {
      v39 = v38;
      uint64_t v40 = vtDecompressionSessionCreateDestinationImageBufferForEmittedFrameIfNecessary(v11, a4, v38, (CVPixelBufferRef *)&cf);
      if (v40) {
        goto LABEL_94;
      }
      if (!cf)
      {
        if (!v36) {
          goto LABEL_63;
        }
        v46 = v36;
        v45 = v39;
        goto LABEL_60;
      }
      if (!v36)
      {
        Mutable = CFArrayCreateMutable(allocator, v34, MEMORY[0x1E4F1D510]);
        if (!Mutable)
        {
          a3 = FigSignalErrorAt();
          v36 = 0;
          goto LABEL_95;
        }
        for (CFIndex k = 0; k != v34; ++k)
        {
          CMTagCollectionRef TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex((CMTaggedBufferGroupRef)v19, k);
          CFArrayAppendValue(Mutable, TagCollectionAtIndex);
        }
        v36 = CFArrayCreateMutable(allocator, v34, MEMORY[0x1E4F1D510]);
        if (!v36)
        {
          uint64_t v40 = FigSignalErrorAt();
          goto LABEL_94;
        }
        if (v35)
        {
          for (uint64_t m = 0; m != v35; ++m)
          {
            CMSampleBufferAtIndex = (const void *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
            if (!CMSampleBufferAtIndex) {
              CMSampleBufferAtIndex = (const void *)FigTaggedBufferGroupGetCMSampleBufferAtIndex();
            }
            CFArrayAppendValue(v36, CMSampleBufferAtIndex);
          }
        }
      }
      v45 = cf;
    }
    else
    {
      if (!v36) {
        goto LABEL_61;
      }
      v45 = (const void *)FigTaggedBufferGroupGetCMSampleBufferAtIndex();
    }
    v46 = v36;
LABEL_60:
    CFArrayAppendValue(v46, v45);
LABEL_61:
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
LABEL_63:
    ++v35;
  }
  while (v35 != v34);
  a3 = 0;
  if (Mutable && v36)
  {
    uint64_t v40 = MEMORY[0x199705780](allocator, Mutable, v36, &v80);
LABEL_94:
    a3 = v40;
  }
LABEL_95:
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v36) {
    CFRelease(v36);
  }
  uint64_t v17 = v74;
LABEL_24:
  MEMORY[0x1997056C0](*(void *)(v11 + 104));
  if (a3)
  {
    uint64_t v21 = 0;
    v22 = 0;
    goto LABEL_75;
  }
  uint64_t v23 = (uint64_t)v80;
  unint64_t v24 = (unint64_t)v81;
LABEL_68:
  if (!(v24 | v23))
  {
    a3 = 0;
    uint64_t v21 = v19;
    v22 = a5;
LABEL_75:
    uint64_t v47 = v11;
    v48 = v79;
    uint64_t v49 = a3;
    uint64_t v50 = a4;
    goto LABEL_76;
  }
  if (!a5 || !v24)
  {
    if (!v19 || !v23) {
      goto LABEL_77;
    }
    CMItemCount v51 = CMTaggedBufferGroupGetCount((CMTaggedBufferGroupRef)v19);
    if (v51 < 1)
    {
LABEL_90:
      uint64_t v50 = a4 | 4;
      uint64_t v47 = v11;
      v48 = v79;
      uint64_t v49 = 0;
      v22 = 0;
      uint64_t v21 = v23;
    }
    else
    {
      CMItemCount v52 = v51;
      uint64_t v53 = 0;
      while (1)
      {
        v54 = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
        v55 = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
        if (v54)
        {
          if (v55)
          {
            uint64_t v56 = vtDecompressionSubDuctTransferImage_Synchronously(v11, v78, v54, v55);
            if (v56) {
              break;
            }
          }
        }
        if (v52 == ++v53) {
          goto LABEL_90;
        }
      }
      uint64_t v49 = v56;
      uint64_t v47 = v11;
      v48 = v79;
      uint64_t v50 = a4;
      v22 = 0;
      uint64_t v21 = 0;
    }
LABEL_76:
    vtDecompressionSubDuctEmitTransferredFrame(v47, v48, v49, v50, v22, v21);
    goto LABEL_77;
  }
  if ((v78 & 1) == 0) {
    goto LABEL_73;
  }
  MEMORY[0x199705810](&vtGetEnableAsynchronousTransfer_sGetEnableAsynchronousTransferOnce, vtGetEnableAsynchronousTransferOnce);
  if (sGlobalEnableAsynchronousTransfer) {
    goto LABEL_73;
  }
  if (!*(unsigned char *)(v11 + 144))
  {
    uint64_t v62 = *(void *)(v11 + 168);
    if (v62)
    {
LABEL_130:
      if (FigSemaphoreWaitRelative()) {
        goto LABEL_73;
      }
      MEMORY[0x1997056B0](*(void *)(v62 + 48));
      *(void *)(v62 + 56) = v79;
      *(_DWORD *)(v62 + 64) = v78;
      *(_DWORD *)(v62 + 68) = a4 | 1;
      *(void *)(v62 + 72) = CFRetain(a5);
      *(void *)(v62 + 80) = CFRetain((CFTypeRef)v24);
      MEMORY[0x1997056C0](*(void *)(v62 + 48));
      FigSemaphoreSignal();
      goto LABEL_77;
    }
    MEMORY[0x1997056B0](*(void *)(v11 + 104));
    if (*(void *)(v11 + 168))
    {
LABEL_129:
      MEMORY[0x1997056C0](*(void *)(v11 + 104));
      uint64_t v62 = *(void *)(v11 + 168);
      if (!v62) {
        goto LABEL_73;
      }
      goto LABEL_130;
    }
    CFTypeRef cf = @"com.apple.coremedia.asyncpixeltransfer";
    CFAllocatorRef allocatora = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef v63 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F21EA8], &cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    v64 = malloc_type_calloc(0x58uLL, 1uLL, 0xC4C0F2uLL);
    uint64_t v65 = (uint64_t)v64;
    if (v64
      && (void *v64 = v11,
          v64[3] = FigSemaphoreCreate(),
          *(void *)(v65 + 48) = FigSimpleMutexCreate(),
          uint64_t v66 = FigSemaphoreCreate(),
          *(void *)(v65 + 40) = v66,
          *(void *)(v65 + 24))
      && *(void *)(v65 + 48)
      && v66)
    {
      unsigned int v75 = v17;
      uint64_t v67 = 0;
      *(_DWORD *)(v65 + 8) = 1;
      *(unsigned char *)(v65 + 32) = 0;
      v68 = (_DWORD *)(v11 + 240);
      uint64_t v69 = 16;
      while (!FigThreadCreate())
      {
        if (*v68)
        {
          CFNumberRef v70 = CFNumberCreate(allocatora, kCFNumberSInt32Type, v68);
          CFDictionaryRef v71 = v63;
          CFNumberRef v72 = v70;
          FigThreadSetProperty();
          CFNumberRef v73 = v72;
          CFDictionaryRef v63 = v71;
          v68 = (_DWORD *)(v11 + 240);
          CFRelease(v73);
        }
        ++v67;
        v69 += 8;
        if (v67 >= *(int *)(v65 + 8))
        {
          *(void *)(v11 + 168) = v65;
          uint64_t v65 = 0;
          goto LABEL_135;
        }
      }
      *(_DWORD *)(v65 + 8) = v67;
LABEL_135:
      uint64_t v17 = v75;
      if (!v63) {
        goto LABEL_128;
      }
    }
    else
    {
      FigSignalErrorAt();
      if (!v63)
      {
LABEL_128:
        vtDecompressionSubDuctAsyncPixelTransfer_StopWorkerThreads(v65);
        goto LABEL_129;
      }
    }
    CFRelease(v63);
    goto LABEL_128;
  }
  if (!*(void *)(v11 + 152))
  {
    MEMORY[0x1997056B0](*(void *)(v11 + 104));
    uint64_t v57 = FigDispatchQueueCreateWithPriorityAndClientPID();
    *(void *)(v11 + 152) = v57;
    if (v57)
    {
      dispatch_group_t v58 = dispatch_group_create();
      *(void *)(v11 + 160) = v58;
      if (!v58)
      {
        v59 = *(NSObject **)(v11 + 152);
        if (v59)
        {
          dispatch_release(v59);
          *(void *)(v11 + 152) = 0;
        }
      }
    }
    MEMORY[0x1997056C0](*(void *)(v11 + 104));
    if (!*(void *)(v11 + 152)) {
      goto LABEL_73;
    }
  }
  v60 = *(NSObject **)(v11 + 160);
  if (v60)
  {
    dispatch_group_wait(v60, 0xFFFFFFFFFFFFFFFFLL);
    v61 = malloc_type_calloc(1uLL, 0x28uLL, 0x10200403D817979uLL);
    void *v61 = v11;
    v61[1] = v79;
    *((_DWORD *)v61 + 4) = v78;
    *((_DWORD *)v61 + 5) = a4 | 1;
    v61[3] = CFRetain(a5);
    v61[4] = CFRetain((CFTypeRef)v24);
    dispatch_group_async_f(*(dispatch_group_t *)(v11 + 160), *(dispatch_queue_t *)(v11 + 152), v61, (dispatch_function_t)vtDecompressionSubDuctDoAsyncPixelTransferAndOutput_f);
  }
  else
  {
LABEL_73:
    vtDecompressionSubDuctTransferFrameAndCallOutputCallback_Synchronously(v11, v79, v78, a4, a5, (__CVBuffer *)v24);
  }
LABEL_77:
  if (v81) {
    CFRelease(v81);
  }
  if (v80) {
    CFRelease(v80);
  }
  return v17;
}

uint64_t VTDecoderSessionCleanUpAfterDecode()
{
  return 0;
}

uint64_t VTDecoderSessionEmitDecodedMultiImageFrame(uint64_t *a1, const void *a2, uint64_t a3, uint64_t a4, OpaqueCMTaggedBufferGroup *a5)
{
  return vtDecoderSessionEmitDecodedFrameCommon(a1, a2, a3, a4, 0, a5);
}

uint64_t VTDecoderSessionTrace(uint64_t a1)
{
  if (a1 && ((v1 = *(uint64_t **)(a1 + 8)) == 0 || (uint64_t v2 = *v1) != 0 && !*(unsigned char *)(v2 + 16))) {
    return 0;
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t VTDecoderSessionGetDestinationPixelBufferAttributes(uint64_t a1)
{
  if (a1 && *(void *)a1) {
    return *(void *)(*(void *)a1 + 64);
  }
  FigSignalErrorAt();
  return 0;
}

CFTypeRef vtDecompressionSessionCopyFormattingDesc()
{
  return CFRetain(@"[VTDecompressionSession]");
}

__CFString *vtDecompressionSessionCopyDebugDesc(void *a1)
{
  if (a1[3])
  {
    return (__CFString *)CFRetain(@"[VTDecompressionSession]");
  }
  else
  {
    CFAllocatorRef v3 = CFGetAllocator(a1);
    Mutable = CFStringCreateMutable(v3, 0);
    CFAllocatorRef v5 = CFGetAllocator(a1);
    uint64_t v6 = a1[5];
    if (v6) {
      uint64_t v6 = *(void *)(v6 + 16);
    }
    CFStringAppendFormat(Mutable, 0, @"<VTDecompressionSession %p [%p]>{videoFormatDescription:%p, destinationPixelBufferAttributes:%p, outputCallback:{%p,%p}}", a1, v5, v6, a1[10], a1[12], a1[13]);
    return Mutable;
  }
}

uint64_t __vtDecompressionSessionDeterminePolicyForPossibleHDR10PlusContent_block_invoke()
{
  vtDecompressionSessionDeterminePolicyForPossibleHDR10PlusContent_hdr10PlusEnabled = CelestialShouldSupportHDR10Plus();
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  vtDecompressionSessionDeterminePolicyForPossibleHDR10PlusContent_hdr10PlusEnabled = result;
  return result;
}

uint64_t __vtDecompressionSessionSetupDolbyVision8p1_block_invoke()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  vtDecompressionSessionSetupDolbyVision8p1_dolbyVision8p1Enabled = result;
  return result;
}

uint64_t __vtDecompressionSessionSetupDolbyVision10p4_block_invoke()
{
  uint64_t result = _os_feature_enabled_impl();
  vtDecompressionSessionSetupDolbyVision10p4_dolbyVision10p4Enabled = result;
  return result;
}

uint64_t vtFormatDescriptionIsPQ(const opaqueCMFormatDescription *a1)
{
  CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F24BC8]);

  return FigCFEqual();
}

void vtDecompressionDuctSetVideoFormatDescription(uint64_t a1, const void *a2)
{
  MEMORY[0x1997056B0](*(void *)(a1 + 72));
  v4 = *(const void **)(a1 + 80);
  *(void *)(a1 + 80) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }

  JUMPOUT(0x1997056C0);
}

CFDictionaryRef vtCreateFrameTypesArrayElement(const void *a1)
{
  CFAllocatorRef v3 = a1;
  keys = @"OnlyTheseFrames";
  CFDictionaryRef v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, &v3, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v1) {
    FigSignalErrorAt();
  }
  return v1;
}

CFDictionaryRef vtDecompressionAttributesHaveColorSpaceAttachments(const __CFDictionary *result)
{
  if (result)
  {
    CFDictionaryRef v1 = result;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E4F24990]);
    CFDictionaryRef v3 = (const __CFDictionary *)CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E4F24988]);
    if (vtDecompressionDictionaryHasColorSpaceKeys(Value)) {
      return (const __CFDictionary *)1;
    }
    else {
      return (const __CFDictionary *)(vtDecompressionDictionaryHasColorSpaceKeys(v3) != 0);
    }
  }
  return result;
}

uint64_t vtCopyGuessedMissingColorSpaceAttachmentsFromFormatDescription(const opaqueCMFormatDescription *a1, __CFDictionary **a2)
{
  CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v6 = Mutable;
    if (Extensions)
    {
      CFDictionaryRef Value = CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F24A90]);
      v8 = CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F24BC8]);
      v9 = CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F24C18]);
      LODWORD(Extensions) = CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F24B28]) != 0;
      if (a1)
      {
LABEL_4:
        CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(a1);
        FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
        unint64_t width = Dimensions.width;
        unint64_t v13 = *(uint64_t *)&Dimensions >> 32;
LABEL_7:
        vtGuessMissingColorSpaceAttachmentsGuts(MediaSubType, width, v13, Value, v8, v9, (int)Extensions, v6);
        *a2 = v6;
        return 0;
      }
    }
    else
    {
      CFDictionaryRef Value = 0;
      v8 = 0;
      v9 = 0;
      if (a1) {
        goto LABEL_4;
      }
    }
    unint64_t width = 0;
    unint64_t v13 = 0;
    FourCharCode MediaSubType = 0;
    goto LABEL_7;
  }

  return FigSignalErrorAt();
}

CFDictionaryRef vtDecompressionDictionaryHasColorSpaceKeys(const __CFDictionary *result)
{
  if (result)
  {
    CFDictionaryRef v1 = result;
    if (CFDictionaryContainsKey(result, (const void *)*MEMORY[0x1E4F24A90])
      || CFDictionaryContainsKey(v1, (const void *)*MEMORY[0x1E4F24BC8]))
    {
      return (const __CFDictionary *)1;
    }
    else
    {
      return (const __CFDictionary *)(CFDictionaryContainsKey(v1, (const void *)*MEMORY[0x1E4F24C18]) != 0);
    }
  }
  return result;
}

void vtGuessMissingColorSpaceAttachmentsGuts(int a1, unint64_t a2, unint64_t a3, CFTypeRef cf1, CFTypeRef a5, CFTypeRef a6, int a7, CFMutableDictionaryRef theDict)
{
  if (cf1 && a5 && a6) {
    goto LABEL_4;
  }
  if (!cf1 && !a5 && !a6)
  {
    unint64_t v24 = 0;
    value = 0;
    uint64_t v23 = 0;
    VTGetDefaultColorAttributesWithHints(a1, 0, a2, a3, &value, &v24, &v23);
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F24A90], value);
    if (a7) {
      v15 = (const void *)*MEMORY[0x1E4F24C08];
    }
    else {
      v15 = v24;
    }
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F24BC8], v15);
    v16 = (const void *)*MEMORY[0x1E4F24C18];
    uint64_t v17 = v23;
LABEL_40:
    CFDictionarySetValue(theDict, v16, v17);
    goto LABEL_41;
  }
  if (cf1 && !CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F24AC8]) && !CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F24AB0])
    || a5 && !CFEqual(a5, (CFTypeRef)*MEMORY[0x1E4F24BE0]) && !CFEqual(a5, (CFTypeRef)*MEMORY[0x1E4F24C08]))
  {
    goto LABEL_4;
  }
  if (!a6)
  {
    if (!cf1)
    {
      v20 = (const void **)MEMORY[0x1E4F24AC8];
      goto LABEL_31;
    }
LABEL_26:
    int v13 = 0;
    if (!a5) {
      goto LABEL_32;
    }
    goto LABEL_27;
  }
  v18 = (const void *)*MEMORY[0x1E4F24C40];
  if (!CFEqual(a6, (CFTypeRef)*MEMORY[0x1E4F24C40]) && !CFEqual(a6, (CFTypeRef)*MEMORY[0x1E4F24C48]))
  {
LABEL_4:
    int v13 = 0;
    int v14 = 0;
    goto LABEL_28;
  }
  if (cf1) {
    goto LABEL_26;
  }
  int v19 = CFEqual(a6, v18);
  v20 = (const void **)MEMORY[0x1E4F24AC8];
  if (!v19) {
    v20 = (const void **)MEMORY[0x1E4F24AB0];
  }
LABEL_31:
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F24A90], *v20);
  int v13 = 1;
  if (!a5)
  {
LABEL_32:
    uint64_t v21 = (const void **)MEMORY[0x1E4F24C08];
    if (!a7) {
      uint64_t v21 = (const void **)MEMORY[0x1E4F24BE0];
    }
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F24BC8], *v21);
    int v14 = 1;
    if (!a6) {
      goto LABEL_35;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v14 = 0;
  if (!a6)
  {
LABEL_35:
    if (cf1 && !CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F24AC8]))
    {
      v16 = (const void *)*MEMORY[0x1E4F24C18];
      v22 = (const void **)MEMORY[0x1E4F24C48];
    }
    else
    {
      v16 = (const void *)*MEMORY[0x1E4F24C18];
      v22 = (const void **)MEMORY[0x1E4F24C40];
    }
    uint64_t v17 = *v22;
    goto LABEL_40;
  }
LABEL_28:
  if (v14 | v13) {
LABEL_41:
  }
    CFDictionarySetValue(theDict, @"ColorInfoGuessedBy", @"VideoToolbox");
}

CFDictionaryRef vtCreateQualityOfServiceTier(void *a1, double a2)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  double v7 = a2;
  keys[0] = @"OnlyTheseFrames";
  keys[1] = @"ReducedFrameDelivery";
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &v7);
  values[0] = a1;
  values[1] = v4;
  CFDictionaryRef v5 = CFDictionaryCreate(v3, (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v5)
  {
    FigSignalErrorAt();
    if (!v4) {
      return v5;
    }
    goto LABEL_3;
  }
  if (v4) {
LABEL_3:
  }
    CFRelease(v4);
  return v5;
}

void vtDecompressionSessionAddPropertyToPartition(void *key, const void *a2, CFDictionaryRef *a3)
{
  if (CFDictionaryContainsKey(*a3, key))
  {
    CFMutableDictionaryRef Mutable = a3[2];
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      a3[2] = Mutable;
    }
  }
  else
  {
    CFDictionaryRef v7 = a3[1];
    if (!v7 || !CFDictionaryContainsKey(v7, key)) {
      return;
    }
    CFMutableDictionaryRef Mutable = a3[3];
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      a3[3] = Mutable;
    }
  }

  CFDictionarySetValue(Mutable, key, a2);
}

BOOL vtCVBufferAttachmentEmpty(__CVBuffer *a1, const __CFString *a2)
{
  CFTypeRef v2 = CVBufferCopyAttachment(a1, a2, 0);
  CFTypeRef v3 = v2;
  if (v2) {
    CFRelease(v2);
  }
  return v3 == 0;
}

CFNumberRef vtCreateScaledCleanApertureValue(const __CFDictionary *a1, const void *a2, double a3)
{
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    double valuePtr = 0.0;
    CFNumberGetValue(result, kCFNumberDoubleType, &valuePtr);
    double valuePtr = valuePtr * a3;
    return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
  }
  return result;
}

__n128 vtDuctFrameTrackingInfoFindMinPTS(uint64_t a1, CMTime *a2, CMTime *a3)
{
  CMTime time1 = a2[1];
  CMTime v6 = *a3;
  if (CMTimeCompare(&time1, &v6) < 0)
  {
    __n128 result = *(__n128 *)&a2[1].value;
    a3->epoch = a2[1].epoch;
    *(__n128 *)&a3->value = result;
  }
  return result;
}

__n128 vtDuctFrameTrackingInfoFindMaxPTS(uint64_t a1, uint64_t a2, CMTime *a3)
{
  if (*(unsigned char *)(a2 + 36))
  {
    CFNumberRef v4 = (__n128 *)(a2 + 24);
    CMTime time1 = *(CMTime *)(a2 + 24);
    CMTime v6 = *a3;
    if (CMTimeCompare(&time1, &v6) >= 1)
    {
      __n128 result = *v4;
      a3->epoch = v4[1].n128_i64[0];
      *(__n128 *)&a3->value = result;
    }
  }
  return result;
}

uint64_t vtDecompressionDuctDecodeSingleFrame_iterator(CMSampleBufferRef sbuf, uint64_t a2, uint64_t a3)
{
  return vtDecompressionDuctDecodeSingleFrame(*(void *)a3, sbuf, *(unsigned int *)(a3 + 8), *(void *)(a3 + 16), *(void *)(a3 + 40), *(void *)(a3 + 48), *(void *)(a3 + 24), *(void *)(a3 + 32));
}

CFTypeRef VTVideoDecoderCopyFormattingDesc()
{
  return CFRetain(@"[VTVideoDecoder]");
}

void vtDecompressionSessionUpdateAttachmentsForEmittedImageBuffer(void *a1, const opaqueCMFormatDescription *a2, __CVBuffer *a3)
{
  vtTransferImageBufferAttachmentsFromVideoFormatDescription(a2, a3);
  if (!VTIsBufferTaggedWithColorProperties(a3))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CMTime v6 = Mutable;
    CFDictionaryRef v7 = (const void *)a1[25];
    if (v7) {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24A90], v7);
    }
    v8 = (const void *)a1[26];
    if (v8) {
      CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E4F24BC8], v8);
    }
    v9 = (const void *)a1[27];
    if (v9) {
      CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E4F24C18], v9);
    }
    v10 = (const void *)a1[28];
    if (v10) {
      CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E4F24B70], v10);
    }
    CVBufferSetAttachments(a3, v6, kCVAttachmentMode_ShouldPropagate);
    if (v6)
    {
      CFRelease(v6);
    }
  }
}

void vtDecompressionSessionGeneratePerFrameHDRMetadataforEmittedImageBufferCommon(uint64_t a1, CVBufferRef buffer)
{
  CFTypeRef v20 = 0;
  if (vtAddDolbyOverride_onceToken != -1) {
    dispatch_once(&vtAddDolbyOverride_onceToken, &__block_literal_global_56);
  }
  if (!vtAddDolbyOverride_addDolbyOverride && !*(unsigned char *)(a1 + 272))
  {
LABEL_23:
    CFTypeRef v5 = v20;
    if (!v20) {
      return;
    }
    goto LABEL_24;
  }
  CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F24AF0];
  CFTypeRef v5 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24AF0], 0);
  CFTypeRef v20 = v5;
  if (!v5)
  {
    CFTypeRef v6 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24A90], 0);
    CFTypeRef v7 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
    CFTypeRef v8 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
    if (FigCFEqual() && FigCFEqual() && FigCFEqual())
    {
      v9 = (uint64_t *)(a1 + 280);
      if (!*(void *)(a1 + 280)
        && VTHDRImageStatisticsGenerationSessionCreate(0, 0, (uint64_t *)(a1 + 280))
        || (v10 = (uint64_t *)(a1 + 288), !*(void *)(a1 + 288))
        && VTHDRMetadataGenerationSessionCreate(*MEMORY[0x1E4F1CF80], 4, 0, (uint64_t *)(a1 + 288)))
      {
        FigSignalErrorAt();
        if (!v7) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
      uint64_t v11 = *v9;
      if (*v9)
      {
        if (*v10)
        {
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          VTHDRImageStatisticsGenerationSessionCreateStatistics(v11, buffer, (float *)&v19 + 1, (float *)&v19, (float *)&v18 + 1, (float *)&v18);
          long long v15 = 0u;
          long long v16 = 0u;
          int v17 = 1;
          long long v13 = 0u;
          long long v14 = 0u;
          v12[0] = *(float *)&v19;
          v12[1] = *((float *)&v18 + 1);
          v12[2] = *((float *)&v19 + 1);
          v12[3] = *(float *)&v18;
          v12[4] = *(float *)&v18;
          WORD6(v16) = 257;
          BYTE14(v16) = 1;
          VTHDRMetadataGenerationSessionCreateDataFromStatistics(*v10, 0, 1, (uint64_t)v12, 1, (uint64_t)&v20);
          if (v20) {
            CVBufferSetAttachment(buffer, v4, v20, kCVAttachmentMode_ShouldPropagate);
          }
        }
      }
    }
    if (!v7)
    {
LABEL_19:
      if (v6) {
        CFRelease(v6);
      }
      if (v8) {
        CFRelease(v8);
      }
      goto LABEL_23;
    }
LABEL_18:
    CFRelease(v7);
    goto LABEL_19;
  }
LABEL_24:
  CFRelease(v5);
}

uint64_t __vtAddDolbyOverride_block_invoke()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  vtAddDolbyOverride_addDolbyOverride = result;
  return result;
}

uint64_t vtDecompressionSessionCreateDestinationImageBufferForEmittedFrameIfNecessary(uint64_t a1, int a2, void *a3, CVPixelBufferRef *a4)
{
  if ((a2 & 0x1000000) != 0) {
    return 0;
  }
  if (*(void *)(a1 + 56)) {
    BOOL v7 = *(void *)(a1 + 96) != *(void *)(a1 + 88);
  }
  else {
    BOOL v7 = *(void *)(a1 + 64) && CVPixelBufferIsCompatibleWithAttributes() == 0;
  }
  if (VTIsPixelBufferCompatibleWithColorProperties(a3, *(const void **)(a1 + 200), *(const void **)(a1 + 208), *(const void **)(a1 + 216), *(const void **)(a1 + 224), (CGColorSpaceRef *)(a1 + 232))&& !v7)
  {
    return 0;
  }
  vtDecompressionSubDuctEnsurePixelBufferPoolsAreUpToDate(a1);
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t PixelBuffer = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CVPixelBufferPoolRef *)(a1 + 96), a4);
  if (PixelBuffer) {
    return PixelBuffer;
  }
  uint64_t v11 = (VTSessionRef *)(a1 + 128);
  if (*(void *)(a1 + 128)) {
    return 0;
  }
  CFAllocatorRef v13 = CFGetAllocator(*(CFTypeRef *)a1);
  uint64_t PixelBuffer = VTPixelTransferSessionCreate(v13, (VTPixelTransferSessionRef *)(a1 + 128));
  if (PixelBuffer) {
    return PixelBuffer;
  }
  if (*v11)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    long long v15 = Mutable;
    long long v16 = (const void **)MEMORY[0x1E4F1CFC8];
    if (!*(unsigned char *)(a1 + 257)) {
      long long v16 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(Mutable, @"RealTime", *v16);
    if (*(_DWORD *)(a1 + 240)) {
      FigCFDictionarySetInt32();
    }
    int v17 = *(const void **)(a1 + 200);
    if (v17) {
      CFDictionarySetValue(v15, @"DestinationColorPrimaries", v17);
    }
    uint64_t v18 = *(const void **)(a1 + 208);
    if (v18) {
      CFDictionarySetValue(v15, @"DestinationTransferFunction", v18);
    }
    uint64_t v19 = *(const void **)(a1 + 216);
    if (v19) {
      CFDictionarySetValue(v15, @"DestinationYCbCrMatrix", v19);
    }
    CFTypeRef v20 = *(const void **)(a1 + 224);
    if (v20) {
      CFDictionarySetValue(v15, @"DestinationICCProfile", v20);
    }
    uint64_t PixelBuffer = VTSessionSetProperties(*v11, v15);
    if (v15) {
      CFRelease(v15);
    }
    if (PixelBuffer) {
      return PixelBuffer;
    }
  }
  CFDictionaryRef v21 = *(const __CFDictionary **)(a1 + 136);
  if (!v21) {
    return 0;
  }
  VTSessionRef v22 = *v11;

  return VTSessionSetProperties(v22, v21);
}

uint64_t vtDecompressionSubDuctTransferFrameAndCallOutputCallback_Synchronously(uint64_t a1, const void *a2, char a3, int a4, __CVBuffer *a5, __CVBuffer *a6)
{
  CFTypeRef v6 = a6;
  uint64_t v10 = vtDecompressionSubDuctTransferImage_Synchronously(a1, a3, a5, a6);
  if (v10)
  {
    FigSignalErrorAt();
    CFTypeRef v6 = 0;
  }

  return vtDecompressionSubDuctEmitTransferredFrame(a1, a2, v10, a4 | 4u, v6, 0);
}

uint64_t vtDecompressionSubDuctTransferImage_Synchronously(uint64_t a1, char a2, __CVBuffer *a3, __CVBuffer *a4)
{
  BOOL v7 = *(const void **)(a1 + 128);
  CFTypeRef v8 = (const void *)*MEMORY[0x1E4F1CFC8];
  if ((a2 & 4) != 0) {
    CFAllocatorRef v9 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  else {
    CFAllocatorRef v9 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  VTSessionSetProperty(v7, @"EnableHighSpeedTransfer", v9);
  if (VTAvoidHardwarePixelTransfer())
  {
    VTSessionSetProperty(*(VTSessionRef *)(a1 + 128), @"EnableHardwareAcceleratedTransfer", v8);
    VTSessionSetProperty(*(VTSessionRef *)(a1 + 128), @"EnableGPUAcceleratedTransfer", v8);
  }
  uint64_t v10 = *(OpaqueVTPixelTransferSession **)(a1 + 128);

  return VTPixelTransferSessionTransferImage(v10, a3, a4);
}

void vtGetEnableAsynchronousTransferOnce()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)CFPreferencesCopyValue(@"asyncpixeltransfer", @"com.apple.coremedia", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (v0)
  {
    CFStringRef v1 = v0;
    CFStringGetCString(v0, v2, 200, 0x8000100u);
    if (CFEqual(v1, @"disable") || CFEqual(v1, @"disabled")) {
      sGlobalEnableAsynchronousTransfer = 1;
    }
    CFRelease(v1);
  }
}

void vtDecompressionSubDuctDoAsyncPixelTransferAndOutput_f(uint64_t a1)
{
  if (a1)
  {
    vtDecompressionSubDuctTransferFrameAndCallOutputCallback_Synchronously(*(void *)a1, *(const void **)(a1 + 8), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20), *(__CVBuffer **)(a1 + 24), *(__CVBuffer **)(a1 + 32));
    CFTypeRef v2 = *(const void **)(a1 + 24);
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = *(const void **)(a1 + 32);
    if (v3) {
      CFRelease(v3);
    }
    free((void *)a1);
  }
}

uint64_t vtDecompressionDuctAsyncPixelTransfer_WorkerThread(uint64_t a1)
{
  CFTypeRef v2 = (void *)(a1 + 72);
  while (1)
  {
    FigSemaphoreWaitRelative();
    MEMORY[0x1997056B0](*(void *)(a1 + 48));
    int v4 = *(_DWORD *)(a1 + 64);
    uint64_t v3 = *(unsigned int *)(a1 + 68);
    CFTypeRef v6 = *(__CVBuffer **)(a1 + 72);
    CFTypeRef v5 = *(__CVBuffer **)(a1 + 80);
    uint64_t v7 = *(void *)(a1 + 48);
    CFTypeRef v8 = *(const void **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    *CFTypeRef v2 = 0;
    v2[1] = 0;
    MEMORY[0x1997056C0](v7);
    if (*(unsigned char *)(a1 + 32)) {
      break;
    }
    FigSemaphoreSignal();
    vtDecompressionSubDuctTransferFrameAndCallOutputCallback_Synchronously(*(void *)a1, v8, v4, v3, v6, v5);
    if (v6) {
      CFRelease(v6);
    }
    if (v5) {
      CFRelease(v5);
    }
  }
  if (v8) {
    vtDecompressionSubDuctEmitTransferredFrame(*(void *)a1, v8, 4294954393, v3, 0, 0);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  return 0;
}

__n128 VTConvertFloatRectToIntRect(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      __n128 result = *(__n128 *)a1;
      *(int64x2_t *)(a2 + 32) = vcvtq_s64_f64(vcvtq_f64_f32(vrnda_f32(vcvt_f32_f64(*(float64x2_t *)(a1 + 16)))));
      int64x2_t v3 = vcvtq_s64_f64(vcvtq_f64_f32(vrnda_f32(vcvt_f32_f64(*(float64x2_t *)(a1 + 32)))));
      *(__n128 *)a2 = result;
      *(int64x2_t *)(a2 + 16) = v3;
    }
  }
  return result;
}

uint64_t VTPixelTransferNodeSoftwareCopyProperty()
{
  return 4294954396;
}

uint64_t VTPixelTransferNodeSoftwareSetProperty()
{
  return 4294954396;
}

uint64_t VTPixelTransferNodeSoftwareCopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t VTPixelTransferChainAppendSoftwareNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  VTPixelTransferNodeGetClassID();
  uint64_t v8 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  if (a5) {
    a6(a5);
  }
  return v8;
}

uint64_t VTPixelTransferNodeScalerCopyProperty()
{
  return 4294954396;
}

uint64_t VTPixelTransferNodeScalerSetProperty()
{
  return 4294954396;
}

uint64_t VTPixelTransferNodeScalerCopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t VTPixelTransferChainAppendScalerNode()
{
  VTPixelTransferNodeGetClassID();
  uint64_t v0 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v0;
}

uint64_t VTPixelTransferNodeDynamicCopyProperty(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *a4 = 0;
  if (result)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (FigCFEqual())
    {
      __n128 result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 136), @"ServiceHistogramData");
      *a4 = result;
      if (result)
      {
        CFRetain((CFTypeRef)result);
        return 0;
      }
    }
    else
    {
      return 4294954396;
    }
  }
  return result;
}

uint64_t VTPixelTransferNodeDynamicSetProperty()
{
  return 4294954396;
}

uint64_t VTPixelTransferNodeDynamicCopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t vtPixelTransferChainAppendDynamicNode()
{
  VTPixelTransferNodeGetClassID();
  uint64_t v0 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v0;
}

void vtFreePlanarBuffers(uint64_t a1)
{
  for (uint64_t i = 0; i != 128; i += 32)
  {
    int64x2_t v3 = *(void **)(a1 + i);
    if (v3)
    {
      free(v3);
      *(void *)(a1 + i) = 0;
    }
  }
}

CFTypeID VTPixelTransferSessionGetTypeID(void)
{
  return sVTPixelTransferSessionID;
}

uint64_t VTPixelTransferSessionCopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  if (!*(unsigned char *)(a1 + 16)
    && (MEMORY[0x199705810](&sCreateSupportedPropertyDictionaryOnce, vtPixelTransferSessionCreateSupportedPropertyDictionary), a2)&& sVTPixelTransferSessionSupportedPropertyDictionary)
  {
    *a2 = CFRetain((CFTypeRef)sVTPixelTransferSessionSupportedPropertyDictionary);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void vtPixelTransferSessionCreateSupportedPropertyDictionary()
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v53 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v48 = 0u;
  uint64_t v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v40 = 0u;
  keys = @"PropertyType";
  uint64_t v47 = @"ReadWriteStatus";
  v38 = @"Enumeration";
  v39 = @"ReadWrite";
  values = @"Normal";
  v55 = @"CropSourceToCleanAperture";
  uint64_t v56 = @"Letterbox";
  uint64_t v57 = @"Trim";
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef v1 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 4, MEMORY[0x1E4F1D510]);
  if (!v1)
  {
    FigSignalErrorAt();
    FigSignalErrorAt();
    return;
  }
  CFArrayRef v2 = v1;
  *(void *)&long long v48 = @"SupportedValueList";
  *(void *)&long long v40 = v1;
  CFDictionaryRef v3 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&v38, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v3)
  {
    FigSignalErrorAt();
    CFArrayRef v29 = v2;
LABEL_58:
    CFRelease(v29);
    return;
  }
  CFDictionaryRef cf = v3;
  v38 = @"ReadWrite";
  keys = @"ReadWriteStatus";
  CFDictionaryRef v4 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&v38, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef v5 = (__CFString *)v4;
  if (v4)
  {
    CFTypeRef v31 = CFRetain(v4);
    keys = @"PropertyType";
    uint64_t v47 = @"ReadWriteStatus";
    v38 = @"Enumeration";
    v39 = @"ReadWrite";
    values = @"Decimate";
    v55 = @"Average";
    CFArrayRef v6 = CFArrayCreate(v0, (const void **)&values, 2, MEMORY[0x1E4F1D510]);
    CFArrayRef v7 = v6;
    if (v6)
    {
      *(void *)&long long v48 = @"SupportedValueList";
      *(void *)&long long v40 = v6;
      CFDictionaryRef v30 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&v38, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v30)
      {
        CFTypeRef v36 = CFRetain(v5);
        CFTypeRef v35 = CFRetain(v5);
        keys = @"PropertyType";
        uint64_t v47 = @"ReadWriteStatus";
        v38 = @"Enumeration";
        v39 = @"ReadWrite";
        uint64_t v8 = (__CFString *)*MEMORY[0x1E4F24AA0];
        values = (void *)*MEMORY[0x1E4F24AB0];
        v55 = v8;
        CFAllocatorRef v9 = (__CFString *)*MEMORY[0x1E4F24AB8];
        uint64_t v56 = (__CFString *)*MEMORY[0x1E4F24AC8];
        uint64_t v57 = v9;
        uint64_t v10 = *MEMORY[0x1E4F24AC0];
        uint64_t v58 = *MEMORY[0x1E4F24A98];
        uint64_t v59 = v10;
        uint64_t v60 = *MEMORY[0x1E4F24AA8];
        CFArrayRef v11 = CFArrayCreate(v0, (const void **)&values, 7, MEMORY[0x1E4F1D510]);
        if (v11)
        {
          *(void *)&long long v48 = @"SupportedValueList";
          CFArrayRef v33 = v11;
          *(void *)&long long v40 = v11;
          CFDictionaryRef v12 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&v38, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v12)
          {
            CFDictionaryRef v34 = v12;
            keys = @"PropertyType";
            uint64_t v47 = @"ReadWriteStatus";
            v38 = @"Enumeration";
            v39 = @"ReadWrite";
            CFAllocatorRef v13 = (__CFString *)*MEMORY[0x1E4F24BF0];
            values = (void *)*MEMORY[0x1E4F24BE0];
            v55 = v13;
            long long v14 = (__CFString *)*MEMORY[0x1E4F24BD0];
            uint64_t v56 = (__CFString *)*MEMORY[0x1E4F24C08];
            uint64_t v57 = v14;
            uint64_t v15 = *MEMORY[0x1E4F24BF8];
            uint64_t v58 = *MEMORY[0x1E4F24C00];
            uint64_t v59 = v15;
            uint64_t v16 = *MEMORY[0x1E4F24BE8];
            uint64_t v60 = *MEMORY[0x1E4F24BD8];
            uint64_t v61 = v16;
            CFArrayRef v17 = CFArrayCreate(v0, (const void **)&values, 8, MEMORY[0x1E4F1D510]);
            if (v17)
            {
              *(void *)&long long v48 = @"SupportedValueList";
              CFArrayRef v32 = v17;
              *(void *)&long long v40 = v17;
              CFDictionaryRef v18 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&v38, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (v18)
              {
                keys = @"PropertyType";
                uint64_t v47 = @"ReadWriteStatus";
                v38 = @"Enumeration";
                v39 = @"ReadWrite";
                CFArrayRef YCbCrMatricesArray = vtPixelTransferSessionCreateYCbCrMatricesArray();
                CFArrayRef v20 = YCbCrMatricesArray;
                if (YCbCrMatricesArray)
                {
                  *(void *)&long long v48 = @"SupportedValueList";
                  *(void *)&long long v40 = YCbCrMatricesArray;
                  CFDictionaryRef v21 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&v38, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  if (v21)
                  {
                    keys = @"ReadWriteStatus";
                    v38 = @"ReadWrite";
                    CFDictionaryRef v22 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&v38, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    uint64_t v23 = v31;
                    if (v22)
                    {
                      CFDictionaryRef v24 = CFDictionaryCreate(v0, (const void **)&keys, (const void **)&v38, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                      CFDictionaryRef v25 = v24;
                      if (v24)
                      {
                        keys = @"ScalingMode";
                        uint64_t v47 = @"DestinationPixelAspectRatio";
                        v38 = cf;
                        v39 = v5;
                        *(void *)&long long v48 = @"DestinationCleanAperture";
                        *((void *)&v48 + 1) = @"DownsamplingMode";
                        *(void *)&long long v40 = v31;
                        *((void *)&v40 + 1) = v30;
                        *(void *)&long long v49 = @"SourceCropRectangle";
                        *((void *)&v49 + 1) = @"DestinationRectangle";
                        *(void *)&long long v41 = v36;
                        *((void *)&v41 + 1) = v35;
                        *(void *)&long long v50 = @"DestinationYCbCrMatrix";
                        *((void *)&v50 + 1) = @"DestinationColorPrimaries";
                        *(void *)&long long v42 = v21;
                        *((void *)&v42 + 1) = v34;
                        uint64_t v26 = *MEMORY[0x1E4F24B70];
                        *(void *)&long long v51 = @"DestinationTransferFunction";
                        *((void *)&v51 + 1) = v26;
                        *(void *)&long long v43 = v18;
                        *((void *)&v43 + 1) = v22;
                        *(void *)&long long v52 = @"Label";
                        *(void *)&long long v44 = v24;
                        CFAllocatorRef v27 = v0;
                        CFDictionaryRef v28 = v30;
                        sVTPixelTransferSessionSupportedPropertyDictionary = (uint64_t)CFDictionaryCreate(v27, (const void **)&keys, (const void **)&v38, 11, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                        if (sVTPixelTransferSessionSupportedPropertyDictionary) {
                          goto LABEL_30;
                        }
                        goto LABEL_29;
                      }
                    }
                    else
                    {
                      CFDictionaryRef v25 = 0;
                    }
                    goto LABEL_28;
                  }
                  CFDictionaryRef v22 = 0;
LABEL_27:
                  CFDictionaryRef v25 = 0;
                  uint64_t v23 = v31;
LABEL_28:
                  CFDictionaryRef v28 = v30;
                  goto LABEL_29;
                }
                CFDictionaryRef v22 = 0;
LABEL_26:
                CFDictionaryRef v21 = 0;
                goto LABEL_27;
              }
LABEL_25:
              CFDictionaryRef v22 = 0;
              CFArrayRef v20 = 0;
              goto LABEL_26;
            }
            FigSignalErrorAt();
          }
          else
          {
            CFDictionaryRef v34 = 0;
          }
        }
        else
        {
          FigSignalErrorAt();
          CFArrayRef v33 = 0;
          CFDictionaryRef v34 = 0;
        }
        CFDictionaryRef v18 = 0;
        CFArrayRef v32 = 0;
        goto LABEL_25;
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    CFDictionaryRef v28 = 0;
    CFTypeRef v35 = 0;
    CFTypeRef v36 = 0;
    CFArrayRef v33 = 0;
    CFDictionaryRef v34 = 0;
    CFDictionaryRef v18 = 0;
    CFArrayRef v32 = 0;
    CFDictionaryRef v22 = 0;
    CFArrayRef v20 = 0;
    CFDictionaryRef v21 = 0;
    CFDictionaryRef v25 = 0;
    uint64_t v23 = v31;
  }
  else
  {
    uint64_t v23 = 0;
    CFArrayRef v7 = 0;
    CFDictionaryRef v28 = 0;
    CFTypeRef v35 = 0;
    CFTypeRef v36 = 0;
    CFArrayRef v33 = 0;
    CFDictionaryRef v34 = 0;
    CFDictionaryRef v18 = 0;
    CFArrayRef v32 = 0;
    CFDictionaryRef v22 = 0;
    CFArrayRef v20 = 0;
    CFDictionaryRef v21 = 0;
    CFDictionaryRef v25 = 0;
  }
LABEL_29:
  FigSignalErrorAt();
LABEL_30:
  CFRelease(v2);
  CFRelease(cf);
  if (v5) {
    CFRelease(v5);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v25)
  {
    CFArrayRef v29 = v25;
    goto LABEL_58;
  }
}

uint64_t _VTPixelTransferSessionSetProperty(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFDictionaryRef theDict = 0;
  if (!*(unsigned char *)(a1 + 16))
  {
    VTMetalTransferSessionCopySupportedPropertyDictionary(*(void *)(a1 + 1160), (CFTypeRef *)&theDict);
    if (CFEqual(a2, @"DestinationCleanAperture"))
    {
      CFArrayRef v7 = *(const void **)(a1 + 152);
      if (v7) {
        CFRelease(v7);
      }
      *(void *)(a1 + 152) = a3;
      if (!a3) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    if (CFEqual(a2, @"DestinationPixelAspectRatio"))
    {
      uint64_t v8 = *(const void **)(a1 + 160);
      if (v8) {
        CFRelease(v8);
      }
      *(void *)(a1 + 160) = a3;
      if (!a3) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    if (CFEqual(a2, @"ScalingMode"))
    {
      CFAllocatorRef v9 = *(const void **)(a1 + 48);
      if (v9) {
        CFRelease(v9);
      }
      *(void *)(a1 + 48) = a3;
      if (!a3) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    if (CFEqual(a2, @"DownsamplingMode"))
    {
      uint64_t v10 = *(const void **)(a1 + 808);
      if (v10) {
        CFRelease(v10);
      }
      *(void *)(a1 + 808) = a3;
      if (!a3) {
        goto LABEL_25;
      }
LABEL_24:
      CFRetain(a3);
LABEL_25:
      uint64_t v11 = 0;
LABEL_26:
      uint64_t v12 = 0;
      goto LABEL_27;
    }
    if (CFEqual(a2, @"SourceCropRectangle"))
    {
      if (!a3)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        *(int64x2_t *)(a1 + 72) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
        goto LABEL_27;
      }
      CFTypeID v18 = CFGetTypeID(a3);
      if (v18 == CFDictionaryGetTypeID())
      {
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        *(int64x2_t *)(a1 + 72) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
        memset(&v106, 0, sizeof(v106));
        if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)a3, &v106))
        {
          CGRect v106 = CGRectStandardize(v106);
          CGRect v109 = CGRectIntegral(v106);
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          *(void *)(a1 + 88) = (uint64_t)v109.origin.x;
          *(void *)(a1 + 96) = (uint64_t)v109.origin.y;
          *(void *)(a1 + 72) = (uint64_t)v109.size.width;
          *(void *)(a1 + 80) = (uint64_t)v109.size.height;
          goto LABEL_27;
        }
      }
      goto LABEL_363;
    }
    if (CFEqual(a2, @"DestinationRectangle"))
    {
      if (!a3)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        *(void *)(a1 + 136) = 0;
        *(void *)(a1 + 144) = 0;
        *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
        goto LABEL_27;
      }
      CFTypeID v19 = CFGetTypeID(a3);
      if (v19 == CFDictionaryGetTypeID())
      {
        *(void *)(a1 + 136) = 0;
        *(void *)(a1 + 144) = 0;
        *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
        memset(&v106, 0, sizeof(v106));
        if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)a3, &v106))
        {
          CGRect v106 = CGRectStandardize(v106);
          CGRect v110 = CGRectIntegral(v106);
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          *(void *)(a1 + 136) = (uint64_t)v110.origin.x;
          *(void *)(a1 + 144) = (uint64_t)v110.origin.y;
          *(void *)(a1 + 120) = (uint64_t)v110.size.width;
          *(void *)(a1 + 128) = (uint64_t)v110.size.height;
          goto LABEL_27;
        }
      }
      goto LABEL_363;
    }
    if (CFEqual(a2, @"EnableHardwareAcceleratedTransfer"))
    {
      if (!a3 || (const void *)*MEMORY[0x1E4F1D260] == a3)
      {
        if (initDefaultsCommon_onceToken != -1) {
          dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
        }
        if (sAllowHardwareTransferSession) {
          CFArrayRef v20 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        else {
          CFArrayRef v20 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        a3 = *v20;
      }
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        int Value = CFBooleanGetValue((CFBooleanRef)a3);
        if (Value == *(unsigned __int8 *)(a1 + 769)) {
          goto LABEL_25;
        }
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        *(unsigned char *)(a1 + 769) = Value;
        goto LABEL_62;
      }
LABEL_363:
      uint64_t v87 = FigSignalErrorAt();
      uint64_t v11 = v87;
LABEL_364:
      uint64_t v12 = v87;
      goto LABEL_27;
    }
    if (CFEqual(a2, @"EnableHighSpeedTransfer"))
    {
      if ((const void *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
        a3 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFTypeID v24 = CFBooleanGetTypeID();
      if (v24 != CFGetTypeID(a3)) {
        goto LABEL_363;
      }
      int v25 = CFBooleanGetValue((CFBooleanRef)a3);
      if (v25 == *(unsigned __int8 *)(a1 + 770)) {
        goto LABEL_25;
      }
      *(unsigned char *)(a1 + 770) = v25;
      goto LABEL_86;
    }
    if (CFEqual(a2, @"DisableDither"))
    {
      if ((const void *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
        a3 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFTypeID v27 = CFBooleanGetTypeID();
      if (v27 != CFGetTypeID(a3)) {
        goto LABEL_363;
      }
      if (CFBooleanGetValue((CFBooleanRef)a3) == *(unsigned __int8 *)(a1 + 784)) {
        goto LABEL_25;
      }
      *(unsigned char *)(a1 + 784) = CFBooleanGetValue((CFBooleanRef)a3);
      goto LABEL_86;
    }
    if (CFEqual(a2, @"UseOptimalMSRCoefficients"))
    {
      if (!a3) {
        goto LABEL_363;
      }
      CFTypeID v28 = CFBooleanGetTypeID();
      if (v28 != CFGetTypeID(a3)) {
        goto LABEL_363;
      }
      *(unsigned char *)(a1 + 785) = CFBooleanGetValue((CFBooleanRef)a3);
LABEL_86:
      vtPixelTransferSessionUpdateTransferOptions(a1);
      goto LABEL_25;
    }
    if (CFEqual(a2, @"EnableHistogram"))
    {
      if ((const void *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
        a3 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      if (!a3) {
        goto LABEL_363;
      }
      CFTypeID v30 = CFBooleanGetTypeID();
      if (v30 != CFGetTypeID(a3)) {
        goto LABEL_363;
      }
      if (CFBooleanGetValue((CFBooleanRef)a3) == *(unsigned __int8 *)(a1 + 789)) {
        goto LABEL_25;
      }
      *(unsigned char *)(a1 + 789) = CFBooleanGetValue((CFBooleanRef)a3);
      goto LABEL_86;
    }
    if (CFEqual(a2, @"HistogramRectangle"))
    {
      memset(&v106, 0, sizeof(v106));
      if (a3)
      {
        CFTypeID v31 = CFDictionaryGetTypeID();
        if (v31 != CFGetTypeID(a3) || !CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)a3, &v106)) {
          goto LABEL_363;
        }
        CFArrayRef v32 = *(const void **)(a1 + 800);
        *(void *)(a1 + 800) = a3;
        goto LABEL_102;
      }
      CFArrayRef v32 = *(const void **)(a1 + 800);
      *(void *)(a1 + 800) = 0;
      if (!v32) {
        goto LABEL_86;
      }
      goto LABEL_117;
    }
    if (CFEqual(a2, @"EnableGPUAcceleratedTransfer"))
    {
      if (!a3 || (const void *)*MEMORY[0x1E4F1D260] == a3)
      {
        if (initDefaultsCommon_onceToken != -1) {
          dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
        }
        if (sAllowMetalTransferSession) {
          CFArrayRef v33 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        else {
          CFArrayRef v33 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        a3 = *v33;
      }
      CFTypeID v34 = CFBooleanGetTypeID();
      if (v34 != CFGetTypeID(a3)) {
        goto LABEL_363;
      }
      int v35 = CFBooleanGetValue((CFBooleanRef)a3);
      if (v35 == *(unsigned __int8 *)(a1 + 786)) {
        goto LABEL_25;
      }
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(unsigned char *)(a1 + 786) = v35;
      goto LABEL_62;
    }
    if (CFEqual(a2, @"EnableSoftwareTransfer"))
    {
      if (!a3 || (const void *)*MEMORY[0x1E4F1D260] == a3)
      {
        if (initDefaultsCommon_onceToken != -1) {
          dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
        }
        CFTypeRef v36 = (const void **)(sAllowSoftwareTransferSession ? MEMORY[0x1E4F1CFD0] : MEMORY[0x1E4F1CFC8]);
        a3 = *v36;
        if (!*v36) {
          goto LABEL_363;
        }
      }
      CFTypeID v37 = CFBooleanGetTypeID();
      if (v37 != CFGetTypeID(a3)) {
        goto LABEL_363;
      }
      int v38 = CFBooleanGetValue((CFBooleanRef)a3);
      if (v38 == *(unsigned __int8 *)(a1 + 788)) {
        goto LABEL_25;
      }
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(unsigned char *)(a1 + 788) = v38;
      goto LABEL_62;
    }
    if (CFEqual(a2, @"SetGPUPriorityLow"))
    {
      if (!a3 || (const void *)*MEMORY[0x1E4F1D260] == a3)
      {
        if (initDefaultsCommon_onceToken != -1) {
          dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
        }
        if (sAllowPixelTransferChain) {
          v39 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        else {
          v39 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        a3 = *v39;
      }
      CFTypeID v40 = CFBooleanGetTypeID();
      if (v40 != CFGetTypeID(a3)) {
        goto LABEL_363;
      }
      int v41 = CFBooleanGetValue((CFBooleanRef)a3);
      if (v41 == *(unsigned __int8 *)(a1 + 787)) {
        goto LABEL_25;
      }
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(unsigned char *)(a1 + 787) = v41;
      goto LABEL_62;
    }
    if (CFEqual(a2, @"DestinationColorPrimaries"))
    {
      if (a3)
      {
        CFTypeID v42 = CFStringGetTypeID();
        if (v42 != CFGetTypeID(a3)) {
          goto LABEL_363;
        }
      }
      if (*(unsigned char *)(a1 + 1188))
      {
        long long v43 = *(const void **)(a1 + 1080);
        if (v43)
        {
          CFRelease(v43);
          *(void *)(a1 + 1080) = 0;
        }
        long long v44 = *(const void **)(a1 + 1088);
        if (v44)
        {
          CFRelease(v44);
          *(void *)(a1 + 1088) = 0;
        }
        *(unsigned char *)(a1 + 1188) = 0;
      }
      uint64_t v11 = *(void *)(a1 + 1080);
      *(void *)(a1 + 1080) = a3;
      if (!a3) {
        goto LABEL_176;
      }
      goto LABEL_175;
    }
    if (CFEqual(a2, @"DestinationTransferFunction"))
    {
      if (a3)
      {
        CFTypeID v45 = CFStringGetTypeID();
        if (v45 != CFGetTypeID(a3)) {
          goto LABEL_363;
        }
      }
      if (*(unsigned char *)(a1 + 1188))
      {
        v46 = *(const void **)(a1 + 1080);
        if (v46)
        {
          CFRelease(v46);
          *(void *)(a1 + 1080) = 0;
        }
        uint64_t v47 = *(const void **)(a1 + 1088);
        if (v47) {
          CFRelease(v47);
        }
        uint64_t v11 = 0;
        *(unsigned char *)(a1 + 1188) = 0;
      }
      else
      {
        uint64_t v11 = *(void *)(a1 + 1088);
      }
      *(void *)(a1 + 1088) = a3;
      if (!a3) {
        goto LABEL_176;
      }
      goto LABEL_175;
    }
    if (CFEqual(a2, @"DestinationICCProfile"))
    {
      if (a3)
      {
        CFTypeID v48 = CFDataGetTypeID();
        if (v48 != CFGetTypeID(a3)) {
          goto LABEL_363;
        }
      }
      if (*(unsigned char *)(a1 + 1188))
      {
        long long v49 = *(const void **)(a1 + 1080);
        if (v49)
        {
          CFRelease(v49);
          *(void *)(a1 + 1080) = 0;
        }
        long long v50 = *(const void **)(a1 + 1088);
        if (v50)
        {
          CFRelease(v50);
          *(void *)(a1 + 1088) = 0;
        }
        *(unsigned char *)(a1 + 1188) = 0;
      }
      uint64_t v11 = *(void *)(a1 + 1008);
      *(void *)(a1 + 1008) = a3;
      if (!a3) {
        goto LABEL_176;
      }
      goto LABEL_175;
    }
    if (CFEqual(a2, @"DestinationYCbCrMatrix"))
    {
      if (!a3)
      {
        uint64_t v11 = *(void *)(a1 + 1072);
        *(void *)(a1 + 1072) = 0;
        if (!v11) {
          goto LABEL_26;
        }
LABEL_177:
        CFRelease((CFTypeRef)v11);
        goto LABEL_25;
      }
      CFTypeID v51 = CFStringGetTypeID();
      if (v51 != CFGetTypeID(a3)) {
        goto LABEL_363;
      }
      uint64_t v11 = *(void *)(a1 + 1072);
      *(void *)(a1 + 1072) = a3;
LABEL_175:
      CFRetain(a3);
LABEL_176:
      if (!v11) {
        goto LABEL_26;
      }
      goto LABEL_177;
    }
    if (CFEqual(a2, @"WriteBlackPixelsOutsideDestRect"))
    {
      if (a3)
      {
        CFTypeID v52 = CFBooleanGetTypeID();
        if (v52 == CFGetTypeID(a3))
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          *(unsigned char *)(a1 + 1136) = CFBooleanGetValue((CFBooleanRef)a3) == 0;
          goto LABEL_27;
        }
      }
      goto LABEL_363;
    }
    if (CFEqual(a2, @"RealTime"))
    {
      if (a3)
      {
        CFTypeID v53 = CFGetTypeID(a3);
        if (v53 != CFBooleanGetTypeID()) {
          goto LABEL_363;
        }
        CFArrayRef v32 = *(const void **)(a1 + 1128);
        *(void *)(a1 + 1128) = a3;
LABEL_102:
        CFRetain(a3);
        if (!v32) {
          goto LABEL_86;
        }
        goto LABEL_117;
      }
      CFArrayRef v32 = *(const void **)(a1 + 1128);
      *(void *)(a1 + 1128) = 0;
      if (!v32) {
        goto LABEL_86;
      }
LABEL_117:
      CFRelease(v32);
      goto LABEL_86;
    }
    if (CFEqual(a2, @"ClientPID"))
    {
      if (a3)
      {
        CFTypeID v54 = CFGetTypeID(a3);
        if (v54 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(a1 + 1124));
          goto LABEL_25;
        }
      }
      goto LABEL_363;
    }
    if (CFEqual(a2, @"ForceDisableVectorInstructions"))
    {
      if ((const void *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
        a3 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFTypeID v56 = CFBooleanGetTypeID();
      if (v56 != CFGetTypeID(a3)) {
        goto LABEL_363;
      }
      int v57 = CFBooleanGetValue((CFBooleanRef)a3);
      if (v57 == *(unsigned __int8 *)(a1 + 208)) {
        goto LABEL_25;
      }
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(unsigned char *)(a1 + 208) = v57;
      goto LABEL_62;
    }
    if (CFEqual(a2, @"ForceSingleThreaded"))
    {
      if ((const void *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
        a3 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFTypeID v59 = CFBooleanGetTypeID();
      if (v59 != CFGetTypeID(a3)) {
        goto LABEL_363;
      }
      int v60 = CFBooleanGetValue((CFBooleanRef)a3);
      if (v60 == *(unsigned __int8 *)(a1 + 209)) {
        goto LABEL_25;
      }
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(unsigned char *)(a1 + 209) = v60;
      goto LABEL_62;
    }
    if (CFEqual(a2, @"PQEOTFOpticalScale"))
    {
      uint64_t v61 = *(const void **)(a1 + 1160);
      if (v61) {
        VTSessionSetProperty(v61, a2, a3);
      }
      uint64_t v62 = *(__CFDictionary **)(a1 + 1176);
      if (v62)
      {
        if (a3)
        {
          CFDictionarySetValue(v62, a2, a3);
LABEL_229:
          CFTypeID v65 = CFGetTypeID(a3);
          if (v65 != CFNumberGetTypeID()) {
            goto LABEL_363;
          }
          if (FigCFEqual()) {
            goto LABEL_25;
          }
          uint64_t v66 = *(const void **)(a1 + 1192);
          *(void *)(a1 + 1192) = a3;
          goto LABEL_275;
        }
        CFDictionaryRemoveValue(v62, a2);
      }
      else if (a3)
      {
        goto LABEL_229;
      }
      uint64_t v67 = *(const void **)(a1 + 1192);
      if (v67)
      {
        CFRelease(v67);
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        a3 = 0;
        *(void *)(a1 + 1192) = 0;
        goto LABEL_62;
      }
LABEL_281:
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      a3 = 0;
      goto LABEL_27;
    }
    if (CFEqual(a2, @"PQInvEOTFOpticalScale"))
    {
      CFDictionaryRef v63 = *(const void **)(a1 + 1160);
      if (v63) {
        VTSessionSetProperty(v63, a2, a3);
      }
      v64 = *(__CFDictionary **)(a1 + 1176);
      if (v64)
      {
        if (a3)
        {
          CFDictionarySetValue(v64, a2, a3);
LABEL_242:
          CFTypeID v70 = CFGetTypeID(a3);
          if (v70 != CFNumberGetTypeID()) {
            goto LABEL_363;
          }
          if (FigCFEqual()) {
            goto LABEL_25;
          }
          uint64_t v66 = *(const void **)(a1 + 1200);
          *(void *)(a1 + 1200) = a3;
          goto LABEL_275;
        }
        CFDictionaryRemoveValue(v64, a2);
      }
      else if (a3)
      {
        goto LABEL_242;
      }
      CFDictionaryRef v71 = *(const void **)(a1 + 1200);
      if (v71)
      {
        CFRelease(v71);
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        a3 = 0;
        *(void *)(a1 + 1200) = 0;
        goto LABEL_62;
      }
      goto LABEL_281;
    }
    if (CFEqual(a2, @"HLGOETFOpticalScale"))
    {
      v68 = *(const void **)(a1 + 1160);
      if (v68) {
        VTSessionSetProperty(v68, a2, a3);
      }
      uint64_t v69 = *(__CFDictionary **)(a1 + 1176);
      if (v69)
      {
        if (a3)
        {
          CFDictionarySetValue(v69, a2, a3);
LABEL_255:
          CFTypeID v74 = CFGetTypeID(a3);
          if (v74 != CFNumberGetTypeID()) {
            goto LABEL_363;
          }
          if (FigCFEqual()) {
            goto LABEL_25;
          }
          uint64_t v66 = *(const void **)(a1 + 1208);
          *(void *)(a1 + 1208) = a3;
          goto LABEL_275;
        }
        CFDictionaryRemoveValue(v69, a2);
      }
      else if (a3)
      {
        goto LABEL_255;
      }
      unsigned int v75 = *(const void **)(a1 + 1208);
      if (v75)
      {
        CFRelease(v75);
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        a3 = 0;
        *(void *)(a1 + 1208) = 0;
        goto LABEL_62;
      }
      goto LABEL_281;
    }
    if (!CFEqual(a2, @"HLGInvOETFOpticalScale"))
    {
      if (CFEqual(a2, @"AllowLowQualityScaling"))
      {
        if ((const void *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
          a3 = (const void *)*MEMORY[0x1E4F1CFC8];
        }
        if (!a3) {
          goto LABEL_363;
        }
        CFTypeID v77 = CFBooleanGetTypeID();
        if (v77 != CFGetTypeID(a3)) {
          goto LABEL_363;
        }
        int v78 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v78 == *(unsigned __int8 *)(a1 + 210)) {
          goto LABEL_25;
        }
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        *(unsigned char *)(a1 + 210) = v78;
        goto LABEL_62;
      }
      if (CFEqual(a2, @"vImageFlags"))
      {
        if (!a3 || (const void *)*MEMORY[0x1E4F1D260] == a3)
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          *(void *)(a1 + 1144) = 0;
          goto LABEL_27;
        }
        CFTypeID v81 = CFNumberGetTypeID();
        if (v81 == CFGetTypeID(a3))
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          *(void *)(a1 + 1144) = FigCFNumberGetUInt64();
          goto LABEL_27;
        }
        goto LABEL_363;
      }
      if (CFEqual(a2, @"AllowPixelTransferChain"))
      {
        if (!a3 || (const void *)*MEMORY[0x1E4F1D260] == a3)
        {
          if (initDefaultsCommon_onceToken != -1) {
            dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
          }
          if (sAllowPixelTransferChain) {
            v82 = (const void **)MEMORY[0x1E4F1CFD0];
          }
          else {
            v82 = (const void **)MEMORY[0x1E4F1CFC8];
          }
          a3 = *v82;
        }
        CFTypeID v83 = CFBooleanGetTypeID();
        if (v83 != CFGetTypeID(a3)) {
          goto LABEL_363;
        }
        int v84 = CFBooleanGetValue((CFBooleanRef)a3);
        v85 = *(const void **)(a1 + 32);
        if (v84)
        {
          if (v85) {
            goto LABEL_25;
          }
          CFAllocatorRef v86 = CFGetAllocator((CFTypeRef)a1);
          uint64_t v87 = VTPixelTransferChainCreate((uint64_t)v86, (uint64_t *)(a1 + 32));
          uint64_t v11 = v87;
          *(unsigned char *)(a1 + 744) = 1;
          goto LABEL_364;
        }
        if (!v85) {
          goto LABEL_25;
        }
        CFRelease(v85);
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        *(void *)(a1 + 32) = 0;
        goto LABEL_62;
      }
      if (CFEqual(a2, @"AllowPixelTransferGraph"))
      {
        if (!a3 || (const void *)*MEMORY[0x1E4F1D260] == a3)
        {
          if (initDefaultsCommon_onceToken != -1) {
            dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
          }
          if (sAllowPixelTransferGraph) {
            v88 = (const void **)MEMORY[0x1E4F1CFD0];
          }
          else {
            v88 = (const void **)MEMORY[0x1E4F1CFC8];
          }
          a3 = *v88;
        }
        CFTypeID v89 = CFBooleanGetTypeID();
        if (v89 != CFGetTypeID(a3)) {
          goto LABEL_363;
        }
        int v90 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v90 == *(unsigned __int8 *)(a1 + 40)) {
          goto LABEL_25;
        }
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        *(unsigned char *)(a1 + 40) = v90;
        goto LABEL_62;
      }
      if (CFEqual(a2, @"AllowFallbacks"))
      {
        if (!a3 || (const void *)*MEMORY[0x1E4F1D260] == a3)
        {
          if (initDefaultsCommon_onceToken != -1) {
            dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
          }
          if (sAllowPixelTransferFallbacks) {
            v91 = (const void **)MEMORY[0x1E4F1CFD0];
          }
          else {
            v91 = (const void **)MEMORY[0x1E4F1CFC8];
          }
          a3 = *v91;
        }
        CFTypeID v92 = CFBooleanGetTypeID();
        if (v92 != CFGetTypeID(a3)) {
          goto LABEL_363;
        }
        int v93 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v93 == *(unsigned __int8 *)(a1 + 41)) {
          goto LABEL_25;
        }
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        *(unsigned char *)(a1 + 41) = v93;
        goto LABEL_62;
      }
      if (!CFEqual(a2, @"ReducedPrecisionFractionalOffsets"))
      {
        if (!CFEqual(a2, @"Convert10BitHDRToSDRFor8BitDestinationWithUnspecifiedColorProperties"))
        {
          if (!CFEqual(a2, @"RequireDeviceRegistryID"))
          {
            if (CFEqual(a2, @"Label"))
            {
              if (a3 && !FigCFEqual())
              {
                CFTypeID v104 = CFGetTypeID(a3);
                if (v104 != CFStringGetTypeID())
                {
                  uint64_t v17 = FigSignalErrorAt();
                  goto LABEL_35;
                }
                v105 = *(const void **)(a1 + 24);
                *(void *)(a1 + 24) = a3;
                CFRetain(a3);
                if (v105) {
                  CFRelease(v105);
                }
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 1176), a2, a3);
                long long v14 = *(const void **)(a1 + 1160);
                if (v14) {
                  goto LABEL_33;
                }
              }
              else
              {
                v102 = *(const void **)(a1 + 24);
                if (v102)
                {
                  CFRelease(v102);
                  *(void *)(a1 + 24) = 0;
                }
                CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 1176), a2);
                long long v14 = *(const void **)(a1 + 1160);
                if (v14)
                {
                  CFStringRef v15 = a2;
                  uint64_t v16 = 0;
                  goto LABEL_34;
                }
              }
              uint64_t v11 = 0;
LABEL_36:
              if (theDict) {
                CFRelease(theDict);
              }
              return v11;
            }
            uint64_t v12 = 0;
            uint64_t v11 = 4294954396;
LABEL_27:
            if (!theDict) {
              return v11;
            }
            if (CFDictionaryContainsKey(theDict, a2))
            {
              CFAllocatorRef v13 = *(__CFDictionary **)(a1 + 1176);
              if (a3) {
                CFDictionarySetValue(v13, a2, a3);
              }
              else {
                CFDictionaryRemoveValue(v13, a2);
              }
              long long v14 = *(const void **)(a1 + 1160);
              uint64_t v11 = v12;
              if (v14)
              {
LABEL_33:
                CFStringRef v15 = a2;
                uint64_t v16 = a3;
LABEL_34:
                uint64_t v17 = VTSessionSetProperty(v14, v15, v16);
LABEL_35:
                uint64_t v11 = v17;
                goto LABEL_36;
              }
            }
            goto LABEL_36;
          }
          if (a3 && !FigCFEqual())
          {
            CFTypeID v103 = CFGetTypeID(a3);
            if (v103 != CFNumberGetTypeID()) {
              goto LABEL_363;
            }
            if (FigCFNumberGetUInt64())
            {
              uint64_t v11 = 0;
              uint64_t v12 = 0;
              *(unsigned char *)(a1 + 1185) = 1;
              goto LABEL_27;
            }
          }
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          *(unsigned char *)(a1 + 1185) = 0;
          goto LABEL_27;
        }
        if ((const void *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
          a3 = (const void *)*MEMORY[0x1E4F1CFC8];
        }
        CFTypeID v100 = CFBooleanGetTypeID();
        if (v100 != CFGetTypeID(a3)) {
          goto LABEL_363;
        }
        int v101 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v101 == *(unsigned __int8 *)(a1 + 1120)) {
          goto LABEL_25;
        }
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        *(unsigned char *)(a1 + 1120) = v101;
LABEL_62:
        *(unsigned char *)(a1 + 744) = 1;
        goto LABEL_27;
      }
      if ((const void *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
        a3 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      if (!a3) {
        goto LABEL_363;
      }
      CFTypeID v95 = CFGetTypeID(a3);
      if (v95 != CFBooleanGetTypeID()) {
        goto LABEL_363;
      }
      int v96 = CFBooleanGetValue((CFBooleanRef)a3);
      if (v96 == *(unsigned __int8 *)(a1 + 1187)) {
        goto LABEL_25;
      }
      int v97 = v96;
      IOSurfaceAcceleratorCapabilityFractionalCMVideoDimensions Dimensions = FigGetIOSurfaceAcceleratorCapabilityFractionalDimensions();
      if (v97 && !IOSurfaceAcceleratorCapabilityFractionalDimensions)
      {
        uint64_t v11 = 4294954394;
        uint64_t v12 = 4294954394;
        goto LABEL_27;
      }
      *(unsigned char *)(a1 + 1187) = v97;
      vtPixelTransferSessionUpdateTransferOptions(a1);
LABEL_277:
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      goto LABEL_62;
    }
    CFNumberRef v72 = *(const void **)(a1 + 1160);
    if (v72) {
      VTSessionSetProperty(v72, a2, a3);
    }
    CFNumberRef v73 = *(__CFDictionary **)(a1 + 1176);
    if (v73)
    {
      if (a3)
      {
        CFDictionarySetValue(v73, a2, a3);
LABEL_272:
        CFTypeID v79 = CFGetTypeID(a3);
        if (v79 != CFNumberGetTypeID()) {
          goto LABEL_363;
        }
        if (FigCFEqual()) {
          goto LABEL_25;
        }
        uint64_t v66 = *(const void **)(a1 + 1216);
        *(void *)(a1 + 1216) = a3;
LABEL_275:
        CFRetain(a3);
        if (v66) {
          CFRelease(v66);
        }
        goto LABEL_277;
      }
      CFDictionaryRemoveValue(v73, a2);
    }
    else if (a3)
    {
      goto LABEL_272;
    }
    CFTypeRef v80 = *(const void **)(a1 + 1216);
    if (v80)
    {
      CFRelease(v80);
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      a3 = 0;
      *(void *)(a1 + 1216) = 0;
      goto LABEL_62;
    }
    goto LABEL_281;
  }

  return FigSignalErrorAt();
}

uint64_t VTPixelTransferSessionCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, CFDictionaryRef *a4)
{
  if (a1)
  {
    if (FigAtomicIncrement32() != 1)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v10 = _VTPixelTransferSessionCopyProperty(a1, cf1, a3, a4);
    FigAtomicDecrement32();
    return v10;
  }
  else
  {
    return _VTPixelTransferSessionCopyProperty(0, cf1, a3, a4);
  }
}

uint64_t _VTPixelTransferSessionCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, CFDictionaryRef *a4)
{
  *a4 = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, @"DestinationCleanAperture"))
  {
    uint64_t result = *(void *)(a1 + 152);
    if (!result) {
      return result;
    }
    goto LABEL_16;
  }
  if (CFEqual(cf1, @"DestinationPixelAspectRatio"))
  {
    uint64_t result = *(void *)(a1 + 160);
    if (!result) {
      return result;
    }
    goto LABEL_16;
  }
  if (CFEqual(cf1, @"ScalingMode"))
  {
    uint64_t result = *(void *)(a1 + 48);
    if (!result) {
      return result;
    }
    goto LABEL_16;
  }
  if (CFEqual(cf1, @"DownsamplingMode"))
  {
    uint64_t result = *(void *)(a1 + 808);
    if (result)
    {
LABEL_16:
      uint64_t UInt64 = (uint64_t)CFRetain((CFTypeRef)result);
LABEL_17:
      CFDictionaryRef DictionaryRepresentation = (CFDictionaryRef)UInt64;
LABEL_18:
      uint64_t result = 0;
      *a4 = DictionaryRepresentation;
      return result;
    }
LABEL_28:
    CFDictionaryRef DictionaryRepresentation = 0;
    goto LABEL_18;
  }
  if (CFEqual(cf1, @"SourceCropRectangle"))
  {
    uint64_t v11 = *(void *)(a1 + 88);
    uint64_t v12 = *(void *)(a1 + 96);
    uint64_t v14 = *(void *)(a1 + 72);
    uint64_t v13 = *(void *)(a1 + 80);
    if (v11) {
      goto LABEL_29;
    }
LABEL_25:
    if (!v12 && v14 == 0x7FFFFFFFFFFFFFFFLL && v13 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_28;
    }
LABEL_29:
    v25.origin.x = (double)v11;
    v25.origin.y = (double)v12;
    v25.size.unint64_t width = (double)v14;
    v25.size.height = (double)v13;
    CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v25);
    if (DictionaryRepresentation) {
      goto LABEL_18;
    }
    uint64_t result = FigSignalErrorAt();
    if (result) {
      return result;
    }
    goto LABEL_28;
  }
  if (CFEqual(cf1, @"DestinationRectangle"))
  {
    uint64_t v11 = *(void *)(a1 + 136);
    uint64_t v12 = *(void *)(a1 + 144);
    uint64_t v14 = *(void *)(a1 + 120);
    uint64_t v13 = *(void *)(a1 + 128);
    if (v11) {
      goto LABEL_29;
    }
    goto LABEL_25;
  }
  if (CFEqual(cf1, @"EnableHardwareAcceleratedTransfer"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    int v16 = *(unsigned __int8 *)(a1 + 769);
LABEL_48:
    uint64_t v17 = (uint64_t *)MEMORY[0x1E4F1CFC8];
LABEL_49:
    BOOL v18 = v16 == 0;
    goto LABEL_50;
  }
  if (CFEqual(cf1, @"EnableHighSpeedTransfer"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    int v16 = *(unsigned __int8 *)(a1 + 770);
    goto LABEL_48;
  }
  if (CFEqual(cf1, @"DisableDither"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    int v16 = *(unsigned __int8 *)(a1 + 784);
    goto LABEL_48;
  }
  if (CFEqual(cf1, @"UseOptimalMSRCoefficients"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    int v16 = *(unsigned __int8 *)(a1 + 785);
    goto LABEL_48;
  }
  if (CFEqual(cf1, @"EnableHistogram"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    int v16 = *(unsigned __int8 *)(a1 + 789);
    goto LABEL_48;
  }
  if (CFEqual(cf1, @"EnableGPUAcceleratedTransfer"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    int v16 = *(unsigned __int8 *)(a1 + 786);
    goto LABEL_48;
  }
  if (CFEqual(cf1, @"EnableSoftwareTransfer"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    int v16 = *(unsigned __int8 *)(a1 + 788);
    goto LABEL_48;
  }
  if (CFEqual(cf1, @"SetGPUPriorityLow"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    int v16 = *(unsigned __int8 *)(a1 + 787);
    goto LABEL_48;
  }
  if (CFEqual(cf1, @"DestinationColorPrimaries"))
  {
    uint64_t result = *(void *)(a1 + 1080);
    if (result) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
  if (CFEqual(cf1, @"DestinationTransferFunction"))
  {
    uint64_t result = *(void *)(a1 + 1088);
    if (result) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
  if (CFEqual(cf1, @"DestinationICCProfile"))
  {
    uint64_t result = *(void *)(a1 + 1008);
    if (result) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
  if (CFEqual(cf1, @"DestinationYCbCrMatrix"))
  {
    uint64_t result = *(void *)(a1 + 1072);
    if (result) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
  if (CFEqual(cf1, @"WriteBlackPixelsOutsideDestRect"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFC8];
    int v16 = *(unsigned __int8 *)(a1 + 1136);
    uint64_t v17 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    goto LABEL_49;
  }
  if (CFEqual(cf1, @"RealTime"))
  {
    uint64_t result = *(void *)(a1 + 1128);
    if (result) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
  if (CFEqual(cf1, @"ForceDisableVectorInstructions"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    int v16 = *(unsigned __int8 *)(a1 + 208);
    goto LABEL_48;
  }
  if (CFEqual(cf1, @"ForceSingleThreaded"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    int v16 = *(unsigned __int8 *)(a1 + 209);
    goto LABEL_48;
  }
  if (CFEqual(cf1, @"PQEOTFOpticalScale"))
  {
    uint64_t result = *(void *)(a1 + 1192);
    if (result) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
  if (CFEqual(cf1, @"PQInvEOTFOpticalScale"))
  {
    uint64_t result = *(void *)(a1 + 1200);
    if (result) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
  if (CFEqual(cf1, @"HLGOETFOpticalScale"))
  {
    uint64_t result = *(void *)(a1 + 1208);
    if (result) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
  if (CFEqual(cf1, @"HLGInvOETFOpticalScale"))
  {
    uint64_t result = *(void *)(a1 + 1216);
    if (result) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
  if (CFEqual(cf1, @"AllowLowQualityScaling"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    int v16 = *(unsigned __int8 *)(a1 + 210);
    goto LABEL_48;
  }
  if (CFEqual(cf1, @"vImageFlags"))
  {
    if (*(void *)(a1 + 1144))
    {
      uint64_t UInt64 = FigCFNumberCreateUInt64();
      goto LABEL_17;
    }
    goto LABEL_112;
  }
  if (CFEqual(cf1, @"AllowPixelTransferChain"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    uint64_t v17 = (uint64_t *)MEMORY[0x1E4F1CFC8];
    BOOL v18 = *(void *)(a1 + 32) == 0;
LABEL_50:
    if (v18) {
      CFStringRef v15 = v17;
    }
LABEL_52:
    uint64_t result = *v15;
    goto LABEL_16;
  }
  if (CFEqual(cf1, @"AllowPixelTransferGraph"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    int v16 = *(unsigned __int8 *)(a1 + 40);
    goto LABEL_48;
  }
  if (CFEqual(cf1, @"AllowFallbacks"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    int v16 = *(unsigned __int8 *)(a1 + 41);
    goto LABEL_48;
  }
  if (CFEqual(cf1, @"ReducedPrecisionFractionalOffsets"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    int v16 = *(unsigned __int8 *)(a1 + 1187);
    goto LABEL_48;
  }
  if (CFEqual(cf1, @"HardwareSupportsFractionalDimensions"))
  {
    IOSurfaceAcceleratorCapabilityFractionalCMVideoDimensions Dimensions = FigGetIOSurfaceAcceleratorCapabilityFractionalDimensions();
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    if (!IOSurfaceAcceleratorCapabilityFractionalDimensions) {
      CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_52;
  }
  if (CFEqual(cf1, @"HistogramData"))
  {
    uint64_t v20 = *(void *)(a1 + 32);
    if (v20)
    {
      VTPixelTransferChainCopyFirstNodeProperty(v20, @"HistogramData", a3, (uint64_t)a4);
      return 0;
    }
    CFDataRef v21 = *(const __CFData **)(a1 + 792);
    if (v21 && CFDataGetLength(v21))
    {
      uint64_t result = *(void *)(a1 + 792);
      if (result) {
        goto LABEL_16;
      }
      goto LABEL_28;
    }
LABEL_112:
    uint64_t result = 0;
    *a4 = 0;
    return result;
  }
  if (CFEqual(cf1, @"Convert10BitHDRToSDRFor8BitDestinationWithUnspecifiedColorProperties"))
  {
    CFStringRef v15 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    int v16 = *(unsigned __int8 *)(a1 + 1120);
    goto LABEL_48;
  }
  if (CFEqual(cf1, @"HistogramRectangle"))
  {
    uint64_t result = *(void *)(a1 + 800);
    if (result) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
  if (CFEqual(cf1, @"Label"))
  {
    uint64_t result = *(void *)(a1 + 24);
    if (result) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
  CFDictionaryRef v22 = *(const void **)(a1 + 1160);
  if (!v22) {
    return 4294954396;
  }
  uint64_t v23 = *MEMORY[0x1E4F1CF80];

  return VTMetalTransferSessionCopyProperty(v22, cf1, v23, a4);
}

uint64_t VTPixelTransferSessionSetProperties(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v3 = a1;
  if (*(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else if (theDict)
  {
    uint64_t v4 = 0;
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)vtPixelTransferSessionSetOneProperty, &v3);
    return v4;
  }
  else
  {
    return 0;
  }
}

uint64_t vtPixelTransferSessionSetOneProperty(const __CFString *a1, const void *a2, uint64_t a3)
{
  uint64_t result = _VTPixelTransferSessionSetProperty(*(void *)a3, a1, a2);
  if (!*(_DWORD *)(a3 + 8)) {
    *(_DWORD *)(a3 + 8) = result;
  }
  return result;
}

uint64_t VTPixelTransferSessionCopySerializableProperties()
{
  return FigSignalErrorAt();
}

uint64_t VTPixelTransferSessionGetDynamicServiceList()
{
  return gVTPixelTransferServiceList;
}

uint64_t VTRegisterPixelTransferCapabilityMxN(const void *a1, uint64_t a2, unsigned int *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1
    && (CFAllocatorRef v9 = a3) != 0
    && a7
    && a8
    && a9
    && a2 < 10001
    && (uint64_t v13 = a4, a4 < 10001)
    && (__n = 4 * a2, (BOOL v18 = malloc_type_calloc(1uLL, 4 * a2 + 8 * a4 + 80, 0x8C667C1AuLL)) != 0))
  {
    uint64_t v19 = (uint64_t)v18;
    uint64_t v24 = a6;
    uint64_t v20 = v18 + 10;
    void *v18 = a2;
    v18[1] = v18 + 10;
    memcpy(v18 + 10, a1, __n);
    *(void *)(v19 + 16) = v13;
    *(void *)(v19 + 24) = (char *)v20 + __n;
    if (v13 >= 1)
    {
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = *(void *)(v19 + 24);
        *(_DWORD *)(v22 + v21) = *v9;
        unsigned int v23 = *v9++;
        getPixelFormatCharacteristics(v23, (unsigned char *)(v22 + v21 + 4), (unsigned char *)(v22 + v21 + 5));
        v21 += 8;
        --v13;
      }
      while (v13);
    }
    *(_DWORD *)(v19 + 32) = a5;
    *(void *)(v19 + 40) = v24;
    *(void *)(v19 + 48) = a7;
    *(void *)(v19 + 56) = a8;
    *(void *)(v19 + 64) = a9;
    *(void *)(v19 + 72) = gVTPixelTransferServiceList;
    gVTPixelTransferServiceList = v19;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t vt_Copy_NonPlanar8(uint64_t a1, unint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  unint64_t v6 = a2;
  uint64_t v7 = *a3;
  uint64_t v8 = (char *)*a4;
  uint64_t v9 = *a5;
  uint64_t v10 = (char *)*a6;
  size_t v11 = a1 & 0x1FFFFFFFFFFFFFFFLL;
  if (a2 >= 2 && v7 == v9)
  {
    memcpy(*a6, *a4, v11 + v7 * (a2 - 1));
  }
  else if (a2)
  {
    do
    {
      memcpy(v10, v8, v11);
      v8 += v7;
      v10 += v9;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar8_Crop(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  if (a2)
  {
    uint64_t v6 = a2;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    size_t v9 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v10 = (char *)*a6;
    size_t v11 = (char *)*a4;
    do
    {
      memcpy(v10, v11, v9);
      v11 += v7;
      v10 += v8;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar16(uint64_t a1, unint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  unint64_t v6 = a2;
  uint64_t v7 = *a3;
  uint64_t v8 = (char *)*a4;
  uint64_t v9 = *a5;
  uint64_t v10 = (char *)*a6;
  size_t v11 = 2 * (a1 & 0xFFFFFFFFFFFFFFFLL);
  if (a2 >= 2 && v7 == v9)
  {
    memcpy(*a6, *a4, v11 + v7 * (a2 - 1));
  }
  else if (a2)
  {
    do
    {
      memcpy(v10, v8, v11);
      v8 += v7;
      v10 += v9;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar16_Crop(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  if (a2)
  {
    uint64_t v6 = a2;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    size_t v9 = 2 * (a1 & 0xFFFFFFFFFFFFFFFLL);
    uint64_t v10 = (char *)*a6;
    size_t v11 = (char *)*a4;
    do
    {
      memcpy(v10, v11, v9);
      v11 += v7;
      v10 += v8;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar32(uint64_t a1, unint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  unint64_t v6 = a2;
  uint64_t v7 = *a3;
  uint64_t v8 = (char *)*a4;
  uint64_t v9 = *a5;
  uint64_t v10 = (char *)*a6;
  size_t v11 = 4 * (a1 & 0x7FFFFFFFFFFFFFFLL);
  if (a2 >= 2 && v7 == v9)
  {
    memcpy(*a6, *a4, v11 + v7 * (a2 - 1));
  }
  else if (a2)
  {
    do
    {
      memcpy(v10, v8, v11);
      v8 += v7;
      v10 += v9;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar32_Crop(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  if (a2)
  {
    uint64_t v6 = a2;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    size_t v9 = 4 * (a1 & 0x7FFFFFFFFFFFFFFLL);
    uint64_t v10 = (char *)*a6;
    size_t v11 = (char *)*a4;
    do
    {
      memcpy(v10, v11, v9);
      v11 += v7;
      v10 += v8;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar64(uint64_t a1, unint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  unint64_t v6 = a2;
  uint64_t v7 = *a3;
  uint64_t v8 = (char *)*a4;
  uint64_t v9 = *a5;
  uint64_t v10 = (char *)*a6;
  size_t v11 = 8 * (a1 & 0x3FFFFFFFFFFFFFFLL);
  if (a2 >= 2 && v7 == v9)
  {
    memcpy(*a6, *a4, v11 + v7 * (a2 - 1));
  }
  else if (a2)
  {
    do
    {
      memcpy(v10, v8, v11);
      v8 += v7;
      v10 += v9;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar64_Crop(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  if (a2)
  {
    uint64_t v6 = a2;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    size_t v9 = 8 * (a1 & 0x3FFFFFFFFFFFFFFLL);
    uint64_t v10 = (char *)*a6;
    size_t v11 = (char *)*a4;
    do
    {
      memcpy(v10, v11, v9);
      v11 += v7;
      v10 += v8;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar128(uint64_t a1, unint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  unint64_t v6 = a2;
  uint64_t v7 = *a3;
  uint64_t v8 = (char *)*a4;
  uint64_t v9 = *a5;
  uint64_t v10 = (char *)*a6;
  size_t v11 = 16 * (a1 & 0x1FFFFFFFFFFFFFFLL);
  if (a2 >= 2 && v7 == v9)
  {
    memcpy(*a6, *a4, v11 + v7 * (a2 - 1));
  }
  else if (a2)
  {
    do
    {
      memcpy(v10, v8, v11);
      v8 += v7;
      v10 += v9;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_NonPlanar128_Crop(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  if (a2)
  {
    uint64_t v6 = a2;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    size_t v9 = 16 * (a1 & 0x1FFFFFFFFFFFFFFLL);
    uint64_t v10 = (char *)*a6;
    size_t v11 = (char *)*a4;
    do
    {
      memcpy(v10, v11, v9);
      v11 += v7;
      v10 += v8;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_v210(uint64_t a1, unint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  unint64_t v6 = a2;
  uint64_t v7 = *a3;
  uint64_t v8 = (char *)*a4;
  uint64_t v9 = *a5;
  uint64_t v10 = (char *)*a6;
  size_t v11 = (4 * (((unint64_t)(a1 + 5) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0x1FFFFFFFFFFFFFF0;
  if (a2 >= 2 && v7 == v9)
  {
    memcpy(*a6, *a4, v11 + v7 * (a2 - 1));
  }
  else if (a2)
  {
    do
    {
      memcpy(v10, v8, v11);
      v8 += v7;
      v10 += v9;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_v210_Crop(uint64_t a1, uint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  if (a2)
  {
    uint64_t v6 = a2;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    size_t v9 = (4 * (((unint64_t)(a1 + 5) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0x1FFFFFFFFFFFFFF0;
    uint64_t v10 = (char *)*a6;
    size_t v11 = (char *)*a4;
    do
    {
      memcpy(v10, v11, v9);
      v11 += v7;
      v10 += v8;
      --v6;
    }
    while (v6);
  }
  return 0;
}

uint64_t vt_Copy_y420(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  v20[3] = *MEMORY[0x1E4F143B8];
  v20[0] = a1;
  v20[1] = a1 >> 1;
  v20[2] = a1 >> 1;
  v19[0] = a2;
  v19[1] = a2 >> 1;
  v19[2] = a2 >> 1;
  do
  {
    uint64_t v10 = *(void *)(a3 + 8 * v9);
    size_t v11 = *(char **)(a4 + 8 * v9);
    uint64_t v12 = *(void *)(a5 + 8 * v9);
    uint64_t v13 = *(char **)(a6 + 8 * v9);
    size_t v14 = v20[v9] & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v15 = v19[v9];
    if (v10 == v12 && v15 >= 2)
    {
      memcpy(*(void **)(a6 + 8 * v9), *(const void **)(a4 + 8 * v9), v14 + (v15 - 1) * v10);
    }
    else
    {
      for (; v15; --v15)
      {
        memcpy(v13, v11, v14);
        v11 += v10;
        v13 += v12;
      }
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_y420_Crop(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  void v19[3] = *MEMORY[0x1E4F143B8];
  v19[0] = a1;
  v19[1] = a1 >> 1;
  v19[2] = a1 >> 1;
  v18[0] = a2;
  v18[1] = a2 >> 1;
  v18[2] = a2 >> 1;
  do
  {
    uint64_t v10 = v18[v9];
    if (v10)
    {
      uint64_t v11 = *(void *)(a3 + 8 * v9);
      uint64_t v12 = *(void *)(a5 + 8 * v9);
      size_t v13 = v19[v9] & 0x1FFFFFFFFFFFFFFFLL;
      size_t v14 = *(char **)(a6 + 8 * v9);
      unint64_t v15 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v14, v15, v13);
        v15 += v11;
        v14 += v12;
        --v10;
      }
      while (v10);
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_420v(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  v22[2] = *MEMORY[0x1E4F143B8];
  v22[0] = a1;
  v22[1] = a1;
  v21[0] = a2;
  v21[1] = a2 >> 1;
  char v10 = 1;
  do
  {
    uint64_t v11 = *(void *)(a3 + 8 * v9);
    uint64_t v12 = *(char **)(a4 + 8 * v9);
    uint64_t v13 = *(void *)(a5 + 8 * v9);
    size_t v14 = *(char **)(a6 + 8 * v9);
    char v15 = v10;
    size_t v16 = v22[v9] & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v17 = v21[v9];
    if (v11 == v13 && v17 >= 2)
    {
      memcpy(v14, v12, v16 + (v17 - 1) * v11);
    }
    else
    {
      for (; v17; --v17)
      {
        memcpy(v14, v12, v16);
        v12 += v11;
        v14 += v13;
      }
    }
    char v10 = 0;
    uint64_t v9 = 1;
  }
  while ((v15 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_420v_Crop(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  void v21[2] = *MEMORY[0x1E4F143B8];
  v21[0] = a1;
  v21[1] = a1;
  v20[0] = a2;
  v20[1] = a2 >> 1;
  char v10 = 1;
  do
  {
    char v11 = v10;
    uint64_t v12 = v20[v9];
    if (v12)
    {
      uint64_t v13 = *(void *)(a3 + 8 * v9);
      uint64_t v14 = *(void *)(a5 + 8 * v9);
      size_t v15 = v21[v9] & 0x1FFFFFFFFFFFFFFFLL;
      size_t v16 = *(char **)(a6 + 8 * v9);
      unint64_t v17 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v16, v17, v15);
        v17 += v13;
        v16 += v14;
        --v12;
      }
      while (v12);
    }
    char v10 = 0;
    uint64_t v9 = 1;
  }
  while ((v11 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_v0a8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  v20[3] = *MEMORY[0x1E4F143B8];
  v20[0] = a1;
  v20[1] = a1;
  void v20[2] = a1;
  v19[0] = a2;
  v19[1] = a2 >> 1;
  v19[2] = a2;
  do
  {
    uint64_t v10 = *(void *)(a3 + 8 * v9);
    char v11 = *(char **)(a4 + 8 * v9);
    uint64_t v12 = *(void *)(a5 + 8 * v9);
    uint64_t v13 = *(char **)(a6 + 8 * v9);
    size_t v14 = v20[v9] & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v15 = v19[v9];
    if (v10 == v12 && v15 >= 2)
    {
      memcpy(*(void **)(a6 + 8 * v9), *(const void **)(a4 + 8 * v9), v14 + (v15 - 1) * v10);
    }
    else
    {
      for (; v15; --v15)
      {
        memcpy(v13, v11, v14);
        v11 += v10;
        v13 += v12;
      }
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_v0a8_Crop(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  void v19[3] = *MEMORY[0x1E4F143B8];
  v19[0] = a1;
  v19[1] = a1;
  v19[2] = a1;
  v18[0] = a2;
  v18[1] = a2 >> 1;
  v18[2] = a2;
  do
  {
    uint64_t v10 = v18[v9];
    if (v10)
    {
      uint64_t v11 = *(void *)(a3 + 8 * v9);
      uint64_t v12 = *(void *)(a5 + 8 * v9);
      size_t v13 = v19[v9] & 0x1FFFFFFFFFFFFFFFLL;
      size_t v14 = *(char **)(a6 + 8 * v9);
      unint64_t v15 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v14, v15, v13);
        v15 += v11;
        v14 += v12;
        --v10;
      }
      while (v10);
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_422v(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  v22[2] = *MEMORY[0x1E4F143B8];
  v22[0] = a1;
  v22[1] = a1;
  v21[0] = a2;
  v21[1] = a2;
  char v10 = 1;
  do
  {
    uint64_t v11 = *(void *)(a3 + 8 * v9);
    uint64_t v12 = *(char **)(a4 + 8 * v9);
    uint64_t v13 = *(void *)(a5 + 8 * v9);
    size_t v14 = *(char **)(a6 + 8 * v9);
    char v15 = v10;
    size_t v16 = v22[v9] & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v17 = v21[v9];
    if (v11 == v13 && v17 >= 2)
    {
      memcpy(v14, v12, v16 + (v17 - 1) * v11);
    }
    else
    {
      for (; v17; --v17)
      {
        memcpy(v14, v12, v16);
        v12 += v11;
        v14 += v13;
      }
    }
    char v10 = 0;
    uint64_t v9 = 1;
  }
  while ((v15 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_422v_Crop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  void v21[2] = *MEMORY[0x1E4F143B8];
  v21[0] = a1;
  v21[1] = a1;
  v20[0] = a2;
  v20[1] = a2;
  char v10 = 1;
  do
  {
    char v11 = v10;
    uint64_t v12 = v20[v9];
    if (v12)
    {
      uint64_t v13 = *(void *)(a3 + 8 * v9);
      uint64_t v14 = *(void *)(a5 + 8 * v9);
      size_t v15 = v21[v9] & 0x1FFFFFFFFFFFFFFFLL;
      size_t v16 = *(char **)(a6 + 8 * v9);
      unint64_t v17 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v16, v17, v15);
        v17 += v13;
        v16 += v14;
        --v12;
      }
      while (v12);
    }
    char v10 = 0;
    uint64_t v9 = 1;
  }
  while ((v11 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_v2a8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  v20[3] = *MEMORY[0x1E4F143B8];
  v20[0] = a1;
  v20[1] = a1;
  void v20[2] = a1;
  v19[0] = a2;
  v19[1] = a2;
  v19[2] = a2;
  do
  {
    uint64_t v10 = *(void *)(a3 + 8 * v9);
    char v11 = *(char **)(a4 + 8 * v9);
    uint64_t v12 = *(void *)(a5 + 8 * v9);
    uint64_t v13 = *(char **)(a6 + 8 * v9);
    size_t v14 = v20[v9] & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v15 = v19[v9];
    if (v10 == v12 && v15 >= 2)
    {
      memcpy(*(void **)(a6 + 8 * v9), *(const void **)(a4 + 8 * v9), v14 + (v15 - 1) * v10);
    }
    else
    {
      for (; v15; --v15)
      {
        memcpy(v13, v11, v14);
        v11 += v10;
        v13 += v12;
      }
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_v2a8_Crop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  void v19[3] = *MEMORY[0x1E4F143B8];
  v19[0] = a1;
  v19[1] = a1;
  v19[2] = a1;
  v18[0] = a2;
  v18[1] = a2;
  v18[2] = a2;
  do
  {
    uint64_t v10 = v18[v9];
    if (v10)
    {
      uint64_t v11 = *(void *)(a3 + 8 * v9);
      uint64_t v12 = *(void *)(a5 + 8 * v9);
      size_t v13 = v19[v9] & 0x1FFFFFFFFFFFFFFFLL;
      size_t v14 = *(char **)(a6 + 8 * v9);
      unint64_t v15 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v14, v15, v13);
        v15 += v11;
        v14 += v12;
        --v10;
      }
      while (v10);
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_444v(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  v22[2] = *MEMORY[0x1E4F143B8];
  v22[0] = a1;
  v22[1] = 2 * a1;
  v21[0] = a2;
  v21[1] = a2;
  char v10 = 1;
  do
  {
    uint64_t v11 = *(void *)(a3 + 8 * v9);
    uint64_t v12 = *(char **)(a4 + 8 * v9);
    uint64_t v13 = *(void *)(a5 + 8 * v9);
    size_t v14 = *(char **)(a6 + 8 * v9);
    char v15 = v10;
    size_t v16 = v22[v9] & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v17 = v21[v9];
    if (v11 == v13 && v17 >= 2)
    {
      memcpy(v14, v12, v16 + (v17 - 1) * v11);
    }
    else
    {
      for (; v17; --v17)
      {
        memcpy(v14, v12, v16);
        v12 += v11;
        v14 += v13;
      }
    }
    char v10 = 0;
    uint64_t v9 = 1;
  }
  while ((v15 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_444v_Crop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  void v21[2] = *MEMORY[0x1E4F143B8];
  v21[0] = a1;
  v21[1] = 2 * a1;
  v20[0] = a2;
  v20[1] = a2;
  char v10 = 1;
  do
  {
    char v11 = v10;
    uint64_t v12 = v20[v9];
    if (v12)
    {
      uint64_t v13 = *(void *)(a3 + 8 * v9);
      uint64_t v14 = *(void *)(a5 + 8 * v9);
      size_t v15 = v21[v9] & 0x1FFFFFFFFFFFFFFFLL;
      size_t v16 = *(char **)(a6 + 8 * v9);
      unint64_t v17 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v16, v17, v15);
        v17 += v13;
        v16 += v14;
        --v12;
      }
      while (v12);
    }
    char v10 = 0;
    uint64_t v9 = 1;
  }
  while ((v11 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_v4a8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  v20[3] = *MEMORY[0x1E4F143B8];
  v20[0] = a1;
  v20[1] = 2 * a1;
  void v20[2] = a1;
  v19[0] = a2;
  v19[1] = a2;
  v19[2] = a2;
  do
  {
    uint64_t v10 = *(void *)(a3 + 8 * v9);
    char v11 = *(char **)(a4 + 8 * v9);
    uint64_t v12 = *(void *)(a5 + 8 * v9);
    uint64_t v13 = *(char **)(a6 + 8 * v9);
    size_t v14 = v20[v9] & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v15 = v19[v9];
    if (v10 == v12 && v15 >= 2)
    {
      memcpy(*(void **)(a6 + 8 * v9), *(const void **)(a4 + 8 * v9), v14 + (v15 - 1) * v10);
    }
    else
    {
      for (; v15; --v15)
      {
        memcpy(v13, v11, v14);
        v11 += v10;
        v13 += v12;
      }
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_v4a8_Crop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  void v19[3] = *MEMORY[0x1E4F143B8];
  v19[0] = a1;
  v19[1] = 2 * a1;
  v19[2] = a1;
  v18[0] = a2;
  v18[1] = a2;
  v18[2] = a2;
  do
  {
    uint64_t v10 = v18[v9];
    if (v10)
    {
      uint64_t v11 = *(void *)(a3 + 8 * v9);
      uint64_t v12 = *(void *)(a5 + 8 * v9);
      size_t v13 = v19[v9] & 0x1FFFFFFFFFFFFFFFLL;
      size_t v14 = *(char **)(a6 + 8 * v9);
      unint64_t v15 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v14, v15, v13);
        v15 += v11;
        v14 += v12;
        --v10;
      }
      while (v10);
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_x420(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  v22[2] = *MEMORY[0x1E4F143B8];
  v22[0] = a1;
  v22[1] = a1;
  v21[0] = a2;
  v21[1] = a2 >> 1;
  char v10 = 1;
  do
  {
    uint64_t v11 = *(void *)(a3 + 8 * v9);
    uint64_t v12 = *(char **)(a4 + 8 * v9);
    uint64_t v13 = *(void *)(a5 + 8 * v9);
    size_t v14 = *(char **)(a6 + 8 * v9);
    char v15 = v10;
    size_t v16 = 2 * (v22[v9] & 0xFFFFFFFFFFFFFFFLL);
    unint64_t v17 = v21[v9];
    if (v11 == v13 && v17 >= 2)
    {
      memcpy(v14, v12, v16 + (v17 - 1) * v11);
    }
    else
    {
      for (; v17; --v17)
      {
        memcpy(v14, v12, v16);
        v12 += v11;
        v14 += v13;
      }
    }
    char v10 = 0;
    uint64_t v9 = 1;
  }
  while ((v15 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_x420_Crop(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  void v21[2] = *MEMORY[0x1E4F143B8];
  v21[0] = a1;
  v21[1] = a1;
  v20[0] = a2;
  v20[1] = a2 >> 1;
  char v10 = 1;
  do
  {
    char v11 = v10;
    uint64_t v12 = v20[v9];
    if (v12)
    {
      uint64_t v13 = *(void *)(a3 + 8 * v9);
      uint64_t v14 = *(void *)(a5 + 8 * v9);
      size_t v15 = 2 * (v21[v9] & 0xFFFFFFFFFFFFFFFLL);
      size_t v16 = *(char **)(a6 + 8 * v9);
      unint64_t v17 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v16, v17, v15);
        v17 += v13;
        v16 += v14;
        --v12;
      }
      while (v12);
    }
    char v10 = 0;
    uint64_t v9 = 1;
  }
  while ((v11 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_x422(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  v22[2] = *MEMORY[0x1E4F143B8];
  v22[0] = a1;
  v22[1] = a1;
  v21[0] = a2;
  v21[1] = a2;
  char v10 = 1;
  do
  {
    uint64_t v11 = *(void *)(a3 + 8 * v9);
    uint64_t v12 = *(char **)(a4 + 8 * v9);
    uint64_t v13 = *(void *)(a5 + 8 * v9);
    uint64_t v14 = *(char **)(a6 + 8 * v9);
    char v15 = v10;
    size_t v16 = 2 * (v22[v9] & 0xFFFFFFFFFFFFFFFLL);
    unint64_t v17 = v21[v9];
    if (v11 == v13 && v17 >= 2)
    {
      memcpy(v14, v12, v16 + (v17 - 1) * v11);
    }
    else
    {
      for (; v17; --v17)
      {
        memcpy(v14, v12, v16);
        v12 += v11;
        v14 += v13;
      }
    }
    char v10 = 0;
    uint64_t v9 = 1;
  }
  while ((v15 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_x422_Crop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  void v21[2] = *MEMORY[0x1E4F143B8];
  v21[0] = a1;
  v21[1] = a1;
  v20[0] = a2;
  v20[1] = a2;
  char v10 = 1;
  do
  {
    char v11 = v10;
    uint64_t v12 = v20[v9];
    if (v12)
    {
      uint64_t v13 = *(void *)(a3 + 8 * v9);
      uint64_t v14 = *(void *)(a5 + 8 * v9);
      size_t v15 = 2 * (v21[v9] & 0xFFFFFFFFFFFFFFFLL);
      size_t v16 = *(char **)(a6 + 8 * v9);
      unint64_t v17 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v16, v17, v15);
        v17 += v13;
        v16 += v14;
        --v12;
      }
      while (v12);
    }
    char v10 = 0;
    uint64_t v9 = 1;
  }
  while ((v11 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_x2as(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  v20[3] = *MEMORY[0x1E4F143B8];
  v20[0] = a1;
  v20[1] = a1;
  void v20[2] = a1;
  v19[0] = a2;
  v19[1] = a2;
  v19[2] = a2;
  do
  {
    uint64_t v10 = *(void *)(a3 + 8 * v9);
    char v11 = *(char **)(a4 + 8 * v9);
    uint64_t v12 = *(void *)(a5 + 8 * v9);
    uint64_t v13 = *(char **)(a6 + 8 * v9);
    size_t v14 = 2 * (v20[v9] & 0xFFFFFFFFFFFFFFFLL);
    unint64_t v15 = v19[v9];
    if (v10 == v12 && v15 >= 2)
    {
      memcpy(*(void **)(a6 + 8 * v9), *(const void **)(a4 + 8 * v9), v14 + (v15 - 1) * v10);
    }
    else
    {
      for (; v15; --v15)
      {
        memcpy(v13, v11, v14);
        v11 += v10;
        v13 += v12;
      }
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_x2as_Crop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  void v19[3] = *MEMORY[0x1E4F143B8];
  v19[0] = a1;
  v19[1] = a1;
  v19[2] = a1;
  v18[0] = a2;
  v18[1] = a2;
  v18[2] = a2;
  do
  {
    uint64_t v10 = v18[v9];
    if (v10)
    {
      uint64_t v11 = *(void *)(a3 + 8 * v9);
      uint64_t v12 = *(void *)(a5 + 8 * v9);
      size_t v13 = 2 * (v19[v9] & 0xFFFFFFFFFFFFFFFLL);
      size_t v14 = *(char **)(a6 + 8 * v9);
      unint64_t v15 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v14, v15, v13);
        v15 += v11;
        v14 += v12;
        --v10;
      }
      while (v10);
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_x444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  v22[2] = *MEMORY[0x1E4F143B8];
  v22[0] = a1;
  v22[1] = 2 * a1;
  v21[0] = a2;
  v21[1] = a2;
  char v10 = 1;
  do
  {
    uint64_t v11 = *(void *)(a3 + 8 * v9);
    uint64_t v12 = *(char **)(a4 + 8 * v9);
    uint64_t v13 = *(void *)(a5 + 8 * v9);
    size_t v14 = *(char **)(a6 + 8 * v9);
    char v15 = v10;
    size_t v16 = 2 * (v22[v9] & 0xFFFFFFFFFFFFFFFLL);
    unint64_t v17 = v21[v9];
    if (v11 == v13 && v17 >= 2)
    {
      memcpy(v14, v12, v16 + (v17 - 1) * v11);
    }
    else
    {
      for (; v17; --v17)
      {
        memcpy(v14, v12, v16);
        v12 += v11;
        v14 += v13;
      }
    }
    char v10 = 0;
    uint64_t v9 = 1;
  }
  while ((v15 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_x444_Crop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  void v21[2] = *MEMORY[0x1E4F143B8];
  v21[0] = a1;
  v21[1] = 2 * a1;
  v20[0] = a2;
  v20[1] = a2;
  char v10 = 1;
  do
  {
    char v11 = v10;
    uint64_t v12 = v20[v9];
    if (v12)
    {
      uint64_t v13 = *(void *)(a3 + 8 * v9);
      uint64_t v14 = *(void *)(a5 + 8 * v9);
      size_t v15 = 2 * (v21[v9] & 0xFFFFFFFFFFFFFFFLL);
      size_t v16 = *(char **)(a6 + 8 * v9);
      unint64_t v17 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v16, v17, v15);
        v17 += v13;
        v16 += v14;
        --v12;
      }
      while (v12);
    }
    char v10 = 0;
    uint64_t v9 = 1;
  }
  while ((v11 & 1) != 0);
  return 0;
}

uint64_t vt_Copy_x4as(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  v20[3] = *MEMORY[0x1E4F143B8];
  v20[0] = a1;
  v20[1] = 2 * a1;
  void v20[2] = a1;
  v19[0] = a2;
  v19[1] = a2;
  v19[2] = a2;
  do
  {
    uint64_t v10 = *(void *)(a3 + 8 * v9);
    char v11 = *(char **)(a4 + 8 * v9);
    uint64_t v12 = *(void *)(a5 + 8 * v9);
    uint64_t v13 = *(char **)(a6 + 8 * v9);
    size_t v14 = 2 * (v20[v9] & 0xFFFFFFFFFFFFFFFLL);
    unint64_t v15 = v19[v9];
    if (v10 == v12 && v15 >= 2)
    {
      memcpy(*(void **)(a6 + 8 * v9), *(const void **)(a4 + 8 * v9), v14 + (v15 - 1) * v10);
    }
    else
    {
      for (; v15; --v15)
      {
        memcpy(v13, v11, v14);
        v11 += v10;
        v13 += v12;
      }
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_x4as_Crop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  void v19[3] = *MEMORY[0x1E4F143B8];
  v19[0] = a1;
  v19[1] = 2 * a1;
  v19[2] = a1;
  v18[0] = a2;
  v18[1] = a2;
  v18[2] = a2;
  do
  {
    uint64_t v10 = v18[v9];
    if (v10)
    {
      uint64_t v11 = *(void *)(a3 + 8 * v9);
      uint64_t v12 = *(void *)(a5 + 8 * v9);
      size_t v13 = 2 * (v19[v9] & 0xFFFFFFFFFFFFFFFLL);
      size_t v14 = *(char **)(a6 + 8 * v9);
      unint64_t v15 = *(char **)(a4 + 8 * v9);
      do
      {
        memcpy(v14, v15, v13);
        v15 += v11;
        v14 += v12;
        --v10;
      }
      while (v10);
    }
    ++v9;
  }
  while (v9 != 3);
  return 0;
}

uint64_t vt_Copy_b3a8_b3a8_Crop(uint64_t a1, uint64_t a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6)
{
  if (a2)
  {
    uint64_t v8 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = *a5;
    size_t v12 = 4 * (a1 & 0x7FFFFFFFFFFFFFFLL);
    size_t v13 = *a6;
    uint64_t v14 = a2;
    unint64_t v15 = *a4;
    do
    {
      memcpy(v13, v15, v12);
      v15 += v10;
      v13 += v11;
      --v14;
    }
    while (v14);
    uint64_t v16 = a3[1];
    uint64_t v17 = a5[1];
    size_t v18 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v19 = a6[1];
    uint64_t v20 = a4[1];
    do
    {
      memcpy(v19, v20, v18);
      v20 += v16;
      v19 += v17;
      --v8;
    }
    while (v8);
  }
  return 0;
}

size_t vt_Scale_L008(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  uint64_t v16 = a2[2].i64[1];
  size_t v17 = a2[2].i64[0] + CVPixelBufferGetBytesPerRow(a1) * v16;
  CGRect v25 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v17;
  int8x16_t v26 = vextq_s8(a2[1], a2[1], 8uLL);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  uint64_t v18 = a4[2].i64[1];
  size_t v19 = a4[2].i64[0] + CVPixelBufferGetBytesPerRow(a3) * v18;
  uint64_t v22 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v19;
  int8x16_t v23 = vextq_s8(a4[1], a4[1], 8uLL);
  size_t v24 = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  size_t v20 = vtScale(&v25, &v22, (void **)(a5 + 256), a10 | 8u, MEMORY[0x1E4F17130], a6);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v20;
}

size_t vtScale(void *a1, void *a2, void **a3, uint64_t a4, uint64_t (*a5)(void *, void *, void *, uint64_t), int a6)
{
  size_t v12 = *a3;
  if (!v12)
  {
    size_t result = a5(a1, a2, 0, a4 | 0x80);
    if (!result) {
      return result;
    }
    size_t v12 = malloc_type_malloc(result, 0x9E7AB7D2uLL);
    *a3 = v12;
    if (!v12) {
      return 4294954392;
    }
  }
  if (a6)
  {
    uint64_t v14 = a1[3];
    uint64_t v15 = *a1;
    unint64_t v16 = a1[1];
    uint64_t v17 = *a1 + v14;
    uint64_t v29 = a1[2];
    uint64_t v30 = 2 * v14;
    v31[2] = v29;
    v31[3] = 2 * v14;
    v31[0] = v15;
    v31[1] = (v16 + 1) >> 1;
    v28[0] = v17;
    v28[1] = v16 >> 1;
    uint64_t v18 = a2[3];
    uint64_t v19 = *a2;
    unint64_t v20 = a2[1];
    uint64_t v21 = *a2 + v18;
    uint64_t v25 = a2[2];
    uint64_t v26 = 2 * v18;
    v27[2] = v25;
    v27[3] = 2 * v18;
    v27[0] = v19;
    v27[1] = (v20 + 1) >> 1;
    v24[0] = v21;
    v24[1] = v20 >> 1;
    size_t result = a5(v31, v27, v12, a4);
    if (result) {
      return result;
    }
    size_t v12 = *a3;
    uint64_t v22 = v28;
    int8x16_t v23 = v24;
  }
  else
  {
    uint64_t v22 = a1;
    int8x16_t v23 = a2;
  }
  return a5(v22, v23, v12, a4);
}

size_t vt_Scale_L016(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  uint64_t v16 = a2[2].i64[1];
  size_t v17 = CVPixelBufferGetBytesPerRow(a1) * v16 + 2 * a2[2].i64[0];
  uint64_t v25 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v17;
  int8x16_t v26 = vextq_s8(a2[1], a2[1], 8uLL);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  uint64_t v18 = a4[2].i64[1];
  size_t v19 = CVPixelBufferGetBytesPerRow(a3) * v18 + 2 * a4[2].i64[0];
  uint64_t v22 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v19;
  int8x16_t v23 = vextq_s8(a4[1], a4[1], 8uLL);
  size_t v24 = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  size_t v20 = vtScale(&v25, &v22, (void **)(a5 + 256), a10 | 8u, MEMORY[0x1E4F17128], a6);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v20;
}

size_t vt_Scale_L00h(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  uint64_t v16 = a2[2].i64[1];
  size_t v17 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v16 + 2 * a2[2].i64[0];
  uint64_t v25 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v17;
  int8x16_t v26 = vextq_s8(a2[1], a2[1], 8uLL);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  uint64_t v18 = a4[2].i64[1];
  size_t v19 = CVPixelBufferGetBytesPerRowOfPlane(a3, 0) * v18 + 2 * a4[2].i64[0];
  uint64_t v22 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v19;
  int8x16_t v23 = vextq_s8(a4[1], a4[1], 8uLL);
  size_t v24 = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  size_t v20 = vtScale(&v25, &v22, (void **)(a5 + 256), a10 | 8u, MEMORY[0x1E4F17120], a6);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v20;
}

size_t vt_Scale_L00f(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  uint64_t v16 = a2[2].i64[1];
  size_t v17 = CVPixelBufferGetBytesPerRow(a1) * v16 + 2 * a2[2].i64[0];
  uint64_t v25 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v17;
  int8x16_t v26 = vextq_s8(a2[1], a2[1], 8uLL);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  uint64_t v18 = a4[2].i64[1];
  size_t v19 = CVPixelBufferGetBytesPerRow(a3) * v18 + 2 * a4[2].i64[0];
  uint64_t v22 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v19;
  int8x16_t v23 = vextq_s8(a4[1], a4[1], 8uLL);
  size_t v24 = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  size_t v20 = vtScale(&v25, &v22, (void **)(a5 + 256), a10 | 8u, MEMORY[0x1E4F17138], a6);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v20;
}

size_t vt_Scale_8ARGB_Together(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  uint64_t v16 = a2[2].i64[1];
  size_t v17 = CVPixelBufferGetBytesPerRow(a1) * v16 + 4 * a2[2].i64[0];
  uint64_t v25 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v17;
  int8x16_t v26 = vextq_s8(a2[1], a2[1], 8uLL);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  uint64_t v18 = a4[2].i64[1];
  size_t v19 = CVPixelBufferGetBytesPerRow(a3) * v18 + 4 * a4[2].i64[0];
  uint64_t v22 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v19;
  int8x16_t v23 = vextq_s8(a4[1], a4[1], 8uLL);
  size_t v24 = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  size_t v20 = vtScale(&v25, &v22, (void **)(a5 + 256), a10 | 8u, MEMORY[0x1E4F170F8], a6);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v20;
}

size_t vt_Scale_8_SeparatePlanes(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, vImage_Buffer *a5, int a6, int a7, int a8, uint64_t a9, vImage_Flags a10)
{
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  vt_SetupOrCleanupPlanarBuffers(a1, a2, (uint64_t)a5, 1);
  uint64_t v25 = a2;
  vt_CopyToOrFromPlanarBuffers(a1, a2, a5, 1, a10);
  vt_SetupOrCleanupPlanarBuffers(a3, a4, (uint64_t)&a5[4], 1);
  uint64_t v16 = 0;
  size_t v17 = a5;
  while (1)
  {
    size_t v18 = vtScale(v17, &a5[(v16 & 0xFFFFFFFB) + 4].data, &a5[8].data, a10 | 8, MEMORY[0x1E4F17130], a6);
    if (v18) {
      break;
    }
    ++v16;
    ++v17;
    if (v16 == 3)
    {
      size_t v19 = v25;
      size_t v20 = scaleOrSetAlpha8(a1, v25, a3, a4, (uint64_t)a5, a6, a7, a8, a10);
      uint64_t v21 = (uint64_t)&a5[4];
      vt_CopyToOrFromPlanarBuffers(a3, a4, a5 + 4, 0, a10);
      goto LABEL_6;
    }
  }
  size_t v20 = v18;
  size_t v19 = v25;
  uint64_t v21 = (uint64_t)&a5[4];
LABEL_6:
  vt_SetupOrCleanupPlanarBuffers(a1, v19, (uint64_t)a5, 0);
  vt_SetupOrCleanupPlanarBuffers(a3, a4, v21, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v20;
}

size_t vt_SetupOrCleanupPlanarBuffers(__CVBuffer *a1, int8x16_t *a2, uint64_t a3, int a4)
{
  size_t result = CVPixelBufferGetPixelFormatType(a1);
  int v9 = result;
  if ((int)result <= 1999843441)
  {
    if ((int)result > 1380410944)
    {
      if ((int)result <= 1714696753)
      {
        if ((int)result > 1647534391)
        {
          if (result == 1647534392) {
            goto LABEL_89;
          }
          if (result != 1714696752) {
            return result;
          }
          goto LABEL_79;
        }
        if (result == 1380410945)
        {
          if (a4)
          {
            uint64_t v76 = a2[2].i64[1];
            size_t v30 = CVPixelBufferGetBytesPerRow(a1) * v76 + 16 * a2[2].i64[0];
            goto LABEL_98;
          }
          goto LABEL_120;
        }
        if (result != 1630697081) {
          return result;
        }
        if (a4)
        {
          uint64_t v14 = a2[2].i64[1];
          size_t v15 = a2[2].i64[0] + CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL) * v14;
          *(void *)(a3 + 96) = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL) + v15;
          *(int8x16_t *)(a3 + 104) = vextq_s8(a2[1], a2[1], 8uLL);
          uint64_t v16 = a1;
          size_t v17 = 1;
          goto LABEL_66;
        }
        long long v75 = 0uLL;
LABEL_124:
        *(_OWORD *)(a3 + 96) = v75;
        *(_OWORD *)(a3 + 112) = v75;
        return result;
      }
      if ((int)result <= 1916022839)
      {
        if (result != 1714696754)
        {
          int v12 = 1714697268;
LABEL_47:
          if (result != v12) {
            return result;
          }
          if (a4)
          {
            for (size_t i = 0; i != 3; ++i)
            {
              uint64_t v27 = a2[2].i64[1];
              size_t v28 = a2[2].i64[0] + CVPixelBufferGetBytesPerRowOfPlane(a1, i) * v27;
              *(void *)a3 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, i) + v28;
              *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
              size_t result = CVPixelBufferGetBytesPerRowOfPlane(a1, i);
              *(void *)(a3 + 24) = result;
              a3 += 32;
            }
            return result;
          }
LABEL_109:
          long long v71 = 0uLL;
          *(_OWORD *)(a3 + 64) = 0u;
          *(_OWORD *)(a3 + 80) = 0u;
LABEL_115:
          *(_OWORD *)(a3 + 32) = v71;
          *(_OWORD *)(a3 + 48) = v71;
LABEL_121:
          *(_OWORD *)a3 = v71;
          *(_OWORD *)(a3 + 16) = v71;
          return result;
        }
        goto LABEL_100;
      }
      if (result == 1916022840)
      {
LABEL_96:
        if (a4)
        {
          uint64_t v61 = a2[2].i64[1];
          size_t v30 = CVPixelBufferGetBytesPerRow(a1) * v61 + 4 * a2[2].i64[0];
          goto LABEL_98;
        }
LABEL_120:
        long long v71 = 0uLL;
        goto LABEL_121;
      }
      if (result != 1982882104)
      {
        int v11 = 1983131704;
        goto LABEL_95;
      }
      goto LABEL_60;
    }
    if ((int)result <= 875704949)
    {
      if ((int)result <= 875704437)
      {
        if (result == 32) {
          goto LABEL_96;
        }
        if (result != 875704422) {
          return result;
        }
        goto LABEL_60;
      }
      if (result == 875704438)
      {
LABEL_60:
        if (a4)
        {
          uint64_t v35 = a2[2].i64[1];
          size_t v36 = a2[2].i64[0] + CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v35;
          *(void *)a3 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v36;
          *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
          *(void *)(a3 + 24) = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
          uint64_t v37 = a2[2].i64[1];
          unint64_t v38 = ((a2[2].i64[0] + (a2[2].i64[0] < 0)) & 0xFFFFFFFFFFFFFFFELL)
              + v37 / 2 * CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
          BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
          uint64_t v41 = a2[1].i64[0];
          uint64_t v40 = a2[1].i64[1];
          *(void *)(a3 + 32) = &BaseAddressOfPlane[v38];
          *(void *)(a3 + 40) = v40 / 2;
          if (v41 >= 0) {
            uint64_t v42 = v41;
          }
          else {
            uint64_t v42 = v41 + 1;
          }
          *(void *)(a3 + 48) = v42 >> 1;
          size_t result = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
          *(void *)(a3 + 56) = result;
          if (v9 != 1982882104) {
            return result;
          }
          uint64_t v43 = a2[2].i64[1];
          size_t v44 = a2[2].i64[0] + CVPixelBufferGetBytesPerRowOfPlane(a1, 2uLL) * v43;
          *(void *)(a3 + 96) = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL) + v44;
          *(int8x16_t *)(a3 + 104) = vextq_s8(a2[1], a2[1], 8uLL);
          uint64_t v16 = a1;
          size_t v17 = 2;
LABEL_66:
          size_t result = CVPixelBufferGetBytesPerRowOfPlane(v16, v17);
          *(void *)(a3 + 120) = result;
          return result;
        }
        long long v75 = 0uLL;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        if (result != 1982882104) {
          return result;
        }
        goto LABEL_124;
      }
      if (result != 875704934) {
        return result;
      }
LABEL_58:
      if (a4)
      {
        uint64_t v31 = a2[2].i64[1];
        size_t v32 = a2[2].i64[0] + CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v31;
        *(void *)a3 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v32;
        *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
        *(void *)(a3 + 24) = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
        uint64_t v33 = a2[2].i64[1];
        unint64_t v34 = ((a2[2].i64[0] + (a2[2].i64[0] < 0)) & 0xFFFFFFFFFFFFFFFELL)
            + CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL) * v33;
LABEL_72:
        int8x16_t v23 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL) + v34;
        uint64_t v24 = a2[1].i64[0];
        uint64_t v25 = a2[1].i64[1];
        goto LABEL_73;
      }
LABEL_114:
      long long v71 = 0uLL;
      goto LABEL_115;
    }
    if ((int)result > 875836533)
    {
      if (result != 875836534)
      {
        int v11 = 1111970369;
LABEL_95:
        if (result != v11) {
          return result;
        }
        goto LABEL_96;
      }
    }
    else
    {
      if (result == 875704950) {
        goto LABEL_58;
      }
      if (result != 875836518) {
        return result;
      }
    }
    if (a4)
    {
      uint64_t v72 = a2[2].i64[1];
      size_t v73 = a2[2].i64[0] + CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v72;
      *(void *)a3 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v73;
      *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
      *(void *)(a3 + 24) = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
      uint64_t v74 = a2[2].i64[1];
      size_t v60 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL) * v74 + 2 * a2[2].i64[0];
      goto LABEL_112;
    }
    goto LABEL_114;
  }
  if ((int)result <= 2021077551)
  {
    if ((int)result <= 2016687215)
    {
      if ((int)result > 2016686641)
      {
        if (result != 2016686642)
        {
          if (result != 2016687156) {
            return result;
          }
          goto LABEL_91;
        }
        goto LABEL_70;
      }
      if (result != 1999843442)
      {
        int v13 = 2016686640;
        goto LABEL_42;
      }
    }
    else
    {
      if ((int)result > 2019963441)
      {
        if (result != 2019963442)
        {
          if (result != 2019963956)
          {
            int v10 = 2019964016;
            goto LABEL_88;
          }
          goto LABEL_91;
        }
LABEL_70:
        if (a4)
        {
          uint64_t v45 = a2[2].i64[1];
          size_t v46 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v45 + 2 * a2[2].i64[0];
          *(void *)a3 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v46;
          *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
          *(void *)(a3 + 24) = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
          uint64_t v47 = a2[2].i64[1];
          unint64_t v34 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL) * v47
              + 4 * ((a2[2].i64[0] + (unint64_t)(a2[2].i64[0] < 0)) >> 1);
          goto LABEL_72;
        }
        goto LABEL_114;
      }
      if (result != 2016687216)
      {
        int v13 = 2019963440;
LABEL_42:
        if (result != v13) {
          return result;
        }
        goto LABEL_43;
      }
    }
LABEL_89:
    if (a4)
    {
      uint64_t v55 = a2[2].i64[1];
      size_t v56 = CVPixelBufferGetBytesPerRow(a1) * v55 + 4 * a2[2].i64[0];
      *(void *)a3 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v56;
      *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
      size_t result = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
LABEL_99:
      *(void *)(a3 + 24) = result;
      return result;
    }
    goto LABEL_120;
  }
  if ((int)result <= 2033463351)
  {
    if ((int)result > 2021078067)
    {
      if (result != 2021078068)
      {
        int v10 = 2021078128;
LABEL_88:
        if (result != v10) {
          return result;
        }
        goto LABEL_89;
      }
LABEL_91:
      if (a4)
      {
        uint64_t v57 = a2[2].i64[1];
        size_t v58 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v57 + 2 * a2[2].i64[0];
        *(void *)a3 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v58;
        *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
        *(void *)(a3 + 24) = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
        uint64_t v59 = a2[2].i64[1];
        size_t v60 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL) * v59 + 4 * a2[2].i64[0];
LABEL_112:
        *(void *)(a3 + 32) = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL) + v60;
        *(int8x16_t *)(a3 + 40) = vextq_s8(a2[1], a2[1], 8uLL);
LABEL_113:
        size_t result = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        *(void *)(a3 + 56) = result;
        return result;
      }
      goto LABEL_114;
    }
    if (result != 2021077552)
    {
      if (result != 2021077554) {
        return result;
      }
      goto LABEL_70;
    }
LABEL_43:
    if (a4)
    {
      uint64_t v18 = a2[2].i64[1];
      size_t v19 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v18 + 2 * a2[2].i64[0];
      *(void *)a3 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v19;
      *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
      *(void *)(a3 + 24) = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
      uint64_t v20 = a2[2].i64[1];
      size_t v21 = v20 / 2 * CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
      unint64_t v22 = a2[2].i64[0] + (a2[2].i64[0] < 0);
      int8x16_t v23 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL) + 4 * (v22 >> 1) + v21;
      uint64_t v24 = a2[1].i64[0];
      uint64_t v25 = a2[1].i64[1] / 2;
LABEL_73:
      *(void *)(a3 + 32) = v23;
      *(void *)(a3 + 40) = v25;
      if (v24 >= 0) {
        uint64_t v48 = v24;
      }
      else {
        uint64_t v48 = v24 + 1;
      }
      *(void *)(a3 + 48) = v48 >> 1;
      goto LABEL_113;
    }
    goto LABEL_114;
  }
  if ((int)result <= 2033463855)
  {
    if (result != 2033463352)
    {
      if (result != 2033463606) {
        return result;
      }
      if (!a4) {
        goto LABEL_120;
      }
      uint64_t v29 = a2[2].i64[1];
      size_t v30 = CVPixelBufferGetBytesPerRow(a1) * v29 + 8 * a2[2].i64[0];
LABEL_98:
      *(void *)a3 = (char *)CVPixelBufferGetBaseAddress(a1) + v30;
      *(int8x16_t *)(a3 + 8) = vextq_s8(a2[1], a2[1], 8uLL);
      size_t result = CVPixelBufferGetBytesPerRow(a1);
      goto LABEL_99;
    }
    goto LABEL_96;
  }
  if (result != 2033463856)
  {
    if (result != 2033463858)
    {
      int v12 = 2033464372;
      goto LABEL_47;
    }
LABEL_100:
    if ((a4 & 1) == 0) {
      goto LABEL_109;
    }
    size_t v62 = 0;
    CFDictionaryRef v63 = (uint64_t *)(a3 + 16);
    do
    {
      uint64_t v64 = a2[2].i64[1];
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v62);
      uint64_t v66 = a2[2].i64[0];
      uint64_t v67 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v62);
      uint64_t v68 = a2[1].i64[0];
      uint64_t v69 = a2[1].i64[1];
      if (v68 >= 0) {
        uint64_t v70 = a2[1].i64[0];
      }
      else {
        uint64_t v70 = v68 + 1;
      }
      *(v63 - 2) = (uint64_t)&v67[(v66 >> (v62 != 0)) + BytesPerRowOfPlane * v64];
      *(v63 - 1) = v69;
      if (v62) {
        uint64_t v68 = v70 >> 1;
      }
      *CFDictionaryRef v63 = v68;
      size_t result = CVPixelBufferGetBytesPerRowOfPlane(a1, v62);
      v63[1] = result;
      ++v62;
      v63 += 4;
    }
    while (v62 != 3);
    return result;
  }
LABEL_79:
  if ((a4 & 1) == 0) {
    goto LABEL_109;
  }
  size_t v49 = 0;
  long long v50 = (uint64_t *)(a3 + 16);
  do
  {
    uint64_t v51 = a2[2].i64[1] >> (v49 != 0);
    size_t v52 = (a2[2].i64[0] >> (v49 != 0)) + v51 * CVPixelBufferGetBytesPerRowOfPlane(a1, v49);
    *(v50 - 2) = (uint64_t)CVPixelBufferGetBaseAddressOfPlane(a1, v49) + v52;
    uint64_t v53 = a2[1].i64[1];
    if (v49)
    {
      v53 /= 2;
      uint64_t v54 = a2[1].i64[0] / 2;
    }
    else
    {
      uint64_t v54 = a2[1].i64[0];
    }
    *(v50 - 1) = v53;
    *long long v50 = v54;
    size_t result = CVPixelBufferGetBytesPerRowOfPlane(a1, v49);
    v50[1] = result;
    ++v49;
    v50 += 4;
  }
  while (v49 != 3);
  return result;
}

size_t vt_CopyToOrFromPlanarBuffers(__CVBuffer *a1, void *a2, vImage_Buffer *a3, int a4, vImage_Flags a5)
{
  size_t result = CVPixelBufferGetPixelFormatType(a1);
  if ((int)result <= 2016686641)
  {
    if ((int)result > 1630697080)
    {
      if ((int)result > 1983000885)
      {
        if (result == 1983000886)
        {
          v207 = a2;
          uint64_t width = a3->width;
          size_t rowBytes = a3->rowBytes;
          uint64_t v60 = width + 2;
          if (width >= -1) {
            uint64_t v60 = width + 1;
          }
          uint64_t v204 = v60 >> 1;
          uint64_t data = (uint64_t)a3->data;
          uint64_t height = a3->height;
          size_t v63 = a3[2].rowBytes;
          uint64_t v64 = a1;
          CFTypeID v65 = a3[1].data;
          size_t v66 = a3[1].rowBytes;
          uint64_t v67 = a3[2].data;
          uint64_t v68 = v64;
          int IsPlanar = CVPixelBufferIsPlanar(v64);
          if (a4)
          {
            uint64_t v70 = v68;
            if (IsPlanar)
            {
              size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v68, 0);
              size_t result = (size_t)CVPixelBufferGetBaseAddressOfPlane(v70, 0);
            }
            else
            {
              size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(v68);
              size_t result = (size_t)CVPixelBufferGetBaseAddress(v70);
            }
            if (height >= 1)
            {
              uint64_t v139 = 0;
              size_t v140 = result + v207[5] * BytesPerRowOfPlane + 2 * v207[4];
              uint64_t v141 = v204;
              if (v204 <= 1) {
                uint64_t v141 = 1;
              }
              uint64_t v142 = 2 * v141;
              do
              {
                if (width >= 1)
                {
                  uint64_t v143 = 0;
                  uint64_t v144 = 0;
                  v145 = (unsigned char *)data;
                  do
                  {
                    v146 = &v67[v144];
                    v147 = &v65[v144];
                    unsigned char *v147 = *(unsigned char *)(v140 + v143);
                    v147[1] = *(unsigned char *)(v140 + v143 + 1);
                    unsigned char *v145 = *(unsigned char *)(v140 + v143 + 2);
                    v145[1] = *(unsigned char *)(v140 + v143 + 3);
                    unsigned char *v146 = *(unsigned char *)(v140 + v143 + 4);
                    v146[1] = *(unsigned char *)(v140 + v143 + 5);
                    v145[2] = *(unsigned char *)(v140 + v143 + 6);
                    v145[3] = *(unsigned char *)(v140 + v143 + 7);
                    v144 += 2;
                    v143 += 8;
                    v145 += 4;
                  }
                  while (v142 != v144);
                }
                v140 += BytesPerRowOfPlane;
                data += rowBytes;
                v65 += v66;
                v67 += v63;
                ++v139;
              }
              while (v139 != height);
            }
          }
          else
          {
            v126 = v68;
            if (IsPlanar)
            {
              size_t BytesPerRow = CVPixelBufferGetBytesPerRowOfPlane(v68, 0);
              size_t result = (size_t)CVPixelBufferGetBaseAddressOfPlane(v126, 0);
            }
            else
            {
              size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v68);
              size_t result = (size_t)CVPixelBufferGetBaseAddress(v126);
            }
            if (height >= 1)
            {
              uint64_t v154 = 0;
              size_t v155 = result + v207[5] * BytesPerRow + 2 * v207[4];
              uint64_t v156 = v204;
              if (v204 <= 1) {
                uint64_t v156 = 1;
              }
              uint64_t v157 = 2 * v156;
              do
              {
                if (width >= 1)
                {
                  uint64_t v158 = 0;
                  uint64_t v159 = 0;
                  v160 = (unsigned char *)data;
                  do
                  {
                    v161 = (unsigned char *)(v155 + v159);
                    unsigned char *v161 = v65[v158];
                    v161[1] = v65[v158 + 1];
                    v161[2] = *v160;
                    v161[3] = v160[1];
                    v161[4] = v67[v158];
                    v161[5] = v67[v158 + 1];
                    v161[6] = v160[2];
                    v161[7] = v160[3];
                    v159 += 8;
                    v158 += 2;
                    v160 += 4;
                  }
                  while (v157 != v158);
                }
                data += rowBytes;
                v65 += v66;
                v67 += v63;
                v155 += BytesPerRow;
                ++v154;
              }
              while (v154 != height);
            }
          }
          return result;
        }
        if (result != 1983131952)
        {
          v205 = a2;
          unsigned __int16 v12 = 12848;
          goto LABEL_27;
        }
        signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
        vImagePixelCount v74 = a3->height;
        vImagePixelCount v73 = a3->width;
        size_t v75 = CVPixelBufferGetBytesPerRow(a1);
        BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
        CFTypeID v77 = BaseAddress;
        if (a4)
        {
          if (PixelFormatType <= 2019963439)
          {
            if (PixelFormatType <= 2016686639)
            {
              if (PixelFormatType == 1378955371 || PixelFormatType == 1983131952) {
                goto LABEL_251;
              }
              int v162 = 1999843442;
              goto LABEL_250;
            }
            if (PixelFormatType > 2016687155)
            {
              if (PixelFormatType == 2016687156) {
                goto LABEL_251;
              }
              int v162 = 2016687216;
              goto LABEL_250;
            }
            if (PixelFormatType == 2016686640) {
              goto LABEL_228;
            }
            int v78 = 2016686642;
          }
          else
          {
            if (PixelFormatType <= 2021077551)
            {
              if (PixelFormatType <= 2019963955)
              {
                if (PixelFormatType != 2019963440)
                {
                  int v78 = 2019963442;
                  goto LABEL_199;
                }
LABEL_228:
                uint64_t v149 = a2[4];
                uint64_t v148 = a2[5] / 2;
                goto LABEL_229;
              }
              if (PixelFormatType == 2019963956)
              {
LABEL_251:
                uint64_t v164 = a2[5] * v75 + 8 * a2[4];
                goto LABEL_252;
              }
              int v162 = 2019964016;
LABEL_250:
              if (PixelFormatType != v162) {
                goto LABEL_253;
              }
              goto LABEL_251;
            }
            if (PixelFormatType > 2021078067)
            {
              if (PixelFormatType == 2021078128) {
                goto LABEL_251;
              }
              int v162 = 2021078068;
              goto LABEL_250;
            }
            if (PixelFormatType == 2021077552) {
              goto LABEL_228;
            }
            int v78 = 2021077554;
          }
LABEL_199:
          if (PixelFormatType == v78)
          {
            uint64_t v149 = a2[4];
            uint64_t v148 = a2[5];
LABEL_229:
            uint64_t v164 = ((v149 + (v149 < 0)) & 0xFFFFFFFFFFFFFFFELL) + v148 * v75;
LABEL_252:
            CFTypeID v77 = &BaseAddress[v164];
          }
LABEL_253:
          size_t result = CVPixelBufferGetBytesPerRow(a1);
          if (v73 && v74)
          {
            uint64_t v168 = 0;
            size_t v169 = a3[2].rowBytes;
            v170 = (char *)a3->data;
            size_t v171 = a3->rowBytes;
            v172 = (char *)a3[1].data;
            size_t v173 = a3[1].rowBytes;
            v174 = (char *)a3[2].data;
            do
            {
              for (uint64_t i = 0; i != v73; ++i)
              {
                unsigned int v176 = *(_DWORD *)&v77[4 * i];
                *(_WORD *)&v170[2 * i] = (v176 >> 2) & 0x3FF;
                *(_WORD *)&v172[2 * i] = (v176 >> 12) & 0x3FF;
                *(_WORD *)&v174[2 * i] = v176 >> 22;
              }
              v77 += result;
              v170 += v171;
              v172 += v173;
              v174 += v169;
              ++v168;
            }
            while (v168 != v74);
          }
          return result;
        }
        if (PixelFormatType <= 2016686639)
        {
          if (PixelFormatType == 1378955371 || PixelFormatType == 1983131952) {
            goto LABEL_235;
          }
          int v152 = 1999843442;
        }
        else
        {
          if (PixelFormatType <= 2016687155)
          {
            if (PixelFormatType == 2016686640)
            {
              uint64_t v129 = a2[4];
              uint64_t v128 = a2[5] / 2;
              goto LABEL_273;
            }
            if (PixelFormatType == 2016686642)
            {
              uint64_t v129 = a2[4];
              uint64_t v128 = a2[5];
LABEL_273:
              uint64_t v166 = ((v129 + (v129 < 0)) & 0xFFFFFFFFFFFFFFFELL) + v128 * v75;
              goto LABEL_274;
            }
LABEL_275:
            v186 = (unsigned __int16 *)a3->data;
            size_t v187 = a3->rowBytes;
            v188 = (unsigned __int16 *)a3[1].data;
            size_t v189 = a3[2].rowBytes;
            size_t v191 = a3[1].rowBytes;
            v190 = (unsigned __int16 *)a3[2].data;
            size_t result = CVPixelBufferGetBytesPerRow(a1);
            if (v73 && v74)
            {
              for (uint64_t j = 0; j != v74; ++j)
              {
                for (uint64_t k = 0; k != v73; ++k)
                  *(_DWORD *)&v77[4 * k] = (v188[k] << 12) | (4 * v186[k]) | (v190[k] << 22);
                v186 = (unsigned __int16 *)((char *)v186 + v187);
                v188 = (unsigned __int16 *)((char *)v188 + v191);
                v190 = (unsigned __int16 *)((char *)v190 + v189);
                v77 += result;
              }
            }
            return result;
          }
          if (PixelFormatType == 2016687216)
          {
LABEL_235:
            uint64_t v166 = a2[5] * v75 + 8 * a2[4];
LABEL_274:
            CFTypeID v77 = &BaseAddress[v166];
            goto LABEL_275;
          }
          int v152 = 2016687156;
        }
        if (PixelFormatType != v152) {
          goto LABEL_275;
        }
        goto LABEL_235;
      }
      v206 = a2;
      if (result != 1630697081)
      {
        if (result == 1983000880)
        {
          if (a4)
          {
            return (size_t)vt_Copy_v210_10bitBiPlanarYUV422(a1, (uint64_t)a2, (uint64_t *)a3);
          }
          else
          {
            return (size_t)vt_Copy_10bitBiPlanarYUV422_v210((uint64_t *)a3, a1, (uint64_t)a2);
          }
        }
        return result;
      }
LABEL_34:
      uint64_t v27 = a3->width;
      size_t v28 = a3->rowBytes;
      uint64_t v29 = v27 + 2;
      if (v27 >= -1) {
        uint64_t v29 = v27 + 1;
      }
      uint64_t v203 = v29 >> 1;
      uint64_t v31 = (uint64_t)a3->data;
      uint64_t v30 = a3->height;
      size_t v32 = a3[2].rowBytes;
      uint64_t v33 = a3[1].data;
      unint64_t v34 = a1;
      size_t v36 = a3[1].rowBytes;
      uint64_t v35 = a3[2].data;
      uint64_t v37 = v34;
      int v38 = CVPixelBufferIsPlanar(v34);
      if (a4)
      {
        v39 = v37;
        if (v38)
        {
          size_t v40 = CVPixelBufferGetBytesPerRowOfPlane(v37, 0);
          size_t result = (size_t)CVPixelBufferGetBaseAddressOfPlane(v39, 0);
        }
        else
        {
          size_t v40 = CVPixelBufferGetBytesPerRow(v37);
          size_t result = (size_t)CVPixelBufferGetBaseAddress(v39);
        }
        if (v30 >= 1)
        {
          uint64_t v98 = 0;
          size_t v99 = result + v206[5] * v40 + 2 * v206[4];
          uint64_t v100 = v203;
          if (v203 <= 1) {
            uint64_t v100 = 1;
          }
          do
          {
            if (v27 >= 1)
            {
              uint64_t v101 = 0;
              uint64_t v102 = 0;
              CFTypeID v103 = (unsigned char *)v31;
              do
              {
                v33[v102] = *(unsigned char *)(v99 + v101);
                *CFTypeID v103 = *(unsigned char *)(v99 + v101 + 1);
                v35[v102] = *(unsigned char *)(v99 + v101 + 2);
                v103[1] = *(unsigned char *)(v99 + v101 + 3);
                ++v102;
                v101 += 4;
                v103 += 2;
              }
              while (v100 != v102);
            }
            v99 += v40;
            v31 += v28;
            v33 += v36;
            v35 += v32;
            ++v98;
          }
          while (v98 != v30);
        }
      }
      else
      {
        uint64_t v55 = v37;
        if (v38)
        {
          size_t v56 = CVPixelBufferGetBytesPerRowOfPlane(v37, 0);
          size_t result = (size_t)CVPixelBufferGetBaseAddressOfPlane(v55, 0);
        }
        else
        {
          size_t v56 = CVPixelBufferGetBytesPerRow(v37);
          size_t result = (size_t)CVPixelBufferGetBaseAddress(v55);
        }
        if (v30 >= 1)
        {
          uint64_t v119 = 0;
          size_t v120 = result + v206[5] * v56 + 2 * v206[4];
          uint64_t v121 = v203;
          if (v203 <= 1) {
            uint64_t v121 = 1;
          }
          do
          {
            if (v27 >= 1)
            {
              uint64_t v122 = 0;
              uint64_t v123 = 0;
              v124 = (unsigned char *)v31;
              do
              {
                v125 = (unsigned char *)(v120 + v122);
                unsigned char *v125 = v33[v123];
                v125[1] = *v124;
                v125[2] = v35[v123];
                v125[3] = v124[1];
                ++v123;
                v122 += 4;
                v124 += 2;
              }
              while (v121 != v123);
            }
            v31 += v28;
            v33 += v36;
            v35 += v32;
            v120 += v56;
            ++v119;
          }
          while (v119 != v30);
        }
      }
      return result;
    }
    if ((int)result <= 1378955370)
    {
      v206 = a2;
      if (result != 846624102 && result != 846624121) {
        return result;
      }
      goto LABEL_34;
    }
    if (result != 1378955371)
    {
      if (result == 1380411457)
      {
        if (a4)
        {
          vImagePixelCount v50 = 4 * a2[2];
          src.uint64_t height = a2[3];
          src.uint64_t width = v50;
          src.size_t rowBytes = CVPixelBufferGetBytesPerRow(a1);
          src.uint64_t data = (char *)CVPixelBufferGetBaseAddress(a1) + 8 * a2[4] + a2[5] * src.rowBytes;
          a3->width *= 4;
          size_t result = vImageConvert_Planar16FtoPlanarF(&src, a3, a5);
        }
        else
        {
          src.uint64_t height = CVPixelBufferGetHeight(a1);
          src.uint64_t width = 4 * CVPixelBufferGetWidth(a1);
          src.size_t rowBytes = CVPixelBufferGetBytesPerRow(a1);
          src.uint64_t data = (char *)CVPixelBufferGetBaseAddress(a1) + 8 * a2[4] + a2[5] * src.rowBytes;
          a3->width *= 4;
          size_t result = vImageConvert_PlanarFtoPlanar16F(a3, &src, a5);
        }
        a3->width >>= 2;
      }
      return result;
    }
    signed int v79 = CVPixelBufferGetPixelFormatType(a1);
    vImagePixelCount v81 = a3->height;
    vImagePixelCount v80 = a3->width;
    size_t v82 = CVPixelBufferGetBytesPerRow(a1);
    CFTypeID v83 = (char *)CVPixelBufferGetBaseAddress(a1);
    int v84 = v83;
    if (a4)
    {
      if (v79 <= 2019963439)
      {
        if (v79 <= 2016686639)
        {
          if (v79 == 1378955371 || v79 == 1983131952) {
            goto LABEL_263;
          }
          int v163 = 1999843442;
          goto LABEL_262;
        }
        if (v79 > 2016687155)
        {
          if (v79 == 2016687156) {
            goto LABEL_263;
          }
          int v163 = 2016687216;
          goto LABEL_262;
        }
        if (v79 == 2016686640) {
          goto LABEL_230;
        }
        int v85 = 2016686642;
      }
      else
      {
        if (v79 <= 2021077551)
        {
          if (v79 <= 2019963955)
          {
            if (v79 != 2019963440)
            {
              int v85 = 2019963442;
              goto LABEL_204;
            }
LABEL_230:
            uint64_t v151 = a2[4];
            uint64_t v150 = a2[5] / 2;
            goto LABEL_231;
          }
          if (v79 == 2019963956)
          {
LABEL_263:
            uint64_t v165 = a2[5] * v82 + 8 * a2[4];
            goto LABEL_264;
          }
          int v163 = 2019964016;
LABEL_262:
          if (v79 != v163) {
            goto LABEL_265;
          }
          goto LABEL_263;
        }
        if (v79 > 2021078067)
        {
          if (v79 == 2021078128) {
            goto LABEL_263;
          }
          int v163 = 2021078068;
          goto LABEL_262;
        }
        if (v79 == 2021077552) {
          goto LABEL_230;
        }
        int v85 = 2021077554;
      }
LABEL_204:
      if (v79 == v85)
      {
        uint64_t v151 = a2[4];
        uint64_t v150 = a2[5];
LABEL_231:
        uint64_t v165 = ((v151 + (v151 < 0)) & 0xFFFFFFFFFFFFFFFELL) + v150 * v82;
LABEL_264:
        int v84 = &v83[v165];
      }
LABEL_265:
      size_t result = CVPixelBufferGetBytesPerRow(a1);
      if (v80 && v81)
      {
        uint64_t v177 = 0;
        size_t v178 = a3[2].rowBytes;
        v179 = (char *)a3->data;
        size_t v180 = a3->rowBytes;
        v181 = (char *)a3[1].data;
        size_t v182 = a3[1].rowBytes;
        v183 = (char *)a3[2].data;
        do
        {
          for (uint64_t m = 0; m != v80; ++m)
          {
            unsigned int v185 = bswap32(*(_DWORD *)&v84[4 * m]);
            *(_WORD *)&v179[2 * m] = (v185 >> 2) & 0x3FF;
            *(_WORD *)&v181[2 * m] = (v185 >> 12) & 0x3FF;
            *(_WORD *)&v183[2 * m] = v185 >> 22;
          }
          v84 += result;
          v179 += v180;
          v181 += v182;
          v183 += v178;
          ++v177;
        }
        while (v177 != v81);
      }
      return result;
    }
    if (v79 <= 2016686639)
    {
      if (v79 == 1378955371 || v79 == 1983131952) {
        goto LABEL_239;
      }
      int v153 = 1999843442;
    }
    else
    {
      if (v79 <= 2016687155)
      {
        if (v79 == 2016686640)
        {
          uint64_t v131 = a2[4];
          uint64_t v130 = a2[5] / 2;
          goto LABEL_283;
        }
        if (v79 == 2016686642)
        {
          uint64_t v131 = a2[4];
          uint64_t v130 = a2[5];
LABEL_283:
          uint64_t v167 = ((v131 + (v131 < 0)) & 0xFFFFFFFFFFFFFFFELL) + v130 * v82;
          goto LABEL_284;
        }
LABEL_285:
        v194 = (unsigned __int16 *)a3->data;
        size_t v195 = a3->rowBytes;
        v196 = (unsigned __int16 *)a3[1].data;
        size_t v197 = a3[2].rowBytes;
        size_t v199 = a3[1].rowBytes;
        v198 = (unsigned __int16 *)a3[2].data;
        size_t result = CVPixelBufferGetBytesPerRow(a1);
        if (v80 && v81)
        {
          for (uint64_t n = 0; n != v81; ++n)
          {
            for (iuint64_t i = 0; ii != v80; ++ii)
              *(_DWORD *)&v84[4 * ii] = bswap32((v196[ii] << 12) | (4 * v194[ii]) | (v198[ii] << 22));
            v194 = (unsigned __int16 *)((char *)v194 + v195);
            v196 = (unsigned __int16 *)((char *)v196 + v199);
            v198 = (unsigned __int16 *)((char *)v198 + v197);
            v84 += result;
          }
        }
        return result;
      }
      if (v79 == 2016687216)
      {
LABEL_239:
        uint64_t v167 = a2[5] * v82 + 8 * a2[4];
LABEL_284:
        int v84 = &v83[v167];
        goto LABEL_285;
      }
      int v153 = 2016687156;
    }
    if (v79 != v153) {
      goto LABEL_285;
    }
    goto LABEL_239;
  }
  v205 = a2;
  if ((int)result <= 2021077551)
  {
    if ((int)result > 2019963439)
    {
      if (result == 2019963440 || result == 2019963442) {
        goto LABEL_42;
      }
      int v11 = 2019963956;
LABEL_41:
      if (result != v11) {
        return result;
      }
LABEL_42:
      signed int v41 = CVPixelBufferGetPixelFormatType(a1);
      vImagePixelCount v43 = a3[1].height;
      vImagePixelCount v42 = a3[1].width;
      size_t v44 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
      size_t v46 = BaseAddressOfPlane;
      if (a4)
      {
        if (v41 <= 2019963439)
        {
          if (v41 <= 2016686639)
          {
            if (v41 == 1378955371 || v41 == 1983131952) {
              goto LABEL_106;
            }
            int v54 = 1999843442;
            goto LABEL_105;
          }
          if (v41 > 2016687155)
          {
            if (v41 == 2016687156) {
              goto LABEL_106;
            }
            int v54 = 2016687216;
            goto LABEL_105;
          }
          if (v41 == 2016686640) {
            goto LABEL_74;
          }
          int v47 = 2016686642;
        }
        else
        {
          if (v41 <= 2021077551)
          {
            if (v41 <= 2019963955)
            {
              if (v41 != 2019963440)
              {
                int v47 = 2019963442;
                goto LABEL_64;
              }
LABEL_74:
              uint64_t v52 = v205[4];
              uint64_t v51 = v205[5] / 2;
              goto LABEL_75;
            }
            if (v41 == 2019963956)
            {
LABEL_106:
              uint64_t v57 = v205[5] * v44 + 8 * v205[4];
              goto LABEL_107;
            }
            int v54 = 2019964016;
LABEL_105:
            if (v41 != v54) {
              goto LABEL_108;
            }
            goto LABEL_106;
          }
          if (v41 > 2021078067)
          {
            if (v41 == 2021078128) {
              goto LABEL_106;
            }
            int v54 = 2021078068;
            goto LABEL_105;
          }
          if (v41 == 2021077552) {
            goto LABEL_74;
          }
          int v47 = 2021077554;
        }
LABEL_64:
        if (v41 == v47)
        {
          uint64_t v52 = v205[4];
          uint64_t v51 = v205[5];
LABEL_75:
          uint64_t v57 = ((v52 + (v52 < 0)) & 0xFFFFFFFFFFFFFFFELL) + v51 * v44;
LABEL_107:
          size_t v46 = &BaseAddressOfPlane[v57];
        }
LABEL_108:
        size_t result = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        if (v42 && v43)
        {
          uint64_t v89 = 0;
          size_t v90 = a3[2].rowBytes;
          v91 = (char *)a3[1].data;
          size_t v92 = a3[1].rowBytes;
          int v93 = (char *)a3[2].data;
          do
          {
            uint64_t v94 = 0;
            vImagePixelCount v95 = v42;
            do
            {
              int v96 = &v46[2 * v94];
              __int16 v97 = *(_WORD *)v96;
              LOWORD(v96) = *((_WORD *)v96 + 1);
              *(_WORD *)&v91[v94] = v97;
              *(_WORD *)&v93[v94] = (_WORD)v96;
              v94 += 2;
              --v95;
            }
            while (v95);
            v46 += result;
            v91 += v92;
            v93 += v90;
            ++v89;
          }
          while (v89 != v43);
        }
        return result;
      }
      if (v41 <= 2016686639)
      {
        if (v41 == 1378955371 || v41 == 1983131952) {
          goto LABEL_96;
        }
        int v53 = 1999843442;
      }
      else
      {
        if (v41 <= 2016687155)
        {
          if (v41 == 2016686640)
          {
            uint64_t v49 = v205[4];
            uint64_t v48 = v205[5] / 2;
            goto LABEL_134;
          }
          if (v41 == 2016686642)
          {
            uint64_t v49 = v205[4];
            uint64_t v48 = v205[5];
LABEL_134:
            uint64_t v86 = ((v49 + (v49 < 0)) & 0xFFFFFFFFFFFFFFFELL) + v48 * v44;
            goto LABEL_135;
          }
LABEL_136:
          CGRect v110 = (char *)a3[1].data;
          size_t v111 = a3[2].rowBytes;
          size_t v113 = a3[1].rowBytes;
          v112 = (char *)a3[2].data;
          size_t result = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
          if (v42 && v43)
          {
            for (juint64_t j = 0; jj != v43; ++jj)
            {
              uint64_t v115 = 0;
              vImagePixelCount v116 = v42;
              do
              {
                __int16 v117 = *(_WORD *)&v112[v115];
                v118 = &v46[2 * v115];
                *(_WORD *)v118 = *(_WORD *)&v110[v115];
                *((_WORD *)v118 + 1) = v117;
                v115 += 2;
                --v116;
              }
              while (v116);
              v110 += v113;
              v112 += v111;
              v46 += result;
            }
          }
          return result;
        }
        if (v41 == 2016687216)
        {
LABEL_96:
          uint64_t v86 = v205[5] * v44 + 8 * v205[4];
LABEL_135:
          size_t v46 = &BaseAddressOfPlane[v86];
          goto LABEL_136;
        }
        int v53 = 2016687156;
      }
      if (v41 != v53) {
        goto LABEL_136;
      }
      goto LABEL_96;
    }
    if (result == 2016686642) {
      goto LABEL_42;
    }
    unsigned __int16 v12 = 13364;
LABEL_27:
    int v11 = v12 | 0x78340000;
    goto LABEL_41;
  }
  if ((int)result <= 2021078067)
  {
    if (result == 2021077552) {
      goto LABEL_42;
    }
    int v11 = 2021077554;
    goto LABEL_41;
  }
  if (result == 2021078068) {
    goto LABEL_42;
  }
  if (result == 2037741158 || result == 2037741171)
  {
    uint64_t v13 = a3->width;
    size_t v14 = a3->rowBytes;
    uint64_t v15 = v13 + 2;
    if (v13 >= -1) {
      uint64_t v15 = v13 + 1;
    }
    uint64_t v202 = v15 >> 1;
    size_t v17 = a3->data;
    uint64_t v16 = a3->height;
    size_t v18 = a3[2].rowBytes;
    size_t v19 = a3[1].data;
    uint64_t v20 = a1;
    size_t v22 = a3[1].rowBytes;
    size_t v21 = a3[2].data;
    int8x16_t v23 = v20;
    int v24 = CVPixelBufferIsPlanar(v20);
    if (a4)
    {
      uint64_t v25 = v23;
      if (v24)
      {
        size_t v26 = CVPixelBufferGetBytesPerRowOfPlane(v23, 0);
        size_t result = (size_t)CVPixelBufferGetBaseAddressOfPlane(v25, 0);
      }
      else
      {
        size_t v26 = CVPixelBufferGetBytesPerRow(v23);
        size_t result = (size_t)CVPixelBufferGetBaseAddress(v25);
      }
      if (v16 >= 1)
      {
        uint64_t v104 = 0;
        size_t v105 = result + v205[5] * v26 + 2 * v205[4];
        uint64_t v106 = v202;
        if (v202 <= 1) {
          uint64_t v106 = 1;
        }
        do
        {
          if (v13 >= 1)
          {
            uint64_t v107 = 0;
            uint64_t v108 = 0;
            CGRect v109 = v17;
            do
            {
              *CGRect v109 = *(unsigned char *)(v105 + v107);
              v19[v108] = *(unsigned char *)(v105 + v107 + 1);
              v109[1] = *(unsigned char *)(v105 + v107 + 2);
              v21[v108++] = *(unsigned char *)(v105 + v107 + 3);
              v107 += 4;
              v109 += 2;
            }
            while (v106 != v108);
          }
          v105 += v26;
          v17 += v14;
          v19 += v22;
          v21 += v18;
          ++v104;
        }
        while (v104 != v16);
      }
    }
    else
    {
      uint64_t v87 = v23;
      if (v24)
      {
        size_t v88 = CVPixelBufferGetBytesPerRowOfPlane(v23, 0);
        size_t result = (size_t)CVPixelBufferGetBaseAddressOfPlane(v87, 0);
      }
      else
      {
        size_t v88 = CVPixelBufferGetBytesPerRow(v23);
        size_t result = (size_t)CVPixelBufferGetBaseAddress(v87);
      }
      if (v16 >= 1)
      {
        uint64_t v132 = 0;
        size_t v133 = result + v205[5] * v88 + 2 * v205[4];
        uint64_t v134 = v202;
        if (v202 <= 1) {
          uint64_t v134 = 1;
        }
        do
        {
          if (v13 >= 1)
          {
            uint64_t v135 = 0;
            uint64_t v136 = 0;
            v137 = v17;
            do
            {
              v138 = (unsigned char *)(v133 + v135);
              unsigned char *v138 = *v137;
              v138[1] = v19[v136];
              v138[2] = v137[1];
              v138[3] = v21[v136++];
              v135 += 4;
              v137 += 2;
            }
            while (v134 != v136);
          }
          v17 += v14;
          v19 += v22;
          v21 += v18;
          v133 += v88;
          ++v132;
        }
        while (v132 != v16);
      }
    }
  }
  return result;
}

size_t scaleOrSetAlpha8(__CVBuffer *a1, int8x16_t *a2, CVPixelBufferRef pixelBuffer, void *a4, uint64_t a5, int a6, int a7, int a8, int a9)
{
  if (!a8) {
    return 0;
  }
  uint64_t v16 = a4[5];
  size_t v17 = a4[4] + CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL) * v16;
  size_t v18 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL) + v17;
  size_t v21 = a4 + 2;
  size_t v19 = a4[2];
  uint64_t v20 = v21[1];
  v28[0] = v18;
  v28[1] = v20;
  void v28[2] = v19;
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
  v28[3] = BytesPerRowOfPlane;
  if (a7)
  {
    uint64_t v23 = a2[2].i64[1];
    size_t v24 = a2[2].i64[0] + CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL) * v23;
    uint64_t v29 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL) + v24;
    int8x16_t v30 = vextq_s8(a2[1], a2[1], 8uLL);
    size_t v31 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
    return vtScale(&v29, v28, (void **)(a5 + 272), a9 | 8u, MEMORY[0x1E4F17130], a6);
  }
  else
  {
    if (v20 >= 1)
    {
      size_t v26 = BytesPerRowOfPlane;
      unint64_t v27 = v20 + 1;
      do
      {
        memset(v18, 255, v19);
        v18 += v26;
        --v27;
      }
      while (v27 > 1);
    }
    return 0;
  }
}

size_t vt_Scale_8_Y_and_UVPlanes(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  return vt_ScaleCommon_Y_and_UVPlanes(a1, a2, a3, a4, a5, a6, 1, a10);
}

size_t vt_ScaleCommon_Y_and_UVPlanes(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, int a7, int a8)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  OSType v15 = CVPixelBufferGetPixelFormatType(a3);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  vt_SetupOrCleanupPlanarBuffers(a1, a2, a5, 1);
  unint64_t v27 = a4;
  vt_SetupOrCleanupPlanarBuffers(a3, a4, a5 + 128, 1);
  if (CVPixelBufferGetPixelFormatType(a1) == 1983000880) {
    vt_Copy_v210_10bitBiPlanarYUV422(a1, (uint64_t)a2, (uint64_t *)a5);
  }
  uint64_t v16 = (uint64_t (*)(void *, void *, void *, uint64_t))MEMORY[0x1E4F17110];
  size_t v17 = (uint64_t (*)(void *, void *, void *, uint64_t))MEMORY[0x1E4F17128];
  if (!a7) {
    goto LABEL_10;
  }
  uint64_t v16 = (uint64_t (*)(void *, void *, void *, uint64_t))MEMORY[0x1E4F17118];
  size_t v17 = (uint64_t (*)(void *, void *, void *, uint64_t))MEMORY[0x1E4F17130];
  if (v15 != 1982882104) {
    goto LABEL_10;
  }
  uint64_t v16 = (uint64_t (*)(void *, void *, void *, uint64_t))MEMORY[0x1E4F17118];
  size_t v17 = (uint64_t (*)(void *, void *, void *, uint64_t))MEMORY[0x1E4F17130];
  if (PixelFormatType != 1982882104)
  {
    uint64_t v16 = (uint64_t (*)(void *, void *, void *, uint64_t))MEMORY[0x1E4F17118];
    size_t v17 = (uint64_t (*)(void *, void *, void *, uint64_t))MEMORY[0x1E4F17130];
    if (*(void *)(a5 + 232))
    {
      unint64_t v18 = 0;
      size_t v19 = *(char **)(a5 + 224);
      do
      {
        memset(v19, 255, *(void *)(a5 + 240));
        v19 += *(void *)(a5 + 248);
        ++v18;
        uint64_t v16 = (uint64_t (*)(void *, void *, void *, uint64_t))MEMORY[0x1E4F17118];
        size_t v17 = (uint64_t (*)(void *, void *, void *, uint64_t))MEMORY[0x1E4F17130];
      }
      while (v18 < *(void *)(a5 + 232));
    }
LABEL_10:
    uint64_t v23 = 0;
    char v24 = 1;
    goto LABEL_11;
  }
  char v24 = 0;
  uint64_t v23 = (uint64_t (*)(void *, void *, void *, uint64_t))MEMORY[0x1E4F17130];
LABEL_11:
  uint64_t v20 = a8 | 8u;
  size_t v21 = vtScale((void *)a5, (void *)(a5 + 128), (void **)(a5 + 256), v20, v17, a6);
  if (!v21)
  {
    size_t v21 = vtScale((void *)(a5 + 32), (void *)(a5 + 160), (void **)(a5 + 264), v20, v16, a6);
    if (!v21)
    {
      if (v24) {
        size_t v21 = 0;
      }
      else {
        size_t v21 = vtScale((void *)(a5 + 96), (void *)(a5 + 224), (void **)(a5 + 256), v20, v23, a6);
      }
      if (CVPixelBufferGetPixelFormatType(a3) == 1983000880) {
        vt_Copy_10bitBiPlanarYUV422_v210((uint64_t *)(a5 + 128), a3, (uint64_t)v27);
      }
    }
  }
  vt_SetupOrCleanupPlanarBuffers(a1, a2, a5, 0);
  vt_SetupOrCleanupPlanarBuffers(a3, v27, a5 + 128, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v21;
}

size_t vt_Scale_16_Y_and_UVPlanes(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  return vt_ScaleCommon_Y_and_UVPlanes(a1, a2, a3, a4, a5, a6, 0, a10);
}

size_t vt_Scale_HalfFloat_Y_and_UVPlanes(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  OSType v16 = CVPixelBufferGetPixelFormatType(a3);
  if (v16 == 1751527984) {
    uint64_t v17 = 2;
  }
  else {
    uint64_t v17 = 1;
  }
  if (v16 == 1751527984 || v16 == 1751527986) {
    uint64_t v19 = 2;
  }
  else {
    uint64_t v19 = 1;
  }
  if ((PixelFormatType & 0xFFFFFFFD) == 0x68663230) {
    uint64_t v20 = 2;
  }
  else {
    uint64_t v20 = 1;
  }
  if (PixelFormatType == 1751527984) {
    uint64_t v21 = 2;
  }
  else {
    uint64_t v21 = 1;
  }
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  uint64_t v22 = a2[2].i64[1];
  size_t v23 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v22 + 2 * a2[2].i64[0];
  size_t v44 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v23;
  int8x16_t v45 = vextq_s8(a2[1], a2[1], 8uLL);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  uint64_t v24 = a2[2].i64[1];
  size_t v25 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL) * v24 + 4 * a2[2].i64[0];
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  uint64_t v27 = a2[1].i64[0];
  uint64_t v28 = a2[1].i64[1] / v21;
  v43[0] = &BaseAddressOfPlane[v25];
  v43[1] = v28;
  v43[2] = v27 / v20;
  v43[3] = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  uint64_t v29 = a4[2].i64[1];
  size_t v30 = CVPixelBufferGetBytesPerRowOfPlane(a3, 0) * v29 + 2 * a4[2].i64[0];
  size_t v40 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v30;
  int8x16_t v41 = vextq_s8(a4[1], a4[1], 8uLL);
  size_t v42 = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  uint64_t v31 = a4[2].i64[1];
  size_t v32 = CVPixelBufferGetBytesPerRowOfPlane(a3, 1uLL) * v31 + 4 * a4[2].i64[0];
  uint64_t v33 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 1uLL) + v32;
  uint64_t v34 = a4[1].i64[0];
  uint64_t v35 = a4[1].i64[1] / v17;
  v39[0] = v33;
  v39[1] = v35;
  v39[2] = v34 / v19;
  v39[3] = CVPixelBufferGetBytesPerRowOfPlane(a3, 1uLL);
  size_t v36 = vtScale(&v44, &v40, (void **)(a5 + 256), a10 | 8u, MEMORY[0x1E4F17120], a6);
  if (!v36) {
    size_t v36 = vtScale(v43, v39, (void **)(a5 + 264), a10 | 8u, MEMORY[0x1E4F17108], a6);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v36;
}

size_t vt_Scale_101010_Together(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, int a10)
{
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  uint64_t v18 = a2[2].i64[1];
  size_t v19 = CVPixelBufferGetBytesPerRow(a1) * v18 + 4 * a2[2].i64[0];
  uint64_t v27 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v19;
  int8x16_t v28 = vextq_s8(a2[1], a2[1], 8uLL);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  uint64_t v20 = a4[2].i64[1];
  size_t v21 = CVPixelBufferGetBytesPerRow(a3) * v20 + 4 * a4[2].i64[0];
  uint64_t v24 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v21;
  int8x16_t v25 = vextq_s8(a4[1], a4[1], 8uLL);
  size_t v26 = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  size_t v22 = vtScale(&v27, &v24, (void **)(a5 + 256), a10 | 8u, MEMORY[0x1E4F17140], a6);
  if (!v22) {
    scaleOrSetAlpha8(a1, a2, a3, a4, a5, a6, a7, a8, a10);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v22;
}

size_t vt_Scale_16ARGB_Together(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  uint64_t v16 = a2[2].i64[1];
  size_t v17 = CVPixelBufferGetBytesPerRow(a1) * v16 + 8 * a2[2].i64[0];
  int8x16_t v25 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v17;
  int8x16_t v26 = vextq_s8(a2[1], a2[1], 8uLL);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  uint64_t v18 = a4[2].i64[1];
  size_t v19 = CVPixelBufferGetBytesPerRow(a3) * v18 + 8 * a4[2].i64[0];
  size_t v22 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v19;
  int8x16_t v23 = vextq_s8(a4[1], a4[1], 8uLL);
  size_t v24 = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  size_t v20 = vtScale(&v25, &v22, (void **)(a5 + 256), a10 | 8u, MEMORY[0x1E4F170F0], a6);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v20;
}

size_t vt_Scale_HalfFloatRGBA_Together(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  uint64_t v16 = a2[2].i64[1];
  size_t v17 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0) * v16 + 8 * a2[2].i64[0];
  int8x16_t v25 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0) + v17;
  int8x16_t v26 = vextq_s8(a2[1], a2[1], 8uLL);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  uint64_t v18 = a4[2].i64[1];
  size_t v19 = CVPixelBufferGetBytesPerRowOfPlane(a3, 0) * v18 + 8 * a4[2].i64[0];
  size_t v22 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, 0) + v19;
  int8x16_t v23 = vextq_s8(a4[1], a4[1], 8uLL);
  size_t v24 = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
  size_t v20 = vtScale(&v25, &v22, (void **)(a5 + 256), a10 | 8u, MEMORY[0x1E4F170E8], a6);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v20;
}

size_t vt_Scale_floatARGB_Together(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, vImage_Buffer *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, vImage_Flags a10)
{
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  vt_SetupOrCleanupPlanarBuffers(a1, a2, (uint64_t)a5, 1);
  vt_CopyToOrFromPlanarBuffers(a1, a2, a5, 1, a10);
  vt_SetupOrCleanupPlanarBuffers(a3, a4, (uint64_t)&a5[4], 1);
  size_t v16 = vtScale(a5, &a5[4].data, &a5[8].data, a10 | 8, MEMORY[0x1E4F17100], a6);
  if (!v16) {
    vt_CopyToOrFromPlanarBuffers(a3, a4, a5 + 4, 0, a10);
  }
  vt_SetupOrCleanupPlanarBuffers(a1, a2, (uint64_t)a5, 0);
  vt_SetupOrCleanupPlanarBuffers(a3, a4, (uint64_t)&a5[4], 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v16;
}

uint64_t VTPixelTransferSessionCreateScalingParameters(__CVBuffer *a1, unint64_t a2, unint64_t a3, __CFString *a4, long long *a5, long long *a6, const void *a7, const void *a8, uint64_t a9, void *a10, void *a11, CFDictionaryRef *a12, const __CFNumber **a13)
{
  unint64_t v81 = 0;
  *(void *)size_t v82 = 0;
  uint64_t v79 = 0;
  unint64_t v80 = 0;
  uint64_t v78 = 0;
  uint64_t v77 = 0;
  __int16 v76 = 0;
  CFTypeRef v20 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
  int Width = CVPixelBufferGetWidth(a1);
  int Height = CVPixelBufferGetHeight(a1);
  CFTypeRef v69 = v20;
  vtBufferGetCleanRect(Width, Height, v20, &v82[1], v82, (int *)&v81 + 1, (int *)&v81, (int *)&v80 + 1, (int *)&v80);
  long long v23 = a5[1];
  long long v73 = *a5;
  long long v74 = v23;
  long long v75 = a5[2];
  uint64_t v24 = vtBufferApplyCropToRect(&v73, SHIDWORD(v81), v81, SHIDWORD(v80), v80, (_DWORD *)&v81 + 1, &v81, (_DWORD *)&v80 + 1, (int *)&v80, (char *)&v76 + 1);
  if (v24
    || (unint64_t v25 = a2,
        CleanRect = vtBufferGetCleanRect(a2, a3, a7, (int *)&v79 + 1, (int *)&v79, (int *)&v78 + 1, (int *)&v78, (int *)&v77 + 1, (int *)&v77), v27 = a6[1], v73 = *a6, v74 = v27, v75 = a6[2], uint64_t v24 = vtBufferApplyCropToRect(&v73, SHIDWORD(v78), v78, SHIDWORD(v77), v77,
                (_DWORD *)&v78 + 1,
                &v78,
                (_DWORD *)&v77 + 1,
                (int *)&v77,
                (char *)&v76),
        v24))
  {
    uint64_t v49 = v24;
    goto LABEL_54;
  }
  if (v82[1] && v82[0] && HIDWORD(v79) && v79)
  {
    if (*(void *)v82 != v79)
    {
      vtRoundDimensionsToPixelBlockBoundary();
      vtRoundDimensionsToPixelBlockBoundary();
    }
    if ((_BYTE)v76) {
      int8x16_t v28 = @"CropSourceToCleanAperture";
    }
    else {
      int8x16_t v28 = a4;
    }
    if (v28) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = @"Normal";
    }
    if (CFEqual(v29, @"CropSourceToCleanAperture"))
    {
      if (CleanRect) {
        *a12 = (CFDictionaryRef)CFRetain(a7);
      }
      if (a8) {
        *a13 = (const __CFNumber *)CFRetain(a8);
      }
      goto LABEL_50;
    }
    if (CFEqual(v29, @"Letterbox"))
    {
      double v72 = 0.0;
      *(void *)&long long v73 = 0;
      double v70 = 0.0;
      double v71 = 0.0;
      CFTypeRef v30 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24B98], 0);
      if (CleanRect) {
        *a12 = (CFDictionaryRef)CFRetain(a7);
      }
      int v32 = v80;
      int v31 = HIDWORD(v80);
      vtBufferGetPixelAndPictureAspectRatio((CFTypeID)v30, SHIDWORD(v80), v80, (double *)&v73, &v71);
      uint64_t v33 = a8;
      if (a8) {
        CFTypeID v34 = (CFTypeID)a8;
      }
      else {
        CFTypeID v34 = (CFTypeID)v30;
      }
      int v35 = HIDWORD(v77);
      int v36 = v77;
      vtBufferGetPixelAndPictureAspectRatio(v34, SHIDWORD(v77), v77, &v72, &v70);
      if (a8 || (uint64_t v33 = v30) != 0) {
        *a13 = (const __CFNumber *)CFRetain(v33);
      }
      if (v71 <= v70)
      {
        if (v71 >= v70
          || (int v45 = vcvtmd_s64_f64((double)v35 - *(double *)&v73 * (double)(v36 * v31) / (v72 * (double)v32) + 0.5),
              v45 < 1))
        {
LABEL_48:
          if (v30) {
            CFRelease(v30);
          }
          goto LABEL_50;
        }
        HIDWORD(v78) += v45 >> 1;
        vtRoundDimensionsToPixelBlockBoundary();
        HIDWORD(v77) = v35 - v45;
      }
      else
      {
        int v37 = vcvtmd_s64_f64((double)v36 - v72 * (double)(v35 * v32) / (*(double *)&v73 * (double)v31) + 0.5);
        if (v37 < 1) {
          goto LABEL_48;
        }
        LODWORD(v78) = v78 + (v37 >> 1);
        vtRoundDimensionsToPixelBlockBoundary();
        LODWORD(v77) = v36 - v37;
      }
      vtRoundDimensionsToPixelBlockBoundary();
      goto LABEL_48;
    }
    if (CFEqual(v29, @"Trim"))
    {
      double v72 = 0.0;
      *(void *)&long long v73 = 0;
      double v70 = 0.0;
      double v71 = 0.0;
      CFTypeRef v30 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24B98], 0);
      if (CleanRect) {
        *a12 = (CFDictionaryRef)CFRetain(a7);
      }
      int v39 = v80;
      int v38 = HIDWORD(v80);
      vtBufferGetPixelAndPictureAspectRatio((CFTypeID)v30, SHIDWORD(v80), v80, (double *)&v73, &v71);
      size_t v40 = a8;
      if (a8) {
        CFTypeID v41 = (CFTypeID)a8;
      }
      else {
        CFTypeID v41 = (CFTypeID)v30;
      }
      int v42 = HIDWORD(v77);
      int v43 = v77;
      vtBufferGetPixelAndPictureAspectRatio(v41, SHIDWORD(v77), v77, &v72, &v70);
      if (a8 || (size_t v40 = v30) != 0) {
        *a13 = (const __CFNumber *)CFRetain(v40);
      }
      if (v71 <= v70)
      {
        if (v71 < v70)
        {
          int v61 = vcvtmd_s64_f64(((double)v39 - *(double *)&v73 * (double)(v43 * v38) / (v72 * (double)v42)) * 0.5 + 0.5);
          if (v61 >= 1)
          {
            LODWORD(v80) = v39 - 2 * v61;
            LODWORD(v81) = v81 + v61;
          }
        }
      }
      else
      {
        int v44 = vcvtmd_s64_f64(((double)v38 - v72 * (double)(v42 * v39) / (*(double *)&v73 * (double)v43)) * 0.5 + 0.5);
        if (v44 >= 1)
        {
          HIDWORD(v80) = v38 - 2 * v44;
          HIDWORD(v81) += v44;
        }
      }
      goto LABEL_48;
    }
    int v55 = v82[0];
    int v54 = v82[1];
    uint64_t v56 = *((void *)a5 + 2);
    uint64_t v57 = *((void *)a5 + 3);
    uint64_t v59 = *((void *)a5 + 4);
    uint64_t v58 = *((void *)a5 + 5);
    if (v59 < 1)
    {
      int v60 = 0;
      v56 += v59;
      LODWORD(v59) = 0;
    }
    else
    {
      int v54 = v82[1] - v59;
      if (v82[1] - (int)v59 < 1) {
        goto LABEL_67;
      }
      int v60 = 1;
    }
    if (v58 < 1)
    {
      v57 += v58;
      LODWORD(v58) = 0;
LABEL_69:
      if (v56 < v54) {
        int v62 = v56;
      }
      else {
        int v62 = v54;
      }
      if (v57 < v55) {
        int v63 = v57;
      }
      else {
        int v63 = v55;
      }
      if (v57 < v55 || v56 < v54 || v60)
      {
        if (a12) {
          vtBufferCreateScaledCleanRectFromCropCleanRect(v59, v58, v62, v63, SHIDWORD(v81), v81, SHIDWORD(v80), v80, v25, a3, a12);
        }
        if (!a13) {
          goto LABEL_87;
        }
        uint64_t v64 = a13;
        uint64_t v67 = a1;
        int v65 = v62;
        int v66 = v63;
      }
      else
      {
        if (a12) {
          vtBufferCreateScaledCleanRect(a1, v25, a3, a12);
        }
        if (!a13) {
          goto LABEL_87;
        }
        uint64_t v64 = a13;
        int v66 = v82[0];
        int v65 = v82[1];
        uint64_t v67 = a1;
      }
      vtBufferCreateScaledPixelAspectRatio(v67, v65, v66, v25, a3, v64);
LABEL_87:
      unint64_t v81 = __PAIR64__(v59, v58);
      unint64_t v80 = __PAIR64__(v62, v63);
      uint64_t v78 = 0;
      uint64_t v77 = v79;
      goto LABEL_50;
    }
    int v55 = v82[0] - v58;
    if (v82[0] - (int)v58 >= 1)
    {
      int v60 = 1;
      goto LABEL_69;
    }
LABEL_67:
    uint64_t v49 = 4294954394;
    goto LABEL_54;
  }
LABEL_50:
  if (a10)
  {
    uint64_t v46 = v82[0];
    *a10 = v82[1];
    a10[1] = v46;
    uint64_t v47 = (int)v81;
    a10[4] = SHIDWORD(v81);
    a10[5] = v47;
    uint64_t v48 = (int)v80;
    a10[2] = SHIDWORD(v80);
    a10[3] = v48;
  }
  uint64_t v49 = 0;
  if (a11)
  {
    uint64_t v50 = (int)v79;
    *a11 = SHIDWORD(v79);
    a11[1] = v50;
    uint64_t v51 = (int)v78;
    a11[4] = SHIDWORD(v78);
    a11[5] = v51;
    uint64_t v52 = (int)v77;
    a11[2] = SHIDWORD(v77);
    a11[3] = v52;
  }
LABEL_54:
  if (v69) {
    CFRelease(v69);
  }
  return v49;
}

uint64_t vtBufferApplyCropToRect(void *a1, int a2, int a3, int a4, int a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, int *a9, char *a10)
{
  uint64_t v10 = a1[4];
  if (v10 <= a2)
  {
    char v11 = 0;
    a1[2] += v10 - a2;
    LODWORD(v10) = a2;
  }
  else
  {
    a4 += a2 - v10;
    if (a4 < 1) {
      return 4294954394;
    }
    char v11 = 1;
  }
  uint64_t v12 = a1[5];
  if (v12 <= a3)
  {
    uint64_t v13 = v12 - a3 + a1[3];
    a1[3] = v13;
    LODWORD(v12) = a3;
    goto LABEL_9;
  }
  a5 += a3 - v12;
  if (a5 < 1) {
    return 4294954394;
  }
  uint64_t v13 = a1[3];
  char v11 = 1;
LABEL_9:
  uint64_t v14 = 0;
  uint64_t v15 = a1[2];
  if (v13 >= a5) {
    int v16 = a5;
  }
  else {
    int v16 = v13;
  }
  BOOL v17 = v15 < a4;
  if (v15 >= a4) {
    LODWORD(v15) = a4;
  }
  *a6 = v10;
  BOOL v18 = v17 || v13 < a5;
  *a7 = v12;
  if (v18) {
    char v19 = 1;
  }
  else {
    char v19 = v11;
  }
  *a8 = v15;
  *a9 = v16;
  *a10 = v19;
  return v14;
}

uint64_t vtRoundDimensionsToPixelBlockBoundary()
{
  DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  int IntIfPresent = FigCFDictionaryGetIntIfPresent();
  uint64_t result = FigCFDictionaryGetIntIfPresent();
  if (DescriptionWithPixelFormatType)
  {
    if (!IntIfPresent && result == 0)
    {
      uint64_t result = (uint64_t)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E4F24EE0]);
      if (result)
      {
        CFArrayRef v4 = (const __CFArray *)result;
        CFTypeID v5 = CFGetTypeID((CFTypeRef)result);
        uint64_t result = CFArrayGetTypeID();
        if (v5 == result)
        {
          uint64_t result = CFArrayGetCount(v4);
          if (result >= 1)
          {
            for (CFIndex i = 0; i < result; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
              if (ValueAtIndex)
              {
                CFTypeID v8 = CFGetTypeID(ValueAtIndex);
                if (v8 == CFDictionaryGetTypeID())
                {
                  FigCFDictionaryGetIntIfPresent();
                  FigCFDictionaryGetIntIfPresent();
                }
              }
              uint64_t result = CFArrayGetCount(v4);
            }
          }
        }
      }
    }
  }
  return result;
}

CFTypeID vtBufferGetPixelAndPictureAspectRatio(CFTypeID result, int a2, int a3, double *a4, double *a5)
{
  if (!result) {
    goto LABEL_10;
  }
  int v9 = (const void *)result;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  uint64_t result = CFGetTypeID(v9);
  if (TypeID != result) {
    goto LABEL_10;
  }
  int v18 = 1;
  int valuePtr = 1;
  uint64_t result = (CFTypeID)CFDictionaryGetValue((CFDictionaryRef)v9, (const void *)*MEMORY[0x1E4F24B90]);
  if (!result) {
    goto LABEL_10;
  }
  CFNumberRef v11 = (const __CFNumber *)result;
  CFTypeID v12 = CFGetTypeID((CFTypeRef)result);
  uint64_t result = CFNumberGetTypeID();
  if (v12 != result) {
    goto LABEL_10;
  }
  uint64_t result = CFNumberGetValue(v11, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr >= 1
    && (uint64_t result = (CFTypeID)CFDictionaryGetValue((CFDictionaryRef)v9, (const void *)*MEMORY[0x1E4F24BA0])) != 0
    && (CFNumberRef v13 = (const __CFNumber *)result,
        CFTypeID v14 = CFGetTypeID((CFTypeRef)result),
        uint64_t result = CFNumberGetTypeID(),
        v14 == result)
    && (uint64_t result = CFNumberGetValue(v13, kCFNumberSInt32Type, &v18), v15 = v18, v18 > 0))
  {
    double v16 = (double)(valuePtr * a2);
    *a4 = (double)valuePtr / (double)v18;
    double v17 = v16 / (double)(v15 * a3);
  }
  else
  {
LABEL_10:
    *a4 = 1.0;
    double v17 = (double)a2 / (double)a3;
  }
  *a5 = v17;
  return result;
}

void vtBufferCreateScaledCleanRectFromCropCleanRect(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unint64_t a9, unint64_t a10, CFDictionaryRef *a11)
{
  values[4] = *(void **)MEMORY[0x1E4F143B8];
  float v19 = (float)a9 / (float)a3;
  float v20 = (float)a10 / (float)a4;
  unsigned int valuePtr = llroundf(v19 * (float)a7);
  CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  keys[0] = *(void **)MEMORY[0x1E4F24A88];
  unsigned int v29 = llroundf(v20 * (float)a8);
  values[1] = CFNumberCreate(v21, kCFNumberSInt32Type, &v29);
  keys[1] = *(void **)MEMORY[0x1E4F24A68];
  int v22 = a7 - a3;
  if (a7 < a3) {
    ++v22;
  }
  unsigned int v28 = llroundf(v19 * (float)(a5 - a1 + (v22 >> 1)));
  values[2] = CFNumberCreate(v21, kCFNumberSInt32Type, &v28);
  keys[2] = *(void **)MEMORY[0x1E4F24A70];
  int v23 = a8 - a4;
  if (a8 < a4) {
    ++v23;
  }
  unsigned int v27 = llroundf(v20 * (float)(a6 - a2 + (v23 >> 1)));
  values[3] = CFNumberCreate(v21, kCFNumberSInt32Type, &v27);
  keys[3] = *(void **)MEMORY[0x1E4F24A80];
  CFDictionaryRef v24 = CFDictionaryCreate(v21, (const void **)keys, (const void **)values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v25 = 0;
  *a11 = v24;
  do
  {
    int8x16_t v26 = values[v25];
    if (v26) {
      CFRelease(v26);
    }
    ++v25;
  }
  while (v25 != 4);
}

void vtBufferCreateScaledPixelAspectRatio(__CVBuffer *a1, int a2, int a3, uint64_t a4, uint64_t a5, const __CFNumber **a6)
{
  CFDictionaryRef v11 = (const __CFDictionary *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24B98], 0);
  if (v11)
  {
    CFDictionaryRef v12 = v11;
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(v12))
    {
      uint64_t v21 = 1;
      uint64_t valuePtr = 1;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v12, (const void *)*MEMORY[0x1E4F24B90]);
      if (!Value) {
        goto LABEL_10;
      }
      CFNumberRef v15 = Value;
      CFTypeID v16 = CFGetTypeID(Value);
      if (v16 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v15, kCFNumberSInt64Type, &valuePtr);
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v12, (const void *)*MEMORY[0x1E4F24BA0]);
        if (Value)
        {
          CFNumberRef v17 = Value;
          CFTypeID v18 = CFGetTypeID(Value);
          if (v18 == CFNumberGetTypeID())
          {
            uint64_t v19 = a3 * a4;
            uint64_t v20 = a2 * a5;
            CFNumberGetValue(v17, kCFNumberSInt64Type, &v21);
            if (v19 == v20) {
              CFNumberRef Value = (const __CFNumber *)CFRetain(v12);
            }
            else {
              CFNumberRef Value = vtCreatePixelAspectRatioAttachment(valuePtr, v21, v19, v20);
            }
            goto LABEL_10;
          }
          goto LABEL_9;
        }
LABEL_10:
        *a6 = Value;
        CFRelease(v12);
        return;
      }
    }
LABEL_9:
    CFNumberRef Value = 0;
    goto LABEL_10;
  }
  *a6 = 0;
}

void vtBufferCreateScaledCleanRect(__CVBuffer *a1, unint64_t a2, unint64_t a3, CFDictionaryRef *a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  CFTypeRef v8 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  *(_OWORD *)values = 0u;
  long long v42 = 0u;
  *(_OWORD *)keys = 0u;
  long long v40 = 0u;
  if (!v8) {
    goto LABEL_13;
  }
  unint64_t v11 = Height;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(v8)) {
    goto LABEL_13;
  }
  if (CVPixelBufferGetWidth(a1) == a2 && CVPixelBufferGetHeight(a1) == a3)
  {
    CFDictionaryRef v13 = (const __CFDictionary *)CFRetain(v8);
LABEL_14:
    *a4 = v13;
    goto LABEL_15;
  }
  uint64_t v37 = 0;
  uint64_t valuePtr = 0;
  CFTypeID v14 = (void *)*MEMORY[0x1E4F24A88];
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v8, (const void *)*MEMORY[0x1E4F24A88]);
  if (!Value || (v16 = Value, CFTypeID v17 = CFGetTypeID(Value), v17 != CFNumberGetTypeID()))
  {
LABEL_13:
    CFDictionaryRef v13 = 0;
    goto LABEL_14;
  }
  float v18 = (float)a2 / (float)Width;
  CFNumberGetValue(v16, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  HIDWORD(valuePtr) = llroundf(v18 * (float)SHIDWORD(valuePtr));
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (char *)&valuePtr + 4);
  keys[0] = v14;
  uint64_t v20 = (void *)*MEMORY[0x1E4F24A68];
  CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v8, (const void *)*MEMORY[0x1E4F24A68]);
  if (v21 && (v22 = v21, CFTypeID v23 = CFGetTypeID(v21), v23 == CFNumberGetTypeID()))
  {
    float v24 = (float)a3 / (float)v11;
    CFNumberGetValue(v22, kCFNumberSInt32Type, &valuePtr);
    LODWORD(valuePtr) = llroundf(v24 * (float)(int)valuePtr);
    values[1] = CFNumberCreate(v19, kCFNumberSInt32Type, &valuePtr);
    keys[1] = v20;
    uint64_t v25 = *MEMORY[0x1E4F24A70];
    CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v8, (const void *)*MEMORY[0x1E4F24A70]);
    if (v26 && (CFNumberRef v27 = v26, v28 = CFGetTypeID(v26), v28 == CFNumberGetTypeID()))
    {
      unsigned int v29 = 3;
      CFNumberGetValue(v27, kCFNumberSInt32Type, (char *)&v37 + 4);
      HIDWORD(v37) = llroundf(v18 * (float)SHIDWORD(v37));
      *(void *)&long long v42 = CFNumberCreate(v19, kCFNumberSInt32Type, (char *)&v37 + 4);
      *(void *)&long long v40 = v25;
    }
    else
    {
      unsigned int v29 = 2;
    }
    uint64_t v33 = (void *)*MEMORY[0x1E4F24A80];
    CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v8, (const void *)*MEMORY[0x1E4F24A80]);
    if (v34)
    {
      CFNumberRef v35 = v34;
      CFTypeID v36 = CFGetTypeID(v34);
      if (v36 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v35, kCFNumberSInt32Type, &v37);
        LODWORD(v37) = llroundf(v24 * (float)(int)v37);
        values[v29] = CFNumberCreate(v19, kCFNumberSInt32Type, &v37);
        keys[v29++] = v33;
      }
    }
  }
  else
  {
    unsigned int v29 = 1;
  }
  uint64_t v30 = v29;
  int v31 = values;
  *a4 = CFDictionaryCreate(v19, (const void **)keys, (const void **)values, v29, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  do
  {
    int v32 = *v31++;
    CFRelease(v32);
    --v30;
  }
  while (v30);
LABEL_15:
  if (v8) {
    CFRelease(v8);
  }
}

uint64_t vtAllocatePlanarBuffersCommon(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 4294954391;
  if (a1 <= 1983000885)
  {
    if (a1 <= 1378955370)
    {
      if (a1 > 875704933)
      {
        if (a1 > 875836533)
        {
          if (a1 == 875836534 || a1 == 1111970369) {
            return result;
          }
          int v7 = 1278226488;
        }
        else
        {
          if (a1 == 875704934 || a1 == 875704950) {
            return result;
          }
          int v7 = 875836518;
        }
        goto LABEL_91;
      }
      if (a1 > 846624120)
      {
        if (a1 != 846624121)
        {
          if (a1 == 875704422) {
            return result;
          }
          int v7 = 875704438;
LABEL_91:
          if (a1 == v7) {
            return result;
          }
          goto LABEL_133;
        }
LABEL_70:
        uint64_t v22 = 0;
        uint64_t v23 = *(void *)(a2 + 16);
        unint64_t v24 = *(void *)(a2 + 24);
        unint64_t v61 = (((v23 + 1) >> 1) + 127) & 0xFFFFFFFFFFFFFF80;
        unint64_t v62 = v61;
        unint64_t v60 = (v23 + 127) & 0xFFFFFFFFFFFFFF80;
        uint64_t v25 = (void *)a3;
        do
        {
          unint64_t v26 = *(unint64_t *)((char *)&v60 + v22);
          if (v24 && v26)
          {
            if (((v26 | v24) & 0x8000000000000000) != 0) {
              goto LABEL_130;
            }
            if (!is_mul_ok(v24, v26)) {
              goto LABEL_130;
            }
            size_t v27 = v26 * v24;
            if (!(v26 * v24)) {
              goto LABEL_130;
            }
            malloc_type_id_t v28 = 1556728742;
          }
          else
          {
            size_t v27 = 0;
            malloc_type_id_t v28 = 1270757447;
          }
          unsigned int v29 = malloc_type_malloc(v27, v28);
          *uint64_t v25 = v29;
          if (!v29) {
            goto LABEL_131;
          }
          if (v22) {
            uint64_t v30 = (v23 + 1) >> 1;
          }
          else {
            uint64_t v30 = v23;
          }
          v25[1] = v24;
          v25[2] = v30;
          v25[3] = v26;
          v25 += 4;
          v22 += 8;
        }
        while (v22 != 24);
        uint64_t v6 = 0;
        *(_OWORD *)(a3 + 96) = 0u;
        *(_OWORD *)(a3 + 112) = 0u;
        goto LABEL_132;
      }
      if (a1 == 32) {
        return result;
      }
      int v21 = 846624102;
      goto LABEL_69;
    }
    if (a1 > 1714696751)
    {
      if (a1 > 1916022839)
      {
        if (a1 == 1916022840 || a1 == 1982882104) {
          return result;
        }
        if (a1 == 1983000880)
        {
          uint64_t v10 = 0;
          uint64_t v11 = *(void *)(a2 + 16);
          unint64_t v12 = *(void *)(a2 + 24);
          unint64_t v60 = (12 * ((v11 + 5) / 6) + 127) & 0xFFFFFFFFFFFFFF80;
          unint64_t v61 = v60;
          char v13 = 1;
          while (1)
          {
            unint64_t v14 = *(&v60 + v10);
            if (v12 && v14)
            {
              if (((v14 | v12) & 0x8000000000000000) != 0 || !is_mul_ok(v12, v14) || (size_t v15 = v14 * v12) == 0)
              {
                *(void *)(a3 + 32 * v10) = 0;
LABEL_131:
                uint64_t v6 = 4294954392;
                goto LABEL_132;
              }
              malloc_type_id_t v16 = 1556728742;
            }
            else
            {
              size_t v15 = 0;
              malloc_type_id_t v16 = 1270757447;
            }
            CFTypeID v17 = malloc_type_malloc(v15, v16);
            *(void *)(a3 + 32 * v10) = v17;
            if (!v17) {
              goto LABEL_131;
            }
            int v18 = v13 & 1;
            if (v13) {
              uint64_t v19 = v11;
            }
            else {
              uint64_t v19 = (v11 + 1) >> 1;
            }
            uint64_t v20 = (void *)(a3 + 32 * v10);
            v20[1] = v12;
            void v20[2] = v19;
            v20[3] = v14;
            uint64_t v10 = 1;
            char v13 = 0;
            if (!v18) {
              goto LABEL_129;
            }
          }
        }
        goto LABEL_133;
      }
      if (a1 == 1714696752 || a1 == 1714696754) {
        return result;
      }
      int v7 = 1714697268;
      goto LABEL_91;
    }
    if (a1 > 1380411456)
    {
      if (a1 != 1380411457)
      {
        if (a1 != 1630697081)
        {
          int v7 = 1647534392;
          goto LABEL_91;
        }
        goto LABEL_70;
      }
      uint64_t v41 = *(void *)(a2 + 16);
      unint64_t v42 = *(void *)(a2 + 24);
      uint64_t v43 = 16 * v41 + 127;
      unint64_t v44 = v43 & 0xFFFFFFFFFFFFFF80;
      if (v42 && v44)
      {
        unint64_t v45 = v43 | v42;
        uint64_t v46 = (void *)a3;
        if ((v45 & 0x8000000000000000) != 0
          || (uint64_t v46 = (void *)a3, !is_mul_ok(v42, v44))
          || (size_t v47 = v44 * v42, v46 = (void *)a3, !(v44 * v42)))
        {
LABEL_142:
          void *v46 = 0;
LABEL_143:
          uint64_t v6 = 4294954392;
          goto LABEL_133;
        }
        malloc_type_id_t v48 = 1556728742;
      }
      else
      {
        size_t v47 = 0;
        malloc_type_id_t v48 = 1270757447;
      }
      uint64_t v59 = malloc_type_malloc(v47, v48);
      *(void *)a3 = v59;
      if (v59)
      {
        uint64_t result = 0;
        *(void *)(a3 + 8) = v42;
        *(void *)(a3 + 16) = v41;
        *(void *)(a3 + 24) = v44;
        return result;
      }
      goto LABEL_143;
    }
    if (a1 != 1378955371)
    {
      int v7 = 1380410945;
      goto LABEL_91;
    }
LABEL_93:
    uint64_t v31 = 0;
    uint64_t v32 = *(void *)(a2 + 16);
    unint64_t v33 = *(void *)(a2 + 24);
    BOOL v36 = ((v33 | (2 * v32)) & 0x8000000000000000) != 0
       || (v33 * (unsigned __int128)(unint64_t)(2 * v32)) >> 64 != 0
       || 2 * v32 * v33 == 0;
    while (1)
    {
      uint64_t v37 = (void *)(a3 + v31);
      v37[1] = v33;
      v37[2] = v32;
      v37[3] = 2 * v32;
      if (v32)
      {
        if (v33)
        {
          if (v36)
          {
            uint64_t v46 = (void *)(a3 + v31);
            goto LABEL_142;
          }
          size_t v38 = 2 * v32 * v33;
          malloc_type_id_t v39 = 1556728742;
        }
        else
        {
          size_t v38 = 0;
          malloc_type_id_t v39 = 1270757447;
        }
        long long v40 = malloc_type_malloc(v38, v39);
        *(void *)(a3 + v31) = v40;
        if (!v40) {
          goto LABEL_143;
        }
      }
      v31 += 32;
      if (v31 == 96) {
        return 0;
      }
    }
  }
  if (a1 <= 2019964015)
  {
    if (a1 <= 2016686641)
    {
      if (a1 <= 1983131951)
      {
        if (a1 == 1983000886)
        {
          uint64_t v49 = 0;
          uint64_t v50 = *(void *)(a2 + 16);
          unint64_t v51 = *(void *)(a2 + 24);
          unint64_t v61 = (((v50 + 1) & 0xFFFFFFFFFFFFFFFELL) + 127) & 0xFFFFFFFFFFFFFF80;
          unint64_t v62 = v61;
          unint64_t v60 = (2 * v50 + 127) & 0xFFFFFFFFFFFFFF80;
          uint64_t v25 = (void *)a3;
          do
          {
            unint64_t v52 = *(unint64_t *)((char *)&v60 + v49);
            if (v51 && v52)
            {
              if (((v52 | v51) & 0x8000000000000000) != 0 || !is_mul_ok(v51, v52) || (size_t v53 = v52 * v51) == 0)
              {
LABEL_130:
                *uint64_t v25 = 0;
                goto LABEL_131;
              }
              malloc_type_id_t v54 = 1556728742;
            }
            else
            {
              size_t v53 = 0;
              malloc_type_id_t v54 = 1270757447;
            }
            int v55 = malloc_type_malloc(v53, v54);
            *uint64_t v25 = v55;
            if (!v55) {
              goto LABEL_131;
            }
            if (v49) {
              uint64_t v56 = (v50 + 1) >> 1;
            }
            else {
              uint64_t v56 = v50;
            }
            v25[1] = v51;
            v25[2] = v56;
            v25[3] = v52;
            v25 += 4;
            v49 += 8;
          }
          while (v49 != 24);
LABEL_129:
          uint64_t v6 = 0;
LABEL_132:
          if (!v6) {
            return 0;
          }
          goto LABEL_133;
        }
        int v7 = 1983131704;
        goto LABEL_91;
      }
      if (a1 == 1983131952) {
        goto LABEL_93;
      }
      if (a1 == 1999843442) {
        return result;
      }
      unsigned __int16 v8 = 12848;
    }
    else
    {
      if (a1 > 2019963439)
      {
        if (a1 == 2019963440 || a1 == 2019963442) {
          return result;
        }
        int v7 = 2019963956;
        goto LABEL_91;
      }
      if (a1 == 2016686642 || a1 == 2016687156) {
        return result;
      }
      unsigned __int16 v8 = 13424;
    }
    int v7 = v8 | 0x78340000;
    goto LABEL_91;
  }
  if (a1 <= 2033463351)
  {
    if (a1 <= 2021077553)
    {
      if (a1 == 2019964016) {
        return result;
      }
      unsigned __int16 v9 = 12848;
    }
    else
    {
      if (a1 == 2021077554 || a1 == 2021078068) {
        return result;
      }
      unsigned __int16 v9 = 13424;
    }
    int v7 = v9 | 0x78770000;
    goto LABEL_91;
  }
  if (a1 <= 2033464371)
  {
    if (a1 == 2033463352 || a1 == 2033463856) {
      return result;
    }
    int v7 = 2033463858;
    goto LABEL_91;
  }
  if (a1 == 2033464372) {
    return result;
  }
  if (a1 == 2037741171) {
    goto LABEL_70;
  }
  int v21 = 2037741158;
LABEL_69:
  if (a1 == v21) {
    goto LABEL_70;
  }
LABEL_133:
  for (uint64_t i = 0; i != 128; i += 32)
  {
    uint64_t v58 = *(void **)(a3 + i);
    if (v58)
    {
      free(v58);
      *(void *)(a3 + i) = 0;
    }
  }
  return v6;
}

BOOL VTPixelTransferSessionCanUseMetalInTheBackground()
{
  getpid();
  int can_use_foreground_hw = proc_can_use_foreground_hw();
  BOOL result = can_use_foreground_hw == 1;
  if (!can_use_foreground_hw) {
    return 0;
  }
  return result;
}

uint64_t VTPixelTransferSessionFlush(uint64_t a1, CVOptionFlags a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4 || (uint64_t result = VTPixelTransferChainFlush(v4, a2), !result))
  {
    uint64_t result = *(void *)(a1 + 1160);
    if (result)
    {
      return VTMetalTransferSessionFlush(result, a2);
    }
  }
  return result;
}

uint64_t VTPixelTransferSessionCanTransfer(OSType pixelFormat, OSType a2, char a3)
{
  BOOL v6 = (a3 & 1) == 0;
  BOOL v7 = (a3 & 2) == 0;
  long long v19 = 0uLL;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v9 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E4F1CF80], pixelFormat);
  CFDictionaryRef v10 = CVPixelFormatDescriptionCreateWithPixelFormatType(v8, a2);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24C18], (const void *)*MEMORY[0x1E4F24C48]);
  if (v9) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    v21[0] = pixelFormat;
    OSType v20 = a2;
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
  }
  if ((a3 & 0x10) == 0)
  {
    vtFindBlitter(pixelFormat, a2, 0, 0, v6, v7, Mutable, (int)Mutable, 0, 0, 0, 0, 0, 0, 0, (uint64_t)&v22, (uint64_t)v21, (uint64_t)&v20, (uint64_t)&v19 + 8,
      (uint64_t)&v19,
      0,
      0,
      0);
    if (v19 != 0 && ((a3 & 1) == 0 || getScalingGroup(a2))) {
      goto LABEL_14;
    }
    int ScalingGroup = getScalingGroup(pixelFormat);
    if (ScalingGroup)
    {
      int v14 = ScalingGroup;
      int v15 = getScalingGroup(a2);
      if (v15)
      {
        if (v14 == v15) {
          goto LABEL_14;
        }
      }
    }
  }
  if (vtPixelTransferSessionCanDynamicTransfer()) {
    goto LABEL_14;
  }
  if (initDefaultsCommon_onceToken != -1) {
    dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
  }
  if (!sAllowMetalTransferSession || !VTPixelTransferSessionCanUseMetalInTheBackground()) {
    goto LABEL_33;
  }
  int v18 = VTAvoidHardwarePixelTransfer();
  uint64_t v16 = 0;
  if ((a3 & 8) == 0 && !v18)
  {
    if (VTMetalTransferSessionCanTransfer(pixelFormat, a2, a3)
      || (a3 & 1) != 0
      && (VTMetalTransferSessionCanTransfer(pixelFormat, a2, a3 & 0xFE), (a3 & 0x10) == 0)
      && (getScalingGroup(pixelFormat) || getScalingGroup(a2)))
    {
LABEL_14:
      uint64_t v16 = 1;
      goto LABEL_15;
    }
LABEL_33:
    uint64_t v16 = 0;
  }
LABEL_15:
  if (v9) {
    CFRelease(v9);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v16;
}

uint64_t vtPixelTransferSessionCanDynamicTransfer()
{
  if (initDefaultsCommon_onceToken != -1) {
    dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
  }
  if (sAllowHardwareTransferSession) {
    FigRegisterIOSurfacePixelTransferCapability();
  }
  return 0;
}

#error "193AAE850: too big function (funcsize=0)"

uint64_t getScalingGroup(int a1)
{
  uint64_t result = 0;
  if (a1 <= 1815491697)
  {
    if (a1 <= 1278226741)
    {
      if (a1 <= 875704949)
      {
        if (a1 <= 875704421)
        {
          if (a1 == 32) {
            return 3;
          }
          if (a1 != 846624102)
          {
            int v9 = 846624121;
            goto LABEL_101;
          }
          return 9;
        }
        if (a1 != 875704422)
        {
          if (a1 == 875704438) {
            return 12;
          }
          if (a1 != 875704934) {
            return result;
          }
        }
      }
      else
      {
        if (a1 > 1111970368)
        {
          if (a1 == 1278226536) {
            int v3 = 27;
          }
          else {
            int v3 = 0;
          }
          if (a1 == 1278226534) {
            unsigned int v4 = 28;
          }
          else {
            unsigned int v4 = v3;
          }
          if (a1 == 1111970369) {
            unsigned int v5 = 4;
          }
          else {
            unsigned int v5 = a1 == 1278226488;
          }
          if (a1 <= 1278226533) {
            return v5;
          }
          else {
            return v4;
          }
        }
        if (a1 == 875704950) {
          return 12;
        }
        if (a1 != 875836518)
        {
          int v10 = 875836534;
          goto LABEL_54;
        }
      }
      return 10;
    }
    if (a1 <= 1647534391)
    {
      if (a1 > 1380410944)
      {
        if (a1 == 1380410945) {
          return 31;
        }
        if (a1 == 1380411457) {
          return 30;
        }
        int v9 = 1630697081;
        goto LABEL_101;
      }
      int v11 = 1278226742;
      unsigned int v12 = 2;
      int v13 = 1378955371;
      int v14 = 24;
      BOOL v15 = a1 == 1380401729;
      int v16 = 5;
      goto LABEL_75;
    }
    if (a1 <= 1714697267)
    {
      if (a1 != 1647534392)
      {
        if (a1 == 1714696752 || a1 == 1714696754) {
          return 9;
        }
        return result;
      }
      return 22;
    }
    if (a1 > 1751527985)
    {
      if (a1 == 1751527986) {
        return 29;
      }
      unsigned __int16 v7 = 13364;
    }
    else
    {
      if (a1 == 1714697268) {
        return 9;
      }
      unsigned __int16 v7 = 12848;
    }
    if (a1 != (v7 | 0x68660000)) {
      return result;
    }
    return 29;
  }
  if (a1 > 2019963441)
  {
    if (a1 <= 2033463351)
    {
      if (a1 > 2021077551)
      {
        if (a1 <= 2021078067)
        {
          if (a1 != 2021077552 && a1 != 2021077554) {
            return result;
          }
          return 18;
        }
        if (a1 == 2021078068) {
          return 18;
        }
        BOOL v17 = a1 == 2021078128;
        unsigned int v18 = 21;
        goto LABEL_88;
      }
      if (a1 != 2019963442 && a1 != 2019963956)
      {
        BOOL v17 = a1 == 2019964016;
        unsigned int v18 = 20;
LABEL_88:
        if (v17) {
          return v18;
        }
        else {
          return 0;
        }
      }
      return 16;
    }
    if (a1 <= 2033463857)
    {
      if (a1 == 2033463352) {
        return 7;
      }
      if (a1 == 2033463606) {
        return 25;
      }
      unsigned __int16 v8 = 12848;
LABEL_68:
      int v9 = v8 | 0x79340000;
      goto LABEL_101;
    }
    if (a1 <= 2037741157)
    {
      if (a1 == 2033463858) {
        return 11;
      }
      unsigned __int16 v8 = 13364;
      goto LABEL_68;
    }
    if (a1 != 2037741158)
    {
      int v9 = 2037741171;
LABEL_101:
      if (a1 != v9) {
        return result;
      }
      return 11;
    }
    return 9;
  }
  if (a1 <= 1983131951)
  {
    if (a1 <= 1983000879)
    {
      if (a1 == 1815491698) {
        return 26;
      }
      if (a1 == 1916022840) {
        return 6;
      }
      int v10 = 1982882104;
LABEL_54:
      if (a1 != v10) {
        return result;
      }
      return 12;
    }
    int v11 = 1983000880;
    unsigned int v12 = 14;
    int v13 = 1983000886;
    int v14 = 13;
    BOOL v15 = a1 == 1983131704;
    int v16 = 8;
LABEL_75:
    if (!v15) {
      int v16 = 0;
    }
    if (a1 == v13) {
      unsigned int v19 = v14;
    }
    else {
      unsigned int v19 = v16;
    }
    if (a1 == v11) {
      return v12;
    }
    else {
      return v19;
    }
  }
  if (a1 <= 2016686641)
  {
    if (a1 == 1983131952) {
      return 13;
    }
    if (a1 != 1999843442)
    {
      unsigned __int16 v6 = 12848;
      goto LABEL_59;
    }
    return 22;
  }
  if (a1 <= 2016687215)
  {
    if (a1 == 2016686642) {
      return 14;
    }
    unsigned __int16 v6 = 13364;
LABEL_59:
    if (a1 != (v6 | 0x78340000)) {
      return result;
    }
    return 14;
  }
  if (a1 == 2016687216) {
    return 19;
  }
  if (a1 == 2019963440) {
    return 16;
  }
  return result;
}

uint64_t VTFillPixelsOutsideDestRectWithBlack(__CVBuffer *a1, uint64_t *a2, uint64_t **a3)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (CVPixelBufferIsPlanar(a1)) {
    PlaneCMItemCount Count = CVPixelBufferGetPlaneCount(a1);
  }
  else {
    PlaneCMItemCount Count = 1;
  }
  uint64_t v8 = vtPixelTransferSession_EnsurePixelFormatPixelBlockInfoArray(PixelFormatType, PlaneCount, a3);
  if (!v8)
  {
    int v9 = *a3;
    uint64_t v10 = a2[5];
    if (v10 <= 0)
    {
      uint64_t v11 = a2[4];
      if (v11 <= 0 && a2[2] + v11 >= *a2 && a2[3] + v10 >= a2[1]) {
        return 0;
      }
    }
    CVPixelBufferLockBaseAddress(a1, 0);
    int64_t v12 = a2[5];
    if (v12 >= 1)
    {
      uint64_t v13 = VTFillBufferPixelsWithBlack(a1, 0, 0, *a2, a2[5], v9);
      if (v13) {
        goto LABEL_20;
      }
      int64_t v12 = a2[5];
    }
    uint64_t v14 = a2[4];
    if (v14 >= 1)
    {
      uint64_t v13 = VTFillBufferPixelsWithBlack(a1, 0, v12, v14, a2[3], v9);
      if (v13) {
        goto LABEL_20;
      }
      uint64_t v14 = a2[4];
      int64_t v12 = a2[5];
    }
    int64_t v15 = a2[2] + v14;
    if (*a2 > v15)
    {
      uint64_t v8 = VTFillBufferPixelsWithBlack(a1, v15, v12, *a2 - v15, a2[3], v9);
      if (v8)
      {
LABEL_22:
        CVPixelBufferUnlockBaseAddress(a1, 0);
        return v8;
      }
      int64_t v12 = a2[5];
    }
    int64_t v16 = a2[3] + v12;
    int64_t v17 = a2[1];
    if (v17 <= v16)
    {
      uint64_t v8 = 0;
      goto LABEL_22;
    }
    uint64_t v13 = VTFillBufferPixelsWithBlack(a1, 0, v16, *a2, v17 - v16, v9);
LABEL_20:
    uint64_t v8 = v13;
    goto LABEL_22;
  }
  return v8;
}

uint64_t printable4CC(unsigned int a1)
{
  if (a1 > 0x63)
  {
    unsigned int v2 = a1 >> 8;
    unsigned int v3 = a1 & 0xFFFF0000;
    unsigned int v4 = a1 & 0xFF000000;
  }
  else
  {
    char v1 = a1 / 0xAu;
    LOBYTE(a1) = (a1 % 0xAu) | 0x30;
    LOBYTE(v2) = v1 + 48;
    unsigned int v3 = 0x200000;
    unsigned int v4 = 0x20000000;
  }
  return v3 & 0xFF0000 | v4 | (v2 << 8) | a1;
}

uint64_t _VTPixelTransferSessionTransferImage(uint64_t a1, __CVBuffer *a2, __CVBuffer *a3)
{
  if (*(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  if (*(unsigned char *)(a1 + 789))
  {
    unsigned __int16 v7 = *(const void **)(a1 + 792);
    if (v7) {
      CFRelease(v7);
    }
    CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    *(void *)(a1 + 792) = Mutable;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 776), @"ServiceHistogramData", Mutable);
  }
  CFStringRef key = (const __CFString *)*MEMORY[0x1E4F24A00];
  CFTypeRef cf = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E4F24A00], 0);
  CFStringRef v106 = (const __CFString *)*MEMORY[0x1E4F24B70];
  CFTypeRef v110 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E4F24B70], 0);
  CFStringRef v107 = (const __CFString *)*MEMORY[0x1E4F24A90];
  CFTypeRef v9 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E4F24A90], 0);
  CFStringRef v108 = (const __CFString *)*MEMORY[0x1E4F24BC8];
  CFTypeRef value = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
  CFStringRef v105 = (const __CFString *)*MEMORY[0x1E4F24B78];
  CFTypeRef v114 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E4F24B78], 0);
  *(unsigned char *)(a1 + 1186) = 0;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  OSType v11 = CVPixelBufferGetPixelFormatType(a3);
  int Width = CVPixelBufferGetWidth(a2);
  int Height = CVPixelBufferGetHeight(a2);
  int v14 = CVPixelBufferGetWidth(a3);
  int v15 = CVPixelBufferGetHeight(a3);
  if (!*(unsigned char *)(a1 + 568))
  {
    CFArrayRef v21 = *(const __CFArray **)(a1 + 32);
    if ((!v21 || !VTPixelTransferChainHasNodes(v21)) && !*(unsigned char *)(a1 + 211) && !*(_DWORD *)(a1 + 1016)) {
      goto LABEL_40;
    }
  }
  if (*(unsigned char *)(a1 + 744)
    || PixelFormatType != *(_DWORD *)(a1 + 572)
    || v11 != *(_DWORD *)(a1 + 576)
    || *(void *)(a1 + 592) != Width
    || *(void *)(a1 + 600) != Height
    || *(void *)(a1 + 640) != v14
    || *(void *)(a1 + 648) != v15)
  {
    goto LABEL_40;
  }
  CFTypeRef v16 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
  int v17 = FigCFEqual();
  if (v16) {
    CFRelease(v16);
  }
  if (!v17) {
    goto LABEL_40;
  }
  CFTypeRef v18 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E4F24B98], 0);
  int v19 = FigCFEqual();
  if (v18) {
    CFRelease(v18);
  }
  if (!v19
    || *(void *)(a1 + 88) != *(void *)(a1 + 864)
    || *(void *)(a1 + 96) != *(void *)(a1 + 872)
    || *(void *)(a1 + 72) != *(void *)(a1 + 848)
    || *(void *)(a1 + 80) != *(void *)(a1 + 856)
    || *(void *)(a1 + 136) != *(void *)(a1 + 912)
    || *(void *)(a1 + 144) != *(void *)(a1 + 920)
    || *(void *)(a1 + 120) != *(void *)(a1 + 896)
    || *(void *)(a1 + 128) != *(void *)(a1 + 904))
  {
    goto LABEL_40;
  }
  if (*(unsigned char *)(a1 + 1184))
  {
    if (*(void *)(a1 + 216))
    {
      if (*(void *)(a1 + 256) != *(void *)(a1 + 656) || *(void *)(a1 + 264) != *(void *)(a1 + 664))
      {
        OSType v20 = a2;
        goto LABEL_169;
      }
    }
    else if (!CVPixelBufferGetIOSurface(a2))
    {
      goto LABEL_40;
    }
    OSType v20 = a3;
LABEL_169:
    if (!CVPixelBufferGetIOSurface(v20)) {
      goto LABEL_40;
    }
  }
  uint64_t v70 = *(void *)(a1 + 752);
  if (v70)
  {
    double v71 = *(unsigned int (**)(__CVBuffer *, __CVBuffer *))(v70 + 40);
    if (v71)
    {
      if (*(void *)(v70 + 56))
      {
        if (*(unsigned char *)(a1 + 768))
        {
          double v72 = a2;
          goto LABEL_175;
        }
        if ((*(void *)(a1 + 696) || *(void *)(a1 + 704)) && !*(void *)(a1 + 216))
        {
          OSType v95 = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(a1 + 232));
          double v71 = *(unsigned int (**)(__CVBuffer *, __CVBuffer *))(*(void *)(a1 + 752) + 40);
          long long v73 = *(__CVBuffer **)(a1 + 232);
          if (*(_DWORD *)(a1 + 580) == v95)
          {
            double v72 = a2;
LABEL_176:
            if (!v71(v72, v73)) {
              goto LABEL_40;
            }
            goto LABEL_181;
          }
          double v72 = *(__CVBuffer **)(a1 + 232);
LABEL_175:
          long long v73 = a3;
          goto LABEL_176;
        }
      }
    }
  }
LABEL_181:
  CFTypeRef v74 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
  CFTypeRef v75 = CVBufferCopyAttachment(a2, v107, 0);
  CFTypeRef v76 = CVBufferCopyAttachment(a2, v108, 0);
  CFTypeRef v77 = CVBufferCopyAttachment(a2, v105, 0);
  CFTypeRef v78 = CVBufferCopyAttachment(a2, v106, 0);
  CFTypeRef v101 = v75;
  int v100 = FigCFEqual();
  CFTypeRef v102 = v76;
  int v99 = FigCFEqual();
  CFTypeRef v103 = v77;
  int v98 = FigCFEqual();
  CFTypeRef v104 = v78;
  int v97 = FigCFEqual();
  CFTypeRef v79 = CVBufferCopyAttachment(a2, key, 0);
  int v80 = FigCFEqual();
  if (v79) {
    CFRelease(v79);
  }
  int v81 = FigCFEqual();
  int v82 = FigCFEqual();
  int v83 = FigCFEqual();
  int v84 = FigCFEqual();
  if (FigCFEqual()) {
    BOOL v85 = v84 == 0;
  }
  else {
    BOOL v85 = 1;
  }
  int v94 = v85 || v83 == 0 || v82 == 0 || v81 == 0 || v80 == 0 || v97 == 0 || v98 == 0 || v99 == 0 || v100 == 0;
  if (v74) {
    CFRelease(v74);
  }
  if (v101) {
    CFRelease(v101);
  }
  if (v102) {
    CFRelease(v102);
  }
  if (v103) {
    CFRelease(v103);
  }
  if (v104) {
    CFRelease(v104);
  }
  if (!v94)
  {
    uint64_t v22 = 0;
    unint64_t v24 = v110;
    uint64_t v23 = cf;
    goto LABEL_43;
  }
LABEL_40:
  VTPixelTransferChainRemoveAllNodes(*(void *)(a1 + 32));
  uint64_t v22 = vtPixelTransferSession_BuildChain(a1, a2, a3);
  unint64_t v24 = v110;
  uint64_t v23 = cf;
  if (v22) {
    goto LABEL_135;
  }
  if (*(unsigned char *)(a1 + 40) || !*(void *)(a1 + 32)) {
    goto LABEL_42;
  }
  uint64_t v34 = vtPixelTransferSessionBuildChainFromBasicTransfer(a1);
  if (v34)
  {
    uint64_t v22 = v34;
    VTPixelTransferChainRemoveAllNodes(*(void *)(a1 + 32));
    goto LABEL_43;
  }
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  int v55 = *(const void **)(a1 + 776);
  if (!v55)
  {
LABEL_42:
    uint64_t v22 = 0;
    goto LABEL_43;
  }
  CFRelease(v55);
  uint64_t v22 = 0;
  *(void *)(a1 + 776) = 0;
LABEL_43:
  CVBufferRemoveAttachment(a3, key);
  CFDictionaryRef v25 = CVBufferCopyAttachments(a2, kCVAttachmentMode_ShouldPropagate);
  if (v25)
  {
    CFDictionaryRef v26 = v25;
    CFDictionaryRef v27 = *(const __CFDictionary **)(a1 + 1112);
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    unsigned int v29 = MutableCopy;
    if (MutableCopy)
    {
      if (*(unsigned char *)(a1 + 184))
      {
        CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E4F24A50]);
        CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E4F24A10]);
        CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E4F24A08]);
      }
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E4F24A78]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E4F24B98]);
      if (!*(unsigned char *)(a1 + 1138)) {
        CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E4F249D0]);
      }
      CFDictionaryRemoveValue(v29, key);
      CFDictionaryRemoveValue(v29, v106);
      CFDictionaryRemoveValue(v29, v107);
      CFDictionaryRemoveValue(v29, v108);
      CFDictionaryApplyFunction(v27, (CFDictionaryApplierFunction)vtCombineDictionariesApplier, v29);
      CFRelease(v26);
      CVPixelBufferGetPixelFormatType(a3);
      CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
      LOBYTE(v121) = 0;
      LOBYTE(v118) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E4F24E08]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E4F24DF0]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E4F24DB0]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E4F24DC0]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E4F24DE0]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E4F24DE8]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E4F24DD8]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E4F24DC8]);
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E4F24DD0]);
      CFDictionaryRemoveValue(v29, @"ProResRAW_LargestDCQSS");
      CFDictionaryRemoveValue(v29, (const void *)*MEMORY[0x1E4F24DB8]);
      CVBufferSetAttachments(a3, v29, kCVAttachmentMode_ShouldPropagate);
    }
    else
    {
      CFRelease(v26);
    }
  }
  else
  {
    unsigned int v29 = 0;
  }
  uint64_t v30 = a3;
  switch(*(_DWORD *)(a1 + 1016))
  {
    case 1:
      uint64_t v22 = vtVImageConverterProc(a2, *(__CVBuffer **)(a1 + 1040), a1 + 1056);
      if (!v22)
      {
        a2 = *(__CVBuffer **)(a1 + 1040);
        goto LABEL_61;
      }
      goto LABEL_133;
    case 2:
      uint64_t v30 = *(__CVBuffer **)(a1 + 1040);
      goto LABEL_63;
    case 3:
    case 5:
      uint64_t v22 = _VTPixelTransferSessionTransferImage(*(void *)(a1 + 1024), a2, *(void *)(a1 + 1040));
      if (v22) {
        goto LABEL_133;
      }
      int v31 = *(_DWORD *)(a1 + 1016);
      if (v31 != 3)
      {
        if (v31 != 5)
        {
          uint64_t v22 = 0;
          goto LABEL_118;
        }
        uint64_t v32 = *(void *)(a1 + 1032);
        uint64_t v33 = *(void *)(a1 + 1040);
        goto LABEL_116;
      }
      if (*(unsigned char *)(a1 + 1184))
      {
        uint64_t v56 = VTMetalTransferSessionTransferImageSync(*(const __CFArray **)(a1 + 1160), *(void **)(a1 + 1040), *(void **)(a1 + 1048), *(const __CFDictionary **)(a1 + 1168));
      }
      else if (*(void *)(a1 + 704))
      {
        *(void *)&v122.f64[0] = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 1040));
        *(float64_t *)&long long v121 = v122.f64[0];
        *(void *)&v122.f64[1] = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 1040));
        float64x2_t v123 = 0uLL;
        *((void *)&v121 + 1) = *(void *)&v122.f64[1];
        *(void *)&v119.f64[0] = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 1048));
        *(float64_t *)&long long v118 = v119.f64[0];
        *(void *)&v119.f64[1] = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 1048));
        float64x2_t v120 = 0uLL;
        *((void *)&v118 + 1) = *(void *)&v119.f64[1];
        uint64_t v56 = vtPixelTransferSession_InvokeBlitter(*(void *)(a1 + 696), *(void *)(a1 + 704), *(void *)(a1 + 712), (void *)(a1 + 728), (void *)(a1 + 736), *(CVPixelBufferRef *)(a1 + 1040), *(__CVBuffer **)(a1 + 1048), (uint64_t)&v121, (uint64_t)&v118);
      }
      else
      {
        uint64_t v56 = vtVImageConverterProc(*(__CVBuffer **)(a1 + 1040), *(__CVBuffer **)(a1 + 1048), a1 + 1056);
      }
      uint64_t v22 = v56;
      if (!v56)
      {
        uint64_t v32 = *(void *)(a1 + 1032);
        uint64_t v33 = *(void *)(a1 + 1048);
LABEL_116:
        vImage_Error v61 = _VTPixelTransferSessionTransferImage(v32, v33, a3);
        goto LABEL_117;
      }
      goto LABEL_133;
    case 4:
      goto LABEL_63;
    default:
LABEL_61:
      uint64_t v30 = a3;
LABEL_63:
      if (*(unsigned char *)(a1 + 1186)) {
        goto LABEL_100;
      }
      if (VTPixelTransferChainHasNodes(*(const __CFArray **)(a1 + 32)))
      {
        long long v35 = *(_OWORD *)(a1 + 640);
        float64x2_t v36 = vcvtq_f64_s64(*(int64x2_t *)(a1 + 624));
        int64x2_t v37 = *(int64x2_t *)(a1 + 608);
        long long v121 = *(_OWORD *)(a1 + 592);
        float64x2_t v122 = v36;
        float64x2_t v123 = vcvtq_f64_s64(v37);
        int64x2_t v38 = *(int64x2_t *)(a1 + 656);
        float64x2_t v39 = vcvtq_f64_s64(*(int64x2_t *)(a1 + 672));
        long long v118 = v35;
        float64x2_t v119 = v39;
        float64x2_t v120 = vcvtq_f64_s64(v38);
        LODWORD(v22) = VTPixelTransferChainDoTransfer(*(void *)(a1 + 32), a2, &v121, v30, &v118);
        if (v22) {
          VTPixelTransferChainRemoveAllNodes(*(void *)(a1 + 32));
        }
      }
      unsigned int v40 = VTPixelTransferChainHasNodes(*(const __CFArray **)(a1 + 32));
      if (!v22 && v40)
      {
        uint64_t v22 = 0;
        goto LABEL_100;
      }
      unsigned __int8 v41 = *(unsigned char *)(a1 + 1139);
      CFTypeRef cfa = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E4F249D0], 0);
      if (FigCFEqual()) {
        unsigned __int8 v42 = 0;
      }
      else {
        unsigned __int8 v42 = v41;
      }
      long long v43 = *(_OWORD *)(a1 + 640);
      float64x2_t v44 = vcvtq_f64_s64(*(int64x2_t *)(a1 + 624));
      int64x2_t v45 = *(int64x2_t *)(a1 + 608);
      long long v121 = *(_OWORD *)(a1 + 592);
      float64x2_t v122 = v44;
      float64x2_t v123 = vcvtq_f64_s64(v45);
      uint64_t v46 = *(void *)(a1 + 656);
      uint64_t v47 = *(void *)(a1 + 664);
      float64x2_t v48 = vcvtq_f64_s64(*(int64x2_t *)(a1 + 672));
      long long v118 = v43;
      float64x2_t v119 = v48;
      v120.f64[0] = (double)v46;
      v120.f64[1] = (double)v47;
      uint64_t v50 = *(void *)(a1 + 256);
      uint64_t v49 = *(void *)(a1 + 264);
      float64x2_t v51 = vcvtq_f64_s64(*(int64x2_t *)(a1 + 272));
      v115[0] = *(_OWORD *)(a1 + 240);
      v115[1] = v51;
      double v116 = (double)v50;
      double v117 = (double)v49;
      uint64_t v52 = *(void *)(a1 + 752);
      if (!v52) {
        goto LABEL_87;
      }
      size_t v53 = *(uint64_t (**)(void, void, __CVBuffer *, long long *, __CVBuffer *, long long *))(v52 + 56);
      if (!v53) {
        goto LABEL_87;
      }
      if (*(unsigned char *)(a1 + 768))
      {
        uint64_t v54 = v53(*(void *)(a1 + 760), *(void *)(a1 + 776), a2, &v121, v30, &v118);
        goto LABEL_95;
      }
      if (!*(void *)(a1 + 696) && !*(void *)(a1 + 704) || *(void *)(a1 + 216))
      {
LABEL_87:
        unint64_t v57 = *(void *)(a1 + 696);
        if (v57)
        {
          unint64_t v58 = *(void *)(a1 + 704);
          if (*(void *)(a1 + 216))
          {
LABEL_89:
            uint64_t v22 = vtPixelTransferSession_InvokeBlitter(v57, v58, *(void *)(a1 + 712), (void *)(a1 + 728), (void *)(a1 + 736), a2, *(__CVBuffer **)(a1 + 232), a1 + 592, a1 + 592);
            uint64_t v59 = cfa;
            if (v22) {
              goto LABEL_97;
            }
            LOBYTE(v96) = *(unsigned char *)(a1 + 745);
            uint64_t v60 = (*(uint64_t (**)(void, uint64_t, __CVBuffer *, uint64_t, uint64_t, void, void, void, int, void))(a1 + 216))(*(void *)(a1 + 232), a1 + 592, v30, a1 + 640, a1 + 288, 0, v42, *(unsigned __int8 *)(a1 + 1138), v96, *(void *)(a1 + 1144));
            goto LABEL_91;
          }
LABEL_94:
          uint64_t v54 = vtPixelTransferSession_InvokeBlitter(v57, v58, *(void *)(a1 + 712), (void *)(a1 + 728), (void *)(a1 + 736), a2, v30, a1 + 592, a1 + 640);
          goto LABEL_95;
        }
        unint64_t v58 = *(void *)(a1 + 704);
        if (v58)
        {
          if (*(void *)(a1 + 216)) {
            goto LABEL_89;
          }
          goto LABEL_94;
        }
        if (*(unsigned char *)(a1 + 1184))
        {
          if (v52 && *(void *)(v52 + 56))
          {
            OSType v62 = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(a1 + 232));
            if (*(_DWORD *)(a1 + 572) == v62 || *(_DWORD *)(a1 + 580) == v62)
            {
              uint64_t v22 = (*(uint64_t (**)(void, void, __CVBuffer *, long long *, void, _OWORD *))(*(void *)(a1 + 752) + 56))(*(void *)(a1 + 760), *(void *)(a1 + 776), a2, &v121, *(void *)(a1 + 232), v115);
              uint64_t v59 = cfa;
              if (!v22)
              {
                uint64_t v60 = VTMetalTransferSessionTransferImageSync(*(const __CFArray **)(a1 + 1160), *(void **)(a1 + 232), v30, *(const __CFDictionary **)(a1 + 1168));
LABEL_91:
                uint64_t v22 = v60;
                goto LABEL_97;
              }
              goto LABEL_97;
            }
            uint64_t v66 = VTMetalTransferSessionTransferImageSync(*(const __CFArray **)(a1 + 1160), a2, *(void **)(a1 + 232), *(const __CFDictionary **)(a1 + 1168));
LABEL_161:
            uint64_t v22 = v66;
            uint64_t v59 = cfa;
            if (!v66)
            {
              uint64_t v60 = (*(uint64_t (**)(void, void, void, _OWORD *, __CVBuffer *, long long *))(*(void *)(a1 + 752) + 56))(*(void *)(a1 + 760), *(void *)(a1 + 776), *(void *)(a1 + 232), v115, v30, &v118);
              goto LABEL_91;
            }
            goto LABEL_97;
          }
          uint64_t v64 = *(uint64_t (**)(__CVBuffer *, uint64_t, void))(a1 + 216);
          if (!v64)
          {
            CFArrayRef v67 = *(const __CFArray **)(a1 + 1160);
            CFDictionaryRef v68 = *(const __CFDictionary **)(a1 + 1168);
            CFTypeRef v69 = a2;
LABEL_165:
            uint64_t v54 = VTMetalTransferSessionTransferImageSync(v67, v69, v30, v68);
            goto LABEL_95;
          }
          if (v50 != v46 || v49 != v47)
          {
            uint64_t v54 = VTMetalTransferSessionTransferImageSync(*(const __CFArray **)(a1 + 1160), a2, *(void **)(a1 + 232), *(const __CFDictionary **)(a1 + 1168));
            if (!v54) {
              uint64_t v54 = (*(uint64_t (**)(void, uint64_t, __CVBuffer *, uint64_t, uint64_t, void, void, void, _BYTE, void))(a1 + 216))(*(void *)(a1 + 232), a1 + 240, v30, a1 + 640, a1 + 288, 0, v42, *(unsigned __int8 *)(a1 + 1138), *(unsigned char *)(a1 + 745), *(void *)(a1 + 1144));
            }
            goto LABEL_95;
          }
          uint64_t v54 = v64(a2, a1 + 592, *(void *)(a1 + 232));
          if (!v54)
          {
            CFArrayRef v67 = *(const __CFArray **)(a1 + 1160);
            CFTypeRef v69 = *(__CVBuffer **)(a1 + 232);
            CFDictionaryRef v68 = *(const __CFDictionary **)(a1 + 1168);
            goto LABEL_165;
          }
        }
        else
        {
          int v65 = *(uint64_t (**)(__CVBuffer *, uint64_t, __CVBuffer *, uint64_t, uint64_t, void, void, void, _BYTE, void))(a1 + 216);
          if (!v65)
          {
            uint64_t v22 = 4294954391;
            goto LABEL_96;
          }
          uint64_t v54 = v65(a2, a1 + 592, v30, a1 + 640, a1 + 288, 0, v42, *(unsigned __int8 *)(a1 + 1138), *(unsigned char *)(a1 + 745), *(void *)(a1 + 1144));
        }
LABEL_95:
        uint64_t v22 = v54;
LABEL_96:
        uint64_t v59 = cfa;
        goto LABEL_97;
      }
      uint64_t v63 = a1 + 240;
      if (*(_DWORD *)(a1 + 580) != CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(a1 + 232)))
      {
        uint64_t v66 = vtPixelTransferSession_InvokeBlitter(*(void *)(a1 + 696), *(void *)(a1 + 704), *(void *)(a1 + 712), (void *)(a1 + 728), (void *)(a1 + 736), a2, *(__CVBuffer **)(a1 + 232), a1 + 592, v63);
        goto LABEL_161;
      }
      uint64_t v22 = (*(uint64_t (**)(void, void, __CVBuffer *, long long *, void, _OWORD *))(*(void *)(a1 + 752)
                                                                                                  + 56))(*(void *)(a1 + 760), *(void *)(a1 + 776), a2, &v121, *(void *)(a1 + 232), v115);
      uint64_t v59 = cfa;
      if (!v22)
      {
        uint64_t v60 = vtPixelTransferSession_InvokeBlitter(*(void *)(a1 + 696), *(void *)(a1 + 704), *(void *)(a1 + 712), (void *)(a1 + 728), (void *)(a1 + 736), *(CVPixelBufferRef *)(a1 + 232), v30, v63, a1 + 640);
        goto LABEL_91;
      }
LABEL_97:
      if (v59) {
        CFRelease(v59);
      }
      if (v22) {
        goto LABEL_133;
      }
LABEL_100:
      if (*(unsigned char *)(a1 + 1136)
        || *(unsigned char *)(a1 + 1137)
        || (uint64_t v22 = VTFillPixelsOutsideDestRectWithBlack(v30, (uint64_t *)(a1 + 640), (uint64_t **)(a1 + 736)), !v22))
      {
        if (*(_DWORD *)(a1 + 1016) != 2) {
          goto LABEL_118;
        }
        vImage_Error v61 = vtVImageConverterProc(*(__CVBuffer **)(a1 + 1040), a3, a1 + 1056);
LABEL_117:
        uint64_t v22 = v61;
        if (!v61)
        {
LABEL_118:
          if (v114)
          {
            if (v23) {
              CVBufferSetAttachment(a3, key, v23, kCVAttachmentMode_ShouldPropagate);
            }
            else {
              CVBufferRemoveAttachment(a3, key);
            }
            if (v24) {
              CVBufferSetAttachment(a3, v106, v24, kCVAttachmentMode_ShouldPropagate);
            }
            else {
              CVBufferRemoveAttachment(a3, v106);
            }
            if (v9) {
              CVBufferSetAttachment(a3, v107, v9, kCVAttachmentMode_ShouldPropagate);
            }
            else {
              CVBufferRemoveAttachment(a3, v107);
            }
            if (value) {
              CVBufferSetAttachment(a3, v108, value, kCVAttachmentMode_ShouldPropagate);
            }
            else {
              CVBufferRemoveAttachment(a3, v108);
            }
            CVBufferSetAttachment(a3, v105, v114, kCVAttachmentMode_ShouldPropagate);
          }
          ++*(void *)(a1 + 1232);
        }
      }
LABEL_133:
      if (v29) {
        CFRelease(v29);
      }
LABEL_135:
      if (v23) {
        CFRelease(v23);
      }
      if (v24) {
        CFRelease(v24);
      }
      if (v9) {
        CFRelease(v9);
      }
      if (value) {
        CFRelease(value);
      }
      if (v114) {
        CFRelease(v114);
      }
      return v22;
  }
}

uint64_t VTPixelTransferSessionGetNextSoftwareBlitter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a4 + 32);
  if (v4)
  {
    if (v4 > 0x134C)
    {
LABEL_14:
      uint64_t v9 = 0;
      uint64_t result = 0;
      *(_DWORD *)a2 = 0;
      *(void *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      goto LABEL_15;
    }
    unsigned int v5 = &VTPixelGraphBlitterTable[48 * v4];
    while (v5[4] != *(unsigned char *)(a1 + 5))
    {
      *(void *)(a4 + 32) = ++v4;
      v5 += 48;
      if (v4 == 4941) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    unsigned int v5 = VTPixelGraphBlitterTable;
    while (*(_DWORD *)v5 != *(_DWORD *)a1 || v5[4] != *(unsigned char *)(a1 + 5))
    {
      *(void *)(a4 + 32) = ++v4;
      v5 += 48;
      if (v4 == 4941)
      {
LABEL_11:
        unsigned int v5 = aPedf;
        break;
      }
    }
  }
  if (*(_DWORD *)v5 != *(_DWORD *)a1) {
    goto LABEL_14;
  }
  *(_DWORD *)a2 = *((_DWORD *)v5 + 2);
  *(unsigned char *)(a2 + 6) = v5[13];
  *(unsigned char *)(a2 + 7) = v5[14];
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(a1 + 4) & 0x1F;
  *(unsigned char *)(a2 + 5) = v5[12];
  uint64_t v6 = *((void *)v5 + 2);
  *(void *)a3 = *((void *)v5 + 5);
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = *((void *)v5 + 3);
  *(_DWORD *)(a3 + 40) = 4;
  uint64_t v7 = *((void *)v5 + 4);
  *(void *)&long long v8 = v7;
  *((void *)&v8 + 1) = HIDWORD(v7);
  *(_OWORD *)(a3 + 48) = v8;
  *(unsigned char *)(a3 + 64) = 0;
  uint64_t v9 = *(void *)(a4 + 32) + 1;
  uint64_t result = 1;
LABEL_15:
  *(void *)(a4 + 32) = v9;
  return result;
}

uint64_t VTPixelTransferSessionGetNextVImageBlitter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a4 + 32);
  if (v4)
  {
    if (v4 > 0x157)
    {
LABEL_14:
      uint64_t v11 = 0;
      uint64_t result = 0;
      *(_DWORD *)a2 = 0;
      *(void *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      goto LABEL_15;
    }
    unsigned int v5 = &VTPixelGraphVImageBlitterTable[8 * v4];
    unint64_t v6 = v4 + 1;
    while (*((unsigned __int8 *)v5 + 4) != *(unsigned __int8 *)(a1 + 5))
    {
      *(void *)(a4 + 32) = v6;
      v5 += 8;
      if (++v6 == 345) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    unsigned int v5 = VTPixelGraphVImageBlitterTable;
    uint64_t v7 = 1;
    while (*v5 != *(_DWORD *)a1 || *((unsigned __int8 *)v5 + 4) != *(unsigned __int8 *)(a1 + 5))
    {
      *(void *)(a4 + 32) = v7++;
      v5 += 8;
      if (v7 == 345)
      {
LABEL_11:
        unsigned int v5 = (int *)a02wx;
        break;
      }
    }
  }
  if (*v5 != *(_DWORD *)a1) {
    goto LABEL_14;
  }
  *(_DWORD *)a2 = v5[2];
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(a1 + 4) & 0x1F;
  *(unsigned char *)(a2 + 5) = *((unsigned char *)v5 + 12);
  *(unsigned char *)(a2 + 6) = *((unsigned char *)v5 + 13);
  *(unsigned char *)(a2 + 7) = *((unsigned char *)v5 + 14);
  uint64_t v8 = *((void *)v5 + 2);
  *(void *)a3 = vtPixelTransferAppendvImageBlitterNodeCallback;
  *(void *)(a3 + 8) = v8;
  *(_DWORD *)(a3 + 40) = 4;
  uint64_t v9 = *((void *)v5 + 3);
  *(void *)&long long v10 = v9;
  *((void *)&v10 + 1) = HIDWORD(v9);
  *(_OWORD *)(a3 + 48) = v10;
  *(unsigned char *)(a3 + 64) = 0;
  uint64_t v11 = *(void *)(a4 + 32) + 1;
  uint64_t result = 1;
LABEL_15:
  *(void *)(a4 + 32) = v11;
  return result;
}

uint64_t vtPixelTransferAppendvImageBlitterNodeCallback(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v10 = *(uint64_t (**)(unint64_t, unint64_t, CFStringRef, CFStringRef, void, void, void, uint64_t *, uint64_t *, uint64_t, void (**)(uint64_t)))(a3 + 8);
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v19 = 0;
  CFStringRef StringForIntegerCodePoint = CVYCbCrMatrixGetStringForIntegerCodePoint(*(unsigned __int8 *)(a1 + 5));
  CFStringRef v12 = CVYCbCrMatrixGetStringForIntegerCodePoint(*((unsigned __int8 *)a2 + 5));
  CFTypeRef cf = 0;
  CurrentCMVideoDimensions Dimensions = VTPixelTransferGraphGetCurrentDimensions(a1, (uint64_t)a2, a3, a6, 0, (uint64_t)&v22);
  if (CurrentDimensions
    || (CurrentCMVideoDimensions Dimensions = v10((unint64_t)*(double *)&v23, (unint64_t)*((double *)&v23 + 1), StringForIntegerCodePoint, v12, *(void *)(a6 + 136), *(unsigned __int8 *)(a6 + 144), 0, &v21, &v20, a3 + 32, &v19), CurrentDimensions))
  {
    uint64_t appended = CurrentDimensions;
  }
  else
  {
    uint64_t PixelBufferPoolAttributes = VTPixelTransferChainCreatePixelBufferPoolAttributes(*a2, (unint64_t)*(double *)&v23, (unint64_t)*((double *)&v23 + 1), (CFMutableDictionaryRef *)&cf);
    CFTypeRef v15 = cf;
    if (!PixelBufferPoolAttributes)
    {
      uint64_t appended = VTPixelTransferChainAppendSoftwareNode(*(void *)a6, (uint64_t)cf, 0, v20, v21, v19);
      uint64_t v21 = 0;
      CFTypeRef v15 = cf;
      if (!cf) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
    uint64_t appended = PixelBufferPoolAttributes;
    if (cf) {
LABEL_5:
    }
      CFRelease(v15);
  }
LABEL_6:
  if (v21) {
    ((void (*)(void))v19)();
  }
  return appended;
}

void VTPixelTransferNodeSoftwareFinalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[4] = 0;
  char v1 = (void *)DerivedStorage[7];
  if (v1)
  {
    free(v1);
    DerivedStorage[7] = 0;
  }
  unsigned int v2 = (void *)DerivedStorage[8];
  if (v2)
  {
    free(v2);
    DerivedStorage[8] = 0;
  }
  unsigned int v3 = (void (*)(void))DerivedStorage[6];
  if (v3) {
    v3(DerivedStorage[5]);
  }

  VTPixelTransferNodeBaseFinalize();
}

__CFString *VTPixelTransferNodeSoftwareCopyDebugDescription()
{
  return @"[VTPixelTransferNodeSoftware]";
}

uint64_t VTPixelTransferNodeSoftwareDoTransfer(uint64_t a1, __CVBuffer *a2, uint64_t a3, __CVBuffer *a4, uint64_t a5)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  VTConvertFloatRectToIntRect(a3, (uint64_t)v12);
  VTConvertFloatRectToIntRect(a5, (uint64_t)v11);
  return vtPixelTransferSession_InvokeBlitter(DerivedStorage[3], DerivedStorage[4], DerivedStorage[5], DerivedStorage + 7, DerivedStorage + 8, a2, a4, (uint64_t)v12, (uint64_t)v11);
}

unint64_t vtPixelTransferSession_PrepareOffsets(unint64_t result, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  if (result >= 2)
  {
    unint64_t v6 = (int8x16_t *)(a3 + 3);
    int8x16_t v7 = (int8x16_t)vdupq_n_s64(1uLL);
    unint64_t v8 = result;
    do
    {
      int8x16_t v9 = *v6;
      v6 += 7;
      int8x16_t v7 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v7, (uint64x2_t)v9), v7, v9);
      --v8;
    }
    while (v8);
    uint64_t v10 = *(void *)(a2 + 40) / v7.i64[1] * v7.i64[1];
    unint64_t v11 = *(void *)(a2 + 32) / v7.i64[0] * v7.i64[0];
    CFStringRef v12 = a3 + 2;
    do
    {
      uint64_t v14 = *a5++;
      uint64_t v13 = v14;
      uint64_t v15 = *(v12 - 2);
      uint64_t v16 = *a4++;
      uint64_t v17 = v13 + v16 * v10 / (unint64_t)(v12[2] * *(v12 - 1));
      uint64_t v18 = *v12;
      uint64_t v19 = v12[1];
      v12 += 14;
      *a6++ = v17 + v18 * v11 / (8 * v15 * v19);
      --result;
    }
    while (result);
  }
  else
  {
    *a6 = *a5
        + (unint64_t)(*a4 * *(void *)(a2 + 40) / a3[4] * a3[4]) / a3[1]
        + a3[2] * *(void *)(a2 + 32) / a3[3] * a3[3] / (unint64_t)(8 * *a3);
  }
  return result;
}

void VTPixelTransferNodeScalerFinalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[3] = 0;
  char v1 = (void *)DerivedStorage[36];
  if (v1)
  {
    free(v1);
    DerivedStorage[36] = 0;
  }
  unsigned int v2 = (void *)DerivedStorage[37];
  if (v2)
  {
    free(v2);
    DerivedStorage[37] = 0;
  }
  unsigned int v3 = (void *)DerivedStorage[38];
  if (v3)
  {
    free(v3);
    DerivedStorage[38] = 0;
  }
  uint64_t v4 = 0;
  unsigned int v5 = DerivedStorage + 4;
  do
  {
    unint64_t v6 = (void *)v5[v4];
    if (v6)
    {
      free(v6);
      v5[v4] = 0;
    }
    v4 += 4;
  }
  while (v4 != 16);
  uint64_t v7 = 0;
  unint64_t v8 = DerivedStorage + 20;
  do
  {
    int8x16_t v9 = (void *)v8[v7];
    if (v9)
    {
      free(v9);
      v8[v7] = 0;
    }
    v7 += 4;
  }
  while (v7 != 16);
  for (uint64_t i = 0; i != 16; i += 4)
  {
    unint64_t v11 = (void *)v5[i];
    if (v11)
    {
      free(v11);
      v5[i] = 0;
    }
  }
  uint64_t v12 = 0;
  uint64_t v13 = DerivedStorage + 16;
  do
  {
    uint64_t v14 = (void *)v13[v12];
    if (v14)
    {
      free(v14);
      v13[v12] = 0;
    }
    v12 += 4;
  }
  while (v12 != 16);
  uint64_t v15 = (void *)DerivedStorage[36];
  if (v15)
  {
    free(v15);
    DerivedStorage[36] = 0;
  }
  uint64_t v16 = (void *)DerivedStorage[37];
  if (v16)
  {
    free(v16);
    DerivedStorage[37] = 0;
  }
  uint64_t v17 = (void *)DerivedStorage[38];
  if (v17)
  {
    free(v17);
    DerivedStorage[38] = 0;
  }

  VTPixelTransferNodeBaseFinalize();
}

__CFString *VTPixelTransferNodeScalerCopyDebugDescription()
{
  return @"[VTPixelTransferNodeScaler]";
}

uint64_t VTPixelTransferNodeScalerDoTransfer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  VTConvertFloatRectToIntRect(a3, (uint64_t)v13);
  __n128 v10 = VTConvertFloatRectToIntRect(a5, (uint64_t)v12);
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _OWORD *, uint64_t, void, void, void, __n128, _BYTE, void))(DerivedStorage + 24))(a2, v13, a4, v12, DerivedStorage + 32, *(unsigned __int8 *)(DerivedStorage + 312), *(unsigned __int8 *)(DerivedStorage + 313), *(unsigned __int8 *)(DerivedStorage + 314), v10, *(unsigned char *)(DerivedStorage + 315), *(void *)(DerivedStorage + 320));
}

void VTPixelTransferNodeDynamicFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v1 = *(const void **)(DerivedStorage + 136);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 136) = 0;
  }
  (*(void (**)(void))(DerivedStorage + 160))(*(void *)(DerivedStorage + 24));
  *(void *)(DerivedStorage + 24) = 0;
  *(void *)(DerivedStorage + 152) = 0;
  *(void *)(DerivedStorage + 160) = 0;
  *(void *)(DerivedStorage + 144) = 0;

  VTPixelTransferNodeBaseFinalize();
}

__CFString *VTPixelTransferNodeDynamicCopyDebugDescription()
{
  return @"[VTPixelTransferNodeDynamic]";
}

uint64_t VTPixelTransferNodeDynamicDoTransfer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unint64_t v11 = (uint64_t *)(DerivedStorage + 24);
  uint64_t v10 = *(void *)(DerivedStorage + 24);
  if (!v10)
  {
    uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(DerivedStorage + 144))(*MEMORY[0x1E4F1CF80], *(void *)(DerivedStorage + 136), a2, a3, a4, a5, v11);
    if (result) {
      return result;
    }
    uint64_t v10 = *v11;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(DerivedStorage + 152);
  uint64_t v14 = *(void *)(DerivedStorage + 136);

  return v13(v10, v14, a2, a3, a4, a5);
}

CFTypeRef vtPixelTransferSessionCopyFormattingDesc()
{
  return CFRetain(@"[VTPixelTransferSession]");
}

__CFString *vtPixelTransferSessionCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDataRef Mutable = CFStringCreateMutable(v2, 0);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<VTPixelTransferSession %p [%p]>{", a1, v4);
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

uint64_t vtAllowTransferCapabilityCommonOnce()
{
  sAllowSoftwareTransferSessiouint64_t n = FigGetCFPreferenceBooleanWithDefault();
  sAllowMetalTransferSessiouint64_t n = FigGetCFPreferenceBooleanWithDefault();
  sAllowHardwareTransferSessiouint64_t n = FigGetCFPreferenceBooleanWithDefault();
  sAllowPixelTransferChaiuint64_t n = FigGetCFPreferenceBooleanWithDefault();
  sAllowPixelTransferGraph = FigGetCFPreferenceBooleanWithDefault();
  uint64_t result = FigGetCFPreferenceBooleanWithDefault();
  sAllowPixelTransferFallbacks = result;
  return result;
}

CFArrayRef vtPixelTransferSessionCreateYCbCrMatricesArray()
{
  values[6] = *(void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (void *)*MEMORY[0x1E4F24C40];
  values[0] = *(void **)MEMORY[0x1E4F24C48];
  values[1] = v0;
  values[2] = *(void **)MEMORY[0x1E4F24C60];
  values[3] = @"ITU_R_2020";
  values[4] = @"DCI_P3";
  values[5] = @"P3_D65";
  CFArrayRef v1 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 6, MEMORY[0x1E4F1D510]);
  if (!v1) {
    FigSignalErrorAt();
  }
  return v1;
}

void vtPixelTransferSessionUpdateTransferOptions(uint64_t a1)
{
  CFMutableDataRef Mutable = *(__CFDictionary **)(a1 + 776);
  if (!Mutable)
  {
    CFMutableDataRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)(a1 + 776) = Mutable;
  }
  unsigned int v3 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFAllocatorRef v4 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (*(unsigned char *)(a1 + 770)) {
    unsigned int v5 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    unsigned int v5 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, @"ServiceEnableHighSpeedTransfer", v5);
  if (*(unsigned char *)(a1 + 784)) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = v4;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 776), @"ServiceDisableDither", v6);
  if (*(unsigned char *)(a1 + 785)) {
    uint64_t v7 = v3;
  }
  else {
    uint64_t v7 = v4;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 776), @"ServiceUseOptimalMSRCoefficients", v7);
  if (*(unsigned char *)(a1 + 789))
  {
    unint64_t v8 = *(const void **)(a1 + 800);
    int8x16_t v9 = *(__CFDictionary **)(a1 + 776);
    if (v8)
    {
      CFDictionarySetValue(v9, @"ServiceHistogramRectangle", v8);
      goto LABEL_17;
    }
  }
  else
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 776), @"ServiceHistogramData");
    int8x16_t v9 = *(__CFDictionary **)(a1 + 776);
  }
  CFDictionaryRemoveValue(v9, @"ServiceHistogramRectangle");
LABEL_17:
  uint64_t v10 = *(const void **)(a1 + 1128);
  unint64_t v11 = *(__CFDictionary **)(a1 + 776);
  if (v10) {
    CFDictionarySetValue(v11, @"RealTime", v10);
  }
  else {
    CFDictionaryRemoveValue(v11, @"RealTime");
  }
  uint64_t v12 = *(__CFDictionary **)(a1 + 776);
  if (*(unsigned char *)(a1 + 1187))
  {
    CFDictionarySetValue(v12, @"ReducedPrecisionFractionalOffsets", v3);
  }
  else
  {
    CFDictionaryRemoveValue(v12, @"ReducedPrecisionFractionalOffsets");
  }
}

char *vt_Copy_v210_10bitBiPlanarYUV422(__CVBuffer *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = a3[2];
  uint64_t v6 = a3[3];
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  uint64_t v9 = a3[7];
  uint64_t v10 = a3[4];
  if (CVPixelBufferIsPlanar(a1))
  {
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
    uint64_t result = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  }
  else
  {
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(a1);
    uint64_t result = (char *)CVPixelBufferGetBaseAddress(a1);
  }
  if (v7 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = (v5 + 5) / 6;
    uint64_t v15 = &result[2 * *(void *)(a2 + 32) + *(void *)(a2 + 40) * BytesPerRowOfPlane];
    if (v14 <= 1) {
      uint64_t v14 = 1;
    }
    do
    {
      if (v5 >= 1)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v18 = v14;
        do
        {
          uint64_t v19 = (_WORD *)(v8 + v16);
          uint64_t v20 = (_WORD *)(v10 + v16);
          unsigned int v21 = *(_DWORD *)&v15[v17];
          uint64_t result = (char *)*(unsigned int *)&v15[v17 + 4];
          unsigned int v22 = *(_DWORD *)&v15[v17 + 8];
          unsigned int v23 = *(_DWORD *)&v15[v17 + 12];
          *uint64_t v20 = (_WORD)v21 << 6;
          *uint64_t v19 = (v21 >> 4) & 0xFFC0;
          v20[1] = (v21 >> 14) & 0xFFC0;
          v19[1] = (_WORD)result << 6;
          void v20[2] = (result >> 4) & 0xFFC0;
          v19[2] = (result >> 14) & 0xFFC0;
          v20[3] = (_WORD)v22 << 6;
          void v19[3] = (v22 >> 4) & 0xFFC0;
          void v20[4] = (v22 >> 14) & 0xFFC0;
          void v19[4] = (_WORD)v23 << 6;
          v20[5] = (v23 >> 4) & 0xFFC0;
          v19[5] = (v23 >> 14) & 0xFFC0;
          v17 += 16;
          v16 += 12;
          --v18;
        }
        while (v18);
      }
      v15 += BytesPerRowOfPlane;
      v8 += v6;
      v10 += v9;
      ++v13;
    }
    while (v13 != v7);
  }
  return result;
}

__int16 *vt_Copy_10bitBiPlanarYUV422_v210(uint64_t *a1, CVPixelBufferRef pixelBuffer, uint64_t a3)
{
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[4];
  if (CVPixelBufferIsPlanar(pixelBuffer))
  {
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
    uint64_t result = (__int16 *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  }
  else
  {
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(pixelBuffer);
    uint64_t result = (__int16 *)CVPixelBufferGetBaseAddress(pixelBuffer);
  }
  if (v7 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = (v5 + 5) / 6;
    uint64_t v15 = (char *)&result[*(void *)(a3 + 32)] + *(void *)(a3 + 40) * BytesPerRowOfPlane;
    if (v14 <= 1) {
      uint64_t v14 = 1;
    }
    v16.i64[0] = 0x2000000020;
    v16.i64[1] = 0x2000000020;
    v17.i64[0] = 0x300000003;
    v17.i64[1] = 0x300000003;
    do
    {
      if (v5 >= 1)
      {
        uint64_t v18 = 0;
        for (uint64_t i = 0; i != v14; ++i)
        {
          uint64_t result = (__int16 *)(v10 + v18 + 10);
          v20.i16[0] = *(_WORD *)(v8 + v18);
          v20.i16[1] = *(_WORD *)(v10 + v18 + 4);
          v20.i16[2] = *(_WORD *)(v8 + v18 + 6);
          v20.i16[3] = *result;
          v21.i16[0] = *(_WORD *)(v10 + v18);
          v21.i16[1] = *(_WORD *)(v8 + v18 + 2);
          v21.i16[2] = *(_WORD *)(v10 + v18 + 6);
          v21.i16[3] = *(_WORD *)(v8 + v18 + 8);
          v22.i16[0] = *(_WORD *)(v10 + v18 + 2);
          v22.i16[1] = *(_WORD *)(v8 + v18 + 4);
          v22.i16[2] = *(_WORD *)(v10 + v18 + 8);
          v22.i16[3] = *(_WORD *)(v8 + v18 + 10);
          *(int8x16_t *)&v15[16 * i] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vminq_u32(vshrq_n_u32(vaddw_u16(v16, v20), 6uLL), v17), 0xAuLL), (int8x16_t)vminq_u32(vshrq_n_u32(vaddw_u16(v16, v21), 6uLL), v17)), (int8x16_t)vshlq_n_s32((int32x4_t)vminq_u32(vshrq_n_u32(vaddw_u16(v16, v22), 6uLL), v17), 0x14uLL));
          v18 += 12;
        }
      }
      v8 += v6;
      v10 += v9;
      v15 += BytesPerRowOfPlane;
      ++v13;
    }
    while (v13 != v7);
  }
  return result;
}

CFDictionaryRef vtCreatePixelAspectRatioAttachment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = (void *)*MEMORY[0x1E4F24BA0];
  keys[0] = *(void **)MEMORY[0x1E4F24B90];
  keys[1] = v4;
  uint64_t v5 = a4 * a1;
  uint64_t v6 = a3 * a2;
  if (a4 * a1 >= 0) {
    uint64_t v7 = a4 * a1;
  }
  else {
    uint64_t v7 = -v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = a3 * a2;
  }
  else {
    uint64_t v8 = -v6;
  }
  if (v7 <= v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = v7;
  }
  if (v7 >= v8) {
    uint64_t v7 = v8;
  }
  if (v7)
  {
    if (v7 < 1)
    {
      uint64_t v10 = v9;
    }
    else
    {
      do
      {
        uint64_t v10 = v7;
        uint64_t v7 = v9 % v7;
        uint64_t v9 = v10;
      }
      while (v7 > 0);
    }
  }
  else if ((unint64_t)v9 <= 1)
  {
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = v9;
  }
  CFDictionaryRef v11 = 0;
  uint64_t v12 = v6 / v10;
  uint64_t v17 = v12;
  uint64_t valuePtr = v5 / v10;
  if (v5 / v10 && v12)
  {
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
    values = v14;
    CFNumberRef v15 = CFNumberCreate(v13, kCFNumberSInt64Type, &v17);
    CFDictionaryRef v11 = 0;
    CFTypeRef cf = v15;
    if (v14 && v15)
    {
      CFDictionaryRef v11 = CFDictionaryCreate(v13, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v14 = values;
    }
    if (v14) {
      CFRelease(v14);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return v11;
}

uint64_t vtPixelTransferServiceNodeMatchesSourceAndDestinationPixelFormats(uint64_t *a1, int a2, int a3)
{
  uint64_t v3 = *a1;
  if (*a1 < 1) {
    return 0;
  }
  CFAllocatorRef v4 = (int *)a1[1];
  while (1)
  {
    int v5 = *v4++;
    if (v5 == a2) {
      break;
    }
    if (!--v3) {
      return 0;
    }
  }
  uint64_t v6 = a1[2];
  if (v6 < 1) {
    return 0;
  }
  uint64_t v7 = (int *)a1[3];
  while (1)
  {
    int v8 = *v7;
    v7 += 2;
    if (v8 == a3) {
      break;
    }
    if (!--v6) {
      return 0;
    }
  }
  return 1;
}

vImage_Error vt_VImage_Setup_2vuy_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CbYpCrYp8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_2vuy_32ARGB;
  *a11 = vt_VImage_Cleanup_2vuy_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_2vuy_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CbYpCrYp8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_2vuy_32BGRA;
  *a11 = vt_VImage_Cleanup_2vuy_32BGRA;
  *a8 = v17;
  return result;
}

uint64_t vt_CopyAvg_2vuy_y420(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v60 = 0u;
  *(_OWORD *)&v59[32] = 0u;
  *(_OWORD *)&v59[16] = 0u;
  *(_OWORD *)uint64_t v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  *(_OWORD *)&v54[32] = 0u;
  *(_OWORD *)&v54[16] = 0u;
  *(_OWORD *)uint64_t v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v48[0] = vdupq_n_s64(1uLL);
  v48[1] = xmmword_193E7D400;
  uint64_t v49 = 1;
  *(_OWORD *)&v54[8] = v48[0];
  *(_OWORD *)&v54[24] = xmmword_193E7D410;
  *(void *)&v54[40] = 2;
  *(_OWORD *)&v59[8] = v48[0];
  *(_OWORD *)&v59[24] = xmmword_193E7D410;
  uint64_t v71 = 0;
  *(void *)&v59[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(3uLL, a6, v48, a8, a7, &v46);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *a8;
    uint64_t v17 = a8[1];
    uint64_t v18 = a8[2];
    unint64_t v19 = v10 >> 1;
    uint64_t v20 = v9 >> 1;
    uint64_t v21 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    uint64_t v23 = *((void *)&v46 + 1);
    uint64_t v22 = v47;
    uint64_t v24 = v13 + v21 + v14 * v11;
    uint64_t v25 = 2 * *a8;
    uint64_t v26 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v20 = 1;
    }
    CFDictionaryRef v27 = (unsigned char *)(v46 + 1);
    uint64_t v28 = v13 + v14 + v21 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        int v31 = v27;
        do
        {
          uint64_t v32 = &v31[v16];
          uint64_t v33 = (unsigned __int8 *)(v28 + v29);
          uint64_t v34 = (unsigned __int8 *)(v24 + v29);
          unsigned int v35 = *(unsigned __int8 *)(v28 + v29) + *(unsigned __int8 *)(v24 + v29);
          unsigned int v36 = v35 >> 1;
          if (v35 >> 1 >= 0xF0) {
            LOBYTE(v36) = -16;
          }
          unsigned int v37 = v34[1];
          if (v37 >= 0xEB) {
            unsigned int v37 = 235;
          }
          if (v37 <= 0x10) {
            LOBYTE(v37) = 16;
          }
          unsigned int v38 = v33[2] + v34[2];
          unsigned int v39 = v38 >> 1;
          if (v38 >> 1 >= 0xF0) {
            LOBYTE(v39) = -16;
          }
          unsigned int v40 = v34[3];
          if (v40 >= 0xEB) {
            unsigned int v40 = 235;
          }
          if (v40 <= 0x10) {
            LOBYTE(v40) = 16;
          }
          unsigned int v41 = v33[1];
          if (v41 >= 0xEB) {
            unsigned int v41 = 235;
          }
          if (v41 <= 0x10) {
            LOBYTE(v41) = 16;
          }
          unsigned __int8 v42 = v33[3];
          *(v31 - 1) = v37;
          *int v31 = v40;
          v31 += 2;
          *(v32 - 1) = v41;
          unsigned __int8 *v32 = v42;
          if (v35 >= 0x20) {
            char v43 = v36;
          }
          else {
            char v43 = 16;
          }
          *(unsigned char *)(v23 + v30) = v43;
          if (v38 >= 0x20) {
            char v44 = v39;
          }
          else {
            char v44 = 16;
          }
          *(unsigned char *)(v22 + v30++) = v44;
          v29 += 4;
        }
        while (v20 != v30);
      }
      v23 += v17;
      v22 += v18;
      v24 += v26;
      ++v15;
      v27 += v25;
      v28 += v26;
    }
    while (v15 != v19);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_y420(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (a1 && *(unsigned char *)(a1 + 2))
  {
    vt_CopyAvg_2vuy_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v56 = 0u;
    *(_OWORD *)&v55[32] = 0u;
    *(_OWORD *)&v55[16] = 0u;
    *(_OWORD *)long long v55 = 0u;
    long long v54 = 0u;
    long long v53 = 0u;
    long long v52 = 0u;
    long long v51 = 0u;
    *(_OWORD *)&v50[32] = 0u;
    *(_OWORD *)&v50[16] = 0u;
    *(_OWORD *)long long v50 = 0u;
    long long v49 = 0u;
    long long v48 = 0u;
    long long v47 = 0u;
    long long v46 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    unint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    v44[0] = vdupq_n_s64(1uLL);
    v44[1] = xmmword_193E7D400;
    uint64_t v45 = 1;
    *(_OWORD *)&v50[8] = v44[0];
    *(_OWORD *)&v50[24] = xmmword_193E7D410;
    *(void *)&v50[40] = 2;
    *(_OWORD *)&v55[8] = v44[0];
    *(_OWORD *)&v55[24] = xmmword_193E7D410;
    uint64_t v67 = 0;
    *(void *)&v55[40] = 2;
    uint64_t v12 = a2[4];
    uint64_t v11 = a2[5];
    uint64_t v13 = *a3;
    uint64_t v14 = *a4;
    vtPixelTransferSession_PrepareOffsets(3uLL, a6, v44, a8, a7, &v42);
    if (v10 >= 2)
    {
      uint64_t v15 = 0;
      uint64_t v16 = *a8;
      uint64_t v17 = a8[1];
      uint64_t v18 = a8[2];
      unint64_t v19 = v10 >> 1;
      uint64_t v20 = v9 >> 1;
      uint64_t v22 = *((void *)&v42 + 1);
      uint64_t v21 = v43;
      uint64_t v23 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
      uint64_t v24 = v13 + v23 + v14 * v11;
      uint64_t v25 = 2 * *a8;
      uint64_t v26 = 2 * v14;
      if (v9 >> 1 <= 1) {
        uint64_t v20 = 1;
      }
      uint64_t v27 = v14 + v23 + v13 + v14 * v11 + 1;
      uint64_t v28 = (unsigned char *)(v42 + 1);
      do
      {
        if (v9 >= 2)
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          int v31 = v28;
          do
          {
            uint64_t v32 = &v31[v16];
            uint64_t v33 = (unsigned __int8 *)(v24 + v29);
            unsigned int v34 = *(unsigned __int8 *)(v24 + v29);
            if (v34 >= 0xF0) {
              unsigned int v34 = 240;
            }
            if (v34 <= 0x10) {
              LOBYTE(v34) = 16;
            }
            unsigned int v35 = v33[1];
            if (v35 >= 0xEB) {
              unsigned int v35 = 235;
            }
            if (v35 <= 0x10) {
              LOBYTE(v35) = 16;
            }
            unsigned int v36 = v33[2];
            if (v36 >= 0xF0) {
              unsigned int v36 = 240;
            }
            if (v36 <= 0x10) {
              LOBYTE(v36) = 16;
            }
            unsigned int v37 = v33[3];
            if (v37 >= 0xEB) {
              unsigned int v37 = 235;
            }
            if (v37 <= 0x10) {
              LOBYTE(v37) = 16;
            }
            unsigned int v38 = *(unsigned __int8 *)(v27 + v29);
            if (v38 >= 0xEB) {
              unsigned int v38 = 235;
            }
            if (v38 <= 0x10) {
              LOBYTE(v38) = 16;
            }
            unsigned int v39 = *(unsigned __int8 *)(v27 + v29 + 2);
            if (v39 >= 0xEB) {
              unsigned int v39 = 235;
            }
            *(v31 - 1) = v35;
            *int v31 = v37;
            v31 += 2;
            if (v39 <= 0x10) {
              char v40 = 16;
            }
            else {
              char v40 = v39;
            }
            *(v32 - 1) = v38;
            char *v32 = v40;
            *(unsigned char *)(v22 + v30) = v34;
            *(unsigned char *)(v21 + v30++) = v36;
            v29 += 4;
          }
          while (v20 != v30);
        }
        v22 += v17;
        v21 += v18;
        v24 += v26;
        ++v15;
        v27 += v26;
        v28 += v25;
      }
      while (v15 != v19);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_420v(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  *(_OWORD *)&v53[32] = 0u;
  *(_OWORD *)&v53[16] = 0u;
  *(_OWORD *)long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  memset(v46, 0, sizeof(v46));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v47[0] = vdupq_n_s64(1uLL);
  v47[1] = xmmword_193E7D400;
  uint64_t v48 = 1;
  *(_OWORD *)&v53[8] = v47[0];
  *(_OWORD *)&v53[24] = xmmword_193E7D420;
  uint64_t v72 = 0;
  *(void *)&v53[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v47, a8, a7, v46);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a8[1];
    unint64_t v17 = v10 >> 1;
    uint64_t v18 = v9 >> 1;
    uint64_t v19 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    uint64_t v20 = v13 + v19 + v14 * v11;
    uint64_t v21 = *((void *)&v46[0] + 1);
    uint64_t v22 = *(void *)&v46[0];
    uint64_t v23 = 2 * *a8;
    uint64_t v24 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v25 = *a8 + *(void *)&v46[0] + 1;
    uint64_t v26 = v13 + v14 + v19 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = v18;
        do
        {
          uint64_t v30 = (unsigned char *)(v22 + v28);
          int v31 = (unsigned __int8 *)(v25 + v28);
          uint64_t v32 = (unsigned __int8 *)(v26 + v27);
          uint64_t v33 = (char *)(v21 + v28);
          unsigned int v34 = (unsigned __int8 *)(v20 + v27);
          unsigned int v35 = *(unsigned __int8 *)(v26 + v27) + *(unsigned __int8 *)(v20 + v27);
          unsigned int v36 = v35 >> 1;
          if (v35 >> 1 >= 0xF0) {
            LOBYTE(v36) = -16;
          }
          unsigned int v37 = v34[1];
          if (v37 >= 0xEB) {
            unsigned int v37 = 235;
          }
          if (v37 <= 0x10) {
            LOBYTE(v37) = 16;
          }
          unsigned int v38 = v32[2] + v34[2];
          unsigned int v39 = v38 >> 1;
          if (v38 >> 1 >= 0xF0) {
            LOBYTE(v39) = -16;
          }
          unsigned int v40 = v34[3];
          if (v40 >= 0xEB) {
            unsigned int v40 = 235;
          }
          if (v40 <= 0x10) {
            LOBYTE(v40) = 16;
          }
          unsigned int v41 = v32[1];
          if (v41 >= 0xEB) {
            unsigned int v41 = 235;
          }
          if (v41 <= 0x10) {
            LOBYTE(v41) = 16;
          }
          unsigned __int8 v42 = v32[3];
          *uint64_t v30 = v37;
          v30[1] = v40;
          *(v31 - 1) = v41;
          *int v31 = v42;
          if (v35 >= 0x20) {
            char v43 = v36;
          }
          else {
            char v43 = 16;
          }
          *uint64_t v33 = v43;
          if (v38 >= 0x20) {
            char v44 = v39;
          }
          else {
            char v44 = 16;
          }
          v33[1] = v44;
          v28 += 2;
          v27 += 4;
          --v29;
        }
        while (v29);
      }
      v22 += v23;
      v21 += v16;
      v20 += v24;
      ++v15;
      v25 += v23;
      v26 += v24;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_420v(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  *(_OWORD *)&v49[32] = 0u;
  *(_OWORD *)&v49[16] = 0u;
  *(_OWORD *)long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  memset(v42, 0, sizeof(v42));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v43[0] = vdupq_n_s64(1uLL);
  v43[1] = xmmword_193E7D400;
  uint64_t v44 = 1;
  *(_OWORD *)&v49[8] = v43[0];
  *(_OWORD *)&v49[24] = xmmword_193E7D420;
  uint64_t v68 = 0;
  *(void *)&v49[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v43, a8, a7, v42);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a8[1];
    unint64_t v17 = v10 >> 1;
    uint64_t v18 = v9 >> 1;
    uint64_t v19 = *((void *)&v42[0] + 1);
    uint64_t v20 = *(void *)&v42[0];
    uint64_t v21 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    uint64_t v22 = v13 + v21 + v14 * v11;
    uint64_t v23 = 2 * *a8;
    uint64_t v24 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v25 = v14 + v21 + v13 + v14 * v11 + 3;
    uint64_t v26 = *a8 + *(void *)&v42[0] + 1;
    do
    {
      if (v9 >= 2)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = v18;
        do
        {
          uint64_t v30 = (unsigned char *)(v20 + v27);
          int v31 = (char *)(v26 + v27);
          uint64_t v32 = (unsigned __int8 *)(v22 + v28);
          unsigned int v33 = *(unsigned __int8 *)(v22 + v28);
          if (v33 >= 0xF0) {
            unsigned int v33 = 240;
          }
          if (v33 <= 0x10) {
            LOBYTE(v33) = 16;
          }
          unsigned int v34 = v32[1];
          if (v34 >= 0xEB) {
            unsigned int v34 = 235;
          }
          if (v34 <= 0x10) {
            LOBYTE(v34) = 16;
          }
          unsigned int v35 = v32[2];
          if (v35 >= 0xF0) {
            unsigned int v35 = 240;
          }
          if (v35 <= 0x10) {
            LOBYTE(v35) = 16;
          }
          unsigned int v36 = v32[3];
          if (v36 >= 0xEB) {
            unsigned int v36 = 235;
          }
          if (v36 <= 0x10) {
            LOBYTE(v36) = 16;
          }
          unsigned int v37 = *(unsigned __int8 *)(v25 + v28 - 2);
          if (v37 >= 0xEB) {
            unsigned int v37 = 235;
          }
          if (v37 <= 0x10) {
            LOBYTE(v37) = 16;
          }
          unsigned int v38 = *(unsigned __int8 *)(v25 + v28);
          if (v38 >= 0xEB) {
            unsigned int v38 = 235;
          }
          *uint64_t v30 = v34;
          v30[1] = v36;
          if (v38 <= 0x10) {
            char v39 = 16;
          }
          else {
            char v39 = v38;
          }
          *(v31 - 1) = v37;
          *int v31 = v39;
          unsigned int v40 = (unsigned char *)(v19 + v27);
          *unsigned int v40 = v33;
          v40[1] = v35;
          v28 += 4;
          v27 += 2;
          --v29;
        }
        while (v29);
      }
      v20 += v23;
      v19 += v16;
      v22 += v24;
      ++v15;
      v25 += v24;
      v26 += v23;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_yuvs_vec(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t **a4, uint64_t a5, void **a6)
{
  return 0;
}

uint64_t vt_CopyAvg_2vuy_420f(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  *(_OWORD *)&v54[32] = 0u;
  *(_OWORD *)&v54[16] = 0u;
  *(_OWORD *)long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  memset(v47, 0, sizeof(v47));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v48[0] = vdupq_n_s64(1uLL);
  v48[1] = xmmword_193E7D400;
  uint64_t v49 = 1;
  *(_OWORD *)&v54[8] = v48[0];
  *(_OWORD *)&v54[24] = xmmword_193E7D420;
  uint64_t v73 = 0;
  *(void *)&v54[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v48, a8, a7, v47);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a8[1];
    unint64_t v17 = v10 >> 1;
    uint64_t v18 = v9 >> 1;
    uint64_t v19 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    uint64_t v20 = v13 + v19 + v14 * v11;
    uint64_t v21 = *((void *)&v47[0] + 1);
    uint64_t v22 = *(void *)&v47[0];
    uint64_t v23 = 2 * *a8;
    uint64_t v24 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v25 = *a8 + *(void *)&v47[0] + 1;
    uint64_t v26 = v13 + v14 + v19 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = v18;
        do
        {
          uint64_t v30 = (unsigned char *)(v22 + v28);
          int v31 = (unsigned __int8 *)(v26 + v27);
          uint64_t v32 = (unsigned __int8 *)(v20 + v27);
          unsigned int v33 = *(unsigned __int8 *)(v26 + v27) + *(unsigned __int8 *)(v20 + v27);
          int v34 = v33 >> 1;
          if (v33 >> 1 >= 0xF0) {
            int v34 = 240;
          }
          if (v33 >= 0x20) {
            int v35 = v34;
          }
          else {
            int v35 = 16;
          }
          unsigned int v36 = v32[1];
          if (v36 >= 0xEB) {
            unsigned int v36 = 235;
          }
          if (v36 <= 0x10) {
            unsigned int v36 = 16;
          }
          unsigned int v37 = v31[2] + v32[2];
          int v38 = v37 >> 1;
          if (v37 >> 1 >= 0xF0) {
            int v38 = 240;
          }
          if (v37 >= 0x20) {
            int v39 = v38;
          }
          else {
            int v39 = 16;
          }
          unsigned int v40 = v32[3];
          if (v40 >= 0xEB) {
            unsigned int v40 = 235;
          }
          if (v40 <= 0x10) {
            unsigned int v40 = 16;
          }
          unsigned int v41 = v31[1];
          if (v41 >= 0xEB) {
            unsigned int v41 = 235;
          }
          uint64_t v42 = v31[3];
          *uint64_t v30 = sLumaTableVtoF[v36];
          char v43 = sLumaTableVtoF[v40];
          uint64_t v44 = (unsigned char *)(v25 + v28);
          if (v41 <= 0x10) {
            unsigned int v41 = 16;
          }
          v30[1] = v43;
          *(v44 - 1) = sLumaTableVtoF[v41];
          long long v45 = (unsigned char *)(v21 + v28);
          *uint64_t v44 = sLumaTableVtoF[v42];
          unsigned char *v45 = sChromaTableVtoF[v35];
          v45[1] = sChromaTableVtoF[v39];
          v28 += 2;
          v27 += 4;
          --v29;
        }
        while (v29);
      }
      v22 += v23;
      v21 += v16;
      v20 += v24;
      ++v15;
      v25 += v23;
      v26 += v24;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_420f(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  *(_OWORD *)&v50[32] = 0u;
  *(_OWORD *)&v50[16] = 0u;
  *(_OWORD *)long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  memset(v43, 0, sizeof(v43));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v44[0] = vdupq_n_s64(1uLL);
  v44[1] = xmmword_193E7D400;
  uint64_t v45 = 1;
  *(_OWORD *)&v50[8] = v44[0];
  *(_OWORD *)&v50[24] = xmmword_193E7D420;
  uint64_t v69 = 0;
  *(void *)&v50[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v44, a8, a7, v43);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a8[1];
    unint64_t v17 = v10 >> 1;
    uint64_t v18 = v9 >> 1;
    uint64_t v19 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    uint64_t v20 = v13 + v19 + v14 * v11;
    uint64_t v21 = *((void *)&v43[0] + 1);
    uint64_t v22 = *(void *)&v43[0];
    uint64_t v23 = 2 * *a8;
    uint64_t v24 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v25 = v14 + v19 + v13 + v14 * v11 + 3;
    uint64_t v26 = *a8 + *(void *)&v43[0] + 1;
    do
    {
      if (v9 >= 2)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = v18;
        do
        {
          uint64_t v30 = (unsigned char *)(v22 + v27);
          int v31 = (unsigned char *)(v26 + v27);
          uint64_t v32 = (unsigned __int8 *)(v20 + v28);
          unsigned int v33 = *(unsigned __int8 *)(v20 + v28);
          if (v33 >= 0xF0) {
            unsigned int v33 = 240;
          }
          if (v33 <= 0x10) {
            unsigned int v33 = 16;
          }
          unsigned int v34 = v32[1];
          if (v34 >= 0xEB) {
            unsigned int v34 = 235;
          }
          unsigned int v35 = v32[2];
          if (v34 <= 0x10) {
            unsigned int v34 = 16;
          }
          if (v35 >= 0xF0) {
            unsigned int v35 = 240;
          }
          if (v35 <= 0x10) {
            unsigned int v35 = 16;
          }
          unsigned int v36 = v32[3];
          if (v36 >= 0xEB) {
            unsigned int v36 = 235;
          }
          if (v36 <= 0x10) {
            unsigned int v36 = 16;
          }
          unsigned int v37 = *(unsigned __int8 *)(v25 + v28 - 2);
          if (v37 >= 0xEB) {
            unsigned int v37 = 235;
          }
          if (v37 <= 0x10) {
            unsigned int v37 = 16;
          }
          unsigned int v38 = *(unsigned __int8 *)(v25 + v28);
          if (v38 >= 0xEB) {
            unsigned int v38 = 235;
          }
          *uint64_t v30 = sLumaTableVtoF[v34];
          char v39 = sLumaTableVtoF[v36];
          if (v38 <= 0x10) {
            int v40 = 16;
          }
          else {
            int v40 = v38;
          }
          v30[1] = v39;
          *(v31 - 1) = sLumaTableVtoF[v37];
          unsigned int v41 = (unsigned char *)(v21 + v27);
          *int v31 = sLumaTableVtoF[v40];
          *unsigned int v41 = sChromaTableVtoF[v33];
          v41[1] = sChromaTableVtoF[v35];
          v28 += 4;
          v27 += 2;
          --v29;
        }
        while (v29);
      }
      v22 += v23;
      v21 += v16;
      v20 += v24;
      ++v15;
      v25 += v24;
      v26 += v23;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a8[1];
    uint64_t v11 = a8[2];
    uint64_t v13 = *a8;
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v12 * v14;
    uint64_t v17 = a7[2] + v11 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v16 + 4 * v15;
    uint64_t v21 = v17 + 2 * v15;
    uint64_t v22 = v18 + 2 * v15;
    uint64_t v23 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v27 = (_WORD *)(v20 + v25);
          uint64_t v28 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          __int16 v29 = *(unsigned __int8 *)(v23 + v24) << 8;
          __int16 v30 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          *uint64_t v27 = v29;
          v27[1] = v30;
          v27[2] = v29;
          v27[3] = v30;
          __int16 v31 = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *uint64_t v28 = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v28[1] = v31;
          v25 += 8;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a8;
    uint64_t v12 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v13 = a6[5];
    uint64_t v15 = a7[1] + v12 * v13;
    uint64_t v16 = *a7 + *a8 * v13;
    uint64_t v17 = *a4;
    uint64_t v18 = v15 + 4 * v14;
    uint64_t v19 = v16 + 2 * v14;
    uint64_t v20 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v24 = (_WORD *)(v18 + v22);
          uint64_t v25 = (_WORD *)(v19 + 2 * i);
          __int16 v26 = *(unsigned __int8 *)(v20 + v21) << 8;
          __int16 v27 = *(unsigned __int8 *)(v20 + v21 + 2) << 8;
          *uint64_t v24 = v26;
          v24[1] = v27;
          void v24[2] = v26;
          v24[3] = v27;
          __int16 v28 = *(unsigned __int8 *)(v20 + v21 + 3) << 8;
          *uint64_t v25 = *(unsigned __int8 *)(v20 + v21 + 1) << 8;
          v25[1] = v28;
          v22 += 8;
          v21 += 4;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v15 = a6[5];
    uint64_t v16 = a7[1] + v13 * v15 + 4 * v14;
    uint64_t v17 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v18 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v22 = (unsigned __int8 *)(v18 + v19);
          unsigned int v23 = *(unsigned __int8 *)(v18 + v19);
          if (v23 >= 0xF0) {
            unsigned int v23 = 240;
          }
          if (v23 <= 0x10) {
            unsigned int v23 = 16;
          }
          unsigned int v24 = v22[2];
          uint64_t v25 = (_WORD *)(v16 + v20);
          if (v24 >= 0xF0) {
            unsigned int v24 = 240;
          }
          if (v24 <= 0x10) {
            unsigned int v24 = 16;
          }
          unint64_t v26 = (613566757 * (unint64_t)((-1048560 - v23 + (v23 << 16)) >> 5)) >> 32;
          unint64_t v27 = (613566757 * (unint64_t)((-1048560 - v24 + (v24 << 16)) >> 5)) >> 32;
          *uint64_t v25 = v26;
          v25[1] = v27;
          v25[2] = v26;
          v25[3] = v27;
          __int16 v28 = (_WORD *)(v17 + 2 * i);
          unsigned int v29 = v22[1];
          if (v29 >= 0xEB) {
            unsigned int v29 = 235;
          }
          unsigned int v30 = v22[3];
          if (v29 <= 0x10) {
            unsigned int v29 = 16;
          }
          if (v30 >= 0xEB) {
            unsigned int v30 = 235;
          }
          if (v30 <= 0x10) {
            unsigned int v30 = 16;
          }
          *__int16 v28 = (-1048560 - v29 + (v29 << 16)) / 0xDB;
          v28[1] = (-1048560 - v30 + (v30 << 16)) / 0xDB;
          v20 += 8;
          v19 += 4;
        }
      }
      v18 += v11;
      v17 += v12;
      v16 += v13;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = a8[2];
    uint64_t v18 = a7[2] + v17 * v15;
    uint64_t v19 = *a7 + *a8 * v15;
    uint64_t v20 = *a4;
    uint64_t v21 = v18 + 2 * v10;
    uint64_t v22 = v19 + 2 * v10;
    uint64_t v23 = *a3 + *a4 * *(void *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        uint64_t v24 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          unint64_t v26 = (_WORD *)(v16 + 2 * i);
          unint64_t v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          __int16 v28 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          *unint64_t v26 = *(unsigned __int8 *)(v23 + v24) << 8;
          v26[1] = v28;
          LOWORD(v26) = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *unint64_t v27 = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v27[1] = (_WORD)v26;
          v24 += 4;
        }
      }
      v23 += v20;
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a4;
    uint64_t v18 = *a7 + *a8 * v15 + 2 * v10;
    uint64_t v19 = *a3 + *a4 * *(void *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (_WORD *)(v16 + 2 * i);
          uint64_t v23 = (_WORD *)(v18 + 2 * i);
          __int16 v24 = *(unsigned __int8 *)(v19 + v20 + 2) << 8;
          _WORD *v22 = *(unsigned __int8 *)(v19 + v20) << 8;
          v22[1] = v24;
          __int16 v25 = *(unsigned __int8 *)(v19 + v20 + 3) << 8;
          *uint64_t v23 = *(unsigned __int8 *)(v19 + v20 + 1) << 8;
          v23[1] = v25;
          v20 += 4;
        }
      }
      v19 += v17;
      v18 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = a8[1];
    uint64_t v16 = *(void *)(a6 + 40);
    uint64_t v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v18 = *a7 + *a8 * v16 + 2 * v10;
    uint64_t v19 = *a3 + *a4 * *(void *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (_WORD *)(v17 + 2 * i);
          uint64_t v23 = (unsigned __int8 *)(v19 + v20);
          unsigned int v24 = *(unsigned __int8 *)(v19 + v20);
          if (v24 >= 0xF0) {
            unsigned int v24 = 240;
          }
          if (v24 <= 0x10) {
            unsigned int v24 = 16;
          }
          unsigned int v25 = v23[2];
          if (v25 >= 0xF0) {
            unsigned int v25 = 240;
          }
          unint64_t v26 = (_WORD *)(v18 + 2 * i);
          if (v25 <= 0x10) {
            unsigned int v25 = 16;
          }
          _WORD *v22 = (613566757 * (unint64_t)((-1048560 - v24 + (v24 << 16)) >> 5)) >> 32;
          v22[1] = (613566757 * (unint64_t)((-1048560 - v25 + (v25 << 16)) >> 5)) >> 32;
          unsigned int v27 = v23[1];
          if (v27 >= 0xEB) {
            unsigned int v27 = 235;
          }
          if (v27 <= 0x10) {
            unsigned int v27 = 16;
          }
          unsigned int v28 = v23[3];
          if (v28 >= 0xEB) {
            unsigned int v28 = 235;
          }
          if (v28 <= 0x10) {
            unsigned int v28 = 16;
          }
          *unint64_t v26 = (-1048560 - v27 + (v27 << 16)) / 0xDB;
          v26[1] = (-1048560 - v28 + (v28 << 16)) / 0xDB;
          v20 += 4;
        }
      }
      v19 += v13;
      v18 += v14;
      v17 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a4;
    uint64_t v24 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v25 = *a3 + *a4 * v12 + v10;
    uint64_t v26 = *a3 + v9 + (v9 & 1) + v23 + v23 * (v8 + (v8 & 1));
    do
    {
      if (v17)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0;
        unsigned int v29 = (_WORD *)v22;
        do
        {
          if ((v19 & 1) == 0)
          {
            __int16 v30 = (*(unsigned __int8 *)(v26 + v27 + 2) + (unsigned __int16)*(unsigned __int8 *)(v25 + v27 + 2)) << 7;
            *unsigned int v29 = (*(unsigned __int8 *)(v26 + v27) + (unsigned __int16)*(unsigned __int8 *)(v25 + v27)) << 7;
            v29[1] = v30;
            v29 += 2;
          }
          __int16 v31 = (_WORD *)(v24 + 2 * v28);
          __int16 v32 = *(unsigned __int8 *)(v25 + v27 + 3) << 8;
          *__int16 v31 = *(unsigned __int8 *)(v25 + v27 + 1) << 8;
          v31[1] = v32;
          v28 += 2;
          v27 += 4;
        }
        while (v28 < v17);
      }
      v25 += v23;
      v24 += v20;
      if (v19) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = v21;
      }
      v22 += v33;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a8;
    uint64_t v19 = a8[1];
    uint64_t v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v21 = *a4;
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 1;
    do
    {
      if (v15)
      {
        unint64_t v24 = 0;
        uint64_t v25 = (unsigned __int8 *)v23;
        uint64_t v26 = (_WORD *)v20;
        do
        {
          if ((v17 & 1) == 0)
          {
            __int16 v27 = v25[1] << 8;
            *uint64_t v26 = *(v25 - 1) << 8;
            v26[1] = v27;
            v26 += 2;
          }
          unint64_t v28 = (_WORD *)(v22 + 2 * v24);
          __int16 v29 = v25[2] << 8;
          *unint64_t v28 = *v25 << 8;
          v28[1] = v29;
          v24 += 2;
          v25 += 4;
        }
        while (v24 < v15);
      }
      v22 += v18;
      if (v17) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v19;
      }
      v20 += v30;
      ++v17;
      v23 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[1];
    uint64_t v23 = a7[1] + ((unint64_t)(v22 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v24 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v25 = *a3 + *a4 * v12 + v10;
    uint64_t v26 = *a3 + v8 + (v8 & 1) + v20 + v20 * (v9 + (v9 & 1));
    do
    {
      if (v17)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0;
        __int16 v29 = (_WORD *)v23;
        do
        {
          if ((v19 & 1) == 0)
          {
            unsigned int v30 = *(unsigned __int8 *)(v25 + v27);
            unsigned int v31 = *(unsigned __int8 *)(v26 + v27);
            if (v30 >= 0xF0) {
              unsigned int v30 = 240;
            }
            if (v30 <= 0x10) {
              unsigned int v30 = 16;
            }
            if (v31 >= 0xF0) {
              unsigned int v31 = 240;
            }
            if (v31 <= 0x10) {
              unsigned int v31 = 16;
            }
            unsigned int v32 = *(unsigned __int8 *)(v25 + v27 + 2);
            unsigned int v33 = *(unsigned __int8 *)(v26 + v27 + 2);
            if (v32 >= 0xF0) {
              unsigned int v32 = 240;
            }
            if (v32 <= 0x10) {
              unsigned int v32 = 16;
            }
            if (v33 >= 0xF0) {
              unsigned int v33 = 240;
            }
            if (v33 <= 0x10) {
              unsigned int v33 = 16;
            }
            *__int16 v29 = (((613566757 * (unint64_t)((-1048560 - v30 + (v30 << 16)) >> 5)) >> 32)
                                + ((613566757 * (unint64_t)((-1048560 - v31 + (v31 << 16)) >> 5)) >> 32)
                                + 1) >> 1;
            v29[1] = (((613566757 * (unint64_t)((-1048560 - v32 + (v32 << 16)) >> 5)) >> 32)
                                  + ((613566757 * (unint64_t)((-1048560 - v33 + (v33 << 16)) >> 5)) >> 32)
                                  + 1) >> 1;
            v29 += 2;
          }
          unsigned int v34 = (_WORD *)(v24 + 2 * v28);
          unsigned int v35 = *(unsigned __int8 *)(v25 + v27 + 1);
          if (v35 >= 0xEB) {
            unsigned int v35 = 235;
          }
          if (v35 <= 0x10) {
            unsigned int v35 = 16;
          }
          unsigned int v36 = *(unsigned __int8 *)(v25 + v27 + 3);
          if (v36 >= 0xEB) {
            unsigned int v36 = 235;
          }
          if (v36 <= 0x10) {
            unsigned int v36 = 16;
          }
          *unsigned int v34 = (-1048560 - v35 + (v35 << 16)) / 0xDB;
          v34[1] = (-1048560 - v36 + (v36 << 16)) / 0xDB;
          v28 += 2;
          v27 += 4;
        }
        while (v28 < v17);
      }
      v25 += v20;
      v24 += v21;
      if (v19) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = v22;
      }
      v23 += v37;
      ++v19;
      v26 += v20;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a4;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 1;
    do
    {
      if (v15)
      {
        unint64_t v24 = 0;
        uint64_t v25 = (unsigned __int8 *)v23;
        uint64_t v26 = (_WORD *)v21;
        do
        {
          if ((v17 & 1) == 0)
          {
            unsigned int v27 = *(v25 - 1);
            if (v27 >= 0xF0) {
              unsigned int v27 = 240;
            }
            if (v27 <= 0x10) {
              unsigned int v27 = 16;
            }
            unsigned int v28 = v25[1];
            if (v28 >= 0xF0) {
              unsigned int v28 = 240;
            }
            if (v28 <= 0x10) {
              unsigned int v28 = 16;
            }
            *uint64_t v26 = (613566757 * (unint64_t)((-1048560 - v27 + (v27 << 16)) >> 5)) >> 32;
            v26[1] = (613566757 * (unint64_t)((-1048560 - v28 + (v28 << 16)) >> 5)) >> 32;
            v26 += 2;
          }
          __int16 v29 = (_WORD *)(v22 + 2 * v24);
          unsigned int v30 = *v25;
          if (v30 >= 0xEB) {
            unsigned int v30 = 235;
          }
          if (v30 <= 0x10) {
            unsigned int v30 = 16;
          }
          unsigned int v31 = v25[2];
          if (v31 >= 0xEB) {
            unsigned int v31 = 235;
          }
          if (v31 <= 0x10) {
            unsigned int v31 = 16;
          }
          *__int16 v29 = (-1048560 - v30 + (v30 << 16)) / 0xDB;
          v29[1] = (-1048560 - v31 + (v31 << 16)) / 0xDB;
          v24 += 2;
          v25 += 4;
        }
        while (v24 < v15);
      }
      v22 += v19;
      if (v17) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = v20;
      }
      v21 += v32;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a8[1];
    uint64_t v11 = a8[2];
    uint64_t v13 = *a8;
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v12 * v14;
    uint64_t v17 = a7[2] + v11 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v16 + 4 * v15;
    uint64_t v21 = v17 + 2 * v15;
    uint64_t v22 = v18 + 2 * v15;
    uint64_t v23 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          unsigned int v27 = (_WORD *)(v20 + v25);
          unsigned int v28 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          __int16 v29 = *(unsigned __int8 *)(v23 + v24) << 8;
          __int16 v30 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          *unsigned int v27 = v29;
          v27[1] = v30;
          v27[2] = v29;
          v27[3] = v30;
          __int16 v31 = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *unsigned int v28 = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v28[1] = v31;
          v25 += 8;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a8;
    uint64_t v12 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v13 = a6[5];
    uint64_t v15 = a7[1] + v12 * v13;
    uint64_t v16 = *a7 + *a8 * v13;
    uint64_t v17 = *a4;
    uint64_t v18 = v15 + 4 * v14;
    uint64_t v19 = v16 + 2 * v14;
    uint64_t v20 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v24 = (_WORD *)(v18 + v22);
          uint64_t v25 = (_WORD *)(v19 + 2 * i);
          __int16 v26 = *(unsigned __int8 *)(v20 + v21) << 8;
          __int16 v27 = *(unsigned __int8 *)(v20 + v21 + 2) << 8;
          *uint64_t v24 = v26;
          v24[1] = v27;
          void v24[2] = v26;
          v24[3] = v27;
          __int16 v28 = *(unsigned __int8 *)(v20 + v21 + 3) << 8;
          *uint64_t v25 = *(unsigned __int8 *)(v20 + v21 + 1) << 8;
          v25[1] = v28;
          v22 += 8;
          v21 += 4;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_tf44(double a1, double a2, double a3, double a4, double a5, double a6, int8x8_t a7, uint64_t a8, void *a9, void *a10, uint64_t *a11, uint64_t a12, void *a13, void *a14, uint64_t *a15)
{
  unint64_t v15 = a9[2] + a9[4] - (a9[4] & 0xFFFFFFFELL) + ((a9[2] + a9[4]) & 1);
  if (v15 >= a13[2]) {
    unint64_t v15 = a13[2];
  }
  if (a9[3] >= a13[3]) {
    uint64_t v16 = a13[3];
  }
  else {
    uint64_t v16 = a9[3];
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a11;
    uint64_t v19 = *a15;
    uint64_t v20 = a15[1];
    uint64_t v22 = a13[4];
    uint64_t v21 = a13[5];
    uint64_t v23 = a14[1] + v20 * v21 + 4 * v22;
    uint64_t v24 = *a14 + *a15 * v21 + 2 * v22;
    uint64_t v25 = *a10 + *a11 * a9[5] + (a9[4] & 0xFFFFFFFELL);
    int32x2_t v26 = vdup_n_s32(0xFFFF0010);
    uint32x2_t v27 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      if (v15)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        for (unint64_t i = 0; i < v15; i += 2)
        {
          a7.i8[0] = *(unsigned char *)(v25 + v28);
          a7.i8[4] = *(unsigned char *)(v25 + v28 + 2);
          int16x4_t v31 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v26, (int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(a7, (int8x8_t)0xFF000000FFLL), (uint32x2_t)0xF0000000F0), (uint32x2_t)0x1000000010), (int32x2_t)0xF0000000FLL), 5uLL), v27), 0x20uLL), 4uLL);
          a7 = (int8x8_t)vuzp1_s16(v31, v31);
          *(double *)(v23 + v29) = *(double *)&a7;
          unsigned int v32 = *(unsigned __int8 *)(v25 + v28 + 1);
          if (v32 >= 0xEB) {
            unsigned int v32 = 235;
          }
          if (v32 <= 0x10) {
            unsigned int v32 = 16;
          }
          unsigned int v33 = *(unsigned __int8 *)(v25 + v28 + 3);
          if (v33 >= 0xEB) {
            unsigned int v33 = 235;
          }
          if (v33 <= 0x10) {
            unsigned int v33 = 16;
          }
          unsigned int v34 = (_WORD *)(v24 + 2 * i);
          *unsigned int v34 = ((((725633745 * (unint64_t)(4095 * v32 - 65520)) >> 32)
                               + ((4095 * v32
                                               - 65520
                                               - ((725633745 * (unint64_t)(4095 * v32 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v34[1] = ((((725633745 * (unint64_t)(4095 * v33 - 65520)) >> 32)
                                 + ((4095 * v33
                                                 - 65520
                                                 - ((725633745 * (unint64_t)(4095 * v33 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v29 += 8;
          v28 += 4;
        }
      }
      v25 += v18;
      v24 += v19;
      v23 += v20;
      ++v17;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = a8[2];
    uint64_t v18 = a7[2] + v17 * v15;
    uint64_t v19 = *a7 + *a8 * v15;
    uint64_t v20 = *a4;
    uint64_t v21 = v18 + 2 * v10;
    uint64_t v22 = v19 + 2 * v10;
    uint64_t v23 = *a3 + *a4 * *(void *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        uint64_t v24 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          int32x2_t v26 = (_WORD *)(v16 + 2 * i);
          uint32x2_t v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          __int16 v28 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          *int32x2_t v26 = *(unsigned __int8 *)(v23 + v24) << 8;
          v26[1] = v28;
          LOWORD(v26) = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *uint32x2_t v27 = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v27[1] = (_WORD)v26;
          v24 += 4;
        }
      }
      v23 += v20;
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a4;
    uint64_t v18 = *a7 + *a8 * v15 + 2 * v10;
    uint64_t v19 = *a3 + *a4 * *(void *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (_WORD *)(v16 + 2 * i);
          uint64_t v23 = (_WORD *)(v18 + 2 * i);
          __int16 v24 = *(unsigned __int8 *)(v19 + v20 + 2) << 8;
          _WORD *v22 = *(unsigned __int8 *)(v19 + v20) << 8;
          v22[1] = v24;
          __int16 v25 = *(unsigned __int8 *)(v19 + v20 + 3) << 8;
          *uint64_t v23 = *(unsigned __int8 *)(v19 + v20 + 1) << 8;
          v23[1] = v25;
          v20 += 4;
        }
      }
      v19 += v17;
      v18 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = a8[1];
    uint64_t v16 = *(void *)(a6 + 40);
    uint64_t v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v18 = *a7 + *a8 * v16 + 2 * v10;
    uint64_t v19 = *a3 + *a4 * *(void *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (unsigned __int8 *)(v19 + v20);
          uint64_t v23 = (_WORD *)(v17 + 2 * i);
          unsigned int v24 = *(unsigned __int8 *)(v19 + v20);
          if (v24 >= 0xF0) {
            unsigned int v24 = 240;
          }
          unsigned int v25 = v22[2];
          if (v24 <= 0x10) {
            unsigned int v24 = 16;
          }
          if (v25 >= 0xF0) {
            unsigned int v25 = 240;
          }
          if (v25 <= 0x10) {
            unsigned int v25 = 16;
          }
          *uint64_t v23 = 16 * ((613566757 * (unint64_t)((4095 * v24 - 65520) >> 5)) >> 32);
          v23[1] = 16 * ((613566757 * (unint64_t)((4095 * v25 - 65520) >> 5)) >> 32);
          unsigned int v26 = v22[1];
          if (v26 >= 0xEB) {
            unsigned int v26 = 235;
          }
          if (v26 <= 0x10) {
            unsigned int v26 = 16;
          }
          unsigned int v27 = v22[3];
          if (v27 >= 0xEB) {
            unsigned int v27 = 235;
          }
          __int16 v28 = (_WORD *)(v18 + 2 * i);
          if (v27 <= 0x10) {
            unsigned int v27 = 16;
          }
          *__int16 v28 = ((((725633745 * (unint64_t)(4095 * v26 - 65520)) >> 32)
                               + ((4095 * v26
                                               - 65520
                                               - ((725633745 * (unint64_t)(4095 * v26 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v28[1] = ((((725633745 * (unint64_t)(4095 * v27 - 65520)) >> 32)
                                 + ((4095 * v27
                                                 - 65520
                                                 - ((725633745 * (unint64_t)(4095 * v27 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v20 += 4;
        }
      }
      v19 += v13;
      v18 += v14;
      v17 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a4;
    uint64_t v24 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v25 = *a3 + *a4 * v12 + v10;
    uint64_t v26 = *a3 + v9 + (v9 & 1) + v23 + v23 * (v8 + (v8 & 1));
    do
    {
      if (v17)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0;
        uint64_t v29 = (_WORD *)v22;
        do
        {
          if ((v19 & 1) == 0)
          {
            __int16 v30 = (*(unsigned __int8 *)(v26 + v27 + 2) + (unsigned __int16)*(unsigned __int8 *)(v25 + v27 + 2)) << 7;
            *uint64_t v29 = (*(unsigned __int8 *)(v26 + v27) + (unsigned __int16)*(unsigned __int8 *)(v25 + v27)) << 7;
            v29[1] = v30;
            v29 += 2;
          }
          int16x4_t v31 = (_WORD *)(v24 + 2 * v28);
          __int16 v32 = *(unsigned __int8 *)(v25 + v27 + 3) << 8;
          *int16x4_t v31 = *(unsigned __int8 *)(v25 + v27 + 1) << 8;
          v31[1] = v32;
          v28 += 2;
          v27 += 4;
        }
        while (v28 < v17);
      }
      v25 += v23;
      v24 += v20;
      if (v19) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = v21;
      }
      v22 += v33;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a8;
    uint64_t v19 = a8[1];
    uint64_t v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v21 = *a4;
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 1;
    do
    {
      if (v15)
      {
        unint64_t v24 = 0;
        uint64_t v25 = (unsigned __int8 *)v23;
        uint64_t v26 = (_WORD *)v20;
        do
        {
          if ((v17 & 1) == 0)
          {
            __int16 v27 = v25[1] << 8;
            *uint64_t v26 = *(v25 - 1) << 8;
            v26[1] = v27;
            v26 += 2;
          }
          unint64_t v28 = (_WORD *)(v22 + 2 * v24);
          __int16 v29 = v25[2] << 8;
          *unint64_t v28 = *v25 << 8;
          v28[1] = v29;
          v24 += 2;
          v25 += 4;
        }
        while (v24 < v15);
      }
      v22 += v18;
      if (v17) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v19;
      }
      v20 += v30;
      ++v17;
      v23 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a4;
    uint64_t v24 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v25 = *a3 + *a4 * v12 + v10;
    uint64_t v26 = *a3 + v9 + (v9 & 1) + v23 + v23 * (v8 + (v8 & 1));
    do
    {
      if (v17)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0;
        __int16 v29 = (_WORD *)v22;
        do
        {
          if ((v19 & 1) == 0)
          {
            unsigned int v30 = *(unsigned __int8 *)(v25 + v27);
            unsigned int v31 = *(unsigned __int8 *)(v26 + v27);
            if (v30 >= 0xF0) {
              unsigned int v30 = 240;
            }
            if (v30 <= 0x10) {
              unsigned int v30 = 16;
            }
            if (v31 >= 0xF0) {
              unsigned int v31 = 240;
            }
            if (v31 <= 0x10) {
              unsigned int v31 = 16;
            }
            unsigned int v32 = *(unsigned __int8 *)(v25 + v27 + 2);
            unsigned int v33 = *(unsigned __int8 *)(v26 + v27 + 2);
            if (v32 >= 0xF0) {
              unsigned int v32 = 240;
            }
            if (v32 <= 0x10) {
              unsigned int v32 = 16;
            }
            if (v33 >= 0xF0) {
              unsigned int v33 = 240;
            }
            if (v33 <= 0x10) {
              unsigned int v33 = 16;
            }
            *__int16 v29 = (8
                  * (((613566757 * (unint64_t)((4095 * v31 - 65520) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((4095 * v30 - 65520) >> 5)) >> 32))
                  + 8) & 0xFFF0;
            v29[1] = (8
                    * (((613566757 * (unint64_t)((4095 * v33 - 65520) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((4095 * v32 - 65520) >> 5)) >> 32))
                    + 8) & 0xFFF0;
            v29 += 2;
          }
          unsigned int v34 = (_WORD *)(v24 + 2 * v28);
          unsigned int v35 = *(unsigned __int8 *)(v25 + v27 + 1);
          if (v35 >= 0xEB) {
            unsigned int v35 = 235;
          }
          if (v35 <= 0x10) {
            unsigned int v35 = 16;
          }
          unsigned int v36 = *(unsigned __int8 *)(v25 + v27 + 3);
          if (v36 >= 0xEB) {
            unsigned int v36 = 235;
          }
          if (v36 <= 0x10) {
            unsigned int v36 = 16;
          }
          *unsigned int v34 = ((((725633745 * (unint64_t)(4095 * v35 - 65520)) >> 32)
                               + ((4095 * v35
                                               - 65520
                                               - ((725633745 * (unint64_t)(4095 * v35 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v34[1] = ((((725633745 * (unint64_t)(4095 * v36 - 65520)) >> 32)
                                 + ((4095 * v36
                                                 - 65520
                                                 - ((725633745 * (unint64_t)(4095 * v36 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v28 += 2;
          v27 += 4;
        }
        while (v28 < v17);
      }
      v25 += v23;
      v24 += v20;
      if (v19) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = v21;
      }
      v22 += v37;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a4;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 1;
    do
    {
      if (v15)
      {
        unint64_t v24 = 0;
        uint64_t v25 = (unsigned __int8 *)v23;
        uint64_t v26 = (_WORD *)v21;
        do
        {
          if ((v17 & 1) == 0)
          {
            unsigned int v27 = *(v25 - 1);
            if (v27 >= 0xF0) {
              unsigned int v27 = 240;
            }
            if (v27 <= 0x10) {
              unsigned int v27 = 16;
            }
            unsigned int v28 = v25[1];
            if (v28 >= 0xF0) {
              unsigned int v28 = 240;
            }
            if (v28 <= 0x10) {
              unsigned int v28 = 16;
            }
            *uint64_t v26 = 16 * ((613566757 * (unint64_t)((4095 * v27 - 65520) >> 5)) >> 32);
            v26[1] = 16 * ((613566757 * (unint64_t)((4095 * v28 - 65520) >> 5)) >> 32);
            v26 += 2;
          }
          __int16 v29 = (_WORD *)(v22 + 2 * v24);
          unsigned int v30 = *v25;
          if (v30 >= 0xEB) {
            unsigned int v30 = 235;
          }
          if (v30 <= 0x10) {
            unsigned int v30 = 16;
          }
          unsigned int v31 = v25[2];
          if (v31 >= 0xEB) {
            unsigned int v31 = 235;
          }
          if (v31 <= 0x10) {
            unsigned int v31 = 16;
          }
          *__int16 v29 = ((((725633745 * (unint64_t)(4095 * v30 - 65520)) >> 32)
                               + ((4095 * v30
                                               - 65520
                                               - ((725633745 * (unint64_t)(4095 * v30 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v29[1] = ((((725633745 * (unint64_t)(4095 * v31 - 65520)) >> 32)
                                 + ((4095 * v31
                                                 - 65520
                                                 - ((725633745 * (unint64_t)(4095 * v31 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v24 += 2;
          v25 += 4;
        }
        while (v24 < v15);
      }
      v22 += v19;
      if (v17) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = v20;
      }
      v21 += v32;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a8[1];
    uint64_t v11 = a8[2];
    uint64_t v13 = *a8;
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v12 * v14;
    uint64_t v17 = a7[2] + v11 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v16 + 4 * v15;
    uint64_t v21 = v17 + 2 * v15;
    uint64_t v22 = v18 + 2 * v15;
    uint64_t v23 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          unsigned int v27 = (_WORD *)(v20 + v25);
          unsigned int v28 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          __int16 v29 = *(unsigned __int8 *)(v23 + v24) << 8;
          __int16 v30 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          *unsigned int v27 = v29;
          v27[1] = v30;
          v27[2] = v29;
          v27[3] = v30;
          __int16 v31 = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *unsigned int v28 = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v28[1] = v31;
          v25 += 8;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a8;
    uint64_t v12 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v13 = a6[5];
    uint64_t v15 = a7[1] + v12 * v13;
    uint64_t v16 = *a7 + *a8 * v13;
    uint64_t v17 = *a4;
    uint64_t v18 = v15 + 4 * v14;
    uint64_t v19 = v16 + 2 * v14;
    uint64_t v20 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v24 = (_WORD *)(v18 + v22);
          uint64_t v25 = (_WORD *)(v19 + 2 * i);
          __int16 v26 = *(unsigned __int8 *)(v20 + v21) << 8;
          __int16 v27 = *(unsigned __int8 *)(v20 + v21 + 2) << 8;
          *uint64_t v24 = v26;
          v24[1] = v27;
          void v24[2] = v26;
          v24[3] = v27;
          __int16 v28 = *(unsigned __int8 *)(v20 + v21 + 3) << 8;
          *uint64_t v25 = *(unsigned __int8 *)(v20 + v21 + 1) << 8;
          v25[1] = v28;
          v22 += 8;
          v21 += 4;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_xf44(double a1, double a2, double a3, double a4, double a5, double a6, int8x8_t a7, uint64_t a8, void *a9, void *a10, uint64_t *a11, uint64_t a12, void *a13, void *a14, uint64_t *a15)
{
  unint64_t v15 = a9[2] + a9[4] - (a9[4] & 0xFFFFFFFELL) + ((a9[2] + a9[4]) & 1);
  if (v15 >= a13[2]) {
    unint64_t v15 = a13[2];
  }
  if (a9[3] >= a13[3]) {
    uint64_t v16 = a13[3];
  }
  else {
    uint64_t v16 = a9[3];
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a11;
    uint64_t v19 = *a15;
    uint64_t v20 = a15[1];
    uint64_t v22 = a13[4];
    uint64_t v21 = a13[5];
    uint64_t v23 = a14[1] + v20 * v21 + 4 * v22;
    uint64_t v24 = *a14 + *a15 * v21 + 2 * v22;
    uint64_t v25 = *a10 + *a11 * a9[5] + (a9[4] & 0xFFFFFFFELL);
    int32x2_t v26 = vdup_n_s32(0xFFFFC010);
    uint32x2_t v27 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      if (v15)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        for (unint64_t i = 0; i < v15; i += 2)
        {
          a7.i8[0] = *(unsigned char *)(v25 + v28);
          a7.i8[4] = *(unsigned char *)(v25 + v28 + 2);
          int16x4_t v31 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v26, (int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(a7, (int8x8_t)0xFF000000FFLL), (uint32x2_t)0xF0000000F0), (uint32x2_t)0x1000000010), (int32x2_t)0x300000003), 5uLL), v27), 0x20uLL), 6uLL);
          a7 = (int8x8_t)vuzp1_s16(v31, v31);
          *(double *)(v23 + v29) = *(double *)&a7;
          unsigned int v32 = *(unsigned __int8 *)(v25 + v28 + 1);
          if (v32 >= 0xEB) {
            unsigned int v32 = 235;
          }
          if (v32 <= 0x10) {
            unsigned int v32 = 16;
          }
          unsigned int v33 = *(unsigned __int8 *)(v25 + v28 + 3);
          if (v33 >= 0xEB) {
            unsigned int v33 = 235;
          }
          if (v33 <= 0x10) {
            unsigned int v33 = 16;
          }
          unsigned int v34 = (_WORD *)(v24 + 2 * i);
          *unsigned int v34 = ((((725633745 * (unint64_t)(1023 * v32 - 16368)) >> 32)
                               + ((1023 * v32
                                               - 16368
                                               - ((725633745 * (unint64_t)(1023 * v32 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v34[1] = ((((725633745 * (unint64_t)(1023 * v33 - 16368)) >> 32)
                                 + ((1023 * v33
                                                 - 16368
                                                 - ((725633745 * (unint64_t)(1023 * v33 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v29 += 8;
          v28 += 4;
        }
      }
      v25 += v18;
      v24 += v19;
      v23 += v20;
      ++v17;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = a8[2];
    uint64_t v18 = a7[2] + v17 * v15;
    uint64_t v19 = *a7 + *a8 * v15;
    uint64_t v20 = *a4;
    uint64_t v21 = v18 + 2 * v10;
    uint64_t v22 = v19 + 2 * v10;
    uint64_t v23 = *a3 + *a4 * *(void *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        uint64_t v24 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          int32x2_t v26 = (_WORD *)(v16 + 2 * i);
          uint32x2_t v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          __int16 v28 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          *int32x2_t v26 = *(unsigned __int8 *)(v23 + v24) << 8;
          v26[1] = v28;
          LOWORD(v26) = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *uint32x2_t v27 = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v27[1] = (_WORD)v26;
          v24 += 4;
        }
      }
      v23 += v20;
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a4;
    uint64_t v18 = *a7 + *a8 * v15 + 2 * v10;
    uint64_t v19 = *a3 + *a4 * *(void *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (_WORD *)(v16 + 2 * i);
          uint64_t v23 = (_WORD *)(v18 + 2 * i);
          __int16 v24 = *(unsigned __int8 *)(v19 + v20 + 2) << 8;
          _WORD *v22 = *(unsigned __int8 *)(v19 + v20) << 8;
          v22[1] = v24;
          __int16 v25 = *(unsigned __int8 *)(v19 + v20 + 3) << 8;
          *uint64_t v23 = *(unsigned __int8 *)(v19 + v20 + 1) << 8;
          v23[1] = v25;
          v20 += 4;
        }
      }
      v19 += v17;
      v18 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = a8[1];
    uint64_t v16 = *(void *)(a6 + 40);
    uint64_t v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v18 = *a7 + *a8 * v16 + 2 * v10;
    uint64_t v19 = *a3 + *a4 * *(void *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (unsigned __int8 *)(v19 + v20);
          uint64_t v23 = (_WORD *)(v17 + 2 * i);
          unsigned int v24 = *(unsigned __int8 *)(v19 + v20);
          if (v24 >= 0xF0) {
            unsigned int v24 = 240;
          }
          unsigned int v25 = v22[2];
          if (v24 <= 0x10) {
            unsigned int v24 = 16;
          }
          if (v25 >= 0xF0) {
            unsigned int v25 = 240;
          }
          if (v25 <= 0x10) {
            unsigned int v25 = 16;
          }
          *uint64_t v23 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v24 - 16368) >> 5)) >> 32) << 6;
          v23[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v25 - 16368) >> 5)) >> 32) << 6;
          unsigned int v26 = v22[1];
          if (v26 >= 0xEB) {
            unsigned int v26 = 235;
          }
          if (v26 <= 0x10) {
            unsigned int v26 = 16;
          }
          unsigned int v27 = v22[3];
          if (v27 >= 0xEB) {
            unsigned int v27 = 235;
          }
          __int16 v28 = (_WORD *)(v18 + 2 * i);
          if (v27 <= 0x10) {
            unsigned int v27 = 16;
          }
          *__int16 v28 = ((((725633745 * (unint64_t)(1023 * v26 - 16368)) >> 32)
                               + ((1023 * v26
                                               - 16368
                                               - ((725633745 * (unint64_t)(1023 * v26 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v28[1] = ((((725633745 * (unint64_t)(1023 * v27 - 16368)) >> 32)
                                 + ((1023 * v27
                                                 - 16368
                                                 - ((725633745 * (unint64_t)(1023 * v27 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v20 += 4;
        }
      }
      v19 += v13;
      v18 += v14;
      v17 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a4;
    uint64_t v24 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v25 = *a3 + *a4 * v12 + v10;
    uint64_t v26 = *a3 + v9 + (v9 & 1) + v23 + v23 * (v8 + (v8 & 1));
    do
    {
      if (v17)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0;
        uint64_t v29 = (_WORD *)v22;
        do
        {
          if ((v19 & 1) == 0)
          {
            __int16 v30 = (*(unsigned __int8 *)(v26 + v27 + 2) + (unsigned __int16)*(unsigned __int8 *)(v25 + v27 + 2)) << 7;
            *uint64_t v29 = (*(unsigned __int8 *)(v26 + v27) + (unsigned __int16)*(unsigned __int8 *)(v25 + v27)) << 7;
            v29[1] = v30;
            v29 += 2;
          }
          int16x4_t v31 = (_WORD *)(v24 + 2 * v28);
          __int16 v32 = *(unsigned __int8 *)(v25 + v27 + 3) << 8;
          *int16x4_t v31 = *(unsigned __int8 *)(v25 + v27 + 1) << 8;
          v31[1] = v32;
          v28 += 2;
          v27 += 4;
        }
        while (v28 < v17);
      }
      v25 += v23;
      v24 += v20;
      if (v19) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = v21;
      }
      v22 += v33;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a8;
    uint64_t v19 = a8[1];
    uint64_t v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v21 = *a4;
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 1;
    do
    {
      if (v15)
      {
        unint64_t v24 = 0;
        uint64_t v25 = (unsigned __int8 *)v23;
        uint64_t v26 = (_WORD *)v20;
        do
        {
          if ((v17 & 1) == 0)
          {
            __int16 v27 = v25[1] << 8;
            *uint64_t v26 = *(v25 - 1) << 8;
            v26[1] = v27;
            v26 += 2;
          }
          unint64_t v28 = (_WORD *)(v22 + 2 * v24);
          __int16 v29 = v25[2] << 8;
          *unint64_t v28 = *v25 << 8;
          v28[1] = v29;
          v24 += 2;
          v25 += 4;
        }
        while (v24 < v15);
      }
      v22 += v18;
      if (v17) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v19;
      }
      v20 += v30;
      ++v17;
      v23 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a4;
    uint64_t v24 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v25 = *a3 + *a4 * v12 + v10;
    uint64_t v26 = *a3 + v9 + (v9 & 1) + v23 + v23 * (v8 + (v8 & 1));
    do
    {
      if (v17)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0;
        __int16 v29 = (_WORD *)v22;
        do
        {
          if ((v19 & 1) == 0)
          {
            unsigned int v30 = *(unsigned __int8 *)(v25 + v27);
            unsigned int v31 = *(unsigned __int8 *)(v26 + v27);
            if (v30 >= 0xF0) {
              unsigned int v30 = 240;
            }
            if (v30 <= 0x10) {
              unsigned int v30 = 16;
            }
            if (v31 >= 0xF0) {
              unsigned int v31 = 240;
            }
            if (v31 <= 0x10) {
              unsigned int v31 = 16;
            }
            unsigned int v32 = *(unsigned __int8 *)(v25 + v27 + 2);
            unsigned int v33 = *(unsigned __int8 *)(v26 + v27 + 2);
            if (v32 >= 0xF0) {
              unsigned int v32 = 240;
            }
            if (v32 <= 0x10) {
              unsigned int v32 = 16;
            }
            if (v33 >= 0xF0) {
              unsigned int v33 = 240;
            }
            if (v33 <= 0x10) {
              unsigned int v33 = 16;
            }
            *__int16 v29 = (32
                  * (((613566757 * (unint64_t)((1023 * v31 - 16368) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v30 - 16368) >> 5)) >> 32))
                  + 32) & 0xFFC0;
            v29[1] = (32
                    * (((613566757 * (unint64_t)((1023 * v33 - 16368) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((1023 * v32 - 16368) >> 5)) >> 32))
                    + 32) & 0xFFC0;
            v29 += 2;
          }
          unsigned int v34 = (_WORD *)(v24 + 2 * v28);
          unsigned int v35 = *(unsigned __int8 *)(v25 + v27 + 1);
          if (v35 >= 0xEB) {
            unsigned int v35 = 235;
          }
          if (v35 <= 0x10) {
            unsigned int v35 = 16;
          }
          unsigned int v36 = *(unsigned __int8 *)(v25 + v27 + 3);
          if (v36 >= 0xEB) {
            unsigned int v36 = 235;
          }
          if (v36 <= 0x10) {
            unsigned int v36 = 16;
          }
          *unsigned int v34 = ((((725633745 * (unint64_t)(1023 * v35 - 16368)) >> 32)
                               + ((1023 * v35
                                               - 16368
                                               - ((725633745 * (unint64_t)(1023 * v35 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v34[1] = ((((725633745 * (unint64_t)(1023 * v36 - 16368)) >> 32)
                                 + ((1023 * v36
                                                 - 16368
                                                 - ((725633745 * (unint64_t)(1023 * v36 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v28 += 2;
          v27 += 4;
        }
        while (v28 < v17);
      }
      v25 += v23;
      v24 += v20;
      if (v19) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = v21;
      }
      v22 += v37;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a4;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 1;
    do
    {
      if (v15)
      {
        unint64_t v24 = 0;
        uint64_t v25 = (unsigned __int8 *)v23;
        uint64_t v26 = (_WORD *)v21;
        do
        {
          if ((v17 & 1) == 0)
          {
            unsigned int v27 = *(v25 - 1);
            if (v27 >= 0xF0) {
              unsigned int v27 = 240;
            }
            if (v27 <= 0x10) {
              unsigned int v27 = 16;
            }
            unsigned int v28 = v25[1];
            if (v28 >= 0xF0) {
              unsigned int v28 = 240;
            }
            if (v28 <= 0x10) {
              unsigned int v28 = 16;
            }
            *uint64_t v26 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v27 - 16368) >> 5)) >> 32) << 6;
            v26[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v28 - 16368) >> 5)) >> 32) << 6;
            v26 += 2;
          }
          __int16 v29 = (_WORD *)(v22 + 2 * v24);
          unsigned int v30 = *v25;
          if (v30 >= 0xEB) {
            unsigned int v30 = 235;
          }
          if (v30 <= 0x10) {
            unsigned int v30 = 16;
          }
          unsigned int v31 = v25[2];
          if (v31 >= 0xEB) {
            unsigned int v31 = 235;
          }
          if (v31 <= 0x10) {
            unsigned int v31 = 16;
          }
          *__int16 v29 = ((((725633745 * (unint64_t)(1023 * v30 - 16368)) >> 32)
                               + ((1023 * v30
                                               - 16368
                                               - ((725633745 * (unint64_t)(1023 * v30 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v29[1] = ((((725633745 * (unint64_t)(1023 * v31 - 16368)) >> 32)
                                 + ((1023 * v31
                                                 - 16368
                                                 - ((725633745 * (unint64_t)(1023 * v31 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v24 += 2;
          v25 += 4;
        }
        while (v24 < v15);
      }
      v22 += v19;
      if (v17) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = v20;
      }
      v21 += v32;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a8[1];
    uint64_t v11 = a8[2];
    uint64_t v13 = *a8;
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v12 * v14;
    uint64_t v17 = a7[2] + v11 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v16 + 2 * v15;
    uint64_t v21 = v17 + v15;
    uint64_t v22 = v18 + v15;
    uint64_t v23 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v24 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v26 = (unsigned char *)(v20 + v24);
          unsigned int v27 = (unsigned char *)(v22 + i);
          *(_WORD *)(v21 + i) = -1;
          char v28 = *(unsigned char *)(v23 + v24);
          char v29 = *(unsigned char *)(v23 + v24 + 2);
          *uint64_t v26 = v28;
          v26[1] = v29;
          v26[2] = v28;
          v26[3] = v29;
          char v30 = *(unsigned char *)(v23 + v24 + 3);
          *unsigned int v27 = *(unsigned char *)(v23 + v24 + 1);
          v27[1] = v30;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a8;
    uint64_t v12 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v13 = a6[5];
    uint64_t v15 = a7[1] + v12 * v13;
    uint64_t v16 = *a7 + *a8 * v13;
    uint64_t v17 = *a4;
    uint64_t v18 = v15 + 2 * v14;
    uint64_t v19 = v16 + v14;
    uint64_t v20 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v21 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v23 = (unsigned char *)(v18 + v21);
          uint64_t v24 = (unsigned char *)(v19 + i);
          char v25 = *(unsigned char *)(v20 + v21);
          char v26 = *(unsigned char *)(v20 + v21 + 2);
          *uint64_t v23 = v25;
          v23[1] = v26;
          v23[2] = v25;
          v23[3] = v26;
          char v27 = *(unsigned char *)(v20 + v21 + 3);
          *uint64_t v24 = *(unsigned char *)(v20 + v21 + 1);
          v24[1] = v27;
          v21 += 4;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v13 * v14 + 2 * v15;
    uint64_t v17 = *a7 + *a8 * v14 + v15;
    uint64_t v18 = *a3 + *a4 * a2[5] + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v21 = (unsigned __int8 *)(v18 + v19);
          uint64_t v22 = (unsigned char *)(v16 + v19);
          unsigned int v23 = *(unsigned __int8 *)(v18 + v19);
          if (v23 >= 0xF0) {
            unsigned int v23 = 240;
          }
          unsigned int v24 = v21[2];
          if (v23 <= 0x10) {
            LOWORD(v23) = 16;
          }
          if (v24 >= 0xF0) {
            unsigned int v24 = 240;
          }
          if (v24 <= 0x10) {
            LOWORD(v24) = 16;
          }
          unsigned int v25 = (9363 * ((unsigned __int16)(255 * v23 - 4080) >> 5)) >> 16;
          unsigned int v26 = (9363 * ((unsigned __int16)(255 * v24 - 4080) >> 5)) >> 16;
          unsigned char *v22 = v25;
          v22[1] = v26;
          v22[2] = v25;
          void v22[3] = v26;
          unsigned int v27 = v21[1];
          if (v27 >= 0xEB) {
            unsigned int v27 = 235;
          }
          if (v27 <= 0x10) {
            unsigned int v27 = 16;
          }
          unsigned int v28 = v21[3];
          if (v28 >= 0xEB) {
            unsigned int v28 = 235;
          }
          char v29 = (unsigned char *)(v17 + i);
          if (v28 <= 0x10) {
            unsigned int v28 = 16;
          }
          *char v29 = (((255 * v27 - 4080 - ((11073 * (unsigned __int16)(255 * v27 - 4080)) >> 16)) >> 1)
                + ((11073 * (unsigned __int16)(255 * v27 - 4080)) >> 16)) >> 7;
          v29[1] = (((255 * v28 - 4080 - ((11073 * (unsigned __int16)(255 * v28 - 4080)) >> 16)) >> 1)
                  + ((11073 * (unsigned __int16)(255 * v28 - 4080)) >> 16)) >> 7;
          v19 += 4;
        }
      }
      v18 += v11;
      v17 += v12;
      v16 += v13;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v17 = a8[2];
    uint64_t v18 = a7[2] + v17 * v15;
    uint64_t v19 = *a7 + *a8 * v15;
    uint64_t v20 = *a4;
    uint64_t v21 = v18 + v10;
    uint64_t v22 = v19 + v10;
    uint64_t v23 = *a3 + *a4 * *(void *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        uint64_t v24 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          unsigned int v26 = (unsigned char *)(v16 + i);
          unsigned int v27 = (unsigned char *)(v22 + i);
          *(_WORD *)(v21 + i) = -1;
          char v28 = *(unsigned char *)(v23 + v24 + 2);
          *unsigned int v26 = *(unsigned char *)(v23 + v24);
          v26[1] = v28;
          char v29 = *(unsigned char *)(v23 + v24 + 3);
          *unsigned int v27 = *(unsigned char *)(v23 + v24 + 1);
          v27[1] = v29;
          v24 += 4;
        }
      }
      v23 += v20;
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a4;
    uint64_t v18 = *a7 + *a8 * v15 + v10;
    uint64_t v19 = *a3 + *a4 * *(void *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (unsigned char *)(v16 + i);
          uint64_t v23 = (unsigned char *)(v18 + i);
          char v24 = *(unsigned char *)(v19 + v20 + 2);
          unsigned char *v22 = *(unsigned char *)(v19 + v20);
          v22[1] = v24;
          char v25 = *(unsigned char *)(v19 + v20 + 3);
          *uint64_t v23 = *(unsigned char *)(v19 + v20 + 1);
          v23[1] = v25;
          v20 += 4;
        }
      }
      v19 += v17;
      v18 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = a8[1];
    uint64_t v16 = *(void *)(a6 + 40);
    uint64_t v17 = a7[1] + v15 * v16 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v18 = *a7 + *a8 * v16 + v10;
    uint64_t v19 = *a3 + *a4 * *(void *)(a2 + 40) + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (unsigned __int8 *)(v19 + v20);
          unsigned int v23 = *(unsigned __int8 *)(v19 + v20);
          if (v23 >= 0xF0) {
            unsigned int v23 = 240;
          }
          if (v23 <= 0x10) {
            LOWORD(v23) = 16;
          }
          unsigned int v24 = v22[2];
          if (v24 >= 0xF0) {
            unsigned int v24 = 240;
          }
          if (v24 <= 0x10) {
            LOWORD(v24) = 16;
          }
          char v25 = (unsigned char *)(v17 + i);
          *char v25 = (9363 * ((unsigned __int16)(255 * v23 - 4080) >> 5)) >> 16;
          v25[1] = (9363 * ((unsigned __int16)(255 * v24 - 4080) >> 5)) >> 16;
          unsigned int v26 = v22[1];
          if (v26 >= 0xEB) {
            unsigned int v26 = 235;
          }
          if (v26 <= 0x10) {
            unsigned int v26 = 16;
          }
          unsigned int v27 = v22[3];
          if (v27 >= 0xEB) {
            unsigned int v27 = 235;
          }
          char v28 = (unsigned char *)(v18 + i);
          if (v27 <= 0x10) {
            unsigned int v27 = 16;
          }
          *char v28 = (((255 * v26 - 4080 - ((11073 * (unsigned __int16)(255 * v26 - 4080)) >> 16)) >> 1)
                + ((11073 * (unsigned __int16)(255 * v26 - 4080)) >> 16)) >> 7;
          v28[1] = (((255 * v27 - 4080 - ((11073 * (unsigned __int16)(255 * v27 - 4080)) >> 16)) >> 1)
                  + ((11073 * (unsigned __int16)(255 * v27 - 4080)) >> 16)) >> 7;
          v20 += 4;
        }
      }
      v19 += v13;
      v18 += v14;
      v17 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (v9 & 1) + v9;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  if (v15 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12) {
    unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  }
  unint64_t v16 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v11;
  if (v16 >= v14 - v13) {
    unint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a8;
    uint64_t v19 = a8[1];
    uint64_t v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v13;
    uint64_t v23 = *a7 + *a8 * v13;
    uint64_t v24 = *a4;
    uint64_t v25 = v22 + v12;
    uint64_t v26 = v23 + v12;
    uint64_t v27 = *a3 + *a4 * v11 + v10;
    uint64_t v28 = *a3 + v8 + (v8 & 1) + v24 + v24 * (v9 + (v9 & 1));
    do
    {
      if (v15)
      {
        uint64_t v29 = 0;
        unint64_t v30 = 0;
        unsigned int v31 = (unsigned char *)v20;
        do
        {
          *(_WORD *)(v25 + v30) = -1;
          if ((v17 & 1) == 0)
          {
            unsigned int v32 = (*(unsigned __int8 *)(v27 + v29 + 2) + *(unsigned __int8 *)(v28 + v29 + 2) + 1) >> 1;
            *unsigned int v31 = (*(unsigned __int8 *)(v27 + v29) + *(unsigned __int8 *)(v28 + v29) + 1) >> 1;
            v31[1] = v32;
            v31 += 2;
          }
          unsigned int v33 = (unsigned char *)(v26 + v30);
          char v34 = *(unsigned char *)(v27 + v29 + 3);
          *unsigned int v33 = *(unsigned char *)(v27 + v29 + 1);
          v33[1] = v34;
          v30 += 2;
          v29 += 4;
        }
        while (v30 < v15);
      }
      v27 += v24;
      v26 += v18;
      if (v17) {
        uint64_t v35 = 0;
      }
      else {
        uint64_t v35 = v19;
      }
      v20 += v35;
      v25 += v21;
      ++v17;
      v28 += v24;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v10 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v11 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v12 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v13 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v14 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - ((unint64_t)(v8 & 1) + v8) < v14) {
    unint64_t v14 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
  }
        - ((*(void *)(a2 + 32) & 1)
         + *(void *)(a2 + 32));
  uint64_t v15 = v10 - v9;
  if (v10 - v9 >= (unint64_t)(v13 - v12)) {
    uint64_t v15 = v13 - v12;
  }
  if (v15)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *a8;
    uint64_t v18 = a8[1];
    uint64_t v19 = a7[1] + ((unint64_t)(v18 * v12) >> 1) + (v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v12;
    uint64_t v22 = *a7 + *a8 * v12;
    uint64_t v23 = *a4;
    uint64_t v24 = v21 + v11;
    uint64_t v25 = v22 + v11;
    uint64_t v26 = v8 + *a4 * v9 + (v8 & 1) + *a3 + 1;
    do
    {
      if (v14)
      {
        unint64_t v27 = 0;
        uint64_t v28 = (unsigned char *)v26;
        uint64_t v29 = (unsigned char *)v19;
        do
        {
          *(_WORD *)(v24 + v27) = -1;
          if ((v16 & 1) == 0)
          {
            char v30 = v28[1];
            *uint64_t v29 = *(v28 - 1);
            v29[1] = v30;
            v29 += 2;
          }
          unsigned int v31 = (unsigned char *)(v25 + v27);
          char v32 = v28[2];
          *unsigned int v31 = *v28;
          v31[1] = v32;
          v27 += 2;
          v28 += 4;
        }
        while (v27 < v14);
      }
      v25 += v17;
      if (v16) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = v18;
      }
      v19 += v33;
      v24 += v20;
      ++v16;
      v26 += v23;
    }
    while (v16 != v15);
  }
  return 0;
}

uint64_t vt_CopyAvg_2vuy_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  unint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a8[2];
    uint64_t v23 = *a4;
    uint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v15) >> 1) + (v14 >> 1));
    uint64_t v25 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v15) >> 1) + (v14 >> 1));
    unint64_t v26 = *a7 + *a8 * v15 + v14;
    uint64_t v27 = *a3 + *a4 * v12 + v10;
    uint64_t v28 = *a3 + v8 + (v8 & 1) + v23 + v23 * (v9 + (v9 & 1));
    do
    {
      if (v17)
      {
        uint64_t v29 = 0;
        unint64_t v30 = 0;
        unsigned int v31 = v24;
        char v32 = v25;
        do
        {
          if ((v19 & 1) == 0)
          {
            unsigned int v33 = *(unsigned __int8 *)(v27 + v29);
            unsigned int v34 = *(unsigned __int8 *)(v28 + v29);
            if (v33 >= 0xF0) {
              unsigned int v33 = 240;
            }
            if (v33 <= 0x10) {
              LOWORD(v33) = 16;
            }
            if (v34 >= 0xF0) {
              unsigned int v34 = 240;
            }
            if (v34 <= 0x10) {
              LOWORD(v34) = 16;
            }
            unsigned int v35 = *(unsigned __int8 *)(v27 + v29 + 2);
            unsigned int v36 = *(unsigned __int8 *)(v28 + v29 + 2);
            if (v35 >= 0xF0) {
              unsigned int v35 = 240;
            }
            if (v35 <= 0x10) {
              LOWORD(v35) = 16;
            }
            if (v36 >= 0xF0) {
              unsigned int v36 = 240;
            }
            if (v36 <= 0x10) {
              LOWORD(v36) = 16;
            }
            *v32++ = (((9363 * ((unsigned __int16)(255 * v33 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v34 - 4080) >> 5)) >> 16)
                    + 1) >> 1;
            *v31++ = (((9363 * ((unsigned __int16)(255 * v35 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v36 - 4080) >> 5)) >> 16)
                    + 1) >> 1;
          }
          uint64_t v37 = (unsigned char *)(v26 + v30);
          unsigned int v38 = *(unsigned __int8 *)(v27 + v29 + 1);
          if (v38 >= 0xEB) {
            unsigned int v38 = 235;
          }
          if (v38 <= 0x10) {
            unsigned int v38 = 16;
          }
          unsigned int v39 = *(unsigned __int8 *)(v27 + v29 + 3);
          if (v39 >= 0xEB) {
            unsigned int v39 = 235;
          }
          if (v39 <= 0x10) {
            unsigned int v39 = 16;
          }
          *uint64_t v37 = (((255 * v38 - 4080 - ((11073 * (unsigned __int16)(255 * v38 - 4080)) >> 16)) >> 1)
                + ((11073 * (unsigned __int16)(255 * v38 - 4080)) >> 16)) >> 7;
          v37[1] = (((255 * v39 - 4080 - ((11073 * (unsigned __int16)(255 * v39 - 4080)) >> 16)) >> 1)
                  + ((11073 * (unsigned __int16)(255 * v39 - 4080)) >> 16)) >> 7;
          v30 += 2;
          v29 += 4;
        }
        while (v30 < v17);
      }
      v27 += v23;
      v26 += v20;
      if (v19) {
        uint64_t v40 = 0;
      }
      else {
        uint64_t v40 = v21;
      }
      v25 += v40;
      if (v19) {
        uint64_t v41 = 0;
      }
      else {
        uint64_t v41 = v22;
      }
      v24 += v41;
      ++v19;
      v28 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_2vuy_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a8;
    uint64_t v19 = a8[1];
    uint64_t v20 = a8[2];
    uint64_t v21 = *a4;
    uint64_t v22 = (unsigned char *)(a7[2] + ((unint64_t)(v20 * v13) >> 1) + (v12 >> 1));
    uint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 >> 1));
    unint64_t v24 = *a7 + *a8 * v13 + v12;
    uint64_t v25 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 1;
    do
    {
      if (v15)
      {
        unint64_t v26 = 0;
        uint64_t v27 = (unsigned __int8 *)v25;
        uint64_t v28 = v22;
        uint64_t v29 = v23;
        do
        {
          if ((v17 & 1) == 0)
          {
            unsigned int v30 = *(v27 - 1);
            if (v30 >= 0xF0) {
              unsigned int v30 = 240;
            }
            if (v30 <= 0x10) {
              LOWORD(v30) = 16;
            }
            unsigned int v31 = v27[1];
            if (v31 >= 0xF0) {
              unsigned int v31 = 240;
            }
            if (v31 <= 0x10) {
              LOWORD(v31) = 16;
            }
            *v29++ = (9363 * ((unsigned __int16)(255 * v30 - 4080) >> 5)) >> 16;
            *v28++ = (9363 * ((unsigned __int16)(255 * v31 - 4080) >> 5)) >> 16;
          }
          char v32 = (unsigned char *)(v24 + v26);
          unsigned int v33 = *v27;
          if (v33 >= 0xEB) {
            unsigned int v33 = 235;
          }
          if (v33 <= 0x10) {
            unsigned int v33 = 16;
          }
          unsigned int v34 = v27[2];
          if (v34 >= 0xEB) {
            unsigned int v34 = 235;
          }
          if (v34 <= 0x10) {
            unsigned int v34 = 16;
          }
          unsigned char *v32 = (((255 * v33 - 4080 - ((11073 * (unsigned __int16)(255 * v33 - 4080)) >> 16)) >> 1)
                + ((11073 * (unsigned __int16)(255 * v33 - 4080)) >> 16)) >> 7;
          v32[1] = (((255 * v34 - 4080 - ((11073 * (unsigned __int16)(255 * v34 - 4080)) >> 16)) >> 1)
                  + ((11073 * (unsigned __int16)(255 * v34 - 4080)) >> 16)) >> 7;
          v26 += 2;
          v27 += 4;
        }
        while (v26 < v15);
      }
      v24 += v18;
      if (v17) {
        uint64_t v35 = 0;
      }
      else {
        uint64_t v35 = v19;
      }
      v23 += v35;
      if (v17) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = v20;
      }
      v22 += v36;
      ++v17;
      v25 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_yuvs_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422YpCbYpCr8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_yuvs_32ARGB;
  *a11 = vt_VImage_Cleanup_yuvs_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_yuvs_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422YpCbYpCr8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_yuvs_32BGRA;
  *a11 = vt_VImage_Cleanup_yuvs_32BGRA;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_yuvs_2vuy_vec(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t **a4, uint64_t a5, void **a6)
{
  return 0;
}

uint64_t vt_CopyAvg_yuvs_y420(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v53 = 0u;
  *(_OWORD *)&v52[32] = 0u;
  *(_OWORD *)&v52[16] = 0u;
  *(_OWORD *)long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  *(_OWORD *)&v47[32] = 0u;
  *(_OWORD *)&v47[16] = 0u;
  *(_OWORD *)long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v41[0] = vdupq_n_s64(1uLL);
  v41[1] = xmmword_193E7D400;
  uint64_t v42 = 1;
  *(_OWORD *)&v47[8] = v41[0];
  *(_OWORD *)&v47[24] = xmmword_193E7D410;
  *(void *)&v47[40] = 2;
  *(_OWORD *)&v52[8] = v41[0];
  *(_OWORD *)&v52[24] = xmmword_193E7D410;
  uint64_t v64 = 0;
  *(void *)&v52[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(3uLL, a6, v41, a8, a7, &v39);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *a8;
    uint64_t v17 = a8[1];
    uint64_t v18 = a8[2];
    uint64_t v19 = v9 >> 1;
    uint64_t v21 = *((void *)&v39 + 1);
    uint64_t v20 = v40;
    uint64_t v22 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    uint64_t v23 = v13 + v22 + v14 * v11;
    uint64_t v24 = 2 * *a8;
    uint64_t v25 = v14 + v22;
    uint64_t v26 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v19 = 1;
    }
    uint64_t v27 = (unsigned char *)(v39 + 1);
    uint64_t v28 = v13 + v25 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        unsigned int v31 = v27;
        do
        {
          char v32 = &v31[v16];
          unsigned int v33 = (*(unsigned __int8 *)(v28 + v29 + 1) + *(unsigned __int8 *)(v23 + v29 + 1)) >> 1;
          char v34 = *(unsigned char *)(v23 + v29 + 2);
          unsigned int v35 = (*(unsigned __int8 *)(v28 + v29 + 3) + *(unsigned __int8 *)(v23 + v29 + 3)) >> 1;
          char v36 = *(unsigned char *)(v28 + v29);
          char v37 = *(unsigned char *)(v28 + v29 + 2);
          *(v31 - 1) = *(unsigned char *)(v23 + v29);
          *unsigned int v31 = v34;
          v31 += 2;
          *(v32 - 1) = v36;
          unsigned char *v32 = v37;
          *(unsigned char *)(v21 + v30) = v33;
          *(unsigned char *)(v20 + v30++) = v35;
          v29 += 4;
        }
        while (v19 != v30);
      }
      v21 += v17;
      v20 += v18;
      v23 += v26;
      ++v15;
      v27 += v24;
      v28 += v26;
    }
    while (v15 != v10 >> 1);
  }
  return 0;
}

uint64_t vt_CopyDec_yuvs_y420(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v53 = 0u;
  *(_OWORD *)&v52[32] = 0u;
  *(_OWORD *)&v52[16] = 0u;
  *(_OWORD *)long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  *(_OWORD *)&v47[32] = 0u;
  *(_OWORD *)&v47[16] = 0u;
  *(_OWORD *)long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v41[0] = vdupq_n_s64(1uLL);
  v41[1] = xmmword_193E7D400;
  uint64_t v42 = 1;
  *(_OWORD *)&v47[8] = v41[0];
  *(_OWORD *)&v47[24] = xmmword_193E7D410;
  *(void *)&v47[40] = 2;
  *(_OWORD *)&v52[8] = v41[0];
  *(_OWORD *)&v52[24] = xmmword_193E7D410;
  uint64_t v64 = 0;
  *(void *)&v52[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(3uLL, a6, v41, a8, a7, &v39);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *a8;
    uint64_t v17 = a8[1];
    uint64_t v18 = a8[2];
    uint64_t v19 = v9 >> 1;
    uint64_t v21 = *((void *)&v39 + 1);
    uint64_t v20 = v40;
    uint64_t v22 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    uint64_t v23 = v13 + v22 + v14 * v11;
    uint64_t v24 = 2 * *a8;
    uint64_t v25 = v14 + v22;
    uint64_t v26 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v19 = 1;
    }
    uint64_t v27 = v13 + v25 + v14 * v11;
    uint64_t v28 = (unsigned char *)(v39 + 1);
    do
    {
      if (v9 >= 2)
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        unsigned int v31 = v28;
        do
        {
          char v32 = &v31[v16];
          char v33 = *(unsigned char *)(v23 + v29 + 1);
          char v34 = *(unsigned char *)(v23 + v29 + 2);
          char v35 = *(unsigned char *)(v23 + v29 + 3);
          char v36 = *(unsigned char *)(v27 + v29);
          char v37 = *(unsigned char *)(v27 + v29 + 2);
          *(v31 - 1) = *(unsigned char *)(v23 + v29);
          *unsigned int v31 = v34;
          v31 += 2;
          *(v32 - 1) = v36;
          unsigned char *v32 = v37;
          *(unsigned char *)(v21 + v30) = v33;
          *(unsigned char *)(v20 + v30++) = v35;
          v29 += 4;
        }
        while (v19 != v30);
      }
      v21 += v17;
      v20 += v18;
      v23 += v26;
      ++v15;
      v27 += v26;
      v28 += v24;
    }
    while (v15 != v10 >> 1);
  }
  return 0;
}

uint64_t vt_Copy_yuvs_420v_vec(uint64_t a1, uint64_t a2, uint64_t *a3, const char **a4, void *a5, int8x16_t **a6)
{
  return 0;
}

uint64_t vt_CopyAvg_yuvs_420v(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  *(_OWORD *)&v47[32] = 0u;
  *(_OWORD *)&v47[16] = 0u;
  *(_OWORD *)long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  memset(v40, 0, sizeof(v40));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v41[0] = vdupq_n_s64(1uLL);
  v41[1] = xmmword_193E7D400;
  uint64_t v42 = 1;
  *(_OWORD *)&v47[8] = v41[0];
  *(_OWORD *)&v47[24] = xmmword_193E7D420;
  uint64_t v66 = 0;
  *(void *)&v47[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v41, a8, a7, v40);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a8[1];
    unint64_t v17 = v10 >> 1;
    uint64_t v18 = v9 >> 1;
    uint64_t v19 = *((void *)&v40[0] + 1);
    uint64_t v20 = *(void *)&v40[0];
    uint64_t v21 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    uint64_t v22 = v13 + v21 + v14 * v11;
    uint64_t v23 = 2 * *a8;
    uint64_t v24 = v14 + v21;
    uint64_t v25 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v26 = *a8 + *(void *)&v40[0] + 1;
    uint64_t v27 = v13 + v24 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = v18;
        do
        {
          unsigned int v31 = (unsigned char *)(v20 + v29);
          char v32 = (unsigned char *)(v26 + v29);
          char v33 = (unsigned char *)(v19 + v29);
          unsigned int v34 = (*(unsigned __int8 *)(v27 + v28 + 1) + *(unsigned __int8 *)(v22 + v28 + 1)) >> 1;
          char v35 = *(unsigned char *)(v22 + v28 + 2);
          unsigned int v36 = (*(unsigned __int8 *)(v27 + v28 + 3) + *(unsigned __int8 *)(v22 + v28 + 3)) >> 1;
          char v37 = *(unsigned char *)(v27 + v28);
          char v38 = *(unsigned char *)(v27 + v28 + 2);
          *unsigned int v31 = *(unsigned char *)(v22 + v28);
          v31[1] = v35;
          *(v32 - 1) = v37;
          unsigned char *v32 = v38;
          *char v33 = v34;
          v33[1] = v36;
          v29 += 2;
          v28 += 4;
          --v30;
        }
        while (v30);
      }
      v20 += v23;
      v19 += v16;
      v22 += v25;
      ++v15;
      v26 += v23;
      v27 += v25;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_yuvs_420v(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  *(_OWORD *)&v47[32] = 0u;
  *(_OWORD *)&v47[16] = 0u;
  *(_OWORD *)long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  memset(v40, 0, sizeof(v40));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v41[0] = vdupq_n_s64(1uLL);
  v41[1] = xmmword_193E7D400;
  uint64_t v42 = 1;
  *(_OWORD *)&v47[8] = v41[0];
  *(_OWORD *)&v47[24] = xmmword_193E7D420;
  uint64_t v66 = 0;
  *(void *)&v47[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v41, a8, a7, v40);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a8[1];
    unint64_t v17 = v10 >> 1;
    uint64_t v18 = v9 >> 1;
    uint64_t v19 = *((void *)&v40[0] + 1);
    uint64_t v20 = *(void *)&v40[0];
    uint64_t v21 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    uint64_t v22 = v13 + v21 + v14 * v11;
    uint64_t v23 = 2 * *a8;
    uint64_t v24 = v14 + v21;
    uint64_t v25 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v26 = v13 + v24 + v14 * v11;
    uint64_t v27 = *a8 + *(void *)&v40[0] + 1;
    do
    {
      if (v9 >= 2)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = v18;
        do
        {
          unsigned int v31 = (unsigned char *)(v20 + v28);
          char v32 = *(unsigned char *)(v22 + v29 + 1);
          char v33 = (unsigned char *)(v27 + v28);
          unsigned int v34 = (unsigned char *)(v19 + v28);
          char v35 = *(unsigned char *)(v22 + v29 + 2);
          char v36 = *(unsigned char *)(v22 + v29 + 3);
          char v37 = *(unsigned char *)(v26 + v29);
          char v38 = *(unsigned char *)(v26 + v29 + 2);
          *unsigned int v31 = *(unsigned char *)(v22 + v29);
          v31[1] = v35;
          *(v33 - 1) = v37;
          *char v33 = v38;
          *unsigned int v34 = v32;
          v34[1] = v36;
          v29 += 4;
          v28 += 2;
          --v30;
        }
        while (v30);
      }
      v20 += v23;
      v19 += v16;
      v22 += v25;
      ++v15;
      v26 += v25;
      v27 += v23;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyAvg_yuvs_420f(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  *(_OWORD *)&v48[32] = 0u;
  *(_OWORD *)&v48[16] = 0u;
  *(_OWORD *)long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  memset(v41, 0, sizeof(v41));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v42[0] = vdupq_n_s64(1uLL);
  v42[1] = xmmword_193E7D400;
  uint64_t v43 = 1;
  *(_OWORD *)&v48[8] = v42[0];
  *(_OWORD *)&v48[24] = xmmword_193E7D420;
  uint64_t v67 = 0;
  *(void *)&v48[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v42, a8, a7, v41);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a8[1];
    unint64_t v17 = v10 >> 1;
    uint64_t v18 = v9 >> 1;
    uint64_t v19 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    uint64_t v20 = v13 + v19 + v14 * v11;
    uint64_t v21 = *((void *)&v41[0] + 1);
    uint64_t v22 = *(void *)&v41[0];
    uint64_t v23 = 2 * *a8;
    uint64_t v24 = v14 + v19;
    uint64_t v25 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v26 = *a8 + *(void *)&v41[0] + 1;
    uint64_t v27 = v13 + v24 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = v18;
        do
        {
          unsigned int v31 = (unsigned char *)(v22 + v29);
          char v32 = (unsigned char *)(v26 + v29);
          uint64_t v33 = *(unsigned __int8 *)(v20 + v28 + 2);
          uint64_t v34 = *(unsigned __int8 *)(v20 + v28 + 3);
          uint64_t v35 = *(unsigned __int8 *)(v27 + v28 + 3);
          uint64_t v36 = *(unsigned __int8 *)(v27 + v28);
          unint64_t v37 = *(unsigned __int8 *)(v27 + v28 + 1) + (unint64_t)*(unsigned __int8 *)(v20 + v28 + 1);
          uint64_t v38 = *(unsigned __int8 *)(v27 + v28 + 2);
          *unsigned int v31 = sLumaTableVtoF[*(unsigned __int8 *)(v20 + v28)];
          long long v39 = (unsigned char *)(v21 + v29);
          v31[1] = sLumaTableVtoF[v33];
          *(v32 - 1) = sLumaTableVtoF[v36];
          unsigned char *v32 = sLumaTableVtoF[v38];
          unsigned char *v39 = sChromaTableVtoF[v37 >> 1];
          v39[1] = sChromaTableVtoF[(unint64_t)(v35 + v34) >> 1];
          v29 += 2;
          v28 += 4;
          --v30;
        }
        while (v30);
      }
      v22 += v23;
      v21 += v16;
      v20 += v25;
      ++v15;
      v26 += v23;
      v27 += v25;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_yuvs_420f(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  *(_OWORD *)&v48[32] = 0u;
  *(_OWORD *)&v48[16] = 0u;
  *(_OWORD *)long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  memset(v41, 0, sizeof(v41));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v42[0] = vdupq_n_s64(1uLL);
  v42[1] = xmmword_193E7D400;
  uint64_t v43 = 1;
  *(_OWORD *)&v48[8] = v42[0];
  *(_OWORD *)&v48[24] = xmmword_193E7D420;
  uint64_t v67 = 0;
  *(void *)&v48[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v42, a8, a7, v41);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a8[1];
    unint64_t v17 = v10 >> 1;
    uint64_t v18 = v9 >> 1;
    uint64_t v19 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    uint64_t v20 = v13 + v19 + v14 * v11;
    uint64_t v21 = *((void *)&v41[0] + 1);
    uint64_t v22 = *(void *)&v41[0];
    uint64_t v23 = 2 * *a8;
    uint64_t v24 = v14 + v19;
    uint64_t v25 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v26 = v13 + v24 + v14 * v11;
    uint64_t v27 = *a8 + *(void *)&v41[0] + 1;
    do
    {
      if (v9 >= 2)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = v18;
        do
        {
          unsigned int v31 = (unsigned char *)(v22 + v28);
          uint64_t v32 = *(unsigned __int8 *)(v20 + v29 + 1);
          uint64_t v33 = *(unsigned __int8 *)(v20 + v29 + 2);
          uint64_t v34 = *(unsigned __int8 *)(v20 + v29 + 3);
          uint64_t v35 = *(unsigned __int8 *)(v26 + v29);
          uint64_t v36 = *(unsigned __int8 *)(v26 + v29 + 2);
          *unsigned int v31 = sLumaTableVtoF[*(unsigned __int8 *)(v20 + v29)];
          char v37 = sLumaTableVtoF[v33];
          uint64_t v38 = (unsigned char *)(v27 + v28);
          v31[1] = v37;
          *(v38 - 1) = sLumaTableVtoF[v35];
          long long v39 = (unsigned char *)(v21 + v28);
          unsigned char *v38 = sLumaTableVtoF[v36];
          unsigned char *v39 = sChromaTableVtoF[v32];
          v39[1] = sChromaTableVtoF[v34];
          v29 += 4;
          v28 += 2;
          --v30;
        }
        while (v30);
      }
      v22 += v23;
      v21 += v16;
      v20 += v25;
      ++v15;
      v26 += v25;
      v27 += v23;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyAvg_yuvf_420v(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  *(_OWORD *)&v48[32] = 0u;
  *(_OWORD *)&v48[16] = 0u;
  *(_OWORD *)long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  memset(v41, 0, sizeof(v41));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v42[0] = vdupq_n_s64(1uLL);
  v42[1] = xmmword_193E7D400;
  uint64_t v43 = 1;
  *(_OWORD *)&v48[8] = v42[0];
  *(_OWORD *)&v48[24] = xmmword_193E7D420;
  uint64_t v67 = 0;
  *(void *)&v48[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v42, a8, a7, v41);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a8[1];
    unint64_t v17 = v10 >> 1;
    uint64_t v18 = v9 >> 1;
    uint64_t v19 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    uint64_t v20 = v13 + v19 + v14 * v11;
    uint64_t v21 = *((void *)&v41[0] + 1);
    uint64_t v22 = *(void *)&v41[0];
    uint64_t v23 = 2 * *a8;
    uint64_t v24 = v14 + v19;
    uint64_t v25 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v26 = *a8 + *(void *)&v41[0] + 1;
    uint64_t v27 = v13 + v24 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = v18;
        do
        {
          unsigned int v31 = (unsigned char *)(v22 + v29);
          uint64_t v32 = (unsigned char *)(v26 + v29);
          uint64_t v33 = *(unsigned __int8 *)(v20 + v28 + 2);
          uint64_t v34 = *(unsigned __int8 *)(v20 + v28 + 3);
          uint64_t v35 = *(unsigned __int8 *)(v27 + v28 + 3);
          uint64_t v36 = *(unsigned __int8 *)(v27 + v28);
          unint64_t v37 = *(unsigned __int8 *)(v27 + v28 + 1) + (unint64_t)*(unsigned __int8 *)(v20 + v28 + 1);
          uint64_t v38 = *(unsigned __int8 *)(v27 + v28 + 2);
          *unsigned int v31 = sLumaTableFtoV[*(unsigned __int8 *)(v20 + v28)];
          long long v39 = (unsigned char *)(v21 + v29);
          v31[1] = sLumaTableFtoV[v33];
          *(v32 - 1) = sLumaTableFtoV[v36];
          unsigned char *v32 = sLumaTableFtoV[v38];
          unsigned char *v39 = sChromaTableFtoV[v37 >> 1];
          v39[1] = sChromaTableFtoV[(unint64_t)(v35 + v34) >> 1];
          v29 += 2;
          v28 += 4;
          --v30;
        }
        while (v30);
      }
      v22 += v23;
      v21 += v16;
      v20 += v25;
      ++v15;
      v26 += v23;
      v27 += v25;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_yuvf_420v(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  *(_OWORD *)&v48[32] = 0u;
  *(_OWORD *)&v48[16] = 0u;
  *(_OWORD *)long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  memset(v41, 0, sizeof(v41));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v42[0] = vdupq_n_s64(1uLL);
  v42[1] = xmmword_193E7D400;
  uint64_t v43 = 1;
  *(_OWORD *)&v48[8] = v42[0];
  *(_OWORD *)&v48[24] = xmmword_193E7D420;
  uint64_t v67 = 0;
  *(void *)&v48[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v42, a8, a7, v41);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a8[1];
    unint64_t v17 = v10 >> 1;
    uint64_t v18 = v9 >> 1;
    uint64_t v19 = (2 * v12) & 0xFFFFFFFFFFFFFFCLL;
    uint64_t v20 = v13 + v19 + v14 * v11;
    uint64_t v21 = *((void *)&v41[0] + 1);
    uint64_t v22 = *(void *)&v41[0];
    uint64_t v23 = 2 * *a8;
    uint64_t v24 = v14 + v19;
    uint64_t v25 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v26 = v13 + v24 + v14 * v11;
    uint64_t v27 = *a8 + *(void *)&v41[0] + 1;
    do
    {
      if (v9 >= 2)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = v18;
        do
        {
          unsigned int v31 = (unsigned char *)(v22 + v28);
          uint64_t v32 = *(unsigned __int8 *)(v20 + v29 + 1);
          uint64_t v33 = *(unsigned __int8 *)(v20 + v29 + 2);
          uint64_t v34 = *(unsigned __int8 *)(v20 + v29 + 3);
          uint64_t v35 = *(unsigned __int8 *)(v26 + v29);
          uint64_t v36 = *(unsigned __int8 *)(v26 + v29 + 2);
          *unsigned int v31 = sLumaTableFtoV[*(unsigned __int8 *)(v20 + v29)];
          char v37 = sLumaTableFtoV[v33];
          uint64_t v38 = (unsigned char *)(v27 + v28);
          v31[1] = v37;
          *(v38 - 1) = sLumaTableFtoV[v35];
          long long v39 = (unsigned char *)(v21 + v28);
          unsigned char *v38 = sLumaTableFtoV[v36];
          unsigned char *v39 = sChromaTableFtoV[v32];
          v39[1] = sChromaTableFtoV[v34];
          v29 += 4;
          v28 += 2;
          --v30;
        }
        while (v30);
      }
      v22 += v23;
      v21 += v16;
      v20 += v25;
      ++v15;
      v26 += v25;
      v27 += v23;
    }
    while (v15 != v17);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_yuvf_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  unint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D430;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422YpCbYpCr8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_yuvf_32ARGB;
  *a11 = vt_VImage_Cleanup_yuvf_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_yuvf_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  unint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D430;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422YpCbYpCr8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_yuvf_32BGRA;
  *a11 = vt_VImage_Cleanup_yuvf_32BGRA;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_y420_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint8_t a5, vImage_YpCbCrToARGB **a6, void *a7, void (**a8)(void **a1))
{
  long long v22 = 0uLL;
  int v23 = 0;
  uint64_t v16 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v16->opaque = 0u;
  *(_OWORD *)&v16->opaque[16] = 0u;
  *(_OWORD *)&v16->opaque[32] = 0u;
  *(_OWORD *)&v16->opaque[48] = 0u;
  *(_OWORD *)&v16->opaque[64] = 0u;
  *(_OWORD *)&v16->opaque[80] = 0u;
  *(_OWORD *)&v16->opaque[96] = 0u;
  *(_OWORD *)&v16->opaque[112] = 0u;
  *(_OWORD *)v16[1].opaque = 0u;
  *(_OWORD *)&v16[1].opaque[16] = 0u;
  *(_OWORD *)&v16[1].opaque[32] = 0u;
  *(_OWORD *)&v16[1].opaque[48] = 0u;
  *(_OWORD *)&v16[1].opaque[64] = 0u;
  *(_OWORD *)&v16[1].opaque[80] = 0u;
  *(_OWORD *)&v16[1].opaque[96] = 0u;
  *(_OWORD *)&v16[1].opaque[112] = 0u;
  *(_OWORD *)v16[2].opaque = 0u;
  *(_OWORD *)&v16[2].opaque[16] = 0u;
  *(_OWORD *)&v16[2].opaque[32] = 0u;
  *(void *)&long long v17 = 255;
  *((void *)&v17 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v17;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        long long v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v22 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  long long v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v16, kvImage420Yp8_Cb8_Cr8, kvImageARGB8888, 0);
  *(void *)&v16[2].opaque[40] = a4;
  v16[2].opaque[32] = a5;
  *a7 = vt_VImage_Copy_y420_32ARGB;
  *a8 = vt_VImage_Cleanup_y420_32ARGB;
  *a6 = v16;
  return result;
}

vImage_Error vt_VImage_Setup_y420_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  long long v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage420Yp8_Cb8_Cr8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_y420_32BGRA;
  *a11 = vt_VImage_Cleanup_y420_32BGRA;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_y420_2vuy(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = a3[2];
    uint64_t v10 = *a5;
    unint64_t v11 = a2 >> 1;
    uint64_t v12 = a1 >> 1;
    uint64_t v13 = (unsigned char *)*a6;
    uint64_t v15 = a4[1];
    uint64_t v14 = a4[2];
    uint64_t v16 = *a4;
    uint64_t v17 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v12 = 1;
    }
    long long v18 = (char *)(v16 + 1);
    do
    {
      if (a1 >= 2)
      {
        uint64_t v19 = 0;
        int v20 = v18;
        int v21 = v13;
        do
        {
          long long v22 = &v20[v7];
          long long v23 = &v21[v10];
          char v24 = *(unsigned char *)(v15 + v19);
          char v25 = *(unsigned char *)(v14 + v19);
          char v26 = *(v20 - 1);
          char v27 = *v20;
          v20 += 2;
          *int v21 = v24;
          v21[1] = v26;
          void v21[2] = v25;
          OSType v21[3] = v27;
          char v28 = *(v22 - 1);
          LOBYTE(v22) = *v22;
          *long long v23 = v24;
          v23[1] = v28;
          v23[2] = v25;
          v23[3] = (_BYTE)v22;
          v21 += 4;
          ++v19;
        }
        while (v12 != v19);
      }
      v15 += v8;
      v14 += v9;
      v13 += v17;
      ++v6;
      v18 += 2 * v7;
    }
    while (v6 != v11);
  }
  return 0;
}

uint64_t vt_Copy_y420_yuvs(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = a3[2];
    uint64_t v10 = *a5;
    unint64_t v11 = a2 >> 1;
    uint64_t v12 = a1 >> 1;
    uint64_t v13 = (unsigned char *)*a6;
    uint64_t v15 = a4[1];
    uint64_t v14 = a4[2];
    uint64_t v16 = *a4;
    uint64_t v17 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v12 = 1;
    }
    long long v18 = (char *)(v16 + 1);
    do
    {
      if (a1 >= 2)
      {
        uint64_t v19 = 0;
        int v20 = v18;
        int v21 = v13;
        do
        {
          long long v22 = &v20[v7];
          long long v23 = &v21[v10];
          char v24 = *(unsigned char *)(v15 + v19);
          char v25 = *(unsigned char *)(v14 + v19);
          char v26 = *(v20 - 1);
          char v27 = *v20;
          v20 += 2;
          *int v21 = v26;
          v21[1] = v24;
          void v21[2] = v27;
          OSType v21[3] = v25;
          char v28 = *(v22 - 1);
          LOBYTE(v22) = *v22;
          *long long v23 = v28;
          v23[1] = v24;
          v23[2] = (_BYTE)v22;
          v23[3] = v25;
          v21 += 4;
          ++v19;
        }
        while (v12 != v19);
      }
      v15 += v8;
      v14 += v9;
      v13 += v17;
      ++v6;
      v18 += 2 * v7;
    }
    while (v6 != v11);
  }
  return 0;
}

uint64_t vt_Copy_y420_420v(size_t __n, unint64_t a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6)
{
  if (a2 >= 2)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a3;
    uint64_t v24 = a3[2];
    uint64_t v25 = a3[1];
    uint64_t v9 = *a5;
    unint64_t v22 = a2 >> 1;
    uint64_t v23 = a5[1];
    uint64_t v10 = *a6;
    unint64_t v11 = a6[1];
    uint64_t v13 = a4[1];
    uint64_t v12 = a4[2];
    if (__n >> 1 <= 1) {
      size_t v14 = 1;
    }
    else {
      size_t v14 = __n >> 1;
    }
    uint64_t v15 = *a4;
    do
    {
      memcpy(v10, v15, __n);
      uint64_t v16 = &v15[v8];
      uint64_t v17 = &v10[v9];
      memcpy(v17, v16, __n);
      if (__n >= 2)
      {
        uint64_t v18 = 0;
        uint64_t v19 = v11;
        do
        {
          char v20 = v12[v18];
          *uint64_t v19 = v13[v18];
          v19[1] = v20;
          v19 += 2;
          ++v18;
        }
        while (v14 != v18);
      }
      uint64_t v15 = &v16[v8];
      uint64_t v10 = &v17[v9];
      v13 += v25;
      v12 += v24;
      v11 += v23;
      ++v7;
    }
    while (v7 != v22);
  }
  return 0;
}

uint64_t vt_Copy_y420_420f(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = a3[2];
    uint64_t v10 = *a5;
    uint64_t v11 = a5[1];
    uint64_t v12 = a1 >> 1;
    uint64_t v13 = (unsigned char *)*a6;
    size_t v14 = (unsigned char *)a6[1];
    uint64_t v16 = a4[1];
    uint64_t v17 = a4[2];
    if (a1 >> 1 <= 1) {
      uint64_t v12 = 1;
    }
    uint64_t v18 = *a4;
    do
    {
      if (a1)
      {
        for (uint64_t i = 0; i != a1; ++i)
          v13[i] = sLumaTableVtoF[v18[i]];
        char v20 = &v18[v7];
        int v21 = &v13[v10];
        unint64_t v22 = v20;
        uint64_t v23 = v21;
        unint64_t v24 = a1;
        do
        {
          unsigned int v25 = *v22++;
          *v23++ = sLumaTableVtoF[v25];
          --v24;
        }
        while (v24);
        uint64_t v18 = &v20[v7];
        uint64_t v13 = &v21[v10];
        if (a1 >= 2)
        {
          uint64_t v26 = 0;
          char v27 = v14;
          do
          {
            uint64_t v28 = v17[v26];
            *char v27 = sChromaTableVtoF[v16[v26]];
            v27[1] = sChromaTableVtoF[v28];
            v27 += 2;
            ++v26;
          }
          while (v12 != v26);
        }
      }
      else
      {
        v18 += v7 + v7;
        v13 += v10 + v10;
      }
      v16 += v8;
      v17 += v9;
      v14 += v11;
      ++v6;
    }
    while (v6 != a2 >> 1);
  }
  return 0;
}

uint64_t vt_Copy_y420_444v(size_t a1, unint64_t a2, void *a3, char **a4, uint64_t *a5, char **a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v27 = a3[2];
    uint64_t v7 = *a5;
    uint64_t v8 = a5[1];
    uint64_t v24 = a3[1];
    unint64_t v25 = a2 >> 1;
    uint64_t v9 = *a6;
    uint64_t v10 = a4[1];
    uint64_t v11 = a4[2];
    uint64_t v12 = *a4;
    uint64_t v13 = &(*a4)[*a3];
    uint64_t v23 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = a1 >> 1;
    }
    uint64_t v15 = (uint64_t)(a6[1] + 1);
    uint64_t v26 = *a5;
    do
    {
      uint64_t v29 = v6;
      memcpy(v9, v12, a1);
      uint64_t v16 = &v9[v7];
      memcpy(v16, v13, a1);
      if (a1 >= 2)
      {
        uint64_t v17 = 0;
        uint64_t v18 = (unsigned char *)v15;
        do
        {
          char v19 = v10[v17];
          char v20 = v11[v17];
          *(v18 - 1) = v19;
          unsigned char *v18 = v20;
          v18[1] = v19;
          v18[2] = v20;
          int v21 = &v18[v8];
          *(v21 - 1) = v19;
          *int v21 = v20;
          v21[1] = v19;
          void v21[2] = v20;
          ++v17;
          v18 += 4;
        }
        while (v14 != v17);
      }
      v12 += v23;
      v13 += v23;
      uint64_t v7 = v26;
      uint64_t v9 = &v16[v26];
      v10 += v24;
      v11 += v27;
      uint64_t v6 = v29 + 1;
      v15 += 2 * v8;
    }
    while (v29 + 1 != v25);
  }
  return 0;
}

uint64_t vt_Copy_y420_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = *(void *)(a2 + 40);
  unint64_t v13 = v12 & 0xFFFFFFFE;
  uint64_t v14 = v8 + v12;
  uint64_t v15 = (v8 + v12) & 1;
  uint64_t v16 = a4[1];
  uint64_t v17 = a4[2];
  uint64_t v18 = v12 >> 1;
  char v19 = (unsigned __int8 *)(a3[1] + v16 * v18 + ((unint64_t)(v10 + v9) >> 1));
  char v20 = (unsigned __int8 *)(a3[2] + v17 * v18 + ((unint64_t)(v10 + v9) >> 1));
  unint64_t v21 = *(void *)(a6 + 24);
  uint64_t v22 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v23 = *(void *)(a6 + 40);
  uint64_t v24 = a8[1];
  unint64_t v25 = (_WORD *)(a7[1] + v24 * v23 + ((2 * v22) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v26 = v11 - (v10 + v9);
  unint64_t v27 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v22;
  if (v26 < v27) {
    unint64_t v27 = v26;
  }
  unint64_t v28 = v14 - v13 + v15;
  if (v28 >= v21) {
    unint64_t v28 = v21;
  }
  if (v28)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v13;
    if (v13 >= v12) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    uint64_t v34 = v32 + v10 + v9 + v33;
    uint64_t v35 = *a7 + v31 * v23 + 2 * v22;
    do
    {
      if (v27)
      {
        for (uint64_t i = 0; i != v27; ++i)
          *(_WORD *)(v35 + 2 * i) = *(unsigned __int8 *)(v34 + i) << 8;
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v28);
  }
  uint64_t v37 = v12 & 1;
  if (v28 >> 1 >= (v28 - v37) >> 1) {
    unint64_t v38 = (v28 - (v12 & 1)) >> 1;
  }
  else {
    unint64_t v38 = v28 >> 1;
  }
  char v39 = v9;
  unint64_t v40 = v27 >> 1;
  if (v27 >> 1 >= (v27 - v10) >> 1) {
    unint64_t v40 = (v27 - v10) >> 1;
  }
  if (v12)
  {
    uint64_t v41 = v19;
    if (v39)
    {
      uint64_t v41 = v19 + 1;
      uint64_t v42 = v20 + 1;
      __int16 v44 = *v20 << 8;
      *unint64_t v25 = *v19 << 8;
      v25[1] = v44;
      uint64_t v43 = v25 + 2;
      if (!v40)
      {
LABEL_27:
        v19 += v16;
        v20 += v17;
        unint64_t v25 = (_WORD *)((char *)v25 + v24);
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v42 = v20;
      uint64_t v43 = v25;
      if (!v40) {
        goto LABEL_27;
      }
    }
    uint64_t v45 = -(uint64_t)v40;
    do
    {
      __int16 v47 = *v41++;
      __int16 v46 = v47;
      __int16 v48 = *v42++;
      *uint64_t v43 = v46 << 8;
      v43[1] = v48 << 8;
      v43 += 2;
      BOOL v49 = __CFADD__(v45++, 1);
    }
    while (!v49);
    goto LABEL_27;
  }
LABEL_28:
  if (v38)
  {
    for (uint64_t j = 0; j != v38; ++j)
    {
      long long v51 = v19;
      long long v52 = v20;
      long long v53 = v25;
      if (v39)
      {
        long long v51 = v19 + 1;
        long long v52 = v20 + 1;
        __int16 v54 = *v20 << 8;
        *unint64_t v25 = *v19 << 8;
        v25[1] = v54;
        long long v53 = v25 + 2;
      }
      if (v40)
      {
        uint64_t v55 = -(uint64_t)v40;
        do
        {
          __int16 v57 = *v51++;
          __int16 v56 = v57;
          __int16 v58 = *v52++;
          v56 <<= 8;
          *long long v53 = v56;
          v53[1] = v58 << 8;
          long long v59 = (_WORD *)((char *)v53 + v24);
          _WORD *v59 = v56;
          v59[1] = v58 << 8;
          v53 += 2;
          BOOL v49 = __CFADD__(v55++, 1);
        }
        while (!v49);
      }
      v19 += v16;
      v20 += v17;
      v25 += v24;
    }
    uint64_t v60 = 2 * v38;
  }
  else
  {
    uint64_t v60 = 0;
  }
  if ((v60 | (unint64_t)v37) < v28)
  {
    if (v39)
    {
      __int16 v62 = *v19++;
      __int16 v61 = v62;
      __int16 v63 = *v20++;
      *unint64_t v25 = v61 << 8;
      v25[1] = v63 << 8;
      v25 += 2;
    }
    if (v40)
    {
      uint64_t v64 = -(uint64_t)v40;
      do
      {
        __int16 v66 = *v19++;
        __int16 v65 = v66;
        __int16 v67 = *v20++;
        *unint64_t v25 = v65 << 8;
        v25[1] = v67 << 8;
        v25 += 2;
        BOOL v49 = __CFADD__(v64++, 1);
      }
      while (!v49);
    }
  }
  return 0;
}

uint64_t vt_Copy_y420_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = *(void *)(a2 + 40);
  unint64_t v13 = v12 & 0xFFFFFFFE;
  uint64_t v14 = v8 + v12;
  uint64_t v15 = (v8 + v12) & 1;
  uint64_t v16 = a4[1];
  uint64_t v17 = a4[2];
  uint64_t v18 = v12 >> 1;
  char v19 = (unsigned __int8 *)(a3[1] + v16 * v18 + ((unint64_t)(v10 + v9) >> 1));
  char v20 = (unsigned __int8 *)(a3[2] + v17 * v18 + ((unint64_t)(v10 + v9) >> 1));
  unint64_t v21 = *(void *)(a6 + 24);
  uint64_t v22 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v23 = *(void *)(a6 + 40);
  uint64_t v24 = a8[1];
  unint64_t v25 = (_WORD *)(a7[1] + v24 * v23 + ((2 * v22) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v26 = v11 - (v10 + v9);
  unint64_t v27 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v22;
  if (v26 < v27) {
    unint64_t v27 = v26;
  }
  unint64_t v28 = v14 - v13 + v15;
  if (v28 >= v21) {
    unint64_t v28 = v21;
  }
  if (v28)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v13;
    if (v13 >= v12) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    uint64_t v34 = v32 + v10 + v9 + v33;
    uint64_t v35 = *a7 + v31 * v23 + 2 * v22;
    do
    {
      if (v27)
      {
        for (uint64_t i = 0; i != v27; ++i)
        {
          unsigned int v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB) {
            unsigned int v37 = 235;
          }
          if (v37 <= 0x10) {
            unsigned int v37 = 16;
          }
          *(_WORD *)(v35 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v37 - 16368)) >> 32)
                                                  + ((1023 * v37
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v37 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v28);
  }
  uint64_t v38 = v12 & 1;
  if (v28 >> 1 >= (v28 - v38) >> 1) {
    unint64_t v39 = (v28 - (v12 & 1)) >> 1;
  }
  else {
    unint64_t v39 = v28 >> 1;
  }
  char v40 = v9;
  unint64_t v41 = v27 >> 1;
  if (v27 >> 1 >= (v27 - v10) >> 1) {
    unint64_t v41 = (v27 - v10) >> 1;
  }
  if (v12)
  {
    uint64_t v42 = v19;
    if (v40)
    {
      uint64_t v42 = v19 + 1;
      unsigned int v45 = *v19;
      uint64_t v43 = v20 + 1;
      unsigned int v46 = *v20;
      if (v45 >= 0xF0) {
        unsigned int v45 = 240;
      }
      if (v45 <= 0x10) {
        unsigned int v45 = 16;
      }
      if (v46 >= 0xF0) {
        unsigned int v46 = 240;
      }
      if (v46 <= 0x10) {
        unsigned int v46 = 16;
      }
      *unint64_t v25 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 16368) >> 5)) >> 32) << 6;
      v25[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v46 - 16368) >> 5)) >> 32) << 6;
      __int16 v44 = v25 + 2;
      if (!v41) {
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v43 = v20;
      __int16 v44 = v25;
      if (!v41)
      {
LABEL_47:
        v19 += v16;
        v20 += v17;
        unint64_t v25 = (_WORD *)((char *)v25 + v24);
        goto LABEL_48;
      }
    }
    uint64_t v47 = -(uint64_t)v41;
    do
    {
      unsigned int v49 = *v42++;
      unsigned int v48 = v49;
      unsigned int v51 = *v43++;
      unsigned int v50 = v51;
      if (v48 >= 0xF0) {
        unsigned int v48 = 240;
      }
      if (v48 <= 0x10) {
        unsigned int v48 = 16;
      }
      if (v50 >= 0xF0) {
        unsigned int v50 = 240;
      }
      if (v50 <= 0x10) {
        unsigned int v50 = 16;
      }
      *__int16 v44 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v48 - 16368) >> 5)) >> 32) << 6;
      v44[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v50 - 16368) >> 5)) >> 32) << 6;
      v44 += 2;
      BOOL v52 = __CFADD__(v47++, 1);
    }
    while (!v52);
    goto LABEL_47;
  }
LABEL_48:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      __int16 v54 = v19;
      uint64_t v55 = v20;
      __int16 v56 = v25;
      if (v40)
      {
        __int16 v54 = v19 + 1;
        unsigned int v57 = *v19;
        uint64_t v55 = v20 + 1;
        unsigned int v58 = *v20;
        if (v57 >= 0xF0) {
          unsigned int v57 = 240;
        }
        if (v57 <= 0x10) {
          unsigned int v57 = 16;
        }
        if (v58 >= 0xF0) {
          unsigned int v58 = 240;
        }
        if (v58 <= 0x10) {
          unsigned int v58 = 16;
        }
        *unint64_t v25 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 16368) >> 5)) >> 32) << 6;
        v25[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v58 - 16368) >> 5)) >> 32) << 6;
        __int16 v56 = v25 + 2;
      }
      if (v41)
      {
        uint64_t v59 = -(uint64_t)v41;
        do
        {
          unsigned int v61 = *v54++;
          unsigned int v60 = v61;
          unsigned int v63 = *v55++;
          unsigned int v62 = v63;
          if (v60 >= 0xF0) {
            unsigned int v60 = 240;
          }
          if (v60 <= 0x10) {
            unsigned int v60 = 16;
          }
          if (v62 >= 0xF0) {
            unsigned int v62 = 240;
          }
          if (v62 <= 0x10) {
            unsigned int v62 = 16;
          }
          int v64 = (613566757 * (unint64_t)((1023 * v60 - 16368) >> 5)) >> 32 << 6;
          *__int16 v56 = v64;
          int v65 = (613566757 * (unint64_t)((1023 * v62 - 16368) >> 5)) >> 32 << 6;
          v56[1] = v65;
          __int16 v66 = (_WORD *)((char *)v56 + v24);
          *__int16 v66 = v64;
          v66[1] = v65;
          v56 += 2;
          BOOL v52 = __CFADD__(v59++, 1);
        }
        while (!v52);
      }
      v19 += v16;
      v20 += v17;
      v25 += v24;
    }
    uint64_t v67 = 2 * v39;
  }
  else
  {
    uint64_t v67 = 0;
  }
  if ((v67 | (unint64_t)v38) < v28)
  {
    if (v40)
    {
      unsigned int v69 = *v19++;
      unsigned int v68 = v69;
      unsigned int v71 = *v20++;
      unsigned int v70 = v71;
      if (v68 >= 0xF0) {
        unsigned int v68 = 240;
      }
      if (v68 <= 0x10) {
        unsigned int v68 = 16;
      }
      if (v70 >= 0xF0) {
        unsigned int v70 = 240;
      }
      if (v70 <= 0x10) {
        unsigned int v70 = 16;
      }
      *unint64_t v25 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v68 - 16368) >> 5)) >> 32) << 6;
      v25[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v70 - 16368) >> 5)) >> 32) << 6;
      v25 += 2;
    }
    if (v41)
    {
      uint64_t v72 = -(uint64_t)v41;
      do
      {
        unsigned int v74 = *v19++;
        unsigned int v73 = v74;
        unsigned int v76 = *v20++;
        unsigned int v75 = v76;
        if (v73 >= 0xF0) {
          unsigned int v73 = 240;
        }
        if (v73 <= 0x10) {
          unsigned int v73 = 16;
        }
        if (v75 >= 0xF0) {
          unsigned int v75 = 240;
        }
        if (v75 <= 0x10) {
          unsigned int v75 = 16;
        }
        *unint64_t v25 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v73 - 16368) >> 5)) >> 32) << 6;
        v25[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v75 - 16368) >> 5)) >> 32) << 6;
        v25 += 2;
        BOOL v52 = __CFADD__(v72++, 1);
      }
      while (!v52);
    }
  }
  return 0;
}

uint64_t vt_Copy_v2a8_y416(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2]) {
    unint64_t v9 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v10 = a6[3];
  }
  else {
    uint64_t v10 = a2[3];
  }
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v13 = a4[1];
    uint64_t v12 = a4[2];
    uint64_t v14 = *a4;
    uint64_t v15 = *a8;
    uint64_t v16 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v17 = a2[5];
    uint64_t v18 = *a3;
    uint64_t v19 = a3[1] + v13 * v17;
    uint64_t v20 = a3[2] + v12 * v17;
    uint64_t v21 = v18 + *a4 * v17;
    uint64_t v22 = (unsigned __int8 *)(v19 + v8);
    uint64_t v23 = v20 + v8;
    uint64_t v24 = v21 + v8;
    do
    {
      if (v9)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        __int16 v27 = 0;
        __int16 v28 = 0;
        uint64_t v29 = v22;
        do
        {
          if ((v26 & 1) == 0)
          {
            __int16 v30 = *v29;
            __int16 v31 = v29[1];
            v29 += 2;
            __int16 v28 = v30 << 8;
            __int16 v27 = v31 << 8;
          }
          uint64_t v32 = (_WORD *)(v16 + v25);
          __int16 v33 = *(unsigned __int8 *)(v24 + v26) << 8;
          _WORD *v32 = *(unsigned __int8 *)(v23 + v26) | (*(unsigned __int8 *)(v23 + v26) << 8);
          v32[1] = v33;
          v32[2] = v28;
          v32[3] = v27;
          ++v26;
          v25 += 8;
        }
        while (v9 != v26);
      }
      v24 += v14;
      v16 += v15;
      v22 += v13;
      v23 += v12;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_v2a8_y408(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2]) {
    unint64_t v9 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v10 = a6[3];
  }
  else {
    uint64_t v10 = a2[3];
  }
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v13 = a4[1];
    uint64_t v12 = a4[2];
    uint64_t v14 = *a4;
    uint64_t v15 = *a8;
    uint64_t v16 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v17 = a2[5];
    uint64_t v18 = *a3;
    uint64_t v19 = a3[1] + v13 * v17;
    uint64_t v20 = a3[2] + v12 * v17;
    uint64_t v21 = v18 + *a4 * v17;
    uint64_t v22 = (char *)(v19 + v8);
    uint64_t v23 = v20 + v8;
    uint64_t v24 = v21 + v8;
    do
    {
      if (v9)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        char v27 = 0;
        char v28 = 0;
        uint64_t v29 = v22;
        do
        {
          if ((v26 & 1) == 0)
          {
            char v28 = *v29;
            char v27 = v29[1];
            v29 += 2;
          }
          char v30 = *(unsigned char *)(v24 + v26);
          __int16 v31 = (unsigned char *)(v16 + v25);
          *__int16 v31 = *(unsigned char *)(v23 + v26);
          v31[1] = v30;
          v31[2] = v28;
          v31[3] = v27;
          ++v26;
          v25 += 4;
        }
        while (v9 != v26);
      }
      v24 += v14;
      v16 += v15;
      v22 += v13;
      v23 += v12;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_422v_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    uint64_t v15 = *a8;
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    unint64_t v18 = a3[1] + v14 * v17 + (v9 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (_WORD *)(v16 + v20);
          __int16 v23 = *(unsigned __int8 *)(v18 + i + 1) << 8;
          __int16 v24 = *(unsigned __int8 *)(v19 + i) << 8;
          __int16 v25 = *(unsigned __int8 *)(v19 + i + 1) << 8;
          _WORD *v22 = *(unsigned __int8 *)(v18 + i) << 8;
          v22[1] = v24;
          v22[2] = v23;
          void v22[3] = v25;
          v20 += 8;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_422v_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    uint64_t v15 = *a8;
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + v10;
    uint64_t v17 = *(void *)(a2 + 40);
    unint64_t v18 = a3[1] + v14 * v17 + (v9 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (unsigned char *)(v16 + v20);
          char v23 = *(unsigned char *)(v18 + i + 1);
          char v24 = *(unsigned char *)(v19 + i);
          char v25 = *(unsigned char *)(v19 + i + 1);
          unsigned char *v22 = *(unsigned char *)(v18 + i);
          v22[1] = v24;
          v22[2] = v23;
          void v22[3] = v25;
          v20 += 4;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v2a8_s4as(int32x2_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, uint64_t a6, void *a7, void *a8, uint64_t *a9)
{
  uint64_t v10 = a3[4];
  uint64_t v9 = a3[5];
  uint64_t v11 = v10 & 0xFFFFFFFE;
  unint64_t v12 = a3[3];
  uint64_t v13 = a3[2] + v10;
  uint64_t v14 = a5[1];
  uint64_t v15 = (unsigned __int8 *)(a4[1] + v14 * v9 + v11);
  uint64_t v17 = a7[4];
  uint64_t v16 = a7[5];
  uint64_t v18 = a9[1];
  uint64_t v19 = (_WORD *)(a8[1] + v18 * v16 + 4 * v17);
  unint64_t v20 = v13 - v11 + (v13 & 1);
  if (v20 >= a7[2]) {
    unint64_t v20 = a7[2];
  }
  if (v12 >= a7[3]) {
    unint64_t v12 = a7[3];
  }
  if (v12)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a9;
    uint64_t v23 = a9[2];
    uint64_t v24 = a8[2] + v23 * v16;
    uint64_t v25 = *a8 + *a9 * v16;
    uint64_t v26 = *a5;
    uint64_t v27 = a5[2];
    uint64_t v28 = v24 + 2 * v17;
    uint64_t v29 = v25 + 2 * v17;
    uint64_t v30 = a4[2] + v27 * v9 + v11;
    uint64_t v31 = *a4 + v26 * v9 + v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v30 + i) | (*(unsigned __int8 *)(v30 + i) << 8);
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v29 += v22;
      v30 += v27;
      v28 += v23;
      ++v21;
    }
    while (v21 != v12);
  }
  unint64_t v33 = v9 & 1;
  if (v12 >= v33) {
    uint64_t v34 = v9 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  char v35 = v10;
  unint64_t v36 = v20 >> 1;
  uint64_t v37 = v10 & 1;
  if (v20 >> 1 >= (v20 - v37) >> 1) {
    unint64_t v36 = (v20 - v37) >> 1;
  }
  if (v9)
  {
    if (v35)
    {
      uint64_t v38 = v15 + 2;
      __int16 v45 = v15[1] << 8;
      *uint64_t v19 = *v15 << 8;
      v19[1] = v45;
      unint64_t v39 = v19 + 2;
      if (v36)
      {
LABEL_19:
        uint64_t v40 = -(uint64_t)v36;
        do
        {
          __int16 v41 = *v38;
          __int16 v42 = v38[1];
          v38 += 2;
          _WORD *v39 = v41 << 8;
          v39[1] = v42 << 8;
          v39 += 2;
          BOOL v43 = __CFADD__(v40++, 1);
        }
        while (!v43);
        uint64_t v44 = 2 * v36;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v38 = v15;
      unint64_t v39 = v19;
      if (v36) {
        goto LABEL_19;
      }
    }
    uint64_t v44 = 0;
LABEL_25:
    if ((v44 | (unint64_t)v37) < v20)
    {
      __int16 v46 = *v38 << 8;
      __int16 v47 = v38[1] << 8;
      _WORD *v39 = v46;
      v39[1] = v47;
    }
    v15 += v14;
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v12 == v34)
  {
    unint64_t v48 = 0;
  }
  else
  {
    uint64_t v49 = 0;
    unint64_t v48 = v12 - v34;
    do
    {
      unsigned int v50 = v15;
      unsigned int v51 = (double *)v19;
      if (v35)
      {
        unsigned int v50 = v15 + 2;
        __int16 v52 = v15[1] << 8;
        *uint64_t v19 = *v15 << 8;
        v19[1] = v52;
        unsigned int v51 = (double *)(v19 + 2);
      }
      if (v36)
      {
        uint64_t v53 = -(uint64_t)v36;
        do
        {
          __int16 v54 = v50 + 2;
          a1.i8[0] = *v50;
          a1.i8[4] = v50[1];
          int16x4_t v55 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v55, v55);
          *v51++ = *(double *)&a1;
          v50 += 2;
          BOOL v43 = __CFADD__(v53++, 1);
        }
        while (!v43);
      }
      else
      {
        __int16 v54 = v50;
      }
      if ((v37 | (2 * v36)) < v20)
      {
        __int16 v56 = *v54 << 8;
        __int16 v57 = v54[1] << 8;
        *(_WORD *)unsigned int v51 = v56;
        *((_WORD *)v51 + 1) = v57;
      }
      v15 += v14;
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v49;
    }
    while (v49 != v48);
  }
  if (v48 + v33 < v12)
  {
    if (v35)
    {
      __int16 v58 = *v15;
      __int16 v59 = v15[1];
      v15 += 2;
      *uint64_t v19 = v58 << 8;
      v19[1] = v59 << 8;
      v19 += 2;
    }
    if (v36)
    {
      uint64_t v60 = -(uint64_t)v36;
      do
      {
        __int16 v61 = *v15;
        __int16 v62 = v15[1];
        v15 += 2;
        *uint64_t v19 = v61 << 8;
        v19[1] = v62 << 8;
        v19 += 2;
        BOOL v43 = __CFADD__(v60++, 1);
      }
      while (!v43);
      uint64_t v63 = 2 * v36;
    }
    else
    {
      uint64_t v63 = 0;
    }
    if ((v63 | (unint64_t)v37) < v20)
    {
      __int16 v64 = *v15 << 8;
      __int16 v65 = v15[1] << 8;
      *uint64_t v19 = v64;
      v19[1] = v65;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_sv44(int32x2_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, uint64_t a6, void *a7, void *a8, uint64_t *a9)
{
  uint64_t v10 = a3[4];
  uint64_t v9 = a3[5];
  unint64_t v11 = a3[3];
  uint64_t v12 = a3[2] + v10;
  uint64_t v13 = a5[1];
  uint64_t v14 = (unsigned __int8 *)(a4[1] + v13 * v9 + (v10 & 0xFFFFFFFE));
  uint64_t v15 = a7[4];
  uint64_t v16 = a7[5];
  uint64_t v17 = a9[1];
  uint64_t v18 = (_WORD *)(a8[1] + v17 * v16 + 4 * v15);
  unint64_t v19 = v12 - (v10 & 0xFFFFFFFE) + (v12 & 1);
  if (v19 >= a7[2]) {
    unint64_t v19 = a7[2];
  }
  if (v11 >= a7[3]) {
    unint64_t v11 = a7[3];
  }
  if (v11)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a5;
    uint64_t v22 = *a9;
    uint64_t v23 = *a8 + *a9 * v16 + 2 * v15;
    uint64_t v24 = *a4 + *a5 * v9 + (v10 & 0xFFFFFFFE);
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
          *(_WORD *)(v23 + 2 * i) = *(unsigned __int8 *)(v24 + i) << 8;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v11);
  }
  unint64_t v26 = v9 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v9 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v10;
  unint64_t v29 = v19 >> 1;
  uint64_t v30 = v10 & 1;
  if (v19 >> 1 >= (v19 - v30) >> 1) {
    unint64_t v29 = (v19 - v30) >> 1;
  }
  if (v9)
  {
    if (v28)
    {
      uint64_t v31 = v14 + 2;
      __int16 v38 = v14[1] << 8;
      _WORD *v18 = *v14 << 8;
      v18[1] = v38;
      uint64_t v32 = v18 + 2;
      if (v29)
      {
LABEL_19:
        uint64_t v33 = -(uint64_t)v29;
        do
        {
          __int16 v34 = *v31;
          __int16 v35 = v31[1];
          v31 += 2;
          _WORD *v32 = v34 << 8;
          v32[1] = v35 << 8;
          v32 += 2;
          BOOL v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        uint64_t v37 = 2 * v29;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v31 = v14;
      uint64_t v32 = v18;
      if (v29) {
        goto LABEL_19;
      }
    }
    uint64_t v37 = 0;
LABEL_25:
    if ((v37 | (unint64_t)v30) < v19)
    {
      __int16 v39 = *v31 << 8;
      __int16 v40 = v31[1] << 8;
      _WORD *v32 = v39;
      v32[1] = v40;
    }
    v14 += v13;
    uint64_t v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v11 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v11 - v27;
    do
    {
      BOOL v43 = v14;
      uint64_t v44 = (double *)v18;
      if (v28)
      {
        BOOL v43 = v14 + 2;
        __int16 v45 = v14[1] << 8;
        _WORD *v18 = *v14 << 8;
        v18[1] = v45;
        uint64_t v44 = (double *)(v18 + 2);
      }
      if (v29)
      {
        uint64_t v46 = -(uint64_t)v29;
        do
        {
          __int16 v47 = v43 + 2;
          a1.i8[0] = *v43;
          a1.i8[4] = v43[1];
          int16x4_t v48 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v48, v48);
          *v44++ = *(double *)&a1;
          v43 += 2;
          BOOL v36 = __CFADD__(v46++, 1);
        }
        while (!v36);
      }
      else
      {
        __int16 v47 = v43;
      }
      if ((v30 | (2 * v29)) < v19)
      {
        __int16 v49 = *v47 << 8;
        __int16 v50 = v47[1] << 8;
        *(_WORD *)uint64_t v44 = v49;
        *((_WORD *)v44 + 1) = v50;
      }
      v14 += v13;
      uint64_t v18 = (_WORD *)((char *)v18 + v17);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if (v28)
    {
      __int16 v51 = *v14;
      __int16 v52 = v14[1];
      v14 += 2;
      _WORD *v18 = v51 << 8;
      v18[1] = v52 << 8;
      v18 += 2;
    }
    if (v29)
    {
      uint64_t v53 = -(uint64_t)v29;
      do
      {
        __int16 v54 = *v14;
        __int16 v55 = v14[1];
        v14 += 2;
        _WORD *v18 = v54 << 8;
        v18[1] = v55 << 8;
        v18 += 2;
        BOOL v36 = __CFADD__(v53++, 1);
      }
      while (!v36);
      uint64_t v56 = 2 * v29;
    }
    else
    {
      uint64_t v56 = 0;
    }
    if ((v56 | (unint64_t)v30) < v19)
    {
      __int16 v57 = *v14 << 8;
      __int16 v58 = v14[1] << 8;
      _WORD *v18 = v57;
      v18[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  unint64_t v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2]) {
    unint64_t v18 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v19 = a6[3];
  }
  else {
    unint64_t v19 = v10;
  }
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          unsigned int v26 = *(unsigned __int8 *)(v24 + i);
          if (v26 >= 0xEB) {
            unsigned int v26 = 235;
          }
          if (v26 <= 0x10) {
            unsigned int v26 = 16;
          }
          *(_WORD *)(v23 + 2 * i) = (-1048560 - v26 + (v26 << 16)) / 0xDB;
        }
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
  }
  unint64_t v27 = v8 & 1;
  if (v19 >= v27) {
    uint64_t v28 = v8 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v9;
  unint64_t v30 = v18 >> 1;
  uint64_t v31 = v9 & 1;
  if (v18 >> 1 >= (v18 - v31) >> 1) {
    unint64_t v30 = (v18 - v31) >> 1;
  }
  if (v8)
  {
    if (v29)
    {
      unsigned int v39 = *v13;
      unsigned int v40 = v13[1];
      if (v39 >= 0xF0) {
        unsigned int v39 = 240;
      }
      if (v39 <= 0x10) {
        unsigned int v39 = 16;
      }
      if (v40 >= 0xF0) {
        unsigned int v40 = 240;
      }
      if (v40 <= 0x10) {
        int v41 = 16;
      }
      else {
        int v41 = v40;
      }
      uint64_t v32 = v13 + 2;
      *uint64_t v17 = (613566757 * (unint64_t)((-1048560 - v39 + (v39 << 16)) >> 5)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1048560 - v41 + (v41 << 16)) >> 5)) >> 32;
      uint64_t v33 = v17 + 2;
      if (v30) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v32 = v13;
      uint64_t v33 = v17;
      if (v30)
      {
LABEL_24:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          unsigned int v35 = *v32;
          unsigned int v36 = v32[1];
          if (v35 >= 0xF0) {
            unsigned int v35 = 240;
          }
          if (v35 <= 0x10) {
            unsigned int v35 = 16;
          }
          if (v36 >= 0xF0) {
            unsigned int v36 = 240;
          }
          if (v36 <= 0x10) {
            unsigned int v36 = 16;
          }
          v32 += 2;
          *uint64_t v33 = (613566757 * (unint64_t)((-1048560 - v35 + (v35 << 16)) >> 5)) >> 32;
          v33[1] = (613566757 * (unint64_t)((-1048560 - v36 + (v36 << 16)) >> 5)) >> 32;
          v33 += 2;
          BOOL v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v30;
        goto LABEL_47;
      }
    }
    uint64_t v38 = 0;
LABEL_47:
    if ((v38 | (unint64_t)v31) < v18)
    {
      unsigned int v42 = *v32;
      unsigned int v43 = v32[1];
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        unsigned int v42 = 16;
      }
      if (v43 >= 0xF0) {
        unsigned int v43 = 240;
      }
      if (v43 <= 0x10) {
        unsigned int v43 = 16;
      }
      *uint64_t v33 = (613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32;
      v33[1] = (613566757 * (unint64_t)((-1048560 - v43 + (v43 << 16)) >> 5)) >> 32;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v28)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v19 - v28;
    int32x2_t v46 = vdup_n_s32(0xFFF00010);
    uint32x2_t v47 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      int16x4_t v48 = v13;
      __int16 v49 = (int16x4_t *)v17;
      if (v29)
      {
        unsigned int v50 = *v13;
        unsigned int v51 = v13[1];
        if (v50 >= 0xF0) {
          unsigned int v50 = 240;
        }
        if (v50 <= 0x10) {
          unsigned int v50 = 16;
        }
        if (v51 >= 0xF0) {
          unsigned int v51 = 240;
        }
        if (v51 <= 0x10) {
          int v52 = 16;
        }
        else {
          int v52 = v51;
        }
        int16x4_t v48 = v13 + 2;
        *uint64_t v17 = (613566757 * (unint64_t)((-1048560 - v50 + (v50 << 16)) >> 5)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-1048560 - v52 + (v52 << 16)) >> 5)) >> 32;
        __int16 v49 = (int16x4_t *)(v17 + 2);
      }
      if (v30)
      {
        uint64_t v53 = -(uint64_t)v30;
        do
        {
          __int16 v54 = v48 + 2;
          v55.i32[0] = *v48;
          v55.i32[1] = v48[1];
          int32x4_t v56 = (int32x4_t)vshrq_n_u64(vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v46, (int32x2_t)vmax_u32(vmin_u32(v55, (uint32x2_t)0xF0000000F0), (uint32x2_t)0x1000000010), (int32x2_t)0xFFFF0000FFFFLL), 5uLL), v47), 0x20uLL);
          *v49++ = vmovn_s32(vuzp1q_s32(v56, v56));
          v48 += 2;
          BOOL v37 = __CFADD__(v53++, 1);
        }
        while (!v37);
      }
      else
      {
        __int16 v54 = v48;
      }
      if ((v31 | (2 * v30)) < v18)
      {
        unsigned int v57 = *v54;
        unsigned int v58 = v54[1];
        if (v57 >= 0xF0) {
          unsigned int v57 = 240;
        }
        if (v57 <= 0x10) {
          unsigned int v57 = 16;
        }
        if (v58 >= 0xF0) {
          unsigned int v58 = 240;
        }
        if (v58 <= 0x10) {
          unsigned int v58 = 16;
        }
        v49->i16[0] = (613566757 * (unint64_t)((-1048560 - v57 + (v57 << 16)) >> 5)) >> 32;
        v49->i16[1] = (613566757 * (unint64_t)((-1048560 - v58 + (v58 << 16)) >> 5)) >> 32;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v27 < v19)
  {
    if (v29)
    {
      unsigned int v59 = *v13;
      unsigned int v60 = v13[1];
      if (v59 >= 0xF0) {
        unsigned int v59 = 240;
      }
      if (v59 <= 0x10) {
        unsigned int v59 = 16;
      }
      if (v60 >= 0xF0) {
        unsigned int v60 = 240;
      }
      if (v60 <= 0x10) {
        unsigned int v60 = 16;
      }
      v13 += 2;
      *uint64_t v17 = (613566757 * (unint64_t)((-1048560 - v59 + (v59 << 16)) >> 5)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32;
      v17 += 2;
    }
    if (v30)
    {
      uint64_t v61 = -(uint64_t)v30;
      do
      {
        unsigned int v62 = *v13;
        unsigned int v63 = v13[1];
        if (v62 >= 0xF0) {
          unsigned int v62 = 240;
        }
        if (v62 <= 0x10) {
          unsigned int v62 = 16;
        }
        if (v63 >= 0xF0) {
          unsigned int v63 = 240;
        }
        if (v63 <= 0x10) {
          unsigned int v63 = 16;
        }
        v13 += 2;
        *uint64_t v17 = (613566757 * (unint64_t)((-1048560 - v62 + (v62 << 16)) >> 5)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-1048560 - v63 + (v63 << 16)) >> 5)) >> 32;
        v17 += 2;
        BOOL v37 = __CFADD__(v61++, 1);
      }
      while (!v37);
      v30 *= 2;
    }
    if ((v30 | v31) < v18)
    {
      unsigned int v64 = *v13;
      unsigned int v65 = v13[1];
      if (v64 >= 0xF0) {
        unsigned int v64 = 240;
      }
      if (v64 <= 0x10) {
        unsigned int v64 = 16;
      }
      if (v65 >= 0xF0) {
        unsigned int v65 = 240;
      }
      if (v65 <= 0x10) {
        unsigned int v65 = 16;
      }
      *uint64_t v17 = (613566757 * (unint64_t)((-1048560 - v64 + (v64 << 16)) >> 5)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1048560 - v65 + (v65 << 16)) >> 5)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_v2a8_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  unint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v20) {
    unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - v11;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a8;
    uint64_t v23 = a8[2];
    uint64_t v24 = a7[2] + v23 * v16;
    uint64_t v25 = *a7 + *a8 * v16;
    uint64_t v26 = *a4;
    uint64_t v27 = a4[2];
    uint64_t v28 = v24 + v17;
    uint64_t v29 = v25 + v17;
    uint64_t v30 = a3[2] + v27 * v12 + v11;
    uint64_t v31 = *a3 + v26 * v12 + v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v30 + i) | (*(unsigned __int8 *)(v30 + i) << 8);
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v29 += v22;
      v30 += v27;
      v28 += v23;
      ++v21;
    }
    while (v21 != v8);
  }
  unint64_t v33 = v12 & 1;
  if (v8 >= v33) {
    uint64_t v34 = v12 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  char v35 = v9;
  unint64_t v36 = v20 >> 1;
  unint64_t v37 = (v20 - v10) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v12)
  {
    if (v35)
    {
      uint64_t v38 = v14 + 2;
      __int16 v40 = v14[1] << 8;
      *unint64_t v19 = *v14 << 8;
      v19[1] = v40;
      unsigned int v39 = v19 + 2;
      if (!v36)
      {
LABEL_24:
        v14 += v13;
        unint64_t v19 = (_WORD *)((char *)v19 + v18);
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v38 = v14;
      unsigned int v39 = v19;
      if (!v36) {
        goto LABEL_24;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      __int16 v42 = v38[1] << 8;
      _WORD *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_24;
  }
LABEL_25:
  if (v8 == v34)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v34;
    do
    {
      int32x2_t v46 = v14;
      uint32x2_t v47 = v19;
      if (v35)
      {
        int32x2_t v46 = v14 + 2;
        __int16 v48 = v14[1] << 8;
        *unint64_t v19 = *v14 << 8;
        v19[1] = v48;
        uint32x2_t v47 = v19 + 2;
      }
      if (v36)
      {
        uint64_t v49 = -(uint64_t)v36;
        do
        {
          __int16 v50 = v46[1] << 8;
          *uint32x2_t v47 = *v46 << 8;
          v47[1] = v50;
          v46 += 2;
          v47 += 2;
          BOOL v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      unint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if (v35)
    {
      __int16 v51 = *v14;
      __int16 v52 = v14[1];
      v14 += 2;
      *unint64_t v19 = v51 << 8;
      v19[1] = v52 << 8;
      v19 += 2;
    }
    if (v36)
    {
      uint64_t v53 = -(uint64_t)v36;
      do
      {
        __int16 v54 = v14[1] << 8;
        *unint64_t v19 = *v14 << 8;
        v19[1] = v54;
        v14 += 2;
        v19 += 2;
        BOOL v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v29 + i) << 8;
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v24 >> 1;
  unint64_t v35 = (v24 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      unint64_t v36 = v14 + 2;
      __int16 v38 = v14[1] << 8;
      *uint64_t v21 = *v14 << 8;
      v21[1] = v38;
      unint64_t v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v36 = v14;
      unint64_t v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      __int16 v40 = v36[1] << 8;
      *unint64_t v37 = *v36 << 8;
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      unint64_t v44 = v14;
      uint64_t v45 = v21;
      if (v33)
      {
        unint64_t v44 = v14 + 2;
        __int16 v46 = v14[1] << 8;
        *uint64_t v21 = *v14 << 8;
        v21[1] = v46;
        uint64_t v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          __int16 v48 = v44[1] << 8;
          _WORD *v45 = *v44 << 8;
          v45[1] = v48;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      __int16 v49 = *v14;
      __int16 v50 = v14[1];
      v14 += 2;
      *uint64_t v21 = v49 << 8;
      v21[1] = v50 << 8;
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        __int16 v52 = v14[1] << 8;
        *uint64_t v21 = *v14 << 8;
        v21[1] = v52;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v31 = *(unsigned __int8 *)(v29 + i);
          if (v31 >= 0xEB) {
            unsigned int v31 = 235;
          }
          if (v31 <= 0x10) {
            unsigned int v31 = 16;
          }
          *(_WORD *)(v28 + 2 * i) = (-1048560 - v31 + (v31 << 16)) / 0xDB;
        }
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  unint64_t v35 = v24 >> 1;
  if (v24 >> 1 >= (v24 - v10) >> 1) {
    unint64_t v35 = (v24 - v10) >> 1;
  }
  if (v12)
  {
    if (v34)
    {
      unsigned int v38 = *v14;
      if (v38 >= 0xF0) {
        unsigned int v38 = 240;
      }
      if (v38 <= 0x10) {
        int v39 = 16;
      }
      else {
        int v39 = v38;
      }
      if (v14[1] >= 0xF0u) {
        unsigned int v40 = 240;
      }
      else {
        unsigned int v40 = v14[1];
      }
      if (v40 <= 0x10) {
        int v41 = 16;
      }
      else {
        int v41 = v40;
      }
      unint64_t v36 = v14 + 2;
      *uint64_t v21 = (613566757 * (unint64_t)((-1048560 - v39 + (v39 << 16)) >> 5)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-1048560 - v41 + (v41 << 16)) >> 5)) >> 32;
      unint64_t v37 = v21 + 2;
      if (!v35) {
        goto LABEL_48;
      }
    }
    else
    {
      unint64_t v36 = v14;
      unint64_t v37 = v21;
      if (!v35)
      {
LABEL_48:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_49;
      }
    }
    uint64_t v42 = -(uint64_t)v35;
    do
    {
      unsigned int v43 = *v36;
      unsigned int v44 = v36[1];
      if (v43 >= 0xF0) {
        unsigned int v43 = 240;
      }
      if (v43 <= 0x10) {
        unsigned int v43 = 16;
      }
      if (v44 >= 0xF0) {
        unsigned int v44 = 240;
      }
      if (v44 <= 0x10) {
        unsigned int v44 = 16;
      }
      *unint64_t v37 = (613566757 * (unint64_t)((-1048560 - v43 + (v43 << 16)) >> 5)) >> 32;
      v37[1] = (613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32;
      v36 += 2;
      v37 += 2;
      BOOL v45 = __CFADD__(v42++, 1);
    }
    while (!v45);
    goto LABEL_48;
  }
LABEL_49:
  if (v8 == v33)
  {
    unint64_t v46 = 0;
  }
  else
  {
    uint64_t v47 = 0;
    unint64_t v46 = v8 - v33;
    do
    {
      __int16 v48 = v14;
      __int16 v49 = v21;
      if (v34)
      {
        unsigned int v50 = *v14;
        if (v50 >= 0xF0) {
          unsigned int v50 = 240;
        }
        if (v50 <= 0x10) {
          int v51 = 16;
        }
        else {
          int v51 = v50;
        }
        if (v14[1] >= 0xF0u) {
          unsigned int v52 = 240;
        }
        else {
          unsigned int v52 = v14[1];
        }
        if (v52 <= 0x10) {
          int v53 = 16;
        }
        else {
          int v53 = v52;
        }
        __int16 v48 = v14 + 2;
        *uint64_t v21 = (613566757 * (unint64_t)((-1048560 - v51 + (v51 << 16)) >> 5)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-1048560 - v53 + (v53 << 16)) >> 5)) >> 32;
        __int16 v49 = v21 + 2;
      }
      if (v35)
      {
        uint64_t v54 = -(uint64_t)v35;
        do
        {
          unsigned int v55 = *v48;
          unsigned int v56 = v48[1];
          if (v55 >= 0xF0) {
            unsigned int v55 = 240;
          }
          if (v55 <= 0x10) {
            unsigned int v55 = 16;
          }
          if (v56 >= 0xF0) {
            unsigned int v56 = 240;
          }
          if (v56 <= 0x10) {
            unsigned int v56 = 16;
          }
          *__int16 v49 = (613566757 * (unint64_t)((-1048560 - v55 + (v55 << 16)) >> 5)) >> 32;
          v49[1] = (613566757 * (unint64_t)((-1048560 - v56 + (v56 << 16)) >> 5)) >> 32;
          v48 += 2;
          v49 += 2;
          BOOL v45 = __CFADD__(v54++, 1);
        }
        while (!v45);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v47;
    }
    while (v47 != v46);
  }
  if (v46 + v32 < v8)
  {
    if (v34)
    {
      unsigned int v57 = *v14;
      unsigned int v58 = v14[1];
      if (v57 >= 0xF0) {
        unsigned int v57 = 240;
      }
      if (v57 <= 0x10) {
        unsigned int v57 = 16;
      }
      if (v58 >= 0xF0) {
        unsigned int v58 = 240;
      }
      if (v58 <= 0x10) {
        unsigned int v58 = 16;
      }
      v14 += 2;
      *uint64_t v21 = (613566757 * (unint64_t)((-1048560 - v57 + (v57 << 16)) >> 5)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-1048560 - v58 + (v58 << 16)) >> 5)) >> 32;
      v21 += 2;
    }
    if (v35)
    {
      uint64_t v59 = -(uint64_t)v35;
      do
      {
        unsigned int v60 = *v14;
        unsigned int v61 = v14[1];
        if (v60 >= 0xF0) {
          unsigned int v60 = 240;
        }
        if (v60 <= 0x10) {
          unsigned int v60 = 16;
        }
        if (v61 >= 0xF0) {
          unsigned int v61 = 240;
        }
        if (v61 <= 0x10) {
          unsigned int v61 = 16;
        }
        *uint64_t v21 = (613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-1048560 - v61 + (v61 << 16)) >> 5)) >> 32;
        v14 += 2;
        v21 += 2;
        BOOL v45 = __CFADD__(v59++, 1);
      }
      while (!v45);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    uint64_t v32 = v30 + v10 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v38 = v16 + 2;
      __int16 v40 = (v16[v15 + 1] + (unsigned __int16)v16[1]) << 7;
      *unint64_t v23 = (v16[v15] + (unsigned __int16)*v16) << 7;
      v23[1] = v40;
      int v39 = v23 + 2;
      if (!v37)
      {
LABEL_28:
        v16 += 2 * v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v38 = v16;
      int v39 = v23;
      if (!v37) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      __int16 v42 = *v38;
      __int16 v43 = v38[1];
      __int16 v44 = v38[v15];
      __int16 v45 = v38[v15 + 1];
      v38 += 2;
      _WORD *v39 = (v44 + v42) << 7;
      v39[1] = (v45 + v43) << 7;
      v39 += 2;
      BOOL v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      __int16 v49 = v16;
      unsigned int v50 = v23;
      if (v9)
      {
        __int16 v49 = v16 + 2;
        __int16 v51 = (v16[v15 + 1] + (unsigned __int16)v16[1]) << 7;
        *unint64_t v23 = (v16[v15] + (unsigned __int16)*v16) << 7;
        v23[1] = v51;
        unsigned int v50 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v52 = -(uint64_t)v37;
        do
        {
          __int16 v53 = *v49;
          __int16 v54 = v49[1];
          __int16 v55 = v49[v15];
          __int16 v56 = v49[v15 + 1];
          v49 += 2;
          *unsigned int v50 = (v55 + v53) << 7;
          v50[1] = (v56 + v54) << 7;
          v50 += 2;
          BOOL v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += 2 * v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    uint64_t v32 = v30 + v10 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v38 = v16 + 2;
      __int16 v40 = v16[1] << 8;
      *unint64_t v23 = *v16 << 8;
      v23[1] = v40;
      int v39 = v23 + 2;
      if (!v37)
      {
LABEL_28:
        v16 += 2 * v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v38 = v16;
      int v39 = v23;
      if (!v37) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      __int16 v42 = v38[1] << 8;
      _WORD *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v26 != v35)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v35;
    uint64_t v46 = 2 * v15;
    do
    {
      unint64_t v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        unint64_t v47 = v16 + 2;
        __int16 v49 = v16[1] << 8;
        *unint64_t v23 = *v16 << 8;
        v23[1] = v49;
        unint64_t v48 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v50 = -(uint64_t)v37;
        do
        {
          __int16 v51 = v47[1] << 8;
          _WORD *v48 = *v47 << 8;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          BOOL v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      v16 += v46;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    uint64_t v32 = v30 + v10 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          unsigned int v35 = *(unsigned __int8 *)(v32 + i);
          if (v35 >= 0xEB) {
            unsigned int v35 = 235;
          }
          if (v35 <= 0x10) {
            unsigned int v35 = 16;
          }
          *(_WORD *)(v33 + 2 * i) = (-1048560 - v35 + (v35 << 16)) / 0xDB;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v25 - (v8 & 1);
  if (v25 >> 1 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v25 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      unsigned int v41 = *v16;
      if (v41 >= 0xF0) {
        unsigned int v41 = 240;
      }
      if (v41 <= 0x10) {
        int v42 = 16;
      }
      else {
        int v42 = v41;
      }
      if (v16[1] >= 0xF0u) {
        unsigned int v43 = 240;
      }
      else {
        unsigned int v43 = v16[1];
      }
      if (v43 <= 0x10) {
        int v44 = 16;
      }
      else {
        int v44 = v43;
      }
      if (v16[v15] >= 0xF0u) {
        unsigned int v45 = 240;
      }
      else {
        unsigned int v45 = v16[v15];
      }
      if (v45 <= 0x10) {
        int v46 = 16;
      }
      else {
        int v46 = v45;
      }
      if (v16[v15 + 1] >= 0xF0u) {
        unsigned int v47 = 240;
      }
      else {
        unsigned int v47 = v16[v15 + 1];
      }
      if (v47 <= 0x10) {
        int v48 = 16;
      }
      else {
        int v48 = v47;
      }
      int v39 = v16 + 2;
      *unint64_t v23 = (((613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32)
                          + ((613566757 * (unint64_t)((-1048560 - v46 + (v46 << 16)) >> 5)) >> 32)
                          + 1) >> 1;
      v23[1] = (((613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v48 + (v48 << 16)) >> 5)) >> 32)
                            + 1) >> 1;
      __int16 v40 = v23 + 2;
      if (!v38) {
        goto LABEL_71;
      }
    }
    else
    {
      int v39 = v16;
      __int16 v40 = v23;
      if (!v38)
      {
LABEL_71:
        v16 += 2 * v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_72;
      }
    }
    uint64_t v49 = -(uint64_t)v38;
    do
    {
      unsigned int v50 = *v39;
      unsigned int v51 = v39[1];
      unsigned int v52 = v39[v15];
      unsigned int v53 = v39[v15 + 1];
      if (v50 >= 0xF0) {
        unsigned int v50 = 240;
      }
      if (v50 <= 0x10) {
        unsigned int v50 = 16;
      }
      if (v51 >= 0xF0) {
        unsigned int v51 = 240;
      }
      if (v51 <= 0x10) {
        unsigned int v51 = 16;
      }
      if (v52 >= 0xF0) {
        unsigned int v52 = 240;
      }
      if (v52 <= 0x10) {
        unsigned int v52 = 16;
      }
      if (v53 >= 0xF0) {
        unsigned int v53 = 240;
      }
      if (v53 <= 0x10) {
        unsigned int v53 = 16;
      }
      v39 += 2;
      *__int16 v40 = (((613566757 * (unint64_t)((-1048560 - v50 + (v50 << 16)) >> 5)) >> 32)
                          + ((613566757 * (unint64_t)((-1048560 - v52 + (v52 << 16)) >> 5)) >> 32)
                          + 1) >> 1;
      v40[1] = (((613566757 * (unint64_t)((-1048560 - v51 + (v51 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v53 + (v53 << 16)) >> 5)) >> 32)
                            + 1) >> 1;
      v40 += 2;
      BOOL v54 = __CFADD__(v49++, 1);
    }
    while (!v54);
    goto LABEL_71;
  }
LABEL_72:
  if (v26 != v36)
  {
    unint64_t v55 = 0;
    unint64_t v56 = v26 - v36;
    do
    {
      unsigned int v57 = v16;
      unsigned int v58 = v23;
      if (v8)
      {
        unsigned int v59 = *v16;
        if (v59 >= 0xF0) {
          unsigned int v59 = 240;
        }
        if (v59 <= 0x10) {
          int v60 = 16;
        }
        else {
          int v60 = v59;
        }
        if (v16[1] >= 0xF0u) {
          unsigned int v61 = 240;
        }
        else {
          unsigned int v61 = v16[1];
        }
        if (v61 <= 0x10) {
          int v62 = 16;
        }
        else {
          int v62 = v61;
        }
        if (v16[v15] >= 0xF0u) {
          unsigned int v63 = 240;
        }
        else {
          unsigned int v63 = v16[v15];
        }
        if (v63 <= 0x10) {
          int v64 = 16;
        }
        else {
          int v64 = v63;
        }
        if (v16[v15 + 1] >= 0xF0u) {
          unsigned int v65 = 240;
        }
        else {
          unsigned int v65 = v16[v15 + 1];
        }
        if (v65 <= 0x10) {
          int v66 = 16;
        }
        else {
          int v66 = v65;
        }
        unsigned int v57 = v16 + 2;
        *unint64_t v23 = (((613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v64 + (v64 << 16)) >> 5)) >> 32)
                            + 1) >> 1;
        v23[1] = (((613566757 * (unint64_t)((-1048560 - v62 + (v62 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v66 + (v66 << 16)) >> 5)) >> 32)
                              + 1) >> 1;
        unsigned int v58 = v23 + 2;
      }
      if (v38)
      {
        uint64_t v67 = -(uint64_t)v38;
        do
        {
          unsigned int v68 = *v57;
          unsigned int v69 = v57[1];
          unsigned int v70 = v57[v15];
          unsigned int v71 = v57[v15 + 1];
          if (v68 >= 0xF0) {
            unsigned int v68 = 240;
          }
          if (v68 <= 0x10) {
            unsigned int v68 = 16;
          }
          if (v69 >= 0xF0) {
            unsigned int v69 = 240;
          }
          if (v69 <= 0x10) {
            unsigned int v69 = 16;
          }
          if (v70 >= 0xF0) {
            unsigned int v70 = 240;
          }
          if (v70 <= 0x10) {
            unsigned int v70 = 16;
          }
          if (v71 >= 0xF0) {
            unsigned int v71 = 240;
          }
          if (v71 <= 0x10) {
            unsigned int v71 = 16;
          }
          v57 += 2;
          *unsigned int v58 = (((613566757 * (unint64_t)((-1048560 - v68 + (v68 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v70 + (v70 << 16)) >> 5)) >> 32)
                              + 1) >> 1;
          v58[1] = (((613566757 * (unint64_t)((-1048560 - v69 + (v69 << 16)) >> 5)) >> 32)
                                + ((613566757 * (unint64_t)((-1048560 - v71 + (v71 << 16)) >> 5)) >> 32)
                                + 1) >> 1;
          v58 += 2;
          BOOL v54 = __CFADD__(v67++, 1);
        }
        while (!v54);
      }
      v16 += 2 * v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v55 += 2;
    }
    while (v55 < v56);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    uint64_t v32 = v30 + v10 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          unsigned int v35 = *(unsigned __int8 *)(v32 + i);
          if (v35 >= 0xEB) {
            unsigned int v35 = 235;
          }
          if (v35 <= 0x10) {
            unsigned int v35 = 16;
          }
          *(_WORD *)(v33 + 2 * i) = (-1048560 - v35 + (v35 << 16)) / 0xDB;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v25 - (v8 & 1);
  if (v25 >> 1 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v25 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      unsigned int v41 = *v16;
      if (v41 >= 0xF0) {
        unsigned int v41 = 240;
      }
      if (v41 <= 0x10) {
        int v42 = 16;
      }
      else {
        int v42 = v41;
      }
      if (v16[1] >= 0xF0u) {
        unsigned int v43 = 240;
      }
      else {
        unsigned int v43 = v16[1];
      }
      if (v43 <= 0x10) {
        int v44 = 16;
      }
      else {
        int v44 = v43;
      }
      int v39 = v16 + 2;
      *unint64_t v23 = (613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32;
      v23[1] = (613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32;
      __int16 v40 = v23 + 2;
      if (!v38) {
        goto LABEL_51;
      }
    }
    else
    {
      int v39 = v16;
      __int16 v40 = v23;
      if (!v38)
      {
LABEL_51:
        v16 += 2 * v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_52;
      }
    }
    uint64_t v45 = -(uint64_t)v38;
    do
    {
      unsigned int v46 = *v39;
      unsigned int v47 = v39[1];
      if (v46 >= 0xF0) {
        unsigned int v46 = 240;
      }
      if (v46 <= 0x10) {
        unsigned int v46 = 16;
      }
      if (v47 >= 0xF0) {
        unsigned int v47 = 240;
      }
      if (v47 <= 0x10) {
        unsigned int v47 = 16;
      }
      *__int16 v40 = (613566757 * (unint64_t)((-1048560 - v46 + (v46 << 16)) >> 5)) >> 32;
      v40[1] = (613566757 * (unint64_t)((-1048560 - v47 + (v47 << 16)) >> 5)) >> 32;
      v39 += 2;
      v40 += 2;
      BOOL v48 = __CFADD__(v45++, 1);
    }
    while (!v48);
    goto LABEL_51;
  }
LABEL_52:
  if (v26 != v36)
  {
    unint64_t v49 = 0;
    unint64_t v50 = v26 - v36;
    uint64_t v51 = 2 * v15;
    do
    {
      unsigned int v52 = v16;
      unsigned int v53 = v23;
      if (v8)
      {
        unsigned int v54 = *v16;
        if (v54 >= 0xF0) {
          unsigned int v54 = 240;
        }
        if (v54 <= 0x10) {
          int v55 = 16;
        }
        else {
          int v55 = v54;
        }
        if (v16[1] >= 0xF0u) {
          unsigned int v56 = 240;
        }
        else {
          unsigned int v56 = v16[1];
        }
        if (v56 <= 0x10) {
          int v57 = 16;
        }
        else {
          int v57 = v56;
        }
        unsigned int v52 = v16 + 2;
        *unint64_t v23 = (613566757 * (unint64_t)((-1048560 - v55 + (v55 << 16)) >> 5)) >> 32;
        v23[1] = (613566757 * (unint64_t)((-1048560 - v57 + (v57 << 16)) >> 5)) >> 32;
        unsigned int v53 = v23 + 2;
      }
      if (v38)
      {
        uint64_t v58 = -(uint64_t)v38;
        do
        {
          unsigned int v59 = *v52;
          unsigned int v60 = v52[1];
          if (v59 >= 0xF0) {
            unsigned int v59 = 240;
          }
          if (v59 <= 0x10) {
            unsigned int v59 = 16;
          }
          if (v60 >= 0xF0) {
            unsigned int v60 = 240;
          }
          if (v60 <= 0x10) {
            unsigned int v60 = 16;
          }
          *unsigned int v53 = (613566757 * (unint64_t)((-1048560 - v59 + (v59 << 16)) >> 5)) >> 32;
          v53[1] = (613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32;
          v52 += 2;
          v53 += 2;
          BOOL v48 = __CFADD__(v58++, 1);
        }
        while (!v48);
      }
      v16 += v51;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_Copy_v2a8_t4as(int32x2_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, uint64_t a6, void *a7, void *a8, uint64_t *a9)
{
  uint64_t v10 = a3[4];
  uint64_t v9 = a3[5];
  uint64_t v11 = v10 & 0xFFFFFFFE;
  unint64_t v12 = a3[3];
  uint64_t v13 = a3[2] + v10;
  uint64_t v14 = a5[1];
  uint64_t v15 = (unsigned __int8 *)(a4[1] + v14 * v9 + v11);
  uint64_t v17 = a7[4];
  uint64_t v16 = a7[5];
  uint64_t v18 = a9[1];
  uint64_t v19 = (_WORD *)(a8[1] + v18 * v16 + 4 * v17);
  unint64_t v20 = v13 - v11 + (v13 & 1);
  if (v20 >= a7[2]) {
    unint64_t v20 = a7[2];
  }
  if (v12 >= a7[3]) {
    unint64_t v12 = a7[3];
  }
  if (v12)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a9;
    uint64_t v23 = a9[2];
    uint64_t v24 = a8[2] + v23 * v16;
    uint64_t v25 = *a8 + *a9 * v16;
    uint64_t v26 = *a5;
    uint64_t v27 = a5[2];
    uint64_t v28 = v24 + 2 * v17;
    uint64_t v29 = v25 + 2 * v17;
    uint64_t v30 = a4[2] + v27 * v9 + v11;
    uint64_t v31 = *a4 + v26 * v9 + v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v30 + i) | (*(unsigned __int8 *)(v30 + i) << 8);
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v29 += v22;
      v30 += v27;
      v28 += v23;
      ++v21;
    }
    while (v21 != v12);
  }
  unint64_t v33 = v9 & 1;
  if (v12 >= v33) {
    uint64_t v34 = v9 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  char v35 = v10;
  unint64_t v36 = v20 >> 1;
  uint64_t v37 = v10 & 1;
  if (v20 >> 1 >= (v20 - v37) >> 1) {
    unint64_t v36 = (v20 - v37) >> 1;
  }
  if (v9)
  {
    if (v35)
    {
      unint64_t v38 = v15 + 2;
      __int16 v45 = v15[1] << 8;
      *uint64_t v19 = *v15 << 8;
      v19[1] = v45;
      int v39 = v19 + 2;
      if (v36)
      {
LABEL_19:
        uint64_t v40 = -(uint64_t)v36;
        do
        {
          __int16 v41 = *v38;
          __int16 v42 = v38[1];
          v38 += 2;
          _WORD *v39 = v41 << 8;
          v39[1] = v42 << 8;
          v39 += 2;
          BOOL v43 = __CFADD__(v40++, 1);
        }
        while (!v43);
        uint64_t v44 = 2 * v36;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v38 = v15;
      int v39 = v19;
      if (v36) {
        goto LABEL_19;
      }
    }
    uint64_t v44 = 0;
LABEL_25:
    if ((v44 | (unint64_t)v37) < v20)
    {
      __int16 v46 = *v38 << 8;
      __int16 v47 = v38[1] << 8;
      _WORD *v39 = v46;
      v39[1] = v47;
    }
    v15 += v14;
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v12 == v34)
  {
    unint64_t v48 = 0;
  }
  else
  {
    uint64_t v49 = 0;
    unint64_t v48 = v12 - v34;
    do
    {
      unint64_t v50 = v15;
      uint64_t v51 = (double *)v19;
      if (v35)
      {
        unint64_t v50 = v15 + 2;
        __int16 v52 = v15[1] << 8;
        *uint64_t v19 = *v15 << 8;
        v19[1] = v52;
        uint64_t v51 = (double *)(v19 + 2);
      }
      if (v36)
      {
        uint64_t v53 = -(uint64_t)v36;
        do
        {
          unsigned int v54 = v50 + 2;
          a1.i8[0] = *v50;
          a1.i8[4] = v50[1];
          int16x4_t v55 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v55, v55);
          *v51++ = *(double *)&a1;
          v50 += 2;
          BOOL v43 = __CFADD__(v53++, 1);
        }
        while (!v43);
      }
      else
      {
        unsigned int v54 = v50;
      }
      if ((v37 | (2 * v36)) < v20)
      {
        __int16 v56 = *v54 << 8;
        __int16 v57 = v54[1] << 8;
        *(_WORD *)uint64_t v51 = v56;
        *((_WORD *)v51 + 1) = v57;
      }
      v15 += v14;
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v49;
    }
    while (v49 != v48);
  }
  if (v48 + v33 < v12)
  {
    if (v35)
    {
      __int16 v58 = *v15;
      __int16 v59 = v15[1];
      v15 += 2;
      *uint64_t v19 = v58 << 8;
      v19[1] = v59 << 8;
      v19 += 2;
    }
    if (v36)
    {
      uint64_t v60 = -(uint64_t)v36;
      do
      {
        __int16 v61 = *v15;
        __int16 v62 = v15[1];
        v15 += 2;
        *uint64_t v19 = v61 << 8;
        v19[1] = v62 << 8;
        v19 += 2;
        BOOL v43 = __CFADD__(v60++, 1);
      }
      while (!v43);
      uint64_t v63 = 2 * v36;
    }
    else
    {
      uint64_t v63 = 0;
    }
    if ((v63 | (unint64_t)v37) < v20)
    {
      __int16 v64 = *v15 << 8;
      __int16 v65 = v15[1] << 8;
      *uint64_t v19 = v64;
      v19[1] = v65;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_tv44(int32x2_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, uint64_t a6, void *a7, void *a8, uint64_t *a9)
{
  uint64_t v10 = a3[4];
  uint64_t v9 = a3[5];
  unint64_t v11 = a3[3];
  uint64_t v12 = a3[2] + v10;
  uint64_t v13 = a5[1];
  uint64_t v14 = (unsigned __int8 *)(a4[1] + v13 * v9 + (v10 & 0xFFFFFFFE));
  uint64_t v15 = a7[4];
  uint64_t v16 = a7[5];
  uint64_t v17 = a9[1];
  uint64_t v18 = (_WORD *)(a8[1] + v17 * v16 + 4 * v15);
  unint64_t v19 = v12 - (v10 & 0xFFFFFFFE) + (v12 & 1);
  if (v19 >= a7[2]) {
    unint64_t v19 = a7[2];
  }
  if (v11 >= a7[3]) {
    unint64_t v11 = a7[3];
  }
  if (v11)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a5;
    uint64_t v22 = *a9;
    uint64_t v23 = *a8 + *a9 * v16 + 2 * v15;
    uint64_t v24 = *a4 + *a5 * v9 + (v10 & 0xFFFFFFFE);
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
          *(_WORD *)(v23 + 2 * i) = *(unsigned __int8 *)(v24 + i) << 8;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v11);
  }
  unint64_t v26 = v9 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v9 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v10;
  unint64_t v29 = v19 >> 1;
  uint64_t v30 = v10 & 1;
  if (v19 >> 1 >= (v19 - v30) >> 1) {
    unint64_t v29 = (v19 - v30) >> 1;
  }
  if (v9)
  {
    if (v28)
    {
      uint64_t v31 = v14 + 2;
      __int16 v38 = v14[1] << 8;
      _WORD *v18 = *v14 << 8;
      v18[1] = v38;
      uint64_t v32 = v18 + 2;
      if (v29)
      {
LABEL_19:
        uint64_t v33 = -(uint64_t)v29;
        do
        {
          __int16 v34 = *v31;
          __int16 v35 = v31[1];
          v31 += 2;
          _WORD *v32 = v34 << 8;
          v32[1] = v35 << 8;
          v32 += 2;
          BOOL v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        uint64_t v37 = 2 * v29;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v31 = v14;
      uint64_t v32 = v18;
      if (v29) {
        goto LABEL_19;
      }
    }
    uint64_t v37 = 0;
LABEL_25:
    if ((v37 | (unint64_t)v30) < v19)
    {
      __int16 v39 = *v31 << 8;
      __int16 v40 = v31[1] << 8;
      _WORD *v32 = v39;
      v32[1] = v40;
    }
    v14 += v13;
    uint64_t v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v11 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v11 - v27;
    do
    {
      BOOL v43 = v14;
      uint64_t v44 = (double *)v18;
      if (v28)
      {
        BOOL v43 = v14 + 2;
        __int16 v45 = v14[1] << 8;
        _WORD *v18 = *v14 << 8;
        v18[1] = v45;
        uint64_t v44 = (double *)(v18 + 2);
      }
      if (v29)
      {
        uint64_t v46 = -(uint64_t)v29;
        do
        {
          __int16 v47 = v43 + 2;
          a1.i8[0] = *v43;
          a1.i8[4] = v43[1];
          int16x4_t v48 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v48, v48);
          *v44++ = *(double *)&a1;
          v43 += 2;
          BOOL v36 = __CFADD__(v46++, 1);
        }
        while (!v36);
      }
      else
      {
        __int16 v47 = v43;
      }
      if ((v30 | (2 * v29)) < v19)
      {
        __int16 v49 = *v47 << 8;
        __int16 v50 = v47[1] << 8;
        *(_WORD *)uint64_t v44 = v49;
        *((_WORD *)v44 + 1) = v50;
      }
      v14 += v13;
      uint64_t v18 = (_WORD *)((char *)v18 + v17);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if (v28)
    {
      __int16 v51 = *v14;
      __int16 v52 = v14[1];
      v14 += 2;
      _WORD *v18 = v51 << 8;
      v18[1] = v52 << 8;
      v18 += 2;
    }
    if (v29)
    {
      uint64_t v53 = -(uint64_t)v29;
      do
      {
        __int16 v54 = *v14;
        __int16 v55 = v14[1];
        v14 += 2;
        _WORD *v18 = v54 << 8;
        v18[1] = v55 << 8;
        v18 += 2;
        BOOL v36 = __CFADD__(v53++, 1);
      }
      while (!v36);
      uint64_t v56 = 2 * v29;
    }
    else
    {
      uint64_t v56 = 0;
    }
    if ((v56 | (unint64_t)v30) < v19)
    {
      __int16 v57 = *v14 << 8;
      __int16 v58 = v14[1] << 8;
      _WORD *v18 = v57;
      v18[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  unint64_t v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2]) {
    unint64_t v18 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v19 = a6[3];
  }
  else {
    unint64_t v19 = v10;
  }
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          unsigned int v26 = *(unsigned __int8 *)(v24 + i);
          if (v26 >= 0xEB) {
            unsigned int v26 = 235;
          }
          if (v26 <= 0x10) {
            unsigned int v26 = 16;
          }
          *(_WORD *)(v23 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v26 - 65520)) >> 32)
                                                  + ((4095 * v26
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v26 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
  }
  if (v19 >= (v8 & 1u)) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v18 >> 1;
  uint64_t v30 = v9 & 1;
  if (v18 >> 1 >= (v18 - v30) >> 1) {
    unint64_t v29 = (v18 - v30) >> 1;
  }
  if (v8)
  {
    if (v28)
    {
      unsigned int v38 = *v13;
      unsigned int v39 = v13[1];
      if (v38 >= 0xF0) {
        unsigned int v38 = 240;
      }
      if (v38 <= 0x10) {
        unsigned int v38 = 16;
      }
      if (v39 >= 0xF0) {
        unsigned int v39 = 240;
      }
      if (v39 <= 0x10) {
        int v40 = 16;
      }
      else {
        int v40 = v39;
      }
      uint64_t v31 = v13 + 2;
      *uint64_t v17 = 16 * ((613566757 * (unint64_t)((4095 * v38 - 65520) >> 5)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v40 - 65520) >> 5)) >> 32);
      uint64_t v32 = v17 + 2;
      if (v29) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v31 = v13;
      uint64_t v32 = v17;
      if (v29)
      {
LABEL_24:
        uint64_t v33 = -(uint64_t)v29;
        do
        {
          unsigned int v34 = *v31;
          unsigned int v35 = v31[1];
          if (v34 >= 0xF0) {
            unsigned int v34 = 240;
          }
          if (v34 <= 0x10) {
            unsigned int v34 = 16;
          }
          if (v35 >= 0xF0) {
            unsigned int v35 = 240;
          }
          if (v35 <= 0x10) {
            unsigned int v35 = 16;
          }
          v31 += 2;
          _WORD *v32 = 16 * ((613566757 * (unint64_t)((4095 * v34 - 65520) >> 5)) >> 32);
          v32[1] = 16 * ((613566757 * (unint64_t)((4095 * v35 - 65520) >> 5)) >> 32);
          v32 += 2;
          BOOL v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        uint64_t v37 = 2 * v29;
        goto LABEL_47;
      }
    }
    uint64_t v37 = 0;
LABEL_47:
    if ((v37 | (unint64_t)v30) < v18)
    {
      unsigned int v41 = *v31;
      unsigned int v42 = v31[1];
      if (v41 >= 0xF0) {
        unsigned int v41 = 240;
      }
      if (v41 <= 0x10) {
        unsigned int v41 = 16;
      }
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        unsigned int v42 = 16;
      }
      _WORD *v32 = 16 * ((613566757 * (unint64_t)((4095 * v41 - 65520) >> 5)) >> 32);
      v32[1] = 16 * ((613566757 * (unint64_t)((4095 * v42 - 65520) >> 5)) >> 32);
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v27)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v19 - v27;
    int32x2_t v45 = vdup_n_s32(0xFFFF0010);
    uint32x2_t v46 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      __int16 v47 = v13;
      int16x4_t v48 = (int16x4_t *)v17;
      if (v28)
      {
        unsigned int v49 = *v13;
        unsigned int v50 = v13[1];
        if (v49 >= 0xF0) {
          unsigned int v49 = 240;
        }
        if (v49 <= 0x10) {
          unsigned int v49 = 16;
        }
        if (v50 >= 0xF0) {
          unsigned int v50 = 240;
        }
        if (v50 <= 0x10) {
          int v51 = 16;
        }
        else {
          int v51 = v50;
        }
        __int16 v47 = v13 + 2;
        *uint64_t v17 = 16 * ((613566757 * (unint64_t)((4095 * v49 - 65520) >> 5)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v51 - 65520) >> 5)) >> 32);
        int16x4_t v48 = (int16x4_t *)(v17 + 2);
      }
      if (v29)
      {
        uint64_t v52 = -(uint64_t)v29;
        do
        {
          uint64_t v53 = v47 + 2;
          v54.i32[0] = *v47;
          v54.i32[1] = v47[1];
          int16x4_t v55 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v45, (int32x2_t)vmax_u32(vmin_u32(v54, (uint32x2_t)0xF0000000F0), (uint32x2_t)0x1000000010), (int32x2_t)0xF0000000FLL), 5uLL), v46), 0x20uLL), 4uLL);
          *v48++ = vuzp1_s16(v55, v55);
          v47 += 2;
          BOOL v36 = __CFADD__(v52++, 1);
        }
        while (!v36);
      }
      else
      {
        uint64_t v53 = v47;
      }
      if ((v30 | (2 * v29)) < v18)
      {
        unsigned int v56 = *v53;
        unsigned int v57 = v53[1];
        if (v56 >= 0xF0) {
          unsigned int v56 = 240;
        }
        if (v56 <= 0x10) {
          unsigned int v56 = 16;
        }
        if (v57 >= 0xF0) {
          unsigned int v57 = 240;
        }
        if (v57 <= 0x10) {
          unsigned int v57 = 16;
        }
        v48->i16[0] = 16 * ((613566757 * (unint64_t)((4095 * v56 - 65520) >> 5)) >> 32);
        v48->i16[1] = 16 * ((613566757 * (unint64_t)((4095 * v57 - 65520) >> 5)) >> 32);
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + (v8 & 1) < v19)
  {
    if (v28)
    {
      unsigned int v58 = *v13;
      unsigned int v59 = v13[1];
      if (v58 >= 0xF0) {
        unsigned int v58 = 240;
      }
      if (v58 <= 0x10) {
        unsigned int v58 = 16;
      }
      if (v59 >= 0xF0) {
        unsigned int v59 = 240;
      }
      if (v59 <= 0x10) {
        unsigned int v59 = 16;
      }
      v13 += 2;
      *uint64_t v17 = 16 * ((613566757 * (unint64_t)((4095 * v58 - 65520) >> 5)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v59 - 65520) >> 5)) >> 32);
      v17 += 2;
    }
    if (v29)
    {
      uint64_t v60 = -(uint64_t)v29;
      do
      {
        unsigned int v61 = *v13;
        unsigned int v62 = v13[1];
        if (v61 >= 0xF0) {
          unsigned int v61 = 240;
        }
        if (v61 <= 0x10) {
          unsigned int v61 = 16;
        }
        if (v62 >= 0xF0) {
          unsigned int v62 = 240;
        }
        if (v62 <= 0x10) {
          unsigned int v62 = 16;
        }
        v13 += 2;
        *uint64_t v17 = 16 * ((613566757 * (unint64_t)((4095 * v61 - 65520) >> 5)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v62 - 65520) >> 5)) >> 32);
        v17 += 2;
        BOOL v36 = __CFADD__(v60++, 1);
      }
      while (!v36);
      v29 *= 2;
    }
    if ((v29 | v30) < v18)
    {
      unsigned int v63 = *v13;
      unsigned int v64 = v13[1];
      if (v63 >= 0xF0) {
        unsigned int v63 = 240;
      }
      if (v63 <= 0x10) {
        unsigned int v63 = 16;
      }
      if (v64 >= 0xF0) {
        unsigned int v64 = 240;
      }
      if (v64 <= 0x10) {
        unsigned int v64 = 16;
      }
      *uint64_t v17 = 16 * ((613566757 * (unint64_t)((4095 * v63 - 65520) >> 5)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v64 - 65520) >> 5)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_v2a8_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  unint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v20) {
    unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - v11;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a8;
    uint64_t v23 = a8[2];
    uint64_t v24 = a7[2] + v23 * v16;
    uint64_t v25 = *a7 + *a8 * v16;
    uint64_t v26 = *a4;
    uint64_t v27 = a4[2];
    uint64_t v28 = v24 + v17;
    uint64_t v29 = v25 + v17;
    uint64_t v30 = a3[2] + v27 * v12 + v11;
    uint64_t v31 = *a3 + v26 * v12 + v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v30 + i) | (*(unsigned __int8 *)(v30 + i) << 8);
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v29 += v22;
      v30 += v27;
      v28 += v23;
      ++v21;
    }
    while (v21 != v8);
  }
  unint64_t v33 = v12 & 1;
  if (v8 >= v33) {
    uint64_t v34 = v12 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  char v35 = v9;
  unint64_t v36 = v20 >> 1;
  unint64_t v37 = (v20 - v10) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v12)
  {
    if (v35)
    {
      unsigned int v38 = v14 + 2;
      __int16 v40 = v14[1] << 8;
      *unint64_t v19 = *v14 << 8;
      v19[1] = v40;
      unsigned int v39 = v19 + 2;
      if (!v36)
      {
LABEL_24:
        v14 += v13;
        unint64_t v19 = (_WORD *)((char *)v19 + v18);
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v38 = v14;
      unsigned int v39 = v19;
      if (!v36) {
        goto LABEL_24;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      __int16 v42 = v38[1] << 8;
      _WORD *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_24;
  }
LABEL_25:
  if (v8 == v34)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v34;
    do
    {
      uint32x2_t v46 = v14;
      __int16 v47 = v19;
      if (v35)
      {
        uint32x2_t v46 = v14 + 2;
        __int16 v48 = v14[1] << 8;
        *unint64_t v19 = *v14 << 8;
        v19[1] = v48;
        __int16 v47 = v19 + 2;
      }
      if (v36)
      {
        uint64_t v49 = -(uint64_t)v36;
        do
        {
          __int16 v50 = v46[1] << 8;
          *__int16 v47 = *v46 << 8;
          v47[1] = v50;
          v46 += 2;
          v47 += 2;
          BOOL v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      unint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if (v35)
    {
      __int16 v51 = *v14;
      __int16 v52 = v14[1];
      v14 += 2;
      *unint64_t v19 = v51 << 8;
      v19[1] = v52 << 8;
      v19 += 2;
    }
    if (v36)
    {
      uint64_t v53 = -(uint64_t)v36;
      do
      {
        __int16 v54 = v14[1] << 8;
        *unint64_t v19 = *v14 << 8;
        v19[1] = v54;
        v14 += 2;
        v19 += 2;
        BOOL v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v29 + i) << 8;
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v24 >> 1;
  unint64_t v35 = (v24 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      unint64_t v36 = v14 + 2;
      __int16 v38 = v14[1] << 8;
      *uint64_t v21 = *v14 << 8;
      v21[1] = v38;
      unint64_t v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v36 = v14;
      unint64_t v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      __int16 v40 = v36[1] << 8;
      *unint64_t v37 = *v36 << 8;
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      unint64_t v44 = v14;
      uint64_t v45 = v21;
      if (v33)
      {
        unint64_t v44 = v14 + 2;
        __int16 v46 = v14[1] << 8;
        *uint64_t v21 = *v14 << 8;
        v21[1] = v46;
        uint64_t v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          __int16 v48 = v44[1] << 8;
          _WORD *v45 = *v44 << 8;
          v45[1] = v48;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      __int16 v49 = *v14;
      __int16 v50 = v14[1];
      v14 += 2;
      *uint64_t v21 = v49 << 8;
      v21[1] = v50 << 8;
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        __int16 v52 = v14[1] << 8;
        *uint64_t v21 = *v14 << 8;
        v21[1] = v52;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v31 = *(unsigned __int8 *)(v29 + i);
          if (v31 >= 0xEB) {
            unsigned int v31 = 235;
          }
          if (v31 <= 0x10) {
            unsigned int v31 = 16;
          }
          *(_WORD *)(v28 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v31 - 65520)) >> 32)
                                                  + ((4095 * v31
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v31 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  unint64_t v35 = v24 >> 1;
  unint64_t v36 = (v24 - v10) >> 1;
  if (v35 >= v36) {
    unint64_t v35 = v36;
  }
  if (v12)
  {
    if (v34)
    {
      unsigned int v39 = *v14;
      if (v39 >= 0xF0) {
        unsigned int v39 = 240;
      }
      if (v39 <= 0x10) {
        int v40 = 16;
      }
      else {
        int v40 = v39;
      }
      if (v14[1] >= 0xF0u) {
        unsigned int v41 = 240;
      }
      else {
        unsigned int v41 = v14[1];
      }
      if (v41 <= 0x10) {
        int v42 = 16;
      }
      else {
        int v42 = v41;
      }
      unint64_t v37 = v14 + 2;
      *uint64_t v21 = 16 * ((613566757 * (unint64_t)((4095 * v40 - 65520) >> 5)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((4095 * v42 - 65520) >> 5)) >> 32);
      __int16 v38 = v21 + 2;
      if (!v35) {
        goto LABEL_48;
      }
    }
    else
    {
      unint64_t v37 = v14;
      __int16 v38 = v21;
      if (!v35)
      {
LABEL_48:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_49;
      }
    }
    uint64_t v43 = -(uint64_t)v35;
    do
    {
      unsigned int v44 = *v37;
      unsigned int v45 = v37[1];
      if (v44 >= 0xF0) {
        unsigned int v44 = 240;
      }
      if (v44 <= 0x10) {
        unsigned int v44 = 16;
      }
      if (v45 >= 0xF0) {
        unsigned int v45 = 240;
      }
      if (v45 <= 0x10) {
        unsigned int v45 = 16;
      }
      _WORD *v38 = 16 * ((613566757 * (unint64_t)((4095 * v44 - 65520) >> 5)) >> 32);
      v38[1] = 16 * ((613566757 * (unint64_t)((4095 * v45 - 65520) >> 5)) >> 32);
      v37 += 2;
      v38 += 2;
      BOOL v46 = __CFADD__(v43++, 1);
    }
    while (!v46);
    goto LABEL_48;
  }
LABEL_49:
  if (v8 == v33)
  {
    unint64_t v47 = 0;
  }
  else
  {
    uint64_t v48 = 0;
    unint64_t v47 = v8 - v33;
    do
    {
      __int16 v49 = v14;
      __int16 v50 = v21;
      if (v34)
      {
        unsigned int v51 = *v14;
        if (v51 >= 0xF0) {
          unsigned int v51 = 240;
        }
        if (v51 <= 0x10) {
          int v52 = 16;
        }
        else {
          int v52 = v51;
        }
        if (v14[1] >= 0xF0u) {
          unsigned int v53 = 240;
        }
        else {
          unsigned int v53 = v14[1];
        }
        if (v53 <= 0x10) {
          int v54 = 16;
        }
        else {
          int v54 = v53;
        }
        __int16 v49 = v14 + 2;
        *uint64_t v21 = 16 * ((613566757 * (unint64_t)((4095 * v52 - 65520) >> 5)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((4095 * v54 - 65520) >> 5)) >> 32);
        __int16 v50 = v21 + 2;
      }
      if (v35)
      {
        uint64_t v55 = -(uint64_t)v35;
        do
        {
          unsigned int v56 = *v49;
          unsigned int v57 = v49[1];
          if (v56 >= 0xF0) {
            unsigned int v56 = 240;
          }
          if (v56 <= 0x10) {
            unsigned int v56 = 16;
          }
          if (v57 >= 0xF0) {
            unsigned int v57 = 240;
          }
          if (v57 <= 0x10) {
            unsigned int v57 = 16;
          }
          *__int16 v50 = 16 * ((613566757 * (unint64_t)((4095 * v56 - 65520) >> 5)) >> 32);
          v50[1] = 16 * ((613566757 * (unint64_t)((4095 * v57 - 65520) >> 5)) >> 32);
          v49 += 2;
          v50 += 2;
          BOOL v46 = __CFADD__(v55++, 1);
        }
        while (!v46);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v48;
    }
    while (v48 != v47);
  }
  if (v47 + v32 < v8)
  {
    if (v34)
    {
      unsigned int v58 = *v14;
      unsigned int v59 = v14[1];
      if (v58 >= 0xF0) {
        unsigned int v58 = 240;
      }
      if (v58 <= 0x10) {
        unsigned int v58 = 16;
      }
      if (v59 >= 0xF0) {
        unsigned int v59 = 240;
      }
      if (v59 <= 0x10) {
        unsigned int v59 = 16;
      }
      v14 += 2;
      *uint64_t v21 = 16 * ((613566757 * (unint64_t)((4095 * v58 - 65520) >> 5)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((4095 * v59 - 65520) >> 5)) >> 32);
      v21 += 2;
    }
    if (v35)
    {
      uint64_t v60 = -(uint64_t)v35;
      do
      {
        unsigned int v61 = *v14;
        unsigned int v62 = v14[1];
        if (v61 >= 0xF0) {
          unsigned int v61 = 240;
        }
        if (v61 <= 0x10) {
          unsigned int v61 = 16;
        }
        if (v62 >= 0xF0) {
          unsigned int v62 = 240;
        }
        if (v62 <= 0x10) {
          unsigned int v62 = 16;
        }
        *uint64_t v21 = 16 * ((613566757 * (unint64_t)((4095 * v61 - 65520) >> 5)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((4095 * v62 - 65520) >> 5)) >> 32);
        v14 += 2;
        v21 += 2;
        BOOL v46 = __CFADD__(v60++, 1);
      }
      while (!v46);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    uint64_t v32 = v30 + v10 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      __int16 v38 = v16 + 2;
      __int16 v40 = (v16[v15 + 1] + (unsigned __int16)v16[1]) << 7;
      *unint64_t v23 = (v16[v15] + (unsigned __int16)*v16) << 7;
      v23[1] = v40;
      unsigned int v39 = v23 + 2;
      if (!v37)
      {
LABEL_28:
        v16 += 2 * v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      __int16 v38 = v16;
      unsigned int v39 = v23;
      if (!v37) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      __int16 v42 = *v38;
      __int16 v43 = v38[1];
      __int16 v44 = v38[v15];
      __int16 v45 = v38[v15 + 1];
      v38 += 2;
      _WORD *v39 = (v44 + v42) << 7;
      v39[1] = (v45 + v43) << 7;
      v39 += 2;
      BOOL v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      __int16 v49 = v16;
      __int16 v50 = v23;
      if (v9)
      {
        __int16 v49 = v16 + 2;
        __int16 v51 = (v16[v15 + 1] + (unsigned __int16)v16[1]) << 7;
        *unint64_t v23 = (v16[v15] + (unsigned __int16)*v16) << 7;
        v23[1] = v51;
        __int16 v50 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v52 = -(uint64_t)v37;
        do
        {
          __int16 v53 = *v49;
          __int16 v54 = v49[1];
          __int16 v55 = v49[v15];
          __int16 v56 = v49[v15 + 1];
          v49 += 2;
          *__int16 v50 = (v55 + v53) << 7;
          v50[1] = (v56 + v54) << 7;
          v50 += 2;
          BOOL v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += 2 * v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    uint64_t v32 = v30 + v10 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      __int16 v38 = v16 + 2;
      __int16 v40 = v16[1] << 8;
      *unint64_t v23 = *v16 << 8;
      v23[1] = v40;
      unsigned int v39 = v23 + 2;
      if (!v37)
      {
LABEL_28:
        v16 += 2 * v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      __int16 v38 = v16;
      unsigned int v39 = v23;
      if (!v37) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      __int16 v42 = v38[1] << 8;
      _WORD *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v26 != v35)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v35;
    uint64_t v46 = 2 * v15;
    do
    {
      unint64_t v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        unint64_t v47 = v16 + 2;
        __int16 v49 = v16[1] << 8;
        *unint64_t v23 = *v16 << 8;
        v23[1] = v49;
        unint64_t v48 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v50 = -(uint64_t)v37;
        do
        {
          __int16 v51 = v47[1] << 8;
          _WORD *v48 = *v47 << 8;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          BOOL v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      v16 += v46;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    BOOL v28 = v13 >= v8;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + *a4 * v13;
    if (v28) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v31 + v10 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          unsigned int v36 = *(unsigned __int8 *)(v33 + i);
          if (v36 >= 0xEB) {
            unsigned int v36 = 235;
          }
          if (v36 <= 0x10) {
            unsigned int v36 = 16;
          }
          *(_WORD *)(v34 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v36 - 65520)) >> 32)
                                                  + ((4095 * v36
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v36 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v42 = *v16;
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        int v43 = 16;
      }
      else {
        int v43 = v42;
      }
      if (v16[1] >= 0xF0u) {
        unsigned int v44 = 240;
      }
      else {
        unsigned int v44 = v16[1];
      }
      if (v44 <= 0x10) {
        int v45 = 16;
      }
      else {
        int v45 = v44;
      }
      if (v16[v15] >= 0xF0u) {
        unsigned int v46 = 240;
      }
      else {
        unsigned int v46 = v16[v15];
      }
      if (v46 <= 0x10) {
        int v47 = 16;
      }
      else {
        int v47 = v46;
      }
      if (v16[v15 + 1] >= 0xF0u) {
        unsigned int v48 = 240;
      }
      else {
        unsigned int v48 = v16[v15 + 1];
      }
      if (v48 <= 0x10) {
        int v49 = 16;
      }
      else {
        int v49 = v48;
      }
      __int16 v40 = v16 + 2;
      *unint64_t v23 = (8
            * (((613566757 * (unint64_t)((4095 * v47 - 65520) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((4095 * v43 - 65520) >> 5)) >> 32))
            + 8) & 0xFFF0;
      v23[1] = (8
              * (((613566757 * (unint64_t)((4095 * v49 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v45 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
      uint64_t v41 = v23 + 2;
      if (!v39) {
        goto LABEL_71;
      }
    }
    else
    {
      __int16 v40 = v16;
      uint64_t v41 = v23;
      if (!v39)
      {
LABEL_71:
        v16 += 2 * v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_72;
      }
    }
    uint64_t v50 = -(uint64_t)v39;
    do
    {
      unsigned int v51 = *v40;
      unsigned int v52 = v40[1];
      unsigned int v53 = v40[v15];
      unsigned int v54 = v40[v15 + 1];
      if (v51 >= 0xF0) {
        unsigned int v51 = 240;
      }
      if (v51 <= 0x10) {
        unsigned int v51 = 16;
      }
      if (v52 >= 0xF0) {
        unsigned int v52 = 240;
      }
      if (v52 <= 0x10) {
        unsigned int v52 = 16;
      }
      if (v53 >= 0xF0) {
        unsigned int v53 = 240;
      }
      if (v53 <= 0x10) {
        unsigned int v53 = 16;
      }
      if (v54 >= 0xF0) {
        unsigned int v54 = 240;
      }
      if (v54 <= 0x10) {
        unsigned int v54 = 16;
      }
      v40 += 2;
      *uint64_t v41 = (8
            * (((613566757 * (unint64_t)((4095 * v53 - 65520) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((4095 * v51 - 65520) >> 5)) >> 32))
            + 8) & 0xFFF0;
      v41[1] = (8
              * (((613566757 * (unint64_t)((4095 * v54 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v52 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
      v41 += 2;
      BOOL v28 = __CFADD__(v50++, 1);
    }
    while (!v28);
    goto LABEL_71;
  }
LABEL_72:
  if (v26 != v37)
  {
    unint64_t v55 = 0;
    unint64_t v56 = v26 - v37;
    do
    {
      unsigned int v57 = v16;
      unsigned int v58 = v23;
      if (v9)
      {
        unsigned int v59 = *v16;
        if (v59 >= 0xF0) {
          unsigned int v59 = 240;
        }
        if (v59 <= 0x10) {
          int v60 = 16;
        }
        else {
          int v60 = v59;
        }
        if (v16[1] >= 0xF0u) {
          unsigned int v61 = 240;
        }
        else {
          unsigned int v61 = v16[1];
        }
        if (v61 <= 0x10) {
          int v62 = 16;
        }
        else {
          int v62 = v61;
        }
        if (v16[v15] >= 0xF0u) {
          unsigned int v63 = 240;
        }
        else {
          unsigned int v63 = v16[v15];
        }
        if (v63 <= 0x10) {
          int v64 = 16;
        }
        else {
          int v64 = v63;
        }
        if (v16[v15 + 1] >= 0xF0u) {
          unsigned int v65 = 240;
        }
        else {
          unsigned int v65 = v16[v15 + 1];
        }
        if (v65 <= 0x10) {
          int v66 = 16;
        }
        else {
          int v66 = v65;
        }
        unsigned int v57 = v16 + 2;
        *unint64_t v23 = (8
              * (((613566757 * (unint64_t)((4095 * v64 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v60 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
        v23[1] = (8
                * (((613566757 * (unint64_t)((4095 * v66 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v62 - 65520) >> 5)) >> 32))
                + 8) & 0xFFF0;
        unsigned int v58 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v67 = -(uint64_t)v39;
        do
        {
          unsigned int v68 = *v57;
          unsigned int v69 = v57[1];
          unsigned int v70 = v57[v15];
          unsigned int v71 = v57[v15 + 1];
          if (v68 >= 0xF0) {
            unsigned int v68 = 240;
          }
          if (v68 <= 0x10) {
            unsigned int v68 = 16;
          }
          if (v69 >= 0xF0) {
            unsigned int v69 = 240;
          }
          if (v69 <= 0x10) {
            unsigned int v69 = 16;
          }
          if (v70 >= 0xF0) {
            unsigned int v70 = 240;
          }
          if (v70 <= 0x10) {
            unsigned int v70 = 16;
          }
          if (v71 >= 0xF0) {
            unsigned int v71 = 240;
          }
          if (v71 <= 0x10) {
            unsigned int v71 = 16;
          }
          v57 += 2;
          *unsigned int v58 = (8
                * (((613566757 * (unint64_t)((4095 * v70 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v68 - 65520) >> 5)) >> 32))
                + 8) & 0xFFF0;
          v58[1] = (8
                  * (((613566757 * (unint64_t)((4095 * v71 - 65520) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((4095 * v69 - 65520) >> 5)) >> 32))
                  + 8) & 0xFFF0;
          v58 += 2;
          BOOL v28 = __CFADD__(v67++, 1);
        }
        while (!v28);
      }
      v16 += 2 * v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v55 += 2;
    }
    while (v55 < v56);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    BOOL v28 = v13 >= v8;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + *a4 * v13;
    if (v28) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v31 + v10 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          unsigned int v36 = *(unsigned __int8 *)(v33 + i);
          if (v36 >= 0xEB) {
            unsigned int v36 = 235;
          }
          if (v36 <= 0x10) {
            unsigned int v36 = 16;
          }
          *(_WORD *)(v34 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v36 - 65520)) >> 32)
                                                  + ((4095 * v36
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v36 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v42 = *v16;
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        int v43 = 16;
      }
      else {
        int v43 = v42;
      }
      if (v16[1] >= 0xF0u) {
        unsigned int v44 = 240;
      }
      else {
        unsigned int v44 = v16[1];
      }
      if (v44 <= 0x10) {
        int v45 = 16;
      }
      else {
        int v45 = v44;
      }
      __int16 v40 = v16 + 2;
      *unint64_t v23 = 16 * ((613566757 * (unint64_t)((4095 * v43 - 65520) >> 5)) >> 32);
      v23[1] = 16 * ((613566757 * (unint64_t)((4095 * v45 - 65520) >> 5)) >> 32);
      uint64_t v41 = v23 + 2;
      if (!v39) {
        goto LABEL_51;
      }
    }
    else
    {
      __int16 v40 = v16;
      uint64_t v41 = v23;
      if (!v39)
      {
LABEL_51:
        v16 += 2 * v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_52;
      }
    }
    uint64_t v46 = -(uint64_t)v39;
    do
    {
      unsigned int v47 = *v40;
      unsigned int v48 = v40[1];
      if (v47 >= 0xF0) {
        unsigned int v47 = 240;
      }
      if (v47 <= 0x10) {
        unsigned int v47 = 16;
      }
      if (v48 >= 0xF0) {
        unsigned int v48 = 240;
      }
      if (v48 <= 0x10) {
        unsigned int v48 = 16;
      }
      *uint64_t v41 = 16 * ((613566757 * (unint64_t)((4095 * v47 - 65520) >> 5)) >> 32);
      v41[1] = 16 * ((613566757 * (unint64_t)((4095 * v48 - 65520) >> 5)) >> 32);
      v40 += 2;
      v41 += 2;
      BOOL v28 = __CFADD__(v46++, 1);
    }
    while (!v28);
    goto LABEL_51;
  }
LABEL_52:
  if (v26 != v37)
  {
    unint64_t v49 = 0;
    unint64_t v50 = v26 - v37;
    uint64_t v51 = 2 * v15;
    do
    {
      unsigned int v52 = v16;
      unsigned int v53 = v23;
      if (v9)
      {
        unsigned int v54 = *v16;
        if (v54 >= 0xF0) {
          unsigned int v54 = 240;
        }
        if (v54 <= 0x10) {
          int v55 = 16;
        }
        else {
          int v55 = v54;
        }
        if (v16[1] >= 0xF0u) {
          unsigned int v56 = 240;
        }
        else {
          unsigned int v56 = v16[1];
        }
        if (v56 <= 0x10) {
          int v57 = 16;
        }
        else {
          int v57 = v56;
        }
        unsigned int v52 = v16 + 2;
        *unint64_t v23 = 16 * ((613566757 * (unint64_t)((4095 * v55 - 65520) >> 5)) >> 32);
        v23[1] = 16 * ((613566757 * (unint64_t)((4095 * v57 - 65520) >> 5)) >> 32);
        unsigned int v53 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v58 = -(uint64_t)v39;
        do
        {
          unsigned int v59 = *v52;
          unsigned int v60 = v52[1];
          if (v59 >= 0xF0) {
            unsigned int v59 = 240;
          }
          if (v59 <= 0x10) {
            unsigned int v59 = 16;
          }
          if (v60 >= 0xF0) {
            unsigned int v60 = 240;
          }
          if (v60 <= 0x10) {
            unsigned int v60 = 16;
          }
          *unsigned int v53 = 16 * ((613566757 * (unint64_t)((4095 * v59 - 65520) >> 5)) >> 32);
          v53[1] = 16 * ((613566757 * (unint64_t)((4095 * v60 - 65520) >> 5)) >> 32);
          v52 += 2;
          v53 += 2;
          BOOL v28 = __CFADD__(v58++, 1);
        }
        while (!v28);
      }
      v16 += v51;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_Copy_v2a8_x4as(int32x2_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, uint64_t a6, void *a7, void *a8, uint64_t *a9)
{
  uint64_t v10 = a3[4];
  uint64_t v9 = a3[5];
  uint64_t v11 = v10 & 0xFFFFFFFE;
  unint64_t v12 = a3[3];
  uint64_t v13 = a3[2] + v10;
  uint64_t v14 = a5[1];
  uint64_t v15 = (unsigned __int8 *)(a4[1] + v14 * v9 + v11);
  uint64_t v17 = a7[4];
  uint64_t v16 = a7[5];
  uint64_t v18 = a9[1];
  uint64_t v19 = (_WORD *)(a8[1] + v18 * v16 + 4 * v17);
  unint64_t v20 = v13 - v11 + (v13 & 1);
  if (v20 >= a7[2]) {
    unint64_t v20 = a7[2];
  }
  if (v12 >= a7[3]) {
    unint64_t v12 = a7[3];
  }
  if (v12)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a9;
    uint64_t v23 = a9[2];
    uint64_t v24 = a8[2] + v23 * v16;
    uint64_t v25 = *a8 + *a9 * v16;
    uint64_t v26 = *a5;
    uint64_t v27 = a5[2];
    uint64_t v28 = v24 + 2 * v17;
    uint64_t v29 = v25 + 2 * v17;
    uint64_t v30 = a4[2] + v27 * v9 + v11;
    uint64_t v31 = *a4 + v26 * v9 + v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v30 + i) | (*(unsigned __int8 *)(v30 + i) << 8);
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v29 += v22;
      v30 += v27;
      v28 += v23;
      ++v21;
    }
    while (v21 != v12);
  }
  unint64_t v33 = v9 & 1;
  if (v12 >= v33) {
    uint64_t v34 = v9 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  char v35 = v10;
  unint64_t v36 = v20 >> 1;
  uint64_t v37 = v10 & 1;
  if (v20 >> 1 >= (v20 - v37) >> 1) {
    unint64_t v36 = (v20 - v37) >> 1;
  }
  if (v9)
  {
    if (v35)
    {
      unint64_t v38 = v15 + 2;
      __int16 v45 = v15[1] << 8;
      *uint64_t v19 = *v15 << 8;
      v19[1] = v45;
      unint64_t v39 = v19 + 2;
      if (v36)
      {
LABEL_19:
        uint64_t v40 = -(uint64_t)v36;
        do
        {
          __int16 v41 = *v38;
          __int16 v42 = v38[1];
          v38 += 2;
          _WORD *v39 = v41 << 8;
          v39[1] = v42 << 8;
          v39 += 2;
          BOOL v43 = __CFADD__(v40++, 1);
        }
        while (!v43);
        uint64_t v44 = 2 * v36;
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v38 = v15;
      unint64_t v39 = v19;
      if (v36) {
        goto LABEL_19;
      }
    }
    uint64_t v44 = 0;
LABEL_25:
    if ((v44 | (unint64_t)v37) < v20)
    {
      __int16 v46 = *v38 << 8;
      __int16 v47 = v38[1] << 8;
      _WORD *v39 = v46;
      v39[1] = v47;
    }
    v15 += v14;
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v12 == v34)
  {
    unint64_t v48 = 0;
  }
  else
  {
    uint64_t v49 = 0;
    unint64_t v48 = v12 - v34;
    do
    {
      unint64_t v50 = v15;
      uint64_t v51 = (double *)v19;
      if (v35)
      {
        unint64_t v50 = v15 + 2;
        __int16 v52 = v15[1] << 8;
        *uint64_t v19 = *v15 << 8;
        v19[1] = v52;
        uint64_t v51 = (double *)(v19 + 2);
      }
      if (v36)
      {
        uint64_t v53 = -(uint64_t)v36;
        do
        {
          unsigned int v54 = v50 + 2;
          a1.i8[0] = *v50;
          a1.i8[4] = v50[1];
          int16x4_t v55 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v55, v55);
          *v51++ = *(double *)&a1;
          v50 += 2;
          BOOL v43 = __CFADD__(v53++, 1);
        }
        while (!v43);
      }
      else
      {
        unsigned int v54 = v50;
      }
      if ((v37 | (2 * v36)) < v20)
      {
        __int16 v56 = *v54 << 8;
        __int16 v57 = v54[1] << 8;
        *(_WORD *)uint64_t v51 = v56;
        *((_WORD *)v51 + 1) = v57;
      }
      v15 += v14;
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v49;
    }
    while (v49 != v48);
  }
  if (v48 + v33 < v12)
  {
    if (v35)
    {
      __int16 v58 = *v15;
      __int16 v59 = v15[1];
      v15 += 2;
      *uint64_t v19 = v58 << 8;
      v19[1] = v59 << 8;
      v19 += 2;
    }
    if (v36)
    {
      uint64_t v60 = -(uint64_t)v36;
      do
      {
        __int16 v61 = *v15;
        __int16 v62 = v15[1];
        v15 += 2;
        *uint64_t v19 = v61 << 8;
        v19[1] = v62 << 8;
        v19 += 2;
        BOOL v43 = __CFADD__(v60++, 1);
      }
      while (!v43);
      uint64_t v63 = 2 * v36;
    }
    else
    {
      uint64_t v63 = 0;
    }
    if ((v63 | (unint64_t)v37) < v20)
    {
      __int16 v64 = *v15 << 8;
      __int16 v65 = v15[1] << 8;
      *uint64_t v19 = v64;
      v19[1] = v65;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_x444(int32x2_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, uint64_t a6, void *a7, void *a8, uint64_t *a9)
{
  uint64_t v10 = a3[4];
  uint64_t v9 = a3[5];
  unint64_t v11 = a3[3];
  uint64_t v12 = a3[2] + v10;
  uint64_t v13 = a5[1];
  uint64_t v14 = (unsigned __int8 *)(a4[1] + v13 * v9 + (v10 & 0xFFFFFFFE));
  uint64_t v15 = a7[4];
  uint64_t v16 = a7[5];
  uint64_t v17 = a9[1];
  uint64_t v18 = (_WORD *)(a8[1] + v17 * v16 + 4 * v15);
  unint64_t v19 = v12 - (v10 & 0xFFFFFFFE) + (v12 & 1);
  if (v19 >= a7[2]) {
    unint64_t v19 = a7[2];
  }
  if (v11 >= a7[3]) {
    unint64_t v11 = a7[3];
  }
  if (v11)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a5;
    uint64_t v22 = *a9;
    uint64_t v23 = *a8 + *a9 * v16 + 2 * v15;
    uint64_t v24 = *a4 + *a5 * v9 + (v10 & 0xFFFFFFFE);
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
          *(_WORD *)(v23 + 2 * i) = *(unsigned __int8 *)(v24 + i) << 8;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v11);
  }
  unint64_t v26 = v9 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v9 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v10;
  unint64_t v29 = v19 >> 1;
  uint64_t v30 = v10 & 1;
  if (v19 >> 1 >= (v19 - v30) >> 1) {
    unint64_t v29 = (v19 - v30) >> 1;
  }
  if (v9)
  {
    if (v28)
    {
      uint64_t v31 = v14 + 2;
      __int16 v38 = v14[1] << 8;
      _WORD *v18 = *v14 << 8;
      v18[1] = v38;
      uint64_t v32 = v18 + 2;
      if (v29)
      {
LABEL_19:
        uint64_t v33 = -(uint64_t)v29;
        do
        {
          __int16 v34 = *v31;
          __int16 v35 = v31[1];
          v31 += 2;
          _WORD *v32 = v34 << 8;
          v32[1] = v35 << 8;
          v32 += 2;
          BOOL v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        uint64_t v37 = 2 * v29;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v31 = v14;
      uint64_t v32 = v18;
      if (v29) {
        goto LABEL_19;
      }
    }
    uint64_t v37 = 0;
LABEL_25:
    if ((v37 | (unint64_t)v30) < v19)
    {
      __int16 v39 = *v31 << 8;
      __int16 v40 = v31[1] << 8;
      _WORD *v32 = v39;
      v32[1] = v40;
    }
    v14 += v13;
    uint64_t v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v11 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v11 - v27;
    do
    {
      BOOL v43 = v14;
      uint64_t v44 = (double *)v18;
      if (v28)
      {
        BOOL v43 = v14 + 2;
        __int16 v45 = v14[1] << 8;
        _WORD *v18 = *v14 << 8;
        v18[1] = v45;
        uint64_t v44 = (double *)(v18 + 2);
      }
      if (v29)
      {
        uint64_t v46 = -(uint64_t)v29;
        do
        {
          __int16 v47 = v43 + 2;
          a1.i8[0] = *v43;
          a1.i8[4] = v43[1];
          int16x4_t v48 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v48, v48);
          *v44++ = *(double *)&a1;
          v43 += 2;
          BOOL v36 = __CFADD__(v46++, 1);
        }
        while (!v36);
      }
      else
      {
        __int16 v47 = v43;
      }
      if ((v30 | (2 * v29)) < v19)
      {
        __int16 v49 = *v47 << 8;
        __int16 v50 = v47[1] << 8;
        *(_WORD *)uint64_t v44 = v49;
        *((_WORD *)v44 + 1) = v50;
      }
      v14 += v13;
      uint64_t v18 = (_WORD *)((char *)v18 + v17);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if (v28)
    {
      __int16 v51 = *v14;
      __int16 v52 = v14[1];
      v14 += 2;
      _WORD *v18 = v51 << 8;
      v18[1] = v52 << 8;
      v18 += 2;
    }
    if (v29)
    {
      uint64_t v53 = -(uint64_t)v29;
      do
      {
        __int16 v54 = *v14;
        __int16 v55 = v14[1];
        v14 += 2;
        _WORD *v18 = v54 << 8;
        v18[1] = v55 << 8;
        v18 += 2;
        BOOL v36 = __CFADD__(v53++, 1);
      }
      while (!v36);
      uint64_t v56 = 2 * v29;
    }
    else
    {
      uint64_t v56 = 0;
    }
    if ((v56 | (unint64_t)v30) < v19)
    {
      __int16 v57 = *v14 << 8;
      __int16 v58 = v14[1] << 8;
      _WORD *v18 = v57;
      v18[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  unint64_t v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2]) {
    unint64_t v18 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v19 = a6[3];
  }
  else {
    unint64_t v19 = v10;
  }
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          unsigned int v26 = *(unsigned __int8 *)(v24 + i);
          if (v26 >= 0xEB) {
            unsigned int v26 = 235;
          }
          if (v26 <= 0x10) {
            unsigned int v26 = 16;
          }
          *(_WORD *)(v23 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v26 - 16368)) >> 32)
                                                  + ((1023 * v26
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v26 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
  }
  if (v19 >= (v8 & 1u)) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v18 >> 1;
  uint64_t v30 = v9 & 1;
  if (v18 >> 1 >= (v18 - v30) >> 1) {
    unint64_t v29 = (v18 - v30) >> 1;
  }
  if (v8)
  {
    if (v28)
    {
      unsigned int v38 = *v13;
      unsigned int v39 = v13[1];
      if (v38 >= 0xF0) {
        unsigned int v38 = 240;
      }
      if (v38 <= 0x10) {
        unsigned int v38 = 16;
      }
      if (v39 >= 0xF0) {
        unsigned int v39 = 240;
      }
      if (v39 <= 0x10) {
        int v40 = 16;
      }
      else {
        int v40 = v39;
      }
      uint64_t v31 = v13 + 2;
      *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v38 - 16368) >> 5)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v40 - 16368) >> 5)) >> 32) << 6;
      uint64_t v32 = v17 + 2;
      if (v29) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v31 = v13;
      uint64_t v32 = v17;
      if (v29)
      {
LABEL_24:
        uint64_t v33 = -(uint64_t)v29;
        do
        {
          unsigned int v34 = *v31;
          unsigned int v35 = v31[1];
          if (v34 >= 0xF0) {
            unsigned int v34 = 240;
          }
          if (v34 <= 0x10) {
            unsigned int v34 = 16;
          }
          if (v35 >= 0xF0) {
            unsigned int v35 = 240;
          }
          if (v35 <= 0x10) {
            unsigned int v35 = 16;
          }
          v31 += 2;
          _WORD *v32 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v34 - 16368) >> 5)) >> 32) << 6;
          v32[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v35 - 16368) >> 5)) >> 32) << 6;
          v32 += 2;
          BOOL v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        uint64_t v37 = 2 * v29;
        goto LABEL_47;
      }
    }
    uint64_t v37 = 0;
LABEL_47:
    if ((v37 | (unint64_t)v30) < v18)
    {
      unsigned int v41 = *v31;
      unsigned int v42 = v31[1];
      if (v41 >= 0xF0) {
        unsigned int v41 = 240;
      }
      if (v41 <= 0x10) {
        unsigned int v41 = 16;
      }
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        unsigned int v42 = 16;
      }
      _WORD *v32 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v41 - 16368) >> 5)) >> 32) << 6;
      v32[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v42 - 16368) >> 5)) >> 32) << 6;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v27)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v19 - v27;
    int32x2_t v45 = vdup_n_s32(0xFFFFC010);
    uint32x2_t v46 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      __int16 v47 = v13;
      int16x4_t v48 = (int16x4_t *)v17;
      if (v28)
      {
        unsigned int v49 = *v13;
        unsigned int v50 = v13[1];
        if (v49 >= 0xF0) {
          unsigned int v49 = 240;
        }
        if (v49 <= 0x10) {
          unsigned int v49 = 16;
        }
        if (v50 >= 0xF0) {
          unsigned int v50 = 240;
        }
        if (v50 <= 0x10) {
          int v51 = 16;
        }
        else {
          int v51 = v50;
        }
        __int16 v47 = v13 + 2;
        *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v49 - 16368) >> 5)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v51 - 16368) >> 5)) >> 32) << 6;
        int16x4_t v48 = (int16x4_t *)(v17 + 2);
      }
      if (v29)
      {
        uint64_t v52 = -(uint64_t)v29;
        do
        {
          uint64_t v53 = v47 + 2;
          v54.i32[0] = *v47;
          v54.i32[1] = v47[1];
          int16x4_t v55 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v45, (int32x2_t)vmax_u32(vmin_u32(v54, (uint32x2_t)0xF0000000F0), (uint32x2_t)0x1000000010), (int32x2_t)0x300000003), 5uLL), v46), 0x20uLL), 6uLL);
          *v48++ = vuzp1_s16(v55, v55);
          v47 += 2;
          BOOL v36 = __CFADD__(v52++, 1);
        }
        while (!v36);
      }
      else
      {
        uint64_t v53 = v47;
      }
      if ((v30 | (2 * v29)) < v18)
      {
        unsigned int v56 = *v53;
        unsigned int v57 = v53[1];
        if (v56 >= 0xF0) {
          unsigned int v56 = 240;
        }
        if (v56 <= 0x10) {
          unsigned int v56 = 16;
        }
        if (v57 >= 0xF0) {
          unsigned int v57 = 240;
        }
        if (v57 <= 0x10) {
          unsigned int v57 = 16;
        }
        v48->i16[0] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v56 - 16368) >> 5)) >> 32) << 6;
        v48->i16[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 16368) >> 5)) >> 32) << 6;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + (v8 & 1) < v19)
  {
    if (v28)
    {
      unsigned int v58 = *v13;
      unsigned int v59 = v13[1];
      if (v58 >= 0xF0) {
        unsigned int v58 = 240;
      }
      if (v58 <= 0x10) {
        unsigned int v58 = 16;
      }
      if (v59 >= 0xF0) {
        unsigned int v59 = 240;
      }
      if (v59 <= 0x10) {
        unsigned int v59 = 16;
      }
      v13 += 2;
      *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v58 - 16368) >> 5)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v59 - 16368) >> 5)) >> 32) << 6;
      v17 += 2;
    }
    if (v29)
    {
      uint64_t v60 = -(uint64_t)v29;
      do
      {
        unsigned int v61 = *v13;
        unsigned int v62 = v13[1];
        if (v61 >= 0xF0) {
          unsigned int v61 = 240;
        }
        if (v61 <= 0x10) {
          unsigned int v61 = 16;
        }
        if (v62 >= 0xF0) {
          unsigned int v62 = 240;
        }
        if (v62 <= 0x10) {
          unsigned int v62 = 16;
        }
        v13 += 2;
        *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v61 - 16368) >> 5)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v62 - 16368) >> 5)) >> 32) << 6;
        v17 += 2;
        BOOL v36 = __CFADD__(v60++, 1);
      }
      while (!v36);
      v29 *= 2;
    }
    if ((v29 | v30) < v18)
    {
      unsigned int v63 = *v13;
      unsigned int v64 = v13[1];
      if (v63 >= 0xF0) {
        unsigned int v63 = 240;
      }
      if (v63 <= 0x10) {
        unsigned int v63 = 16;
      }
      if (v64 >= 0xF0) {
        unsigned int v64 = 240;
      }
      if (v64 <= 0x10) {
        unsigned int v64 = 16;
      }
      *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v63 - 16368) >> 5)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v64 - 16368) >> 5)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_Copy_v2a8_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  unint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v20) {
    unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - v11;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a8;
    uint64_t v23 = a8[2];
    uint64_t v24 = a7[2] + v23 * v16;
    uint64_t v25 = *a7 + *a8 * v16;
    uint64_t v26 = *a4;
    uint64_t v27 = a4[2];
    uint64_t v28 = v24 + v17;
    uint64_t v29 = v25 + v17;
    uint64_t v30 = a3[2] + v27 * v12 + v11;
    uint64_t v31 = *a3 + v26 * v12 + v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v30 + i) | (*(unsigned __int8 *)(v30 + i) << 8);
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v29 += v22;
      v30 += v27;
      v28 += v23;
      ++v21;
    }
    while (v21 != v8);
  }
  unint64_t v33 = v12 & 1;
  if (v8 >= v33) {
    uint64_t v34 = v12 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  char v35 = v9;
  unint64_t v36 = v20 >> 1;
  unint64_t v37 = (v20 - v10) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v12)
  {
    if (v35)
    {
      unsigned int v38 = v14 + 2;
      __int16 v40 = v14[1] << 8;
      *unint64_t v19 = *v14 << 8;
      v19[1] = v40;
      unsigned int v39 = v19 + 2;
      if (!v36)
      {
LABEL_24:
        v14 += v13;
        unint64_t v19 = (_WORD *)((char *)v19 + v18);
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v38 = v14;
      unsigned int v39 = v19;
      if (!v36) {
        goto LABEL_24;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      __int16 v42 = v38[1] << 8;
      _WORD *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_24;
  }
LABEL_25:
  if (v8 == v34)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v34;
    do
    {
      uint32x2_t v46 = v14;
      __int16 v47 = v19;
      if (v35)
      {
        uint32x2_t v46 = v14 + 2;
        __int16 v48 = v14[1] << 8;
        *unint64_t v19 = *v14 << 8;
        v19[1] = v48;
        __int16 v47 = v19 + 2;
      }
      if (v36)
      {
        uint64_t v49 = -(uint64_t)v36;
        do
        {
          __int16 v50 = v46[1] << 8;
          *__int16 v47 = *v46 << 8;
          v47[1] = v50;
          v46 += 2;
          v47 += 2;
          BOOL v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      unint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if (v35)
    {
      __int16 v51 = *v14;
      __int16 v52 = v14[1];
      v14 += 2;
      *unint64_t v19 = v51 << 8;
      v19[1] = v52 << 8;
      v19 += 2;
    }
    if (v36)
    {
      uint64_t v53 = -(uint64_t)v36;
      do
      {
        __int16 v54 = v14[1] << 8;
        *unint64_t v19 = *v14 << 8;
        v19[1] = v54;
        v14 += 2;
        v19 += 2;
        BOOL v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v29 + i) << 8;
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v24 >> 1;
  unint64_t v35 = (v24 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      unint64_t v36 = v14 + 2;
      __int16 v38 = v14[1] << 8;
      *uint64_t v21 = *v14 << 8;
      v21[1] = v38;
      unint64_t v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v36 = v14;
      unint64_t v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      __int16 v40 = v36[1] << 8;
      *unint64_t v37 = *v36 << 8;
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      unint64_t v44 = v14;
      uint64_t v45 = v21;
      if (v33)
      {
        unint64_t v44 = v14 + 2;
        __int16 v46 = v14[1] << 8;
        *uint64_t v21 = *v14 << 8;
        v21[1] = v46;
        uint64_t v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          __int16 v48 = v44[1] << 8;
          _WORD *v45 = *v44 << 8;
          v45[1] = v48;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      __int16 v49 = *v14;
      __int16 v50 = v14[1];
      v14 += 2;
      *uint64_t v21 = v49 << 8;
      v21[1] = v50 << 8;
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        __int16 v52 = v14[1] << 8;
        *uint64_t v21 = *v14 << 8;
        v21[1] = v52;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v31 = *(unsigned __int8 *)(v29 + i);
          if (v31 >= 0xEB) {
            unsigned int v31 = 235;
          }
          if (v31 <= 0x10) {
            unsigned int v31 = 16;
          }
          *(_WORD *)(v28 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v31 - 16368)) >> 32)
                                                  + ((1023 * v31
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v31 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  unint64_t v35 = v24 >> 1;
  unint64_t v36 = (v24 - v10) >> 1;
  if (v35 >= v36) {
    unint64_t v35 = v36;
  }
  if (v12)
  {
    if (v34)
    {
      unsigned int v39 = *v14;
      if (v39 >= 0xF0) {
        unsigned int v39 = 240;
      }
      if (v39 <= 0x10) {
        int v40 = 16;
      }
      else {
        int v40 = v39;
      }
      if (v14[1] >= 0xF0u) {
        unsigned int v41 = 240;
      }
      else {
        unsigned int v41 = v14[1];
      }
      if (v41 <= 0x10) {
        int v42 = 16;
      }
      else {
        int v42 = v41;
      }
      unint64_t v37 = v14 + 2;
      *uint64_t v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v40 - 16368) >> 5)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v42 - 16368) >> 5)) >> 32) << 6;
      __int16 v38 = v21 + 2;
      if (!v35) {
        goto LABEL_48;
      }
    }
    else
    {
      unint64_t v37 = v14;
      __int16 v38 = v21;
      if (!v35)
      {
LABEL_48:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_49;
      }
    }
    uint64_t v43 = -(uint64_t)v35;
    do
    {
      unsigned int v44 = *v37;
      unsigned int v45 = v37[1];
      if (v44 >= 0xF0) {
        unsigned int v44 = 240;
      }
      if (v44 <= 0x10) {
        unsigned int v44 = 16;
      }
      if (v45 >= 0xF0) {
        unsigned int v45 = 240;
      }
      if (v45 <= 0x10) {
        unsigned int v45 = 16;
      }
      _WORD *v38 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v44 - 16368) >> 5)) >> 32) << 6;
      v38[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 16368) >> 5)) >> 32) << 6;
      v37 += 2;
      v38 += 2;
      BOOL v46 = __CFADD__(v43++, 1);
    }
    while (!v46);
    goto LABEL_48;
  }
LABEL_49:
  if (v8 == v33)
  {
    unint64_t v47 = 0;
  }
  else
  {
    uint64_t v48 = 0;
    unint64_t v47 = v8 - v33;
    do
    {
      __int16 v49 = v14;
      __int16 v50 = v21;
      if (v34)
      {
        unsigned int v51 = *v14;
        if (v51 >= 0xF0) {
          unsigned int v51 = 240;
        }
        if (v51 <= 0x10) {
          int v52 = 16;
        }
        else {
          int v52 = v51;
        }
        if (v14[1] >= 0xF0u) {
          unsigned int v53 = 240;
        }
        else {
          unsigned int v53 = v14[1];
        }
        if (v53 <= 0x10) {
          int v54 = 16;
        }
        else {
          int v54 = v53;
        }
        __int16 v49 = v14 + 2;
        *uint64_t v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v52 - 16368) >> 5)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v54 - 16368) >> 5)) >> 32) << 6;
        __int16 v50 = v21 + 2;
      }
      if (v35)
      {
        uint64_t v55 = -(uint64_t)v35;
        do
        {
          unsigned int v56 = *v49;
          unsigned int v57 = v49[1];
          if (v56 >= 0xF0) {
            unsigned int v56 = 240;
          }
          if (v56 <= 0x10) {
            unsigned int v56 = 16;
          }
          if (v57 >= 0xF0) {
            unsigned int v57 = 240;
          }
          if (v57 <= 0x10) {
            unsigned int v57 = 16;
          }
          *__int16 v50 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v56 - 16368) >> 5)) >> 32) << 6;
          v50[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 16368) >> 5)) >> 32) << 6;
          v49 += 2;
          v50 += 2;
          BOOL v46 = __CFADD__(v55++, 1);
        }
        while (!v46);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v48;
    }
    while (v48 != v47);
  }
  if (v47 + v32 < v8)
  {
    if (v34)
    {
      unsigned int v58 = *v14;
      unsigned int v59 = v14[1];
      if (v58 >= 0xF0) {
        unsigned int v58 = 240;
      }
      if (v58 <= 0x10) {
        unsigned int v58 = 16;
      }
      if (v59 >= 0xF0) {
        unsigned int v59 = 240;
      }
      if (v59 <= 0x10) {
        unsigned int v59 = 16;
      }
      v14 += 2;
      *uint64_t v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v58 - 16368) >> 5)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v59 - 16368) >> 5)) >> 32) << 6;
      v21 += 2;
    }
    if (v35)
    {
      uint64_t v60 = -(uint64_t)v35;
      do
      {
        unsigned int v61 = *v14;
        unsigned int v62 = v14[1];
        if (v61 >= 0xF0) {
          unsigned int v61 = 240;
        }
        if (v61 <= 0x10) {
          unsigned int v61 = 16;
        }
        if (v62 >= 0xF0) {
          unsigned int v62 = 240;
        }
        if (v62 <= 0x10) {
          unsigned int v62 = 16;
        }
        *uint64_t v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v61 - 16368) >> 5)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v62 - 16368) >> 5)) >> 32) << 6;
        v14 += 2;
        v21 += 2;
        BOOL v46 = __CFADD__(v60++, 1);
      }
      while (!v46);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    uint64_t v32 = v30 + v10 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      __int16 v38 = v16 + 2;
      __int16 v40 = (v16[v15 + 1] + (unsigned __int16)v16[1]) << 7;
      *unint64_t v23 = (v16[v15] + (unsigned __int16)*v16) << 7;
      v23[1] = v40;
      unsigned int v39 = v23 + 2;
      if (!v37)
      {
LABEL_28:
        v16 += 2 * v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      __int16 v38 = v16;
      unsigned int v39 = v23;
      if (!v37) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      __int16 v42 = *v38;
      __int16 v43 = v38[1];
      __int16 v44 = v38[v15];
      __int16 v45 = v38[v15 + 1];
      v38 += 2;
      _WORD *v39 = (v44 + v42) << 7;
      v39[1] = (v45 + v43) << 7;
      v39 += 2;
      BOOL v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      __int16 v49 = v16;
      __int16 v50 = v23;
      if (v9)
      {
        __int16 v49 = v16 + 2;
        __int16 v51 = (v16[v15 + 1] + (unsigned __int16)v16[1]) << 7;
        *unint64_t v23 = (v16[v15] + (unsigned __int16)*v16) << 7;
        v23[1] = v51;
        __int16 v50 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v52 = -(uint64_t)v37;
        do
        {
          __int16 v53 = *v49;
          __int16 v54 = v49[1];
          __int16 v55 = v49[v15];
          __int16 v56 = v49[v15 + 1];
          v49 += 2;
          *__int16 v50 = (v55 + v53) << 7;
          v50[1] = (v56 + v54) << 7;
          v50 += 2;
          BOOL v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += 2 * v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    uint64_t v32 = v30 + v10 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      __int16 v38 = v16 + 2;
      __int16 v40 = v16[1] << 8;
      *unint64_t v23 = *v16 << 8;
      v23[1] = v40;
      unsigned int v39 = v23 + 2;
      if (!v37)
      {
LABEL_28:
        v16 += 2 * v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      __int16 v38 = v16;
      unsigned int v39 = v23;
      if (!v37) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      __int16 v42 = v38[1] << 8;
      _WORD *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v26 != v35)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v35;
    uint64_t v46 = 2 * v15;
    do
    {
      unint64_t v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        unint64_t v47 = v16 + 2;
        __int16 v49 = v16[1] << 8;
        *unint64_t v23 = *v16 << 8;
        v23[1] = v49;
        unint64_t v48 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v50 = -(uint64_t)v37;
        do
        {
          __int16 v51 = v47[1] << 8;
          _WORD *v48 = *v47 << 8;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          BOOL v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      v16 += v46;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    BOOL v28 = v13 >= v8;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + *a4 * v13;
    if (v28) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v31 + v10 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          unsigned int v36 = *(unsigned __int8 *)(v33 + i);
          if (v36 >= 0xEB) {
            unsigned int v36 = 235;
          }
          if (v36 <= 0x10) {
            unsigned int v36 = 16;
          }
          *(_WORD *)(v34 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v36 - 16368)) >> 32)
                                                  + ((1023 * v36
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v36 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v42 = *v16;
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        int v43 = 16;
      }
      else {
        int v43 = v42;
      }
      if (v16[1] >= 0xF0u) {
        unsigned int v44 = 240;
      }
      else {
        unsigned int v44 = v16[1];
      }
      if (v44 <= 0x10) {
        int v45 = 16;
      }
      else {
        int v45 = v44;
      }
      if (v16[v15] >= 0xF0u) {
        unsigned int v46 = 240;
      }
      else {
        unsigned int v46 = v16[v15];
      }
      if (v46 <= 0x10) {
        int v47 = 16;
      }
      else {
        int v47 = v46;
      }
      if (v16[v15 + 1] >= 0xF0u) {
        unsigned int v48 = 240;
      }
      else {
        unsigned int v48 = v16[v15 + 1];
      }
      if (v48 <= 0x10) {
        int v49 = 16;
      }
      else {
        int v49 = v48;
      }
      __int16 v40 = v16 + 2;
      *unint64_t v23 = (32
            * (((613566757 * (unint64_t)((1023 * v47 - 16368) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v43 - 16368) >> 5)) >> 32))
            + 32) & 0xFFC0;
      v23[1] = (32
              * (((613566757 * (unint64_t)((1023 * v49 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v45 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
      uint64_t v41 = v23 + 2;
      if (!v39) {
        goto LABEL_71;
      }
    }
    else
    {
      __int16 v40 = v16;
      uint64_t v41 = v23;
      if (!v39)
      {
LABEL_71:
        v16 += 2 * v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_72;
      }
    }
    uint64_t v50 = -(uint64_t)v39;
    do
    {
      unsigned int v51 = *v40;
      unsigned int v52 = v40[1];
      unsigned int v53 = v40[v15];
      unsigned int v54 = v40[v15 + 1];
      if (v51 >= 0xF0) {
        unsigned int v51 = 240;
      }
      if (v51 <= 0x10) {
        unsigned int v51 = 16;
      }
      if (v52 >= 0xF0) {
        unsigned int v52 = 240;
      }
      if (v52 <= 0x10) {
        unsigned int v52 = 16;
      }
      if (v53 >= 0xF0) {
        unsigned int v53 = 240;
      }
      if (v53 <= 0x10) {
        unsigned int v53 = 16;
      }
      if (v54 >= 0xF0) {
        unsigned int v54 = 240;
      }
      if (v54 <= 0x10) {
        unsigned int v54 = 16;
      }
      v40 += 2;
      *uint64_t v41 = (32
            * (((613566757 * (unint64_t)((1023 * v53 - 16368) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v51 - 16368) >> 5)) >> 32))
            + 32) & 0xFFC0;
      v41[1] = (32
              * (((613566757 * (unint64_t)((1023 * v54 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v52 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
      v41 += 2;
      BOOL v28 = __CFADD__(v50++, 1);
    }
    while (!v28);
    goto LABEL_71;
  }
LABEL_72:
  if (v26 != v37)
  {
    unint64_t v55 = 0;
    unint64_t v56 = v26 - v37;
    do
    {
      unsigned int v57 = v16;
      unsigned int v58 = v23;
      if (v9)
      {
        unsigned int v59 = *v16;
        if (v59 >= 0xF0) {
          unsigned int v59 = 240;
        }
        if (v59 <= 0x10) {
          int v60 = 16;
        }
        else {
          int v60 = v59;
        }
        if (v16[1] >= 0xF0u) {
          unsigned int v61 = 240;
        }
        else {
          unsigned int v61 = v16[1];
        }
        if (v61 <= 0x10) {
          int v62 = 16;
        }
        else {
          int v62 = v61;
        }
        if (v16[v15] >= 0xF0u) {
          unsigned int v63 = 240;
        }
        else {
          unsigned int v63 = v16[v15];
        }
        if (v63 <= 0x10) {
          int v64 = 16;
        }
        else {
          int v64 = v63;
        }
        if (v16[v15 + 1] >= 0xF0u) {
          unsigned int v65 = 240;
        }
        else {
          unsigned int v65 = v16[v15 + 1];
        }
        if (v65 <= 0x10) {
          int v66 = 16;
        }
        else {
          int v66 = v65;
        }
        unsigned int v57 = v16 + 2;
        *unint64_t v23 = (32
              * (((613566757 * (unint64_t)((1023 * v64 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v60 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
        v23[1] = (32
                * (((613566757 * (unint64_t)((1023 * v66 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v62 - 16368) >> 5)) >> 32))
                + 32) & 0xFFC0;
        unsigned int v58 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v67 = -(uint64_t)v39;
        do
        {
          unsigned int v68 = *v57;
          unsigned int v69 = v57[1];
          unsigned int v70 = v57[v15];
          unsigned int v71 = v57[v15 + 1];
          if (v68 >= 0xF0) {
            unsigned int v68 = 240;
          }
          if (v68 <= 0x10) {
            unsigned int v68 = 16;
          }
          if (v69 >= 0xF0) {
            unsigned int v69 = 240;
          }
          if (v69 <= 0x10) {
            unsigned int v69 = 16;
          }
          if (v70 >= 0xF0) {
            unsigned int v70 = 240;
          }
          if (v70 <= 0x10) {
            unsigned int v70 = 16;
          }
          if (v71 >= 0xF0) {
            unsigned int v71 = 240;
          }
          if (v71 <= 0x10) {
            unsigned int v71 = 16;
          }
          v57 += 2;
          *unsigned int v58 = (32
                * (((613566757 * (unint64_t)((1023 * v70 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v68 - 16368) >> 5)) >> 32))
                + 32) & 0xFFC0;
          v58[1] = (32
                  * (((613566757 * (unint64_t)((1023 * v71 - 16368) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v69 - 16368) >> 5)) >> 32))
                  + 32) & 0xFFC0;
          v58 += 2;
          BOOL v28 = __CFADD__(v67++, 1);
        }
        while (!v28);
      }
      v16 += 2 * v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v55 += 2;
    }
    while (v55 < v56);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    BOOL v28 = v13 >= v8;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + *a4 * v13;
    if (v28) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v31 + v10 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          unsigned int v36 = *(unsigned __int8 *)(v33 + i);
          if (v36 >= 0xEB) {
            unsigned int v36 = 235;
          }
          if (v36 <= 0x10) {
            unsigned int v36 = 16;
          }
          *(_WORD *)(v34 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v36 - 16368)) >> 32)
                                                  + ((1023 * v36
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v36 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v42 = *v16;
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        int v43 = 16;
      }
      else {
        int v43 = v42;
      }
      if (v16[1] >= 0xF0u) {
        unsigned int v44 = 240;
      }
      else {
        unsigned int v44 = v16[1];
      }
      if (v44 <= 0x10) {
        int v45 = 16;
      }
      else {
        int v45 = v44;
      }
      __int16 v40 = v16 + 2;
      *unint64_t v23 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v43 - 16368) >> 5)) >> 32) << 6;
      v23[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 16368) >> 5)) >> 32) << 6;
      uint64_t v41 = v23 + 2;
      if (!v39) {
        goto LABEL_51;
      }
    }
    else
    {
      __int16 v40 = v16;
      uint64_t v41 = v23;
      if (!v39)
      {
LABEL_51:
        v16 += 2 * v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_52;
      }
    }
    uint64_t v46 = -(uint64_t)v39;
    do
    {
      unsigned int v47 = *v40;
      unsigned int v48 = v40[1];
      if (v47 >= 0xF0) {
        unsigned int v47 = 240;
      }
      if (v47 <= 0x10) {
        unsigned int v47 = 16;
      }
      if (v48 >= 0xF0) {
        unsigned int v48 = 240;
      }
      if (v48 <= 0x10) {
        unsigned int v48 = 16;
      }
      *uint64_t v41 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v47 - 16368) >> 5)) >> 32) << 6;
      v41[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v48 - 16368) >> 5)) >> 32) << 6;
      v40 += 2;
      v41 += 2;
      BOOL v28 = __CFADD__(v46++, 1);
    }
    while (!v28);
    goto LABEL_51;
  }
LABEL_52:
  if (v26 != v37)
  {
    unint64_t v49 = 0;
    unint64_t v50 = v26 - v37;
    uint64_t v51 = 2 * v15;
    do
    {
      unsigned int v52 = v16;
      unsigned int v53 = v23;
      if (v9)
      {
        unsigned int v54 = *v16;
        if (v54 >= 0xF0) {
          unsigned int v54 = 240;
        }
        if (v54 <= 0x10) {
          int v55 = 16;
        }
        else {
          int v55 = v54;
        }
        if (v16[1] >= 0xF0u) {
          unsigned int v56 = 240;
        }
        else {
          unsigned int v56 = v16[1];
        }
        if (v56 <= 0x10) {
          int v57 = 16;
        }
        else {
          int v57 = v56;
        }
        unsigned int v52 = v16 + 2;
        *unint64_t v23 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v55 - 16368) >> 5)) >> 32) << 6;
        v23[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 16368) >> 5)) >> 32) << 6;
        unsigned int v53 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v58 = -(uint64_t)v39;
        do
        {
          unsigned int v59 = *v52;
          unsigned int v60 = v52[1];
          if (v59 >= 0xF0) {
            unsigned int v59 = 240;
          }
          if (v59 <= 0x10) {
            unsigned int v59 = 16;
          }
          if (v60 >= 0xF0) {
            unsigned int v60 = 240;
          }
          if (v60 <= 0x10) {
            unsigned int v60 = 16;
          }
          *unsigned int v53 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v59 - 16368) >> 5)) >> 32) << 6;
          v53[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v60 - 16368) >> 5)) >> 32) << 6;
          v52 += 2;
          v53 += 2;
          BOOL v28 = __CFADD__(v58++, 1);
        }
        while (!v28);
      }
      v16 += v51;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_Copy_v2a8_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = v8 & 0xFFFFFFFE;
  uint64_t v11 = a4[1];
  unint64_t v12 = (__int16 *)(a3[1] + v11 * v9 + v10);
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v15 = a6[2];
  unint64_t v16 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (__int16 *)(a7[1] + v17 * v14 + 2 * v13);
  if (a2[2] + v8 - v10 + ((a2[2] + v8) & 1uLL) >= v15) {
    size_t v19 = v15;
  }
  else {
    size_t v19 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (a2[3] >= v16) {
    unint64_t v20 = v16;
  }
  else {
    unint64_t v20 = a2[3];
  }
  if (v20)
  {
    uint64_t v50 = a8[1];
    uint64_t v52 = a4[1];
    uint64_t v53 = a8[2];
    uint64_t v21 = (char *)(a7[2] + v53 * v14 + v13);
    uint64_t v54 = *a8;
    uint64_t v22 = (char *)(*a7 + *a8 * v14 + v13);
    uint64_t v23 = a4[2];
    unint64_t v24 = (char *)(a3[2] + v23 * v9 + v10);
    uint64_t v25 = *a4;
    unint64_t v26 = (char *)(*a3 + *a4 * v9 + v10);
    unint64_t v51 = v20;
    do
    {
      memcpy(v22, v26, v19);
      memcpy(v21, v24, v19);
      v26 += v25;
      v22 += v54;
      v24 += v23;
      v21 += v53;
      --v20;
    }
    while (v20);
    uint64_t v17 = v50;
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    unint64_t v20 = v51;
    uint64_t v11 = v52;
  }
  unint64_t v27 = v9 & 1;
  if (v20 >= v27) {
    uint64_t v28 = v9 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v8;
  size_t v30 = v19 >> 1;
  uint64_t v31 = v8 & 1;
  if (v19 >> 1 >= (v19 - v31) >> 1) {
    size_t v30 = (v19 - v31) >> 1;
  }
  if (v9)
  {
    uint64_t v32 = v12;
    if (v29)
    {
      uint64_t v32 = v12 + 1;
      __int16 *v18 = *v12;
      uint64_t v33 = v18 + 1;
      if (v30)
      {
LABEL_19:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          __int16 v35 = *v32++;
          *v33++ = v35;
          BOOL v36 = __CFADD__(v34++, 1);
        }
        while (!v36);
        uint64_t v37 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v33 = v18;
      if (v30) {
        goto LABEL_19;
      }
    }
    uint64_t v37 = 0;
LABEL_25:
    if ((v37 | (unint64_t)v31) < v19) {
      *uint64_t v33 = *v32;
    }
    unint64_t v12 = (__int16 *)((char *)v12 + v11);
    uint64_t v18 = (__int16 *)((char *)v18 + v17);
  }
  if (v20 == v28)
  {
    unint64_t v38 = 0;
  }
  else
  {
    uint64_t v39 = 0;
    unint64_t v38 = v20 - v28;
    do
    {
      __int16 v40 = (char *)v12;
      uint64_t v41 = v18;
      if (v29)
      {
        __int16 v40 = (char *)(v12 + 1);
        __int16 *v18 = *v12;
        uint64_t v41 = v18 + 1;
      }
      if (v30)
      {
        uint64_t v42 = -(uint64_t)v30;
        do
        {
          char v43 = *v40;
          char v44 = v40[1];
          v40 += 2;
          *(unsigned char *)uint64_t v41 = v43;
          *((unsigned char *)v41 + 1) = v44;
          *((unsigned char *)v41 + 2) = v43;
          *((unsigned char *)v41 + 3) = v44;
          v41 += 2;
          BOOL v36 = __CFADD__(v42++, 1);
        }
        while (!v36);
      }
      if ((v31 | (2 * v30)) < v19) {
        *uint64_t v41 = *(_WORD *)v40;
      }
      unint64_t v12 = (__int16 *)((char *)v12 + v11);
      uint64_t v18 = (__int16 *)((char *)v18 + v17);
      ++v39;
    }
    while (v39 != v38);
  }
  if (v38 + v27 < v20)
  {
    if (v29)
    {
      __int16 v45 = *v12++;
      *v18++ = v45;
    }
    if (v30)
    {
      uint64_t v46 = -(uint64_t)v30;
      do
      {
        __int16 v47 = *v12++;
        *v18++ = v47;
        BOOL v36 = __CFADD__(v46++, 1);
      }
      while (!v36);
      v30 *= 2;
    }
    if ((v30 | v31) < v19) {
      __int16 *v18 = *v12;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a4[1];
  uint64_t v11 = (__int16 *)(a3[1] + v10 * v9 + (v8 & 0xFFFFFFFE));
  uint64_t v12 = a6[4];
  uint64_t v13 = a6[5];
  uint64_t v14 = a8[1];
  unint64_t v15 = (__int16 *)(a7[1] + v14 * v13 + 2 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2]) {
    size_t v16 = a6[2];
  }
  else {
    size_t v16 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    unint64_t v45 = v17;
    uint64_t v46 = a4[1];
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = (char *)(*a7 + *a8 * v13 + v12);
    uint64_t v22 = (char *)(*a3 + *a4 * v9 + (v8 & 0xFFFFFFFE));
    do
    {
      memcpy(v21, v22, v16);
      v22 += v19;
      v21 += v20;
      --v17;
    }
    while (v17);
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    unint64_t v17 = v45;
    uint64_t v10 = v46;
  }
  unint64_t v23 = v9 & 1;
  if (v17 >= v23) {
    uint64_t v24 = v9 & 1;
  }
  else {
    uint64_t v24 = 0;
  }
  char v25 = v8;
  size_t v26 = v16 >> 1;
  uint64_t v27 = v8 & 1;
  if (v16 >> 1 >= (v16 - v27) >> 1) {
    size_t v26 = (v16 - v27) >> 1;
  }
  if (v9)
  {
    uint64_t v28 = v11;
    if (v25)
    {
      uint64_t v28 = v11 + 1;
      __int16 *v15 = *v11;
      char v29 = v15 + 1;
      if (v26)
      {
LABEL_19:
        uint64_t v30 = -(uint64_t)v26;
        do
        {
          __int16 v31 = *v28++;
          *v29++ = v31;
          BOOL v32 = __CFADD__(v30++, 1);
        }
        while (!v32);
        uint64_t v33 = 2 * v26;
        goto LABEL_25;
      }
    }
    else
    {
      char v29 = v15;
      if (v26) {
        goto LABEL_19;
      }
    }
    uint64_t v33 = 0;
LABEL_25:
    if ((v33 | (unint64_t)v27) < v16) {
      *char v29 = *v28;
    }
    uint64_t v11 = (__int16 *)((char *)v11 + v10);
    unint64_t v15 = (__int16 *)((char *)v15 + v14);
  }
  if (v17 == v24)
  {
    unint64_t v34 = 0;
  }
  else
  {
    uint64_t v35 = 0;
    unint64_t v34 = v17 - v24;
    do
    {
      BOOL v36 = (char *)v11;
      uint64_t v37 = v15;
      if (v25)
      {
        BOOL v36 = (char *)(v11 + 1);
        __int16 *v15 = *v11;
        uint64_t v37 = v15 + 1;
      }
      if (v26)
      {
        uint64_t v38 = -(uint64_t)v26;
        do
        {
          char v39 = *v36;
          char v40 = v36[1];
          v36 += 2;
          *(unsigned char *)uint64_t v37 = v39;
          *((unsigned char *)v37 + 1) = v40;
          *((unsigned char *)v37 + 2) = v39;
          *((unsigned char *)v37 + 3) = v40;
          v37 += 2;
          BOOL v32 = __CFADD__(v38++, 1);
        }
        while (!v32);
      }
      if ((v27 | (2 * v26)) < v16) {
        *uint64_t v37 = *(_WORD *)v36;
      }
      uint64_t v11 = (__int16 *)((char *)v11 + v10);
      unint64_t v15 = (__int16 *)((char *)v15 + v14);
      ++v35;
    }
    while (v35 != v34);
  }
  if (v34 + v23 < v17)
  {
    if (v25)
    {
      __int16 v41 = *v11++;
      *v15++ = v41;
    }
    if (v26)
    {
      uint64_t v42 = -(uint64_t)v26;
      do
      {
        __int16 v43 = *v11++;
        *v15++ = v43;
        BOOL v32 = __CFADD__(v42++, 1);
      }
      while (!v32);
      v26 *= 2;
    }
    if ((v26 | v27) < v16) {
      __int16 *v15 = *v11;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v14 + 2 * v13);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  if (v10 >= v15) {
    unint64_t v10 = v15;
  }
  if (v10)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = *a7 + *a8 * v14 + v13;
    uint64_t v24 = *a3 + *a4 * v8 + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          unsigned int v26 = *(unsigned __int8 *)(v24 + i);
          if (v26 >= 0xEB) {
            unsigned int v26 = 235;
          }
          if (v26 <= 0x10) {
            unsigned int v26 = 16;
          }
          *(unsigned char *)(v23 + i) = (((255 * v26
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v26 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v26 - 4080)) >> 16)) >> 7;
        }
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v10);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v19 >> 1;
  uint64_t v30 = v9 & 1;
  if (v19 >> 1 >= (v19 - v30) >> 1) {
    unint64_t v29 = (v19 - v30) >> 1;
  }
  if (v8)
  {
    if (v28)
    {
      unsigned int v38 = *v12;
      unsigned int v39 = v12[1];
      if (v38 >= 0xF0) {
        unsigned int v38 = 240;
      }
      if (v38 <= 0x10) {
        LOWORD(v38) = 16;
      }
      if (v39 >= 0xF0) {
        unsigned int v39 = 240;
      }
      if (v39 <= 0x10) {
        __int16 v40 = 16;
      }
      else {
        __int16 v40 = v39;
      }
      __int16 v31 = v12 + 2;
      unsigned char *v18 = (9363 * ((unsigned __int16)(255 * v38 - 4080) >> 5)) >> 16;
      v18[1] = (9363 * ((unsigned __int16)(255 * v40 - 4080) >> 5)) >> 16;
      BOOL v32 = v18 + 2;
      if (v29) {
        goto LABEL_24;
      }
    }
    else
    {
      __int16 v31 = v12;
      BOOL v32 = v18;
      if (v29)
      {
LABEL_24:
        uint64_t v33 = -(uint64_t)v29;
        do
        {
          unsigned int v34 = *v31;
          unsigned int v35 = v31[1];
          if (v34 >= 0xF0) {
            unsigned int v34 = 240;
          }
          if (v34 <= 0x10) {
            LOWORD(v34) = 16;
          }
          if (v35 >= 0xF0) {
            unsigned int v35 = 240;
          }
          if (v35 <= 0x10) {
            LOWORD(v35) = 16;
          }
          v31 += 2;
          unsigned char *v32 = (9363 * ((unsigned __int16)(255 * v34 - 4080) >> 5)) >> 16;
          v32[1] = (9363 * ((unsigned __int16)(255 * v35 - 4080) >> 5)) >> 16;
          v32 += 2;
          BOOL v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        uint64_t v37 = 2 * v29;
        goto LABEL_47;
      }
    }
    uint64_t v37 = 0;
LABEL_47:
    if ((v37 | (unint64_t)v30) < v19)
    {
      unsigned int v41 = *v31;
      unsigned int v42 = v31[1];
      if (v41 >= 0xF0) {
        unsigned int v41 = 240;
      }
      if (v41 <= 0x10) {
        LOWORD(v41) = 16;
      }
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        LOWORD(v42) = 16;
      }
      unsigned char *v32 = (9363 * ((unsigned __int16)(255 * v41 - 4080) >> 5)) >> 16;
      v32[1] = (9363 * ((unsigned __int16)(255 * v42 - 4080) >> 5)) >> 16;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v10 == v27)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v10 - v27;
    do
    {
      unint64_t v45 = v12;
      uint64_t v46 = v18;
      if (v28)
      {
        unsigned int v47 = *v12;
        unsigned int v48 = v12[1];
        if (v47 >= 0xF0) {
          unsigned int v47 = 240;
        }
        if (v47 <= 0x10) {
          LOWORD(v47) = 16;
        }
        if (v48 >= 0xF0) {
          unsigned int v48 = 240;
        }
        if (v48 <= 0x10) {
          __int16 v49 = 16;
        }
        else {
          __int16 v49 = v48;
        }
        unint64_t v45 = v12 + 2;
        unsigned char *v18 = (9363 * ((unsigned __int16)(255 * v47 - 4080) >> 5)) >> 16;
        v18[1] = (9363 * ((unsigned __int16)(255 * v49 - 4080) >> 5)) >> 16;
        uint64_t v46 = v18 + 2;
      }
      if (v29)
      {
        uint64_t v50 = -(uint64_t)v29;
        do
        {
          unsigned int v51 = *v45;
          unsigned int v52 = v45[1];
          if (v51 >= 0xF0) {
            unsigned int v51 = 240;
          }
          if (v51 <= 0x10) {
            LOWORD(v51) = 16;
          }
          if (v52 >= 0xF0) {
            unsigned int v52 = 240;
          }
          if (v52 <= 0x10) {
            LOWORD(v52) = 16;
          }
          unsigned int v53 = (9363 * ((unsigned __int16)(255 * v51 - 4080) >> 5)) >> 16;
          unsigned int v54 = (9363 * ((unsigned __int16)(255 * v52 - 4080) >> 5)) >> 16;
          unsigned char *v46 = v53;
          v46[1] = v54;
          v45 += 2;
          _OWORD v46[2] = v53;
          v46[3] = v54;
          v46 += 4;
          BOOL v36 = __CFADD__(v50++, 1);
        }
        while (!v36);
      }
      if ((v30 | (2 * v29)) < v19)
      {
        unsigned int v55 = *v45;
        unsigned int v56 = v45[1];
        if (v55 >= 0xF0) {
          unsigned int v55 = 240;
        }
        if (v55 <= 0x10) {
          LOWORD(v55) = 16;
        }
        if (v56 >= 0xF0) {
          unsigned int v56 = 240;
        }
        if (v56 <= 0x10) {
          LOWORD(v56) = 16;
        }
        unsigned char *v46 = (9363 * ((unsigned __int16)(255 * v55 - 4080) >> 5)) >> 16;
        v46[1] = (9363 * ((unsigned __int16)(255 * v56 - 4080) >> 5)) >> 16;
      }
      v12 += v11;
      v18 += v17;
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + (v8 & 1) < v10)
  {
    if (v28)
    {
      unsigned int v57 = *v12;
      unsigned int v58 = v12[1];
      if (v57 >= 0xF0) {
        unsigned int v57 = 240;
      }
      if (v57 <= 0x10) {
        LOWORD(v57) = 16;
      }
      if (v58 >= 0xF0) {
        unsigned int v58 = 240;
      }
      if (v58 <= 0x10) {
        LOWORD(v58) = 16;
      }
      v12 += 2;
      unsigned char *v18 = (9363 * ((unsigned __int16)(255 * v57 - 4080) >> 5)) >> 16;
      v18[1] = (9363 * ((unsigned __int16)(255 * v58 - 4080) >> 5)) >> 16;
      v18 += 2;
    }
    if (v29)
    {
      uint64_t v59 = -(uint64_t)v29;
      do
      {
        unsigned int v60 = *v12;
        unsigned int v61 = v12[1];
        if (v60 >= 0xF0) {
          unsigned int v60 = 240;
        }
        if (v60 <= 0x10) {
          LOWORD(v60) = 16;
        }
        if (v61 >= 0xF0) {
          unsigned int v61 = 240;
        }
        if (v61 <= 0x10) {
          LOWORD(v61) = 16;
        }
        v12 += 2;
        unsigned char *v18 = (9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16;
        v18[1] = (9363 * ((unsigned __int16)(255 * v61 - 4080) >> 5)) >> 16;
        v18 += 2;
        BOOL v36 = __CFADD__(v59++, 1);
      }
      while (!v36);
      uint64_t v62 = 2 * v29;
    }
    else
    {
      uint64_t v62 = 0;
    }
    if ((v62 | (unint64_t)v30) < v19)
    {
      unsigned int v63 = *v12;
      unsigned int v64 = v12[1];
      if (v63 >= 0xF0) {
        unsigned int v63 = 240;
      }
      if (v63 <= 0x10) {
        LOWORD(v63) = 16;
      }
      if (v64 >= 0xF0) {
        unsigned int v64 = 240;
      }
      if (v64 <= 0x10) {
        LOWORD(v64) = 16;
      }
      unsigned char *v18 = (9363 * ((unsigned __int16)(255 * v63 - 4080) >> 5)) >> 16;
      v18[1] = (9363 * ((unsigned __int16)(255 * v64 - 4080) >> 5)) >> 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v29 = *(unsigned __int8 *)(v27 + i);
          if (v29 >= 0xEB) {
            unsigned int v29 = 235;
          }
          if (v29 <= 0x10) {
            unsigned int v29 = 16;
          }
          *(unsigned char *)(v26 + i) = (((255 * v29
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v29 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v29 - 4080)) >> 16)) >> 7;
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    uint64_t v10 = v9 & 1;
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  unint64_t v32 = v21 >> 1;
  unint64_t v33 = v21 - v10;
  if (v32 >= v33 >> 1) {
    unint64_t v34 = v33 >> 1;
  }
  else {
    unint64_t v34 = v32;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v37 = *v14;
      if (v37 >= 0xF0) {
        unsigned int v37 = 240;
      }
      if (v37 <= 0x10) {
        __int16 v38 = 16;
      }
      else {
        __int16 v38 = v37;
      }
      if (v14[1] >= 0xF0u) {
        unsigned int v39 = 240;
      }
      else {
        unsigned int v39 = v14[1];
      }
      if (v39 <= 0x10) {
        __int16 v40 = 16;
      }
      else {
        __int16 v40 = v39;
      }
      unsigned int v35 = v14 + 2;
      *uint64_t v20 = (9363 * ((unsigned __int16)(255 * v38 - 4080) >> 5)) >> 16;
      v20[1] = (9363 * ((unsigned __int16)(255 * v40 - 4080) >> 5)) >> 16;
      BOOL v36 = v20 + 2;
      if (!v34) {
        goto LABEL_49;
      }
    }
    else
    {
      unsigned int v35 = v14;
      BOOL v36 = v20;
      if (!v34)
      {
LABEL_49:
        v14 += v13;
        v20 += v19;
        goto LABEL_50;
      }
    }
    uint64_t v41 = -(uint64_t)v34;
    do
    {
      unsigned int v42 = *v35;
      unsigned int v43 = v35[1];
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        LOWORD(v42) = 16;
      }
      if (v43 >= 0xF0) {
        unsigned int v43 = 240;
      }
      if (v43 <= 0x10) {
        LOWORD(v43) = 16;
      }
      unsigned char *v36 = (9363 * ((unsigned __int16)(255 * v42 - 4080) >> 5)) >> 16;
      v36[1] = (9363 * ((unsigned __int16)(255 * v43 - 4080) >> 5)) >> 16;
      v36 += 2;
      v35 += 2;
      BOOL v44 = __CFADD__(v41++, 1);
    }
    while (!v44);
    goto LABEL_49;
  }
LABEL_50:
  if (v8 == v31)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v8 - v31;
    do
    {
      unsigned int v47 = v14;
      unsigned int v48 = v20;
      if (v9)
      {
        unsigned int v49 = *v14;
        if (v49 >= 0xF0) {
          unsigned int v49 = 240;
        }
        if (v49 <= 0x10) {
          __int16 v50 = 16;
        }
        else {
          __int16 v50 = v49;
        }
        if (v14[1] >= 0xF0u) {
          unsigned int v51 = 240;
        }
        else {
          unsigned int v51 = v14[1];
        }
        if (v51 <= 0x10) {
          __int16 v52 = 16;
        }
        else {
          __int16 v52 = v51;
        }
        unsigned int v47 = v14 + 2;
        *uint64_t v20 = (9363 * ((unsigned __int16)(255 * v50 - 4080) >> 5)) >> 16;
        v20[1] = (9363 * ((unsigned __int16)(255 * v52 - 4080) >> 5)) >> 16;
        unsigned int v48 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v53 = -(uint64_t)v34;
        do
        {
          unsigned int v54 = *v47;
          unsigned int v55 = v47[1];
          if (v54 >= 0xF0) {
            unsigned int v54 = 240;
          }
          if (v54 <= 0x10) {
            LOWORD(v54) = 16;
          }
          if (v55 >= 0xF0) {
            unsigned int v55 = 240;
          }
          if (v55 <= 0x10) {
            LOWORD(v55) = 16;
          }
          unsigned char *v48 = (9363 * ((unsigned __int16)(255 * v54 - 4080) >> 5)) >> 16;
          v48[1] = (9363 * ((unsigned __int16)(255 * v55 - 4080) >> 5)) >> 16;
          v48 += 2;
          v47 += 2;
          BOOL v44 = __CFADD__(v53++, 1);
        }
        while (!v44);
      }
      v14 += v13;
      v20 += v19;
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v8)
  {
    if (v9)
    {
      unsigned int v56 = *v14;
      unsigned int v57 = v14[1];
      if (v56 >= 0xF0) {
        unsigned int v56 = 240;
      }
      if (v56 <= 0x10) {
        LOWORD(v56) = 16;
      }
      if (v57 >= 0xF0) {
        unsigned int v57 = 240;
      }
      if (v57 <= 0x10) {
        LOWORD(v57) = 16;
      }
      v14 += 2;
      *uint64_t v20 = (9363 * ((unsigned __int16)(255 * v56 - 4080) >> 5)) >> 16;
      v20[1] = (9363 * ((unsigned __int16)(255 * v57 - 4080) >> 5)) >> 16;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v58 = -(uint64_t)v34;
      do
      {
        unsigned int v59 = *v14;
        unsigned int v60 = v14[1];
        if (v59 >= 0xF0) {
          unsigned int v59 = 240;
        }
        if (v59 <= 0x10) {
          LOWORD(v59) = 16;
        }
        if (v60 >= 0xF0) {
          unsigned int v60 = 240;
        }
        if (v60 <= 0x10) {
          LOWORD(v60) = 16;
        }
        *uint64_t v20 = (9363 * ((unsigned __int16)(255 * v59 - 4080) >> 5)) >> 16;
        v20[1] = (9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16;
        v20 += 2;
        v14 += 2;
        BOOL v44 = __CFADD__(v58++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_v2a8_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v23 = v18 - v17;
  }
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  else {
    unint64_t v24 = v14 - v13;
  }
  if (v24)
  {
    uint64_t v25 = *a4;
    uint64_t v58 = *a8;
    uint64_t v59 = *a4;
    if (v13 >= v9) {
      uint64_t v25 = 0;
    }
    uint64_t v26 = (char *)(*a3 + *a4 * v13 + v11 + v25);
    uint64_t v56 = a8[1];
    uint64_t v57 = a8[2];
    uint64_t v27 = (char *)(a7[2] + v57 * v19 + v17);
    char v28 = (char *)(*a7 + *a8 * v19 + v17);
    uint64_t v29 = a4[2];
    unint64_t v30 = (char *)(a3[2] + v29 * v13 + v11);
    unint64_t v55 = v24;
    uint64_t v31 = -(uint64_t)v24;
    do
    {
      memcpy(v28, v26, v23);
      memcpy(v27, v30, v23);
      v26 += v59;
      v28 += v58;
      v30 += v29;
      v27 += v57;
      BOOL v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    unint64_t v24 = v55;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
    uint64_t v21 = v56;
  }
  if (v24 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v23 >> 1 >= (v23 - v10) >> 1) {
    size_t v34 = (v23 - v10) >> 1;
  }
  else {
    size_t v34 = v23 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      unsigned int v35 = v16 + 2;
      unsigned int v37 = (v16[1] + v16[v15 + 1] + 1) >> 1;
      unsigned char *v22 = (*v16 + v16[v15] + 1) >> 1;
      v22[1] = v37;
      BOOL v36 = v22 + 2;
      if (!v34)
      {
LABEL_28:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v35 = v16;
      BOOL v36 = v22;
      if (!v34) {
        goto LABEL_28;
      }
    }
    uint64_t v38 = -(uint64_t)v34;
    do
    {
      int v39 = *v35;
      int v40 = v35[1];
      int v41 = v35[v15];
      int v42 = v35[v15 + 1];
      v35 += 2;
      unsigned char *v36 = (v39 + v41 + 1) >> 1;
      v36[1] = (v40 + v42 + 1) >> 1;
      v36 += 2;
      BOOL v32 = __CFADD__(v38++, 1);
    }
    while (!v32);
    goto LABEL_28;
  }
LABEL_29:
  if (v24 != v33)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v24 - v33;
    do
    {
      unint64_t v45 = v16;
      uint64_t v46 = v22;
      if (v8)
      {
        unint64_t v45 = v16 + 2;
        unsigned int v47 = (v16[1] + v16[v15 + 1] + 1) >> 1;
        unsigned char *v22 = (*v16 + v16[v15] + 1) >> 1;
        v22[1] = v47;
        uint64_t v46 = v22 + 2;
      }
      if (v34)
      {
        uint64_t v48 = -(uint64_t)v34;
        do
        {
          int v49 = *v45;
          int v50 = v45[1];
          int v51 = v45[v15];
          int v52 = v45[v15 + 1];
          v45 += 2;
          unsigned char *v46 = (v49 + v51 + 1) >> 1;
          v46[1] = (v50 + v52 + 1) >> 1;
          v46 += 2;
          BOOL v32 = __CFADD__(v48++, 1);
        }
        while (!v32);
      }
      v16 += 2 * v15;
      v22 += v21;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyDec_v2a8_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (__int16 *)(a3[1] + v15 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v23 = v18 - v17;
  }
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  unint64_t v24 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v49 = a4[1];
    uint64_t v50 = a8[1];
    uint64_t v25 = *a4;
    uint64_t v51 = a8[2];
    uint64_t v52 = *a4;
    if (v13 >= v9) {
      uint64_t v25 = 0;
    }
    uint64_t v26 = (char *)(*a3 + *a4 * v13 + v11 + v25);
    uint64_t v27 = (char *)(a7[2] + a8[2] * v19 + v17);
    uint64_t v28 = *a8;
    uint64_t v29 = (char *)(*a7 + *a8 * v19 + v17);
    uint64_t v30 = a4[2];
    uint64_t v31 = (char *)(a3[2] + v30 * v13 + v11);
    unint64_t v48 = v24;
    uint64_t v32 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v26, v23);
      memcpy(v27, v31, v23);
      v26 += v52;
      v29 += v28;
      v31 += v30;
      v27 += v51;
      BOOL v33 = __CFADD__(v32++, 1);
    }
    while (!v33);
    unint64_t v24 = v48;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
    uint64_t v15 = v49;
    uint64_t v21 = v50;
  }
  if (v24 >= v12) {
    unint64_t v34 = v12;
  }
  else {
    unint64_t v34 = 0;
  }
  if (v23 >> 1 >= (v23 - v10) >> 1) {
    size_t v35 = (v23 - v10) >> 1;
  }
  else {
    size_t v35 = v23 >> 1;
  }
  if (v12)
  {
    BOOL v36 = v16;
    if (v8)
    {
      BOOL v36 = v16 + 1;
      __int16 *v22 = *v16;
      unsigned int v37 = v22 + 1;
      if (!v35)
      {
LABEL_27:
        v16 += v15;
        unint64_t v22 = (__int16 *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      unsigned int v37 = v22;
      if (!v35) {
        goto LABEL_27;
      }
    }
    uint64_t v38 = -(uint64_t)v35;
    do
    {
      __int16 v39 = *v36++;
      *v37++ = v39;
      BOOL v33 = __CFADD__(v38++, 1);
    }
    while (!v33);
    goto LABEL_27;
  }
LABEL_28:
  if (v24 != v34)
  {
    unint64_t v40 = 0;
    unint64_t v41 = v24 - v34;
    do
    {
      int v42 = v16;
      unint64_t v43 = v22;
      if (v8)
      {
        int v42 = v16 + 1;
        __int16 *v22 = *v16;
        unint64_t v43 = v22 + 1;
      }
      if (v35)
      {
        uint64_t v44 = -(uint64_t)v35;
        do
        {
          __int16 v45 = *v42++;
          *v43++ = v45;
          BOOL v33 = __CFADD__(v44++, 1);
        }
        while (!v33);
      }
      v16 += v15;
      unint64_t v22 = (__int16 *)((char *)v22 + v21);
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v23 = v18 - v17;
  }
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  else {
    unint64_t v24 = v14 - v13;
  }
  if (v24)
  {
    unint64_t v54 = v24;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    if (v13 >= v9) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = (char *)(*a3 + *a4 * v13 + v11 + v27);
    uint64_t v29 = (char *)(*a7 + v26 * v19 + v17);
    uint64_t v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v23);
      v28 += v25;
      v29 += v26;
      BOOL v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    unint64_t v24 = v54;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v23 >> 1 >= (v23 - v10) >> 1) {
    size_t v33 = (v23 - v10) >> 1;
  }
  else {
    size_t v33 = v23 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      unint64_t v34 = v16 + 2;
      unsigned int v36 = (v16[1] + v16[v15 + 1] + 1) >> 1;
      unsigned char *v22 = (*v16 + v16[v15] + 1) >> 1;
      v22[1] = v36;
      size_t v35 = v22 + 2;
      if (!v33)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v34 = v16;
      size_t v35 = v22;
      if (!v33) {
        goto LABEL_29;
      }
    }
    uint64_t v37 = -(uint64_t)v33;
    do
    {
      int v38 = *v34;
      int v39 = v34[1];
      int v40 = v34[v15];
      int v41 = v34[v15 + 1];
      v34 += 2;
      *size_t v35 = (v38 + v40 + 1) >> 1;
      v35[1] = (v39 + v41 + 1) >> 1;
      v35 += 2;
      BOOL v31 = __CFADD__(v37++, 1);
    }
    while (!v31);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    unint64_t v42 = 0;
    unint64_t v43 = v24 - v32;
    do
    {
      uint64_t v44 = v16;
      __int16 v45 = v22;
      if (v8)
      {
        uint64_t v44 = v16 + 2;
        unsigned int v46 = (v16[1] + v16[v15 + 1] + 1) >> 1;
        unsigned char *v22 = (*v16 + v16[v15] + 1) >> 1;
        v22[1] = v46;
        __int16 v45 = v22 + 2;
      }
      if (v33)
      {
        uint64_t v47 = -(uint64_t)v33;
        do
        {
          int v48 = *v44;
          int v49 = v44[1];
          int v50 = v44[v15];
          int v51 = v44[v15 + 1];
          v44 += 2;
          unsigned char *v45 = (v48 + v50 + 1) >> 1;
          v45[1] = (v49 + v51 + 1) >> 1;
          v45 += 2;
          BOOL v31 = __CFADD__(v47++, 1);
        }
        while (!v31);
      }
      v16 += 2 * v15;
      v22 += v21;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = v9 & 1;
  uint64_t v12 = v11 + v9;
  unint64_t v13 = v10 & 1;
  unint64_t v14 = v13 + v10;
  uint64_t v15 = (*(_DWORD *)(a2 + 24) + v10) & 0xFFFFFFFE;
  uint64_t v16 = a4[1];
  uint64_t v17 = (__int16 *)(a3[1] + v16 * (v13 + v10) + ((v11 + v9) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v18 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v11 + v9) >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE)
                                                                                          - v18)
    size_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v18;
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - v12;
  }
  unint64_t v24 = v15 - v14;
  if (v15 - v14 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    unint64_t v45 = v24;
    uint64_t v46 = a4[1];
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    if (v14 >= v10) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = (char *)(*a3 + *a4 * v14 + v12 + v27);
    uint64_t v29 = (char *)(*a7 + v26 * v19 + v18);
    uint64_t v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v23);
      v28 += v25;
      v29 += v26;
      BOOL v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v13 = *(void *)(a2 + 40) & 1;
    uint64_t v11 = v9 & 1;
    unint64_t v24 = v45;
    uint64_t v16 = v46;
  }
  if (v24 >= v13) {
    unint64_t v32 = v13;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v23 >> 1 >= (v23 - v11) >> 1) {
    size_t v33 = (v23 - v11) >> 1;
  }
  else {
    size_t v33 = v23 >> 1;
  }
  if (v13)
  {
    unint64_t v34 = v17;
    if (v9)
    {
      unint64_t v34 = v17 + 1;
      __int16 *v22 = *v17;
      size_t v35 = v22 + 1;
      if (!v33)
      {
LABEL_28:
        v17 += v16;
        unint64_t v22 = (__int16 *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      size_t v35 = v22;
      if (!v33) {
        goto LABEL_28;
      }
    }
    uint64_t v36 = -(uint64_t)v33;
    do
    {
      __int16 v37 = *v34++;
      *v35++ = v37;
      BOOL v31 = __CFADD__(v36++, 1);
    }
    while (!v31);
    goto LABEL_28;
  }
LABEL_29:
  if (v24 != v32)
  {
    unint64_t v38 = 0;
    unint64_t v39 = v24 - v32;
    do
    {
      int v40 = v17;
      int v41 = v22;
      if (v9)
      {
        int v40 = v17 + 1;
        __int16 *v22 = *v17;
        int v41 = v22 + 1;
      }
      if (v33)
      {
        uint64_t v42 = -(uint64_t)v33;
        do
        {
          __int16 v43 = *v40++;
          *v41++ = v43;
          BOOL v31 = __CFADD__(v42++, 1);
        }
        while (!v31);
      }
      v17 += v16;
      unint64_t v22 = (__int16 *)((char *)v22 + v21);
      v38 += 2;
    }
    while (v38 < v39);
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v25 = v19 - v18;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    BOOL v27 = v13 >= v9;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v13;
    if (v27) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v11 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v35 = *(unsigned __int8 *)(v32 + i);
          if (v35 >= 0xEB) {
            unsigned int v35 = 235;
          }
          if (v35 <= 0x10) {
            unsigned int v35 = 16;
          }
          *(unsigned char *)(v33 + i) = (((255 * v35
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v35 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v35 - 4080)) >> 16)) >> 7;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v22 >> 1;
  unint64_t v38 = v22 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v12)
  {
    if (v8)
    {
      unsigned int v42 = *v15;
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        __int16 v43 = 16;
      }
      else {
        __int16 v43 = v42;
      }
      if (v15[1] >= 0xF0u) {
        unsigned int v44 = 240;
      }
      else {
        unsigned int v44 = v15[1];
      }
      if (v44 <= 0x10) {
        __int16 v45 = 16;
      }
      else {
        __int16 v45 = v44;
      }
      if (v15[v14] >= 0xF0u) {
        unsigned int v46 = 240;
      }
      else {
        unsigned int v46 = v15[v14];
      }
      if (v46 <= 0x10) {
        __int16 v47 = 16;
      }
      else {
        __int16 v47 = v46;
      }
      if (v15[v14 + 1] >= 0xF0u) {
        unsigned int v48 = 240;
      }
      else {
        unsigned int v48 = v15[v14 + 1];
      }
      if (v48 <= 0x10) {
        __int16 v49 = 16;
      }
      else {
        __int16 v49 = v48;
      }
      int v40 = v15 + 2;
      *uint64_t v21 = (((9363 * ((unsigned __int16)(255 * v43 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v47 - 4080) >> 5)) >> 16)
            + 1) >> 1;
      v21[1] = (((9363 * ((unsigned __int16)(255 * v45 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v49 - 4080) >> 5)) >> 16)
              + 1) >> 1;
      int v41 = v21 + 2;
      if (!v39) {
        goto LABEL_72;
      }
    }
    else
    {
      int v40 = v15;
      int v41 = v21;
      if (!v39)
      {
LABEL_72:
        v15 += 2 * v14;
        v21 += v20;
        goto LABEL_73;
      }
    }
    uint64_t v50 = -(uint64_t)v39;
    do
    {
      unsigned int v51 = *v40;
      unsigned int v52 = v40[1];
      unsigned int v53 = v40[v14];
      unsigned int v54 = v40[v14 + 1];
      if (v51 >= 0xF0) {
        unsigned int v51 = 240;
      }
      if (v51 <= 0x10) {
        LOWORD(v51) = 16;
      }
      if (v52 >= 0xF0) {
        unsigned int v52 = 240;
      }
      if (v52 <= 0x10) {
        LOWORD(v52) = 16;
      }
      if (v53 >= 0xF0) {
        unsigned int v53 = 240;
      }
      if (v53 <= 0x10) {
        LOWORD(v53) = 16;
      }
      if (v54 >= 0xF0) {
        unsigned int v54 = 240;
      }
      if (v54 <= 0x10) {
        LOWORD(v54) = 16;
      }
      v40 += 2;
      *int v41 = (((9363 * ((unsigned __int16)(255 * v51 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v53 - 4080) >> 5)) >> 16)
            + 1) >> 1;
      v41[1] = (((9363 * ((unsigned __int16)(255 * v52 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v54 - 4080) >> 5)) >> 16)
              + 1) >> 1;
      v41 += 2;
      BOOL v27 = __CFADD__(v50++, 1);
    }
    while (!v27);
    goto LABEL_72;
  }
LABEL_73:
  if (v24 != v36)
  {
    unint64_t v55 = 0;
    unint64_t v56 = v24 - v36;
    do
    {
      uint64_t v57 = v15;
      uint64_t v58 = v21;
      if (v8)
      {
        unsigned int v59 = *v15;
        if (v59 >= 0xF0) {
          unsigned int v59 = 240;
        }
        if (v59 <= 0x10) {
          __int16 v60 = 16;
        }
        else {
          __int16 v60 = v59;
        }
        if (v15[1] >= 0xF0u) {
          unsigned int v61 = 240;
        }
        else {
          unsigned int v61 = v15[1];
        }
        if (v61 <= 0x10) {
          __int16 v62 = 16;
        }
        else {
          __int16 v62 = v61;
        }
        if (v15[v14] >= 0xF0u) {
          unsigned int v63 = 240;
        }
        else {
          unsigned int v63 = v15[v14];
        }
        if (v63 <= 0x10) {
          __int16 v64 = 16;
        }
        else {
          __int16 v64 = v63;
        }
        if (v15[v14 + 1] >= 0xF0u) {
          unsigned int v65 = 240;
        }
        else {
          unsigned int v65 = v15[v14 + 1];
        }
        if (v65 <= 0x10) {
          __int16 v66 = 16;
        }
        else {
          __int16 v66 = v65;
        }
        uint64_t v57 = v15 + 2;
        *uint64_t v21 = (((9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v64 - 4080) >> 5)) >> 16)
              + 1) >> 1;
        v21[1] = (((9363 * ((unsigned __int16)(255 * v62 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v66 - 4080) >> 5)) >> 16)
                + 1) >> 1;
        uint64_t v58 = v21 + 2;
      }
      if (v39)
      {
        uint64_t v67 = -(uint64_t)v39;
        do
        {
          unsigned int v68 = *v57;
          unsigned int v69 = v57[1];
          unsigned int v70 = v57[v14];
          unsigned int v71 = v57[v14 + 1];
          if (v68 >= 0xF0) {
            unsigned int v68 = 240;
          }
          if (v68 <= 0x10) {
            LOWORD(v68) = 16;
          }
          if (v69 >= 0xF0) {
            unsigned int v69 = 240;
          }
          if (v69 <= 0x10) {
            LOWORD(v69) = 16;
          }
          if (v70 >= 0xF0) {
            unsigned int v70 = 240;
          }
          if (v70 <= 0x10) {
            LOWORD(v70) = 16;
          }
          if (v71 >= 0xF0) {
            unsigned int v71 = 240;
          }
          if (v71 <= 0x10) {
            LOWORD(v71) = 16;
          }
          v57 += 2;
          *uint64_t v58 = (((9363 * ((unsigned __int16)(255 * v68 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v70 - 4080) >> 5)) >> 16)
                + 1) >> 1;
          v58[1] = (((9363 * ((unsigned __int16)(255 * v69 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v71 - 4080) >> 5)) >> 16)
                  + 1) >> 1;
          v58 += 2;
          BOOL v27 = __CFADD__(v67++, 1);
        }
        while (!v27);
      }
      v15 += 2 * v14;
      v21 += v20;
      v55 += 2;
    }
    while (v55 < v56);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v25 = v19 - v18;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    BOOL v27 = v13 >= v9;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v13;
    if (v27) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v11 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v35 = *(unsigned __int8 *)(v32 + i);
          if (v35 >= 0xEB) {
            unsigned int v35 = 235;
          }
          if (v35 <= 0x10) {
            unsigned int v35 = 16;
          }
          *(unsigned char *)(v33 + i) = (((255 * v35
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v35 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v35 - 4080)) >> 16)) >> 7;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v22 >> 1;
  unint64_t v38 = v22 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v12)
  {
    if (v8)
    {
      unsigned int v42 = *v15;
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        __int16 v43 = 16;
      }
      else {
        __int16 v43 = v42;
      }
      if (v15[1] >= 0xF0u) {
        unsigned int v44 = 240;
      }
      else {
        unsigned int v44 = v15[1];
      }
      if (v44 <= 0x10) {
        __int16 v45 = 16;
      }
      else {
        __int16 v45 = v44;
      }
      int v40 = v15 + 2;
      *uint64_t v21 = (9363 * ((unsigned __int16)(255 * v43 - 4080) >> 5)) >> 16;
      v21[1] = (9363 * ((unsigned __int16)(255 * v45 - 4080) >> 5)) >> 16;
      int v41 = v21 + 2;
      if (!v39) {
        goto LABEL_52;
      }
    }
    else
    {
      int v40 = v15;
      int v41 = v21;
      if (!v39)
      {
LABEL_52:
        v15 += 2 * v14;
        v21 += v20;
        goto LABEL_53;
      }
    }
    uint64_t v46 = -(uint64_t)v39;
    do
    {
      unsigned int v47 = *v40;
      unsigned int v48 = v40[1];
      if (v47 >= 0xF0) {
        unsigned int v47 = 240;
      }
      if (v47 <= 0x10) {
        LOWORD(v47) = 16;
      }
      if (v48 >= 0xF0) {
        unsigned int v48 = 240;
      }
      if (v48 <= 0x10) {
        LOWORD(v48) = 16;
      }
      *int v41 = (9363 * ((unsigned __int16)(255 * v47 - 4080) >> 5)) >> 16;
      v41[1] = (9363 * ((unsigned __int16)(255 * v48 - 4080) >> 5)) >> 16;
      v41 += 2;
      v40 += 2;
      BOOL v27 = __CFADD__(v46++, 1);
    }
    while (!v27);
    goto LABEL_52;
  }
LABEL_53:
  if (v24 != v36)
  {
    unint64_t v49 = 0;
    unint64_t v50 = v24 - v36;
    uint64_t v51 = 2 * v14;
    do
    {
      unsigned int v52 = v15;
      unsigned int v53 = v21;
      if (v8)
      {
        unsigned int v54 = *v15;
        if (v54 >= 0xF0) {
          unsigned int v54 = 240;
        }
        if (v54 <= 0x10) {
          __int16 v55 = 16;
        }
        else {
          __int16 v55 = v54;
        }
        if (v15[1] >= 0xF0u) {
          unsigned int v56 = 240;
        }
        else {
          unsigned int v56 = v15[1];
        }
        if (v56 <= 0x10) {
          __int16 v57 = 16;
        }
        else {
          __int16 v57 = v56;
        }
        unsigned int v52 = v15 + 2;
        *uint64_t v21 = (9363 * ((unsigned __int16)(255 * v55 - 4080) >> 5)) >> 16;
        v21[1] = (9363 * ((unsigned __int16)(255 * v57 - 4080) >> 5)) >> 16;
        unsigned int v53 = v21 + 2;
      }
      if (v39)
      {
        uint64_t v58 = -(uint64_t)v39;
        do
        {
          unsigned int v59 = *v52;
          unsigned int v60 = v52[1];
          if (v59 >= 0xF0) {
            unsigned int v59 = 240;
          }
          if (v59 <= 0x10) {
            LOWORD(v59) = 16;
          }
          if (v60 >= 0xF0) {
            unsigned int v60 = 240;
          }
          if (v60 <= 0x10) {
            LOWORD(v60) = 16;
          }
          *unsigned int v53 = (9363 * ((unsigned __int16)(255 * v59 - 4080) >> 5)) >> 16;
          v53[1] = (9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16;
          v53 += 2;
          v52 += 2;
          BOOL v27 = __CFADD__(v58++, 1);
        }
        while (!v27);
      }
      v15 += v51;
      v21 += v20;
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  unint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v25 = v18 - v17;
  }
  else {
    size_t v25 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  else {
    unint64_t v26 = v14 - v13;
  }
  if (v26)
  {
    unint64_t v58 = v26;
    uint64_t v59 = a8[2];
    uint64_t v60 = a8[1];
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    if (v13 >= v9) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = (char *)(*a3 + *a4 * v13 + v11 + v29);
    uint64_t v31 = (char *)(*a7 + v28 * v19 + v17);
    uint64_t v32 = -(uint64_t)v26;
    do
    {
      memcpy(v31, v30, v25);
      v30 += v27;
      v31 += v28;
      BOOL v33 = __CFADD__(v32++, 1);
    }
    while (!v33);
    unint64_t v26 = v58;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
    uint64_t v22 = v59;
    uint64_t v21 = v60;
  }
  if (v26 >= v12) {
    unint64_t v34 = v12;
  }
  else {
    unint64_t v34 = 0;
  }
  if (v25 >> 1 >= (v25 - v10) >> 1) {
    size_t v35 = (v25 - v10) >> 1;
  }
  else {
    size_t v35 = v25 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      unint64_t v36 = v16 + 2;
      unsigned int v39 = (v16[1] + v16[v15 + 1] + 1) >> 1;
      *unint64_t v23 = (*v16 + v16[v15] + 1) >> 1;
      unint64_t v37 = v23 + 1;
      *unint64_t v24 = v39;
      unint64_t v38 = v24 + 1;
      if (!v35)
      {
LABEL_29:
        v16 += 2 * v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v36 = v16;
      unint64_t v37 = v23;
      unint64_t v38 = v24;
      if (!v35) {
        goto LABEL_29;
      }
    }
    uint64_t v40 = -(uint64_t)v35;
    do
    {
      int v41 = *v36;
      int v42 = v36[1];
      int v43 = v36[v15];
      int v44 = v36[v15 + 1];
      v36 += 2;
      *v37++ = (v41 + v43 + 1) >> 1;
      *v38++ = (v42 + v44 + 1) >> 1;
      BOOL v33 = __CFADD__(v40++, 1);
    }
    while (!v33);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v34)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v26 - v34;
    do
    {
      unsigned int v47 = v16;
      unsigned int v48 = v23;
      unint64_t v49 = v24;
      if (v8)
      {
        unsigned int v47 = v16 + 2;
        unsigned int v50 = (v16[1] + v16[v15 + 1] + 1) >> 1;
        *unint64_t v23 = (*v16 + v16[v15] + 1) >> 1;
        unsigned int v48 = v23 + 1;
        *unint64_t v24 = v50;
        unint64_t v49 = v24 + 1;
      }
      if (v35)
      {
        uint64_t v51 = -(uint64_t)v35;
        do
        {
          int v52 = *v47;
          int v53 = v47[1];
          int v54 = v47[v15];
          int v55 = v47[v15 + 1];
          v47 += 2;
          *v48++ = (v52 + v54 + 1) >> 1;
          *v49++ = (v53 + v55 + 1) >> 1;
          BOOL v33 = __CFADD__(v51++, 1);
        }
        while (!v33);
      }
      v16 += 2 * v15;
      v23 += v21;
      v24 += v22;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned char *)(a3[1] + v14 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v17 - v16) {
    size_t v24 = v17 - v16;
  }
  else {
    size_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  unint64_t v25 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v25 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v25)
  {
    unint64_t v51 = v25;
    uint64_t v52 = a4[1];
    uint64_t v53 = a8[1];
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = (char *)(*a3 + *a4 * v13 + v11 + v28);
    uint64_t v30 = (char *)(*a7 + v27 * v18 + v16);
    uint64_t v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, v24);
      v29 += v26;
      v30 += v27;
      BOOL v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    unint64_t v25 = v51;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
    uint64_t v14 = v52;
    uint64_t v20 = v53;
  }
  if (v25 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v24 >> 1 >= (v24 - v10) >> 1) {
    size_t v34 = (v24 - v10) >> 1;
  }
  else {
    size_t v34 = v24 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      char v38 = v15[1];
      size_t v35 = v15 + 2;
      unsigned char *v22 = *v15;
      unint64_t v36 = v22 + 1;
      *unint64_t v23 = v38;
      unint64_t v37 = v23 + 1;
      if (!v34)
      {
LABEL_28:
        v15 += 2 * v14;
        v22 += v20;
        v23 += v21;
        goto LABEL_29;
      }
    }
    else
    {
      size_t v35 = v15;
      unint64_t v36 = v22;
      unint64_t v37 = v23;
      if (!v34) {
        goto LABEL_28;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      char v40 = v35[1];
      *v36++ = *v35;
      *v37++ = v40;
      v35 += 2;
      BOOL v32 = __CFADD__(v39++, 1);
    }
    while (!v32);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v33)
  {
    unint64_t v41 = 0;
    unint64_t v42 = v25 - v33;
    do
    {
      int v43 = v15;
      int v44 = v22;
      unint64_t v45 = v23;
      if (v8)
      {
        char v46 = v15[1];
        int v43 = v15 + 2;
        unsigned char *v22 = *v15;
        int v44 = v22 + 1;
        *unint64_t v23 = v46;
        unint64_t v45 = v23 + 1;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          char v48 = v43[1];
          *v44++ = *v43;
          *v45++ = v48;
          v43 += 2;
          BOOL v32 = __CFADD__(v47++, 1);
        }
        while (!v32);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    BOOL v29 = v13 >= v9;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v13;
    if (v29) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    uint64_t v34 = v32 + v11 + v33;
    unint64_t v35 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB) {
            unsigned int v37 = 235;
          }
          if (v37 <= 0x10) {
            unsigned int v37 = 16;
          }
          *(unsigned char *)(v35 + i) = (((255 * v37
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 7;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v38 = v12;
  }
  else {
    unint64_t v38 = 0;
  }
  unint64_t v39 = v24 >> 1;
  unint64_t v40 = v24 - v10;
  if (v39 >= v40 >> 1) {
    unint64_t v41 = v40 >> 1;
  }
  else {
    unint64_t v41 = v39;
  }
  if (v12)
  {
    if (v8)
    {
      unsigned int v45 = *v15;
      if (v45 >= 0xF0) {
        unsigned int v45 = 240;
      }
      if (v45 <= 0x10) {
        __int16 v46 = 16;
      }
      else {
        __int16 v46 = v45;
      }
      if (v15[1] >= 0xF0u) {
        unsigned int v47 = 240;
      }
      else {
        unsigned int v47 = v15[1];
      }
      if (v47 <= 0x10) {
        __int16 v48 = 16;
      }
      else {
        __int16 v48 = v47;
      }
      if (v15[v14] >= 0xF0u) {
        unsigned int v49 = 240;
      }
      else {
        unsigned int v49 = v15[v14];
      }
      if (v49 <= 0x10) {
        __int16 v50 = 16;
      }
      else {
        __int16 v50 = v49;
      }
      if (v15[v14 + 1] >= 0xF0u) {
        unsigned int v51 = 240;
      }
      else {
        unsigned int v51 = v15[v14 + 1];
      }
      if (v51 <= 0x10) {
        __int16 v52 = 16;
      }
      else {
        __int16 v52 = v51;
      }
      unint64_t v42 = v15 + 2;
      unsigned int v53 = (((9363 * ((unsigned __int16)(255 * v48 - 4080) >> 5)) >> 16)
           + ((9363 * ((unsigned __int16)(255 * v52 - 4080) >> 5)) >> 16)
           + 1) >> 1;
      unsigned char *v22 = (((9363 * ((unsigned __int16)(255 * v46 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v50 - 4080) >> 5)) >> 16)
            + 1) >> 1;
      int v43 = v22 + 1;
      *unint64_t v23 = v53;
      int v44 = v23 + 1;
      if (!v41) {
        goto LABEL_72;
      }
    }
    else
    {
      unint64_t v42 = v15;
      int v43 = v22;
      int v44 = v23;
      if (!v41)
      {
LABEL_72:
        v15 += 2 * v14;
        v22 += v20;
        v23 += v21;
        goto LABEL_73;
      }
    }
    uint64_t v54 = -(uint64_t)v41;
    do
    {
      unsigned int v55 = *v42;
      unsigned int v56 = v42[1];
      unsigned int v57 = v42[v14];
      unsigned int v58 = v42[v14 + 1];
      if (v55 >= 0xF0) {
        unsigned int v55 = 240;
      }
      if (v55 <= 0x10) {
        LOWORD(v55) = 16;
      }
      if (v56 >= 0xF0) {
        unsigned int v56 = 240;
      }
      if (v56 <= 0x10) {
        LOWORD(v56) = 16;
      }
      if (v57 >= 0xF0) {
        unsigned int v57 = 240;
      }
      if (v57 <= 0x10) {
        LOWORD(v57) = 16;
      }
      if (v58 >= 0xF0) {
        unsigned int v58 = 240;
      }
      if (v58 <= 0x10) {
        LOWORD(v58) = 16;
      }
      v42 += 2;
      *v43++ = (((9363 * ((unsigned __int16)(255 * v55 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v57 - 4080) >> 5)) >> 16)
              + 1) >> 1;
      *v44++ = (((9363 * ((unsigned __int16)(255 * v56 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v58 - 4080) >> 5)) >> 16)
              + 1) >> 1;
      BOOL v29 = __CFADD__(v54++, 1);
    }
    while (!v29);
    goto LABEL_72;
  }
LABEL_73:
  if (v26 != v38)
  {
    unint64_t v59 = 0;
    unint64_t v60 = v26 - v38;
    do
    {
      unsigned int v61 = v15;
      __int16 v62 = v22;
      unsigned int v63 = v23;
      if (v8)
      {
        unsigned int v64 = *v15;
        if (v64 >= 0xF0) {
          unsigned int v64 = 240;
        }
        if (v64 <= 0x10) {
          __int16 v65 = 16;
        }
        else {
          __int16 v65 = v64;
        }
        if (v15[1] >= 0xF0u) {
          unsigned int v66 = 240;
        }
        else {
          unsigned int v66 = v15[1];
        }
        if (v66 <= 0x10) {
          __int16 v67 = 16;
        }
        else {
          __int16 v67 = v66;
        }
        if (v15[v14] >= 0xF0u) {
          unsigned int v68 = 240;
        }
        else {
          unsigned int v68 = v15[v14];
        }
        if (v68 <= 0x10) {
          __int16 v69 = 16;
        }
        else {
          __int16 v69 = v68;
        }
        if (v15[v14 + 1] >= 0xF0u) {
          unsigned int v70 = 240;
        }
        else {
          unsigned int v70 = v15[v14 + 1];
        }
        if (v70 <= 0x10) {
          __int16 v71 = 16;
        }
        else {
          __int16 v71 = v70;
        }
        unsigned int v61 = v15 + 2;
        unsigned int v72 = (((9363 * ((unsigned __int16)(255 * v65 - 4080) >> 5)) >> 16)
             + ((9363 * ((unsigned __int16)(255 * v69 - 4080) >> 5)) >> 16)
             + 1) >> 1;
        unsigned int v73 = (((9363 * ((unsigned __int16)(255 * v67 - 4080) >> 5)) >> 16)
             + ((9363 * ((unsigned __int16)(255 * v71 - 4080) >> 5)) >> 16)
             + 1) >> 1;
        unsigned char *v22 = v72;
        __int16 v62 = v22 + 1;
        *unint64_t v23 = v73;
        unsigned int v63 = v23 + 1;
      }
      if (v41)
      {
        uint64_t v74 = -(uint64_t)v41;
        do
        {
          unsigned int v75 = *v61;
          unsigned int v76 = v61[1];
          unsigned int v77 = v61[v14];
          unsigned int v78 = v61[v14 + 1];
          if (v75 >= 0xF0) {
            unsigned int v75 = 240;
          }
          if (v75 <= 0x10) {
            LOWORD(v75) = 16;
          }
          if (v76 >= 0xF0) {
            unsigned int v76 = 240;
          }
          if (v76 <= 0x10) {
            LOWORD(v76) = 16;
          }
          if (v77 >= 0xF0) {
            unsigned int v77 = 240;
          }
          if (v77 <= 0x10) {
            LOWORD(v77) = 16;
          }
          if (v78 >= 0xF0) {
            unsigned int v78 = 240;
          }
          if (v78 <= 0x10) {
            LOWORD(v78) = 16;
          }
          v61 += 2;
          *v62++ = (((9363 * ((unsigned __int16)(255 * v75 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v77 - 4080) >> 5)) >> 16)
                  + 1) >> 1;
          *v63++ = (((9363 * ((unsigned __int16)(255 * v76 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v78 - 4080) >> 5)) >> 16)
                  + 1) >> 1;
          BOOL v29 = __CFADD__(v74++, 1);
        }
        while (!v29);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v59 += 2;
    }
    while (v59 < v60);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    BOOL v29 = v13 >= v9;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v13;
    if (v29) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    uint64_t v34 = v32 + v11 + v33;
    unint64_t v35 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB) {
            unsigned int v37 = 235;
          }
          if (v37 <= 0x10) {
            unsigned int v37 = 16;
          }
          *(unsigned char *)(v35 + i) = (((255 * v37
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 7;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v38 = v12;
  }
  else {
    unint64_t v38 = 0;
  }
  unint64_t v39 = v24 >> 1;
  unint64_t v40 = v24 - v10;
  if (v39 >= v40 >> 1) {
    unint64_t v41 = v40 >> 1;
  }
  else {
    unint64_t v41 = v39;
  }
  if (v12)
  {
    if (v8)
    {
      unsigned int v45 = *v15;
      if (v45 >= 0xF0) {
        unsigned int v45 = 240;
      }
      if (v45 <= 0x10) {
        __int16 v46 = 16;
      }
      else {
        __int16 v46 = v45;
      }
      if (v15[1] >= 0xF0u) {
        unsigned int v47 = 240;
      }
      else {
        unsigned int v47 = v15[1];
      }
      if (v47 <= 0x10) {
        __int16 v48 = 16;
      }
      else {
        __int16 v48 = v47;
      }
      unint64_t v42 = v15 + 2;
      unsigned int v49 = (9363 * ((unsigned __int16)(255 * v48 - 4080) >> 5)) >> 16;
      unsigned char *v22 = (9363 * ((unsigned __int16)(255 * v46 - 4080) >> 5)) >> 16;
      int v43 = v22 + 1;
      *unint64_t v23 = v49;
      int v44 = v23 + 1;
      if (!v41) {
        goto LABEL_52;
      }
    }
    else
    {
      unint64_t v42 = v15;
      int v43 = v22;
      int v44 = v23;
      if (!v41)
      {
LABEL_52:
        v15 += 2 * v14;
        v22 += v20;
        v23 += v21;
        goto LABEL_53;
      }
    }
    uint64_t v50 = -(uint64_t)v41;
    do
    {
      unsigned int v51 = *v42;
      unsigned int v52 = v42[1];
      if (v51 >= 0xF0) {
        unsigned int v51 = 240;
      }
      if (v51 <= 0x10) {
        LOWORD(v51) = 16;
      }
      if (v52 >= 0xF0) {
        unsigned int v52 = 240;
      }
      if (v52 <= 0x10) {
        LOWORD(v52) = 16;
      }
      *v43++ = (9363 * ((unsigned __int16)(255 * v51 - 4080) >> 5)) >> 16;
      *v44++ = (9363 * ((unsigned __int16)(255 * v52 - 4080) >> 5)) >> 16;
      v42 += 2;
      BOOL v29 = __CFADD__(v50++, 1);
    }
    while (!v29);
    goto LABEL_52;
  }
LABEL_53:
  if (v26 != v38)
  {
    unint64_t v53 = 0;
    unint64_t v54 = v26 - v38;
    uint64_t v55 = 2 * v14;
    do
    {
      unsigned int v56 = v15;
      unsigned int v57 = v22;
      unsigned int v58 = v23;
      if (v8)
      {
        unsigned int v59 = *v15;
        if (v59 >= 0xF0) {
          unsigned int v59 = 240;
        }
        if (v59 <= 0x10) {
          __int16 v60 = 16;
        }
        else {
          __int16 v60 = v59;
        }
        if (v15[1] >= 0xF0u) {
          unsigned int v61 = 240;
        }
        else {
          unsigned int v61 = v15[1];
        }
        if (v61 <= 0x10) {
          __int16 v62 = 16;
        }
        else {
          __int16 v62 = v61;
        }
        unsigned int v56 = v15 + 2;
        unsigned int v63 = (9363 * ((unsigned __int16)(255 * v62 - 4080) >> 5)) >> 16;
        unsigned char *v22 = (9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16;
        unsigned int v57 = v22 + 1;
        *unint64_t v23 = v63;
        unsigned int v58 = v23 + 1;
      }
      if (v41)
      {
        uint64_t v64 = -(uint64_t)v41;
        do
        {
          unsigned int v65 = *v56;
          unsigned int v66 = v56[1];
          if (v65 >= 0xF0) {
            unsigned int v65 = 240;
          }
          if (v65 <= 0x10) {
            LOWORD(v65) = 16;
          }
          if (v66 >= 0xF0) {
            unsigned int v66 = 240;
          }
          if (v66 <= 0x10) {
            LOWORD(v66) = 16;
          }
          *v57++ = (9363 * ((unsigned __int16)(255 * v65 - 4080) >> 5)) >> 16;
          *v58++ = (9363 * ((unsigned __int16)(255 * v66 - 4080) >> 5)) >> 16;
          v56 += 2;
          BOOL v29 = __CFADD__(v64++, 1);
        }
        while (!v29);
      }
      v15 += v55;
      v22 += v20;
      v23 += v21;
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_Copy_420v_OneComponent(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    unint64_t v8 = a2 >> 1;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = *a6;
    uint64_t v11 = *a4;
    uint64_t v12 = 2 * *a3;
    uint64_t v13 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v14 = v10 + *a5;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v15 = 0;
        uint64_t v16 = v11 + v7;
        uint64_t v17 = v9;
        do
        {
          uint64_t v18 = (unsigned char *)(v14 + v15);
          uint64_t v19 = (unsigned char *)(v10 + v15);
          char v20 = sLumaTableVtoF[*(unsigned __int8 *)(v11 + v15 + 1)];
          *uint64_t v19 = sLumaTableVtoF[*(unsigned __int8 *)(v11 + v15)];
          v19[1] = v20;
          LOBYTE(v19) = sLumaTableVtoF[*(unsigned __int8 *)(v16 + v15 + 1)];
          unsigned char *v18 = sLumaTableVtoF[*(unsigned __int8 *)(v16 + v15)];
          v18[1] = (_BYTE)v19;
          v15 += 2;
          --v17;
        }
        while (v17);
      }
      v11 += v12;
      v10 += v13;
      ++v6;
      v14 += v13;
    }
    while (v6 != v8);
  }
  return 0;
}

uint64_t vt_Copy_422v_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2]) {
    unint64_t v9 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v10 = a6[3];
  }
  else {
    uint64_t v10 = a2[3];
  }
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    uint64_t v15 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v16 = a2[5];
    uint64_t v17 = (unsigned __int8 *)(a3[1] + v14 * v16 + v8);
    uint64_t v18 = *a3 + *a4 * v16 + v8;
    do
    {
      if (v9)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        __int16 v21 = 0;
        __int16 v22 = 0;
        unint64_t v23 = v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            __int16 v24 = *v23;
            __int16 v25 = v23[1];
            v23 += 2;
            __int16 v22 = v24 << 8;
            __int16 v21 = v25 << 8;
          }
          unint64_t v26 = (_WORD *)(v15 + v19);
          __int16 v27 = *(unsigned __int8 *)(v18 + v20) << 8;
          *unint64_t v26 = -1;
          v26[1] = v27;
          v26[2] = v22;
          v26[3] = v21;
          ++v20;
          v19 += 8;
        }
        while (v9 != v20);
      }
      v18 += v13;
      v15 += v12;
      v17 += v14;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_422v_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2]) {
    unint64_t v9 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v10 = a6[3];
  }
  else {
    uint64_t v10 = a2[3];
  }
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    uint64_t v15 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v16 = a2[5];
    uint64_t v17 = (char *)(a3[1] + v14 * v16 + v8);
    uint64_t v18 = *a3 + *a4 * v16 + v8;
    do
    {
      if (v9)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        char v21 = 0;
        char v22 = 0;
        unint64_t v23 = v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            char v22 = *v23;
            char v21 = v23[1];
            v23 += 2;
          }
          char v24 = *(unsigned char *)(v18 + v20);
          __int16 v25 = (unsigned char *)(v15 + v19);
          *__int16 v25 = -1;
          v25[1] = v24;
          v25[2] = v22;
          v25[3] = v21;
          ++v20;
          v19 += 4;
        }
        while (v9 != v20);
      }
      v18 += v13;
      v15 += v12;
      v17 += v14;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_422v_s4as(int32x2_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, uint64_t a6, void *a7, void *a8, uint64_t *a9)
{
  uint64_t v10 = a3[4];
  uint64_t v9 = a3[5];
  unint64_t v11 = a3[3];
  uint64_t v12 = a5[1];
  uint64_t v13 = (unsigned __int8 *)(a4[1] + v12 * v9 + (v10 & 0xFFFFFFFE));
  uint64_t v14 = a7[4];
  uint64_t v15 = a7[5];
  uint64_t v16 = a9[1];
  uint64_t v17 = (_WORD *)(a8[1] + v16 * v15 + 4 * v14);
  unint64_t v18 = a3[2] + v10 - (v10 & 0xFFFFFFFE) + ((a3[2] + v10) & 1);
  if (v18 >= a7[2]) {
    unint64_t v18 = a7[2];
  }
  if (v11 >= a7[3]) {
    unint64_t v11 = a7[3];
  }
  if (v11)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a5;
    uint64_t v21 = *a9;
    uint64_t v22 = a9[2];
    uint64_t v23 = a8[2] + v22 * v15 + 2 * v14;
    uint64_t v24 = *a8 + *a9 * v15 + 2 * v14;
    uint64_t v25 = *a4 + v20 * v9 + (v10 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          *(_WORD *)(v23 + 2 * i) = -1;
          *(_WORD *)(v24 + 2 * i) = *(unsigned __int8 *)(v25 + i) << 8;
        }
      }
      v25 += v20;
      v24 += v21;
      v23 += v22;
      ++v19;
    }
    while (v19 != v11);
  }
  unint64_t v27 = v9 & 1;
  if (v11 >= v27) {
    uint64_t v28 = v9 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v10;
  unint64_t v30 = v18 >> 1;
  uint64_t v31 = v10 & 1;
  if (v18 >> 1 >= (v18 - v31) >> 1) {
    unint64_t v30 = (v18 - v31) >> 1;
  }
  if (v9)
  {
    if (v29)
    {
      uint64_t v32 = v13 + 2;
      __int16 v39 = v13[1] << 8;
      *uint64_t v17 = *v13 << 8;
      v17[1] = v39;
      uint64_t v33 = v17 + 2;
      if (v30)
      {
LABEL_19:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          __int16 v35 = *v32;
          __int16 v36 = v32[1];
          v32 += 2;
          *uint64_t v33 = v35 << 8;
          v33[1] = v36 << 8;
          v33 += 2;
          BOOL v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v32 = v13;
      uint64_t v33 = v17;
      if (v30) {
        goto LABEL_19;
      }
    }
    uint64_t v38 = 0;
LABEL_25:
    if ((v38 | (unint64_t)v31) < v18)
    {
      __int16 v40 = *v32 << 8;
      __int16 v41 = v32[1] << 8;
      *uint64_t v33 = v40;
      v33[1] = v41;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v28)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v11 - v28;
    do
    {
      int v44 = v13;
      unsigned int v45 = (double *)v17;
      if (v29)
      {
        int v44 = v13 + 2;
        __int16 v46 = v13[1] << 8;
        *uint64_t v17 = *v13 << 8;
        v17[1] = v46;
        unsigned int v45 = (double *)(v17 + 2);
      }
      if (v30)
      {
        uint64_t v47 = -(uint64_t)v30;
        do
        {
          __int16 v48 = v44 + 2;
          a1.i8[0] = *v44;
          a1.i8[4] = v44[1];
          int16x4_t v49 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v49, v49);
          *v45++ = *(double *)&a1;
          v44 += 2;
          BOOL v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      else
      {
        __int16 v48 = v44;
      }
      if ((v31 | (2 * v30)) < v18)
      {
        __int16 v50 = *v48 << 8;
        __int16 v51 = v48[1] << 8;
        *(_WORD *)unsigned int v45 = v50;
        *((_WORD *)v45 + 1) = v51;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v27 < v11)
  {
    if (v29)
    {
      __int16 v52 = *v13;
      __int16 v53 = v13[1];
      v13 += 2;
      *uint64_t v17 = v52 << 8;
      v17[1] = v53 << 8;
      v17 += 2;
    }
    if (v30)
    {
      uint64_t v54 = -(uint64_t)v30;
      do
      {
        __int16 v55 = *v13;
        __int16 v56 = v13[1];
        v13 += 2;
        *uint64_t v17 = v55 << 8;
        v17[1] = v56 << 8;
        v17 += 2;
        BOOL v37 = __CFADD__(v54++, 1);
      }
      while (!v37);
      uint64_t v57 = 2 * v30;
    }
    else
    {
      uint64_t v57 = 0;
    }
    if ((v57 | (unint64_t)v31) < v18)
    {
      __int16 v58 = *v13 << 8;
      __int16 v59 = v13[1] << 8;
      *uint64_t v17 = v58;
      v17[1] = v59;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = a7[2] + v28 * v18 + v19;
    uint64_t v30 = *a7 + *a8 * v18 + v19;
    uint64_t v31 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = -1;
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v30 += v27;
      v29 += v28;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v33 = v12 & 1;
  if (v8 >= v33) {
    uint64_t v34 = v12 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  char v35 = v9;
  unint64_t v36 = v24 >> 1;
  unint64_t v37 = (v24 - v10) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v12)
  {
    if (v35)
    {
      uint64_t v38 = v14 + 2;
      __int16 v40 = v14[1] << 8;
      *uint64_t v21 = *v14 << 8;
      v21[1] = v40;
      __int16 v39 = v21 + 2;
      if (!v36)
      {
LABEL_25:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v38 = v14;
      __int16 v39 = v21;
      if (!v36) {
        goto LABEL_25;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      __int16 v42 = v38[1] << 8;
      _WORD *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v34)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v34;
    do
    {
      __int16 v46 = v14;
      uint64_t v47 = v21;
      if (v35)
      {
        __int16 v46 = v14 + 2;
        __int16 v48 = v14[1] << 8;
        *uint64_t v21 = *v14 << 8;
        v21[1] = v48;
        uint64_t v47 = v21 + 2;
      }
      if (v36)
      {
        uint64_t v49 = -(uint64_t)v36;
        do
        {
          __int16 v50 = v46[1] << 8;
          *uint64_t v47 = *v46 << 8;
          v47[1] = v50;
          v46 += 2;
          v47 += 2;
          BOOL v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if (v35)
    {
      __int16 v51 = *v14;
      __int16 v52 = v14[1];
      v14 += 2;
      *uint64_t v21 = v51 << 8;
      v21[1] = v52 << 8;
      v21 += 2;
    }
    if (v36)
    {
      uint64_t v53 = -(uint64_t)v36;
      do
      {
        __int16 v54 = v14[1] << 8;
        *uint64_t v21 = *v14 << 8;
        v21[1] = v54;
        v14 += 2;
        v21 += 2;
        BOOL v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_t4as(int32x2_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, uint64_t a6, void *a7, void *a8, uint64_t *a9)
{
  uint64_t v10 = a3[4];
  uint64_t v9 = a3[5];
  unint64_t v11 = a3[3];
  uint64_t v12 = a5[1];
  uint64_t v13 = (unsigned __int8 *)(a4[1] + v12 * v9 + (v10 & 0xFFFFFFFE));
  uint64_t v14 = a7[4];
  uint64_t v15 = a7[5];
  uint64_t v16 = a9[1];
  uint64_t v17 = (_WORD *)(a8[1] + v16 * v15 + 4 * v14);
  unint64_t v18 = a3[2] + v10 - (v10 & 0xFFFFFFFE) + ((a3[2] + v10) & 1);
  if (v18 >= a7[2]) {
    unint64_t v18 = a7[2];
  }
  if (v11 >= a7[3]) {
    unint64_t v11 = a7[3];
  }
  if (v11)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a5;
    uint64_t v21 = *a9;
    uint64_t v22 = a9[2];
    uint64_t v23 = a8[2] + v22 * v15 + 2 * v14;
    uint64_t v24 = *a8 + *a9 * v15 + 2 * v14;
    uint64_t v25 = *a4 + v20 * v9 + (v10 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          *(_WORD *)(v23 + 2 * i) = -1;
          *(_WORD *)(v24 + 2 * i) = *(unsigned __int8 *)(v25 + i) << 8;
        }
      }
      v25 += v20;
      v24 += v21;
      v23 += v22;
      ++v19;
    }
    while (v19 != v11);
  }
  unint64_t v27 = v9 & 1;
  if (v11 >= v27) {
    uint64_t v28 = v9 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v10;
  unint64_t v30 = v18 >> 1;
  uint64_t v31 = v10 & 1;
  if (v18 >> 1 >= (v18 - v31) >> 1) {
    unint64_t v30 = (v18 - v31) >> 1;
  }
  if (v9)
  {
    if (v29)
    {
      uint64_t v32 = v13 + 2;
      __int16 v39 = v13[1] << 8;
      *uint64_t v17 = *v13 << 8;
      v17[1] = v39;
      unint64_t v33 = v17 + 2;
      if (v30)
      {
LABEL_19:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          __int16 v35 = *v32;
          __int16 v36 = v32[1];
          v32 += 2;
          *unint64_t v33 = v35 << 8;
          v33[1] = v36 << 8;
          v33 += 2;
          BOOL v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v32 = v13;
      unint64_t v33 = v17;
      if (v30) {
        goto LABEL_19;
      }
    }
    uint64_t v38 = 0;
LABEL_25:
    if ((v38 | (unint64_t)v31) < v18)
    {
      __int16 v40 = *v32 << 8;
      __int16 v41 = v32[1] << 8;
      *unint64_t v33 = v40;
      v33[1] = v41;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v28)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v11 - v28;
    do
    {
      unint64_t v44 = v13;
      uint64_t v45 = (double *)v17;
      if (v29)
      {
        unint64_t v44 = v13 + 2;
        __int16 v46 = v13[1] << 8;
        *uint64_t v17 = *v13 << 8;
        v17[1] = v46;
        uint64_t v45 = (double *)(v17 + 2);
      }
      if (v30)
      {
        uint64_t v47 = -(uint64_t)v30;
        do
        {
          __int16 v48 = v44 + 2;
          a1.i8[0] = *v44;
          a1.i8[4] = v44[1];
          int16x4_t v49 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v49, v49);
          *v45++ = *(double *)&a1;
          v44 += 2;
          BOOL v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      else
      {
        __int16 v48 = v44;
      }
      if ((v31 | (2 * v30)) < v18)
      {
        __int16 v50 = *v48 << 8;
        __int16 v51 = v48[1] << 8;
        *(_WORD *)uint64_t v45 = v50;
        *((_WORD *)v45 + 1) = v51;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v27 < v11)
  {
    if (v29)
    {
      __int16 v52 = *v13;
      __int16 v53 = v13[1];
      v13 += 2;
      *uint64_t v17 = v52 << 8;
      v17[1] = v53 << 8;
      v17 += 2;
    }
    if (v30)
    {
      uint64_t v54 = -(uint64_t)v30;
      do
      {
        __int16 v55 = *v13;
        __int16 v56 = v13[1];
        v13 += 2;
        *uint64_t v17 = v55 << 8;
        v17[1] = v56 << 8;
        v17 += 2;
        BOOL v37 = __CFADD__(v54++, 1);
      }
      while (!v37);
      uint64_t v57 = 2 * v30;
    }
    else
    {
      uint64_t v57 = 0;
    }
    if ((v57 | (unint64_t)v31) < v18)
    {
      __int16 v58 = *v13 << 8;
      __int16 v59 = v13[1] << 8;
      *uint64_t v17 = v58;
      v17[1] = v59;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = a7[2] + v28 * v18 + v19;
    uint64_t v30 = *a7 + *a8 * v18 + v19;
    uint64_t v31 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = -1;
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v30 += v27;
      v29 += v28;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v33 = v12 & 1;
  if (v8 >= v33) {
    uint64_t v34 = v12 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  char v35 = v9;
  unint64_t v36 = v24 >> 1;
  unint64_t v37 = (v24 - v10) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v12)
  {
    if (v35)
    {
      uint64_t v38 = v14 + 2;
      __int16 v40 = v14[1] << 8;
      *uint64_t v21 = *v14 << 8;
      v21[1] = v40;
      __int16 v39 = v21 + 2;
      if (!v36)
      {
LABEL_25:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v38 = v14;
      __int16 v39 = v21;
      if (!v36) {
        goto LABEL_25;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      __int16 v42 = v38[1] << 8;
      _WORD *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v34)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v34;
    do
    {
      __int16 v46 = v14;
      uint64_t v47 = v21;
      if (v35)
      {
        __int16 v46 = v14 + 2;
        __int16 v48 = v14[1] << 8;
        *uint64_t v21 = *v14 << 8;
        v21[1] = v48;
        uint64_t v47 = v21 + 2;
      }
      if (v36)
      {
        uint64_t v49 = -(uint64_t)v36;
        do
        {
          __int16 v50 = v46[1] << 8;
          *uint64_t v47 = *v46 << 8;
          v47[1] = v50;
          v46 += 2;
          v47 += 2;
          BOOL v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if (v35)
    {
      __int16 v51 = *v14;
      __int16 v52 = v14[1];
      v14 += 2;
      *uint64_t v21 = v51 << 8;
      v21[1] = v52 << 8;
      v21 += 2;
    }
    if (v36)
    {
      uint64_t v53 = -(uint64_t)v36;
      do
      {
        __int16 v54 = v14[1] << 8;
        *uint64_t v21 = *v14 << 8;
        v21[1] = v54;
        v14 += 2;
        v21 += 2;
        BOOL v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_x4as(int32x2_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, uint64_t a6, void *a7, void *a8, uint64_t *a9)
{
  uint64_t v10 = a3[4];
  uint64_t v9 = a3[5];
  unint64_t v11 = a3[3];
  uint64_t v12 = a5[1];
  uint64_t v13 = (unsigned __int8 *)(a4[1] + v12 * v9 + (v10 & 0xFFFFFFFE));
  uint64_t v14 = a7[4];
  uint64_t v15 = a7[5];
  uint64_t v16 = a9[1];
  uint64_t v17 = (_WORD *)(a8[1] + v16 * v15 + 4 * v14);
  unint64_t v18 = a3[2] + v10 - (v10 & 0xFFFFFFFE) + ((a3[2] + v10) & 1);
  if (v18 >= a7[2]) {
    unint64_t v18 = a7[2];
  }
  if (v11 >= a7[3]) {
    unint64_t v11 = a7[3];
  }
  if (v11)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a5;
    uint64_t v21 = *a9;
    uint64_t v22 = a9[2];
    uint64_t v23 = a8[2] + v22 * v15 + 2 * v14;
    uint64_t v24 = *a8 + *a9 * v15 + 2 * v14;
    uint64_t v25 = *a4 + v20 * v9 + (v10 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          *(_WORD *)(v23 + 2 * i) = -1;
          *(_WORD *)(v24 + 2 * i) = *(unsigned __int8 *)(v25 + i) << 8;
        }
      }
      v25 += v20;
      v24 += v21;
      v23 += v22;
      ++v19;
    }
    while (v19 != v11);
  }
  unint64_t v27 = v9 & 1;
  if (v11 >= v27) {
    uint64_t v28 = v9 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v10;
  unint64_t v30 = v18 >> 1;
  uint64_t v31 = v10 & 1;
  if (v18 >> 1 >= (v18 - v31) >> 1) {
    unint64_t v30 = (v18 - v31) >> 1;
  }
  if (v9)
  {
    if (v29)
    {
      uint64_t v32 = v13 + 2;
      __int16 v39 = v13[1] << 8;
      *uint64_t v17 = *v13 << 8;
      v17[1] = v39;
      unint64_t v33 = v17 + 2;
      if (v30)
      {
LABEL_19:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          __int16 v35 = *v32;
          __int16 v36 = v32[1];
          v32 += 2;
          *unint64_t v33 = v35 << 8;
          v33[1] = v36 << 8;
          v33 += 2;
          BOOL v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v30;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v32 = v13;
      unint64_t v33 = v17;
      if (v30) {
        goto LABEL_19;
      }
    }
    uint64_t v38 = 0;
LABEL_25:
    if ((v38 | (unint64_t)v31) < v18)
    {
      __int16 v40 = *v32 << 8;
      __int16 v41 = v32[1] << 8;
      *unint64_t v33 = v40;
      v33[1] = v41;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v28)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v11 - v28;
    do
    {
      unint64_t v44 = v13;
      uint64_t v45 = (double *)v17;
      if (v29)
      {
        unint64_t v44 = v13 + 2;
        __int16 v46 = v13[1] << 8;
        *uint64_t v17 = *v13 << 8;
        v17[1] = v46;
        uint64_t v45 = (double *)(v17 + 2);
      }
      if (v30)
      {
        uint64_t v47 = -(uint64_t)v30;
        do
        {
          __int16 v48 = v44 + 2;
          a1.i8[0] = *v44;
          a1.i8[4] = v44[1];
          int16x4_t v49 = (int16x4_t)vshl_n_s32(a1, 8uLL);
          a1 = (int32x2_t)vuzp1_s16(v49, v49);
          *v45++ = *(double *)&a1;
          v44 += 2;
          BOOL v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      else
      {
        __int16 v48 = v44;
      }
      if ((v31 | (2 * v30)) < v18)
      {
        __int16 v50 = *v48 << 8;
        __int16 v51 = v48[1] << 8;
        *(_WORD *)uint64_t v45 = v50;
        *((_WORD *)v45 + 1) = v51;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v27 < v11)
  {
    if (v29)
    {
      __int16 v52 = *v13;
      __int16 v53 = v13[1];
      v13 += 2;
      *uint64_t v17 = v52 << 8;
      v17[1] = v53 << 8;
      v17 += 2;
    }
    if (v30)
    {
      uint64_t v54 = -(uint64_t)v30;
      do
      {
        __int16 v55 = *v13;
        __int16 v56 = v13[1];
        v13 += 2;
        *uint64_t v17 = v55 << 8;
        v17[1] = v56 << 8;
        v17 += 2;
        BOOL v37 = __CFADD__(v54++, 1);
      }
      while (!v37);
      uint64_t v57 = 2 * v30;
    }
    else
    {
      uint64_t v57 = 0;
    }
    if ((v57 | (unint64_t)v31) < v18)
    {
      __int16 v58 = *v13 << 8;
      __int16 v59 = v13[1] << 8;
      *uint64_t v17 = v58;
      v17[1] = v59;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = a7[2] + v28 * v18 + v19;
    uint64_t v30 = *a7 + *a8 * v18 + v19;
    uint64_t v31 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = -1;
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
        }
      }
      v31 += v26;
      v30 += v27;
      v29 += v28;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v33 = v12 & 1;
  if (v8 >= v33) {
    uint64_t v34 = v12 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  char v35 = v9;
  unint64_t v36 = v24 >> 1;
  unint64_t v37 = (v24 - v10) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v12)
  {
    if (v35)
    {
      uint64_t v38 = v14 + 2;
      __int16 v40 = v14[1] << 8;
      *uint64_t v21 = *v14 << 8;
      v21[1] = v40;
      __int16 v39 = v21 + 2;
      if (!v36)
      {
LABEL_25:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v38 = v14;
      __int16 v39 = v21;
      if (!v36) {
        goto LABEL_25;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      __int16 v42 = v38[1] << 8;
      _WORD *v39 = *v38 << 8;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v34)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v34;
    do
    {
      __int16 v46 = v14;
      uint64_t v47 = v21;
      if (v35)
      {
        __int16 v46 = v14 + 2;
        __int16 v48 = v14[1] << 8;
        *uint64_t v21 = *v14 << 8;
        v21[1] = v48;
        uint64_t v47 = v21 + 2;
      }
      if (v36)
      {
        uint64_t v49 = -(uint64_t)v36;
        do
        {
          __int16 v50 = v46[1] << 8;
          *uint64_t v47 = *v46 << 8;
          v47[1] = v50;
          v46 += 2;
          v47 += 2;
          BOOL v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if (v35)
    {
      __int16 v51 = *v14;
      __int16 v52 = v14[1];
      v14 += 2;
      *uint64_t v21 = v51 << 8;
      v21[1] = v52 << 8;
      v21 += 2;
    }
    if (v36)
    {
      uint64_t v53 = -(uint64_t)v36;
      do
      {
        __int16 v54 = v14[1] << 8;
        *uint64_t v21 = *v14 << 8;
        v21[1] = v54;
        v14 += 2;
        v21 += 2;
        BOOL v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a4[1];
  uint64_t v11 = (__int16 *)(a3[1] + v10 * v9 + (v8 & 0xFFFFFFFE));
  uint64_t v12 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v14 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v16 = a8[1];
  uint64_t v17 = (__int16 *)(a7[1] + v16 * v13 + 2 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= v14) {
    size_t v18 = v14;
  }
  else {
    size_t v18 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (a2[3] >= v15) {
    unint64_t v19 = v15;
  }
  else {
    unint64_t v19 = a2[3];
  }
  if (v19)
  {
    uint64_t v49 = a8[1];
    unint64_t v50 = v19;
    uint64_t v51 = a4[1];
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    unint64_t v23 = (char *)(a7[2] + v22 * v13 + v12);
    unint64_t v24 = (char *)(*a7 + *a8 * v13 + v12);
    uint64_t v25 = (char *)(*a3 + *a4 * v9 + (v8 & 0xFFFFFFFE));
    do
    {
      memcpy(v24, v25, v18);
      memset(v23, 255, v18);
      v25 += v20;
      v24 += v21;
      v23 += v22;
      --v19;
    }
    while (v19);
    uint64_t v16 = v49;
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    unint64_t v19 = v50;
    uint64_t v10 = v51;
  }
  unint64_t v26 = v9 & 1;
  if (v19 >= v26) {
    uint64_t v27 = v9 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v8;
  size_t v29 = v18 >> 1;
  uint64_t v30 = v8 & 1;
  if (v18 >> 1 >= (v18 - v30) >> 1) {
    size_t v29 = (v18 - v30) >> 1;
  }
  if (v9)
  {
    uint64_t v31 = v11;
    if (v28)
    {
      uint64_t v31 = v11 + 1;
      *uint64_t v17 = *v11;
      uint64_t v32 = v17 + 1;
      if (v29)
      {
LABEL_19:
        uint64_t v33 = -(uint64_t)v29;
        do
        {
          __int16 v34 = *v31++;
          *v32++ = v34;
          BOOL v35 = __CFADD__(v33++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v29;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v32 = v17;
      if (v29) {
        goto LABEL_19;
      }
    }
    uint64_t v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v30) < v18) {
      __int16 *v32 = *v31;
    }
    uint64_t v11 = (__int16 *)((char *)v11 + v10);
    uint64_t v17 = (__int16 *)((char *)v17 + v16);
  }
  if (v19 == v27)
  {
    unint64_t v37 = 0;
  }
  else
  {
    uint64_t v38 = 0;
    unint64_t v37 = v19 - v27;
    do
    {
      __int16 v39 = (char *)v11;
      __int16 v40 = v17;
      if (v28)
      {
        __int16 v39 = (char *)(v11 + 1);
        *uint64_t v17 = *v11;
        __int16 v40 = v17 + 1;
      }
      if (v29)
      {
        uint64_t v41 = -(uint64_t)v29;
        do
        {
          char v42 = *v39;
          char v43 = v39[1];
          v39 += 2;
          *(unsigned char *)__int16 v40 = v42;
          *((unsigned char *)v40 + 1) = v43;
          *((unsigned char *)v40 + 2) = v42;
          *((unsigned char *)v40 + 3) = v43;
          v40 += 2;
          BOOL v35 = __CFADD__(v41++, 1);
        }
        while (!v35);
      }
      if ((v30 | (2 * v29)) < v18) {
        *__int16 v40 = *(_WORD *)v39;
      }
      uint64_t v11 = (__int16 *)((char *)v11 + v10);
      uint64_t v17 = (__int16 *)((char *)v17 + v16);
      ++v38;
    }
    while (v38 != v37);
  }
  if (v37 + v26 < v19)
  {
    if (v28)
    {
      __int16 v44 = *v11++;
      *v17++ = v44;
    }
    if (v29)
    {
      uint64_t v45 = -(uint64_t)v29;
      do
      {
        __int16 v46 = *v11++;
        *v17++ = v46;
        BOOL v35 = __CFADD__(v45++, 1);
      }
      while (!v35);
      v29 *= 2;
    }
    if ((v29 | v30) < v18) {
      *uint64_t v17 = *v11;
    }
  }
  return 0;
}

uint64_t vt_Copy_422v_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (__int16 *)(a3[1] + v12 * v11 + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v14 = *(void *)(a6 + 24);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = a8[1];
  unint64_t v19 = (__int16 *)(a7[1] + v18 * v17 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v20 = v16 - v15;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v20) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= v14) {
    unint64_t v22 = v14;
  }
  else {
    unint64_t v22 = *(void *)(a2 + 24);
  }
  if (v22)
  {
    uint64_t v49 = a8[1];
    unint64_t v50 = v22;
    uint64_t v51 = a4[1];
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = a8[2];
    unint64_t v26 = (char *)(a7[2] + v25 * v17 + v15);
    uint64_t v27 = (char *)(*a7 + *a8 * v17 + v15);
    char v28 = (char *)(*a3 + *a4 * v11 + v10);
    do
    {
      memcpy(v27, v28, v21);
      memset(v26, 255, v21);
      v28 += v23;
      v27 += v24;
      v26 += v25;
      --v22;
    }
    while (v22);
    uint64_t v18 = v49;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
    unint64_t v22 = v50;
    uint64_t v12 = v51;
  }
  unint64_t v29 = v11 & 1;
  if (v22 >= v29) {
    uint64_t v30 = v11 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v8;
  size_t v32 = v21 >> 1;
  if (v21 >> 1 >= (v21 - v9) >> 1) {
    size_t v32 = (v21 - v9) >> 1;
  }
  if (v11)
  {
    uint64_t v33 = v13;
    if (v31)
    {
      uint64_t v33 = v13 + 1;
      *unint64_t v19 = *v13;
      __int16 v34 = v19 + 1;
      if (!v32)
      {
LABEL_24:
        uint64_t v13 = (__int16 *)((char *)v13 + v12);
        unint64_t v19 = (__int16 *)((char *)v19 + v18);
        goto LABEL_25;
      }
    }
    else
    {
      __int16 v34 = v19;
      if (!v32) {
        goto LABEL_24;
      }
    }
    uint64_t v35 = -(uint64_t)v32;
    do
    {
      __int16 v36 = *v33++;
      *v34++ = v36;
      BOOL v37 = __CFADD__(v35++, 1);
    }
    while (!v37);
    goto LABEL_24;
  }
LABEL_25:
  if (v22 == v30)
  {
    unint64_t v38 = 0;
  }
  else
  {
    uint64_t v39 = 0;
    unint64_t v38 = v22 - v30;
    do
    {
      __int16 v40 = v13;
      uint64_t v41 = v19;
      if (v31)
      {
        __int16 v40 = v13 + 1;
        *unint64_t v19 = *v13;
        uint64_t v41 = v19 + 1;
      }
      if (v32)
      {
        uint64_t v42 = -(uint64_t)v32;
        do
        {
          __int16 v43 = *v40++;
          *v41++ = v43;
          BOOL v37 = __CFADD__(v42++, 1);
        }
        while (!v37);
      }
      uint64_t v13 = (__int16 *)((char *)v13 + v12);
      unint64_t v19 = (__int16 *)((char *)v19 + v18);
      ++v39;
    }
    while (v39 != v38);
  }
  if (v38 + v29 < v22)
  {
    if (v31)
    {
      __int16 v44 = *v13++;
      *v19++ = v44;
    }
    if (v32)
    {
      uint64_t v45 = -(uint64_t)v32;
      do
      {
        __int16 v46 = *v13++;
        *v19++ = v46;
        BOOL v37 = __CFADD__(v45++, 1);
      }
      while (!v37);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_422v_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v23 = v18 - v17;
  }
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  else {
    unint64_t v24 = v14 - v13;
  }
  if (v24)
  {
    unint64_t v55 = v24;
    uint64_t v25 = *a4;
    uint64_t v56 = a8[1];
    uint64_t v57 = *a4;
    if (v13 >= v9) {
      uint64_t v25 = 0;
    }
    unint64_t v26 = (char *)(*a3 + *a4 * v13 + v11 + v25);
    uint64_t v27 = a8[2];
    char v28 = (char *)(a7[2] + v27 * v19 + v17);
    uint64_t v29 = *a8;
    uint64_t v30 = (char *)(*a7 + *a8 * v19 + v17);
    uint64_t v31 = -(uint64_t)v24;
    do
    {
      memcpy(v30, v26, v23);
      memset(v28, 255, v23);
      v26 += v57;
      v30 += v29;
      v28 += v27;
      BOOL v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    unint64_t v24 = v55;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
    uint64_t v21 = v56;
  }
  if (v24 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v23 >> 1 >= (v23 - v10) >> 1) {
    size_t v34 = (v23 - v10) >> 1;
  }
  else {
    size_t v34 = v23 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      uint64_t v35 = v16 + 2;
      unsigned int v37 = (v16[1] + v16[v15 + 1] + 1) >> 1;
      unsigned char *v22 = (*v16 + v16[v15] + 1) >> 1;
      v22[1] = v37;
      __int16 v36 = v22 + 2;
      if (!v34)
      {
LABEL_28:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v35 = v16;
      __int16 v36 = v22;
      if (!v34) {
        goto LABEL_28;
      }
    }
    uint64_t v38 = -(uint64_t)v34;
    do
    {
      int v39 = *v35;
      int v40 = v35[1];
      int v41 = v35[v15];
      int v42 = v35[v15 + 1];
      v35 += 2;
      unsigned char *v36 = (v39 + v41 + 1) >> 1;
      v36[1] = (v40 + v42 + 1) >> 1;
      v36 += 2;
      BOOL v32 = __CFADD__(v38++, 1);
    }
    while (!v32);
    goto LABEL_28;
  }
LABEL_29:
  if (v24 != v33)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v24 - v33;
    do
    {
      uint64_t v45 = v16;
      __int16 v46 = v22;
      if (v8)
      {
        uint64_t v45 = v16 + 2;
        unsigned int v47 = (v16[1] + v16[v15 + 1] + 1) >> 1;
        unsigned char *v22 = (*v16 + v16[v15] + 1) >> 1;
        v22[1] = v47;
        __int16 v46 = v22 + 2;
      }
      if (v34)
      {
        uint64_t v48 = -(uint64_t)v34;
        do
        {
          int v49 = *v45;
          int v50 = v45[1];
          int v51 = v45[v15];
          int v52 = v45[v15 + 1];
          v45 += 2;
          unsigned char *v46 = (v49 + v51 + 1) >> 1;
          v46[1] = (v50 + v52 + 1) >> 1;
          v46 += 2;
          BOOL v32 = __CFADD__(v48++, 1);
        }
        while (!v32);
      }
      v16 += 2 * v15;
      v22 += v21;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyDec_422v_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (__int16 *)(a3[1] + v15 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v23 = v18 - v17;
  }
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  unint64_t v24 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    unint64_t v48 = v24;
    uint64_t v49 = a4[1];
    uint64_t v50 = a8[1];
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = (char *)(*a3 + *a4 * v13 + v11 + v28);
    uint64_t v30 = (char *)(a7[2] + v27 * v19 + v17);
    uint64_t v31 = (char *)(*a7 + v26 * v19 + v17);
    uint64_t v32 = -(uint64_t)v24;
    do
    {
      memcpy(v31, v29, v23);
      memset(v30, 255, v23);
      v29 += v25;
      v31 += v26;
      v30 += v27;
      BOOL v33 = __CFADD__(v32++, 1);
    }
    while (!v33);
    unint64_t v24 = v48;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
    uint64_t v15 = v49;
    uint64_t v21 = v50;
  }
  if (v24 >= v12) {
    unint64_t v34 = v12;
  }
  else {
    unint64_t v34 = 0;
  }
  if (v23 >> 1 >= (v23 - v10) >> 1) {
    size_t v35 = (v23 - v10) >> 1;
  }
  else {
    size_t v35 = v23 >> 1;
  }
  if (v12)
  {
    __int16 v36 = v16;
    if (v8)
    {
      __int16 v36 = v16 + 1;
      __int16 *v22 = *v16;
      unsigned int v37 = v22 + 1;
      if (!v35)
      {
LABEL_28:
        v16 += v15;
        unint64_t v22 = (__int16 *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v37 = v22;
      if (!v35) {
        goto LABEL_28;
      }
    }
    uint64_t v38 = -(uint64_t)v35;
    do
    {
      __int16 v39 = *v36++;
      *v37++ = v39;
      BOOL v33 = __CFADD__(v38++, 1);
    }
    while (!v33);
    goto LABEL_28;
  }
LABEL_29:
  if (v24 != v34)
  {
    unint64_t v40 = 0;
    unint64_t v41 = v24 - v34;
    do
    {
      int v42 = v16;
      unint64_t v43 = v22;
      if (v8)
      {
        int v42 = v16 + 1;
        __int16 *v22 = *v16;
        unint64_t v43 = v22 + 1;
      }
      if (v35)
      {
        uint64_t v44 = -(uint64_t)v35;
        do
        {
          __int16 v45 = *v42++;
          *v43++ = v45;
          BOOL v33 = __CFADD__(v44++, 1);
        }
        while (!v33);
      }
      v16 += v15;
      unint64_t v22 = (__int16 *)((char *)v22 + v21);
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_Copy_422f_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2]) {
    unint64_t v9 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v10 = a6[3];
  }
  else {
    uint64_t v10 = a2[3];
  }
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a4;
    uint64_t v13 = a4[1];
    uint64_t v14 = *a8;
    uint64_t v15 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v16 = a2[5];
    uint64_t v17 = (unsigned __int8 *)(a3[1] + v13 * v16 + v8);
    uint64_t v18 = *a3 + *a4 * v16 + v8;
    do
    {
      if (v9)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        LOWORD(v21) = 0;
        LOWORD(v22) = 0;
        size_t v23 = v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            int v24 = *v23;
            int v25 = v23[1];
            v23 += 2;
            int v22 = ((16843010 * (unint64_t)(57344 * v24)) >> 32) + 4096;
            int v21 = ((16843010 * (unint64_t)(57344 * v25)) >> 32) + 4096;
          }
          uint64_t v26 = (_WORD *)(v15 + v19);
          unint64_t v27 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v18 + v20))) >> 32;
          *uint64_t v26 = -1;
          v26[1] = v27 + 4096;
          v26[2] = v22;
          v26[3] = v21;
          ++v20;
          v19 += 8;
        }
        while (v9 != v20);
      }
      v18 += v12;
      v15 += v14;
      v17 += v13;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_422f_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2]) {
    unint64_t v9 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v10 = a6[3];
  }
  else {
    uint64_t v10 = a2[3];
  }
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a4;
    uint64_t v13 = a4[1];
    uint64_t v14 = *a8;
    uint64_t v15 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v16 = a2[5];
    uint64_t v17 = (unsigned __int8 *)(a3[1] + v13 * v16 + v8);
    uint64_t v18 = *a3 + *a4 * v16 + v8;
    do
    {
      if (v9)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        LOBYTE(v21) = 0;
        LOBYTE(v22) = 0;
        size_t v23 = v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            int v24 = *v23;
            int v25 = v23[1];
            v23 += 2;
            unsigned int v22 = ((7368928 * v24) >> 23) + 16;
            unsigned int v21 = ((7368928 * v25) >> 23) + 16;
          }
          uint64_t v26 = (unsigned char *)(v15 + v19);
          unsigned int v27 = (7204443 * *(unsigned __int8 *)(v18 + v20)) >> 23;
          *uint64_t v26 = -1;
          v26[1] = v27 + 16;
          v26[2] = v22;
          v26[3] = v21;
          ++v20;
          v19 += 4;
        }
        while (v9 != v20);
      }
      v18 += v12;
      v15 += v14;
      v17 += v13;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_422f_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    uint64_t v15 = *a8;
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    unint64_t v18 = a3[1] + v14 * v17 + (v9 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          unsigned int v22 = (_WORD *)(v16 + v20);
          unint64_t v23 = (16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v18 + i + 1))) >> 32;
          unint64_t v24 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v19 + i))) >> 32;
          unint64_t v25 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v19 + i + 1))) >> 32;
          _WORD *v22 = ((16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v18 + i))) >> 32) + 4096;
          v22[1] = v24 + 4096;
          v22[2] = v23 + 4096;
          void v22[3] = v25 + 4096;
          v20 += 8;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_422f_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    uint64_t v15 = *a8;
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + v10;
    uint64_t v17 = *(void *)(a2 + 40);
    unint64_t v18 = a3[1] + v14 * v17 + (v9 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          unsigned int v22 = (unsigned char *)(v16 + v20);
          unsigned int v23 = (7368928 * *(unsigned __int8 *)(v18 + i + 1)) >> 23;
          unsigned int v24 = (7204443 * *(unsigned __int8 *)(v19 + i)) >> 23;
          unsigned int v25 = (7204443 * *(unsigned __int8 *)(v19 + i + 1)) >> 23;
          unsigned char *v22 = ((7368928 * *(unsigned __int8 *)(v18 + i)) >> 23) + 16;
          v22[1] = v24 + 16;
          v22[2] = v23 + 16;
          void v22[3] = v25 + 16;
          v20 += 4;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_422f_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  unint64_t v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2]) {
    unint64_t v17 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v10 = a6[3];
  }
  if (v10)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v24 + i))) >> 32)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v10);
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v17 >> 1;
  uint64_t v29 = v9 & 1;
  if (v17 >> 1 >= (v17 - v29) >> 1) {
    unint64_t v28 = (v17 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      int v37 = v12[1];
      uint64_t v30 = v12 + 2;
      _WORD *v16 = ((16843010 * (unint64_t)(57344 * *v12)) >> 32) + 4096;
      v16[1] = ((16843010 * (unint64_t)(57344 * v37)) >> 32) + 4096;
      uint64_t v31 = v16 + 2;
      if (v28)
      {
LABEL_19:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30;
          int v34 = v30[1];
          v30 += 2;
          *uint64_t v31 = ((16843010 * (unint64_t)(57344 * v33)) >> 32) + 4096;
          v31[1] = ((16843010 * (unint64_t)(57344 * v34)) >> 32) + 4096;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v30 = v12;
      uint64_t v31 = v16;
      if (v28) {
        goto LABEL_19;
      }
    }
    uint64_t v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v17)
    {
      int v38 = *v30;
      int v39 = v30[1];
      *uint64_t v31 = ((16843010 * (unint64_t)(57344 * v38)) >> 32) + 4096;
      v31[1] = ((16843010 * (unint64_t)(57344 * v39)) >> 32) + 4096;
    }
    v12 += v11;
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v10 - v26;
    do
    {
      int v42 = v12;
      unint64_t v43 = v16;
      if (v27)
      {
        int v44 = v12[1];
        int v42 = v12 + 2;
        _WORD *v16 = ((16843010 * (unint64_t)(57344 * *v12)) >> 32) + 4096;
        v16[1] = ((16843010 * (unint64_t)(57344 * v44)) >> 32) + 4096;
        unint64_t v43 = v16 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          int v46 = v42[1];
          int v47 = ((16843010 * (unint64_t)(57344 * *v42)) >> 32) + 4096;
          *unint64_t v43 = ((16843010 * (unint64_t)(57344 * *v42)) >> 32) + 4096;
          int v48 = ((16843010 * (unint64_t)(57344 * v46)) >> 32) + 4096;
          v43[1] = v48;
          v42 += 2;
          _OWORD v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v17)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *unint64_t v43 = ((16843010 * (unint64_t)(57344 * v49)) >> 32) + 4096;
        v43[1] = ((16843010 * (unint64_t)(57344 * v50)) >> 32) + 4096;
      }
      v12 += v11;
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if (v27)
    {
      int v51 = *v12;
      int v52 = v12[1];
      v12 += 2;
      _WORD *v16 = ((16843010 * (unint64_t)(57344 * v51)) >> 32) + 4096;
      v16[1] = ((16843010 * (unint64_t)(57344 * v52)) >> 32) + 4096;
      v16 += 2;
    }
    if (v28)
    {
      uint64_t v53 = -(uint64_t)v28;
      do
      {
        int v54 = *v12;
        int v55 = v12[1];
        v12 += 2;
        _WORD *v16 = ((16843010 * (unint64_t)(57344 * v54)) >> 32) + 4096;
        v16[1] = ((16843010 * (unint64_t)(57344 * v55)) >> 32) + 4096;
        v16 += 2;
        BOOL v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      uint64_t v56 = 2 * v28;
    }
    else
    {
      uint64_t v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v17)
    {
      int v57 = *v12;
      int v58 = v12[1];
      _WORD *v16 = ((16843010 * (unint64_t)(57344 * v57)) >> 32) + 4096;
      v16[1] = ((16843010 * (unint64_t)(57344 * v58)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  unint64_t v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2]) {
    unint64_t v18 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v19 = a6[3];
  }
  else {
    unint64_t v19 = v10;
  }
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
          *(_WORD *)(v23 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v24 + i))) >> 32)
                                  + 4096;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
  }
  if (v19 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v18 >> 1;
  uint64_t v29 = v9 & 1;
  if (v18 >> 1 >= (v18 - v29) >> 1) {
    unint64_t v28 = (v18 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      int v37 = v13[1];
      uint64_t v30 = v13 + 2;
      *unint64_t v17 = ((16843010 * (unint64_t)(57344 * *v13)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v37)) >> 32) + 4096;
      uint64_t v31 = v17 + 2;
      if (v28)
      {
LABEL_20:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30;
          int v34 = v30[1];
          v30 += 2;
          *uint64_t v31 = ((16843010 * (unint64_t)(57344 * v33)) >> 32) + 4096;
          v31[1] = ((16843010 * (unint64_t)(57344 * v34)) >> 32) + 4096;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v30 = v13;
      uint64_t v31 = v17;
      if (v28) {
        goto LABEL_20;
      }
    }
    uint64_t v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v18)
    {
      int v38 = *v30;
      int v39 = v30[1];
      *uint64_t v31 = ((16843010 * (unint64_t)(57344 * v38)) >> 32) + 4096;
      v31[1] = ((16843010 * (unint64_t)(57344 * v39)) >> 32) + 4096;
    }
    v13 += v12;
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v19 - v26;
    do
    {
      int v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        int v44 = v13[1];
        int v42 = v13 + 2;
        *unint64_t v17 = ((16843010 * (unint64_t)(57344 * *v13)) >> 32) + 4096;
        v17[1] = ((16843010 * (unint64_t)(57344 * v44)) >> 32) + 4096;
        unint64_t v43 = v17 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          int v46 = v42[1];
          int v47 = ((16843010 * (unint64_t)(57344 * *v42)) >> 32) + 4096;
          *unint64_t v43 = ((16843010 * (unint64_t)(57344 * *v42)) >> 32) + 4096;
          int v48 = ((16843010 * (unint64_t)(57344 * v46)) >> 32) + 4096;
          v43[1] = v48;
          v42 += 2;
          _OWORD v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v18)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *unint64_t v43 = ((16843010 * (unint64_t)(57344 * v49)) >> 32) + 4096;
        v43[1] = ((16843010 * (unint64_t)(57344 * v50)) >> 32) + 4096;
      }
      v13 += v12;
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v19)
  {
    if (v27)
    {
      int v51 = *v13;
      int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = ((16843010 * (unint64_t)(57344 * v51)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v52)) >> 32) + 4096;
      v17 += 2;
    }
    if (v28)
    {
      uint64_t v53 = -(uint64_t)v28;
      do
      {
        int v54 = *v13;
        int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = ((16843010 * (unint64_t)(57344 * v54)) >> 32) + 4096;
        v17[1] = ((16843010 * (unint64_t)(57344 * v55)) >> 32) + 4096;
        v17 += 2;
        BOOL v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v28 *= 2;
    }
    if ((v28 | v29) < v18)
    {
      int v56 = *v13;
      int v57 = v13[1];
      *unint64_t v17 = ((16843010 * (unint64_t)(57344 * v56)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v57)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  unint64_t v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2]) {
    unint64_t v18 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v10 = a6[3];
  }
  if (v10)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
          *(_WORD *)(v22 + 2 * i) = *(unsigned __int8 *)(v23 + i) | (*(unsigned __int8 *)(v23 + i) << 8);
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v10);
  }
  unint64_t v25 = v8 & 1;
  if (v10 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v18 >> 1;
  uint64_t v29 = v9 & 1;
  if (v18 >> 1 >= (v18 - v29) >> 1) {
    unint64_t v28 = (v18 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      uint64_t v30 = v13 + 2;
      __int16 v37 = v13[1] | (v13[1] << 8);
      *unint64_t v17 = *v13 | (*v13 << 8);
      v17[1] = v37;
      uint64_t v31 = v17 + 2;
      if (v28)
      {
LABEL_19:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          __int16 v33 = *v30;
          __int16 v34 = v30[1];
          v30 += 2;
          *uint64_t v31 = v33 | (v33 << 8);
          v31[1] = v34 | (v34 << 8);
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v30 = v13;
      uint64_t v31 = v17;
      if (v28) {
        goto LABEL_19;
      }
    }
    uint64_t v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v18)
    {
      __int16 v38 = *v30 | (*v30 << 8);
      __int16 v39 = v30[1] | (v30[1] << 8);
      *uint64_t v31 = v38;
      v31[1] = v39;
    }
    v13 += v12;
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v10 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v10 - v26;
    do
    {
      int v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        int v42 = v13 + 2;
        __int16 v44 = v13[1] | (v13[1] << 8);
        *unint64_t v17 = *v13 | (*v13 << 8);
        v17[1] = v44;
        unint64_t v43 = v17 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          __int16 v46 = *v42 | (*v42 << 8);
          __int16 v47 = v42[1] | (v42[1] << 8);
          *unint64_t v43 = v46;
          v43[1] = v47;
          v42 += 2;
          _OWORD v43[2] = v46;
          v43[3] = v47;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v18)
      {
        __int16 v48 = *v42 | (*v42 << 8);
        __int16 v49 = v42[1] | (v42[1] << 8);
        *unint64_t v43 = v48;
        v43[1] = v49;
      }
      v13 += v12;
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v10)
  {
    if (v27)
    {
      __int16 v50 = *v13;
      __int16 v51 = v13[1];
      v13 += 2;
      *unint64_t v17 = v50 | (v50 << 8);
      v17[1] = v51 | (v51 << 8);
      v17 += 2;
    }
    if (v28)
    {
      uint64_t v52 = -(uint64_t)v28;
      do
      {
        __int16 v53 = *v13;
        __int16 v54 = v13[1];
        v13 += 2;
        *unint64_t v17 = v53 | (v53 << 8);
        v17[1] = v54 | (v54 << 8);
        v17 += 2;
        BOOL v35 = __CFADD__(v52++, 1);
      }
      while (!v35);
      uint64_t v55 = 2 * v28;
    }
    else
    {
      uint64_t v55 = 0;
    }
    if ((v55 | (unint64_t)v29) < v18)
    {
      __int16 v56 = *v13 | (*v13 << 8);
      __int16 v57 = v13[1] | (v13[1] << 8);
      *unint64_t v17 = v56;
      v17[1] = v57;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = a7[2] + v28 * v18 + v19;
    uint64_t v30 = *a7 + *a8 * v18 + v19;
    uint64_t v31 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = -1;
          *(_WORD *)(v30 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
        }
      }
      v31 += v26;
      v30 += v27;
      v29 += v28;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v33 = v12 & 1;
  if (v8 >= v33) {
    uint64_t v34 = v12 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  char v35 = v9;
  unint64_t v36 = v24 >> 1;
  unint64_t v37 = (v24 - v10) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v12)
  {
    if (v35)
    {
      int v40 = v14[1];
      __int16 v38 = v14 + 2;
      *uint64_t v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
      v21[1] = ((16843010 * (unint64_t)(57344 * v40)) >> 32) + 4096;
      __int16 v39 = v21 + 2;
      if (!v36)
      {
LABEL_25:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      __int16 v38 = v14;
      __int16 v39 = v21;
      if (!v36) {
        goto LABEL_25;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      unint64_t v42 = (16843010 * (unint64_t)(57344 * v38[1])) >> 32;
      _WORD *v39 = ((16843010 * (unint64_t)(57344 * *v38)) >> 32) + 4096;
      v39[1] = v42 + 4096;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v34)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v34;
    do
    {
      __int16 v46 = v14;
      __int16 v47 = v21;
      if (v35)
      {
        int v48 = v14[1];
        __int16 v46 = v14 + 2;
        *uint64_t v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        v21[1] = ((16843010 * (unint64_t)(57344 * v48)) >> 32) + 4096;
        __int16 v47 = v21 + 2;
      }
      if (v36)
      {
        uint64_t v49 = -(uint64_t)v36;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(57344 * v46[1])) >> 32;
          *__int16 v47 = ((16843010 * (unint64_t)(57344 * *v46)) >> 32) + 4096;
          v47[1] = v50 + 4096;
          v46 += 2;
          v47 += 2;
          BOOL v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if (v35)
    {
      int v51 = *v14;
      int v52 = v14[1];
      v14 += 2;
      *uint64_t v21 = ((16843010 * (unint64_t)(57344 * v51)) >> 32) + 4096;
      v21[1] = ((16843010 * (unint64_t)(57344 * v52)) >> 32) + 4096;
      v21 += 2;
    }
    if (v36)
    {
      uint64_t v53 = -(uint64_t)v36;
      do
      {
        unint64_t v54 = (16843010 * (unint64_t)(57344 * v14[1])) >> 32;
        *uint64_t v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        v21[1] = v54 + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v29 + i))) >> 32)
                                  + 4096;
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v24 >> 1;
  unint64_t v35 = (v24 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      int v38 = v14[1];
      unint64_t v36 = v14 + 2;
      *uint64_t v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
      v21[1] = ((16843010 * (unint64_t)(57344 * v38)) >> 32) + 4096;
      unint64_t v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v36 = v14;
      unint64_t v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      unint64_t v40 = (16843010 * (unint64_t)(57344 * v36[1])) >> 32;
      *unint64_t v37 = ((16843010 * (unint64_t)(57344 * *v36)) >> 32) + 4096;
      v37[1] = v40 + 4096;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      unint64_t v44 = v14;
      uint64_t v45 = v21;
      if (v33)
      {
        int v46 = v14[1];
        unint64_t v44 = v14 + 2;
        *uint64_t v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        v21[1] = ((16843010 * (unint64_t)(57344 * v46)) >> 32) + 4096;
        uint64_t v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          unint64_t v48 = (16843010 * (unint64_t)(57344 * v44[1])) >> 32;
          _WORD *v45 = ((16843010 * (unint64_t)(57344 * *v44)) >> 32) + 4096;
          v45[1] = v48 + 4096;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      int v49 = *v14;
      int v50 = v14[1];
      v14 += 2;
      *uint64_t v21 = ((16843010 * (unint64_t)(57344 * v49)) >> 32) + 4096;
      v21[1] = ((16843010 * (unint64_t)(57344 * v50)) >> 32) + 4096;
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        unint64_t v52 = (16843010 * (unint64_t)(57344 * v14[1])) >> 32;
        *uint64_t v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        v21[1] = v52 + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v29 + i) | (*(unsigned __int8 *)(v29 + i) << 8);
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v24 >> 1;
  unint64_t v35 = (v24 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      unint64_t v36 = v14 + 2;
      __int16 v38 = v14[1] | (v14[1] << 8);
      *uint64_t v21 = *v14 | (*v14 << 8);
      v21[1] = v38;
      unint64_t v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v36 = v14;
      unint64_t v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      __int16 v40 = v36[1] | (v36[1] << 8);
      *unint64_t v37 = *v36 | (*v36 << 8);
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      unint64_t v44 = v14;
      uint64_t v45 = v21;
      if (v33)
      {
        unint64_t v44 = v14 + 2;
        __int16 v46 = v14[1] | (v14[1] << 8);
        *uint64_t v21 = *v14 | (*v14 << 8);
        v21[1] = v46;
        uint64_t v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          __int16 v48 = v44[1] | (v44[1] << 8);
          _WORD *v45 = *v44 | (*v44 << 8);
          v45[1] = v48;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      __int16 v49 = *v14;
      __int16 v50 = v14[1];
      v14 += 2;
      *uint64_t v21 = v49 | (v49 << 8);
      v21[1] = v50 | (v50 << 8);
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        __int16 v52 = v14[1] | (v14[1] << 8);
        *uint64_t v21 = *v14 | (*v14 << 8);
        v21[1] = v52;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - v10;
  unint64_t v24 = v17 - v16;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v10 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1)) {
    uint64_t v34 = v9 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  unint64_t v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v24 >> 1;
  }
  if (v9)
  {
    if (v8)
    {
      unint64_t v37 = v15 + 2;
      unsigned int v39 = (((16843010 * (unint64_t)(57344 * v15[1])) >> 32)
                         + 8193
                         + ((16843010 * (unint64_t)(57344 * v15[v14 + 1])) >> 32)) >> 1;
      _WORD *v22 = (((16843010 * (unint64_t)(57344 * *v15)) >> 32)
                          + 8193
                          + ((16843010 * (unint64_t)(57344 * v15[v14])) >> 32)) >> 1;
      v22[1] = v39;
      __int16 v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v37 = v15;
      __int16 v38 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v40 = -(uint64_t)v36;
    do
    {
      int v41 = *v37;
      int v42 = v37[1];
      int v43 = v37[v14];
      int v44 = v37[v14 + 1];
      v37 += 2;
      _WORD *v38 = (((16843010 * (unint64_t)(57344 * v41)) >> 32)
                          + 8193
                          + ((16843010 * (unint64_t)(57344 * v43)) >> 32)) >> 1;
      v38[1] = (((16843010 * (unint64_t)(57344 * v42)) >> 32)
                            + 8193
                            + ((16843010 * (unint64_t)(57344 * v44)) >> 32)) >> 1;
      v38 += 2;
      BOOL v45 = __CFADD__(v40++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    unint64_t v46 = 0;
    unint64_t v47 = v25 - v34;
    do
    {
      __int16 v48 = v15;
      __int16 v49 = v22;
      if (v8)
      {
        __int16 v48 = v15 + 2;
        unsigned int v50 = (((16843010 * (unint64_t)(57344 * v15[1])) >> 32)
                           + 8193
                           + ((16843010 * (unint64_t)(57344 * v15[v14 + 1])) >> 32)) >> 1;
        _WORD *v22 = (((16843010 * (unint64_t)(57344 * *v15)) >> 32)
                            + 8193
                            + ((16843010 * (unint64_t)(57344 * v15[v14])) >> 32)) >> 1;
        v22[1] = v50;
        __int16 v49 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v51 = -(uint64_t)v36;
        do
        {
          int v52 = *v48;
          int v53 = v48[1];
          int v54 = v48[v14];
          int v55 = v48[v14 + 1];
          v48 += 2;
          *__int16 v49 = (((16843010 * (unint64_t)(57344 * v52)) >> 32)
                              + 8193
                              + ((16843010 * (unint64_t)(57344 * v54)) >> 32)) >> 1;
          v49[1] = (((16843010 * (unint64_t)(57344 * v53)) >> 32)
                                + 8193
                                + ((16843010 * (unint64_t)(57344 * v55)) >> 32)) >> 1;
          v49 += 2;
          BOOL v45 = __CFADD__(v51++, 1);
        }
        while (!v45);
      }
      v15 += 2 * v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - v10;
  unint64_t v24 = v17 - v16;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v10 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1)) {
    uint64_t v34 = v9 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  unint64_t v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v24 >> 1;
  }
  if (v9)
  {
    if (v8)
    {
      int v39 = v15[1];
      unint64_t v37 = v15 + 2;
      _WORD *v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
      v22[1] = ((16843010 * (unint64_t)(57344 * v39)) >> 32) + 4096;
      __int16 v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v37 = v15;
      __int16 v38 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v40 = -(uint64_t)v36;
    do
    {
      unint64_t v41 = (16843010 * (unint64_t)(57344 * v37[1])) >> 32;
      _WORD *v38 = ((16843010 * (unint64_t)(57344 * *v37)) >> 32) + 4096;
      v38[1] = v41 + 4096;
      v37 += 2;
      v38 += 2;
      BOOL v42 = __CFADD__(v40++, 1);
    }
    while (!v42);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v25 - v34;
    uint64_t v45 = 2 * v14;
    do
    {
      unint64_t v46 = v15;
      unint64_t v47 = v22;
      if (v8)
      {
        int v48 = v15[1];
        unint64_t v46 = v15 + 2;
        _WORD *v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
        v22[1] = ((16843010 * (unint64_t)(57344 * v48)) >> 32) + 4096;
        unint64_t v47 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v49 = -(uint64_t)v36;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(57344 * v46[1])) >> 32;
          *unint64_t v47 = ((16843010 * (unint64_t)(57344 * *v46)) >> 32) + 4096;
          v47[1] = v50 + 4096;
          v46 += 2;
          v47 += 2;
          BOOL v42 = __CFADD__(v49++, 1);
        }
        while (!v42);
      }
      v15 += v45;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    uint64_t v32 = v30 + v10 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) | (*(unsigned __int8 *)(v32 + i) << 8);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      __int16 v38 = v16 + 2;
      unsigned int v40 = (257 * (v16[v15 + 1] + v16[1]) + 1) >> 1;
      *unint64_t v23 = (257 * (v16[v15] + *v16) + 1) >> 1;
      v23[1] = v40;
      int v39 = v23 + 2;
      if (!v37)
      {
LABEL_28:
        v16 += 2 * v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      __int16 v38 = v16;
      int v39 = v23;
      if (!v37) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      int v42 = *v38;
      int v43 = v38[1];
      int v44 = v38[v15];
      int v45 = v38[v15 + 1];
      v38 += 2;
      _WORD *v39 = (257 * (v44 + v42) + 1) >> 1;
      v39[1] = (257 * (v45 + v43) + 1) >> 1;
      v39 += 2;
      BOOL v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_28;
  }
LABEL_29:
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      uint64_t v49 = v16;
      unint64_t v50 = v23;
      if (v9)
      {
        uint64_t v49 = v16 + 2;
        unsigned int v51 = (257 * (v16[v15 + 1] + v16[1]) + 1) >> 1;
        *unint64_t v23 = (257 * (v16[v15] + *v16) + 1) >> 1;
        v23[1] = v51;
        unint64_t v50 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v52 = -(uint64_t)v37;
        do
        {
          int v53 = *v49;
          int v54 = v49[1];
          int v55 = v49[v15];
          int v56 = v49[v15 + 1];
          v49 += 2;
          *unint64_t v50 = (257 * (v55 + v53) + 1) >> 1;
          v50[1] = (257 * (v56 + v54) + 1) >> 1;
          v50 += 2;
          BOOL v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += 2 * v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    uint64_t v32 = v30 + v10 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) | (*(unsigned __int8 *)(v32 + i) << 8);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      __int16 v38 = v16 + 2;
      __int16 v40 = v16[1] | (v16[1] << 8);
      *unint64_t v23 = *v16 | (*v16 << 8);
      v23[1] = v40;
      int v39 = v23 + 2;
      if (!v37)
      {
LABEL_28:
        v16 += 2 * v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      __int16 v38 = v16;
      int v39 = v23;
      if (!v37) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      __int16 v42 = v38[1] | (v38[1] << 8);
      _WORD *v39 = *v38 | (*v38 << 8);
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v26 != v35)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v35;
    uint64_t v46 = 2 * v15;
    do
    {
      unint64_t v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        unint64_t v47 = v16 + 2;
        __int16 v49 = v16[1] | (v16[1] << 8);
        *unint64_t v23 = *v16 | (*v16 << 8);
        v23[1] = v49;
        unint64_t v48 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v50 = -(uint64_t)v37;
        do
        {
          __int16 v51 = v47[1] | (v47[1] << 8);
          _WORD *v48 = *v47 | (*v47 << 8);
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          BOOL v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      v16 += v46;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_Copy_422f_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  unint64_t v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2]) {
    unint64_t v17 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v10 = a6[3];
  }
  if (v10)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v24 + i))) >> 32)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v10);
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v17 >> 1;
  uint64_t v29 = v9 & 1;
  if (v17 >> 1 >= (v17 - v29) >> 1) {
    unint64_t v28 = (v17 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      int v37 = v12[1];
      uint64_t v30 = v12 + 2;
      _WORD *v16 = 16 * ((16843010 * (unint64_t)(3584 * *v12)) >> 32) + 4096;
      v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v37)) >> 32) + 4096;
      uint64_t v31 = v16 + 2;
      if (v28)
      {
LABEL_19:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30;
          int v34 = v30[1];
          v30 += 2;
          *uint64_t v31 = 16 * ((16843010 * (unint64_t)(3584 * v33)) >> 32) + 4096;
          v31[1] = 16 * ((16843010 * (unint64_t)(3584 * v34)) >> 32) + 4096;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v30 = v12;
      uint64_t v31 = v16;
      if (v28) {
        goto LABEL_19;
      }
    }
    uint64_t v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v17)
    {
      int v38 = *v30;
      int v39 = v30[1];
      *uint64_t v31 = 16 * ((16843010 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      v31[1] = 16 * ((16843010 * (unint64_t)(3584 * v39)) >> 32) + 4096;
    }
    v12 += v11;
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v10 - v26;
    do
    {
      __int16 v42 = v12;
      BOOL v43 = v16;
      if (v27)
      {
        int v44 = v12[1];
        __int16 v42 = v12 + 2;
        _WORD *v16 = 16 * ((16843010 * (unint64_t)(3584 * *v12)) >> 32) + 4096;
        v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v44)) >> 32) + 4096;
        BOOL v43 = v16 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          int v46 = v42[1];
          int v47 = 16 * ((16843010 * (unint64_t)(3584 * *v42)) >> 32) + 4096;
          *BOOL v43 = 16 * ((16843010 * (unint64_t)(3584 * *v42)) >> 32) + 4096;
          int v48 = 16 * ((16843010 * (unint64_t)(3584 * v46)) >> 32) + 4096;
          v43[1] = v48;
          v42 += 2;
          _OWORD v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v17)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *BOOL v43 = 16 * ((16843010 * (unint64_t)(3584 * v49)) >> 32) + 4096;
        v43[1] = 16 * ((16843010 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      }
      v12 += v11;
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if (v27)
    {
      int v51 = *v12;
      int v52 = v12[1];
      v12 += 2;
      _WORD *v16 = 16 * ((16843010 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      v16 += 2;
    }
    if (v28)
    {
      uint64_t v53 = -(uint64_t)v28;
      do
      {
        int v54 = *v12;
        int v55 = v12[1];
        v12 += 2;
        _WORD *v16 = 16 * ((16843010 * (unint64_t)(3584 * v54)) >> 32) + 4096;
        v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v55)) >> 32) + 4096;
        v16 += 2;
        BOOL v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      uint64_t v56 = 2 * v28;
    }
    else
    {
      uint64_t v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v17)
    {
      int v57 = *v12;
      int v58 = v12[1];
      _WORD *v16 = 16 * ((16843010 * (unint64_t)(3584 * v57)) >> 32) + 4096;
      v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v58)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  unint64_t v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2]) {
    unint64_t v18 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v19 = a6[3];
  }
  else {
    unint64_t v19 = v10;
  }
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
          *(_WORD *)(v23 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v24 + i))) >> 32)
                                  + 4096;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
  }
  if (v19 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v18 >> 1;
  uint64_t v29 = v9 & 1;
  if (v18 >> 1 >= (v18 - v29) >> 1) {
    unint64_t v28 = (v18 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      int v37 = v13[1];
      uint64_t v30 = v13 + 2;
      *unint64_t v17 = 16 * ((16843010 * (unint64_t)(3584 * *v13)) >> 32) + 4096;
      v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v37)) >> 32) + 4096;
      uint64_t v31 = v17 + 2;
      if (v28)
      {
LABEL_20:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30;
          int v34 = v30[1];
          v30 += 2;
          *uint64_t v31 = 16 * ((16843010 * (unint64_t)(3584 * v33)) >> 32) + 4096;
          v31[1] = 16 * ((16843010 * (unint64_t)(3584 * v34)) >> 32) + 4096;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v30 = v13;
      uint64_t v31 = v17;
      if (v28) {
        goto LABEL_20;
      }
    }
    uint64_t v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v18)
    {
      int v38 = *v30;
      int v39 = v30[1];
      *uint64_t v31 = 16 * ((16843010 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      v31[1] = 16 * ((16843010 * (unint64_t)(3584 * v39)) >> 32) + 4096;
    }
    v13 += v12;
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v19 - v26;
    do
    {
      __int16 v42 = v13;
      BOOL v43 = v17;
      if (v27)
      {
        int v44 = v13[1];
        __int16 v42 = v13 + 2;
        *unint64_t v17 = 16 * ((16843010 * (unint64_t)(3584 * *v13)) >> 32) + 4096;
        v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v44)) >> 32) + 4096;
        BOOL v43 = v17 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          int v46 = v42[1];
          int v47 = 16 * ((16843010 * (unint64_t)(3584 * *v42)) >> 32) + 4096;
          *BOOL v43 = 16 * ((16843010 * (unint64_t)(3584 * *v42)) >> 32) + 4096;
          int v48 = 16 * ((16843010 * (unint64_t)(3584 * v46)) >> 32) + 4096;
          v43[1] = v48;
          v42 += 2;
          _OWORD v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v18)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *BOOL v43 = 16 * ((16843010 * (unint64_t)(3584 * v49)) >> 32) + 4096;
        v43[1] = 16 * ((16843010 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      }
      v13 += v12;
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v19)
  {
    if (v27)
    {
      int v51 = *v13;
      int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = 16 * ((16843010 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      v17 += 2;
    }
    if (v28)
    {
      uint64_t v53 = -(uint64_t)v28;
      do
      {
        int v54 = *v13;
        int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = 16 * ((16843010 * (unint64_t)(3584 * v54)) >> 32) + 4096;
        v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v55)) >> 32) + 4096;
        v17 += 2;
        BOOL v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v28 *= 2;
    }
    if ((v28 | v29) < v18)
    {
      int v56 = *v13;
      int v57 = v13[1];
      *unint64_t v17 = 16 * ((16843010 * (unint64_t)(3584 * v56)) >> 32) + 4096;
      v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v57)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  unint64_t v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2]) {
    unint64_t v18 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v19 = a6[3];
  }
  else {
    unint64_t v19 = v10;
  }
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
          *(_WORD *)(v23 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v24 + i))) >> 32);
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
  }
  if (v19 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v18 >> 1;
  uint64_t v29 = v9 & 1;
  if (v18 >> 1 >= (v18 - v29) >> 1) {
    unint64_t v28 = (v18 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      int v37 = v13[1];
      uint64_t v30 = v13 + 2;
      *unint64_t v17 = 16 * ((16843010 * (unint64_t)(4095 * *v13)) >> 32);
      v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v37)) >> 32);
      uint64_t v31 = v17 + 2;
      if (v28)
      {
LABEL_20:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30;
          int v34 = v30[1];
          v30 += 2;
          *uint64_t v31 = 16 * ((16843010 * (unint64_t)(4095 * v33)) >> 32);
          v31[1] = 16 * ((16843010 * (unint64_t)(4095 * v34)) >> 32);
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v30 = v13;
      uint64_t v31 = v17;
      if (v28) {
        goto LABEL_20;
      }
    }
    uint64_t v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v18)
    {
      int v38 = *v30;
      int v39 = v30[1];
      *uint64_t v31 = 16 * ((16843010 * (unint64_t)(4095 * v38)) >> 32);
      v31[1] = 16 * ((16843010 * (unint64_t)(4095 * v39)) >> 32);
    }
    v13 += v12;
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v19 - v26;
    do
    {
      __int16 v42 = v13;
      BOOL v43 = v17;
      if (v27)
      {
        int v44 = v13[1];
        __int16 v42 = v13 + 2;
        *unint64_t v17 = 16 * ((16843010 * (unint64_t)(4095 * *v13)) >> 32);
        v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v44)) >> 32);
        BOOL v43 = v17 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          int v46 = v42[1];
          int v47 = 16 * ((16843010 * (unint64_t)(4095 * *v42)) >> 32);
          *BOOL v43 = 16 * ((16843010 * (unint64_t)(4095 * *v42)) >> 32);
          int v48 = 16 * ((16843010 * (unint64_t)(4095 * v46)) >> 32);
          v43[1] = v48;
          v42 += 2;
          _OWORD v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v18)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *BOOL v43 = 16 * ((16843010 * (unint64_t)(4095 * v49)) >> 32);
        v43[1] = 16 * ((16843010 * (unint64_t)(4095 * v50)) >> 32);
      }
      v13 += v12;
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v19)
  {
    if (v27)
    {
      int v51 = *v13;
      int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = 16 * ((16843010 * (unint64_t)(4095 * v51)) >> 32);
      v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v52)) >> 32);
      v17 += 2;
    }
    if (v28)
    {
      uint64_t v53 = -(uint64_t)v28;
      do
      {
        int v54 = *v13;
        int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = 16 * ((16843010 * (unint64_t)(4095 * v54)) >> 32);
        v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v55)) >> 32);
        v17 += 2;
        BOOL v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v28 *= 2;
    }
    if ((v28 | v29) < v18)
    {
      int v56 = *v13;
      int v57 = v13[1];
      *unint64_t v17 = 16 * ((16843010 * (unint64_t)(4095 * v56)) >> 32);
      v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v57)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = a7[2] + v28 * v18 + v19;
    uint64_t v30 = *a7 + *a8 * v18 + v19;
    uint64_t v31 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = -1;
          *(_WORD *)(v30 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
        }
      }
      v31 += v26;
      v30 += v27;
      v29 += v28;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v33 = v12 & 1;
  if (v8 >= v33) {
    uint64_t v34 = v12 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  char v35 = v9;
  unint64_t v36 = v24 >> 1;
  unint64_t v37 = (v24 - v10) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v12)
  {
    if (v35)
    {
      int v40 = v14[1];
      int v38 = v14 + 2;
      *uint64_t v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
      v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v40)) >> 32) + 4096;
      int v39 = v21 + 2;
      if (!v36)
      {
LABEL_25:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      int v38 = v14;
      int v39 = v21;
      if (!v36) {
        goto LABEL_25;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      unint64_t v42 = (16843010 * (unint64_t)(3584 * v38[1])) >> 32;
      _WORD *v39 = 16 * ((16843010 * (unint64_t)(3584 * *v38)) >> 32) + 4096;
      v39[1] = 16 * v42 + 4096;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v34)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v34;
    do
    {
      int v46 = v14;
      int v47 = v21;
      if (v35)
      {
        int v48 = v14[1];
        int v46 = v14 + 2;
        *uint64_t v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v48)) >> 32) + 4096;
        int v47 = v21 + 2;
      }
      if (v36)
      {
        uint64_t v49 = -(uint64_t)v36;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(3584 * v46[1])) >> 32;
          *int v47 = 16 * ((16843010 * (unint64_t)(3584 * *v46)) >> 32) + 4096;
          v47[1] = 16 * v50 + 4096;
          v46 += 2;
          v47 += 2;
          BOOL v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if (v35)
    {
      int v51 = *v14;
      int v52 = v14[1];
      v14 += 2;
      *uint64_t v21 = 16 * ((16843010 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      v21 += 2;
    }
    if (v36)
    {
      uint64_t v53 = -(uint64_t)v36;
      do
      {
        unint64_t v54 = (16843010 * (unint64_t)(3584 * v14[1])) >> 32;
        *uint64_t v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        v21[1] = 16 * v54 + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v29 + i))) >> 32)
                                  + 4096;
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v24 >> 1;
  unint64_t v35 = (v24 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      int v38 = v14[1];
      unint64_t v36 = v14 + 2;
      *uint64_t v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
      v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      unint64_t v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v36 = v14;
      unint64_t v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      unint64_t v40 = (16843010 * (unint64_t)(3584 * v36[1])) >> 32;
      *unint64_t v37 = 16 * ((16843010 * (unint64_t)(3584 * *v36)) >> 32) + 4096;
      v37[1] = 16 * v40 + 4096;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      unint64_t v44 = v14;
      uint64_t v45 = v21;
      if (v33)
      {
        int v46 = v14[1];
        unint64_t v44 = v14 + 2;
        *uint64_t v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v46)) >> 32) + 4096;
        uint64_t v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          unint64_t v48 = (16843010 * (unint64_t)(3584 * v44[1])) >> 32;
          _WORD *v45 = 16 * ((16843010 * (unint64_t)(3584 * *v44)) >> 32) + 4096;
          v45[1] = 16 * v48 + 4096;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      int v49 = *v14;
      int v50 = v14[1];
      v14 += 2;
      *uint64_t v21 = 16 * ((16843010 * (unint64_t)(3584 * v49)) >> 32) + 4096;
      v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        unint64_t v52 = (16843010 * (unint64_t)(3584 * v14[1])) >> 32;
        *uint64_t v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        v21[1] = 16 * v52 + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v29 + i))) >> 32);
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v24 >> 1;
  unint64_t v35 = (v24 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      int v38 = v14[1];
      unint64_t v36 = v14 + 2;
      *uint64_t v21 = 16 * ((16843010 * (unint64_t)(4095 * *v14)) >> 32);
      v21[1] = 16 * ((16843010 * (unint64_t)(4095 * v38)) >> 32);
      unint64_t v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v36 = v14;
      unint64_t v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      unint64_t v40 = (16843010 * (unint64_t)(4095 * v36[1])) >> 32;
      *unint64_t v37 = 16 * ((16843010 * (unint64_t)(4095 * *v36)) >> 32);
      v37[1] = 16 * v40;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      unint64_t v44 = v14;
      uint64_t v45 = v21;
      if (v33)
      {
        int v46 = v14[1];
        unint64_t v44 = v14 + 2;
        *uint64_t v21 = 16 * ((16843010 * (unint64_t)(4095 * *v14)) >> 32);
        v21[1] = 16 * ((16843010 * (unint64_t)(4095 * v46)) >> 32);
        uint64_t v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          unint64_t v48 = (16843010 * (unint64_t)(4095 * v44[1])) >> 32;
          _WORD *v45 = 16 * ((16843010 * (unint64_t)(4095 * *v44)) >> 32);
          v45[1] = 16 * v48;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      int v49 = *v14;
      int v50 = v14[1];
      v14 += 2;
      *uint64_t v21 = 16 * ((16843010 * (unint64_t)(4095 * v49)) >> 32);
      v21[1] = 16 * ((16843010 * (unint64_t)(4095 * v50)) >> 32);
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        unint64_t v52 = (16843010 * (unint64_t)(4095 * v14[1])) >> 32;
        *uint64_t v21 = 16 * ((16843010 * (unint64_t)(4095 * *v14)) >> 32);
        v21[1] = 16 * v52;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - v10;
  unint64_t v24 = v17 - v16;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v10 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1)) {
    uint64_t v34 = v9 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  unint64_t v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v24 >> 1;
  }
  if (v9)
  {
    if (v8)
    {
      unint64_t v37 = v15 + 2;
      int v39 = ((16843010 * (unint64_t)(3584 * v15[v14 + 1])) >> 32)
          + ((16843010 * (unint64_t)(3584 * v15[1])) >> 32);
      _WORD *v22 = (8
            * (((16843010 * (unint64_t)(3584 * v15[v14])) >> 32)
             + ((16843010 * (unint64_t)(3584 * *v15)) >> 32))
            + 4104) & 0xFFF0;
      v22[1] = (8 * v39 + 4104) & 0xFFF0;
      int v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v40 = -(uint64_t)v36;
    do
    {
      int v41 = *v37;
      int v42 = v37[1];
      int v43 = v37[v14];
      int v44 = v37[v14 + 1];
      v37 += 2;
      _WORD *v38 = (8
            * (((16843010 * (unint64_t)(3584 * v43)) >> 32)
             + ((16843010 * (unint64_t)(3584 * v41)) >> 32))
            + 4104) & 0xFFF0;
      v38[1] = (8
              * (((16843010 * (unint64_t)(3584 * v44)) >> 32)
               + ((16843010 * (unint64_t)(3584 * v42)) >> 32))
              + 4104) & 0xFFF0;
      v38 += 2;
      BOOL v45 = __CFADD__(v40++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    unint64_t v46 = 0;
    unint64_t v47 = v25 - v34;
    do
    {
      unint64_t v48 = v15;
      int v49 = v22;
      if (v8)
      {
        unint64_t v48 = v15 + 2;
        int v50 = ((16843010 * (unint64_t)(3584 * v15[v14 + 1])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v15[1])) >> 32);
        _WORD *v22 = (8
              * (((16843010 * (unint64_t)(3584 * v15[v14])) >> 32)
               + ((16843010 * (unint64_t)(3584 * *v15)) >> 32))
              + 4104) & 0xFFF0;
        v22[1] = (8 * v50 + 4104) & 0xFFF0;
        int v49 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v51 = -(uint64_t)v36;
        do
        {
          int v52 = *v48;
          int v53 = v48[1];
          int v54 = v48[v14];
          int v55 = v48[v14 + 1];
          v48 += 2;
          *int v49 = (8
                * (((16843010 * (unint64_t)(3584 * v54)) >> 32)
                 + ((16843010 * (unint64_t)(3584 * v52)) >> 32))
                + 4104) & 0xFFF0;
          v49[1] = (8
                  * (((16843010 * (unint64_t)(3584 * v55)) >> 32)
                   + ((16843010 * (unint64_t)(3584 * v53)) >> 32))
                  + 4104) & 0xFFF0;
          v49 += 2;
          BOOL v45 = __CFADD__(v51++, 1);
        }
        while (!v45);
      }
      v15 += 2 * v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - v10;
  unint64_t v24 = v17 - v16;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v10 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1)) {
    uint64_t v34 = v9 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  unint64_t v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v24 >> 1;
  }
  if (v9)
  {
    if (v8)
    {
      int v39 = v15[1];
      unint64_t v37 = v15 + 2;
      _WORD *v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
      v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v39)) >> 32) + 4096;
      int v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v40 = -(uint64_t)v36;
    do
    {
      unint64_t v41 = (16843010 * (unint64_t)(3584 * v37[1])) >> 32;
      _WORD *v38 = 16 * ((16843010 * (unint64_t)(3584 * *v37)) >> 32) + 4096;
      v38[1] = 16 * v41 + 4096;
      v37 += 2;
      v38 += 2;
      BOOL v42 = __CFADD__(v40++, 1);
    }
    while (!v42);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v25 - v34;
    uint64_t v45 = 2 * v14;
    do
    {
      unint64_t v46 = v15;
      unint64_t v47 = v22;
      if (v8)
      {
        int v48 = v15[1];
        unint64_t v46 = v15 + 2;
        _WORD *v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
        v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v48)) >> 32) + 4096;
        unint64_t v47 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v49 = -(uint64_t)v36;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(3584 * v46[1])) >> 32;
          *unint64_t v47 = 16 * ((16843010 * (unint64_t)(3584 * *v46)) >> 32) + 4096;
          v47[1] = 16 * v50 + 4096;
          v46 += 2;
          v47 += 2;
          BOOL v42 = __CFADD__(v49++, 1);
        }
        while (!v42);
      }
      v15 += v45;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - v10;
  unint64_t v24 = v17 - v16;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v10 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v31 + i))) >> 32);
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1)) {
    uint64_t v34 = v9 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  unint64_t v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v24 >> 1;
  }
  if (v9)
  {
    if (v8)
    {
      unint64_t v37 = v15 + 2;
      int v39 = ((16843010 * (unint64_t)(4095 * v15[v14 + 1])) >> 32)
          + ((16843010 * (unint64_t)(4095 * v15[1])) >> 32);
      _WORD *v22 = (8
            * (((16843010 * (unint64_t)(4095 * v15[v14])) >> 32)
             + ((16843010 * (unint64_t)(4095 * *v15)) >> 32))
            + 8) & 0xFFF0;
      v22[1] = (8 * v39 + 8) & 0xFFF0;
      int v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v40 = -(uint64_t)v36;
    do
    {
      int v41 = *v37;
      int v42 = v37[1];
      int v43 = v37[v14];
      int v44 = v37[v14 + 1];
      v37 += 2;
      _WORD *v38 = (8
            * (((16843010 * (unint64_t)(4095 * v43)) >> 32)
             + ((16843010 * (unint64_t)(4095 * v41)) >> 32))
            + 8) & 0xFFF0;
      v38[1] = (8
              * (((16843010 * (unint64_t)(4095 * v44)) >> 32)
               + ((16843010 * (unint64_t)(4095 * v42)) >> 32))
              + 8) & 0xFFF0;
      v38 += 2;
      BOOL v45 = __CFADD__(v40++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    unint64_t v46 = 0;
    unint64_t v47 = v25 - v34;
    do
    {
      int v48 = v15;
      uint64_t v49 = v22;
      if (v8)
      {
        int v48 = v15 + 2;
        int v50 = ((16843010 * (unint64_t)(4095 * v15[v14 + 1])) >> 32)
            + ((16843010 * (unint64_t)(4095 * v15[1])) >> 32);
        _WORD *v22 = (8
              * (((16843010 * (unint64_t)(4095 * v15[v14])) >> 32)
               + ((16843010 * (unint64_t)(4095 * *v15)) >> 32))
              + 8) & 0xFFF0;
        v22[1] = (8 * v50 + 8) & 0xFFF0;
        uint64_t v49 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v51 = -(uint64_t)v36;
        do
        {
          int v52 = *v48;
          int v53 = v48[1];
          int v54 = v48[v14];
          int v55 = v48[v14 + 1];
          v48 += 2;
          *uint64_t v49 = (8
                * (((16843010 * (unint64_t)(4095 * v54)) >> 32)
                 + ((16843010 * (unint64_t)(4095 * v52)) >> 32))
                + 8) & 0xFFF0;
          v49[1] = (8
                  * (((16843010 * (unint64_t)(4095 * v55)) >> 32)
                   + ((16843010 * (unint64_t)(4095 * v53)) >> 32))
                  + 8) & 0xFFF0;
          v49 += 2;
          BOOL v45 = __CFADD__(v51++, 1);
        }
        while (!v45);
      }
      v15 += 2 * v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - v10;
  unint64_t v24 = v17 - v16;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v10 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v31 + i))) >> 32);
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1)) {
    uint64_t v34 = v9 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  unint64_t v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v24 >> 1;
  }
  if (v9)
  {
    if (v8)
    {
      int v39 = v15[1];
      unint64_t v37 = v15 + 2;
      _WORD *v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
      v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v39)) >> 32);
      int v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v40 = -(uint64_t)v36;
    do
    {
      unint64_t v41 = (16843010 * (unint64_t)(4095 * v37[1])) >> 32;
      _WORD *v38 = 16 * ((16843010 * (unint64_t)(4095 * *v37)) >> 32);
      v38[1] = 16 * v41;
      v37 += 2;
      v38 += 2;
      BOOL v42 = __CFADD__(v40++, 1);
    }
    while (!v42);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v25 - v34;
    uint64_t v45 = 2 * v14;
    do
    {
      unint64_t v46 = v15;
      unint64_t v47 = v22;
      if (v8)
      {
        int v48 = v15[1];
        unint64_t v46 = v15 + 2;
        _WORD *v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
        v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v48)) >> 32);
        unint64_t v47 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v49 = -(uint64_t)v36;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(4095 * v46[1])) >> 32;
          *unint64_t v47 = 16 * ((16843010 * (unint64_t)(4095 * *v46)) >> 32);
          v47[1] = 16 * v50;
          v46 += 2;
          v47 += 2;
          BOOL v42 = __CFADD__(v49++, 1);
        }
        while (!v42);
      }
      v15 += v45;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_422f_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  unint64_t v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2]) {
    unint64_t v17 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v10 = a6[3];
  }
  if (v10)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v24 + i))) >> 32) << 6)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v10);
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v17 >> 1;
  uint64_t v29 = v9 & 1;
  if (v17 >> 1 >= (v17 - v29) >> 1) {
    unint64_t v28 = (v17 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      int v37 = v12[1];
      uint64_t v30 = v12 + 2;
      _WORD *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v12)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v37)) >> 32) << 6) + 4096;
      uint64_t v31 = v16 + 2;
      if (v28)
      {
LABEL_19:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30;
          int v34 = v30[1];
          v30 += 2;
          *uint64_t v31 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v33)) >> 32) << 6) + 4096;
          v31[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v34)) >> 32) << 6) + 4096;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v30 = v12;
      uint64_t v31 = v16;
      if (v28) {
        goto LABEL_19;
      }
    }
    uint64_t v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v17)
    {
      int v38 = *v30;
      int v39 = v30[1];
      *uint64_t v31 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      v31[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
    }
    v12 += v11;
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v10 - v26;
    do
    {
      BOOL v42 = v12;
      unint64_t v43 = v16;
      if (v27)
      {
        int v44 = v12[1];
        BOOL v42 = v12 + 2;
        _WORD *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v12)) >> 32) << 6) + 4096;
        v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
        unint64_t v43 = v16 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          int v46 = v42[1];
          int v47 = ((16843010 * (unint64_t)(896 * *v42)) >> 32 << 6) + 4096;
          *unint64_t v43 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v42)) >> 32) << 6) + 4096;
          int v48 = ((16843010 * (unint64_t)(896 * v46)) >> 32 << 6) + 4096;
          v43[1] = v48;
          v42 += 2;
          _OWORD v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v17)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *unint64_t v43 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
        v43[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      }
      v12 += v11;
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if (v27)
    {
      int v51 = *v12;
      int v52 = v12[1];
      v12 += 2;
      _WORD *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      v16 += 2;
    }
    if (v28)
    {
      uint64_t v53 = -(uint64_t)v28;
      do
      {
        int v54 = *v12;
        int v55 = v12[1];
        v12 += 2;
        _WORD *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
        v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
        v16 += 2;
        BOOL v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      uint64_t v56 = 2 * v28;
    }
    else
    {
      uint64_t v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v17)
    {
      int v57 = *v12;
      int v58 = v12[1];
      _WORD *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v58)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  unint64_t v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2]) {
    unint64_t v18 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v19 = a6[3];
  }
  else {
    unint64_t v19 = v10;
  }
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
          *(_WORD *)(v23 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v24 + i))) >> 32) << 6)
                                  + 4096;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
  }
  if (v19 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v18 >> 1;
  uint64_t v29 = v9 & 1;
  if (v18 >> 1 >= (v18 - v29) >> 1) {
    unint64_t v28 = (v18 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      int v37 = v13[1];
      uint64_t v30 = v13 + 2;
      *unint64_t v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v13)) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v37)) >> 32) << 6) + 4096;
      uint64_t v31 = v17 + 2;
      if (v28)
      {
LABEL_20:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30;
          int v34 = v30[1];
          v30 += 2;
          *uint64_t v31 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v33)) >> 32) << 6) + 4096;
          v31[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v34)) >> 32) << 6) + 4096;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v30 = v13;
      uint64_t v31 = v17;
      if (v28) {
        goto LABEL_20;
      }
    }
    uint64_t v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v18)
    {
      int v38 = *v30;
      int v39 = v30[1];
      *uint64_t v31 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      v31[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
    }
    v13 += v12;
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v19 - v26;
    do
    {
      BOOL v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        int v44 = v13[1];
        BOOL v42 = v13 + 2;
        *unint64_t v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v13)) >> 32) << 6) + 4096;
        v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
        unint64_t v43 = v17 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          int v46 = v42[1];
          int v47 = ((16843010 * (unint64_t)(896 * *v42)) >> 32 << 6) + 4096;
          *unint64_t v43 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v42)) >> 32) << 6) + 4096;
          int v48 = ((16843010 * (unint64_t)(896 * v46)) >> 32 << 6) + 4096;
          v43[1] = v48;
          v42 += 2;
          _OWORD v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v18)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *unint64_t v43 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
        v43[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      }
      v13 += v12;
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v19)
  {
    if (v27)
    {
      int v51 = *v13;
      int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      v17 += 2;
    }
    if (v28)
    {
      uint64_t v53 = -(uint64_t)v28;
      do
      {
        int v54 = *v13;
        int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
        v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
        v17 += 2;
        BOOL v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v28 *= 2;
    }
    if ((v28 | v29) < v18)
    {
      int v56 = *v13;
      int v57 = v13[1];
      *unint64_t v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v56)) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  unint64_t v18 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v18 >= a6[2]) {
    unint64_t v18 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v19 = a6[3];
  }
  else {
    unint64_t v19 = v10;
  }
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + *a4 * v8 + (v9 & 0xFFFFFFFE);
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
          *(_WORD *)(v23 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v24 + i))) >> 32) << 6;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v19);
  }
  if (v19 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v18 >> 1;
  uint64_t v29 = v9 & 1;
  if (v18 >> 1 >= (v18 - v29) >> 1) {
    unint64_t v28 = (v18 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      int v37 = v13[1];
      uint64_t v30 = v13 + 2;
      *unint64_t v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v13)) >> 32) << 6;
      v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v37)) >> 32) << 6;
      uint64_t v31 = v17 + 2;
      if (v28)
      {
LABEL_20:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30;
          int v34 = v30[1];
          v30 += 2;
          *uint64_t v31 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v33)) >> 32) << 6;
          v31[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v34)) >> 32) << 6;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v30 = v13;
      uint64_t v31 = v17;
      if (v28) {
        goto LABEL_20;
      }
    }
    uint64_t v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v18)
    {
      int v38 = *v30;
      int v39 = v30[1];
      *uint64_t v31 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v38)) >> 32) << 6;
      v31[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v39)) >> 32) << 6;
    }
    v13 += v12;
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v19 - v26;
    do
    {
      BOOL v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        int v44 = v13[1];
        BOOL v42 = v13 + 2;
        *unint64_t v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v13)) >> 32) << 6;
        v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v44)) >> 32) << 6;
        unint64_t v43 = v17 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          int v46 = v42[1];
          int v47 = (16843010 * (unint64_t)(1023 * *v42)) >> 32 << 6;
          *unint64_t v43 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v42)) >> 32) << 6;
          int v48 = (16843010 * (unint64_t)(1023 * v46)) >> 32 << 6;
          v43[1] = v48;
          v42 += 2;
          _OWORD v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v18)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *unint64_t v43 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v49)) >> 32) << 6;
        v43[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v50)) >> 32) << 6;
      }
      v13 += v12;
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v19)
  {
    if (v27)
    {
      int v51 = *v13;
      int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v51)) >> 32) << 6;
      v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v52)) >> 32) << 6;
      v17 += 2;
    }
    if (v28)
    {
      uint64_t v53 = -(uint64_t)v28;
      do
      {
        int v54 = *v13;
        int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v54)) >> 32) << 6;
        v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v55)) >> 32) << 6;
        v17 += 2;
        BOOL v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      v28 *= 2;
    }
    if ((v28 | v29) < v18)
    {
      int v56 = *v13;
      int v57 = v13[1];
      *unint64_t v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v56)) >> 32) << 6;
      v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v57)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = a7[2] + v28 * v18 + v19;
    uint64_t v30 = *a7 + *a8 * v18 + v19;
    uint64_t v31 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = -1;
          *(_WORD *)(v30 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v31 + i))) >> 32) << 6)
                                  + 4096;
        }
      }
      v31 += v26;
      v30 += v27;
      v29 += v28;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v33 = v12 & 1;
  if (v8 >= v33) {
    uint64_t v34 = v12 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  char v35 = v9;
  unint64_t v36 = v24 >> 1;
  unint64_t v37 = (v24 - v10) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v12)
  {
    if (v35)
    {
      int v40 = v14[1];
      int v38 = v14 + 2;
      *uint64_t v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v40)) >> 32) << 6) + 4096;
      int v39 = v21 + 2;
      if (!v36)
      {
LABEL_25:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      int v38 = v14;
      int v39 = v21;
      if (!v36) {
        goto LABEL_25;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      unint64_t v42 = (16843010 * (unint64_t)(896 * v38[1])) >> 32;
      _WORD *v39 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v38)) >> 32) << 6) + 4096;
      v39[1] = ((_WORD)v42 << 6) + 4096;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v34)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v34;
    do
    {
      int v46 = v14;
      int v47 = v21;
      if (v35)
      {
        int v48 = v14[1];
        int v46 = v14 + 2;
        *uint64_t v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
        int v47 = v21 + 2;
      }
      if (v36)
      {
        uint64_t v49 = -(uint64_t)v36;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(896 * v46[1])) >> 32;
          *int v47 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v46)) >> 32) << 6) + 4096;
          v47[1] = ((_WORD)v50 << 6) + 4096;
          v46 += 2;
          v47 += 2;
          BOOL v43 = __CFADD__(v49++, 1);
        }
        while (!v43);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v33 < v8)
  {
    if (v35)
    {
      int v51 = *v14;
      int v52 = v14[1];
      v14 += 2;
      *uint64_t v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      v21 += 2;
    }
    if (v36)
    {
      uint64_t v53 = -(uint64_t)v36;
      do
      {
        unint64_t v54 = (16843010 * (unint64_t)(896 * v14[1])) >> 32;
        *uint64_t v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        v21[1] = ((_WORD)v54 << 6) + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v43 = __CFADD__(v53++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v29 + i))) >> 32) << 6)
                                  + 4096;
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v24 >> 1;
  unint64_t v35 = (v24 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      int v38 = v14[1];
      unint64_t v36 = v14 + 2;
      *uint64_t v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      unint64_t v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v36 = v14;
      unint64_t v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      unint64_t v40 = (16843010 * (unint64_t)(896 * v36[1])) >> 32;
      *unint64_t v37 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v36)) >> 32) << 6) + 4096;
      v37[1] = ((_WORD)v40 << 6) + 4096;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      unint64_t v44 = v14;
      uint64_t v45 = v21;
      if (v33)
      {
        int v46 = v14[1];
        unint64_t v44 = v14 + 2;
        *uint64_t v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v46)) >> 32) << 6) + 4096;
        uint64_t v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          unint64_t v48 = (16843010 * (unint64_t)(896 * v44[1])) >> 32;
          _WORD *v45 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v44)) >> 32) << 6) + 4096;
          v45[1] = ((_WORD)v48 << 6) + 4096;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      int v49 = *v14;
      int v50 = v14[1];
      v14 += 2;
      *uint64_t v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        unint64_t v52 = (16843010 * (unint64_t)(896 * v14[1])) >> 32;
        *uint64_t v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        v21[1] = ((_WORD)v52 << 6) + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v26 * v12 + v10 + v9;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v28 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v29 + i))) >> 32) << 6;
      }
      v29 += v26;
      v28 += v27;
      ++v25;
    }
    while (v25 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v24 >> 1;
  unint64_t v35 = (v24 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      int v38 = v14[1];
      unint64_t v36 = v14 + 2;
      *uint64_t v21 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v14)) >> 32) << 6;
      v21[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v38)) >> 32) << 6;
      unint64_t v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        v14 += v13;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v36 = v14;
      unint64_t v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      unint64_t v40 = (16843010 * (unint64_t)(1023 * v36[1])) >> 32;
      *unint64_t v37 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v36)) >> 32) << 6;
      v37[1] = (_WORD)v40 << 6;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      unint64_t v44 = v14;
      uint64_t v45 = v21;
      if (v33)
      {
        int v46 = v14[1];
        unint64_t v44 = v14 + 2;
        *uint64_t v21 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v14)) >> 32) << 6;
        v21[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v46)) >> 32) << 6;
        uint64_t v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          unint64_t v48 = (16843010 * (unint64_t)(1023 * v44[1])) >> 32;
          _WORD *v45 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v44)) >> 32) << 6;
          v45[1] = (_WORD)v48 << 6;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      int v49 = *v14;
      int v50 = v14[1];
      v14 += 2;
      *uint64_t v21 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v49)) >> 32) << 6;
      v21[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v50)) >> 32) << 6;
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        unint64_t v52 = (16843010 * (unint64_t)(1023 * v14[1])) >> 32;
        *uint64_t v21 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v14)) >> 32) << 6;
        v21[1] = (_WORD)v52 << 6;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - v10;
  unint64_t v24 = v17 - v16;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v10 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v31 + i))) >> 32) << 6)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1)) {
    uint64_t v34 = v9 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  unint64_t v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v24 >> 1;
  }
  if (v9)
  {
    if (v8)
    {
      unint64_t v37 = v15 + 2;
      int v39 = ((16843010 * (unint64_t)(896 * v15[v14 + 1])) >> 32)
          + ((16843010 * (unint64_t)(896 * v15[1])) >> 32);
      _WORD *v22 = (32
            * (((16843010 * (unint64_t)(896 * v15[v14])) >> 32)
             + ((16843010 * (unint64_t)(896 * *v15)) >> 32))
            + 4128) & 0xFFC0;
      v22[1] = (32 * v39 + 4128) & 0xFFC0;
      int v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v40 = -(uint64_t)v36;
    do
    {
      int v41 = *v37;
      int v42 = v37[1];
      int v43 = v37[v14];
      int v44 = v37[v14 + 1];
      v37 += 2;
      _WORD *v38 = (32
            * (((16843010 * (unint64_t)(896 * v43)) >> 32)
             + ((16843010 * (unint64_t)(896 * v41)) >> 32))
            + 4128) & 0xFFC0;
      v38[1] = (32
              * (((16843010 * (unint64_t)(896 * v44)) >> 32)
               + ((16843010 * (unint64_t)(896 * v42)) >> 32))
              + 4128) & 0xFFC0;
      v38 += 2;
      BOOL v45 = __CFADD__(v40++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    unint64_t v46 = 0;
    unint64_t v47 = v25 - v34;
    do
    {
      unint64_t v48 = v15;
      int v49 = v22;
      if (v8)
      {
        unint64_t v48 = v15 + 2;
        int v50 = ((16843010 * (unint64_t)(896 * v15[v14 + 1])) >> 32)
            + ((16843010 * (unint64_t)(896 * v15[1])) >> 32);
        _WORD *v22 = (32
              * (((16843010 * (unint64_t)(896 * v15[v14])) >> 32)
               + ((16843010 * (unint64_t)(896 * *v15)) >> 32))
              + 4128) & 0xFFC0;
        v22[1] = (32 * v50 + 4128) & 0xFFC0;
        int v49 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v51 = -(uint64_t)v36;
        do
        {
          int v52 = *v48;
          int v53 = v48[1];
          int v54 = v48[v14];
          int v55 = v48[v14 + 1];
          v48 += 2;
          *int v49 = (32
                * (((16843010 * (unint64_t)(896 * v54)) >> 32)
                 + ((16843010 * (unint64_t)(896 * v52)) >> 32))
                + 4128) & 0xFFC0;
          v49[1] = (32
                  * (((16843010 * (unint64_t)(896 * v55)) >> 32)
                   + ((16843010 * (unint64_t)(896 * v53)) >> 32))
                  + 4128) & 0xFFC0;
          v49 += 2;
          BOOL v45 = __CFADD__(v51++, 1);
        }
        while (!v45);
      }
      v15 += 2 * v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - v10;
  unint64_t v24 = v17 - v16;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v10 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v31 + i))) >> 32) << 6)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1)) {
    uint64_t v34 = v9 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  unint64_t v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v24 >> 1;
  }
  if (v9)
  {
    if (v8)
    {
      int v39 = v15[1];
      unint64_t v37 = v15 + 2;
      _WORD *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
      int v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v40 = -(uint64_t)v36;
    do
    {
      unint64_t v41 = (16843010 * (unint64_t)(896 * v37[1])) >> 32;
      _WORD *v38 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v37)) >> 32) << 6) + 4096;
      v38[1] = ((_WORD)v41 << 6) + 4096;
      v37 += 2;
      v38 += 2;
      BOOL v42 = __CFADD__(v40++, 1);
    }
    while (!v42);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v25 - v34;
    uint64_t v45 = 2 * v14;
    do
    {
      unint64_t v46 = v15;
      unint64_t v47 = v22;
      if (v8)
      {
        int v48 = v15[1];
        unint64_t v46 = v15 + 2;
        _WORD *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
        unint64_t v47 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v49 = -(uint64_t)v36;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(896 * v46[1])) >> 32;
          *unint64_t v47 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v46)) >> 32) << 6) + 4096;
          v47[1] = ((_WORD)v50 << 6) + 4096;
          v46 += 2;
          v47 += 2;
          BOOL v42 = __CFADD__(v49++, 1);
        }
        while (!v42);
      }
      v15 += v45;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - v10;
  unint64_t v24 = v17 - v16;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v10 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v31 + i))) >> 32) << 6;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1)) {
    uint64_t v34 = v9 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  unint64_t v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v24 >> 1;
  }
  if (v9)
  {
    if (v8)
    {
      unint64_t v37 = v15 + 2;
      int v39 = ((16843010 * (unint64_t)(1023 * v15[v14 + 1])) >> 32)
          + ((16843010 * (unint64_t)(1023 * v15[1])) >> 32);
      _WORD *v22 = (32
            * (((16843010 * (unint64_t)(1023 * v15[v14])) >> 32)
             + ((16843010 * (unint64_t)(1023 * *v15)) >> 32))
            + 32) & 0xFFC0;
      v22[1] = (32 * v39 + 32) & 0xFFC0;
      int v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v40 = -(uint64_t)v36;
    do
    {
      int v41 = *v37;
      int v42 = v37[1];
      int v43 = v37[v14];
      int v44 = v37[v14 + 1];
      v37 += 2;
      _WORD *v38 = (32
            * (((16843010 * (unint64_t)(1023 * v43)) >> 32)
             + ((16843010 * (unint64_t)(1023 * v41)) >> 32))
            + 32) & 0xFFC0;
      v38[1] = (32
              * (((16843010 * (unint64_t)(1023 * v44)) >> 32)
               + ((16843010 * (unint64_t)(1023 * v42)) >> 32))
              + 32) & 0xFFC0;
      v38 += 2;
      BOOL v45 = __CFADD__(v40++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    unint64_t v46 = 0;
    unint64_t v47 = v25 - v34;
    do
    {
      int v48 = v15;
      uint64_t v49 = v22;
      if (v8)
      {
        int v48 = v15 + 2;
        int v50 = ((16843010 * (unint64_t)(1023 * v15[v14 + 1])) >> 32)
            + ((16843010 * (unint64_t)(1023 * v15[1])) >> 32);
        _WORD *v22 = (32
              * (((16843010 * (unint64_t)(1023 * v15[v14])) >> 32)
               + ((16843010 * (unint64_t)(1023 * *v15)) >> 32))
              + 32) & 0xFFC0;
        v22[1] = (32 * v50 + 32) & 0xFFC0;
        uint64_t v49 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v51 = -(uint64_t)v36;
        do
        {
          int v52 = *v48;
          int v53 = v48[1];
          int v54 = v48[v14];
          int v55 = v48[v14 + 1];
          v48 += 2;
          *uint64_t v49 = (32
                * (((16843010 * (unint64_t)(1023 * v54)) >> 32)
                 + ((16843010 * (unint64_t)(1023 * v52)) >> 32))
                + 32) & 0xFFC0;
          v49[1] = (32
                  * (((16843010 * (unint64_t)(1023 * v55)) >> 32)
                   + ((16843010 * (unint64_t)(1023 * v53)) >> 32))
                  + 32) & 0xFFC0;
          v49 += 2;
          BOOL v45 = __CFADD__(v51++, 1);
        }
        while (!v45);
      }
      v15 += 2 * v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - v10;
  unint64_t v24 = v17 - v16;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v10 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v31 + i))) >> 32) << 6;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v9 & 1)) {
    uint64_t v34 = v9 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  unint64_t v35 = v24 - (v8 & 1);
  if (v24 >> 1 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v24 >> 1;
  }
  if (v9)
  {
    if (v8)
    {
      int v39 = v15[1];
      unint64_t v37 = v15 + 2;
      _WORD *v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
      v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v39)) >> 32) << 6;
      int v38 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        v15 += 2 * v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v40 = -(uint64_t)v36;
    do
    {
      unint64_t v41 = (16843010 * (unint64_t)(1023 * v37[1])) >> 32;
      _WORD *v38 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v37)) >> 32) << 6;
      v38[1] = (_WORD)v41 << 6;
      v37 += 2;
      v38 += 2;
      BOOL v42 = __CFADD__(v40++, 1);
    }
    while (!v42);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v34)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v25 - v34;
    uint64_t v45 = 2 * v14;
    do
    {
      unint64_t v46 = v15;
      unint64_t v47 = v22;
      if (v8)
      {
        int v48 = v15[1];
        unint64_t v46 = v15 + 2;
        _WORD *v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
        v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v48)) >> 32) << 6;
        unint64_t v47 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v49 = -(uint64_t)v36;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(1023 * v46[1])) >> 32;
          *unint64_t v47 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v46)) >> 32) << 6;
          v47[1] = (_WORD)v50 << 6;
          v46 += 2;
          v47 += 2;
          BOOL v42 = __CFADD__(v49++, 1);
        }
        while (!v42);
      }
      v15 += v45;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_422f_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (unsigned char *)(a7[1] + v15 * v13 + 2 * v14);
  unint64_t v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2]) {
    unint64_t v17 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v10 = a6[3];
  }
  if (v10)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v13;
    uint64_t v22 = *a7 + *a8 * v13;
    uint64_t v23 = *a4;
    uint64_t v24 = v21 + v14;
    uint64_t v25 = v22 + v14;
    uint64_t v26 = *a3 + v23 * v8 + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v17)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          *(unsigned char *)(v24 + i) = -1;
          *(unsigned char *)(v25 + i) = ((7204443 * *(unsigned __int8 *)(v26 + i)) >> 23) + 16;
        }
      }
      v26 += v23;
      v25 += v19;
      v24 += v20;
      ++v18;
    }
    while (v18 != v10);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v28 = v8 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v9;
  unint64_t v30 = v17 >> 1;
  uint64_t v31 = v9 & 1;
  if (v17 >> 1 >= (v17 - v31) >> 1) {
    unint64_t v30 = (v17 - v31) >> 1;
  }
  if (v8)
  {
    if (v29)
    {
      uint64_t v32 = v12 + 2;
      unsigned int v39 = (7368928 * v12[1]) >> 23;
      unsigned char *v16 = ((7368928 * *v12) >> 23) + 16;
      v16[1] = v39 + 16;
      char v33 = v16 + 2;
      if (v30)
      {
LABEL_20:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          int v35 = *v32;
          int v36 = v32[1];
          v32 += 2;
          *char v33 = ((7368928 * v35) >> 23) + 16;
          v33[1] = ((7368928 * v36) >> 23) + 16;
          v33 += 2;
          BOOL v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v30;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v32 = v12;
      char v33 = v16;
      if (v30) {
        goto LABEL_20;
      }
    }
    uint64_t v38 = 0;
LABEL_26:
    if ((v38 | (unint64_t)v31) < v17)
    {
      int v40 = *v32;
      unsigned int v41 = (7368928 * v32[1]) >> 23;
      *char v33 = ((7368928 * v40) >> 23) + 16;
      v33[1] = v41 + 16;
    }
    v12 += v11;
    v16 += v15;
  }
  if (v10 == v28)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v10 - v28;
    do
    {
      unint64_t v44 = v12;
      uint64_t v45 = v16;
      if (v29)
      {
        unint64_t v44 = v12 + 2;
        unsigned int v46 = (7368928 * v12[1]) >> 23;
        unsigned char *v16 = ((7368928 * *v12) >> 23) + 16;
        v16[1] = v46 + 16;
        uint64_t v45 = v16 + 2;
      }
      if (v30)
      {
        uint64_t v47 = -(uint64_t)v30;
        do
        {
          unsigned int v48 = (7368928 * v44[1]) >> 23;
          unsigned int v49 = ((7368928 * *v44) >> 23) + 16;
          unsigned char *v45 = ((7368928 * *v44) >> 23) + 16;
          LOBYTE(v48) = v48 + 16;
          v45[1] = v48;
          v44 += 2;
          v45[2] = v49;
          v45[3] = v48;
          v45 += 4;
          BOOL v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      if ((v31 | (2 * v30)) < v17)
      {
        int v50 = *v44;
        unsigned int v51 = (7368928 * v44[1]) >> 23;
        unsigned char *v45 = ((7368928 * v50) >> 23) + 16;
        v45[1] = v51 + 16;
      }
      v12 += v11;
      v16 += v15;
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + (v8 & 1) < v10)
  {
    if (v29)
    {
      int v52 = *v12;
      int v53 = v12[1];
      v12 += 2;
      unsigned char *v16 = ((7368928 * v52) >> 23) + 16;
      v16[1] = ((7368928 * v53) >> 23) + 16;
      v16 += 2;
    }
    if (v30)
    {
      uint64_t v54 = -(uint64_t)v30;
      do
      {
        int v55 = *v12;
        int v56 = v12[1];
        v12 += 2;
        unsigned char *v16 = ((7368928 * v55) >> 23) + 16;
        v16[1] = ((7368928 * v56) >> 23) + 16;
        v16 += 2;
        BOOL v37 = __CFADD__(v54++, 1);
      }
      while (!v37);
      uint64_t v57 = 2 * v30;
    }
    else
    {
      uint64_t v57 = 0;
    }
    if ((v57 | (unint64_t)v31) < v17)
    {
      int v58 = *v12;
      unsigned int v59 = (7368928 * v12[1]) >> 23;
      unsigned char *v16 = ((7368928 * v58) >> 23) + 16;
      v16[1] = v59 + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v14 + 2 * v13);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  if (v10 >= v15) {
    unint64_t v10 = v15;
  }
  if (v10)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = *a7 + *a8 * v14 + v13;
    uint64_t v24 = *a3 + *a4 * v8 + (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
          *(unsigned char *)(v23 + i) = ((7204443 * *(unsigned __int8 *)(v24 + i)) >> 23) + 16;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v10);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v19 >> 1;
  uint64_t v29 = v9 & 1;
  if (v19 >> 1 >= (v19 - v29) >> 1) {
    unint64_t v28 = (v19 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      unint64_t v30 = v12 + 2;
      unsigned int v37 = (7368928 * v12[1]) >> 23;
      unsigned char *v18 = ((7368928 * *v12) >> 23) + 16;
      v18[1] = v37 + 16;
      uint64_t v31 = v18 + 2;
      if (v28)
      {
LABEL_20:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30;
          int v34 = v30[1];
          v30 += 2;
          *uint64_t v31 = ((7368928 * v33) >> 23) + 16;
          v31[1] = ((7368928 * v34) >> 23) + 16;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v30 = v12;
      uint64_t v31 = v18;
      if (v28) {
        goto LABEL_20;
      }
    }
    uint64_t v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v19)
    {
      int v38 = *v30;
      unsigned int v39 = (7368928 * v30[1]) >> 23;
      *uint64_t v31 = ((7368928 * v38) >> 23) + 16;
      v31[1] = v39 + 16;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v10 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v10 - v26;
    do
    {
      unint64_t v42 = v12;
      uint64_t v43 = v18;
      if (v27)
      {
        unint64_t v42 = v12 + 2;
        unsigned int v44 = (7368928 * v12[1]) >> 23;
        unsigned char *v18 = ((7368928 * *v12) >> 23) + 16;
        v18[1] = v44 + 16;
        uint64_t v43 = v18 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          unsigned int v46 = (7368928 * v42[1]) >> 23;
          unsigned int v47 = ((7368928 * *v42) >> 23) + 16;
          *uint64_t v43 = ((7368928 * *v42) >> 23) + 16;
          LOBYTE(v46) = v46 + 16;
          v43[1] = v46;
          v42 += 2;
          _OWORD v43[2] = v47;
          v43[3] = v46;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v19)
      {
        int v48 = *v42;
        unsigned int v49 = (7368928 * v42[1]) >> 23;
        *uint64_t v43 = ((7368928 * v48) >> 23) + 16;
        v43[1] = v49 + 16;
      }
      v12 += v11;
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if (v27)
    {
      int v50 = *v12;
      int v51 = v12[1];
      v12 += 2;
      unsigned char *v18 = ((7368928 * v50) >> 23) + 16;
      v18[1] = ((7368928 * v51) >> 23) + 16;
      v18 += 2;
    }
    if (v28)
    {
      uint64_t v52 = -(uint64_t)v28;
      do
      {
        int v53 = *v12;
        int v54 = v12[1];
        v12 += 2;
        unsigned char *v18 = ((7368928 * v53) >> 23) + 16;
        v18[1] = ((7368928 * v54) >> 23) + 16;
        v18 += 2;
        BOOL v35 = __CFADD__(v52++, 1);
      }
      while (!v35);
      uint64_t v55 = 2 * v28;
    }
    else
    {
      uint64_t v55 = 0;
    }
    if ((v55 | (unint64_t)v29) < v19)
    {
      int v56 = *v12;
      unsigned int v57 = (7368928 * v12[1]) >> 23;
      unsigned char *v18 = ((7368928 * v56) >> 23) + 16;
      v18[1] = v57 + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a4[1];
  uint64_t v11 = (__int16 *)(a3[1] + v10 * v9 + (v8 & 0xFFFFFFFE));
  uint64_t v12 = a6[4];
  uint64_t v13 = a6[5];
  uint64_t v14 = a8[1];
  unint64_t v15 = (__int16 *)(a7[1] + v14 * v13 + 2 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2]) {
    size_t v16 = a6[2];
  }
  else {
    size_t v16 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    unint64_t v45 = v17;
    uint64_t v46 = a4[1];
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = (char *)(*a7 + *a8 * v13 + v12);
    uint64_t v22 = (char *)(*a3 + *a4 * v9 + (v8 & 0xFFFFFFFE));
    do
    {
      memcpy(v21, v22, v16);
      v22 += v19;
      v21 += v20;
      --v17;
    }
    while (v17);
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    unint64_t v17 = v45;
    uint64_t v10 = v46;
  }
  unint64_t v23 = v9 & 1;
  if (v17 >= v23) {
    uint64_t v24 = v9 & 1;
  }
  else {
    uint64_t v24 = 0;
  }
  char v25 = v8;
  size_t v26 = v16 >> 1;
  uint64_t v27 = v8 & 1;
  if (v16 >> 1 >= (v16 - v27) >> 1) {
    size_t v26 = (v16 - v27) >> 1;
  }
  if (v9)
  {
    unint64_t v28 = v11;
    if (v25)
    {
      unint64_t v28 = v11 + 1;
      __int16 *v15 = *v11;
      uint64_t v29 = v15 + 1;
      if (v26)
      {
LABEL_19:
        uint64_t v30 = -(uint64_t)v26;
        do
        {
          __int16 v31 = *v28++;
          *v29++ = v31;
          BOOL v32 = __CFADD__(v30++, 1);
        }
        while (!v32);
        uint64_t v33 = 2 * v26;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v29 = v15;
      if (v26) {
        goto LABEL_19;
      }
    }
    uint64_t v33 = 0;
LABEL_25:
    if ((v33 | (unint64_t)v27) < v16) {
      *uint64_t v29 = *v28;
    }
    uint64_t v11 = (__int16 *)((char *)v11 + v10);
    unint64_t v15 = (__int16 *)((char *)v15 + v14);
  }
  if (v17 == v24)
  {
    unint64_t v34 = 0;
  }
  else
  {
    uint64_t v35 = 0;
    unint64_t v34 = v17 - v24;
    do
    {
      uint64_t v36 = (char *)v11;
      unsigned int v37 = v15;
      if (v25)
      {
        uint64_t v36 = (char *)(v11 + 1);
        __int16 *v15 = *v11;
        unsigned int v37 = v15 + 1;
      }
      if (v26)
      {
        uint64_t v38 = -(uint64_t)v26;
        do
        {
          char v39 = *v36;
          char v40 = v36[1];
          v36 += 2;
          *(unsigned char *)unsigned int v37 = v39;
          *((unsigned char *)v37 + 1) = v40;
          *((unsigned char *)v37 + 2) = v39;
          *((unsigned char *)v37 + 3) = v40;
          v37 += 2;
          BOOL v32 = __CFADD__(v38++, 1);
        }
        while (!v32);
      }
      if ((v27 | (2 * v26)) < v16) {
        *unsigned int v37 = *(_WORD *)v36;
      }
      uint64_t v11 = (__int16 *)((char *)v11 + v10);
      unint64_t v15 = (__int16 *)((char *)v15 + v14);
      ++v35;
    }
    while (v35 != v34);
  }
  if (v34 + v23 < v17)
  {
    if (v25)
    {
      __int16 v41 = *v11++;
      *v15++ = v41;
    }
    if (v26)
    {
      uint64_t v42 = -(uint64_t)v26;
      do
      {
        __int16 v43 = *v11++;
        *v15++ = v43;
        BOOL v32 = __CFADD__(v42++, 1);
      }
      while (!v32);
      v26 *= 2;
    }
    if ((v26 | v27) < v16) {
      __int16 *v15 = *v11;
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a8;
    uint64_t v25 = a8[2];
    uint64_t v26 = *a4;
    uint64_t v27 = a7[2] + v25 * v18 + v16;
    uint64_t v28 = *a7 + *a8 * v18 + v16;
    uint64_t v29 = *a3 + v26 * v12 + v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v27 + i) = -1;
          *(unsigned char *)(v28 + i) = ((7204443 * *(unsigned __int8 *)(v29 + i)) >> 23) + 16;
        }
      }
      v29 += v26;
      v28 += v24;
      v27 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    uint64_t v10 = v9 & 1;
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  unint64_t v33 = v21 >> 1;
  unint64_t v34 = v21 - v10;
  if (v33 >= v34 >> 1) {
    unint64_t v35 = v34 >> 1;
  }
  else {
    unint64_t v35 = v33;
  }
  if (v12)
  {
    if (v9)
    {
      uint64_t v36 = v14 + 2;
      unsigned int v38 = (7368928 * v14[1]) >> 23;
      *uint64_t v20 = ((7368928 * *v14) >> 23) + 16;
      v20[1] = v38 + 16;
      unsigned int v37 = v20 + 2;
      if (!v35)
      {
LABEL_26:
        v14 += v13;
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v36 = v14;
      unsigned int v37 = v20;
      if (!v35) {
        goto LABEL_26;
      }
    }
    uint64_t v39 = -(uint64_t)v35;
    do
    {
      unsigned int v40 = (7368928 * v36[1]) >> 23;
      *unsigned int v37 = ((7368928 * *v36) >> 23) + 16;
      v37[1] = v40 + 16;
      v37 += 2;
      v36 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      unsigned int v44 = v14;
      unint64_t v45 = v20;
      if (v9)
      {
        unsigned int v44 = v14 + 2;
        unsigned int v46 = (7368928 * v14[1]) >> 23;
        *uint64_t v20 = ((7368928 * *v14) >> 23) + 16;
        v20[1] = v46 + 16;
        unint64_t v45 = v20 + 2;
      }
      if (v35)
      {
        uint64_t v47 = -(uint64_t)v35;
        do
        {
          unsigned int v48 = (7368928 * v44[1]) >> 23;
          unsigned char *v45 = ((7368928 * *v44) >> 23) + 16;
          v45[1] = v48 + 16;
          v45 += 2;
          v44 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      v14 += v13;
      v20 += v19;
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v9)
    {
      int v49 = *v14;
      int v50 = v14[1];
      v14 += 2;
      *uint64_t v20 = ((7368928 * v49) >> 23) + 16;
      v20[1] = ((7368928 * v50) >> 23) + 16;
      v20 += 2;
    }
    if (v35)
    {
      uint64_t v51 = -(uint64_t)v35;
      do
      {
        unsigned int v52 = (7368928 * v14[1]) >> 23;
        *uint64_t v20 = ((7368928 * *v14) >> 23) + 16;
        v20[1] = v52 + 16;
        v20 += 2;
        v14 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_422f_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = ((7204443 * *(unsigned __int8 *)(v27 + i)) >> 23) + 16;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    uint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  unint64_t v31 = v21 >> 1;
  unint64_t v32 = v21 - v10;
  if (v31 >= v32 >> 1) {
    unint64_t v33 = v32 >> 1;
  }
  else {
    unint64_t v33 = v31;
  }
  if (v12)
  {
    if (v9)
    {
      unint64_t v34 = v14 + 2;
      unsigned int v36 = (7368928 * v14[1]) >> 23;
      *uint64_t v20 = ((7368928 * *v14) >> 23) + 16;
      v20[1] = v36 + 16;
      unint64_t v35 = v20 + 2;
      if (!v33)
      {
LABEL_26:
        v14 += v13;
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v34 = v14;
      unint64_t v35 = v20;
      if (!v33) {
        goto LABEL_26;
      }
    }
    uint64_t v37 = -(uint64_t)v33;
    do
    {
      unsigned int v38 = (7368928 * v34[1]) >> 23;
      *unint64_t v35 = ((7368928 * *v34) >> 23) + 16;
      v35[1] = v38 + 16;
      v35 += 2;
      v34 += 2;
      BOOL v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v30)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v30;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v20;
      if (v9)
      {
        unint64_t v42 = v14 + 2;
        unsigned int v44 = (7368928 * v14[1]) >> 23;
        *uint64_t v20 = ((7368928 * *v14) >> 23) + 16;
        v20[1] = v44 + 16;
        uint64_t v43 = v20 + 2;
      }
      if (v33)
      {
        uint64_t v45 = -(uint64_t)v33;
        do
        {
          unsigned int v46 = (7368928 * v42[1]) >> 23;
          *uint64_t v43 = ((7368928 * *v42) >> 23) + 16;
          v43[1] = v46 + 16;
          v43 += 2;
          v42 += 2;
          BOOL v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      v14 += v13;
      v20 += v19;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if (v9)
    {
      int v47 = *v14;
      int v48 = v14[1];
      v14 += 2;
      *uint64_t v20 = ((7368928 * v47) >> 23) + 16;
      v20[1] = ((7368928 * v48) >> 23) + 16;
      v20 += 2;
    }
    if (v33)
    {
      uint64_t v49 = -(uint64_t)v33;
      do
      {
        unsigned int v50 = (7368928 * v14[1]) >> 23;
        *uint64_t v20 = ((7368928 * *v14) >> 23) + 16;
        v20[1] = v50 + 16;
        v20 += 2;
        v14 += 2;
        BOOL v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v23) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - v11;
  }
  unint64_t v24 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = *a3 + *a4 * v13;
    if (v13 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v11 + v30;
    uint64_t v32 = a7[2] + v28 * v19 + v17;
    uint64_t v33 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(unsigned char *)(v32 + i) = -1;
          *(unsigned char *)(v33 + i) = ((7204443 * *(unsigned __int8 *)(v31 + i)) >> 23) + 16;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v23 >> 1;
  unint64_t v37 = v23 - v10;
  if (v36 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v36;
  }
  if (v12)
  {
    if (v9)
    {
      BOOL v39 = v16 + 2;
      unsigned int v41 = (((7368928 * v16[1]) >> 23) + ((7368928 * v16[v15 + 1]) >> 23) + 33) >> 1;
      unsigned char *v22 = (((7368928 * *v16) >> 23) + ((7368928 * v16[v15]) >> 23) + 33) >> 1;
      v22[1] = v41;
      unint64_t v40 = v22 + 2;
      if (!v38)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      BOOL v39 = v16;
      unint64_t v40 = v22;
      if (!v38) {
        goto LABEL_29;
      }
    }
    uint64_t v42 = -(uint64_t)v38;
    do
    {
      int v43 = *v39;
      int v44 = v39[1];
      int v45 = v39[v15];
      int v46 = v39[v15 + 1];
      v39 += 2;
      *unint64_t v40 = (((7368928 * v43) >> 23) + ((7368928 * v45) >> 23) + 33) >> 1;
      v40[1] = (((7368928 * v44) >> 23) + ((7368928 * v46) >> 23) + 33) >> 1;
      v40 += 2;
      BOOL v47 = __CFADD__(v42++, 1);
    }
    while (!v47);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v35)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v24 - v35;
    do
    {
      unsigned int v50 = v16;
      uint64_t v51 = v22;
      if (v9)
      {
        unsigned int v50 = v16 + 2;
        unsigned int v52 = (((7368928 * v16[1]) >> 23) + ((7368928 * v16[v15 + 1]) >> 23) + 33) >> 1;
        unsigned char *v22 = (((7368928 * *v16) >> 23) + ((7368928 * v16[v15]) >> 23) + 33) >> 1;
        v22[1] = v52;
        uint64_t v51 = v22 + 2;
      }
      if (v38)
      {
        uint64_t v53 = -(uint64_t)v38;
        do
        {
          int v54 = *v50;
          int v55 = v50[1];
          int v56 = v50[v15];
          int v57 = v50[v15 + 1];
          v50 += 2;
          *uint64_t v51 = (((7368928 * v54) >> 23) + ((7368928 * v56) >> 23) + 33) >> 1;
          v51[1] = (((7368928 * v55) >> 23) + ((7368928 * v57) >> 23) + 33) >> 1;
          v51 += 2;
          BOOL v47 = __CFADD__(v53++, 1);
        }
        while (!v47);
      }
      v16 += 2 * v15;
      v22 += v21;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v23) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - v11;
  }
  unint64_t v24 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = *a3 + *a4 * v13;
    if (v13 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v11 + v30;
    uint64_t v32 = a7[2] + v28 * v19 + v17;
    uint64_t v33 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(unsigned char *)(v32 + i) = -1;
          *(unsigned char *)(v33 + i) = ((7204443 * *(unsigned __int8 *)(v31 + i)) >> 23) + 16;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v23 >> 1;
  unint64_t v37 = v23 - v10;
  if (v36 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v36;
  }
  if (v12)
  {
    if (v9)
    {
      BOOL v39 = v16 + 2;
      unsigned int v41 = (7368928 * v16[1]) >> 23;
      unsigned char *v22 = ((7368928 * *v16) >> 23) + 16;
      v22[1] = v41 + 16;
      unint64_t v40 = v22 + 2;
      if (!v38)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      BOOL v39 = v16;
      unint64_t v40 = v22;
      if (!v38) {
        goto LABEL_29;
      }
    }
    uint64_t v42 = -(uint64_t)v38;
    do
    {
      unsigned int v43 = (7368928 * v39[1]) >> 23;
      *unint64_t v40 = ((7368928 * *v39) >> 23) + 16;
      v40[1] = v43 + 16;
      v40 += 2;
      v39 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v35)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v24 - v35;
    uint64_t v47 = 2 * v15;
    do
    {
      unint64_t v48 = v16;
      unint64_t v49 = v22;
      if (v9)
      {
        unint64_t v48 = v16 + 2;
        unsigned int v50 = (7368928 * v16[1]) >> 23;
        unsigned char *v22 = ((7368928 * *v16) >> 23) + 16;
        v22[1] = v50 + 16;
        unint64_t v49 = v22 + 2;
      }
      if (v38)
      {
        uint64_t v51 = -(uint64_t)v38;
        do
        {
          unsigned int v52 = (7368928 * v48[1]) >> 23;
          *unint64_t v49 = ((7368928 * *v48) >> 23) + 16;
          v49[1] = v52 + 16;
          v49 += 2;
          v48 += 2;
          BOOL v44 = __CFADD__(v51++, 1);
        }
        while (!v44);
      }
      v16 += v47;
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v8) + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v13;
    if (v13 >= v8) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + v11 + v29;
    uint64_t v31 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v31 + i) = ((7204443 * *(unsigned __int8 *)(v30 + i)) >> 23) + 16;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  unint64_t v34 = v22 >> 1;
  unint64_t v35 = v22 - v10;
  if (v34 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v34;
  }
  if (v12)
  {
    if (v9)
    {
      unint64_t v37 = v15 + 2;
      unsigned int v39 = (((7368928 * v15[1]) >> 23) + ((7368928 * v15[v14 + 1]) >> 23) + 33) >> 1;
      *uint64_t v21 = (((7368928 * *v15) >> 23) + ((7368928 * v15[v14]) >> 23) + 33) >> 1;
      v21[1] = v39;
      unint64_t v38 = v21 + 2;
      if (!v36)
      {
LABEL_29:
        v15 += 2 * v14;
        v21 += v20;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v37 = v15;
      unint64_t v38 = v21;
      if (!v36) {
        goto LABEL_29;
      }
    }
    uint64_t v40 = -(uint64_t)v36;
    do
    {
      int v41 = *v37;
      int v42 = v37[1];
      int v43 = v37[v14];
      int v44 = v37[v14 + 1];
      v37 += 2;
      unsigned char *v38 = (((7368928 * v41) >> 23) + ((7368928 * v43) >> 23) + 33) >> 1;
      v38[1] = (((7368928 * v42) >> 23) + ((7368928 * v44) >> 23) + 33) >> 1;
      v38 += 2;
      BOOL v45 = __CFADD__(v40++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v33)
  {
    unint64_t v46 = 0;
    unint64_t v47 = v24 - v33;
    do
    {
      unint64_t v48 = v15;
      unint64_t v49 = v21;
      if (v9)
      {
        unint64_t v48 = v15 + 2;
        unsigned int v50 = (((7368928 * v15[1]) >> 23) + ((7368928 * v15[v14 + 1]) >> 23) + 33) >> 1;
        *uint64_t v21 = (((7368928 * *v15) >> 23) + ((7368928 * v15[v14]) >> 23) + 33) >> 1;
        v21[1] = v50;
        unint64_t v49 = v21 + 2;
      }
      if (v36)
      {
        uint64_t v51 = -(uint64_t)v36;
        do
        {
          int v52 = *v48;
          int v53 = v48[1];
          int v54 = v48[v14];
          int v55 = v48[v14 + 1];
          v48 += 2;
          *unint64_t v49 = (((7368928 * v52) >> 23) + ((7368928 * v54) >> 23) + 33) >> 1;
          v49[1] = (((7368928 * v53) >> 23) + ((7368928 * v55) >> 23) + 33) >> 1;
          v49 += 2;
          BOOL v45 = __CFADD__(v51++, 1);
        }
        while (!v45);
      }
      v15 += 2 * v14;
      v21 += v20;
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + ((v10 + v9) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v23) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - v11;
  }
  unint64_t v24 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v13;
    if (v13 >= v8) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + v11 + v29;
    uint64_t v31 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(unsigned char *)(v31 + i) = ((7204443 * *(unsigned __int8 *)(v30 + i)) >> 23) + 16;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  unint64_t v34 = v23 >> 1;
  unint64_t v35 = v23 - v10;
  if (v34 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v34;
  }
  if (v12)
  {
    if (v9)
    {
      unint64_t v37 = v16 + 2;
      unsigned int v39 = (7368928 * v16[1]) >> 23;
      unsigned char *v22 = ((7368928 * *v16) >> 23) + 16;
      v22[1] = v39 + 16;
      unint64_t v38 = v22 + 2;
      if (!v36)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v37 = v16;
      unint64_t v38 = v22;
      if (!v36) {
        goto LABEL_29;
      }
    }
    uint64_t v40 = -(uint64_t)v36;
    do
    {
      unsigned int v41 = (7368928 * v37[1]) >> 23;
      unsigned char *v38 = ((7368928 * *v37) >> 23) + 16;
      v38[1] = v41 + 16;
      v38 += 2;
      v37 += 2;
      BOOL v42 = __CFADD__(v40++, 1);
    }
    while (!v42);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v33)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v24 - v33;
    uint64_t v45 = 2 * v15;
    do
    {
      unint64_t v46 = v16;
      unint64_t v47 = v22;
      if (v9)
      {
        unint64_t v46 = v16 + 2;
        unsigned int v48 = (7368928 * v16[1]) >> 23;
        unsigned char *v22 = ((7368928 * *v16) >> 23) + 16;
        v22[1] = v48 + 16;
        unint64_t v47 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v49 = -(uint64_t)v36;
        do
        {
          unsigned int v50 = (7368928 * v46[1]) >> 23;
          *unint64_t v47 = ((7368928 * *v46) >> 23) + 16;
          v47[1] = v50 + 16;
          v47 += 2;
          v46 += 2;
          BOOL v42 = __CFADD__(v49++, 1);
        }
        while (!v42);
      }
      v16 += v45;
      v22 += v21;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v23 = v18 - v17;
  }
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  else {
    unint64_t v24 = v14 - v13;
  }
  if (v24)
  {
    unint64_t v54 = v24;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    if (v13 >= v9) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = (char *)(*a3 + *a4 * v13 + v11 + v27);
    uint64_t v29 = (char *)(*a7 + v26 * v19 + v17);
    uint64_t v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v23);
      v28 += v25;
      v29 += v26;
      BOOL v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    unint64_t v24 = v54;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v23 >> 1 >= (v23 - v10) >> 1) {
    size_t v33 = (v23 - v10) >> 1;
  }
  else {
    size_t v33 = v23 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      unint64_t v34 = v16 + 2;
      unsigned int v36 = (v16[1] + v16[v15 + 1] + 1) >> 1;
      unsigned char *v22 = (*v16 + v16[v15] + 1) >> 1;
      v22[1] = v36;
      unint64_t v35 = v22 + 2;
      if (!v33)
      {
LABEL_29:
        v16 += 2 * v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v34 = v16;
      unint64_t v35 = v22;
      if (!v33) {
        goto LABEL_29;
      }
    }
    uint64_t v37 = -(uint64_t)v33;
    do
    {
      int v38 = *v34;
      int v39 = v34[1];
      int v40 = v34[v15];
      int v41 = v34[v15 + 1];
      v34 += 2;
      *unint64_t v35 = (v38 + v40 + 1) >> 1;
      v35[1] = (v39 + v41 + 1) >> 1;
      v35 += 2;
      BOOL v31 = __CFADD__(v37++, 1);
    }
    while (!v31);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    unint64_t v42 = 0;
    unint64_t v43 = v24 - v32;
    do
    {
      unint64_t v44 = v16;
      uint64_t v45 = v22;
      if (v8)
      {
        unint64_t v44 = v16 + 2;
        unsigned int v46 = (v16[1] + v16[v15 + 1] + 1) >> 1;
        unsigned char *v22 = (*v16 + v16[v15] + 1) >> 1;
        v22[1] = v46;
        uint64_t v45 = v22 + 2;
      }
      if (v33)
      {
        uint64_t v47 = -(uint64_t)v33;
        do
        {
          int v48 = *v44;
          int v49 = v44[1];
          int v50 = v44[v15];
          int v51 = v44[v15 + 1];
          v44 += 2;
          unsigned char *v45 = (v48 + v50 + 1) >> 1;
          v45[1] = (v49 + v51 + 1) >> 1;
          v45 += 2;
          BOOL v31 = __CFADD__(v47++, 1);
        }
        while (!v31);
      }
      v16 += 2 * v15;
      v22 += v21;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = v9 & 1;
  uint64_t v12 = v11 + v9;
  unint64_t v13 = v10 & 1;
  unint64_t v14 = v13 + v10;
  uint64_t v15 = (*(_DWORD *)(a2 + 24) + v10) & 0xFFFFFFFE;
  uint64_t v16 = a4[1];
  uint64_t v17 = (__int16 *)(a3[1] + v16 * (v13 + v10) + ((v11 + v9) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v18 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v11 + v9) >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE)
                                                                                          - v18)
    size_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v18;
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - v12;
  }
  unint64_t v24 = v15 - v14;
  if (v15 - v14 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    unint64_t v45 = v24;
    uint64_t v46 = a4[1];
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    if (v14 >= v10) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = (char *)(*a3 + *a4 * v14 + v12 + v27);
    uint64_t v29 = (char *)(*a7 + v26 * v19 + v18);
    uint64_t v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v23);
      v28 += v25;
      v29 += v26;
      BOOL v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v13 = *(void *)(a2 + 40) & 1;
    uint64_t v11 = v9 & 1;
    unint64_t v24 = v45;
    uint64_t v16 = v46;
  }
  if (v24 >= v13) {
    unint64_t v32 = v13;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v23 >> 1 >= (v23 - v11) >> 1) {
    size_t v33 = (v23 - v11) >> 1;
  }
  else {
    size_t v33 = v23 >> 1;
  }
  if (v13)
  {
    unint64_t v34 = v17;
    if (v9)
    {
      unint64_t v34 = v17 + 1;
      __int16 *v22 = *v17;
      unint64_t v35 = v22 + 1;
      if (!v33)
      {
LABEL_28:
        v17 += v16;
        unint64_t v22 = (__int16 *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v35 = v22;
      if (!v33) {
        goto LABEL_28;
      }
    }
    uint64_t v36 = -(uint64_t)v33;
    do
    {
      __int16 v37 = *v34++;
      *v35++ = v37;
      BOOL v31 = __CFADD__(v36++, 1);
    }
    while (!v31);
    goto LABEL_28;
  }
LABEL_29:
  if (v24 != v32)
  {
    unint64_t v38 = 0;
    unint64_t v39 = v24 - v32;
    do
    {
      int v40 = v17;
      int v41 = v22;
      if (v9)
      {
        int v40 = v17 + 1;
        __int16 *v22 = *v17;
        int v41 = v22 + 1;
      }
      if (v33)
      {
        uint64_t v42 = -(uint64_t)v33;
        do
        {
          __int16 v43 = *v40++;
          *v41++ = v43;
          BOOL v31 = __CFADD__(v42++, 1);
        }
        while (!v31);
      }
      v17 += v16;
      unint64_t v22 = (__int16 *)((char *)v22 + v21);
      v38 += 2;
    }
    while (v38 < v39);
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  size_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v11 + v32;
    unint64_t v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v34 + i) = ((7204443 * *(unsigned __int8 *)(v33 + i)) >> 23) + 16;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v24 >> 1;
  unint64_t v38 = v24 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v12)
  {
    if (v8)
    {
      int v40 = v15 + 2;
      unsigned int v43 = (((7368928 * v15[1]) >> 23) + ((7368928 * v15[v14 + 1]) >> 23) + 33) >> 1;
      unsigned char *v22 = (((7368928 * *v15) >> 23) + ((7368928 * v15[v14]) >> 23) + 33) >> 1;
      int v41 = v22 + 1;
      *size_t v23 = v43;
      uint64_t v42 = v23 + 1;
      if (!v39)
      {
LABEL_29:
        v15 += 2 * v14;
        v22 += v20;
        v23 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      int v40 = v15;
      int v41 = v22;
      uint64_t v42 = v23;
      if (!v39) {
        goto LABEL_29;
      }
    }
    uint64_t v44 = -(uint64_t)v39;
    do
    {
      int v45 = *v40;
      int v46 = v40[1];
      int v47 = v40[v14];
      int v48 = v40[v14 + 1];
      v40 += 2;
      *v41++ = (((7368928 * v45) >> 23) + ((7368928 * v47) >> 23) + 33) >> 1;
      *v42++ = (((7368928 * v46) >> 23) + ((7368928 * v48) >> 23) + 33) >> 1;
      BOOL v49 = __CFADD__(v44++, 1);
    }
    while (!v49);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v36)
  {
    unint64_t v50 = 0;
    unint64_t v51 = v26 - v36;
    do
    {
      int v52 = v15;
      int v53 = v22;
      unint64_t v54 = v23;
      if (v8)
      {
        int v52 = v15 + 2;
        unsigned int v55 = (((7368928 * v15[1]) >> 23) + ((7368928 * v15[v14 + 1]) >> 23) + 33) >> 1;
        unsigned char *v22 = (((7368928 * *v15) >> 23) + ((7368928 * v15[v14]) >> 23) + 33) >> 1;
        int v53 = v22 + 1;
        *size_t v23 = v55;
        unint64_t v54 = v23 + 1;
      }
      if (v39)
      {
        uint64_t v56 = -(uint64_t)v39;
        do
        {
          int v57 = *v52;
          int v58 = v52[1];
          int v59 = v52[v14];
          int v60 = v52[v14 + 1];
          v52 += 2;
          *v53++ = (((7368928 * v57) >> 23) + ((7368928 * v59) >> 23) + 33) >> 1;
          *v54++ = (((7368928 * v58) >> 23) + ((7368928 * v60) >> 23) + 33) >> 1;
          BOOL v49 = __CFADD__(v56++, 1);
        }
        while (!v49);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  size_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v11 + v32;
    unint64_t v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v34 + i) = ((7204443 * *(unsigned __int8 *)(v33 + i)) >> 23) + 16;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v24 >> 1;
  unint64_t v38 = v24 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v12)
  {
    if (v8)
    {
      int v40 = v15 + 2;
      unsigned int v43 = (7368928 * v15[1]) >> 23;
      unsigned char *v22 = ((7368928 * *v15) >> 23) + 16;
      int v41 = v22 + 1;
      *size_t v23 = v43 + 16;
      uint64_t v42 = v23 + 1;
      if (!v39)
      {
LABEL_29:
        v15 += 2 * v14;
        v22 += v20;
        v23 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      int v40 = v15;
      int v41 = v22;
      uint64_t v42 = v23;
      if (!v39) {
        goto LABEL_29;
      }
    }
    uint64_t v44 = -(uint64_t)v39;
    do
    {
      unsigned int v45 = 7368928 * v40[1];
      *v41++ = ((7368928 * *v40) >> 23) + 16;
      *v42++ = (v45 >> 23) + 16;
      v40 += 2;
      BOOL v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v36)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v36;
    uint64_t v49 = 2 * v14;
    do
    {
      unint64_t v50 = v15;
      unint64_t v51 = v22;
      int v52 = v23;
      if (v8)
      {
        unint64_t v50 = v15 + 2;
        unsigned int v53 = (7368928 * v15[1]) >> 23;
        unsigned char *v22 = ((7368928 * *v15) >> 23) + 16;
        unint64_t v51 = v22 + 1;
        *size_t v23 = v53 + 16;
        int v52 = v23 + 1;
      }
      if (v39)
      {
        uint64_t v54 = -(uint64_t)v39;
        do
        {
          unsigned int v55 = 7368928 * v50[1];
          *v51++ = ((7368928 * *v50) >> 23) + 16;
          *v52++ = (v55 >> 23) + 16;
          v50 += 2;
          BOOL v46 = __CFADD__(v54++, 1);
        }
        while (!v46);
      }
      v15 += v49;
      v22 += v20;
      v23 += v21;
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyAvg_422f_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  size_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v25 = v18 - v17;
  }
  else {
    size_t v25 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  else {
    unint64_t v26 = v14 - v13;
  }
  if (v26)
  {
    unint64_t v58 = v26;
    uint64_t v59 = a8[2];
    uint64_t v60 = a8[1];
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    if (v13 >= v9) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = (char *)(*a3 + *a4 * v13 + v11 + v29);
    uint64_t v31 = (char *)(*a7 + v28 * v19 + v17);
    uint64_t v32 = -(uint64_t)v26;
    do
    {
      memcpy(v31, v30, v25);
      v30 += v27;
      v31 += v28;
      BOOL v33 = __CFADD__(v32++, 1);
    }
    while (!v33);
    unint64_t v26 = v58;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
    uint64_t v22 = v59;
    uint64_t v21 = v60;
  }
  if (v26 >= v12) {
    unint64_t v34 = v12;
  }
  else {
    unint64_t v34 = 0;
  }
  if (v25 >> 1 >= (v25 - v10) >> 1) {
    size_t v35 = (v25 - v10) >> 1;
  }
  else {
    size_t v35 = v25 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      unint64_t v36 = v16 + 2;
      unsigned int v39 = (v16[1] + v16[v15 + 1] + 1) >> 1;
      *size_t v23 = (*v16 + v16[v15] + 1) >> 1;
      unint64_t v37 = v23 + 1;
      *unint64_t v24 = v39;
      unint64_t v38 = v24 + 1;
      if (!v35)
      {
LABEL_29:
        v16 += 2 * v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v36 = v16;
      unint64_t v37 = v23;
      unint64_t v38 = v24;
      if (!v35) {
        goto LABEL_29;
      }
    }
    uint64_t v40 = -(uint64_t)v35;
    do
    {
      int v41 = *v36;
      int v42 = v36[1];
      int v43 = v36[v15];
      int v44 = v36[v15 + 1];
      v36 += 2;
      *v37++ = (v41 + v43 + 1) >> 1;
      *v38++ = (v42 + v44 + 1) >> 1;
      BOOL v33 = __CFADD__(v40++, 1);
    }
    while (!v33);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v34)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v26 - v34;
    do
    {
      unint64_t v47 = v16;
      unint64_t v48 = v23;
      uint64_t v49 = v24;
      if (v8)
      {
        unint64_t v47 = v16 + 2;
        unsigned int v50 = (v16[1] + v16[v15 + 1] + 1) >> 1;
        *size_t v23 = (*v16 + v16[v15] + 1) >> 1;
        unint64_t v48 = v23 + 1;
        *unint64_t v24 = v50;
        uint64_t v49 = v24 + 1;
      }
      if (v35)
      {
        uint64_t v51 = -(uint64_t)v35;
        do
        {
          int v52 = *v47;
          int v53 = v47[1];
          int v54 = v47[v15];
          int v55 = v47[v15 + 1];
          v47 += 2;
          *v48++ = (v52 + v54 + 1) >> 1;
          *v49++ = (v53 + v55 + 1) >> 1;
          BOOL v33 = __CFADD__(v51++, 1);
        }
        while (!v33);
      }
      v16 += 2 * v15;
      v23 += v21;
      v24 += v22;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_422f_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned char *)(a3[1] + v14 * (v12 + v9) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  size_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v17 - v16) {
    size_t v24 = v17 - v16;
  }
  else {
    size_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  unint64_t v25 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v25 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v25)
  {
    unint64_t v51 = v25;
    uint64_t v52 = a4[1];
    uint64_t v53 = a8[1];
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = (char *)(*a3 + *a4 * v13 + v11 + v28);
    uint64_t v30 = (char *)(*a7 + v27 * v18 + v16);
    uint64_t v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, v24);
      v29 += v26;
      v30 += v27;
      BOOL v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    unint64_t v25 = v51;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
    uint64_t v14 = v52;
    uint64_t v20 = v53;
  }
  if (v25 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v24 >> 1 >= (v24 - v10) >> 1) {
    size_t v34 = (v24 - v10) >> 1;
  }
  else {
    size_t v34 = v24 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      char v38 = v15[1];
      size_t v35 = v15 + 2;
      unsigned char *v22 = *v15;
      unint64_t v36 = v22 + 1;
      *size_t v23 = v38;
      unint64_t v37 = v23 + 1;
      if (!v34)
      {
LABEL_28:
        v15 += 2 * v14;
        v22 += v20;
        v23 += v21;
        goto LABEL_29;
      }
    }
    else
    {
      size_t v35 = v15;
      unint64_t v36 = v22;
      unint64_t v37 = v23;
      if (!v34) {
        goto LABEL_28;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      char v40 = v35[1];
      *v36++ = *v35;
      *v37++ = v40;
      v35 += 2;
      BOOL v32 = __CFADD__(v39++, 1);
    }
    while (!v32);
    goto LABEL_28;
  }
LABEL_29:
  if (v25 != v33)
  {
    unint64_t v41 = 0;
    unint64_t v42 = v25 - v33;
    do
    {
      int v43 = v15;
      int v44 = v22;
      unint64_t v45 = v23;
      if (v8)
      {
        char v46 = v15[1];
        int v43 = v15 + 2;
        unsigned char *v22 = *v15;
        int v44 = v22 + 1;
        *size_t v23 = v46;
        unint64_t v45 = v23 + 1;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          char v48 = v43[1];
          *v44++ = *v43;
          *v45++ = v48;
          v43 += 2;
          BOOL v32 = __CFADD__(v47++, 1);
        }
        while (!v32);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_Copy_v4a8_y416(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a4[1];
    uint64_t v11 = a4[2];
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v16 = a2[4];
    uint64_t v17 = a2[5];
    uint64_t v18 = *a3;
    uint64_t v19 = a3[1] + v12 * v17;
    uint64_t v20 = a3[2] + v11 * v17;
    uint64_t v21 = v18 + *a4 * v17;
    uint64_t v22 = v19 + 2 * v16;
    uint64_t v23 = v20 + v16;
    uint64_t v24 = v21 + v16;
    do
    {
      if (v8)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v28 = (_WORD *)(v15 + v26);
          __int16 v29 = *(unsigned __int8 *)(v22 + v25) << 8;
          __int16 v30 = *(unsigned __int8 *)(v22 + v25 + 1) << 8;
          __int16 v31 = *(unsigned __int8 *)(v24 + i) << 8;
          *uint64_t v28 = *(unsigned __int8 *)(v23 + i) | (*(unsigned __int8 *)(v23 + i) << 8);
          v28[1] = v31;
          void v28[2] = v29;
          v28[3] = v30;
          v26 += 8;
          v25 += 2;
        }
      }
      v24 += v13;
      v15 += v14;
      v22 += v12;
      v23 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v4a8_y408(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a4[1];
    uint64_t v11 = a4[2];
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v16 = a2[4];
    uint64_t v17 = a2[5];
    uint64_t v18 = *a3;
    uint64_t v19 = a3[1] + v12 * v17;
    uint64_t v20 = a3[2] + v11 * v17;
    uint64_t v21 = v18 + *a4 * v17;
    uint64_t v22 = v19 + 2 * v16;
    uint64_t v23 = v20 + v16;
    uint64_t v24 = v21 + v16;
    do
    {
      if (v8)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v28 = v15 + v26;
          __int16 v29 = *(_WORD *)(v22 + v25);
          char v30 = *(unsigned char *)(v24 + i);
          *(unsigned char *)uint64_t v28 = *(unsigned char *)(v23 + i);
          *(unsigned char *)(v28 + 1) = v30;
          *(_WORD *)(v28 + 2) = v29;
          v26 += 4;
          v25 += 2;
        }
      }
      v24 += v13;
      v15 += v14;
      v22 += v12;
      v23 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 2 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (_WORD *)(v16 + 2 * v20);
          __int16 v23 = (*(unsigned __int8 *)(v18 + v20 + 3) + (unsigned __int16)*(unsigned __int8 *)(v18 + v20 + 1)) << 7;
          __int16 v24 = *(unsigned __int8 *)(v19 + i) << 8;
          __int16 v25 = *(unsigned __int8 *)(v19 + i + 1) << 8;
          _WORD *v22 = (*(unsigned __int8 *)(v18 + v20 + 2) + (unsigned __int16)*(unsigned __int8 *)(v18 + v20)) << 7;
          v22[1] = v24;
          v22[2] = v23;
          void v22[3] = v25;
          v20 += 4;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 2 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (_WORD *)(v16 + 2 * v20);
          __int16 v23 = *(unsigned __int8 *)(v18 + v20 + 1) << 8;
          __int16 v24 = *(unsigned __int8 *)(v19 + i) << 8;
          __int16 v25 = *(unsigned __int8 *)(v19 + i + 1) << 8;
          _WORD *v22 = *(unsigned __int8 *)(v18 + v20) << 8;
          v22[1] = v24;
          v22[2] = v23;
          void v22[3] = v25;
          v20 += 4;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 2 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (unsigned char *)(v16 + v20);
          unsigned int v23 = (*(unsigned __int8 *)(v18 + v20 + 1) + *(unsigned __int8 *)(v18 + v20 + 3) + 1) >> 1;
          char v24 = *(unsigned char *)(v19 + i);
          char v25 = *(unsigned char *)(v19 + i + 1);
          unsigned char *v22 = (*(unsigned __int8 *)(v18 + v20) + *(unsigned __int8 *)(v18 + v20 + 2) + 1) >> 1;
          v22[1] = v24;
          v22[2] = v23;
          void v22[3] = v25;
          v20 += 4;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 2 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (unsigned char *)(v16 + v20);
          char v23 = *(unsigned char *)(v18 + v20 + 1);
          char v24 = *(unsigned char *)(v19 + i);
          char v25 = *(unsigned char *)(v19 + i + 1);
          unsigned char *v22 = *(unsigned char *)(v18 + v20);
          v22[1] = v24;
          v22[2] = v23;
          void v22[3] = v25;
          v20 += 4;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v4a8_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v15 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v14;
    uint64_t v22 = *a7 + *a8 * v14;
    uint64_t v23 = *a4;
    uint64_t v24 = a4[2];
    uint64_t v25 = v21 + 2 * v15;
    uint64_t v26 = v22 + 2 * v15;
    uint64_t v27 = a3[2] + v24 * v8 + v9;
    uint64_t v28 = *a3 + v23 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v25 + 2 * i) = *(unsigned __int8 *)(v27 + i) | (*(unsigned __int8 *)(v27 + i) << 8);
          *(_WORD *)(v26 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v30 = v8 & 1;
  if (v11 >= v30) {
    uint64_t v31 = v8 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  unint64_t v33 = v9 & 1;
  if (v10 >= v33) {
    unint64_t v34 = v33;
  }
  else {
    unint64_t v34 = 0;
  }
  unint64_t v35 = v10 - v34;
  if (v8)
  {
    if (v32)
    {
      unint64_t v36 = v13 + 2;
      __int16 v38 = v13[1] << 8;
      *uint64_t v17 = *v13 << 8;
      v17[1] = v38;
      unint64_t v37 = v17 + 2;
    }
    else
    {
      unint64_t v36 = v13;
      unint64_t v37 = v17;
    }
    if (v10 == v34)
    {
      unint64_t v39 = 0;
    }
    else
    {
      unint64_t v40 = v10 - v34;
      do
      {
        __int16 v41 = *v36;
        __int16 v42 = v36[1];
        v36 += 2;
        *unint64_t v37 = v41 << 8;
        v37[1] = v42 << 8;
        v37 += 2;
        --v40;
      }
      while (v40);
      unint64_t v39 = v10 - v34;
    }
    if (v39 + v33 < v10)
    {
      __int16 v43 = *v36 << 8;
      __int16 v44 = v36[1] << 8;
      *unint64_t v37 = v43;
      v37[1] = v44;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v31)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v11 - v31;
    do
    {
      uint64_t v47 = v13;
      char v48 = v17;
      if (v32)
      {
        uint64_t v47 = v13 + 2;
        __int16 v49 = v13[1] << 8;
        *uint64_t v17 = *v13 << 8;
        v17[1] = v49;
        char v48 = v17 + 2;
      }
      if (v10 == v34)
      {
        unint64_t v50 = 0;
      }
      else
      {
        unint64_t v51 = v10 - v34;
        do
        {
          __int16 v52 = *v47;
          __int16 v53 = v47[1];
          v47 += 2;
          _WORD *v48 = v52 << 8;
          v48[1] = v53 << 8;
          v48 += 2;
          --v51;
        }
        while (v51);
        unint64_t v50 = v10 - v34;
      }
      if (v50 + v33 < v10)
      {
        __int16 v54 = *v47 << 8;
        __int16 v55 = v47[1] << 8;
        _WORD *v48 = v54;
        v48[1] = v55;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v11)
  {
    if (v32)
    {
      __int16 v56 = *v13;
      __int16 v57 = v13[1];
      v13 += 2;
      *uint64_t v17 = v56 << 8;
      v17[1] = v57 << 8;
      v17 += 2;
    }
    if (v10 == v34)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v58 = v10 - v34;
      do
      {
        __int16 v59 = *v13;
        __int16 v60 = v13[1];
        v13 += 2;
        *uint64_t v17 = v59 << 8;
        v17[1] = v60 << 8;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v35 + v33 < v10)
    {
      __int16 v61 = *v13 << 8;
      __int16 v62 = v13[1] << 8;
      *uint64_t v17 = v61;
      v17[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v22 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(unsigned __int8 *)(v22 + i) << 8;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v24 = v8 & 1;
  if (v11 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v26)
    {
      unint64_t v30 = v13 + 2;
      __int16 v32 = v13[1] << 8;
      *uint64_t v17 = *v13 << 8;
      v17[1] = v32;
      uint64_t v31 = v17 + 2;
    }
    else
    {
      unint64_t v30 = v13;
      uint64_t v31 = v17;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        __int16 v35 = *v30;
        __int16 v36 = v30[1];
        v30 += 2;
        *uint64_t v31 = v35 << 8;
        v31[1] = v36 << 8;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      __int16 v37 = *v30 << 8;
      __int16 v38 = v30[1] << 8;
      *uint64_t v31 = v37;
      v31[1] = v38;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v11 - v25;
    do
    {
      __int16 v41 = v13;
      __int16 v42 = v17;
      if (v26)
      {
        __int16 v41 = v13 + 2;
        __int16 v43 = v13[1] << 8;
        *uint64_t v17 = *v13 << 8;
        v17[1] = v43;
        __int16 v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          __int16 v46 = *v41;
          __int16 v47 = v41[1];
          v41 += 2;
          *__int16 v42 = v46 << 8;
          v42[1] = v47 << 8;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        __int16 v48 = *v41 << 8;
        __int16 v49 = v41[1] << 8;
        *__int16 v42 = v48;
        v42[1] = v49;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if (v26)
    {
      __int16 v50 = *v13;
      __int16 v51 = v13[1];
      v13 += 2;
      *uint64_t v17 = v50 << 8;
      v17[1] = v51 << 8;
      v17 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        __int16 v53 = *v13;
        __int16 v54 = v13[1];
        v13 += 2;
        *uint64_t v17 = v53 << 8;
        v17[1] = v54 << 8;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      __int16 v55 = *v13 << 8;
      __int16 v56 = v13[1] << 8;
      *uint64_t v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          unsigned int v25 = *(unsigned __int8 *)(v23 + i);
          if (v25 >= 0xEB) {
            unsigned int v25 = 235;
          }
          if (v25 <= 0x10) {
            unsigned int v25 = 16;
          }
          *(_WORD *)(v22 + 2 * i) = (-1048560 - v25 + (v25 << 16)) / 0xDB;
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v26 = v8 & 1;
  if (v18 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      unsigned int v34 = *v13;
      unsigned int v35 = v13[1];
      if (v34 >= 0xF0) {
        unsigned int v34 = 240;
      }
      if (v34 <= 0x10) {
        unsigned int v34 = 16;
      }
      if (v35 >= 0xF0) {
        unsigned int v35 = 240;
      }
      if (v35 <= 0x10) {
        int v36 = 16;
      }
      else {
        int v36 = v35;
      }
      __int16 v32 = v13 + 2;
      *uint64_t v17 = (613566757 * (unint64_t)((-1048560 - v34 + (v34 << 16)) >> 5)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1048560 - v36 + (v36 << 16)) >> 5)) >> 32;
      unint64_t v33 = v17 + 2;
    }
    else
    {
      __int16 v32 = v13;
      unint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v37 = 0;
    }
    else
    {
      unint64_t v38 = v10 - v30;
      do
      {
        unsigned int v39 = *v32;
        unsigned int v40 = v32[1];
        if (v39 >= 0xF0) {
          unsigned int v39 = 240;
        }
        if (v39 <= 0x10) {
          unsigned int v39 = 16;
        }
        if (v40 >= 0xF0) {
          unsigned int v40 = 240;
        }
        if (v40 <= 0x10) {
          unsigned int v40 = 16;
        }
        v32 += 2;
        *unint64_t v33 = (613566757 * (unint64_t)((-1048560 - v39 + (v39 << 16)) >> 5)) >> 32;
        v33[1] = (613566757 * (unint64_t)((-1048560 - v40 + (v40 << 16)) >> 5)) >> 32;
        v33 += 2;
        --v38;
      }
      while (v38);
      unint64_t v37 = v10 - v30;
    }
    if (v37 + v29 < v10)
    {
      unsigned int v41 = *v32;
      unsigned int v42 = v32[1];
      if (v41 >= 0xF0) {
        unsigned int v41 = 240;
      }
      if (v41 <= 0x10) {
        unsigned int v41 = 16;
      }
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        unsigned int v42 = 16;
      }
      *unint64_t v33 = (613566757 * (unint64_t)((-1048560 - v41 + (v41 << 16)) >> 5)) >> 32;
      v33[1] = (613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v18 - v27;
    do
    {
      unint64_t v45 = v13;
      __int16 v46 = v17;
      if (v28)
      {
        unsigned int v47 = *v13;
        unsigned int v48 = v13[1];
        if (v47 >= 0xF0) {
          unsigned int v47 = 240;
        }
        if (v47 <= 0x10) {
          unsigned int v47 = 16;
        }
        if (v48 >= 0xF0) {
          unsigned int v48 = 240;
        }
        if (v48 <= 0x10) {
          int v49 = 16;
        }
        else {
          int v49 = v48;
        }
        unint64_t v45 = v13 + 2;
        *uint64_t v17 = (613566757 * (unint64_t)((-1048560 - v47 + (v47 << 16)) >> 5)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-1048560 - v49 + (v49 << 16)) >> 5)) >> 32;
        __int16 v46 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v50 = 0;
      }
      else
      {
        unint64_t v51 = v10 - v30;
        do
        {
          unsigned int v52 = *v45;
          unsigned int v53 = v45[1];
          if (v52 >= 0xF0) {
            unsigned int v52 = 240;
          }
          if (v52 <= 0x10) {
            unsigned int v52 = 16;
          }
          if (v53 >= 0xF0) {
            unsigned int v53 = 240;
          }
          if (v53 <= 0x10) {
            unsigned int v53 = 16;
          }
          v45 += 2;
          _WORD *v46 = (613566757 * (unint64_t)((-1048560 - v52 + (v52 << 16)) >> 5)) >> 32;
          v46[1] = (613566757 * (unint64_t)((-1048560 - v53 + (v53 << 16)) >> 5)) >> 32;
          v46 += 2;
          --v51;
        }
        while (v51);
        unint64_t v50 = v10 - v30;
      }
      if (v50 + v29 < v10)
      {
        unsigned int v54 = *v45;
        unsigned int v55 = v45[1];
        if (v54 >= 0xF0) {
          unsigned int v54 = 240;
        }
        if (v54 <= 0x10) {
          unsigned int v54 = 16;
        }
        if (v55 >= 0xF0) {
          unsigned int v55 = 240;
        }
        if (v55 <= 0x10) {
          unsigned int v55 = 16;
        }
        _WORD *v46 = (613566757 * (unint64_t)((-1048560 - v54 + (v54 << 16)) >> 5)) >> 32;
        v46[1] = (613566757 * (unint64_t)((-1048560 - v55 + (v55 << 16)) >> 5)) >> 32;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v26 < v18)
  {
    if (v28)
    {
      unsigned int v56 = *v13;
      unsigned int v57 = v13[1];
      if (v56 >= 0xF0) {
        unsigned int v56 = 240;
      }
      if (v56 <= 0x10) {
        unsigned int v56 = 16;
      }
      if (v57 >= 0xF0) {
        unsigned int v57 = 240;
      }
      if (v57 <= 0x10) {
        unsigned int v57 = 16;
      }
      v13 += 2;
      *uint64_t v17 = (613566757 * (unint64_t)((-1048560 - v56 + (v56 << 16)) >> 5)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1048560 - v57 + (v57 << 16)) >> 5)) >> 32;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v58 = v10 - v30;
      do
      {
        unsigned int v59 = *v13;
        unsigned int v60 = v13[1];
        if (v59 >= 0xF0) {
          unsigned int v59 = 240;
        }
        if (v59 <= 0x10) {
          unsigned int v59 = 16;
        }
        if (v60 >= 0xF0) {
          unsigned int v60 = 240;
        }
        if (v60 <= 0x10) {
          unsigned int v60 = 16;
        }
        v13 += 2;
        *uint64_t v17 = (613566757 * (unint64_t)((-1048560 - v59 + (v59 << 16)) >> 5)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v31 + v29 < v10)
    {
      unsigned int v61 = *v13;
      unsigned int v62 = v13[1];
      if (v61 >= 0xF0) {
        unsigned int v61 = 240;
      }
      if (v61 <= 0x10) {
        unsigned int v61 = 16;
      }
      if (v62 >= 0xF0) {
        unsigned int v62 = 240;
      }
      if (v62 <= 0x10) {
        unsigned int v62 = 16;
      }
      *uint64_t v17 = (613566757 * (unint64_t)((-1048560 - v61 + (v61 << 16)) >> 5)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1048560 - v62 + (v62 << 16)) >> 5)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_v4a8_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21) {
    unint64_t v20 = v21;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = a7[2] + v24 * v16;
    uint64_t v26 = *a7 + *a8 * v16;
    uint64_t v27 = *a4;
    uint64_t v28 = a4[2];
    uint64_t v29 = v25 + v17;
    uint64_t v30 = v26 + v17;
    uint64_t v31 = a3[2] + v28 * v12 + v11;
    uint64_t v32 = *a3 + v27 * v12 + v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) | (*(unsigned __int8 *)(v31 + i) << 8);
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  unint64_t v34 = v12 & 1;
  if (v8 >= v34) {
    uint64_t v35 = v12 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  char v36 = v9;
  if (v20 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v20 - v10;
  if (v12)
  {
    if (v36)
    {
      unint64_t v38 = v14 + 4;
      __int16 v40 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *uint64_t v19 = (v14[2] + (unsigned __int16)*v14) << 7;
      v19[1] = v40;
      unsigned int v39 = v19 + 2;
    }
    else
    {
      unint64_t v38 = v14;
      unsigned int v39 = v19;
    }
    if (v20 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        __int16 v43 = (v38[3] + (unsigned __int16)v38[1]) << 7;
        *unsigned int v42 = (v38[2] + (unsigned __int16)*v38) << 7;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 += v13;
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v35;
    do
    {
      __int16 v46 = v14;
      unsigned int v47 = v19;
      if (v36)
      {
        __int16 v46 = v14 + 4;
        __int16 v48 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *uint64_t v19 = (v14[2] + (unsigned __int16)*v14) << 7;
        v19[1] = v48;
        unsigned int v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          __int16 v51 = (v46[3] + (unsigned __int16)v46[1]) << 7;
          *unint64_t v50 = (v46[2] + (unsigned __int16)*v46) << 7;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 += v13;
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if (v36)
    {
      __int16 v52 = *v14;
      __int16 v53 = v14[1];
      __int16 v54 = v14[2];
      __int16 v55 = v14[3];
      v14 += 4;
      *uint64_t v19 = (v54 + v52) << 7;
      v19[1] = (v55 + v53) << 7;
      v19 += 2;
    }
    if (v20 != v10)
    {
      unint64_t v56 = 0;
      do
      {
        unsigned int v57 = &v19[v56];
        __int16 v58 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *unsigned int v57 = (v14[2] + (unsigned __int16)*v14) << 7;
        v57[1] = v58;
        v56 += 2;
        v14 += 4;
      }
      while (v56 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_v4a8_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21) {
    unint64_t v20 = v21;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = a7[2] + v24 * v16;
    uint64_t v26 = *a7 + *a8 * v16;
    uint64_t v27 = *a4;
    uint64_t v28 = a4[2];
    uint64_t v29 = v25 + v17;
    uint64_t v30 = v26 + v17;
    uint64_t v31 = a3[2] + v28 * v12 + v11;
    uint64_t v32 = *a3 + v27 * v12 + v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) | (*(unsigned __int8 *)(v31 + i) << 8);
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  unint64_t v34 = v12 & 1;
  if (v8 >= v34) {
    uint64_t v35 = v12 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  char v36 = v9;
  if (v20 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v20 - v10;
  if (v12)
  {
    if (v36)
    {
      unint64_t v38 = v14 + 4;
      __int16 v40 = v14[1] << 8;
      *uint64_t v19 = *v14 << 8;
      v19[1] = v40;
      unsigned int v39 = v19 + 2;
    }
    else
    {
      unint64_t v38 = v14;
      unsigned int v39 = v19;
    }
    if (v20 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        __int16 v43 = v38[1] << 8;
        *unsigned int v42 = *v38 << 8;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 += v13;
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v35;
    do
    {
      __int16 v46 = v14;
      unsigned int v47 = v19;
      if (v36)
      {
        __int16 v46 = v14 + 4;
        __int16 v48 = v14[1] << 8;
        *uint64_t v19 = *v14 << 8;
        v19[1] = v48;
        unsigned int v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          __int16 v51 = v46[1] << 8;
          *unint64_t v50 = *v46 << 8;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 += v13;
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if (v36)
    {
      __int16 v52 = *v14;
      __int16 v53 = v14[1];
      v14 += 4;
      *uint64_t v19 = v52 << 8;
      v19[1] = v53 << 8;
      v19 += 2;
    }
    if (v20 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        __int16 v55 = &v19[v54];
        __int16 v56 = v14[1] << 8;
        _WORD *v55 = *v14 << 8;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      __int16 v36 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *unint64_t v21 = (v14[2] + (unsigned __int16)*v14) << 7;
      v21[1] = v36;
      uint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unint64_t v38 = &v35[v37];
        __int16 v39 = (v34[3] + (unsigned __int16)v34[1]) << 7;
        _WORD *v38 = (v34[2] + (unsigned __int16)*v34) << 7;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      unsigned int v42 = v14;
      __int16 v43 = v21;
      if (v32)
      {
        unsigned int v42 = v14 + 4;
        __int16 v44 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *unint64_t v21 = (v14[2] + (unsigned __int16)*v14) << 7;
        v21[1] = v44;
        __int16 v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          __int16 v46 = &v43[v45];
          __int16 v47 = (v42[3] + (unsigned __int16)v42[1]) << 7;
          _WORD *v46 = (v42[2] + (unsigned __int16)*v42) << 7;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      __int16 v48 = *v14;
      __int16 v49 = v14[1];
      __int16 v50 = v14[2];
      __int16 v51 = v14[3];
      v14 += 4;
      *unint64_t v21 = (v50 + v48) << 7;
      v21[1] = (v51 + v49) << 7;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        __int16 v53 = &v21[v52];
        __int16 v54 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *__int16 v53 = (v14[2] + (unsigned __int16)*v14) << 7;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      __int16 v36 = v14[1] << 8;
      *unint64_t v21 = *v14 << 8;
      v21[1] = v36;
      uint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unint64_t v38 = &v35[v37];
        __int16 v39 = v34[1] << 8;
        _WORD *v38 = *v34 << 8;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      unsigned int v42 = v14;
      __int16 v43 = v21;
      if (v32)
      {
        unsigned int v42 = v14 + 4;
        __int16 v44 = v14[1] << 8;
        *unint64_t v21 = *v14 << 8;
        v21[1] = v44;
        __int16 v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          __int16 v46 = &v43[v45];
          __int16 v47 = v42[1] << 8;
          _WORD *v46 = *v42 << 8;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      __int16 v48 = *v14;
      __int16 v49 = v14[1];
      v14 += 4;
      *unint64_t v21 = v48 << 8;
      v21[1] = v49 << 8;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        __int16 v51 = &v21[v50];
        __int16 v52 = v14[1] << 8;
        *__int16 v51 = *v14 << 8;
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int8 *)(v28 + i);
          if (v30 >= 0xEB) {
            unsigned int v30 = 235;
          }
          if (v30 <= 0x10) {
            unsigned int v30 = 16;
          }
          *(_WORD *)(v27 + 2 * i) = (-1048560 - v30 + (v30 << 16)) / 0xDB;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      if (v37 >= 0xF0) {
        unsigned int v37 = 240;
      }
      if (v37 <= 0x10) {
        int v38 = 16;
      }
      else {
        int v38 = v37;
      }
      if (v14[1] >= 0xF0u) {
        unsigned int v39 = 240;
      }
      else {
        unsigned int v39 = v14[1];
      }
      if (v39 <= 0x10) {
        int v40 = 16;
      }
      else {
        int v40 = v39;
      }
      unsigned int v41 = v14[2];
      if (v41 >= 0xF0) {
        unsigned int v41 = 240;
      }
      if (v41 <= 0x10) {
        int v42 = 16;
      }
      else {
        int v42 = v41;
      }
      if (v14[3] >= 0xF0u) {
        unsigned int v43 = 240;
      }
      else {
        unsigned int v43 = v14[3];
      }
      if (v43 <= 0x10) {
        int v44 = 16;
      }
      else {
        int v44 = v43;
      }
      uint64_t v35 = v14 + 4;
      *unint64_t v21 = (((613566757 * (unint64_t)((-1048560 - v38 + (v38 << 16)) >> 5)) >> 32)
                          + ((613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32)
                          + 1) >> 1;
      v21[1] = (((613566757 * (unint64_t)((-1048560 - v40 + (v40 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32)
                            + 1) >> 1;
      __int16 v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v45 = 0;
      do
      {
        __int16 v46 = &v36[v45];
        unsigned int v47 = *v35;
        unsigned int v48 = v35[1];
        if (v47 >= 0xF0) {
          unsigned int v47 = 240;
        }
        if (v47 <= 0x10) {
          unsigned int v47 = 16;
        }
        if (v48 >= 0xF0) {
          unsigned int v48 = 240;
        }
        if (v48 <= 0x10) {
          unsigned int v48 = 16;
        }
        unsigned int v49 = v35[2];
        unsigned int v50 = v35[3];
        if (v49 >= 0xF0) {
          unsigned int v49 = 240;
        }
        if (v49 <= 0x10) {
          unsigned int v49 = 16;
        }
        if (v50 >= 0xF0) {
          unsigned int v50 = 240;
        }
        if (v50 <= 0x10) {
          unsigned int v50 = 16;
        }
        _WORD *v46 = (((613566757 * (unint64_t)((-1048560 - v47 + (v47 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v49 + (v49 << 16)) >> 5)) >> 32)
                            + 1) >> 1;
        v46[1] = (((613566757 * (unint64_t)((-1048560 - v48 + (v48 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v50 + (v50 << 16)) >> 5)) >> 32)
                              + 1) >> 1;
        v45 += 2;
        v35 += 4;
      }
      while (v45 < v34);
    }
    v14 += v13;
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v51 = 0;
  }
  else
  {
    uint64_t v52 = 0;
    unint64_t v51 = v9 - v32;
    do
    {
      __int16 v53 = v14;
      __int16 v54 = v21;
      if (v33)
      {
        unsigned int v55 = *v14;
        if (v55 >= 0xF0) {
          unsigned int v55 = 240;
        }
        if (v55 <= 0x10) {
          int v56 = 16;
        }
        else {
          int v56 = v55;
        }
        if (v14[1] >= 0xF0u) {
          unsigned int v57 = 240;
        }
        else {
          unsigned int v57 = v14[1];
        }
        if (v57 <= 0x10) {
          int v58 = 16;
        }
        else {
          int v58 = v57;
        }
        unsigned int v59 = v14[2];
        if (v59 >= 0xF0) {
          unsigned int v59 = 240;
        }
        if (v59 <= 0x10) {
          int v60 = 16;
        }
        else {
          int v60 = v59;
        }
        if (v14[3] >= 0xF0u) {
          unsigned int v61 = 240;
        }
        else {
          unsigned int v61 = v14[3];
        }
        if (v61 <= 0x10) {
          int v62 = 16;
        }
        else {
          int v62 = v61;
        }
        __int16 v53 = v14 + 4;
        *unint64_t v21 = (((613566757 * (unint64_t)((-1048560 - v56 + (v56 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32)
                            + 1) >> 1;
        v21[1] = (((613566757 * (unint64_t)((-1048560 - v58 + (v58 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v62 + (v62 << 16)) >> 5)) >> 32)
                              + 1) >> 1;
        __int16 v54 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v63 = 0;
        do
        {
          uint64_t v64 = &v54[v63];
          unsigned int v65 = *v53;
          unsigned int v66 = v53[1];
          if (v65 >= 0xF0) {
            unsigned int v65 = 240;
          }
          if (v65 <= 0x10) {
            unsigned int v65 = 16;
          }
          if (v66 >= 0xF0) {
            unsigned int v66 = 240;
          }
          if (v66 <= 0x10) {
            unsigned int v66 = 16;
          }
          unsigned int v67 = v53[2];
          unsigned int v68 = v53[3];
          if (v67 >= 0xF0) {
            unsigned int v67 = 240;
          }
          if (v67 <= 0x10) {
            unsigned int v67 = 16;
          }
          if (v68 >= 0xF0) {
            unsigned int v68 = 240;
          }
          if (v68 <= 0x10) {
            unsigned int v68 = 16;
          }
          _WORD *v64 = (((613566757 * (unint64_t)((-1048560 - v65 + (v65 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v67 + (v67 << 16)) >> 5)) >> 32)
                              + 1) >> 1;
          v64[1] = (((613566757 * (unint64_t)((-1048560 - v66 + (v66 << 16)) >> 5)) >> 32)
                                + ((613566757 * (unint64_t)((-1048560 - v68 + (v68 << 16)) >> 5)) >> 32)
                                + 1) >> 1;
          v63 += 2;
          v53 += 4;
        }
        while (v63 < v34);
      }
      v14 += v13;
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v52;
    }
    while (v52 != v51);
  }
  if (v51 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v69 = *v14;
      unsigned int v70 = v14[1];
      if (v69 >= 0xF0) {
        unsigned int v69 = 240;
      }
      if (v69 <= 0x10) {
        unsigned int v69 = 16;
      }
      if (v70 >= 0xF0) {
        unsigned int v70 = 240;
      }
      if (v70 <= 0x10) {
        unsigned int v70 = 16;
      }
      unsigned int v71 = v14[2];
      if (v71 >= 0xF0) {
        unsigned int v71 = 240;
      }
      if (v71 <= 0x10) {
        unsigned int v71 = 16;
      }
      if (v14[3] >= 0xF0u) {
        unsigned int v72 = 240;
      }
      else {
        unsigned int v72 = v14[3];
      }
      if (v72 <= 0x10) {
        unsigned int v72 = 16;
      }
      v14 += 4;
      *unint64_t v21 = (((613566757 * (unint64_t)((-1048560 - v69 + (v69 << 16)) >> 5)) >> 32)
                          + ((613566757 * (unint64_t)((-1048560 - v71 + (v71 << 16)) >> 5)) >> 32)
                          + 1) >> 1;
      v21[1] = (((613566757 * (unint64_t)((-1048560 - v70 + (v70 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v72 + (v72 << 16)) >> 5)) >> 32)
                            + 1) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v73 = 0;
      do
      {
        uint64_t v74 = &v21[v73];
        unsigned int v75 = *v14;
        unsigned int v76 = v14[1];
        if (v75 >= 0xF0) {
          unsigned int v75 = 240;
        }
        if (v75 <= 0x10) {
          unsigned int v75 = 16;
        }
        if (v76 >= 0xF0) {
          unsigned int v76 = 240;
        }
        if (v76 <= 0x10) {
          unsigned int v76 = 16;
        }
        unsigned int v77 = v14[2];
        unsigned int v78 = v14[3];
        if (v77 >= 0xF0) {
          unsigned int v77 = 240;
        }
        if (v77 <= 0x10) {
          unsigned int v77 = 16;
        }
        if (v78 >= 0xF0) {
          unsigned int v78 = 240;
        }
        if (v78 <= 0x10) {
          unsigned int v78 = 16;
        }
        *uint64_t v74 = (((613566757 * (unint64_t)((-1048560 - v75 + (v75 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v77 + (v77 << 16)) >> 5)) >> 32)
                            + 1) >> 1;
        v74[1] = (((613566757 * (unint64_t)((-1048560 - v76 + (v76 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v78 + (v78 << 16)) >> 5)) >> 32)
                              + 1) >> 1;
        v73 += 2;
        v14 += 4;
      }
      while (v73 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int8 *)(v28 + i);
          if (v30 >= 0xEB) {
            unsigned int v30 = 235;
          }
          if (v30 <= 0x10) {
            unsigned int v30 = 16;
          }
          *(_WORD *)(v27 + 2 * i) = (-1048560 - v30 + (v30 << 16)) / 0xDB;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      if (v37 >= 0xF0) {
        unsigned int v37 = 240;
      }
      if (v37 <= 0x10) {
        int v38 = 16;
      }
      else {
        int v38 = v37;
      }
      if (v14[1] >= 0xF0u) {
        unsigned int v39 = 240;
      }
      else {
        unsigned int v39 = v14[1];
      }
      if (v39 <= 0x10) {
        int v40 = 16;
      }
      else {
        int v40 = v39;
      }
      uint64_t v35 = v14 + 4;
      *unint64_t v21 = (613566757 * (unint64_t)((-1048560 - v38 + (v38 << 16)) >> 5)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-1048560 - v40 + (v40 << 16)) >> 5)) >> 32;
      __int16 v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        int v42 = &v36[v41];
        unsigned int v43 = *v35;
        unsigned int v44 = v35[1];
        if (v43 >= 0xF0) {
          unsigned int v43 = 240;
        }
        if (v43 <= 0x10) {
          unsigned int v43 = 16;
        }
        if (v44 >= 0xF0) {
          unsigned int v44 = 240;
        }
        if (v44 <= 0x10) {
          unsigned int v44 = 16;
        }
        *int v42 = (613566757 * (unint64_t)((-1048560 - v43 + (v43 << 16)) >> 5)) >> 32;
        v42[1] = (613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32;
        v41 += 2;
        v35 += 4;
      }
      while (v41 < v34);
    }
    v14 += v13;
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v9 - v32;
    do
    {
      unsigned int v47 = v14;
      unsigned int v48 = v21;
      if (v33)
      {
        unsigned int v49 = *v14;
        if (v49 >= 0xF0) {
          unsigned int v49 = 240;
        }
        if (v49 <= 0x10) {
          int v50 = 16;
        }
        else {
          int v50 = v49;
        }
        if (v14[1] >= 0xF0u) {
          unsigned int v51 = 240;
        }
        else {
          unsigned int v51 = v14[1];
        }
        if (v51 <= 0x10) {
          int v52 = 16;
        }
        else {
          int v52 = v51;
        }
        unsigned int v47 = v14 + 4;
        *unint64_t v21 = (613566757 * (unint64_t)((-1048560 - v50 + (v50 << 16)) >> 5)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-1048560 - v52 + (v52 << 16)) >> 5)) >> 32;
        unsigned int v48 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v53 = 0;
        do
        {
          __int16 v54 = &v48[v53];
          unsigned int v55 = *v47;
          unsigned int v56 = v47[1];
          if (v55 >= 0xF0) {
            unsigned int v55 = 240;
          }
          if (v55 <= 0x10) {
            unsigned int v55 = 16;
          }
          if (v56 >= 0xF0) {
            unsigned int v56 = 240;
          }
          if (v56 <= 0x10) {
            unsigned int v56 = 16;
          }
          _WORD *v54 = (613566757 * (unint64_t)((-1048560 - v55 + (v55 << 16)) >> 5)) >> 32;
          v54[1] = (613566757 * (unint64_t)((-1048560 - v56 + (v56 << 16)) >> 5)) >> 32;
          v53 += 2;
          v47 += 4;
        }
        while (v53 < v34);
      }
      v14 += v13;
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v57 = *v14;
      unsigned int v58 = v14[1];
      if (v57 >= 0xF0) {
        unsigned int v57 = 240;
      }
      if (v57 <= 0x10) {
        unsigned int v57 = 16;
      }
      if (v58 >= 0xF0) {
        unsigned int v58 = 240;
      }
      if (v58 <= 0x10) {
        unsigned int v58 = 16;
      }
      v14 += 4;
      *unint64_t v21 = (613566757 * (unint64_t)((-1048560 - v57 + (v57 << 16)) >> 5)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-1048560 - v58 + (v58 << 16)) >> 5)) >> 32;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v59 = 0;
      do
      {
        int v60 = &v21[v59];
        unsigned int v61 = *v14;
        unsigned int v62 = v14[1];
        if (v61 >= 0xF0) {
          unsigned int v61 = 240;
        }
        if (v61 <= 0x10) {
          unsigned int v61 = 16;
        }
        if (v62 >= 0xF0) {
          unsigned int v62 = 240;
        }
        if (v62 <= 0x10) {
          unsigned int v62 = 16;
        }
        _WORD *v60 = (613566757 * (unint64_t)((-1048560 - v61 + (v61 << 16)) >> 5)) >> 32;
        v60[1] = (613566757 * (unint64_t)((-1048560 - v62 + (v62 << 16)) >> 5)) >> 32;
        v59 += 2;
        v14 += 4;
      }
      while (v59 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  if (v26 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    unint64_t v32 = v30 + v10 + v9 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      unsigned int v39 = &v16[v15 + 2];
      __int16 v40 = *v39;
      __int16 v41 = v39[1];
      unsigned int v37 = v16 + 4;
      __int16 v42 = (v16[v15 + 1] + v16[1] + (unsigned __int16)v16[3] + v41) << 6;
      *unint64_t v23 = (v16[v15] + *v16 + (unsigned __int16)v16[2] + v40) << 6;
      v23[1] = v42;
      int v38 = v23 + 2;
    }
    else
    {
      unsigned int v37 = v16;
      int v38 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v43 = 0;
      unsigned int v44 = v37 + 3;
      do
      {
        unint64_t v45 = &v38[v43];
        __int16 v46 = *(v44 - 3);
        __int16 v47 = *(v44 - 2);
        unsigned int v48 = &v44[v15];
        __int16 v49 = v44[v15 - 3];
        __int16 v50 = v44[v15 - 2];
        __int16 v51 = *(v44 - 1);
        __int16 v52 = *v44;
        v44 += 4;
        __int16 v53 = (v50 + v47 + v52 + *v48) << 6;
        _WORD *v45 = (v49 + v46 + v51 + *(v48 - 1)) << 6;
        v45[1] = v53;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v16 += 2 * v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v26 != v35)
  {
    unint64_t v54 = 0;
    unint64_t v55 = v26 - v35;
    do
    {
      unsigned int v56 = v16;
      unsigned int v57 = v23;
      if (v9)
      {
        unsigned int v58 = &v16[v15 + 2];
        __int16 v59 = *v58;
        __int16 v60 = v58[1];
        unsigned int v56 = v16 + 4;
        __int16 v61 = (v16[v15 + 1] + v16[1] + (unsigned __int16)v16[3] + v60) << 6;
        *unint64_t v23 = (v16[v15] + *v16 + (unsigned __int16)v16[2] + v59) << 6;
        v23[1] = v61;
        unsigned int v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v62 = 0;
        unint64_t v63 = v56 + 3;
        do
        {
          uint64_t v64 = &v57[v62];
          __int16 v65 = *(v63 - 3);
          __int16 v66 = *(v63 - 2);
          unsigned int v67 = &v63[v15];
          __int16 v68 = v63[v15 - 3];
          __int16 v69 = v63[v15 - 2];
          __int16 v70 = *(v63 - 1);
          __int16 v71 = *v63;
          v63 += 4;
          __int16 v72 = (v69 + v66 + v71 + *v67) << 6;
          _WORD *v64 = (v68 + v65 + v70 + *(v67 - 1)) << 6;
          v64[1] = v72;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v16 += 2 * v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  if (v26 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    unint64_t v32 = v30 + v10 + v9 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      unsigned int v37 = v16 + 4;
      __int16 v39 = v16[1] << 8;
      *unint64_t v23 = *v16 << 8;
      v23[1] = v39;
      int v38 = v23 + 2;
    }
    else
    {
      unsigned int v37 = v16;
      int v38 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        __int16 v41 = &v38[v40];
        __int16 v42 = v37[1] << 8;
        *__int16 v41 = *v37 << 8;
        v41[1] = v42;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v16 += 2 * v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v15;
    do
    {
      __int16 v46 = v16;
      __int16 v47 = v23;
      if (v9)
      {
        __int16 v46 = v16 + 4;
        __int16 v48 = v16[1] << 8;
        *unint64_t v23 = *v16 << 8;
        v23[1] = v48;
        __int16 v47 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          __int16 v50 = &v47[v49];
          __int16 v51 = v46[1] << 8;
          *__int16 v50 = *v46 << 8;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v16 += v45;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    BOOL v29 = v13 >= v8;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v13;
    if (v29) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    unint64_t v34 = v32 + v10 + v9 + v33;
    uint64_t v35 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB) {
            unsigned int v37 = 235;
          }
          if (v37 <= 0x10) {
            unsigned int v37 = 16;
          }
          *(_WORD *)(v35 + 2 * i) = (-1048560 - v37 + (v37 << 16)) / 0xDB;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v38 = v12;
  }
  else {
    unint64_t v38 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v39 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      unsigned int v42 = *v16;
      unsigned int v43 = v16[1];
      unsigned int v44 = v16[v15];
      unsigned int v45 = v16[v15 + 1];
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        unsigned int v42 = 16;
      }
      if (v43 >= 0xF0) {
        unsigned int v43 = 240;
      }
      if (v43 <= 0x10) {
        unsigned int v43 = 16;
      }
      if (v44 >= 0xF0) {
        unsigned int v44 = 240;
      }
      if (v44 <= 0x10) {
        unsigned int v44 = 16;
      }
      if (v45 >= 0xF0) {
        unsigned int v45 = 240;
      }
      if (v45 <= 0x10) {
        int v46 = 16;
      }
      else {
        int v46 = v45;
      }
      unsigned int v47 = v16[2];
      unsigned int v48 = v16[3];
      unint64_t v49 = &v16[v15 + 2];
      unsigned int v50 = *v49;
      unsigned int v51 = v49[1];
      if (v47 >= 0xF0) {
        unsigned int v47 = 240;
      }
      if (v47 <= 0x10) {
        unsigned int v47 = 16;
      }
      if (v48 >= 0xF0) {
        unsigned int v48 = 240;
      }
      if (v48 <= 0x10) {
        unsigned int v48 = 16;
      }
      if (v50 >= 0xF0) {
        unsigned int v50 = 240;
      }
      if (v50 <= 0x10) {
        unsigned int v50 = 16;
      }
      unint64_t v52 = (613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32;
      if (v51 >= 0xF0) {
        unsigned int v51 = 240;
      }
      if (v51 <= 0x10) {
        int v53 = 16;
      }
      else {
        int v53 = v51;
      }
      unint64_t v40 = v16 + 4;
      *unint64_t v23 = (v52
                          + ((613566757 * (unint64_t)((-1048560 - v47 + (v47 << 16)) >> 5)) >> 32)
                          + ((613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32)
                          + ((613566757 * (unint64_t)((-1048560 - v50 + (v50 << 16)) >> 5)) >> 32)
                          + 2) >> 2;
      v23[1] = (((613566757 * (unint64_t)((-1048560 - v43 + (v43 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v48 + (v48 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v46 + (v46 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v53 + (v53 << 16)) >> 5)) >> 32)
                            + 2) >> 2;
      __int16 v41 = v23 + 2;
    }
    else
    {
      unint64_t v40 = v16;
      __int16 v41 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v54 = 0;
      unint64_t v55 = v40 + 3;
      do
      {
        unsigned int v56 = *(v55 - 3);
        unsigned int v57 = &v55[v15];
        if (v56 >= 0xF0) {
          unsigned int v56 = 240;
        }
        if (v56 <= 0x10) {
          int v58 = 16;
        }
        else {
          int v58 = v56;
        }
        if (*(v55 - 2) >= 0xF0u) {
          unsigned int v59 = 240;
        }
        else {
          unsigned int v59 = *(v55 - 2);
        }
        if (v59 <= 0x10) {
          int v60 = 16;
        }
        else {
          int v60 = v59;
        }
        if (v55[v15 - 3] >= 0xF0u) {
          unsigned int v61 = 240;
        }
        else {
          unsigned int v61 = v55[v15 - 3];
        }
        if (v61 <= 0x10) {
          int v62 = 16;
        }
        else {
          int v62 = v61;
        }
        if (*(v57 - 2) >= 0xF0u) {
          unsigned int v63 = 240;
        }
        else {
          unsigned int v63 = *(v57 - 2);
        }
        if (v63 <= 0x10) {
          int v64 = 16;
        }
        else {
          int v64 = v63;
        }
        unsigned int v65 = *(v55 - 1);
        unsigned int v67 = *v55;
        v55 += 4;
        unsigned int v66 = v67;
        unsigned int v68 = *(v57 - 1);
        if (v65 >= 0xF0) {
          unsigned int v65 = 240;
        }
        if (v65 <= 0x10) {
          int v69 = 16;
        }
        else {
          int v69 = v65;
        }
        if (v66 >= 0xF0) {
          unsigned int v70 = 240;
        }
        else {
          unsigned int v70 = v66;
        }
        unsigned int v71 = *v57;
        if (v70 <= 0x10) {
          int v72 = 16;
        }
        else {
          int v72 = v70;
        }
        if (v68 >= 0xF0) {
          unsigned int v68 = 240;
        }
        unint64_t v73 = &v41[v54];
        if (v68 <= 0x10) {
          unsigned int v68 = 16;
        }
        unsigned int v74 = -1048560 - v58 + (v58 << 16);
        if (v71 >= 0xF0) {
          unsigned int v71 = 240;
        }
        unint64_t v75 = (613566757 * (unint64_t)(v74 >> 5)) >> 32;
        unint64_t v76 = (613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32;
        unint64_t v77 = (613566757 * (unint64_t)((-1048560 - v62 + (v62 << 16)) >> 5)) >> 32;
        uint64_t v78 = 613566757 * ((-1048560 - v64 + (v64 << 16)) >> 5);
        if (v71 <= 0x10) {
          unsigned int v71 = 16;
        }
        *unint64_t v73 = (v75
                            + ((613566757 * (unint64_t)((-1048560 - v69 + (v69 << 16)) >> 5)) >> 32)
                            + v77
                            + ((613566757 * (unint64_t)((-1048560 - v68 + (v68 << 16)) >> 5)) >> 32)
                            + 2) >> 2;
        v73[1] = (v76
                              + ((613566757 * (unint64_t)((-1048560 - v72 + (v72 << 16)) >> 5)) >> 32)
                              + HIDWORD(v78)
                              + ((613566757 * (unint64_t)((-1048560 - v71 + (v71 << 16)) >> 5)) >> 32)
                              + 2) >> 2;
        v54 += 2;
      }
      while (v54 < v39);
    }
    v16 += 2 * v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v38)
  {
    unint64_t v79 = 0;
    unint64_t v80 = v27 - v38;
    do
    {
      int v81 = v16;
      int v82 = v23;
      if (v9)
      {
        unsigned int v83 = *v16;
        unsigned int v84 = v16[1];
        unsigned int v85 = v16[v15];
        unsigned int v86 = v16[v15 + 1];
        if (v83 >= 0xF0) {
          unsigned int v83 = 240;
        }
        if (v83 <= 0x10) {
          unsigned int v83 = 16;
        }
        if (v84 >= 0xF0) {
          unsigned int v84 = 240;
        }
        if (v84 <= 0x10) {
          unsigned int v84 = 16;
        }
        if (v85 >= 0xF0) {
          unsigned int v85 = 240;
        }
        if (v85 <= 0x10) {
          unsigned int v85 = 16;
        }
        if (v86 >= 0xF0) {
          unsigned int v86 = 240;
        }
        if (v86 <= 0x10) {
          int v87 = 16;
        }
        else {
          int v87 = v86;
        }
        unsigned int v88 = v16[2];
        unsigned int v89 = v16[3];
        size_t v90 = &v16[v15 + 2];
        unsigned int v91 = *v90;
        unsigned int v92 = v90[1];
        if (v88 >= 0xF0) {
          unsigned int v88 = 240;
        }
        if (v88 <= 0x10) {
          unsigned int v88 = 16;
        }
        if (v89 >= 0xF0) {
          unsigned int v89 = 240;
        }
        if (v89 <= 0x10) {
          unsigned int v89 = 16;
        }
        if (v91 >= 0xF0) {
          unsigned int v91 = 240;
        }
        if (v91 <= 0x10) {
          unsigned int v91 = 16;
        }
        unint64_t v93 = (613566757 * (unint64_t)((-1048560 - v83 + (v83 << 16)) >> 5)) >> 32;
        if (v92 >= 0xF0) {
          unsigned int v92 = 240;
        }
        if (v92 <= 0x10) {
          int v94 = 16;
        }
        else {
          int v94 = v92;
        }
        int v81 = v16 + 4;
        *unint64_t v23 = (v93
                            + ((613566757 * (unint64_t)((-1048560 - v88 + (v88 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v85 + (v85 << 16)) >> 5)) >> 32)
                            + ((613566757 * (unint64_t)((-1048560 - v91 + (v91 << 16)) >> 5)) >> 32)
                            + 2) >> 2;
        v23[1] = (((613566757 * (unint64_t)((-1048560 - v84 + (v84 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v89 + (v89 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v87 + (v87 << 16)) >> 5)) >> 32)
                              + ((613566757 * (unint64_t)((-1048560 - v94 + (v94 << 16)) >> 5)) >> 32)
                              + 2) >> 2;
        int v82 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v95 = 0;
        int v96 = v81 + 3;
        do
        {
          unsigned int v97 = *(v96 - 3);
          int v98 = &v96[v15];
          if (v97 >= 0xF0) {
            unsigned int v97 = 240;
          }
          if (v97 <= 0x10) {
            int v99 = 16;
          }
          else {
            int v99 = v97;
          }
          if (*(v96 - 2) >= 0xF0u) {
            unsigned int v100 = 240;
          }
          else {
            unsigned int v100 = *(v96 - 2);
          }
          if (v100 <= 0x10) {
            int v101 = 16;
          }
          else {
            int v101 = v100;
          }
          if (v96[v15 - 3] >= 0xF0u) {
            unsigned int v102 = 240;
          }
          else {
            unsigned int v102 = v96[v15 - 3];
          }
          if (v102 <= 0x10) {
            int v103 = 16;
          }
          else {
            int v103 = v102;
          }
          if (*(v98 - 2) >= 0xF0u) {
            unsigned int v104 = 240;
          }
          else {
            unsigned int v104 = *(v98 - 2);
          }
          if (v104 <= 0x10) {
            int v105 = 16;
          }
          else {
            int v105 = v104;
          }
          unsigned int v106 = *(v96 - 1);
          unsigned int v108 = *v96;
          v96 += 4;
          unsigned int v107 = v108;
          unsigned int v109 = *(v98 - 1);
          if (v106 >= 0xF0) {
            unsigned int v106 = 240;
          }
          if (v106 <= 0x10) {
            int v110 = 16;
          }
          else {
            int v110 = v106;
          }
          if (v107 >= 0xF0) {
            unsigned int v111 = 240;
          }
          else {
            unsigned int v111 = v107;
          }
          unsigned int v112 = *v98;
          if (v111 <= 0x10) {
            int v113 = 16;
          }
          else {
            int v113 = v111;
          }
          if (v109 >= 0xF0) {
            unsigned int v109 = 240;
          }
          CFTypeRef v114 = &v82[v95];
          if (v109 <= 0x10) {
            unsigned int v109 = 16;
          }
          unsigned int v115 = -1048560 - v99 + (v99 << 16);
          if (v112 >= 0xF0) {
            unsigned int v112 = 240;
          }
          unint64_t v116 = (613566757 * (unint64_t)(v115 >> 5)) >> 32;
          unint64_t v117 = (613566757 * (unint64_t)((-1048560 - v101 + (v101 << 16)) >> 5)) >> 32;
          unint64_t v118 = (613566757 * (unint64_t)((-1048560 - v103 + (v103 << 16)) >> 5)) >> 32;
          uint64_t v119 = 613566757 * ((-1048560 - v105 + (v105 << 16)) >> 5);
          if (v112 <= 0x10) {
            unsigned int v112 = 16;
          }
          *CFTypeRef v114 = (v116
                               + ((613566757 * (unint64_t)((-1048560 - v110 + (v110 << 16)) >> 5)) >> 32)
                               + v118
                               + ((613566757 * (unint64_t)((-1048560 - v109 + (v109 << 16)) >> 5)) >> 32)
                               + 2) >> 2;
          v114[1] = (v117
                                 + ((613566757 * (unint64_t)((-1048560 - v113 + (v113 << 16)) >> 5)) >> 32)
                                 + HIDWORD(v119)
                                 + ((613566757 * (unint64_t)((-1048560 - v112 + (v112 << 16)) >> 5)) >> 32)
                                 + 2) >> 2;
          v95 += 2;
        }
        while (v95 < v39);
      }
      v16 += 2 * v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v79 += 2;
    }
    while (v79 < v80);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    unint64_t v33 = v31 + v10 + v8 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int8 *)(v33 + i);
          if (v36 >= 0xEB) {
            unsigned int v36 = 235;
          }
          if (v36 <= 0x10) {
            unsigned int v36 = 16;
          }
          *(_WORD *)(v34 + 2 * i) = (-1048560 - v36 + (v36 << 16)) / 0xDB;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v41 = *v16;
      if (v41 >= 0xF0) {
        unsigned int v41 = 240;
      }
      if (v41 <= 0x10) {
        int v42 = 16;
      }
      else {
        int v42 = v41;
      }
      if (v16[1] >= 0xF0u) {
        unsigned int v43 = 240;
      }
      else {
        unsigned int v43 = v16[1];
      }
      if (v43 <= 0x10) {
        int v44 = 16;
      }
      else {
        int v44 = v43;
      }
      unint64_t v39 = v16 + 4;
      *unint64_t v23 = (613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32;
      v23[1] = (613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32;
      unint64_t v40 = v23 + 2;
    }
    else
    {
      unint64_t v39 = v16;
      unint64_t v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v45 = 0;
      do
      {
        int v46 = &v40[v45];
        unsigned int v47 = *v39;
        unsigned int v48 = v39[1];
        if (v47 >= 0xF0) {
          unsigned int v47 = 240;
        }
        if (v47 <= 0x10) {
          unsigned int v47 = 16;
        }
        if (v48 >= 0xF0) {
          unsigned int v48 = 240;
        }
        if (v48 <= 0x10) {
          unsigned int v48 = 16;
        }
        _WORD *v46 = (613566757 * (unint64_t)((-1048560 - v47 + (v47 << 16)) >> 5)) >> 32;
        v46[1] = (613566757 * (unint64_t)((-1048560 - v48 + (v48 << 16)) >> 5)) >> 32;
        v45 += 2;
        v39 += 4;
      }
      while (v45 < v38);
    }
    v16 += 2 * v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    unint64_t v49 = 0;
    unint64_t v50 = v27 - v37;
    uint64_t v51 = 2 * v15;
    do
    {
      unint64_t v52 = v16;
      int v53 = v23;
      if (v8)
      {
        unsigned int v54 = *v16;
        if (v54 >= 0xF0) {
          unsigned int v54 = 240;
        }
        if (v54 <= 0x10) {
          int v55 = 16;
        }
        else {
          int v55 = v54;
        }
        if (v16[1] >= 0xF0u) {
          unsigned int v56 = 240;
        }
        else {
          unsigned int v56 = v16[1];
        }
        if (v56 <= 0x10) {
          int v57 = 16;
        }
        else {
          int v57 = v56;
        }
        unint64_t v52 = v16 + 4;
        *unint64_t v23 = (613566757 * (unint64_t)((-1048560 - v55 + (v55 << 16)) >> 5)) >> 32;
        v23[1] = (613566757 * (unint64_t)((-1048560 - v57 + (v57 << 16)) >> 5)) >> 32;
        int v53 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v58 = 0;
        do
        {
          unsigned int v59 = &v53[v58];
          unsigned int v60 = *v52;
          unsigned int v61 = v52[1];
          if (v60 >= 0xF0) {
            unsigned int v60 = 240;
          }
          if (v60 <= 0x10) {
            unsigned int v60 = 16;
          }
          if (v61 >= 0xF0) {
            unsigned int v61 = 240;
          }
          if (v61 <= 0x10) {
            unsigned int v61 = 16;
          }
          _WORD *v59 = (613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32;
          v59[1] = (613566757 * (unint64_t)((-1048560 - v61 + (v61 << 16)) >> 5)) >> 32;
          v58 += 2;
          v52 += 4;
        }
        while (v58 < v38);
      }
      v16 += v51;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_Copy_v4a8_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v15 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v14;
    uint64_t v22 = *a7 + *a8 * v14;
    uint64_t v23 = *a4;
    uint64_t v24 = a4[2];
    uint64_t v25 = v21 + 2 * v15;
    uint64_t v26 = v22 + 2 * v15;
    uint64_t v27 = a3[2] + v24 * v8 + v9;
    uint64_t v28 = *a3 + v23 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v25 + 2 * i) = *(unsigned __int8 *)(v27 + i) | (*(unsigned __int8 *)(v27 + i) << 8);
          *(_WORD *)(v26 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v30 = v8 & 1;
  if (v11 >= v30) {
    uint64_t v31 = v8 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  unint64_t v33 = v9 & 1;
  if (v10 >= v33) {
    unint64_t v34 = v33;
  }
  else {
    unint64_t v34 = 0;
  }
  unint64_t v35 = v10 - v34;
  if (v8)
  {
    if (v32)
    {
      unsigned int v36 = v13 + 2;
      __int16 v38 = v13[1] << 8;
      *uint64_t v17 = *v13 << 8;
      v17[1] = v38;
      unint64_t v37 = v17 + 2;
    }
    else
    {
      unsigned int v36 = v13;
      unint64_t v37 = v17;
    }
    if (v10 == v34)
    {
      unint64_t v39 = 0;
    }
    else
    {
      unint64_t v40 = v10 - v34;
      do
      {
        __int16 v41 = *v36;
        __int16 v42 = v36[1];
        v36 += 2;
        *unint64_t v37 = v41 << 8;
        v37[1] = v42 << 8;
        v37 += 2;
        --v40;
      }
      while (v40);
      unint64_t v39 = v10 - v34;
    }
    if (v39 + v33 < v10)
    {
      __int16 v43 = *v36 << 8;
      __int16 v44 = v36[1] << 8;
      *unint64_t v37 = v43;
      v37[1] = v44;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v31)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v11 - v31;
    do
    {
      unsigned int v47 = v13;
      unsigned int v48 = v17;
      if (v32)
      {
        unsigned int v47 = v13 + 2;
        __int16 v49 = v13[1] << 8;
        *uint64_t v17 = *v13 << 8;
        v17[1] = v49;
        unsigned int v48 = v17 + 2;
      }
      if (v10 == v34)
      {
        unint64_t v50 = 0;
      }
      else
      {
        unint64_t v51 = v10 - v34;
        do
        {
          __int16 v52 = *v47;
          __int16 v53 = v47[1];
          v47 += 2;
          _WORD *v48 = v52 << 8;
          v48[1] = v53 << 8;
          v48 += 2;
          --v51;
        }
        while (v51);
        unint64_t v50 = v10 - v34;
      }
      if (v50 + v33 < v10)
      {
        __int16 v54 = *v47 << 8;
        __int16 v55 = v47[1] << 8;
        _WORD *v48 = v54;
        v48[1] = v55;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v11)
  {
    if (v32)
    {
      __int16 v56 = *v13;
      __int16 v57 = v13[1];
      v13 += 2;
      *uint64_t v17 = v56 << 8;
      v17[1] = v57 << 8;
      v17 += 2;
    }
    if (v10 == v34)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v58 = v10 - v34;
      do
      {
        __int16 v59 = *v13;
        __int16 v60 = v13[1];
        v13 += 2;
        *uint64_t v17 = v59 << 8;
        v17[1] = v60 << 8;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v35 + v33 < v10)
    {
      __int16 v61 = *v13 << 8;
      __int16 v62 = v13[1] << 8;
      *uint64_t v17 = v61;
      v17[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v22 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(unsigned __int8 *)(v22 + i) << 8;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v24 = v8 & 1;
  if (v11 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v26)
    {
      unint64_t v30 = v13 + 2;
      __int16 v32 = v13[1] << 8;
      *uint64_t v17 = *v13 << 8;
      v17[1] = v32;
      uint64_t v31 = v17 + 2;
    }
    else
    {
      unint64_t v30 = v13;
      uint64_t v31 = v17;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        __int16 v35 = *v30;
        __int16 v36 = v30[1];
        v30 += 2;
        *uint64_t v31 = v35 << 8;
        v31[1] = v36 << 8;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      __int16 v37 = *v30 << 8;
      __int16 v38 = v30[1] << 8;
      *uint64_t v31 = v37;
      v31[1] = v38;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v11 - v25;
    do
    {
      __int16 v41 = v13;
      __int16 v42 = v17;
      if (v26)
      {
        __int16 v41 = v13 + 2;
        __int16 v43 = v13[1] << 8;
        *uint64_t v17 = *v13 << 8;
        v17[1] = v43;
        __int16 v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          __int16 v46 = *v41;
          __int16 v47 = v41[1];
          v41 += 2;
          *__int16 v42 = v46 << 8;
          v42[1] = v47 << 8;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        __int16 v48 = *v41 << 8;
        __int16 v49 = v41[1] << 8;
        *__int16 v42 = v48;
        v42[1] = v49;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if (v26)
    {
      __int16 v50 = *v13;
      __int16 v51 = v13[1];
      v13 += 2;
      *uint64_t v17 = v50 << 8;
      v17[1] = v51 << 8;
      v17 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        __int16 v53 = *v13;
        __int16 v54 = v13[1];
        v13 += 2;
        *uint64_t v17 = v53 << 8;
        v17[1] = v54 << 8;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      __int16 v55 = *v13 << 8;
      __int16 v56 = v13[1] << 8;
      *uint64_t v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          unsigned int v25 = *(unsigned __int8 *)(v23 + i);
          if (v25 >= 0xEB) {
            unsigned int v25 = 235;
          }
          if (v25 <= 0x10) {
            unsigned int v25 = 16;
          }
          *(_WORD *)(v22 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v25 - 65520)) >> 32)
                                                  + ((4095 * v25
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v25 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v26 = v8 & 1;
  if (v18 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      unsigned int v34 = *v13;
      unsigned int v35 = v13[1];
      if (v34 >= 0xF0) {
        unsigned int v34 = 240;
      }
      if (v34 <= 0x10) {
        unsigned int v34 = 16;
      }
      if (v35 >= 0xF0) {
        unsigned int v35 = 240;
      }
      if (v35 <= 0x10) {
        int v36 = 16;
      }
      else {
        int v36 = v35;
      }
      __int16 v32 = v13 + 2;
      *uint64_t v17 = 16 * ((613566757 * (unint64_t)((4095 * v34 - 65520) >> 5)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v36 - 65520) >> 5)) >> 32);
      unint64_t v33 = v17 + 2;
    }
    else
    {
      __int16 v32 = v13;
      unint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v37 = 0;
    }
    else
    {
      unint64_t v38 = v10 - v30;
      do
      {
        unsigned int v39 = *v32;
        unsigned int v40 = v32[1];
        if (v39 >= 0xF0) {
          unsigned int v39 = 240;
        }
        if (v39 <= 0x10) {
          unsigned int v39 = 16;
        }
        if (v40 >= 0xF0) {
          unsigned int v40 = 240;
        }
        if (v40 <= 0x10) {
          unsigned int v40 = 16;
        }
        v32 += 2;
        *unint64_t v33 = 16 * ((613566757 * (unint64_t)((4095 * v39 - 65520) >> 5)) >> 32);
        v33[1] = 16 * ((613566757 * (unint64_t)((4095 * v40 - 65520) >> 5)) >> 32);
        v33 += 2;
        --v38;
      }
      while (v38);
      unint64_t v37 = v10 - v30;
    }
    if (v37 + v29 < v10)
    {
      unsigned int v41 = *v32;
      unsigned int v42 = v32[1];
      if (v41 >= 0xF0) {
        unsigned int v41 = 240;
      }
      if (v41 <= 0x10) {
        unsigned int v41 = 16;
      }
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        unsigned int v42 = 16;
      }
      *unint64_t v33 = 16 * ((613566757 * (unint64_t)((4095 * v41 - 65520) >> 5)) >> 32);
      v33[1] = 16 * ((613566757 * (unint64_t)((4095 * v42 - 65520) >> 5)) >> 32);
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v18 - v27;
    do
    {
      unint64_t v45 = v13;
      __int16 v46 = v17;
      if (v28)
      {
        unsigned int v47 = *v13;
        unsigned int v48 = v13[1];
        if (v47 >= 0xF0) {
          unsigned int v47 = 240;
        }
        if (v47 <= 0x10) {
          unsigned int v47 = 16;
        }
        if (v48 >= 0xF0) {
          unsigned int v48 = 240;
        }
        if (v48 <= 0x10) {
          int v49 = 16;
        }
        else {
          int v49 = v48;
        }
        unint64_t v45 = v13 + 2;
        *uint64_t v17 = 16 * ((613566757 * (unint64_t)((4095 * v47 - 65520) >> 5)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v49 - 65520) >> 5)) >> 32);
        __int16 v46 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v50 = 0;
      }
      else
      {
        unint64_t v51 = v10 - v30;
        do
        {
          unsigned int v52 = *v45;
          unsigned int v53 = v45[1];
          if (v52 >= 0xF0) {
            unsigned int v52 = 240;
          }
          if (v52 <= 0x10) {
            unsigned int v52 = 16;
          }
          if (v53 >= 0xF0) {
            unsigned int v53 = 240;
          }
          if (v53 <= 0x10) {
            unsigned int v53 = 16;
          }
          v45 += 2;
          _WORD *v46 = 16 * ((613566757 * (unint64_t)((4095 * v52 - 65520) >> 5)) >> 32);
          v46[1] = 16 * ((613566757 * (unint64_t)((4095 * v53 - 65520) >> 5)) >> 32);
          v46 += 2;
          --v51;
        }
        while (v51);
        unint64_t v50 = v10 - v30;
      }
      if (v50 + v29 < v10)
      {
        unsigned int v54 = *v45;
        unsigned int v55 = v45[1];
        if (v54 >= 0xF0) {
          unsigned int v54 = 240;
        }
        if (v54 <= 0x10) {
          unsigned int v54 = 16;
        }
        if (v55 >= 0xF0) {
          unsigned int v55 = 240;
        }
        if (v55 <= 0x10) {
          unsigned int v55 = 16;
        }
        _WORD *v46 = 16 * ((613566757 * (unint64_t)((4095 * v54 - 65520) >> 5)) >> 32);
        v46[1] = 16 * ((613566757 * (unint64_t)((4095 * v55 - 65520) >> 5)) >> 32);
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v26 < v18)
  {
    if (v28)
    {
      unsigned int v56 = *v13;
      unsigned int v57 = v13[1];
      if (v56 >= 0xF0) {
        unsigned int v56 = 240;
      }
      if (v56 <= 0x10) {
        unsigned int v56 = 16;
      }
      if (v57 >= 0xF0) {
        unsigned int v57 = 240;
      }
      if (v57 <= 0x10) {
        unsigned int v57 = 16;
      }
      v13 += 2;
      *uint64_t v17 = 16 * ((613566757 * (unint64_t)((4095 * v56 - 65520) >> 5)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v57 - 65520) >> 5)) >> 32);
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v58 = v10 - v30;
      do
      {
        unsigned int v59 = *v13;
        unsigned int v60 = v13[1];
        if (v59 >= 0xF0) {
          unsigned int v59 = 240;
        }
        if (v59 <= 0x10) {
          unsigned int v59 = 16;
        }
        if (v60 >= 0xF0) {
          unsigned int v60 = 240;
        }
        if (v60 <= 0x10) {
          unsigned int v60 = 16;
        }
        v13 += 2;
        *uint64_t v17 = 16 * ((613566757 * (unint64_t)((4095 * v59 - 65520) >> 5)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v60 - 65520) >> 5)) >> 32);
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v31 + v29 < v10)
    {
      unsigned int v61 = *v13;
      unsigned int v62 = v13[1];
      if (v61 >= 0xF0) {
        unsigned int v61 = 240;
      }
      if (v61 <= 0x10) {
        unsigned int v61 = 16;
      }
      if (v62 >= 0xF0) {
        unsigned int v62 = 240;
      }
      if (v62 <= 0x10) {
        unsigned int v62 = 16;
      }
      *uint64_t v17 = 16 * ((613566757 * (unint64_t)((4095 * v61 - 65520) >> 5)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((4095 * v62 - 65520) >> 5)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_v4a8_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21) {
    unint64_t v20 = v21;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = a7[2] + v24 * v16;
    uint64_t v26 = *a7 + *a8 * v16;
    uint64_t v27 = *a4;
    uint64_t v28 = a4[2];
    uint64_t v29 = v25 + v17;
    uint64_t v30 = v26 + v17;
    uint64_t v31 = a3[2] + v28 * v12 + v11;
    uint64_t v32 = *a3 + v27 * v12 + v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) | (*(unsigned __int8 *)(v31 + i) << 8);
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  unint64_t v34 = v12 & 1;
  if (v8 >= v34) {
    uint64_t v35 = v12 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  char v36 = v9;
  if (v20 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v20 - v10;
  if (v12)
  {
    if (v36)
    {
      unint64_t v38 = v14 + 4;
      __int16 v40 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *uint64_t v19 = (v14[2] + (unsigned __int16)*v14) << 7;
      v19[1] = v40;
      unsigned int v39 = v19 + 2;
    }
    else
    {
      unint64_t v38 = v14;
      unsigned int v39 = v19;
    }
    if (v20 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        __int16 v43 = (v38[3] + (unsigned __int16)v38[1]) << 7;
        *unsigned int v42 = (v38[2] + (unsigned __int16)*v38) << 7;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 += v13;
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v35;
    do
    {
      __int16 v46 = v14;
      unsigned int v47 = v19;
      if (v36)
      {
        __int16 v46 = v14 + 4;
        __int16 v48 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *uint64_t v19 = (v14[2] + (unsigned __int16)*v14) << 7;
        v19[1] = v48;
        unsigned int v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          __int16 v51 = (v46[3] + (unsigned __int16)v46[1]) << 7;
          *unint64_t v50 = (v46[2] + (unsigned __int16)*v46) << 7;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 += v13;
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if (v36)
    {
      __int16 v52 = *v14;
      __int16 v53 = v14[1];
      __int16 v54 = v14[2];
      __int16 v55 = v14[3];
      v14 += 4;
      *uint64_t v19 = (v54 + v52) << 7;
      v19[1] = (v55 + v53) << 7;
      v19 += 2;
    }
    if (v20 != v10)
    {
      unint64_t v56 = 0;
      do
      {
        unsigned int v57 = &v19[v56];
        __int16 v58 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *unsigned int v57 = (v14[2] + (unsigned __int16)*v14) << 7;
        v57[1] = v58;
        v56 += 2;
        v14 += 4;
      }
      while (v56 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_v4a8_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21) {
    unint64_t v20 = v21;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = a7[2] + v24 * v16;
    uint64_t v26 = *a7 + *a8 * v16;
    uint64_t v27 = *a4;
    uint64_t v28 = a4[2];
    uint64_t v29 = v25 + v17;
    uint64_t v30 = v26 + v17;
    uint64_t v31 = a3[2] + v28 * v12 + v11;
    uint64_t v32 = *a3 + v27 * v12 + v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) | (*(unsigned __int8 *)(v31 + i) << 8);
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  unint64_t v34 = v12 & 1;
  if (v8 >= v34) {
    uint64_t v35 = v12 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  char v36 = v9;
  if (v20 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v20 - v10;
  if (v12)
  {
    if (v36)
    {
      unint64_t v38 = v14 + 4;
      __int16 v40 = v14[1] << 8;
      *uint64_t v19 = *v14 << 8;
      v19[1] = v40;
      unsigned int v39 = v19 + 2;
    }
    else
    {
      unint64_t v38 = v14;
      unsigned int v39 = v19;
    }
    if (v20 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        __int16 v43 = v38[1] << 8;
        *unsigned int v42 = *v38 << 8;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 += v13;
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v35;
    do
    {
      __int16 v46 = v14;
      unsigned int v47 = v19;
      if (v36)
      {
        __int16 v46 = v14 + 4;
        __int16 v48 = v14[1] << 8;
        *uint64_t v19 = *v14 << 8;
        v19[1] = v48;
        unsigned int v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          __int16 v51 = v46[1] << 8;
          *unint64_t v50 = *v46 << 8;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 += v13;
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if (v36)
    {
      __int16 v52 = *v14;
      __int16 v53 = v14[1];
      v14 += 4;
      *uint64_t v19 = v52 << 8;
      v19[1] = v53 << 8;
      v19 += 2;
    }
    if (v20 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        __int16 v55 = &v19[v54];
        __int16 v56 = v14[1] << 8;
        _WORD *v55 = *v14 << 8;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      __int16 v36 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *unint64_t v21 = (v14[2] + (unsigned __int16)*v14) << 7;
      v21[1] = v36;
      uint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unint64_t v38 = &v35[v37];
        __int16 v39 = (v34[3] + (unsigned __int16)v34[1]) << 7;
        _WORD *v38 = (v34[2] + (unsigned __int16)*v34) << 7;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      unsigned int v42 = v14;
      __int16 v43 = v21;
      if (v32)
      {
        unsigned int v42 = v14 + 4;
        __int16 v44 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *unint64_t v21 = (v14[2] + (unsigned __int16)*v14) << 7;
        v21[1] = v44;
        __int16 v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          __int16 v46 = &v43[v45];
          __int16 v47 = (v42[3] + (unsigned __int16)v42[1]) << 7;
          _WORD *v46 = (v42[2] + (unsigned __int16)*v42) << 7;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      __int16 v48 = *v14;
      __int16 v49 = v14[1];
      __int16 v50 = v14[2];
      __int16 v51 = v14[3];
      v14 += 4;
      *unint64_t v21 = (v50 + v48) << 7;
      v21[1] = (v51 + v49) << 7;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        __int16 v53 = &v21[v52];
        __int16 v54 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *__int16 v53 = (v14[2] + (unsigned __int16)*v14) << 7;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      __int16 v36 = v14[1] << 8;
      *unint64_t v21 = *v14 << 8;
      v21[1] = v36;
      uint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unint64_t v38 = &v35[v37];
        __int16 v39 = v34[1] << 8;
        _WORD *v38 = *v34 << 8;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      unsigned int v42 = v14;
      __int16 v43 = v21;
      if (v32)
      {
        unsigned int v42 = v14 + 4;
        __int16 v44 = v14[1] << 8;
        *unint64_t v21 = *v14 << 8;
        v21[1] = v44;
        __int16 v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          __int16 v46 = &v43[v45];
          __int16 v47 = v42[1] << 8;
          _WORD *v46 = *v42 << 8;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      __int16 v48 = *v14;
      __int16 v49 = v14[1];
      v14 += 4;
      *unint64_t v21 = v48 << 8;
      v21[1] = v49 << 8;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        __int16 v51 = &v21[v50];
        __int16 v52 = v14[1] << 8;
        *__int16 v51 = *v14 << 8;
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int8 *)(v28 + i);
          if (v30 >= 0xEB) {
            unsigned int v30 = 235;
          }
          if (v30 <= 0x10) {
            unsigned int v30 = 16;
          }
          *(_WORD *)(v27 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v30 - 65520)) >> 32)
                                                  + ((4095 * v30
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v30 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      if (v37 >= 0xF0) {
        unsigned int v37 = 240;
      }
      if (v37 <= 0x10) {
        int v38 = 16;
      }
      else {
        int v38 = v37;
      }
      if (v14[1] >= 0xF0u) {
        unsigned int v39 = 240;
      }
      else {
        unsigned int v39 = v14[1];
      }
      if (v39 <= 0x10) {
        int v40 = 16;
      }
      else {
        int v40 = v39;
      }
      unsigned int v41 = v14[2];
      if (v41 >= 0xF0) {
        unsigned int v41 = 240;
      }
      if (v41 <= 0x10) {
        int v42 = 16;
      }
      else {
        int v42 = v41;
      }
      if (v14[3] >= 0xF0u) {
        unsigned int v43 = 240;
      }
      else {
        unsigned int v43 = v14[3];
      }
      if (v43 <= 0x10) {
        int v44 = 16;
      }
      else {
        int v44 = v43;
      }
      uint64_t v35 = v14 + 4;
      *unint64_t v21 = (8
            * (((613566757 * (unint64_t)((4095 * v42 - 65520) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((4095 * v38 - 65520) >> 5)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((613566757 * (unint64_t)((4095 * v44 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v40 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
      __int16 v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v45 = 0;
      do
      {
        __int16 v46 = &v36[v45];
        unsigned int v47 = *v35;
        unsigned int v48 = v35[1];
        if (v47 >= 0xF0) {
          unsigned int v47 = 240;
        }
        if (v47 <= 0x10) {
          unsigned int v47 = 16;
        }
        if (v48 >= 0xF0) {
          unsigned int v48 = 240;
        }
        if (v48 <= 0x10) {
          unsigned int v48 = 16;
        }
        unsigned int v49 = v35[2];
        unsigned int v50 = v35[3];
        if (v49 >= 0xF0) {
          unsigned int v49 = 240;
        }
        if (v49 <= 0x10) {
          unsigned int v49 = 16;
        }
        if (v50 >= 0xF0) {
          unsigned int v50 = 240;
        }
        if (v50 <= 0x10) {
          unsigned int v50 = 16;
        }
        _WORD *v46 = (8
              * (((613566757 * (unint64_t)((4095 * v49 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v47 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
        v46[1] = (8
                * (((613566757 * (unint64_t)((4095 * v50 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v48 - 65520) >> 5)) >> 32))
                + 8) & 0xFFF0;
        v45 += 2;
        v35 += 4;
      }
      while (v45 < v34);
    }
    v14 += v13;
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v51 = 0;
  }
  else
  {
    uint64_t v52 = 0;
    unint64_t v51 = v9 - v32;
    do
    {
      __int16 v53 = v14;
      __int16 v54 = v21;
      if (v33)
      {
        unsigned int v55 = *v14;
        if (v55 >= 0xF0) {
          unsigned int v55 = 240;
        }
        if (v55 <= 0x10) {
          int v56 = 16;
        }
        else {
          int v56 = v55;
        }
        if (v14[1] >= 0xF0u) {
          unsigned int v57 = 240;
        }
        else {
          unsigned int v57 = v14[1];
        }
        if (v57 <= 0x10) {
          int v58 = 16;
        }
        else {
          int v58 = v57;
        }
        unsigned int v59 = v14[2];
        if (v59 >= 0xF0) {
          unsigned int v59 = 240;
        }
        if (v59 <= 0x10) {
          int v60 = 16;
        }
        else {
          int v60 = v59;
        }
        if (v14[3] >= 0xF0u) {
          unsigned int v61 = 240;
        }
        else {
          unsigned int v61 = v14[3];
        }
        if (v61 <= 0x10) {
          int v62 = 16;
        }
        else {
          int v62 = v61;
        }
        __int16 v53 = v14 + 4;
        *unint64_t v21 = (8
              * (((613566757 * (unint64_t)((4095 * v60 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v56 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
        v21[1] = (8
                * (((613566757 * (unint64_t)((4095 * v62 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v58 - 65520) >> 5)) >> 32))
                + 8) & 0xFFF0;
        __int16 v54 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v63 = 0;
        do
        {
          int v64 = &v54[v63];
          unsigned int v65 = *v53;
          unsigned int v66 = v53[1];
          if (v65 >= 0xF0) {
            unsigned int v65 = 240;
          }
          if (v65 <= 0x10) {
            unsigned int v65 = 16;
          }
          if (v66 >= 0xF0) {
            unsigned int v66 = 240;
          }
          if (v66 <= 0x10) {
            unsigned int v66 = 16;
          }
          unsigned int v67 = v53[2];
          unsigned int v68 = v53[3];
          if (v67 >= 0xF0) {
            unsigned int v67 = 240;
          }
          if (v67 <= 0x10) {
            unsigned int v67 = 16;
          }
          if (v68 >= 0xF0) {
            unsigned int v68 = 240;
          }
          if (v68 <= 0x10) {
            unsigned int v68 = 16;
          }
          _WORD *v64 = (8
                * (((613566757 * (unint64_t)((4095 * v67 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v65 - 65520) >> 5)) >> 32))
                + 8) & 0xFFF0;
          v64[1] = (8
                  * (((613566757 * (unint64_t)((4095 * v68 - 65520) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((4095 * v66 - 65520) >> 5)) >> 32))
                  + 8) & 0xFFF0;
          v63 += 2;
          v53 += 4;
        }
        while (v63 < v34);
      }
      v14 += v13;
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v52;
    }
    while (v52 != v51);
  }
  if (v51 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v69 = *v14;
      unsigned int v70 = v14[1];
      if (v69 >= 0xF0) {
        unsigned int v69 = 240;
      }
      if (v69 <= 0x10) {
        unsigned int v69 = 16;
      }
      if (v70 >= 0xF0) {
        unsigned int v70 = 240;
      }
      if (v70 <= 0x10) {
        unsigned int v70 = 16;
      }
      unsigned int v71 = v14[2];
      if (v71 >= 0xF0) {
        unsigned int v71 = 240;
      }
      if (v71 <= 0x10) {
        unsigned int v71 = 16;
      }
      if (v14[3] >= 0xF0u) {
        unsigned int v72 = 240;
      }
      else {
        unsigned int v72 = v14[3];
      }
      if (v72 <= 0x10) {
        unsigned int v72 = 16;
      }
      v14 += 4;
      *unint64_t v21 = (8
            * (((613566757 * (unint64_t)((4095 * v71 - 65520) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((4095 * v69 - 65520) >> 5)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((613566757 * (unint64_t)((4095 * v72 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v70 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v73 = 0;
      do
      {
        unsigned int v74 = &v21[v73];
        unsigned int v75 = *v14;
        unsigned int v76 = v14[1];
        if (v75 >= 0xF0) {
          unsigned int v75 = 240;
        }
        if (v75 <= 0x10) {
          unsigned int v75 = 16;
        }
        if (v76 >= 0xF0) {
          unsigned int v76 = 240;
        }
        if (v76 <= 0x10) {
          unsigned int v76 = 16;
        }
        unsigned int v77 = v14[2];
        unsigned int v78 = v14[3];
        if (v77 >= 0xF0) {
          unsigned int v77 = 240;
        }
        if (v77 <= 0x10) {
          unsigned int v77 = 16;
        }
        if (v78 >= 0xF0) {
          unsigned int v78 = 240;
        }
        if (v78 <= 0x10) {
          unsigned int v78 = 16;
        }
        *unsigned int v74 = (8
              * (((613566757 * (unint64_t)((4095 * v77 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v75 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
        v74[1] = (8
                * (((613566757 * (unint64_t)((4095 * v78 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v76 - 65520) >> 5)) >> 32))
                + 8) & 0xFFF0;
        v73 += 2;
        v14 += 4;
      }
      while (v73 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int8 *)(v28 + i);
          if (v30 >= 0xEB) {
            unsigned int v30 = 235;
          }
          if (v30 <= 0x10) {
            unsigned int v30 = 16;
          }
          *(_WORD *)(v27 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v30 - 65520)) >> 32)
                                                  + ((4095 * v30
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v30 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      if (v37 >= 0xF0) {
        unsigned int v37 = 240;
      }
      if (v37 <= 0x10) {
        int v38 = 16;
      }
      else {
        int v38 = v37;
      }
      if (v14[1] >= 0xF0u) {
        unsigned int v39 = 240;
      }
      else {
        unsigned int v39 = v14[1];
      }
      if (v39 <= 0x10) {
        int v40 = 16;
      }
      else {
        int v40 = v39;
      }
      uint64_t v35 = v14 + 4;
      *unint64_t v21 = 16 * ((613566757 * (unint64_t)((4095 * v38 - 65520) >> 5)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((4095 * v40 - 65520) >> 5)) >> 32);
      __int16 v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        int v42 = &v36[v41];
        unsigned int v43 = *v35;
        unsigned int v44 = v35[1];
        if (v43 >= 0xF0) {
          unsigned int v43 = 240;
        }
        if (v43 <= 0x10) {
          unsigned int v43 = 16;
        }
        if (v44 >= 0xF0) {
          unsigned int v44 = 240;
        }
        if (v44 <= 0x10) {
          unsigned int v44 = 16;
        }
        *int v42 = 16 * ((613566757 * (unint64_t)((4095 * v43 - 65520) >> 5)) >> 32);
        v42[1] = 16 * ((613566757 * (unint64_t)((4095 * v44 - 65520) >> 5)) >> 32);
        v41 += 2;
        v35 += 4;
      }
      while (v41 < v34);
    }
    v14 += v13;
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v9 - v32;
    do
    {
      unsigned int v47 = v14;
      unsigned int v48 = v21;
      if (v33)
      {
        unsigned int v49 = *v14;
        if (v49 >= 0xF0) {
          unsigned int v49 = 240;
        }
        if (v49 <= 0x10) {
          int v50 = 16;
        }
        else {
          int v50 = v49;
        }
        if (v14[1] >= 0xF0u) {
          unsigned int v51 = 240;
        }
        else {
          unsigned int v51 = v14[1];
        }
        if (v51 <= 0x10) {
          int v52 = 16;
        }
        else {
          int v52 = v51;
        }
        unsigned int v47 = v14 + 4;
        *unint64_t v21 = 16 * ((613566757 * (unint64_t)((4095 * v50 - 65520) >> 5)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((4095 * v52 - 65520) >> 5)) >> 32);
        unsigned int v48 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v53 = 0;
        do
        {
          __int16 v54 = &v48[v53];
          unsigned int v55 = *v47;
          unsigned int v56 = v47[1];
          if (v55 >= 0xF0) {
            unsigned int v55 = 240;
          }
          if (v55 <= 0x10) {
            unsigned int v55 = 16;
          }
          if (v56 >= 0xF0) {
            unsigned int v56 = 240;
          }
          if (v56 <= 0x10) {
            unsigned int v56 = 16;
          }
          _WORD *v54 = 16 * ((613566757 * (unint64_t)((4095 * v55 - 65520) >> 5)) >> 32);
          v54[1] = 16 * ((613566757 * (unint64_t)((4095 * v56 - 65520) >> 5)) >> 32);
          v53 += 2;
          v47 += 4;
        }
        while (v53 < v34);
      }
      v14 += v13;
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v57 = *v14;
      unsigned int v58 = v14[1];
      if (v57 >= 0xF0) {
        unsigned int v57 = 240;
      }
      if (v57 <= 0x10) {
        unsigned int v57 = 16;
      }
      if (v58 >= 0xF0) {
        unsigned int v58 = 240;
      }
      if (v58 <= 0x10) {
        unsigned int v58 = 16;
      }
      v14 += 4;
      *unint64_t v21 = 16 * ((613566757 * (unint64_t)((4095 * v57 - 65520) >> 5)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((4095 * v58 - 65520) >> 5)) >> 32);
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v59 = 0;
      do
      {
        int v60 = &v21[v59];
        unsigned int v61 = *v14;
        unsigned int v62 = v14[1];
        if (v61 >= 0xF0) {
          unsigned int v61 = 240;
        }
        if (v61 <= 0x10) {
          unsigned int v61 = 16;
        }
        if (v62 >= 0xF0) {
          unsigned int v62 = 240;
        }
        if (v62 <= 0x10) {
          unsigned int v62 = 16;
        }
        _WORD *v60 = 16 * ((613566757 * (unint64_t)((4095 * v61 - 65520) >> 5)) >> 32);
        v60[1] = 16 * ((613566757 * (unint64_t)((4095 * v62 - 65520) >> 5)) >> 32);
        v59 += 2;
        v14 += 4;
      }
      while (v59 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  if (v26 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    unint64_t v32 = v30 + v10 + v9 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      unsigned int v39 = &v16[v15 + 2];
      __int16 v40 = *v39;
      __int16 v41 = v39[1];
      unsigned int v37 = v16 + 4;
      __int16 v42 = (v16[v15 + 1] + v16[1] + (unsigned __int16)v16[3] + v41) << 6;
      *unint64_t v23 = (v16[v15] + *v16 + (unsigned __int16)v16[2] + v40) << 6;
      v23[1] = v42;
      int v38 = v23 + 2;
    }
    else
    {
      unsigned int v37 = v16;
      int v38 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v43 = 0;
      unsigned int v44 = v37 + 3;
      do
      {
        unint64_t v45 = &v38[v43];
        __int16 v46 = *(v44 - 3);
        __int16 v47 = *(v44 - 2);
        unsigned int v48 = &v44[v15];
        __int16 v49 = v44[v15 - 3];
        __int16 v50 = v44[v15 - 2];
        __int16 v51 = *(v44 - 1);
        __int16 v52 = *v44;
        v44 += 4;
        __int16 v53 = (v50 + v47 + v52 + *v48) << 6;
        _WORD *v45 = (v49 + v46 + v51 + *(v48 - 1)) << 6;
        v45[1] = v53;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v16 += 2 * v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v26 != v35)
  {
    unint64_t v54 = 0;
    unint64_t v55 = v26 - v35;
    do
    {
      unsigned int v56 = v16;
      unsigned int v57 = v23;
      if (v9)
      {
        unsigned int v58 = &v16[v15 + 2];
        __int16 v59 = *v58;
        __int16 v60 = v58[1];
        unsigned int v56 = v16 + 4;
        __int16 v61 = (v16[v15 + 1] + v16[1] + (unsigned __int16)v16[3] + v60) << 6;
        *unint64_t v23 = (v16[v15] + *v16 + (unsigned __int16)v16[2] + v59) << 6;
        v23[1] = v61;
        unsigned int v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v62 = 0;
        unint64_t v63 = v56 + 3;
        do
        {
          int v64 = &v57[v62];
          __int16 v65 = *(v63 - 3);
          __int16 v66 = *(v63 - 2);
          unsigned int v67 = &v63[v15];
          __int16 v68 = v63[v15 - 3];
          __int16 v69 = v63[v15 - 2];
          __int16 v70 = *(v63 - 1);
          __int16 v71 = *v63;
          v63 += 4;
          __int16 v72 = (v69 + v66 + v71 + *v67) << 6;
          _WORD *v64 = (v68 + v65 + v70 + *(v67 - 1)) << 6;
          v64[1] = v72;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v16 += 2 * v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  if (v26 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    unint64_t v32 = v30 + v10 + v9 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      unsigned int v37 = v16 + 4;
      __int16 v39 = v16[1] << 8;
      *unint64_t v23 = *v16 << 8;
      v23[1] = v39;
      int v38 = v23 + 2;
    }
    else
    {
      unsigned int v37 = v16;
      int v38 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        __int16 v41 = &v38[v40];
        __int16 v42 = v37[1] << 8;
        *__int16 v41 = *v37 << 8;
        v41[1] = v42;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v16 += 2 * v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v15;
    do
    {
      __int16 v46 = v16;
      __int16 v47 = v23;
      if (v9)
      {
        __int16 v46 = v16 + 4;
        __int16 v48 = v16[1] << 8;
        *unint64_t v23 = *v16 << 8;
        v23[1] = v48;
        __int16 v47 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          __int16 v50 = &v47[v49];
          __int16 v51 = v46[1] << 8;
          *__int16 v50 = *v46 << 8;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v16 += v45;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    BOOL v29 = v13 >= v9;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v13;
    if (v29) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    unint64_t v34 = v32 + v10 + v8 + v33;
    uint64_t v35 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB) {
            unsigned int v37 = 235;
          }
          if (v37 <= 0x10) {
            unsigned int v37 = 16;
          }
          *(_WORD *)(v35 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v37 - 65520)) >> 32)
                                                  + ((4095 * v37
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v37 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v38 = v12;
  }
  else {
    unint64_t v38 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v39 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v42 = *v16;
      unsigned int v43 = v16[1];
      unsigned int v44 = v16[v15];
      unsigned int v45 = v16[v15 + 1];
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        unsigned int v42 = 16;
      }
      if (v43 >= 0xF0) {
        unsigned int v43 = 240;
      }
      if (v43 <= 0x10) {
        unsigned int v43 = 16;
      }
      if (v44 >= 0xF0) {
        unsigned int v44 = 240;
      }
      if (v44 <= 0x10) {
        unsigned int v44 = 16;
      }
      if (v45 >= 0xF0) {
        unsigned int v45 = 240;
      }
      if (v45 <= 0x10) {
        int v46 = 16;
      }
      else {
        int v46 = v45;
      }
      unsigned int v47 = v16[2];
      unsigned int v48 = v16[3];
      unint64_t v49 = &v16[v15 + 2];
      unsigned int v50 = *v49;
      unsigned int v51 = v49[1];
      if (v47 >= 0xF0) {
        unsigned int v47 = 240;
      }
      if (v47 <= 0x10) {
        unsigned int v47 = 16;
      }
      if (v48 >= 0xF0) {
        unsigned int v48 = 240;
      }
      if (v48 <= 0x10) {
        unsigned int v48 = 16;
      }
      if (v50 >= 0xF0) {
        unsigned int v50 = 240;
      }
      if (v50 <= 0x10) {
        unsigned int v50 = 16;
      }
      if (v51 >= 0xF0) {
        unsigned int v51 = 240;
      }
      if (v51 <= 0x10) {
        int v52 = 16;
      }
      else {
        int v52 = v51;
      }
      unint64_t v40 = v16 + 4;
      *unint64_t v23 = (4
            * (((613566757 * (unint64_t)((4095 * v44 - 65520) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((4095 * v42 - 65520) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((4095 * v47 - 65520) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((4095 * v50 - 65520) >> 5)) >> 32))
            + 8) & 0xFFF0;
      v23[1] = (4
              * (((613566757 * (unint64_t)((4095 * v46 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v43 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v48 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v52 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
      __int16 v41 = v23 + 2;
    }
    else
    {
      unint64_t v40 = v16;
      __int16 v41 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v53 = 0;
      unint64_t v54 = v40 + 3;
      do
      {
        unsigned int v55 = *(v54 - 3);
        unsigned int v56 = &v54[v15];
        if (v55 >= 0xF0) {
          unsigned int v55 = 240;
        }
        if (v55 <= 0x10) {
          int v57 = 16;
        }
        else {
          int v57 = v55;
        }
        if (*(v54 - 2) >= 0xF0u) {
          unsigned int v58 = 240;
        }
        else {
          unsigned int v58 = *(v54 - 2);
        }
        if (v58 <= 0x10) {
          int v59 = 16;
        }
        else {
          int v59 = v58;
        }
        if (v54[v15 - 3] >= 0xF0u) {
          unsigned int v60 = 240;
        }
        else {
          unsigned int v60 = v54[v15 - 3];
        }
        if (v60 <= 0x10) {
          int v61 = 16;
        }
        else {
          int v61 = v60;
        }
        if (*(v56 - 2) >= 0xF0u) {
          unsigned int v62 = 240;
        }
        else {
          unsigned int v62 = *(v56 - 2);
        }
        unsigned int v63 = *(v54 - 1);
        unsigned int v65 = *v54;
        v54 += 4;
        unsigned int v64 = v65;
        if (v62 <= 0x10) {
          int v66 = 16;
        }
        else {
          int v66 = v62;
        }
        unsigned int v67 = *(v56 - 1);
        unsigned int v68 = *v56;
        if (v63 >= 0xF0) {
          unsigned int v69 = 240;
        }
        else {
          unsigned int v69 = v63;
        }
        if (v69 <= 0x10) {
          int v70 = 16;
        }
        else {
          int v70 = v69;
        }
        if (v64 >= 0xF0) {
          unsigned int v71 = 240;
        }
        else {
          unsigned int v71 = v64;
        }
        if (v71 <= 0x10) {
          int v72 = 16;
        }
        else {
          int v72 = v71;
        }
        unint64_t v73 = &v41[v53];
        if (v67 >= 0xF0) {
          unsigned int v67 = 240;
        }
        if (v67 <= 0x10) {
          unsigned int v67 = 16;
        }
        if (v68 >= 0xF0) {
          unsigned int v68 = 240;
        }
        unint64_t v74 = (613566757 * (unint64_t)((4095 * v57 - 65520) >> 5)) >> 32;
        unint64_t v75 = (613566757 * (unint64_t)((4095 * v59 - 65520) >> 5)) >> 32;
        unint64_t v76 = (613566757 * (unint64_t)((4095 * v61 - 65520) >> 5)) >> 32;
        unint64_t v77 = (613566757 * (unint64_t)((4095 * v66 - 65520) >> 5)) >> 32;
        uint64_t v78 = 613566757 * ((4095 * v70 - 65520) >> 5);
        if (v68 <= 0x10) {
          unsigned int v68 = 16;
        }
        *unint64_t v73 = (4 * (v76 + v74 + WORD2(v78) + ((613566757 * (unint64_t)((4095 * v67 - 65520) >> 5)) >> 32)) + 8) & 0xFFF0;
        v73[1] = (4
                * (v77
                 + v75
                 + ((613566757 * (unint64_t)((4095 * v72 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v68 - 65520) >> 5)) >> 32))
                + 8) & 0xFFF0;
        v53 += 2;
      }
      while (v53 < v39);
    }
    v16 += 2 * v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v38)
  {
    unint64_t v79 = 0;
    unint64_t v80 = v27 - v38;
    do
    {
      int v81 = v16;
      int v82 = v23;
      if (v8)
      {
        unsigned int v83 = *v16;
        unsigned int v84 = v16[1];
        unsigned int v85 = v16[v15];
        unsigned int v86 = v16[v15 + 1];
        if (v83 >= 0xF0) {
          unsigned int v83 = 240;
        }
        if (v83 <= 0x10) {
          unsigned int v83 = 16;
        }
        if (v84 >= 0xF0) {
          unsigned int v84 = 240;
        }
        if (v84 <= 0x10) {
          unsigned int v84 = 16;
        }
        if (v85 >= 0xF0) {
          unsigned int v85 = 240;
        }
        if (v85 <= 0x10) {
          unsigned int v85 = 16;
        }
        if (v86 >= 0xF0) {
          unsigned int v86 = 240;
        }
        if (v86 <= 0x10) {
          int v87 = 16;
        }
        else {
          int v87 = v86;
        }
        unsigned int v88 = v16[2];
        unsigned int v89 = v16[3];
        size_t v90 = &v16[v15 + 2];
        unsigned int v91 = *v90;
        unsigned int v92 = v90[1];
        if (v88 >= 0xF0) {
          unsigned int v88 = 240;
        }
        if (v88 <= 0x10) {
          unsigned int v88 = 16;
        }
        if (v89 >= 0xF0) {
          unsigned int v89 = 240;
        }
        if (v89 <= 0x10) {
          unsigned int v89 = 16;
        }
        if (v91 >= 0xF0) {
          unsigned int v91 = 240;
        }
        if (v91 <= 0x10) {
          unsigned int v91 = 16;
        }
        if (v92 >= 0xF0) {
          unsigned int v92 = 240;
        }
        if (v92 <= 0x10) {
          int v93 = 16;
        }
        else {
          int v93 = v92;
        }
        int v81 = v16 + 4;
        *unint64_t v23 = (4
              * (((613566757 * (unint64_t)((4095 * v85 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v83 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v88 - 65520) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((4095 * v91 - 65520) >> 5)) >> 32))
              + 8) & 0xFFF0;
        v23[1] = (4
                * (((613566757 * (unint64_t)((4095 * v87 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v84 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v89 - 65520) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((4095 * v93 - 65520) >> 5)) >> 32))
                + 8) & 0xFFF0;
        int v82 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v94 = 0;
        unint64_t v95 = v81 + 3;
        do
        {
          unsigned int v96 = *(v95 - 3);
          unsigned int v97 = &v95[v15];
          if (v96 >= 0xF0) {
            unsigned int v96 = 240;
          }
          if (v96 <= 0x10) {
            int v98 = 16;
          }
          else {
            int v98 = v96;
          }
          if (*(v95 - 2) >= 0xF0u) {
            unsigned int v99 = 240;
          }
          else {
            unsigned int v99 = *(v95 - 2);
          }
          if (v99 <= 0x10) {
            int v100 = 16;
          }
          else {
            int v100 = v99;
          }
          if (v95[v15 - 3] >= 0xF0u) {
            unsigned int v101 = 240;
          }
          else {
            unsigned int v101 = v95[v15 - 3];
          }
          if (v101 <= 0x10) {
            int v102 = 16;
          }
          else {
            int v102 = v101;
          }
          if (*(v97 - 2) >= 0xF0u) {
            unsigned int v103 = 240;
          }
          else {
            unsigned int v103 = *(v97 - 2);
          }
          unsigned int v104 = *(v95 - 1);
          unsigned int v106 = *v95;
          v95 += 4;
          unsigned int v105 = v106;
          if (v103 <= 0x10) {
            int v107 = 16;
          }
          else {
            int v107 = v103;
          }
          unsigned int v108 = *(v97 - 1);
          unsigned int v109 = *v97;
          if (v104 >= 0xF0) {
            unsigned int v110 = 240;
          }
          else {
            unsigned int v110 = v104;
          }
          if (v110 <= 0x10) {
            int v111 = 16;
          }
          else {
            int v111 = v110;
          }
          if (v105 >= 0xF0) {
            unsigned int v112 = 240;
          }
          else {
            unsigned int v112 = v105;
          }
          if (v112 <= 0x10) {
            int v113 = 16;
          }
          else {
            int v113 = v112;
          }
          CFTypeRef v114 = &v82[v94];
          if (v108 >= 0xF0) {
            unsigned int v108 = 240;
          }
          if (v108 <= 0x10) {
            unsigned int v108 = 16;
          }
          if (v109 >= 0xF0) {
            unsigned int v109 = 240;
          }
          unint64_t v115 = (613566757 * (unint64_t)((4095 * v98 - 65520) >> 5)) >> 32;
          unint64_t v116 = (613566757 * (unint64_t)((4095 * v100 - 65520) >> 5)) >> 32;
          unint64_t v117 = (613566757 * (unint64_t)((4095 * v102 - 65520) >> 5)) >> 32;
          unint64_t v118 = (613566757 * (unint64_t)((4095 * v107 - 65520) >> 5)) >> 32;
          uint64_t v119 = 613566757 * ((4095 * v111 - 65520) >> 5);
          if (v109 <= 0x10) {
            unsigned int v109 = 16;
          }
          *CFTypeRef v114 = (4
                 * (v117 + v115 + WORD2(v119) + ((613566757 * (unint64_t)((4095 * v108 - 65520) >> 5)) >> 32))
                 + 8) & 0xFFF0;
          v114[1] = (4
                   * (v118
                    + v116
                    + ((613566757 * (unint64_t)((4095 * v113 - 65520) >> 5)) >> 32)
                    + ((613566757 * (unint64_t)((4095 * v109 - 65520) >> 5)) >> 32))
                   + 8) & 0xFFF0;
          v94 += 2;
        }
        while (v94 < v39);
      }
      v16 += 2 * v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v79 += 2;
    }
    while (v79 < v80);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    BOOL v29 = v13 >= v9;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v13;
    if (v29) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    unint64_t v34 = v32 + v10 + v8 + v33;
    uint64_t v35 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB) {
            unsigned int v37 = 235;
          }
          if (v37 <= 0x10) {
            unsigned int v37 = 16;
          }
          *(_WORD *)(v35 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v37 - 65520)) >> 32)
                                                  + ((4095 * v37
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v37 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v38 = v12;
  }
  else {
    unint64_t v38 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v39 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v42 = *v16;
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        int v43 = 16;
      }
      else {
        int v43 = v42;
      }
      if (v16[1] >= 0xF0u) {
        unsigned int v44 = 240;
      }
      else {
        unsigned int v44 = v16[1];
      }
      if (v44 <= 0x10) {
        int v45 = 16;
      }
      else {
        int v45 = v44;
      }
      unint64_t v40 = v16 + 4;
      *unint64_t v23 = 16 * ((613566757 * (unint64_t)((4095 * v43 - 65520) >> 5)) >> 32);
      v23[1] = 16 * ((613566757 * (unint64_t)((4095 * v45 - 65520) >> 5)) >> 32);
      __int16 v41 = v23 + 2;
    }
    else
    {
      unint64_t v40 = v16;
      __int16 v41 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v46 = 0;
      do
      {
        unsigned int v47 = &v41[v46];
        unsigned int v48 = *v40;
        unsigned int v49 = v40[1];
        if (v48 >= 0xF0) {
          unsigned int v48 = 240;
        }
        if (v48 <= 0x10) {
          unsigned int v48 = 16;
        }
        if (v49 >= 0xF0) {
          unsigned int v49 = 240;
        }
        if (v49 <= 0x10) {
          unsigned int v49 = 16;
        }
        *unsigned int v47 = 16 * ((613566757 * (unint64_t)((4095 * v48 - 65520) >> 5)) >> 32);
        v47[1] = 16 * ((613566757 * (unint64_t)((4095 * v49 - 65520) >> 5)) >> 32);
        v46 += 2;
        v40 += 4;
      }
      while (v46 < v39);
    }
    v16 += 2 * v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v38)
  {
    unint64_t v50 = 0;
    unint64_t v51 = v27 - v38;
    uint64_t v52 = 2 * v15;
    do
    {
      unint64_t v53 = v16;
      unint64_t v54 = v23;
      if (v8)
      {
        unsigned int v55 = *v16;
        if (v55 >= 0xF0) {
          unsigned int v55 = 240;
        }
        if (v55 <= 0x10) {
          int v56 = 16;
        }
        else {
          int v56 = v55;
        }
        if (v16[1] >= 0xF0u) {
          unsigned int v57 = 240;
        }
        else {
          unsigned int v57 = v16[1];
        }
        if (v57 <= 0x10) {
          int v58 = 16;
        }
        else {
          int v58 = v57;
        }
        unint64_t v53 = v16 + 4;
        *unint64_t v23 = 16 * ((613566757 * (unint64_t)((4095 * v56 - 65520) >> 5)) >> 32);
        v23[1] = 16 * ((613566757 * (unint64_t)((4095 * v58 - 65520) >> 5)) >> 32);
        unint64_t v54 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v59 = 0;
        do
        {
          unsigned int v60 = &v54[v59];
          unsigned int v61 = *v53;
          unsigned int v62 = v53[1];
          if (v61 >= 0xF0) {
            unsigned int v61 = 240;
          }
          if (v61 <= 0x10) {
            unsigned int v61 = 16;
          }
          if (v62 >= 0xF0) {
            unsigned int v62 = 240;
          }
          if (v62 <= 0x10) {
            unsigned int v62 = 16;
          }
          _WORD *v60 = 16 * ((613566757 * (unint64_t)((4095 * v61 - 65520) >> 5)) >> 32);
          v60[1] = 16 * ((613566757 * (unint64_t)((4095 * v62 - 65520) >> 5)) >> 32);
          v59 += 2;
          v53 += 4;
        }
        while (v59 < v39);
      }
      v16 += v52;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_Copy_v4a8_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v15 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v14;
    uint64_t v22 = *a7 + *a8 * v14;
    uint64_t v23 = *a4;
    uint64_t v24 = a4[2];
    uint64_t v25 = v21 + 2 * v15;
    uint64_t v26 = v22 + 2 * v15;
    uint64_t v27 = a3[2] + v24 * v8 + v9;
    uint64_t v28 = *a3 + v23 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v25 + 2 * i) = *(unsigned __int8 *)(v27 + i) | (*(unsigned __int8 *)(v27 + i) << 8);
          *(_WORD *)(v26 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v30 = v8 & 1;
  if (v11 >= v30) {
    uint64_t v31 = v8 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  unint64_t v33 = v9 & 1;
  if (v10 >= v33) {
    unint64_t v34 = v33;
  }
  else {
    unint64_t v34 = 0;
  }
  unint64_t v35 = v10 - v34;
  if (v8)
  {
    if (v32)
    {
      unint64_t v36 = v13 + 2;
      __int16 v38 = v13[1] << 8;
      *uint64_t v17 = *v13 << 8;
      v17[1] = v38;
      unsigned int v37 = v17 + 2;
    }
    else
    {
      unint64_t v36 = v13;
      unsigned int v37 = v17;
    }
    if (v10 == v34)
    {
      unint64_t v39 = 0;
    }
    else
    {
      unint64_t v40 = v10 - v34;
      do
      {
        __int16 v41 = *v36;
        __int16 v42 = v36[1];
        v36 += 2;
        *unsigned int v37 = v41 << 8;
        v37[1] = v42 << 8;
        v37 += 2;
        --v40;
      }
      while (v40);
      unint64_t v39 = v10 - v34;
    }
    if (v39 + v33 < v10)
    {
      __int16 v43 = *v36 << 8;
      __int16 v44 = v36[1] << 8;
      *unsigned int v37 = v43;
      v37[1] = v44;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v31)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v11 - v31;
    do
    {
      unsigned int v47 = v13;
      unsigned int v48 = v17;
      if (v32)
      {
        unsigned int v47 = v13 + 2;
        __int16 v49 = v13[1] << 8;
        *uint64_t v17 = *v13 << 8;
        v17[1] = v49;
        unsigned int v48 = v17 + 2;
      }
      if (v10 == v34)
      {
        unint64_t v50 = 0;
      }
      else
      {
        unint64_t v51 = v10 - v34;
        do
        {
          __int16 v52 = *v47;
          __int16 v53 = v47[1];
          v47 += 2;
          _WORD *v48 = v52 << 8;
          v48[1] = v53 << 8;
          v48 += 2;
          --v51;
        }
        while (v51);
        unint64_t v50 = v10 - v34;
      }
      if (v50 + v33 < v10)
      {
        __int16 v54 = *v47 << 8;
        __int16 v55 = v47[1] << 8;
        _WORD *v48 = v54;
        v48[1] = v55;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v11)
  {
    if (v32)
    {
      __int16 v56 = *v13;
      __int16 v57 = v13[1];
      v13 += 2;
      *uint64_t v17 = v56 << 8;
      v17[1] = v57 << 8;
      v17 += 2;
    }
    if (v10 == v34)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v58 = v10 - v34;
      do
      {
        __int16 v59 = *v13;
        __int16 v60 = v13[1];
        v13 += 2;
        *uint64_t v17 = v59 << 8;
        v17[1] = v60 << 8;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v35 + v33 < v10)
    {
      __int16 v61 = *v13 << 8;
      __int16 v62 = v13[1] << 8;
      *uint64_t v17 = v61;
      v17[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v22 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(unsigned __int8 *)(v22 + i) << 8;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v24 = v8 & 1;
  if (v11 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v26)
    {
      unint64_t v30 = v13 + 2;
      __int16 v32 = v13[1] << 8;
      *uint64_t v17 = *v13 << 8;
      v17[1] = v32;
      uint64_t v31 = v17 + 2;
    }
    else
    {
      unint64_t v30 = v13;
      uint64_t v31 = v17;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        __int16 v35 = *v30;
        __int16 v36 = v30[1];
        v30 += 2;
        *uint64_t v31 = v35 << 8;
        v31[1] = v36 << 8;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      __int16 v37 = *v30 << 8;
      __int16 v38 = v30[1] << 8;
      *uint64_t v31 = v37;
      v31[1] = v38;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v11 - v25;
    do
    {
      __int16 v41 = v13;
      __int16 v42 = v17;
      if (v26)
      {
        __int16 v41 = v13 + 2;
        __int16 v43 = v13[1] << 8;
        *uint64_t v17 = *v13 << 8;
        v17[1] = v43;
        __int16 v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          __int16 v46 = *v41;
          __int16 v47 = v41[1];
          v41 += 2;
          *__int16 v42 = v46 << 8;
          v42[1] = v47 << 8;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        __int16 v48 = *v41 << 8;
        __int16 v49 = v41[1] << 8;
        *__int16 v42 = v48;
        v42[1] = v49;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if (v26)
    {
      __int16 v50 = *v13;
      __int16 v51 = v13[1];
      v13 += 2;
      *uint64_t v17 = v50 << 8;
      v17[1] = v51 << 8;
      v17 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        __int16 v53 = *v13;
        __int16 v54 = v13[1];
        v13 += 2;
        *uint64_t v17 = v53 << 8;
        v17[1] = v54 << 8;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      __int16 v55 = *v13 << 8;
      __int16 v56 = v13[1] << 8;
      *uint64_t v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          unsigned int v25 = *(unsigned __int8 *)(v23 + i);
          if (v25 >= 0xEB) {
            unsigned int v25 = 235;
          }
          if (v25 <= 0x10) {
            unsigned int v25 = 16;
          }
          *(_WORD *)(v22 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v25 - 16368)) >> 32)
                                                  + ((1023 * v25
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v25 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v26 = v8 & 1;
  if (v18 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      unsigned int v34 = *v13;
      unsigned int v35 = v13[1];
      if (v34 >= 0xF0) {
        unsigned int v34 = 240;
      }
      if (v34 <= 0x10) {
        unsigned int v34 = 16;
      }
      if (v35 >= 0xF0) {
        unsigned int v35 = 240;
      }
      if (v35 <= 0x10) {
        int v36 = 16;
      }
      else {
        int v36 = v35;
      }
      __int16 v32 = v13 + 2;
      *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v34 - 16368) >> 5)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v36 - 16368) >> 5)) >> 32) << 6;
      unint64_t v33 = v17 + 2;
    }
    else
    {
      __int16 v32 = v13;
      unint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v37 = 0;
    }
    else
    {
      unint64_t v38 = v10 - v30;
      do
      {
        unsigned int v39 = *v32;
        unsigned int v40 = v32[1];
        if (v39 >= 0xF0) {
          unsigned int v39 = 240;
        }
        if (v39 <= 0x10) {
          unsigned int v39 = 16;
        }
        if (v40 >= 0xF0) {
          unsigned int v40 = 240;
        }
        if (v40 <= 0x10) {
          unsigned int v40 = 16;
        }
        v32 += 2;
        *unint64_t v33 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v39 - 16368) >> 5)) >> 32) << 6;
        v33[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v40 - 16368) >> 5)) >> 32) << 6;
        v33 += 2;
        --v38;
      }
      while (v38);
      unint64_t v37 = v10 - v30;
    }
    if (v37 + v29 < v10)
    {
      unsigned int v41 = *v32;
      unsigned int v42 = v32[1];
      if (v41 >= 0xF0) {
        unsigned int v41 = 240;
      }
      if (v41 <= 0x10) {
        unsigned int v41 = 16;
      }
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        unsigned int v42 = 16;
      }
      *unint64_t v33 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v41 - 16368) >> 5)) >> 32) << 6;
      v33[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v42 - 16368) >> 5)) >> 32) << 6;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v18 - v27;
    do
    {
      unint64_t v45 = v13;
      __int16 v46 = v17;
      if (v28)
      {
        unsigned int v47 = *v13;
        unsigned int v48 = v13[1];
        if (v47 >= 0xF0) {
          unsigned int v47 = 240;
        }
        if (v47 <= 0x10) {
          unsigned int v47 = 16;
        }
        if (v48 >= 0xF0) {
          unsigned int v48 = 240;
        }
        if (v48 <= 0x10) {
          int v49 = 16;
        }
        else {
          int v49 = v48;
        }
        unint64_t v45 = v13 + 2;
        *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v47 - 16368) >> 5)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v49 - 16368) >> 5)) >> 32) << 6;
        __int16 v46 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v50 = 0;
      }
      else
      {
        unint64_t v51 = v10 - v30;
        do
        {
          unsigned int v52 = *v45;
          unsigned int v53 = v45[1];
          if (v52 >= 0xF0) {
            unsigned int v52 = 240;
          }
          if (v52 <= 0x10) {
            unsigned int v52 = 16;
          }
          if (v53 >= 0xF0) {
            unsigned int v53 = 240;
          }
          if (v53 <= 0x10) {
            unsigned int v53 = 16;
          }
          v45 += 2;
          _WORD *v46 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v52 - 16368) >> 5)) >> 32) << 6;
          v46[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v53 - 16368) >> 5)) >> 32) << 6;
          v46 += 2;
          --v51;
        }
        while (v51);
        unint64_t v50 = v10 - v30;
      }
      if (v50 + v29 < v10)
      {
        unsigned int v54 = *v45;
        unsigned int v55 = v45[1];
        if (v54 >= 0xF0) {
          unsigned int v54 = 240;
        }
        if (v54 <= 0x10) {
          unsigned int v54 = 16;
        }
        if (v55 >= 0xF0) {
          unsigned int v55 = 240;
        }
        if (v55 <= 0x10) {
          unsigned int v55 = 16;
        }
        _WORD *v46 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v54 - 16368) >> 5)) >> 32) << 6;
        v46[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v55 - 16368) >> 5)) >> 32) << 6;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v26 < v18)
  {
    if (v28)
    {
      unsigned int v56 = *v13;
      unsigned int v57 = v13[1];
      if (v56 >= 0xF0) {
        unsigned int v56 = 240;
      }
      if (v56 <= 0x10) {
        unsigned int v56 = 16;
      }
      if (v57 >= 0xF0) {
        unsigned int v57 = 240;
      }
      if (v57 <= 0x10) {
        unsigned int v57 = 16;
      }
      v13 += 2;
      *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v56 - 16368) >> 5)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 16368) >> 5)) >> 32) << 6;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v58 = v10 - v30;
      do
      {
        unsigned int v59 = *v13;
        unsigned int v60 = v13[1];
        if (v59 >= 0xF0) {
          unsigned int v59 = 240;
        }
        if (v59 <= 0x10) {
          unsigned int v59 = 16;
        }
        if (v60 >= 0xF0) {
          unsigned int v60 = 240;
        }
        if (v60 <= 0x10) {
          unsigned int v60 = 16;
        }
        v13 += 2;
        *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v59 - 16368) >> 5)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v60 - 16368) >> 5)) >> 32) << 6;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v31 + v29 < v10)
    {
      unsigned int v61 = *v13;
      unsigned int v62 = v13[1];
      if (v61 >= 0xF0) {
        unsigned int v61 = 240;
      }
      if (v61 <= 0x10) {
        unsigned int v61 = 16;
      }
      if (v62 >= 0xF0) {
        unsigned int v62 = 240;
      }
      if (v62 <= 0x10) {
        unsigned int v62 = 16;
      }
      *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v61 - 16368) >> 5)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v62 - 16368) >> 5)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_v4a8_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21) {
    unint64_t v20 = v21;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = a7[2] + v24 * v16;
    uint64_t v26 = *a7 + *a8 * v16;
    uint64_t v27 = *a4;
    uint64_t v28 = a4[2];
    uint64_t v29 = v25 + v17;
    uint64_t v30 = v26 + v17;
    uint64_t v31 = a3[2] + v28 * v12 + v11;
    uint64_t v32 = *a3 + v27 * v12 + v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) | (*(unsigned __int8 *)(v31 + i) << 8);
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  unint64_t v34 = v12 & 1;
  if (v8 >= v34) {
    uint64_t v35 = v12 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  char v36 = v9;
  if (v20 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v20 - v10;
  if (v12)
  {
    if (v36)
    {
      unint64_t v38 = v14 + 4;
      __int16 v40 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *uint64_t v19 = (v14[2] + (unsigned __int16)*v14) << 7;
      v19[1] = v40;
      unsigned int v39 = v19 + 2;
    }
    else
    {
      unint64_t v38 = v14;
      unsigned int v39 = v19;
    }
    if (v20 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        __int16 v43 = (v38[3] + (unsigned __int16)v38[1]) << 7;
        *unsigned int v42 = (v38[2] + (unsigned __int16)*v38) << 7;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 += v13;
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v35;
    do
    {
      __int16 v46 = v14;
      unsigned int v47 = v19;
      if (v36)
      {
        __int16 v46 = v14 + 4;
        __int16 v48 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *uint64_t v19 = (v14[2] + (unsigned __int16)*v14) << 7;
        v19[1] = v48;
        unsigned int v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          __int16 v51 = (v46[3] + (unsigned __int16)v46[1]) << 7;
          *unint64_t v50 = (v46[2] + (unsigned __int16)*v46) << 7;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 += v13;
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if (v36)
    {
      __int16 v52 = *v14;
      __int16 v53 = v14[1];
      __int16 v54 = v14[2];
      __int16 v55 = v14[3];
      v14 += 4;
      *uint64_t v19 = (v54 + v52) << 7;
      v19[1] = (v55 + v53) << 7;
      v19 += 2;
    }
    if (v20 != v10)
    {
      unint64_t v56 = 0;
      do
      {
        unsigned int v57 = &v19[v56];
        __int16 v58 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *unsigned int v57 = (v14[2] + (unsigned __int16)*v14) << 7;
        v57[1] = v58;
        v56 += 2;
        v14 += 4;
      }
      while (v56 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_v4a8_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21) {
    unint64_t v20 = v21;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = a7[2] + v24 * v16;
    uint64_t v26 = *a7 + *a8 * v16;
    uint64_t v27 = *a4;
    uint64_t v28 = a4[2];
    uint64_t v29 = v25 + v17;
    uint64_t v30 = v26 + v17;
    uint64_t v31 = a3[2] + v28 * v12 + v11;
    uint64_t v32 = *a3 + v27 * v12 + v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v31 + i) | (*(unsigned __int8 *)(v31 + i) << 8);
          *(_WORD *)(v30 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  unint64_t v34 = v12 & 1;
  if (v8 >= v34) {
    uint64_t v35 = v12 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  char v36 = v9;
  if (v20 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v20 - v10;
  if (v12)
  {
    if (v36)
    {
      unint64_t v38 = v14 + 4;
      __int16 v40 = v14[1] << 8;
      *uint64_t v19 = *v14 << 8;
      v19[1] = v40;
      unsigned int v39 = v19 + 2;
    }
    else
    {
      unint64_t v38 = v14;
      unsigned int v39 = v19;
    }
    if (v20 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        __int16 v43 = v38[1] << 8;
        *unsigned int v42 = *v38 << 8;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v14 += v13;
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v35;
    do
    {
      __int16 v46 = v14;
      unsigned int v47 = v19;
      if (v36)
      {
        __int16 v46 = v14 + 4;
        __int16 v48 = v14[1] << 8;
        *uint64_t v19 = *v14 << 8;
        v19[1] = v48;
        unsigned int v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          __int16 v51 = v46[1] << 8;
          *unint64_t v50 = *v46 << 8;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      v14 += v13;
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if (v36)
    {
      __int16 v52 = *v14;
      __int16 v53 = v14[1];
      v14 += 4;
      *uint64_t v19 = v52 << 8;
      v19[1] = v53 << 8;
      v19 += 2;
    }
    if (v20 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        __int16 v55 = &v19[v54];
        __int16 v56 = v14[1] << 8;
        _WORD *v55 = *v14 << 8;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      __int16 v36 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *unint64_t v21 = (v14[2] + (unsigned __int16)*v14) << 7;
      v21[1] = v36;
      uint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unint64_t v38 = &v35[v37];
        __int16 v39 = (v34[3] + (unsigned __int16)v34[1]) << 7;
        _WORD *v38 = (v34[2] + (unsigned __int16)*v34) << 7;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      unsigned int v42 = v14;
      __int16 v43 = v21;
      if (v32)
      {
        unsigned int v42 = v14 + 4;
        __int16 v44 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *unint64_t v21 = (v14[2] + (unsigned __int16)*v14) << 7;
        v21[1] = v44;
        __int16 v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          __int16 v46 = &v43[v45];
          __int16 v47 = (v42[3] + (unsigned __int16)v42[1]) << 7;
          _WORD *v46 = (v42[2] + (unsigned __int16)*v42) << 7;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      __int16 v48 = *v14;
      __int16 v49 = v14[1];
      __int16 v50 = v14[2];
      __int16 v51 = v14[3];
      v14 += 4;
      *unint64_t v21 = (v50 + v48) << 7;
      v21[1] = (v51 + v49) << 7;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        __int16 v53 = &v21[v52];
        __int16 v54 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *__int16 v53 = (v14[2] + (unsigned __int16)*v14) << 7;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      __int16 v36 = v14[1] << 8;
      *unint64_t v21 = *v14 << 8;
      v21[1] = v36;
      uint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unint64_t v38 = &v35[v37];
        __int16 v39 = v34[1] << 8;
        _WORD *v38 = *v34 << 8;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      unsigned int v42 = v14;
      __int16 v43 = v21;
      if (v32)
      {
        unsigned int v42 = v14 + 4;
        __int16 v44 = v14[1] << 8;
        *unint64_t v21 = *v14 << 8;
        v21[1] = v44;
        __int16 v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          __int16 v46 = &v43[v45];
          __int16 v47 = v42[1] << 8;
          _WORD *v46 = *v42 << 8;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      __int16 v48 = *v14;
      __int16 v49 = v14[1];
      v14 += 4;
      *unint64_t v21 = v48 << 8;
      v21[1] = v49 << 8;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        __int16 v51 = &v21[v50];
        __int16 v52 = v14[1] << 8;
        *__int16 v51 = *v14 << 8;
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int8 *)(v28 + i);
          if (v30 >= 0xEB) {
            unsigned int v30 = 235;
          }
          if (v30 <= 0x10) {
            unsigned int v30 = 16;
          }
          *(_WORD *)(v27 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v30 - 16368)) >> 32)
                                                  + ((1023 * v30
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v30 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      if (v37 >= 0xF0) {
        unsigned int v37 = 240;
      }
      if (v37 <= 0x10) {
        int v38 = 16;
      }
      else {
        int v38 = v37;
      }
      if (v14[1] >= 0xF0u) {
        unsigned int v39 = 240;
      }
      else {
        unsigned int v39 = v14[1];
      }
      if (v39 <= 0x10) {
        int v40 = 16;
      }
      else {
        int v40 = v39;
      }
      unsigned int v41 = v14[2];
      if (v41 >= 0xF0) {
        unsigned int v41 = 240;
      }
      if (v41 <= 0x10) {
        int v42 = 16;
      }
      else {
        int v42 = v41;
      }
      if (v14[3] >= 0xF0u) {
        unsigned int v43 = 240;
      }
      else {
        unsigned int v43 = v14[3];
      }
      if (v43 <= 0x10) {
        int v44 = 16;
      }
      else {
        int v44 = v43;
      }
      uint64_t v35 = v14 + 4;
      *unint64_t v21 = (32
            * (((613566757 * (unint64_t)((1023 * v42 - 16368) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v38 - 16368) >> 5)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32
              * (((613566757 * (unint64_t)((1023 * v44 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v40 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
      __int16 v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v45 = 0;
      do
      {
        __int16 v46 = &v36[v45];
        unsigned int v47 = *v35;
        unsigned int v48 = v35[1];
        if (v47 >= 0xF0) {
          unsigned int v47 = 240;
        }
        if (v47 <= 0x10) {
          unsigned int v47 = 16;
        }
        if (v48 >= 0xF0) {
          unsigned int v48 = 240;
        }
        if (v48 <= 0x10) {
          unsigned int v48 = 16;
        }
        unsigned int v49 = v35[2];
        unsigned int v50 = v35[3];
        if (v49 >= 0xF0) {
          unsigned int v49 = 240;
        }
        if (v49 <= 0x10) {
          unsigned int v49 = 16;
        }
        if (v50 >= 0xF0) {
          unsigned int v50 = 240;
        }
        if (v50 <= 0x10) {
          unsigned int v50 = 16;
        }
        _WORD *v46 = (32
              * (((613566757 * (unint64_t)((1023 * v49 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v47 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
        v46[1] = (32
                * (((613566757 * (unint64_t)((1023 * v50 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v48 - 16368) >> 5)) >> 32))
                + 32) & 0xFFC0;
        v45 += 2;
        v35 += 4;
      }
      while (v45 < v34);
    }
    v14 += v13;
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v51 = 0;
  }
  else
  {
    uint64_t v52 = 0;
    unint64_t v51 = v9 - v32;
    do
    {
      __int16 v53 = v14;
      __int16 v54 = v21;
      if (v33)
      {
        unsigned int v55 = *v14;
        if (v55 >= 0xF0) {
          unsigned int v55 = 240;
        }
        if (v55 <= 0x10) {
          int v56 = 16;
        }
        else {
          int v56 = v55;
        }
        if (v14[1] >= 0xF0u) {
          unsigned int v57 = 240;
        }
        else {
          unsigned int v57 = v14[1];
        }
        if (v57 <= 0x10) {
          int v58 = 16;
        }
        else {
          int v58 = v57;
        }
        unsigned int v59 = v14[2];
        if (v59 >= 0xF0) {
          unsigned int v59 = 240;
        }
        if (v59 <= 0x10) {
          int v60 = 16;
        }
        else {
          int v60 = v59;
        }
        if (v14[3] >= 0xF0u) {
          unsigned int v61 = 240;
        }
        else {
          unsigned int v61 = v14[3];
        }
        if (v61 <= 0x10) {
          int v62 = 16;
        }
        else {
          int v62 = v61;
        }
        __int16 v53 = v14 + 4;
        *unint64_t v21 = (32
              * (((613566757 * (unint64_t)((1023 * v60 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v56 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
        v21[1] = (32
                * (((613566757 * (unint64_t)((1023 * v62 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v58 - 16368) >> 5)) >> 32))
                + 32) & 0xFFC0;
        __int16 v54 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v63 = 0;
        do
        {
          unsigned int v64 = &v54[v63];
          unsigned int v65 = *v53;
          unsigned int v66 = v53[1];
          if (v65 >= 0xF0) {
            unsigned int v65 = 240;
          }
          if (v65 <= 0x10) {
            unsigned int v65 = 16;
          }
          if (v66 >= 0xF0) {
            unsigned int v66 = 240;
          }
          if (v66 <= 0x10) {
            unsigned int v66 = 16;
          }
          unsigned int v67 = v53[2];
          unsigned int v68 = v53[3];
          if (v67 >= 0xF0) {
            unsigned int v67 = 240;
          }
          if (v67 <= 0x10) {
            unsigned int v67 = 16;
          }
          if (v68 >= 0xF0) {
            unsigned int v68 = 240;
          }
          if (v68 <= 0x10) {
            unsigned int v68 = 16;
          }
          _WORD *v64 = (32
                * (((613566757 * (unint64_t)((1023 * v67 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v65 - 16368) >> 5)) >> 32))
                + 32) & 0xFFC0;
          v64[1] = (32
                  * (((613566757 * (unint64_t)((1023 * v68 - 16368) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v66 - 16368) >> 5)) >> 32))
                  + 32) & 0xFFC0;
          v63 += 2;
          v53 += 4;
        }
        while (v63 < v34);
      }
      v14 += v13;
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v52;
    }
    while (v52 != v51);
  }
  if (v51 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v69 = *v14;
      unsigned int v70 = v14[1];
      if (v69 >= 0xF0) {
        unsigned int v69 = 240;
      }
      if (v69 <= 0x10) {
        unsigned int v69 = 16;
      }
      if (v70 >= 0xF0) {
        unsigned int v70 = 240;
      }
      if (v70 <= 0x10) {
        unsigned int v70 = 16;
      }
      unsigned int v71 = v14[2];
      if (v71 >= 0xF0) {
        unsigned int v71 = 240;
      }
      if (v71 <= 0x10) {
        unsigned int v71 = 16;
      }
      if (v14[3] >= 0xF0u) {
        unsigned int v72 = 240;
      }
      else {
        unsigned int v72 = v14[3];
      }
      if (v72 <= 0x10) {
        unsigned int v72 = 16;
      }
      v14 += 4;
      *unint64_t v21 = (32
            * (((613566757 * (unint64_t)((1023 * v71 - 16368) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v69 - 16368) >> 5)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32
              * (((613566757 * (unint64_t)((1023 * v72 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v70 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v73 = 0;
      do
      {
        unint64_t v74 = &v21[v73];
        unsigned int v75 = *v14;
        unsigned int v76 = v14[1];
        if (v75 >= 0xF0) {
          unsigned int v75 = 240;
        }
        if (v75 <= 0x10) {
          unsigned int v75 = 16;
        }
        if (v76 >= 0xF0) {
          unsigned int v76 = 240;
        }
        if (v76 <= 0x10) {
          unsigned int v76 = 16;
        }
        unsigned int v77 = v14[2];
        unsigned int v78 = v14[3];
        if (v77 >= 0xF0) {
          unsigned int v77 = 240;
        }
        if (v77 <= 0x10) {
          unsigned int v77 = 16;
        }
        if (v78 >= 0xF0) {
          unsigned int v78 = 240;
        }
        if (v78 <= 0x10) {
          unsigned int v78 = 16;
        }
        *unint64_t v74 = (32
              * (((613566757 * (unint64_t)((1023 * v77 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v75 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
        v74[1] = (32
                * (((613566757 * (unint64_t)((1023 * v78 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v76 - 16368) >> 5)) >> 32))
                + 32) & 0xFFC0;
        v73 += 2;
        v14 += 4;
      }
      while (v73 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int8 *)(v28 + i);
          if (v30 >= 0xEB) {
            unsigned int v30 = 235;
          }
          if (v30 <= 0x10) {
            unsigned int v30 = 16;
          }
          *(_WORD *)(v27 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v30 - 16368)) >> 32)
                                                  + ((1023 * v30
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v30 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      if (v37 >= 0xF0) {
        unsigned int v37 = 240;
      }
      if (v37 <= 0x10) {
        int v38 = 16;
      }
      else {
        int v38 = v37;
      }
      if (v14[1] >= 0xF0u) {
        unsigned int v39 = 240;
      }
      else {
        unsigned int v39 = v14[1];
      }
      if (v39 <= 0x10) {
        int v40 = 16;
      }
      else {
        int v40 = v39;
      }
      uint64_t v35 = v14 + 4;
      *unint64_t v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v38 - 16368) >> 5)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v40 - 16368) >> 5)) >> 32) << 6;
      __int16 v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        int v42 = &v36[v41];
        unsigned int v43 = *v35;
        unsigned int v44 = v35[1];
        if (v43 >= 0xF0) {
          unsigned int v43 = 240;
        }
        if (v43 <= 0x10) {
          unsigned int v43 = 16;
        }
        if (v44 >= 0xF0) {
          unsigned int v44 = 240;
        }
        if (v44 <= 0x10) {
          unsigned int v44 = 16;
        }
        *int v42 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v43 - 16368) >> 5)) >> 32) << 6;
        v42[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v44 - 16368) >> 5)) >> 32) << 6;
        v41 += 2;
        v35 += 4;
      }
      while (v41 < v34);
    }
    v14 += v13;
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v9 - v32;
    do
    {
      unsigned int v47 = v14;
      unsigned int v48 = v21;
      if (v33)
      {
        unsigned int v49 = *v14;
        if (v49 >= 0xF0) {
          unsigned int v49 = 240;
        }
        if (v49 <= 0x10) {
          int v50 = 16;
        }
        else {
          int v50 = v49;
        }
        if (v14[1] >= 0xF0u) {
          unsigned int v51 = 240;
        }
        else {
          unsigned int v51 = v14[1];
        }
        if (v51 <= 0x10) {
          int v52 = 16;
        }
        else {
          int v52 = v51;
        }
        unsigned int v47 = v14 + 4;
        *unint64_t v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v50 - 16368) >> 5)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v52 - 16368) >> 5)) >> 32) << 6;
        unsigned int v48 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v53 = 0;
        do
        {
          __int16 v54 = &v48[v53];
          unsigned int v55 = *v47;
          unsigned int v56 = v47[1];
          if (v55 >= 0xF0) {
            unsigned int v55 = 240;
          }
          if (v55 <= 0x10) {
            unsigned int v55 = 16;
          }
          if (v56 >= 0xF0) {
            unsigned int v56 = 240;
          }
          if (v56 <= 0x10) {
            unsigned int v56 = 16;
          }
          _WORD *v54 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v55 - 16368) >> 5)) >> 32) << 6;
          v54[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v56 - 16368) >> 5)) >> 32) << 6;
          v53 += 2;
          v47 += 4;
        }
        while (v53 < v34);
      }
      v14 += v13;
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v57 = *v14;
      unsigned int v58 = v14[1];
      if (v57 >= 0xF0) {
        unsigned int v57 = 240;
      }
      if (v57 <= 0x10) {
        unsigned int v57 = 16;
      }
      if (v58 >= 0xF0) {
        unsigned int v58 = 240;
      }
      if (v58 <= 0x10) {
        unsigned int v58 = 16;
      }
      v14 += 4;
      *unint64_t v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 16368) >> 5)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v58 - 16368) >> 5)) >> 32) << 6;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v59 = 0;
      do
      {
        int v60 = &v21[v59];
        unsigned int v61 = *v14;
        unsigned int v62 = v14[1];
        if (v61 >= 0xF0) {
          unsigned int v61 = 240;
        }
        if (v61 <= 0x10) {
          unsigned int v61 = 16;
        }
        if (v62 >= 0xF0) {
          unsigned int v62 = 240;
        }
        if (v62 <= 0x10) {
          unsigned int v62 = 16;
        }
        _WORD *v60 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v61 - 16368) >> 5)) >> 32) << 6;
        v60[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v62 - 16368) >> 5)) >> 32) << 6;
        v59 += 2;
        v14 += 4;
      }
      while (v59 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  if (v26 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    unint64_t v32 = v30 + v10 + v9 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      unsigned int v39 = &v16[v15 + 2];
      __int16 v40 = *v39;
      __int16 v41 = v39[1];
      unsigned int v37 = v16 + 4;
      __int16 v42 = v16[v15 + 1] + v16[1] + v16[3] + v41;
      *unint64_t v23 = (v16[v15] + *v16 + (unsigned __int16)v16[2] + v40) << 6;
      v23[1] = v42 << 6;
      int v38 = v23 + 2;
    }
    else
    {
      unsigned int v37 = v16;
      int v38 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v43 = 0;
      unsigned int v44 = v37 + 3;
      do
      {
        unint64_t v45 = &v38[v43];
        __int16 v46 = *(v44 - 3);
        __int16 v47 = *(v44 - 2);
        unsigned int v48 = &v44[v15];
        __int16 v49 = v44[v15 - 3];
        __int16 v50 = v44[v15 - 2];
        __int16 v51 = *(v44 - 1);
        __int16 v52 = *v44;
        v44 += 4;
        __int16 v53 = v50 + v47 + v52 + *v48;
        _WORD *v45 = (v49 + v46 + v51 + *(v48 - 1)) << 6;
        v45[1] = v53 << 6;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v16 += 2 * v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v26 != v35)
  {
    unint64_t v54 = 0;
    unint64_t v55 = v26 - v35;
    do
    {
      unsigned int v56 = v16;
      unsigned int v57 = v23;
      if (v9)
      {
        unsigned int v58 = &v16[v15 + 2];
        __int16 v59 = *v58;
        __int16 v60 = v58[1];
        unsigned int v56 = v16 + 4;
        __int16 v61 = v16[v15 + 1] + v16[1] + v16[3] + v60;
        *unint64_t v23 = (v16[v15] + *v16 + (unsigned __int16)v16[2] + v59) << 6;
        v23[1] = v61 << 6;
        unsigned int v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v62 = 0;
        unint64_t v63 = v56 + 3;
        do
        {
          unsigned int v64 = &v57[v62];
          __int16 v65 = *(v63 - 3);
          __int16 v66 = *(v63 - 2);
          unsigned int v67 = &v63[v15];
          __int16 v68 = v63[v15 - 3];
          __int16 v69 = v63[v15 - 2];
          __int16 v70 = *(v63 - 1);
          __int16 v71 = *v63;
          v63 += 4;
          __int16 v72 = v69 + v66 + v71 + *v67;
          _WORD *v64 = (v68 + v65 + v70 + *(v67 - 1)) << 6;
          v64[1] = v72 << 6;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v16 += 2 * v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  if (v26 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    unint64_t v32 = v30 + v10 + v9 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      unsigned int v37 = v16 + 4;
      __int16 v39 = v16[1] << 8;
      *unint64_t v23 = *v16 << 8;
      v23[1] = v39;
      int v38 = v23 + 2;
    }
    else
    {
      unsigned int v37 = v16;
      int v38 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        __int16 v41 = &v38[v40];
        __int16 v42 = v37[1] << 8;
        *__int16 v41 = *v37 << 8;
        v41[1] = v42;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v16 += 2 * v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v15;
    do
    {
      __int16 v46 = v16;
      __int16 v47 = v23;
      if (v9)
      {
        __int16 v46 = v16 + 4;
        __int16 v48 = v16[1] << 8;
        *unint64_t v23 = *v16 << 8;
        v23[1] = v48;
        __int16 v47 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          __int16 v50 = &v47[v49];
          __int16 v51 = v46[1] << 8;
          *__int16 v50 = *v46 << 8;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v16 += v45;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    BOOL v29 = v13 >= v9;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v13;
    if (v29) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    unint64_t v34 = v32 + v10 + v8 + v33;
    uint64_t v35 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB) {
            unsigned int v37 = 235;
          }
          if (v37 <= 0x10) {
            unsigned int v37 = 16;
          }
          *(_WORD *)(v35 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v37 - 16368)) >> 32)
                                                  + ((1023 * v37
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v37 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v38 = v12;
  }
  else {
    unint64_t v38 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v39 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v42 = *v16;
      unsigned int v43 = v16[1];
      unsigned int v44 = v16[v15];
      unsigned int v45 = v16[v15 + 1];
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        unsigned int v42 = 16;
      }
      if (v43 >= 0xF0) {
        unsigned int v43 = 240;
      }
      if (v43 <= 0x10) {
        unsigned int v43 = 16;
      }
      if (v44 >= 0xF0) {
        unsigned int v44 = 240;
      }
      if (v44 <= 0x10) {
        unsigned int v44 = 16;
      }
      if (v45 >= 0xF0) {
        unsigned int v45 = 240;
      }
      if (v45 <= 0x10) {
        int v46 = 16;
      }
      else {
        int v46 = v45;
      }
      unsigned int v47 = v16[2];
      unsigned int v48 = v16[3];
      unint64_t v49 = &v16[v15 + 2];
      unsigned int v50 = *v49;
      unsigned int v51 = v49[1];
      if (v47 >= 0xF0) {
        unsigned int v47 = 240;
      }
      if (v47 <= 0x10) {
        unsigned int v47 = 16;
      }
      if (v48 >= 0xF0) {
        unsigned int v48 = 240;
      }
      if (v48 <= 0x10) {
        unsigned int v48 = 16;
      }
      if (v50 >= 0xF0) {
        unsigned int v50 = 240;
      }
      if (v50 <= 0x10) {
        unsigned int v50 = 16;
      }
      if (v51 >= 0xF0) {
        unsigned int v51 = 240;
      }
      if (v51 <= 0x10) {
        int v52 = 16;
      }
      else {
        int v52 = v51;
      }
      unint64_t v40 = v16 + 4;
      *unint64_t v23 = (16
            * (((613566757 * (unint64_t)((1023 * v44 - 16368) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v42 - 16368) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v47 - 16368) >> 5)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v50 - 16368) >> 5)) >> 32))
            + 32) & 0xFFC0;
      v23[1] = (16
              * (((613566757 * (unint64_t)((1023 * v46 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v43 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v48 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v52 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
      __int16 v41 = v23 + 2;
    }
    else
    {
      unint64_t v40 = v16;
      __int16 v41 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v53 = 0;
      unint64_t v54 = v40 + 3;
      do
      {
        unsigned int v55 = *(v54 - 3);
        unsigned int v56 = &v54[v15];
        if (v55 >= 0xF0) {
          unsigned int v55 = 240;
        }
        if (v55 <= 0x10) {
          int v57 = 16;
        }
        else {
          int v57 = v55;
        }
        if (*(v54 - 2) >= 0xF0u) {
          unsigned int v58 = 240;
        }
        else {
          unsigned int v58 = *(v54 - 2);
        }
        if (v58 <= 0x10) {
          int v59 = 16;
        }
        else {
          int v59 = v58;
        }
        if (v54[v15 - 3] >= 0xF0u) {
          unsigned int v60 = 240;
        }
        else {
          unsigned int v60 = v54[v15 - 3];
        }
        if (v60 <= 0x10) {
          int v61 = 16;
        }
        else {
          int v61 = v60;
        }
        if (*(v56 - 2) >= 0xF0u) {
          unsigned int v62 = 240;
        }
        else {
          unsigned int v62 = *(v56 - 2);
        }
        unsigned int v63 = *(v54 - 1);
        unsigned int v65 = *v54;
        v54 += 4;
        unsigned int v64 = v65;
        if (v62 <= 0x10) {
          int v66 = 16;
        }
        else {
          int v66 = v62;
        }
        unsigned int v67 = *(v56 - 1);
        unsigned int v68 = *v56;
        if (v63 >= 0xF0) {
          unsigned int v69 = 240;
        }
        else {
          unsigned int v69 = v63;
        }
        if (v69 <= 0x10) {
          int v70 = 16;
        }
        else {
          int v70 = v69;
        }
        if (v64 >= 0xF0) {
          unsigned int v71 = 240;
        }
        else {
          unsigned int v71 = v64;
        }
        if (v71 <= 0x10) {
          int v72 = 16;
        }
        else {
          int v72 = v71;
        }
        unint64_t v73 = &v41[v53];
        if (v67 >= 0xF0) {
          unsigned int v67 = 240;
        }
        if (v67 <= 0x10) {
          unsigned int v67 = 16;
        }
        if (v68 >= 0xF0) {
          unsigned int v68 = 240;
        }
        unint64_t v74 = (613566757 * (unint64_t)((1023 * v57 - 16368) >> 5)) >> 32;
        unint64_t v75 = (613566757 * (unint64_t)((1023 * v59 - 16368) >> 5)) >> 32;
        unint64_t v76 = (613566757 * (unint64_t)((1023 * v61 - 16368) >> 5)) >> 32;
        unint64_t v77 = (613566757 * (unint64_t)((1023 * v66 - 16368) >> 5)) >> 32;
        uint64_t v78 = 613566757 * ((1023 * v70 - 16368) >> 5);
        if (v68 <= 0x10) {
          unsigned int v68 = 16;
        }
        *unint64_t v73 = (16 * (v76 + v74 + WORD2(v78) + ((613566757 * (unint64_t)((1023 * v67 - 16368) >> 5)) >> 32)) + 32) & 0xFFC0;
        v73[1] = (16
                * (v77
                 + v75
                 + ((613566757 * (unint64_t)((1023 * v72 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v68 - 16368) >> 5)) >> 32))
                + 32) & 0xFFC0;
        v53 += 2;
      }
      while (v53 < v39);
    }
    v16 += 2 * v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v38)
  {
    unint64_t v79 = 0;
    unint64_t v80 = v27 - v38;
    do
    {
      int v81 = v16;
      int v82 = v23;
      if (v8)
      {
        unsigned int v83 = *v16;
        unsigned int v84 = v16[1];
        unsigned int v85 = v16[v15];
        unsigned int v86 = v16[v15 + 1];
        if (v83 >= 0xF0) {
          unsigned int v83 = 240;
        }
        if (v83 <= 0x10) {
          unsigned int v83 = 16;
        }
        if (v84 >= 0xF0) {
          unsigned int v84 = 240;
        }
        if (v84 <= 0x10) {
          unsigned int v84 = 16;
        }
        if (v85 >= 0xF0) {
          unsigned int v85 = 240;
        }
        if (v85 <= 0x10) {
          unsigned int v85 = 16;
        }
        if (v86 >= 0xF0) {
          unsigned int v86 = 240;
        }
        if (v86 <= 0x10) {
          int v87 = 16;
        }
        else {
          int v87 = v86;
        }
        unsigned int v88 = v16[2];
        unsigned int v89 = v16[3];
        size_t v90 = &v16[v15 + 2];
        unsigned int v91 = *v90;
        unsigned int v92 = v90[1];
        if (v88 >= 0xF0) {
          unsigned int v88 = 240;
        }
        if (v88 <= 0x10) {
          unsigned int v88 = 16;
        }
        if (v89 >= 0xF0) {
          unsigned int v89 = 240;
        }
        if (v89 <= 0x10) {
          unsigned int v89 = 16;
        }
        if (v91 >= 0xF0) {
          unsigned int v91 = 240;
        }
        if (v91 <= 0x10) {
          unsigned int v91 = 16;
        }
        if (v92 >= 0xF0) {
          unsigned int v92 = 240;
        }
        if (v92 <= 0x10) {
          int v93 = 16;
        }
        else {
          int v93 = v92;
        }
        int v81 = v16 + 4;
        *unint64_t v23 = (16
              * (((613566757 * (unint64_t)((1023 * v85 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v83 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v88 - 16368) >> 5)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v91 - 16368) >> 5)) >> 32))
              + 32) & 0xFFC0;
        v23[1] = (16
                * (((613566757 * (unint64_t)((1023 * v87 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v84 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v89 - 16368) >> 5)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v93 - 16368) >> 5)) >> 32))
                + 32) & 0xFFC0;
        int v82 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v94 = 0;
        unint64_t v95 = v81 + 3;
        do
        {
          unsigned int v96 = *(v95 - 3);
          unsigned int v97 = &v95[v15];
          if (v96 >= 0xF0) {
            unsigned int v96 = 240;
          }
          if (v96 <= 0x10) {
            int v98 = 16;
          }
          else {
            int v98 = v96;
          }
          if (*(v95 - 2) >= 0xF0u) {
            unsigned int v99 = 240;
          }
          else {
            unsigned int v99 = *(v95 - 2);
          }
          if (v99 <= 0x10) {
            int v100 = 16;
          }
          else {
            int v100 = v99;
          }
          if (v95[v15 - 3] >= 0xF0u) {
            unsigned int v101 = 240;
          }
          else {
            unsigned int v101 = v95[v15 - 3];
          }
          if (v101 <= 0x10) {
            int v102 = 16;
          }
          else {
            int v102 = v101;
          }
          if (*(v97 - 2) >= 0xF0u) {
            unsigned int v103 = 240;
          }
          else {
            unsigned int v103 = *(v97 - 2);
          }
          unsigned int v104 = *(v95 - 1);
          unsigned int v106 = *v95;
          v95 += 4;
          unsigned int v105 = v106;
          if (v103 <= 0x10) {
            int v107 = 16;
          }
          else {
            int v107 = v103;
          }
          unsigned int v108 = *(v97 - 1);
          unsigned int v109 = *v97;
          if (v104 >= 0xF0) {
            unsigned int v110 = 240;
          }
          else {
            unsigned int v110 = v104;
          }
          if (v110 <= 0x10) {
            int v111 = 16;
          }
          else {
            int v111 = v110;
          }
          if (v105 >= 0xF0) {
            unsigned int v112 = 240;
          }
          else {
            unsigned int v112 = v105;
          }
          if (v112 <= 0x10) {
            int v113 = 16;
          }
          else {
            int v113 = v112;
          }
          CFTypeRef v114 = &v82[v94];
          if (v108 >= 0xF0) {
            unsigned int v108 = 240;
          }
          if (v108 <= 0x10) {
            unsigned int v108 = 16;
          }
          if (v109 >= 0xF0) {
            unsigned int v109 = 240;
          }
          unint64_t v115 = (613566757 * (unint64_t)((1023 * v98 - 16368) >> 5)) >> 32;
          unint64_t v116 = (613566757 * (unint64_t)((1023 * v100 - 16368) >> 5)) >> 32;
          unint64_t v117 = (613566757 * (unint64_t)((1023 * v102 - 16368) >> 5)) >> 32;
          unint64_t v118 = (613566757 * (unint64_t)((1023 * v107 - 16368) >> 5)) >> 32;
          uint64_t v119 = 613566757 * ((1023 * v111 - 16368) >> 5);
          if (v109 <= 0x10) {
            unsigned int v109 = 16;
          }
          *CFTypeRef v114 = (16
                 * (v117 + v115 + WORD2(v119) + ((613566757 * (unint64_t)((1023 * v108 - 16368) >> 5)) >> 32))
                 + 32) & 0xFFC0;
          v114[1] = (16
                   * (v118
                    + v116
                    + ((613566757 * (unint64_t)((1023 * v113 - 16368) >> 5)) >> 32)
                    + ((613566757 * (unint64_t)((1023 * v109 - 16368) >> 5)) >> 32))
                   + 32) & 0xFFC0;
          v94 += 2;
        }
        while (v94 < v39);
      }
      v16 += 2 * v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v79 += 2;
    }
    while (v79 < v80);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    BOOL v29 = v13 >= v9;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v13;
    if (v29) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    unint64_t v34 = v32 + v10 + v8 + v33;
    uint64_t v35 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB) {
            unsigned int v37 = 235;
          }
          if (v37 <= 0x10) {
            unsigned int v37 = 16;
          }
          *(_WORD *)(v35 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v37 - 16368)) >> 32)
                                                  + ((1023 * v37
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v37 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v38 = v12;
  }
  else {
    unint64_t v38 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v39 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v42 = *v16;
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        int v43 = 16;
      }
      else {
        int v43 = v42;
      }
      if (v16[1] >= 0xF0u) {
        unsigned int v44 = 240;
      }
      else {
        unsigned int v44 = v16[1];
      }
      if (v44 <= 0x10) {
        int v45 = 16;
      }
      else {
        int v45 = v44;
      }
      unint64_t v40 = v16 + 4;
      *unint64_t v23 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v43 - 16368) >> 5)) >> 32) << 6;
      v23[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 16368) >> 5)) >> 32) << 6;
      __int16 v41 = v23 + 2;
    }
    else
    {
      unint64_t v40 = v16;
      __int16 v41 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v46 = 0;
      do
      {
        unsigned int v47 = &v41[v46];
        unsigned int v48 = *v40;
        unsigned int v49 = v40[1];
        if (v48 >= 0xF0) {
          unsigned int v48 = 240;
        }
        if (v48 <= 0x10) {
          unsigned int v48 = 16;
        }
        if (v49 >= 0xF0) {
          unsigned int v49 = 240;
        }
        if (v49 <= 0x10) {
          unsigned int v49 = 16;
        }
        *unsigned int v47 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v48 - 16368) >> 5)) >> 32) << 6;
        v47[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v49 - 16368) >> 5)) >> 32) << 6;
        v46 += 2;
        v40 += 4;
      }
      while (v46 < v39);
    }
    v16 += 2 * v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v38)
  {
    unint64_t v50 = 0;
    unint64_t v51 = v27 - v38;
    uint64_t v52 = 2 * v15;
    do
    {
      unint64_t v53 = v16;
      unint64_t v54 = v23;
      if (v8)
      {
        unsigned int v55 = *v16;
        if (v55 >= 0xF0) {
          unsigned int v55 = 240;
        }
        if (v55 <= 0x10) {
          int v56 = 16;
        }
        else {
          int v56 = v55;
        }
        if (v16[1] >= 0xF0u) {
          unsigned int v57 = 240;
        }
        else {
          unsigned int v57 = v16[1];
        }
        if (v57 <= 0x10) {
          int v58 = 16;
        }
        else {
          int v58 = v57;
        }
        unint64_t v53 = v16 + 4;
        *unint64_t v23 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v56 - 16368) >> 5)) >> 32) << 6;
        v23[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v58 - 16368) >> 5)) >> 32) << 6;
        unint64_t v54 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v59 = 0;
        do
        {
          unsigned int v60 = &v54[v59];
          unsigned int v61 = *v53;
          unsigned int v62 = v53[1];
          if (v61 >= 0xF0) {
            unsigned int v61 = 240;
          }
          if (v61 <= 0x10) {
            unsigned int v61 = 16;
          }
          if (v62 >= 0xF0) {
            unsigned int v62 = 240;
          }
          if (v62 <= 0x10) {
            unsigned int v62 = 16;
          }
          _WORD *v60 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v61 - 16368) >> 5)) >> 32) << 6;
          v60[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v62 - 16368) >> 5)) >> 32) << 6;
          v59 += 2;
          v53 += 4;
        }
        while (v59 < v39);
      }
      v16 += v52;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_Copy_444v_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v15 = a6[3];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v13 + 2 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] < v15) {
    unint64_t v15 = a2[3];
  }
  if (v15)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v13 + v14;
    uint64_t v22 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          unsigned int v24 = *(unsigned __int8 *)(v22 + i);
          if (v24 >= 0xEB) {
            unsigned int v24 = 235;
          }
          if (v24 <= 0x10) {
            unsigned int v24 = 16;
          }
          *(unsigned char *)(v21 + i) = (((255 * v24
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v24 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v24 - 4080)) >> 16)) >> 7;
        }
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v15);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v25 = v8 & 1;
  if (v15 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    uint64_t v29 = v9 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v9)
    {
      unsigned int v33 = *v12;
      unsigned int v34 = v12[1];
      if (v33 >= 0xF0) {
        unsigned int v33 = 240;
      }
      if (v33 <= 0x10) {
        LOWORD(v33) = 16;
      }
      if (v34 >= 0xF0) {
        unsigned int v34 = 240;
      }
      if (v34 <= 0x10) {
        __int16 v35 = 16;
      }
      else {
        __int16 v35 = v34;
      }
      uint64_t v31 = v12 + 2;
      *uint64_t v17 = (9363 * ((unsigned __int16)(255 * v33 - 4080) >> 5)) >> 16;
      v17[1] = (9363 * ((unsigned __int16)(255 * v35 - 4080) >> 5)) >> 16;
      uint64_t v32 = v17 + 2;
    }
    else
    {
      uint64_t v31 = v12;
      uint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v36 = 0;
    }
    else
    {
      unint64_t v37 = v10 - v29;
      do
      {
        unsigned int v38 = *v31;
        unsigned int v39 = v31[1];
        if (v38 >= 0xF0) {
          unsigned int v38 = 240;
        }
        if (v38 <= 0x10) {
          LOWORD(v38) = 16;
        }
        if (v39 >= 0xF0) {
          unsigned int v39 = 240;
        }
        if (v39 <= 0x10) {
          LOWORD(v39) = 16;
        }
        v31 += 2;
        unsigned char *v32 = (9363 * ((unsigned __int16)(255 * v38 - 4080) >> 5)) >> 16;
        v32[1] = (9363 * ((unsigned __int16)(255 * v39 - 4080) >> 5)) >> 16;
        v32 += 2;
        --v37;
      }
      while (v37);
      unint64_t v36 = v10 - v29;
    }
    if (v36 + v28 < v10)
    {
      unsigned int v40 = *v31;
      unsigned int v41 = v31[1];
      if (v40 >= 0xF0) {
        unsigned int v40 = 240;
      }
      if (v40 <= 0x10) {
        LOWORD(v40) = 16;
      }
      if (v41 >= 0xF0) {
        unsigned int v41 = 240;
      }
      if (v41 <= 0x10) {
        LOWORD(v41) = 16;
      }
      unsigned char *v32 = (9363 * ((unsigned __int16)(255 * v40 - 4080) >> 5)) >> 16;
      v32[1] = (9363 * ((unsigned __int16)(255 * v41 - 4080) >> 5)) >> 16;
    }
    v12 += v11;
    v17 += v16;
  }
  if (v15 == v26)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v15 - v26;
    do
    {
      unsigned int v44 = v12;
      int v45 = v17;
      if (v27)
      {
        unsigned int v46 = *v12;
        unsigned int v47 = v12[1];
        if (v46 >= 0xF0) {
          unsigned int v46 = 240;
        }
        if (v46 <= 0x10) {
          LOWORD(v46) = 16;
        }
        if (v47 >= 0xF0) {
          unsigned int v47 = 240;
        }
        if (v47 <= 0x10) {
          __int16 v48 = 16;
        }
        else {
          __int16 v48 = v47;
        }
        unsigned int v44 = v12 + 2;
        *uint64_t v17 = (9363 * ((unsigned __int16)(255 * v46 - 4080) >> 5)) >> 16;
        v17[1] = (9363 * ((unsigned __int16)(255 * v48 - 4080) >> 5)) >> 16;
        int v45 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v49 = 0;
      }
      else
      {
        unint64_t v50 = v10 - v29;
        do
        {
          unsigned int v51 = *v44;
          unsigned int v52 = v44[1];
          if (v51 >= 0xF0) {
            unsigned int v51 = 240;
          }
          if (v51 <= 0x10) {
            LOWORD(v51) = 16;
          }
          if (v52 >= 0xF0) {
            unsigned int v52 = 240;
          }
          if (v52 <= 0x10) {
            LOWORD(v52) = 16;
          }
          v44 += 2;
          unsigned char *v45 = (9363 * ((unsigned __int16)(255 * v51 - 4080) >> 5)) >> 16;
          v45[1] = (9363 * ((unsigned __int16)(255 * v52 - 4080) >> 5)) >> 16;
          v45 += 2;
          --v50;
        }
        while (v50);
        unint64_t v49 = v10 - v29;
      }
      if (v49 + v28 < v10)
      {
        unsigned int v53 = *v44;
        unsigned int v54 = v44[1];
        if (v53 >= 0xF0) {
          unsigned int v53 = 240;
        }
        if (v53 <= 0x10) {
          LOWORD(v53) = 16;
        }
        if (v54 >= 0xF0) {
          unsigned int v54 = 240;
        }
        if (v54 <= 0x10) {
          LOWORD(v54) = 16;
        }
        unsigned char *v45 = (9363 * ((unsigned __int16)(255 * v53 - 4080) >> 5)) >> 16;
        v45[1] = (9363 * ((unsigned __int16)(255 * v54 - 4080) >> 5)) >> 16;
      }
      v12 += v11;
      v17 += v16;
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v25 < v15)
  {
    if (v27)
    {
      unsigned int v55 = *v12;
      unsigned int v56 = v12[1];
      if (v55 >= 0xF0) {
        unsigned int v55 = 240;
      }
      if (v55 <= 0x10) {
        LOWORD(v55) = 16;
      }
      if (v56 >= 0xF0) {
        unsigned int v56 = 240;
      }
      if (v56 <= 0x10) {
        LOWORD(v56) = 16;
      }
      v12 += 2;
      *uint64_t v17 = (9363 * ((unsigned __int16)(255 * v55 - 4080) >> 5)) >> 16;
      v17[1] = (9363 * ((unsigned __int16)(255 * v56 - 4080) >> 5)) >> 16;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v57 = v10 - v29;
      do
      {
        unsigned int v58 = *v12;
        unsigned int v59 = v12[1];
        if (v58 >= 0xF0) {
          unsigned int v58 = 240;
        }
        if (v58 <= 0x10) {
          LOWORD(v58) = 16;
        }
        if (v59 >= 0xF0) {
          unsigned int v59 = 240;
        }
        if (v59 <= 0x10) {
          LOWORD(v59) = 16;
        }
        v12 += 2;
        *uint64_t v17 = (9363 * ((unsigned __int16)(255 * v58 - 4080) >> 5)) >> 16;
        v17[1] = (9363 * ((unsigned __int16)(255 * v59 - 4080) >> 5)) >> 16;
        v17 += 2;
        --v57;
      }
      while (v57);
    }
    if (v30 + v28 < v10)
    {
      unsigned int v60 = *v12;
      unsigned int v61 = v12[1];
      if (v60 >= 0xF0) {
        unsigned int v60 = 240;
      }
      if (v60 <= 0x10) {
        LOWORD(v60) = 16;
      }
      if (v61 >= 0xF0) {
        unsigned int v61 = 240;
      }
      if (v61 <= 0x10) {
        LOWORD(v61) = 16;
      }
      *uint64_t v17 = (9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16;
      v17[1] = (9363 * ((unsigned __int16)(255 * v61 - 4080) >> 5)) >> 16;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_v4a8_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  size_t v9 = v8 & 1;
  size_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v11 + 2 * (v9 + v8));
  unint64_t v14 = *(void *)(a6 + 24);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = a8[1];
  uint64_t v19 = (unsigned char *)(a7[1] + v18 * v17 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v20 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v20) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= v14) {
    unint64_t v22 = v14;
  }
  else {
    unint64_t v22 = *(void *)(a2 + 24);
  }
  if (v22)
  {
    uint64_t v56 = a8[1];
    uint64_t v58 = a4[1];
    uint64_t v59 = a8[2];
    unint64_t v23 = (char *)(a7[2] + v59 * v17 + v15);
    uint64_t v60 = *a8;
    unsigned int v24 = (char *)(*a7 + *a8 * v17 + v15);
    uint64_t v25 = a4[2];
    uint64_t v26 = (char *)(a3[2] + v25 * v11 + v10);
    uint64_t v27 = *a4;
    unint64_t v28 = (char *)(*a3 + *a4 * v11 + v10);
    unint64_t v57 = v22;
    do
    {
      memcpy(v24, v28, v21);
      memcpy(v23, v26, v21);
      v28 += v27;
      v24 += v60;
      v26 += v25;
      v23 += v59;
      --v22;
    }
    while (v22);
    uint64_t v18 = v56;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    size_t v9 = v8 & 1;
    unint64_t v22 = v57;
    uint64_t v12 = v58;
  }
  unint64_t v29 = v11 & 1;
  if (v22 >= v29) {
    uint64_t v30 = v11 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v8;
  if (v21 < v9) {
    size_t v9 = 0;
  }
  size_t v32 = v21 - v9;
  if (v11)
  {
    if (v31)
    {
      unsigned int v33 = v13 + 4;
      unsigned int v35 = (v13[1] + v13[3] + 1) >> 1;
      *uint64_t v19 = (*v13 + v13[2] + 1) >> 1;
      v19[1] = v35;
      unsigned int v34 = v19 + 2;
    }
    else
    {
      unsigned int v33 = v13;
      unsigned int v34 = v19;
    }
    if (v21 != v9)
    {
      size_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        unsigned int v38 = (v33[1] + v33[3] + 1) >> 1;
        *unint64_t v37 = (*v33 + v33[2] + 1) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    v13 += v12;
    v19 += v18;
  }
  if (v22 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v22 - v30;
    do
    {
      unsigned int v41 = v13;
      unint64_t v42 = v19;
      if (v31)
      {
        unsigned int v41 = v13 + 4;
        unsigned int v43 = (v13[1] + v13[3] + 1) >> 1;
        *uint64_t v19 = (*v13 + v13[2] + 1) >> 1;
        v19[1] = v43;
        unint64_t v42 = v19 + 2;
      }
      if (v21 != v9)
      {
        size_t v44 = 0;
        do
        {
          int v45 = &v42[v44];
          unsigned int v46 = (v41[1] + v41[3] + 1) >> 1;
          unsigned char *v45 = (*v41 + v41[2] + 1) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      v13 += v12;
      v19 += v18;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v22)
  {
    if (v31)
    {
      int v47 = *v13;
      int v48 = v13[1];
      int v49 = v13[2];
      int v50 = v13[3];
      v13 += 4;
      *uint64_t v19 = (v47 + v49 + 1) >> 1;
      v19[1] = (v48 + v50 + 1) >> 1;
      v19 += 2;
    }
    if (v21 != v9)
    {
      size_t v51 = 0;
      do
      {
        unsigned int v52 = &v19[v51];
        unsigned int v53 = (v13[1] + v13[3] + 1) >> 1;
        *unsigned int v52 = (*v13 + v13[2] + 1) >> 1;
        v52[1] = v53;
        v51 += 2;
        v13 += 4;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_v4a8_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  size_t v9 = v8 & 1;
  size_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (__int16 *)(a3[1] + v12 * v11 + 2 * (v9 + v8));
  unint64_t v14 = *(void *)(a6 + 24);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = a8[1];
  uint64_t v19 = (__int16 *)(a7[1] + v18 * v17 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v20 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v20) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= v14) {
    unint64_t v22 = v14;
  }
  else {
    unint64_t v22 = *(void *)(a2 + 24);
  }
  if (v22)
  {
    uint64_t v48 = a8[1];
    uint64_t v50 = a4[1];
    uint64_t v51 = a8[2];
    unint64_t v23 = (char *)(a7[2] + v51 * v17 + v15);
    uint64_t v52 = *a8;
    unsigned int v24 = (char *)(*a7 + *a8 * v17 + v15);
    uint64_t v25 = a4[2];
    uint64_t v26 = (char *)(a3[2] + v25 * v11 + v10);
    uint64_t v27 = *a4;
    unint64_t v28 = (char *)(*a3 + *a4 * v11 + v10);
    unint64_t v49 = v22;
    do
    {
      memcpy(v24, v28, v21);
      memcpy(v23, v26, v21);
      v28 += v27;
      v24 += v52;
      v26 += v25;
      v23 += v51;
      --v22;
    }
    while (v22);
    uint64_t v18 = v48;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    size_t v9 = v8 & 1;
    unint64_t v22 = v49;
    uint64_t v12 = v50;
  }
  unint64_t v29 = v11 & 1;
  if (v22 >= v29) {
    uint64_t v30 = v11 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v8;
  if (v21 < v9) {
    size_t v9 = 0;
  }
  size_t v32 = v21 - v9;
  if (v11)
  {
    unsigned int v33 = v13;
    if (v31)
    {
      unsigned int v33 = v13 + 2;
      *uint64_t v19 = *v13;
      unsigned int v34 = v19 + 1;
    }
    else
    {
      unsigned int v34 = v19;
    }
    if (v21 != v9)
    {
      size_t v35 = 0;
      do
      {
        __int16 v36 = *v33;
        v33 += 2;
        v34[v35 / 2] = v36;
        v35 += 2;
      }
      while (v35 < v32);
    }
    uint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v19 = (__int16 *)((char *)v19 + v18);
  }
  if (v22 == v30)
  {
    unint64_t v37 = 0;
  }
  else
  {
    uint64_t v38 = 0;
    unint64_t v37 = v22 - v30;
    do
    {
      unint64_t v39 = v13;
      uint64_t v40 = v19;
      if (v31)
      {
        unint64_t v39 = v13 + 2;
        *uint64_t v19 = *v13;
        uint64_t v40 = v19 + 1;
      }
      if (v21 != v9)
      {
        size_t v41 = 0;
        do
        {
          __int16 v42 = *v39;
          v39 += 2;
          v40[v41 / 2] = v42;
          v41 += 2;
        }
        while (v41 < v32);
      }
      uint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v19 = (__int16 *)((char *)v19 + v18);
      ++v38;
    }
    while (v38 != v37);
  }
  if (v37 + v29 < v22)
  {
    if (v31)
    {
      __int16 v43 = *v13;
      v13 += 2;
      *v19++ = v43;
    }
    if (v21 != v9)
    {
      size_t v44 = 0;
      do
      {
        __int16 v45 = *v13;
        v13 += 2;
        v19[v44 / 2] = v45;
        v44 += 2;
      }
      while (v44 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  size_t v9 = v8 & 1;
  size_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v11 + 2 * (v9 + v8));
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v15 + (v14 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= (unint64_t)((*(_DWORD *)(a6 + 16)
                                                                                           + *(void *)(a6 + 32)) & 0xFFFFFFFE)
                                                                       - v14)
    size_t v18 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  else {
    size_t v18 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v19 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v19 = *(void *)(a2 + 24);
  }
  if (v19)
  {
    unint64_t v51 = v19;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    unint64_t v22 = (char *)(*a7 + *a8 * v15 + v14);
    unint64_t v23 = (char *)(*a3 + *a4 * v11 + v10);
    do
    {
      memcpy(v22, v23, v18);
      v23 += v20;
      v22 += v21;
      --v19;
    }
    while (v19);
    unint64_t v19 = v51;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    size_t v9 = v8 & 1;
  }
  unint64_t v24 = v11 & 1;
  if (v19 >= v24) {
    uint64_t v25 = v11 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v8;
  if (v18 < v9) {
    size_t v9 = 0;
  }
  size_t v27 = v18 - v9;
  if (v11)
  {
    if (v26)
    {
      unint64_t v28 = v13 + 4;
      unsigned int v30 = (v13[1] + v13[3] + 1) >> 1;
      *uint64_t v17 = (*v13 + v13[2] + 1) >> 1;
      v17[1] = v30;
      unint64_t v29 = v17 + 2;
    }
    else
    {
      unint64_t v28 = v13;
      unint64_t v29 = v17;
    }
    if (v18 != v9)
    {
      size_t v31 = 0;
      do
      {
        size_t v32 = &v29[v31];
        unsigned int v33 = (v28[1] + v28[3] + 1) >> 1;
        unsigned char *v32 = (*v28 + v28[2] + 1) >> 1;
        v32[1] = v33;
        v31 += 2;
        v28 += 4;
      }
      while (v31 < v27);
    }
    v13 += v12;
    v17 += v16;
  }
  if (v19 == v25)
  {
    unint64_t v34 = 0;
  }
  else
  {
    uint64_t v35 = 0;
    unint64_t v34 = v19 - v25;
    do
    {
      __int16 v36 = v13;
      unint64_t v37 = v17;
      if (v26)
      {
        __int16 v36 = v13 + 4;
        unsigned int v38 = (v13[1] + v13[3] + 1) >> 1;
        *uint64_t v17 = (*v13 + v13[2] + 1) >> 1;
        v17[1] = v38;
        unint64_t v37 = v17 + 2;
      }
      if (v18 != v9)
      {
        size_t v39 = 0;
        do
        {
          uint64_t v40 = &v37[v39];
          unsigned int v41 = (v36[1] + v36[3] + 1) >> 1;
          *uint64_t v40 = (*v36 + v36[2] + 1) >> 1;
          v40[1] = v41;
          v39 += 2;
          v36 += 4;
        }
        while (v39 < v27);
      }
      v13 += v12;
      v17 += v16;
      ++v35;
    }
    while (v35 != v34);
  }
  if (v34 + v24 < v19)
  {
    if (v26)
    {
      int v42 = *v13;
      int v43 = v13[1];
      int v44 = v13[2];
      int v45 = v13[3];
      v13 += 4;
      *uint64_t v17 = (v42 + v44 + 1) >> 1;
      v17[1] = (v43 + v45 + 1) >> 1;
      v17 += 2;
    }
    if (v18 != v9)
    {
      size_t v46 = 0;
      do
      {
        int v47 = &v17[v46];
        unsigned int v48 = (v13[1] + v13[3] + 1) >> 1;
        *int v47 = (*v13 + v13[2] + 1) >> 1;
        v47[1] = v48;
        v46 += 2;
        v13 += 4;
      }
      while (v46 < v27);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  size_t v9 = v8 & 1;
  size_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (__int16 *)(a3[1] + v12 * v11 + 2 * (v9 + v8));
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = a8[1];
  uint64_t v17 = (__int16 *)(a7[1] + v16 * v15 + (v14 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= (unint64_t)((*(_DWORD *)(a6 + 16)
                                                                                           + *(void *)(a6 + 32)) & 0xFFFFFFFE)
                                                                       - v14)
    size_t v18 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  else {
    size_t v18 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v19 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v19 = *(void *)(a2 + 24);
  }
  if (v19)
  {
    unint64_t v43 = v19;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    unint64_t v22 = (char *)(*a7 + *a8 * v15 + v14);
    unint64_t v23 = (char *)(*a3 + *a4 * v11 + v10);
    do
    {
      memcpy(v22, v23, v18);
      v23 += v20;
      v22 += v21;
      --v19;
    }
    while (v19);
    unint64_t v19 = v43;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    size_t v9 = v8 & 1;
  }
  unint64_t v24 = v11 & 1;
  if (v19 >= v24) {
    uint64_t v25 = v11 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v8;
  if (v18 < v9) {
    size_t v9 = 0;
  }
  size_t v27 = v18 - v9;
  if (v11)
  {
    unint64_t v28 = v13;
    if (v26)
    {
      unint64_t v28 = v13 + 2;
      *uint64_t v17 = *v13;
      unint64_t v29 = v17 + 1;
    }
    else
    {
      unint64_t v29 = v17;
    }
    if (v18 != v9)
    {
      size_t v30 = 0;
      do
      {
        __int16 v31 = *v28;
        v28 += 2;
        v29[v30 / 2] = v31;
        v30 += 2;
      }
      while (v30 < v27);
    }
    uint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v17 = (__int16 *)((char *)v17 + v16);
  }
  if (v19 == v25)
  {
    unint64_t v32 = 0;
  }
  else
  {
    uint64_t v33 = 0;
    unint64_t v32 = v19 - v25;
    do
    {
      unint64_t v34 = v13;
      uint64_t v35 = v17;
      if (v26)
      {
        unint64_t v34 = v13 + 2;
        *uint64_t v17 = *v13;
        uint64_t v35 = v17 + 1;
      }
      if (v18 != v9)
      {
        size_t v36 = 0;
        do
        {
          __int16 v37 = *v34;
          v34 += 2;
          v35[v36 / 2] = v37;
          v36 += 2;
        }
        while (v36 < v27);
      }
      uint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v17 = (__int16 *)((char *)v17 + v16);
      ++v33;
    }
    while (v33 != v32);
  }
  if (v32 + v24 < v19)
  {
    if (v26)
    {
      __int16 v38 = *v13;
      v13 += 2;
      *v17++ = v38;
    }
    if (v18 != v9)
    {
      size_t v39 = 0;
      do
      {
        __int16 v40 = *v13;
        v13 += 2;
        v17[v39 / 2] = v40;
        v39 += 2;
      }
      while (v39 < v27);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v29 = *(unsigned __int8 *)(v27 + i);
          if (v29 >= 0xEB) {
            unsigned int v29 = 235;
          }
          if (v29 <= 0x10) {
            unsigned int v29 = 16;
          }
          *(unsigned char *)(v26 + i) = (((255 * v29
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v29 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v29 - 4080)) >> 16)) >> 7;
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v9);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v8 & 1;
  }
  if (v9 >= (v12 & 1u)) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v8;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      unsigned int v35 = *v14;
      if (v35 >= 0xF0) {
        unsigned int v35 = 240;
      }
      if (v35 <= 0x10) {
        __int16 v36 = 16;
      }
      else {
        __int16 v36 = v35;
      }
      if (v14[1] >= 0xF0u) {
        unsigned int v37 = 240;
      }
      else {
        unsigned int v37 = v14[1];
      }
      if (v37 <= 0x10) {
        __int16 v38 = 16;
      }
      else {
        __int16 v38 = v37;
      }
      unsigned int v39 = v14[2];
      if (v39 >= 0xF0) {
        unsigned int v39 = 240;
      }
      if (v39 <= 0x10) {
        __int16 v40 = 16;
      }
      else {
        __int16 v40 = v39;
      }
      if (v14[3] >= 0xF0u) {
        unsigned int v41 = 240;
      }
      else {
        unsigned int v41 = v14[3];
      }
      if (v41 <= 0x10) {
        __int16 v42 = 16;
      }
      else {
        __int16 v42 = v41;
      }
      uint64_t v33 = v14 + 4;
      *uint64_t v20 = (((9363 * ((unsigned __int16)(255 * v36 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v40 - 4080) >> 5)) >> 16)
            + 1) >> 1;
      v20[1] = (((9363 * ((unsigned __int16)(255 * v38 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v42 - 4080) >> 5)) >> 16)
              + 1) >> 1;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      uint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v43 = 0;
      do
      {
        int v44 = &v34[v43];
        unsigned int v45 = *v33;
        unsigned int v46 = v33[1];
        if (v45 >= 0xF0) {
          unsigned int v45 = 240;
        }
        if (v45 <= 0x10) {
          LOWORD(v45) = 16;
        }
        if (v46 >= 0xF0) {
          unsigned int v46 = 240;
        }
        if (v46 <= 0x10) {
          LOWORD(v46) = 16;
        }
        unsigned int v47 = v33[2];
        unsigned int v48 = v33[3];
        if (v47 >= 0xF0) {
          unsigned int v47 = 240;
        }
        if (v47 <= 0x10) {
          LOWORD(v47) = 16;
        }
        if (v48 >= 0xF0) {
          unsigned int v48 = 240;
        }
        if (v48 <= 0x10) {
          LOWORD(v48) = 16;
        }
        *int v44 = (((9363 * ((unsigned __int16)(255 * v45 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v47 - 4080) >> 5)) >> 16)
              + 1) >> 1;
        v44[1] = (((9363 * ((unsigned __int16)(255 * v46 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v48 - 4080) >> 5)) >> 16)
                + 1) >> 1;
        v43 += 2;
        v33 += 4;
      }
      while (v43 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v9 == v30)
  {
    unint64_t v49 = 0;
  }
  else
  {
    uint64_t v50 = 0;
    unint64_t v49 = v9 - v30;
    do
    {
      unint64_t v51 = v14;
      uint64_t v52 = v20;
      if (v31)
      {
        unsigned int v53 = *v14;
        if (v53 >= 0xF0) {
          unsigned int v53 = 240;
        }
        if (v53 <= 0x10) {
          __int16 v54 = 16;
        }
        else {
          __int16 v54 = v53;
        }
        if (v14[1] >= 0xF0u) {
          unsigned int v55 = 240;
        }
        else {
          unsigned int v55 = v14[1];
        }
        if (v55 <= 0x10) {
          __int16 v56 = 16;
        }
        else {
          __int16 v56 = v55;
        }
        unsigned int v57 = v14[2];
        if (v57 >= 0xF0) {
          unsigned int v57 = 240;
        }
        if (v57 <= 0x10) {
          __int16 v58 = 16;
        }
        else {
          __int16 v58 = v57;
        }
        if (v14[3] >= 0xF0u) {
          unsigned int v59 = 240;
        }
        else {
          unsigned int v59 = v14[3];
        }
        if (v59 <= 0x10) {
          __int16 v60 = 16;
        }
        else {
          __int16 v60 = v59;
        }
        unint64_t v51 = v14 + 4;
        *uint64_t v20 = (((9363 * ((unsigned __int16)(255 * v54 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v58 - 4080) >> 5)) >> 16)
              + 1) >> 1;
        v20[1] = (((9363 * ((unsigned __int16)(255 * v56 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16)
                + 1) >> 1;
        uint64_t v52 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v61 = 0;
        do
        {
          unsigned int v62 = &v52[v61];
          unsigned int v63 = *v51;
          unsigned int v64 = v51[1];
          if (v63 >= 0xF0) {
            unsigned int v63 = 240;
          }
          if (v63 <= 0x10) {
            LOWORD(v63) = 16;
          }
          if (v64 >= 0xF0) {
            unsigned int v64 = 240;
          }
          if (v64 <= 0x10) {
            LOWORD(v64) = 16;
          }
          unsigned int v65 = v51[2];
          unsigned int v66 = v51[3];
          if (v65 >= 0xF0) {
            unsigned int v65 = 240;
          }
          if (v65 <= 0x10) {
            LOWORD(v65) = 16;
          }
          if (v66 >= 0xF0) {
            unsigned int v66 = 240;
          }
          if (v66 <= 0x10) {
            LOWORD(v66) = 16;
          }
          *unsigned int v62 = (((9363 * ((unsigned __int16)(255 * v63 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v65 - 4080) >> 5)) >> 16)
                + 1) >> 1;
          v62[1] = (((9363 * ((unsigned __int16)(255 * v64 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v66 - 4080) >> 5)) >> 16)
                  + 1) >> 1;
          v61 += 2;
          v51 += 4;
        }
        while (v61 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v50;
    }
    while (v50 != v49);
  }
  if (v49 + (v12 & 1) < v9)
  {
    if (v31)
    {
      unsigned int v67 = *v14;
      unsigned int v68 = v14[1];
      if (v67 >= 0xF0) {
        unsigned int v67 = 240;
      }
      if (v67 <= 0x10) {
        LOWORD(v67) = 16;
      }
      if (v68 >= 0xF0) {
        unsigned int v68 = 240;
      }
      if (v68 <= 0x10) {
        LOWORD(v68) = 16;
      }
      unsigned int v69 = v14[2];
      if (v69 >= 0xF0) {
        unsigned int v69 = 240;
      }
      if (v69 <= 0x10) {
        LOWORD(v69) = 16;
      }
      if (v14[3] >= 0xF0u) {
        unsigned int v70 = 240;
      }
      else {
        unsigned int v70 = v14[3];
      }
      if (v70 <= 0x10) {
        LOWORD(v70) = 16;
      }
      v14 += 4;
      *uint64_t v20 = (((9363 * ((unsigned __int16)(255 * v67 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v69 - 4080) >> 5)) >> 16)
            + 1) >> 1;
      v20[1] = (((9363 * ((unsigned __int16)(255 * v68 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v70 - 4080) >> 5)) >> 16)
              + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v71 = 0;
      do
      {
        int v72 = &v20[v71];
        unsigned int v73 = *v14;
        unsigned int v74 = v14[1];
        if (v73 >= 0xF0) {
          unsigned int v73 = 240;
        }
        if (v73 <= 0x10) {
          LOWORD(v73) = 16;
        }
        if (v74 >= 0xF0) {
          unsigned int v74 = 240;
        }
        if (v74 <= 0x10) {
          LOWORD(v74) = 16;
        }
        unsigned int v75 = v14[2];
        unsigned int v76 = v14[3];
        if (v75 >= 0xF0) {
          unsigned int v75 = 240;
        }
        if (v75 <= 0x10) {
          LOWORD(v75) = 16;
        }
        if (v76 >= 0xF0) {
          unsigned int v76 = 240;
        }
        if (v76 <= 0x10) {
          LOWORD(v76) = 16;
        }
        *int v72 = (((9363 * ((unsigned __int16)(255 * v73 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v75 - 4080) >> 5)) >> 16)
              + 1) >> 1;
        v72[1] = (((9363 * ((unsigned __int16)(255 * v74 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v76 - 4080) >> 5)) >> 16)
                + 1) >> 1;
        v71 += 2;
        v14 += 4;
      }
      while (v71 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v29 = *(unsigned __int8 *)(v27 + i);
          if (v29 >= 0xEB) {
            unsigned int v29 = 235;
          }
          if (v29 <= 0x10) {
            unsigned int v29 = 16;
          }
          *(unsigned char *)(v26 + i) = (((255 * v29
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v29 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v29 - 4080)) >> 16)) >> 7;
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  if (v8 >= (v12 & 1u)) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      unsigned int v35 = *v14;
      if (v35 >= 0xF0) {
        unsigned int v35 = 240;
      }
      if (v35 <= 0x10) {
        __int16 v36 = 16;
      }
      else {
        __int16 v36 = v35;
      }
      if (v14[1] >= 0xF0u) {
        unsigned int v37 = 240;
      }
      else {
        unsigned int v37 = v14[1];
      }
      if (v37 <= 0x10) {
        __int16 v38 = 16;
      }
      else {
        __int16 v38 = v37;
      }
      uint64_t v33 = v14 + 4;
      *uint64_t v20 = (9363 * ((unsigned __int16)(255 * v36 - 4080) >> 5)) >> 16;
      v20[1] = (9363 * ((unsigned __int16)(255 * v38 - 4080) >> 5)) >> 16;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      uint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        __int16 v40 = &v34[v39];
        unsigned int v41 = *v33;
        unsigned int v42 = v33[1];
        if (v41 >= 0xF0) {
          unsigned int v41 = 240;
        }
        if (v41 <= 0x10) {
          LOWORD(v41) = 16;
        }
        if (v42 >= 0xF0) {
          unsigned int v42 = 240;
        }
        if (v42 <= 0x10) {
          LOWORD(v42) = 16;
        }
        *__int16 v40 = (9363 * ((unsigned __int16)(255 * v41 - 4080) >> 5)) >> 16;
        v40[1] = (9363 * ((unsigned __int16)(255 * v42 - 4080) >> 5)) >> 16;
        v39 += 2;
        v33 += 4;
      }
      while (v39 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v30)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v8 - v30;
    do
    {
      unsigned int v45 = v14;
      unsigned int v46 = v20;
      if (v31)
      {
        unsigned int v47 = *v14;
        if (v47 >= 0xF0) {
          unsigned int v47 = 240;
        }
        if (v47 <= 0x10) {
          __int16 v48 = 16;
        }
        else {
          __int16 v48 = v47;
        }
        if (v14[1] >= 0xF0u) {
          unsigned int v49 = 240;
        }
        else {
          unsigned int v49 = v14[1];
        }
        if (v49 <= 0x10) {
          __int16 v50 = 16;
        }
        else {
          __int16 v50 = v49;
        }
        unsigned int v45 = v14 + 4;
        *uint64_t v20 = (9363 * ((unsigned __int16)(255 * v48 - 4080) >> 5)) >> 16;
        v20[1] = (9363 * ((unsigned __int16)(255 * v50 - 4080) >> 5)) >> 16;
        unsigned int v46 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v51 = 0;
        do
        {
          uint64_t v52 = &v46[v51];
          unsigned int v53 = *v45;
          unsigned int v54 = v45[1];
          if (v53 >= 0xF0) {
            unsigned int v53 = 240;
          }
          if (v53 <= 0x10) {
            LOWORD(v53) = 16;
          }
          if (v54 >= 0xF0) {
            unsigned int v54 = 240;
          }
          if (v54 <= 0x10) {
            LOWORD(v54) = 16;
          }
          *uint64_t v52 = (9363 * ((unsigned __int16)(255 * v53 - 4080) >> 5)) >> 16;
          v52[1] = (9363 * ((unsigned __int16)(255 * v54 - 4080) >> 5)) >> 16;
          v51 += 2;
          v45 += 4;
        }
        while (v51 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + (v12 & 1) < v8)
  {
    if (v31)
    {
      unsigned int v55 = *v14;
      unsigned int v56 = v14[1];
      if (v55 >= 0xF0) {
        unsigned int v55 = 240;
      }
      if (v55 <= 0x10) {
        LOWORD(v55) = 16;
      }
      if (v56 >= 0xF0) {
        unsigned int v56 = 240;
      }
      if (v56 <= 0x10) {
        LOWORD(v56) = 16;
      }
      v14 += 4;
      *uint64_t v20 = (9363 * ((unsigned __int16)(255 * v55 - 4080) >> 5)) >> 16;
      v20[1] = (9363 * ((unsigned __int16)(255 * v56 - 4080) >> 5)) >> 16;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v57 = 0;
      do
      {
        __int16 v58 = &v20[v57];
        unsigned int v59 = *v14;
        unsigned int v60 = v14[1];
        if (v59 >= 0xF0) {
          unsigned int v59 = 240;
        }
        if (v59 <= 0x10) {
          LOWORD(v59) = 16;
        }
        if (v60 >= 0xF0) {
          unsigned int v60 = 240;
        }
        if (v60 <= 0x10) {
          LOWORD(v60) = 16;
        }
        *__int16 v58 = (9363 * ((unsigned __int16)(255 * v59 - 4080) >> 5)) >> 16;
        v58[1] = (9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16;
        v57 += 2;
        v14 += 4;
      }
      while (v57 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_v4a8_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  size_t v10 = v8 & 1;
  size_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v23 = v18 - v17;
  }
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  else {
    unint64_t v24 = v14 - v13;
  }
  if (v24)
  {
    uint64_t v25 = *a4;
    uint64_t v75 = *a8;
    uint64_t v76 = *a4;
    if (v13 >= v9) {
      uint64_t v25 = 0;
    }
    uint64_t v26 = (char *)(*a3 + *a4 * v13 + v11 + v25);
    uint64_t v73 = a8[1];
    uint64_t v74 = a8[2];
    uint64_t v27 = (char *)(a7[2] + v74 * v19 + v17);
    unint64_t v28 = (char *)(*a7 + *a8 * v19 + v17);
    uint64_t v29 = a4[2];
    uint64_t v30 = (char *)(a3[2] + v29 * v13 + v11);
    uint64_t v31 = -(uint64_t)v24;
    do
    {
      memcpy(v28, v26, v23);
      memcpy(v27, v30, v23);
      v26 += v76;
      v28 += v75;
      v30 += v29;
      v27 += v74;
    }
    while (!__CFADD__(v31++, 1));
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    size_t v10 = v8 & 1;
    uint64_t v21 = v73;
  }
  if (v24 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v23 < v10) {
    size_t v10 = 0;
  }
  size_t v34 = v23 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v37 = &v16[v15 + 2];
      int v38 = *v37;
      int v39 = v37[1];
      unsigned int v35 = v16 + 4;
      unsigned int v40 = (v16[1] + v16[3] + v16[v15 + 1] + v39 + 2) >> 2;
      unsigned char *v22 = (*v16 + v16[2] + v16[v15] + v38 + 2) >> 2;
      v22[1] = v40;
      __int16 v36 = v22 + 2;
    }
    else
    {
      unsigned int v35 = v16;
      __int16 v36 = v22;
    }
    if (v23 != v10)
    {
      size_t v41 = 0;
      unsigned int v42 = v35 + 3;
      do
      {
        unint64_t v43 = &v36[v41];
        int v44 = *(v42 - 3);
        int v45 = *(v42 - 2);
        unsigned int v46 = &v42[v15];
        int v47 = v42[v15 - 3];
        int v48 = v42[v15 - 2];
        int v49 = *(v42 - 1);
        int v50 = *v42;
        v42 += 4;
        unsigned int v51 = (v45 + v50 + v48 + *v46 + 2) >> 2;
        *unint64_t v43 = (v44 + v49 + v47 + *(v46 - 1) + 2) >> 2;
        v43[1] = v51;
        v41 += 2;
      }
      while (v41 < v34);
    }
    v16 += 2 * v15;
    v22 += v21;
  }
  if (v24 != v33)
  {
    unint64_t v52 = 0;
    unint64_t v53 = v24 - v33;
    do
    {
      unsigned int v54 = v16;
      unsigned int v55 = v22;
      if (v8)
      {
        unsigned int v56 = &v16[v15 + 2];
        int v57 = *v56;
        int v58 = v56[1];
        unsigned int v54 = v16 + 4;
        unsigned int v59 = (v16[1] + v16[3] + v16[v15 + 1] + v58 + 2) >> 2;
        unsigned char *v22 = (*v16 + v16[2] + v16[v15] + v57 + 2) >> 2;
        v22[1] = v59;
        unsigned int v55 = v22 + 2;
      }
      if (v23 != v10)
      {
        size_t v60 = 0;
        unint64_t v61 = v54 + 3;
        do
        {
          unsigned int v62 = &v55[v60];
          int v63 = *(v61 - 3);
          int v64 = *(v61 - 2);
          unsigned int v65 = &v61[v15];
          int v66 = v61[v15 - 3];
          int v67 = v61[v15 - 2];
          int v68 = *(v61 - 1);
          int v69 = *v61;
          v61 += 4;
          unsigned int v70 = (v64 + v69 + v67 + *v65 + 2) >> 2;
          *unsigned int v62 = (v63 + v68 + v66 + *(v65 - 1) + 2) >> 2;
          v62[1] = v70;
          v60 += 2;
        }
        while (v60 < v34);
      }
      v16 += 2 * v15;
      v22 += v21;
      v52 += 2;
    }
    while (v52 < v53);
  }
  return 0;
}

uint64_t vt_CopyDec_v4a8_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  size_t v10 = v8 & 1;
  size_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (__int16 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v23 = v18 - v17;
  }
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  unint64_t v24 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v49 = a4[1];
    uint64_t v50 = a8[1];
    uint64_t v25 = *a4;
    uint64_t v51 = a8[2];
    uint64_t v52 = *a4;
    if (v13 >= v9) {
      uint64_t v25 = 0;
    }
    uint64_t v26 = (char *)(*a3 + *a4 * v13 + v11 + v25);
    uint64_t v27 = (char *)(a7[2] + a8[2] * v19 + v17);
    uint64_t v28 = *a8;
    uint64_t v29 = (char *)(*a7 + *a8 * v19 + v17);
    uint64_t v30 = a4[2];
    uint64_t v31 = (char *)(a3[2] + v30 * v13 + v11);
    unint64_t v48 = v24;
    uint64_t v32 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v26, v23);
      memcpy(v27, v31, v23);
      v26 += v52;
      v29 += v28;
      v31 += v30;
      v27 += v51;
    }
    while (!__CFADD__(v32++, 1));
    unint64_t v24 = v48;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    size_t v10 = v8 & 1;
    uint64_t v15 = v49;
    uint64_t v21 = v50;
  }
  if (v24 >= v12) {
    unint64_t v34 = v12;
  }
  else {
    unint64_t v34 = 0;
  }
  if (v23 < v10) {
    size_t v10 = 0;
  }
  size_t v35 = v23 - v10;
  if (v12)
  {
    __int16 v36 = v16;
    if (v8)
    {
      __int16 v36 = v16 + 2;
      __int16 *v22 = *v16;
      unsigned int v37 = v22 + 1;
    }
    else
    {
      unsigned int v37 = v22;
    }
    if (v23 != v10)
    {
      size_t v38 = 0;
      do
      {
        __int16 v39 = *v36;
        v36 += 2;
        v37[v38 / 2] = v39;
        v38 += 2;
      }
      while (v38 < v35);
    }
    v16 += v15;
    unint64_t v22 = (__int16 *)((char *)v22 + v21);
  }
  if (v24 != v34)
  {
    unint64_t v40 = 0;
    unint64_t v41 = v24 - v34;
    do
    {
      unsigned int v42 = v16;
      unint64_t v43 = v22;
      if (v8)
      {
        unsigned int v42 = v16 + 2;
        __int16 *v22 = *v16;
        unint64_t v43 = v22 + 1;
      }
      if (v23 != v10)
      {
        size_t v44 = 0;
        do
        {
          __int16 v45 = *v42;
          v42 += 2;
          v43[v44 / 2] = v45;
          v44 += 2;
        }
        while (v44 < v35);
      }
      v16 += v15;
      unint64_t v22 = (__int16 *)((char *)v22 + v21);
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  size_t v10 = v8 & 1;
  size_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v23 = v18 - v17;
  }
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  else {
    unint64_t v24 = v14 - v13;
  }
  if (v24)
  {
    unint64_t v72 = v24;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    if (v13 >= v9) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = (char *)(*a3 + *a4 * v13 + v11 + v27);
    uint64_t v29 = (char *)(*a7 + v26 * v19 + v17);
    uint64_t v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v23);
      v28 += v25;
      v29 += v26;
    }
    while (!__CFADD__(v30++, 1));
    unint64_t v24 = v72;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    size_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v23 < v10) {
    size_t v10 = 0;
  }
  size_t v33 = v23 - v10;
  if (v12)
  {
    if (v8)
    {
      __int16 v36 = &v16[v15 + 2];
      int v37 = *v36;
      int v38 = v36[1];
      unint64_t v34 = v16 + 4;
      unsigned int v39 = (v16[1] + v16[3] + v16[v15 + 1] + v38 + 2) >> 2;
      unsigned char *v22 = (*v16 + v16[2] + v16[v15] + v37 + 2) >> 2;
      v22[1] = v39;
      size_t v35 = v22 + 2;
    }
    else
    {
      unint64_t v34 = v16;
      size_t v35 = v22;
    }
    if (v23 != v10)
    {
      size_t v40 = 0;
      unint64_t v41 = v34 + 3;
      do
      {
        unsigned int v42 = &v35[v40];
        int v43 = *(v41 - 3);
        int v44 = *(v41 - 2);
        __int16 v45 = &v41[v15];
        int v46 = v41[v15 - 3];
        int v47 = v41[v15 - 2];
        int v48 = *(v41 - 1);
        int v49 = *v41;
        v41 += 4;
        unsigned int v50 = (v44 + v49 + v47 + *v45 + 2) >> 2;
        *unsigned int v42 = (v43 + v48 + v46 + *(v45 - 1) + 2) >> 2;
        v42[1] = v50;
        v40 += 2;
      }
      while (v40 < v33);
    }
    v16 += 2 * v15;
    v22 += v21;
  }
  if (v24 != v32)
  {
    unint64_t v51 = 0;
    unint64_t v52 = v24 - v32;
    do
    {
      unint64_t v53 = v16;
      unsigned int v54 = v22;
      if (v8)
      {
        unsigned int v55 = &v16[v15 + 2];
        int v56 = *v55;
        int v57 = v55[1];
        unint64_t v53 = v16 + 4;
        unsigned int v58 = (v16[1] + v16[3] + v16[v15 + 1] + v57 + 2) >> 2;
        unsigned char *v22 = (*v16 + v16[2] + v16[v15] + v56 + 2) >> 2;
        v22[1] = v58;
        unsigned int v54 = v22 + 2;
      }
      if (v23 != v10)
      {
        size_t v59 = 0;
        size_t v60 = v53 + 3;
        do
        {
          unint64_t v61 = &v54[v59];
          int v62 = *(v60 - 3);
          int v63 = *(v60 - 2);
          int v64 = &v60[v15];
          int v65 = v60[v15 - 3];
          int v66 = v60[v15 - 2];
          int v67 = *(v60 - 1);
          int v68 = *v60;
          v60 += 4;
          unsigned int v69 = (v63 + v68 + v66 + *v64 + 2) >> 2;
          unsigned char *v61 = (v62 + v67 + v65 + *(v64 - 1) + 2) >> 2;
          v61[1] = v69;
          v59 += 2;
        }
        while (v59 < v33);
      }
      v16 += 2 * v15;
      v22 += v21;
      v51 += 2;
    }
    while (v51 < v52);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = *(void *)(a2 + 40);
  size_t v11 = v9 & 1;
  size_t v12 = v11 + v9;
  unint64_t v13 = v10 & 1;
  unint64_t v14 = v13 + v10;
  uint64_t v15 = (*(_DWORD *)(a2 + 24) + v10) & 0xFFFFFFFE;
  uint64_t v16 = a4[1];
  uint64_t v17 = (__int16 *)(a3[1] + v16 * (v13 + v10) + 2 * (v11 + v9));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v18 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v11 + v9) >= (unint64_t)((*(_DWORD *)(a6 + 16)
                                                                                            + *(void *)(a6 + 32)) & 0xFFFFFFFE)
                                                                        - v18)
    size_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v18;
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - v12;
  }
  unint64_t v24 = v15 - v14;
  if (v15 - v14 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    unint64_t v45 = v24;
    uint64_t v46 = a4[1];
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    if (v14 >= v10) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = (char *)(*a3 + *a4 * v14 + v12 + v27);
    uint64_t v29 = (char *)(*a7 + v26 * v19 + v18);
    uint64_t v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v23);
      v28 += v25;
      v29 += v26;
    }
    while (!__CFADD__(v30++, 1));
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v13 = *(void *)(a2 + 40) & 1;
    size_t v11 = v9 & 1;
    unint64_t v24 = v45;
    uint64_t v16 = v46;
  }
  if (v24 >= v13) {
    unint64_t v32 = v13;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v23 < v11) {
    size_t v11 = 0;
  }
  size_t v33 = v23 - v11;
  if (v13)
  {
    unint64_t v34 = v17;
    if (v9)
    {
      unint64_t v34 = v17 + 2;
      __int16 *v22 = *v17;
      size_t v35 = v22 + 1;
    }
    else
    {
      size_t v35 = v22;
    }
    if (v23 != v11)
    {
      size_t v36 = 0;
      do
      {
        __int16 v37 = *v34;
        v34 += 2;
        v35[v36 / 2] = v37;
        v36 += 2;
      }
      while (v36 < v33);
    }
    v17 += v16;
    unint64_t v22 = (__int16 *)((char *)v22 + v21);
  }
  if (v24 != v32)
  {
    unint64_t v38 = 0;
    unint64_t v39 = v24 - v32;
    do
    {
      size_t v40 = v17;
      unint64_t v41 = v22;
      if (v9)
      {
        size_t v40 = v17 + 2;
        __int16 *v22 = *v17;
        unint64_t v41 = v22 + 1;
      }
      if (v23 != v11)
      {
        size_t v42 = 0;
        do
        {
          __int16 v43 = *v40;
          v40 += 2;
          v41[v42 / 2] = v43;
          v42 += 2;
        }
        while (v42 < v33);
      }
      v17 += v16;
      unint64_t v22 = (__int16 *)((char *)v22 + v21);
      v38 += 2;
    }
    while (v38 < v39);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 2 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v25 = v19 - v18;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    BOOL v27 = v13 >= v9;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v13;
    if (v27) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v11 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v35 = *(unsigned __int8 *)(v32 + i);
          if (v35 >= 0xEB) {
            unsigned int v35 = 235;
          }
          if (v35 <= 0x10) {
            unsigned int v35 = 16;
          }
          *(unsigned char *)(v33 + i) = (((255 * v35
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v35 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v35 - 4080)) >> 16)) >> 7;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v40 = *v15;
      unsigned int v41 = v15[1];
      unsigned int v42 = v15[v14];
      unsigned int v43 = v15[v14 + 1];
      if (v40 >= 0xF0) {
        unsigned int v40 = 240;
      }
      if (v40 <= 0x10) {
        LOWORD(v40) = 16;
      }
      if (v41 >= 0xF0) {
        unsigned int v41 = 240;
      }
      if (v41 <= 0x10) {
        LOWORD(v41) = 16;
      }
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        LOWORD(v42) = 16;
      }
      if (v43 >= 0xF0) {
        unsigned int v43 = 240;
      }
      unsigned int v44 = v15[2];
      if (v43 <= 0x10) {
        __int16 v45 = 16;
      }
      else {
        __int16 v45 = v43;
      }
      unsigned int v46 = v15[3];
      int v47 = &v15[v14 + 2];
      unsigned int v48 = *v47;
      unsigned int v49 = v47[1];
      if (v44 >= 0xF0) {
        unsigned int v44 = 240;
      }
      if (v44 <= 0x10) {
        LOWORD(v44) = 16;
      }
      if (v46 >= 0xF0) {
        unsigned int v46 = 240;
      }
      if (v46 <= 0x10) {
        __int16 v50 = 16;
      }
      else {
        __int16 v50 = v46;
      }
      if (v48 >= 0xF0) {
        unsigned int v51 = 240;
      }
      else {
        unsigned int v51 = v48;
      }
      if (v51 <= 0x10) {
        __int16 v52 = 16;
      }
      else {
        __int16 v52 = v51;
      }
      if (v49 >= 0xF0) {
        unsigned int v53 = 240;
      }
      else {
        unsigned int v53 = v49;
      }
      if (v53 <= 0x10) {
        __int16 v54 = 16;
      }
      else {
        __int16 v54 = v53;
      }
      unint64_t v38 = v15 + 4;
      *uint64_t v21 = (((9363 * ((unsigned __int16)(255 * v40 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v42 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v44 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v52 - 4080) >> 5)) >> 16)
            + 2) >> 2;
      v21[1] = (((9363 * ((unsigned __int16)(255 * v41 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v45 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v50 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v54 - 4080) >> 5)) >> 16)
              + 2) >> 2;
      unint64_t v39 = v21 + 2;
    }
    else
    {
      unint64_t v38 = v15;
      unint64_t v39 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v55 = 0;
      int v56 = v38 + 3;
      do
      {
        unsigned int v57 = *(v56 - 3);
        unsigned int v58 = &v56[v14];
        if (v57 >= 0xF0) {
          unsigned int v57 = 240;
        }
        if (v57 <= 0x10) {
          __int16 v59 = 16;
        }
        else {
          __int16 v59 = v57;
        }
        if (*(v56 - 2) >= 0xF0u) {
          unsigned int v60 = 240;
        }
        else {
          unsigned int v60 = *(v56 - 2);
        }
        if (v60 <= 0x10) {
          __int16 v61 = 16;
        }
        else {
          __int16 v61 = v60;
        }
        if (v56[v14 - 3] >= 0xF0u) {
          unsigned int v62 = 240;
        }
        else {
          unsigned int v62 = v56[v14 - 3];
        }
        if (v62 <= 0x10) {
          __int16 v63 = 16;
        }
        else {
          __int16 v63 = v62;
        }
        if (v56[v14 - 2] >= 0xF0u) {
          unsigned int v64 = 240;
        }
        else {
          unsigned int v64 = v56[v14 - 2];
        }
        if (v64 <= 0x10) {
          __int16 v65 = 16;
        }
        else {
          __int16 v65 = v64;
        }
        unsigned int v66 = *(v56 - 1);
        unsigned int v68 = *v56;
        v56 += 4;
        unsigned int v67 = v68;
        unsigned int v69 = *(v58 - 1);
        if (v66 >= 0xF0) {
          unsigned int v66 = 240;
        }
        unsigned int v70 = *v58;
        if (v66 <= 0x10) {
          __int16 v71 = 16;
        }
        else {
          __int16 v71 = v66;
        }
        if (v67 >= 0xF0) {
          unsigned int v67 = 240;
        }
        unint64_t v72 = &v39[v55];
        if (v67 <= 0x10) {
          LOWORD(v67) = 16;
        }
        if (v69 >= 0xF0) {
          unsigned int v69 = 240;
        }
        unsigned int v73 = (9363 * ((unsigned __int16)(255 * v59 - 4080) >> 5)) >> 16;
        if (v69 <= 0x10) {
          LOWORD(v69) = 16;
        }
        unsigned int v74 = (9363 * ((unsigned __int16)(255 * v61 - 4080) >> 5)) >> 16;
        unsigned int v75 = 9363 * ((unsigned __int16)(255 * v63 - 4080) >> 5);
        if (v70 >= 0xF0) {
          unsigned int v70 = 240;
        }
        unsigned int v76 = 9363 * ((unsigned __int16)(255 * v65 - 4080) >> 5);
        unsigned int v77 = 9363 * ((unsigned __int16)(255 * v71 - 4080) >> 5);
        if (v70 <= 0x10) {
          LOWORD(v70) = 16;
        }
        *unint64_t v72 = (v73
              + HIWORD(v75)
              + HIWORD(v77)
              + ((9363 * ((unsigned __int16)(255 * v69 - 4080) >> 5)) >> 16)
              + 2) >> 2;
        v72[1] = (v74
                + HIWORD(v76)
                + ((9363 * ((unsigned __int16)(255 * v67 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v70 - 4080) >> 5)) >> 16)
                + 2) >> 2;
        v55 += 2;
      }
      while (v55 < v37);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v36)
  {
    unint64_t v78 = 0;
    unint64_t v79 = v24 - v36;
    do
    {
      unint64_t v80 = v15;
      int v81 = v21;
      if (v8)
      {
        unsigned int v82 = *v15;
        unsigned int v83 = v15[1];
        unsigned int v84 = v15[v14];
        unsigned int v85 = v15[v14 + 1];
        if (v82 >= 0xF0) {
          unsigned int v82 = 240;
        }
        if (v82 <= 0x10) {
          LOWORD(v82) = 16;
        }
        if (v83 >= 0xF0) {
          unsigned int v83 = 240;
        }
        if (v83 <= 0x10) {
          LOWORD(v83) = 16;
        }
        if (v84 >= 0xF0) {
          unsigned int v84 = 240;
        }
        if (v84 <= 0x10) {
          LOWORD(v84) = 16;
        }
        if (v85 >= 0xF0) {
          unsigned int v85 = 240;
        }
        if (v85 <= 0x10) {
          __int16 v86 = 16;
        }
        else {
          __int16 v86 = v85;
        }
        unsigned int v87 = v15[2];
        unsigned int v88 = v15[3];
        unsigned int v89 = &v15[v14 + 2];
        unsigned int v90 = *v89;
        unsigned int v91 = v89[1];
        if (v87 >= 0xF0) {
          unsigned int v87 = 240;
        }
        if (v87 <= 0x10) {
          LOWORD(v87) = 16;
        }
        if (v88 >= 0xF0) {
          unsigned int v88 = 240;
        }
        if (v88 <= 0x10) {
          LOWORD(v88) = 16;
        }
        if (v90 >= 0xF0) {
          unsigned int v90 = 240;
        }
        if (v90 <= 0x10) {
          LOWORD(v90) = 16;
        }
        if (v91 >= 0xF0) {
          unsigned int v91 = 240;
        }
        if (v91 <= 0x10) {
          __int16 v92 = 16;
        }
        else {
          __int16 v92 = v91;
        }
        unint64_t v80 = v15 + 4;
        *uint64_t v21 = (((9363 * ((unsigned __int16)(255 * v82 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v84 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v87 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v90 - 4080) >> 5)) >> 16)
              + 2) >> 2;
        v21[1] = (((9363 * ((unsigned __int16)(255 * v83 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v86 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v88 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v92 - 4080) >> 5)) >> 16)
                + 2) >> 2;
        int v81 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v93 = 0;
        unint64_t v94 = v80 + 3;
        do
        {
          unsigned int v95 = *(v94 - 3);
          unsigned int v96 = &v94[v14];
          if (v95 >= 0xF0) {
            unsigned int v95 = 240;
          }
          if (v95 <= 0x10) {
            __int16 v97 = 16;
          }
          else {
            __int16 v97 = v95;
          }
          if (*(v94 - 2) >= 0xF0u) {
            unsigned int v98 = 240;
          }
          else {
            unsigned int v98 = *(v94 - 2);
          }
          if (v98 <= 0x10) {
            __int16 v99 = 16;
          }
          else {
            __int16 v99 = v98;
          }
          if (v94[v14 - 3] >= 0xF0u) {
            unsigned int v100 = 240;
          }
          else {
            unsigned int v100 = v94[v14 - 3];
          }
          if (v100 <= 0x10) {
            __int16 v101 = 16;
          }
          else {
            __int16 v101 = v100;
          }
          if (v94[v14 - 2] >= 0xF0u) {
            unsigned int v102 = 240;
          }
          else {
            unsigned int v102 = v94[v14 - 2];
          }
          if (v102 <= 0x10) {
            __int16 v103 = 16;
          }
          else {
            __int16 v103 = v102;
          }
          unsigned int v104 = *(v94 - 1);
          unsigned int v106 = *v94;
          v94 += 4;
          unsigned int v105 = v106;
          unsigned int v107 = *(v96 - 1);
          if (v104 >= 0xF0) {
            unsigned int v104 = 240;
          }
          unsigned int v108 = *v96;
          if (v104 <= 0x10) {
            __int16 v109 = 16;
          }
          else {
            __int16 v109 = v104;
          }
          if (v105 >= 0xF0) {
            unsigned int v105 = 240;
          }
          unsigned int v110 = &v81[v93];
          if (v105 <= 0x10) {
            LOWORD(v105) = 16;
          }
          if (v107 >= 0xF0) {
            unsigned int v107 = 240;
          }
          unsigned int v111 = (9363 * ((unsigned __int16)(255 * v97 - 4080) >> 5)) >> 16;
          if (v107 <= 0x10) {
            LOWORD(v107) = 16;
          }
          unsigned int v112 = (9363 * ((unsigned __int16)(255 * v99 - 4080) >> 5)) >> 16;
          unsigned int v113 = 9363 * ((unsigned __int16)(255 * v101 - 4080) >> 5);
          if (v108 >= 0xF0) {
            unsigned int v108 = 240;
          }
          unsigned int v114 = 9363 * ((unsigned __int16)(255 * v103 - 4080) >> 5);
          unsigned int v115 = 9363 * ((unsigned __int16)(255 * v109 - 4080) >> 5);
          if (v108 <= 0x10) {
            LOWORD(v108) = 16;
          }
          *unsigned int v110 = (v111
                 + HIWORD(v113)
                 + HIWORD(v115)
                 + ((9363 * ((unsigned __int16)(255 * v107 - 4080) >> 5)) >> 16)
                 + 2) >> 2;
          v110[1] = (v112
                   + HIWORD(v114)
                   + ((9363 * ((unsigned __int16)(255 * v105 - 4080) >> 5)) >> 16)
                   + ((9363 * ((unsigned __int16)(255 * v108 - 4080) >> 5)) >> 16)
                   + 2) >> 2;
          v93 += 2;
        }
        while (v93 < v37);
      }
      v15 += 2 * v14;
      v21 += v20;
      v78 += 2;
    }
    while (v78 < v79);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 2 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v25 = v19 - v18;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    BOOL v27 = v13 >= v9;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v13;
    if (v27) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v11 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v35 = *(unsigned __int8 *)(v32 + i);
          if (v35 >= 0xEB) {
            unsigned int v35 = 235;
          }
          if (v35 <= 0x10) {
            unsigned int v35 = 16;
          }
          *(unsigned char *)(v33 + i) = (((255 * v35
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v35 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v35 - 4080)) >> 16)) >> 7;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v40 = *v15;
      if (v40 >= 0xF0) {
        unsigned int v40 = 240;
      }
      if (v40 <= 0x10) {
        __int16 v41 = 16;
      }
      else {
        __int16 v41 = v40;
      }
      if (v15[1] >= 0xF0u) {
        unsigned int v42 = 240;
      }
      else {
        unsigned int v42 = v15[1];
      }
      if (v42 <= 0x10) {
        __int16 v43 = 16;
      }
      else {
        __int16 v43 = v42;
      }
      unint64_t v38 = v15 + 4;
      *uint64_t v21 = (9363 * ((unsigned __int16)(255 * v41 - 4080) >> 5)) >> 16;
      v21[1] = (9363 * ((unsigned __int16)(255 * v43 - 4080) >> 5)) >> 16;
      unint64_t v39 = v21 + 2;
    }
    else
    {
      unint64_t v38 = v15;
      unint64_t v39 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v44 = 0;
      do
      {
        __int16 v45 = &v39[v44];
        unsigned int v46 = *v38;
        unsigned int v47 = v38[1];
        if (v46 >= 0xF0) {
          unsigned int v46 = 240;
        }
        if (v46 <= 0x10) {
          LOWORD(v46) = 16;
        }
        if (v47 >= 0xF0) {
          unsigned int v47 = 240;
        }
        if (v47 <= 0x10) {
          LOWORD(v47) = 16;
        }
        unsigned char *v45 = (9363 * ((unsigned __int16)(255 * v46 - 4080) >> 5)) >> 16;
        v45[1] = (9363 * ((unsigned __int16)(255 * v47 - 4080) >> 5)) >> 16;
        v44 += 2;
        v38 += 4;
      }
      while (v44 < v37);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v36)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v24 - v36;
    uint64_t v50 = 2 * v14;
    do
    {
      unsigned int v51 = v15;
      __int16 v52 = v21;
      if (v8)
      {
        unsigned int v53 = *v15;
        if (v53 >= 0xF0) {
          unsigned int v53 = 240;
        }
        if (v53 <= 0x10) {
          __int16 v54 = 16;
        }
        else {
          __int16 v54 = v53;
        }
        if (v15[1] >= 0xF0u) {
          unsigned int v55 = 240;
        }
        else {
          unsigned int v55 = v15[1];
        }
        if (v55 <= 0x10) {
          __int16 v56 = 16;
        }
        else {
          __int16 v56 = v55;
        }
        unsigned int v51 = v15 + 4;
        *uint64_t v21 = (9363 * ((unsigned __int16)(255 * v54 - 4080) >> 5)) >> 16;
        v21[1] = (9363 * ((unsigned __int16)(255 * v56 - 4080) >> 5)) >> 16;
        __int16 v52 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v57 = 0;
        do
        {
          unsigned int v58 = &v52[v57];
          unsigned int v59 = *v51;
          unsigned int v60 = v51[1];
          if (v59 >= 0xF0) {
            unsigned int v59 = 240;
          }
          if (v59 <= 0x10) {
            LOWORD(v59) = 16;
          }
          if (v60 >= 0xF0) {
            unsigned int v60 = 240;
          }
          if (v60 <= 0x10) {
            LOWORD(v60) = 16;
          }
          *unsigned int v58 = (9363 * ((unsigned __int16)(255 * v59 - 4080) >> 5)) >> 16;
          v58[1] = (9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16;
          v57 += 2;
          v51 += 4;
        }
        while (v57 < v37);
      }
      v15 += v50;
      v21 += v20;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  size_t v10 = v8 & 1;
  size_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  unint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v25 = v18 - v17;
  }
  else {
    size_t v25 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  else {
    unint64_t v26 = v14 - v13;
  }
  if (v26)
  {
    unint64_t v74 = v26;
    uint64_t v75 = a8[2];
    uint64_t v76 = a8[1];
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    if (v13 >= v9) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = (char *)(*a3 + *a4 * v13 + v11 + v29);
    uint64_t v31 = (char *)(*a7 + v28 * v19 + v17);
    uint64_t v32 = -(uint64_t)v26;
    do
    {
      memcpy(v31, v30, v25);
      v30 += v27;
      v31 += v28;
    }
    while (!__CFADD__(v32++, 1));
    unint64_t v26 = v74;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    size_t v10 = v8 & 1;
    uint64_t v22 = v75;
    uint64_t v21 = v76;
  }
  if (v26 >= v12) {
    unint64_t v34 = v12;
  }
  else {
    unint64_t v34 = 0;
  }
  if (v25 < v10) {
    size_t v10 = 0;
  }
  size_t v35 = v25 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v39 = &v16[v15 + 2];
      int v40 = *v39;
      int v41 = v39[1];
      unint64_t v36 = v16 + 4;
      unsigned int v42 = (v16[1] + v16[3] + v16[v15 + 1] + v41 + 2) >> 2;
      *unint64_t v23 = (*v16 + v16[2] + v16[v15] + v40 + 2) >> 2;
      unint64_t v37 = v23 + 1;
      *unint64_t v24 = v42;
      unint64_t v38 = v24 + 1;
    }
    else
    {
      unint64_t v36 = v16;
      unint64_t v37 = v23;
      unint64_t v38 = v24;
    }
    if (v25 != v10)
    {
      size_t v43 = 0;
      unint64_t v44 = v36 + 3;
      do
      {
        int v45 = *(v44 - 3);
        int v46 = *(v44 - 2);
        unsigned int v47 = &v44[v15];
        int v48 = v44[v15 - 3];
        int v49 = v44[v15 - 2];
        int v50 = *(v44 - 1);
        int v51 = *v44;
        v44 += 4;
        unsigned int v52 = v46 + v51 + v49 + *v47 + 2;
        *v37++ = (v45 + v50 + v48 + *(v47 - 1) + 2) >> 2;
        *v38++ = v52 >> 2;
        v43 += 2;
      }
      while (v43 < v35);
    }
    v16 += 2 * v15;
    v23 += v21;
    v24 += v22;
  }
  if (v26 != v34)
  {
    unint64_t v53 = 0;
    unint64_t v54 = v26 - v34;
    do
    {
      unsigned int v55 = v16;
      __int16 v56 = v23;
      unint64_t v57 = v24;
      if (v8)
      {
        unsigned int v58 = &v16[v15 + 2];
        int v59 = *v58;
        int v60 = v58[1];
        unsigned int v55 = v16 + 4;
        unsigned int v61 = (v16[1] + v16[3] + v16[v15 + 1] + v60 + 2) >> 2;
        *unint64_t v23 = (*v16 + v16[2] + v16[v15] + v59 + 2) >> 2;
        __int16 v56 = v23 + 1;
        *unint64_t v24 = v61;
        unint64_t v57 = v24 + 1;
      }
      if (v25 != v10)
      {
        size_t v62 = 0;
        __int16 v63 = v55 + 3;
        do
        {
          int v64 = *(v63 - 3);
          int v65 = *(v63 - 2);
          unsigned int v66 = &v63[v15];
          int v67 = v63[v15 - 3];
          int v68 = v63[v15 - 2];
          int v69 = *(v63 - 1);
          int v70 = *v63;
          v63 += 4;
          unsigned int v71 = v65 + v70 + v68 + *v66 + 2;
          *v56++ = (v64 + v69 + v67 + *(v66 - 1) + 2) >> 2;
          *v57++ = v71 >> 2;
          v62 += 2;
        }
        while (v62 < v35);
      }
      v16 += 2 * v15;
      v23 += v21;
      v24 += v22;
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  size_t v10 = v8 & 1;
  size_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned char *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  unint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v25 = v18 - v17;
  }
  else {
    size_t v25 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  else {
    unint64_t v26 = v14 - v13;
  }
  if (v26)
  {
    unint64_t v52 = v26;
    uint64_t v53 = a4[1];
    uint64_t v54 = a8[1];
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    if (v13 >= v9) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = (char *)(*a3 + *a4 * v13 + v11 + v29);
    uint64_t v31 = (char *)(*a7 + v28 * v19 + v17);
    uint64_t v32 = -(uint64_t)v26;
    do
    {
      memcpy(v31, v30, v25);
      v30 += v27;
      v31 += v28;
    }
    while (!__CFADD__(v32++, 1));
    unint64_t v26 = v52;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    size_t v10 = v8 & 1;
    uint64_t v15 = v53;
    uint64_t v21 = v54;
  }
  if (v26 >= v12) {
    unint64_t v34 = v12;
  }
  else {
    unint64_t v34 = 0;
  }
  if (v25 < v10) {
    size_t v10 = 0;
  }
  size_t v35 = v25 - v10;
  if (v12)
  {
    if (v8)
    {
      char v39 = v16[1];
      unint64_t v36 = v16 + 4;
      *unint64_t v23 = *v16;
      unint64_t v37 = v23 + 1;
      *unint64_t v24 = v39;
      unint64_t v38 = v24 + 1;
    }
    else
    {
      unint64_t v36 = v16;
      unint64_t v37 = v23;
      unint64_t v38 = v24;
    }
    if (v25 != v10)
    {
      size_t v40 = 0;
      do
      {
        char v41 = v36[1];
        *v37++ = *v36;
        *v38++ = v41;
        v40 += 2;
        v36 += 4;
      }
      while (v40 < v35);
    }
    v16 += 2 * v15;
    v23 += v21;
    v24 += v22;
  }
  if (v26 != v34)
  {
    unint64_t v42 = 0;
    unint64_t v43 = v26 - v34;
    do
    {
      unint64_t v44 = v16;
      int v45 = v23;
      int v46 = v24;
      if (v8)
      {
        char v47 = v16[1];
        unint64_t v44 = v16 + 4;
        *unint64_t v23 = *v16;
        int v45 = v23 + 1;
        *unint64_t v24 = v47;
        int v46 = v24 + 1;
      }
      if (v25 != v10)
      {
        size_t v48 = 0;
        do
        {
          char v49 = v44[1];
          *v45++ = *v44;
          *v46++ = v49;
          v48 += 2;
          v44 += 4;
        }
        while (v48 < v35);
      }
      v16 += 2 * v15;
      v23 += v21;
      v24 += v22;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 2 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    BOOL v29 = v13 >= v9;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v13;
    if (v29) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    uint64_t v34 = v32 + v11 + v33;
    unint64_t v35 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB) {
            unsigned int v37 = 235;
          }
          if (v37 <= 0x10) {
            unsigned int v37 = 16;
          }
          *(unsigned char *)(v35 + i) = (((255 * v37
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 7;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v38 = v12;
  }
  else {
    unint64_t v38 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v39 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v43 = *v15;
      unsigned int v44 = v15[1];
      unsigned int v45 = v15[v14];
      unsigned int v46 = v15[v14 + 1];
      if (v43 >= 0xF0) {
        unsigned int v43 = 240;
      }
      if (v43 <= 0x10) {
        LOWORD(v43) = 16;
      }
      if (v44 >= 0xF0) {
        unsigned int v44 = 240;
      }
      if (v44 <= 0x10) {
        LOWORD(v44) = 16;
      }
      if (v45 >= 0xF0) {
        unsigned int v45 = 240;
      }
      if (v45 <= 0x10) {
        __int16 v47 = 16;
      }
      else {
        __int16 v47 = v45;
      }
      if (v46 >= 0xF0) {
        unsigned int v46 = 240;
      }
      if (v46 <= 0x10) {
        LOWORD(v46) = 16;
      }
      unsigned int v48 = v15[2];
      unsigned int v49 = v15[3];
      int v50 = &v15[v14 + 2];
      unsigned int v51 = *v50;
      unsigned int v52 = v50[1];
      if (v48 >= 0xF0) {
        unsigned int v48 = 240;
      }
      if (v48 <= 0x10) {
        LOWORD(v48) = 16;
      }
      if (v49 >= 0xF0) {
        unsigned int v49 = 240;
      }
      if (v49 <= 0x10) {
        LOWORD(v49) = 16;
      }
      if (v51 >= 0xF0) {
        unsigned int v51 = 240;
      }
      if (v51 <= 0x10) {
        LOWORD(v51) = 16;
      }
      if (v52 >= 0xF0) {
        unsigned int v52 = 240;
      }
      if (v52 <= 0x10) {
        __int16 v53 = 16;
      }
      else {
        __int16 v53 = v52;
      }
      size_t v40 = v15 + 4;
      unsigned char *v22 = (((9363 * ((unsigned __int16)(255 * v43 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v47 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v48 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v51 - 4080) >> 5)) >> 16)
            + 2) >> 2;
      char v41 = v22 + 1;
      *unint64_t v23 = (((9363 * ((unsigned __int16)(255 * v44 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v46 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v49 - 4080) >> 5)) >> 16)
            + ((9363 * ((unsigned __int16)(255 * v53 - 4080) >> 5)) >> 16)
            + 2) >> 2;
      unint64_t v42 = v23 + 1;
    }
    else
    {
      size_t v40 = v15;
      char v41 = v22;
      unint64_t v42 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v54 = 0;
      unsigned int v55 = v40 + 3;
      do
      {
        unsigned int v56 = *(v55 - 3);
        unsigned int v57 = *(v55 - 2);
        unsigned int v58 = &v55[v14];
        unsigned int v59 = v55[v14 - 3];
        if (v56 >= 0xF0) {
          unsigned int v56 = 240;
        }
        if (v56 <= 0x10) {
          LOWORD(v56) = 16;
        }
        unsigned int v60 = *(v58 - 2);
        if (v57 >= 0xF0) {
          unsigned int v57 = 240;
        }
        if (v57 <= 0x10) {
          LOWORD(v57) = 16;
        }
        if (v59 >= 0xF0) {
          unsigned int v59 = 240;
        }
        if (v59 <= 0x10) {
          LOWORD(v59) = 16;
        }
        if (v60 >= 0xF0) {
          unsigned int v60 = 240;
        }
        unsigned int v61 = *(v55 - 1);
        if (v60 <= 0x10) {
          LOWORD(v60) = 16;
        }
        unsigned int v63 = *v55;
        v55 += 4;
        unsigned int v62 = v63;
        unsigned int v64 = *(v58 - 1);
        if (v61 >= 0xF0) {
          unsigned int v61 = 240;
        }
        unsigned int v65 = *v58;
        if (v61 <= 0x10) {
          LOWORD(v61) = 16;
        }
        if (v62 >= 0xF0) {
          unsigned int v62 = 240;
        }
        if (v62 <= 0x10) {
          LOWORD(v62) = 16;
        }
        if (v64 >= 0xF0) {
          unsigned int v64 = 240;
        }
        unsigned __int16 v66 = 255 * v56 - 4080;
        if (v64 <= 0x10) {
          LOWORD(v64) = 16;
        }
        unsigned int v67 = (9363 * (v66 >> 5)) >> 16;
        unsigned int v68 = (9363 * ((unsigned __int16)(255 * v57 - 4080) >> 5)) >> 16;
        if (v65 >= 0xF0) {
          unsigned int v65 = 240;
        }
        unsigned int v69 = 9363 * ((unsigned __int16)(255 * v59 - 4080) >> 5);
        unsigned int v70 = 9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5);
        if (v65 <= 0x10) {
          LOWORD(v65) = 16;
        }
        *v41++ = (v67
                + HIWORD(v69)
                + ((9363 * ((unsigned __int16)(255 * v61 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v64 - 4080) >> 5)) >> 16)
                + 2) >> 2;
        *v42++ = (v68
                + HIWORD(v70)
                + ((9363 * ((unsigned __int16)(255 * v62 - 4080) >> 5)) >> 16)
                + ((9363 * ((unsigned __int16)(255 * v65 - 4080) >> 5)) >> 16)
                + 2) >> 2;
        v54 += 2;
      }
      while (v54 < v39);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v38)
  {
    unint64_t v71 = 0;
    unint64_t v72 = v26 - v38;
    do
    {
      unsigned int v73 = v15;
      unint64_t v74 = v22;
      uint64_t v75 = v23;
      if (v8)
      {
        unsigned int v76 = *v15;
        unsigned int v77 = v15[1];
        unsigned int v78 = v15[v14];
        unsigned int v79 = v15[v14 + 1];
        if (v76 >= 0xF0) {
          unsigned int v76 = 240;
        }
        if (v76 <= 0x10) {
          LOWORD(v76) = 16;
        }
        if (v77 >= 0xF0) {
          unsigned int v77 = 240;
        }
        if (v77 <= 0x10) {
          LOWORD(v77) = 16;
        }
        if (v78 >= 0xF0) {
          unsigned int v78 = 240;
        }
        if (v78 <= 0x10) {
          __int16 v80 = 16;
        }
        else {
          __int16 v80 = v78;
        }
        if (v79 >= 0xF0) {
          unsigned int v79 = 240;
        }
        if (v79 <= 0x10) {
          LOWORD(v79) = 16;
        }
        unsigned int v81 = v15[2];
        unsigned int v82 = v15[3];
        unsigned int v83 = &v15[v14 + 2];
        unsigned int v84 = *v83;
        unsigned int v85 = v83[1];
        if (v81 >= 0xF0) {
          unsigned int v81 = 240;
        }
        if (v81 <= 0x10) {
          LOWORD(v81) = 16;
        }
        if (v82 >= 0xF0) {
          unsigned int v82 = 240;
        }
        if (v82 <= 0x10) {
          LOWORD(v82) = 16;
        }
        if (v84 >= 0xF0) {
          unsigned int v84 = 240;
        }
        if (v84 <= 0x10) {
          LOWORD(v84) = 16;
        }
        if (v85 >= 0xF0) {
          unsigned int v85 = 240;
        }
        if (v85 <= 0x10) {
          __int16 v86 = 16;
        }
        else {
          __int16 v86 = v85;
        }
        unsigned int v73 = v15 + 4;
        unsigned char *v22 = (((9363 * ((unsigned __int16)(255 * v76 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v80 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v81 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v84 - 4080) >> 5)) >> 16)
              + 2) >> 2;
        unint64_t v74 = v22 + 1;
        *unint64_t v23 = (((9363 * ((unsigned __int16)(255 * v77 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v79 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v82 - 4080) >> 5)) >> 16)
              + ((9363 * ((unsigned __int16)(255 * v86 - 4080) >> 5)) >> 16)
              + 2) >> 2;
        uint64_t v75 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v87 = 0;
        unsigned int v88 = v73 + 3;
        do
        {
          unsigned int v89 = *(v88 - 3);
          unsigned int v90 = *(v88 - 2);
          unsigned int v91 = &v88[v14];
          unsigned int v92 = v88[v14 - 3];
          if (v89 >= 0xF0) {
            unsigned int v89 = 240;
          }
          if (v89 <= 0x10) {
            LOWORD(v89) = 16;
          }
          unsigned int v93 = *(v91 - 2);
          if (v90 >= 0xF0) {
            unsigned int v90 = 240;
          }
          if (v90 <= 0x10) {
            LOWORD(v90) = 16;
          }
          if (v92 >= 0xF0) {
            unsigned int v92 = 240;
          }
          if (v92 <= 0x10) {
            LOWORD(v92) = 16;
          }
          if (v93 >= 0xF0) {
            unsigned int v93 = 240;
          }
          unsigned int v94 = *(v88 - 1);
          if (v93 <= 0x10) {
            LOWORD(v93) = 16;
          }
          unsigned int v96 = *v88;
          v88 += 4;
          unsigned int v95 = v96;
          unsigned int v97 = *(v91 - 1);
          if (v94 >= 0xF0) {
            unsigned int v94 = 240;
          }
          unsigned int v98 = *v91;
          if (v94 <= 0x10) {
            LOWORD(v94) = 16;
          }
          if (v95 >= 0xF0) {
            unsigned int v95 = 240;
          }
          if (v95 <= 0x10) {
            LOWORD(v95) = 16;
          }
          if (v97 >= 0xF0) {
            unsigned int v97 = 240;
          }
          unsigned __int16 v99 = 255 * v89 - 4080;
          if (v97 <= 0x10) {
            LOWORD(v97) = 16;
          }
          unsigned int v100 = (9363 * (v99 >> 5)) >> 16;
          unsigned int v101 = (9363 * ((unsigned __int16)(255 * v90 - 4080) >> 5)) >> 16;
          if (v98 >= 0xF0) {
            unsigned int v98 = 240;
          }
          unsigned int v102 = 9363 * ((unsigned __int16)(255 * v92 - 4080) >> 5);
          unsigned int v103 = 9363 * ((unsigned __int16)(255 * v93 - 4080) >> 5);
          if (v98 <= 0x10) {
            LOWORD(v98) = 16;
          }
          *v74++ = (v100
                  + HIWORD(v102)
                  + ((9363 * ((unsigned __int16)(255 * v94 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v97 - 4080) >> 5)) >> 16)
                  + 2) >> 2;
          *v75++ = (v101
                  + HIWORD(v103)
                  + ((9363 * ((unsigned __int16)(255 * v95 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v98 - 4080) >> 5)) >> 16)
                  + 2) >> 2;
          v87 += 2;
        }
        while (v87 < v39);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v71 += 2;
    }
    while (v71 < v72);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 2 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    BOOL v29 = v13 >= v9;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v13;
    if (v29) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    uint64_t v34 = v32 + v11 + v33;
    unint64_t v35 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB) {
            unsigned int v37 = 235;
          }
          if (v37 <= 0x10) {
            unsigned int v37 = 16;
          }
          *(unsigned char *)(v35 + i) = (((255 * v37
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 7;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v38 = v12;
  }
  else {
    unint64_t v38 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v39 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v43 = *v15;
      if (v43 >= 0xF0) {
        unsigned int v43 = 240;
      }
      if (v43 <= 0x10) {
        __int16 v44 = 16;
      }
      else {
        __int16 v44 = v43;
      }
      if (v15[1] >= 0xF0u) {
        unsigned int v45 = 240;
      }
      else {
        unsigned int v45 = v15[1];
      }
      if (v45 <= 0x10) {
        __int16 v46 = 16;
      }
      else {
        __int16 v46 = v45;
      }
      size_t v40 = v15 + 4;
      unsigned int v47 = (9363 * ((unsigned __int16)(255 * v46 - 4080) >> 5)) >> 16;
      unsigned char *v22 = (9363 * ((unsigned __int16)(255 * v44 - 4080) >> 5)) >> 16;
      char v41 = v22 + 1;
      *unint64_t v23 = v47;
      unint64_t v42 = v23 + 1;
    }
    else
    {
      size_t v40 = v15;
      char v41 = v22;
      unint64_t v42 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v48 = 0;
      do
      {
        unsigned int v49 = *v40;
        unsigned int v50 = v40[1];
        if (v49 >= 0xF0) {
          unsigned int v49 = 240;
        }
        if (v49 <= 0x10) {
          LOWORD(v49) = 16;
        }
        if (v50 >= 0xF0) {
          unsigned int v50 = 240;
        }
        if (v50 <= 0x10) {
          LOWORD(v50) = 16;
        }
        *v41++ = (9363 * ((unsigned __int16)(255 * v49 - 4080) >> 5)) >> 16;
        *v42++ = (9363 * ((unsigned __int16)(255 * v50 - 4080) >> 5)) >> 16;
        v48 += 2;
        v40 += 4;
      }
      while (v48 < v39);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v38)
  {
    unint64_t v51 = 0;
    unint64_t v52 = v26 - v38;
    uint64_t v53 = 2 * v14;
    do
    {
      unint64_t v54 = v15;
      unsigned int v55 = v22;
      unsigned int v56 = v23;
      if (v8)
      {
        unsigned int v57 = *v15;
        if (v57 >= 0xF0) {
          unsigned int v57 = 240;
        }
        if (v57 <= 0x10) {
          __int16 v58 = 16;
        }
        else {
          __int16 v58 = v57;
        }
        if (v15[1] >= 0xF0u) {
          unsigned int v59 = 240;
        }
        else {
          unsigned int v59 = v15[1];
        }
        if (v59 <= 0x10) {
          __int16 v60 = 16;
        }
        else {
          __int16 v60 = v59;
        }
        unint64_t v54 = v15 + 4;
        unsigned int v61 = (9363 * ((unsigned __int16)(255 * v60 - 4080) >> 5)) >> 16;
        unsigned char *v22 = (9363 * ((unsigned __int16)(255 * v58 - 4080) >> 5)) >> 16;
        unsigned int v55 = v22 + 1;
        *unint64_t v23 = v61;
        unsigned int v56 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v62 = 0;
        do
        {
          unsigned int v63 = *v54;
          unsigned int v64 = v54[1];
          if (v63 >= 0xF0) {
            unsigned int v63 = 240;
          }
          if (v63 <= 0x10) {
            LOWORD(v63) = 16;
          }
          if (v64 >= 0xF0) {
            unsigned int v64 = 240;
          }
          if (v64 <= 0x10) {
            LOWORD(v64) = 16;
          }
          *v55++ = (9363 * ((unsigned __int16)(255 * v63 - 4080) >> 5)) >> 16;
          *v56++ = (9363 * ((unsigned __int16)(255 * v64 - 4080) >> 5)) >> 16;
          v62 += 2;
          v54 += 4;
        }
        while (v62 < v39);
      }
      v15 += v53;
      v22 += v20;
      v23 += v21;
      v51 += 2;
    }
    while (v51 < v52);
  }
  return 0;
}

uint64_t vt_Copy_444v_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = *a8;
    uint64_t v14 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v16 = a2[4];
    uint64_t v15 = a2[5];
    uint64_t v17 = *a3 + *a4 * v15;
    uint64_t v18 = a3[1] + v12 * v15 + 2 * v16;
    uint64_t v19 = v17 + v16;
    do
    {
      if (v8)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          unint64_t v23 = (_WORD *)(v14 + v21);
          __int16 v24 = *(unsigned __int8 *)(v18 + v20) << 8;
          __int16 v25 = *(unsigned __int8 *)(v18 + v20 + 1) << 8;
          __int16 v26 = *(unsigned __int8 *)(v19 + i) << 8;
          *unint64_t v23 = -1;
          v23[1] = v26;
          v23[2] = v24;
          v23[3] = v25;
          v21 += 8;
          v20 += 2;
        }
      }
      v19 += v11;
      v14 += v13;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_444v_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = *a8;
    uint64_t v14 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v16 = a2[4];
    uint64_t v15 = a2[5];
    uint64_t v17 = *a3 + *a4 * v15;
    uint64_t v18 = a3[1] + v12 * v15 + 2 * v16;
    uint64_t v19 = v17 + v16;
    do
    {
      if (v8)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v23 = v14 + v21;
          __int16 v24 = *(_WORD *)(v18 + v20);
          char v25 = *(unsigned char *)(v19 + i);
          *(unsigned char *)uint64_t v23 = -1;
          *(unsigned char *)(v23 + 1) = v25;
          *(_WORD *)(v23 + 2) = v24;
          v21 += 4;
          v20 += 2;
        }
      }
      v19 += v11;
      v14 += v13;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_444v_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v15 + 2 * v14;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + v19 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = *(unsigned __int8 *)(v24 + i) << 8;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v26 = v8 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      uint64_t v32 = v13 + 2;
      __int16 v34 = v13[1] << 8;
      *uint64_t v17 = *v13 << 8;
      v17[1] = v34;
      uint64_t v33 = v17 + 2;
    }
    else
    {
      uint64_t v32 = v13;
      uint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        __int16 v37 = *v32;
        __int16 v38 = v32[1];
        v32 += 2;
        *uint64_t v33 = v37 << 8;
        v33[1] = v38 << 8;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      __int16 v39 = *v32 << 8;
      __int16 v40 = v32[1] << 8;
      *uint64_t v33 = v39;
      v33[1] = v40;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v11 - v27;
    do
    {
      unsigned int v43 = v13;
      __int16 v44 = v17;
      if (v28)
      {
        unsigned int v43 = v13 + 2;
        __int16 v45 = v13[1] << 8;
        *uint64_t v17 = *v13 << 8;
        v17[1] = v45;
        __int16 v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          __int16 v48 = *v43;
          __int16 v49 = v43[1];
          v43 += 2;
          *__int16 v44 = v48 << 8;
          v44[1] = v49 << 8;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        __int16 v50 = *v43 << 8;
        __int16 v51 = v43[1] << 8;
        *__int16 v44 = v50;
        v44[1] = v51;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if (v28)
    {
      __int16 v52 = *v13;
      __int16 v53 = v13[1];
      v13 += 2;
      *uint64_t v17 = v52 << 8;
      v17[1] = v53 << 8;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        __int16 v55 = *v13;
        __int16 v56 = v13[1];
        v13 += 2;
        *uint64_t v17 = v55 << 8;
        v17[1] = v56 << 8;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      __int16 v57 = *v13 << 8;
      __int16 v58 = v13[1] << 8;
      *uint64_t v17 = v57;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unint64_t v36 = v14 + 4;
      __int16 v38 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *uint64_t v21 = (v14[2] + (unsigned __int16)*v14) << 7;
      v21[1] = v38;
      __int16 v37 = v21 + 2;
    }
    else
    {
      unint64_t v36 = v14;
      __int16 v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        __int16 v40 = &v37[v39];
        __int16 v41 = (v36[3] + (unsigned __int16)v36[1]) << 7;
        *__int16 v40 = (v36[2] + (unsigned __int16)*v36) << 7;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      __int16 v44 = v14;
      __int16 v45 = v21;
      if (v34)
      {
        __int16 v44 = v14 + 4;
        __int16 v46 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *uint64_t v21 = (v14[2] + (unsigned __int16)*v14) << 7;
        v21[1] = v46;
        __int16 v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          __int16 v48 = &v45[v47];
          __int16 v49 = (v44[3] + (unsigned __int16)v44[1]) << 7;
          _WORD *v48 = (v44[2] + (unsigned __int16)*v44) << 7;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      __int16 v50 = *v14;
      __int16 v51 = v14[1];
      __int16 v52 = v14[2];
      __int16 v53 = v14[3];
      v14 += 4;
      *uint64_t v21 = (v52 + v50) << 7;
      v21[1] = (v53 + v51) << 7;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        __int16 v55 = &v21[v54];
        __int16 v56 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        _WORD *v55 = (v14[2] + (unsigned __int16)*v14) << 7;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unint64_t v36 = v14 + 4;
      __int16 v38 = v14[1] << 8;
      *uint64_t v21 = *v14 << 8;
      v21[1] = v38;
      __int16 v37 = v21 + 2;
    }
    else
    {
      unint64_t v36 = v14;
      __int16 v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        __int16 v40 = &v37[v39];
        __int16 v41 = v36[1] << 8;
        *__int16 v40 = *v36 << 8;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      __int16 v44 = v14;
      __int16 v45 = v21;
      if (v34)
      {
        __int16 v44 = v14 + 4;
        __int16 v46 = v14[1] << 8;
        *uint64_t v21 = *v14 << 8;
        v21[1] = v46;
        __int16 v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          __int16 v48 = &v45[v47];
          __int16 v49 = v44[1] << 8;
          _WORD *v48 = *v44 << 8;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      __int16 v50 = *v14;
      __int16 v51 = v14[1];
      v14 += 4;
      *uint64_t v21 = v50 << 8;
      v21[1] = v51 << 8;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        __int16 v53 = &v21[v52];
        __int16 v54 = v14[1] << 8;
        *__int16 v53 = *v14 << 8;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v15 + 2 * v14;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + v19 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = *(unsigned __int8 *)(v24 + i) << 8;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v26 = v8 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      unint64_t v32 = v13 + 2;
      __int16 v34 = v13[1] << 8;
      *uint64_t v17 = *v13 << 8;
      v17[1] = v34;
      uint64_t v33 = v17 + 2;
    }
    else
    {
      unint64_t v32 = v13;
      uint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        __int16 v37 = *v32;
        __int16 v38 = v32[1];
        v32 += 2;
        *uint64_t v33 = v37 << 8;
        v33[1] = v38 << 8;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      __int16 v39 = *v32 << 8;
      __int16 v40 = v32[1] << 8;
      *uint64_t v33 = v39;
      v33[1] = v40;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v11 - v27;
    do
    {
      uint64_t v43 = v13;
      __int16 v44 = v17;
      if (v28)
      {
        uint64_t v43 = v13 + 2;
        __int16 v45 = v13[1] << 8;
        *uint64_t v17 = *v13 << 8;
        v17[1] = v45;
        __int16 v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          __int16 v48 = *v43;
          __int16 v49 = v43[1];
          v43 += 2;
          *__int16 v44 = v48 << 8;
          v44[1] = v49 << 8;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        __int16 v50 = *v43 << 8;
        __int16 v51 = v43[1] << 8;
        *__int16 v44 = v50;
        v44[1] = v51;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if (v28)
    {
      __int16 v52 = *v13;
      __int16 v53 = v13[1];
      v13 += 2;
      *uint64_t v17 = v52 << 8;
      v17[1] = v53 << 8;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        __int16 v55 = *v13;
        __int16 v56 = v13[1];
        v13 += 2;
        *uint64_t v17 = v55 << 8;
        v17[1] = v56 << 8;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      __int16 v57 = *v13 << 8;
      __int16 v58 = v13[1] << 8;
      *uint64_t v17 = v57;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unint64_t v36 = v14 + 4;
      __int16 v38 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *uint64_t v21 = (v14[2] + (unsigned __int16)*v14) << 7;
      v21[1] = v38;
      __int16 v37 = v21 + 2;
    }
    else
    {
      unint64_t v36 = v14;
      __int16 v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        __int16 v40 = &v37[v39];
        __int16 v41 = (v36[3] + (unsigned __int16)v36[1]) << 7;
        *__int16 v40 = (v36[2] + (unsigned __int16)*v36) << 7;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      __int16 v44 = v14;
      __int16 v45 = v21;
      if (v34)
      {
        __int16 v44 = v14 + 4;
        __int16 v46 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *uint64_t v21 = (v14[2] + (unsigned __int16)*v14) << 7;
        v21[1] = v46;
        __int16 v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          __int16 v48 = &v45[v47];
          __int16 v49 = (v44[3] + (unsigned __int16)v44[1]) << 7;
          _WORD *v48 = (v44[2] + (unsigned __int16)*v44) << 7;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      __int16 v50 = *v14;
      __int16 v51 = v14[1];
      __int16 v52 = v14[2];
      __int16 v53 = v14[3];
      v14 += 4;
      *uint64_t v21 = (v52 + v50) << 7;
      v21[1] = (v53 + v51) << 7;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        __int16 v55 = &v21[v54];
        __int16 v56 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        _WORD *v55 = (v14[2] + (unsigned __int16)*v14) << 7;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unint64_t v36 = v14 + 4;
      __int16 v38 = v14[1] << 8;
      *uint64_t v21 = *v14 << 8;
      v21[1] = v38;
      __int16 v37 = v21 + 2;
    }
    else
    {
      unint64_t v36 = v14;
      __int16 v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        __int16 v40 = &v37[v39];
        __int16 v41 = v36[1] << 8;
        *__int16 v40 = *v36 << 8;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      __int16 v44 = v14;
      __int16 v45 = v21;
      if (v34)
      {
        __int16 v44 = v14 + 4;
        __int16 v46 = v14[1] << 8;
        *uint64_t v21 = *v14 << 8;
        v21[1] = v46;
        __int16 v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          __int16 v48 = &v45[v47];
          __int16 v49 = v44[1] << 8;
          _WORD *v48 = *v44 << 8;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      __int16 v50 = *v14;
      __int16 v51 = v14[1];
      v14 += 4;
      *uint64_t v21 = v50 << 8;
      v21[1] = v51 << 8;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        __int16 v53 = &v21[v52];
        __int16 v54 = v14[1] << 8;
        *__int16 v53 = *v14 << 8;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v15 + 2 * v14;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + v19 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = *(unsigned __int8 *)(v24 + i) << 8;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v26 = v8 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      unint64_t v32 = v13 + 2;
      __int16 v34 = v13[1] << 8;
      *uint64_t v17 = *v13 << 8;
      v17[1] = v34;
      uint64_t v33 = v17 + 2;
    }
    else
    {
      unint64_t v32 = v13;
      uint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        __int16 v37 = *v32;
        __int16 v38 = v32[1];
        v32 += 2;
        *uint64_t v33 = v37 << 8;
        v33[1] = v38 << 8;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      __int16 v39 = *v32 << 8;
      __int16 v40 = v32[1] << 8;
      *uint64_t v33 = v39;
      v33[1] = v40;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v11 - v27;
    do
    {
      uint64_t v43 = v13;
      __int16 v44 = v17;
      if (v28)
      {
        uint64_t v43 = v13 + 2;
        __int16 v45 = v13[1] << 8;
        *uint64_t v17 = *v13 << 8;
        v17[1] = v45;
        __int16 v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          __int16 v48 = *v43;
          __int16 v49 = v43[1];
          v43 += 2;
          *__int16 v44 = v48 << 8;
          v44[1] = v49 << 8;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        __int16 v50 = *v43 << 8;
        __int16 v51 = v43[1] << 8;
        *__int16 v44 = v50;
        v44[1] = v51;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if (v28)
    {
      __int16 v52 = *v13;
      __int16 v53 = v13[1];
      v13 += 2;
      *uint64_t v17 = v52 << 8;
      v17[1] = v53 << 8;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        __int16 v55 = *v13;
        __int16 v56 = v13[1];
        v13 += 2;
        *uint64_t v17 = v55 << 8;
        v17[1] = v56 << 8;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      __int16 v57 = *v13 << 8;
      __int16 v58 = v13[1] << 8;
      *uint64_t v17 = v57;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unint64_t v36 = v14 + 4;
      __int16 v38 = (v14[3] + (unsigned __int16)v14[1]) << 7;
      *uint64_t v21 = (v14[2] + (unsigned __int16)*v14) << 7;
      v21[1] = v38;
      __int16 v37 = v21 + 2;
    }
    else
    {
      unint64_t v36 = v14;
      __int16 v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        __int16 v40 = &v37[v39];
        __int16 v41 = (v36[3] + (unsigned __int16)v36[1]) << 7;
        *__int16 v40 = (v36[2] + (unsigned __int16)*v36) << 7;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      __int16 v44 = v14;
      __int16 v45 = v21;
      if (v34)
      {
        __int16 v44 = v14 + 4;
        __int16 v46 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        *uint64_t v21 = (v14[2] + (unsigned __int16)*v14) << 7;
        v21[1] = v46;
        __int16 v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          __int16 v48 = &v45[v47];
          __int16 v49 = (v44[3] + (unsigned __int16)v44[1]) << 7;
          _WORD *v48 = (v44[2] + (unsigned __int16)*v44) << 7;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      __int16 v50 = *v14;
      __int16 v51 = v14[1];
      __int16 v52 = v14[2];
      __int16 v53 = v14[3];
      v14 += 4;
      *uint64_t v21 = (v52 + v50) << 7;
      v21[1] = (v53 + v51) << 7;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        __int16 v55 = &v21[v54];
        __int16 v56 = (v14[3] + (unsigned __int16)v14[1]) << 7;
        _WORD *v55 = (v14[2] + (unsigned __int16)*v14) << 7;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unint64_t v36 = v14 + 4;
      __int16 v38 = v14[1] << 8;
      *uint64_t v21 = *v14 << 8;
      v21[1] = v38;
      __int16 v37 = v21 + 2;
    }
    else
    {
      unint64_t v36 = v14;
      __int16 v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        __int16 v40 = &v37[v39];
        __int16 v41 = v36[1] << 8;
        *__int16 v40 = *v36 << 8;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      __int16 v44 = v14;
      __int16 v45 = v21;
      if (v34)
      {
        __int16 v44 = v14 + 4;
        __int16 v46 = v14[1] << 8;
        *uint64_t v21 = *v14 << 8;
        v21[1] = v46;
        __int16 v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          __int16 v48 = &v45[v47];
          __int16 v49 = v44[1] << 8;
          _WORD *v48 = *v44 << 8;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      __int16 v50 = *v14;
      __int16 v51 = v14[1];
      v14 += 4;
      *uint64_t v21 = v50 << 8;
      v21[1] = v51 << 8;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        __int16 v53 = &v21[v52];
        __int16 v54 = v14[1] << 8;
        *__int16 v53 = *v14 << 8;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_Copy_444v_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a4[1];
  uint64_t v11 = (__int16 *)(a3[1] + v10 * v9 + 2 * v8);
  uint64_t v12 = a6[4];
  uint64_t v13 = a6[5];
  uint64_t v14 = a8[1];
  unint64_t v15 = (__int16 *)(a7[1] + v14 * v13 + 2 * v12);
  if (a2[2] >= a6[2]) {
    size_t v16 = a6[2];
  }
  else {
    size_t v16 = a2[2];
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v47 = a8[1];
    uint64_t v48 = a4[1];
    unint64_t v49 = v17;
    uint64_t v18 = *a4;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = (char *)(a7[2] + v20 * v13 + v12);
    unint64_t v22 = (char *)(*a7 + *a8 * v13 + v12);
    unint64_t v23 = (char *)(*a3 + *a4 * v9 + v8);
    do
    {
      memcpy(v22, v23, v16);
      memset(v21, 255, v16);
      v23 += v18;
      v22 += v19;
      v21 += v20;
      --v17;
    }
    while (v17);
    uint64_t v14 = v47;
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    uint64_t v10 = v48;
    unint64_t v17 = v49;
  }
  unint64_t v24 = v9 & 1;
  if (v17 >= v24) {
    uint64_t v25 = v9 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v8;
  size_t v27 = v8 & 1;
  if (v16 >= v27) {
    size_t v28 = v27;
  }
  else {
    size_t v28 = 0;
  }
  size_t v29 = v16 - v28;
  if (v9)
  {
    uint64_t v30 = v11;
    if (v26)
    {
      uint64_t v30 = v11 + 1;
      __int16 *v15 = *v11;
      unint64_t v31 = v15 + 1;
    }
    else
    {
      unint64_t v31 = v15;
    }
    if (v16 == v28)
    {
      size_t v32 = 0;
    }
    else
    {
      size_t v33 = v16 - v28;
      do
      {
        __int16 v34 = *v30++;
        *v31++ = v34;
        --v33;
      }
      while (v33);
      size_t v32 = v16 - v28;
    }
    if (v32 + v27 < v16) {
      *unint64_t v31 = *v30;
    }
    uint64_t v11 = (__int16 *)((char *)v11 + v10);
    unint64_t v15 = (__int16 *)((char *)v15 + v14);
  }
  if (v17 == v25)
  {
    unint64_t v35 = 0;
  }
  else
  {
    uint64_t v36 = 0;
    unint64_t v35 = v17 - v25;
    do
    {
      __int16 v37 = v11;
      __int16 v38 = v15;
      if (v26)
      {
        __int16 v37 = v11 + 1;
        __int16 *v15 = *v11;
        __int16 v38 = v15 + 1;
      }
      if (v16 == v28)
      {
        size_t v39 = 0;
      }
      else
      {
        size_t v40 = v16 - v28;
        do
        {
          __int16 v41 = *v37++;
          *v38++ = v41;
          --v40;
        }
        while (v40);
        size_t v39 = v16 - v28;
      }
      if (v39 + v27 < v16) {
        __int16 *v38 = *v37;
      }
      uint64_t v11 = (__int16 *)((char *)v11 + v10);
      unint64_t v15 = (__int16 *)((char *)v15 + v14);
      ++v36;
    }
    while (v36 != v35);
  }
  if (v35 + v24 < v17)
  {
    if (v26)
    {
      __int16 v42 = *v11++;
      *v15++ = v42;
    }
    if (v16 == v28)
    {
      size_t v29 = 0;
    }
    else
    {
      size_t v43 = v16 - v28;
      do
      {
        __int16 v44 = *v11++;
        *v15++ = v44;
        --v43;
      }
      while (v43);
    }
    if (v29 + v27 < v16) {
      __int16 *v15 = *v11;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  size_t v9 = v8 & 1;
  size_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v11 + 2 * (v9 + v8));
  unint64_t v14 = *(void *)(a6 + 24);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = a8[1];
  uint64_t v19 = (unsigned char *)(a7[1] + v18 * v17 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v20 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v20) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= v14) {
    unint64_t v22 = v14;
  }
  else {
    unint64_t v22 = *(void *)(a2 + 24);
  }
  if (v22)
  {
    uint64_t v56 = a8[1];
    unint64_t v57 = v22;
    uint64_t v58 = a4[1];
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = a8[2];
    char v26 = (char *)(a7[2] + v25 * v17 + v15);
    size_t v27 = (char *)(*a7 + *a8 * v17 + v15);
    size_t v28 = (char *)(*a3 + *a4 * v11 + v10);
    do
    {
      memcpy(v27, v28, v21);
      memset(v26, 255, v21);
      v28 += v23;
      v27 += v24;
      v26 += v25;
      --v22;
    }
    while (v22);
    uint64_t v18 = v56;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    size_t v9 = v8 & 1;
    unint64_t v22 = v57;
    uint64_t v12 = v58;
  }
  unint64_t v29 = v11 & 1;
  if (v22 >= v29) {
    uint64_t v30 = v11 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v8;
  if (v21 < v9) {
    size_t v9 = 0;
  }
  size_t v32 = v21 - v9;
  if (v11)
  {
    if (v31)
    {
      size_t v33 = v13 + 4;
      unsigned int v35 = (v13[1] + v13[3] + 1) >> 1;
      *uint64_t v19 = (*v13 + v13[2] + 1) >> 1;
      v19[1] = v35;
      __int16 v34 = v19 + 2;
    }
    else
    {
      size_t v33 = v13;
      __int16 v34 = v19;
    }
    if (v21 != v9)
    {
      size_t v36 = 0;
      do
      {
        __int16 v37 = &v34[v36];
        unsigned int v38 = (v33[1] + v33[3] + 1) >> 1;
        *__int16 v37 = (*v33 + v33[2] + 1) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    v13 += v12;
    v19 += v18;
  }
  if (v22 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v22 - v30;
    do
    {
      __int16 v41 = v13;
      __int16 v42 = v19;
      if (v31)
      {
        __int16 v41 = v13 + 4;
        unsigned int v43 = (v13[1] + v13[3] + 1) >> 1;
        *uint64_t v19 = (*v13 + v13[2] + 1) >> 1;
        v19[1] = v43;
        __int16 v42 = v19 + 2;
      }
      if (v21 != v9)
      {
        size_t v44 = 0;
        do
        {
          __int16 v45 = &v42[v44];
          unsigned int v46 = (v41[1] + v41[3] + 1) >> 1;
          unsigned char *v45 = (*v41 + v41[2] + 1) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      v13 += v12;
      v19 += v18;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v22)
  {
    if (v31)
    {
      int v47 = *v13;
      int v48 = v13[1];
      int v49 = v13[2];
      int v50 = v13[3];
      v13 += 4;
      *uint64_t v19 = (v47 + v49 + 1) >> 1;
      v19[1] = (v48 + v50 + 1) >> 1;
      v19 += 2;
    }
    if (v21 != v9)
    {
      size_t v51 = 0;
      do
      {
        unint64_t v52 = &v19[v51];
        unsigned int v53 = (v13[1] + v13[3] + 1) >> 1;
        *unint64_t v52 = (*v13 + v13[2] + 1) >> 1;
        v52[1] = v53;
        v51 += 2;
        v13 += 4;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444v_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  size_t v9 = v8 & 1;
  size_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (__int16 *)(a3[1] + v12 * v11 + 2 * (v9 + v8));
  unint64_t v14 = *(void *)(a6 + 24);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = a8[1];
  uint64_t v19 = (__int16 *)(a7[1] + v18 * v17 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v20 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v20) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= v14) {
    unint64_t v22 = v14;
  }
  else {
    unint64_t v22 = *(void *)(a2 + 24);
  }
  if (v22)
  {
    uint64_t v48 = a8[1];
    unint64_t v49 = v22;
    uint64_t v50 = a4[1];
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = a8[2];
    char v26 = (char *)(a7[2] + v25 * v17 + v15);
    size_t v27 = (char *)(*a7 + *a8 * v17 + v15);
    size_t v28 = (char *)(*a3 + *a4 * v11 + v10);
    do
    {
      memcpy(v27, v28, v21);
      memset(v26, 255, v21);
      v28 += v23;
      v27 += v24;
      v26 += v25;
      --v22;
    }
    while (v22);
    uint64_t v18 = v48;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    size_t v9 = v8 & 1;
    unint64_t v22 = v49;
    uint64_t v12 = v50;
  }
  unint64_t v29 = v11 & 1;
  if (v22 >= v29) {
    uint64_t v30 = v11 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v8;
  if (v21 < v9) {
    size_t v9 = 0;
  }
  size_t v32 = v21 - v9;
  if (v11)
  {
    size_t v33 = v13;
    if (v31)
    {
      size_t v33 = v13 + 2;
      *uint64_t v19 = *v13;
      __int16 v34 = v19 + 1;
    }
    else
    {
      __int16 v34 = v19;
    }
    if (v21 != v9)
    {
      size_t v35 = 0;
      do
      {
        __int16 v36 = *v33;
        v33 += 2;
        v34[v35 / 2] = v36;
        v35 += 2;
      }
      while (v35 < v32);
    }
    uint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v19 = (__int16 *)((char *)v19 + v18);
  }
  if (v22 == v30)
  {
    unint64_t v37 = 0;
  }
  else
  {
    uint64_t v38 = 0;
    unint64_t v37 = v22 - v30;
    do
    {
      unint64_t v39 = v13;
      uint64_t v40 = v19;
      if (v31)
      {
        unint64_t v39 = v13 + 2;
        *uint64_t v19 = *v13;
        uint64_t v40 = v19 + 1;
      }
      if (v21 != v9)
      {
        size_t v41 = 0;
        do
        {
          __int16 v42 = *v39;
          v39 += 2;
          v40[v41 / 2] = v42;
          v41 += 2;
        }
        while (v41 < v32);
      }
      uint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v19 = (__int16 *)((char *)v19 + v18);
      ++v38;
    }
    while (v38 != v37);
  }
  if (v37 + v29 < v22)
  {
    if (v31)
    {
      __int16 v43 = *v13;
      v13 += 2;
      *v19++ = v43;
    }
    if (v21 != v9)
    {
      size_t v44 = 0;
      do
      {
        __int16 v45 = *v13;
        v13 += 2;
        v19[v44 / 2] = v45;
        v44 += 2;
      }
      while (v44 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444v_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  size_t v10 = v8 & 1;
  size_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v23 = v18 - v17;
  }
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  else {
    unint64_t v24 = v14 - v13;
  }
  if (v24)
  {
    uint64_t v25 = *a4;
    uint64_t v73 = a8[1];
    uint64_t v74 = *a4;
    if (v13 >= v9) {
      uint64_t v25 = 0;
    }
    char v26 = (char *)(*a3 + *a4 * v13 + v11 + v25);
    uint64_t v27 = a8[2];
    size_t v28 = (char *)(a7[2] + v27 * v19 + v17);
    uint64_t v29 = *a8;
    uint64_t v30 = (char *)(*a7 + *a8 * v19 + v17);
    uint64_t v31 = -(uint64_t)v24;
    do
    {
      memcpy(v30, v26, v23);
      memset(v28, 255, v23);
      v26 += v74;
      v30 += v29;
      v28 += v27;
    }
    while (!__CFADD__(v31++, 1));
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    size_t v10 = v8 & 1;
    uint64_t v21 = v73;
  }
  if (v24 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v23 < v10) {
    size_t v10 = 0;
  }
  size_t v34 = v23 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v37 = &v16[v15 + 2];
      int v38 = *v37;
      int v39 = v37[1];
      size_t v35 = v16 + 4;
      unsigned int v40 = (v16[1] + v16[3] + v16[v15 + 1] + v39 + 2) >> 2;
      unsigned char *v22 = (*v16 + v16[2] + v16[v15] + v38 + 2) >> 2;
      v22[1] = v40;
      __int16 v36 = v22 + 2;
    }
    else
    {
      size_t v35 = v16;
      __int16 v36 = v22;
    }
    if (v23 != v10)
    {
      size_t v41 = 0;
      __int16 v42 = v35 + 3;
      do
      {
        __int16 v43 = &v36[v41];
        int v44 = *(v42 - 3);
        int v45 = *(v42 - 2);
        unsigned int v46 = &v42[v15];
        int v47 = v42[v15 - 3];
        int v48 = v42[v15 - 2];
        int v49 = *(v42 - 1);
        int v50 = *v42;
        v42 += 4;
        unsigned int v51 = (v45 + v50 + v48 + *v46 + 2) >> 2;
        *__int16 v43 = (v44 + v49 + v47 + *(v46 - 1) + 2) >> 2;
        v43[1] = v51;
        v41 += 2;
      }
      while (v41 < v34);
    }
    v16 += 2 * v15;
    v22 += v21;
  }
  if (v24 != v33)
  {
    unint64_t v52 = 0;
    unint64_t v53 = v24 - v33;
    do
    {
      __int16 v54 = v16;
      __int16 v55 = v22;
      if (v8)
      {
        uint64_t v56 = &v16[v15 + 2];
        int v57 = *v56;
        int v58 = v56[1];
        __int16 v54 = v16 + 4;
        unsigned int v59 = (v16[1] + v16[3] + v16[v15 + 1] + v58 + 2) >> 2;
        unsigned char *v22 = (*v16 + v16[2] + v16[v15] + v57 + 2) >> 2;
        v22[1] = v59;
        __int16 v55 = v22 + 2;
      }
      if (v23 != v10)
      {
        size_t v60 = 0;
        unsigned int v61 = v54 + 3;
        do
        {
          unint64_t v62 = &v55[v60];
          int v63 = *(v61 - 3);
          int v64 = *(v61 - 2);
          unsigned int v65 = &v61[v15];
          int v66 = v61[v15 - 3];
          int v67 = v61[v15 - 2];
          int v68 = *(v61 - 1);
          int v69 = *v61;
          v61 += 4;
          unsigned int v70 = (v64 + v69 + v67 + *v65 + 2) >> 2;
          *unint64_t v62 = (v63 + v68 + v66 + *(v65 - 1) + 2) >> 2;
          v62[1] = v70;
          v60 += 2;
        }
        while (v60 < v34);
      }
      v16 += 2 * v15;
      v22 += v21;
      v52 += 2;
    }
    while (v52 < v53);
  }
  return 0;
}

uint64_t vt_CopyDec_444v_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  size_t v10 = v8 & 1;
  size_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (__int16 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v23 = v18 - v17;
  }
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  unint64_t v24 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    unint64_t v48 = v24;
    uint64_t v49 = a4[1];
    uint64_t v50 = a8[1];
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = (char *)(*a3 + *a4 * v13 + v11 + v28);
    uint64_t v30 = (char *)(a7[2] + v27 * v19 + v17);
    uint64_t v31 = (char *)(*a7 + v26 * v19 + v17);
    uint64_t v32 = -(uint64_t)v24;
    do
    {
      memcpy(v31, v29, v23);
      memset(v30, 255, v23);
      v29 += v25;
      v31 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v32++, 1));
    unint64_t v24 = v48;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    size_t v10 = v8 & 1;
    uint64_t v15 = v49;
    uint64_t v21 = v50;
  }
  if (v24 >= v12) {
    unint64_t v34 = v12;
  }
  else {
    unint64_t v34 = 0;
  }
  if (v23 < v10) {
    size_t v10 = 0;
  }
  size_t v35 = v23 - v10;
  if (v12)
  {
    __int16 v36 = v16;
    if (v8)
    {
      __int16 v36 = v16 + 2;
      __int16 *v22 = *v16;
      unint64_t v37 = v22 + 1;
    }
    else
    {
      unint64_t v37 = v22;
    }
    if (v23 != v10)
    {
      size_t v38 = 0;
      do
      {
        __int16 v39 = *v36;
        v36 += 2;
        v37[v38 / 2] = v39;
        v38 += 2;
      }
      while (v38 < v35);
    }
    v16 += v15;
    unint64_t v22 = (__int16 *)((char *)v22 + v21);
  }
  if (v24 != v34)
  {
    unint64_t v40 = 0;
    unint64_t v41 = v24 - v34;
    do
    {
      __int16 v42 = v16;
      __int16 v43 = v22;
      if (v8)
      {
        __int16 v42 = v16 + 2;
        __int16 *v22 = *v16;
        __int16 v43 = v22 + 1;
      }
      if (v23 != v10)
      {
        size_t v44 = 0;
        do
        {
          __int16 v45 = *v42;
          v42 += 2;
          v43[v44 / 2] = v45;
          v44 += 2;
        }
        while (v44 < v35);
      }
      v16 += v15;
      unint64_t v22 = (__int16 *)((char *)v22 + v21);
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_Copy_444f_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = *a8;
    uint64_t v14 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v16 = a2[4];
    uint64_t v15 = a2[5];
    uint64_t v17 = a3[1] + v12 * v15 + 2 * v16;
    uint64_t v18 = *a3 + *a4 * v15 + v16;
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          unint64_t v22 = (_WORD *)(v14 + v20);
          unint64_t v23 = (16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v17 + v19))) >> 32;
          unint64_t v24 = (16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v17 + v19 + 1))) >> 32;
          unint64_t v25 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v18 + i))) >> 32;
          _WORD *v22 = -1;
          v22[1] = v25 + 4096;
          v22[2] = v23 + 4096;
          void v22[3] = v24 + 4096;
          v20 += 8;
          v19 += 2;
        }
      }
      v18 += v11;
      v14 += v13;
      v17 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_444f_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = *a8;
    uint64_t v14 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v16 = a2[4];
    uint64_t v15 = a2[5];
    uint64_t v17 = a3[1] + v12 * v15 + 2 * v16;
    uint64_t v18 = *a3 + *a4 * v15 + v16;
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          unint64_t v22 = (unsigned char *)(v14 + v20);
          unsigned int v23 = (7368928 * *(unsigned __int8 *)(v17 + v19)) >> 23;
          unsigned int v24 = (7368928 * *(unsigned __int8 *)(v17 + v19 + 1)) >> 23;
          unsigned int v25 = (7204443 * *(unsigned __int8 *)(v18 + i)) >> 23;
          unsigned char *v22 = -1;
          v22[1] = v25 + 16;
          v22[2] = v23 + 16;
          void v22[3] = v24 + 16;
          v20 += 4;
          v19 += 2;
        }
      }
      v18 += v11;
      v14 += v13;
      v17 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    uint64_t v15 = *a8;
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v14 * v17 + 2 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          unint64_t v22 = (_WORD *)(v16 + 2 * v20);
          unsigned int v23 = (((16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v18 + v20 + 1))) >> 32)
                             + ((16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v18 + v20 + 3))) >> 32)
                             + 8193) >> 1;
          unint64_t v24 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v19 + i))) >> 32;
          unint64_t v25 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v19 + i + 1))) >> 32;
          _WORD *v22 = (((16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v18 + v20))) >> 32)
                              + ((16843010
                                * (unint64_t)(57344 * *(unsigned __int8 *)(v18 + v20 + 2))) >> 32)
                              + 8193) >> 1;
          v22[1] = v24 + 4096;
          v22[2] = v23;
          void v22[3] = v25 + 4096;
          v20 += 4;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 2 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          unint64_t v22 = (_WORD *)(v16 + 2 * v20);
          unint64_t v23 = (16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v18 + v20 + 1))) >> 32;
          unint64_t v24 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v19 + i))) >> 32;
          unint64_t v25 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v19 + i + 1))) >> 32;
          _WORD *v22 = ((16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v18 + v20))) >> 32) + 4096;
          v22[1] = v24 + 4096;
          v22[2] = v23 + 4096;
          void v22[3] = v25 + 4096;
          v20 += 4;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 2 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          unint64_t v22 = (unsigned char *)(v16 + v20);
          unsigned int v23 = (((7368928 * *(unsigned __int8 *)(v18 + v20 + 1)) >> 23)
               + ((7368928 * *(unsigned __int8 *)(v18 + v20 + 3)) >> 23)
               + 33) >> 1;
          unsigned int v24 = (7204443 * *(unsigned __int8 *)(v19 + i)) >> 23;
          unsigned int v25 = (7204443 * *(unsigned __int8 *)(v19 + i + 1)) >> 23;
          unsigned char *v22 = (((7368928 * *(unsigned __int8 *)(v18 + v20)) >> 23)
                + ((7368928 * *(unsigned __int8 *)(v18 + v20 + 2)) >> 23)
                + 33) >> 1;
          v22[1] = v24 + 16;
          v22[2] = v23;
          void v22[3] = v25 + 16;
          v20 += 4;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 2 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          unint64_t v22 = (unsigned char *)(v16 + v20);
          unsigned int v23 = (7368928 * *(unsigned __int8 *)(v18 + v20 + 1)) >> 23;
          unsigned int v24 = (7204443 * *(unsigned __int8 *)(v19 + i)) >> 23;
          unsigned int v25 = (7204443 * *(unsigned __int8 *)(v19 + i + 1)) >> 23;
          unsigned char *v22 = ((7368928 * *(unsigned __int8 *)(v18 + v20)) >> 23) + 16;
          v22[1] = v24 + 16;
          v22[2] = v23 + 16;
          void v22[3] = v25 + 16;
          v20 += 4;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_444f_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v15 + 2 * v14;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + v19 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v24 + i))) >> 32)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v26 = v8 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      int v34 = v13[1];
      uint64_t v32 = v13 + 2;
      *uint64_t v17 = ((16843010 * (unint64_t)(57344 * *v13)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v34)) >> 32) + 4096;
      unint64_t v33 = v17 + 2;
    }
    else
    {
      uint64_t v32 = v13;
      unint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        int v37 = *v32;
        int v38 = v32[1];
        v32 += 2;
        *unint64_t v33 = ((16843010 * (unint64_t)(57344 * v37)) >> 32) + 4096;
        v33[1] = ((16843010 * (unint64_t)(57344 * v38)) >> 32) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      int v39 = *v32;
      int v40 = v32[1];
      *unint64_t v33 = ((16843010 * (unint64_t)(57344 * v39)) >> 32) + 4096;
      v33[1] = ((16843010 * (unint64_t)(57344 * v40)) >> 32) + 4096;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v11 - v27;
    do
    {
      __int16 v43 = v13;
      size_t v44 = v17;
      if (v28)
      {
        int v45 = v13[1];
        __int16 v43 = v13 + 2;
        *uint64_t v17 = ((16843010 * (unint64_t)(57344 * *v13)) >> 32) + 4096;
        v17[1] = ((16843010 * (unint64_t)(57344 * v45)) >> 32) + 4096;
        size_t v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          int v48 = *v43;
          int v49 = v43[1];
          v43 += 2;
          *size_t v44 = ((16843010 * (unint64_t)(57344 * v48)) >> 32) + 4096;
          v44[1] = ((16843010 * (unint64_t)(57344 * v49)) >> 32) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        int v50 = *v43;
        int v51 = v43[1];
        *size_t v44 = ((16843010 * (unint64_t)(57344 * v50)) >> 32) + 4096;
        v44[1] = ((16843010 * (unint64_t)(57344 * v51)) >> 32) + 4096;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if (v28)
    {
      int v52 = *v13;
      int v53 = v13[1];
      v13 += 2;
      *uint64_t v17 = ((16843010 * (unint64_t)(57344 * v52)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v53)) >> 32) + 4096;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        int v55 = *v13;
        int v56 = v13[1];
        v13 += 2;
        *uint64_t v17 = ((16843010 * (unint64_t)(57344 * v55)) >> 32) + 4096;
        v17[1] = ((16843010 * (unint64_t)(57344 * v56)) >> 32) + 4096;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      int v57 = *v13;
      int v58 = v13[1];
      *uint64_t v17 = ((16843010 * (unint64_t)(57344 * v57)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v58)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_444f_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v23 + i))) >> 32)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      int v33 = v13[1];
      unint64_t v31 = v13 + 2;
      *uint64_t v17 = ((16843010 * (unint64_t)(57344 * *v13)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v33)) >> 32) + 4096;
      uint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      uint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        int v36 = *v31;
        int v37 = v31[1];
        v31 += 2;
        _WORD *v32 = ((16843010 * (unint64_t)(57344 * v36)) >> 32) + 4096;
        v32[1] = ((16843010 * (unint64_t)(57344 * v37)) >> 32) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      int v38 = *v31;
      int v39 = v31[1];
      _WORD *v32 = ((16843010 * (unint64_t)(57344 * v38)) >> 32) + 4096;
      v32[1] = ((16843010 * (unint64_t)(57344 * v39)) >> 32) + 4096;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      __int16 v43 = v17;
      if (v27)
      {
        int v44 = v13[1];
        uint64_t v42 = v13 + 2;
        *uint64_t v17 = ((16843010 * (unint64_t)(57344 * *v13)) >> 32) + 4096;
        v17[1] = ((16843010 * (unint64_t)(57344 * v44)) >> 32) + 4096;
        __int16 v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          int v47 = *v42;
          int v48 = v42[1];
          v42 += 2;
          *__int16 v43 = ((16843010 * (unint64_t)(57344 * v47)) >> 32) + 4096;
          v43[1] = ((16843010 * (unint64_t)(57344 * v48)) >> 32) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *__int16 v43 = ((16843010 * (unint64_t)(57344 * v49)) >> 32) + 4096;
        v43[1] = ((16843010 * (unint64_t)(57344 * v50)) >> 32) + 4096;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      int v51 = *v13;
      int v52 = v13[1];
      v13 += 2;
      *uint64_t v17 = ((16843010 * (unint64_t)(57344 * v51)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v52)) >> 32) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        int v54 = *v13;
        int v55 = v13[1];
        v13 += 2;
        *uint64_t v17 = ((16843010 * (unint64_t)(57344 * v54)) >> 32) + 4096;
        v17[1] = ((16843010 * (unint64_t)(57344 * v55)) >> 32) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      int v56 = *v13;
      int v57 = v13[1];
      *uint64_t v17 = ((16843010 * (unint64_t)(57344 * v56)) >> 32) + 4096;
      v17[1] = ((16843010 * (unint64_t)(57344 * v57)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_444f_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v22 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(unsigned __int8 *)(v22 + i) | (*(unsigned __int8 *)(v22 + i) << 8);
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v24 = v8 & 1;
  if (v11 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v26)
    {
      unint64_t v30 = v13 + 2;
      __int16 v32 = v13[1] | (v13[1] << 8);
      *uint64_t v17 = *v13 | (*v13 << 8);
      v17[1] = v32;
      unint64_t v31 = v17 + 2;
    }
    else
    {
      unint64_t v30 = v13;
      unint64_t v31 = v17;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        __int16 v35 = *v30;
        __int16 v36 = v30[1];
        v30 += 2;
        *unint64_t v31 = v35 | (v35 << 8);
        v31[1] = v36 | (v36 << 8);
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      __int16 v37 = *v30 | (*v30 << 8);
      __int16 v38 = v30[1] | (v30[1] << 8);
      *unint64_t v31 = v37;
      v31[1] = v38;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v11 - v25;
    do
    {
      uint64_t v41 = v13;
      uint64_t v42 = v17;
      if (v26)
      {
        uint64_t v41 = v13 + 2;
        __int16 v43 = v13[1] | (v13[1] << 8);
        *uint64_t v17 = *v13 | (*v13 << 8);
        v17[1] = v43;
        uint64_t v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          __int16 v46 = *v41;
          __int16 v47 = v41[1];
          v41 += 2;
          *uint64_t v42 = v46 | (v46 << 8);
          v42[1] = v47 | (v47 << 8);
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        __int16 v48 = *v41 | (*v41 << 8);
        __int16 v49 = v41[1] | (v41[1] << 8);
        *uint64_t v42 = v48;
        v42[1] = v49;
      }
      v13 += v12;
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if (v26)
    {
      __int16 v50 = *v13;
      __int16 v51 = v13[1];
      v13 += 2;
      *uint64_t v17 = v50 | (v50 << 8);
      v17[1] = v51 | (v51 << 8);
      v17 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        __int16 v53 = *v13;
        __int16 v54 = v13[1];
        v13 += 2;
        *uint64_t v17 = v53 | (v53 << 8);
        v17[1] = v54 | (v54 << 8);
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      __int16 v55 = *v13 | (*v13 << 8);
      __int16 v56 = v13[1] | (v13[1] << 8);
      *uint64_t v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v30 + i))) >> 32)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v32 = v12 & 1;
  if (v9 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      __int16 v36 = v14 + 4;
      unsigned int v38 = (((16843010 * (unint64_t)(57344 * v14[1])) >> 32)
                         + ((16843010 * (unint64_t)(57344 * v14[3])) >> 32)
                         + 8193) >> 1;
      *uint64_t v21 = (((16843010 * (unint64_t)(57344 * *v14)) >> 32)
                          + ((16843010 * (unint64_t)(57344 * v14[2])) >> 32)
                          + 8193) >> 1;
      v21[1] = v38;
      __int16 v37 = v21 + 2;
    }
    else
    {
      __int16 v36 = v14;
      __int16 v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        uint64_t v40 = &v37[v39];
        unsigned int v41 = (((16843010 * (unint64_t)(57344 * v36[1])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v36[3])) >> 32)
                           + 8193) >> 1;
        *uint64_t v40 = (((16843010 * (unint64_t)(57344 * *v36)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v36[2])) >> 32)
                            + 8193) >> 1;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v9 - v33;
    do
    {
      unint64_t v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        unint64_t v44 = v14 + 4;
        unsigned int v46 = (((16843010 * (unint64_t)(57344 * v14[1])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v14[3])) >> 32)
                           + 8193) >> 1;
        *uint64_t v21 = (((16843010 * (unint64_t)(57344 * *v14)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v14[2])) >> 32)
                            + 8193) >> 1;
        v21[1] = v46;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          __int16 v48 = &v45[v47];
          unsigned int v49 = (((16843010 * (unint64_t)(57344 * v44[1])) >> 32)
                             + ((16843010 * (unint64_t)(57344 * v44[3])) >> 32)
                             + 8193) >> 1;
          _WORD *v48 = (((16843010 * (unint64_t)(57344 * *v44)) >> 32)
                              + ((16843010 * (unint64_t)(57344 * v44[2])) >> 32)
                              + 8193) >> 1;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if (v34)
    {
      int v50 = *v14;
      int v51 = v14[1];
      int v52 = v14[2];
      int v53 = v14[3];
      v14 += 4;
      *uint64_t v21 = (((16843010 * (unint64_t)(57344 * v50)) >> 32)
                          + ((16843010 * (unint64_t)(57344 * v52)) >> 32)
                          + 8193) >> 1;
      v21[1] = (((16843010 * (unint64_t)(57344 * v51)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v53)) >> 32)
                            + 8193) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        __int16 v55 = &v21[v54];
        unsigned int v56 = (((16843010 * (unint64_t)(57344 * v14[1])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v14[3])) >> 32)
                           + 8193) >> 1;
        _WORD *v55 = (((16843010 * (unint64_t)(57344 * *v14)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v14[2])) >> 32)
                            + 8193) >> 1;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v30 + i))) >> 32)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v38 = v14[1];
      __int16 v36 = v14 + 4;
      *uint64_t v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
      v21[1] = ((16843010 * (unint64_t)(57344 * v38)) >> 32) + 4096;
      __int16 v37 = v21 + 2;
    }
    else
    {
      __int16 v36 = v14;
      __int16 v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        uint64_t v40 = &v37[v39];
        unint64_t v41 = (16843010 * (unint64_t)(57344 * v36[1])) >> 32;
        *uint64_t v40 = ((16843010 * (unint64_t)(57344 * *v36)) >> 32) + 4096;
        v40[1] = v41 + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      unint64_t v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v46 = v14[1];
        unint64_t v44 = v14 + 4;
        *uint64_t v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        v21[1] = ((16843010 * (unint64_t)(57344 * v46)) >> 32) + 4096;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          __int16 v48 = &v45[v47];
          unint64_t v49 = (16843010 * (unint64_t)(57344 * v44[1])) >> 32;
          _WORD *v48 = ((16843010 * (unint64_t)(57344 * *v44)) >> 32) + 4096;
          v48[1] = v49 + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      int v50 = *v14;
      int v51 = v14[1];
      v14 += 4;
      *uint64_t v21 = ((16843010 * (unint64_t)(57344 * v50)) >> 32) + 4096;
      v21[1] = ((16843010 * (unint64_t)(57344 * v51)) >> 32) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unint64_t v54 = (16843010 * (unint64_t)(57344 * v14[1])) >> 32;
        *int v53 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        v53[1] = v54 + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v28 + i))) >> 32)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      unsigned int v36 = (((16843010 * (unint64_t)(57344 * v14[1])) >> 32)
                         + ((16843010 * (unint64_t)(57344 * v14[3])) >> 32)
                         + 8193) >> 1;
      *uint64_t v21 = (((16843010 * (unint64_t)(57344 * *v14)) >> 32)
                          + ((16843010 * (unint64_t)(57344 * v14[2])) >> 32)
                          + 8193) >> 1;
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = (((16843010 * (unint64_t)(57344 * v34[1])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v34[3])) >> 32)
                           + 8193) >> 1;
        _WORD *v38 = (((16843010 * (unint64_t)(57344 * *v34)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v34[2])) >> 32)
                            + 8193) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        unsigned int v44 = (((16843010 * (unint64_t)(57344 * v14[1])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v14[3])) >> 32)
                           + 8193) >> 1;
        *uint64_t v21 = (((16843010 * (unint64_t)(57344 * *v14)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v14[2])) >> 32)
                            + 8193) >> 1;
        v21[1] = v44;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = (((16843010 * (unint64_t)(57344 * v42[1])) >> 32)
                             + ((16843010 * (unint64_t)(57344 * v42[3])) >> 32)
                             + 8193) >> 1;
          _WORD *v46 = (((16843010 * (unint64_t)(57344 * *v42)) >> 32)
                              + ((16843010 * (unint64_t)(57344 * v42[2])) >> 32)
                              + 8193) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      int v50 = v14[2];
      int v51 = v14[3];
      v14 += 4;
      *uint64_t v21 = (((16843010 * (unint64_t)(57344 * v48)) >> 32)
                          + ((16843010 * (unint64_t)(57344 * v50)) >> 32)
                          + 8193) >> 1;
      v21[1] = (((16843010 * (unint64_t)(57344 * v49)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v51)) >> 32)
                            + 8193) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unsigned int v54 = (((16843010 * (unint64_t)(57344 * v14[1])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v14[3])) >> 32)
                           + 8193) >> 1;
        *int v53 = (((16843010 * (unint64_t)(57344 * *v14)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v14[2])) >> 32)
                            + 8193) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v28 + i))) >> 32)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1];
      char v34 = v14 + 4;
      *uint64_t v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
      v21[1] = ((16843010 * (unint64_t)(57344 * v36)) >> 32) + 4096;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (16843010 * (unint64_t)(57344 * v34[1])) >> 32;
        _WORD *v38 = ((16843010 * (unint64_t)(57344 * *v34)) >> 32) + 4096;
        v38[1] = v39 + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        int v44 = v14[1];
        unint64_t v42 = v14 + 4;
        *uint64_t v21 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        v21[1] = ((16843010 * (unint64_t)(57344 * v44)) >> 32) + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unint64_t v47 = (16843010 * (unint64_t)(57344 * v42[1])) >> 32;
          _WORD *v46 = ((16843010 * (unint64_t)(57344 * *v42)) >> 32) + 4096;
          v46[1] = v47 + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      v14 += 4;
      *uint64_t v21 = ((16843010 * (unint64_t)(57344 * v48)) >> 32) + 4096;
      v21[1] = ((16843010 * (unint64_t)(57344 * v49)) >> 32) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        unint64_t v52 = (16843010 * (unint64_t)(57344 * v14[1])) >> 32;
        *int v51 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        v51[1] = v52 + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v28 + i) | (*(unsigned __int8 *)(v28 + i) << 8);
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      unsigned int v36 = (257 * (v14[3] + v14[1]) + 1) >> 1;
      *uint64_t v21 = (257 * (v14[2] + *v14) + 1) >> 1;
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = (257 * (v34[3] + v34[1]) + 1) >> 1;
        _WORD *v38 = (257 * (v34[2] + *v34) + 1) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        unsigned int v44 = (257 * (v14[3] + v14[1]) + 1) >> 1;
        *uint64_t v21 = (257 * (v14[2] + *v14) + 1) >> 1;
        v21[1] = v44;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = (257 * (v42[3] + v42[1]) + 1) >> 1;
          _WORD *v46 = (257 * (v42[2] + *v42) + 1) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      int v50 = v14[2];
      int v51 = v14[3];
      v14 += 4;
      *uint64_t v21 = (257 * (v50 + v48) + 1) >> 1;
      v21[1] = (257 * (v51 + v49) + 1) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unsigned int v54 = (257 * (v14[3] + v14[1]) + 1) >> 1;
        *int v53 = (257 * (v14[2] + *v14) + 1) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v28 + i) | (*(unsigned __int8 *)(v28 + i) << 8);
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      __int16 v36 = v14[1] | (v14[1] << 8);
      *uint64_t v21 = *v14 | (*v14 << 8);
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        __int16 v39 = v34[1] | (v34[1] << 8);
        _WORD *v38 = *v34 | (*v34 << 8);
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        __int16 v44 = v14[1] | (v14[1] << 8);
        *uint64_t v21 = *v14 | (*v14 << 8);
        v21[1] = v44;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          __int16 v47 = v42[1] | (v42[1] << 8);
          _WORD *v46 = *v42 | (*v42 << 8);
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      __int16 v48 = *v14;
      __int16 v49 = v14[1];
      v14 += 4;
      *uint64_t v21 = v48 | (v48 << 8);
      v21[1] = v49 | (v49 << 8);
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        __int16 v52 = v14[1] | (v14[1] << 8);
        *int v51 = *v14 | (*v14 << 8);
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v8);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    unint64_t v32 = v30 + v10 + v8 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v32 + i))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1)) {
    uint64_t v35 = v9 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v9)
  {
    if (v8)
    {
      __int16 v39 = &v15[v14 + 2];
      int v40 = *v39;
      int v41 = v39[1];
      unint64_t v37 = v15 + 4;
      unsigned int v42 = (((16843010 * (unint64_t)(57344 * v15[1])) >> 32)
                         + ((16843010 * (unint64_t)(57344 * v15[3])) >> 32)
                         + ((16843010 * (unint64_t)(57344 * v15[v14 + 1])) >> 32)
                         + ((16843010 * (unint64_t)(57344 * v41)) >> 32)
                         + 16386) >> 2;
      _WORD *v22 = (((16843010 * (unint64_t)(57344 * *v15)) >> 32)
                          + ((16843010 * (unint64_t)(57344 * v15[2])) >> 32)
                          + ((16843010 * (unint64_t)(57344 * v15[v14])) >> 32)
                          + ((16843010 * (unint64_t)(57344 * v40)) >> 32)
                          + 16386) >> 2;
      v22[1] = v42;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v43 = 0;
      __int16 v44 = v37 + 3;
      do
      {
        int v45 = *(v44 - 2);
        int v46 = &v44[v14];
        int v47 = v44[v14 - 3];
        int v48 = v44[v14 - 2];
        int v49 = *(v44 - 1);
        unint64_t v50 = (16843010 * (unint64_t)(57344 * *(v44 - 3))) >> 32;
        int v51 = *v44;
        v44 += 4;
        unsigned int v52 = ((16843010 * (unint64_t)(57344 * v45)) >> 32)
            + ((16843010 * (unint64_t)(57344 * v51)) >> 32)
            + ((16843010 * (unint64_t)(57344 * v48)) >> 32)
            + ((16843010 * (unint64_t)(57344 * *v46)) >> 32)
            + 16386;
        int v53 = &v38[v43];
        *int v53 = (v50
                            + ((16843010 * (unint64_t)(57344 * v49)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v47)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * *(v46 - 1))) >> 32)
                            + 16386) >> 2;
        v53[1] = v52 >> 2;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v15 += 2 * v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v54 = 0;
    unint64_t v55 = v26 - v35;
    do
    {
      unsigned int v56 = v15;
      int v57 = v22;
      if (v8)
      {
        int v58 = &v15[v14 + 2];
        int v59 = *v58;
        int v60 = v58[1];
        unsigned int v56 = v15 + 4;
        unsigned int v61 = (((16843010 * (unint64_t)(57344 * v15[1])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v15[3])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v15[v14 + 1])) >> 32)
                           + ((16843010 * (unint64_t)(57344 * v60)) >> 32)
                           + 16386) >> 2;
        _WORD *v22 = (((16843010 * (unint64_t)(57344 * *v15)) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v15[2])) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v15[v14])) >> 32)
                            + ((16843010 * (unint64_t)(57344 * v59)) >> 32)
                            + 16386) >> 2;
        v22[1] = v61;
        int v57 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v62 = 0;
        int v63 = v56 + 3;
        do
        {
          int v64 = *(v63 - 2);
          unsigned int v65 = &v63[v14];
          int v66 = v63[v14 - 3];
          int v67 = v63[v14 - 2];
          int v68 = *(v63 - 1);
          unint64_t v69 = (16843010 * (unint64_t)(57344 * *(v63 - 3))) >> 32;
          int v70 = *v63;
          v63 += 4;
          unsigned int v71 = ((16843010 * (unint64_t)(57344 * v64)) >> 32)
              + ((16843010 * (unint64_t)(57344 * v70)) >> 32)
              + ((16843010 * (unint64_t)(57344 * v67)) >> 32)
              + ((16843010 * (unint64_t)(57344 * *v65)) >> 32)
              + 16386;
          unint64_t v72 = &v57[v62];
          *unint64_t v72 = (v69
                              + ((16843010 * (unint64_t)(57344 * v68)) >> 32)
                              + ((16843010 * (unint64_t)(57344 * v66)) >> 32)
                              + ((16843010 * (unint64_t)(57344 * *(v65 - 1))) >> 32)
                              + 16386) >> 2;
          v72[1] = v71 >> 2;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v15 += 2 * v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v8);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    unint64_t v32 = v30 + v10 + v8 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v32 + i))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1)) {
    uint64_t v35 = v9 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v9)
  {
    if (v8)
    {
      int v39 = v15[1];
      unint64_t v37 = v15 + 4;
      _WORD *v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
      v22[1] = ((16843010 * (unint64_t)(57344 * v39)) >> 32) + 4096;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (16843010 * (unint64_t)(57344 * v37[1])) >> 32;
        *int v41 = ((16843010 * (unint64_t)(57344 * *v37)) >> 32) + 4096;
        v41[1] = v42 + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      int v46 = v15;
      int v47 = v22;
      if (v8)
      {
        int v48 = v15[1];
        int v46 = v15 + 4;
        _WORD *v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
        v22[1] = ((16843010 * (unint64_t)(57344 * v48)) >> 32) + 4096;
        int v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          unint64_t v51 = (16843010 * (unint64_t)(57344 * v46[1])) >> 32;
          *unint64_t v50 = ((16843010 * (unint64_t)(57344 * *v46)) >> 32) + 4096;
          v50[1] = v51 + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 += v45;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  if (v26 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    unint64_t v32 = v30 + v10 + v9 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) | (*(unsigned __int8 *)(v32 + i) << 8);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      int v39 = &v16[v15 + 2];
      int v40 = *v39;
      int v41 = v39[1];
      unint64_t v37 = v16 + 4;
      unsigned int v42 = (257 * (v16[v15 + 1] + v16[1] + v16[3] + v41) + 2) >> 2;
      *unint64_t v23 = (257 * (v16[v15] + *v16 + v16[2] + v40) + 2) >> 2;
      v23[1] = v42;
      int v38 = v23 + 2;
    }
    else
    {
      unint64_t v37 = v16;
      int v38 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v43 = 0;
      unint64_t v44 = v37 + 3;
      do
      {
        uint64_t v45 = &v38[v43];
        int v46 = *(v44 - 3);
        int v47 = *(v44 - 2);
        int v48 = &v44[v15];
        int v49 = v44[v15 - 3];
        int v50 = v44[v15 - 2];
        int v51 = *(v44 - 1);
        int v52 = *v44;
        v44 += 4;
        unsigned int v53 = (257 * (v50 + v47 + v52 + *v48) + 2) >> 2;
        _WORD *v45 = (257 * (v49 + v46 + v51 + *(v48 - 1)) + 2) >> 2;
        v45[1] = v53;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v16 += 2 * v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v26 != v35)
  {
    unint64_t v54 = 0;
    unint64_t v55 = v26 - v35;
    do
    {
      unsigned int v56 = v16;
      int v57 = v23;
      if (v9)
      {
        int v58 = &v16[v15 + 2];
        int v59 = *v58;
        int v60 = v58[1];
        unsigned int v56 = v16 + 4;
        unsigned int v61 = (257 * (v16[v15 + 1] + v16[1] + v16[3] + v60) + 2) >> 2;
        *unint64_t v23 = (257 * (v16[v15] + *v16 + v16[2] + v59) + 2) >> 2;
        v23[1] = v61;
        int v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v62 = 0;
        int v63 = v56 + 3;
        do
        {
          int v64 = &v57[v62];
          int v65 = *(v63 - 3);
          int v66 = *(v63 - 2);
          int v67 = &v63[v15];
          int v68 = v63[v15 - 3];
          int v69 = v63[v15 - 2];
          int v70 = *(v63 - 1);
          int v71 = *v63;
          v63 += 4;
          unsigned int v72 = (257 * (v69 + v66 + v71 + *v67) + 2) >> 2;
          _WORD *v64 = (257 * (v68 + v65 + v70 + *(v67 - 1)) + 2) >> 2;
          v64[1] = v72;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v16 += 2 * v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v8) + 2 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  if (v26 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    unint64_t v32 = v30 + v10 + v9 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) | (*(unsigned __int8 *)(v32 + i) << 8);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      unint64_t v37 = v16 + 4;
      __int16 v39 = v16[1] | (v16[1] << 8);
      *unint64_t v23 = *v16 | (*v16 << 8);
      v23[1] = v39;
      int v38 = v23 + 2;
    }
    else
    {
      unint64_t v37 = v16;
      int v38 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        __int16 v42 = v37[1] | (v37[1] << 8);
        *int v41 = *v37 | (*v37 << 8);
        v41[1] = v42;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v16 += 2 * v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v15;
    do
    {
      int v46 = v16;
      int v47 = v23;
      if (v9)
      {
        int v46 = v16 + 4;
        __int16 v48 = v16[1] | (v16[1] << 8);
        *unint64_t v23 = *v16 | (*v16 << 8);
        v23[1] = v48;
        int v47 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          int v50 = &v47[v49];
          __int16 v51 = v46[1] | (v46[1] << 8);
          *int v50 = *v46 | (*v46 << 8);
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v16 += v45;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_444f_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + 2 * v9);
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v24 + i))) >> 32)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  unint64_t v26 = v8 & 1;
  if (v17 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      int v34 = v12[1];
      unint64_t v32 = v12 + 2;
      _WORD *v16 = 16 * ((16843010 * (unint64_t)(3584 * *v12)) >> 32) + 4096;
      v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v34)) >> 32) + 4096;
      uint64_t v33 = v16 + 2;
    }
    else
    {
      unint64_t v32 = v12;
      uint64_t v33 = v16;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        int v37 = *v32;
        int v38 = v32[1];
        v32 += 2;
        *uint64_t v33 = 16 * ((16843010 * (unint64_t)(3584 * v37)) >> 32) + 4096;
        v33[1] = 16 * ((16843010 * (unint64_t)(3584 * v38)) >> 32) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      int v39 = *v32;
      int v40 = v32[1];
      *uint64_t v33 = 16 * ((16843010 * (unint64_t)(3584 * v39)) >> 32) + 4096;
      v33[1] = 16 * ((16843010 * (unint64_t)(3584 * v40)) >> 32) + 4096;
    }
    v12 += v11;
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v17 - v27;
    do
    {
      unint64_t v43 = v12;
      unint64_t v44 = v16;
      if (v28)
      {
        int v45 = v12[1];
        unint64_t v43 = v12 + 2;
        _WORD *v16 = 16 * ((16843010 * (unint64_t)(3584 * *v12)) >> 32) + 4096;
        v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v45)) >> 32) + 4096;
        unint64_t v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          int v48 = *v43;
          int v49 = v43[1];
          v43 += 2;
          *unint64_t v44 = 16 * ((16843010 * (unint64_t)(3584 * v48)) >> 32) + 4096;
          v44[1] = 16 * ((16843010 * (unint64_t)(3584 * v49)) >> 32) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        int v50 = *v43;
        int v51 = v43[1];
        *unint64_t v44 = 16 * ((16843010 * (unint64_t)(3584 * v50)) >> 32) + 4096;
        v44[1] = 16 * ((16843010 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      }
      v12 += v11;
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if (v28)
    {
      int v52 = *v12;
      int v53 = v12[1];
      v12 += 2;
      _WORD *v16 = 16 * ((16843010 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v53)) >> 32) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        int v55 = *v12;
        int v56 = v12[1];
        v12 += 2;
        _WORD *v16 = 16 * ((16843010 * (unint64_t)(3584 * v55)) >> 32) + 4096;
        v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v56)) >> 32) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      int v57 = *v12;
      int v58 = v12[1];
      _WORD *v16 = 16 * ((16843010 * (unint64_t)(3584 * v57)) >> 32) + 4096;
      v16[1] = 16 * ((16843010 * (unint64_t)(3584 * v58)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_444f_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v23 + i))) >> 32)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      int v33 = v13[1];
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = 16 * ((16843010 * (unint64_t)(3584 * *v13)) >> 32) + 4096;
      v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v33)) >> 32) + 4096;
      unint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      unint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        int v36 = *v31;
        int v37 = v31[1];
        v31 += 2;
        _WORD *v32 = 16 * ((16843010 * (unint64_t)(3584 * v36)) >> 32) + 4096;
        v32[1] = 16 * ((16843010 * (unint64_t)(3584 * v37)) >> 32) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      int v38 = *v31;
      int v39 = v31[1];
      _WORD *v32 = 16 * ((16843010 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      v32[1] = 16 * ((16843010 * (unint64_t)(3584 * v39)) >> 32) + 4096;
    }
    v13 += v12;
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        int v44 = v13[1];
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = 16 * ((16843010 * (unint64_t)(3584 * *v13)) >> 32) + 4096;
        v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v44)) >> 32) + 4096;
        unint64_t v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          int v47 = *v42;
          int v48 = v42[1];
          v42 += 2;
          *unint64_t v43 = 16 * ((16843010 * (unint64_t)(3584 * v47)) >> 32) + 4096;
          v43[1] = 16 * ((16843010 * (unint64_t)(3584 * v48)) >> 32) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *unint64_t v43 = 16 * ((16843010 * (unint64_t)(3584 * v49)) >> 32) + 4096;
        v43[1] = 16 * ((16843010 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      }
      v13 += v12;
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      int v51 = *v13;
      int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = 16 * ((16843010 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        int v54 = *v13;
        int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = 16 * ((16843010 * (unint64_t)(3584 * v54)) >> 32) + 4096;
        v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v55)) >> 32) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      int v56 = *v13;
      int v57 = v13[1];
      *unint64_t v17 = 16 * ((16843010 * (unint64_t)(3584 * v56)) >> 32) + 4096;
      v17[1] = 16 * ((16843010 * (unint64_t)(3584 * v57)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_444f_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v23 + i))) >> 32);
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      int v33 = v13[1];
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = 16 * ((16843010 * (unint64_t)(4095 * *v13)) >> 32);
      v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v33)) >> 32);
      unint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      unint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        int v36 = *v31;
        int v37 = v31[1];
        v31 += 2;
        _WORD *v32 = 16 * ((16843010 * (unint64_t)(4095 * v36)) >> 32);
        v32[1] = 16 * ((16843010 * (unint64_t)(4095 * v37)) >> 32);
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      int v38 = *v31;
      int v39 = v31[1];
      _WORD *v32 = 16 * ((16843010 * (unint64_t)(4095 * v38)) >> 32);
      v32[1] = 16 * ((16843010 * (unint64_t)(4095 * v39)) >> 32);
    }
    v13 += v12;
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        int v44 = v13[1];
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = 16 * ((16843010 * (unint64_t)(4095 * *v13)) >> 32);
        v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v44)) >> 32);
        unint64_t v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          int v47 = *v42;
          int v48 = v42[1];
          v42 += 2;
          *unint64_t v43 = 16 * ((16843010 * (unint64_t)(4095 * v47)) >> 32);
          v43[1] = 16 * ((16843010 * (unint64_t)(4095 * v48)) >> 32);
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *unint64_t v43 = 16 * ((16843010 * (unint64_t)(4095 * v49)) >> 32);
        v43[1] = 16 * ((16843010 * (unint64_t)(4095 * v50)) >> 32);
      }
      v13 += v12;
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      int v51 = *v13;
      int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = 16 * ((16843010 * (unint64_t)(4095 * v51)) >> 32);
      v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v52)) >> 32);
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        int v54 = *v13;
        int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = 16 * ((16843010 * (unint64_t)(4095 * v54)) >> 32);
        v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v55)) >> 32);
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      int v56 = *v13;
      int v57 = v13[1];
      *unint64_t v17 = 16 * ((16843010 * (unint64_t)(4095 * v56)) >> 32);
      v17[1] = 16 * ((16843010 * (unint64_t)(4095 * v57)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v30 + i))) >> 32)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v32 = v12 & 1;
  if (v9 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v36 = v14 + 4;
      int v38 = ((16843010 * (unint64_t)(3584 * v14[3])) >> 32)
          + ((16843010 * (unint64_t)(3584 * v14[1])) >> 32);
      *uint64_t v21 = (8
            * (((16843010 * (unint64_t)(3584 * v14[2])) >> 32)
             + ((16843010 * (unint64_t)(3584 * *v14)) >> 32))
            + 4104) & 0xFFF0;
      v21[1] = (8 * v38 + 4104) & 0xFFF0;
      int v37 = v21 + 2;
    }
    else
    {
      int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        int v41 = ((16843010 * (unint64_t)(3584 * v36[3])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v36[1])) >> 32);
        *unint64_t v40 = (8
              * (((16843010 * (unint64_t)(3584 * v36[2])) >> 32)
               + ((16843010 * (unint64_t)(3584 * *v36)) >> 32))
              + 4104) & 0xFFF0;
        v40[1] = (8 * v41 + 4104) & 0xFFF0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v9 - v33;
    do
    {
      int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v44 = v14 + 4;
        int v46 = ((16843010 * (unint64_t)(3584 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v14[1])) >> 32);
        *uint64_t v21 = (8
              * (((16843010 * (unint64_t)(3584 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(3584 * *v14)) >> 32))
              + 4104) & 0xFFF0;
        v21[1] = (8 * v46 + 4104) & 0xFFF0;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          int v49 = ((16843010 * (unint64_t)(3584 * v44[3])) >> 32)
              + ((16843010 * (unint64_t)(3584 * v44[1])) >> 32);
          _WORD *v48 = (8
                * (((16843010 * (unint64_t)(3584 * v44[2])) >> 32)
                 + ((16843010 * (unint64_t)(3584 * *v44)) >> 32))
                + 4104) & 0xFFF0;
          v48[1] = (8 * v49 + 4104) & 0xFFF0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if (v34)
    {
      int v50 = *v14;
      int v51 = v14[1];
      int v52 = v14[2];
      int v53 = v14[3];
      v14 += 4;
      *uint64_t v21 = (8
            * (((16843010 * (unint64_t)(3584 * v52)) >> 32)
             + ((16843010 * (unint64_t)(3584 * v50)) >> 32))
            + 4104) & 0xFFF0;
      v21[1] = (8
              * (((16843010 * (unint64_t)(3584 * v53)) >> 32)
               + ((16843010 * (unint64_t)(3584 * v51)) >> 32))
              + 4104) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        int v55 = &v21[v54];
        int v56 = ((16843010 * (unint64_t)(3584 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v14[1])) >> 32);
        _WORD *v55 = (8
              * (((16843010 * (unint64_t)(3584 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(3584 * *v14)) >> 32))
              + 4104) & 0xFFF0;
        v55[1] = (8 * v56 + 4104) & 0xFFF0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v30 + i))) >> 32)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v38 = v14[1];
      int v36 = v14 + 4;
      *uint64_t v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
      v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      int v37 = v21 + 2;
    }
    else
    {
      int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unint64_t v41 = (16843010 * (unint64_t)(3584 * v36[1])) >> 32;
        *unint64_t v40 = 16 * ((16843010 * (unint64_t)(3584 * *v36)) >> 32) + 4096;
        v40[1] = 16 * v41 + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v46 = v14[1];
        int v44 = v14 + 4;
        *uint64_t v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v46)) >> 32) + 4096;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          unint64_t v49 = (16843010 * (unint64_t)(3584 * v44[1])) >> 32;
          _WORD *v48 = 16 * ((16843010 * (unint64_t)(3584 * *v44)) >> 32) + 4096;
          v48[1] = 16 * v49 + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      int v50 = *v14;
      int v51 = v14[1];
      v14 += 4;
      *uint64_t v21 = 16 * ((16843010 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unint64_t v54 = (16843010 * (unint64_t)(3584 * v14[1])) >> 32;
        *int v53 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        v53[1] = 16 * v54 + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v28 + i))) >> 32)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      int v36 = ((16843010 * (unint64_t)(3584 * v14[3])) >> 32)
          + ((16843010 * (unint64_t)(3584 * v14[1])) >> 32);
      *uint64_t v21 = (8
            * (((16843010 * (unint64_t)(3584 * v14[2])) >> 32)
             + ((16843010 * (unint64_t)(3584 * *v14)) >> 32))
            + 4104) & 0xFFF0;
      v21[1] = (8 * v36 + 4104) & 0xFFF0;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        int v39 = ((16843010 * (unint64_t)(3584 * v34[3])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v34[1])) >> 32);
        _WORD *v38 = (8
              * (((16843010 * (unint64_t)(3584 * v34[2])) >> 32)
               + ((16843010 * (unint64_t)(3584 * *v34)) >> 32))
              + 4104) & 0xFFF0;
        v38[1] = (8 * v39 + 4104) & 0xFFF0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        int v44 = ((16843010 * (unint64_t)(3584 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v14[1])) >> 32);
        *uint64_t v21 = (8
              * (((16843010 * (unint64_t)(3584 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(3584 * *v14)) >> 32))
              + 4104) & 0xFFF0;
        v21[1] = (8 * v44 + 4104) & 0xFFF0;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          int v47 = ((16843010 * (unint64_t)(3584 * v42[3])) >> 32)
              + ((16843010 * (unint64_t)(3584 * v42[1])) >> 32);
          _WORD *v46 = (8
                * (((16843010 * (unint64_t)(3584 * v42[2])) >> 32)
                 + ((16843010 * (unint64_t)(3584 * *v42)) >> 32))
                + 4104) & 0xFFF0;
          v46[1] = (8 * v47 + 4104) & 0xFFF0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      int v50 = v14[2];
      int v51 = v14[3];
      v14 += 4;
      *uint64_t v21 = (8
            * (((16843010 * (unint64_t)(3584 * v50)) >> 32)
             + ((16843010 * (unint64_t)(3584 * v48)) >> 32))
            + 4104) & 0xFFF0;
      v21[1] = (8
              * (((16843010 * (unint64_t)(3584 * v51)) >> 32)
               + ((16843010 * (unint64_t)(3584 * v49)) >> 32))
              + 4104) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        int v54 = ((16843010 * (unint64_t)(3584 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v14[1])) >> 32);
        *int v53 = (8
              * (((16843010 * (unint64_t)(3584 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(3584 * *v14)) >> 32))
              + 4104) & 0xFFF0;
        v53[1] = (8 * v54 + 4104) & 0xFFF0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v28 + i))) >> 32)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1];
      char v34 = v14 + 4;
      *uint64_t v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
      v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v36)) >> 32) + 4096;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (16843010 * (unint64_t)(3584 * v34[1])) >> 32;
        _WORD *v38 = 16 * ((16843010 * (unint64_t)(3584 * *v34)) >> 32) + 4096;
        v38[1] = 16 * v39 + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        int v44 = v14[1];
        unint64_t v42 = v14 + 4;
        *uint64_t v21 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v44)) >> 32) + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unint64_t v47 = (16843010 * (unint64_t)(3584 * v42[1])) >> 32;
          _WORD *v46 = 16 * ((16843010 * (unint64_t)(3584 * *v42)) >> 32) + 4096;
          v46[1] = 16 * v47 + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      v14 += 4;
      *uint64_t v21 = 16 * ((16843010 * (unint64_t)(3584 * v48)) >> 32) + 4096;
      v21[1] = 16 * ((16843010 * (unint64_t)(3584 * v49)) >> 32) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        unint64_t v52 = (16843010 * (unint64_t)(3584 * v14[1])) >> 32;
        *int v51 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        v51[1] = 16 * v52 + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v28 + i))) >> 32);
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      int v36 = ((16843010 * (unint64_t)(4095 * v14[3])) >> 32)
          + ((16843010 * (unint64_t)(4095 * v14[1])) >> 32);
      *uint64_t v21 = (8
            * (((16843010 * (unint64_t)(4095 * v14[2])) >> 32)
             + ((16843010 * (unint64_t)(4095 * *v14)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8 * v36 + 8) & 0xFFF0;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        int v39 = ((16843010 * (unint64_t)(4095 * v34[3])) >> 32)
            + ((16843010 * (unint64_t)(4095 * v34[1])) >> 32);
        _WORD *v38 = (8
              * (((16843010 * (unint64_t)(4095 * v34[2])) >> 32)
               + ((16843010 * (unint64_t)(4095 * *v34)) >> 32))
              + 8) & 0xFFF0;
        v38[1] = (8 * v39 + 8) & 0xFFF0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        int v44 = ((16843010 * (unint64_t)(4095 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(4095 * v14[1])) >> 32);
        *uint64_t v21 = (8
              * (((16843010 * (unint64_t)(4095 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(4095 * *v14)) >> 32))
              + 8) & 0xFFF0;
        v21[1] = (8 * v44 + 8) & 0xFFF0;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          int v47 = ((16843010 * (unint64_t)(4095 * v42[3])) >> 32)
              + ((16843010 * (unint64_t)(4095 * v42[1])) >> 32);
          _WORD *v46 = (8
                * (((16843010 * (unint64_t)(4095 * v42[2])) >> 32)
                 + ((16843010 * (unint64_t)(4095 * *v42)) >> 32))
                + 8) & 0xFFF0;
          v46[1] = (8 * v47 + 8) & 0xFFF0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      int v50 = v14[2];
      int v51 = v14[3];
      v14 += 4;
      *uint64_t v21 = (8
            * (((16843010 * (unint64_t)(4095 * v50)) >> 32)
             + ((16843010 * (unint64_t)(4095 * v48)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((16843010 * (unint64_t)(4095 * v51)) >> 32)
               + ((16843010 * (unint64_t)(4095 * v49)) >> 32))
              + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        int v54 = ((16843010 * (unint64_t)(4095 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(4095 * v14[1])) >> 32);
        *int v53 = (8
              * (((16843010 * (unint64_t)(4095 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(4095 * *v14)) >> 32))
              + 8) & 0xFFF0;
        v53[1] = (8 * v54 + 8) & 0xFFF0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v28 + i))) >> 32);
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1];
      char v34 = v14 + 4;
      *uint64_t v21 = 16 * ((16843010 * (unint64_t)(4095 * *v14)) >> 32);
      v21[1] = 16 * ((16843010 * (unint64_t)(4095 * v36)) >> 32);
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (16843010 * (unint64_t)(4095 * v34[1])) >> 32;
        _WORD *v38 = 16 * ((16843010 * (unint64_t)(4095 * *v34)) >> 32);
        v38[1] = 16 * v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        int v44 = v14[1];
        unint64_t v42 = v14 + 4;
        *uint64_t v21 = 16 * ((16843010 * (unint64_t)(4095 * *v14)) >> 32);
        v21[1] = 16 * ((16843010 * (unint64_t)(4095 * v44)) >> 32);
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unint64_t v47 = (16843010 * (unint64_t)(4095 * v42[1])) >> 32;
          _WORD *v46 = 16 * ((16843010 * (unint64_t)(4095 * *v42)) >> 32);
          v46[1] = 16 * v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      v14 += 4;
      *uint64_t v21 = 16 * ((16843010 * (unint64_t)(4095 * v48)) >> 32);
      v21[1] = 16 * ((16843010 * (unint64_t)(4095 * v49)) >> 32);
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        unint64_t v52 = (16843010 * (unint64_t)(4095 * v14[1])) >> 32;
        *int v51 = 16 * ((16843010 * (unint64_t)(4095 * *v14)) >> 32);
        v51[1] = 16 * v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v8);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    unint64_t v32 = v30 + v10 + v8 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v32 + i))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1)) {
    uint64_t v35 = v9 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v9)
  {
    if (v8)
    {
      unint64_t v39 = &v15[v14 + 2];
      int v40 = *v39;
      int v41 = v39[1];
      unint64_t v37 = v15 + 4;
      int v42 = ((16843010 * (unint64_t)(3584 * v15[v14 + 1])) >> 32)
          + ((16843010 * (unint64_t)(3584 * v15[1])) >> 32)
          + ((16843010 * (unint64_t)(3584 * v15[3])) >> 32)
          + ((16843010 * (unint64_t)(3584 * v41)) >> 32);
      _WORD *v22 = (4
            * (((16843010 * (unint64_t)(3584 * v15[v14])) >> 32)
             + ((16843010 * (unint64_t)(3584 * *v15)) >> 32)
             + ((16843010 * (unint64_t)(3584 * v15[2])) >> 32)
             + ((16843010 * (unint64_t)(3584 * v40)) >> 32))
            + 4104) & 0xFFF0;
      v22[1] = (4 * v42 + 4104) & 0xFFF0;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v43 = 0;
      int v44 = v37 + 3;
      do
      {
        unint64_t v45 = &v38[v43];
        int v46 = *(v44 - 3);
        int v47 = *(v44 - 2);
        int v48 = &v44[v14];
        int v49 = v44[v14 - 3];
        int v50 = v44[v14 - 2];
        int v51 = *(v44 - 1);
        int v52 = *v44;
        v44 += 4;
        int v53 = *(v48 - 1);
        LODWORD(v48) = *v48;
        _WORD *v45 = (4
              * (((16843010 * (unint64_t)(3584 * v49)) >> 32)
               + ((16843010 * (unint64_t)(3584 * v46)) >> 32)
               + ((16843010 * (unint64_t)(3584 * v51)) >> 32)
               + ((16843010 * (unint64_t)(3584 * v53)) >> 32))
              + 4104) & 0xFFF0;
        v45[1] = (4
                * (((16843010 * (unint64_t)(3584 * v50)) >> 32)
                 + ((16843010 * (unint64_t)(3584 * v47)) >> 32)
                 + ((16843010 * (unint64_t)(3584 * v52)) >> 32)
                 + ((16843010 * (unint64_t)(3584 * v48)) >> 32))
                + 4104) & 0xFFF0;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v15 += 2 * v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v54 = 0;
    unint64_t v55 = v26 - v35;
    do
    {
      int v56 = v15;
      int v57 = v22;
      if (v8)
      {
        int v58 = &v15[v14 + 2];
        int v59 = *v58;
        int v60 = v58[1];
        int v56 = v15 + 4;
        int v61 = ((16843010 * (unint64_t)(3584 * v15[v14 + 1])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v15[1])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v15[3])) >> 32)
            + ((16843010 * (unint64_t)(3584 * v60)) >> 32);
        _WORD *v22 = (4
              * (((16843010 * (unint64_t)(3584 * v15[v14])) >> 32)
               + ((16843010 * (unint64_t)(3584 * *v15)) >> 32)
               + ((16843010 * (unint64_t)(3584 * v15[2])) >> 32)
               + ((16843010 * (unint64_t)(3584 * v59)) >> 32))
              + 4104) & 0xFFF0;
        v22[1] = (4 * v61 + 4104) & 0xFFF0;
        int v57 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v62 = 0;
        int v63 = v56 + 3;
        do
        {
          int v64 = &v57[v62];
          int v65 = *(v63 - 3);
          int v66 = *(v63 - 2);
          int v67 = &v63[v14];
          int v68 = v63[v14 - 3];
          int v69 = v63[v14 - 2];
          int v70 = *(v63 - 1);
          int v71 = *v63;
          v63 += 4;
          int v72 = *(v67 - 1);
          LODWORD(v67) = *v67;
          _WORD *v64 = (4
                * (((16843010 * (unint64_t)(3584 * v68)) >> 32)
                 + ((16843010 * (unint64_t)(3584 * v65)) >> 32)
                 + ((16843010 * (unint64_t)(3584 * v70)) >> 32)
                 + ((16843010 * (unint64_t)(3584 * v72)) >> 32))
                + 4104) & 0xFFF0;
          v64[1] = (4
                  * (((16843010 * (unint64_t)(3584 * v69)) >> 32)
                   + ((16843010 * (unint64_t)(3584 * v66)) >> 32)
                   + ((16843010 * (unint64_t)(3584 * v71)) >> 32)
                   + ((16843010 * (unint64_t)(3584 * v67)) >> 32))
                  + 4104) & 0xFFF0;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v15 += 2 * v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v8);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    unint64_t v32 = v30 + v10 + v8 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v32 + i))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1)) {
    uint64_t v35 = v9 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v9)
  {
    if (v8)
    {
      int v39 = v15[1];
      unint64_t v37 = v15 + 4;
      _WORD *v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
      v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v39)) >> 32) + 4096;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (16843010 * (unint64_t)(3584 * v37[1])) >> 32;
        *int v41 = 16 * ((16843010 * (unint64_t)(3584 * *v37)) >> 32) + 4096;
        v41[1] = 16 * v42 + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      int v46 = v15;
      int v47 = v22;
      if (v8)
      {
        int v48 = v15[1];
        int v46 = v15 + 4;
        _WORD *v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
        v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v48)) >> 32) + 4096;
        int v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          int v50 = &v47[v49];
          unint64_t v51 = (16843010 * (unint64_t)(3584 * v46[1])) >> 32;
          *int v50 = 16 * ((16843010 * (unint64_t)(3584 * *v46)) >> 32) + 4096;
          v50[1] = 16 * v51 + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 += v45;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v8);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    unint64_t v32 = v30 + v10 + v8 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v32 + i))) >> 32);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1)) {
    uint64_t v35 = v9 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v9)
  {
    if (v8)
    {
      int v39 = &v15[v14 + 2];
      int v40 = *v39;
      int v41 = v39[1];
      unint64_t v37 = v15 + 4;
      int v42 = ((16843010 * (unint64_t)(4095 * v15[v14 + 1])) >> 32)
          + ((16843010 * (unint64_t)(4095 * v15[1])) >> 32)
          + ((16843010 * (unint64_t)(4095 * v15[3])) >> 32)
          + ((16843010 * (unint64_t)(4095 * v41)) >> 32);
      _WORD *v22 = (4
            * (((16843010 * (unint64_t)(4095 * v15[v14])) >> 32)
             + ((16843010 * (unint64_t)(4095 * *v15)) >> 32)
             + ((16843010 * (unint64_t)(4095 * v15[2])) >> 32)
             + ((16843010 * (unint64_t)(4095 * v40)) >> 32))
            + 8) & 0xFFF0;
      v22[1] = (4 * v42 + 8) & 0xFFF0;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v43 = 0;
      unint64_t v44 = v37 + 3;
      do
      {
        uint64_t v45 = &v38[v43];
        int v46 = *(v44 - 3);
        int v47 = *(v44 - 2);
        int v48 = &v44[v14];
        int v49 = v44[v14 - 3];
        int v50 = v44[v14 - 2];
        int v51 = *(v44 - 1);
        int v52 = *v44;
        v44 += 4;
        int v53 = *(v48 - 1);
        LODWORD(v48) = *v48;
        _WORD *v45 = (4
              * (((16843010 * (unint64_t)(4095 * v49)) >> 32)
               + ((16843010 * (unint64_t)(4095 * v46)) >> 32)
               + ((16843010 * (unint64_t)(4095 * v51)) >> 32)
               + ((16843010 * (unint64_t)(4095 * v53)) >> 32))
              + 8) & 0xFFF0;
        v45[1] = (4
                * (((16843010 * (unint64_t)(4095 * v50)) >> 32)
                 + ((16843010 * (unint64_t)(4095 * v47)) >> 32)
                 + ((16843010 * (unint64_t)(4095 * v52)) >> 32)
                 + ((16843010 * (unint64_t)(4095 * v48)) >> 32))
                + 8) & 0xFFF0;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v15 += 2 * v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v54 = 0;
    unint64_t v55 = v26 - v35;
    do
    {
      int v56 = v15;
      int v57 = v22;
      if (v8)
      {
        int v58 = &v15[v14 + 2];
        int v59 = *v58;
        int v60 = v58[1];
        int v56 = v15 + 4;
        int v61 = ((16843010 * (unint64_t)(4095 * v15[v14 + 1])) >> 32)
            + ((16843010 * (unint64_t)(4095 * v15[1])) >> 32)
            + ((16843010 * (unint64_t)(4095 * v15[3])) >> 32)
            + ((16843010 * (unint64_t)(4095 * v60)) >> 32);
        _WORD *v22 = (4
              * (((16843010 * (unint64_t)(4095 * v15[v14])) >> 32)
               + ((16843010 * (unint64_t)(4095 * *v15)) >> 32)
               + ((16843010 * (unint64_t)(4095 * v15[2])) >> 32)
               + ((16843010 * (unint64_t)(4095 * v59)) >> 32))
              + 8) & 0xFFF0;
        v22[1] = (4 * v61 + 8) & 0xFFF0;
        int v57 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v62 = 0;
        int v63 = v56 + 3;
        do
        {
          int v64 = &v57[v62];
          int v65 = *(v63 - 3);
          int v66 = *(v63 - 2);
          int v67 = &v63[v14];
          int v68 = v63[v14 - 3];
          int v69 = v63[v14 - 2];
          int v70 = *(v63 - 1);
          int v71 = *v63;
          v63 += 4;
          int v72 = *(v67 - 1);
          LODWORD(v67) = *v67;
          _WORD *v64 = (4
                * (((16843010 * (unint64_t)(4095 * v68)) >> 32)
                 + ((16843010 * (unint64_t)(4095 * v65)) >> 32)
                 + ((16843010 * (unint64_t)(4095 * v70)) >> 32)
                 + ((16843010 * (unint64_t)(4095 * v72)) >> 32))
                + 8) & 0xFFF0;
          v64[1] = (4
                  * (((16843010 * (unint64_t)(4095 * v69)) >> 32)
                   + ((16843010 * (unint64_t)(4095 * v66)) >> 32)
                   + ((16843010 * (unint64_t)(4095 * v71)) >> 32)
                   + ((16843010 * (unint64_t)(4095 * v67)) >> 32))
                  + 8) & 0xFFF0;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v15 += 2 * v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v8);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    unint64_t v32 = v30 + v10 + v8 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v32 + i))) >> 32);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1)) {
    uint64_t v35 = v9 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v9)
  {
    if (v8)
    {
      int v39 = v15[1];
      unint64_t v37 = v15 + 4;
      _WORD *v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
      v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v39)) >> 32);
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (16843010 * (unint64_t)(4095 * v37[1])) >> 32;
        *int v41 = 16 * ((16843010 * (unint64_t)(4095 * *v37)) >> 32);
        v41[1] = 16 * v42;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      int v46 = v15;
      int v47 = v22;
      if (v8)
      {
        int v48 = v15[1];
        int v46 = v15 + 4;
        _WORD *v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
        v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v48)) >> 32);
        int v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          int v50 = &v47[v49];
          unint64_t v51 = (16843010 * (unint64_t)(4095 * v46[1])) >> 32;
          *int v50 = 16 * ((16843010 * (unint64_t)(4095 * *v46)) >> 32);
          v50[1] = 16 * v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 += v45;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_444f_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int8 *)(a3[1] + v11 * v8 + 2 * v9);
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v24 + i))) >> 32) << 6)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  unint64_t v26 = v8 & 1;
  if (v17 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      int v34 = v12[1];
      unint64_t v32 = v12 + 2;
      _WORD *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v12)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v34)) >> 32) << 6) + 4096;
      uint64_t v33 = v16 + 2;
    }
    else
    {
      unint64_t v32 = v12;
      uint64_t v33 = v16;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        int v37 = *v32;
        int v38 = v32[1];
        v32 += 2;
        *uint64_t v33 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v37)) >> 32) << 6) + 4096;
        v33[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      int v39 = *v32;
      int v40 = v32[1];
      *uint64_t v33 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
      v33[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v40)) >> 32) << 6) + 4096;
    }
    v12 += v11;
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v17 - v27;
    do
    {
      unint64_t v43 = v12;
      unint64_t v44 = v16;
      if (v28)
      {
        int v45 = v12[1];
        unint64_t v43 = v12 + 2;
        _WORD *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v12)) >> 32) << 6) + 4096;
        v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v45)) >> 32) << 6) + 4096;
        unint64_t v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          int v48 = *v43;
          int v49 = v43[1];
          v43 += 2;
          *unint64_t v44 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
          v44[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        int v50 = *v43;
        int v51 = v43[1];
        *unint64_t v44 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
        v44[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      }
      v12 += v11;
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if (v28)
    {
      int v52 = *v12;
      int v53 = v12[1];
      v12 += 2;
      _WORD *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v53)) >> 32) << 6) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        int v55 = *v12;
        int v56 = v12[1];
        v12 += 2;
        _WORD *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
        v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v56)) >> 32) << 6) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      int v57 = *v12;
      int v58 = v12[1];
      _WORD *v16 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v58)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_444f_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v23 + i))) >> 32) << 6)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      int v33 = v13[1];
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v13)) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v33)) >> 32) << 6) + 4096;
      unint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      unint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        int v36 = *v31;
        int v37 = v31[1];
        v31 += 2;
        _WORD *v32 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v36)) >> 32) << 6) + 4096;
        v32[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v37)) >> 32) << 6) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      int v38 = *v31;
      int v39 = v31[1];
      _WORD *v32 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      v32[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
    }
    v13 += v12;
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        int v44 = v13[1];
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v13)) >> 32) << 6) + 4096;
        v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
        unint64_t v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          int v47 = *v42;
          int v48 = v42[1];
          v42 += 2;
          *unint64_t v43 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v47)) >> 32) << 6) + 4096;
          v43[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *unint64_t v43 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
        v43[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      }
      v13 += v12;
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      int v51 = *v13;
      int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        int v54 = *v13;
        int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
        v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      int v56 = *v13;
      int v57 = v13[1];
      *unint64_t v17 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v56)) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_444f_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v23 + i))) >> 32) << 6;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      int v33 = v13[1];
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v13)) >> 32) << 6;
      v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v33)) >> 32) << 6;
      unint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      unint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        int v36 = *v31;
        int v37 = v31[1];
        v31 += 2;
        _WORD *v32 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v36)) >> 32) << 6;
        v32[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v37)) >> 32) << 6;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      int v38 = *v31;
      int v39 = v31[1];
      _WORD *v32 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v38)) >> 32) << 6;
      v32[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v39)) >> 32) << 6;
    }
    v13 += v12;
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        int v44 = v13[1];
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v13)) >> 32) << 6;
        v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v44)) >> 32) << 6;
        unint64_t v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          int v47 = *v42;
          int v48 = v42[1];
          v42 += 2;
          *unint64_t v43 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v47)) >> 32) << 6;
          v43[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v48)) >> 32) << 6;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        int v49 = *v42;
        int v50 = v42[1];
        *unint64_t v43 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v49)) >> 32) << 6;
        v43[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v50)) >> 32) << 6;
      }
      v13 += v12;
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      int v51 = *v13;
      int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v51)) >> 32) << 6;
      v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v52)) >> 32) << 6;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        int v54 = *v13;
        int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v54)) >> 32) << 6;
        v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v55)) >> 32) << 6;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      int v56 = *v13;
      int v57 = v13[1];
      *unint64_t v17 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v56)) >> 32) << 6;
      v17[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v57)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v30 + i))) >> 32) << 6)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v32 = v12 & 1;
  if (v9 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v36 = v14 + 4;
      int v38 = ((16843010 * (unint64_t)(896 * v14[3])) >> 32)
          + ((16843010 * (unint64_t)(896 * v14[1])) >> 32);
      *uint64_t v21 = (32
            * (((16843010 * (unint64_t)(896 * v14[2])) >> 32)
             + ((16843010 * (unint64_t)(896 * *v14)) >> 32))
            + 4128) & 0xFFC0;
      v21[1] = (32 * v38 + 4128) & 0xFFC0;
      int v37 = v21 + 2;
    }
    else
    {
      int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        int v41 = ((16843010 * (unint64_t)(896 * v36[3])) >> 32)
            + ((16843010 * (unint64_t)(896 * v36[1])) >> 32);
        *unint64_t v40 = (32
              * (((16843010 * (unint64_t)(896 * v36[2])) >> 32)
               + ((16843010 * (unint64_t)(896 * *v36)) >> 32))
              + 4128) & 0xFFC0;
        v40[1] = (32 * v41 + 4128) & 0xFFC0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v9 - v33;
    do
    {
      int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v44 = v14 + 4;
        int v46 = ((16843010 * (unint64_t)(896 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(896 * v14[1])) >> 32);
        *uint64_t v21 = (32
              * (((16843010 * (unint64_t)(896 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(896 * *v14)) >> 32))
              + 4128) & 0xFFC0;
        v21[1] = (32 * v46 + 4128) & 0xFFC0;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          int v49 = ((16843010 * (unint64_t)(896 * v44[3])) >> 32)
              + ((16843010 * (unint64_t)(896 * v44[1])) >> 32);
          _WORD *v48 = (32
                * (((16843010 * (unint64_t)(896 * v44[2])) >> 32)
                 + ((16843010 * (unint64_t)(896 * *v44)) >> 32))
                + 4128) & 0xFFC0;
          v48[1] = (32 * v49 + 4128) & 0xFFC0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if (v34)
    {
      int v50 = *v14;
      int v51 = v14[1];
      int v52 = v14[2];
      int v53 = v14[3];
      v14 += 4;
      *uint64_t v21 = (32
            * (((16843010 * (unint64_t)(896 * v52)) >> 32)
             + ((16843010 * (unint64_t)(896 * v50)) >> 32))
            + 4128) & 0xFFC0;
      v21[1] = (32
              * (((16843010 * (unint64_t)(896 * v53)) >> 32)
               + ((16843010 * (unint64_t)(896 * v51)) >> 32))
              + 4128) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        int v55 = &v21[v54];
        int v56 = ((16843010 * (unint64_t)(896 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(896 * v14[1])) >> 32);
        _WORD *v55 = (32
              * (((16843010 * (unint64_t)(896 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(896 * *v14)) >> 32))
              + 4128) & 0xFFC0;
        v55[1] = (32 * v56 + 4128) & 0xFFC0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + v10 + v9;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v30 + i))) >> 32) << 6)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v38 = v14[1];
      int v36 = v14 + 4;
      *uint64_t v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      int v37 = v21 + 2;
    }
    else
    {
      int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unint64_t v41 = (16843010 * (unint64_t)(896 * v36[1])) >> 32;
        *unint64_t v40 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v36)) >> 32) << 6) + 4096;
        v40[1] = ((_WORD)v41 << 6) + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v46 = v14[1];
        int v44 = v14 + 4;
        *uint64_t v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v46)) >> 32) << 6) + 4096;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          unint64_t v49 = (16843010 * (unint64_t)(896 * v44[1])) >> 32;
          _WORD *v48 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v44)) >> 32) << 6) + 4096;
          v48[1] = ((_WORD)v49 << 6) + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      int v50 = *v14;
      int v51 = v14[1];
      v14 += 4;
      *uint64_t v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unint64_t v54 = (16843010 * (unint64_t)(896 * v14[1])) >> 32;
        *int v53 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        v53[1] = ((_WORD)v54 << 6) + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v28 + i))) >> 32) << 6)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      int v36 = ((16843010 * (unint64_t)(896 * v14[3])) >> 32)
          + ((16843010 * (unint64_t)(896 * v14[1])) >> 32);
      *uint64_t v21 = (32
            * (((16843010 * (unint64_t)(896 * v14[2])) >> 32)
             + ((16843010 * (unint64_t)(896 * *v14)) >> 32))
            + 4128) & 0xFFC0;
      v21[1] = (32 * v36 + 4128) & 0xFFC0;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        int v39 = ((16843010 * (unint64_t)(896 * v34[3])) >> 32)
            + ((16843010 * (unint64_t)(896 * v34[1])) >> 32);
        _WORD *v38 = (32
              * (((16843010 * (unint64_t)(896 * v34[2])) >> 32)
               + ((16843010 * (unint64_t)(896 * *v34)) >> 32))
              + 4128) & 0xFFC0;
        v38[1] = (32 * v39 + 4128) & 0xFFC0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        int v44 = ((16843010 * (unint64_t)(896 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(896 * v14[1])) >> 32);
        *uint64_t v21 = (32
              * (((16843010 * (unint64_t)(896 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(896 * *v14)) >> 32))
              + 4128) & 0xFFC0;
        v21[1] = (32 * v44 + 4128) & 0xFFC0;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          int v47 = ((16843010 * (unint64_t)(896 * v42[3])) >> 32)
              + ((16843010 * (unint64_t)(896 * v42[1])) >> 32);
          _WORD *v46 = (32
                * (((16843010 * (unint64_t)(896 * v42[2])) >> 32)
                 + ((16843010 * (unint64_t)(896 * *v42)) >> 32))
                + 4128) & 0xFFC0;
          v46[1] = (32 * v47 + 4128) & 0xFFC0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      int v50 = v14[2];
      int v51 = v14[3];
      v14 += 4;
      *uint64_t v21 = (32
            * (((16843010 * (unint64_t)(896 * v50)) >> 32)
             + ((16843010 * (unint64_t)(896 * v48)) >> 32))
            + 4128) & 0xFFC0;
      v21[1] = (32
              * (((16843010 * (unint64_t)(896 * v51)) >> 32)
               + ((16843010 * (unint64_t)(896 * v49)) >> 32))
              + 4128) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        int v54 = ((16843010 * (unint64_t)(896 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(896 * v14[1])) >> 32);
        *int v53 = (32
              * (((16843010 * (unint64_t)(896 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(896 * *v14)) >> 32))
              + 4128) & 0xFFC0;
        v53[1] = (32 * v54 + 4128) & 0xFFC0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v28 + i))) >> 32) << 6)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1];
      char v34 = v14 + 4;
      *uint64_t v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v36)) >> 32) << 6) + 4096;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (16843010 * (unint64_t)(896 * v34[1])) >> 32;
        _WORD *v38 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v34)) >> 32) << 6) + 4096;
        v38[1] = ((_WORD)v39 << 6) + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        int v44 = v14[1];
        unint64_t v42 = v14 + 4;
        *uint64_t v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unint64_t v47 = (16843010 * (unint64_t)(896 * v42[1])) >> 32;
          _WORD *v46 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v42)) >> 32) << 6) + 4096;
          v46[1] = ((_WORD)v47 << 6) + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      v14 += 4;
      *uint64_t v21 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        unint64_t v52 = (16843010 * (unint64_t)(896 * v14[1])) >> 32;
        *int v51 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        v51[1] = ((_WORD)v52 << 6) + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v28 + i))) >> 32) << 6;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      int v36 = ((16843010 * (unint64_t)(1023 * v14[3])) >> 32)
          + ((16843010 * (unint64_t)(1023 * v14[1])) >> 32);
      *uint64_t v21 = (32
            * (((16843010 * (unint64_t)(1023 * v14[2])) >> 32)
             + ((16843010 * (unint64_t)(1023 * *v14)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32 * v36 + 32) & 0xFFC0;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        int v39 = ((16843010 * (unint64_t)(1023 * v34[3])) >> 32)
            + ((16843010 * (unint64_t)(1023 * v34[1])) >> 32);
        _WORD *v38 = (32
              * (((16843010 * (unint64_t)(1023 * v34[2])) >> 32)
               + ((16843010 * (unint64_t)(1023 * *v34)) >> 32))
              + 32) & 0xFFC0;
        v38[1] = (32 * v39 + 32) & 0xFFC0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        int v44 = ((16843010 * (unint64_t)(1023 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(1023 * v14[1])) >> 32);
        *uint64_t v21 = (32
              * (((16843010 * (unint64_t)(1023 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(1023 * *v14)) >> 32))
              + 32) & 0xFFC0;
        v21[1] = (32 * v44 + 32) & 0xFFC0;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          int v47 = ((16843010 * (unint64_t)(1023 * v42[3])) >> 32)
              + ((16843010 * (unint64_t)(1023 * v42[1])) >> 32);
          _WORD *v46 = (32
                * (((16843010 * (unint64_t)(1023 * v42[2])) >> 32)
                 + ((16843010 * (unint64_t)(1023 * *v42)) >> 32))
                + 32) & 0xFFC0;
          v46[1] = (32 * v47 + 32) & 0xFFC0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      int v50 = v14[2];
      int v51 = v14[3];
      v14 += 4;
      *uint64_t v21 = (32
            * (((16843010 * (unint64_t)(1023 * v50)) >> 32)
             + ((16843010 * (unint64_t)(1023 * v48)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32
              * (((16843010 * (unint64_t)(1023 * v51)) >> 32)
               + ((16843010 * (unint64_t)(1023 * v49)) >> 32))
              + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        int v54 = ((16843010 * (unint64_t)(1023 * v14[3])) >> 32)
            + ((16843010 * (unint64_t)(1023 * v14[1])) >> 32);
        *int v53 = (32
              * (((16843010 * (unint64_t)(1023 * v14[2])) >> 32)
               + ((16843010 * (unint64_t)(1023 * *v14)) >> 32))
              + 32) & 0xFFC0;
        v53[1] = (32 * v54 + 32) & 0xFFC0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + v10 + v8;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v28 + i))) >> 32) << 6;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1];
      char v34 = v14 + 4;
      *uint64_t v21 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v14)) >> 32) << 6;
      v21[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v36)) >> 32) << 6;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (16843010 * (unint64_t)(1023 * v34[1])) >> 32;
        _WORD *v38 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v34)) >> 32) << 6;
        v38[1] = (_WORD)v39 << 6;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        int v44 = v14[1];
        unint64_t v42 = v14 + 4;
        *uint64_t v21 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v14)) >> 32) << 6;
        v21[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v44)) >> 32) << 6;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unint64_t v47 = (16843010 * (unint64_t)(1023 * v42[1])) >> 32;
          _WORD *v46 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v42)) >> 32) << 6;
          v46[1] = (_WORD)v47 << 6;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      v14 += 4;
      *uint64_t v21 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v48)) >> 32) << 6;
      v21[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v49)) >> 32) << 6;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        unint64_t v52 = (16843010 * (unint64_t)(1023 * v14[1])) >> 32;
        *int v51 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v14)) >> 32) << 6;
        v51[1] = (_WORD)v52 << 6;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v8);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    unint64_t v32 = v30 + v10 + v8 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v32 + i))) >> 32) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1)) {
    uint64_t v35 = v9 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v9)
  {
    if (v8)
    {
      unint64_t v39 = &v15[v14 + 2];
      int v40 = *v39;
      int v41 = v39[1];
      unint64_t v37 = v15 + 4;
      int v42 = ((16843010 * (unint64_t)(896 * v15[v14 + 1])) >> 32)
          + ((16843010 * (unint64_t)(896 * v15[1])) >> 32)
          + ((16843010 * (unint64_t)(896 * v15[3])) >> 32)
          + ((16843010 * (unint64_t)(896 * v41)) >> 32);
      _WORD *v22 = (16
            * (((16843010 * (unint64_t)(896 * v15[v14])) >> 32)
             + ((16843010 * (unint64_t)(896 * *v15)) >> 32)
             + ((16843010 * (unint64_t)(896 * v15[2])) >> 32)
             + ((16843010 * (unint64_t)(896 * v40)) >> 32))
            + 4128) & 0xFFC0;
      v22[1] = (16 * v42 + 4128) & 0xFFC0;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v43 = 0;
      int v44 = v37 + 3;
      do
      {
        unint64_t v45 = &v38[v43];
        int v46 = *(v44 - 3);
        int v47 = *(v44 - 2);
        int v48 = &v44[v14];
        int v49 = v44[v14 - 3];
        int v50 = v44[v14 - 2];
        int v51 = *(v44 - 1);
        int v52 = *v44;
        v44 += 4;
        int v53 = *(v48 - 1);
        LODWORD(v48) = *v48;
        _WORD *v45 = (16
              * (((16843010 * (unint64_t)(896 * v49)) >> 32)
               + ((16843010 * (unint64_t)(896 * v46)) >> 32)
               + ((16843010 * (unint64_t)(896 * v51)) >> 32)
               + ((16843010 * (unint64_t)(896 * v53)) >> 32))
              + 4128) & 0xFFC0;
        v45[1] = (16
                * (((16843010 * (unint64_t)(896 * v50)) >> 32)
                 + ((16843010 * (unint64_t)(896 * v47)) >> 32)
                 + ((16843010 * (unint64_t)(896 * v52)) >> 32)
                 + ((16843010 * (unint64_t)(896 * v48)) >> 32))
                + 4128) & 0xFFC0;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v15 += 2 * v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v54 = 0;
    unint64_t v55 = v26 - v35;
    do
    {
      int v56 = v15;
      int v57 = v22;
      if (v8)
      {
        int v58 = &v15[v14 + 2];
        int v59 = *v58;
        int v60 = v58[1];
        int v56 = v15 + 4;
        int v61 = ((16843010 * (unint64_t)(896 * v15[v14 + 1])) >> 32)
            + ((16843010 * (unint64_t)(896 * v15[1])) >> 32)
            + ((16843010 * (unint64_t)(896 * v15[3])) >> 32)
            + ((16843010 * (unint64_t)(896 * v60)) >> 32);
        _WORD *v22 = (16
              * (((16843010 * (unint64_t)(896 * v15[v14])) >> 32)
               + ((16843010 * (unint64_t)(896 * *v15)) >> 32)
               + ((16843010 * (unint64_t)(896 * v15[2])) >> 32)
               + ((16843010 * (unint64_t)(896 * v59)) >> 32))
              + 4128) & 0xFFC0;
        v22[1] = (16 * v61 + 4128) & 0xFFC0;
        int v57 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v62 = 0;
        int v63 = v56 + 3;
        do
        {
          int v64 = &v57[v62];
          int v65 = *(v63 - 3);
          int v66 = *(v63 - 2);
          int v67 = &v63[v14];
          int v68 = v63[v14 - 3];
          int v69 = v63[v14 - 2];
          int v70 = *(v63 - 1);
          int v71 = *v63;
          v63 += 4;
          int v72 = *(v67 - 1);
          LODWORD(v67) = *v67;
          _WORD *v64 = (16
                * (((16843010 * (unint64_t)(896 * v68)) >> 32)
                 + ((16843010 * (unint64_t)(896 * v65)) >> 32)
                 + ((16843010 * (unint64_t)(896 * v70)) >> 32)
                 + ((16843010 * (unint64_t)(896 * v72)) >> 32))
                + 4128) & 0xFFC0;
          v64[1] = (16
                  * (((16843010 * (unint64_t)(896 * v69)) >> 32)
                   + ((16843010 * (unint64_t)(896 * v66)) >> 32)
                   + ((16843010 * (unint64_t)(896 * v71)) >> 32)
                   + ((16843010 * (unint64_t)(896 * v67)) >> 32))
                  + 4128) & 0xFFC0;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v15 += 2 * v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v8);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    unint64_t v32 = v30 + v10 + v8 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v32 + i))) >> 32) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1)) {
    uint64_t v35 = v9 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v9)
  {
    if (v8)
    {
      int v39 = v15[1];
      unint64_t v37 = v15 + 4;
      _WORD *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (16843010 * (unint64_t)(896 * v37[1])) >> 32;
        *int v41 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v37)) >> 32) << 6) + 4096;
        v41[1] = ((_WORD)v42 << 6) + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      int v46 = v15;
      int v47 = v22;
      if (v8)
      {
        int v48 = v15[1];
        int v46 = v15 + 4;
        _WORD *v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
        int v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          int v50 = &v47[v49];
          unint64_t v51 = (16843010 * (unint64_t)(896 * v46[1])) >> 32;
          *int v50 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v46)) >> 32) << 6) + 4096;
          v50[1] = ((_WORD)v51 << 6) + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 += v45;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v8);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    unint64_t v32 = v30 + v10 + v8 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v32 + i))) >> 32) << 6;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1)) {
    uint64_t v35 = v9 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v9)
  {
    if (v8)
    {
      int v39 = &v15[v14 + 2];
      int v40 = *v39;
      int v41 = v39[1];
      unint64_t v37 = v15 + 4;
      int v42 = ((16843010 * (unint64_t)(1023 * v15[v14 + 1])) >> 32)
          + ((16843010 * (unint64_t)(1023 * v15[1])) >> 32)
          + ((16843010 * (unint64_t)(1023 * v15[3])) >> 32)
          + ((16843010 * (unint64_t)(1023 * v41)) >> 32);
      _WORD *v22 = (16
            * (((16843010 * (unint64_t)(1023 * v15[v14])) >> 32)
             + ((16843010 * (unint64_t)(1023 * *v15)) >> 32)
             + ((16843010 * (unint64_t)(1023 * v15[2])) >> 32)
             + ((16843010 * (unint64_t)(1023 * v40)) >> 32))
            + 32) & 0xFFC0;
      v22[1] = (16 * v42 + 32) & 0xFFC0;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v43 = 0;
      unint64_t v44 = v37 + 3;
      do
      {
        uint64_t v45 = &v38[v43];
        int v46 = *(v44 - 3);
        int v47 = *(v44 - 2);
        int v48 = &v44[v14];
        int v49 = v44[v14 - 3];
        int v50 = v44[v14 - 2];
        int v51 = *(v44 - 1);
        int v52 = *v44;
        v44 += 4;
        int v53 = *(v48 - 1);
        LODWORD(v48) = *v48;
        _WORD *v45 = (16
              * (((16843010 * (unint64_t)(1023 * v49)) >> 32)
               + ((16843010 * (unint64_t)(1023 * v46)) >> 32)
               + ((16843010 * (unint64_t)(1023 * v51)) >> 32)
               + ((16843010 * (unint64_t)(1023 * v53)) >> 32))
              + 32) & 0xFFC0;
        v45[1] = (16
                * (((16843010 * (unint64_t)(1023 * v50)) >> 32)
                 + ((16843010 * (unint64_t)(1023 * v47)) >> 32)
                 + ((16843010 * (unint64_t)(1023 * v52)) >> 32)
                 + ((16843010 * (unint64_t)(1023 * v48)) >> 32))
                + 32) & 0xFFC0;
        v43 += 2;
      }
      while (v43 < v36);
    }
    v15 += 2 * v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v54 = 0;
    unint64_t v55 = v26 - v35;
    do
    {
      int v56 = v15;
      int v57 = v22;
      if (v8)
      {
        int v58 = &v15[v14 + 2];
        int v59 = *v58;
        int v60 = v58[1];
        int v56 = v15 + 4;
        int v61 = ((16843010 * (unint64_t)(1023 * v15[v14 + 1])) >> 32)
            + ((16843010 * (unint64_t)(1023 * v15[1])) >> 32)
            + ((16843010 * (unint64_t)(1023 * v15[3])) >> 32)
            + ((16843010 * (unint64_t)(1023 * v60)) >> 32);
        _WORD *v22 = (16
              * (((16843010 * (unint64_t)(1023 * v15[v14])) >> 32)
               + ((16843010 * (unint64_t)(1023 * *v15)) >> 32)
               + ((16843010 * (unint64_t)(1023 * v15[2])) >> 32)
               + ((16843010 * (unint64_t)(1023 * v59)) >> 32))
              + 32) & 0xFFC0;
        v22[1] = (16 * v61 + 32) & 0xFFC0;
        int v57 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v62 = 0;
        int v63 = v56 + 3;
        do
        {
          int v64 = &v57[v62];
          int v65 = *(v63 - 3);
          int v66 = *(v63 - 2);
          int v67 = &v63[v14];
          int v68 = v63[v14 - 3];
          int v69 = v63[v14 - 2];
          int v70 = *(v63 - 1);
          int v71 = *v63;
          v63 += 4;
          int v72 = *(v67 - 1);
          LODWORD(v67) = *v67;
          _WORD *v64 = (16
                * (((16843010 * (unint64_t)(1023 * v68)) >> 32)
                 + ((16843010 * (unint64_t)(1023 * v65)) >> 32)
                 + ((16843010 * (unint64_t)(1023 * v70)) >> 32)
                 + ((16843010 * (unint64_t)(1023 * v72)) >> 32))
                + 32) & 0xFFC0;
          v64[1] = (16
                  * (((16843010 * (unint64_t)(1023 * v69)) >> 32)
                   + ((16843010 * (unint64_t)(1023 * v66)) >> 32)
                   + ((16843010 * (unint64_t)(1023 * v71)) >> 32)
                   + ((16843010 * (unint64_t)(1023 * v67)) >> 32))
                  + 32) & 0xFFC0;
          v62 += 2;
        }
        while (v62 < v36);
      }
      v15 += 2 * v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * v12 + 2 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v8);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    unint64_t v32 = v30 + v10 + v8 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v32 + i))) >> 32) << 6;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v9 & 1)) {
    uint64_t v35 = v9 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v9)
  {
    if (v8)
    {
      int v39 = v15[1];
      unint64_t v37 = v15 + 4;
      _WORD *v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
      v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v39)) >> 32) << 6;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (16843010 * (unint64_t)(1023 * v37[1])) >> 32;
        *int v41 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v37)) >> 32) << 6;
        v41[1] = (_WORD)v42 << 6;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      int v46 = v15;
      int v47 = v22;
      if (v8)
      {
        int v48 = v15[1];
        int v46 = v15 + 4;
        _WORD *v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
        v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v48)) >> 32) << 6;
        int v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          int v50 = &v47[v49];
          unint64_t v51 = (16843010 * (unint64_t)(1023 * v46[1])) >> 32;
          *int v50 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v46)) >> 32) << 6;
          v50[1] = (_WORD)v51 << 6;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      v15 += v45;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_444f_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v15 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v14 + 2 * v15);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v14;
    uint64_t v22 = *a7 + *a8 * v14;
    uint64_t v23 = *a4;
    uint64_t v24 = v21 + v15;
    uint64_t v25 = v22 + v15;
    uint64_t v26 = *a3 + v23 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(unsigned char *)(v24 + i) = -1;
          *(unsigned char *)(v25 + i) = ((7204443 * *(unsigned __int8 *)(v26 + i)) >> 23) + 16;
        }
      }
      v26 += v23;
      v25 += v19;
      v24 += v20;
      ++v18;
    }
    while (v18 != v11);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v28 = v8 & 1;
  if (v11 >= v28) {
    uint64_t v29 = v8 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  char v30 = v9;
  unint64_t v31 = v9 & 1;
  if (v10 >= v31) {
    uint64_t v32 = v9 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  unint64_t v33 = v10 - v32;
  if (v8)
  {
    if (v9)
    {
      char v34 = v13 + 2;
      unsigned int v36 = (7368928 * v13[1]) >> 23;
      *uint64_t v17 = ((7368928 * *v13) >> 23) + 16;
      v17[1] = v36 + 16;
      uint64_t v35 = v17 + 2;
    }
    else
    {
      char v34 = v13;
      uint64_t v35 = v17;
    }
    if (v10 == v32)
    {
      unint64_t v37 = 0;
    }
    else
    {
      unint64_t v38 = v10 - v32;
      do
      {
        int v39 = *v34;
        int v40 = v34[1];
        v34 += 2;
        *uint64_t v35 = ((7368928 * v39) >> 23) + 16;
        v35[1] = ((7368928 * v40) >> 23) + 16;
        v35 += 2;
        --v38;
      }
      while (v38);
      unint64_t v37 = v10 - v32;
    }
    if (v37 + v31 < v10)
    {
      int v41 = *v34;
      unsigned int v42 = (7368928 * v34[1]) >> 23;
      *uint64_t v35 = ((7368928 * v41) >> 23) + 16;
      v35[1] = v42 + 16;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v29)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v11 - v29;
    do
    {
      uint64_t v45 = v13;
      int v46 = v17;
      if (v30)
      {
        uint64_t v45 = v13 + 2;
        unsigned int v47 = (7368928 * v13[1]) >> 23;
        *uint64_t v17 = ((7368928 * *v13) >> 23) + 16;
        v17[1] = v47 + 16;
        int v46 = v17 + 2;
      }
      if (v10 == v32)
      {
        unint64_t v48 = 0;
      }
      else
      {
        unint64_t v49 = v10 - v32;
        do
        {
          int v50 = *v45;
          int v51 = v45[1];
          v45 += 2;
          unsigned char *v46 = ((7368928 * v50) >> 23) + 16;
          v46[1] = ((7368928 * v51) >> 23) + 16;
          v46 += 2;
          --v49;
        }
        while (v49);
        unint64_t v48 = v10 - v32;
      }
      if (v48 + v31 < v10)
      {
        int v52 = *v45;
        unsigned int v53 = (7368928 * v45[1]) >> 23;
        unsigned char *v46 = ((7368928 * v52) >> 23) + 16;
        v46[1] = v53 + 16;
      }
      v13 += v12;
      v17 += v16;
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v11)
  {
    if (v30)
    {
      int v54 = *v13;
      int v55 = v13[1];
      v13 += 2;
      *uint64_t v17 = ((7368928 * v54) >> 23) + 16;
      v17[1] = ((7368928 * v55) >> 23) + 16;
      v17 += 2;
    }
    if (v10 == v32)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v56 = v10 - v32;
      do
      {
        int v57 = *v13;
        int v58 = v13[1];
        v13 += 2;
        *uint64_t v17 = ((7368928 * v57) >> 23) + 16;
        v17[1] = ((7368928 * v58) >> 23) + 16;
        v17 += 2;
        --v56;
      }
      while (v56);
    }
    if (v33 + v31 < v10)
    {
      int v59 = *v13;
      unsigned int v60 = (7368928 * v13[1]) >> 23;
      *uint64_t v17 = ((7368928 * v59) >> 23) + 16;
      v17[1] = v60 + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_444f_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v8 + 2 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v15 + 2 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v15 + v14;
    uint64_t v22 = *a3 + *a4 * v8 + v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(unsigned char *)(v21 + i) = ((7204443 * *(unsigned __int8 *)(v22 + i)) >> 23) + 16;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v24 = v8 & 1;
  if (v11 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    uint64_t v28 = v9 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v26)
    {
      char v30 = v13 + 2;
      unsigned int v32 = (7368928 * v13[1]) >> 23;
      *uint64_t v17 = ((7368928 * *v13) >> 23) + 16;
      v17[1] = v32 + 16;
      unint64_t v31 = v17 + 2;
    }
    else
    {
      char v30 = v13;
      unint64_t v31 = v17;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        int v35 = *v30;
        int v36 = v30[1];
        v30 += 2;
        *unint64_t v31 = ((7368928 * v35) >> 23) + 16;
        v31[1] = ((7368928 * v36) >> 23) + 16;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      int v37 = *v30;
      unsigned int v38 = (7368928 * v30[1]) >> 23;
      *unint64_t v31 = ((7368928 * v37) >> 23) + 16;
      v31[1] = v38 + 16;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v11 - v25;
    do
    {
      int v41 = v13;
      unsigned int v42 = v17;
      if (v26)
      {
        int v41 = v13 + 2;
        unsigned int v43 = (7368928 * v13[1]) >> 23;
        *uint64_t v17 = ((7368928 * *v13) >> 23) + 16;
        v17[1] = v43 + 16;
        unsigned int v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          int v46 = *v41;
          int v47 = v41[1];
          v41 += 2;
          *unsigned int v42 = ((7368928 * v46) >> 23) + 16;
          v42[1] = ((7368928 * v47) >> 23) + 16;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        int v48 = *v41;
        unsigned int v49 = (7368928 * v41[1]) >> 23;
        *unsigned int v42 = ((7368928 * v48) >> 23) + 16;
        v42[1] = v49 + 16;
      }
      v13 += v12;
      v17 += v16;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if (v26)
    {
      int v50 = *v13;
      int v51 = v13[1];
      v13 += 2;
      *uint64_t v17 = ((7368928 * v50) >> 23) + 16;
      v17[1] = ((7368928 * v51) >> 23) + 16;
      v17 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        int v53 = *v13;
        int v54 = v13[1];
        v13 += 2;
        *uint64_t v17 = ((7368928 * v53) >> 23) + 16;
        v17[1] = ((7368928 * v54) >> 23) + 16;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      int v55 = *v13;
      unsigned int v56 = (7368928 * v13[1]) >> 23;
      *uint64_t v17 = ((7368928 * v55) >> 23) + 16;
      v17[1] = v56 + 16;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v19 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = a7[2] + v22 * v16;
    uint64_t v24 = *a7 + *a8 * v16;
    uint64_t v25 = *a4;
    uint64_t v26 = v23 + v15;
    uint64_t v27 = v24 + v15;
    uint64_t v28 = *a3 + v25 * v12 + v11;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v26 + i) = -1;
          *(unsigned char *)(v27 + i) = ((7204443 * *(unsigned __int8 *)(v28 + i)) >> 23) + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v19 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v19 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      unsigned int v36 = (((7368928 * v14[1]) >> 23) + ((7368928 * v14[3]) >> 23) + 33) >> 1;
      unsigned char *v18 = (((7368928 * *v14) >> 23) + ((7368928 * v14[2]) >> 23) + 33) >> 1;
      v18[1] = v36;
      int v35 = v18 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      int v35 = v18;
    }
    if (v19 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unsigned int v38 = &v35[v37];
        unsigned int v39 = (((7368928 * v34[1]) >> 23) + ((7368928 * v34[3]) >> 23) + 33) >> 1;
        unsigned char *v38 = (((7368928 * *v34) >> 23) + ((7368928 * v34[2]) >> 23) + 33) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v18 += v17;
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      unsigned int v42 = v14;
      unsigned int v43 = v18;
      if (v32)
      {
        unsigned int v42 = v14 + 4;
        unsigned int v44 = (((7368928 * v14[1]) >> 23) + ((7368928 * v14[3]) >> 23) + 33) >> 1;
        unsigned char *v18 = (((7368928 * *v14) >> 23) + ((7368928 * v14[2]) >> 23) + 33) >> 1;
        v18[1] = v44;
        unsigned int v43 = v18 + 2;
      }
      if (v19 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = (((7368928 * v42[1]) >> 23) + ((7368928 * v42[3]) >> 23) + 33) >> 1;
          unsigned char *v46 = (((7368928 * *v42) >> 23) + ((7368928 * v42[2]) >> 23) + 33) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      int v50 = v14[2];
      int v51 = v14[3];
      v14 += 4;
      unsigned char *v18 = (((7368928 * v48) >> 23) + ((7368928 * v50) >> 23) + 33) >> 1;
      v18[1] = (((7368928 * v49) >> 23) + ((7368928 * v51) >> 23) + 33) >> 1;
      v18 += 2;
    }
    if (v19 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v18[v52];
        unsigned int v54 = (((7368928 * v14[1]) >> 23) + ((7368928 * v14[3]) >> 23) + 33) >> 1;
        *int v53 = (((7368928 * *v14) >> 23) + ((7368928 * v14[2]) >> 23) + 33) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v19 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = a7[2] + v22 * v16;
    uint64_t v24 = *a7 + *a8 * v16;
    uint64_t v25 = *a4;
    uint64_t v26 = v23 + v15;
    uint64_t v27 = v24 + v15;
    uint64_t v28 = *a3 + v25 * v12 + v11;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v26 + i) = -1;
          *(unsigned char *)(v27 + i) = ((7204443 * *(unsigned __int8 *)(v28 + i)) >> 23) + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v19 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v19 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      unsigned int v36 = (7368928 * v14[1]) >> 23;
      unsigned char *v18 = ((7368928 * *v14) >> 23) + 16;
      v18[1] = v36 + 16;
      int v35 = v18 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      int v35 = v18;
    }
    if (v19 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unsigned int v38 = &v35[v37];
        unsigned int v39 = (7368928 * v34[1]) >> 23;
        unsigned char *v38 = ((7368928 * *v34) >> 23) + 16;
        v38[1] = v39 + 16;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v14 += v13;
    v18 += v17;
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      unsigned int v42 = v14;
      unsigned int v43 = v18;
      if (v32)
      {
        unsigned int v42 = v14 + 4;
        unsigned int v44 = (7368928 * v14[1]) >> 23;
        unsigned char *v18 = ((7368928 * *v14) >> 23) + 16;
        v18[1] = v44 + 16;
        unsigned int v43 = v18 + 2;
      }
      if (v19 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = (7368928 * v42[1]) >> 23;
          unsigned char *v46 = ((7368928 * *v42) >> 23) + 16;
          v46[1] = v47 + 16;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      v14 += v13;
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      int v48 = *v14;
      int v49 = v14[1];
      v14 += 4;
      unsigned char *v18 = ((7368928 * v48) >> 23) + 16;
      v18[1] = ((7368928 * v49) >> 23) + 16;
      v18 += 2;
    }
    if (v19 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v18[v50];
        unsigned int v52 = (7368928 * v14[1]) >> 23;
        *int v51 = ((7368928 * *v14) >> 23) + 16;
        v51[1] = v52 + 16;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = ((7204443 * *(unsigned __int8 *)(v27 + i)) >> 23) + 16;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      unint64_t v33 = v14 + 4;
      unsigned int v35 = (((7368928 * v14[1]) >> 23) + ((7368928 * v14[3]) >> 23) + 33) >> 1;
      *uint64_t v20 = (((7368928 * *v14) >> 23) + ((7368928 * v14[2]) >> 23) + 33) >> 1;
      v20[1] = v35;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        unsigned int v38 = (((7368928 * v33[1]) >> 23) + ((7368928 * v33[3]) >> 23) + 33) >> 1;
        *unint64_t v37 = (((7368928 * *v33) >> 23) + ((7368928 * v33[2]) >> 23) + 33) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v30;
    do
    {
      uint64_t v41 = v14;
      unsigned int v42 = v20;
      if (v31)
      {
        uint64_t v41 = v14 + 4;
        unsigned int v43 = (((7368928 * v14[1]) >> 23) + ((7368928 * v14[3]) >> 23) + 33) >> 1;
        *uint64_t v20 = (((7368928 * *v14) >> 23) + ((7368928 * v14[2]) >> 23) + 33) >> 1;
        v20[1] = v43;
        unsigned int v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          unint64_t v45 = &v42[v44];
          unsigned int v46 = (((7368928 * v41[1]) >> 23) + ((7368928 * v41[3]) >> 23) + 33) >> 1;
          unsigned char *v45 = (((7368928 * *v41) >> 23) + ((7368928 * v41[2]) >> 23) + 33) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if (v31)
    {
      int v47 = *v14;
      int v48 = v14[1];
      int v49 = v14[2];
      int v50 = v14[3];
      v14 += 4;
      *uint64_t v20 = (((7368928 * v47) >> 23) + ((7368928 * v49) >> 23) + 33) >> 1;
      v20[1] = (((7368928 * v48) >> 23) + ((7368928 * v50) >> 23) + 33) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v51 = 0;
      do
      {
        unsigned int v52 = &v20[v51];
        unsigned int v53 = (((7368928 * v14[1]) >> 23) + ((7368928 * v14[3]) >> 23) + 33) >> 1;
        *unsigned int v52 = (((7368928 * *v14) >> 23) + ((7368928 * v14[2]) >> 23) + 33) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 4;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 2 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = ((7204443 * *(unsigned __int8 *)(v27 + i)) >> 23) + 16;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      unint64_t v33 = v14 + 4;
      unsigned int v35 = (7368928 * v14[1]) >> 23;
      *uint64_t v20 = ((7368928 * *v14) >> 23) + 16;
      v20[1] = v35 + 16;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        unsigned int v38 = (7368928 * v33[1]) >> 23;
        *unint64_t v37 = ((7368928 * *v33) >> 23) + 16;
        v37[1] = v38 + 16;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v30;
    do
    {
      uint64_t v41 = v14;
      unsigned int v42 = v20;
      if (v31)
      {
        uint64_t v41 = v14 + 4;
        unsigned int v43 = (7368928 * v14[1]) >> 23;
        *uint64_t v20 = ((7368928 * *v14) >> 23) + 16;
        v20[1] = v43 + 16;
        unsigned int v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          unint64_t v45 = &v42[v44];
          unsigned int v46 = (7368928 * v41[1]) >> 23;
          unsigned char *v45 = ((7368928 * *v41) >> 23) + 16;
          v45[1] = v46 + 16;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if (v31)
    {
      int v47 = *v14;
      int v48 = v14[1];
      v14 += 4;
      *uint64_t v20 = ((7368928 * v47) >> 23) + 16;
      v20[1] = ((7368928 * v48) >> 23) + 16;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v49 = 0;
      do
      {
        int v50 = &v20[v49];
        unsigned int v51 = (7368928 * v14[1]) >> 23;
        *int v50 = ((7368928 * *v14) >> 23) + 16;
        v50[1] = v51 + 16;
        v49 += 2;
        v14 += 4;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  size_t v9 = v8 & 1;
  size_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * v11 + 2 * (v9 + v8));
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v15 + (v14 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= (unint64_t)((*(_DWORD *)(a6 + 16)
                                                                                           + *(void *)(a6 + 32)) & 0xFFFFFFFE)
                                                                       - v14)
    size_t v18 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  else {
    size_t v18 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v19 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v19 = *(void *)(a2 + 24);
  }
  if (v19)
  {
    unint64_t v51 = v19;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    unint64_t v22 = (char *)(*a7 + *a8 * v15 + v14);
    uint64_t v23 = (char *)(*a3 + *a4 * v11 + v10);
    do
    {
      memcpy(v22, v23, v18);
      v23 += v20;
      v22 += v21;
      --v19;
    }
    while (v19);
    unint64_t v19 = v51;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    size_t v9 = v8 & 1;
  }
  unint64_t v24 = v11 & 1;
  if (v19 >= v24) {
    uint64_t v25 = v11 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v8;
  if (v18 < v9) {
    size_t v9 = 0;
  }
  size_t v27 = v18 - v9;
  if (v11)
  {
    if (v26)
    {
      uint64_t v28 = v13 + 4;
      unsigned int v30 = (v13[1] + v13[3] + 1) >> 1;
      *uint64_t v17 = (*v13 + v13[2] + 1) >> 1;
      v17[1] = v30;
      unint64_t v29 = v17 + 2;
    }
    else
    {
      uint64_t v28 = v13;
      unint64_t v29 = v17;
    }
    if (v18 != v9)
    {
      size_t v31 = 0;
      do
      {
        unint64_t v32 = &v29[v31];
        unsigned int v33 = (v28[1] + v28[3] + 1) >> 1;
        unsigned char *v32 = (*v28 + v28[2] + 1) >> 1;
        v32[1] = v33;
        v31 += 2;
        v28 += 4;
      }
      while (v31 < v27);
    }
    v13 += v12;
    v17 += v16;
  }
  if (v19 == v25)
  {
    unint64_t v34 = 0;
  }
  else
  {
    uint64_t v35 = 0;
    unint64_t v34 = v19 - v25;
    do
    {
      unint64_t v36 = v13;
      unint64_t v37 = v17;
      if (v26)
      {
        unint64_t v36 = v13 + 4;
        unsigned int v38 = (v13[1] + v13[3] + 1) >> 1;
        *uint64_t v17 = (*v13 + v13[2] + 1) >> 1;
        v17[1] = v38;
        unint64_t v37 = v17 + 2;
      }
      if (v18 != v9)
      {
        size_t v39 = 0;
        do
        {
          uint64_t v40 = &v37[v39];
          unsigned int v41 = (v36[1] + v36[3] + 1) >> 1;
          *uint64_t v40 = (*v36 + v36[2] + 1) >> 1;
          v40[1] = v41;
          v39 += 2;
          v36 += 4;
        }
        while (v39 < v27);
      }
      v13 += v12;
      v17 += v16;
      ++v35;
    }
    while (v35 != v34);
  }
  if (v34 + v24 < v19)
  {
    if (v26)
    {
      int v42 = *v13;
      int v43 = v13[1];
      int v44 = v13[2];
      int v45 = v13[3];
      v13 += 4;
      *uint64_t v17 = (v42 + v44 + 1) >> 1;
      v17[1] = (v43 + v45 + 1) >> 1;
      v17 += 2;
    }
    if (v18 != v9)
    {
      size_t v46 = 0;
      do
      {
        int v47 = &v17[v46];
        unsigned int v48 = (v13[1] + v13[3] + 1) >> 1;
        *int v47 = (*v13 + v13[2] + 1) >> 1;
        v47[1] = v48;
        v46 += 2;
        v13 += 4;
      }
      while (v46 < v27);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_444f_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  size_t v9 = v8 & 1;
  size_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (__int16 *)(a3[1] + v12 * v11 + 2 * (v9 + v8));
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = a8[1];
  uint64_t v17 = (__int16 *)(a7[1] + v16 * v15 + (v14 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= (unint64_t)((*(_DWORD *)(a6 + 16)
                                                                                           + *(void *)(a6 + 32)) & 0xFFFFFFFE)
                                                                       - v14)
    size_t v18 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  else {
    size_t v18 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v19 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v19 = *(void *)(a2 + 24);
  }
  if (v19)
  {
    unint64_t v43 = v19;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    unint64_t v22 = (char *)(*a7 + *a8 * v15 + v14);
    uint64_t v23 = (char *)(*a3 + *a4 * v11 + v10);
    do
    {
      memcpy(v22, v23, v18);
      v23 += v20;
      v22 += v21;
      --v19;
    }
    while (v19);
    unint64_t v19 = v43;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    size_t v9 = v8 & 1;
  }
  unint64_t v24 = v11 & 1;
  if (v19 >= v24) {
    uint64_t v25 = v11 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v8;
  if (v18 < v9) {
    size_t v9 = 0;
  }
  size_t v27 = v18 - v9;
  if (v11)
  {
    uint64_t v28 = v13;
    if (v26)
    {
      uint64_t v28 = v13 + 2;
      *uint64_t v17 = *v13;
      unint64_t v29 = v17 + 1;
    }
    else
    {
      unint64_t v29 = v17;
    }
    if (v18 != v9)
    {
      size_t v30 = 0;
      do
      {
        __int16 v31 = *v28;
        v28 += 2;
        v29[v30 / 2] = v31;
        v30 += 2;
      }
      while (v30 < v27);
    }
    uint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v17 = (__int16 *)((char *)v17 + v16);
  }
  if (v19 == v25)
  {
    unint64_t v32 = 0;
  }
  else
  {
    uint64_t v33 = 0;
    unint64_t v32 = v19 - v25;
    do
    {
      unint64_t v34 = v13;
      uint64_t v35 = v17;
      if (v26)
      {
        unint64_t v34 = v13 + 2;
        *uint64_t v17 = *v13;
        uint64_t v35 = v17 + 1;
      }
      if (v18 != v9)
      {
        size_t v36 = 0;
        do
        {
          __int16 v37 = *v34;
          v34 += 2;
          v35[v36 / 2] = v37;
          v36 += 2;
        }
        while (v36 < v27);
      }
      uint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v17 = (__int16 *)((char *)v17 + v16);
      ++v33;
    }
    while (v33 != v32);
  }
  if (v32 + v24 < v19)
  {
    if (v26)
    {
      __int16 v38 = *v13;
      v13 += 2;
      *v17++ = v38;
    }
    if (v18 != v9)
    {
      size_t v39 = 0;
      do
      {
        __int16 v40 = *v13;
        v13 += 2;
        v17[v39 / 2] = v40;
        v39 += 2;
      }
      while (v39 < v27);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 2 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    BOOL v27 = v13 >= v9;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    uint64_t v30 = *a3 + *a4 * v13;
    if (v27) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v11 + v31;
    uint64_t v33 = a7[2] + v29 * v18 + v16;
    uint64_t v34 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(unsigned char *)(v33 + i) = -1;
          *(unsigned char *)(v34 + i) = ((7204443 * *(unsigned __int8 *)(v32 + i)) >> 23) + 16;
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      __int16 v40 = &v15[v14 + 2];
      int v41 = *v40;
      int v42 = v40[1];
      __int16 v38 = v15 + 4;
      unsigned int v43 = (((7368928 * v15[1]) >> 23)
           + ((7368928 * v15[v14 + 1]) >> 23)
           + ((7368928 * v15[3]) >> 23)
           + ((7368928 * v42) >> 23)
           + 66) >> 2;
      *uint64_t v21 = (((7368928 * *v15) >> 23)
            + ((7368928 * v15[v14]) >> 23)
            + ((7368928 * v15[2]) >> 23)
            + ((7368928 * v41) >> 23)
            + 66) >> 2;
      v21[1] = v43;
      size_t v39 = v21 + 2;
    }
    else
    {
      __int16 v38 = v15;
      size_t v39 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v44 = 0;
      int v45 = v38 + 3;
      do
      {
        size_t v46 = &v39[v44];
        int v47 = *(v45 - 3);
        int v48 = *(v45 - 2);
        unint64_t v49 = &v45[v14];
        int v50 = v45[v14 - 3];
        int v51 = v45[v14 - 2];
        int v52 = *(v45 - 1);
        int v53 = *v45;
        v45 += 4;
        unsigned int v54 = (((7368928 * v48) >> 23)
             + ((7368928 * v51) >> 23)
             + ((7368928 * v53) >> 23)
             + ((7368928 * *v49) >> 23)
             + 66) >> 2;
        unsigned char *v46 = (((7368928 * v47) >> 23)
              + ((7368928 * v50) >> 23)
              + ((7368928 * v52) >> 23)
              + ((7368928 * *(v49 - 1)) >> 23)
              + 66) >> 2;
        v46[1] = v54;
        v44 += 2;
      }
      while (v44 < v37);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v36)
  {
    unint64_t v55 = 0;
    unint64_t v56 = v24 - v36;
    do
    {
      int v57 = v15;
      int v58 = v21;
      if (v8)
      {
        int v59 = &v15[v14 + 2];
        int v60 = *v59;
        int v61 = v59[1];
        int v57 = v15 + 4;
        unsigned int v62 = (((7368928 * v15[1]) >> 23)
             + ((7368928 * v15[v14 + 1]) >> 23)
             + ((7368928 * v15[3]) >> 23)
             + ((7368928 * v61) >> 23)
             + 66) >> 2;
        *uint64_t v21 = (((7368928 * *v15) >> 23)
              + ((7368928 * v15[v14]) >> 23)
              + ((7368928 * v15[2]) >> 23)
              + ((7368928 * v60) >> 23)
              + 66) >> 2;
        v21[1] = v62;
        int v58 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v63 = 0;
        int v64 = v57 + 3;
        do
        {
          int v65 = &v58[v63];
          int v66 = *(v64 - 3);
          int v67 = *(v64 - 2);
          int v68 = &v64[v14];
          int v69 = v64[v14 - 3];
          int v70 = v64[v14 - 2];
          int v71 = *(v64 - 1);
          int v72 = *v64;
          v64 += 4;
          unsigned int v73 = (((7368928 * v67) >> 23)
               + ((7368928 * v70) >> 23)
               + ((7368928 * v72) >> 23)
               + ((7368928 * *v68) >> 23)
               + 66) >> 2;
          *int v65 = (((7368928 * v66) >> 23)
                + ((7368928 * v69) >> 23)
                + ((7368928 * v71) >> 23)
                + ((7368928 * *(v68 - 1)) >> 23)
                + 66) >> 2;
          v65[1] = v73;
          v63 += 2;
        }
        while (v63 < v37);
      }
      v15 += 2 * v14;
      v21 += v20;
      v55 += 2;
    }
    while (v55 < v56);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 2 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    BOOL v27 = v13 >= v9;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    uint64_t v30 = *a3 + *a4 * v13;
    if (v27) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v11 + v31;
    uint64_t v33 = a7[2] + v29 * v18 + v16;
    uint64_t v34 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(unsigned char *)(v33 + i) = -1;
          *(unsigned char *)(v34 + i) = ((7204443 * *(unsigned __int8 *)(v32 + i)) >> 23) + 16;
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      __int16 v38 = v15 + 4;
      unsigned int v40 = (7368928 * v15[1]) >> 23;
      *uint64_t v21 = ((7368928 * *v15) >> 23) + 16;
      v21[1] = v40 + 16;
      size_t v39 = v21 + 2;
    }
    else
    {
      __int16 v38 = v15;
      size_t v39 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        int v42 = &v39[v41];
        unsigned int v43 = (7368928 * v38[1]) >> 23;
        *int v42 = ((7368928 * *v38) >> 23) + 16;
        v42[1] = v43 + 16;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v36)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v24 - v36;
    uint64_t v46 = 2 * v14;
    do
    {
      int v47 = v15;
      int v48 = v21;
      if (v8)
      {
        int v47 = v15 + 4;
        unsigned int v49 = (7368928 * v15[1]) >> 23;
        *uint64_t v21 = ((7368928 * *v15) >> 23) + 16;
        v21[1] = v49 + 16;
        int v48 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v50 = 0;
        do
        {
          int v51 = &v48[v50];
          unsigned int v52 = (7368928 * v47[1]) >> 23;
          *int v51 = ((7368928 * *v47) >> 23) + 16;
          v51[1] = v52 + 16;
          v50 += 2;
          v47 += 4;
        }
        while (v50 < v37);
      }
      v15 += v46;
      v21 += v20;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v8) + 2 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v13;
    if (v13 >= v8) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + v11 + v29;
    uint64_t v31 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v31 + i) = ((7204443 * *(unsigned __int8 *)(v30 + i)) >> 23) + 16;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v9)
    {
      unint64_t v37 = &v15[v14 + 2];
      int v38 = *v37;
      int v39 = v37[1];
      uint64_t v35 = v15 + 4;
      unsigned int v40 = (((7368928 * v15[1]) >> 23)
           + ((7368928 * v15[v14 + 1]) >> 23)
           + ((7368928 * v15[3]) >> 23)
           + ((7368928 * v39) >> 23)
           + 66) >> 2;
      *uint64_t v21 = (((7368928 * *v15) >> 23)
            + ((7368928 * v15[v14]) >> 23)
            + ((7368928 * v15[2]) >> 23)
            + ((7368928 * v38) >> 23)
            + 66) >> 2;
      v21[1] = v40;
      unint64_t v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v15;
      unint64_t v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v41 = 0;
      int v42 = v35 + 3;
      do
      {
        unsigned int v43 = &v36[v41];
        int v44 = *(v42 - 3);
        int v45 = *(v42 - 2);
        uint64_t v46 = &v42[v14];
        int v47 = v42[v14 - 3];
        int v48 = v42[v14 - 2];
        int v49 = *(v42 - 1);
        int v50 = *v42;
        v42 += 4;
        unsigned int v51 = (((7368928 * v45) >> 23)
             + ((7368928 * v48) >> 23)
             + ((7368928 * v50) >> 23)
             + ((7368928 * *v46) >> 23)
             + 66) >> 2;
        *unsigned int v43 = (((7368928 * v44) >> 23)
              + ((7368928 * v47) >> 23)
              + ((7368928 * v49) >> 23)
              + ((7368928 * *(v46 - 1)) >> 23)
              + 66) >> 2;
        v43[1] = v51;
        v41 += 2;
      }
      while (v41 < v34);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v33)
  {
    unint64_t v52 = 0;
    unint64_t v53 = v24 - v33;
    do
    {
      unsigned int v54 = v15;
      unint64_t v55 = v21;
      if (v9)
      {
        unint64_t v56 = &v15[v14 + 2];
        int v57 = *v56;
        int v58 = v56[1];
        unsigned int v54 = v15 + 4;
        unsigned int v59 = (((7368928 * v15[1]) >> 23)
             + ((7368928 * v15[v14 + 1]) >> 23)
             + ((7368928 * v15[3]) >> 23)
             + ((7368928 * v58) >> 23)
             + 66) >> 2;
        *uint64_t v21 = (((7368928 * *v15) >> 23)
              + ((7368928 * v15[v14]) >> 23)
              + ((7368928 * v15[2]) >> 23)
              + ((7368928 * v57) >> 23)
              + 66) >> 2;
        v21[1] = v59;
        unint64_t v55 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v60 = 0;
        int v61 = v54 + 3;
        do
        {
          unsigned int v62 = &v55[v60];
          int v63 = *(v61 - 3);
          int v64 = *(v61 - 2);
          int v65 = &v61[v14];
          int v66 = v61[v14 - 3];
          int v67 = v61[v14 - 2];
          int v68 = *(v61 - 1);
          int v69 = *v61;
          v61 += 4;
          unsigned int v70 = (((7368928 * v64) >> 23)
               + ((7368928 * v67) >> 23)
               + ((7368928 * v69) >> 23)
               + ((7368928 * *v65) >> 23)
               + 66) >> 2;
          *unsigned int v62 = (((7368928 * v63) >> 23)
                + ((7368928 * v66) >> 23)
                + ((7368928 * v68) >> 23)
                + ((7368928 * *(v65 - 1)) >> 23)
                + 66) >> 2;
          v62[1] = v70;
          v60 += 2;
        }
        while (v60 < v34);
      }
      v15 += 2 * v14;
      v21 += v20;
      v52 += 2;
    }
    while (v52 < v53);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v8) + 2 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v13;
    if (v13 >= v8) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + v11 + v29;
    uint64_t v31 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v31 + i) = ((7204443 * *(unsigned __int8 *)(v30 + i)) >> 23) + 16;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v9)
    {
      uint64_t v35 = v15 + 4;
      unsigned int v37 = (7368928 * v15[1]) >> 23;
      *uint64_t v21 = ((7368928 * *v15) >> 23) + 16;
      v21[1] = v37 + 16;
      unint64_t v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v15;
      unint64_t v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v38 = 0;
      do
      {
        int v39 = &v36[v38];
        unsigned int v40 = (7368928 * v35[1]) >> 23;
        unsigned char *v39 = ((7368928 * *v35) >> 23) + 16;
        v39[1] = v40 + 16;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v33)
  {
    unint64_t v41 = 0;
    unint64_t v42 = v24 - v33;
    uint64_t v43 = 2 * v14;
    do
    {
      int v44 = v15;
      int v45 = v21;
      if (v9)
      {
        int v44 = v15 + 4;
        unsigned int v46 = (7368928 * v15[1]) >> 23;
        *uint64_t v21 = ((7368928 * *v15) >> 23) + 16;
        v21[1] = v46 + 16;
        int v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          unsigned int v49 = (7368928 * v44[1]) >> 23;
          unsigned char *v48 = ((7368928 * *v44) >> 23) + 16;
          v48[1] = v49 + 16;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v34);
      }
      v15 += v43;
      v21 += v20;
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  size_t v10 = v8 & 1;
  size_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v23 = v18 - v17;
  }
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  else {
    unint64_t v24 = v14 - v13;
  }
  if (v24)
  {
    unint64_t v72 = v24;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    if (v13 >= v9) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = (char *)(*a3 + *a4 * v13 + v11 + v27);
    uint64_t v29 = (char *)(*a7 + v26 * v19 + v17);
    uint64_t v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v23);
      v28 += v25;
      v29 += v26;
    }
    while (!__CFADD__(v30++, 1));
    unint64_t v24 = v72;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    size_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v23 < v10) {
    size_t v10 = 0;
  }
  size_t v33 = v23 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v36 = &v16[v15 + 2];
      int v37 = *v36;
      int v38 = v36[1];
      unint64_t v34 = v16 + 4;
      unsigned int v39 = (v16[1] + v16[3] + v16[v15 + 1] + v38 + 2) >> 2;
      unsigned char *v22 = (*v16 + v16[2] + v16[v15] + v37 + 2) >> 2;
      v22[1] = v39;
      uint64_t v35 = v22 + 2;
    }
    else
    {
      unint64_t v34 = v16;
      uint64_t v35 = v22;
    }
    if (v23 != v10)
    {
      size_t v40 = 0;
      unint64_t v41 = v34 + 3;
      do
      {
        unint64_t v42 = &v35[v40];
        int v43 = *(v41 - 3);
        int v44 = *(v41 - 2);
        int v45 = &v41[v15];
        int v46 = v41[v15 - 3];
        int v47 = v41[v15 - 2];
        int v48 = *(v41 - 1);
        int v49 = *v41;
        v41 += 4;
        unsigned int v50 = (v44 + v49 + v47 + *v45 + 2) >> 2;
        *unint64_t v42 = (v43 + v48 + v46 + *(v45 - 1) + 2) >> 2;
        v42[1] = v50;
        v40 += 2;
      }
      while (v40 < v33);
    }
    v16 += 2 * v15;
    v22 += v21;
  }
  if (v24 != v32)
  {
    unint64_t v51 = 0;
    unint64_t v52 = v24 - v32;
    do
    {
      unint64_t v53 = v16;
      unsigned int v54 = v22;
      if (v8)
      {
        unint64_t v55 = &v16[v15 + 2];
        int v56 = *v55;
        int v57 = v55[1];
        unint64_t v53 = v16 + 4;
        unsigned int v58 = (v16[1] + v16[3] + v16[v15 + 1] + v57 + 2) >> 2;
        unsigned char *v22 = (*v16 + v16[2] + v16[v15] + v56 + 2) >> 2;
        v22[1] = v58;
        unsigned int v54 = v22 + 2;
      }
      if (v23 != v10)
      {
        size_t v59 = 0;
        unint64_t v60 = v53 + 3;
        do
        {
          int v61 = &v54[v59];
          int v62 = *(v60 - 3);
          int v63 = *(v60 - 2);
          int v64 = &v60[v15];
          int v65 = v60[v15 - 3];
          int v66 = v60[v15 - 2];
          int v67 = *(v60 - 1);
          int v68 = *v60;
          v60 += 4;
          unsigned int v69 = (v63 + v68 + v66 + *v64 + 2) >> 2;
          unsigned char *v61 = (v62 + v67 + v65 + *(v64 - 1) + 2) >> 2;
          v61[1] = v69;
          v59 += 2;
        }
        while (v59 < v33);
      }
      v16 += 2 * v15;
      v22 += v21;
      v51 += 2;
    }
    while (v51 < v52);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = *(void *)(a2 + 40);
  size_t v11 = v9 & 1;
  size_t v12 = v11 + v9;
  unint64_t v13 = v10 & 1;
  unint64_t v14 = v13 + v10;
  uint64_t v15 = (*(_DWORD *)(a2 + 24) + v10) & 0xFFFFFFFE;
  uint64_t v16 = a4[1];
  uint64_t v17 = (__int16 *)(a3[1] + v16 * (v13 + v10) + 2 * (v11 + v9));
  uint64_t v18 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v18 & 0x7FFFFFFFFFFFFFFFLL));
  if (((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v11 + v9) >= (unint64_t)((*(_DWORD *)(a6 + 16)
                                                                                            + *(void *)(a6 + 32)) & 0xFFFFFFFE)
                                                                        - v18)
    size_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v18;
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - v12;
  }
  unint64_t v24 = v15 - v14;
  if (v15 - v14 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    unint64_t v45 = v24;
    uint64_t v46 = a4[1];
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    if (v14 >= v10) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = (char *)(*a3 + *a4 * v14 + v12 + v27);
    uint64_t v29 = (char *)(*a7 + v26 * v19 + v18);
    uint64_t v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v23);
      v28 += v25;
      v29 += v26;
    }
    while (!__CFADD__(v30++, 1));
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v13 = *(void *)(a2 + 40) & 1;
    size_t v11 = v9 & 1;
    unint64_t v24 = v45;
    uint64_t v16 = v46;
  }
  if (v24 >= v13) {
    unint64_t v32 = v13;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v23 < v11) {
    size_t v11 = 0;
  }
  size_t v33 = v23 - v11;
  if (v13)
  {
    unint64_t v34 = v17;
    if (v9)
    {
      unint64_t v34 = v17 + 2;
      __int16 *v22 = *v17;
      uint64_t v35 = v22 + 1;
    }
    else
    {
      uint64_t v35 = v22;
    }
    if (v23 != v11)
    {
      size_t v36 = 0;
      do
      {
        __int16 v37 = *v34;
        v34 += 2;
        v35[v36 / 2] = v37;
        v36 += 2;
      }
      while (v36 < v33);
    }
    v17 += v16;
    unint64_t v22 = (__int16 *)((char *)v22 + v21);
  }
  if (v24 != v32)
  {
    unint64_t v38 = 0;
    unint64_t v39 = v24 - v32;
    do
    {
      size_t v40 = v17;
      unint64_t v41 = v22;
      if (v9)
      {
        size_t v40 = v17 + 2;
        __int16 *v22 = *v17;
        unint64_t v41 = v22 + 1;
      }
      if (v23 != v11)
      {
        size_t v42 = 0;
        do
        {
          __int16 v43 = *v40;
          v40 += 2;
          v41[v42 / 2] = v43;
          v42 += 2;
        }
        while (v42 < v33);
      }
      v17 += v16;
      unint64_t v22 = (__int16 *)((char *)v22 + v21);
      v38 += 2;
    }
    while (v38 < v39);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 2 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  size_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v11 + v32;
    unint64_t v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v34 + i) = ((7204443 * *(unsigned __int8 *)(v33 + i)) >> 23) + 16;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v41 = &v15[v14 + 2];
      int v42 = *v41;
      int v43 = v41[1];
      unint64_t v38 = v15 + 4;
      unsigned int v44 = (((7368928 * v15[1]) >> 23)
           + ((7368928 * v15[v14 + 1]) >> 23)
           + ((7368928 * v15[3]) >> 23)
           + ((7368928 * v43) >> 23)
           + 66) >> 2;
      unsigned char *v22 = (((7368928 * *v15) >> 23)
            + ((7368928 * v15[v14]) >> 23)
            + ((7368928 * v15[2]) >> 23)
            + ((7368928 * v42) >> 23)
            + 66) >> 2;
      unint64_t v39 = v22 + 1;
      *size_t v23 = v44;
      size_t v40 = v23 + 1;
    }
    else
    {
      unint64_t v38 = v15;
      unint64_t v39 = v22;
      size_t v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v45 = 0;
      uint64_t v46 = v38 + 3;
      do
      {
        int v47 = *(v46 - 3);
        int v48 = *(v46 - 2);
        int v49 = &v46[v14];
        int v50 = v46[v14 - 3];
        int v51 = v46[v14 - 2];
        int v52 = *(v46 - 1);
        int v53 = *v46;
        v46 += 4;
        unsigned int v54 = ((7368928 * v48) >> 23)
            + ((7368928 * v51) >> 23)
            + ((7368928 * v53) >> 23)
            + ((7368928 * *v49) >> 23)
            + 66;
        *v39++ = (((7368928 * v47) >> 23)
                + ((7368928 * v50) >> 23)
                + ((7368928 * v52) >> 23)
                + ((7368928 * *(v49 - 1)) >> 23)
                + 66) >> 2;
        *v40++ = v54 >> 2;
        v45 += 2;
      }
      while (v45 < v37);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    unint64_t v55 = 0;
    unint64_t v56 = v26 - v36;
    do
    {
      int v57 = v15;
      unsigned int v58 = v22;
      size_t v59 = v23;
      if (v8)
      {
        unint64_t v60 = &v15[v14 + 2];
        int v61 = *v60;
        int v62 = v60[1];
        int v57 = v15 + 4;
        unsigned int v63 = (((7368928 * v15[1]) >> 23)
             + ((7368928 * v15[v14 + 1]) >> 23)
             + ((7368928 * v15[3]) >> 23)
             + ((7368928 * v62) >> 23)
             + 66) >> 2;
        unsigned char *v22 = (((7368928 * *v15) >> 23)
              + ((7368928 * v15[v14]) >> 23)
              + ((7368928 * v15[2]) >> 23)
              + ((7368928 * v61) >> 23)
              + 66) >> 2;
        unsigned int v58 = v22 + 1;
        *size_t v23 = v63;
        size_t v59 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v64 = 0;
        int v65 = v57 + 3;
        do
        {
          int v66 = *(v65 - 3);
          int v67 = *(v65 - 2);
          int v68 = &v65[v14];
          int v69 = v65[v14 - 3];
          int v70 = v65[v14 - 2];
          int v71 = *(v65 - 1);
          int v72 = *v65;
          v65 += 4;
          unsigned int v73 = ((7368928 * v67) >> 23)
              + ((7368928 * v70) >> 23)
              + ((7368928 * v72) >> 23)
              + ((7368928 * *v68) >> 23)
              + 66;
          *v58++ = (((7368928 * v66) >> 23)
                  + ((7368928 * v69) >> 23)
                  + ((7368928 * v71) >> 23)
                  + ((7368928 * *(v68 - 1)) >> 23)
                  + 66) >> 2;
          *v59++ = v73 >> 2;
          v64 += 2;
        }
        while (v64 < v37);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v55 += 2;
    }
    while (v55 < v56);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 2 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  size_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v11 + v32;
    unint64_t v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v34 + i) = ((7204443 * *(unsigned __int8 *)(v33 + i)) >> 23) + 16;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v38 = v15 + 4;
      unsigned int v41 = (7368928 * v15[1]) >> 23;
      unsigned char *v22 = ((7368928 * *v15) >> 23) + 16;
      unint64_t v39 = v22 + 1;
      *size_t v23 = v41 + 16;
      size_t v40 = v23 + 1;
    }
    else
    {
      unint64_t v38 = v15;
      unint64_t v39 = v22;
      size_t v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v42 = 0;
      do
      {
        unsigned int v43 = (7368928 * v38[1]) >> 23;
        *v39++ = ((7368928 * *v38) >> 23) + 16;
        *v40++ = v43 + 16;
        v42 += 2;
        v38 += 4;
      }
      while (v42 < v37);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v36;
    uint64_t v46 = 2 * v14;
    do
    {
      int v47 = v15;
      int v48 = v22;
      int v49 = v23;
      if (v8)
      {
        int v47 = v15 + 4;
        unsigned int v50 = (7368928 * v15[1]) >> 23;
        unsigned char *v22 = ((7368928 * *v15) >> 23) + 16;
        int v48 = v22 + 1;
        *size_t v23 = v50 + 16;
        int v49 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v51 = 0;
        do
        {
          unsigned int v52 = (7368928 * v47[1]) >> 23;
          *v48++ = ((7368928 * *v47) >> 23) + 16;
          *v49++ = v52 + 16;
          v51 += 2;
          v47 += 4;
        }
        while (v51 < v37);
      }
      v15 += v46;
      v22 += v20;
      v23 += v21;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_444f_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  size_t v10 = v8 & 1;
  size_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  size_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v25 = v18 - v17;
  }
  else {
    size_t v25 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  else {
    unint64_t v26 = v14 - v13;
  }
  if (v26)
  {
    unint64_t v74 = v26;
    uint64_t v75 = a8[2];
    uint64_t v76 = a8[1];
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    if (v13 >= v9) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = (char *)(*a3 + *a4 * v13 + v11 + v29);
    uint64_t v31 = (char *)(*a7 + v28 * v19 + v17);
    uint64_t v32 = -(uint64_t)v26;
    do
    {
      memcpy(v31, v30, v25);
      v30 += v27;
      v31 += v28;
    }
    while (!__CFADD__(v32++, 1));
    unint64_t v26 = v74;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    size_t v10 = v8 & 1;
    uint64_t v22 = v75;
    uint64_t v21 = v76;
  }
  if (v26 >= v12) {
    unint64_t v34 = v12;
  }
  else {
    unint64_t v34 = 0;
  }
  if (v25 < v10) {
    size_t v10 = 0;
  }
  size_t v35 = v25 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v39 = &v16[v15 + 2];
      int v40 = *v39;
      int v41 = v39[1];
      unint64_t v36 = v16 + 4;
      unsigned int v42 = (v16[1] + v16[3] + v16[v15 + 1] + v41 + 2) >> 2;
      *size_t v23 = (*v16 + v16[2] + v16[v15] + v40 + 2) >> 2;
      unint64_t v37 = v23 + 1;
      *unint64_t v24 = v42;
      unint64_t v38 = v24 + 1;
    }
    else
    {
      unint64_t v36 = v16;
      unint64_t v37 = v23;
      unint64_t v38 = v24;
    }
    if (v25 != v10)
    {
      size_t v43 = 0;
      unint64_t v44 = v36 + 3;
      do
      {
        int v45 = *(v44 - 3);
        int v46 = *(v44 - 2);
        int v47 = &v44[v15];
        int v48 = v44[v15 - 3];
        int v49 = v44[v15 - 2];
        int v50 = *(v44 - 1);
        int v51 = *v44;
        v44 += 4;
        unsigned int v52 = v46 + v51 + v49 + *v47 + 2;
        *v37++ = (v45 + v50 + v48 + *(v47 - 1) + 2) >> 2;
        *v38++ = v52 >> 2;
        v43 += 2;
      }
      while (v43 < v35);
    }
    v16 += 2 * v15;
    v23 += v21;
    v24 += v22;
  }
  if (v26 != v34)
  {
    unint64_t v53 = 0;
    unint64_t v54 = v26 - v34;
    do
    {
      unint64_t v55 = v16;
      unint64_t v56 = v23;
      int v57 = v24;
      if (v8)
      {
        unsigned int v58 = &v16[v15 + 2];
        int v59 = *v58;
        int v60 = v58[1];
        unint64_t v55 = v16 + 4;
        unsigned int v61 = (v16[1] + v16[3] + v16[v15 + 1] + v60 + 2) >> 2;
        *size_t v23 = (*v16 + v16[2] + v16[v15] + v59 + 2) >> 2;
        unint64_t v56 = v23 + 1;
        *unint64_t v24 = v61;
        int v57 = v24 + 1;
      }
      if (v25 != v10)
      {
        size_t v62 = 0;
        unsigned int v63 = v55 + 3;
        do
        {
          int v64 = *(v63 - 3);
          int v65 = *(v63 - 2);
          int v66 = &v63[v15];
          int v67 = v63[v15 - 3];
          int v68 = v63[v15 - 2];
          int v69 = *(v63 - 1);
          int v70 = *v63;
          v63 += 4;
          unsigned int v71 = v65 + v70 + v68 + *v66 + 2;
          *v56++ = (v64 + v69 + v67 + *(v66 - 1) + 2) >> 2;
          *v57++ = v71 >> 2;
          v62 += 2;
        }
        while (v62 < v35);
      }
      v16 += 2 * v15;
      v23 += v21;
      v24 += v22;
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_CopyDec_444f_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  size_t v10 = v8 & 1;
  size_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned char *)(a3[1] + v15 * (v12 + v9) + 2 * (v10 + v8));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  size_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v25 = v18 - v17;
  }
  else {
    size_t v25 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  else {
    unint64_t v26 = v14 - v13;
  }
  if (v26)
  {
    unint64_t v52 = v26;
    uint64_t v53 = a4[1];
    uint64_t v54 = a8[1];
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    if (v13 >= v9) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = (char *)(*a3 + *a4 * v13 + v11 + v29);
    uint64_t v31 = (char *)(*a7 + v28 * v19 + v17);
    uint64_t v32 = -(uint64_t)v26;
    do
    {
      memcpy(v31, v30, v25);
      v30 += v27;
      v31 += v28;
    }
    while (!__CFADD__(v32++, 1));
    unint64_t v26 = v52;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    size_t v10 = v8 & 1;
    uint64_t v15 = v53;
    uint64_t v21 = v54;
  }
  if (v26 >= v12) {
    unint64_t v34 = v12;
  }
  else {
    unint64_t v34 = 0;
  }
  if (v25 < v10) {
    size_t v10 = 0;
  }
  size_t v35 = v25 - v10;
  if (v12)
  {
    if (v8)
    {
      char v39 = v16[1];
      unint64_t v36 = v16 + 4;
      *size_t v23 = *v16;
      unint64_t v37 = v23 + 1;
      *unint64_t v24 = v39;
      unint64_t v38 = v24 + 1;
    }
    else
    {
      unint64_t v36 = v16;
      unint64_t v37 = v23;
      unint64_t v38 = v24;
    }
    if (v25 != v10)
    {
      size_t v40 = 0;
      do
      {
        char v41 = v36[1];
        *v37++ = *v36;
        *v38++ = v41;
        v40 += 2;
        v36 += 4;
      }
      while (v40 < v35);
    }
    v16 += 2 * v15;
    v23 += v21;
    v24 += v22;
  }
  if (v26 != v34)
  {
    unint64_t v42 = 0;
    unint64_t v43 = v26 - v34;
    do
    {
      unint64_t v44 = v16;
      int v45 = v23;
      int v46 = v24;
      if (v8)
      {
        char v47 = v16[1];
        unint64_t v44 = v16 + 4;
        *size_t v23 = *v16;
        int v45 = v23 + 1;
        *unint64_t v24 = v47;
        int v46 = v24 + 1;
      }
      if (v25 != v10)
      {
        size_t v48 = 0;
        do
        {
          char v49 = v44[1];
          *v45++ = *v44;
          *v46++ = v49;
          v48 += 2;
          v44 += 4;
        }
        while (v48 < v35);
      }
      v16 += 2 * v15;
      v23 += v21;
      v24 += v22;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_f420_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  unint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D430;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage420Yp8_Cb8_Cr8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_f420_32ARGB;
  *a11 = vt_VImage_Cleanup_f420_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_f420_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  unint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D430;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage420Yp8_Cb8_Cr8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_f420_32BGRA;
  *a11 = vt_VImage_Cleanup_f420_32BGRA;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_f420_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = *(void *)(a2 + 40);
  unint64_t v13 = v12 & 0xFFFFFFFE;
  uint64_t v14 = v8 + v12;
  uint64_t v15 = (v8 + v12) & 1;
  uint64_t v16 = a4[1];
  uint64_t v17 = a4[2];
  uint64_t v18 = v12 >> 1;
  uint64_t v19 = (unsigned __int8 *)(a3[1] + v16 * v18 + ((unint64_t)(v10 + v9) >> 1));
  uint64_t v20 = (unsigned __int8 *)(a3[2] + v17 * v18 + ((unint64_t)(v10 + v9) >> 1));
  unint64_t v21 = *(void *)(a6 + 24);
  uint64_t v22 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v23 = *(void *)(a6 + 40);
  uint64_t v24 = a8[1];
  size_t v25 = (_WORD *)(a7[1] + v24 * v23 + ((2 * v22) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v26 = v11 - (v10 + v9);
  unint64_t v27 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v22;
  if (v26 < v27) {
    unint64_t v27 = v26;
  }
  unint64_t v28 = v14 - v13 + v15;
  if (v28 >= v21) {
    unint64_t v28 = v21;
  }
  if (v28)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v13;
    if (v13 >= v12) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    uint64_t v34 = v32 + v10 + v9 + v33;
    uint64_t v35 = *a7 + v31 * v23 + 2 * v22;
    do
    {
      if (v27)
      {
        for (uint64_t i = 0; i != v27; ++i)
          *(_WORD *)(v35 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v34 + i))) >> 32) << 6)
                                  + 4096;
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v28);
  }
  uint64_t v37 = v12 & 1;
  if (v28 >> 1 >= (v28 - v37) >> 1) {
    unint64_t v38 = (v28 - (v12 & 1)) >> 1;
  }
  else {
    unint64_t v38 = v28 >> 1;
  }
  char v39 = v9;
  unint64_t v40 = v27 >> 1;
  if (v27 >> 1 >= (v27 - v10) >> 1) {
    unint64_t v40 = (v27 - v10) >> 1;
  }
  if (v12)
  {
    char v41 = v19;
    if (v39)
    {
      char v41 = v19 + 1;
      unint64_t v42 = v20 + 1;
      int v44 = *v20;
      *size_t v25 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v19)) >> 32) << 6) + 4096;
      v25[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
      unint64_t v43 = v25 + 2;
      if (!v40)
      {
LABEL_27:
        v19 += v16;
        v20 += v17;
        size_t v25 = (_WORD *)((char *)v25 + v24);
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v42 = v20;
      unint64_t v43 = v25;
      if (!v40) {
        goto LABEL_27;
      }
    }
    uint64_t v45 = -(uint64_t)v40;
    do
    {
      int v47 = *v41++;
      int v46 = v47;
      int v48 = *v42++;
      *unint64_t v43 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v46)) >> 32) << 6) + 4096;
      v43[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
      v43 += 2;
      BOOL v49 = __CFADD__(v45++, 1);
    }
    while (!v49);
    goto LABEL_27;
  }
LABEL_28:
  if (v38)
  {
    for (uint64_t j = 0; j != v38; ++j)
    {
      int v51 = v19;
      unint64_t v52 = v20;
      uint64_t v53 = v25;
      if (v39)
      {
        int v51 = v19 + 1;
        unint64_t v52 = v20 + 1;
        int v54 = *v20;
        *size_t v25 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v19)) >> 32) << 6) + 4096;
        v25[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
        uint64_t v53 = v25 + 2;
      }
      if (v40)
      {
        uint64_t v55 = -(uint64_t)v40;
        do
        {
          int v57 = *v51++;
          int v56 = v57;
          int v58 = *v52++;
          int v59 = ((16843010 * (unint64_t)(896 * v56)) >> 32 << 6) + 4096;
          *uint64_t v53 = v59;
          v53[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v58)) >> 32) << 6) + 4096;
          int v60 = (_WORD *)((char *)v53 + v24);
          _WORD *v60 = v59;
          v60[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v58)) >> 32) << 6) + 4096;
          v53 += 2;
          BOOL v49 = __CFADD__(v55++, 1);
        }
        while (!v49);
      }
      v19 += v16;
      v20 += v17;
      v25 += v24;
    }
    uint64_t v61 = 2 * v38;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | (unint64_t)v37) < v28)
  {
    if (v39)
    {
      int v63 = *v19++;
      int v62 = v63;
      int v64 = *v20++;
      *size_t v25 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v62)) >> 32) << 6) + 4096;
      v25[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v64)) >> 32) << 6) + 4096;
      v25 += 2;
    }
    if (v40)
    {
      uint64_t v65 = -(uint64_t)v40;
      do
      {
        int v67 = *v19++;
        int v66 = v67;
        int v68 = *v20++;
        *size_t v25 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v66)) >> 32) << 6) + 4096;
        v25[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v68)) >> 32) << 6) + 4096;
        v25 += 2;
        BOOL v49 = __CFADD__(v65++, 1);
      }
      while (!v49);
    }
  }
  return 0;
}

uint64_t vt_Copy_f420_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = *(void *)(a2 + 40);
  unint64_t v13 = v12 & 0xFFFFFFFE;
  uint64_t v14 = v8 + v12;
  uint64_t v15 = (v8 + v12) & 1;
  uint64_t v16 = a4[1];
  uint64_t v17 = a4[2];
  uint64_t v18 = v12 >> 1;
  uint64_t v19 = (unsigned __int8 *)(a3[1] + v16 * v18 + ((unint64_t)(v10 + v9) >> 1));
  uint64_t v20 = (unsigned __int8 *)(a3[2] + v17 * v18 + ((unint64_t)(v10 + v9) >> 1));
  unint64_t v21 = *(void *)(a6 + 24);
  uint64_t v22 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v23 = *(void *)(a6 + 40);
  uint64_t v24 = a8[1];
  size_t v25 = (_WORD *)(a7[1] + v24 * v23 + ((2 * v22) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v26 = v11 - (v10 + v9);
  unint64_t v27 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v22;
  if (v26 < v27) {
    unint64_t v27 = v26;
  }
  unint64_t v28 = v14 - v13 + v15;
  if (v28 >= v21) {
    unint64_t v28 = v21;
  }
  if (v28)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v13;
    if (v13 >= v12) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    uint64_t v34 = v32 + v10 + v9 + v33;
    uint64_t v35 = *a7 + v31 * v23 + 2 * v22;
    do
    {
      if (v27)
      {
        for (uint64_t i = 0; i != v27; ++i)
          *(_WORD *)(v35 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v34 + i))) >> 32) << 6;
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v28);
  }
  uint64_t v37 = v12 & 1;
  if (v28 >> 1 >= (v28 - v37) >> 1) {
    unint64_t v38 = (v28 - (v12 & 1)) >> 1;
  }
  else {
    unint64_t v38 = v28 >> 1;
  }
  char v39 = v9;
  unint64_t v40 = v27 >> 1;
  if (v27 >> 1 >= (v27 - v10) >> 1) {
    unint64_t v40 = (v27 - v10) >> 1;
  }
  if (v12)
  {
    char v41 = v19;
    if (v39)
    {
      char v41 = v19 + 1;
      unint64_t v42 = v20 + 1;
      int v44 = *v20;
      *size_t v25 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v19)) >> 32) << 6;
      v25[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v44)) >> 32) << 6;
      unint64_t v43 = v25 + 2;
      if (!v40)
      {
LABEL_27:
        v19 += v16;
        v20 += v17;
        size_t v25 = (_WORD *)((char *)v25 + v24);
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v42 = v20;
      unint64_t v43 = v25;
      if (!v40) {
        goto LABEL_27;
      }
    }
    uint64_t v45 = -(uint64_t)v40;
    do
    {
      int v47 = *v41++;
      int v46 = v47;
      int v48 = *v42++;
      *unint64_t v43 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v46)) >> 32) << 6;
      v43[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v48)) >> 32) << 6;
      v43 += 2;
      BOOL v49 = __CFADD__(v45++, 1);
    }
    while (!v49);
    goto LABEL_27;
  }
LABEL_28:
  if (v38)
  {
    for (uint64_t j = 0; j != v38; ++j)
    {
      int v51 = v19;
      unint64_t v52 = v20;
      uint64_t v53 = v25;
      if (v39)
      {
        int v51 = v19 + 1;
        unint64_t v52 = v20 + 1;
        int v54 = *v20;
        *size_t v25 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v19)) >> 32) << 6;
        v25[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v54)) >> 32) << 6;
        uint64_t v53 = v25 + 2;
      }
      if (v40)
      {
        uint64_t v55 = -(uint64_t)v40;
        do
        {
          int v57 = *v51++;
          int v56 = v57;
          int v58 = *v52++;
          int v59 = (16843010 * (unint64_t)(1023 * v56)) >> 32 << 6;
          *uint64_t v53 = v59;
          v53[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v58)) >> 32) << 6;
          int v60 = (_WORD *)((char *)v53 + v24);
          _WORD *v60 = v59;
          v60[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v58)) >> 32) << 6;
          v53 += 2;
          BOOL v49 = __CFADD__(v55++, 1);
        }
        while (!v49);
      }
      v19 += v16;
      v20 += v17;
      v25 += v24;
    }
    uint64_t v61 = 2 * v38;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | (unint64_t)v37) < v28)
  {
    if (v39)
    {
      int v63 = *v19++;
      int v62 = v63;
      int v64 = *v20++;
      *size_t v25 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v62)) >> 32) << 6;
      v25[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v64)) >> 32) << 6;
      v25 += 2;
    }
    if (v40)
    {
      uint64_t v65 = -(uint64_t)v40;
      do
      {
        int v67 = *v19++;
        int v66 = v67;
        int v68 = *v20++;
        *size_t v25 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v66)) >> 32) << 6;
        v25[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v68)) >> 32) << 6;
        v25 += 2;
        BOOL v49 = __CFADD__(v65++, 1);
      }
      while (!v49);
    }
  }
  return 0;
}

vImage_Error vt_VImage_Setup_420v_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage420Yp8_CbCr8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_420v_32ARGB;
  *a11 = vt_VImage_Cleanup_420v_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_420v_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage420Yp8_CbCr8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_420v_32BGRA;
  *a11 = vt_VImage_Cleanup_420v_32BGRA;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_420v_2vuy(unint64_t a1, unint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, char **a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = *a5;
    unint64_t v10 = a2 >> 1;
    uint64_t v11 = a1 >> 1;
    unint64_t v12 = *a6;
    unint64_t v13 = (char *)a4[1];
    uint64_t v14 = 2 * *a3;
    uint64_t v15 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v16 = *a4 + 1;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v17 = (char *)v16;
        uint64_t v18 = v11;
        uint64_t v19 = v12;
        uint64_t v20 = v13;
        do
        {
          int v21 = &v17[v7];
          uint64_t v22 = &v19[v9];
          char v23 = *v20;
          char v24 = v20[1];
          char v25 = *(v17 - 1);
          char v26 = *v17;
          v17 += 2;
          *uint64_t v19 = *v20;
          v19[1] = v25;
          v19[2] = v24;
          void v19[3] = v26;
          char v27 = *(v21 - 1);
          LOBYTE(v21) = *v21;
          char *v22 = v23;
          v22[1] = v27;
          v22[2] = v24;
          void v22[3] = (char)v21;
          v19 += 4;
          v20 += 2;
          --v18;
        }
        while (v18);
      }
      v13 += v8;
      v12 += v15;
      ++v6;
      v16 += v14;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_420v_yuvs_vec(uint64_t a1, uint64_t a2, void *a3, int8x16_t **a4, uint64_t *a5, char **a6)
{
  return 0;
}

uint64_t vt_Copy_420v_yuvs(unint64_t a1, unint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = *a5;
    unint64_t v10 = a2 >> 1;
    uint64_t v11 = a1 >> 1;
    unint64_t v12 = (unsigned char *)*a6;
    unint64_t v13 = (char *)a4[1];
    uint64_t v14 = 2 * *a3;
    uint64_t v15 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v16 = *a4 + 1;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v17 = (char *)v16;
        uint64_t v18 = v11;
        uint64_t v19 = v12;
        uint64_t v20 = v13;
        do
        {
          int v21 = &v17[v7];
          uint64_t v22 = &v19[v9];
          char v23 = *v20;
          char v24 = v20[1];
          char v25 = *(v17 - 1);
          char v26 = *v17;
          v17 += 2;
          *uint64_t v19 = v25;
          v19[1] = v23;
          v19[2] = v26;
          void v19[3] = v24;
          char v27 = *(v21 - 1);
          LOBYTE(v21) = *v21;
          unsigned char *v22 = v27;
          v22[1] = v23;
          v22[2] = (_BYTE)v21;
          void v22[3] = v24;
          v19 += 4;
          v20 += 2;
          --v18;
        }
        while (v18);
      }
      v13 += v8;
      v12 += v15;
      ++v6;
      v16 += v14;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_420v_yuvf_vec(uint64_t a1, uint64_t a2, void *a3, uint8x16_t **a4, uint64_t *a5, int8x16_t **a6, double a7, double a8, double a9, uint32x4_t a10, uint32x4_t a11)
{
  return 0;
}

uint64_t vt_Copy_420v_yuvf(unint64_t a1, unint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = *a5;
    unint64_t v10 = a2 >> 1;
    uint64_t v11 = a1 >> 1;
    unint64_t v12 = (unsigned char *)*a6;
    uint64_t v13 = 2 * *a3;
    uint64_t v14 = (unsigned __int8 *)a4[1];
    uint64_t v15 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v16 = *a4 + 1;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v17 = (unsigned __int8 *)v16;
        uint64_t v18 = v11;
        uint64_t v19 = v12;
        uint64_t v20 = v14;
        do
        {
          int v21 = &v17[v7];
          uint64_t v22 = &v19[v9];
          uint64_t v23 = *v20;
          uint64_t v24 = v20[1];
          uint64_t v25 = *(v17 - 1);
          int v26 = *v17;
          v17 += 2;
          *uint64_t v19 = sLumaTableVtoF[v25];
          LOBYTE(v23) = sChromaTableVtoF[v23];
          v19[1] = v23;
          v19[2] = sLumaTableVtoF[v26];
          LOBYTE(v24) = sChromaTableVtoF[v24];
          void v19[3] = v24;
          uint64_t v27 = *(v21 - 1);
          uint64_t v28 = *v21;
          unsigned char *v22 = sLumaTableVtoF[v27];
          v22[1] = v23;
          v22[2] = sLumaTableVtoF[v28];
          void v22[3] = v24;
          v19 += 4;
          v20 += 2;
          --v18;
        }
        while (v18);
      }
      v14 += v8;
      v12 += v15;
      ++v6;
      v16 += v13;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_420v_y420_vec(size_t __n, uint64_t a2, void *a3, _DWORD *a4, void *a5, char **a6)
{
  if (a2)
  {
    unint64_t v12 = *a6;
    uint64_t v13 = *(char **)a4;
    uint64_t v14 = a2;
    do
    {
      memcpy(v12, v13, __n);
      v13 += *a3;
      v12 += *a5;
      --v14;
    }
    while (v14);
  }
  vt_Copy_420v_y420_Chroma_arm(a4, (uint64_t)a6, __n, a2, (uint64_t)a3, (uint64_t)a5);
  return 0;
}

uint64_t vt_Copy_420v_y420(size_t __n, unint64_t a2, uint64_t *a3, char **a4, uint64_t *a5, char **a6)
{
  if (a2 >= 2)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a3;
    uint64_t v9 = *a5;
    uint64_t v24 = a5[1];
    uint64_t v25 = a3[1];
    unint64_t v22 = a2 >> 1;
    uint64_t v23 = a5[2];
    uint64_t v11 = a6[1];
    unint64_t v10 = a6[2];
    unint64_t v12 = *a6;
    if (__n >> 1 <= 1) {
      size_t v13 = 1;
    }
    else {
      size_t v13 = __n >> 1;
    }
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    do
    {
      memcpy(v12, v14, __n);
      uint64_t v16 = &v14[v8];
      uint64_t v17 = &v12[v9];
      memcpy(v17, v16, __n);
      if (__n >= 2)
      {
        uint64_t v18 = 0;
        uint64_t v19 = v15;
        do
        {
          char v20 = v19[1];
          v11[v18] = *v19;
          v10[v18] = v20;
          v19 += 2;
          ++v18;
        }
        while (v13 != v18);
      }
      uint64_t v14 = &v16[v8];
      unint64_t v12 = &v17[v9];
      v15 += v25;
      v11 += v24;
      v10 += v23;
      ++v7;
    }
    while (v7 != v22);
  }
  return 0;
}

uint64_t vt_Copy_420v_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[5] & 0xFFFFFFFELL;
  unint64_t v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  uint64_t v10 = a2[3] + a2[5];
  unint64_t v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a8;
    uint64_t v17 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v18 = (unsigned __int8 *)(a3[1] + v15 * (v9 >> 1) + v8);
    unint64_t v19 = *a3 + *a4 * v9 + v8;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        __int16 v22 = 0;
        __int16 v23 = 0;
        uint64_t v24 = v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            __int16 v25 = *v24;
            __int16 v26 = v24[1];
            v24 += 2;
            __int16 v23 = v25 << 8;
            __int16 v22 = v26 << 8;
          }
          uint64_t v27 = (_WORD *)(v17 + v20);
          __int16 v28 = *(unsigned __int8 *)(v19 + v21) << 8;
          *uint64_t v27 = -1;
          v27[1] = v28;
          v27[2] = v23;
          v27[3] = v22;
          ++v21;
          v20 += 8;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_420v_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[5] & 0xFFFFFFFELL;
  unint64_t v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  uint64_t v10 = a2[3] + a2[5];
  unint64_t v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a8;
    uint64_t v17 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v18 = (char *)(a3[1] + v15 * (v9 >> 1) + v8);
    unint64_t v19 = *a3 + *a4 * v9 + v8;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        char v22 = 0;
        char v23 = 0;
        uint64_t v24 = v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            char v23 = *v24;
            char v22 = v24[1];
            v24 += 2;
          }
          char v25 = *(unsigned char *)(v19 + v21);
          __int16 v26 = (unsigned char *)(v17 + v20);
          *__int16 v26 = -1;
          v26[1] = v25;
          v26[2] = v23;
          v26[3] = v22;
          ++v21;
          v20 += 4;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_420v_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40) & 0xFFFFFFFELL;
  uint64_t v11 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v12 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v12 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11) {
    unint64_t v12 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  }
  uint64_t v10 = *(void *)(a2 + 24) + *(void *)(a2 + 40);
  unint64_t v13 = v10 - v9 + (v10 & 1);
  if (v13 >= *(void *)(a6 + 24)) {
    unint64_t v13 = *(void *)(a6 + 24);
  }
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *a4;
    uint64_t v16 = a4[1];
    uint64_t v17 = *a8;
    uint64_t v18 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v11;
    unint64_t v19 = a3[1] + v16 * (v9 >> 1) + (v8 & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v20 = *a3 + *a4 * v9 + v8;
    do
    {
      if (v12)
      {
        uint64_t v21 = 0;
        for (unint64_t i = 0; i < v12; i += 2)
        {
          char v23 = (_WORD *)(v18 + v21);
          __int16 v24 = *(unsigned __int8 *)(v19 + i + 1) << 8;
          __int16 v25 = *(unsigned __int8 *)(v20 + i) << 8;
          __int16 v26 = *(unsigned __int8 *)(v20 + i + 1) << 8;
          *char v23 = *(unsigned __int8 *)(v19 + i) << 8;
          v23[1] = v25;
          v23[2] = v24;
          v23[3] = v26;
          v21 += 8;
        }
      }
      v20 += v15;
      v18 += v17;
      v19 += (v14++ << 63 >> 63) & v16;
    }
    while (v14 != v13);
  }
  return 0;
}

uint64_t vt_Copy_420v_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v18 = a6[3];
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17) {
    unint64_t v21 = v17;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v18) {
    unint64_t v22 = v18;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = (v9 & 0xFFFFFFFE) + v26;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    uint64_t v30 = v25 + v27;
    uint64_t v31 = a7[2] + v29 * v16 + 2 * v15;
    uint64_t v32 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(_WORD *)(v31 + 2 * i) = -1;
          *(_WORD *)(v32 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v24;
      v32 += v28;
      v31 += v29;
      ++v23;
    }
    while (v23 != v22);
  }
  uint64_t v34 = v8 & 1;
  unint64_t v35 = (v22 - v34) >> 1;
  if (v22 >> 1 < v35) {
    unint64_t v35 = v22 >> 1;
  }
  char v36 = v9;
  unint64_t v37 = v21 >> 1;
  uint64_t v38 = v9 & 1;
  if (v21 >> 1 >= (v21 - v38) >> 1) {
    unint64_t v37 = (v21 - v38) >> 1;
  }
  if (v8)
  {
    if (v36)
    {
      char v39 = v14 + 2;
      __int16 v46 = v14[1] << 8;
      *unint64_t v20 = *v14 << 8;
      v20[1] = v46;
      unint64_t v40 = v20 + 2;
      if (v37)
      {
LABEL_21:
        uint64_t v41 = -(uint64_t)v37;
        do
        {
          __int16 v42 = *v39;
          __int16 v43 = v39[1];
          v39 += 2;
          *unint64_t v40 = v42 << 8;
          v40[1] = v43 << 8;
          v40 += 2;
          BOOL v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        uint64_t v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      char v39 = v14;
      unint64_t v40 = v20;
      if (v37) {
        goto LABEL_21;
      }
    }
    uint64_t v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v21)
    {
      __int16 v47 = *v39 << 8;
      __int16 v48 = v39[1] << 8;
      *unint64_t v40 = v47;
      v40[1] = v48;
    }
    v14 += v13;
    unint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      int v50 = v14;
      int v51 = v20;
      if (v36)
      {
        int v50 = v14 + 2;
        __int16 v52 = *v14 << 8;
        __int16 v53 = v14[1] << 8;
        *unint64_t v20 = v52;
        v20[1] = v53;
        int v54 = (_WORD *)((char *)v20 + v19);
        _WORD *v54 = v52;
        v54[1] = v53;
        int v51 = v20 + 2;
      }
      if (v37)
      {
        uint64_t v55 = -(uint64_t)v37;
        do
        {
          __int16 v56 = *v50;
          __int16 v57 = v50[1];
          v50 += 2;
          v56 <<= 8;
          v57 <<= 8;
          *int v51 = v56;
          v51[1] = v57;
          v51[2] = v56;
          v51[3] = v57;
          int v58 = (_WORD *)((char *)v51 + v19);
          *int v58 = v56;
          v58[1] = v57;
          v58[2] = v56;
          v58[3] = v57;
          v51 += 4;
          BOOL v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v21)
      {
        __int16 v59 = *v50 << 8;
        __int16 v60 = v50[1] << 8;
        *int v51 = v59;
        v51[1] = v60;
        uint64_t v61 = (_WORD *)((char *)v51 + v19);
        _WORD *v61 = v59;
        v61[1] = v60;
      }
      v14 += v13;
      v20 += v19;
    }
    uint64_t v62 = 2 * v35;
  }
  else
  {
    uint64_t v62 = 0;
  }
  if ((v62 | (unint64_t)v34) < v22)
  {
    if (v36)
    {
      __int16 v63 = *v14;
      __int16 v64 = v14[1];
      v14 += 2;
      *unint64_t v20 = v63 << 8;
      v20[1] = v64 << 8;
      v20 += 2;
    }
    if (v37)
    {
      uint64_t v65 = -(uint64_t)v37;
      do
      {
        __int16 v66 = *v14;
        __int16 v67 = v14[1];
        v14 += 2;
        *unint64_t v20 = v66 << 8;
        v20[1] = v67 << 8;
        v20 += 2;
        BOOL v44 = __CFADD__(v65++, 1);
      }
      while (!v44);
      uint64_t v68 = 2 * v37;
    }
    else
    {
      uint64_t v68 = 0;
    }
    if ((v68 | (unint64_t)v38) < v21)
    {
      __int16 v69 = *v14 << 8;
      __int16 v70 = v14[1] << 8;
      *unint64_t v20 = v69;
      v20[1] = v70;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  uint64_t v31 = v8 & 1;
  unint64_t v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32) {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v21 >> 1;
  uint64_t v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1) {
    unint64_t v34 = (v21 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      char v36 = v14 + 2;
      __int16 v43 = v14[1] << 8;
      *unint64_t v20 = *v14 << 8;
      v20[1] = v43;
      unint64_t v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          __int16 v39 = *v36;
          __int16 v40 = v36[1];
          v36 += 2;
          *unint64_t v37 = v39 << 8;
          v37[1] = v40 << 8;
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      char v36 = v14;
      unint64_t v37 = v20;
      if (v34) {
        goto LABEL_21;
      }
    }
    uint64_t v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      __int16 v44 = *v36 << 8;
      __int16 v45 = v36[1] << 8;
      *unint64_t v37 = v44;
      v37[1] = v45;
    }
    v14 += v13;
    unint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      __int16 v47 = v14;
      __int16 v48 = v20;
      if (v33)
      {
        __int16 v47 = v14 + 2;
        __int16 v49 = *v14 << 8;
        __int16 v50 = v14[1] << 8;
        *unint64_t v20 = v49;
        v20[1] = v50;
        int v51 = (_WORD *)((char *)v20 + v19);
        *int v51 = v49;
        v51[1] = v50;
        __int16 v48 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v52 = -(uint64_t)v34;
        do
        {
          __int16 v53 = *v47;
          __int16 v54 = v47[1];
          v47 += 2;
          v53 <<= 8;
          v54 <<= 8;
          _WORD *v48 = v53;
          v48[1] = v54;
          _OWORD v48[2] = v53;
          v48[3] = v54;
          uint64_t v55 = (_WORD *)((char *)v48 + v19);
          _WORD *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          BOOL v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        __int16 v56 = *v47 << 8;
        __int16 v57 = v47[1] << 8;
        _WORD *v48 = v56;
        v48[1] = v57;
        int v58 = (_WORD *)((char *)v48 + v19);
        *int v58 = v56;
        v58[1] = v57;
      }
      v14 += v13;
      v20 += v19;
    }
    uint64_t v59 = 2 * v32;
  }
  else
  {
    uint64_t v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v22)
  {
    if (v33)
    {
      __int16 v60 = *v14;
      __int16 v61 = v14[1];
      v14 += 2;
      *unint64_t v20 = v60 << 8;
      v20[1] = v61 << 8;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v62 = -(uint64_t)v34;
      do
      {
        __int16 v63 = *v14;
        __int16 v64 = v14[1];
        v14 += 2;
        *unint64_t v20 = v63 << 8;
        v20[1] = v64 << 8;
        v20 += 2;
        BOOL v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      uint64_t v65 = 2 * v34;
    }
    else
    {
      uint64_t v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v21)
    {
      __int16 v66 = *v14 << 8;
      __int16 v67 = v14[1] << 8;
      *unint64_t v20 = v66;
      v20[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  unint64_t v12 = v8 & 0xFFFFFFFE;
  uint64_t v13 = v10 + v8;
  uint64_t v14 = (v10 + v8) & 1;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  unint64_t v20 = a6[2];
  unint64_t v19 = a6[3];
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v18 + 4 * v17);
  unint64_t v23 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v23 >= v20) {
    unint64_t v23 = v20;
  }
  if (v13 - v12 + v14 >= v19) {
    unint64_t v24 = v19;
  }
  else {
    unint64_t v24 = v13 - v12 + v14;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a8;
    uint64_t v30 = v27 + (v9 & 0xFFFFFFFE) + v28;
    uint64_t v31 = *a7 + *a8 * v18 + 2 * v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          unsigned int v33 = *(unsigned __int8 *)(v30 + i);
          if (v33 >= 0xEB) {
            unsigned int v33 = 235;
          }
          if (v33 <= 0x10) {
            unsigned int v33 = 16;
          }
          *(_WORD *)(v31 + 2 * i) = (-1048560 - v33 + (v33 << 16)) / 0xDB;
        }
      }
      v30 += v26;
      v31 += v29;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v34 = v8 & 1;
  unint64_t v35 = (v24 - v34) >> 1;
  if (v24 >> 1 < v35) {
    unint64_t v35 = v24 >> 1;
  }
  char v36 = v9;
  unint64_t v37 = v23 >> 1;
  uint64_t v38 = v9 & 1;
  if (v23 >> 1 >= (v23 - v38) >> 1) {
    unint64_t v37 = (v23 - v38) >> 1;
  }
  if (v8)
  {
    if (v36)
    {
      unsigned int v46 = *v16;
      unsigned int v47 = v16[1];
      if (v46 >= 0xF0) {
        unsigned int v46 = 240;
      }
      if (v46 <= 0x10) {
        unsigned int v46 = 16;
      }
      if (v47 >= 0xF0) {
        unsigned int v47 = 240;
      }
      if (v47 <= 0x10) {
        int v48 = 16;
      }
      else {
        int v48 = v47;
      }
      __int16 v39 = v16 + 2;
      _WORD *v22 = (613566757 * (unint64_t)((-1048560 - v46 + (v46 << 16)) >> 5)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-1048560 - v48 + (v48 << 16)) >> 5)) >> 32;
      __int16 v40 = v22 + 2;
      if (v37) {
        goto LABEL_26;
      }
    }
    else
    {
      __int16 v39 = v16;
      __int16 v40 = v22;
      if (v37)
      {
LABEL_26:
        uint64_t v41 = -(uint64_t)v37;
        do
        {
          unsigned int v42 = *v39;
          unsigned int v43 = v39[1];
          if (v42 >= 0xF0) {
            unsigned int v42 = 240;
          }
          if (v42 <= 0x10) {
            unsigned int v42 = 16;
          }
          if (v43 >= 0xF0) {
            unsigned int v43 = 240;
          }
          if (v43 <= 0x10) {
            unsigned int v43 = 16;
          }
          v39 += 2;
          *__int16 v40 = (613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32;
          v40[1] = (613566757 * (unint64_t)((-1048560 - v43 + (v43 << 16)) >> 5)) >> 32;
          v40 += 2;
          BOOL v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        uint64_t v45 = 2 * v37;
        goto LABEL_49;
      }
    }
    uint64_t v45 = 0;
LABEL_49:
    if ((v45 | (unint64_t)v38) < v23)
    {
      unsigned int v49 = *v39;
      unsigned int v50 = v39[1];
      if (v49 >= 0xF0) {
        unsigned int v49 = 240;
      }
      if (v49 <= 0x10) {
        unsigned int v49 = 16;
      }
      if (v50 >= 0xF0) {
        unsigned int v50 = 240;
      }
      if (v50 <= 0x10) {
        unsigned int v50 = 16;
      }
      *__int16 v40 = (613566757 * (unint64_t)((-1048560 - v49 + (v49 << 16)) >> 5)) >> 32;
      v40[1] = (613566757 * (unint64_t)((-1048560 - v50 + (v50 << 16)) >> 5)) >> 32;
    }
    v16 += v15;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      uint64_t v52 = v16;
      __int16 v53 = v22;
      if (v36)
      {
        unsigned int v54 = *v16;
        unsigned int v55 = v16[1];
        if (v54 >= 0xF0) {
          unsigned int v54 = 240;
        }
        if (v54 <= 0x10) {
          unsigned int v54 = 16;
        }
        if (v55 >= 0xF0) {
          unsigned int v55 = 240;
        }
        if (v55 <= 0x10) {
          int v56 = 16;
        }
        else {
          int v56 = v55;
        }
        uint64_t v52 = v16 + 2;
        unint64_t v57 = (613566757 * (unint64_t)((-1048560 - v54 + (v54 << 16)) >> 5)) >> 32;
        unint64_t v58 = (613566757 * (unint64_t)((-1048560 - v56 + (v56 << 16)) >> 5)) >> 32;
        _WORD *v22 = v57;
        v22[1] = v58;
        uint64_t v59 = (_WORD *)((char *)v22 + v21);
        _WORD *v59 = v57;
        v59[1] = v58;
        __int16 v53 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v60 = -(uint64_t)v37;
        do
        {
          unsigned int v61 = *v52;
          unsigned int v62 = v52[1];
          if (v61 >= 0xF0) {
            unsigned int v61 = 240;
          }
          if (v61 <= 0x10) {
            unsigned int v61 = 16;
          }
          if (v62 >= 0xF0) {
            unsigned int v62 = 240;
          }
          if (v62 <= 0x10) {
            unsigned int v62 = 16;
          }
          unint64_t v63 = (613566757 * (unint64_t)((-1048560 - v61 + (v61 << 16)) >> 5)) >> 32;
          *__int16 v53 = v63;
          unint64_t v64 = (613566757 * (unint64_t)((-1048560 - v62 + (v62 << 16)) >> 5)) >> 32;
          v53[1] = v64;
          v53[2] = v63;
          v53[3] = v64;
          uint64_t v65 = (_WORD *)((char *)v53 + v21);
          *uint64_t v65 = v63;
          v65[1] = v64;
          v52 += 2;
          v65[2] = v63;
          v65[3] = v64;
          v53 += 4;
          BOOL v44 = __CFADD__(v60++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v23)
      {
        unsigned int v66 = *v52;
        unsigned int v67 = v52[1];
        if (v66 >= 0xF0) {
          unsigned int v66 = 240;
        }
        if (v66 <= 0x10) {
          unsigned int v66 = 16;
        }
        if (v67 >= 0xF0) {
          unsigned int v67 = 240;
        }
        if (v67 <= 0x10) {
          unsigned int v67 = 16;
        }
        unint64_t v68 = (613566757 * (unint64_t)((-1048560 - v66 + (v66 << 16)) >> 5)) >> 32;
        unint64_t v69 = (613566757 * (unint64_t)((-1048560 - v67 + (v67 << 16)) >> 5)) >> 32;
        *__int16 v53 = v68;
        v53[1] = v69;
        __int16 v70 = (_WORD *)((char *)v53 + v21);
        *__int16 v70 = v68;
        v70[1] = v69;
      }
      v16 += v15;
      v22 += v21;
    }
    uint64_t v71 = 2 * v35;
  }
  else
  {
    uint64_t v71 = 0;
  }
  if ((v71 | (unint64_t)v34) < v24)
  {
    if (v36)
    {
      unsigned int v72 = *v16;
      unsigned int v73 = v16[1];
      if (v72 >= 0xF0) {
        unsigned int v72 = 240;
      }
      if (v72 <= 0x10) {
        unsigned int v72 = 16;
      }
      if (v73 >= 0xF0) {
        unsigned int v73 = 240;
      }
      if (v73 <= 0x10) {
        unsigned int v73 = 16;
      }
      v16 += 2;
      _WORD *v22 = (613566757 * (unint64_t)((-1048560 - v72 + (v72 << 16)) >> 5)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-1048560 - v73 + (v73 << 16)) >> 5)) >> 32;
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v74 = -(uint64_t)v37;
      do
      {
        unsigned int v75 = *v16;
        unsigned int v76 = v16[1];
        if (v75 >= 0xF0) {
          unsigned int v75 = 240;
        }
        if (v75 <= 0x10) {
          unsigned int v75 = 16;
        }
        if (v76 >= 0xF0) {
          unsigned int v76 = 240;
        }
        if (v76 <= 0x10) {
          unsigned int v76 = 16;
        }
        v16 += 2;
        _WORD *v22 = (613566757 * (unint64_t)((-1048560 - v75 + (v75 << 16)) >> 5)) >> 32;
        v22[1] = (613566757 * (unint64_t)((-1048560 - v76 + (v76 << 16)) >> 5)) >> 32;
        v22 += 2;
        BOOL v44 = __CFADD__(v74++, 1);
      }
      while (!v44);
      v37 *= 2;
    }
    if ((v37 | v38) < v23)
    {
      unsigned int v77 = *v16;
      unsigned int v78 = v16[1];
      if (v77 >= 0xF0) {
        unsigned int v77 = 240;
      }
      if (v77 <= 0x10) {
        unsigned int v77 = 16;
      }
      if (v78 >= 0xF0) {
        unsigned int v78 = 240;
      }
      if (v78 <= 0x10) {
        unsigned int v78 = 16;
      }
      _WORD *v22 = (613566757 * (unint64_t)((-1048560 - v77 + (v77 << 16)) >> 5)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-1048560 - v78 + (v78 << 16)) >> 5)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = v27;
    }
    uint64_t v30 = v9 + v8 + v29;
    uint64_t v31 = *a8;
    uint64_t v32 = a8[2];
    uint64_t v33 = v28 + v30;
    uint64_t v34 = a7[2] + v32 * v19 + v20;
    uint64_t v35 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          *(_WORD *)(v34 + 2 * i) = -1;
          *(_WORD *)(v35 + 2 * i) = *(unsigned __int8 *)(v33 + i) << 8;
        }
      }
      v33 += v27;
      v35 += v31;
      v34 += v32;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v37 = v11 & 1;
  if (v25 >> 1 >= (v25 - v37) >> 1) {
    unint64_t v38 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v38 = v25 >> 1;
  }
  char v39 = v8;
  unint64_t v40 = v24 >> 1;
  unint64_t v41 = (v24 - v9) >> 1;
  if (v40 >= v41) {
    unint64_t v40 = v41;
  }
  if (v11)
  {
    if (v39)
    {
      unsigned int v42 = v15 + 2;
      __int16 v44 = v15[1] << 8;
      _WORD *v22 = *v15 << 8;
      v22[1] = v44;
      unsigned int v43 = v22 + 2;
      if (!v40)
      {
LABEL_27:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      unsigned int v42 = v15;
      unsigned int v43 = v22;
      if (!v40) {
        goto LABEL_27;
      }
    }
    uint64_t v45 = -(uint64_t)v40;
    do
    {
      __int16 v46 = v42[1] << 8;
      *unsigned int v43 = *v42 << 8;
      v43[1] = v46;
      v42 += 2;
      v43 += 2;
      BOOL v47 = __CFADD__(v45++, 1);
    }
    while (!v47);
    goto LABEL_27;
  }
LABEL_28:
  if (v38)
  {
    for (uint64_t j = 0; j != v38; ++j)
    {
      unsigned int v49 = v15;
      unsigned int v50 = v22;
      if (v39)
      {
        unsigned int v49 = v15 + 2;
        __int16 v51 = v15[1] << 8;
        _WORD *v22 = *v15 << 8;
        v22[1] = v51;
        unsigned int v50 = v22 + 2;
      }
      if (v40)
      {
        uint64_t v52 = -(uint64_t)v40;
        do
        {
          __int16 v53 = *v49 << 8;
          __int16 v54 = v49[1] << 8;
          *unsigned int v50 = v53;
          v50[1] = v54;
          unsigned int v55 = (_WORD *)((char *)v50 + v21);
          _WORD *v55 = v53;
          v55[1] = v54;
          v50 += 2;
          v49 += 2;
          BOOL v47 = __CFADD__(v52++, 1);
        }
        while (!v47);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v56 = 2 * v38;
  }
  else
  {
    uint64_t v56 = 0;
  }
  if ((v56 | (unint64_t)v37) < v25)
  {
    if (v39)
    {
      __int16 v57 = *v15;
      __int16 v58 = v15[1];
      v15 += 2;
      _WORD *v22 = v57 << 8;
      v22[1] = v58 << 8;
      v22 += 2;
    }
    if (v40)
    {
      uint64_t v59 = -(uint64_t)v40;
      do
      {
        __int16 v60 = v15[1] << 8;
        _WORD *v22 = *v15 << 8;
        v22[1] = v60;
        v15 += 2;
        v22 += 2;
        BOOL v47 = __CFADD__(v59++, 1);
      }
      while (!v47);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v9 + v8 + v30;
    uint64_t v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1) {
    unint64_t v35 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v35 = v25 >> 1;
  }
  char v36 = v8;
  unint64_t v37 = v24 >> 1;
  unint64_t v38 = (v24 - v9) >> 1;
  if (v37 >= v38) {
    unint64_t v37 = v38;
  }
  if (v11)
  {
    if (v36)
    {
      char v39 = v15 + 2;
      __int16 v41 = v15[1] << 8;
      _WORD *v22 = *v15 << 8;
      v22[1] = v41;
      unint64_t v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      char v39 = v15;
      unint64_t v40 = v22;
      if (!v37) {
        goto LABEL_27;
      }
    }
    uint64_t v42 = -(uint64_t)v37;
    do
    {
      __int16 v43 = v39[1] << 8;
      *unint64_t v40 = *v39 << 8;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      __int16 v46 = v15;
      BOOL v47 = v22;
      if (v36)
      {
        __int16 v46 = v15 + 2;
        __int16 v48 = v15[1] << 8;
        _WORD *v22 = *v15 << 8;
        v22[1] = v48;
        BOOL v47 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v49 = -(uint64_t)v37;
        do
        {
          __int16 v50 = *v46 << 8;
          __int16 v51 = v46[1] << 8;
          *BOOL v47 = v50;
          v47[1] = v51;
          uint64_t v52 = (_WORD *)((char *)v47 + v21);
          *uint64_t v52 = v50;
          v52[1] = v51;
          v47 += 2;
          v46 += 2;
          BOOL v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v53 = 2 * v35;
  }
  else
  {
    uint64_t v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if (v36)
    {
      __int16 v54 = *v15;
      __int16 v55 = v15[1];
      v15 += 2;
      _WORD *v22 = v54 << 8;
      v22[1] = v55 << 8;
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v56 = -(uint64_t)v37;
      do
      {
        __int16 v57 = v15[1] << 8;
        _WORD *v22 = *v15 << 8;
        v22[1] = v57;
        v15 += 2;
        v22 += 2;
        BOOL v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = *a8;
    uint64_t v31 = v28 + v9 + v8 + v29;
    uint64_t v32 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v34 = *(unsigned __int8 *)(v31 + i);
          if (v34 >= 0xEB) {
            unsigned int v34 = 235;
          }
          if (v34 <= 0x10) {
            unsigned int v34 = 16;
          }
          *(_WORD *)(v32 + 2 * i) = (-1048560 - v34 + (v34 << 16)) / 0xDB;
        }
      }
      v31 += v27;
      v32 += v30;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v35 = v11 & 1;
  if (v25 >> 1 >= (v25 - v35) >> 1) {
    unint64_t v36 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v36 = v25 >> 1;
  }
  char v37 = v8;
  unint64_t v38 = v24 >> 1;
  if (v24 >> 1 >= (v24 - v9) >> 1) {
    unint64_t v38 = (v24 - v9) >> 1;
  }
  if (v11)
  {
    if (v37)
    {
      unsigned int v41 = *v15;
      if (v41 >= 0xF0) {
        unsigned int v41 = 240;
      }
      if (v41 <= 0x10) {
        int v42 = 16;
      }
      else {
        int v42 = v41;
      }
      if (v15[1] >= 0xF0u) {
        unsigned int v43 = 240;
      }
      else {
        unsigned int v43 = v15[1];
      }
      if (v43 <= 0x10) {
        int v44 = 16;
      }
      else {
        int v44 = v43;
      }
      char v39 = v15 + 2;
      _WORD *v22 = (613566757 * (unint64_t)((-1048560 - v42 + (v42 << 16)) >> 5)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32;
      unint64_t v40 = v22 + 2;
      if (!v38) {
        goto LABEL_50;
      }
    }
    else
    {
      char v39 = v15;
      unint64_t v40 = v22;
      if (!v38)
      {
LABEL_50:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_51;
      }
    }
    uint64_t v45 = -(uint64_t)v38;
    do
    {
      unsigned int v46 = *v39;
      unsigned int v47 = v39[1];
      if (v46 >= 0xF0) {
        unsigned int v46 = 240;
      }
      if (v46 <= 0x10) {
        unsigned int v46 = 16;
      }
      if (v47 >= 0xF0) {
        unsigned int v47 = 240;
      }
      if (v47 <= 0x10) {
        unsigned int v47 = 16;
      }
      *unint64_t v40 = (613566757 * (unint64_t)((-1048560 - v46 + (v46 << 16)) >> 5)) >> 32;
      v40[1] = (613566757 * (unint64_t)((-1048560 - v47 + (v47 << 16)) >> 5)) >> 32;
      v39 += 2;
      v40 += 2;
      BOOL v48 = __CFADD__(v45++, 1);
    }
    while (!v48);
    goto LABEL_50;
  }
LABEL_51:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      __int16 v50 = v15;
      __int16 v51 = v22;
      if (v37)
      {
        unsigned int v52 = *v15;
        if (v52 >= 0xF0) {
          unsigned int v52 = 240;
        }
        if (v52 <= 0x10) {
          int v53 = 16;
        }
        else {
          int v53 = v52;
        }
        if (v15[1] >= 0xF0u) {
          unsigned int v54 = 240;
        }
        else {
          unsigned int v54 = v15[1];
        }
        if (v54 <= 0x10) {
          int v55 = 16;
        }
        else {
          int v55 = v54;
        }
        __int16 v50 = v15 + 2;
        _WORD *v22 = (613566757 * (unint64_t)((-1048560 - v53 + (v53 << 16)) >> 5)) >> 32;
        v22[1] = (613566757 * (unint64_t)((-1048560 - v55 + (v55 << 16)) >> 5)) >> 32;
        __int16 v51 = v22 + 2;
      }
      if (v38)
      {
        uint64_t v56 = -(uint64_t)v38;
        do
        {
          unsigned int v57 = *v50;
          unsigned int v58 = v50[1];
          if (v57 >= 0xF0) {
            unsigned int v57 = 240;
          }
          if (v57 <= 0x10) {
            unsigned int v57 = 16;
          }
          if (v58 >= 0xF0) {
            unsigned int v58 = 240;
          }
          if (v58 <= 0x10) {
            unsigned int v58 = 16;
          }
          unint64_t v59 = (613566757 * (unint64_t)((-1048560 - v57 + (v57 << 16)) >> 5)) >> 32;
          unint64_t v60 = (613566757 * (unint64_t)((-1048560 - v58 + (v58 << 16)) >> 5)) >> 32;
          *__int16 v51 = v59;
          v51[1] = v60;
          unsigned int v61 = (_WORD *)((char *)v51 + v21);
          _WORD *v61 = v59;
          v61[1] = v60;
          v51 += 2;
          v50 += 2;
          BOOL v48 = __CFADD__(v56++, 1);
        }
        while (!v48);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v62 = 2 * v36;
  }
  else
  {
    uint64_t v62 = 0;
  }
  if ((v62 | (unint64_t)v35) < v25)
  {
    if (v37)
    {
      unsigned int v63 = *v15;
      unsigned int v64 = v15[1];
      if (v63 >= 0xF0) {
        unsigned int v63 = 240;
      }
      if (v63 <= 0x10) {
        unsigned int v63 = 16;
      }
      if (v64 >= 0xF0) {
        unsigned int v64 = 240;
      }
      if (v64 <= 0x10) {
        unsigned int v64 = 16;
      }
      v15 += 2;
      _WORD *v22 = (613566757 * (unint64_t)((-1048560 - v63 + (v63 << 16)) >> 5)) >> 32;
      v22[1] = (613566757 * (unint64_t)((-1048560 - v64 + (v64 << 16)) >> 5)) >> 32;
      v22 += 2;
    }
    if (v38)
    {
      uint64_t v65 = -(uint64_t)v38;
      do
      {
        unsigned int v66 = *v15;
        unsigned int v67 = v15[1];
        if (v66 >= 0xF0) {
          unsigned int v66 = 240;
        }
        if (v66 <= 0x10) {
          unsigned int v66 = 16;
        }
        if (v67 >= 0xF0) {
          unsigned int v67 = 240;
        }
        if (v67 <= 0x10) {
          unsigned int v67 = 16;
        }
        _WORD *v22 = (613566757 * (unint64_t)((-1048560 - v66 + (v66 << 16)) >> 5)) >> 32;
        v22[1] = (613566757 * (unint64_t)((-1048560 - v67 + (v67 << 16)) >> 5)) >> 32;
        v15 += 2;
        v22 += 2;
        BOOL v48 = __CFADD__(v65++, 1);
      }
      while (!v48);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v8) >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    uint64_t v32 = v30 + v10 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v35 = v26 >> 1;
  unint64_t v36 = v26 - v12;
  if (v35 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v35;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unint64_t v40 = v16 + 2;
      __int16 v42 = v16[1] << 8;
      *unint64_t v23 = *v16 << 8;
      v23[1] = v42;
      unsigned int v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 += v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v40 = v16;
      unsigned int v41 = v23;
      if (!v39) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      __int16 v44 = v40[1] << 8;
      *unsigned int v41 = *v40 << 8;
      v41[1] = v44;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      unsigned int v47 = v16;
      BOOL v48 = v23;
      if (v9)
      {
        unsigned int v47 = v16 + 2;
        __int16 v49 = v16[1] << 8;
        *unint64_t v23 = *v16 << 8;
        v23[1] = v49;
        BOOL v48 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          __int16 v51 = v47[1] << 8;
          _WORD *v48 = *v47 << 8;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 += v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v9) >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    uint64_t v32 = v30 + v10 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          unsigned int v35 = *(unsigned __int8 *)(v32 + i);
          if (v35 >= 0xEB) {
            unsigned int v35 = 235;
          }
          if (v35 <= 0x10) {
            unsigned int v35 = 16;
          }
          *(_WORD *)(v33 + 2 * i) = (-1048560 - v35 + (v35 << 16)) / 0xDB;
        }
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v36 = v26 >> 1;
  unint64_t v37 = v26 - v12;
  if (v36 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v36;
  }
  unint64_t v39 = v25 - (v8 & 1);
  if (v25 >> 1 >= v39 >> 1) {
    unint64_t v40 = v39 >> 1;
  }
  else {
    unint64_t v40 = v25 >> 1;
  }
  if (v12)
  {
    if (v8)
    {
      unsigned int v43 = *v16;
      if (v43 >= 0xF0) {
        unsigned int v43 = 240;
      }
      if (v43 <= 0x10) {
        int v44 = 16;
      }
      else {
        int v44 = v43;
      }
      if (v16[1] >= 0xF0u) {
        unsigned int v45 = 240;
      }
      else {
        unsigned int v45 = v16[1];
      }
      if (v45 <= 0x10) {
        int v46 = 16;
      }
      else {
        int v46 = v45;
      }
      unsigned int v41 = v16 + 2;
      *unint64_t v23 = (613566757 * (unint64_t)((-1048560 - v44 + (v44 << 16)) >> 5)) >> 32;
      v23[1] = (613566757 * (unint64_t)((-1048560 - v46 + (v46 << 16)) >> 5)) >> 32;
      __int16 v42 = v23 + 2;
      if (!v40) {
        goto LABEL_51;
      }
    }
    else
    {
      unsigned int v41 = v16;
      __int16 v42 = v23;
      if (!v40)
      {
LABEL_51:
        v16 += v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_52;
      }
    }
    uint64_t v47 = -(uint64_t)v40;
    do
    {
      unsigned int v48 = *v41;
      unsigned int v49 = v41[1];
      if (v48 >= 0xF0) {
        unsigned int v48 = 240;
      }
      if (v48 <= 0x10) {
        unsigned int v48 = 16;
      }
      if (v49 >= 0xF0) {
        unsigned int v49 = 240;
      }
      if (v49 <= 0x10) {
        unsigned int v49 = 16;
      }
      *__int16 v42 = (613566757 * (unint64_t)((-1048560 - v48 + (v48 << 16)) >> 5)) >> 32;
      v42[1] = (613566757 * (unint64_t)((-1048560 - v49 + (v49 << 16)) >> 5)) >> 32;
      v41 += 2;
      v42 += 2;
      BOOL v50 = __CFADD__(v47++, 1);
    }
    while (!v50);
    goto LABEL_51;
  }
LABEL_52:
  if (v38)
  {
    for (uint64_t j = 0; j != v38; ++j)
    {
      unsigned int v52 = v16;
      int v53 = v23;
      if (v8)
      {
        unsigned int v54 = *v16;
        if (v54 >= 0xF0) {
          unsigned int v54 = 240;
        }
        if (v54 <= 0x10) {
          int v55 = 16;
        }
        else {
          int v55 = v54;
        }
        if (v16[1] >= 0xF0u) {
          unsigned int v56 = 240;
        }
        else {
          unsigned int v56 = v16[1];
        }
        if (v56 <= 0x10) {
          int v57 = 16;
        }
        else {
          int v57 = v56;
        }
        unsigned int v52 = v16 + 2;
        *unint64_t v23 = (613566757 * (unint64_t)((-1048560 - v55 + (v55 << 16)) >> 5)) >> 32;
        v23[1] = (613566757 * (unint64_t)((-1048560 - v57 + (v57 << 16)) >> 5)) >> 32;
        int v53 = v23 + 2;
      }
      if (v40)
      {
        uint64_t v58 = -(uint64_t)v40;
        do
        {
          unsigned int v59 = *v52;
          unsigned int v60 = v52[1];
          if (v59 >= 0xF0) {
            unsigned int v59 = 240;
          }
          if (v59 <= 0x10) {
            unsigned int v59 = 16;
          }
          if (v60 >= 0xF0) {
            unsigned int v60 = 240;
          }
          if (v60 <= 0x10) {
            unsigned int v60 = 16;
          }
          *int v53 = (613566757 * (unint64_t)((-1048560 - v59 + (v59 << 16)) >> 5)) >> 32;
          v53[1] = (613566757 * (unint64_t)((-1048560 - v60 + (v60 << 16)) >> 5)) >> 32;
          v52 += 2;
          v53 += 2;
          BOOL v50 = __CFADD__(v58++, 1);
        }
        while (!v50);
      }
      v16 += v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v18 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17) {
    unint64_t v21 = v17;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v18) {
    unint64_t v22 = v18;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = (v9 & 0xFFFFFFFE) + v26;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    uint64_t v30 = v25 + v27;
    uint64_t v31 = a7[2] + v29 * v16 + 2 * v15;
    uint64_t v32 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(_WORD *)(v31 + 2 * i) = -1;
          *(_WORD *)(v32 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v24;
      v32 += v28;
      v31 += v29;
      ++v23;
    }
    while (v23 != v22);
  }
  uint64_t v34 = v8 & 1;
  unint64_t v35 = (v22 - v34) >> 1;
  if (v22 >> 1 < v35) {
    unint64_t v35 = v22 >> 1;
  }
  char v36 = v9;
  unint64_t v37 = v21 >> 1;
  uint64_t v38 = v9 & 1;
  if (v21 >> 1 >= (v21 - v38) >> 1) {
    unint64_t v37 = (v21 - v38) >> 1;
  }
  if (v8)
  {
    if (v36)
    {
      unint64_t v39 = v14 + 2;
      __int16 v46 = v14[1] << 8;
      *uint64_t v20 = *v14 << 8;
      v20[1] = v46;
      unint64_t v40 = v20 + 2;
      if (v37)
      {
LABEL_21:
        uint64_t v41 = -(uint64_t)v37;
        do
        {
          __int16 v42 = *v39;
          __int16 v43 = v39[1];
          v39 += 2;
          *unint64_t v40 = v42 << 8;
          v40[1] = v43 << 8;
          v40 += 2;
          BOOL v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        uint64_t v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v39 = v14;
      unint64_t v40 = v20;
      if (v37) {
        goto LABEL_21;
      }
    }
    uint64_t v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v21)
    {
      __int16 v47 = *v39 << 8;
      __int16 v48 = v39[1] << 8;
      *unint64_t v40 = v47;
      v40[1] = v48;
    }
    v14 += v13;
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      BOOL v50 = v14;
      __int16 v51 = v20;
      if (v36)
      {
        BOOL v50 = v14 + 2;
        __int16 v52 = *v14 << 8;
        __int16 v53 = v14[1] << 8;
        *uint64_t v20 = v52;
        v20[1] = v53;
        unsigned int v54 = (_WORD *)((char *)v20 + v19);
        _WORD *v54 = v52;
        v54[1] = v53;
        __int16 v51 = v20 + 2;
      }
      if (v37)
      {
        uint64_t v55 = -(uint64_t)v37;
        do
        {
          __int16 v56 = *v50;
          __int16 v57 = v50[1];
          v50 += 2;
          v56 <<= 8;
          v57 <<= 8;
          *__int16 v51 = v56;
          v51[1] = v57;
          v51[2] = v56;
          v51[3] = v57;
          uint64_t v58 = (_WORD *)((char *)v51 + v19);
          *uint64_t v58 = v56;
          v58[1] = v57;
          v58[2] = v56;
          v58[3] = v57;
          v51 += 4;
          BOOL v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v21)
      {
        __int16 v59 = *v50 << 8;
        __int16 v60 = v50[1] << 8;
        *__int16 v51 = v59;
        v51[1] = v60;
        unsigned int v61 = (_WORD *)((char *)v51 + v19);
        _WORD *v61 = v59;
        v61[1] = v60;
      }
      v14 += v13;
      v20 += v19;
    }
    uint64_t v62 = 2 * v35;
  }
  else
  {
    uint64_t v62 = 0;
  }
  if ((v62 | (unint64_t)v34) < v22)
  {
    if (v36)
    {
      __int16 v63 = *v14;
      __int16 v64 = v14[1];
      v14 += 2;
      *uint64_t v20 = v63 << 8;
      v20[1] = v64 << 8;
      v20 += 2;
    }
    if (v37)
    {
      uint64_t v65 = -(uint64_t)v37;
      do
      {
        __int16 v66 = *v14;
        __int16 v67 = v14[1];
        v14 += 2;
        *uint64_t v20 = v66 << 8;
        v20[1] = v67 << 8;
        v20 += 2;
        BOOL v44 = __CFADD__(v65++, 1);
      }
      while (!v44);
      uint64_t v68 = 2 * v37;
    }
    else
    {
      uint64_t v68 = 0;
    }
    if ((v68 | (unint64_t)v38) < v21)
    {
      __int16 v69 = *v14 << 8;
      __int16 v70 = v14[1] << 8;
      *uint64_t v20 = v69;
      v20[1] = v70;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  uint64_t v31 = v8 & 1;
  unint64_t v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32) {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v21 >> 1;
  uint64_t v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1) {
    unint64_t v34 = (v21 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      char v36 = v14 + 2;
      __int16 v43 = v14[1] << 8;
      *uint64_t v20 = *v14 << 8;
      v20[1] = v43;
      unint64_t v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          __int16 v39 = *v36;
          __int16 v40 = v36[1];
          v36 += 2;
          *unint64_t v37 = v39 << 8;
          v37[1] = v40 << 8;
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      char v36 = v14;
      unint64_t v37 = v20;
      if (v34) {
        goto LABEL_21;
      }
    }
    uint64_t v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      __int16 v44 = *v36 << 8;
      __int16 v45 = v36[1] << 8;
      *unint64_t v37 = v44;
      v37[1] = v45;
    }
    v14 += v13;
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      __int16 v47 = v14;
      __int16 v48 = v20;
      if (v33)
      {
        __int16 v47 = v14 + 2;
        __int16 v49 = *v14 << 8;
        __int16 v50 = v14[1] << 8;
        *uint64_t v20 = v49;
        v20[1] = v50;
        __int16 v51 = (_WORD *)((char *)v20 + v19);
        *__int16 v51 = v49;
        v51[1] = v50;
        __int16 v48 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v52 = -(uint64_t)v34;
        do
        {
          __int16 v53 = *v47;
          __int16 v54 = v47[1];
          v47 += 2;
          v53 <<= 8;
          v54 <<= 8;
          _WORD *v48 = v53;
          v48[1] = v54;
          _OWORD v48[2] = v53;
          v48[3] = v54;
          uint64_t v55 = (_WORD *)((char *)v48 + v19);
          _WORD *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          BOOL v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        __int16 v56 = *v47 << 8;
        __int16 v57 = v47[1] << 8;
        _WORD *v48 = v56;
        v48[1] = v57;
        uint64_t v58 = (_WORD *)((char *)v48 + v19);
        *uint64_t v58 = v56;
        v58[1] = v57;
      }
      v14 += v13;
      v20 += v19;
    }
    uint64_t v59 = 2 * v32;
  }
  else
  {
    uint64_t v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v22)
  {
    if (v33)
    {
      __int16 v60 = *v14;
      __int16 v61 = v14[1];
      v14 += 2;
      *uint64_t v20 = v60 << 8;
      v20[1] = v61 << 8;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v62 = -(uint64_t)v34;
      do
      {
        __int16 v63 = *v14;
        __int16 v64 = v14[1];
        v14 += 2;
        *uint64_t v20 = v63 << 8;
        v20[1] = v64 << 8;
        v20 += 2;
        BOOL v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      uint64_t v65 = 2 * v34;
    }
    else
    {
      uint64_t v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v21)
    {
      __int16 v66 = *v14 << 8;
      __int16 v67 = v14[1] << 8;
      *uint64_t v20 = v66;
      v20[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  if (v12 - v11 + (v12 & 1) >= v17) {
    unint64_t v22 = v17;
  }
  else {
    unint64_t v22 = v12 - v11 + (v12 & 1);
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v31 = *(unsigned __int8 *)(v28 + i);
          if (v31 >= 0xEB) {
            unsigned int v31 = 235;
          }
          if (v31 <= 0x10) {
            unsigned int v31 = 16;
          }
          *(_WORD *)(v29 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v31 - 65520)) >> 32)
                                                  + ((4095 * v31
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v31 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v32 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v32) {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v21 >> 1;
  uint64_t v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1) {
    unint64_t v34 = (v21 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      unsigned int v43 = *v14;
      unsigned int v44 = v14[1];
      if (v43 >= 0xF0) {
        unsigned int v43 = 240;
      }
      if (v43 <= 0x10) {
        unsigned int v43 = 16;
      }
      if (v44 >= 0xF0) {
        unsigned int v44 = 240;
      }
      if (v44 <= 0x10) {
        int v45 = 16;
      }
      else {
        int v45 = v44;
      }
      char v36 = v14 + 2;
      *uint64_t v20 = 16 * ((613566757 * (unint64_t)((4095 * v43 - 65520) >> 5)) >> 32);
      v20[1] = 16 * ((613566757 * (unint64_t)((4095 * v45 - 65520) >> 5)) >> 32);
      unint64_t v37 = v20 + 2;
      if (v34) {
        goto LABEL_26;
      }
    }
    else
    {
      char v36 = v14;
      unint64_t v37 = v20;
      if (v34)
      {
LABEL_26:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          unsigned int v39 = *v36;
          unsigned int v40 = v36[1];
          if (v39 >= 0xF0) {
            unsigned int v39 = 240;
          }
          if (v39 <= 0x10) {
            unsigned int v39 = 16;
          }
          if (v40 >= 0xF0) {
            unsigned int v40 = 240;
          }
          if (v40 <= 0x10) {
            unsigned int v40 = 16;
          }
          v36 += 2;
          *unint64_t v37 = 16 * ((613566757 * (unint64_t)((4095 * v39 - 65520) >> 5)) >> 32);
          v37[1] = 16 * ((613566757 * (unint64_t)((4095 * v40 - 65520) >> 5)) >> 32);
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_49;
      }
    }
    uint64_t v42 = 0;
LABEL_49:
    if ((v42 | (unint64_t)v35) < v21)
    {
      unsigned int v46 = *v36;
      unsigned int v47 = v36[1];
      if (v46 >= 0xF0) {
        unsigned int v46 = 240;
      }
      if (v46 <= 0x10) {
        unsigned int v46 = 16;
      }
      if (v47 >= 0xF0) {
        unsigned int v47 = 240;
      }
      if (v47 <= 0x10) {
        unsigned int v47 = 16;
      }
      *unint64_t v37 = 16 * ((613566757 * (unint64_t)((4095 * v46 - 65520) >> 5)) >> 32);
      v37[1] = 16 * ((613566757 * (unint64_t)((4095 * v47 - 65520) >> 5)) >> 32);
    }
    v14 += v13;
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      __int16 v49 = v14;
      __int16 v50 = v20;
      if (v33)
      {
        unsigned int v51 = *v14;
        unsigned int v52 = v14[1];
        if (v51 >= 0xF0) {
          unsigned int v51 = 240;
        }
        if (v51 <= 0x10) {
          unsigned int v51 = 16;
        }
        if (v52 >= 0xF0) {
          unsigned int v52 = 240;
        }
        if (v52 <= 0x10) {
          int v53 = 16;
        }
        else {
          int v53 = v52;
        }
        __int16 v49 = v14 + 2;
        int v54 = 16 * ((613566757 * (unint64_t)((4095 * v51 - 65520) >> 5)) >> 32);
        *uint64_t v20 = v54;
        int v55 = 16 * ((613566757 * (unint64_t)((4095 * v53 - 65520) >> 5)) >> 32);
        v20[1] = v55;
        __int16 v56 = (_WORD *)((char *)v20 + v19);
        *__int16 v56 = v54;
        v56[1] = v55;
        __int16 v50 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v57 = -(uint64_t)v34;
        do
        {
          unsigned int v58 = *v49;
          unsigned int v59 = v49[1];
          if (v58 >= 0xF0) {
            unsigned int v58 = 240;
          }
          if (v58 <= 0x10) {
            unsigned int v58 = 16;
          }
          if (v59 >= 0xF0) {
            unsigned int v59 = 240;
          }
          if (v59 <= 0x10) {
            unsigned int v59 = 16;
          }
          int v60 = 16 * ((613566757 * (unint64_t)((4095 * v58 - 65520) >> 5)) >> 32);
          *__int16 v50 = v60;
          int v61 = 16 * ((613566757 * (unint64_t)((4095 * v59 - 65520) >> 5)) >> 32);
          v50[1] = v61;
          v50[2] = v60;
          v50[3] = v61;
          uint64_t v62 = (_WORD *)((char *)v50 + v19);
          *uint64_t v62 = v60;
          v62[1] = v61;
          v49 += 2;
          v62[2] = v60;
          v62[3] = v61;
          v50 += 4;
          BOOL v41 = __CFADD__(v57++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        unsigned int v63 = *v49;
        unsigned int v64 = v49[1];
        if (v63 >= 0xF0) {
          unsigned int v63 = 240;
        }
        if (v63 <= 0x10) {
          unsigned int v63 = 16;
        }
        if (v64 >= 0xF0) {
          unsigned int v64 = 240;
        }
        if (v64 <= 0x10) {
          unsigned int v64 = 16;
        }
        int v65 = 16 * ((613566757 * (unint64_t)((4095 * v63 - 65520) >> 5)) >> 32);
        *__int16 v50 = v65;
        int v66 = 16 * ((613566757 * (unint64_t)((4095 * v64 - 65520) >> 5)) >> 32);
        v50[1] = v66;
        __int16 v67 = (_WORD *)((char *)v50 + v19);
        *__int16 v67 = v65;
        v67[1] = v66;
      }
      v14 += v13;
      v20 += v19;
    }
    uint64_t v68 = 2 * v32;
  }
  else
  {
    uint64_t v68 = 0;
  }
  if ((v68 | v8 & 1) < v22)
  {
    if (v33)
    {
      unsigned int v69 = *v14;
      unsigned int v70 = v14[1];
      if (v69 >= 0xF0) {
        unsigned int v69 = 240;
      }
      if (v69 <= 0x10) {
        unsigned int v69 = 16;
      }
      if (v70 >= 0xF0) {
        unsigned int v70 = 240;
      }
      if (v70 <= 0x10) {
        unsigned int v70 = 16;
      }
      v14 += 2;
      *uint64_t v20 = 16 * ((613566757 * (unint64_t)((4095 * v69 - 65520) >> 5)) >> 32);
      v20[1] = 16 * ((613566757 * (unint64_t)((4095 * v70 - 65520) >> 5)) >> 32);
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v71 = -(uint64_t)v34;
      do
      {
        unsigned int v72 = *v14;
        unsigned int v73 = v14[1];
        if (v72 >= 0xF0) {
          unsigned int v72 = 240;
        }
        if (v72 <= 0x10) {
          unsigned int v72 = 16;
        }
        if (v73 >= 0xF0) {
          unsigned int v73 = 240;
        }
        if (v73 <= 0x10) {
          unsigned int v73 = 16;
        }
        v14 += 2;
        *uint64_t v20 = 16 * ((613566757 * (unint64_t)((4095 * v72 - 65520) >> 5)) >> 32);
        v20[1] = 16 * ((613566757 * (unint64_t)((4095 * v73 - 65520) >> 5)) >> 32);
        v20 += 2;
        BOOL v41 = __CFADD__(v71++, 1);
      }
      while (!v41);
      v34 *= 2;
    }
    if ((v34 | v35) < v21)
    {
      unsigned int v74 = *v14;
      unsigned int v75 = v14[1];
      if (v74 >= 0xF0) {
        unsigned int v74 = 240;
      }
      if (v74 <= 0x10) {
        unsigned int v74 = 16;
      }
      if (v75 >= 0xF0) {
        unsigned int v75 = 240;
      }
      if (v75 <= 0x10) {
        unsigned int v75 = 16;
      }
      *uint64_t v20 = 16 * ((613566757 * (unint64_t)((4095 * v74 - 65520) >> 5)) >> 32);
      v20[1] = 16 * ((613566757 * (unint64_t)((4095 * v75 - 65520) >> 5)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = v27;
    }
    uint64_t v30 = v9 + v8 + v29;
    uint64_t v31 = *a8;
    uint64_t v32 = a8[2];
    uint64_t v33 = v28 + v30;
    uint64_t v34 = a7[2] + v32 * v19 + v20;
    uint64_t v35 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          *(_WORD *)(v34 + 2 * i) = -1;
          *(_WORD *)(v35 + 2 * i) = *(unsigned __int8 *)(v33 + i) << 8;
        }
      }
      v33 += v27;
      v35 += v31;
      v34 += v32;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v37 = v11 & 1;
  if (v25 >> 1 >= (v25 - v37) >> 1) {
    unint64_t v38 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v38 = v25 >> 1;
  }
  char v39 = v8;
  unint64_t v40 = v24 >> 1;
  unint64_t v41 = (v24 - v9) >> 1;
  if (v40 >= v41) {
    unint64_t v40 = v41;
  }
  if (v11)
  {
    if (v39)
    {
      uint64_t v42 = v15 + 2;
      __int16 v44 = v15[1] << 8;
      _WORD *v22 = *v15 << 8;
      v22[1] = v44;
      unsigned int v43 = v22 + 2;
      if (!v40)
      {
LABEL_27:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v42 = v15;
      unsigned int v43 = v22;
      if (!v40) {
        goto LABEL_27;
      }
    }
    uint64_t v45 = -(uint64_t)v40;
    do
    {
      __int16 v46 = v42[1] << 8;
      *unsigned int v43 = *v42 << 8;
      v43[1] = v46;
      v42 += 2;
      v43 += 2;
      BOOL v47 = __CFADD__(v45++, 1);
    }
    while (!v47);
    goto LABEL_27;
  }
LABEL_28:
  if (v38)
  {
    for (uint64_t j = 0; j != v38; ++j)
    {
      __int16 v49 = v15;
      __int16 v50 = v22;
      if (v39)
      {
        __int16 v49 = v15 + 2;
        __int16 v51 = v15[1] << 8;
        _WORD *v22 = *v15 << 8;
        v22[1] = v51;
        __int16 v50 = v22 + 2;
      }
      if (v40)
      {
        uint64_t v52 = -(uint64_t)v40;
        do
        {
          __int16 v53 = *v49 << 8;
          __int16 v54 = v49[1] << 8;
          *__int16 v50 = v53;
          v50[1] = v54;
          int v55 = (_WORD *)((char *)v50 + v21);
          _WORD *v55 = v53;
          v55[1] = v54;
          v50 += 2;
          v49 += 2;
          BOOL v47 = __CFADD__(v52++, 1);
        }
        while (!v47);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v56 = 2 * v38;
  }
  else
  {
    uint64_t v56 = 0;
  }
  if ((v56 | (unint64_t)v37) < v25)
  {
    if (v39)
    {
      __int16 v57 = *v15;
      __int16 v58 = v15[1];
      v15 += 2;
      _WORD *v22 = v57 << 8;
      v22[1] = v58 << 8;
      v22 += 2;
    }
    if (v40)
    {
      uint64_t v59 = -(uint64_t)v40;
      do
      {
        __int16 v60 = v15[1] << 8;
        _WORD *v22 = *v15 << 8;
        v22[1] = v60;
        v15 += 2;
        v22 += 2;
        BOOL v47 = __CFADD__(v59++, 1);
      }
      while (!v47);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v9 + v8 + v30;
    uint64_t v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1) {
    unint64_t v35 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v35 = v25 >> 1;
  }
  char v36 = v8;
  unint64_t v37 = v24 >> 1;
  unint64_t v38 = (v24 - v9) >> 1;
  if (v37 >= v38) {
    unint64_t v37 = v38;
  }
  if (v11)
  {
    if (v36)
    {
      char v39 = v15 + 2;
      __int16 v41 = v15[1] << 8;
      _WORD *v22 = *v15 << 8;
      v22[1] = v41;
      unint64_t v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      char v39 = v15;
      unint64_t v40 = v22;
      if (!v37) {
        goto LABEL_27;
      }
    }
    uint64_t v42 = -(uint64_t)v37;
    do
    {
      __int16 v43 = v39[1] << 8;
      *unint64_t v40 = *v39 << 8;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      __int16 v46 = v15;
      BOOL v47 = v22;
      if (v36)
      {
        __int16 v46 = v15 + 2;
        __int16 v48 = v15[1] << 8;
        _WORD *v22 = *v15 << 8;
        v22[1] = v48;
        BOOL v47 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v49 = -(uint64_t)v37;
        do
        {
          __int16 v50 = *v46 << 8;
          __int16 v51 = v46[1] << 8;
          *BOOL v47 = v50;
          v47[1] = v51;
          uint64_t v52 = (_WORD *)((char *)v47 + v21);
          *uint64_t v52 = v50;
          v52[1] = v51;
          v47 += 2;
          v46 += 2;
          BOOL v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v53 = 2 * v35;
  }
  else
  {
    uint64_t v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if (v36)
    {
      __int16 v54 = *v15;
      __int16 v55 = v15[1];
      v15 += 2;
      _WORD *v22 = v54 << 8;
      v22[1] = v55 << 8;
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v56 = -(uint64_t)v37;
      do
      {
        __int16 v57 = v15[1] << 8;
        _WORD *v22 = *v15 << 8;
        v22[1] = v57;
        v15 += 2;
        v22 += 2;
        BOOL v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v9 + v8 + v30;
    uint64_t v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v34 = *(unsigned __int8 *)(v31 + i);
          if (v34 >= 0xEB) {
            unsigned int v34 = 235;
          }
          if (v34 <= 0x10) {
            unsigned int v34 = 16;
          }
          *(_WORD *)(v32 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v34 - 65520)) >> 32)
                                                  + ((4095 * v34
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v34 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v35 = v11 & 1;
  if (v25 >> 1 >= (v25 - v35) >> 1) {
    unint64_t v36 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v36 = v25 >> 1;
  }
  char v37 = v8;
  unint64_t v38 = v24 >> 1;
  unint64_t v39 = (v24 - v9) >> 1;
  if (v38 >= v39) {
    unint64_t v38 = v39;
  }
  if (v11)
  {
    if (v37)
    {
      unsigned int v42 = *v15;
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        int v43 = 16;
      }
      else {
        int v43 = v42;
      }
      if (v15[1] >= 0xF0u) {
        unsigned int v44 = 240;
      }
      else {
        unsigned int v44 = v15[1];
      }
      if (v44 <= 0x10) {
        int v45 = 16;
      }
      else {
        int v45 = v44;
      }
      unint64_t v40 = v15 + 2;
      _WORD *v22 = 16 * ((613566757 * (unint64_t)((4095 * v43 - 65520) >> 5)) >> 32);
      v22[1] = 16 * ((613566757 * (unint64_t)((4095 * v45 - 65520) >> 5)) >> 32);
      __int16 v41 = v22 + 2;
      if (!v38) {
        goto LABEL_50;
      }
    }
    else
    {
      unint64_t v40 = v15;
      __int16 v41 = v22;
      if (!v38)
      {
LABEL_50:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_51;
      }
    }
    uint64_t v46 = -(uint64_t)v38;
    do
    {
      unsigned int v47 = *v40;
      unsigned int v48 = v40[1];
      if (v47 >= 0xF0) {
        unsigned int v47 = 240;
      }
      if (v47 <= 0x10) {
        unsigned int v47 = 16;
      }
      if (v48 >= 0xF0) {
        unsigned int v48 = 240;
      }
      if (v48 <= 0x10) {
        unsigned int v48 = 16;
      }
      *__int16 v41 = 16 * ((613566757 * (unint64_t)((4095 * v47 - 65520) >> 5)) >> 32);
      v41[1] = 16 * ((613566757 * (unint64_t)((4095 * v48 - 65520) >> 5)) >> 32);
      v40 += 2;
      v41 += 2;
      BOOL v49 = __CFADD__(v46++, 1);
    }
    while (!v49);
    goto LABEL_50;
  }
LABEL_51:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      __int16 v51 = v15;
      uint64_t v52 = v22;
      if (v37)
      {
        unsigned int v53 = *v15;
        if (v53 >= 0xF0) {
          unsigned int v53 = 240;
        }
        if (v53 <= 0x10) {
          int v54 = 16;
        }
        else {
          int v54 = v53;
        }
        if (v15[1] >= 0xF0u) {
          unsigned int v55 = 240;
        }
        else {
          unsigned int v55 = v15[1];
        }
        if (v55 <= 0x10) {
          int v56 = 16;
        }
        else {
          int v56 = v55;
        }
        __int16 v51 = v15 + 2;
        _WORD *v22 = 16 * ((613566757 * (unint64_t)((4095 * v54 - 65520) >> 5)) >> 32);
        v22[1] = 16 * ((613566757 * (unint64_t)((4095 * v56 - 65520) >> 5)) >> 32);
        uint64_t v52 = v22 + 2;
      }
      if (v38)
      {
        uint64_t v57 = -(uint64_t)v38;
        do
        {
          unsigned int v58 = *v51;
          unsigned int v59 = v51[1];
          if (v58 >= 0xF0) {
            unsigned int v58 = 240;
          }
          if (v58 <= 0x10) {
            unsigned int v58 = 16;
          }
          if (v59 >= 0xF0) {
            unsigned int v59 = 240;
          }
          if (v59 <= 0x10) {
            unsigned int v59 = 16;
          }
          int v60 = 16 * ((613566757 * (unint64_t)((4095 * v58 - 65520) >> 5)) >> 32);
          *uint64_t v52 = v60;
          int v61 = 16 * ((613566757 * (unint64_t)((4095 * v59 - 65520) >> 5)) >> 32);
          v52[1] = v61;
          uint64_t v62 = (_WORD *)((char *)v52 + v21);
          *uint64_t v62 = v60;
          v62[1] = v61;
          v52 += 2;
          v51 += 2;
          BOOL v49 = __CFADD__(v57++, 1);
        }
        while (!v49);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v63 = 2 * v36;
  }
  else
  {
    uint64_t v63 = 0;
  }
  if ((v63 | (unint64_t)v35) < v25)
  {
    if (v37)
    {
      unsigned int v64 = *v15;
      unsigned int v65 = v15[1];
      if (v64 >= 0xF0) {
        unsigned int v64 = 240;
      }
      if (v64 <= 0x10) {
        unsigned int v64 = 16;
      }
      if (v65 >= 0xF0) {
        unsigned int v65 = 240;
      }
      if (v65 <= 0x10) {
        unsigned int v65 = 16;
      }
      v15 += 2;
      _WORD *v22 = 16 * ((613566757 * (unint64_t)((4095 * v64 - 65520) >> 5)) >> 32);
      v22[1] = 16 * ((613566757 * (unint64_t)((4095 * v65 - 65520) >> 5)) >> 32);
      v22 += 2;
    }
    if (v38)
    {
      uint64_t v66 = -(uint64_t)v38;
      do
      {
        unsigned int v67 = *v15;
        unsigned int v68 = v15[1];
        if (v67 >= 0xF0) {
          unsigned int v67 = 240;
        }
        if (v67 <= 0x10) {
          unsigned int v67 = 16;
        }
        if (v68 >= 0xF0) {
          unsigned int v68 = 240;
        }
        if (v68 <= 0x10) {
          unsigned int v68 = 16;
        }
        _WORD *v22 = 16 * ((613566757 * (unint64_t)((4095 * v67 - 65520) >> 5)) >> 32);
        v22[1] = 16 * ((613566757 * (unint64_t)((4095 * v68 - 65520) >> 5)) >> 32);
        v15 += 2;
        v22 += 2;
        BOOL v49 = __CFADD__(v66++, 1);
      }
      while (!v49);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v8) >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    uint64_t v32 = v30 + v10 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v35 = v26 >> 1;
  unint64_t v36 = v26 - v12;
  if (v35 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v35;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unint64_t v40 = v16 + 2;
      __int16 v42 = v16[1] << 8;
      *unint64_t v23 = *v16 << 8;
      v23[1] = v42;
      __int16 v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 += v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v40 = v16;
      __int16 v41 = v23;
      if (!v39) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      __int16 v44 = v40[1] << 8;
      *__int16 v41 = *v40 << 8;
      v41[1] = v44;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      unsigned int v47 = v16;
      unsigned int v48 = v23;
      if (v9)
      {
        unsigned int v47 = v16 + 2;
        __int16 v49 = v16[1] << 8;
        *unint64_t v23 = *v16 << 8;
        v23[1] = v49;
        unsigned int v48 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          __int16 v51 = v47[1] << 8;
          _WORD *v48 = *v47 << 8;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 += v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v8) >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    BOOL v28 = v13 >= v8;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + *a4 * v13;
    if (v28) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v31 + v10 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          unsigned int v36 = *(unsigned __int8 *)(v33 + i);
          if (v36 >= 0xEB) {
            unsigned int v36 = 235;
          }
          if (v36 <= 0x10) {
            unsigned int v36 = 16;
          }
          *(_WORD *)(v34 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v36 - 65520)) >> 32)
                                                  + ((4095 * v36
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v36 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v37 = v26 >> 1;
  unint64_t v38 = v26 - v12;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  unint64_t v40 = v25 - (v9 & 1);
  if (v25 >> 1 >= v40 >> 1) {
    unint64_t v41 = v40 >> 1;
  }
  else {
    unint64_t v41 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v44 = *v16;
      if (v44 >= 0xF0) {
        unsigned int v44 = 240;
      }
      if (v44 <= 0x10) {
        int v45 = 16;
      }
      else {
        int v45 = v44;
      }
      if (v16[1] >= 0xF0u) {
        unsigned int v46 = 240;
      }
      else {
        unsigned int v46 = v16[1];
      }
      if (v46 <= 0x10) {
        int v47 = 16;
      }
      else {
        int v47 = v46;
      }
      __int16 v42 = v16 + 2;
      *unint64_t v23 = 16 * ((613566757 * (unint64_t)((4095 * v45 - 65520) >> 5)) >> 32);
      v23[1] = 16 * ((613566757 * (unint64_t)((4095 * v47 - 65520) >> 5)) >> 32);
      uint64_t v43 = v23 + 2;
      if (!v41) {
        goto LABEL_51;
      }
    }
    else
    {
      __int16 v42 = v16;
      uint64_t v43 = v23;
      if (!v41)
      {
LABEL_51:
        v16 += v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_52;
      }
    }
    uint64_t v48 = -(uint64_t)v41;
    do
    {
      unsigned int v49 = *v42;
      unsigned int v50 = v42[1];
      if (v49 >= 0xF0) {
        unsigned int v49 = 240;
      }
      if (v49 <= 0x10) {
        unsigned int v49 = 16;
      }
      if (v50 >= 0xF0) {
        unsigned int v50 = 240;
      }
      if (v50 <= 0x10) {
        unsigned int v50 = 16;
      }
      *uint64_t v43 = 16 * ((613566757 * (unint64_t)((4095 * v49 - 65520) >> 5)) >> 32);
      v43[1] = 16 * ((613566757 * (unint64_t)((4095 * v50 - 65520) >> 5)) >> 32);
      v42 += 2;
      v43 += 2;
      BOOL v28 = __CFADD__(v48++, 1);
    }
    while (!v28);
    goto LABEL_51;
  }
LABEL_52:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      uint64_t v52 = v16;
      unsigned int v53 = v23;
      if (v9)
      {
        unsigned int v54 = *v16;
        if (v54 >= 0xF0) {
          unsigned int v54 = 240;
        }
        if (v54 <= 0x10) {
          int v55 = 16;
        }
        else {
          int v55 = v54;
        }
        if (v16[1] >= 0xF0u) {
          unsigned int v56 = 240;
        }
        else {
          unsigned int v56 = v16[1];
        }
        if (v56 <= 0x10) {
          int v57 = 16;
        }
        else {
          int v57 = v56;
        }
        uint64_t v52 = v16 + 2;
        *unint64_t v23 = 16 * ((613566757 * (unint64_t)((4095 * v55 - 65520) >> 5)) >> 32);
        v23[1] = 16 * ((613566757 * (unint64_t)((4095 * v57 - 65520) >> 5)) >> 32);
        unsigned int v53 = v23 + 2;
      }
      if (v41)
      {
        uint64_t v58 = -(uint64_t)v41;
        do
        {
          unsigned int v59 = *v52;
          unsigned int v60 = v52[1];
          if (v59 >= 0xF0) {
            unsigned int v59 = 240;
          }
          if (v59 <= 0x10) {
            unsigned int v59 = 16;
          }
          if (v60 >= 0xF0) {
            unsigned int v60 = 240;
          }
          if (v60 <= 0x10) {
            unsigned int v60 = 16;
          }
          *unsigned int v53 = 16 * ((613566757 * (unint64_t)((4095 * v59 - 65520) >> 5)) >> 32);
          v53[1] = 16 * ((613566757 * (unint64_t)((4095 * v60 - 65520) >> 5)) >> 32);
          v52 += 2;
          v53 += 2;
          BOOL v28 = __CFADD__(v58++, 1);
        }
        while (!v28);
      }
      v16 += v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v18 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v17) {
    unint64_t v21 = v17;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v18) {
    unint64_t v22 = v18;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = (v9 & 0xFFFFFFFE) + v26;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    uint64_t v30 = v25 + v27;
    uint64_t v31 = a7[2] + v29 * v16 + 2 * v15;
    uint64_t v32 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(_WORD *)(v31 + 2 * i) = -1;
          *(_WORD *)(v32 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v24;
      v32 += v28;
      v31 += v29;
      ++v23;
    }
    while (v23 != v22);
  }
  uint64_t v34 = v8 & 1;
  unint64_t v35 = (v22 - v34) >> 1;
  if (v22 >> 1 < v35) {
    unint64_t v35 = v22 >> 1;
  }
  char v36 = v9;
  unint64_t v37 = v21 >> 1;
  uint64_t v38 = v9 & 1;
  if (v21 >> 1 >= (v21 - v38) >> 1) {
    unint64_t v37 = (v21 - v38) >> 1;
  }
  if (v8)
  {
    if (v36)
    {
      unint64_t v39 = v14 + 2;
      __int16 v46 = v14[1] << 8;
      *uint64_t v20 = *v14 << 8;
      v20[1] = v46;
      unint64_t v40 = v20 + 2;
      if (v37)
      {
LABEL_21:
        uint64_t v41 = -(uint64_t)v37;
        do
        {
          __int16 v42 = *v39;
          __int16 v43 = v39[1];
          v39 += 2;
          *unint64_t v40 = v42 << 8;
          v40[1] = v43 << 8;
          v40 += 2;
          BOOL v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        uint64_t v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v39 = v14;
      unint64_t v40 = v20;
      if (v37) {
        goto LABEL_21;
      }
    }
    uint64_t v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v21)
    {
      __int16 v47 = *v39 << 8;
      __int16 v48 = v39[1] << 8;
      *unint64_t v40 = v47;
      v40[1] = v48;
    }
    v14 += v13;
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      unsigned int v50 = v14;
      __int16 v51 = v20;
      if (v36)
      {
        unsigned int v50 = v14 + 2;
        __int16 v52 = *v14 << 8;
        __int16 v53 = v14[1] << 8;
        *uint64_t v20 = v52;
        v20[1] = v53;
        unsigned int v54 = (_WORD *)((char *)v20 + v19);
        _WORD *v54 = v52;
        v54[1] = v53;
        __int16 v51 = v20 + 2;
      }
      if (v37)
      {
        uint64_t v55 = -(uint64_t)v37;
        do
        {
          __int16 v56 = *v50;
          __int16 v57 = v50[1];
          v50 += 2;
          v56 <<= 8;
          v57 <<= 8;
          *__int16 v51 = v56;
          v51[1] = v57;
          v51[2] = v56;
          v51[3] = v57;
          uint64_t v58 = (_WORD *)((char *)v51 + v19);
          *uint64_t v58 = v56;
          v58[1] = v57;
          v58[2] = v56;
          v58[3] = v57;
          v51 += 4;
          BOOL v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v21)
      {
        __int16 v59 = *v50 << 8;
        __int16 v60 = v50[1] << 8;
        *__int16 v51 = v59;
        v51[1] = v60;
        int v61 = (_WORD *)((char *)v51 + v19);
        _WORD *v61 = v59;
        v61[1] = v60;
      }
      v14 += v13;
      v20 += v19;
    }
    uint64_t v62 = 2 * v35;
  }
  else
  {
    uint64_t v62 = 0;
  }
  if ((v62 | (unint64_t)v34) < v22)
  {
    if (v36)
    {
      __int16 v63 = *v14;
      __int16 v64 = v14[1];
      v14 += 2;
      *uint64_t v20 = v63 << 8;
      v20[1] = v64 << 8;
      v20 += 2;
    }
    if (v37)
    {
      uint64_t v65 = -(uint64_t)v37;
      do
      {
        __int16 v66 = *v14;
        __int16 v67 = v14[1];
        v14 += 2;
        *uint64_t v20 = v66 << 8;
        v20[1] = v67 << 8;
        v20 += 2;
        BOOL v44 = __CFADD__(v65++, 1);
      }
      while (!v44);
      uint64_t v68 = 2 * v37;
    }
    else
    {
      uint64_t v68 = 0;
    }
    if ((v68 | (unint64_t)v38) < v21)
    {
      __int16 v69 = *v14 << 8;
      __int16 v70 = v14[1] << 8;
      *uint64_t v20 = v69;
      v20[1] = v70;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v28 + i) << 8;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  uint64_t v31 = v8 & 1;
  unint64_t v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32) {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v21 >> 1;
  uint64_t v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1) {
    unint64_t v34 = (v21 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      char v36 = v14 + 2;
      __int16 v43 = v14[1] << 8;
      *uint64_t v20 = *v14 << 8;
      v20[1] = v43;
      unint64_t v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          __int16 v39 = *v36;
          __int16 v40 = v36[1];
          v36 += 2;
          *unint64_t v37 = v39 << 8;
          v37[1] = v40 << 8;
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      char v36 = v14;
      unint64_t v37 = v20;
      if (v34) {
        goto LABEL_21;
      }
    }
    uint64_t v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      __int16 v44 = *v36 << 8;
      __int16 v45 = v36[1] << 8;
      *unint64_t v37 = v44;
      v37[1] = v45;
    }
    v14 += v13;
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      __int16 v47 = v14;
      __int16 v48 = v20;
      if (v33)
      {
        __int16 v47 = v14 + 2;
        __int16 v49 = *v14 << 8;
        __int16 v50 = v14[1] << 8;
        *uint64_t v20 = v49;
        v20[1] = v50;
        __int16 v51 = (_WORD *)((char *)v20 + v19);
        *__int16 v51 = v49;
        v51[1] = v50;
        __int16 v48 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v52 = -(uint64_t)v34;
        do
        {
          __int16 v53 = *v47;
          __int16 v54 = v47[1];
          v47 += 2;
          v53 <<= 8;
          v54 <<= 8;
          _WORD *v48 = v53;
          v48[1] = v54;
          _OWORD v48[2] = v53;
          v48[3] = v54;
          uint64_t v55 = (_WORD *)((char *)v48 + v19);
          _WORD *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          BOOL v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        __int16 v56 = *v47 << 8;
        __int16 v57 = v47[1] << 8;
        _WORD *v48 = v56;
        v48[1] = v57;
        uint64_t v58 = (_WORD *)((char *)v48 + v19);
        *uint64_t v58 = v56;
        v58[1] = v57;
      }
      v14 += v13;
      v20 += v19;
    }
    uint64_t v59 = 2 * v32;
  }
  else
  {
    uint64_t v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v22)
  {
    if (v33)
    {
      __int16 v60 = *v14;
      __int16 v61 = v14[1];
      v14 += 2;
      *uint64_t v20 = v60 << 8;
      v20[1] = v61 << 8;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v62 = -(uint64_t)v34;
      do
      {
        __int16 v63 = *v14;
        __int16 v64 = v14[1];
        v14 += 2;
        *uint64_t v20 = v63 << 8;
        v20[1] = v64 << 8;
        v20 += 2;
        BOOL v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      uint64_t v65 = 2 * v34;
    }
    else
    {
      uint64_t v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v21)
    {
      __int16 v66 = *v14 << 8;
      __int16 v67 = v14[1] << 8;
      *uint64_t v20 = v66;
      v20[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  if (v12 - v11 + (v12 & 1) >= v17) {
    unint64_t v22 = v17;
  }
  else {
    unint64_t v22 = v12 - v11 + (v12 & 1);
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v31 = *(unsigned __int8 *)(v28 + i);
          if (v31 >= 0xEB) {
            unsigned int v31 = 235;
          }
          if (v31 <= 0x10) {
            unsigned int v31 = 16;
          }
          *(_WORD *)(v29 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v31 - 16368)) >> 32)
                                                  + ((1023 * v31
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v31 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v32 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v32) {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v21 >> 1;
  uint64_t v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1) {
    unint64_t v34 = (v21 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      unsigned int v43 = *v14;
      unsigned int v44 = v14[1];
      if (v43 >= 0xF0) {
        unsigned int v43 = 240;
      }
      if (v43 <= 0x10) {
        unsigned int v43 = 16;
      }
      if (v44 >= 0xF0) {
        unsigned int v44 = 240;
      }
      if (v44 <= 0x10) {
        int v45 = 16;
      }
      else {
        int v45 = v44;
      }
      char v36 = v14 + 2;
      *uint64_t v20 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v43 - 16368) >> 5)) >> 32) << 6;
      v20[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 16368) >> 5)) >> 32) << 6;
      unint64_t v37 = v20 + 2;
      if (v34) {
        goto LABEL_26;
      }
    }
    else
    {
      char v36 = v14;
      unint64_t v37 = v20;
      if (v34)
      {
LABEL_26:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          unsigned int v39 = *v36;
          unsigned int v40 = v36[1];
          if (v39 >= 0xF0) {
            unsigned int v39 = 240;
          }
          if (v39 <= 0x10) {
            unsigned int v39 = 16;
          }
          if (v40 >= 0xF0) {
            unsigned int v40 = 240;
          }
          if (v40 <= 0x10) {
            unsigned int v40 = 16;
          }
          v36 += 2;
          *unint64_t v37 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v39 - 16368) >> 5)) >> 32) << 6;
          v37[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v40 - 16368) >> 5)) >> 32) << 6;
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_49;
      }
    }
    uint64_t v42 = 0;
LABEL_49:
    if ((v42 | (unint64_t)v35) < v21)
    {
      unsigned int v46 = *v36;
      unsigned int v47 = v36[1];
      if (v46 >= 0xF0) {
        unsigned int v46 = 240;
      }
      if (v46 <= 0x10) {
        unsigned int v46 = 16;
      }
      if (v47 >= 0xF0) {
        unsigned int v47 = 240;
      }
      if (v47 <= 0x10) {
        unsigned int v47 = 16;
      }
      *unint64_t v37 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v46 - 16368) >> 5)) >> 32) << 6;
      v37[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v47 - 16368) >> 5)) >> 32) << 6;
    }
    v14 += v13;
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      __int16 v49 = v14;
      __int16 v50 = v20;
      if (v33)
      {
        unsigned int v51 = *v14;
        unsigned int v52 = v14[1];
        if (v51 >= 0xF0) {
          unsigned int v51 = 240;
        }
        if (v51 <= 0x10) {
          unsigned int v51 = 16;
        }
        if (v52 >= 0xF0) {
          unsigned int v52 = 240;
        }
        if (v52 <= 0x10) {
          int v53 = 16;
        }
        else {
          int v53 = v52;
        }
        __int16 v49 = v14 + 2;
        int v54 = (613566757 * (unint64_t)((1023 * v51 - 16368) >> 5)) >> 32 << 6;
        *uint64_t v20 = v54;
        int v55 = (613566757 * (unint64_t)((1023 * v53 - 16368) >> 5)) >> 32 << 6;
        v20[1] = v55;
        __int16 v56 = (_WORD *)((char *)v20 + v19);
        *__int16 v56 = v54;
        v56[1] = v55;
        __int16 v50 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v57 = -(uint64_t)v34;
        do
        {
          unsigned int v58 = *v49;
          unsigned int v59 = v49[1];
          if (v58 >= 0xF0) {
            unsigned int v58 = 240;
          }
          if (v58 <= 0x10) {
            unsigned int v58 = 16;
          }
          if (v59 >= 0xF0) {
            unsigned int v59 = 240;
          }
          if (v59 <= 0x10) {
            unsigned int v59 = 16;
          }
          int v60 = (613566757 * (unint64_t)((1023 * v58 - 16368) >> 5)) >> 32 << 6;
          *__int16 v50 = v60;
          int v61 = (613566757 * (unint64_t)((1023 * v59 - 16368) >> 5)) >> 32 << 6;
          v50[1] = v61;
          v50[2] = v60;
          v50[3] = v61;
          uint64_t v62 = (_WORD *)((char *)v50 + v19);
          *uint64_t v62 = v60;
          v62[1] = v61;
          v49 += 2;
          v62[2] = v60;
          v62[3] = v61;
          v50 += 4;
          BOOL v41 = __CFADD__(v57++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        unsigned int v63 = *v49;
        unsigned int v64 = v49[1];
        if (v63 >= 0xF0) {
          unsigned int v63 = 240;
        }
        if (v63 <= 0x10) {
          unsigned int v63 = 16;
        }
        if (v64 >= 0xF0) {
          unsigned int v64 = 240;
        }
        if (v64 <= 0x10) {
          unsigned int v64 = 16;
        }
        int v65 = (613566757 * (unint64_t)((1023 * v63 - 16368) >> 5)) >> 32 << 6;
        *__int16 v50 = v65;
        int v66 = (613566757 * (unint64_t)((1023 * v64 - 16368) >> 5)) >> 32 << 6;
        v50[1] = v66;
        __int16 v67 = (_WORD *)((char *)v50 + v19);
        *__int16 v67 = v65;
        v67[1] = v66;
      }
      v14 += v13;
      v20 += v19;
    }
    uint64_t v68 = 2 * v32;
  }
  else
  {
    uint64_t v68 = 0;
  }
  if ((v68 | v8 & 1) < v22)
  {
    if (v33)
    {
      unsigned int v69 = *v14;
      unsigned int v70 = v14[1];
      if (v69 >= 0xF0) {
        unsigned int v69 = 240;
      }
      if (v69 <= 0x10) {
        unsigned int v69 = 16;
      }
      if (v70 >= 0xF0) {
        unsigned int v70 = 240;
      }
      if (v70 <= 0x10) {
        unsigned int v70 = 16;
      }
      v14 += 2;
      *uint64_t v20 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v69 - 16368) >> 5)) >> 32) << 6;
      v20[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v70 - 16368) >> 5)) >> 32) << 6;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v71 = -(uint64_t)v34;
      do
      {
        unsigned int v72 = *v14;
        unsigned int v73 = v14[1];
        if (v72 >= 0xF0) {
          unsigned int v72 = 240;
        }
        if (v72 <= 0x10) {
          unsigned int v72 = 16;
        }
        if (v73 >= 0xF0) {
          unsigned int v73 = 240;
        }
        if (v73 <= 0x10) {
          unsigned int v73 = 16;
        }
        v14 += 2;
        *uint64_t v20 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v72 - 16368) >> 5)) >> 32) << 6;
        v20[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v73 - 16368) >> 5)) >> 32) << 6;
        v20 += 2;
        BOOL v41 = __CFADD__(v71++, 1);
      }
      while (!v41);
      v34 *= 2;
    }
    if ((v34 | v35) < v21)
    {
      unsigned int v74 = *v14;
      unsigned int v75 = v14[1];
      if (v74 >= 0xF0) {
        unsigned int v74 = 240;
      }
      if (v74 <= 0x10) {
        unsigned int v74 = 16;
      }
      if (v75 >= 0xF0) {
        unsigned int v75 = 240;
      }
      if (v75 <= 0x10) {
        unsigned int v75 = 16;
      }
      *uint64_t v20 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v74 - 16368) >> 5)) >> 32) << 6;
      v20[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v75 - 16368) >> 5)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = v27;
    }
    uint64_t v30 = v9 + v8 + v29;
    uint64_t v31 = *a8;
    uint64_t v32 = a8[2];
    uint64_t v33 = v28 + v30;
    uint64_t v34 = a7[2] + v32 * v19 + v20;
    uint64_t v35 = *a7 + *a8 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          *(_WORD *)(v34 + 2 * i) = -1;
          *(_WORD *)(v35 + 2 * i) = *(unsigned __int8 *)(v33 + i) << 8;
        }
      }
      v33 += v27;
      v35 += v31;
      v34 += v32;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v37 = v11 & 1;
  if (v25 >> 1 >= (v25 - v37) >> 1) {
    unint64_t v38 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v38 = v25 >> 1;
  }
  char v39 = v8;
  unint64_t v40 = v24 >> 1;
  unint64_t v41 = (v24 - v9) >> 1;
  if (v40 >= v41) {
    unint64_t v40 = v41;
  }
  if (v11)
  {
    if (v39)
    {
      uint64_t v42 = v15 + 2;
      __int16 v44 = v15[1] << 8;
      _WORD *v22 = *v15 << 8;
      v22[1] = v44;
      unsigned int v43 = v22 + 2;
      if (!v40)
      {
LABEL_27:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v42 = v15;
      unsigned int v43 = v22;
      if (!v40) {
        goto LABEL_27;
      }
    }
    uint64_t v45 = -(uint64_t)v40;
    do
    {
      __int16 v46 = v42[1] << 8;
      *unsigned int v43 = *v42 << 8;
      v43[1] = v46;
      v42 += 2;
      v43 += 2;
      BOOL v47 = __CFADD__(v45++, 1);
    }
    while (!v47);
    goto LABEL_27;
  }
LABEL_28:
  if (v38)
  {
    for (uint64_t j = 0; j != v38; ++j)
    {
      __int16 v49 = v15;
      __int16 v50 = v22;
      if (v39)
      {
        __int16 v49 = v15 + 2;
        __int16 v51 = v15[1] << 8;
        _WORD *v22 = *v15 << 8;
        v22[1] = v51;
        __int16 v50 = v22 + 2;
      }
      if (v40)
      {
        uint64_t v52 = -(uint64_t)v40;
        do
        {
          __int16 v53 = *v49 << 8;
          __int16 v54 = v49[1] << 8;
          *__int16 v50 = v53;
          v50[1] = v54;
          int v55 = (_WORD *)((char *)v50 + v21);
          _WORD *v55 = v53;
          v55[1] = v54;
          v50 += 2;
          v49 += 2;
          BOOL v47 = __CFADD__(v52++, 1);
        }
        while (!v47);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v56 = 2 * v38;
  }
  else
  {
    uint64_t v56 = 0;
  }
  if ((v56 | (unint64_t)v37) < v25)
  {
    if (v39)
    {
      __int16 v57 = *v15;
      __int16 v58 = v15[1];
      v15 += 2;
      _WORD *v22 = v57 << 8;
      v22[1] = v58 << 8;
      v22 += 2;
    }
    if (v40)
    {
      uint64_t v59 = -(uint64_t)v40;
      do
      {
        __int16 v60 = v15[1] << 8;
        _WORD *v22 = *v15 << 8;
        v22[1] = v60;
        v15 += 2;
        v22 += 2;
        BOOL v47 = __CFADD__(v59++, 1);
      }
      while (!v47);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v9 + v8 + v30;
    uint64_t v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = *(unsigned __int8 *)(v31 + i) << 8;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1) {
    unint64_t v35 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v35 = v25 >> 1;
  }
  char v36 = v8;
  unint64_t v37 = v24 >> 1;
  unint64_t v38 = (v24 - v9) >> 1;
  if (v37 >= v38) {
    unint64_t v37 = v38;
  }
  if (v11)
  {
    if (v36)
    {
      char v39 = v15 + 2;
      __int16 v41 = v15[1] << 8;
      _WORD *v22 = *v15 << 8;
      v22[1] = v41;
      unint64_t v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      char v39 = v15;
      unint64_t v40 = v22;
      if (!v37) {
        goto LABEL_27;
      }
    }
    uint64_t v42 = -(uint64_t)v37;
    do
    {
      __int16 v43 = v39[1] << 8;
      *unint64_t v40 = *v39 << 8;
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      __int16 v46 = v15;
      BOOL v47 = v22;
      if (v36)
      {
        __int16 v46 = v15 + 2;
        __int16 v48 = v15[1] << 8;
        _WORD *v22 = *v15 << 8;
        v22[1] = v48;
        BOOL v47 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v49 = -(uint64_t)v37;
        do
        {
          __int16 v50 = *v46 << 8;
          __int16 v51 = v46[1] << 8;
          *BOOL v47 = v50;
          v47[1] = v51;
          uint64_t v52 = (_WORD *)((char *)v47 + v21);
          *uint64_t v52 = v50;
          v52[1] = v51;
          v47 += 2;
          v46 += 2;
          BOOL v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v53 = 2 * v35;
  }
  else
  {
    uint64_t v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if (v36)
    {
      __int16 v54 = *v15;
      __int16 v55 = v15[1];
      v15 += 2;
      _WORD *v22 = v54 << 8;
      v22[1] = v55 << 8;
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v56 = -(uint64_t)v37;
      do
      {
        __int16 v57 = v15[1] << 8;
        _WORD *v22 = *v15 << 8;
        v22[1] = v57;
        v15 += 2;
        v22 += 2;
        BOOL v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v9 + v8 + v30;
    uint64_t v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v34 = *(unsigned __int8 *)(v31 + i);
          if (v34 >= 0xEB) {
            unsigned int v34 = 235;
          }
          if (v34 <= 0x10) {
            unsigned int v34 = 16;
          }
          *(_WORD *)(v32 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v34 - 16368)) >> 32)
                                                  + ((1023 * v34
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v34 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v35 = v11 & 1;
  if (v25 >> 1 >= (v25 - v35) >> 1) {
    unint64_t v36 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v36 = v25 >> 1;
  }
  char v37 = v8;
  unint64_t v38 = v24 >> 1;
  unint64_t v39 = (v24 - v9) >> 1;
  if (v38 >= v39) {
    unint64_t v38 = v39;
  }
  if (v11)
  {
    if (v37)
    {
      unsigned int v42 = *v15;
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        int v43 = 16;
      }
      else {
        int v43 = v42;
      }
      if (v15[1] >= 0xF0u) {
        unsigned int v44 = 240;
      }
      else {
        unsigned int v44 = v15[1];
      }
      if (v44 <= 0x10) {
        int v45 = 16;
      }
      else {
        int v45 = v44;
      }
      unint64_t v40 = v15 + 2;
      _WORD *v22 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v43 - 16368) >> 5)) >> 32) << 6;
      v22[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 16368) >> 5)) >> 32) << 6;
      __int16 v41 = v22 + 2;
      if (!v38) {
        goto LABEL_50;
      }
    }
    else
    {
      unint64_t v40 = v15;
      __int16 v41 = v22;
      if (!v38)
      {
LABEL_50:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_51;
      }
    }
    uint64_t v46 = -(uint64_t)v38;
    do
    {
      unsigned int v47 = *v40;
      unsigned int v48 = v40[1];
      if (v47 >= 0xF0) {
        unsigned int v47 = 240;
      }
      if (v47 <= 0x10) {
        unsigned int v47 = 16;
      }
      if (v48 >= 0xF0) {
        unsigned int v48 = 240;
      }
      if (v48 <= 0x10) {
        unsigned int v48 = 16;
      }
      *__int16 v41 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v47 - 16368) >> 5)) >> 32) << 6;
      v41[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v48 - 16368) >> 5)) >> 32) << 6;
      v40 += 2;
      v41 += 2;
      BOOL v49 = __CFADD__(v46++, 1);
    }
    while (!v49);
    goto LABEL_50;
  }
LABEL_51:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      __int16 v51 = v15;
      uint64_t v52 = v22;
      if (v37)
      {
        unsigned int v53 = *v15;
        if (v53 >= 0xF0) {
          unsigned int v53 = 240;
        }
        if (v53 <= 0x10) {
          int v54 = 16;
        }
        else {
          int v54 = v53;
        }
        if (v15[1] >= 0xF0u) {
          unsigned int v55 = 240;
        }
        else {
          unsigned int v55 = v15[1];
        }
        if (v55 <= 0x10) {
          int v56 = 16;
        }
        else {
          int v56 = v55;
        }
        __int16 v51 = v15 + 2;
        _WORD *v22 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v54 - 16368) >> 5)) >> 32) << 6;
        v22[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v56 - 16368) >> 5)) >> 32) << 6;
        uint64_t v52 = v22 + 2;
      }
      if (v38)
      {
        uint64_t v57 = -(uint64_t)v38;
        do
        {
          unsigned int v58 = *v51;
          unsigned int v59 = v51[1];
          if (v58 >= 0xF0) {
            unsigned int v58 = 240;
          }
          if (v58 <= 0x10) {
            unsigned int v58 = 16;
          }
          if (v59 >= 0xF0) {
            unsigned int v59 = 240;
          }
          if (v59 <= 0x10) {
            unsigned int v59 = 16;
          }
          int v60 = (613566757 * (unint64_t)((1023 * v58 - 16368) >> 5)) >> 32 << 6;
          *uint64_t v52 = v60;
          int v61 = (613566757 * (unint64_t)((1023 * v59 - 16368) >> 5)) >> 32 << 6;
          v52[1] = v61;
          uint64_t v62 = (_WORD *)((char *)v52 + v21);
          *uint64_t v62 = v60;
          v62[1] = v61;
          v52 += 2;
          v51 += 2;
          BOOL v49 = __CFADD__(v57++, 1);
        }
        while (!v49);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v63 = 2 * v36;
  }
  else
  {
    uint64_t v63 = 0;
  }
  if ((v63 | (unint64_t)v35) < v25)
  {
    if (v37)
    {
      unsigned int v64 = *v15;
      unsigned int v65 = v15[1];
      if (v64 >= 0xF0) {
        unsigned int v64 = 240;
      }
      if (v64 <= 0x10) {
        unsigned int v64 = 16;
      }
      if (v65 >= 0xF0) {
        unsigned int v65 = 240;
      }
      if (v65 <= 0x10) {
        unsigned int v65 = 16;
      }
      v15 += 2;
      _WORD *v22 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v64 - 16368) >> 5)) >> 32) << 6;
      v22[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v65 - 16368) >> 5)) >> 32) << 6;
      v22 += 2;
    }
    if (v38)
    {
      uint64_t v66 = -(uint64_t)v38;
      do
      {
        unsigned int v67 = *v15;
        unsigned int v68 = v15[1];
        if (v67 >= 0xF0) {
          unsigned int v67 = 240;
        }
        if (v67 <= 0x10) {
          unsigned int v67 = 16;
        }
        if (v68 >= 0xF0) {
          unsigned int v68 = 240;
        }
        if (v68 <= 0x10) {
          unsigned int v68 = 16;
        }
        _WORD *v22 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v67 - 16368) >> 5)) >> 32) << 6;
        v22[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v68 - 16368) >> 5)) >> 32) << 6;
        v15 += 2;
        v22 += 2;
        BOOL v49 = __CFADD__(v66++, 1);
      }
      while (!v49);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v8) >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    uint64_t v32 = v30 + v10 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) << 8;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v35 = v26 >> 1;
  unint64_t v36 = v26 - v12;
  if (v35 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v35;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unint64_t v40 = v16 + 2;
      __int16 v42 = v16[1] << 8;
      *unint64_t v23 = *v16 << 8;
      v23[1] = v42;
      __int16 v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 += v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v40 = v16;
      __int16 v41 = v23;
      if (!v39) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      __int16 v44 = v40[1] << 8;
      *__int16 v41 = *v40 << 8;
      v41[1] = v44;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      unsigned int v47 = v16;
      unsigned int v48 = v23;
      if (v9)
      {
        unsigned int v47 = v16 + 2;
        __int16 v49 = v16[1] << 8;
        *unint64_t v23 = *v16 << 8;
        v23[1] = v49;
        unsigned int v48 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          __int16 v51 = v47[1] << 8;
          _WORD *v48 = *v47 << 8;
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 += v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v8) >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    BOOL v28 = v13 >= v8;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + *a4 * v13;
    if (v28) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v31 + v10 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          unsigned int v36 = *(unsigned __int8 *)(v33 + i);
          if (v36 >= 0xEB) {
            unsigned int v36 = 235;
          }
          if (v36 <= 0x10) {
            unsigned int v36 = 16;
          }
          *(_WORD *)(v34 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v36 - 16368)) >> 32)
                                                  + ((1023 * v36
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v36 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
        }
      }
      v33 += v29;
      v34 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v37 = v26 >> 1;
  unint64_t v38 = v26 - v12;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  unint64_t v40 = v25 - (v9 & 1);
  if (v25 >> 1 >= v40 >> 1) {
    unint64_t v41 = v40 >> 1;
  }
  else {
    unint64_t v41 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unsigned int v44 = *v16;
      if (v44 >= 0xF0) {
        unsigned int v44 = 240;
      }
      if (v44 <= 0x10) {
        int v45 = 16;
      }
      else {
        int v45 = v44;
      }
      if (v16[1] >= 0xF0u) {
        unsigned int v46 = 240;
      }
      else {
        unsigned int v46 = v16[1];
      }
      if (v46 <= 0x10) {
        int v47 = 16;
      }
      else {
        int v47 = v46;
      }
      __int16 v42 = v16 + 2;
      *unint64_t v23 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 16368) >> 5)) >> 32) << 6;
      v23[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v47 - 16368) >> 5)) >> 32) << 6;
      uint64_t v43 = v23 + 2;
      if (!v41) {
        goto LABEL_51;
      }
    }
    else
    {
      __int16 v42 = v16;
      uint64_t v43 = v23;
      if (!v41)
      {
LABEL_51:
        v16 += v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_52;
      }
    }
    uint64_t v48 = -(uint64_t)v41;
    do
    {
      unsigned int v49 = *v42;
      unsigned int v50 = v42[1];
      if (v49 >= 0xF0) {
        unsigned int v49 = 240;
      }
      if (v49 <= 0x10) {
        unsigned int v49 = 16;
      }
      if (v50 >= 0xF0) {
        unsigned int v50 = 240;
      }
      if (v50 <= 0x10) {
        unsigned int v50 = 16;
      }
      *uint64_t v43 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v49 - 16368) >> 5)) >> 32) << 6;
      v43[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v50 - 16368) >> 5)) >> 32) << 6;
      v42 += 2;
      v43 += 2;
      BOOL v28 = __CFADD__(v48++, 1);
    }
    while (!v28);
    goto LABEL_51;
  }
LABEL_52:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      uint64_t v52 = v16;
      unsigned int v53 = v23;
      if (v9)
      {
        unsigned int v54 = *v16;
        if (v54 >= 0xF0) {
          unsigned int v54 = 240;
        }
        if (v54 <= 0x10) {
          int v55 = 16;
        }
        else {
          int v55 = v54;
        }
        if (v16[1] >= 0xF0u) {
          unsigned int v56 = 240;
        }
        else {
          unsigned int v56 = v16[1];
        }
        if (v56 <= 0x10) {
          int v57 = 16;
        }
        else {
          int v57 = v56;
        }
        uint64_t v52 = v16 + 2;
        *unint64_t v23 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v55 - 16368) >> 5)) >> 32) << 6;
        v23[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 16368) >> 5)) >> 32) << 6;
        unsigned int v53 = v23 + 2;
      }
      if (v41)
      {
        uint64_t v58 = -(uint64_t)v41;
        do
        {
          unsigned int v59 = *v52;
          unsigned int v60 = v52[1];
          if (v59 >= 0xF0) {
            unsigned int v59 = 240;
          }
          if (v59 <= 0x10) {
            unsigned int v59 = 16;
          }
          if (v60 >= 0xF0) {
            unsigned int v60 = 240;
          }
          if (v60 <= 0x10) {
            unsigned int v60 = 16;
          }
          *unsigned int v53 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v59 - 16368) >> 5)) >> 32) << 6;
          v53[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v60 - 16368) >> 5)) >> 32) << 6;
          v52 += 2;
          v53 += 2;
          BOOL v28 = __CFADD__(v58++, 1);
        }
        while (!v28);
      }
      v16 += v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  unint64_t v10 = v9 & 0xFFFFFFFE;
  unint64_t v11 = a2[3] + v9;
  uint64_t v12 = a4[1];
  unint64_t v13 = (char *)(a3[1] + v12 * (v9 >> 1) + (v8 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = a7[1] + v18 * v15 + 2 * v14;
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= v16) {
    size_t v20 = v16;
  }
  else {
    size_t v20 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (v11 - v10 + (v11 & 1) >= v17) {
    unint64_t v21 = v17;
  }
  else {
    unint64_t v21 = v11 - v10 + (v11 & 1);
  }
  if (v21)
  {
    uint64_t v60 = a8[1];
    unint64_t v61 = v21;
    uint64_t v62 = a4[1];
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = *a3 + *a4 * v10;
    if (v10 >= v9) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = (char *)(v25 + (a2[4] & 0xFFFFFFFELL) + v26);
    BOOL v28 = (char *)(a7[2] + v24 * v15 + v14);
    uint64_t v29 = (char *)(*a7 + v23 * v15 + v14);
    uint64_t v30 = -(uint64_t)v21;
    do
    {
      memcpy(v29, v27, v20);
      memset(v28, 255, v20);
      v27 += v22;
      v29 += v23;
      v28 += v24;
      BOOL v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    uint64_t v18 = v60;
    uint64_t v8 = a2[4];
    unint64_t v9 = a2[5];
    unint64_t v21 = v61;
    uint64_t v12 = v62;
  }
  uint64_t v32 = v9 & 1;
  unint64_t v33 = (v21 - v32) >> 1;
  if (v21 >> 1 < v33) {
    unint64_t v33 = v21 >> 1;
  }
  char v34 = v8;
  size_t v35 = v20 >> 1;
  uint64_t v36 = v8 & 1;
  if (v20 >> 1 >= (v20 - v36) >> 1) {
    size_t v35 = (v20 - v36) >> 1;
  }
  if (v9)
  {
    unint64_t v37 = (__int16 *)v13;
    if (v34)
    {
      unint64_t v37 = (__int16 *)(v13 + 2);
      *(_WORD *)uint64_t v19 = *(_WORD *)v13;
      unint64_t v38 = (_WORD *)(v19 + 2);
      if (v35)
      {
LABEL_22:
        uint64_t v39 = -(uint64_t)v35;
        do
        {
          __int16 v40 = *v37++;
          *v38++ = v40;
          BOOL v31 = __CFADD__(v39++, 1);
        }
        while (!v31);
        uint64_t v41 = 2 * v35;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v38 = (_WORD *)v19;
      if (v35) {
        goto LABEL_22;
      }
    }
    uint64_t v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v36) < v20) {
      _WORD *v38 = *v37;
    }
    v13 += v12;
    v19 += v18;
  }
  if (v33)
  {
    for (uint64_t i = 0; i != v33; ++i)
    {
      uint64_t v43 = v13;
      unsigned int v44 = (unsigned char *)v19;
      if (v34)
      {
        char v45 = *v13;
        char v46 = v13[1];
        uint64_t v43 = v13 + 2;
        *(unsigned char *)uint64_t v19 = *v13;
        *(unsigned char *)(v19 + 1) = v46;
        int v47 = (unsigned char *)(v19 + v18);
        *int v47 = v45;
        v47[1] = v46;
        unsigned int v44 = (unsigned char *)(v19 + 2);
      }
      if (v35)
      {
        uint64_t v48 = -(uint64_t)v35;
        do
        {
          char v49 = *v43;
          char v50 = v43[1];
          v43 += 2;
          *unsigned int v44 = v49;
          v44[1] = v50;
          _OWORD v44[2] = v49;
          v44[3] = v50;
          __int16 v51 = &v44[v18 + 1];
          *(v51 - 1) = v49;
          *__int16 v51 = v50;
          v51[1] = v49;
          v51[2] = v50;
          v44 += 4;
          BOOL v31 = __CFADD__(v48++, 1);
        }
        while (!v31);
      }
      if ((v36 | (2 * v35)) < v20)
      {
        char v52 = *v43;
        char v53 = v43[1];
        *unsigned int v44 = v52;
        v44[1] = v53;
        unsigned int v54 = &v44[v18];
        unsigned char *v54 = v52;
        v54[1] = v53;
      }
      v13 += v12;
      v19 += 2 * v18;
    }
    v33 *= 2;
  }
  if ((v33 | v32) < v21)
  {
    if (v34)
    {
      __int16 v55 = *(_WORD *)v13;
      v13 += 2;
      *(_WORD *)uint64_t v19 = v55;
      v19 += 2;
    }
    if (v35)
    {
      uint64_t v56 = -(uint64_t)v35;
      do
      {
        __int16 v57 = *(_WORD *)v13;
        v13 += 2;
        *(_WORD *)uint64_t v19 = v57;
        v19 += 2;
        BOOL v31 = __CFADD__(v56++, 1);
      }
      while (!v31);
      v35 *= 2;
    }
    if ((v35 | v36) < v20) {
      *(_WORD *)uint64_t v19 = *(_WORD *)v13;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  unint64_t v10 = v9 & 0xFFFFFFFE;
  unint64_t v11 = a2[3] + v9;
  uint64_t v12 = a4[1];
  unint64_t v13 = (char *)(a3[1] + v12 * (v9 >> 1) + (v8 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = a7[1] + v18 * v15 + 2 * v14;
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= v16) {
    size_t v20 = v16;
  }
  else {
    size_t v20 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (v11 - v10 + (v11 & 1) >= v17) {
    unint64_t v21 = v17;
  }
  else {
    unint64_t v21 = v11 - v10 + (v11 & 1);
  }
  if (v21)
  {
    unint64_t v58 = v21;
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = *a3 + *a4 * v10;
    if (v10 >= v9) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = *a4;
    }
    uint64_t v26 = (char *)(v24 + (a2[4] & 0xFFFFFFFELL) + v25);
    uint64_t v27 = (char *)(*a7 + v23 * v15 + v14);
    uint64_t v28 = -(uint64_t)v21;
    do
    {
      memcpy(v27, v26, v20);
      v26 += v22;
      v27 += v23;
      BOOL v29 = __CFADD__(v28++, 1);
    }
    while (!v29);
    unint64_t v21 = v58;
    uint64_t v8 = a2[4];
    unint64_t v9 = a2[5];
  }
  uint64_t v30 = v9 & 1;
  unint64_t v31 = (v21 - v30) >> 1;
  if (v21 >> 1 < v31) {
    unint64_t v31 = v21 >> 1;
  }
  char v32 = v8;
  size_t v33 = v20 >> 1;
  uint64_t v34 = v8 & 1;
  if (v20 >> 1 >= (v20 - v34) >> 1) {
    size_t v33 = (v20 - v34) >> 1;
  }
  if (v9)
  {
    size_t v35 = (__int16 *)v13;
    if (v32)
    {
      size_t v35 = (__int16 *)(v13 + 2);
      *(_WORD *)uint64_t v19 = *(_WORD *)v13;
      uint64_t v36 = (_WORD *)(v19 + 2);
      if (v33)
      {
LABEL_22:
        uint64_t v37 = -(uint64_t)v33;
        do
        {
          __int16 v38 = *v35++;
          *v36++ = v38;
          BOOL v29 = __CFADD__(v37++, 1);
        }
        while (!v29);
        uint64_t v39 = 2 * v33;
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v36 = (_WORD *)v19;
      if (v33) {
        goto LABEL_22;
      }
    }
    uint64_t v39 = 0;
LABEL_28:
    if ((v39 | (unint64_t)v34) < v20) {
      _WORD *v36 = *v35;
    }
    v13 += v12;
    v19 += v18;
  }
  if (v31)
  {
    for (uint64_t i = 0; i != v31; ++i)
    {
      uint64_t v41 = v13;
      __int16 v42 = (unsigned char *)v19;
      if (v32)
      {
        char v43 = *v13;
        char v44 = v13[1];
        uint64_t v41 = v13 + 2;
        *(unsigned char *)uint64_t v19 = *v13;
        *(unsigned char *)(v19 + 1) = v44;
        char v45 = (unsigned char *)(v19 + v18);
        unsigned char *v45 = v43;
        v45[1] = v44;
        __int16 v42 = (unsigned char *)(v19 + 2);
      }
      if (v33)
      {
        uint64_t v46 = -(uint64_t)v33;
        do
        {
          char v47 = *v41;
          char v48 = v41[1];
          v41 += 2;
          *__int16 v42 = v47;
          v42[1] = v48;
          _OWORD v42[2] = v47;
          v42[3] = v48;
          char v49 = &v42[v18 + 1];
          *(v49 - 1) = v47;
          *char v49 = v48;
          v49[1] = v47;
          v49[2] = v48;
          v42 += 4;
          BOOL v29 = __CFADD__(v46++, 1);
        }
        while (!v29);
      }
      if ((v34 | (2 * v33)) < v20)
      {
        char v50 = *v41;
        char v51 = v41[1];
        *__int16 v42 = v50;
        v42[1] = v51;
        char v52 = &v42[v18];
        *char v52 = v50;
        v52[1] = v51;
      }
      v13 += v12;
      v19 += 2 * v18;
    }
    v31 *= 2;
  }
  if ((v31 | v30) < v21)
  {
    if (v32)
    {
      __int16 v53 = *(_WORD *)v13;
      v13 += 2;
      *(_WORD *)uint64_t v19 = v53;
      v19 += 2;
    }
    if (v33)
    {
      uint64_t v54 = -(uint64_t)v33;
      do
      {
        __int16 v55 = *(_WORD *)v13;
        v13 += 2;
        *(_WORD *)uint64_t v19 = v55;
        v19 += 2;
        BOOL v29 = __CFADD__(v54++, 1);
      }
      while (!v29);
      v33 *= 2;
    }
    if ((v33 | v34) < v20) {
      *(_WORD *)uint64_t v19 = *(_WORD *)v13;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  unint64_t v10 = v8 & 0xFFFFFFFE;
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int8 *)(a3[1] + v11 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v14 + 2 * v13);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  unint64_t v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15) {
    unint64_t v20 = v15;
  }
  if (v20)
  {
    uint64_t v21 = 0;
    BOOL v22 = v10 >= v8;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a3 + *a4 * v10;
    if (v22) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = v25 + (a2[4] & 0xFFFFFFFELL) + v26;
    uint64_t v28 = *a7 + v24 * v14 + v13;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          unsigned int v30 = *(unsigned __int8 *)(v27 + i);
          if (v30 >= 0xEB) {
            unsigned int v30 = 235;
          }
          if (v30 <= 0x10) {
            unsigned int v30 = 16;
          }
          *(unsigned char *)(v28 + i) = (((255 * v30
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v30 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v30 - 4080)) >> 16)) >> 7;
        }
      }
      v27 += v23;
      v28 += v24;
      ++v21;
    }
    while (v21 != v20);
    uint64_t v9 = a2[4];
    unint64_t v8 = a2[5];
  }
  unint64_t v31 = (v20 - (v8 & 1)) >> 1;
  if (v20 >> 1 < v31) {
    unint64_t v31 = v20 >> 1;
  }
  char v32 = v9;
  unint64_t v33 = v19 >> 1;
  uint64_t v34 = v9 & 1;
  if (v19 >> 1 >= (v19 - v34) >> 1) {
    unint64_t v33 = (v19 - v34) >> 1;
  }
  if (v8)
  {
    if (v32)
    {
      unsigned int v41 = *v12;
      unsigned int v42 = v12[1];
      if (v41 >= 0xF0) {
        unsigned int v41 = 240;
      }
      if (v41 <= 0x10) {
        LOWORD(v41) = 16;
      }
      if (v42 >= 0xF0) {
        unsigned int v42 = 240;
      }
      if (v42 <= 0x10) {
        __int16 v43 = 16;
      }
      else {
        __int16 v43 = v42;
      }
      size_t v35 = v12 + 2;
      unsigned char *v18 = (9363 * ((unsigned __int16)(255 * v41 - 4080) >> 5)) >> 16;
      v18[1] = (9363 * ((unsigned __int16)(255 * v43 - 4080) >> 5)) >> 16;
      uint64_t v36 = v18 + 2;
      if (v33) {
        goto LABEL_26;
      }
    }
    else
    {
      size_t v35 = v12;
      uint64_t v36 = v18;
      if (v33)
      {
LABEL_26:
        uint64_t v37 = -(uint64_t)v33;
        do
        {
          unsigned int v38 = *v35;
          unsigned int v39 = v35[1];
          if (v38 >= 0xF0) {
            unsigned int v38 = 240;
          }
          if (v38 <= 0x10) {
            LOWORD(v38) = 16;
          }
          if (v39 >= 0xF0) {
            unsigned int v39 = 240;
          }
          if (v39 <= 0x10) {
            LOWORD(v39) = 16;
          }
          v35 += 2;
          unsigned char *v36 = (9363 * ((unsigned __int16)(255 * v38 - 4080) >> 5)) >> 16;
          v36[1] = (9363 * ((unsigned __int16)(255 * v39 - 4080) >> 5)) >> 16;
          v36 += 2;
          BOOL v22 = __CFADD__(v37++, 1);
        }
        while (!v22);
        uint64_t v40 = 2 * v33;
        goto LABEL_49;
      }
    }
    uint64_t v40 = 0;
LABEL_49:
    if ((v40 | (unint64_t)v34) < v19)
    {
      unsigned int v44 = *v35;
      unsigned int v45 = v35[1];
      if (v44 >= 0xF0) {
        unsigned int v44 = 240;
      }
      if (v44 <= 0x10) {
        LOWORD(v44) = 16;
      }
      if (v45 >= 0xF0) {
        unsigned int v45 = 240;
      }
      if (v45 <= 0x10) {
        LOWORD(v45) = 16;
      }
      unsigned char *v36 = (9363 * ((unsigned __int16)(255 * v44 - 4080) >> 5)) >> 16;
      v36[1] = (9363 * ((unsigned __int16)(255 * v45 - 4080) >> 5)) >> 16;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v31)
  {
    for (uint64_t j = 0; j != v31; ++j)
    {
      char v47 = v12;
      char v48 = v18;
      if (v32)
      {
        unsigned int v49 = *v12;
        unsigned int v50 = v12[1];
        if (v49 >= 0xF0) {
          unsigned int v49 = 240;
        }
        if (v49 <= 0x10) {
          LOWORD(v49) = 16;
        }
        if (v50 >= 0xF0) {
          unsigned int v50 = 240;
        }
        if (v50 <= 0x10) {
          __int16 v51 = 16;
        }
        else {
          __int16 v51 = v50;
        }
        char v47 = v12 + 2;
        unsigned int v52 = (9363 * ((unsigned __int16)(255 * v49 - 4080) >> 5)) >> 16;
        unsigned int v53 = (9363 * ((unsigned __int16)(255 * v51 - 4080) >> 5)) >> 16;
        unsigned char *v18 = v52;
        v18[1] = v53;
        uint64_t v54 = &v18[v17];
        unsigned char *v54 = v52;
        v54[1] = v53;
        char v48 = v18 + 2;
      }
      if (v33)
      {
        uint64_t v55 = -(uint64_t)v33;
        do
        {
          unsigned int v56 = *v47;
          unsigned int v57 = v47[1];
          if (v56 >= 0xF0) {
            unsigned int v56 = 240;
          }
          if (v56 <= 0x10) {
            LOWORD(v56) = 16;
          }
          if (v57 >= 0xF0) {
            unsigned int v57 = 240;
          }
          if (v57 <= 0x10) {
            LOWORD(v57) = 16;
          }
          unsigned int v58 = (9363 * ((unsigned __int16)(255 * v56 - 4080) >> 5)) >> 16;
          unsigned char *v48 = v58;
          unsigned int v59 = (9363 * ((unsigned __int16)(255 * v57 - 4080) >> 5)) >> 16;
          v48[1] = v59;
          _OWORD v48[2] = v58;
          v48[3] = v59;
          uint64_t v60 = &v48[v17 + 1];
          *(v60 - 1) = v58;
          unsigned char *v60 = v59;
          v47 += 2;
          v60[1] = v58;
          v60[2] = v59;
          v48 += 4;
          BOOL v22 = __CFADD__(v55++, 1);
        }
        while (!v22);
      }
      if ((v34 | (2 * v33)) < v19)
      {
        unsigned int v61 = *v47;
        unsigned int v62 = v47[1];
        if (v61 >= 0xF0) {
          unsigned int v61 = 240;
        }
        if (v61 <= 0x10) {
          LOWORD(v61) = 16;
        }
        if (v62 >= 0xF0) {
          unsigned int v62 = 240;
        }
        if (v62 <= 0x10) {
          LOWORD(v62) = 16;
        }
        unsigned int v63 = (9363 * ((unsigned __int16)(255 * v61 - 4080) >> 5)) >> 16;
        unsigned int v64 = (9363 * ((unsigned __int16)(255 * v62 - 4080) >> 5)) >> 16;
        unsigned char *v48 = v63;
        v48[1] = v64;
        unsigned int v65 = &v48[v17];
        *unsigned int v65 = v63;
        v65[1] = v64;
      }
      v12 += v11;
      v18 += 2 * v17;
    }
    uint64_t v66 = 2 * v31;
  }
  else
  {
    uint64_t v66 = 0;
  }
  if ((v66 | v8 & 1) < v20)
  {
    if (v32)
    {
      unsigned int v67 = *v12;
      unsigned int v68 = v12[1];
      if (v67 >= 0xF0) {
        unsigned int v67 = 240;
      }
      if (v67 <= 0x10) {
        LOWORD(v67) = 16;
      }
      if (v68 >= 0xF0) {
        unsigned int v68 = 240;
      }
      if (v68 <= 0x10) {
        LOWORD(v68) = 16;
      }
      v12 += 2;
      unsigned char *v18 = (9363 * ((unsigned __int16)(255 * v67 - 4080) >> 5)) >> 16;
      v18[1] = (9363 * ((unsigned __int16)(255 * v68 - 4080) >> 5)) >> 16;
      v18 += 2;
    }
    if (v33)
    {
      uint64_t v69 = -(uint64_t)v33;
      do
      {
        unsigned int v70 = *v12;
        unsigned int v71 = v12[1];
        if (v70 >= 0xF0) {
          unsigned int v70 = 240;
        }
        if (v70 <= 0x10) {
          LOWORD(v70) = 16;
        }
        if (v71 >= 0xF0) {
          unsigned int v71 = 240;
        }
        if (v71 <= 0x10) {
          LOWORD(v71) = 16;
        }
        v12 += 2;
        unsigned char *v18 = (9363 * ((unsigned __int16)(255 * v70 - 4080) >> 5)) >> 16;
        v18[1] = (9363 * ((unsigned __int16)(255 * v71 - 4080) >> 5)) >> 16;
        v18 += 2;
        BOOL v22 = __CFADD__(v69++, 1);
      }
      while (!v22);
      uint64_t v72 = 2 * v33;
    }
    else
    {
      uint64_t v72 = 0;
    }
    if ((v72 | (unint64_t)v34) < v19)
    {
      unsigned int v73 = *v12;
      unsigned int v74 = v12[1];
      if (v73 >= 0xF0) {
        unsigned int v73 = 240;
      }
      if (v73 <= 0x10) {
        LOWORD(v73) = 16;
      }
      if (v74 >= 0xF0) {
        unsigned int v74 = 240;
      }
      if (v74 <= 0x10) {
        LOWORD(v74) = 16;
      }
      unsigned char *v18 = (9363 * ((unsigned __int16)(255 * v73 - 4080) >> 5)) >> 16;
      v18[1] = (9363 * ((unsigned __int16)(255 * v74 - 4080) >> 5)) >> 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  unint64_t v15 = (__int16 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  unint64_t v20 = (__int16 *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v17 - v16) {
    size_t v21 = v17 - v16;
  }
  else {
    size_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (v13 - v12 + (v13 & 1) >= *(void *)(a6 + 24)) {
    unint64_t v22 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v22 = v13 - v12 + (v13 & 1);
  }
  if (v22)
  {
    unint64_t v52 = v22;
    uint64_t v23 = *a3 + *a4 * v12;
    uint64_t v53 = a4[1];
    uint64_t v54 = *a4;
    if (v12 >= v11) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = *a4;
    }
    uint64_t v25 = (char *)(v23 + v10 + v24);
    uint64_t v26 = a8[2];
    uint64_t v27 = (char *)(a7[2] + v26 * v18 + v16);
    uint64_t v28 = *a8;
    BOOL v29 = (char *)(*a7 + *a8 * v18 + v16);
    uint64_t v30 = -(uint64_t)v22;
    do
    {
      memcpy(v29, v25, v21);
      memset(v27, 255, v21);
      v25 += v54;
      v29 += v28;
      v27 += v26;
      BOOL v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    unint64_t v22 = v52;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
    uint64_t v14 = v53;
  }
  uint64_t v32 = v11 & 1;
  if (v22 >> 1 >= (v22 - v32) >> 1) {
    unint64_t v33 = (v22 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v33 = v22 >> 1;
  }
  char v34 = v8;
  size_t v35 = v21 >> 1;
  if (v21 >> 1 >= (v21 - v9) >> 1) {
    size_t v35 = (v21 - v9) >> 1;
  }
  if (v11)
  {
    uint64_t v36 = v15;
    if (v34)
    {
      uint64_t v36 = v15 + 1;
      *unint64_t v20 = *v15;
      uint64_t v37 = v20 + 1;
      if (!v35)
      {
LABEL_28:
        unint64_t v15 = (__int16 *)((char *)v15 + v14);
        unint64_t v20 = (__int16 *)((char *)v20 + v19);
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v37 = v20;
      if (!v35) {
        goto LABEL_28;
      }
    }
    uint64_t v38 = -(uint64_t)v35;
    do
    {
      __int16 v39 = *v36++;
      *v37++ = v39;
      BOOL v31 = __CFADD__(v38++, 1);
    }
    while (!v31);
    goto LABEL_28;
  }
LABEL_29:
  if (v33)
  {
    for (uint64_t i = 0; i != v33; ++i)
    {
      unsigned int v41 = (char *)v15;
      unsigned int v42 = (char *)v20;
      if (v34)
      {
        unsigned int v41 = (char *)(v15 + 1);
        *unint64_t v20 = *v15;
        unsigned int v42 = (char *)(v20 + 1);
      }
      if (v35)
      {
        uint64_t v43 = -(uint64_t)v35;
        do
        {
          char v44 = *v41;
          char v45 = v41[1];
          *unsigned int v42 = *v41;
          v42[1] = v45;
          uint64_t v46 = &v42[v19];
          char *v46 = v44;
          v46[1] = v45;
          v42 += 2;
          v41 += 2;
          BOOL v31 = __CFADD__(v43++, 1);
        }
        while (!v31);
      }
      unint64_t v15 = (__int16 *)((char *)v15 + v14);
      v20 += v19;
    }
    v33 *= 2;
  }
  if ((v33 | v32) < v22)
  {
    if (v34)
    {
      __int16 v47 = *v15++;
      *v20++ = v47;
    }
    if (v35)
    {
      uint64_t v48 = -(uint64_t)v35;
      do
      {
        __int16 v49 = *v15++;
        *v20++ = v49;
        BOOL v31 = __CFADD__(v48++, 1);
      }
      while (!v31);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_422v(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = a5[1];
    unint64_t v10 = a2 >> 1;
    uint64_t v11 = a1 >> 1;
    uint64_t v13 = *a6;
    uint64_t v12 = a6[1];
    uint64_t v14 = 2 * v7;
    uint64_t v16 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v17 = 2 * *a5;
    uint64_t v18 = 2 * v9;
    if (a1 >> 1 <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v19 = v12 + v9;
    uint64_t v20 = v7 + v16 + 1;
    uint64_t v21 = v13 + *a5;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v22 = 0;
        uint64_t v23 = v11;
        do
        {
          uint64_t v24 = (unsigned char *)(v19 + v22);
          uint64_t v25 = (unsigned char *)(v12 + v22);
          char v26 = *(unsigned char *)(v15 + v22);
          char v27 = *(unsigned char *)(v15 + v22 + 1);
          *(_WORD *)(v13 + v22) = *(_WORD *)(v16 + v22);
          *uint64_t v25 = v26;
          v25[1] = v27;
          *(_WORD *)(v21 + v22) = *(_WORD *)(v20 + v22 - 1);
          *uint64_t v24 = v26;
          v24[1] = v27;
          v22 += 2;
          --v23;
        }
        while (v23);
      }
      v16 += v14;
      v15 += v8;
      v13 += v17;
      v12 += v18;
      ++v6;
      v19 += v18;
      v20 += v14;
      v21 += v17;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_420v_422f(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = a5[1];
    unint64_t v10 = a2 >> 1;
    uint64_t v11 = a1 >> 1;
    uint64_t v13 = *a6;
    uint64_t v12 = a6[1];
    uint64_t v14 = 2 * v7;
    uint64_t v15 = 2 * *a5;
    uint64_t v16 = 2 * v9;
    if (a1 >> 1 <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v17 = *a4;
    uint64_t v18 = a4[1];
    uint64_t v19 = v12 + v9;
    uint64_t v20 = v7 + *a4 + 1;
    uint64_t v21 = v13 + *a5;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v22 = 0;
        uint64_t v23 = v11;
        do
        {
          uint64_t v24 = (unsigned char *)(v13 + v22);
          uint64_t v25 = *(unsigned __int8 *)(v18 + v22);
          uint64_t v26 = *(unsigned __int8 *)(v18 + v22 + 1);
          uint64_t v27 = *(unsigned __int8 *)(v17 + v22 + 1);
          *uint64_t v24 = sLumaTableVtoF[*(unsigned __int8 *)(v17 + v22)];
          uint64_t v28 = (unsigned char *)(v12 + v22);
          v24[1] = sLumaTableVtoF[v27];
          LOBYTE(v27) = sChromaTableVtoF[v25];
          *uint64_t v28 = v27;
          LOBYTE(v26) = sChromaTableVtoF[v26];
          v28[1] = v26;
          BOOL v29 = (unsigned char *)(v21 + v22);
          uint64_t v30 = *(unsigned __int8 *)(v20 + v22);
          *BOOL v29 = sLumaTableVtoF[*(unsigned __int8 *)(v20 + v22 - 1)];
          BOOL v31 = (unsigned char *)(v19 + v22);
          v29[1] = sLumaTableVtoF[v30];
          *BOOL v31 = v27;
          v31[1] = v26;
          v22 += 2;
          --v23;
        }
        while (v23);
      }
      v17 += v14;
      v18 += v8;
      v13 += v15;
      v12 += v16;
      ++v6;
      v19 += v16;
      v20 += v14;
      v21 += v15;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_420v_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (__int16 *)(a3[1] + v15 * ((v12 + v9) >> 1) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (__int16 *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    size_t v23 = v18 - v17;
  }
  else {
    size_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  unint64_t v24 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v48 = a8[1];
    uint64_t v49 = a4[1];
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    BOOL v29 = (char *)(*a3 + *a4 * v13 + v11 + v28);
    uint64_t v30 = (char *)(a7[2] + v27 * v19 + v17);
    BOOL v31 = (char *)(*a7 + v26 * v19 + v17);
    unint64_t v46 = v24;
    uint64_t v32 = -(uint64_t)v24;
    do
    {
      memcpy(v31, v29, v23);
      memset(v30, 255, v23);
      v29 += v25;
      v31 += v26;
      v30 += v27;
      BOOL v33 = __CFADD__(v32++, 1);
    }
    while (!v33);
    uint64_t v21 = v48;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
    uint64_t v15 = v49;
    unint64_t v24 = v46;
  }
  unint64_t v34 = v24 >> 1;
  if (v24 >> 1 >= (v24 - v12) >> 1) {
    unint64_t v34 = (v24 - v12) >> 1;
  }
  if (v23 >> 1 >= (v23 - v10) >> 1) {
    size_t v35 = (v23 - v10) >> 1;
  }
  else {
    size_t v35 = v23 >> 1;
  }
  if (v12)
  {
    uint64_t v36 = v16;
    if (v8)
    {
      uint64_t v36 = v16 + 1;
      __int16 *v22 = *v16;
      uint64_t v37 = v22 + 1;
      if (!v35)
      {
LABEL_27:
        uint64_t v16 = (__int16 *)((char *)v16 + v15);
        uint64_t v22 = (__int16 *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v37 = v22;
      if (!v35) {
        goto LABEL_27;
      }
    }
    uint64_t v38 = -(uint64_t)v35;
    do
    {
      __int16 v39 = *v36++;
      *v37++ = v39;
      BOOL v33 = __CFADD__(v38++, 1);
    }
    while (!v33);
    goto LABEL_27;
  }
LABEL_28:
  if (v34)
  {
    for (uint64_t i = 0; i != v34; ++i)
    {
      unsigned int v41 = v16;
      unsigned int v42 = v22;
      if (v8)
      {
        unsigned int v41 = v16 + 1;
        __int16 *v22 = *v16;
        unsigned int v42 = v22 + 1;
      }
      if (v35)
      {
        uint64_t v43 = -(uint64_t)v35;
        do
        {
          __int16 v44 = *v41++;
          *v42++ = v44;
          BOOL v33 = __CFADD__(v43++, 1);
        }
        while (!v33);
      }
      uint64_t v16 = (__int16 *)((char *)v16 + v15);
      uint64_t v22 = (__int16 *)((char *)v22 + v21);
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_420f(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = *a5;
    uint64_t v10 = a5[1];
    unint64_t v11 = a2 >> 1;
    uint64_t v12 = a1 >> 1;
    unint64_t v13 = (unsigned char *)*a6;
    uint64_t v14 = a6[1];
    if (a1 >> 1 <= 1) {
      uint64_t v12 = 1;
    }
    uint64_t v16 = *a4;
    uint64_t v15 = a4[1];
    do
    {
      if (a1)
      {
        for (uint64_t i = 0; i != a1; ++i)
          v13[i] = sLumaTableVtoF[v16[i]];
        uint64_t v19 = &v16[v7];
        uint64_t v20 = &v13[v9];
        uint64_t v21 = v19;
        uint64_t v22 = v20;
        unint64_t v23 = a1;
        do
        {
          int v24 = *v21++;
          *v22++ = sLumaTableVtoF[v24];
          --v23;
        }
        while (v23);
        uint64_t v16 = &v19[v7];
        unint64_t v13 = &v20[v9];
        if (a1 >= 2)
        {
          uint64_t v25 = 0;
          uint64_t v26 = v12;
          do
          {
            uint64_t v27 = (unsigned char *)(v14 + v25);
            uint64_t v28 = v15[v25 + 1];
            *uint64_t v27 = sChromaTableVtoF[v15[v25]];
            v27[1] = sChromaTableVtoF[v28];
            v25 += 2;
            --v26;
          }
          while (v26);
        }
      }
      else
      {
        v16 += v7 + v7;
        v13 += v9 + v9;
      }
      v15 += v8;
      v14 += v10;
      ++v6;
    }
    while (v6 != v11);
  }
  return 0;
}

uint64_t vt_Copy_420v_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v9) >> 1) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  uint64_t v23 = a7[2];
  int v24 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  uint64_t v25 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) < v26) {
    unint64_t v26 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  unint64_t v27 = v14 - v13;
  unint64_t v28 = v20 - v19;
  if (v14 - v13 >= v28) {
    unint64_t v27 = v28;
  }
  if (v27)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v13;
    if (v13 >= v9) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    uint64_t v34 = v32 + v11 + v33;
    unint64_t v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          unsigned int v37 = *(unsigned __int8 *)(v34 + i);
          if (v37 >= 0xEB) {
            unsigned int v37 = 235;
          }
          if (v37 <= 0x10) {
            unsigned int v37 = 16;
          }
          *(unsigned char *)(v35 + i) = (((255 * v37
                                 - 4080
                                 - ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 1)
                               + ((11073 * (unsigned __int16)(255 * v37 - 4080)) >> 16)) >> 7;
        }
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  unint64_t v38 = v27 >> 1;
  unint64_t v39 = v27 - v12;
  if (v38 >= v39 >> 1) {
    unint64_t v40 = v39 >> 1;
  }
  else {
    unint64_t v40 = v38;
  }
  unint64_t v41 = v26 >> 1;
  unint64_t v42 = v26 - v10;
  if (v41 >= v42 >> 1) {
    unint64_t v43 = v42 >> 1;
  }
  else {
    unint64_t v43 = v41;
  }
  if (v12)
  {
    if (v8)
    {
      unsigned int v47 = *v16;
      if (v47 >= 0xF0) {
        unsigned int v47 = 240;
      }
      if (v47 <= 0x10) {
        __int16 v48 = 16;
      }
      else {
        __int16 v48 = v47;
      }
      if (v16[1] >= 0xF0u) {
        unsigned int v49 = 240;
      }
      else {
        unsigned int v49 = v16[1];
      }
      if (v49 <= 0x10) {
        __int16 v50 = 16;
      }
      else {
        __int16 v50 = v49;
      }
      __int16 v44 = v16 + 2;
      unsigned int v51 = (9363 * ((unsigned __int16)(255 * v50 - 4080) >> 5)) >> 16;
      *int v24 = (9363 * ((unsigned __int16)(255 * v48 - 4080) >> 5)) >> 16;
      char v45 = v24 + 1;
      *uint64_t v25 = v51;
      unint64_t v46 = v25 + 1;
      if (!v43) {
        goto LABEL_52;
      }
    }
    else
    {
      __int16 v44 = v16;
      char v45 = v24;
      unint64_t v46 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v43)
      {
LABEL_52:
        v16 += v15;
        v24 += v21;
        v25 += v22;
        goto LABEL_53;
      }
    }
    uint64_t v52 = -(uint64_t)v43;
    do
    {
      unsigned int v53 = *v44;
      unsigned int v54 = v44[1];
      if (v53 >= 0xF0) {
        unsigned int v53 = 240;
      }
      if (v53 <= 0x10) {
        LOWORD(v53) = 16;
      }
      if (v54 >= 0xF0) {
        unsigned int v54 = 240;
      }
      if (v54 <= 0x10) {
        LOWORD(v54) = 16;
      }
      *v45++ = (9363 * ((unsigned __int16)(255 * v53 - 4080) >> 5)) >> 16;
      *v46++ = (9363 * ((unsigned __int16)(255 * v54 - 4080) >> 5)) >> 16;
      v44 += 2;
      BOOL v55 = __CFADD__(v52++, 1);
    }
    while (!v55);
    goto LABEL_52;
  }
LABEL_53:
  if (v40)
  {
    for (uint64_t j = 0; j != v40; ++j)
    {
      unsigned int v57 = v16;
      unsigned int v58 = v24;
      unsigned int v59 = v25;
      if (v8)
      {
        unsigned int v60 = *v16;
        if (v60 >= 0xF0) {
          unsigned int v60 = 240;
        }
        if (v60 <= 0x10) {
          __int16 v61 = 16;
        }
        else {
          __int16 v61 = v60;
        }
        if (v16[1] >= 0xF0u) {
          unsigned int v62 = 240;
        }
        else {
          unsigned int v62 = v16[1];
        }
        if (v62 <= 0x10) {
          __int16 v63 = 16;
        }
        else {
          __int16 v63 = v62;
        }
        unsigned int v57 = v16 + 2;
        unsigned int v64 = (9363 * ((unsigned __int16)(255 * v63 - 4080) >> 5)) >> 16;
        *int v24 = (9363 * ((unsigned __int16)(255 * v61 - 4080) >> 5)) >> 16;
        unsigned int v58 = v24 + 1;
        *uint64_t v25 = v64;
        unsigned int v59 = v25 + 1;
      }
      if (v43)
      {
        uint64_t v65 = -(uint64_t)v43;
        do
        {
          unsigned int v66 = *v57;
          unsigned int v67 = v57[1];
          if (v66 >= 0xF0) {
            unsigned int v66 = 240;
          }
          if (v66 <= 0x10) {
            LOWORD(v66) = 16;
          }
          if (v67 >= 0xF0) {
            unsigned int v67 = 240;
          }
          if (v67 <= 0x10) {
            LOWORD(v67) = 16;
          }
          *v58++ = (9363 * ((unsigned __int16)(255 * v66 - 4080) >> 5)) >> 16;
          *v59++ = (9363 * ((unsigned __int16)(255 * v67 - 4080) >> 5)) >> 16;
          v57 += 2;
          BOOL v55 = __CFADD__(v65++, 1);
        }
        while (!v55);
      }
      v16 += v15;
      v24 += v21;
      v25 += v22;
    }
  }
  return 0;
}

uint64_t vt_Copy_420v_8GRAYSCALE(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    unint64_t v8 = a2 >> 1;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = *a6;
    uint64_t v11 = *a4;
    uint64_t v12 = 2 * *a3;
    uint64_t v13 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v14 = v10 + *a5;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v15 = 0;
        uint64_t v16 = v11 + v7;
        uint64_t v17 = v9;
        do
        {
          uint64_t v18 = (unsigned char *)(v14 + v15);
          uint64_t v19 = (unsigned char *)(v10 + v15);
          char v20 = sLumaTableVtoF[*(unsigned __int8 *)(v11 + v15 + 1)];
          *uint64_t v19 = ~sLumaTableVtoF[*(unsigned __int8 *)(v11 + v15)];
          v19[1] = ~v20;
          LOBYTE(v19) = sLumaTableVtoF[*(unsigned __int8 *)(v16 + v15 + 1)];
          unsigned char *v18 = ~sLumaTableVtoF[*(unsigned __int8 *)(v16 + v15)];
          v18[1] = ~(_BYTE)v19;
          v15 += 2;
          --v17;
        }
        while (v17);
      }
      v11 += v12;
      v10 += v13;
      ++v6;
      v14 += v13;
    }
    while (v6 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v0a8_y408(unint64_t a1, unint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = a2 >> 1;
    unint64_t v8 = (unsigned char *)*a6;
    uint64_t v9 = *a5;
    uint64_t v11 = a4[1];
    uint64_t v10 = a4[2];
    uint64_t v13 = a3[1];
    uint64_t v12 = a3[2];
    uint64_t v14 = v10 + v12;
    uint64_t v15 = *a4;
    uint64_t v16 = *a4 + *a3;
    uint64_t v17 = 2 * *a3;
    uint64_t v18 = 2 * v12;
    if (a1 >> 1 <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = a1 >> 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v20 = 0;
        uint64_t v21 = v19;
        uint64_t v22 = v8;
        do
        {
          char v23 = *(unsigned char *)(v15 + v20);
          char v24 = *(unsigned char *)(v15 + v20 + 1);
          char v25 = *(unsigned char *)(v16 + v20);
          unint64_t v26 = &v22[v9];
          char v27 = *(unsigned char *)(v16 + v20 + 1);
          char v28 = *(unsigned char *)(v11 + v20);
          char v29 = *(unsigned char *)(v11 + v20 + 1);
          char v30 = *(unsigned char *)(v10 + v20 + 1);
          char v31 = *(unsigned char *)(v14 + v20);
          char v32 = *(unsigned char *)(v14 + v20 + 1);
          unsigned char *v22 = *(unsigned char *)(v10 + v20);
          v22[1] = v23;
          v22[2] = v28;
          void v22[3] = v29;
          v22[4] = v30;
          v22[5] = v24;
          v22[6] = v28;
          v22[7] = v29;
          *unint64_t v26 = v31;
          v26[1] = v25;
          v26[2] = v28;
          v26[3] = v29;
          v26[4] = v32;
          v26[5] = v27;
          v26[6] = v28;
          v22 += 8;
          v20 += 2;
          v26[7] = v29;
          --v21;
        }
        while (v21);
      }
      v15 += v17;
      v16 += v17;
      v11 += v13;
      v10 += v18;
      v14 += v18;
      v8 += 2 * v9;
      ++v6;
    }
    while (v6 != v7);
  }
  return 0;
}

uint64_t vt_Copy_v0a8_y416(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[5] & 0xFFFFFFFELL;
  unint64_t v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  uint64_t v10 = a2[3] + a2[5];
  unint64_t v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a8;
    uint64_t v17 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v18 = *a3;
    unint64_t v19 = a3[1] + v15 * (v9 >> 1);
    uint64_t v20 = a4[2];
    unint64_t v21 = a3[2] + v20 * v9;
    uint64_t v22 = v18 + *a4 * v9;
    char v23 = (unsigned __int8 *)(v19 + v8);
    unint64_t v24 = v21 + v8;
    uint64_t v25 = v22 + v8;
    do
    {
      if (v11)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        __int16 v28 = 0;
        __int16 v29 = 0;
        char v30 = v23;
        do
        {
          if ((v27 & 1) == 0)
          {
            __int16 v31 = *v30;
            __int16 v32 = v30[1];
            v30 += 2;
            __int16 v29 = v31 << 8;
            __int16 v28 = v32 << 8;
          }
          uint64_t v33 = (_WORD *)(v17 + v26);
          __int16 v34 = *(unsigned __int8 *)(v25 + v27) << 8;
          *uint64_t v33 = *(unsigned __int8 *)(v24 + v27) | (*(unsigned __int8 *)(v24 + v27) << 8);
          v33[1] = v34;
          v33[2] = v29;
          v33[3] = v28;
          ++v27;
          v26 += 8;
        }
        while (v11 != v27);
      }
      v25 += v14;
      v17 += v16;
      v23 += (v13 << 63 >> 63) & v15;
      v24 += v20;
      ++v13;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_v0a8_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = v9 & 0xFFFFFFFE;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * (v8 >> 1) + v10);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  unint64_t v18 = a2[2] + v9 - v10 + ((a2[2] + v9) & 1);
  if (v18 >= a6[2]) {
    unint64_t v18 = a6[2];
  }
  unint64_t v19 = a2[3] + v8 - v11 + ((a2[3] + v8) & 1);
  if (v19 >= a6[3]) {
    unint64_t v19 = a6[3];
  }
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = a8[2];
    if (v11 >= v8) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = *a4;
    }
    uint64_t v25 = *a3 + *a4 * v11 + v10 + v24;
    uint64_t v26 = a4[2];
    uint64_t v27 = a7[2] + v23 * v15 + 2 * v14;
    uint64_t v28 = *a7 + v22 * v15 + 2 * v14;
    uint64_t v29 = a3[2] + v26 * v11 + v10;
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v29 + i) | (*(unsigned __int8 *)(v29 + i) << 8);
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v25 + i) << 8;
        }
      }
      v25 += v21;
      v28 += v22;
      v29 += v26;
      v27 += v23;
      ++v20;
    }
    while (v20 != v19);
  }
  uint64_t v31 = v8 & 1;
  unint64_t v32 = (v19 - v31) >> 1;
  if (v19 >> 1 < v32) {
    unint64_t v32 = v19 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v18 >> 1;
  uint64_t v35 = v9 & 1;
  if (v18 >> 1 >= (v18 - v35) >> 1) {
    unint64_t v34 = (v18 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      uint64_t v36 = v13 + 2;
      __int16 v43 = v13[1] << 8;
      *uint64_t v17 = *v13 << 8;
      v17[1] = v43;
      unsigned int v37 = v17 + 2;
      if (v34)
      {
LABEL_21:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          __int16 v39 = *v36;
          __int16 v40 = v36[1];
          v36 += 2;
          *unsigned int v37 = v39 << 8;
          v37[1] = v40 << 8;
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v36 = v13;
      unsigned int v37 = v17;
      if (v34) {
        goto LABEL_21;
      }
    }
    uint64_t v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v18)
    {
      __int16 v44 = *v36 << 8;
      __int16 v45 = v36[1] << 8;
      *unsigned int v37 = v44;
      v37[1] = v45;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      unsigned int v47 = v13;
      __int16 v48 = v17;
      if (v33)
      {
        unsigned int v47 = v13 + 2;
        __int16 v49 = *v13 << 8;
        __int16 v50 = v13[1] << 8;
        *uint64_t v17 = v49;
        v17[1] = v50;
        unsigned int v51 = (_WORD *)((char *)v17 + v16);
        *unsigned int v51 = v49;
        v51[1] = v50;
        __int16 v48 = v17 + 2;
      }
      if (v34)
      {
        uint64_t v52 = -(uint64_t)v34;
        do
        {
          __int16 v53 = *v47;
          __int16 v54 = v47[1];
          v47 += 2;
          v53 <<= 8;
          v54 <<= 8;
          _WORD *v48 = v53;
          v48[1] = v54;
          _OWORD v48[2] = v53;
          v48[3] = v54;
          BOOL v55 = (_WORD *)((char *)v48 + v16);
          _WORD *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          BOOL v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v18)
      {
        __int16 v56 = *v47 << 8;
        __int16 v57 = v47[1] << 8;
        _WORD *v48 = v56;
        v48[1] = v57;
        unsigned int v58 = (_WORD *)((char *)v48 + v16);
        *unsigned int v58 = v56;
        v58[1] = v57;
      }
      v13 += v12;
      v17 += v16;
    }
    uint64_t v59 = 2 * v32;
  }
  else
  {
    uint64_t v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v19)
  {
    if (v33)
    {
      __int16 v60 = *v13;
      __int16 v61 = v13[1];
      v13 += 2;
      *uint64_t v17 = v60 << 8;
      v17[1] = v61 << 8;
      v17 += 2;
    }
    if (v34)
    {
      uint64_t v62 = -(uint64_t)v34;
      do
      {
        __int16 v63 = *v13;
        __int16 v64 = v13[1];
        v13 += 2;
        *uint64_t v17 = v63 << 8;
        v17[1] = v64 << 8;
        v17 += 2;
        BOOL v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      uint64_t v65 = 2 * v34;
    }
    else
    {
      uint64_t v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v18)
    {
      __int16 v66 = *v13 << 8;
      __int16 v67 = v13[1] << 8;
      *uint64_t v17 = v66;
      v17[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_v0a8_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = *(void *)(a2 + 40);
  unint64_t v13 = v12 & 0xFFFFFFFE;
  unint64_t v14 = *(void *)(a2 + 24) + v12;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v17;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v9 + v8);
  unint64_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (v22 < v23) {
    unint64_t v23 = v22;
  }
  unint64_t v24 = v14 - v13 + (v14 & 1);
  if (v24 >= *(void *)(a6 + 24)) {
    unint64_t v24 = *(void *)(a6 + 24);
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    if (v13 >= v12) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = *a3 + *a4 * v13 + v10 + v29;
    uint64_t v31 = a7[2] + v28 * v18;
    uint64_t v32 = *a7 + v27 * v18;
    uint64_t v33 = a4[2];
    uint64_t v34 = v31 + v19;
    uint64_t v35 = v32 + v19;
    uint64_t v36 = a3[2] + v33 * v13 + v10;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v34 + 2 * i) = *(unsigned __int8 *)(v36 + i) | (*(unsigned __int8 *)(v36 + i) << 8);
          *(_WORD *)(v35 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v26;
      v35 += v27;
      v36 += v33;
      v34 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v38 = v12 & 1;
  if (v24 >> 1 >= (v24 - v38) >> 1) {
    unint64_t v39 = (v24 - (v12 & 1)) >> 1;
  }
  else {
    unint64_t v39 = v24 >> 1;
  }
  char v40 = v8;
  unint64_t v41 = v23 >> 1;
  unint64_t v42 = (v23 - v9) >> 1;
  if (v41 >= v42) {
    unint64_t v41 = v42;
  }
  if (v12)
  {
    if (v40)
    {
      __int16 v43 = v16 + 2;
      __int16 v45 = v16[1] << 8;
      *uint64_t v21 = *v16 << 8;
      v21[1] = v45;
      __int16 v44 = v21 + 2;
      if (!v41)
      {
LABEL_27:
        v16 += v15;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_28;
      }
    }
    else
    {
      __int16 v43 = v16;
      __int16 v44 = v21;
      if (!v41) {
        goto LABEL_27;
      }
    }
    uint64_t v46 = -(uint64_t)v41;
    do
    {
      __int16 v47 = v43[1] << 8;
      *__int16 v44 = *v43 << 8;
      v44[1] = v47;
      v43 += 2;
      v44 += 2;
      BOOL v48 = __CFADD__(v46++, 1);
    }
    while (!v48);
    goto LABEL_27;
  }
LABEL_28:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      __int16 v50 = v16;
      unsigned int v51 = v21;
      if (v40)
      {
        __int16 v50 = v16 + 2;
        __int16 v52 = v16[1] << 8;
        *uint64_t v21 = *v16 << 8;
        v21[1] = v52;
        unsigned int v51 = v21 + 2;
      }
      if (v41)
      {
        uint64_t v53 = -(uint64_t)v41;
        do
        {
          __int16 v54 = *v50 << 8;
          __int16 v55 = v50[1] << 8;
          *unsigned int v51 = v54;
          v51[1] = v55;
          __int16 v56 = (_WORD *)((char *)v51 + v20);
          *__int16 v56 = v54;
          v56[1] = v55;
          v51 += 2;
          v50 += 2;
          BOOL v48 = __CFADD__(v53++, 1);
        }
        while (!v48);
      }
      v16 += v15;
      v21 += v20;
    }
    uint64_t v57 = 2 * v39;
  }
  else
  {
    uint64_t v57 = 0;
  }
  if ((v57 | (unint64_t)v38) < v24)
  {
    if (v40)
    {
      __int16 v58 = *v16;
      __int16 v59 = v16[1];
      v16 += 2;
      *uint64_t v21 = v58 << 8;
      v21[1] = v59 << 8;
      v21 += 2;
    }
    if (v41)
    {
      uint64_t v60 = -(uint64_t)v41;
      do
      {
        __int16 v61 = v16[1] << 8;
        *uint64_t v21 = *v16 << 8;
        v21[1] = v61;
        v16 += 2;
        v21 += 2;
        BOOL v48 = __CFADD__(v60++, 1);
      }
      while (!v48);
    }
  }
  return 0;
}

uint64_t vt_Copy_v0a8_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = v9 & 0xFFFFFFFE;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * (v8 >> 1) + v10);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  unint64_t v18 = a2[2] + v9 - v10 + ((a2[2] + v9) & 1);
  if (v18 >= a6[2]) {
    unint64_t v18 = a6[2];
  }
  unint64_t v19 = a2[3] + v8 - v11 + ((a2[3] + v8) & 1);
  if (v19 >= a6[3]) {
    unint64_t v19 = a6[3];
  }
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = a8[2];
    if (v11 >= v8) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = *a4;
    }
    uint64_t v25 = *a3 + *a4 * v11 + v10 + v24;
    uint64_t v26 = a4[2];
    uint64_t v27 = a7[2] + v23 * v15 + 2 * v14;
    uint64_t v28 = *a7 + v22 * v15 + 2 * v14;
    uint64_t v29 = a3[2] + v26 * v11 + v10;
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v29 + i) | (*(unsigned __int8 *)(v29 + i) << 8);
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v25 + i) << 8;
        }
      }
      v25 += v21;
      v28 += v22;
      v29 += v26;
      v27 += v23;
      ++v20;
    }
    while (v20 != v19);
  }
  uint64_t v31 = v8 & 1;
  unint64_t v32 = (v19 - v31) >> 1;
  if (v19 >> 1 < v32) {
    unint64_t v32 = v19 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v18 >> 1;
  uint64_t v35 = v9 & 1;
  if (v18 >> 1 >= (v18 - v35) >> 1) {
    unint64_t v34 = (v18 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      uint64_t v36 = v13 + 2;
      __int16 v43 = v13[1] << 8;
      *uint64_t v17 = *v13 << 8;
      v17[1] = v43;
      unsigned int v37 = v17 + 2;
      if (v34)
      {
LABEL_21:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          __int16 v39 = *v36;
          __int16 v40 = v36[1];
          v36 += 2;
          *unsigned int v37 = v39 << 8;
          v37[1] = v40 << 8;
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v36 = v13;
      unsigned int v37 = v17;
      if (v34) {
        goto LABEL_21;
      }
    }
    uint64_t v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v18)
    {
      __int16 v44 = *v36 << 8;
      __int16 v45 = v36[1] << 8;
      *unsigned int v37 = v44;
      v37[1] = v45;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      __int16 v47 = v13;
      BOOL v48 = v17;
      if (v33)
      {
        __int16 v47 = v13 + 2;
        __int16 v49 = *v13 << 8;
        __int16 v50 = v13[1] << 8;
        *uint64_t v17 = v49;
        v17[1] = v50;
        unsigned int v51 = (_WORD *)((char *)v17 + v16);
        *unsigned int v51 = v49;
        v51[1] = v50;
        BOOL v48 = v17 + 2;
      }
      if (v34)
      {
        uint64_t v52 = -(uint64_t)v34;
        do
        {
          __int16 v53 = *v47;
          __int16 v54 = v47[1];
          v47 += 2;
          v53 <<= 8;
          v54 <<= 8;
          _WORD *v48 = v53;
          v48[1] = v54;
          _OWORD v48[2] = v53;
          v48[3] = v54;
          __int16 v55 = (_WORD *)((char *)v48 + v16);
          _WORD *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          BOOL v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v18)
      {
        __int16 v56 = *v47 << 8;
        __int16 v57 = v47[1] << 8;
        _WORD *v48 = v56;
        v48[1] = v57;
        __int16 v58 = (_WORD *)((char *)v48 + v16);
        *__int16 v58 = v56;
        v58[1] = v57;
      }
      v13 += v12;
      v17 += v16;
    }
    uint64_t v59 = 2 * v32;
  }
  else
  {
    uint64_t v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v19)
  {
    if (v33)
    {
      __int16 v60 = *v13;
      __int16 v61 = v13[1];
      v13 += 2;
      *uint64_t v17 = v60 << 8;
      v17[1] = v61 << 8;
      v17 += 2;
    }
    if (v34)
    {
      uint64_t v62 = -(uint64_t)v34;
      do
      {
        __int16 v63 = *v13;
        __int16 v64 = v13[1];
        v13 += 2;
        *uint64_t v17 = v63 << 8;
        v17[1] = v64 << 8;
        v17 += 2;
        BOOL v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      uint64_t v65 = 2 * v34;
    }
    else
    {
      uint64_t v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v18)
    {
      __int16 v66 = *v13 << 8;
      __int16 v67 = v13[1] << 8;
      *uint64_t v17 = v66;
      v17[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_v0a8_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = *(void *)(a2 + 40);
  unint64_t v13 = v12 & 0xFFFFFFFE;
  unint64_t v14 = *(void *)(a2 + 24) + v12;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v17;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v9 + v8);
  unint64_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (v22 < v23) {
    unint64_t v23 = v22;
  }
  unint64_t v24 = v14 - v13 + (v14 & 1);
  if (v24 >= *(void *)(a6 + 24)) {
    unint64_t v24 = *(void *)(a6 + 24);
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    if (v13 >= v12) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = *a3 + *a4 * v13 + v10 + v29;
    uint64_t v31 = a7[2] + v28 * v18;
    uint64_t v32 = *a7 + v27 * v18;
    uint64_t v33 = a4[2];
    uint64_t v34 = v31 + v19;
    uint64_t v35 = v32 + v19;
    uint64_t v36 = a3[2] + v33 * v13 + v10;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v34 + 2 * i) = *(unsigned __int8 *)(v36 + i) | (*(unsigned __int8 *)(v36 + i) << 8);
          *(_WORD *)(v35 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v26;
      v35 += v27;
      v36 += v33;
      v34 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v38 = v12 & 1;
  if (v24 >> 1 >= (v24 - v38) >> 1) {
    unint64_t v39 = (v24 - (v12 & 1)) >> 1;
  }
  else {
    unint64_t v39 = v24 >> 1;
  }
  char v40 = v8;
  unint64_t v41 = v23 >> 1;
  unint64_t v42 = (v23 - v9) >> 1;
  if (v41 >= v42) {
    unint64_t v41 = v42;
  }
  if (v12)
  {
    if (v40)
    {
      __int16 v43 = v16 + 2;
      __int16 v45 = v16[1] << 8;
      *uint64_t v21 = *v16 << 8;
      v21[1] = v45;
      __int16 v44 = v21 + 2;
      if (!v41)
      {
LABEL_27:
        v16 += v15;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_28;
      }
    }
    else
    {
      __int16 v43 = v16;
      __int16 v44 = v21;
      if (!v41) {
        goto LABEL_27;
      }
    }
    uint64_t v46 = -(uint64_t)v41;
    do
    {
      __int16 v47 = v43[1] << 8;
      *__int16 v44 = *v43 << 8;
      v44[1] = v47;
      v43 += 2;
      v44 += 2;
      BOOL v48 = __CFADD__(v46++, 1);
    }
    while (!v48);
    goto LABEL_27;
  }
LABEL_28:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      __int16 v50 = v16;
      unsigned int v51 = v21;
      if (v40)
      {
        __int16 v50 = v16 + 2;
        __int16 v52 = v16[1] << 8;
        *uint64_t v21 = *v16 << 8;
        v21[1] = v52;
        unsigned int v51 = v21 + 2;
      }
      if (v41)
      {
        uint64_t v53 = -(uint64_t)v41;
        do
        {
          __int16 v54 = *v50 << 8;
          __int16 v55 = v50[1] << 8;
          *unsigned int v51 = v54;
          v51[1] = v55;
          __int16 v56 = (_WORD *)((char *)v51 + v20);
          *__int16 v56 = v54;
          v56[1] = v55;
          v51 += 2;
          v50 += 2;
          BOOL v48 = __CFADD__(v53++, 1);
        }
        while (!v48);
      }
      v16 += v15;
      v21 += v20;
    }
    uint64_t v57 = 2 * v39;
  }
  else
  {
    uint64_t v57 = 0;
  }
  if ((v57 | (unint64_t)v38) < v24)
  {
    if (v40)
    {
      __int16 v58 = *v16;
      __int16 v59 = v16[1];
      v16 += 2;
      *uint64_t v21 = v58 << 8;
      v21[1] = v59 << 8;
      v21 += 2;
    }
    if (v41)
    {
      uint64_t v60 = -(uint64_t)v41;
      do
      {
        __int16 v61 = v16[1] << 8;
        *uint64_t v21 = *v16 << 8;
        v21[1] = v61;
        v16 += 2;
        v21 += 2;
        BOOL v48 = __CFADD__(v60++, 1);
      }
      while (!v48);
    }
  }
  return 0;
}

uint64_t vt_Copy_v0a8_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = v9 & 0xFFFFFFFE;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int8 *)(a3[1] + v12 * (v8 >> 1) + v10);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  unint64_t v18 = a2[2] + v9 - v10 + ((a2[2] + v9) & 1);
  if (v18 >= a6[2]) {
    unint64_t v18 = a6[2];
  }
  unint64_t v19 = a2[3] + v8 - v11 + ((a2[3] + v8) & 1);
  if (v19 >= a6[3]) {
    unint64_t v19 = a6[3];
  }
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = a8[2];
    if (v11 >= v8) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = *a4;
    }
    uint64_t v25 = *a3 + *a4 * v11 + v10 + v24;
    uint64_t v26 = a4[2];
    uint64_t v27 = a7[2] + v23 * v15 + 2 * v14;
    uint64_t v28 = *a7 + v22 * v15 + 2 * v14;
    uint64_t v29 = a3[2] + v26 * v11 + v10;
    do
    {
      if (v18)
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = *(unsigned __int8 *)(v29 + i) | (*(unsigned __int8 *)(v29 + i) << 8);
          *(_WORD *)(v28 + 2 * i) = *(unsigned __int8 *)(v25 + i) << 8;
        }
      }
      v25 += v21;
      v28 += v22;
      v29 += v26;
      v27 += v23;
      ++v20;
    }
    while (v20 != v19);
  }
  uint64_t v31 = v8 & 1;
  unint64_t v32 = (v19 - v31) >> 1;
  if (v19 >> 1 < v32) {
    unint64_t v32 = v19 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v18 >> 1;
  uint64_t v35 = v9 & 1;
  if (v18 >> 1 >= (v18 - v35) >> 1) {
    unint64_t v34 = (v18 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      uint64_t v36 = v13 + 2;
      __int16 v43 = v13[1] << 8;
      *uint64_t v17 = *v13 << 8;
      v17[1] = v43;
      unsigned int v37 = v17 + 2;
      if (v34)
      {
LABEL_21:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          __int16 v39 = *v36;
          __int16 v40 = v36[1];
          v36 += 2;
          *unsigned int v37 = v39 << 8;
          v37[1] = v40 << 8;
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v36 = v13;
      unsigned int v37 = v17;
      if (v34) {
        goto LABEL_21;
      }
    }
    uint64_t v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v18)
    {
      __int16 v44 = *v36 << 8;
      __int16 v45 = v36[1] << 8;
      *unsigned int v37 = v44;
      v37[1] = v45;
    }
    v13 += v12;
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      __int16 v47 = v13;
      BOOL v48 = v17;
      if (v33)
      {
        __int16 v47 = v13 + 2;
        __int16 v49 = *v13 << 8;
        __int16 v50 = v13[1] << 8;
        *uint64_t v17 = v49;
        v17[1] = v50;
        unsigned int v51 = (_WORD *)((char *)v17 + v16);
        *unsigned int v51 = v49;
        v51[1] = v50;
        BOOL v48 = v17 + 2;
      }
      if (v34)
      {
        uint64_t v52 = -(uint64_t)v34;
        do
        {
          __int16 v53 = *v47;
          __int16 v54 = v47[1];
          v47 += 2;
          v53 <<= 8;
          v54 <<= 8;
          _WORD *v48 = v53;
          v48[1] = v54;
          _OWORD v48[2] = v53;
          v48[3] = v54;
          __int16 v55 = (_WORD *)((char *)v48 + v16);
          _WORD *v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v48 += 4;
          BOOL v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v18)
      {
        __int16 v56 = *v47 << 8;
        __int16 v57 = v47[1] << 8;
        _WORD *v48 = v56;
        v48[1] = v57;
        __int16 v58 = (_WORD *)((char *)v48 + v16);
        *__int16 v58 = v56;
        v58[1] = v57;
      }
      v13 += v12;
      v17 += v16;
    }
    uint64_t v59 = 2 * v32;
  }
  else
  {
    uint64_t v59 = 0;
  }
  if ((v59 | (unint64_t)v31) < v19)
  {
    if (v33)
    {
      __int16 v60 = *v13;
      __int16 v61 = v13[1];
      v13 += 2;
      *uint64_t v17 = v60 << 8;
      v17[1] = v61 << 8;
      v17 += 2;
    }
    if (v34)
    {
      uint64_t v62 = -(uint64_t)v34;
      do
      {
        __int16 v63 = *v13;
        __int16 v64 = v13[1];
        v13 += 2;
        *uint64_t v17 = v63 << 8;
        v17[1] = v64 << 8;
        v17 += 2;
        BOOL v41 = __CFADD__(v62++, 1);
      }
      while (!v41);
      uint64_t v65 = 2 * v34;
    }
    else
    {
      uint64_t v65 = 0;
    }
    if ((v65 | (unint64_t)v35) < v18)
    {
      __int16 v66 = *v13 << 8;
      __int16 v67 = v13[1] << 8;
      *uint64_t v17 = v66;
      v17[1] = v67;
    }
  }
  return 0;
}

uint64_t vt_Copy_v0a8_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = *(void *)(a2 + 40);
  unint64_t v13 = v12 & 0xFFFFFFFE;
  unint64_t v14 = *(void *)(a2 + 24) + v12;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v12 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v17;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v9 + v8);
  unint64_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (v22 < v23) {
    unint64_t v23 = v22;
  }
  unint64_t v24 = v14 - v13 + (v14 & 1);
  if (v24 >= *(void *)(a6 + 24)) {
    unint64_t v24 = *(void *)(a6 + 24);
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    if (v13 >= v12) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = *a3 + *a4 * v13 + v10 + v29;
    uint64_t v31 = a7[2] + v28 * v18;
    uint64_t v32 = *a7 + v27 * v18;
    uint64_t v33 = a4[2];
    uint64_t v34 = v31 + v19;
    uint64_t v35 = v32 + v19;
    uint64_t v36 = a3[2] + v33 * v13 + v10;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v34 + 2 * i) = *(unsigned __int8 *)(v36 + i) | (*(unsigned __int8 *)(v36 + i) << 8);
          *(_WORD *)(v35 + 2 * i) = *(unsigned __int8 *)(v30 + i) << 8;
        }
      }
      v30 += v26;
      v35 += v27;
      v36 += v33;
      v34 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v38 = v12 & 1;
  if (v24 >> 1 >= (v24 - v38) >> 1) {
    unint64_t v39 = (v24 - (v12 & 1)) >> 1;
  }
  else {
    unint64_t v39 = v24 >> 1;
  }
  char v40 = v8;
  unint64_t v41 = v23 >> 1;
  unint64_t v42 = (v23 - v9) >> 1;
  if (v41 >= v42) {
    unint64_t v41 = v42;
  }
  if (v12)
  {
    if (v40)
    {
      __int16 v43 = v16 + 2;
      __int16 v45 = v16[1] << 8;
      *uint64_t v21 = *v16 << 8;
      v21[1] = v45;
      __int16 v44 = v21 + 2;
      if (!v41)
      {
LABEL_27:
        v16 += v15;
        uint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_28;
      }
    }
    else
    {
      __int16 v43 = v16;
      __int16 v44 = v21;
      if (!v41) {
        goto LABEL_27;
      }
    }
    uint64_t v46 = -(uint64_t)v41;
    do
    {
      __int16 v47 = v43[1] << 8;
      *__int16 v44 = *v43 << 8;
      v44[1] = v47;
      v43 += 2;
      v44 += 2;
      BOOL v48 = __CFADD__(v46++, 1);
    }
    while (!v48);
    goto LABEL_27;
  }
LABEL_28:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      __int16 v50 = v16;
      unsigned int v51 = v21;
      if (v40)
      {
        __int16 v50 = v16 + 2;
        __int16 v52 = v16[1] << 8;
        *uint64_t v21 = *v16 << 8;
        v21[1] = v52;
        unsigned int v51 = v21 + 2;
      }
      if (v41)
      {
        uint64_t v53 = -(uint64_t)v41;
        do
        {
          __int16 v54 = *v50 << 8;
          __int16 v55 = v50[1] << 8;
          *unsigned int v51 = v54;
          v51[1] = v55;
          __int16 v56 = (_WORD *)((char *)v51 + v20);
          *__int16 v56 = v54;
          v56[1] = v55;
          v51 += 2;
          v50 += 2;
          BOOL v48 = __CFADD__(v53++, 1);
        }
        while (!v48);
      }
      v16 += v15;
      v21 += v20;
    }
    uint64_t v57 = 2 * v39;
  }
  else
  {
    uint64_t v57 = 0;
  }
  if ((v57 | (unint64_t)v38) < v24)
  {
    if (v40)
    {
      __int16 v58 = *v16;
      __int16 v59 = v16[1];
      v16 += 2;
      *uint64_t v21 = v58 << 8;
      v21[1] = v59 << 8;
      v21 += 2;
    }
    if (v41)
    {
      uint64_t v60 = -(uint64_t)v41;
      do
      {
        __int16 v61 = v16[1] << 8;
        *uint64_t v21 = *v16 << 8;
        v21[1] = v61;
        v16 += 2;
        v21 += 2;
        BOOL v48 = __CFADD__(v60++, 1);
      }
      while (!v48);
    }
  }
  return 0;
}

uint64_t vt_Copy_v0a8_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  uint64_t v10 = v8 & 0xFFFFFFFE;
  unint64_t v11 = v9 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v9;
  uint64_t v13 = a4[1];
  unint64_t v14 = (char *)(a3[1] + v13 * (v9 >> 1) + v10);
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v18 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = a7[1] + v19 * v16 + 2 * v15;
  if (a2[2] + v8 - v10 + ((a2[2] + v8) & 1uLL) >= v17) {
    size_t v21 = v17;
  }
  else {
    size_t v21 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (v12 - v11 + (v12 & 1) >= v18) {
    unint64_t v22 = v18;
  }
  else {
    unint64_t v22 = v12 - v11 + (v12 & 1);
  }
  if (v22)
  {
    uint64_t v60 = a8[1];
    uint64_t v64 = *a4;
    if (v11 >= v9) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = *a4;
    }
    unint64_t v24 = (char *)(*a3 + *a4 * v11 + v10 + v23);
    uint64_t v62 = a4[1];
    uint64_t v63 = a8[2];
    uint64_t v25 = (char *)(a7[2] + v63 * v16 + v15);
    uint64_t v26 = *a8;
    uint64_t v27 = (char *)(*a7 + *a8 * v16 + v15);
    uint64_t v28 = a4[2];
    uint64_t v29 = (char *)(a3[2] + v28 * v11 + v10);
    unint64_t v61 = v22;
    uint64_t v30 = -(uint64_t)v22;
    do
    {
      memcpy(v27, v24, v21);
      memcpy(v25, v29, v21);
      v24 += v64;
      v27 += v26;
      v29 += v28;
      v25 += v63;
      BOOL v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    uint64_t v19 = v60;
    uint64_t v8 = a2[4];
    unint64_t v9 = a2[5];
    unint64_t v22 = v61;
    uint64_t v13 = v62;
  }
  uint64_t v32 = v9 & 1;
  unint64_t v33 = (v22 - v32) >> 1;
  if (v22 >> 1 < v33) {
    unint64_t v33 = v22 >> 1;
  }
  char v34 = v8;
  size_t v35 = v21 >> 1;
  uint64_t v36 = v8 & 1;
  if (v21 >> 1 >= (v21 - v36) >> 1) {
    size_t v35 = (v21 - v36) >> 1;
  }
  if (v9)
  {
    unsigned int v37 = (__int16 *)v14;
    if (v34)
    {
      unsigned int v37 = (__int16 *)(v14 + 2);
      *(_WORD *)uint64_t v20 = *(_WORD *)v14;
      uint64_t v38 = (_WORD *)(v20 + 2);
      if (v35)
      {
LABEL_22:
        uint64_t v39 = -(uint64_t)v35;
        do
        {
          __int16 v40 = *v37++;
          *v38++ = v40;
          BOOL v31 = __CFADD__(v39++, 1);
        }
        while (!v31);
        uint64_t v41 = 2 * v35;
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v38 = (_WORD *)v20;
      if (v35) {
        goto LABEL_22;
      }
    }
    uint64_t v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v36) < v21) {
      _WORD *v38 = *v37;
    }
    v14 += v13;
    v20 += v19;
  }
  if (v33)
  {
    for (uint64_t i = 0; i != v33; ++i)
    {
      __int16 v43 = v14;
      __int16 v44 = (unsigned char *)v20;
      if (v34)
      {
        char v45 = *v14;
        char v46 = v14[1];
        __int16 v43 = v14 + 2;
        *(unsigned char *)uint64_t v20 = *v14;
        *(unsigned char *)(v20 + 1) = v46;
        __int16 v47 = (unsigned char *)(v20 + v19);
        *__int16 v47 = v45;
        v47[1] = v46;
        __int16 v44 = (unsigned char *)(v20 + 2);
      }
      if (v35)
      {
        uint64_t v48 = -(uint64_t)v35;
        do
        {
          char v49 = *v43;
          char v50 = v43[1];
          v43 += 2;
          *__int16 v44 = v49;
          v44[1] = v50;
          _OWORD v44[2] = v49;
          v44[3] = v50;
          unsigned int v51 = &v44[v19 + 1];
          *(v51 - 1) = v49;
          *unsigned int v51 = v50;
          v51[1] = v49;
          v51[2] = v50;
          v44 += 4;
          BOOL v31 = __CFADD__(v48++, 1);
        }
        while (!v31);
      }
      if ((v36 | (2 * v35)) < v21)
      {
        char v52 = *v43;
        char v53 = v43[1];
        *__int16 v44 = v52;
        v44[1] = v53;
        __int16 v54 = &v44[v19];
        unsigned char *v54 = v52;
        v54[1] = v53;
      }
      v14 += v13;
      v20 += 2 * v19;
    }
    v33 *= 2;
  }
  if ((v33 | v32) < v22)
  {
    if (v34)
    {
      __int16 v55 = *(_WORD *)v14;
      v14 += 2;
      *(_WORD *)uint64_t v20 = v55;
      v20 += 2;
    }
    if (v35)
    {
      uint64_t v56 = -(uint64_t)v35;
      do
      {
        __int16 v57 = *(_WORD *)v14;
        v14 += 2;
        *(_WORD *)uint64_t v20 = v57;
        v20 += 2;
        BOOL v31 = __CFADD__(v56++, 1);
      }
      while (!v31);
      v35 *= 2;
    }
    if ((v35 | v36) < v21) {
      *(_WORD *)uint64_t v20 = *(_WORD *)v14;
    }
  }
  return 0;
}

uint64_t vt_Copy_v0a8_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (__int16 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (__int16 *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v17 - v16) {
    size_t v21 = v17 - v16;
  }
  else {
    size_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (v13 - v12 + (v13 & 1) >= *(void *)(a6 + 24)) {
    unint64_t v22 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v22 = v13 - v12 + (v13 & 1);
  }
  if (v22)
  {
    uint64_t v54 = *a8;
    uint64_t v55 = *a4;
    if (v12 >= v11) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = *a4;
    }
    unint64_t v24 = (char *)(*a3 + *a4 * v12 + v10 + v23);
    uint64_t v52 = a4[1];
    uint64_t v53 = a8[2];
    uint64_t v25 = (char *)(a7[2] + v53 * v18 + v16);
    uint64_t v26 = (char *)(*a7 + *a8 * v18 + v16);
    uint64_t v27 = a4[2];
    uint64_t v28 = (char *)(a3[2] + v27 * v12 + v10);
    unint64_t v51 = v22;
    uint64_t v29 = -(uint64_t)v22;
    do
    {
      memcpy(v26, v24, v21);
      memcpy(v25, v28, v21);
      v24 += v55;
      v26 += v54;
      v28 += v27;
      v25 += v53;
      BOOL v30 = __CFADD__(v29++, 1);
    }
    while (!v30);
    unint64_t v22 = v51;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
    uint64_t v14 = v52;
  }
  uint64_t v31 = v11 & 1;
  if (v22 >> 1 >= (v22 - v31) >> 1) {
    unint64_t v32 = (v22 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v8;
  size_t v34 = v21 >> 1;
  if (v21 >> 1 >= (v21 - v9) >> 1) {
    size_t v34 = (v21 - v9) >> 1;
  }
  if (v11)
  {
    size_t v35 = v15;
    if (v33)
    {
      size_t v35 = v15 + 1;
      *uint64_t v20 = *v15;
      uint64_t v36 = v20 + 1;
      if (!v34)
      {
LABEL_28:
        uint64_t v15 = (__int16 *)((char *)v15 + v14);
        uint64_t v20 = (__int16 *)((char *)v20 + v19);
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v36 = v20;
      if (!v34) {
        goto LABEL_28;
      }
    }
    uint64_t v37 = -(uint64_t)v34;
    do
    {
      __int16 v38 = *v35++;
      *v36++ = v38;
      BOOL v30 = __CFADD__(v37++, 1);
    }
    while (!v30);
    goto LABEL_28;
  }
LABEL_29:
  if (v32)
  {
    for (uint64_t i = 0; i != v32; ++i)
    {
      __int16 v40 = (char *)v15;
      uint64_t v41 = (char *)v20;
      if (v33)
      {
        __int16 v40 = (char *)(v15 + 1);
        *uint64_t v20 = *v15;
        uint64_t v41 = (char *)(v20 + 1);
      }
      if (v34)
      {
        uint64_t v42 = -(uint64_t)v34;
        do
        {
          char v43 = *v40;
          char v44 = v40[1];
          *uint64_t v41 = *v40;
          v41[1] = v44;
          char v45 = &v41[v19];
          char *v45 = v43;
          v45[1] = v44;
          v41 += 2;
          v40 += 2;
          BOOL v30 = __CFADD__(v42++, 1);
        }
        while (!v30);
      }
      uint64_t v15 = (__int16 *)((char *)v15 + v14);
      v20 += v19;
    }
    v32 *= 2;
  }
  if ((v32 | v31) < v22)
  {
    if (v33)
    {
      __int16 v46 = *v15++;
      *v20++ = v46;
    }
    if (v34)
    {
      uint64_t v47 = -(uint64_t)v34;
      do
      {
        __int16 v48 = *v15++;
        *v20++ = v48;
        BOOL v30 = __CFADD__(v47++, 1);
      }
      while (!v30);
    }
  }
  return 0;
}

vImage_Error vt_VImage_Setup_420f_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D430;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage420Yp8_CbCr8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_420f_32BGRA;
  *a11 = vt_VImage_Cleanup_420f_32BGRA;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_420f_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D430;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage420Yp8_CbCr8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_420f_32ARGB;
  *a11 = vt_VImage_Cleanup_420f_32ARGB;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_420f_2vuy(unint64_t a1, unint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = *a5;
    unint64_t v10 = a2 >> 1;
    uint64_t v11 = a1 >> 1;
    unint64_t v12 = (unsigned char *)*a6;
    uint64_t v13 = 2 * *a3;
    uint64_t v14 = (unsigned __int8 *)a4[1];
    uint64_t v15 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v16 = *a4 + 1;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v17 = (unsigned __int8 *)v16;
        uint64_t v18 = v11;
        uint64_t v19 = v12;
        uint64_t v20 = v14;
        do
        {
          int v21 = &v17[v7];
          unint64_t v22 = &v19[v9];
          uint64_t v23 = v20[1];
          uint64_t v24 = *(v17 - 1);
          int v25 = *v17;
          v17 += 2;
          char v26 = sChromaTableFtoV[*v20];
          *uint64_t v19 = v26;
          v19[1] = sLumaTableFtoV[v24];
          LOBYTE(v23) = sChromaTableFtoV[v23];
          v19[2] = v23;
          void v19[3] = sLumaTableFtoV[v25];
          uint64_t v27 = *(v21 - 1);
          uint64_t v28 = *v21;
          unsigned char *v22 = v26;
          v22[1] = sLumaTableFtoV[v27];
          v22[2] = v23;
          void v22[3] = sLumaTableFtoV[v28];
          v19 += 4;
          v20 += 2;
          --v18;
        }
        while (v18);
      }
      v14 += v8;
      v12 += v15;
      ++v6;
      v16 += v13;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_420f_yuvs(unint64_t a1, unint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = *a5;
    unint64_t v10 = a2 >> 1;
    uint64_t v11 = a1 >> 1;
    unint64_t v12 = (unsigned char *)*a6;
    uint64_t v13 = 2 * *a3;
    uint64_t v14 = (unsigned __int8 *)a4[1];
    uint64_t v15 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v16 = *a4 + 1;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v17 = (unsigned __int8 *)v16;
        uint64_t v18 = v11;
        uint64_t v19 = v12;
        uint64_t v20 = v14;
        do
        {
          int v21 = &v17[v7];
          unint64_t v22 = &v19[v9];
          uint64_t v23 = *v20;
          uint64_t v24 = v20[1];
          uint64_t v25 = *(v17 - 1);
          int v26 = *v17;
          v17 += 2;
          *uint64_t v19 = sLumaTableFtoV[v25];
          LOBYTE(v23) = sChromaTableFtoV[v23];
          v19[1] = v23;
          v19[2] = sLumaTableFtoV[v26];
          LOBYTE(v24) = sChromaTableFtoV[v24];
          void v19[3] = v24;
          uint64_t v27 = *(v21 - 1);
          uint64_t v28 = *v21;
          unsigned char *v22 = sLumaTableFtoV[v27];
          v22[1] = v23;
          v22[2] = sLumaTableFtoV[v28];
          void v22[3] = v24;
          v19 += 4;
          v20 += 2;
          --v18;
        }
        while (v18);
      }
      v14 += v8;
      v12 += v15;
      ++v6;
      v16 += v13;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_420f_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  unint64_t v10 = v8 & 0xFFFFFFFE;
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int8 *)(a3[1] + v11 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v14 + 2 * v13);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  unint64_t v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15) {
    unint64_t v20 = v15;
  }
  if (v20)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = *a3 + *a4 * v10;
    if (v10 >= v8) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = v25 + (a2[4] & 0xFFFFFFFELL) + v26;
    uint64_t v28 = a7[2] + v24 * v14 + v13;
    uint64_t v29 = *a7 + v23 * v14 + v13;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v28 + i) = -1;
          *(unsigned char *)(v29 + i) = ((7204443 * *(unsigned __int8 *)(v27 + i)) >> 23) + 16;
        }
      }
      v27 += v22;
      v29 += v23;
      v28 += v24;
      ++v21;
    }
    while (v21 != v20);
    uint64_t v9 = a2[4];
    unint64_t v8 = a2[5];
  }
  unint64_t v31 = (v20 - (v8 & 1)) >> 1;
  if (v20 >> 1 < v31) {
    unint64_t v31 = v20 >> 1;
  }
  char v32 = v9;
  unint64_t v33 = v19 >> 1;
  uint64_t v34 = v9 & 1;
  if (v19 >> 1 >= (v19 - v34) >> 1) {
    unint64_t v33 = (v19 - v34) >> 1;
  }
  if (v8)
  {
    if (v32)
    {
      size_t v35 = v12 + 2;
      unsigned int v42 = (7368928 * v12[1]) >> 23;
      unsigned char *v18 = ((7368928 * *v12) >> 23) + 16;
      v18[1] = v42 + 16;
      uint64_t v36 = v18 + 2;
      if (v33)
      {
LABEL_22:
        uint64_t v37 = -(uint64_t)v33;
        do
        {
          int v38 = *v35;
          int v39 = v35[1];
          v35 += 2;
          unsigned char *v36 = ((7368928 * v38) >> 23) + 16;
          v36[1] = ((7368928 * v39) >> 23) + 16;
          v36 += 2;
          BOOL v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        uint64_t v41 = 2 * v33;
        goto LABEL_28;
      }
    }
    else
    {
      size_t v35 = v12;
      uint64_t v36 = v18;
      if (v33) {
        goto LABEL_22;
      }
    }
    uint64_t v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v34) < v19)
    {
      int v43 = *v35;
      unsigned int v44 = (7368928 * v35[1]) >> 23;
      unsigned char *v36 = ((7368928 * v43) >> 23) + 16;
      v36[1] = v44 + 16;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v31)
  {
    for (uint64_t j = 0; j != v31; ++j)
    {
      __int16 v46 = v12;
      uint64_t v47 = v18;
      if (v32)
      {
        __int16 v46 = v12 + 2;
        unsigned int v48 = (7368928 * v12[1]) >> 23;
        char v49 = ((7368928 * *v12) >> 23) + 16;
        unsigned char *v18 = v49;
        LOBYTE(v48) = v48 + 16;
        v18[1] = v48;
        char v50 = &v18[v17];
        *char v50 = v49;
        v50[1] = v48;
        uint64_t v47 = v18 + 2;
      }
      if (v33)
      {
        uint64_t v51 = -(uint64_t)v33;
        do
        {
          int v52 = v46[1];
          unsigned int v53 = ((7368928 * *v46) >> 23) + 16;
          *uint64_t v47 = ((7368928 * *v46) >> 23) + 16;
          unsigned int v54 = ((7368928 * v52) >> 23) + 16;
          v47[1] = v54;
          v46 += 2;
          _OWORD v47[2] = v53;
          v47[3] = v54;
          uint64_t v55 = &v47[v17 + 1];
          *(v55 - 1) = v53;
          unsigned char *v55 = v54;
          v55[1] = v53;
          v55[2] = v54;
          v47 += 4;
          BOOL v40 = __CFADD__(v51++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v19)
      {
        int v56 = *v46;
        unsigned int v57 = (7368928 * v46[1]) >> 23;
        unsigned int v58 = ((7368928 * v56) >> 23) + 16;
        *uint64_t v47 = v58;
        LOBYTE(v57) = v57 + 16;
        v47[1] = v57;
        __int16 v59 = &v47[v17];
        unsigned char *v59 = v58;
        v59[1] = v57;
      }
      v12 += v11;
      v18 += 2 * v17;
    }
    uint64_t v60 = 2 * v31;
  }
  else
  {
    uint64_t v60 = 0;
  }
  if ((v60 | v8 & 1) < v20)
  {
    if (v32)
    {
      int v61 = *v12;
      int v62 = v12[1];
      v12 += 2;
      unsigned char *v18 = ((7368928 * v61) >> 23) + 16;
      v18[1] = ((7368928 * v62) >> 23) + 16;
      v18 += 2;
    }
    if (v33)
    {
      uint64_t v63 = -(uint64_t)v33;
      do
      {
        int v64 = *v12;
        int v65 = v12[1];
        v12 += 2;
        unsigned char *v18 = ((7368928 * v64) >> 23) + 16;
        v18[1] = ((7368928 * v65) >> 23) + 16;
        v18 += 2;
        BOOL v40 = __CFADD__(v63++, 1);
      }
      while (!v40);
      uint64_t v66 = 2 * v33;
    }
    else
    {
      uint64_t v66 = 0;
    }
    if ((v66 | (unint64_t)v34) < v19)
    {
      int v67 = *v12;
      unsigned int v68 = (7368928 * v12[1]) >> 23;
      unsigned char *v18 = ((7368928 * v67) >> 23) + 16;
      v18[1] = v68 + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  unint64_t v10 = v8 & 0xFFFFFFFE;
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int8 *)(a3[1] + v11 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v14 + 2 * v13);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  unint64_t v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15) {
    unint64_t v20 = v15;
  }
  if (v20)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = *a3 + *a4 * v10;
    if (v10 >= v8) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = *a4;
    }
    uint64_t v26 = v24 + (a2[4] & 0xFFFFFFFELL) + v25;
    uint64_t v27 = *a7 + v23 * v14 + v13;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
          *(unsigned char *)(v27 + i) = ((7204443 * *(unsigned __int8 *)(v26 + i)) >> 23) + 16;
      }
      v26 += v22;
      v27 += v23;
      ++v21;
    }
    while (v21 != v20);
    uint64_t v9 = a2[4];
    unint64_t v8 = a2[5];
  }
  unint64_t v29 = (v20 - (v8 & 1)) >> 1;
  if (v20 >> 1 < v29) {
    unint64_t v29 = v20 >> 1;
  }
  char v30 = v9;
  unint64_t v31 = v19 >> 1;
  uint64_t v32 = v9 & 1;
  if (v19 >> 1 >= (v19 - v32) >> 1) {
    unint64_t v31 = (v19 - v32) >> 1;
  }
  if (v8)
  {
    if (v30)
    {
      unint64_t v33 = v12 + 2;
      unsigned int v40 = (7368928 * v12[1]) >> 23;
      unsigned char *v18 = ((7368928 * *v12) >> 23) + 16;
      v18[1] = v40 + 16;
      uint64_t v34 = v18 + 2;
      if (v31)
      {
LABEL_22:
        uint64_t v35 = -(uint64_t)v31;
        do
        {
          int v36 = *v33;
          int v37 = v33[1];
          v33 += 2;
          *uint64_t v34 = ((7368928 * v36) >> 23) + 16;
          v34[1] = ((7368928 * v37) >> 23) + 16;
          v34 += 2;
          BOOL v38 = __CFADD__(v35++, 1);
        }
        while (!v38);
        uint64_t v39 = 2 * v31;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v33 = v12;
      uint64_t v34 = v18;
      if (v31) {
        goto LABEL_22;
      }
    }
    uint64_t v39 = 0;
LABEL_28:
    if ((v39 | (unint64_t)v32) < v19)
    {
      int v41 = *v33;
      unsigned int v42 = (7368928 * v33[1]) >> 23;
      *uint64_t v34 = ((7368928 * v41) >> 23) + 16;
      v34[1] = v42 + 16;
    }
    v12 += v11;
    v18 += v17;
  }
  if (v29)
  {
    for (uint64_t j = 0; j != v29; ++j)
    {
      unsigned int v44 = v12;
      char v45 = v18;
      if (v30)
      {
        unsigned int v44 = v12 + 2;
        unsigned int v46 = (7368928 * v12[1]) >> 23;
        char v47 = ((7368928 * *v12) >> 23) + 16;
        unsigned char *v18 = v47;
        LOBYTE(v46) = v46 + 16;
        v18[1] = v46;
        unsigned int v48 = &v18[v17];
        unsigned char *v48 = v47;
        v48[1] = v46;
        char v45 = v18 + 2;
      }
      if (v31)
      {
        uint64_t v49 = -(uint64_t)v31;
        do
        {
          int v50 = v44[1];
          unsigned int v51 = ((7368928 * *v44) >> 23) + 16;
          unsigned char *v45 = ((7368928 * *v44) >> 23) + 16;
          unsigned int v52 = ((7368928 * v50) >> 23) + 16;
          v45[1] = v52;
          v44 += 2;
          v45[2] = v51;
          v45[3] = v52;
          unsigned int v53 = &v45[v17 + 1];
          *(v53 - 1) = v51;
          *unsigned int v53 = v52;
          v53[1] = v51;
          v53[2] = v52;
          v45 += 4;
          BOOL v38 = __CFADD__(v49++, 1);
        }
        while (!v38);
      }
      if ((v32 | (2 * v31)) < v19)
      {
        int v54 = *v44;
        unsigned int v55 = (7368928 * v44[1]) >> 23;
        unsigned int v56 = ((7368928 * v54) >> 23) + 16;
        unsigned char *v45 = v56;
        LOBYTE(v55) = v55 + 16;
        v45[1] = v55;
        unsigned int v57 = &v45[v17];
        *unsigned int v57 = v56;
        v57[1] = v55;
      }
      v12 += v11;
      v18 += 2 * v17;
    }
    uint64_t v58 = 2 * v29;
  }
  else
  {
    uint64_t v58 = 0;
  }
  if ((v58 | v8 & 1) < v20)
  {
    if (v30)
    {
      int v59 = *v12;
      int v60 = v12[1];
      v12 += 2;
      unsigned char *v18 = ((7368928 * v59) >> 23) + 16;
      v18[1] = ((7368928 * v60) >> 23) + 16;
      v18 += 2;
    }
    if (v31)
    {
      uint64_t v61 = -(uint64_t)v31;
      do
      {
        int v62 = *v12;
        int v63 = v12[1];
        v12 += 2;
        unsigned char *v18 = ((7368928 * v62) >> 23) + 16;
        v18[1] = ((7368928 * v63) >> 23) + 16;
        v18 += 2;
        BOOL v38 = __CFADD__(v61++, 1);
      }
      while (!v38);
      uint64_t v64 = 2 * v31;
    }
    else
    {
      uint64_t v64 = 0;
    }
    if ((v64 | (unint64_t)v32) < v19)
    {
      int v65 = *v12;
      unsigned int v66 = (7368928 * v12[1]) >> 23;
      unsigned char *v18 = ((7368928 * v65) >> 23) + 16;
      v18[1] = v66 + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  unint64_t v10 = v9 & 0xFFFFFFFE;
  unint64_t v11 = a2[3] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (char *)(a3[1] + v12 * (v9 >> 1) + (v8 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = a7[1] + v18 * v15 + 2 * v14;
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= v16) {
    size_t v20 = v16;
  }
  else {
    size_t v20 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (v11 - v10 + (v11 & 1) >= v17) {
    unint64_t v21 = v17;
  }
  else {
    unint64_t v21 = v11 - v10 + (v11 & 1);
  }
  if (v21)
  {
    unint64_t v58 = v21;
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = *a3 + *a4 * v10;
    if (v10 >= v9) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = *a4;
    }
    uint64_t v26 = (char *)(v24 + (a2[4] & 0xFFFFFFFELL) + v25);
    uint64_t v27 = (char *)(*a7 + v23 * v15 + v14);
    uint64_t v28 = -(uint64_t)v21;
    do
    {
      memcpy(v27, v26, v20);
      v26 += v22;
      v27 += v23;
      BOOL v29 = __CFADD__(v28++, 1);
    }
    while (!v29);
    unint64_t v21 = v58;
    uint64_t v8 = a2[4];
    unint64_t v9 = a2[5];
  }
  uint64_t v30 = v9 & 1;
  unint64_t v31 = (v21 - v30) >> 1;
  if (v21 >> 1 < v31) {
    unint64_t v31 = v21 >> 1;
  }
  char v32 = v8;
  size_t v33 = v20 >> 1;
  uint64_t v34 = v8 & 1;
  if (v20 >> 1 >= (v20 - v34) >> 1) {
    size_t v33 = (v20 - v34) >> 1;
  }
  if (v9)
  {
    uint64_t v35 = (__int16 *)v13;
    if (v32)
    {
      uint64_t v35 = (__int16 *)(v13 + 2);
      *(_WORD *)uint64_t v19 = *(_WORD *)v13;
      int v36 = (_WORD *)(v19 + 2);
      if (v33)
      {
LABEL_22:
        uint64_t v37 = -(uint64_t)v33;
        do
        {
          __int16 v38 = *v35++;
          *v36++ = v38;
          BOOL v29 = __CFADD__(v37++, 1);
        }
        while (!v29);
        uint64_t v39 = 2 * v33;
        goto LABEL_28;
      }
    }
    else
    {
      int v36 = (_WORD *)v19;
      if (v33) {
        goto LABEL_22;
      }
    }
    uint64_t v39 = 0;
LABEL_28:
    if ((v39 | (unint64_t)v34) < v20) {
      _WORD *v36 = *v35;
    }
    v13 += v12;
    v19 += v18;
  }
  if (v31)
  {
    for (uint64_t i = 0; i != v31; ++i)
    {
      int v41 = v13;
      unsigned int v42 = (unsigned char *)v19;
      if (v32)
      {
        char v43 = *v13;
        char v44 = v13[1];
        int v41 = v13 + 2;
        *(unsigned char *)uint64_t v19 = *v13;
        *(unsigned char *)(v19 + 1) = v44;
        char v45 = (unsigned char *)(v19 + v18);
        unsigned char *v45 = v43;
        v45[1] = v44;
        unsigned int v42 = (unsigned char *)(v19 + 2);
      }
      if (v33)
      {
        uint64_t v46 = -(uint64_t)v33;
        do
        {
          char v47 = *v41;
          char v48 = v41[1];
          v41 += 2;
          *unsigned int v42 = v47;
          v42[1] = v48;
          _OWORD v42[2] = v47;
          v42[3] = v48;
          uint64_t v49 = &v42[v18 + 1];
          *(v49 - 1) = v47;
          *uint64_t v49 = v48;
          v49[1] = v47;
          v49[2] = v48;
          v42 += 4;
          BOOL v29 = __CFADD__(v46++, 1);
        }
        while (!v29);
      }
      if ((v34 | (2 * v33)) < v20)
      {
        char v50 = *v41;
        char v51 = v41[1];
        *unsigned int v42 = v50;
        v42[1] = v51;
        unsigned int v52 = &v42[v18];
        *unsigned int v52 = v50;
        v52[1] = v51;
      }
      v13 += v12;
      v19 += 2 * v18;
    }
    v31 *= 2;
  }
  if ((v31 | v30) < v21)
  {
    if (v32)
    {
      __int16 v53 = *(_WORD *)v13;
      v13 += 2;
      *(_WORD *)uint64_t v19 = v53;
      v19 += 2;
    }
    if (v33)
    {
      uint64_t v54 = -(uint64_t)v33;
      do
      {
        __int16 v55 = *(_WORD *)v13;
        v13 += 2;
        *(_WORD *)uint64_t v19 = v55;
        v19 += 2;
        BOOL v29 = __CFADD__(v54++, 1);
      }
      while (!v29);
      v33 *= 2;
    }
    if ((v33 | v34) < v20) {
      *(_WORD *)uint64_t v19 = *(_WORD *)v13;
    }
  }
  return 0;
}