uint64_t vt_Copy_pf20ITU601_ARGB(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  _DWORD *v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  _DWORD *v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  char v57;
  BOOL v58;
  unsigned char *v59;
  char v60;
  _DWORD *v61;
  char v62;
  char v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned char *v71;
  char v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned char *v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  char v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  char v102;
  unsigned int v103;
  unint64_t v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned char *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  char v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  char v127;
  char v128;
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  char v145;
  char v146;
  char v147;
  unsigned int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  char v156;
  int v157;
  int v158;
  char v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  unint64_t v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  char v169;
  char v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  char v178;
  char v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  char v186;
  int v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  char v205;
  int v206;
  int v207;
  int v208;
  unsigned int v209;
  int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  char v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  char v222;
  char v223;
  unsigned char *v224;
  unsigned char *v225;
  unint64_t v226;
  unsigned int v227;
  unint64_t v228;
  unint64_t v229;
  int v230;
  unint64_t v231;
  _DWORD *v232;
  unsigned int v233;
  unint64_t v234;
  int v235;
  _DWORD *v236;
  int v237;
  unsigned int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  uint64_t v249;
  char v250;
  char v251;
  char v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unint64_t v261;
  unsigned int v262;
  unsigned int v263;
  char v264;
  char v265;
  char v266;
  unsigned int v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unsigned int v276;
  uint64_t v277;
  _DWORD *v278;
  _DWORD *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  char *v285;
  int v286;

  v286 = 1313280;
  v8 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2]) {
    v12 = a6[2];
  }
  else {
    v12 = v10 - v9;
  }
  v13 = v11 - v8;
  if (v13 >= a6[3]) {
    v13 = a6[3];
  }
  v14 = v10 % 6;
  v15 = v12 >= v14;
  v16 = v12 - v14;
  if (v15) {
    v17 = v16;
  }
  else {
    v17 = 0;
  }
  if (v13 >= 2)
  {
    v18 = 0;
    v276 = v9 % 3;
    v268 = v17 % 3;
    v19 = 6 * (v9 / 6) - v9 + 6;
    v274 = v13 >> 1;
    v20 = *a8;
    v21 = *a8 * a6[5];
    v22 = *a7 + v21;
    v23 = 4 * a6[4];
    v24 = a4[1];
    v25 = a3[1] + v24 * (v8 >> 1) + 4 * (v9 / 3);
    v26 = (_DWORD *)(*a3 + *a4 * v8 + 4 * (v9 / 3));
    v27 = (_DWORD *)((char *)v26 + *a4);
    v272 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    v273 = v23;
    v271 = v24 >> 2;
    v269 = v12;
    v270 = 2 * v20;
    v28 = *a7 + v20 + v21;
    v275 = v19;
    v283 = v17;
    do
    {
      v281 = v22;
      v282 = v18;
      v29 = 0;
      v277 = v28;
      v278 = v27;
      v30 = v276;
      v31 = v276;
      v32 = (_DWORD *)v25;
      v33 = v27;
      v279 = v26;
      do
      {
        v34 = v26;
        v35 = *v26;
        v36 = *((unsigned __int8 *)&v286 + v30);
        v37 = *((unsigned __int8 *)&v286 + v31);
        v38 = ((*v32 >> v37) & 0x3FF) - 512;
        v39 = (_DWORD *)((char *)v32 + ((v37 >> 2) & 0x3C));
        if (v31 == 2) {
          v40 = 0;
        }
        else {
          v40 = v31 + 1;
        }
        v41 = *((unsigned __int8 *)&v286 + v40);
        v42 = v35 >> v36;
        v43 = *v39 >> v41;
        v44 = (_DWORD *)((char *)v39 + ((v41 >> 2) & 0x3C));
        v45 = v43 & 0x3FF;
        if (v40 == 2) {
          v46 = 0;
        }
        else {
          v46 = v40 + 1;
        }
        if (v29) {
          v31 = v46;
        }
        v47 = (v42 & 0x3FF) << 15;
        v48 = v45 - 512;
        v49 = -11276 * v38 - 23400 * v48;
        v50 = 58065 * v38;
        v51 = 45941 * v48;
        v52 = 45941 * v48 + v47;
        if (v29) {
          v32 = v44;
        }
        v53 = v49 + v47;
        v54 = v50 + v47;
        v55 = (255 * ((v52 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v52 > 33538047) {
          LOBYTE(v55) = -1;
        }
        v56 = (255 * ((v54 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v53 > 33538047) {
          v57 = -1;
        }
        else {
          v57 = (255 * ((v53 + 0x4000) >> 15) + 511) / 0x3FFu;
        }
        if (v54 > 33538047) {
          LOBYTE(v56) = -1;
        }
        v58 = v52 < -16384;
        v59 = (unsigned char *)(v22 + v23);
        if (v58) {
          v60 = 0;
        }
        else {
          v60 = v55;
        }
        v59[1] = v60;
        v61 = v33;
        *v59 = -1;
        if (v53 >= -16384) {
          v62 = v57;
        }
        else {
          v62 = 0;
        }
        v59[2] = v62;
        if (v54 >= -16384) {
          v63 = v56;
        }
        else {
          v63 = 0;
        }
        v59[3] = v63;
        v64 = ((*v61 >> v36) & 0x3FF) << 15;
        v65 = v64 + v51;
        v66 = v64 + v49;
        v67 = v64 + v50;
        if (v30 == 2) {
          v30 = 0;
        }
        else {
          ++v30;
        }
        v68 = (255 * ((v65 + 0x4000) >> 15) + 511) / 0x3FFu;
        v69 = (255 * ((v66 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v65 > 33538047) {
          LOBYTE(v68) = -1;
        }
        if (v66 > 33538047) {
          LOBYTE(v69) = -1;
        }
        v70 = (255 * ((v67 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v67 > 33538047) {
          LOBYTE(v70) = -1;
        }
        v58 = v65 < -16384;
        v71 = (unsigned char *)(v28 + v23);
        if (v58) {
          LOBYTE(v68) = 0;
        }
        v71[1] = v68;
        if (v66 >= -16384) {
          v72 = v69;
        }
        else {
          v72 = 0;
        }
        v71[2] = v72;
        v73 = v36 >> 2;
        if (v67 >= -16384) {
          v74 = v70;
        }
        else {
          v74 = 0;
        }
        v71[3] = v74;
        *v71 = -1;
        v26 = (_DWORD *)((char *)v34 + ((v36 >> 2) & 0x3C));
        v33 = (_DWORD *)((char *)v61 + ((v36 >> 2) & 0x3C));
        ++v29;
        v22 += 4;
        v28 += 4;
      }
      while (v19 != v29);
      v280 = v25;
      if (v19 >= v17)
      {
        v224 = (unsigned char *)(v22 + v23);
        v225 = (unsigned char *)(v28 + v23);
        v226 = v269;
        v227 = v268;
      }
      else
      {
        v75 = 0;
        v284 = (char *)v61 + (v73 & 0x3C);
        v285 = (char *)v34 + (v73 & 0x3C);
        v76 = v23;
        do
        {
          v77 = v32[v75 / 4];
          v78 = (unsigned char *)(v22 + v76);
          v79 = *(_DWORD *)&v285[v75];
          v80 = (v77 & 0x3FF) - 512;
          v81 = (v79 & 0x3FF) << 15;
          v82 = ((v77 >> 10) & 0x3FF) - 512;
          v83 = -11276 * v80 - 23400 * v82;
          v84 = 58065 * v80;
          v85 = 45941 * v82;
          v86 = 45941 * v82 + v81;
          v87 = *(_DWORD *)&v284[v75];
          v88 = v83 + v81;
          v89 = v84 + v81;
          v90 = (255 * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047) {
            LOBYTE(v90) = -1;
          }
          v91 = (255 * ((v88 + 0x4000) >> 15) + 511) / 0x3FFu;
          v92 = (255 * ((v89 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v88 > 33538047) {
            LOBYTE(v91) = -1;
          }
          if (v89 > 33538047) {
            LOBYTE(v92) = -1;
          }
          if (v86 >= -16384) {
            v93 = v90;
          }
          else {
            v93 = 0;
          }
          v78[1] = v93;
          v94 = (32 * v79) & 0x1FF8000;
          v95 = v85 + v94;
          if (v88 < -16384) {
            LOBYTE(v91) = 0;
          }
          v96 = v83 + v94;
          v58 = v89 < -16384;
          v97 = 255 * ((v83 + v94 + 0x4000) >> 15) + 511;
          v98 = v84 + v94;
          v78[2] = v91;
          v99 = 255 * ((v84 + v94 + 0x4000) >> 15) + 511;
          if (v58) {
            LOBYTE(v92) = 0;
          }
          v100 = (255 * ((v85 + v94 + 0x4000) >> 15) + 511) / 0x3FFu;
          v78[3] = v92;
          v101 = ((4198405 * (unint64_t)v97) >> 32)
               + ((v97 - ((4198405 * (unint64_t)v97) >> 32)) >> 1);
          if (v95 > 33538047) {
            v102 = -1;
          }
          else {
            v102 = v100;
          }
          v103 = v101 >> 9;
          v104 = (4198405 * (unint64_t)v99) >> 32;
          v105 = v99 - v104;
          if (v96 > 33538047) {
            LOBYTE(v103) = -1;
          }
          v106 = (v104 + (v105 >> 1)) >> 9;
          if (v98 > 33538047) {
            LOBYTE(v106) = -1;
          }
          if (v95 < -16384) {
            v102 = 0;
          }
          v78[5] = v102;
          v107 = (v87 & 0x3FF) << 15;
          v108 = v85 + v107;
          v109 = v85 + v107 + 0x4000;
          if (v96 < -16384) {
            LOBYTE(v103) = 0;
          }
          v110 = v83 + v107;
          v58 = v98 < -16384;
          v111 = 255 * ((v83 + v107 + 0x4000) >> 15);
          v112 = v107 + v84;
          v78[6] = v103;
          v113 = ((4198405 * (unint64_t)(255 * (v109 >> 15) + 511)) >> 32)
               + ((255 * (v109 >> 15)
                               + 511
                               - ((4198405 * (unint64_t)(255 * (v109 >> 15) + 511)) >> 32)) >> 1);
          if (v58) {
            LOBYTE(v106) = 0;
          }
          v78[7] = v106;
          v114 = ((4198405 * (unint64_t)(v111 + 511)) >> 32)
               + ((v111 + 511 - ((4198405 * (unint64_t)(v111 + 511)) >> 32)) >> 1);
          v115 = (unsigned char *)(v28 + v76);
          *v78 = -1;
          v78[4] = -1;
          v116 = v113 >> 9;
          if (v108 > 33538047) {
            LOBYTE(v116) = -1;
          }
          v117 = v114 >> 9;
          v118 = (255 * ((v112 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v110 > 33538047) {
            LOBYTE(v117) = -1;
          }
          if (v112 > 33538047) {
            LOBYTE(v118) = -1;
          }
          if (v108 >= -16384) {
            v119 = v116;
          }
          else {
            v119 = 0;
          }
          v115[1] = v119;
          if (v110 < -16384) {
            LOBYTE(v117) = 0;
          }
          v120 = (32 * v87) & 0x1FF8000;
          v121 = v85 + v120;
          v122 = v83 + v120;
          *v115 = -1;
          v115[2] = v117;
          v123 = v120 + v84;
          if (v112 < -16384) {
            LOBYTE(v118) = 0;
          }
          v115[3] = v118;
          v124 = (255 * ((v121 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v121 > 33538047) {
            LOBYTE(v124) = -1;
          }
          v125 = (255 * ((v122 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v122 > 33538047) {
            LOBYTE(v125) = -1;
          }
          v126 = (255 * ((v123 + 0x4000) >> 15) + 511) / 0x3FFu;
          v115[4] = -1;
          if (v123 > 33538047) {
            LOBYTE(v126) = -1;
          }
          if (v121 < -16384) {
            LOBYTE(v124) = 0;
          }
          v115[5] = v124;
          if (v122 >= -16384) {
            v127 = v125;
          }
          else {
            v127 = 0;
          }
          v115[6] = v127;
          if (v123 >= -16384) {
            v128 = v126;
          }
          else {
            v128 = 0;
          }
          v115[7] = v128;
          v129 = v32[v75 / 4 + 1];
          v130 = ((v77 >> 20) & 0x3FF) - 512;
          v131 = (v129 & 0x3FF) - 512;
          v132 = (v79 >> 5) & 0x1FF8000;
          v133 = -11276 * v130 - 23400 * v131;
          v134 = 58065 * v130;
          v135 = 45941 * v131;
          v136 = v135 + v132;
          v137 = v133 + v132;
          v138 = v134 + v132;
          v139 = 255 * ((v137 + 0x4000) >> 15) + 511;
          v140 = (255 * ((v136 + 0x4000) >> 15) + 511) / 0x3FFu;
          v141 = (4198405 * (unint64_t)v139) >> 32;
          v142 = v139 - v141;
          if (v136 > 33538047) {
            LOBYTE(v140) = -1;
          }
          v143 = (v141 + (v142 >> 1)) >> 9;
          if (v137 > 33538047) {
            LOBYTE(v143) = -1;
          }
          v144 = (255 * ((v138 + 0x4000) >> 15) + 511) / 0x3FFu;
          v78[8] = -1;
          if (v138 > 33538047) {
            LOBYTE(v144) = -1;
          }
          if (v136 >= -16384) {
            v145 = v140;
          }
          else {
            v145 = 0;
          }
          v78[9] = v145;
          if (v137 >= -16384) {
            v146 = v143;
          }
          else {
            v146 = 0;
          }
          v78[10] = v146;
          if (v138 >= -16384) {
            v147 = v144;
          }
          else {
            v147 = 0;
          }
          v78[11] = v147;
          v148 = *(_DWORD *)&v285[v75 + 4];
          v149 = (v148 & 0x3FF) << 15;
          v150 = v149 + v135;
          v151 = v149 + v133;
          v152 = v149 + v134;
          v153 = (255 * ((v150 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v150 > 33538047) {
            LOBYTE(v153) = -1;
          }
          v154 = (255 * ((v151 + 0x4000) >> 15) + 511) / 0x3FFu;
          v155 = (255 * ((v152 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v151 > 33538047) {
            LOBYTE(v154) = -1;
          }
          if (v152 > 33538047) {
            LOBYTE(v155) = -1;
          }
          v78[12] = -1;
          if (v150 >= -16384) {
            v156 = v153;
          }
          else {
            v156 = 0;
          }
          v78[13] = v156;
          v157 = (v87 >> 5) & 0x1FF8000;
          v158 = v135 + v157;
          if (v151 >= -16384) {
            v159 = v154;
          }
          else {
            v159 = 0;
          }
          v160 = 255 * ((v135 + v157 + 0x4000) >> 15) + 511;
          v161 = v133 + v157;
          v58 = v152 < -16384;
          v162 = 255 * ((v133 + v157 + 0x4000) >> 15) + 511;
          v78[14] = v159;
          v163 = v134 + v157;
          if (v58) {
            LOBYTE(v155) = 0;
          }
          v78[15] = v155;
          v164 = v160 / 0x3FF;
          v165 = (4198405 * (unint64_t)v162) >> 32;
          v166 = v162 - v165;
          if (v158 > 33538047) {
            LOBYTE(v164) = -1;
          }
          v167 = (v165 + (v166 >> 1)) >> 9;
          if (v161 > 33538047) {
            LOBYTE(v167) = -1;
          }
          v168 = (255 * ((v163 + 0x4000) >> 15) + 511) / 0x3FFu;
          v115[8] = -1;
          if (v163 > 33538047) {
            LOBYTE(v168) = -1;
          }
          if (v158 >= -16384) {
            v169 = v164;
          }
          else {
            v169 = 0;
          }
          v115[9] = v169;
          if (v161 < -16384) {
            LOBYTE(v167) = 0;
          }
          v115[10] = v167;
          if (v163 >= -16384) {
            v170 = v168;
          }
          else {
            v170 = 0;
          }
          v115[11] = v170;
          v171 = *(_DWORD *)&v284[v75 + 4];
          v172 = (v171 & 0x3FF) << 15;
          v173 = v172 + v135;
          v174 = v172 + v133;
          v175 = v172 + v134;
          v176 = (255 * ((v173 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v173 > 33538047) {
            LOBYTE(v176) = -1;
          }
          v177 = (255 * ((v175 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v174 > 33538047) {
            v178 = -1;
          }
          else {
            v178 = (255 * ((v174 + 0x4000) >> 15) + 511) / 0x3FFu;
          }
          if (v175 > 33538047) {
            LOBYTE(v177) = -1;
          }
          v115[12] = -1;
          if (v173 >= -16384) {
            v179 = v176;
          }
          else {
            v179 = 0;
          }
          v58 = v174 < -16384;
          v180 = ((v129 >> 10) & 0x3FF) - 512;
          v181 = ((v129 >> 20) & 0x3FF) - 512;
          v115[13] = v179;
          v182 = (32 * v148) & 0x1FF8000;
          v183 = -23400 * v181 - 11276 * v180;
          v184 = 58065 * v180;
          v185 = 45941 * v181;
          if (v58) {
            v186 = 0;
          }
          else {
            v186 = v178;
          }
          v187 = v182 + v185;
          v58 = v175 < -16384;
          v188 = 255 * ((v182 + v185 + 0x4000) >> 15) + 511;
          v189 = v182 + v183;
          v115[14] = v186;
          v190 = 255 * ((v182 + v183 + 0x4000) >> 15) + 511;
          v191 = v182 + v184;
          v192 = v182 + v184 + 0x4000;
          if (v58) {
            LOBYTE(v177) = 0;
          }
          v193 = 255 * (v192 >> 15) + 511;
          v115[15] = v177;
          v194 = v188 / 0x3FF;
          if (v187 > 33538047) {
            LOBYTE(v194) = -1;
          }
          v195 = v190 / 0x3FF;
          if (v189 > 33538047) {
            LOBYTE(v195) = -1;
          }
          v196 = v193 / 0x3FF;
          if (v191 > 33538047) {
            LOBYTE(v196) = -1;
          }
          v58 = v187 < -16384;
          v197 = (v148 >> 5) & 0x1FF8000;
          v198 = v197 + v185;
          if (v58) {
            LOBYTE(v194) = 0;
          }
          v58 = v189 < -16384;
          v199 = v197 + v183;
          v200 = 255 * ((v197 + v183 + 0x4000) >> 15);
          v78[17] = v194;
          v201 = v197 + v184;
          if (v58) {
            LOBYTE(v195) = 0;
          }
          v78[18] = v195;
          if (v191 < -16384) {
            LOBYTE(v196) = 0;
          }
          v78[19] = v196;
          v202 = (255 * ((v198 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v198 > 33538047) {
            LOBYTE(v202) = -1;
          }
          v203 = (v200 + 511) / 0x3FFu;
          if (v199 > 33538047) {
            LOBYTE(v203) = -1;
          }
          v204 = (255 * ((v201 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v201 > 33538047) {
            LOBYTE(v204) = -1;
          }
          if (v198 < -16384) {
            LOBYTE(v202) = 0;
          }
          v78[21] = v202;
          v58 = v199 < -16384;
          v17 = v283;
          if (v58) {
            LOBYTE(v203) = 0;
          }
          v78[22] = v203;
          if (v201 >= -16384) {
            v205 = v204;
          }
          else {
            v205 = 0;
          }
          v206 = (32 * v171) & 0x1FF8000;
          v207 = v206 + v185;
          v78[23] = v205;
          v208 = v206 + v183;
          v78[16] = -1;
          v209 = 255 * ((v206 + v183 + 0x4000) >> 15) + 511;
          v210 = v206 + v184;
          v78[20] = -1;
          v211 = (255 * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047) {
            LOBYTE(v211) = -1;
          }
          v212 = v209 / 0x3FF;
          if (v208 > 33538047) {
            LOBYTE(v212) = -1;
          }
          v213 = (255 * ((v210 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v210 > 33538047) {
            LOBYTE(v213) = -1;
          }
          v214 = (v171 >> 5) & 0x1FF8000;
          v215 = v214 + v185;
          if (v207 < -16384) {
            LOBYTE(v211) = 0;
          }
          v216 = v214 + v183;
          v115[17] = v211;
          v217 = v214 + v184;
          if (v208 >= -16384) {
            v218 = v212;
          }
          else {
            v218 = 0;
          }
          v115[18] = v218;
          if (v210 < -16384) {
            LOBYTE(v213) = 0;
          }
          v115[19] = v213;
          v219 = (255 * ((v215 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v215 > 33538047) {
            LOBYTE(v219) = -1;
          }
          v220 = (255 * ((v216 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v216 > 33538047) {
            LOBYTE(v220) = -1;
          }
          v221 = (255 * ((v217 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v217 > 33538047) {
            LOBYTE(v221) = -1;
          }
          if (v215 >= -16384) {
            v222 = v219;
          }
          else {
            v222 = 0;
          }
          v115[21] = v222;
          if (v216 < -16384) {
            LOBYTE(v220) = 0;
          }
          v115[22] = v220;
          if (v217 >= -16384) {
            v223 = v221;
          }
          else {
            v223 = 0;
          }
          v115[23] = v223;
          v115[16] = -1;
          v115[20] = -1;
          v19 += 6;
          v75 += 8;
          v76 += 24;
        }
        while (v19 < v283);
        v26 = (_DWORD *)((char *)v34 + (v73 & 0x3C) + v75);
        v33 = (_DWORD *)((char *)v61 + (v73 & 0x3C) + v75);
        v32 = (_DWORD *)((char *)v32 + v75);
        v224 = (unsigned char *)(v22 + v76);
        v225 = (unsigned char *)(v28 + v76);
        v226 = v269;
        v227 = v268;
      }
      if (v19 < v226)
      {
        do
        {
          v228 = *((unsigned __int8 *)&v286 + v227);
          v229 = *((unsigned __int8 *)&v286 + v31);
          v230 = ((*v32 >> v229) & 0x3FF) - 512;
          v231 = v226;
          v232 = (_DWORD *)((char *)v32 + ((v229 >> 2) & 0x3C));
          if (v31 == 2) {
            v233 = 0;
          }
          else {
            v233 = v31 + 1;
          }
          v234 = *((unsigned __int8 *)&v286 + v233);
          v235 = (*v232 >> v234) & 0x3FF;
          v236 = (_DWORD *)((char *)v232 + ((v234 >> 2) & 0x3C));
          v237 = v235 - 512;
          if (v233 == 2) {
            v238 = 0;
          }
          else {
            v238 = v233 + 1;
          }
          if (v19) {
            v31 = v238;
          }
          v239 = ((*v26 >> v228) & 0x3FF) << 15;
          if (v19) {
            v32 = v236;
          }
          v240 = -11276 * v230 - 23400 * v237;
          v241 = 58065 * v230;
          v242 = 45941 * v237;
          v243 = 45941 * v237 + v239;
          v244 = v240 + v239;
          v245 = v241 + v239;
          v246 = (255 * ((v243 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v243 > 33538047) {
            LOBYTE(v246) = -1;
          }
          v247 = (255 * ((v244 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v244 > 33538047) {
            LOBYTE(v247) = -1;
          }
          v248 = (255 * ((v245 + 0x4000) >> 15) + 511) / 0x3FFu;
          v249 = (v228 >> 2) & 0x3C;
          if (v245 > 33538047) {
            LOBYTE(v248) = -1;
          }
          *v224 = -1;
          if (v243 >= -16384) {
            v250 = v246;
          }
          else {
            v250 = 0;
          }
          v224[1] = v250;
          if (v244 >= -16384) {
            v251 = v247;
          }
          else {
            v251 = 0;
          }
          v224[2] = v251;
          if (v245 >= -16384) {
            v252 = v248;
          }
          else {
            v252 = 0;
          }
          v224[3] = v252;
          v26 = (_DWORD *)((char *)v26 + v249);
          v253 = *v33 >> v228;
          if (v227 == 2) {
            v227 = 0;
          }
          else {
            ++v227;
          }
          v33 = (_DWORD *)((char *)v33 + v249);
          v254 = (v253 & 0x3FF) << 15;
          v255 = v254 + v242;
          v256 = v254 + v240;
          v257 = v254 + v241;
          v258 = 255 * ((v257 + 0x4000) >> 15) + 511;
          v259 = (255 * ((v255 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v255 > 33538047) {
            LOBYTE(v259) = -1;
          }
          v260 = (255 * ((v256 + 0x4000) >> 15) + 511) / 0x3FFu;
          v261 = (4198405 * (unint64_t)v258) >> 32;
          v262 = v258 - v261;
          if (v256 > 33538047) {
            LOBYTE(v260) = -1;
          }
          v263 = (v261 + (v262 >> 1)) >> 9;
          if (v257 > 33538047) {
            LOBYTE(v263) = -1;
          }
          *v225 = -1;
          if (v255 >= -16384) {
            v264 = v259;
          }
          else {
            v264 = 0;
          }
          v225[1] = v264;
          if (v256 >= -16384) {
            v265 = v260;
          }
          else {
            v265 = 0;
          }
          v226 = v231;
          v225[2] = v265;
          if (v257 >= -16384) {
            v266 = v263;
          }
          else {
            v266 = 0;
          }
          v225[3] = v266;
          v225 += 4;
          ++v19;
          v224 += 4;
        }
        while (v231 != v19);
      }
      v23 = v273;
      v26 = &v279[v272];
      v27 = &v278[v272];
      v18 = v282 + 1;
      v22 = v281 + v270;
      v28 = v277 + v270;
      v25 = v280 + 4 * v271;
      v19 = v275;
    }
    while (v282 + 1 != v274);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU2020_BGRA(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  int v298 = 1313280;
  unint64_t v8 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  unint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  else {
    unint64_t v11 = v10 - v9;
  }
  unint64_t v12 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  unint64_t v13 = v10 % 6;
  BOOL v14 = v11 >= v13;
  unint64_t v15 = v11 - v13;
  if (v14) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = 0;
  }
  if (v12 >= 2)
  {
    uint64_t v17 = 0;
    unsigned int v288 = v9 % 3;
    unsigned int v281 = v16 % 3;
    unint64_t v18 = 6 * (v9 / 6) - v9 + 6;
    unint64_t v286 = v12 >> 1;
    uint64_t v19 = *a8;
    uint64_t v20 = *a8 * a6[5];
    uint64_t v21 = *a7 + v20;
    uint64_t v22 = 4 * a6[4];
    unint64_t v23 = a4[1];
    unint64_t v24 = a3[1] + v23 * (v8 >> 1) + 4 * (v9 / 3);
    v25 = (_DWORD *)(*a3 + *a4 * v8 + 4 * (v9 / 3));
    v26 = (_DWORD *)((char *)v25 + *a4);
    uint64_t v284 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v285 = v22;
    unint64_t v283 = v23 >> 2;
    uint64_t v282 = 2 * v19;
    uint64_t v27 = *a7 + v19 + v20;
    unint64_t v287 = v18;
    unint64_t v279 = v11;
    unint64_t v295 = v16;
    do
    {
      uint64_t v293 = v21;
      uint64_t v294 = v17;
      uint64_t v28 = 0;
      uint64_t v289 = v27;
      v290 = v26;
      unsigned int v29 = v288;
      unsigned int v30 = v288;
      v31 = (_DWORD *)v24;
      v32 = v26;
      v291 = v25;
      do
      {
        v33 = v25;
        unsigned int v34 = *v25;
        unint64_t v35 = *((unsigned __int8 *)&v298 + v29);
        unint64_t v36 = *((unsigned __int8 *)&v298 + v30);
        int v37 = ((*v31 >> v36) & 0x3FF) - 512;
        v38 = (_DWORD *)((char *)v31 + ((v36 >> 2) & 0x3C));
        if (v30 == 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = v30 + 1;
        }
        unint64_t v40 = *((unsigned __int8 *)&v298 + v39);
        unsigned int v41 = v34 >> v35;
        int v42 = *v38 >> v40;
        v43 = (_DWORD *)((char *)v38 + ((v40 >> 2) & 0x3C));
        int v44 = v42 & 0x3FF;
        if (v39 == 2) {
          unsigned int v45 = 0;
        }
        else {
          unsigned int v45 = v39 + 1;
        }
        if (v28) {
          unsigned int v30 = v45;
        }
        int v46 = (v41 & 0x3FF) << 15;
        int v47 = v44 - 512;
        int v48 = -5391 * v37 - 18721 * v47;
        int v49 = 61650 * v37;
        int v50 = 48320 * v47;
        int v51 = 48320 * v47 + v46;
        if (v28) {
          v31 = v43;
        }
        int v52 = v48 + v46;
        int v53 = v49 + v46;
        unsigned int v54 = (255 * ((v51 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v51 > 33538047) {
          LOBYTE(v54) = -1;
        }
        unsigned int v55 = (255 * ((v52 + 0x4000) >> 15) + 511) / 0x3FFu;
        unsigned int v56 = (255 * ((v53 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v52 > 33538047) {
          LOBYTE(v55) = -1;
        }
        if (v53 > 33538047) {
          LOBYTE(v56) = -1;
        }
        v57 = (unsigned char *)(v21 + v22);
        if (v53 >= -16384) {
          char v58 = v56;
        }
        else {
          char v58 = 0;
        }
        unsigned char *v57 = v58;
        v59 = v32;
        if (v52 >= -16384) {
          char v60 = v55;
        }
        else {
          char v60 = 0;
        }
        if (v51 < -16384) {
          LOBYTE(v54) = 0;
        }
        v57[1] = v60;
        v57[2] = v54;
        v57[3] = -1;
        int v61 = ((*v59 >> v35) & 0x3FF) << 15;
        int v62 = v61 + v50;
        int v63 = v61 + v48;
        int v64 = v61 + v49;
        if (v29 == 2) {
          unsigned int v29 = 0;
        }
        else {
          ++v29;
        }
        unsigned int v65 = (255 * ((v62 + 0x4000) >> 15) + 511) / 0x3FFu;
        unsigned int v66 = (255 * ((v63 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v62 > 33538047) {
          LOBYTE(v65) = -1;
        }
        if (v63 > 33538047) {
          LOBYTE(v66) = -1;
        }
        unsigned int v67 = (255 * ((v64 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v64 > 33538047) {
          LOBYTE(v67) = -1;
        }
        BOOL v68 = v64 < -16384;
        v69 = (unsigned char *)(v27 + v22);
        if (v68) {
          LOBYTE(v67) = 0;
        }
        unsigned char *v69 = v67;
        if (v63 >= -16384) {
          char v70 = v66;
        }
        else {
          char v70 = 0;
        }
        v69[1] = v70;
        unint64_t v71 = v35 >> 2;
        if (v62 >= -16384) {
          char v72 = v65;
        }
        else {
          char v72 = 0;
        }
        v69[2] = v72;
        v69[3] = -1;
        v25 = (_DWORD *)((char *)v33 + (v71 & 0x3C));
        v32 = (_DWORD *)((char *)v59 + (v71 & 0x3C));
        ++v28;
        v21 += 4;
        v27 += 4;
      }
      while (v18 != v28);
      unint64_t v292 = v24;
      if (v18 >= v16)
      {
        v236 = (unsigned char *)(v21 + v22);
        v237 = (unsigned char *)(v27 + v22);
        uint64_t v239 = v289;
        unsigned int v238 = v281;
      }
      else
      {
        unint64_t v73 = 0;
        char v280 = v71;
        v296 = (char *)v59 + (v71 & 0x3C);
        v297 = (char *)v33 + (v71 & 0x3C);
        uint64_t v74 = v22;
        do
        {
          unsigned int v75 = v31[v73 / 4];
          v76 = (unsigned char *)(v21 + v74);
          unsigned int v77 = *(_DWORD *)&v297[v73];
          int v78 = (v75 & 0x3FF) - 512;
          int v79 = (v77 & 0x3FF) << 15;
          int v80 = ((v75 >> 10) & 0x3FF) - 512;
          int v81 = -5391 * v78 - 18721 * v80;
          int v82 = 61650 * v78;
          int v83 = 48320 * v80;
          int v84 = v83 + v79;
          unsigned int v85 = *(_DWORD *)&v296[v73];
          int v86 = v81 + v79;
          int v87 = v82 + v79;
          unsigned int v88 = (255 * ((v84 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v84 > 33538047) {
            LOBYTE(v88) = -1;
          }
          unsigned int v89 = (255 * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          unsigned int v90 = (255 * ((v87 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047) {
            LOBYTE(v89) = -1;
          }
          if (v87 > 33538047) {
            LOBYTE(v90) = -1;
          }
          if (v87 < -16384) {
            LOBYTE(v90) = 0;
          }
          unsigned char *v76 = v90;
          int v91 = (32 * v77) & 0x1FF8000;
          int v92 = v83 + v91;
          if (v86 < -16384) {
            LOBYTE(v89) = 0;
          }
          unsigned int v93 = 255 * ((v83 + v91 + 0x4000) >> 15) + 511;
          int v94 = v81 + v91;
          unsigned int v95 = 255 * ((v81 + v91 + 0x4000) >> 15) + 511;
          int v96 = v82 + v91;
          v76[1] = v89;
          unsigned int v97 = 255 * ((v96 + 0x4000) >> 15) + 511;
          if (v84 >= -16384) {
            char v98 = v88;
          }
          else {
            char v98 = 0;
          }
          unsigned int v99 = v93 / 0x3FF;
          v76[2] = v98;
          unsigned int v100 = ((4198405 * (unint64_t)v95) >> 32)
               + ((v95 - ((4198405 * (unint64_t)v95) >> 32)) >> 1);
          if (v92 > 33538047) {
            LOBYTE(v99) = -1;
          }
          unsigned int v101 = v100 >> 9;
          unint64_t v102 = (4198405 * (unint64_t)v97) >> 32;
          unsigned int v103 = v97 - v102;
          if (v94 > 33538047) {
            LOBYTE(v101) = -1;
          }
          unsigned int v104 = (v102 + (v103 >> 1)) >> 9;
          if (v96 > 33538047) {
            LOBYTE(v104) = -1;
          }
          if (v96 < -16384) {
            LOBYTE(v104) = 0;
          }
          v76[4] = v104;
          int v105 = (v85 & 0x3FF) << 15;
          int v106 = v83 + v105;
          if (v94 < -16384) {
            LOBYTE(v101) = 0;
          }
          unsigned int v107 = 255 * ((v83 + v105 + 0x4000) >> 15) + 511;
          int v108 = v81 + v105;
          BOOL v68 = v92 < -16384;
          unsigned int v109 = 255 * ((v81 + v105 + 0x4000) >> 15) + 511;
          v76[5] = v101;
          int v110 = v105 + v82;
          int v111 = 255 * ((v105 + v82 + 0x4000) >> 15);
          if (v68) {
            LOBYTE(v99) = 0;
          }
          unsigned int v112 = v111 + 511;
          v76[6] = v99;
          unsigned int v113 = v107 / 0x3FF;
          unint64_t v114 = (4198405 * (unint64_t)v109) >> 32;
          unsigned int v115 = v109 - v114;
          if (v106 > 33538047) {
            LOBYTE(v113) = -1;
          }
          unsigned int v116 = (v114 + (v115 >> 1)) >> 9;
          if (v108 > 33538047) {
            LOBYTE(v116) = -1;
          }
          unsigned int v117 = v112 / 0x3FF;
          if (v110 > 33538047) {
            LOBYTE(v117) = -1;
          }
          if (v110 >= -16384) {
            char v118 = v117;
          }
          else {
            char v118 = 0;
          }
          int v119 = (32 * v85) & 0x1FF8000;
          int v120 = v83 + v119;
          BOOL v68 = v108 < -16384;
          int v121 = v81 + v119;
          int v122 = 255 * ((v81 + v119 + 0x4000) >> 15);
          v123 = (unsigned char *)(v27 + v74);
          v76[3] = -1;
          v76[7] = -1;
          *(unsigned char *)(v27 + v74) = v118;
          if (v68) {
            char v124 = 0;
          }
          else {
            char v124 = v116;
          }
          v123[3] = -1;
          int v125 = v119 + v82;
          unsigned int v126 = 255 * ((v125 + 0x4000) >> 15) + 511;
          v123[1] = v124;
          unsigned int v127 = (255 * ((v120 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v106 < -16384) {
            LOBYTE(v113) = 0;
          }
          if (v120 > 33538047) {
            LOBYTE(v127) = -1;
          }
          unsigned int v128 = (v122 + 511) / 0x3FFu;
          unint64_t v129 = (4198405 * (unint64_t)v126) >> 32;
          unsigned int v130 = v126 - v129;
          if (v121 > 33538047) {
            LOBYTE(v128) = -1;
          }
          unsigned int v131 = (v129 + (v130 >> 1)) >> 9;
          if (v125 > 33538047) {
            LOBYTE(v131) = -1;
          }
          v123[2] = v113;
          if (v125 >= -16384) {
            char v132 = v131;
          }
          else {
            char v132 = 0;
          }
          v123[4] = v132;
          if (v121 >= -16384) {
            char v133 = v128;
          }
          else {
            char v133 = 0;
          }
          v123[5] = v133;
          if (v120 >= -16384) {
            char v134 = v127;
          }
          else {
            char v134 = 0;
          }
          v123[6] = v134;
          v123[7] = -1;
          unsigned int v135 = v31[v73 / 4 + 1];
          int v136 = ((v75 >> 20) & 0x3FF) - 512;
          int v137 = (v135 & 0x3FF) - 512;
          int v138 = (v77 >> 5) & 0x1FF8000;
          int v139 = -5391 * v136 - 18721 * v137;
          int v140 = 61650 * v136;
          int v141 = 48320 * v137;
          int v142 = v141 + v138;
          int v143 = v139 + v138;
          int v144 = v140 + v138;
          unsigned int v145 = 255 * ((v143 + 0x4000) >> 15) + 511;
          unsigned int v146 = (255 * ((v142 + 0x4000) >> 15) + 511) / 0x3FFu;
          unint64_t v147 = (4198405 * (unint64_t)v145) >> 32;
          unsigned int v148 = v145 - v147;
          if (v142 > 33538047) {
            LOBYTE(v146) = -1;
          }
          unsigned int v149 = (v147 + (v148 >> 1)) >> 9;
          if (v143 > 33538047) {
            LOBYTE(v149) = -1;
          }
          unsigned int v150 = (255 * ((v144 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v144 > 33538047) {
            LOBYTE(v150) = -1;
          }
          if (v144 >= -16384) {
            char v151 = v150;
          }
          else {
            char v151 = 0;
          }
          v76[8] = v151;
          if (v143 >= -16384) {
            char v152 = v149;
          }
          else {
            char v152 = 0;
          }
          v76[9] = v152;
          if (v142 >= -16384) {
            char v153 = v146;
          }
          else {
            char v153 = 0;
          }
          v76[10] = v153;
          v76[11] = -1;
          unsigned int v154 = *(_DWORD *)&v297[v73 + 4];
          int v155 = (v154 & 0x3FF) << 15;
          int v156 = v155 + v141;
          int v157 = v155 + v139;
          int v158 = v155 + v140;
          unsigned int v159 = (255 * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v156 > 33538047) {
            LOBYTE(v159) = -1;
          }
          unsigned int v160 = (255 * ((v157 + 0x4000) >> 15) + 511) / 0x3FFu;
          unsigned int v161 = (255 * ((v158 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v157 > 33538047) {
            LOBYTE(v160) = -1;
          }
          if (v158 > 33538047) {
            LOBYTE(v161) = -1;
          }
          if (v158 >= -16384) {
            char v162 = v161;
          }
          else {
            char v162 = 0;
          }
          BOOL v68 = v157 < -16384;
          v76[12] = v162;
          int v163 = (v85 >> 5) & 0x1FF8000;
          int v164 = v141 + v163;
          int v165 = v141 + v163 + 0x4000;
          if (v68) {
            LOBYTE(v160) = 0;
          }
          int v166 = v139 + v163;
          int v167 = v140 + v163;
          v76[15] = -1;
          unsigned int v168 = 255 * ((v167 + 0x4000) >> 15) + 511;
          v76[13] = v160;
          unsigned int v169 = (255 * (v165 >> 15) + 511) / 0x3FFu;
          if (v156 < -16384) {
            LOBYTE(v159) = 0;
          }
          if (v164 > 33538047) {
            LOBYTE(v169) = -1;
          }
          unsigned int v170 = (255 * ((v166 + 0x4000) >> 15) + 511) / 0x3FFu;
          unint64_t v171 = (4198405 * (unint64_t)v168) >> 32;
          unsigned int v172 = v168 - v171;
          if (v166 > 33538047) {
            LOBYTE(v170) = -1;
          }
          unsigned int v173 = (v171 + (v172 >> 1)) >> 9;
          if (v167 > 33538047) {
            LOBYTE(v173) = -1;
          }
          v76[14] = v159;
          if (v167 >= -16384) {
            char v174 = v173;
          }
          else {
            char v174 = 0;
          }
          v123[8] = v174;
          if (v166 >= -16384) {
            char v175 = v170;
          }
          else {
            char v175 = 0;
          }
          v123[9] = v175;
          if (v164 >= -16384) {
            char v176 = v169;
          }
          else {
            char v176 = 0;
          }
          v123[10] = v176;
          v123[11] = -1;
          unsigned int v177 = *(_DWORD *)&v296[v73 + 4];
          int v178 = (v177 & 0x3FF) << 15;
          int v179 = v178 + v141;
          int v180 = v178 + v139;
          int v181 = v178 + v140;
          unsigned int v182 = (255 * ((v178 + v141 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v179 > 33538047) {
            char v183 = -1;
          }
          else {
            char v183 = v182;
          }
          if (v180 > 33538047) {
            char v184 = -1;
          }
          else {
            char v184 = (255 * ((v180 + 0x4000) >> 15) + 511) / 0x3FFu;
          }
          if (v181 > 33538047) {
            char v185 = -1;
          }
          else {
            char v185 = (255 * ((v181 + 0x4000) >> 15) + 511) / 0x3FFu;
          }
          if (v181 >= -16384) {
            char v186 = v185;
          }
          else {
            char v186 = 0;
          }
          v123[15] = -1;
          BOOL v68 = v180 < -16384;
          int v187 = ((v135 >> 10) & 0x3FF) - 512;
          int v188 = ((v135 >> 20) & 0x3FF) - 512;
          v123[12] = v186;
          int v189 = (32 * v154) & 0x1FF8000;
          int v190 = -18721 * v188 - 5391 * v187;
          int v191 = 61650 * v187;
          int v192 = 48320 * v188;
          if (v68) {
            char v184 = 0;
          }
          int v193 = v189 + v192;
          BOOL v68 = v179 < -16384;
          unsigned int v194 = 255 * ((v189 + v192 + 0x4000) >> 15) + 511;
          int v195 = v189 + v190;
          v123[13] = v184;
          unsigned int v196 = 255 * ((v189 + v190 + 0x4000) >> 15) + 511;
          int v197 = v189 + v191;
          int v198 = v189 + v191 + 0x4000;
          if (v68) {
            char v183 = 0;
          }
          unsigned int v199 = 255 * (v198 >> 15) + 511;
          v123[14] = v183;
          unsigned int v200 = v194 / 0x3FF;
          if (v193 > 33538047) {
            LOBYTE(v200) = -1;
          }
          unsigned int v201 = v196 / 0x3FF;
          if (v195 > 33538047) {
            LOBYTE(v201) = -1;
          }
          unsigned int v202 = v199 / 0x3FF;
          if (v197 > 33538047) {
            LOBYTE(v202) = -1;
          }
          int v203 = (v154 >> 5) & 0x1FF8000;
          int v204 = v203 + v192;
          if (v197 < -16384) {
            LOBYTE(v202) = 0;
          }
          BOOL v68 = v195 < -16384;
          int v205 = v203 + v190;
          int v206 = 255 * ((v203 + v190 + 0x4000) >> 15);
          v76[16] = v202;
          int v207 = v203 + v191;
          if (v68) {
            LOBYTE(v201) = 0;
          }
          BOOL v68 = v193 < -16384;
          unsigned int v208 = ((4198405 * (unint64_t)(v206 + 511)) >> 32)
               + ((v206 + 511 - ((4198405 * (unint64_t)(v206 + 511)) >> 32)) >> 1);
          unint64_t v16 = v295;
          v76[17] = v201;
          if (v68) {
            LOBYTE(v200) = 0;
          }
          v76[18] = v200;
          unsigned int v209 = (255 * ((v204 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v204 > 33538047) {
            LOBYTE(v209) = -1;
          }
          unsigned int v210 = v208 >> 9;
          if (v205 > 33538047) {
            LOBYTE(v210) = -1;
          }
          unsigned int v211 = (255 * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047) {
            LOBYTE(v211) = -1;
          }
          if (v207 >= -16384) {
            char v212 = v211;
          }
          else {
            char v212 = 0;
          }
          v76[20] = v212;
          if (v205 >= -16384) {
            char v213 = v210;
          }
          else {
            char v213 = 0;
          }
          v76[21] = v213;
          int v214 = 32 * v177;
          if (v204 >= -16384) {
            char v215 = v209;
          }
          else {
            char v215 = 0;
          }
          int v216 = v214 & 0x1FF8000;
          int v217 = (v214 & 0x1FF8000) + v192;
          v76[22] = v215;
          int v218 = v216 + v190;
          v76[19] = -1;
          unsigned int v219 = 255 * ((v216 + v190 + 0x4000) >> 15) + 511;
          int v220 = v216 + v191;
          v76[23] = -1;
          unsigned int v221 = (255 * ((v217 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v217 > 33538047) {
            LOBYTE(v221) = -1;
          }
          unsigned int v222 = v219 / 0x3FF;
          if (v218 > 33538047) {
            LOBYTE(v222) = -1;
          }
          unsigned int v223 = (255 * ((v220 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v220 > 33538047) {
            LOBYTE(v223) = -1;
          }
          int v224 = (v177 >> 5) & 0x1FF8000;
          int v225 = v224 + v192;
          if (v220 >= -16384) {
            char v226 = v223;
          }
          else {
            char v226 = 0;
          }
          int v227 = v224 + v190;
          v123[16] = v226;
          int v228 = v224 + v191;
          if (v218 < -16384) {
            LOBYTE(v222) = 0;
          }
          v123[17] = v222;
          if (v217 < -16384) {
            LOBYTE(v221) = 0;
          }
          v123[18] = v221;
          unsigned int v229 = (255 * ((v225 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v225 > 33538047) {
            LOBYTE(v229) = -1;
          }
          unsigned int v230 = (255 * ((v227 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v227 > 33538047) {
            LOBYTE(v230) = -1;
          }
          unsigned int v231 = (255 * ((v228 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v228 > 33538047) {
            LOBYTE(v231) = -1;
          }
          if (v228 >= -16384) {
            char v232 = v231;
          }
          else {
            char v232 = 0;
          }
          v123[20] = v232;
          if (v227 >= -16384) {
            char v233 = v230;
          }
          else {
            char v233 = 0;
          }
          v123[21] = v233;
          if (v225 >= -16384) {
            char v234 = v229;
          }
          else {
            char v234 = 0;
          }
          v123[22] = v234;
          v123[19] = -1;
          v123[23] = -1;
          v18 += 6;
          v73 += 8;
          v74 += 24;
        }
        while (v18 < v295);
        uint64_t v235 = v280 & 0x3C;
        v25 = (_DWORD *)((char *)v33 + v235 + v73);
        v32 = (_DWORD *)((char *)v59 + v235 + v73);
        v31 = (_DWORD *)((char *)v31 + v73);
        v236 = (unsigned char *)(v21 + v74);
        v237 = (unsigned char *)(v27 + v74);
        unint64_t v11 = v279;
        unsigned int v238 = v281;
        uint64_t v239 = v289;
      }
      if (v18 < v11)
      {
        do
        {
          unint64_t v240 = *((unsigned __int8 *)&v298 + v238);
          unint64_t v241 = *((unsigned __int8 *)&v298 + v30);
          int v242 = ((*v31 >> v241) & 0x3FF) - 512;
          v243 = (_DWORD *)((char *)v31 + ((v241 >> 2) & 0x3C));
          if (v30 == 2) {
            unsigned int v244 = 0;
          }
          else {
            unsigned int v244 = v30 + 1;
          }
          unint64_t v245 = *((unsigned __int8 *)&v298 + v244);
          int v246 = (*v243 >> v245) & 0x3FF;
          v247 = (_DWORD *)((char *)v243 + ((v245 >> 2) & 0x3C));
          int v248 = v246 - 512;
          if (v244 == 2) {
            unsigned int v249 = 0;
          }
          else {
            unsigned int v249 = v244 + 1;
          }
          if (v18) {
            unsigned int v30 = v249;
          }
          int v250 = ((*v25 >> v240) & 0x3FF) << 15;
          if (v18) {
            v31 = v247;
          }
          int v251 = -5391 * v242 - 18721 * v248;
          int v252 = 61650 * v242;
          int v253 = 48320 * v248;
          int v254 = 48320 * v248 + v250;
          int v255 = v251 + v250;
          int v256 = v252 + v250;
          unsigned int v257 = (255 * ((v254 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v254 > 33538047) {
            LOBYTE(v257) = -1;
          }
          unsigned int v258 = (255 * ((v255 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v255 > 33538047) {
            LOBYTE(v258) = -1;
          }
          unsigned int v259 = (255 * ((v256 + 0x4000) >> 15) + 511) / 0x3FFu;
          uint64_t v260 = (v240 >> 2) & 0x3C;
          if (v256 > 33538047) {
            LOBYTE(v259) = -1;
          }
          if (v256 >= -16384) {
            char v261 = v259;
          }
          else {
            char v261 = 0;
          }
          unsigned char *v236 = v261;
          if (v255 >= -16384) {
            char v262 = v258;
          }
          else {
            char v262 = 0;
          }
          v236[1] = v262;
          if (v254 >= -16384) {
            char v263 = v257;
          }
          else {
            char v263 = 0;
          }
          v236[2] = v263;
          v236[3] = -1;
          v25 = (_DWORD *)((char *)v25 + v260);
          int v264 = *v32 >> v240;
          if (v238 == 2) {
            unsigned int v238 = 0;
          }
          else {
            ++v238;
          }
          v32 = (_DWORD *)((char *)v32 + v260);
          int v265 = (v264 & 0x3FF) << 15;
          int v266 = v265 + v253;
          int v267 = v265 + v251;
          int v268 = v265 + v252;
          unsigned int v269 = 255 * ((v268 + 0x4000) >> 15) + 511;
          unsigned int v270 = (255 * ((v266 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v266 > 33538047) {
            LOBYTE(v270) = -1;
          }
          unsigned int v271 = (255 * ((v267 + 0x4000) >> 15) + 511) / 0x3FFu;
          unint64_t v272 = (4198405 * (unint64_t)v269) >> 32;
          unsigned int v273 = v269 - v272;
          if (v267 > 33538047) {
            LOBYTE(v271) = -1;
          }
          unsigned int v274 = (v272 + (v273 >> 1)) >> 9;
          if (v268 > 33538047) {
            LOBYTE(v274) = -1;
          }
          if (v268 >= -16384) {
            char v275 = v274;
          }
          else {
            char v275 = 0;
          }
          unsigned char *v237 = v275;
          if (v267 >= -16384) {
            char v276 = v271;
          }
          else {
            char v276 = 0;
          }
          v237[1] = v276;
          if (v266 >= -16384) {
            char v277 = v270;
          }
          else {
            char v277 = 0;
          }
          v237[2] = v277;
          v237[3] = -1;
          v237 += 4;
          ++v18;
          v236 += 4;
        }
        while (v11 != v18);
      }
      uint64_t v22 = v285;
      v25 = &v291[v284];
      v26 = &v290[v284];
      uint64_t v17 = v294 + 1;
      uint64_t v21 = v293 + v282;
      uint64_t v27 = v239 + v282;
      unint64_t v24 = v292 + 4 * v283;
      unint64_t v18 = v287;
    }
    while (v294 + 1 != v286);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU709_BGRA(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  int v298 = 1313280;
  unint64_t v8 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  unint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  else {
    unint64_t v11 = v10 - v9;
  }
  unint64_t v12 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  unint64_t v13 = v10 % 6;
  BOOL v14 = v11 >= v13;
  unint64_t v15 = v11 - v13;
  if (v14) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = 0;
  }
  if (v12 >= 2)
  {
    uint64_t v17 = 0;
    unsigned int v288 = v9 % 3;
    unsigned int v281 = v16 % 3;
    unint64_t v18 = 6 * (v9 / 6) - v9 + 6;
    unint64_t v286 = v12 >> 1;
    uint64_t v19 = *a8;
    uint64_t v20 = *a8 * a6[5];
    uint64_t v21 = *a7 + v20;
    uint64_t v22 = 4 * a6[4];
    unint64_t v23 = a4[1];
    unint64_t v24 = a3[1] + v23 * (v8 >> 1) + 4 * (v9 / 3);
    v25 = (_DWORD *)(*a3 + *a4 * v8 + 4 * (v9 / 3));
    v26 = (_DWORD *)((char *)v25 + *a4);
    uint64_t v284 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v285 = v22;
    unint64_t v283 = v23 >> 2;
    uint64_t v282 = 2 * v19;
    uint64_t v27 = *a7 + v19 + v20;
    unint64_t v287 = v18;
    unint64_t v279 = v11;
    unint64_t v295 = v16;
    do
    {
      uint64_t v293 = v21;
      uint64_t v294 = v17;
      uint64_t v28 = 0;
      uint64_t v289 = v27;
      v290 = v26;
      unsigned int v29 = v288;
      unsigned int v30 = v288;
      v31 = (_DWORD *)v24;
      v32 = v26;
      v291 = v25;
      do
      {
        v33 = v25;
        unsigned int v34 = *v25;
        unint64_t v35 = *((unsigned __int8 *)&v298 + v29);
        unint64_t v36 = *((unsigned __int8 *)&v298 + v30);
        int v37 = ((*v31 >> v36) & 0x3FF) - 512;
        v38 = (_DWORD *)((char *)v31 + ((v36 >> 2) & 0x3C));
        if (v30 == 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = v30 + 1;
        }
        unint64_t v40 = *((unsigned __int8 *)&v298 + v39);
        unsigned int v41 = v34 >> v35;
        int v42 = *v38 >> v40;
        v43 = (_DWORD *)((char *)v38 + ((v40 >> 2) & 0x3C));
        int v44 = v42 & 0x3FF;
        if (v39 == 2) {
          unsigned int v45 = 0;
        }
        else {
          unsigned int v45 = v39 + 1;
        }
        if (v28) {
          unsigned int v30 = v45;
        }
        int v46 = (v41 & 0x3FF) << 15;
        int v47 = v44 - 512;
        int v48 = -6137 * v37 - 15338 * v47;
        int v49 = 60804 * v37;
        int v50 = 51603 * v47;
        int v51 = 51603 * v47 + v46;
        if (v28) {
          v31 = v43;
        }
        int v52 = v48 + v46;
        int v53 = v49 + v46;
        unsigned int v54 = (255 * ((v51 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v51 > 33538047) {
          LOBYTE(v54) = -1;
        }
        unsigned int v55 = (255 * ((v52 + 0x4000) >> 15) + 511) / 0x3FFu;
        unsigned int v56 = (255 * ((v53 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v52 > 33538047) {
          LOBYTE(v55) = -1;
        }
        if (v53 > 33538047) {
          LOBYTE(v56) = -1;
        }
        v57 = (unsigned char *)(v21 + v22);
        if (v53 >= -16384) {
          char v58 = v56;
        }
        else {
          char v58 = 0;
        }
        unsigned char *v57 = v58;
        v59 = v32;
        if (v52 >= -16384) {
          char v60 = v55;
        }
        else {
          char v60 = 0;
        }
        if (v51 < -16384) {
          LOBYTE(v54) = 0;
        }
        v57[1] = v60;
        v57[2] = v54;
        v57[3] = -1;
        int v61 = ((*v59 >> v35) & 0x3FF) << 15;
        int v62 = v61 + v50;
        int v63 = v61 + v48;
        int v64 = v61 + v49;
        if (v29 == 2) {
          unsigned int v29 = 0;
        }
        else {
          ++v29;
        }
        unsigned int v65 = (255 * ((v62 + 0x4000) >> 15) + 511) / 0x3FFu;
        unsigned int v66 = (255 * ((v63 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v62 > 33538047) {
          LOBYTE(v65) = -1;
        }
        if (v63 > 33538047) {
          LOBYTE(v66) = -1;
        }
        unsigned int v67 = (255 * ((v64 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v64 > 33538047) {
          LOBYTE(v67) = -1;
        }
        BOOL v68 = v64 < -16384;
        v69 = (unsigned char *)(v27 + v22);
        if (v68) {
          LOBYTE(v67) = 0;
        }
        unsigned char *v69 = v67;
        if (v63 >= -16384) {
          char v70 = v66;
        }
        else {
          char v70 = 0;
        }
        v69[1] = v70;
        unint64_t v71 = v35 >> 2;
        if (v62 >= -16384) {
          char v72 = v65;
        }
        else {
          char v72 = 0;
        }
        v69[2] = v72;
        v69[3] = -1;
        v25 = (_DWORD *)((char *)v33 + (v71 & 0x3C));
        v32 = (_DWORD *)((char *)v59 + (v71 & 0x3C));
        ++v28;
        v21 += 4;
        v27 += 4;
      }
      while (v18 != v28);
      unint64_t v292 = v24;
      if (v18 >= v16)
      {
        v236 = (unsigned char *)(v21 + v22);
        v237 = (unsigned char *)(v27 + v22);
        uint64_t v239 = v289;
        unsigned int v238 = v281;
      }
      else
      {
        unint64_t v73 = 0;
        char v280 = v71;
        v296 = (char *)v59 + (v71 & 0x3C);
        v297 = (char *)v33 + (v71 & 0x3C);
        uint64_t v74 = v22;
        do
        {
          unsigned int v75 = v31[v73 / 4];
          v76 = (unsigned char *)(v21 + v74);
          unsigned int v77 = *(_DWORD *)&v297[v73];
          int v78 = (v75 & 0x3FF) - 512;
          int v79 = (v77 & 0x3FF) << 15;
          int v80 = ((v75 >> 10) & 0x3FF) - 512;
          int v81 = -6137 * v78 - 15338 * v80;
          int v82 = 60804 * v78;
          int v83 = 51603 * v80;
          int v84 = v83 + v79;
          unsigned int v85 = *(_DWORD *)&v296[v73];
          int v86 = v81 + v79;
          int v87 = v82 + v79;
          unsigned int v88 = (255 * ((v84 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v84 > 33538047) {
            LOBYTE(v88) = -1;
          }
          unsigned int v89 = (255 * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          unsigned int v90 = (255 * ((v87 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047) {
            LOBYTE(v89) = -1;
          }
          if (v87 > 33538047) {
            LOBYTE(v90) = -1;
          }
          if (v87 < -16384) {
            LOBYTE(v90) = 0;
          }
          unsigned char *v76 = v90;
          int v91 = (32 * v77) & 0x1FF8000;
          int v92 = v83 + v91;
          if (v86 < -16384) {
            LOBYTE(v89) = 0;
          }
          unsigned int v93 = 255 * ((v83 + v91 + 0x4000) >> 15) + 511;
          int v94 = v81 + v91;
          unsigned int v95 = 255 * ((v81 + v91 + 0x4000) >> 15) + 511;
          int v96 = v82 + v91;
          v76[1] = v89;
          unsigned int v97 = 255 * ((v96 + 0x4000) >> 15) + 511;
          if (v84 >= -16384) {
            char v98 = v88;
          }
          else {
            char v98 = 0;
          }
          unsigned int v99 = v93 / 0x3FF;
          v76[2] = v98;
          unsigned int v100 = ((4198405 * (unint64_t)v95) >> 32)
               + ((v95 - ((4198405 * (unint64_t)v95) >> 32)) >> 1);
          if (v92 > 33538047) {
            LOBYTE(v99) = -1;
          }
          unsigned int v101 = v100 >> 9;
          unint64_t v102 = (4198405 * (unint64_t)v97) >> 32;
          unsigned int v103 = v97 - v102;
          if (v94 > 33538047) {
            LOBYTE(v101) = -1;
          }
          unsigned int v104 = (v102 + (v103 >> 1)) >> 9;
          if (v96 > 33538047) {
            LOBYTE(v104) = -1;
          }
          if (v96 < -16384) {
            LOBYTE(v104) = 0;
          }
          v76[4] = v104;
          int v105 = (v85 & 0x3FF) << 15;
          int v106 = v83 + v105;
          if (v94 < -16384) {
            LOBYTE(v101) = 0;
          }
          unsigned int v107 = 255 * ((v83 + v105 + 0x4000) >> 15) + 511;
          int v108 = v81 + v105;
          BOOL v68 = v92 < -16384;
          unsigned int v109 = 255 * ((v81 + v105 + 0x4000) >> 15) + 511;
          v76[5] = v101;
          int v110 = v105 + v82;
          int v111 = 255 * ((v105 + v82 + 0x4000) >> 15);
          if (v68) {
            LOBYTE(v99) = 0;
          }
          unsigned int v112 = v111 + 511;
          v76[6] = v99;
          unsigned int v113 = v107 / 0x3FF;
          unint64_t v114 = (4198405 * (unint64_t)v109) >> 32;
          unsigned int v115 = v109 - v114;
          if (v106 > 33538047) {
            LOBYTE(v113) = -1;
          }
          unsigned int v116 = (v114 + (v115 >> 1)) >> 9;
          if (v108 > 33538047) {
            LOBYTE(v116) = -1;
          }
          unsigned int v117 = v112 / 0x3FF;
          if (v110 > 33538047) {
            LOBYTE(v117) = -1;
          }
          if (v110 >= -16384) {
            char v118 = v117;
          }
          else {
            char v118 = 0;
          }
          int v119 = (32 * v85) & 0x1FF8000;
          int v120 = v83 + v119;
          BOOL v68 = v108 < -16384;
          int v121 = v81 + v119;
          int v122 = 255 * ((v81 + v119 + 0x4000) >> 15);
          v123 = (unsigned char *)(v27 + v74);
          v76[3] = -1;
          v76[7] = -1;
          *(unsigned char *)(v27 + v74) = v118;
          if (v68) {
            char v124 = 0;
          }
          else {
            char v124 = v116;
          }
          v123[3] = -1;
          int v125 = v119 + v82;
          unsigned int v126 = 255 * ((v125 + 0x4000) >> 15) + 511;
          v123[1] = v124;
          unsigned int v127 = (255 * ((v120 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v106 < -16384) {
            LOBYTE(v113) = 0;
          }
          if (v120 > 33538047) {
            LOBYTE(v127) = -1;
          }
          unsigned int v128 = (v122 + 511) / 0x3FFu;
          unint64_t v129 = (4198405 * (unint64_t)v126) >> 32;
          unsigned int v130 = v126 - v129;
          if (v121 > 33538047) {
            LOBYTE(v128) = -1;
          }
          unsigned int v131 = (v129 + (v130 >> 1)) >> 9;
          if (v125 > 33538047) {
            LOBYTE(v131) = -1;
          }
          v123[2] = v113;
          if (v125 >= -16384) {
            char v132 = v131;
          }
          else {
            char v132 = 0;
          }
          v123[4] = v132;
          if (v121 >= -16384) {
            char v133 = v128;
          }
          else {
            char v133 = 0;
          }
          v123[5] = v133;
          if (v120 >= -16384) {
            char v134 = v127;
          }
          else {
            char v134 = 0;
          }
          v123[6] = v134;
          v123[7] = -1;
          unsigned int v135 = v31[v73 / 4 + 1];
          int v136 = ((v75 >> 20) & 0x3FF) - 512;
          int v137 = (v135 & 0x3FF) - 512;
          int v138 = (v77 >> 5) & 0x1FF8000;
          int v139 = -6137 * v136 - 15338 * v137;
          int v140 = 60804 * v136;
          int v141 = 51603 * v137;
          int v142 = v141 + v138;
          int v143 = v139 + v138;
          int v144 = v140 + v138;
          unsigned int v145 = 255 * ((v143 + 0x4000) >> 15) + 511;
          unsigned int v146 = (255 * ((v142 + 0x4000) >> 15) + 511) / 0x3FFu;
          unint64_t v147 = (4198405 * (unint64_t)v145) >> 32;
          unsigned int v148 = v145 - v147;
          if (v142 > 33538047) {
            LOBYTE(v146) = -1;
          }
          unsigned int v149 = (v147 + (v148 >> 1)) >> 9;
          if (v143 > 33538047) {
            LOBYTE(v149) = -1;
          }
          unsigned int v150 = (255 * ((v144 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v144 > 33538047) {
            LOBYTE(v150) = -1;
          }
          if (v144 >= -16384) {
            char v151 = v150;
          }
          else {
            char v151 = 0;
          }
          v76[8] = v151;
          if (v143 >= -16384) {
            char v152 = v149;
          }
          else {
            char v152 = 0;
          }
          v76[9] = v152;
          if (v142 >= -16384) {
            char v153 = v146;
          }
          else {
            char v153 = 0;
          }
          v76[10] = v153;
          v76[11] = -1;
          unsigned int v154 = *(_DWORD *)&v297[v73 + 4];
          int v155 = (v154 & 0x3FF) << 15;
          int v156 = v155 + v141;
          int v157 = v155 + v139;
          int v158 = v155 + v140;
          unsigned int v159 = (255 * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v156 > 33538047) {
            LOBYTE(v159) = -1;
          }
          unsigned int v160 = (255 * ((v157 + 0x4000) >> 15) + 511) / 0x3FFu;
          unsigned int v161 = (255 * ((v158 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v157 > 33538047) {
            LOBYTE(v160) = -1;
          }
          if (v158 > 33538047) {
            LOBYTE(v161) = -1;
          }
          if (v158 >= -16384) {
            char v162 = v161;
          }
          else {
            char v162 = 0;
          }
          BOOL v68 = v157 < -16384;
          v76[12] = v162;
          int v163 = (v85 >> 5) & 0x1FF8000;
          int v164 = v141 + v163;
          int v165 = v141 + v163 + 0x4000;
          if (v68) {
            LOBYTE(v160) = 0;
          }
          int v166 = v139 + v163;
          int v167 = v140 + v163;
          v76[15] = -1;
          unsigned int v168 = 255 * ((v167 + 0x4000) >> 15) + 511;
          v76[13] = v160;
          unsigned int v169 = (255 * (v165 >> 15) + 511) / 0x3FFu;
          if (v156 < -16384) {
            LOBYTE(v159) = 0;
          }
          if (v164 > 33538047) {
            LOBYTE(v169) = -1;
          }
          unsigned int v170 = (255 * ((v166 + 0x4000) >> 15) + 511) / 0x3FFu;
          unint64_t v171 = (4198405 * (unint64_t)v168) >> 32;
          unsigned int v172 = v168 - v171;
          if (v166 > 33538047) {
            LOBYTE(v170) = -1;
          }
          unsigned int v173 = (v171 + (v172 >> 1)) >> 9;
          if (v167 > 33538047) {
            LOBYTE(v173) = -1;
          }
          v76[14] = v159;
          if (v167 >= -16384) {
            char v174 = v173;
          }
          else {
            char v174 = 0;
          }
          v123[8] = v174;
          if (v166 >= -16384) {
            char v175 = v170;
          }
          else {
            char v175 = 0;
          }
          v123[9] = v175;
          if (v164 >= -16384) {
            char v176 = v169;
          }
          else {
            char v176 = 0;
          }
          v123[10] = v176;
          v123[11] = -1;
          unsigned int v177 = *(_DWORD *)&v296[v73 + 4];
          int v178 = (v177 & 0x3FF) << 15;
          int v179 = v178 + v141;
          int v180 = v178 + v139;
          int v181 = v178 + v140;
          unsigned int v182 = (255 * ((v178 + v141 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v179 > 33538047) {
            char v183 = -1;
          }
          else {
            char v183 = v182;
          }
          if (v180 > 33538047) {
            char v184 = -1;
          }
          else {
            char v184 = (255 * ((v180 + 0x4000) >> 15) + 511) / 0x3FFu;
          }
          if (v181 > 33538047) {
            char v185 = -1;
          }
          else {
            char v185 = (255 * ((v181 + 0x4000) >> 15) + 511) / 0x3FFu;
          }
          if (v181 >= -16384) {
            char v186 = v185;
          }
          else {
            char v186 = 0;
          }
          v123[15] = -1;
          BOOL v68 = v180 < -16384;
          int v187 = ((v135 >> 10) & 0x3FF) - 512;
          int v188 = ((v135 >> 20) & 0x3FF) - 512;
          v123[12] = v186;
          int v189 = (32 * v154) & 0x1FF8000;
          int v190 = -15338 * v188 - 6137 * v187;
          int v191 = 60804 * v187;
          int v192 = 51603 * v188;
          if (v68) {
            char v184 = 0;
          }
          int v193 = v189 + v192;
          BOOL v68 = v179 < -16384;
          unsigned int v194 = 255 * ((v189 + v192 + 0x4000) >> 15) + 511;
          int v195 = v189 + v190;
          v123[13] = v184;
          unsigned int v196 = 255 * ((v189 + v190 + 0x4000) >> 15) + 511;
          int v197 = v189 + v191;
          int v198 = v189 + v191 + 0x4000;
          if (v68) {
            char v183 = 0;
          }
          unsigned int v199 = 255 * (v198 >> 15) + 511;
          v123[14] = v183;
          unsigned int v200 = v194 / 0x3FF;
          if (v193 > 33538047) {
            LOBYTE(v200) = -1;
          }
          unsigned int v201 = v196 / 0x3FF;
          if (v195 > 33538047) {
            LOBYTE(v201) = -1;
          }
          unsigned int v202 = v199 / 0x3FF;
          if (v197 > 33538047) {
            LOBYTE(v202) = -1;
          }
          int v203 = (v154 >> 5) & 0x1FF8000;
          int v204 = v203 + v192;
          if (v197 < -16384) {
            LOBYTE(v202) = 0;
          }
          BOOL v68 = v195 < -16384;
          int v205 = v203 + v190;
          int v206 = 255 * ((v203 + v190 + 0x4000) >> 15);
          v76[16] = v202;
          int v207 = v203 + v191;
          if (v68) {
            LOBYTE(v201) = 0;
          }
          BOOL v68 = v193 < -16384;
          unsigned int v208 = ((4198405 * (unint64_t)(v206 + 511)) >> 32)
               + ((v206 + 511 - ((4198405 * (unint64_t)(v206 + 511)) >> 32)) >> 1);
          unint64_t v16 = v295;
          v76[17] = v201;
          if (v68) {
            LOBYTE(v200) = 0;
          }
          v76[18] = v200;
          unsigned int v209 = (255 * ((v204 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v204 > 33538047) {
            LOBYTE(v209) = -1;
          }
          unsigned int v210 = v208 >> 9;
          if (v205 > 33538047) {
            LOBYTE(v210) = -1;
          }
          unsigned int v211 = (255 * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047) {
            LOBYTE(v211) = -1;
          }
          if (v207 >= -16384) {
            char v212 = v211;
          }
          else {
            char v212 = 0;
          }
          v76[20] = v212;
          if (v205 >= -16384) {
            char v213 = v210;
          }
          else {
            char v213 = 0;
          }
          v76[21] = v213;
          int v214 = 32 * v177;
          if (v204 >= -16384) {
            char v215 = v209;
          }
          else {
            char v215 = 0;
          }
          int v216 = v214 & 0x1FF8000;
          int v217 = (v214 & 0x1FF8000) + v192;
          v76[22] = v215;
          int v218 = v216 + v190;
          v76[19] = -1;
          unsigned int v219 = 255 * ((v216 + v190 + 0x4000) >> 15) + 511;
          int v220 = v216 + v191;
          v76[23] = -1;
          unsigned int v221 = (255 * ((v217 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v217 > 33538047) {
            LOBYTE(v221) = -1;
          }
          unsigned int v222 = v219 / 0x3FF;
          if (v218 > 33538047) {
            LOBYTE(v222) = -1;
          }
          unsigned int v223 = (255 * ((v220 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v220 > 33538047) {
            LOBYTE(v223) = -1;
          }
          int v224 = (v177 >> 5) & 0x1FF8000;
          int v225 = v224 + v192;
          if (v220 >= -16384) {
            char v226 = v223;
          }
          else {
            char v226 = 0;
          }
          int v227 = v224 + v190;
          v123[16] = v226;
          int v228 = v224 + v191;
          if (v218 < -16384) {
            LOBYTE(v222) = 0;
          }
          v123[17] = v222;
          if (v217 < -16384) {
            LOBYTE(v221) = 0;
          }
          v123[18] = v221;
          unsigned int v229 = (255 * ((v225 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v225 > 33538047) {
            LOBYTE(v229) = -1;
          }
          unsigned int v230 = (255 * ((v227 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v227 > 33538047) {
            LOBYTE(v230) = -1;
          }
          unsigned int v231 = (255 * ((v228 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v228 > 33538047) {
            LOBYTE(v231) = -1;
          }
          if (v228 >= -16384) {
            char v232 = v231;
          }
          else {
            char v232 = 0;
          }
          v123[20] = v232;
          if (v227 >= -16384) {
            char v233 = v230;
          }
          else {
            char v233 = 0;
          }
          v123[21] = v233;
          if (v225 >= -16384) {
            char v234 = v229;
          }
          else {
            char v234 = 0;
          }
          v123[22] = v234;
          v123[19] = -1;
          v123[23] = -1;
          v18 += 6;
          v73 += 8;
          v74 += 24;
        }
        while (v18 < v295);
        uint64_t v235 = v280 & 0x3C;
        v25 = (_DWORD *)((char *)v33 + v235 + v73);
        v32 = (_DWORD *)((char *)v59 + v235 + v73);
        v31 = (_DWORD *)((char *)v31 + v73);
        v236 = (unsigned char *)(v21 + v74);
        v237 = (unsigned char *)(v27 + v74);
        unint64_t v11 = v279;
        unsigned int v238 = v281;
        uint64_t v239 = v289;
      }
      if (v18 < v11)
      {
        do
        {
          unint64_t v240 = *((unsigned __int8 *)&v298 + v238);
          unint64_t v241 = *((unsigned __int8 *)&v298 + v30);
          int v242 = ((*v31 >> v241) & 0x3FF) - 512;
          v243 = (_DWORD *)((char *)v31 + ((v241 >> 2) & 0x3C));
          if (v30 == 2) {
            unsigned int v244 = 0;
          }
          else {
            unsigned int v244 = v30 + 1;
          }
          unint64_t v245 = *((unsigned __int8 *)&v298 + v244);
          int v246 = (*v243 >> v245) & 0x3FF;
          v247 = (_DWORD *)((char *)v243 + ((v245 >> 2) & 0x3C));
          int v248 = v246 - 512;
          if (v244 == 2) {
            unsigned int v249 = 0;
          }
          else {
            unsigned int v249 = v244 + 1;
          }
          if (v18) {
            unsigned int v30 = v249;
          }
          int v250 = ((*v25 >> v240) & 0x3FF) << 15;
          if (v18) {
            v31 = v247;
          }
          int v251 = -6137 * v242 - 15338 * v248;
          int v252 = 60804 * v242;
          int v253 = 51603 * v248;
          int v254 = 51603 * v248 + v250;
          int v255 = v251 + v250;
          int v256 = v252 + v250;
          unsigned int v257 = (255 * ((v254 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v254 > 33538047) {
            LOBYTE(v257) = -1;
          }
          unsigned int v258 = (255 * ((v255 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v255 > 33538047) {
            LOBYTE(v258) = -1;
          }
          unsigned int v259 = (255 * ((v256 + 0x4000) >> 15) + 511) / 0x3FFu;
          uint64_t v260 = (v240 >> 2) & 0x3C;
          if (v256 > 33538047) {
            LOBYTE(v259) = -1;
          }
          if (v256 >= -16384) {
            char v261 = v259;
          }
          else {
            char v261 = 0;
          }
          unsigned char *v236 = v261;
          if (v255 >= -16384) {
            char v262 = v258;
          }
          else {
            char v262 = 0;
          }
          v236[1] = v262;
          if (v254 >= -16384) {
            char v263 = v257;
          }
          else {
            char v263 = 0;
          }
          v236[2] = v263;
          v236[3] = -1;
          v25 = (_DWORD *)((char *)v25 + v260);
          int v264 = *v32 >> v240;
          if (v238 == 2) {
            unsigned int v238 = 0;
          }
          else {
            ++v238;
          }
          v32 = (_DWORD *)((char *)v32 + v260);
          int v265 = (v264 & 0x3FF) << 15;
          int v266 = v265 + v253;
          int v267 = v265 + v251;
          int v268 = v265 + v252;
          unsigned int v269 = 255 * ((v268 + 0x4000) >> 15) + 511;
          unsigned int v270 = (255 * ((v266 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v266 > 33538047) {
            LOBYTE(v270) = -1;
          }
          unsigned int v271 = (255 * ((v267 + 0x4000) >> 15) + 511) / 0x3FFu;
          unint64_t v272 = (4198405 * (unint64_t)v269) >> 32;
          unsigned int v273 = v269 - v272;
          if (v267 > 33538047) {
            LOBYTE(v271) = -1;
          }
          unsigned int v274 = (v272 + (v273 >> 1)) >> 9;
          if (v268 > 33538047) {
            LOBYTE(v274) = -1;
          }
          if (v268 >= -16384) {
            char v275 = v274;
          }
          else {
            char v275 = 0;
          }
          unsigned char *v237 = v275;
          if (v267 >= -16384) {
            char v276 = v271;
          }
          else {
            char v276 = 0;
          }
          v237[1] = v276;
          if (v266 >= -16384) {
            char v277 = v270;
          }
          else {
            char v277 = 0;
          }
          v237[2] = v277;
          v237[3] = -1;
          v237 += 4;
          ++v18;
          v236 += 4;
        }
        while (v11 != v18);
      }
      uint64_t v22 = v285;
      v25 = &v291[v284];
      v26 = &v290[v284];
      uint64_t v17 = v294 + 1;
      uint64_t v21 = v293 + v282;
      uint64_t v27 = v239 + v282;
      unint64_t v24 = v292 + 4 * v283;
      unint64_t v18 = v287;
    }
    while (v294 + 1 != v286);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU601_BGRA(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  int v298 = 1313280;
  unint64_t v8 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  unint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  else {
    unint64_t v11 = v10 - v9;
  }
  unint64_t v12 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  unint64_t v13 = v10 % 6;
  BOOL v14 = v11 >= v13;
  unint64_t v15 = v11 - v13;
  if (v14) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = 0;
  }
  if (v12 >= 2)
  {
    uint64_t v17 = 0;
    unsigned int v288 = v9 % 3;
    unsigned int v281 = v16 % 3;
    unint64_t v18 = 6 * (v9 / 6) - v9 + 6;
    unint64_t v286 = v12 >> 1;
    uint64_t v19 = *a8;
    uint64_t v20 = *a8 * a6[5];
    uint64_t v21 = *a7 + v20;
    uint64_t v22 = 4 * a6[4];
    unint64_t v23 = a4[1];
    unint64_t v24 = a3[1] + v23 * (v8 >> 1) + 4 * (v9 / 3);
    v25 = (_DWORD *)(*a3 + *a4 * v8 + 4 * (v9 / 3));
    v26 = (_DWORD *)((char *)v25 + *a4);
    uint64_t v284 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v285 = v22;
    unint64_t v283 = v23 >> 2;
    uint64_t v282 = 2 * v19;
    uint64_t v27 = *a7 + v19 + v20;
    unint64_t v287 = v18;
    unint64_t v279 = v11;
    unint64_t v295 = v16;
    do
    {
      uint64_t v293 = v21;
      uint64_t v294 = v17;
      uint64_t v28 = 0;
      uint64_t v289 = v27;
      v290 = v26;
      unsigned int v29 = v288;
      unsigned int v30 = v288;
      v31 = (_DWORD *)v24;
      v32 = v26;
      v291 = v25;
      do
      {
        v33 = v25;
        unsigned int v34 = *v25;
        unint64_t v35 = *((unsigned __int8 *)&v298 + v29);
        unint64_t v36 = *((unsigned __int8 *)&v298 + v30);
        int v37 = ((*v31 >> v36) & 0x3FF) - 512;
        v38 = (_DWORD *)((char *)v31 + ((v36 >> 2) & 0x3C));
        if (v30 == 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = v30 + 1;
        }
        unint64_t v40 = *((unsigned __int8 *)&v298 + v39);
        unsigned int v41 = v34 >> v35;
        int v42 = *v38 >> v40;
        v43 = (_DWORD *)((char *)v38 + ((v40 >> 2) & 0x3C));
        int v44 = v42 & 0x3FF;
        if (v39 == 2) {
          unsigned int v45 = 0;
        }
        else {
          unsigned int v45 = v39 + 1;
        }
        if (v28) {
          unsigned int v30 = v45;
        }
        int v46 = (v41 & 0x3FF) << 15;
        int v47 = v44 - 512;
        int v48 = -11276 * v37 - 23400 * v47;
        int v49 = 58065 * v37;
        int v50 = 45941 * v47;
        int v51 = 45941 * v47 + v46;
        if (v28) {
          v31 = v43;
        }
        int v52 = v48 + v46;
        int v53 = v49 + v46;
        unsigned int v54 = (255 * ((v51 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v51 > 33538047) {
          LOBYTE(v54) = -1;
        }
        unsigned int v55 = (255 * ((v52 + 0x4000) >> 15) + 511) / 0x3FFu;
        unsigned int v56 = (255 * ((v53 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v52 > 33538047) {
          LOBYTE(v55) = -1;
        }
        if (v53 > 33538047) {
          LOBYTE(v56) = -1;
        }
        v57 = (unsigned char *)(v21 + v22);
        if (v53 >= -16384) {
          char v58 = v56;
        }
        else {
          char v58 = 0;
        }
        unsigned char *v57 = v58;
        v59 = v32;
        if (v52 >= -16384) {
          char v60 = v55;
        }
        else {
          char v60 = 0;
        }
        if (v51 < -16384) {
          LOBYTE(v54) = 0;
        }
        v57[1] = v60;
        v57[2] = v54;
        v57[3] = -1;
        int v61 = ((*v59 >> v35) & 0x3FF) << 15;
        int v62 = v61 + v50;
        int v63 = v61 + v48;
        int v64 = v61 + v49;
        if (v29 == 2) {
          unsigned int v29 = 0;
        }
        else {
          ++v29;
        }
        unsigned int v65 = (255 * ((v62 + 0x4000) >> 15) + 511) / 0x3FFu;
        unsigned int v66 = (255 * ((v63 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v62 > 33538047) {
          LOBYTE(v65) = -1;
        }
        if (v63 > 33538047) {
          LOBYTE(v66) = -1;
        }
        unsigned int v67 = (255 * ((v64 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v64 > 33538047) {
          LOBYTE(v67) = -1;
        }
        BOOL v68 = v64 < -16384;
        v69 = (unsigned char *)(v27 + v22);
        if (v68) {
          LOBYTE(v67) = 0;
        }
        unsigned char *v69 = v67;
        if (v63 >= -16384) {
          char v70 = v66;
        }
        else {
          char v70 = 0;
        }
        v69[1] = v70;
        unint64_t v71 = v35 >> 2;
        if (v62 >= -16384) {
          char v72 = v65;
        }
        else {
          char v72 = 0;
        }
        v69[2] = v72;
        v69[3] = -1;
        v25 = (_DWORD *)((char *)v33 + (v71 & 0x3C));
        v32 = (_DWORD *)((char *)v59 + (v71 & 0x3C));
        ++v28;
        v21 += 4;
        v27 += 4;
      }
      while (v18 != v28);
      unint64_t v292 = v24;
      if (v18 >= v16)
      {
        v236 = (unsigned char *)(v21 + v22);
        v237 = (unsigned char *)(v27 + v22);
        uint64_t v239 = v289;
        unsigned int v238 = v281;
      }
      else
      {
        unint64_t v73 = 0;
        char v280 = v71;
        v296 = (char *)v59 + (v71 & 0x3C);
        v297 = (char *)v33 + (v71 & 0x3C);
        uint64_t v74 = v22;
        do
        {
          unsigned int v75 = v31[v73 / 4];
          v76 = (unsigned char *)(v21 + v74);
          unsigned int v77 = *(_DWORD *)&v297[v73];
          int v78 = (v75 & 0x3FF) - 512;
          int v79 = (v77 & 0x3FF) << 15;
          int v80 = ((v75 >> 10) & 0x3FF) - 512;
          int v81 = -11276 * v78 - 23400 * v80;
          int v82 = 58065 * v78;
          int v83 = 45941 * v80;
          int v84 = v83 + v79;
          unsigned int v85 = *(_DWORD *)&v296[v73];
          int v86 = v81 + v79;
          int v87 = v82 + v79;
          unsigned int v88 = (255 * ((v84 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v84 > 33538047) {
            LOBYTE(v88) = -1;
          }
          unsigned int v89 = (255 * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          unsigned int v90 = (255 * ((v87 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047) {
            LOBYTE(v89) = -1;
          }
          if (v87 > 33538047) {
            LOBYTE(v90) = -1;
          }
          if (v87 < -16384) {
            LOBYTE(v90) = 0;
          }
          unsigned char *v76 = v90;
          int v91 = (32 * v77) & 0x1FF8000;
          int v92 = v83 + v91;
          if (v86 < -16384) {
            LOBYTE(v89) = 0;
          }
          unsigned int v93 = 255 * ((v83 + v91 + 0x4000) >> 15) + 511;
          int v94 = v81 + v91;
          unsigned int v95 = 255 * ((v81 + v91 + 0x4000) >> 15) + 511;
          int v96 = v82 + v91;
          v76[1] = v89;
          unsigned int v97 = 255 * ((v96 + 0x4000) >> 15) + 511;
          if (v84 >= -16384) {
            char v98 = v88;
          }
          else {
            char v98 = 0;
          }
          unsigned int v99 = v93 / 0x3FF;
          v76[2] = v98;
          unsigned int v100 = ((4198405 * (unint64_t)v95) >> 32)
               + ((v95 - ((4198405 * (unint64_t)v95) >> 32)) >> 1);
          if (v92 > 33538047) {
            LOBYTE(v99) = -1;
          }
          unsigned int v101 = v100 >> 9;
          unint64_t v102 = (4198405 * (unint64_t)v97) >> 32;
          unsigned int v103 = v97 - v102;
          if (v94 > 33538047) {
            LOBYTE(v101) = -1;
          }
          unsigned int v104 = (v102 + (v103 >> 1)) >> 9;
          if (v96 > 33538047) {
            LOBYTE(v104) = -1;
          }
          if (v96 < -16384) {
            LOBYTE(v104) = 0;
          }
          v76[4] = v104;
          int v105 = (v85 & 0x3FF) << 15;
          int v106 = v83 + v105;
          if (v94 < -16384) {
            LOBYTE(v101) = 0;
          }
          unsigned int v107 = 255 * ((v83 + v105 + 0x4000) >> 15) + 511;
          int v108 = v81 + v105;
          BOOL v68 = v92 < -16384;
          unsigned int v109 = 255 * ((v81 + v105 + 0x4000) >> 15) + 511;
          v76[5] = v101;
          int v110 = v105 + v82;
          int v111 = 255 * ((v105 + v82 + 0x4000) >> 15);
          if (v68) {
            LOBYTE(v99) = 0;
          }
          unsigned int v112 = v111 + 511;
          v76[6] = v99;
          unsigned int v113 = v107 / 0x3FF;
          unint64_t v114 = (4198405 * (unint64_t)v109) >> 32;
          unsigned int v115 = v109 - v114;
          if (v106 > 33538047) {
            LOBYTE(v113) = -1;
          }
          unsigned int v116 = (v114 + (v115 >> 1)) >> 9;
          if (v108 > 33538047) {
            LOBYTE(v116) = -1;
          }
          unsigned int v117 = v112 / 0x3FF;
          if (v110 > 33538047) {
            LOBYTE(v117) = -1;
          }
          if (v110 >= -16384) {
            char v118 = v117;
          }
          else {
            char v118 = 0;
          }
          int v119 = (32 * v85) & 0x1FF8000;
          int v120 = v83 + v119;
          BOOL v68 = v108 < -16384;
          int v121 = v81 + v119;
          int v122 = 255 * ((v81 + v119 + 0x4000) >> 15);
          v123 = (unsigned char *)(v27 + v74);
          v76[3] = -1;
          v76[7] = -1;
          *(unsigned char *)(v27 + v74) = v118;
          if (v68) {
            char v124 = 0;
          }
          else {
            char v124 = v116;
          }
          v123[3] = -1;
          int v125 = v119 + v82;
          unsigned int v126 = 255 * ((v125 + 0x4000) >> 15) + 511;
          v123[1] = v124;
          unsigned int v127 = (255 * ((v120 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v106 < -16384) {
            LOBYTE(v113) = 0;
          }
          if (v120 > 33538047) {
            LOBYTE(v127) = -1;
          }
          unsigned int v128 = (v122 + 511) / 0x3FFu;
          unint64_t v129 = (4198405 * (unint64_t)v126) >> 32;
          unsigned int v130 = v126 - v129;
          if (v121 > 33538047) {
            LOBYTE(v128) = -1;
          }
          unsigned int v131 = (v129 + (v130 >> 1)) >> 9;
          if (v125 > 33538047) {
            LOBYTE(v131) = -1;
          }
          v123[2] = v113;
          if (v125 >= -16384) {
            char v132 = v131;
          }
          else {
            char v132 = 0;
          }
          v123[4] = v132;
          if (v121 >= -16384) {
            char v133 = v128;
          }
          else {
            char v133 = 0;
          }
          v123[5] = v133;
          if (v120 >= -16384) {
            char v134 = v127;
          }
          else {
            char v134 = 0;
          }
          v123[6] = v134;
          v123[7] = -1;
          unsigned int v135 = v31[v73 / 4 + 1];
          int v136 = ((v75 >> 20) & 0x3FF) - 512;
          int v137 = (v135 & 0x3FF) - 512;
          int v138 = (v77 >> 5) & 0x1FF8000;
          int v139 = -11276 * v136 - 23400 * v137;
          int v140 = 58065 * v136;
          int v141 = 45941 * v137;
          int v142 = v141 + v138;
          int v143 = v139 + v138;
          int v144 = v140 + v138;
          unsigned int v145 = 255 * ((v143 + 0x4000) >> 15) + 511;
          unsigned int v146 = (255 * ((v142 + 0x4000) >> 15) + 511) / 0x3FFu;
          unint64_t v147 = (4198405 * (unint64_t)v145) >> 32;
          unsigned int v148 = v145 - v147;
          if (v142 > 33538047) {
            LOBYTE(v146) = -1;
          }
          unsigned int v149 = (v147 + (v148 >> 1)) >> 9;
          if (v143 > 33538047) {
            LOBYTE(v149) = -1;
          }
          unsigned int v150 = (255 * ((v144 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v144 > 33538047) {
            LOBYTE(v150) = -1;
          }
          if (v144 >= -16384) {
            char v151 = v150;
          }
          else {
            char v151 = 0;
          }
          v76[8] = v151;
          if (v143 >= -16384) {
            char v152 = v149;
          }
          else {
            char v152 = 0;
          }
          v76[9] = v152;
          if (v142 >= -16384) {
            char v153 = v146;
          }
          else {
            char v153 = 0;
          }
          v76[10] = v153;
          v76[11] = -1;
          unsigned int v154 = *(_DWORD *)&v297[v73 + 4];
          int v155 = (v154 & 0x3FF) << 15;
          int v156 = v155 + v141;
          int v157 = v155 + v139;
          int v158 = v155 + v140;
          unsigned int v159 = (255 * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v156 > 33538047) {
            LOBYTE(v159) = -1;
          }
          unsigned int v160 = (255 * ((v157 + 0x4000) >> 15) + 511) / 0x3FFu;
          unsigned int v161 = (255 * ((v158 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v157 > 33538047) {
            LOBYTE(v160) = -1;
          }
          if (v158 > 33538047) {
            LOBYTE(v161) = -1;
          }
          if (v158 >= -16384) {
            char v162 = v161;
          }
          else {
            char v162 = 0;
          }
          BOOL v68 = v157 < -16384;
          v76[12] = v162;
          int v163 = (v85 >> 5) & 0x1FF8000;
          int v164 = v141 + v163;
          int v165 = v141 + v163 + 0x4000;
          if (v68) {
            LOBYTE(v160) = 0;
          }
          int v166 = v139 + v163;
          int v167 = v140 + v163;
          v76[15] = -1;
          unsigned int v168 = 255 * ((v167 + 0x4000) >> 15) + 511;
          v76[13] = v160;
          unsigned int v169 = (255 * (v165 >> 15) + 511) / 0x3FFu;
          if (v156 < -16384) {
            LOBYTE(v159) = 0;
          }
          if (v164 > 33538047) {
            LOBYTE(v169) = -1;
          }
          unsigned int v170 = (255 * ((v166 + 0x4000) >> 15) + 511) / 0x3FFu;
          unint64_t v171 = (4198405 * (unint64_t)v168) >> 32;
          unsigned int v172 = v168 - v171;
          if (v166 > 33538047) {
            LOBYTE(v170) = -1;
          }
          unsigned int v173 = (v171 + (v172 >> 1)) >> 9;
          if (v167 > 33538047) {
            LOBYTE(v173) = -1;
          }
          v76[14] = v159;
          if (v167 >= -16384) {
            char v174 = v173;
          }
          else {
            char v174 = 0;
          }
          v123[8] = v174;
          if (v166 >= -16384) {
            char v175 = v170;
          }
          else {
            char v175 = 0;
          }
          v123[9] = v175;
          if (v164 >= -16384) {
            char v176 = v169;
          }
          else {
            char v176 = 0;
          }
          v123[10] = v176;
          v123[11] = -1;
          unsigned int v177 = *(_DWORD *)&v296[v73 + 4];
          int v178 = (v177 & 0x3FF) << 15;
          int v179 = v178 + v141;
          int v180 = v178 + v139;
          int v181 = v178 + v140;
          unsigned int v182 = (255 * ((v178 + v141 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v179 > 33538047) {
            char v183 = -1;
          }
          else {
            char v183 = v182;
          }
          if (v180 > 33538047) {
            char v184 = -1;
          }
          else {
            char v184 = (255 * ((v180 + 0x4000) >> 15) + 511) / 0x3FFu;
          }
          if (v181 > 33538047) {
            char v185 = -1;
          }
          else {
            char v185 = (255 * ((v181 + 0x4000) >> 15) + 511) / 0x3FFu;
          }
          if (v181 >= -16384) {
            char v186 = v185;
          }
          else {
            char v186 = 0;
          }
          v123[15] = -1;
          BOOL v68 = v180 < -16384;
          int v187 = ((v135 >> 10) & 0x3FF) - 512;
          int v188 = ((v135 >> 20) & 0x3FF) - 512;
          v123[12] = v186;
          int v189 = (32 * v154) & 0x1FF8000;
          int v190 = -23400 * v188 - 11276 * v187;
          int v191 = 58065 * v187;
          int v192 = 45941 * v188;
          if (v68) {
            char v184 = 0;
          }
          int v193 = v189 + v192;
          BOOL v68 = v179 < -16384;
          unsigned int v194 = 255 * ((v189 + v192 + 0x4000) >> 15) + 511;
          int v195 = v189 + v190;
          v123[13] = v184;
          unsigned int v196 = 255 * ((v189 + v190 + 0x4000) >> 15) + 511;
          int v197 = v189 + v191;
          int v198 = v189 + v191 + 0x4000;
          if (v68) {
            char v183 = 0;
          }
          unsigned int v199 = 255 * (v198 >> 15) + 511;
          v123[14] = v183;
          unsigned int v200 = v194 / 0x3FF;
          if (v193 > 33538047) {
            LOBYTE(v200) = -1;
          }
          unsigned int v201 = v196 / 0x3FF;
          if (v195 > 33538047) {
            LOBYTE(v201) = -1;
          }
          unsigned int v202 = v199 / 0x3FF;
          if (v197 > 33538047) {
            LOBYTE(v202) = -1;
          }
          int v203 = (v154 >> 5) & 0x1FF8000;
          int v204 = v203 + v192;
          if (v197 < -16384) {
            LOBYTE(v202) = 0;
          }
          BOOL v68 = v195 < -16384;
          int v205 = v203 + v190;
          int v206 = 255 * ((v203 + v190 + 0x4000) >> 15);
          v76[16] = v202;
          int v207 = v203 + v191;
          if (v68) {
            LOBYTE(v201) = 0;
          }
          BOOL v68 = v193 < -16384;
          unsigned int v208 = ((4198405 * (unint64_t)(v206 + 511)) >> 32)
               + ((v206 + 511 - ((4198405 * (unint64_t)(v206 + 511)) >> 32)) >> 1);
          unint64_t v16 = v295;
          v76[17] = v201;
          if (v68) {
            LOBYTE(v200) = 0;
          }
          v76[18] = v200;
          unsigned int v209 = (255 * ((v204 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v204 > 33538047) {
            LOBYTE(v209) = -1;
          }
          unsigned int v210 = v208 >> 9;
          if (v205 > 33538047) {
            LOBYTE(v210) = -1;
          }
          unsigned int v211 = (255 * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047) {
            LOBYTE(v211) = -1;
          }
          if (v207 >= -16384) {
            char v212 = v211;
          }
          else {
            char v212 = 0;
          }
          v76[20] = v212;
          if (v205 >= -16384) {
            char v213 = v210;
          }
          else {
            char v213 = 0;
          }
          v76[21] = v213;
          int v214 = 32 * v177;
          if (v204 >= -16384) {
            char v215 = v209;
          }
          else {
            char v215 = 0;
          }
          int v216 = v214 & 0x1FF8000;
          int v217 = (v214 & 0x1FF8000) + v192;
          v76[22] = v215;
          int v218 = v216 + v190;
          v76[19] = -1;
          unsigned int v219 = 255 * ((v216 + v190 + 0x4000) >> 15) + 511;
          int v220 = v216 + v191;
          v76[23] = -1;
          unsigned int v221 = (255 * ((v217 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v217 > 33538047) {
            LOBYTE(v221) = -1;
          }
          unsigned int v222 = v219 / 0x3FF;
          if (v218 > 33538047) {
            LOBYTE(v222) = -1;
          }
          unsigned int v223 = (255 * ((v220 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v220 > 33538047) {
            LOBYTE(v223) = -1;
          }
          int v224 = (v177 >> 5) & 0x1FF8000;
          int v225 = v224 + v192;
          if (v220 >= -16384) {
            char v226 = v223;
          }
          else {
            char v226 = 0;
          }
          int v227 = v224 + v190;
          v123[16] = v226;
          int v228 = v224 + v191;
          if (v218 < -16384) {
            LOBYTE(v222) = 0;
          }
          v123[17] = v222;
          if (v217 < -16384) {
            LOBYTE(v221) = 0;
          }
          v123[18] = v221;
          unsigned int v229 = (255 * ((v225 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v225 > 33538047) {
            LOBYTE(v229) = -1;
          }
          unsigned int v230 = (255 * ((v227 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v227 > 33538047) {
            LOBYTE(v230) = -1;
          }
          unsigned int v231 = (255 * ((v228 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v228 > 33538047) {
            LOBYTE(v231) = -1;
          }
          if (v228 >= -16384) {
            char v232 = v231;
          }
          else {
            char v232 = 0;
          }
          v123[20] = v232;
          if (v227 >= -16384) {
            char v233 = v230;
          }
          else {
            char v233 = 0;
          }
          v123[21] = v233;
          if (v225 >= -16384) {
            char v234 = v229;
          }
          else {
            char v234 = 0;
          }
          v123[22] = v234;
          v123[19] = -1;
          v123[23] = -1;
          v18 += 6;
          v73 += 8;
          v74 += 24;
        }
        while (v18 < v295);
        uint64_t v235 = v280 & 0x3C;
        v25 = (_DWORD *)((char *)v33 + v235 + v73);
        v32 = (_DWORD *)((char *)v59 + v235 + v73);
        v31 = (_DWORD *)((char *)v31 + v73);
        v236 = (unsigned char *)(v21 + v74);
        v237 = (unsigned char *)(v27 + v74);
        unint64_t v11 = v279;
        unsigned int v238 = v281;
        uint64_t v239 = v289;
      }
      if (v18 < v11)
      {
        do
        {
          unint64_t v240 = *((unsigned __int8 *)&v298 + v238);
          unint64_t v241 = *((unsigned __int8 *)&v298 + v30);
          int v242 = ((*v31 >> v241) & 0x3FF) - 512;
          v243 = (_DWORD *)((char *)v31 + ((v241 >> 2) & 0x3C));
          if (v30 == 2) {
            unsigned int v244 = 0;
          }
          else {
            unsigned int v244 = v30 + 1;
          }
          unint64_t v245 = *((unsigned __int8 *)&v298 + v244);
          int v246 = (*v243 >> v245) & 0x3FF;
          v247 = (_DWORD *)((char *)v243 + ((v245 >> 2) & 0x3C));
          int v248 = v246 - 512;
          if (v244 == 2) {
            unsigned int v249 = 0;
          }
          else {
            unsigned int v249 = v244 + 1;
          }
          if (v18) {
            unsigned int v30 = v249;
          }
          int v250 = ((*v25 >> v240) & 0x3FF) << 15;
          if (v18) {
            v31 = v247;
          }
          int v251 = -11276 * v242 - 23400 * v248;
          int v252 = 58065 * v242;
          int v253 = 45941 * v248;
          int v254 = 45941 * v248 + v250;
          int v255 = v251 + v250;
          int v256 = v252 + v250;
          unsigned int v257 = (255 * ((v254 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v254 > 33538047) {
            LOBYTE(v257) = -1;
          }
          unsigned int v258 = (255 * ((v255 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v255 > 33538047) {
            LOBYTE(v258) = -1;
          }
          unsigned int v259 = (255 * ((v256 + 0x4000) >> 15) + 511) / 0x3FFu;
          uint64_t v260 = (v240 >> 2) & 0x3C;
          if (v256 > 33538047) {
            LOBYTE(v259) = -1;
          }
          if (v256 >= -16384) {
            char v261 = v259;
          }
          else {
            char v261 = 0;
          }
          unsigned char *v236 = v261;
          if (v255 >= -16384) {
            char v262 = v258;
          }
          else {
            char v262 = 0;
          }
          v236[1] = v262;
          if (v254 >= -16384) {
            char v263 = v257;
          }
          else {
            char v263 = 0;
          }
          v236[2] = v263;
          v236[3] = -1;
          v25 = (_DWORD *)((char *)v25 + v260);
          int v264 = *v32 >> v240;
          if (v238 == 2) {
            unsigned int v238 = 0;
          }
          else {
            ++v238;
          }
          v32 = (_DWORD *)((char *)v32 + v260);
          int v265 = (v264 & 0x3FF) << 15;
          int v266 = v265 + v253;
          int v267 = v265 + v251;
          int v268 = v265 + v252;
          unsigned int v269 = 255 * ((v268 + 0x4000) >> 15) + 511;
          unsigned int v270 = (255 * ((v266 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v266 > 33538047) {
            LOBYTE(v270) = -1;
          }
          unsigned int v271 = (255 * ((v267 + 0x4000) >> 15) + 511) / 0x3FFu;
          unint64_t v272 = (4198405 * (unint64_t)v269) >> 32;
          unsigned int v273 = v269 - v272;
          if (v267 > 33538047) {
            LOBYTE(v271) = -1;
          }
          unsigned int v274 = (v272 + (v273 >> 1)) >> 9;
          if (v268 > 33538047) {
            LOBYTE(v274) = -1;
          }
          if (v268 >= -16384) {
            char v275 = v274;
          }
          else {
            char v275 = 0;
          }
          unsigned char *v237 = v275;
          if (v267 >= -16384) {
            char v276 = v271;
          }
          else {
            char v276 = 0;
          }
          v237[1] = v276;
          if (v266 >= -16384) {
            char v277 = v270;
          }
          else {
            char v277 = 0;
          }
          v237[2] = v277;
          v237[3] = -1;
          v237 += 4;
          ++v18;
          v236 += 4;
        }
        while (v11 != v18);
      }
      uint64_t v22 = v285;
      v25 = &v291[v284];
      v26 = &v290[v284];
      uint64_t v17 = v294 + 1;
      uint64_t v21 = v293 + v282;
      uint64_t v27 = v239 + v282;
      unint64_t v24 = v292 + 4 * v283;
      unint64_t v18 = v287;
    }
    while (v294 + 1 != v286);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU2020_l64r(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  int v281 = 1313280;
  unint64_t v8 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  unint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  else {
    unint64_t v11 = v10 - v9;
  }
  unint64_t v12 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  unint64_t v13 = v10 % 6;
  BOOL v14 = v11 >= v13;
  unint64_t v15 = v11 - v13;
  if (v14) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = 0;
  }
  if (v12 >= 2)
  {
    uint64_t v17 = 0;
    unsigned int v270 = v9 % 3;
    unsigned int v263 = v16 % 3;
    unint64_t v18 = 6 * (v9 / 6) - v9 + 6;
    unint64_t v268 = v12 >> 1;
    uint64_t v19 = *a8;
    uint64_t v20 = *a8 * a6[5];
    uint64_t v21 = *a7 + v20;
    uint64_t v22 = 8 * a6[4];
    unint64_t v23 = a4[1];
    unint64_t v24 = a3[1] + v23 * (v8 >> 1) + 4 * (v9 / 3);
    unint64_t v25 = *a3 + *a4 * v8 + 4 * (v9 / 3);
    v26 = (_DWORD *)(v25 + *a4);
    uint64_t v266 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v267 = v22;
    unint64_t v265 = v23 >> 2;
    uint64_t v264 = 2 * v19;
    uint64_t v27 = *a7 + v19 + v20;
    unint64_t v269 = v18;
    unint64_t v260 = v11;
    unint64_t v277 = v16;
    do
    {
      uint64_t v28 = 0;
      uint64_t v271 = v27;
      uint64_t v272 = v21;
      unsigned int v29 = v270;
      unsigned int v30 = v270;
      v31 = (_DWORD *)v24;
      unsigned int v273 = v26;
      unint64_t v274 = v25;
      v32 = v26;
      v33 = (_DWORD *)v25;
      do
      {
        unsigned int v34 = v33;
        unsigned int v35 = *v33;
        unint64_t v36 = *((unsigned __int8 *)&v281 + v29);
        unint64_t v37 = *((unsigned __int8 *)&v281 + v30);
        int v38 = ((*v31 >> v37) & 0x3FF) - 512;
        unsigned int v39 = (_DWORD *)((char *)v31 + ((v37 >> 2) & 0x3C));
        if (v30 == 2) {
          unsigned int v40 = 0;
        }
        else {
          unsigned int v40 = v30 + 1;
        }
        unint64_t v41 = *((unsigned __int8 *)&v281 + v40);
        unsigned int v42 = v35 >> v36;
        int v43 = *v39 >> v41;
        int v44 = (_DWORD *)((char *)v39 + ((v41 >> 2) & 0x3C));
        int v45 = v43 & 0x3FF;
        if (v40 == 2) {
          unsigned int v46 = 0;
        }
        else {
          unsigned int v46 = v40 + 1;
        }
        if (v28)
        {
          v31 = v44;
          unsigned int v30 = v46;
        }
        int v47 = (v42 & 0x3FF) << 15;
        int v48 = -5391 * v38 - 18721 * (v45 - 512);
        int v49 = 61650 * v38;
        int v50 = 48320 * (v45 - 512);
        int v51 = v50 + v47;
        int v52 = v48 + v47;
        int v53 = v49 + v47;
        unsigned int v54 = v32;
        if (v51 > 33538047) {
          __int16 v55 = -1;
        }
        else {
          __int16 v55 = (0xFFFF * ((v51 + 0x4000) >> 15) + 511) / 0x3FFu;
        }
        if (v52 > 33538047) {
          __int16 v56 = -1;
        }
        else {
          __int16 v56 = (0xFFFF * ((v52 + 0x4000) >> 15) + 511) / 0x3FFu;
        }
        if (v53 > 33538047) {
          __int16 v57 = -1;
        }
        else {
          __int16 v57 = (0xFFFF * ((v53 + 0x4000) >> 15) + 511) / 0x3FFu;
        }
        char v58 = (__int16 *)(v21 + v22);
        if (v51 >= -16384) {
          __int16 v59 = v55;
        }
        else {
          __int16 v59 = 0;
        }
        *char v58 = v59;
        if (v52 >= -16384) {
          __int16 v60 = v56;
        }
        else {
          __int16 v60 = 0;
        }
        int v61 = ((*v54 >> v36) & 0x3FF) << 15;
        int v62 = v61 + v50;
        v58[1] = v60;
        int v63 = v61 + v48;
        if (v53 < -16384) {
          __int16 v57 = 0;
        }
        int v64 = v61 + v49;
        v58[2] = v57;
        if (v29 == 2) {
          unsigned int v29 = 0;
        }
        else {
          ++v29;
        }
        unsigned int v65 = (0xFFFF * ((v62 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v62 > 33538047) {
          LOWORD(v65) = -1;
        }
        unsigned int v66 = (0xFFFF * ((v63 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v63 > 33538047) {
          LOWORD(v66) = -1;
        }
        unsigned int v67 = (0xFFFF * ((v64 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v64 > 33538047) {
          LOWORD(v67) = -1;
        }
        v58[3] = -1;
        BOOL v68 = (_WORD *)(v27 + v22);
        if (v62 >= -16384) {
          __int16 v69 = v65;
        }
        else {
          __int16 v69 = 0;
        }
        *BOOL v68 = v69;
        if (v63 >= -16384) {
          __int16 v70 = v66;
        }
        else {
          __int16 v70 = 0;
        }
        v68[1] = v70;
        unint64_t v71 = v36 >> 2;
        if (v64 >= -16384) {
          __int16 v72 = v67;
        }
        else {
          __int16 v72 = 0;
        }
        v68[2] = v72;
        v68[3] = -1;
        v33 = (_DWORD *)((char *)v34 + (v71 & 0x3C));
        v32 = (_DWORD *)((char *)v54 + (v71 & 0x3C));
        ++v28;
        v21 += 8;
        v27 += 8;
      }
      while (v18 != v28);
      unint64_t v275 = v24;
      uint64_t v276 = v17;
      if (v18 >= v16)
      {
        int v216 = (_WORD *)(v21 + v22);
        int v217 = (_WORD *)(v27 + v22);
        uint64_t v219 = v271;
        uint64_t v220 = v272;
        unsigned int v218 = v263;
      }
      else
      {
        unint64_t v73 = 0;
        char v261 = v34;
        char v262 = v71;
        v278 = (char *)v54 + (v71 & 0x3C);
        unint64_t v279 = (char *)v34 + (v71 & 0x3C);
        do
        {
          uint64_t v280 = v22;
          uint64_t v74 = &v278[v73];
          unsigned int v75 = (_WORD *)(v21 + v22);
          unsigned int v76 = v31[v73 / 4];
          unsigned int v77 = v31[v73 / 4 + 1];
          int v78 = (v76 & 0x3FF) - 512;
          unsigned int v80 = *(_DWORD *)&v279[v73];
          unsigned int v79 = *(_DWORD *)&v279[v73 + 4];
          int v81 = ((v76 >> 10) & 0x3FF) - 512;
          int v82 = (v80 & 0x3FF) << 15;
          int v83 = 61650 * v78;
          int v84 = 48320 * v81;
          int v85 = -5391 * v78 - 18721 * v81;
          int v86 = v84 + v82;
          int v87 = v85 + v82;
          int v88 = v83 + v82;
          unsigned int v89 = (0xFFFF * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047) {
            LOWORD(v89) = -1;
          }
          unsigned int v90 = (0xFFFF * ((v87 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v87 > 33538047) {
            LOWORD(v90) = -1;
          }
          unsigned int v91 = (0xFFFF * ((v88 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v88 > 33538047) {
            LOWORD(v91) = -1;
          }
          if (v86 >= -16384) {
            __int16 v92 = v89;
          }
          else {
            __int16 v92 = 0;
          }
          *unsigned int v75 = v92;
          BOOL v93 = v87 < -16384;
          int v94 = (32 * v80) & 0x1FF8000;
          int v95 = v84 + v94;
          if (v93) {
            LOWORD(v90) = 0;
          }
          unsigned int v96 = 0xFFFF * ((v84 + v94 + 0x4000) >> 15) + 511;
          int v97 = v85 + v94;
          unsigned int v98 = 0xFFFF * ((v85 + v94 + 0x4000) >> 15) + 511;
          v75[1] = v90;
          int v99 = v83 + v94;
          if (v88 >= -16384) {
            __int16 v100 = v91;
          }
          else {
            __int16 v100 = 0;
          }
          v75[2] = v100;
          unsigned int v101 = v96 / 0x3FF;
          unint64_t v102 = (4198405 * (unint64_t)v98) >> 32;
          unsigned int v103 = v98 - v102;
          if (v95 > 33538047) {
            LOWORD(v101) = -1;
          }
          unsigned int v104 = (v102 + (v103 >> 1)) >> 9;
          if (v97 > 33538047) {
            LOWORD(v104) = -1;
          }
          if (v99 > 33538047) {
            __int16 v105 = -1;
          }
          else {
            __int16 v105 = (0xFFFF * ((v99 + 0x4000) >> 15) + 511) / 0x3FFu;
          }
          if (v95 >= -16384) {
            __int16 v106 = v101;
          }
          else {
            __int16 v106 = 0;
          }
          v75[4] = v106;
          if (v97 >= -16384) {
            __int16 v107 = v104;
          }
          else {
            __int16 v107 = 0;
          }
          BOOL v93 = v99 < -16384;
          unsigned int v108 = *(_DWORD *)v74;
          unsigned int v109 = *((_DWORD *)v74 + 1);
          int v110 = (*(_DWORD *)v74 & 0x3FF) << 15;
          int v111 = v84 + v110;
          v75[5] = v107;
          unsigned int v112 = 0xFFFF * ((v84 + v110 + 0x4000) >> 15) + 511;
          int v113 = v85 + v110;
          int v114 = v85 + v110 + 0x4000;
          if (v93) {
            __int16 v105 = 0;
          }
          int v115 = v110 + v83;
          v75[6] = v105;
          unsigned int v116 = (_WORD *)(v27 + v280);
          v75[3] = -1;
          v75[7] = -1;
          unsigned int v117 = v112 / 0x3FF;
          unsigned int v118 = (0xFFFF * (v114 >> 15) + 511) / 0x3FFu;
          if (v111 > 33538047) {
            LOWORD(v117) = -1;
          }
          if (v113 > 33538047) {
            LOWORD(v118) = -1;
          }
          unsigned int v119 = (0xFFFF * ((v115 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v115 > 33538047) {
            LOWORD(v119) = -1;
          }
          if (v111 >= -16384) {
            __int16 v120 = v117;
          }
          else {
            __int16 v120 = 0;
          }
          *unsigned int v116 = v120;
          v116[3] = -1;
          if (v113 >= -16384) {
            __int16 v121 = v118;
          }
          else {
            __int16 v121 = 0;
          }
          int v122 = (32 * v108) & 0x1FF8000;
          int v123 = v84 + v122;
          int v124 = v85 + v122;
          v116[1] = v121;
          int v125 = v122 + v83;
          if (v115 >= -16384) {
            __int16 v126 = v119;
          }
          else {
            __int16 v126 = 0;
          }
          v116[2] = v126;
          unsigned int v127 = (0xFFFF * ((v123 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v123 > 33538047) {
            LOWORD(v127) = -1;
          }
          unsigned int v128 = (0xFFFF * ((v124 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v124 > 33538047) {
            LOWORD(v128) = -1;
          }
          if (v125 > 33538047) {
            __int16 v129 = -1;
          }
          else {
            __int16 v129 = (0xFFFF * ((v125 + 0x4000) >> 15) + 511) / 0x3FFu;
          }
          if (v123 >= -16384) {
            __int16 v130 = v127;
          }
          else {
            __int16 v130 = 0;
          }
          v116[7] = -1;
          BOOL v93 = v124 < -16384;
          int v131 = ((v76 >> 20) & 0x3FF) - 512;
          int v132 = (v77 & 0x3FF) - 512;
          v116[4] = v130;
          int v133 = (v80 >> 5) & 0x1FF8000;
          int v134 = -5391 * v131 - 18721 * v132;
          int v135 = 61650 * v131;
          int v136 = 48320 * v132;
          if (v93) {
            __int16 v137 = 0;
          }
          else {
            __int16 v137 = v128;
          }
          int v138 = v136 + v133;
          BOOL v93 = v125 < -16384;
          unsigned int v139 = 0xFFFF * ((v136 + v133 + 0x4000) >> 15) + 511;
          int v140 = v134 + v133;
          v116[5] = v137;
          unsigned int v141 = 0xFFFF * ((v134 + v133 + 0x4000) >> 15) + 511;
          int v142 = v135 + v133;
          if (v93) {
            __int16 v129 = 0;
          }
          v116[6] = v129;
          unsigned int v143 = v139 / 0x3FF;
          if (v138 > 33538047) {
            LOWORD(v143) = -1;
          }
          unsigned int v144 = v141 / 0x3FF;
          if (v140 > 33538047) {
            LOWORD(v144) = -1;
          }
          unsigned int v145 = (0xFFFF * ((v142 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v142 > 33538047) {
            LOWORD(v145) = -1;
          }
          if (v138 < -16384) {
            LOWORD(v143) = 0;
          }
          v75[8] = v143;
          if (v140 < -16384) {
            LOWORD(v144) = 0;
          }
          int v146 = (v79 & 0x3FF) << 15;
          int v147 = v146 + v136;
          int v148 = v146 + v134;
          v75[9] = v144;
          int v149 = 0xFFFF * ((v146 + v134 + 0x4000) >> 15);
          int v150 = v146 + v135;
          if (v142 < -16384) {
            LOWORD(v145) = 0;
          }
          v75[11] = -1;
          unsigned int v151 = (0xFFFF * ((v147 + 0x4000) >> 15) + 511) / 0x3FFu;
          v75[10] = v145;
          unsigned int v152 = (v149 + 511) / 0x3FFu;
          if (v147 > 33538047) {
            LOWORD(v151) = -1;
          }
          if (v148 > 33538047) {
            LOWORD(v152) = -1;
          }
          unsigned int v153 = (0xFFFF * ((v150 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v150 > 33538047) {
            LOWORD(v153) = -1;
          }
          if (v147 >= -16384) {
            __int16 v154 = v151;
          }
          else {
            __int16 v154 = 0;
          }
          v75[12] = v154;
          v75[15] = -1;
          int v155 = (v108 >> 5) & 0x1FF8000;
          int v156 = v136 + v155;
          if (v148 < -16384) {
            LOWORD(v152) = 0;
          }
          BOOL v93 = v150 < -16384;
          int v157 = v134 + v155;
          v75[13] = v152;
          unsigned int v158 = 0xFFFF * ((v134 + v155 + 0x4000) >> 15) + 511;
          int v159 = v135 + v155;
          if (v93) {
            LOWORD(v153) = 0;
          }
          v75[14] = v153;
          unsigned int v160 = (0xFFFF * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v156 > 33538047) {
            LOWORD(v160) = -1;
          }
          unsigned int v161 = v158 / 0x3FF;
          if (v157 > 33538047) {
            LOWORD(v161) = -1;
          }
          unsigned int v162 = (0xFFFF * ((v159 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v159 > 33538047) {
            LOWORD(v162) = -1;
          }
          if (v156 >= -16384) {
            __int16 v163 = v160;
          }
          else {
            __int16 v163 = 0;
          }
          v116[8] = v163;
          v116[11] = -1;
          if (v157 < -16384) {
            LOWORD(v161) = 0;
          }
          int v164 = (v109 & 0x3FF) << 15;
          int v165 = v164 + v136;
          int v166 = v164 + v134;
          v116[9] = v161;
          int v167 = v164 + v135;
          if (v159 >= -16384) {
            __int16 v168 = v162;
          }
          else {
            __int16 v168 = 0;
          }
          v116[10] = v168;
          unsigned int v169 = (0xFFFF * ((v165 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v165 > 33538047) {
            LOWORD(v169) = -1;
          }
          unsigned int v170 = (0xFFFF * ((v166 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v166 > 33538047) {
            LOWORD(v170) = -1;
          }
          if (v167 > 33538047) {
            __int16 v171 = -1;
          }
          else {
            __int16 v171 = (0xFFFF * ((v167 + 0x4000) >> 15) + 511) / 0x3FFu;
          }
          if (v165 >= -16384) {
            __int16 v172 = v169;
          }
          else {
            __int16 v172 = 0;
          }
          v116[15] = -1;
          BOOL v93 = v166 < -16384;
          int v173 = ((v77 >> 10) & 0x3FF) - 512;
          int v174 = ((v77 >> 20) & 0x3FF) - 512;
          v116[12] = v172;
          int v175 = (32 * v79) & 0x1FF8000;
          int v176 = -18721 * v174 - 5391 * v173;
          int v177 = 61650 * v173;
          int v178 = 48320 * v174;
          if (v93) {
            LOWORD(v170) = 0;
          }
          int v179 = v175 + v178;
          BOOL v93 = v167 < -16384;
          unsigned int v180 = 0xFFFF * ((v175 + v178 + 0x4000) >> 15) + 511;
          int v181 = v175 + v176;
          v116[13] = v170;
          unsigned int v182 = 0xFFFF * ((v175 + v176 + 0x4000) >> 15) + 511;
          int v183 = v175 + v177;
          if (v93) {
            __int16 v171 = 0;
          }
          v116[14] = v171;
          unsigned int v184 = v180 / 0x3FF;
          if (v179 > 33538047) {
            LOWORD(v184) = -1;
          }
          unsigned int v185 = v182 / 0x3FF;
          if (v181 > 33538047) {
            LOWORD(v185) = -1;
          }
          unsigned int v186 = (0xFFFF * ((v183 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v183 > 33538047) {
            LOWORD(v186) = -1;
          }
          BOOL v93 = v179 < -16384;
          int v187 = (v79 >> 5) & 0x1FF8000;
          int v188 = v187 + v178;
          if (v93) {
            LOWORD(v184) = 0;
          }
          BOOL v93 = v181 < -16384;
          int v189 = v187 + v176;
          int v190 = 0xFFFF * ((v187 + v176 + 0x4000) >> 15);
          v75[16] = v184;
          int v191 = v187 + v177;
          if (v93) {
            LOWORD(v185) = 0;
          }
          v75[17] = v185;
          if (v183 >= -16384) {
            __int16 v192 = v186;
          }
          else {
            __int16 v192 = 0;
          }
          v75[18] = v192;
          unsigned int v193 = (0xFFFF * ((v188 + 0x4000) >> 15) + 511) / 0x3FFu;
          unint64_t v16 = v277;
          if (v188 > 33538047) {
            LOWORD(v193) = -1;
          }
          unsigned int v194 = (v190 + 511) / 0x3FFu;
          if (v189 > 33538047) {
            LOWORD(v194) = -1;
          }
          unsigned int v195 = (0xFFFF * ((v191 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v191 > 33538047) {
            LOWORD(v195) = -1;
          }
          if (v188 < -16384) {
            LOWORD(v193) = 0;
          }
          v75[20] = v193;
          if (v189 < -16384) {
            LOWORD(v194) = 0;
          }
          v75[21] = v194;
          if (v191 < -16384) {
            LOWORD(v195) = 0;
          }
          int v196 = (32 * v109) & 0x1FF8000;
          int v197 = v196 + v178;
          v75[22] = v195;
          int v198 = v196 + v176;
          v75[19] = -1;
          unsigned int v199 = 0xFFFF * ((v196 + v176 + 0x4000) >> 15) + 511;
          int v200 = v196 + v177;
          v75[23] = -1;
          unsigned int v201 = (0xFFFF * ((v197 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v197 > 33538047) {
            LOWORD(v201) = -1;
          }
          unsigned int v202 = v199 / 0x3FF;
          if (v198 > 33538047) {
            LOWORD(v202) = -1;
          }
          unsigned int v203 = (0xFFFF * ((v200 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v200 > 33538047) {
            LOWORD(v203) = -1;
          }
          int v204 = (v109 >> 5) & 0x1FF8000;
          int v205 = v204 + v178;
          if (v197 < -16384) {
            LOWORD(v201) = 0;
          }
          int v206 = v204 + v176;
          v116[16] = v201;
          int v207 = v204 + v177;
          if (v198 >= -16384) {
            __int16 v208 = v202;
          }
          else {
            __int16 v208 = 0;
          }
          v116[17] = v208;
          if (v200 < -16384) {
            LOWORD(v203) = 0;
          }
          v116[18] = v203;
          unsigned int v209 = (0xFFFF * ((v205 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v205 > 33538047) {
            LOWORD(v209) = -1;
          }
          unsigned int v210 = (0xFFFF * ((v206 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v206 > 33538047) {
            LOWORD(v210) = -1;
          }
          unsigned int v211 = (0xFFFF * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047) {
            LOWORD(v211) = -1;
          }
          if (v205 >= -16384) {
            __int16 v212 = v209;
          }
          else {
            __int16 v212 = 0;
          }
          v116[20] = v212;
          if (v206 >= -16384) {
            __int16 v213 = v210;
          }
          else {
            __int16 v213 = 0;
          }
          v116[21] = v213;
          if (v207 >= -16384) {
            __int16 v214 = v211;
          }
          else {
            __int16 v214 = 0;
          }
          v116[22] = v214;
          v116[19] = -1;
          v116[23] = -1;
          v18 += 6;
          v73 += 8;
          uint64_t v22 = v280 + 48;
        }
        while (v18 < v277);
        uint64_t v215 = v262 & 0x3C;
        unint64_t v11 = v260;
        v33 = (_DWORD *)((char *)v261 + v215 + v73);
        v32 = (_DWORD *)((char *)v54 + v215 + v73);
        v31 = (_DWORD *)((char *)v31 + v73);
        int v216 = (_WORD *)(v21 + v22);
        int v217 = (_WORD *)(v27 + v22);
        unsigned int v218 = v263;
        uint64_t v219 = v271;
        uint64_t v220 = v272;
      }
      if (v18 < v11)
      {
        do
        {
          unint64_t v221 = *((unsigned __int8 *)&v281 + v218);
          int v222 = *v33 >> v221;
          unint64_t v223 = *((unsigned __int8 *)&v281 + v30);
          uint64_t v224 = (v221 >> 2) & 0x3C;
          int v225 = ((*v31 >> v223) & 0x3FF) - 512;
          char v226 = (_DWORD *)((char *)v31 + ((v223 >> 2) & 0x3C));
          if (v30 == 2) {
            unsigned int v227 = 0;
          }
          else {
            unsigned int v227 = v30 + 1;
          }
          unint64_t v228 = *((unsigned __int8 *)&v281 + v227);
          v33 = (_DWORD *)((char *)v33 + v224);
          int v229 = *v226 >> v228;
          unsigned int v230 = (_DWORD *)((char *)v226 + ((v228 >> 2) & 0x3C));
          int v231 = v229 & 0x3FF;
          if (v227 == 2) {
            unsigned int v232 = 0;
          }
          else {
            unsigned int v232 = v227 + 1;
          }
          if (v18) {
            unsigned int v30 = v232;
          }
          int v233 = (v222 & 0x3FF) << 15;
          int v234 = v231 - 512;
          int v235 = -5391 * v225 - 18721 * v234;
          int v236 = 61650 * v225;
          int v237 = 48320 * v234;
          int v238 = 48320 * v234 + v233;
          if (v18) {
            v31 = v230;
          }
          int v239 = v235 + v233;
          int v240 = v236 + v233;
          unsigned int v241 = (0xFFFF * ((v238 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v238 > 33538047) {
            LOWORD(v241) = -1;
          }
          unsigned int v242 = (0xFFFF * ((v239 + 0x4000) >> 15) + 511) / 0x3FFu;
          unsigned int v243 = (0xFFFF * ((v240 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v239 > 33538047) {
            LOWORD(v242) = -1;
          }
          if (v240 > 33538047) {
            LOWORD(v243) = -1;
          }
          if (v238 < -16384) {
            LOWORD(v241) = 0;
          }
          *int v216 = v241;
          if (v239 >= -16384) {
            __int16 v244 = v242;
          }
          else {
            __int16 v244 = 0;
          }
          v216[3] = -1;
          int v245 = *v32 >> v221;
          v32 = (_DWORD *)((char *)v32 + v224);
          int v246 = (v245 & 0x3FF) << 15;
          int v247 = v246 + v237;
          v216[1] = v244;
          int v248 = v246 + v235;
          if (v240 >= -16384) {
            __int16 v249 = v243;
          }
          else {
            __int16 v249 = 0;
          }
          int v250 = v246 + v236;
          unsigned int v251 = 0xFFFF * ((v250 + 0x4000) >> 15) + 511;
          v216[2] = v249;
          unsigned int v252 = (0xFFFF * ((v247 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v218 == 2) {
            unsigned int v218 = 0;
          }
          else {
            ++v218;
          }
          if (v247 > 33538047) {
            LOWORD(v252) = -1;
          }
          unsigned int v253 = (0xFFFF * ((v248 + 0x4000) >> 15) + 511) / 0x3FFu;
          unint64_t v254 = (4198405 * (unint64_t)v251) >> 32;
          unsigned int v255 = v251 - v254;
          if (v248 > 33538047) {
            LOWORD(v253) = -1;
          }
          unsigned int v256 = (v254 + (v255 >> 1)) >> 9;
          if (v250 > 33538047) {
            LOWORD(v256) = -1;
          }
          if (v247 < -16384) {
            LOWORD(v252) = 0;
          }
          *int v217 = v252;
          if (v248 >= -16384) {
            __int16 v257 = v253;
          }
          else {
            __int16 v257 = 0;
          }
          v217[1] = v257;
          if (v250 >= -16384) {
            __int16 v258 = v256;
          }
          else {
            __int16 v258 = 0;
          }
          v217[2] = v258;
          v217[3] = -1;
          ++v18;
          v216 += 4;
          v217 += 4;
        }
        while (v11 != v18);
      }
      uint64_t v22 = v267;
      unint64_t v25 = v274 + 4 * v266;
      v26 = &v273[v266];
      uint64_t v17 = v276 + 1;
      uint64_t v21 = v220 + v264;
      uint64_t v27 = v219 + v264;
      unint64_t v24 = v275 + 4 * v265;
      unint64_t v18 = v269;
    }
    while (v276 + 1 != v268);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU709_l64r(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  int v281 = 1313280;
  unint64_t v8 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  unint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  else {
    unint64_t v11 = v10 - v9;
  }
  unint64_t v12 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  unint64_t v13 = v10 % 6;
  BOOL v14 = v11 >= v13;
  unint64_t v15 = v11 - v13;
  if (v14) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = 0;
  }
  if (v12 >= 2)
  {
    uint64_t v17 = 0;
    unsigned int v270 = v9 % 3;
    unsigned int v263 = v16 % 3;
    unint64_t v18 = 6 * (v9 / 6) - v9 + 6;
    unint64_t v268 = v12 >> 1;
    uint64_t v19 = *a8;
    uint64_t v20 = *a8 * a6[5];
    uint64_t v21 = *a7 + v20;
    uint64_t v22 = 8 * a6[4];
    unint64_t v23 = a4[1];
    unint64_t v24 = a3[1] + v23 * (v8 >> 1) + 4 * (v9 / 3);
    unint64_t v25 = *a3 + *a4 * v8 + 4 * (v9 / 3);
    v26 = (_DWORD *)(v25 + *a4);
    uint64_t v266 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v267 = v22;
    unint64_t v265 = v23 >> 2;
    uint64_t v264 = 2 * v19;
    uint64_t v27 = *a7 + v19 + v20;
    unint64_t v269 = v18;
    unint64_t v260 = v11;
    unint64_t v277 = v16;
    do
    {
      uint64_t v28 = 0;
      uint64_t v271 = v27;
      uint64_t v272 = v21;
      unsigned int v29 = v270;
      unsigned int v30 = v270;
      v31 = (_DWORD *)v24;
      unsigned int v273 = v26;
      unint64_t v274 = v25;
      v32 = v26;
      v33 = (_DWORD *)v25;
      do
      {
        unsigned int v34 = v33;
        unsigned int v35 = *v33;
        unint64_t v36 = *((unsigned __int8 *)&v281 + v29);
        unint64_t v37 = *((unsigned __int8 *)&v281 + v30);
        int v38 = ((*v31 >> v37) & 0x3FF) - 512;
        unsigned int v39 = (_DWORD *)((char *)v31 + ((v37 >> 2) & 0x3C));
        if (v30 == 2) {
          unsigned int v40 = 0;
        }
        else {
          unsigned int v40 = v30 + 1;
        }
        unint64_t v41 = *((unsigned __int8 *)&v281 + v40);
        unsigned int v42 = v35 >> v36;
        int v43 = *v39 >> v41;
        int v44 = (_DWORD *)((char *)v39 + ((v41 >> 2) & 0x3C));
        int v45 = v43 & 0x3FF;
        if (v40 == 2) {
          unsigned int v46 = 0;
        }
        else {
          unsigned int v46 = v40 + 1;
        }
        if (v28)
        {
          v31 = v44;
          unsigned int v30 = v46;
        }
        int v47 = (v42 & 0x3FF) << 15;
        int v48 = -6137 * v38 - 15338 * (v45 - 512);
        int v49 = 60804 * v38;
        int v50 = 51603 * (v45 - 512);
        int v51 = v50 + v47;
        int v52 = v48 + v47;
        int v53 = v49 + v47;
        unsigned int v54 = v32;
        if (v51 > 33538047) {
          __int16 v55 = -1;
        }
        else {
          __int16 v55 = (0xFFFF * ((v51 + 0x4000) >> 15) + 511) / 0x3FFu;
        }
        if (v52 > 33538047) {
          __int16 v56 = -1;
        }
        else {
          __int16 v56 = (0xFFFF * ((v52 + 0x4000) >> 15) + 511) / 0x3FFu;
        }
        if (v53 > 33538047) {
          __int16 v57 = -1;
        }
        else {
          __int16 v57 = (0xFFFF * ((v53 + 0x4000) >> 15) + 511) / 0x3FFu;
        }
        char v58 = (__int16 *)(v21 + v22);
        if (v51 >= -16384) {
          __int16 v59 = v55;
        }
        else {
          __int16 v59 = 0;
        }
        *char v58 = v59;
        if (v52 >= -16384) {
          __int16 v60 = v56;
        }
        else {
          __int16 v60 = 0;
        }
        int v61 = ((*v54 >> v36) & 0x3FF) << 15;
        int v62 = v61 + v50;
        v58[1] = v60;
        int v63 = v61 + v48;
        if (v53 < -16384) {
          __int16 v57 = 0;
        }
        int v64 = v61 + v49;
        v58[2] = v57;
        if (v29 == 2) {
          unsigned int v29 = 0;
        }
        else {
          ++v29;
        }
        unsigned int v65 = (0xFFFF * ((v62 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v62 > 33538047) {
          LOWORD(v65) = -1;
        }
        unsigned int v66 = (0xFFFF * ((v63 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v63 > 33538047) {
          LOWORD(v66) = -1;
        }
        unsigned int v67 = (0xFFFF * ((v64 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v64 > 33538047) {
          LOWORD(v67) = -1;
        }
        v58[3] = -1;
        BOOL v68 = (_WORD *)(v27 + v22);
        if (v62 >= -16384) {
          __int16 v69 = v65;
        }
        else {
          __int16 v69 = 0;
        }
        *BOOL v68 = v69;
        if (v63 >= -16384) {
          __int16 v70 = v66;
        }
        else {
          __int16 v70 = 0;
        }
        v68[1] = v70;
        unint64_t v71 = v36 >> 2;
        if (v64 >= -16384) {
          __int16 v72 = v67;
        }
        else {
          __int16 v72 = 0;
        }
        v68[2] = v72;
        v68[3] = -1;
        v33 = (_DWORD *)((char *)v34 + (v71 & 0x3C));
        v32 = (_DWORD *)((char *)v54 + (v71 & 0x3C));
        ++v28;
        v21 += 8;
        v27 += 8;
      }
      while (v18 != v28);
      unint64_t v275 = v24;
      uint64_t v276 = v17;
      if (v18 >= v16)
      {
        int v216 = (_WORD *)(v21 + v22);
        int v217 = (_WORD *)(v27 + v22);
        uint64_t v219 = v271;
        uint64_t v220 = v272;
        unsigned int v218 = v263;
      }
      else
      {
        unint64_t v73 = 0;
        char v261 = v34;
        char v262 = v71;
        v278 = (char *)v54 + (v71 & 0x3C);
        unint64_t v279 = (char *)v34 + (v71 & 0x3C);
        do
        {
          uint64_t v280 = v22;
          uint64_t v74 = &v278[v73];
          unsigned int v75 = (_WORD *)(v21 + v22);
          unsigned int v76 = v31[v73 / 4];
          unsigned int v77 = v31[v73 / 4 + 1];
          int v78 = (v76 & 0x3FF) - 512;
          unsigned int v80 = *(_DWORD *)&v279[v73];
          unsigned int v79 = *(_DWORD *)&v279[v73 + 4];
          int v81 = ((v76 >> 10) & 0x3FF) - 512;
          int v82 = (v80 & 0x3FF) << 15;
          int v83 = 60804 * v78;
          int v84 = 51603 * v81;
          int v85 = -6137 * v78 - 15338 * v81;
          int v86 = v84 + v82;
          int v87 = v85 + v82;
          int v88 = v83 + v82;
          unsigned int v89 = (0xFFFF * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047) {
            LOWORD(v89) = -1;
          }
          unsigned int v90 = (0xFFFF * ((v87 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v87 > 33538047) {
            LOWORD(v90) = -1;
          }
          unsigned int v91 = (0xFFFF * ((v88 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v88 > 33538047) {
            LOWORD(v91) = -1;
          }
          if (v86 >= -16384) {
            __int16 v92 = v89;
          }
          else {
            __int16 v92 = 0;
          }
          *unsigned int v75 = v92;
          BOOL v93 = v87 < -16384;
          int v94 = (32 * v80) & 0x1FF8000;
          int v95 = v84 + v94;
          if (v93) {
            LOWORD(v90) = 0;
          }
          unsigned int v96 = 0xFFFF * ((v84 + v94 + 0x4000) >> 15) + 511;
          int v97 = v85 + v94;
          unsigned int v98 = 0xFFFF * ((v85 + v94 + 0x4000) >> 15) + 511;
          v75[1] = v90;
          int v99 = v83 + v94;
          if (v88 >= -16384) {
            __int16 v100 = v91;
          }
          else {
            __int16 v100 = 0;
          }
          v75[2] = v100;
          unsigned int v101 = v96 / 0x3FF;
          unint64_t v102 = (4198405 * (unint64_t)v98) >> 32;
          unsigned int v103 = v98 - v102;
          if (v95 > 33538047) {
            LOWORD(v101) = -1;
          }
          unsigned int v104 = (v102 + (v103 >> 1)) >> 9;
          if (v97 > 33538047) {
            LOWORD(v104) = -1;
          }
          if (v99 > 33538047) {
            __int16 v105 = -1;
          }
          else {
            __int16 v105 = (0xFFFF * ((v99 + 0x4000) >> 15) + 511) / 0x3FFu;
          }
          if (v95 >= -16384) {
            __int16 v106 = v101;
          }
          else {
            __int16 v106 = 0;
          }
          v75[4] = v106;
          if (v97 >= -16384) {
            __int16 v107 = v104;
          }
          else {
            __int16 v107 = 0;
          }
          BOOL v93 = v99 < -16384;
          unsigned int v108 = *(_DWORD *)v74;
          unsigned int v109 = *((_DWORD *)v74 + 1);
          int v110 = (*(_DWORD *)v74 & 0x3FF) << 15;
          int v111 = v84 + v110;
          v75[5] = v107;
          unsigned int v112 = 0xFFFF * ((v84 + v110 + 0x4000) >> 15) + 511;
          int v113 = v85 + v110;
          int v114 = v85 + v110 + 0x4000;
          if (v93) {
            __int16 v105 = 0;
          }
          int v115 = v110 + v83;
          v75[6] = v105;
          unsigned int v116 = (_WORD *)(v27 + v280);
          v75[3] = -1;
          v75[7] = -1;
          unsigned int v117 = v112 / 0x3FF;
          unsigned int v118 = (0xFFFF * (v114 >> 15) + 511) / 0x3FFu;
          if (v111 > 33538047) {
            LOWORD(v117) = -1;
          }
          if (v113 > 33538047) {
            LOWORD(v118) = -1;
          }
          unsigned int v119 = (0xFFFF * ((v115 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v115 > 33538047) {
            LOWORD(v119) = -1;
          }
          if (v111 >= -16384) {
            __int16 v120 = v117;
          }
          else {
            __int16 v120 = 0;
          }
          *unsigned int v116 = v120;
          v116[3] = -1;
          if (v113 >= -16384) {
            __int16 v121 = v118;
          }
          else {
            __int16 v121 = 0;
          }
          int v122 = (32 * v108) & 0x1FF8000;
          int v123 = v84 + v122;
          int v124 = v85 + v122;
          v116[1] = v121;
          int v125 = v122 + v83;
          if (v115 >= -16384) {
            __int16 v126 = v119;
          }
          else {
            __int16 v126 = 0;
          }
          v116[2] = v126;
          unsigned int v127 = (0xFFFF * ((v123 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v123 > 33538047) {
            LOWORD(v127) = -1;
          }
          unsigned int v128 = (0xFFFF * ((v124 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v124 > 33538047) {
            LOWORD(v128) = -1;
          }
          if (v125 > 33538047) {
            __int16 v129 = -1;
          }
          else {
            __int16 v129 = (0xFFFF * ((v125 + 0x4000) >> 15) + 511) / 0x3FFu;
          }
          if (v123 >= -16384) {
            __int16 v130 = v127;
          }
          else {
            __int16 v130 = 0;
          }
          v116[7] = -1;
          BOOL v93 = v124 < -16384;
          int v131 = ((v76 >> 20) & 0x3FF) - 512;
          int v132 = (v77 & 0x3FF) - 512;
          v116[4] = v130;
          int v133 = (v80 >> 5) & 0x1FF8000;
          int v134 = -6137 * v131 - 15338 * v132;
          int v135 = 60804 * v131;
          int v136 = 51603 * v132;
          if (v93) {
            __int16 v137 = 0;
          }
          else {
            __int16 v137 = v128;
          }
          int v138 = v136 + v133;
          BOOL v93 = v125 < -16384;
          unsigned int v139 = 0xFFFF * ((v136 + v133 + 0x4000) >> 15) + 511;
          int v140 = v134 + v133;
          v116[5] = v137;
          unsigned int v141 = 0xFFFF * ((v134 + v133 + 0x4000) >> 15) + 511;
          int v142 = v135 + v133;
          if (v93) {
            __int16 v129 = 0;
          }
          v116[6] = v129;
          unsigned int v143 = v139 / 0x3FF;
          if (v138 > 33538047) {
            LOWORD(v143) = -1;
          }
          unsigned int v144 = v141 / 0x3FF;
          if (v140 > 33538047) {
            LOWORD(v144) = -1;
          }
          unsigned int v145 = (0xFFFF * ((v142 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v142 > 33538047) {
            LOWORD(v145) = -1;
          }
          if (v138 < -16384) {
            LOWORD(v143) = 0;
          }
          v75[8] = v143;
          if (v140 < -16384) {
            LOWORD(v144) = 0;
          }
          int v146 = (v79 & 0x3FF) << 15;
          int v147 = v146 + v136;
          int v148 = v146 + v134;
          v75[9] = v144;
          int v149 = 0xFFFF * ((v146 + v134 + 0x4000) >> 15);
          int v150 = v146 + v135;
          if (v142 < -16384) {
            LOWORD(v145) = 0;
          }
          v75[11] = -1;
          unsigned int v151 = (0xFFFF * ((v147 + 0x4000) >> 15) + 511) / 0x3FFu;
          v75[10] = v145;
          unsigned int v152 = (v149 + 511) / 0x3FFu;
          if (v147 > 33538047) {
            LOWORD(v151) = -1;
          }
          if (v148 > 33538047) {
            LOWORD(v152) = -1;
          }
          unsigned int v153 = (0xFFFF * ((v150 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v150 > 33538047) {
            LOWORD(v153) = -1;
          }
          if (v147 >= -16384) {
            __int16 v154 = v151;
          }
          else {
            __int16 v154 = 0;
          }
          v75[12] = v154;
          v75[15] = -1;
          int v155 = (v108 >> 5) & 0x1FF8000;
          int v156 = v136 + v155;
          if (v148 < -16384) {
            LOWORD(v152) = 0;
          }
          BOOL v93 = v150 < -16384;
          int v157 = v134 + v155;
          v75[13] = v152;
          unsigned int v158 = 0xFFFF * ((v134 + v155 + 0x4000) >> 15) + 511;
          int v159 = v135 + v155;
          if (v93) {
            LOWORD(v153) = 0;
          }
          v75[14] = v153;
          unsigned int v160 = (0xFFFF * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v156 > 33538047) {
            LOWORD(v160) = -1;
          }
          unsigned int v161 = v158 / 0x3FF;
          if (v157 > 33538047) {
            LOWORD(v161) = -1;
          }
          unsigned int v162 = (0xFFFF * ((v159 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v159 > 33538047) {
            LOWORD(v162) = -1;
          }
          if (v156 >= -16384) {
            __int16 v163 = v160;
          }
          else {
            __int16 v163 = 0;
          }
          v116[8] = v163;
          v116[11] = -1;
          if (v157 < -16384) {
            LOWORD(v161) = 0;
          }
          int v164 = (v109 & 0x3FF) << 15;
          int v165 = v164 + v136;
          int v166 = v164 + v134;
          v116[9] = v161;
          int v167 = v164 + v135;
          if (v159 >= -16384) {
            __int16 v168 = v162;
          }
          else {
            __int16 v168 = 0;
          }
          v116[10] = v168;
          unsigned int v169 = (0xFFFF * ((v165 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v165 > 33538047) {
            LOWORD(v169) = -1;
          }
          unsigned int v170 = (0xFFFF * ((v166 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v166 > 33538047) {
            LOWORD(v170) = -1;
          }
          if (v167 > 33538047) {
            __int16 v171 = -1;
          }
          else {
            __int16 v171 = (0xFFFF * ((v167 + 0x4000) >> 15) + 511) / 0x3FFu;
          }
          if (v165 >= -16384) {
            __int16 v172 = v169;
          }
          else {
            __int16 v172 = 0;
          }
          v116[15] = -1;
          BOOL v93 = v166 < -16384;
          int v173 = ((v77 >> 10) & 0x3FF) - 512;
          int v174 = ((v77 >> 20) & 0x3FF) - 512;
          v116[12] = v172;
          int v175 = (32 * v79) & 0x1FF8000;
          int v176 = -15338 * v174 - 6137 * v173;
          int v177 = 60804 * v173;
          int v178 = 51603 * v174;
          if (v93) {
            LOWORD(v170) = 0;
          }
          int v179 = v175 + v178;
          BOOL v93 = v167 < -16384;
          unsigned int v180 = 0xFFFF * ((v175 + v178 + 0x4000) >> 15) + 511;
          int v181 = v175 + v176;
          v116[13] = v170;
          unsigned int v182 = 0xFFFF * ((v175 + v176 + 0x4000) >> 15) + 511;
          int v183 = v175 + v177;
          if (v93) {
            __int16 v171 = 0;
          }
          v116[14] = v171;
          unsigned int v184 = v180 / 0x3FF;
          if (v179 > 33538047) {
            LOWORD(v184) = -1;
          }
          unsigned int v185 = v182 / 0x3FF;
          if (v181 > 33538047) {
            LOWORD(v185) = -1;
          }
          unsigned int v186 = (0xFFFF * ((v183 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v183 > 33538047) {
            LOWORD(v186) = -1;
          }
          BOOL v93 = v179 < -16384;
          int v187 = (v79 >> 5) & 0x1FF8000;
          int v188 = v187 + v178;
          if (v93) {
            LOWORD(v184) = 0;
          }
          BOOL v93 = v181 < -16384;
          int v189 = v187 + v176;
          int v190 = 0xFFFF * ((v187 + v176 + 0x4000) >> 15);
          v75[16] = v184;
          int v191 = v187 + v177;
          if (v93) {
            LOWORD(v185) = 0;
          }
          v75[17] = v185;
          if (v183 >= -16384) {
            __int16 v192 = v186;
          }
          else {
            __int16 v192 = 0;
          }
          v75[18] = v192;
          unsigned int v193 = (0xFFFF * ((v188 + 0x4000) >> 15) + 511) / 0x3FFu;
          unint64_t v16 = v277;
          if (v188 > 33538047) {
            LOWORD(v193) = -1;
          }
          unsigned int v194 = (v190 + 511) / 0x3FFu;
          if (v189 > 33538047) {
            LOWORD(v194) = -1;
          }
          unsigned int v195 = (0xFFFF * ((v191 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v191 > 33538047) {
            LOWORD(v195) = -1;
          }
          if (v188 < -16384) {
            LOWORD(v193) = 0;
          }
          v75[20] = v193;
          if (v189 < -16384) {
            LOWORD(v194) = 0;
          }
          v75[21] = v194;
          if (v191 < -16384) {
            LOWORD(v195) = 0;
          }
          int v196 = (32 * v109) & 0x1FF8000;
          int v197 = v196 + v178;
          v75[22] = v195;
          int v198 = v196 + v176;
          v75[19] = -1;
          unsigned int v199 = 0xFFFF * ((v196 + v176 + 0x4000) >> 15) + 511;
          int v200 = v196 + v177;
          v75[23] = -1;
          unsigned int v201 = (0xFFFF * ((v197 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v197 > 33538047) {
            LOWORD(v201) = -1;
          }
          unsigned int v202 = v199 / 0x3FF;
          if (v198 > 33538047) {
            LOWORD(v202) = -1;
          }
          unsigned int v203 = (0xFFFF * ((v200 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v200 > 33538047) {
            LOWORD(v203) = -1;
          }
          int v204 = (v109 >> 5) & 0x1FF8000;
          int v205 = v204 + v178;
          if (v197 < -16384) {
            LOWORD(v201) = 0;
          }
          int v206 = v204 + v176;
          v116[16] = v201;
          int v207 = v204 + v177;
          if (v198 >= -16384) {
            __int16 v208 = v202;
          }
          else {
            __int16 v208 = 0;
          }
          v116[17] = v208;
          if (v200 < -16384) {
            LOWORD(v203) = 0;
          }
          v116[18] = v203;
          unsigned int v209 = (0xFFFF * ((v205 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v205 > 33538047) {
            LOWORD(v209) = -1;
          }
          unsigned int v210 = (0xFFFF * ((v206 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v206 > 33538047) {
            LOWORD(v210) = -1;
          }
          unsigned int v211 = (0xFFFF * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047) {
            LOWORD(v211) = -1;
          }
          if (v205 >= -16384) {
            __int16 v212 = v209;
          }
          else {
            __int16 v212 = 0;
          }
          v116[20] = v212;
          if (v206 >= -16384) {
            __int16 v213 = v210;
          }
          else {
            __int16 v213 = 0;
          }
          v116[21] = v213;
          if (v207 >= -16384) {
            __int16 v214 = v211;
          }
          else {
            __int16 v214 = 0;
          }
          v116[22] = v214;
          v116[19] = -1;
          v116[23] = -1;
          v18 += 6;
          v73 += 8;
          uint64_t v22 = v280 + 48;
        }
        while (v18 < v277);
        uint64_t v215 = v262 & 0x3C;
        unint64_t v11 = v260;
        v33 = (_DWORD *)((char *)v261 + v215 + v73);
        v32 = (_DWORD *)((char *)v54 + v215 + v73);
        v31 = (_DWORD *)((char *)v31 + v73);
        int v216 = (_WORD *)(v21 + v22);
        int v217 = (_WORD *)(v27 + v22);
        unsigned int v218 = v263;
        uint64_t v219 = v271;
        uint64_t v220 = v272;
      }
      if (v18 < v11)
      {
        do
        {
          unint64_t v221 = *((unsigned __int8 *)&v281 + v218);
          int v222 = *v33 >> v221;
          unint64_t v223 = *((unsigned __int8 *)&v281 + v30);
          uint64_t v224 = (v221 >> 2) & 0x3C;
          int v225 = ((*v31 >> v223) & 0x3FF) - 512;
          char v226 = (_DWORD *)((char *)v31 + ((v223 >> 2) & 0x3C));
          if (v30 == 2) {
            unsigned int v227 = 0;
          }
          else {
            unsigned int v227 = v30 + 1;
          }
          unint64_t v228 = *((unsigned __int8 *)&v281 + v227);
          v33 = (_DWORD *)((char *)v33 + v224);
          int v229 = *v226 >> v228;
          unsigned int v230 = (_DWORD *)((char *)v226 + ((v228 >> 2) & 0x3C));
          int v231 = v229 & 0x3FF;
          if (v227 == 2) {
            unsigned int v232 = 0;
          }
          else {
            unsigned int v232 = v227 + 1;
          }
          if (v18) {
            unsigned int v30 = v232;
          }
          int v233 = (v222 & 0x3FF) << 15;
          int v234 = v231 - 512;
          int v235 = -6137 * v225 - 15338 * v234;
          int v236 = 60804 * v225;
          int v237 = 51603 * v234;
          int v238 = 51603 * v234 + v233;
          if (v18) {
            v31 = v230;
          }
          int v239 = v235 + v233;
          int v240 = v236 + v233;
          unsigned int v241 = (0xFFFF * ((v238 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v238 > 33538047) {
            LOWORD(v241) = -1;
          }
          unsigned int v242 = (0xFFFF * ((v239 + 0x4000) >> 15) + 511) / 0x3FFu;
          unsigned int v243 = (0xFFFF * ((v240 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v239 > 33538047) {
            LOWORD(v242) = -1;
          }
          if (v240 > 33538047) {
            LOWORD(v243) = -1;
          }
          if (v238 < -16384) {
            LOWORD(v241) = 0;
          }
          *int v216 = v241;
          if (v239 >= -16384) {
            __int16 v244 = v242;
          }
          else {
            __int16 v244 = 0;
          }
          v216[3] = -1;
          int v245 = *v32 >> v221;
          v32 = (_DWORD *)((char *)v32 + v224);
          int v246 = (v245 & 0x3FF) << 15;
          int v247 = v246 + v237;
          v216[1] = v244;
          int v248 = v246 + v235;
          if (v240 >= -16384) {
            __int16 v249 = v243;
          }
          else {
            __int16 v249 = 0;
          }
          int v250 = v246 + v236;
          unsigned int v251 = 0xFFFF * ((v250 + 0x4000) >> 15) + 511;
          v216[2] = v249;
          unsigned int v252 = (0xFFFF * ((v247 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v218 == 2) {
            unsigned int v218 = 0;
          }
          else {
            ++v218;
          }
          if (v247 > 33538047) {
            LOWORD(v252) = -1;
          }
          unsigned int v253 = (0xFFFF * ((v248 + 0x4000) >> 15) + 511) / 0x3FFu;
          unint64_t v254 = (4198405 * (unint64_t)v251) >> 32;
          unsigned int v255 = v251 - v254;
          if (v248 > 33538047) {
            LOWORD(v253) = -1;
          }
          unsigned int v256 = (v254 + (v255 >> 1)) >> 9;
          if (v250 > 33538047) {
            LOWORD(v256) = -1;
          }
          if (v247 < -16384) {
            LOWORD(v252) = 0;
          }
          *int v217 = v252;
          if (v248 >= -16384) {
            __int16 v257 = v253;
          }
          else {
            __int16 v257 = 0;
          }
          v217[1] = v257;
          if (v250 >= -16384) {
            __int16 v258 = v256;
          }
          else {
            __int16 v258 = 0;
          }
          v217[2] = v258;
          v217[3] = -1;
          ++v18;
          v216 += 4;
          v217 += 4;
        }
        while (v11 != v18);
      }
      uint64_t v22 = v267;
      unint64_t v25 = v274 + 4 * v266;
      v26 = &v273[v266];
      uint64_t v17 = v276 + 1;
      uint64_t v21 = v220 + v264;
      uint64_t v27 = v219 + v264;
      unint64_t v24 = v275 + 4 * v265;
      unint64_t v18 = v269;
    }
    while (v276 + 1 != v268);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU601_l64r(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  int v281 = 1313280;
  unint64_t v8 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  unint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  if (v10 - v9 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  else {
    unint64_t v11 = v10 - v9;
  }
  unint64_t v12 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  unint64_t v13 = v10 % 6;
  BOOL v14 = v11 >= v13;
  unint64_t v15 = v11 - v13;
  if (v14) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = 0;
  }
  if (v12 >= 2)
  {
    uint64_t v17 = 0;
    unsigned int v270 = v9 % 3;
    unsigned int v263 = v16 % 3;
    unint64_t v18 = 6 * (v9 / 6) - v9 + 6;
    unint64_t v268 = v12 >> 1;
    uint64_t v19 = *a8;
    uint64_t v20 = *a8 * a6[5];
    uint64_t v21 = *a7 + v20;
    uint64_t v22 = 8 * a6[4];
    unint64_t v23 = a4[1];
    unint64_t v24 = a3[1] + v23 * (v8 >> 1) + 4 * (v9 / 3);
    unint64_t v25 = *a3 + *a4 * v8 + 4 * (v9 / 3);
    v26 = (_DWORD *)(v25 + *a4);
    uint64_t v266 = (*a4 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v267 = v22;
    unint64_t v265 = v23 >> 2;
    uint64_t v264 = 2 * v19;
    uint64_t v27 = *a7 + v19 + v20;
    unint64_t v269 = v18;
    unint64_t v260 = v11;
    unint64_t v277 = v16;
    do
    {
      uint64_t v28 = 0;
      uint64_t v271 = v27;
      uint64_t v272 = v21;
      unsigned int v29 = v270;
      unsigned int v30 = v270;
      v31 = (_DWORD *)v24;
      unsigned int v273 = v26;
      unint64_t v274 = v25;
      v32 = v26;
      v33 = (_DWORD *)v25;
      do
      {
        unsigned int v34 = v33;
        unsigned int v35 = *v33;
        unint64_t v36 = *((unsigned __int8 *)&v281 + v29);
        unint64_t v37 = *((unsigned __int8 *)&v281 + v30);
        int v38 = ((*v31 >> v37) & 0x3FF) - 512;
        unsigned int v39 = (_DWORD *)((char *)v31 + ((v37 >> 2) & 0x3C));
        if (v30 == 2) {
          unsigned int v40 = 0;
        }
        else {
          unsigned int v40 = v30 + 1;
        }
        unint64_t v41 = *((unsigned __int8 *)&v281 + v40);
        unsigned int v42 = v35 >> v36;
        int v43 = *v39 >> v41;
        int v44 = (_DWORD *)((char *)v39 + ((v41 >> 2) & 0x3C));
        int v45 = v43 & 0x3FF;
        if (v40 == 2) {
          unsigned int v46 = 0;
        }
        else {
          unsigned int v46 = v40 + 1;
        }
        if (v28)
        {
          v31 = v44;
          unsigned int v30 = v46;
        }
        int v47 = (v42 & 0x3FF) << 15;
        int v48 = -11276 * v38 - 23400 * (v45 - 512);
        int v49 = 58065 * v38;
        int v50 = 45941 * (v45 - 512);
        int v51 = v50 + v47;
        int v52 = v48 + v47;
        int v53 = v49 + v47;
        unsigned int v54 = v32;
        if (v51 > 33538047) {
          __int16 v55 = -1;
        }
        else {
          __int16 v55 = (0xFFFF * ((v51 + 0x4000) >> 15) + 511) / 0x3FFu;
        }
        if (v52 > 33538047) {
          __int16 v56 = -1;
        }
        else {
          __int16 v56 = (0xFFFF * ((v52 + 0x4000) >> 15) + 511) / 0x3FFu;
        }
        if (v53 > 33538047) {
          __int16 v57 = -1;
        }
        else {
          __int16 v57 = (0xFFFF * ((v53 + 0x4000) >> 15) + 511) / 0x3FFu;
        }
        char v58 = (__int16 *)(v21 + v22);
        if (v51 >= -16384) {
          __int16 v59 = v55;
        }
        else {
          __int16 v59 = 0;
        }
        *char v58 = v59;
        if (v52 >= -16384) {
          __int16 v60 = v56;
        }
        else {
          __int16 v60 = 0;
        }
        int v61 = ((*v54 >> v36) & 0x3FF) << 15;
        int v62 = v61 + v50;
        v58[1] = v60;
        int v63 = v61 + v48;
        if (v53 < -16384) {
          __int16 v57 = 0;
        }
        int v64 = v61 + v49;
        v58[2] = v57;
        if (v29 == 2) {
          unsigned int v29 = 0;
        }
        else {
          ++v29;
        }
        unsigned int v65 = (0xFFFF * ((v62 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v62 > 33538047) {
          LOWORD(v65) = -1;
        }
        unsigned int v66 = (0xFFFF * ((v63 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v63 > 33538047) {
          LOWORD(v66) = -1;
        }
        unsigned int v67 = (0xFFFF * ((v64 + 0x4000) >> 15) + 511) / 0x3FFu;
        if (v64 > 33538047) {
          LOWORD(v67) = -1;
        }
        v58[3] = -1;
        BOOL v68 = (_WORD *)(v27 + v22);
        if (v62 >= -16384) {
          __int16 v69 = v65;
        }
        else {
          __int16 v69 = 0;
        }
        *BOOL v68 = v69;
        if (v63 >= -16384) {
          __int16 v70 = v66;
        }
        else {
          __int16 v70 = 0;
        }
        v68[1] = v70;
        unint64_t v71 = v36 >> 2;
        if (v64 >= -16384) {
          __int16 v72 = v67;
        }
        else {
          __int16 v72 = 0;
        }
        v68[2] = v72;
        v68[3] = -1;
        v33 = (_DWORD *)((char *)v34 + (v71 & 0x3C));
        v32 = (_DWORD *)((char *)v54 + (v71 & 0x3C));
        ++v28;
        v21 += 8;
        v27 += 8;
      }
      while (v18 != v28);
      unint64_t v275 = v24;
      uint64_t v276 = v17;
      if (v18 >= v16)
      {
        int v216 = (_WORD *)(v21 + v22);
        int v217 = (_WORD *)(v27 + v22);
        uint64_t v219 = v271;
        uint64_t v220 = v272;
        unsigned int v218 = v263;
      }
      else
      {
        unint64_t v73 = 0;
        char v261 = v34;
        char v262 = v71;
        v278 = (char *)v54 + (v71 & 0x3C);
        unint64_t v279 = (char *)v34 + (v71 & 0x3C);
        do
        {
          uint64_t v280 = v22;
          uint64_t v74 = &v278[v73];
          unsigned int v75 = (_WORD *)(v21 + v22);
          unsigned int v76 = v31[v73 / 4];
          unsigned int v77 = v31[v73 / 4 + 1];
          int v78 = (v76 & 0x3FF) - 512;
          unsigned int v80 = *(_DWORD *)&v279[v73];
          unsigned int v79 = *(_DWORD *)&v279[v73 + 4];
          int v81 = ((v76 >> 10) & 0x3FF) - 512;
          int v82 = (v80 & 0x3FF) << 15;
          int v83 = 58065 * v78;
          int v84 = 45941 * v81;
          int v85 = -11276 * v78 - 23400 * v81;
          int v86 = v84 + v82;
          int v87 = v85 + v82;
          int v88 = v83 + v82;
          unsigned int v89 = (0xFFFF * ((v86 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v86 > 33538047) {
            LOWORD(v89) = -1;
          }
          unsigned int v90 = (0xFFFF * ((v87 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v87 > 33538047) {
            LOWORD(v90) = -1;
          }
          unsigned int v91 = (0xFFFF * ((v88 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v88 > 33538047) {
            LOWORD(v91) = -1;
          }
          if (v86 >= -16384) {
            __int16 v92 = v89;
          }
          else {
            __int16 v92 = 0;
          }
          *unsigned int v75 = v92;
          BOOL v93 = v87 < -16384;
          int v94 = (32 * v80) & 0x1FF8000;
          int v95 = v84 + v94;
          if (v93) {
            LOWORD(v90) = 0;
          }
          unsigned int v96 = 0xFFFF * ((v84 + v94 + 0x4000) >> 15) + 511;
          int v97 = v85 + v94;
          unsigned int v98 = 0xFFFF * ((v85 + v94 + 0x4000) >> 15) + 511;
          v75[1] = v90;
          int v99 = v83 + v94;
          if (v88 >= -16384) {
            __int16 v100 = v91;
          }
          else {
            __int16 v100 = 0;
          }
          v75[2] = v100;
          unsigned int v101 = v96 / 0x3FF;
          unint64_t v102 = (4198405 * (unint64_t)v98) >> 32;
          unsigned int v103 = v98 - v102;
          if (v95 > 33538047) {
            LOWORD(v101) = -1;
          }
          unsigned int v104 = (v102 + (v103 >> 1)) >> 9;
          if (v97 > 33538047) {
            LOWORD(v104) = -1;
          }
          if (v99 > 33538047) {
            __int16 v105 = -1;
          }
          else {
            __int16 v105 = (0xFFFF * ((v99 + 0x4000) >> 15) + 511) / 0x3FFu;
          }
          if (v95 >= -16384) {
            __int16 v106 = v101;
          }
          else {
            __int16 v106 = 0;
          }
          v75[4] = v106;
          if (v97 >= -16384) {
            __int16 v107 = v104;
          }
          else {
            __int16 v107 = 0;
          }
          BOOL v93 = v99 < -16384;
          unsigned int v108 = *(_DWORD *)v74;
          unsigned int v109 = *((_DWORD *)v74 + 1);
          int v110 = (*(_DWORD *)v74 & 0x3FF) << 15;
          int v111 = v84 + v110;
          v75[5] = v107;
          unsigned int v112 = 0xFFFF * ((v84 + v110 + 0x4000) >> 15) + 511;
          int v113 = v85 + v110;
          int v114 = v85 + v110 + 0x4000;
          if (v93) {
            __int16 v105 = 0;
          }
          int v115 = v110 + v83;
          v75[6] = v105;
          unsigned int v116 = (_WORD *)(v27 + v280);
          v75[3] = -1;
          v75[7] = -1;
          unsigned int v117 = v112 / 0x3FF;
          unsigned int v118 = (0xFFFF * (v114 >> 15) + 511) / 0x3FFu;
          if (v111 > 33538047) {
            LOWORD(v117) = -1;
          }
          if (v113 > 33538047) {
            LOWORD(v118) = -1;
          }
          unsigned int v119 = (0xFFFF * ((v115 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v115 > 33538047) {
            LOWORD(v119) = -1;
          }
          if (v111 >= -16384) {
            __int16 v120 = v117;
          }
          else {
            __int16 v120 = 0;
          }
          *unsigned int v116 = v120;
          v116[3] = -1;
          if (v113 >= -16384) {
            __int16 v121 = v118;
          }
          else {
            __int16 v121 = 0;
          }
          int v122 = (32 * v108) & 0x1FF8000;
          int v123 = v84 + v122;
          int v124 = v85 + v122;
          v116[1] = v121;
          int v125 = v122 + v83;
          if (v115 >= -16384) {
            __int16 v126 = v119;
          }
          else {
            __int16 v126 = 0;
          }
          v116[2] = v126;
          unsigned int v127 = (0xFFFF * ((v123 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v123 > 33538047) {
            LOWORD(v127) = -1;
          }
          unsigned int v128 = (0xFFFF * ((v124 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v124 > 33538047) {
            LOWORD(v128) = -1;
          }
          if (v125 > 33538047) {
            __int16 v129 = -1;
          }
          else {
            __int16 v129 = (0xFFFF * ((v125 + 0x4000) >> 15) + 511) / 0x3FFu;
          }
          if (v123 >= -16384) {
            __int16 v130 = v127;
          }
          else {
            __int16 v130 = 0;
          }
          v116[7] = -1;
          BOOL v93 = v124 < -16384;
          int v131 = ((v76 >> 20) & 0x3FF) - 512;
          int v132 = (v77 & 0x3FF) - 512;
          v116[4] = v130;
          int v133 = (v80 >> 5) & 0x1FF8000;
          int v134 = -11276 * v131 - 23400 * v132;
          int v135 = 58065 * v131;
          int v136 = 45941 * v132;
          if (v93) {
            __int16 v137 = 0;
          }
          else {
            __int16 v137 = v128;
          }
          int v138 = v136 + v133;
          BOOL v93 = v125 < -16384;
          unsigned int v139 = 0xFFFF * ((v136 + v133 + 0x4000) >> 15) + 511;
          int v140 = v134 + v133;
          v116[5] = v137;
          unsigned int v141 = 0xFFFF * ((v134 + v133 + 0x4000) >> 15) + 511;
          int v142 = v135 + v133;
          if (v93) {
            __int16 v129 = 0;
          }
          v116[6] = v129;
          unsigned int v143 = v139 / 0x3FF;
          if (v138 > 33538047) {
            LOWORD(v143) = -1;
          }
          unsigned int v144 = v141 / 0x3FF;
          if (v140 > 33538047) {
            LOWORD(v144) = -1;
          }
          unsigned int v145 = (0xFFFF * ((v142 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v142 > 33538047) {
            LOWORD(v145) = -1;
          }
          if (v138 < -16384) {
            LOWORD(v143) = 0;
          }
          v75[8] = v143;
          if (v140 < -16384) {
            LOWORD(v144) = 0;
          }
          int v146 = (v79 & 0x3FF) << 15;
          int v147 = v146 + v136;
          int v148 = v146 + v134;
          v75[9] = v144;
          int v149 = 0xFFFF * ((v146 + v134 + 0x4000) >> 15);
          int v150 = v146 + v135;
          if (v142 < -16384) {
            LOWORD(v145) = 0;
          }
          v75[11] = -1;
          unsigned int v151 = (0xFFFF * ((v147 + 0x4000) >> 15) + 511) / 0x3FFu;
          v75[10] = v145;
          unsigned int v152 = (v149 + 511) / 0x3FFu;
          if (v147 > 33538047) {
            LOWORD(v151) = -1;
          }
          if (v148 > 33538047) {
            LOWORD(v152) = -1;
          }
          unsigned int v153 = (0xFFFF * ((v150 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v150 > 33538047) {
            LOWORD(v153) = -1;
          }
          if (v147 >= -16384) {
            __int16 v154 = v151;
          }
          else {
            __int16 v154 = 0;
          }
          v75[12] = v154;
          v75[15] = -1;
          int v155 = (v108 >> 5) & 0x1FF8000;
          int v156 = v136 + v155;
          if (v148 < -16384) {
            LOWORD(v152) = 0;
          }
          BOOL v93 = v150 < -16384;
          int v157 = v134 + v155;
          v75[13] = v152;
          unsigned int v158 = 0xFFFF * ((v134 + v155 + 0x4000) >> 15) + 511;
          int v159 = v135 + v155;
          if (v93) {
            LOWORD(v153) = 0;
          }
          v75[14] = v153;
          unsigned int v160 = (0xFFFF * ((v156 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v156 > 33538047) {
            LOWORD(v160) = -1;
          }
          unsigned int v161 = v158 / 0x3FF;
          if (v157 > 33538047) {
            LOWORD(v161) = -1;
          }
          unsigned int v162 = (0xFFFF * ((v159 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v159 > 33538047) {
            LOWORD(v162) = -1;
          }
          if (v156 >= -16384) {
            __int16 v163 = v160;
          }
          else {
            __int16 v163 = 0;
          }
          v116[8] = v163;
          v116[11] = -1;
          if (v157 < -16384) {
            LOWORD(v161) = 0;
          }
          int v164 = (v109 & 0x3FF) << 15;
          int v165 = v164 + v136;
          int v166 = v164 + v134;
          v116[9] = v161;
          int v167 = v164 + v135;
          if (v159 >= -16384) {
            __int16 v168 = v162;
          }
          else {
            __int16 v168 = 0;
          }
          v116[10] = v168;
          unsigned int v169 = (0xFFFF * ((v165 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v165 > 33538047) {
            LOWORD(v169) = -1;
          }
          unsigned int v170 = (0xFFFF * ((v166 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v166 > 33538047) {
            LOWORD(v170) = -1;
          }
          if (v167 > 33538047) {
            __int16 v171 = -1;
          }
          else {
            __int16 v171 = (0xFFFF * ((v167 + 0x4000) >> 15) + 511) / 0x3FFu;
          }
          if (v165 >= -16384) {
            __int16 v172 = v169;
          }
          else {
            __int16 v172 = 0;
          }
          v116[15] = -1;
          BOOL v93 = v166 < -16384;
          int v173 = ((v77 >> 10) & 0x3FF) - 512;
          int v174 = ((v77 >> 20) & 0x3FF) - 512;
          v116[12] = v172;
          int v175 = (32 * v79) & 0x1FF8000;
          int v176 = -23400 * v174 - 11276 * v173;
          int v177 = 58065 * v173;
          int v178 = 45941 * v174;
          if (v93) {
            LOWORD(v170) = 0;
          }
          int v179 = v175 + v178;
          BOOL v93 = v167 < -16384;
          unsigned int v180 = 0xFFFF * ((v175 + v178 + 0x4000) >> 15) + 511;
          int v181 = v175 + v176;
          v116[13] = v170;
          unsigned int v182 = 0xFFFF * ((v175 + v176 + 0x4000) >> 15) + 511;
          int v183 = v175 + v177;
          if (v93) {
            __int16 v171 = 0;
          }
          v116[14] = v171;
          unsigned int v184 = v180 / 0x3FF;
          if (v179 > 33538047) {
            LOWORD(v184) = -1;
          }
          unsigned int v185 = v182 / 0x3FF;
          if (v181 > 33538047) {
            LOWORD(v185) = -1;
          }
          unsigned int v186 = (0xFFFF * ((v183 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v183 > 33538047) {
            LOWORD(v186) = -1;
          }
          BOOL v93 = v179 < -16384;
          int v187 = (v79 >> 5) & 0x1FF8000;
          int v188 = v187 + v178;
          if (v93) {
            LOWORD(v184) = 0;
          }
          BOOL v93 = v181 < -16384;
          int v189 = v187 + v176;
          int v190 = 0xFFFF * ((v187 + v176 + 0x4000) >> 15);
          v75[16] = v184;
          int v191 = v187 + v177;
          if (v93) {
            LOWORD(v185) = 0;
          }
          v75[17] = v185;
          if (v183 >= -16384) {
            __int16 v192 = v186;
          }
          else {
            __int16 v192 = 0;
          }
          v75[18] = v192;
          unsigned int v193 = (0xFFFF * ((v188 + 0x4000) >> 15) + 511) / 0x3FFu;
          unint64_t v16 = v277;
          if (v188 > 33538047) {
            LOWORD(v193) = -1;
          }
          unsigned int v194 = (v190 + 511) / 0x3FFu;
          if (v189 > 33538047) {
            LOWORD(v194) = -1;
          }
          unsigned int v195 = (0xFFFF * ((v191 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v191 > 33538047) {
            LOWORD(v195) = -1;
          }
          if (v188 < -16384) {
            LOWORD(v193) = 0;
          }
          v75[20] = v193;
          if (v189 < -16384) {
            LOWORD(v194) = 0;
          }
          v75[21] = v194;
          if (v191 < -16384) {
            LOWORD(v195) = 0;
          }
          int v196 = (32 * v109) & 0x1FF8000;
          int v197 = v196 + v178;
          v75[22] = v195;
          int v198 = v196 + v176;
          v75[19] = -1;
          unsigned int v199 = 0xFFFF * ((v196 + v176 + 0x4000) >> 15) + 511;
          int v200 = v196 + v177;
          v75[23] = -1;
          unsigned int v201 = (0xFFFF * ((v197 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v197 > 33538047) {
            LOWORD(v201) = -1;
          }
          unsigned int v202 = v199 / 0x3FF;
          if (v198 > 33538047) {
            LOWORD(v202) = -1;
          }
          unsigned int v203 = (0xFFFF * ((v200 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v200 > 33538047) {
            LOWORD(v203) = -1;
          }
          int v204 = (v109 >> 5) & 0x1FF8000;
          int v205 = v204 + v178;
          if (v197 < -16384) {
            LOWORD(v201) = 0;
          }
          int v206 = v204 + v176;
          v116[16] = v201;
          int v207 = v204 + v177;
          if (v198 >= -16384) {
            __int16 v208 = v202;
          }
          else {
            __int16 v208 = 0;
          }
          v116[17] = v208;
          if (v200 < -16384) {
            LOWORD(v203) = 0;
          }
          v116[18] = v203;
          unsigned int v209 = (0xFFFF * ((v205 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v205 > 33538047) {
            LOWORD(v209) = -1;
          }
          unsigned int v210 = (0xFFFF * ((v206 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v206 > 33538047) {
            LOWORD(v210) = -1;
          }
          unsigned int v211 = (0xFFFF * ((v207 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v207 > 33538047) {
            LOWORD(v211) = -1;
          }
          if (v205 >= -16384) {
            __int16 v212 = v209;
          }
          else {
            __int16 v212 = 0;
          }
          v116[20] = v212;
          if (v206 >= -16384) {
            __int16 v213 = v210;
          }
          else {
            __int16 v213 = 0;
          }
          v116[21] = v213;
          if (v207 >= -16384) {
            __int16 v214 = v211;
          }
          else {
            __int16 v214 = 0;
          }
          v116[22] = v214;
          v116[19] = -1;
          v116[23] = -1;
          v18 += 6;
          v73 += 8;
          uint64_t v22 = v280 + 48;
        }
        while (v18 < v277);
        uint64_t v215 = v262 & 0x3C;
        unint64_t v11 = v260;
        v33 = (_DWORD *)((char *)v261 + v215 + v73);
        v32 = (_DWORD *)((char *)v54 + v215 + v73);
        v31 = (_DWORD *)((char *)v31 + v73);
        int v216 = (_WORD *)(v21 + v22);
        int v217 = (_WORD *)(v27 + v22);
        unsigned int v218 = v263;
        uint64_t v219 = v271;
        uint64_t v220 = v272;
      }
      if (v18 < v11)
      {
        do
        {
          unint64_t v221 = *((unsigned __int8 *)&v281 + v218);
          int v222 = *v33 >> v221;
          unint64_t v223 = *((unsigned __int8 *)&v281 + v30);
          uint64_t v224 = (v221 >> 2) & 0x3C;
          int v225 = ((*v31 >> v223) & 0x3FF) - 512;
          char v226 = (_DWORD *)((char *)v31 + ((v223 >> 2) & 0x3C));
          if (v30 == 2) {
            unsigned int v227 = 0;
          }
          else {
            unsigned int v227 = v30 + 1;
          }
          unint64_t v228 = *((unsigned __int8 *)&v281 + v227);
          v33 = (_DWORD *)((char *)v33 + v224);
          int v229 = *v226 >> v228;
          unsigned int v230 = (_DWORD *)((char *)v226 + ((v228 >> 2) & 0x3C));
          int v231 = v229 & 0x3FF;
          if (v227 == 2) {
            unsigned int v232 = 0;
          }
          else {
            unsigned int v232 = v227 + 1;
          }
          if (v18) {
            unsigned int v30 = v232;
          }
          int v233 = (v222 & 0x3FF) << 15;
          int v234 = v231 - 512;
          int v235 = -11276 * v225 - 23400 * v234;
          int v236 = 58065 * v225;
          int v237 = 45941 * v234;
          int v238 = 45941 * v234 + v233;
          if (v18) {
            v31 = v230;
          }
          int v239 = v235 + v233;
          int v240 = v236 + v233;
          unsigned int v241 = (0xFFFF * ((v238 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v238 > 33538047) {
            LOWORD(v241) = -1;
          }
          unsigned int v242 = (0xFFFF * ((v239 + 0x4000) >> 15) + 511) / 0x3FFu;
          unsigned int v243 = (0xFFFF * ((v240 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v239 > 33538047) {
            LOWORD(v242) = -1;
          }
          if (v240 > 33538047) {
            LOWORD(v243) = -1;
          }
          if (v238 < -16384) {
            LOWORD(v241) = 0;
          }
          *int v216 = v241;
          if (v239 >= -16384) {
            __int16 v244 = v242;
          }
          else {
            __int16 v244 = 0;
          }
          v216[3] = -1;
          int v245 = *v32 >> v221;
          v32 = (_DWORD *)((char *)v32 + v224);
          int v246 = (v245 & 0x3FF) << 15;
          int v247 = v246 + v237;
          v216[1] = v244;
          int v248 = v246 + v235;
          if (v240 >= -16384) {
            __int16 v249 = v243;
          }
          else {
            __int16 v249 = 0;
          }
          int v250 = v246 + v236;
          unsigned int v251 = 0xFFFF * ((v250 + 0x4000) >> 15) + 511;
          v216[2] = v249;
          unsigned int v252 = (0xFFFF * ((v247 + 0x4000) >> 15) + 511) / 0x3FFu;
          if (v218 == 2) {
            unsigned int v218 = 0;
          }
          else {
            ++v218;
          }
          if (v247 > 33538047) {
            LOWORD(v252) = -1;
          }
          unsigned int v253 = (0xFFFF * ((v248 + 0x4000) >> 15) + 511) / 0x3FFu;
          unint64_t v254 = (4198405 * (unint64_t)v251) >> 32;
          unsigned int v255 = v251 - v254;
          if (v248 > 33538047) {
            LOWORD(v253) = -1;
          }
          unsigned int v256 = (v254 + (v255 >> 1)) >> 9;
          if (v250 > 33538047) {
            LOWORD(v256) = -1;
          }
          if (v247 < -16384) {
            LOWORD(v252) = 0;
          }
          *int v217 = v252;
          if (v248 >= -16384) {
            __int16 v257 = v253;
          }
          else {
            __int16 v257 = 0;
          }
          v217[1] = v257;
          if (v250 >= -16384) {
            __int16 v258 = v256;
          }
          else {
            __int16 v258 = 0;
          }
          v217[2] = v258;
          v217[3] = -1;
          ++v18;
          v216 += 4;
          v217 += 4;
        }
        while (v11 != v18);
      }
      uint64_t v22 = v267;
      unint64_t v25 = v274 + 4 * v266;
      v26 = &v273[v266];
      uint64_t v17 = v276 + 1;
      uint64_t v21 = v220 + v264;
      uint64_t v27 = v219 + v264;
      unint64_t v24 = v275 + 4 * v265;
      unint64_t v18 = v269;
    }
    while (v276 + 1 != v268);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU2020_RGhA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  int v165 = 1313280;
  unint64_t v8 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  unint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  unint64_t v11 = a6[2];
  if (v10 - v9 < v11) {
    unint64_t v11 = v10 - v9;
  }
  unint64_t v12 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  unint64_t v13 = v10 % 6;
  _CF = v11 >= v13;
  unint64_t v15 = v11 - v13;
  if (!_CF) {
    unint64_t v15 = 0;
  }
  if (v12 >= 2)
  {
    uint64_t v16 = 0;
    unsigned int v161 = v9 % 3;
    unint64_t v17 = 6 * (v9 / 6) - v9 + 6;
    unint64_t v160 = v12 >> 1;
    uint64_t v18 = *a8 * a6[5];
    uint64_t v20 = *a3;
    uint64_t v19 = a3[1];
    unint64_t v22 = *a4;
    unint64_t v21 = a4[1];
    uint64_t v24 = *a7 + v18;
    uint64_t v25 = 8 * a6[4];
    unint64_t v26 = v19 + v21 * (v8 >> 1) + 4 * (v9 / 3);
    unint64_t v27 = v20 + v22 * v8 + 4 * (v9 / 3);
    uint64_t v28 = (_DWORD *)(v27 + v22);
    uint64_t v159 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v29 = *a7 + *a8 + v18;
    uint64_t v157 = 2 * *a8;
    unint64_t v158 = v21 >> 2;
    __int16 v30 = COERCE_UNSIGNED_INT(1.0);
    do
    {
      uint64_t v162 = v24;
      uint64_t v163 = v16;
      uint64_t v31 = 0;
      uint64_t v32 = v24;
      uint64_t v33 = v29;
      unsigned int v34 = (_DWORD *)v27;
      unsigned int v35 = v28;
      unint64_t v36 = (_DWORD *)v26;
      unsigned int v37 = v161;
      unsigned int v38 = v161;
      do
      {
        unsigned int v39 = v35;
        unsigned int v40 = v34;
        unint64_t v41 = (_WORD *)(v32 + v25);
        unint64_t v42 = *((unsigned __int8 *)&v165 + v37);
        int v43 = (_WORD *)(v33 + v25);
        int v44 = (*v34 >> v42) & 0x3FF;
        unint64_t v45 = v42 >> 2;
        uint64_t v46 = (v42 >> 2) & 0x3C;
        unsigned int v34 = (_DWORD *)((char *)v34 + v46);
        unint64_t v47 = *((unsigned __int8 *)&v165 + v38);
        int v48 = ((*v36 >> v47) & 0x3FF) - 512;
        uint64_t v49 = (v47 >> 2) & 0x3C;
        if (v38 == 2) {
          unsigned int v50 = 0;
        }
        else {
          unsigned int v50 = v38 + 1;
        }
        int v51 = (_DWORD *)((char *)v36 + v49);
        unint64_t v52 = *((unsigned __int8 *)&v165 + v50);
        int v53 = (*v51 >> v52) & 0x3FF;
        unsigned int v54 = (_DWORD *)((char *)v51 + ((v52 >> 2) & 0x3C));
        if (v50 == 2) {
          unsigned int v55 = 0;
        }
        else {
          unsigned int v55 = v50 + 1;
        }
        int v56 = v53 - 512;
        if (v31)
        {
          unsigned int v38 = v55;
          unint64_t v36 = v54;
        }
        float v57 = (double)v44 * 0.000977517107;
        _D6 = v57;
        double v59 = (double)v56 * 1.4746;
        double v60 = (double)v48 * -0.164553;
        double v61 = (double)v56 * -0.571353;
        _S17 = _D6 + v59 * 0.000977517107;
        double v63 = _D6 + v60 * 0.000977517107 + v61 * 0.000977517107;
        double v64 = (double)v48 * 1.8814;
        *(float *)&_D6 = _D6 + v64 * 0.000977517107;
        __asm
        {
          FCVT            H6, S6
          FCVT            H17, S17
        }
        v41[2] = LOWORD(_D6);
        v41[3] = v30;
        int v68 = (*v39 >> v42) & 0x3FF;
        _S6 = v63;
        unsigned int v35 = (_DWORD *)((char *)v39 + v46);
        *unint64_t v41 = LOWORD(_S17);
        if (v37 == 2) {
          unsigned int v37 = 0;
        }
        else {
          ++v37;
        }
        float v70 = (double)v68 * 0.000977517107;
        double v71 = v70;
        __asm { FCVT            H6, S6 }
        _S16 = v71 + v59 * 0.000977517107;
        _S7 = v71 + v60 * 0.000977517107 + v61 * 0.000977517107;
        v41[1] = _H6;
        _S6 = v71 + v64 * 0.000977517107;
        __asm { FCVT            H16, S16 }
        _WORD *v43 = LOWORD(_S16);
        __asm
        {
          FCVT            H7, S7
          FCVT            H6, S6
        }
        v43[1] = LOWORD(_S7);
        v43[2] = LOWORD(_S6);
        v43[3] = v30;
        ++v31;
        v33 += 8;
        v32 += 8;
      }
      while (v17 != v31);
      unint64_t v164 = v26;
      if (v17 >= v15)
      {
        int v124 = (_WORD *)(v33 + v25);
        int v125 = (_WORD *)(v32 + v25);
        unint64_t v80 = v17;
      }
      else
      {
        unint64_t v76 = 0;
        unsigned int v77 = (char *)v40 + ((v42 >> 2) & 0x3C);
        int v78 = (char *)v39 + ((v42 >> 2) & 0x3C);
        uint64_t v79 = v25;
        unint64_t v80 = v17;
        do
        {
          unsigned int v82 = *(_DWORD *)&v77[v76];
          unsigned int v81 = *(_DWORD *)&v77[v76 + 4];
          unsigned int v84 = v36[v76 / 4];
          unsigned int v83 = v36[v76 / 4 + 1];
          double v85 = (double)(int)(((v84 >> 10) & 0x3FF) - 512);
          float v86 = (double)(v82 & 0x3FF) * 0.000977517107;
          _D6 = v86;
          _D16 = v85 * 1.4746;
          _S17 = _D6 + v85 * 1.4746 * 0.000977517107;
          double v90 = (double)(int)((v84 & 0x3FF) - 512);
          double v91 = v90 * -0.164553;
          _D7 = v85 * -0.571353;
          _D20 = _D6 + v90 * -0.164553 * 0.000977517107 + _D7 * 0.000977517107;
          double v94 = v90 * 1.8814;
          *(float *)&_D6 = _D6 + v94 * 0.000977517107;
          __asm { FCVT            H17, S17 }
          int v95 = (_WORD *)(v32 + v79);
          unsigned int v96 = (_WORD *)(v33 + v79);
          __asm { FCVT            H6, S6 }
          *int v95 = LOWORD(_S17);
          float v97 = (double)((v82 >> 10) & 0x3FF) * 0.000977517107;
          v95[3] = v30;
          _D17 = v97;
          v95[2] = LOWORD(_D6);
          *(float *)&_D6 = _D17 + _D16 * 0.000977517107;
          _D21 = _D17 + v91 * 0.000977517107 + _D7 * 0.000977517107;
          *(float *)&_D17 = _D17 + v94 * 0.000977517107;
          *(float *)&_D20 = _D20;
          __asm { FCVT            H6, S6 }
          v95[4] = LOWORD(_D6);
          __asm { FCVT            H6, S17 }
          v95[6] = LOWORD(_D6);
          v95[7] = v30;
          *(float *)&_D6 = _D21;
          unsigned int v101 = *(_DWORD *)&v78[v76];
          unsigned int v100 = *(_DWORD *)&v78[v76 + 4];
          __asm { FCVT            H20, S20 }
          *(float *)&_D17 = (double)(v101 & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          *(float *)&_D21 = _D17 + _D16 * 0.000977517107;
          __asm { FCVT            H6, S6 }
          _S22 = _D17 + v91 * 0.000977517107 + _D7 * 0.000977517107;
          *(float *)&_D17 = _D17 + v94 * 0.000977517107;
          v95[1] = LOWORD(_D20);
          __asm
          {
            FCVT            H20, S21
            FCVT            H21, S22
          }
          v95[5] = LOWORD(_D6);
          __asm { FCVT            H6, S17 }
          *(float *)&_D17 = (double)((v101 >> 10) & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          *unsigned int v96 = LOWORD(_D20);
          *(float *)&_D16 = _D17 + _D16 * 0.000977517107;
          *(float *)&_D7 = _D17 + v91 * 0.000977517107 + _D7 * 0.000977517107;
          v96[1] = LOWORD(_D21);
          *(float *)&_D17 = _D17 + v94 * 0.000977517107;
          __asm
          {
            FCVT            H16, S16
            FCVT            H7, S7
            FCVT            H17, S17
          }
          v96[2] = LOWORD(_D6);
          v96[3] = v30;
          *(float *)&_D6 = (double)((v82 >> 20) & 0x3FF) * 0.000977517107;
          double v105 = (double)(int)((v83 & 0x3FF) - 512);
          v96[4] = LOWORD(_D16);
          _D6 = *(float *)&_D6;
          _D16 = v105 * 1.4746;
          double v108 = (double)(int)(((v84 >> 20) & 0x3FF) - 512);
          v96[5] = LOWORD(_D7);
          *(float *)&_D7 = _D6 + v105 * 1.4746 * 0.000977517107;
          double v109 = v108 * -0.164553;
          double v110 = v105 * -0.571353;
          v96[6] = LOWORD(_D17);
          *(float *)&_D17 = _D6 + v108 * -0.164553 * 0.000977517107 + v110 * 0.000977517107;
          double v111 = v108 * 1.8814;
          *(float *)&_D6 = _D6 + v111 * 0.000977517107;
          __asm { FCVT            H7, S7 }
          v96[7] = v30;
          v95[8] = LOWORD(_D7);
          __asm { FCVT            H7, S17 }
          v95[9] = LOWORD(_D7);
          __asm { FCVT            H6, S6 }
          *(float *)&_D7 = (double)(v81 & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          v95[10] = LOWORD(_D6);
          *(float *)&_D6 = _D7 + _D16 * 0.000977517107;
          *(float *)&_D17 = _D7 + v109 * 0.000977517107 + v110 * 0.000977517107;
          v95[11] = v30;
          *(float *)&_D7 = _D7 + v111 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H17, S17
            FCVT            H7, S7
          }
          v95[12] = LOWORD(_D6);
          *(float *)&_D6 = (double)((v101 >> 20) & 0x3FF) * 0.000977517107;
          _D6 = *(float *)&_D6;
          v95[13] = LOWORD(_D17);
          *(float *)&_D17 = _D6 + _D16 * 0.000977517107;
          *(float *)&_D21 = _D6 + v109 * 0.000977517107 + v110 * 0.000977517107;
          v95[14] = LOWORD(_D7);
          *(float *)&_D6 = _D6 + v111 * 0.000977517107;
          __asm
          {
            FCVT            H7, S17
            FCVT            H17, S21
            FCVT            H6, S6
          }
          v95[15] = v30;
          *(float *)&_D21 = (double)(v100 & 0x3FF) * 0.000977517107;
          v96[8] = LOWORD(_D7);
          *(float *)&_D16 = *(float *)&_D21 + _D16 * 0.000977517107;
          v96[9] = LOWORD(_D17);
          *(float *)&_D17 = *(float *)&_D21 + v109 * 0.000977517107 + v110 * 0.000977517107;
          *(float *)&_D7 = *(float *)&_D21 + v111 * 0.000977517107;
          __asm
          {
            FCVT            H16, S16
            FCVT            H17, S17
          }
          v96[10] = LOWORD(_D6);
          __asm { FCVT            H6, S7 }
          int v114 = ((v83 >> 20) & 0x3FF) - 512;
          v96[11] = v30;
          *(float *)&_D7 = (double)((v81 >> 10) & 0x3FF) * 0.000977517107;
          v96[12] = LOWORD(_D16);
          _D7 = *(float *)&_D7;
          double v116 = (double)v114 * 1.4746;
          v96[13] = LOWORD(_D17);
          *(float *)&_D17 = _D7 + v116 * 0.000977517107;
          double v117 = (double)(int)(((v83 >> 10) & 0x3FF) - 512);
          double v118 = v117 * -0.164553;
          v96[14] = LOWORD(_D6);
          _D6 = (double)v114 * -0.571353;
          *(float *)&_D16 = _D7 + v117 * -0.164553 * 0.000977517107 + _D6 * 0.000977517107;
          double v120 = v117 * 1.8814;
          v96[15] = v30;
          *(float *)&_D7 = _D7 + v120 * 0.000977517107;
          __asm
          {
            FCVT            H17, S17
            FCVT            H16, S16
            FCVT            H7, S7
          }
          v95[16] = LOWORD(_D17);
          *(float *)&_D17 = (double)((v81 >> 20) & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          v95[17] = LOWORD(_D16);
          *(float *)&_D16 = _D17 + v116 * 0.000977517107;
          *(float *)&_D21 = _D17 + v118 * 0.000977517107 + _D6 * 0.000977517107;
          v95[18] = LOWORD(_D7);
          *(float *)&_D7 = _D17 + v120 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v95[20] = LOWORD(_D16);
          __asm { FCVT            H16, S21 }
          v95[21] = LOWORD(_D16);
          __asm { FCVT            H7, S7 }
          v95[22] = LOWORD(_D7);
          *(float *)&_D7 = (double)((v100 >> 10) & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          *(float *)&_D16 = _D7 + v116 * 0.000977517107;
          v95[19] = v30;
          *(float *)&_D17 = _D7 + v118 * 0.000977517107 + _D6 * 0.000977517107;
          *(float *)&_D7 = _D7 + v120 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v95[23] = v30;
          v96[16] = LOWORD(_D16);
          __asm { FCVT            H16, S17 }
          v96[17] = LOWORD(_D16);
          __asm { FCVT            H7, S7 }
          v96[18] = LOWORD(_D7);
          *(float *)&_D7 = (double)((v100 >> 20) & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          v96[19] = v30;
          *(float *)&_D16 = _D7 + v116 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v96[20] = LOWORD(_D16);
          *(float *)&_D6 = _D7 + v118 * 0.000977517107 + _D6 * 0.000977517107;
          *(float *)&_D7 = _D7 + v120 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H7, S7
          }
          v96[21] = LOWORD(_D6);
          v96[22] = LOWORD(_D7);
          v96[23] = v30;
          v80 += 6;
          v76 += 8;
          v79 += 48;
        }
        while (v80 < v15);
        unsigned int v34 = (_DWORD *)((char *)v40 + (v45 & 0x3C) + v76);
        unsigned int v35 = (_DWORD *)((char *)v39 + (v45 & 0x3C) + v76);
        unint64_t v36 = (_DWORD *)((char *)v36 + v76);
        int v124 = (_WORD *)(v33 + v79);
        int v125 = (_WORD *)(v32 + v79);
      }
      unsigned int v126 = v15 % 3;
      if (v80 < v11)
      {
        do
        {
          unint64_t v127 = *((unsigned __int8 *)&v165 + v126);
          int v128 = (*v34 >> v127) & 0x3FF;
          uint64_t v129 = (v127 >> 2) & 0x3C;
          unsigned int v34 = (_DWORD *)((char *)v34 + v129);
          unint64_t v130 = *((unsigned __int8 *)&v165 + v38);
          int v131 = ((*v36 >> v130) & 0x3FF) - 512;
          uint64_t v132 = (v130 >> 2) & 0x3C;
          if (v38 == 2) {
            unsigned int v133 = 0;
          }
          else {
            unsigned int v133 = v38 + 1;
          }
          int v134 = (_DWORD *)((char *)v36 + v132);
          unint64_t v135 = *((unsigned __int8 *)&v165 + v133);
          int v136 = (*v134 >> v135) & 0x3FF;
          __int16 v137 = (_DWORD *)((char *)v134 + ((v135 >> 2) & 0x3C));
          if (v133 == 2) {
            unsigned int v138 = 0;
          }
          else {
            unsigned int v138 = v133 + 1;
          }
          int v139 = v136 - 512;
          if (v80)
          {
            unsigned int v38 = v138;
            unint64_t v36 = v137;
          }
          float v140 = (double)v128 * 0.000977517107;
          _D6 = v140;
          double v142 = (double)v139 * 1.4746;
          double v143 = (double)v131 * -0.164553;
          double v144 = (double)v139 * -0.571353;
          _S17 = _D6 + v142 * 0.000977517107;
          double v146 = _D6 + v143 * 0.000977517107 + v144 * 0.000977517107;
          double v147 = (double)v131 * 1.8814;
          *(float *)&_D6 = _D6 + v147 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H17, S17
          }
          v125[2] = LOWORD(_D6);
          v125[3] = v30;
          int v148 = (*v35 >> v127) & 0x3FF;
          _S6 = v146;
          unsigned int v35 = (_DWORD *)((char *)v35 + v129);
          *int v125 = LOWORD(_S17);
          if (v126 == 2) {
            unsigned int v126 = 0;
          }
          else {
            ++v126;
          }
          float v150 = (double)v148 * 0.000977517107;
          double v151 = v150;
          __asm { FCVT            H6, S6 }
          _S16 = v151 + v142 * 0.000977517107;
          _S7 = v151 + v143 * 0.000977517107 + v144 * 0.000977517107;
          v125[1] = _H6;
          _S6 = v151 + v147 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          *int v124 = LOWORD(_S16);
          __asm
          {
            FCVT            H7, S7
            FCVT            H6, S6
          }
          v124[1] = LOWORD(_S7);
          v124[2] = LOWORD(_S6);
          v124[3] = v30;
          ++v80;
          v125 += 4;
          v124 += 4;
        }
        while (v11 != v80);
      }
      v27 += 4 * v159;
      v28 += v159;
      uint64_t v16 = v163 + 1;
      v29 += v157;
      uint64_t v24 = v162 + v157;
      unint64_t v26 = v164 + 4 * v158;
    }
    while (v163 + 1 != v160);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU709_RGhA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  int v165 = 1313280;
  unint64_t v8 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  unint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  unint64_t v11 = a6[2];
  if (v10 - v9 < v11) {
    unint64_t v11 = v10 - v9;
  }
  unint64_t v12 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  unint64_t v13 = v10 % 6;
  _CF = v11 >= v13;
  unint64_t v15 = v11 - v13;
  if (!_CF) {
    unint64_t v15 = 0;
  }
  if (v12 >= 2)
  {
    uint64_t v16 = 0;
    unsigned int v161 = v9 % 3;
    unint64_t v17 = 6 * (v9 / 6) - v9 + 6;
    unint64_t v160 = v12 >> 1;
    uint64_t v18 = *a8 * a6[5];
    uint64_t v20 = *a3;
    uint64_t v19 = a3[1];
    unint64_t v22 = *a4;
    unint64_t v21 = a4[1];
    uint64_t v24 = *a7 + v18;
    uint64_t v25 = 8 * a6[4];
    unint64_t v26 = v19 + v21 * (v8 >> 1) + 4 * (v9 / 3);
    unint64_t v27 = v20 + v22 * v8 + 4 * (v9 / 3);
    uint64_t v28 = (_DWORD *)(v27 + v22);
    uint64_t v159 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v29 = *a7 + *a8 + v18;
    uint64_t v157 = 2 * *a8;
    unint64_t v158 = v21 >> 2;
    __int16 v30 = COERCE_UNSIGNED_INT(1.0);
    do
    {
      uint64_t v162 = v24;
      uint64_t v163 = v16;
      uint64_t v31 = 0;
      uint64_t v32 = v24;
      uint64_t v33 = v29;
      unsigned int v34 = (_DWORD *)v27;
      unsigned int v35 = v28;
      unint64_t v36 = (_DWORD *)v26;
      unsigned int v37 = v161;
      unsigned int v38 = v161;
      do
      {
        unsigned int v39 = v35;
        unsigned int v40 = v34;
        unint64_t v41 = (_WORD *)(v32 + v25);
        unint64_t v42 = *((unsigned __int8 *)&v165 + v37);
        int v43 = (_WORD *)(v33 + v25);
        int v44 = (*v34 >> v42) & 0x3FF;
        unint64_t v45 = v42 >> 2;
        uint64_t v46 = (v42 >> 2) & 0x3C;
        unsigned int v34 = (_DWORD *)((char *)v34 + v46);
        unint64_t v47 = *((unsigned __int8 *)&v165 + v38);
        int v48 = ((*v36 >> v47) & 0x3FF) - 512;
        uint64_t v49 = (v47 >> 2) & 0x3C;
        if (v38 == 2) {
          unsigned int v50 = 0;
        }
        else {
          unsigned int v50 = v38 + 1;
        }
        int v51 = (_DWORD *)((char *)v36 + v49);
        unint64_t v52 = *((unsigned __int8 *)&v165 + v50);
        int v53 = (*v51 >> v52) & 0x3FF;
        unsigned int v54 = (_DWORD *)((char *)v51 + ((v52 >> 2) & 0x3C));
        if (v50 == 2) {
          unsigned int v55 = 0;
        }
        else {
          unsigned int v55 = v50 + 1;
        }
        int v56 = v53 - 512;
        if (v31)
        {
          unsigned int v38 = v55;
          unint64_t v36 = v54;
        }
        float v57 = (double)v44 * 0.000977517107;
        _D6 = v57;
        double v59 = (double)v56 * 1.5748;
        double v60 = (double)v48 * -0.187324;
        double v61 = (double)v56 * -0.468124;
        _S17 = _D6 + v59 * 0.000977517107;
        double v63 = _D6 + v60 * 0.000977517107 + v61 * 0.000977517107;
        double v64 = (double)v48 * 1.8556;
        *(float *)&_D6 = _D6 + v64 * 0.000977517107;
        __asm
        {
          FCVT            H6, S6
          FCVT            H17, S17
        }
        v41[2] = LOWORD(_D6);
        v41[3] = v30;
        int v68 = (*v39 >> v42) & 0x3FF;
        _S6 = v63;
        unsigned int v35 = (_DWORD *)((char *)v39 + v46);
        *unint64_t v41 = LOWORD(_S17);
        if (v37 == 2) {
          unsigned int v37 = 0;
        }
        else {
          ++v37;
        }
        float v70 = (double)v68 * 0.000977517107;
        double v71 = v70;
        __asm { FCVT            H6, S6 }
        _S16 = v71 + v59 * 0.000977517107;
        _S7 = v71 + v60 * 0.000977517107 + v61 * 0.000977517107;
        v41[1] = _H6;
        _S6 = v71 + v64 * 0.000977517107;
        __asm { FCVT            H16, S16 }
        _WORD *v43 = LOWORD(_S16);
        __asm
        {
          FCVT            H7, S7
          FCVT            H6, S6
        }
        v43[1] = LOWORD(_S7);
        v43[2] = LOWORD(_S6);
        v43[3] = v30;
        ++v31;
        v33 += 8;
        v32 += 8;
      }
      while (v17 != v31);
      unint64_t v164 = v26;
      if (v17 >= v15)
      {
        int v124 = (_WORD *)(v33 + v25);
        int v125 = (_WORD *)(v32 + v25);
        unint64_t v80 = v17;
      }
      else
      {
        unint64_t v76 = 0;
        unsigned int v77 = (char *)v40 + ((v42 >> 2) & 0x3C);
        int v78 = (char *)v39 + ((v42 >> 2) & 0x3C);
        uint64_t v79 = v25;
        unint64_t v80 = v17;
        do
        {
          unsigned int v82 = *(_DWORD *)&v77[v76];
          unsigned int v81 = *(_DWORD *)&v77[v76 + 4];
          unsigned int v84 = v36[v76 / 4];
          unsigned int v83 = v36[v76 / 4 + 1];
          double v85 = (double)(int)(((v84 >> 10) & 0x3FF) - 512);
          float v86 = (double)(v82 & 0x3FF) * 0.000977517107;
          _D6 = v86;
          _D16 = v85 * 1.5748;
          _S17 = _D6 + v85 * 1.5748 * 0.000977517107;
          double v90 = (double)(int)((v84 & 0x3FF) - 512);
          double v91 = v90 * -0.187324;
          _D7 = v85 * -0.468124;
          _D20 = _D6 + v90 * -0.187324 * 0.000977517107 + _D7 * 0.000977517107;
          double v94 = v90 * 1.8556;
          *(float *)&_D6 = _D6 + v94 * 0.000977517107;
          __asm { FCVT            H17, S17 }
          int v95 = (_WORD *)(v32 + v79);
          unsigned int v96 = (_WORD *)(v33 + v79);
          __asm { FCVT            H6, S6 }
          *int v95 = LOWORD(_S17);
          float v97 = (double)((v82 >> 10) & 0x3FF) * 0.000977517107;
          v95[3] = v30;
          _D17 = v97;
          v95[2] = LOWORD(_D6);
          *(float *)&_D6 = _D17 + _D16 * 0.000977517107;
          _D21 = _D17 + v91 * 0.000977517107 + _D7 * 0.000977517107;
          *(float *)&_D17 = _D17 + v94 * 0.000977517107;
          *(float *)&_D20 = _D20;
          __asm { FCVT            H6, S6 }
          v95[4] = LOWORD(_D6);
          __asm { FCVT            H6, S17 }
          v95[6] = LOWORD(_D6);
          v95[7] = v30;
          *(float *)&_D6 = _D21;
          unsigned int v101 = *(_DWORD *)&v78[v76];
          unsigned int v100 = *(_DWORD *)&v78[v76 + 4];
          __asm { FCVT            H20, S20 }
          *(float *)&_D17 = (double)(v101 & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          *(float *)&_D21 = _D17 + _D16 * 0.000977517107;
          __asm { FCVT            H6, S6 }
          _S22 = _D17 + v91 * 0.000977517107 + _D7 * 0.000977517107;
          *(float *)&_D17 = _D17 + v94 * 0.000977517107;
          v95[1] = LOWORD(_D20);
          __asm
          {
            FCVT            H20, S21
            FCVT            H21, S22
          }
          v95[5] = LOWORD(_D6);
          __asm { FCVT            H6, S17 }
          *(float *)&_D17 = (double)((v101 >> 10) & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          *unsigned int v96 = LOWORD(_D20);
          *(float *)&_D16 = _D17 + _D16 * 0.000977517107;
          *(float *)&_D7 = _D17 + v91 * 0.000977517107 + _D7 * 0.000977517107;
          v96[1] = LOWORD(_D21);
          *(float *)&_D17 = _D17 + v94 * 0.000977517107;
          __asm
          {
            FCVT            H16, S16
            FCVT            H7, S7
            FCVT            H17, S17
          }
          v96[2] = LOWORD(_D6);
          v96[3] = v30;
          *(float *)&_D6 = (double)((v82 >> 20) & 0x3FF) * 0.000977517107;
          double v105 = (double)(int)((v83 & 0x3FF) - 512);
          v96[4] = LOWORD(_D16);
          _D6 = *(float *)&_D6;
          _D16 = v105 * 1.5748;
          double v108 = (double)(int)(((v84 >> 20) & 0x3FF) - 512);
          v96[5] = LOWORD(_D7);
          *(float *)&_D7 = _D6 + v105 * 1.5748 * 0.000977517107;
          double v109 = v108 * -0.187324;
          double v110 = v105 * -0.468124;
          v96[6] = LOWORD(_D17);
          *(float *)&_D17 = _D6 + v108 * -0.187324 * 0.000977517107 + v110 * 0.000977517107;
          double v111 = v108 * 1.8556;
          *(float *)&_D6 = _D6 + v111 * 0.000977517107;
          __asm { FCVT            H7, S7 }
          v96[7] = v30;
          v95[8] = LOWORD(_D7);
          __asm { FCVT            H7, S17 }
          v95[9] = LOWORD(_D7);
          __asm { FCVT            H6, S6 }
          *(float *)&_D7 = (double)(v81 & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          v95[10] = LOWORD(_D6);
          *(float *)&_D6 = _D7 + _D16 * 0.000977517107;
          *(float *)&_D17 = _D7 + v109 * 0.000977517107 + v110 * 0.000977517107;
          v95[11] = v30;
          *(float *)&_D7 = _D7 + v111 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H17, S17
            FCVT            H7, S7
          }
          v95[12] = LOWORD(_D6);
          *(float *)&_D6 = (double)((v101 >> 20) & 0x3FF) * 0.000977517107;
          _D6 = *(float *)&_D6;
          v95[13] = LOWORD(_D17);
          *(float *)&_D17 = _D6 + _D16 * 0.000977517107;
          *(float *)&_D21 = _D6 + v109 * 0.000977517107 + v110 * 0.000977517107;
          v95[14] = LOWORD(_D7);
          *(float *)&_D6 = _D6 + v111 * 0.000977517107;
          __asm
          {
            FCVT            H7, S17
            FCVT            H17, S21
            FCVT            H6, S6
          }
          v95[15] = v30;
          *(float *)&_D21 = (double)(v100 & 0x3FF) * 0.000977517107;
          v96[8] = LOWORD(_D7);
          *(float *)&_D16 = *(float *)&_D21 + _D16 * 0.000977517107;
          v96[9] = LOWORD(_D17);
          *(float *)&_D17 = *(float *)&_D21 + v109 * 0.000977517107 + v110 * 0.000977517107;
          *(float *)&_D7 = *(float *)&_D21 + v111 * 0.000977517107;
          __asm
          {
            FCVT            H16, S16
            FCVT            H17, S17
          }
          v96[10] = LOWORD(_D6);
          __asm { FCVT            H6, S7 }
          int v114 = ((v83 >> 20) & 0x3FF) - 512;
          v96[11] = v30;
          *(float *)&_D7 = (double)((v81 >> 10) & 0x3FF) * 0.000977517107;
          v96[12] = LOWORD(_D16);
          _D7 = *(float *)&_D7;
          double v116 = (double)v114 * 1.5748;
          v96[13] = LOWORD(_D17);
          *(float *)&_D17 = _D7 + v116 * 0.000977517107;
          double v117 = (double)(int)(((v83 >> 10) & 0x3FF) - 512);
          double v118 = v117 * -0.187324;
          v96[14] = LOWORD(_D6);
          _D6 = (double)v114 * -0.468124;
          *(float *)&_D16 = _D7 + v117 * -0.187324 * 0.000977517107 + _D6 * 0.000977517107;
          double v120 = v117 * 1.8556;
          v96[15] = v30;
          *(float *)&_D7 = _D7 + v120 * 0.000977517107;
          __asm
          {
            FCVT            H17, S17
            FCVT            H16, S16
            FCVT            H7, S7
          }
          v95[16] = LOWORD(_D17);
          *(float *)&_D17 = (double)((v81 >> 20) & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          v95[17] = LOWORD(_D16);
          *(float *)&_D16 = _D17 + v116 * 0.000977517107;
          *(float *)&_D21 = _D17 + v118 * 0.000977517107 + _D6 * 0.000977517107;
          v95[18] = LOWORD(_D7);
          *(float *)&_D7 = _D17 + v120 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v95[20] = LOWORD(_D16);
          __asm { FCVT            H16, S21 }
          v95[21] = LOWORD(_D16);
          __asm { FCVT            H7, S7 }
          v95[22] = LOWORD(_D7);
          *(float *)&_D7 = (double)((v100 >> 10) & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          *(float *)&_D16 = _D7 + v116 * 0.000977517107;
          v95[19] = v30;
          *(float *)&_D17 = _D7 + v118 * 0.000977517107 + _D6 * 0.000977517107;
          *(float *)&_D7 = _D7 + v120 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v95[23] = v30;
          v96[16] = LOWORD(_D16);
          __asm { FCVT            H16, S17 }
          v96[17] = LOWORD(_D16);
          __asm { FCVT            H7, S7 }
          v96[18] = LOWORD(_D7);
          *(float *)&_D7 = (double)((v100 >> 20) & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          v96[19] = v30;
          *(float *)&_D16 = _D7 + v116 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v96[20] = LOWORD(_D16);
          *(float *)&_D6 = _D7 + v118 * 0.000977517107 + _D6 * 0.000977517107;
          *(float *)&_D7 = _D7 + v120 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H7, S7
          }
          v96[21] = LOWORD(_D6);
          v96[22] = LOWORD(_D7);
          v96[23] = v30;
          v80 += 6;
          v76 += 8;
          v79 += 48;
        }
        while (v80 < v15);
        unsigned int v34 = (_DWORD *)((char *)v40 + (v45 & 0x3C) + v76);
        unsigned int v35 = (_DWORD *)((char *)v39 + (v45 & 0x3C) + v76);
        unint64_t v36 = (_DWORD *)((char *)v36 + v76);
        int v124 = (_WORD *)(v33 + v79);
        int v125 = (_WORD *)(v32 + v79);
      }
      unsigned int v126 = v15 % 3;
      if (v80 < v11)
      {
        do
        {
          unint64_t v127 = *((unsigned __int8 *)&v165 + v126);
          int v128 = (*v34 >> v127) & 0x3FF;
          uint64_t v129 = (v127 >> 2) & 0x3C;
          unsigned int v34 = (_DWORD *)((char *)v34 + v129);
          unint64_t v130 = *((unsigned __int8 *)&v165 + v38);
          int v131 = ((*v36 >> v130) & 0x3FF) - 512;
          uint64_t v132 = (v130 >> 2) & 0x3C;
          if (v38 == 2) {
            unsigned int v133 = 0;
          }
          else {
            unsigned int v133 = v38 + 1;
          }
          int v134 = (_DWORD *)((char *)v36 + v132);
          unint64_t v135 = *((unsigned __int8 *)&v165 + v133);
          int v136 = (*v134 >> v135) & 0x3FF;
          __int16 v137 = (_DWORD *)((char *)v134 + ((v135 >> 2) & 0x3C));
          if (v133 == 2) {
            unsigned int v138 = 0;
          }
          else {
            unsigned int v138 = v133 + 1;
          }
          int v139 = v136 - 512;
          if (v80)
          {
            unsigned int v38 = v138;
            unint64_t v36 = v137;
          }
          float v140 = (double)v128 * 0.000977517107;
          _D6 = v140;
          double v142 = (double)v139 * 1.5748;
          double v143 = (double)v131 * -0.187324;
          double v144 = (double)v139 * -0.468124;
          _S17 = _D6 + v142 * 0.000977517107;
          double v146 = _D6 + v143 * 0.000977517107 + v144 * 0.000977517107;
          double v147 = (double)v131 * 1.8556;
          *(float *)&_D6 = _D6 + v147 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H17, S17
          }
          v125[2] = LOWORD(_D6);
          v125[3] = v30;
          int v148 = (*v35 >> v127) & 0x3FF;
          _S6 = v146;
          unsigned int v35 = (_DWORD *)((char *)v35 + v129);
          *int v125 = LOWORD(_S17);
          if (v126 == 2) {
            unsigned int v126 = 0;
          }
          else {
            ++v126;
          }
          float v150 = (double)v148 * 0.000977517107;
          double v151 = v150;
          __asm { FCVT            H6, S6 }
          _S16 = v151 + v142 * 0.000977517107;
          _S7 = v151 + v143 * 0.000977517107 + v144 * 0.000977517107;
          v125[1] = _H6;
          _S6 = v151 + v147 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          *int v124 = LOWORD(_S16);
          __asm
          {
            FCVT            H7, S7
            FCVT            H6, S6
          }
          v124[1] = LOWORD(_S7);
          v124[2] = LOWORD(_S6);
          v124[3] = v30;
          ++v80;
          v125 += 4;
          v124 += 4;
        }
        while (v11 != v80);
      }
      v27 += 4 * v159;
      v28 += v159;
      uint64_t v16 = v163 + 1;
      v29 += v157;
      uint64_t v24 = v162 + v157;
      unint64_t v26 = v164 + 4 * v158;
    }
    while (v163 + 1 != v160);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU601_RGhA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  int v165 = 1313280;
  unint64_t v8 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  unint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  unint64_t v11 = a6[2];
  if (v10 - v9 < v11) {
    unint64_t v11 = v10 - v9;
  }
  unint64_t v12 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  unint64_t v13 = v10 % 6;
  _CF = v11 >= v13;
  unint64_t v15 = v11 - v13;
  if (!_CF) {
    unint64_t v15 = 0;
  }
  if (v12 >= 2)
  {
    uint64_t v16 = 0;
    unsigned int v161 = v9 % 3;
    unint64_t v17 = 6 * (v9 / 6) - v9 + 6;
    unint64_t v160 = v12 >> 1;
    uint64_t v18 = *a8 * a6[5];
    uint64_t v20 = *a3;
    uint64_t v19 = a3[1];
    unint64_t v22 = *a4;
    unint64_t v21 = a4[1];
    uint64_t v24 = *a7 + v18;
    uint64_t v25 = 8 * a6[4];
    unint64_t v26 = v19 + v21 * (v8 >> 1) + 4 * (v9 / 3);
    unint64_t v27 = v20 + v22 * v8 + 4 * (v9 / 3);
    uint64_t v28 = (_DWORD *)(v27 + v22);
    uint64_t v159 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v29 = *a7 + *a8 + v18;
    uint64_t v157 = 2 * *a8;
    unint64_t v158 = v21 >> 2;
    __int16 v30 = COERCE_UNSIGNED_INT(1.0);
    do
    {
      uint64_t v162 = v24;
      uint64_t v163 = v16;
      uint64_t v31 = 0;
      uint64_t v32 = v24;
      uint64_t v33 = v29;
      unsigned int v34 = (_DWORD *)v27;
      unsigned int v35 = v28;
      unint64_t v36 = (_DWORD *)v26;
      unsigned int v37 = v161;
      unsigned int v38 = v161;
      do
      {
        unsigned int v39 = v35;
        unsigned int v40 = v34;
        unint64_t v41 = (_WORD *)(v32 + v25);
        unint64_t v42 = *((unsigned __int8 *)&v165 + v37);
        int v43 = (_WORD *)(v33 + v25);
        int v44 = (*v34 >> v42) & 0x3FF;
        unint64_t v45 = v42 >> 2;
        uint64_t v46 = (v42 >> 2) & 0x3C;
        unsigned int v34 = (_DWORD *)((char *)v34 + v46);
        unint64_t v47 = *((unsigned __int8 *)&v165 + v38);
        int v48 = ((*v36 >> v47) & 0x3FF) - 512;
        uint64_t v49 = (v47 >> 2) & 0x3C;
        if (v38 == 2) {
          unsigned int v50 = 0;
        }
        else {
          unsigned int v50 = v38 + 1;
        }
        int v51 = (_DWORD *)((char *)v36 + v49);
        unint64_t v52 = *((unsigned __int8 *)&v165 + v50);
        int v53 = (*v51 >> v52) & 0x3FF;
        unsigned int v54 = (_DWORD *)((char *)v51 + ((v52 >> 2) & 0x3C));
        if (v50 == 2) {
          unsigned int v55 = 0;
        }
        else {
          unsigned int v55 = v50 + 1;
        }
        int v56 = v53 - 512;
        if (v31)
        {
          unsigned int v38 = v55;
          unint64_t v36 = v54;
        }
        float v57 = (double)v44 * 0.000977517107;
        _D6 = v57;
        double v59 = (double)v56 * 1.402;
        double v60 = (double)v48 * -0.344136;
        double v61 = (double)v56 * -0.714136;
        _S17 = _D6 + v59 * 0.000977517107;
        double v63 = _D6 + v60 * 0.000977517107 + v61 * 0.000977517107;
        double v64 = (double)v48 * 1.772;
        *(float *)&_D6 = _D6 + v64 * 0.000977517107;
        __asm
        {
          FCVT            H6, S6
          FCVT            H17, S17
        }
        v41[2] = LOWORD(_D6);
        v41[3] = v30;
        int v68 = (*v39 >> v42) & 0x3FF;
        _S6 = v63;
        unsigned int v35 = (_DWORD *)((char *)v39 + v46);
        *unint64_t v41 = LOWORD(_S17);
        if (v37 == 2) {
          unsigned int v37 = 0;
        }
        else {
          ++v37;
        }
        float v70 = (double)v68 * 0.000977517107;
        double v71 = v70;
        __asm { FCVT            H6, S6 }
        _S16 = v71 + v59 * 0.000977517107;
        _S7 = v71 + v60 * 0.000977517107 + v61 * 0.000977517107;
        v41[1] = _H6;
        _S6 = v71 + v64 * 0.000977517107;
        __asm { FCVT            H16, S16 }
        _WORD *v43 = LOWORD(_S16);
        __asm
        {
          FCVT            H7, S7
          FCVT            H6, S6
        }
        v43[1] = LOWORD(_S7);
        v43[2] = LOWORD(_S6);
        v43[3] = v30;
        ++v31;
        v33 += 8;
        v32 += 8;
      }
      while (v17 != v31);
      unint64_t v164 = v26;
      if (v17 >= v15)
      {
        int v124 = (_WORD *)(v33 + v25);
        int v125 = (_WORD *)(v32 + v25);
        unint64_t v80 = v17;
      }
      else
      {
        unint64_t v76 = 0;
        unsigned int v77 = (char *)v40 + ((v42 >> 2) & 0x3C);
        int v78 = (char *)v39 + ((v42 >> 2) & 0x3C);
        uint64_t v79 = v25;
        unint64_t v80 = v17;
        do
        {
          unsigned int v82 = *(_DWORD *)&v77[v76];
          unsigned int v81 = *(_DWORD *)&v77[v76 + 4];
          unsigned int v84 = v36[v76 / 4];
          unsigned int v83 = v36[v76 / 4 + 1];
          double v85 = (double)(int)(((v84 >> 10) & 0x3FF) - 512);
          float v86 = (double)(v82 & 0x3FF) * 0.000977517107;
          _D6 = v86;
          _D16 = v85 * 1.402;
          _S17 = _D6 + v85 * 1.402 * 0.000977517107;
          double v90 = (double)(int)((v84 & 0x3FF) - 512);
          double v91 = v90 * -0.344136;
          _D7 = v85 * -0.714136;
          _D20 = _D6 + v90 * -0.344136 * 0.000977517107 + _D7 * 0.000977517107;
          double v94 = v90 * 1.772;
          *(float *)&_D6 = _D6 + v94 * 0.000977517107;
          __asm { FCVT            H17, S17 }
          int v95 = (_WORD *)(v32 + v79);
          unsigned int v96 = (_WORD *)(v33 + v79);
          __asm { FCVT            H6, S6 }
          *int v95 = LOWORD(_S17);
          float v97 = (double)((v82 >> 10) & 0x3FF) * 0.000977517107;
          v95[3] = v30;
          _D17 = v97;
          v95[2] = LOWORD(_D6);
          *(float *)&_D6 = _D17 + _D16 * 0.000977517107;
          _D21 = _D17 + v91 * 0.000977517107 + _D7 * 0.000977517107;
          *(float *)&_D17 = _D17 + v94 * 0.000977517107;
          *(float *)&_D20 = _D20;
          __asm { FCVT            H6, S6 }
          v95[4] = LOWORD(_D6);
          __asm { FCVT            H6, S17 }
          v95[6] = LOWORD(_D6);
          v95[7] = v30;
          *(float *)&_D6 = _D21;
          unsigned int v101 = *(_DWORD *)&v78[v76];
          unsigned int v100 = *(_DWORD *)&v78[v76 + 4];
          __asm { FCVT            H20, S20 }
          *(float *)&_D17 = (double)(v101 & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          *(float *)&_D21 = _D17 + _D16 * 0.000977517107;
          __asm { FCVT            H6, S6 }
          _S22 = _D17 + v91 * 0.000977517107 + _D7 * 0.000977517107;
          *(float *)&_D17 = _D17 + v94 * 0.000977517107;
          v95[1] = LOWORD(_D20);
          __asm
          {
            FCVT            H20, S21
            FCVT            H21, S22
          }
          v95[5] = LOWORD(_D6);
          __asm { FCVT            H6, S17 }
          *(float *)&_D17 = (double)((v101 >> 10) & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          *unsigned int v96 = LOWORD(_D20);
          *(float *)&_D16 = _D17 + _D16 * 0.000977517107;
          *(float *)&_D7 = _D17 + v91 * 0.000977517107 + _D7 * 0.000977517107;
          v96[1] = LOWORD(_D21);
          *(float *)&_D17 = _D17 + v94 * 0.000977517107;
          __asm
          {
            FCVT            H16, S16
            FCVT            H7, S7
            FCVT            H17, S17
          }
          v96[2] = LOWORD(_D6);
          v96[3] = v30;
          *(float *)&_D6 = (double)((v82 >> 20) & 0x3FF) * 0.000977517107;
          double v105 = (double)(int)((v83 & 0x3FF) - 512);
          v96[4] = LOWORD(_D16);
          _D6 = *(float *)&_D6;
          _D16 = v105 * 1.402;
          double v108 = (double)(int)(((v84 >> 20) & 0x3FF) - 512);
          v96[5] = LOWORD(_D7);
          *(float *)&_D7 = _D6 + v105 * 1.402 * 0.000977517107;
          double v109 = v108 * -0.344136;
          double v110 = v105 * -0.714136;
          v96[6] = LOWORD(_D17);
          *(float *)&_D17 = _D6 + v108 * -0.344136 * 0.000977517107 + v110 * 0.000977517107;
          double v111 = v108 * 1.772;
          *(float *)&_D6 = _D6 + v111 * 0.000977517107;
          __asm { FCVT            H7, S7 }
          v96[7] = v30;
          v95[8] = LOWORD(_D7);
          __asm { FCVT            H7, S17 }
          v95[9] = LOWORD(_D7);
          __asm { FCVT            H6, S6 }
          *(float *)&_D7 = (double)(v81 & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          v95[10] = LOWORD(_D6);
          *(float *)&_D6 = _D7 + _D16 * 0.000977517107;
          *(float *)&_D17 = _D7 + v109 * 0.000977517107 + v110 * 0.000977517107;
          v95[11] = v30;
          *(float *)&_D7 = _D7 + v111 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H17, S17
            FCVT            H7, S7
          }
          v95[12] = LOWORD(_D6);
          *(float *)&_D6 = (double)((v101 >> 20) & 0x3FF) * 0.000977517107;
          _D6 = *(float *)&_D6;
          v95[13] = LOWORD(_D17);
          *(float *)&_D17 = _D6 + _D16 * 0.000977517107;
          *(float *)&_D21 = _D6 + v109 * 0.000977517107 + v110 * 0.000977517107;
          v95[14] = LOWORD(_D7);
          *(float *)&_D6 = _D6 + v111 * 0.000977517107;
          __asm
          {
            FCVT            H7, S17
            FCVT            H17, S21
            FCVT            H6, S6
          }
          v95[15] = v30;
          *(float *)&_D21 = (double)(v100 & 0x3FF) * 0.000977517107;
          v96[8] = LOWORD(_D7);
          *(float *)&_D16 = *(float *)&_D21 + _D16 * 0.000977517107;
          v96[9] = LOWORD(_D17);
          *(float *)&_D17 = *(float *)&_D21 + v109 * 0.000977517107 + v110 * 0.000977517107;
          *(float *)&_D7 = *(float *)&_D21 + v111 * 0.000977517107;
          __asm
          {
            FCVT            H16, S16
            FCVT            H17, S17
          }
          v96[10] = LOWORD(_D6);
          __asm { FCVT            H6, S7 }
          int v114 = ((v83 >> 20) & 0x3FF) - 512;
          v96[11] = v30;
          *(float *)&_D7 = (double)((v81 >> 10) & 0x3FF) * 0.000977517107;
          v96[12] = LOWORD(_D16);
          _D7 = *(float *)&_D7;
          double v116 = (double)v114 * 1.402;
          v96[13] = LOWORD(_D17);
          *(float *)&_D17 = _D7 + v116 * 0.000977517107;
          double v117 = (double)(int)(((v83 >> 10) & 0x3FF) - 512);
          double v118 = v117 * -0.344136;
          v96[14] = LOWORD(_D6);
          _D6 = (double)v114 * -0.714136;
          *(float *)&_D16 = _D7 + v117 * -0.344136 * 0.000977517107 + _D6 * 0.000977517107;
          double v120 = v117 * 1.772;
          v96[15] = v30;
          *(float *)&_D7 = _D7 + v120 * 0.000977517107;
          __asm
          {
            FCVT            H17, S17
            FCVT            H16, S16
            FCVT            H7, S7
          }
          v95[16] = LOWORD(_D17);
          *(float *)&_D17 = (double)((v81 >> 20) & 0x3FF) * 0.000977517107;
          _D17 = *(float *)&_D17;
          v95[17] = LOWORD(_D16);
          *(float *)&_D16 = _D17 + v116 * 0.000977517107;
          *(float *)&_D21 = _D17 + v118 * 0.000977517107 + _D6 * 0.000977517107;
          v95[18] = LOWORD(_D7);
          *(float *)&_D7 = _D17 + v120 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v95[20] = LOWORD(_D16);
          __asm { FCVT            H16, S21 }
          v95[21] = LOWORD(_D16);
          __asm { FCVT            H7, S7 }
          v95[22] = LOWORD(_D7);
          *(float *)&_D7 = (double)((v100 >> 10) & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          *(float *)&_D16 = _D7 + v116 * 0.000977517107;
          v95[19] = v30;
          *(float *)&_D17 = _D7 + v118 * 0.000977517107 + _D6 * 0.000977517107;
          *(float *)&_D7 = _D7 + v120 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v95[23] = v30;
          v96[16] = LOWORD(_D16);
          __asm { FCVT            H16, S17 }
          v96[17] = LOWORD(_D16);
          __asm { FCVT            H7, S7 }
          v96[18] = LOWORD(_D7);
          *(float *)&_D7 = (double)((v100 >> 20) & 0x3FF) * 0.000977517107;
          _D7 = *(float *)&_D7;
          v96[19] = v30;
          *(float *)&_D16 = _D7 + v116 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          v96[20] = LOWORD(_D16);
          *(float *)&_D6 = _D7 + v118 * 0.000977517107 + _D6 * 0.000977517107;
          *(float *)&_D7 = _D7 + v120 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H7, S7
          }
          v96[21] = LOWORD(_D6);
          v96[22] = LOWORD(_D7);
          v96[23] = v30;
          v80 += 6;
          v76 += 8;
          v79 += 48;
        }
        while (v80 < v15);
        unsigned int v34 = (_DWORD *)((char *)v40 + (v45 & 0x3C) + v76);
        unsigned int v35 = (_DWORD *)((char *)v39 + (v45 & 0x3C) + v76);
        unint64_t v36 = (_DWORD *)((char *)v36 + v76);
        int v124 = (_WORD *)(v33 + v79);
        int v125 = (_WORD *)(v32 + v79);
      }
      unsigned int v126 = v15 % 3;
      if (v80 < v11)
      {
        do
        {
          unint64_t v127 = *((unsigned __int8 *)&v165 + v126);
          int v128 = (*v34 >> v127) & 0x3FF;
          uint64_t v129 = (v127 >> 2) & 0x3C;
          unsigned int v34 = (_DWORD *)((char *)v34 + v129);
          unint64_t v130 = *((unsigned __int8 *)&v165 + v38);
          int v131 = ((*v36 >> v130) & 0x3FF) - 512;
          uint64_t v132 = (v130 >> 2) & 0x3C;
          if (v38 == 2) {
            unsigned int v133 = 0;
          }
          else {
            unsigned int v133 = v38 + 1;
          }
          int v134 = (_DWORD *)((char *)v36 + v132);
          unint64_t v135 = *((unsigned __int8 *)&v165 + v133);
          int v136 = (*v134 >> v135) & 0x3FF;
          __int16 v137 = (_DWORD *)((char *)v134 + ((v135 >> 2) & 0x3C));
          if (v133 == 2) {
            unsigned int v138 = 0;
          }
          else {
            unsigned int v138 = v133 + 1;
          }
          int v139 = v136 - 512;
          if (v80)
          {
            unsigned int v38 = v138;
            unint64_t v36 = v137;
          }
          float v140 = (double)v128 * 0.000977517107;
          _D6 = v140;
          double v142 = (double)v139 * 1.402;
          double v143 = (double)v131 * -0.344136;
          double v144 = (double)v139 * -0.714136;
          _S17 = _D6 + v142 * 0.000977517107;
          double v146 = _D6 + v143 * 0.000977517107 + v144 * 0.000977517107;
          double v147 = (double)v131 * 1.772;
          *(float *)&_D6 = _D6 + v147 * 0.000977517107;
          __asm
          {
            FCVT            H6, S6
            FCVT            H17, S17
          }
          v125[2] = LOWORD(_D6);
          v125[3] = v30;
          int v148 = (*v35 >> v127) & 0x3FF;
          _S6 = v146;
          unsigned int v35 = (_DWORD *)((char *)v35 + v129);
          *int v125 = LOWORD(_S17);
          if (v126 == 2) {
            unsigned int v126 = 0;
          }
          else {
            ++v126;
          }
          float v150 = (double)v148 * 0.000977517107;
          double v151 = v150;
          __asm { FCVT            H6, S6 }
          _S16 = v151 + v142 * 0.000977517107;
          _S7 = v151 + v143 * 0.000977517107 + v144 * 0.000977517107;
          v125[1] = _H6;
          _S6 = v151 + v147 * 0.000977517107;
          __asm { FCVT            H16, S16 }
          *int v124 = LOWORD(_S16);
          __asm
          {
            FCVT            H7, S7
            FCVT            H6, S6
          }
          v124[1] = LOWORD(_S7);
          v124[2] = LOWORD(_S6);
          v124[3] = v30;
          ++v80;
          v125 += 4;
          v124 += 4;
        }
        while (v11 != v80);
      }
      v27 += 4 * v159;
      v28 += v159;
      uint64_t v16 = v163 + 1;
      v29 += v157;
      uint64_t v24 = v162 + v157;
      unint64_t v26 = v164 + 4 * v158;
    }
    while (v163 + 1 != v160);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU2020_RGfA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  int v169 = 1313280;
  unint64_t v8 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  unint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  unint64_t v11 = a6[2];
  if (v10 - v9 < v11) {
    unint64_t v11 = v10 - v9;
  }
  unint64_t v12 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  unint64_t v13 = v10 % 6;
  BOOL v14 = v11 >= v13;
  unint64_t v15 = v11 - v13;
  if (!v14) {
    unint64_t v15 = 0;
  }
  if (v12 >= 2)
  {
    uint64_t v16 = 0;
    unsigned int v164 = v9 % 3;
    unint64_t v17 = 6 * (v9 / 6) - v9 + 6;
    unint64_t v163 = v12 >> 1;
    uint64_t v18 = *a8 * a6[5];
    uint64_t v20 = *a3;
    uint64_t v19 = a3[1];
    unint64_t v22 = *a4;
    unint64_t v21 = a4[1];
    uint64_t v24 = *a7 + v18;
    uint64_t v25 = 16 * a6[4];
    unint64_t v26 = v19 + v21 * (v8 >> 1) + 4 * (v9 / 3);
    unint64_t v27 = v20 + v22 * v8 + 4 * (v9 / 3);
    uint64_t v28 = (_DWORD *)(v27 + v22);
    uint64_t v162 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v161 = v21 >> 2;
    uint64_t v29 = *a7 + *a8 + v18;
    unint64_t v160 = (2 * *a8) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      uint64_t v166 = v24;
      uint64_t v167 = v16;
      uint64_t v30 = 0;
      uint64_t v31 = v24;
      uint64_t v32 = v29;
      uint64_t v33 = (_DWORD *)v27;
      unsigned int v34 = v28;
      unint64_t v165 = v26;
      unsigned int v35 = (_DWORD *)v26;
      unsigned int v36 = v164;
      unsigned int v37 = v164;
      do
      {
        unsigned int v38 = v34;
        unsigned int v39 = v33;
        uint64_t v40 = v31 + v25;
        unint64_t v41 = *((unsigned __int8 *)&v169 + v36);
        uint64_t v42 = v32 + v25;
        int v43 = (*v33 >> v41) & 0x3FF;
        unint64_t v44 = v41 >> 2;
        uint64_t v45 = (v41 >> 2) & 0x3C;
        uint64_t v33 = (_DWORD *)((char *)v33 + v45);
        unint64_t v46 = *((unsigned __int8 *)&v169 + v37);
        int v47 = ((*v35 >> v46) & 0x3FF) - 512;
        uint64_t v48 = (v46 >> 2) & 0x3C;
        if (v37 == 2) {
          unsigned int v49 = 0;
        }
        else {
          unsigned int v49 = v37 + 1;
        }
        unsigned int v50 = (_DWORD *)((char *)v35 + v48);
        unint64_t v51 = *((unsigned __int8 *)&v169 + v49);
        int v52 = (*v50 >> v51) & 0x3FF;
        int v53 = (_DWORD *)((char *)v50 + ((v51 >> 2) & 0x3C));
        if (v49 == 2) {
          unsigned int v54 = 0;
        }
        else {
          unsigned int v54 = v49 + 1;
        }
        int v55 = v52 - 512;
        if (v30)
        {
          unsigned int v37 = v54;
          unsigned int v35 = v53;
        }
        float v56 = (double)v43 * 0.000977517107;
        double v57 = v56;
        double v58 = (double)v55 * 1.4746;
        double v59 = v57 + v58 * 0.000977517107;
        double v60 = (double)v47 * -0.164553;
        double v61 = (double)v55 * -0.571353;
        double v62 = v57 + v60 * 0.000977517107 + v61 * 0.000977517107;
        double v63 = (double)v47 * 1.8814;
        *(float *)&double v57 = v57 + v63 * 0.000977517107;
        *(_DWORD *)(v40 + 12) = 1065353216;
        float v64 = v59;
        int v65 = (*v38 >> v41) & 0x3FF;
        unsigned int v34 = (_DWORD *)((char *)v38 + v45);
        *(_DWORD *)(v40 + 8) = LODWORD(v57);
        if (v36 == 2) {
          unsigned int v36 = 0;
        }
        else {
          ++v36;
        }
        float v66 = (double)v65 * 0.000977517107;
        float v67 = v62;
        double v68 = v66;
        float v69 = v68 + v58 * 0.000977517107;
        *(float *)uint64_t v40 = v64;
        *(float *)(v40 + 4) = v67;
        float v70 = v68 + v60 * 0.000977517107 + v61 * 0.000977517107;
        *(float *)&double v68 = v68 + v63 * 0.000977517107;
        *(float *)uint64_t v42 = v69;
        *(float *)(v42 + 4) = v70;
        *(_DWORD *)(v42 + 8) = LODWORD(v68);
        *(_DWORD *)(v42 + 12) = 1065353216;
        ++v30;
        v32 += 16;
        v31 += 16;
      }
      while (v17 != v30);
      __int16 v168 = v28;
      if (v17 >= v15)
      {
        uint64_t v128 = v32 + v25;
        uint64_t v129 = v31 + v25;
        unint64_t v75 = v17;
      }
      else
      {
        unint64_t v71 = 0;
        __int16 v72 = (char *)v39 + (v44 & 0x3C);
        unint64_t v73 = (char *)v38 + (v44 & 0x3C);
        uint64_t v74 = v25;
        unint64_t v75 = v17;
        do
        {
          unint64_t v76 = (_DWORD *)(v31 + v74);
          unsigned int v78 = v35[v71 / 4];
          unsigned int v77 = v35[v71 / 4 + 1];
          unsigned int v80 = *(_DWORD *)&v72[v71];
          unsigned int v79 = *(_DWORD *)&v72[v71 + 4];
          float v81 = (double)(v80 & 0x3FF) * 0.000977517107;
          double v82 = (double)(int)(((v78 >> 10) & 0x3FF) - 512);
          double v83 = v82 * 1.4746;
          double v84 = v81;
          double v85 = v84 + v82 * 1.4746 * 0.000977517107;
          double v86 = (double)(int)((v78 & 0x3FF) - 512);
          double v87 = v86 * -0.164553;
          double v88 = v82 * -0.571353;
          double v89 = v84 + v86 * -0.164553 * 0.000977517107;
          double v90 = v86 * 1.8814;
          double v91 = v89 + v88 * 0.000977517107;
          float v92 = (double)((v80 >> 10) & 0x3FF) * 0.000977517107;
          double v93 = v92;
          double v94 = v93 + v83 * 0.000977517107;
          *(float *)&double v84 = v84 + v90 * 0.000977517107;
          unsigned int v96 = *(_DWORD *)&v73[v71];
          unsigned int v95 = *(_DWORD *)&v73[v71 + 4];
          double v97 = v93 + v87 * 0.000977517107 + v88 * 0.000977517107;
          float v98 = (double)(v96 & 0x3FF) * 0.000977517107;
          double v99 = v98;
          *(float *)&double v93 = v93 + v90 * 0.000977517107;
          double v100 = v99 + v87 * 0.000977517107 + v88 * 0.000977517107;
          v76[2] = LODWORD(v84);
          *(float *)&double v84 = (double)((v96 >> 10) & 0x3FF) * 0.000977517107;
          double v101 = *(float *)&v84;
          double v102 = v101 + v87 * 0.000977517107 + v88 * 0.000977517107;
          double v103 = v99 + v83 * 0.000977517107;
          v76[6] = LODWORD(v93);
          double v104 = v99 + v90 * 0.000977517107;
          double v105 = v101 + v83 * 0.000977517107;
          double v106 = v101 + v90 * 0.000977517107;
          __int16 v107 = (_DWORD *)(v32 + v74);
          *(float *)&double v85 = v85;
          *(float *)&double v90 = v91;
          v76[3] = 1065353216;
          *(float *)&double v91 = v94;
          *(float *)&double v94 = v97;
          v76[7] = 1065353216;
          *(float *)&double v103 = v103;
          *(float *)&double v97 = v100;
          *(float *)&double v104 = v104;
          *(float *)&double v105 = v105;
          *(float *)&double v102 = v102;
          *(float *)&double v106 = v106;
          _DWORD *v76 = LODWORD(v85);
          v76[1] = LODWORD(v90);
          int v108 = ((v78 >> 20) & 0x3FF) - 512;
          int v109 = (v77 & 0x3FF) - 512;
          v76[4] = LODWORD(v91);
          v76[5] = LODWORD(v94);
          *__int16 v107 = LODWORD(v103);
          v107[1] = LODWORD(v97);
          *(float *)&double v85 = (double)((v80 >> 20) & 0x3FF) * 0.000977517107;
          double v110 = *(float *)&v85;
          double v111 = (double)v109 * 1.4746;
          v107[2] = LODWORD(v104);
          *(float *)&double v91 = v110 + v111 * 0.000977517107;
          double v112 = (double)v108 * -0.164553;
          v107[3] = 1065353216;
          double v113 = (double)v109 * -0.571353;
          *(float *)&double v97 = v110 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v107[4] = LODWORD(v105);
          v107[5] = LODWORD(v102);
          double v114 = (double)v108 * 1.8814;
          v107[6] = LODWORD(v106);
          *(float *)&double v106 = v110 + v114 * 0.000977517107;
          *(float *)&double v105 = (double)(v79 & 0x3FF) * 0.000977517107;
          double v115 = *(float *)&v105;
          v107[7] = 1065353216;
          *(float *)&double v110 = v115 + v111 * 0.000977517107;
          *(float *)&double v104 = v115 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v76[8] = LODWORD(v91);
          v76[9] = LODWORD(v97);
          *(float *)&double v115 = v115 + v114 * 0.000977517107;
          v76[10] = LODWORD(v106);
          *(float *)&double v106 = (double)((v96 >> 20) & 0x3FF) * 0.000977517107;
          double v116 = *(float *)&v106;
          v76[12] = LODWORD(v110);
          v76[13] = LODWORD(v104);
          *(float *)&double v110 = v116 + v111 * 0.000977517107;
          *(float *)&double v91 = v116 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v76[14] = LODWORD(v115);
          *(float *)&double v116 = v116 + v114 * 0.000977517107;
          v76[11] = 1065353216;
          *(float *)&double v115 = (double)(v95 & 0x3FF) * 0.000977517107;
          double v117 = *(float *)&v115;
          *(float *)&double v111 = v117 + v111 * 0.000977517107;
          v76[15] = 1065353216;
          *(float *)&double v113 = v117 + v112 * 0.000977517107 + v113 * 0.000977517107;
          *(float *)&double v114 = v117 + v114 * 0.000977517107;
          v107[8] = LODWORD(v110);
          v107[9] = LODWORD(v91);
          int v118 = ((v77 >> 20) & 0x3FF) - 512;
          v107[10] = LODWORD(v116);
          *(float *)&double v116 = (double)((v79 >> 10) & 0x3FF) * 0.000977517107;
          double v119 = *(float *)&v116;
          v107[11] = 1065353216;
          double v120 = (double)v118 * 1.4746;
          v107[12] = LODWORD(v111);
          v107[13] = LODWORD(v113);
          *(float *)&double v113 = v119 + v120 * 0.000977517107;
          double v121 = (double)(int)(((v77 >> 10) & 0x3FF) - 512);
          double v122 = v121 * -0.164553;
          v107[14] = LODWORD(v114);
          double v123 = (double)v118 * -0.571353;
          *(float *)&double v117 = v119 + v121 * -0.164553 * 0.000977517107 + v123 * 0.000977517107;
          double v124 = v121 * 1.8814;
          v107[15] = 1065353216;
          *(float *)&double v119 = v119 + v124 * 0.000977517107;
          v76[16] = LODWORD(v113);
          v76[17] = LODWORD(v117);
          *(float *)&double v117 = (double)((v79 >> 20) & 0x3FF) * 0.000977517107;
          double v125 = *(float *)&v117;
          *(float *)&double v113 = v125 + v120 * 0.000977517107;
          v76[18] = LODWORD(v119);
          *(float *)&double v119 = v125 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&double v125 = v125 + v124 * 0.000977517107;
          v76[19] = 1065353216;
          v76[20] = LODWORD(v113);
          v76[21] = LODWORD(v119);
          v76[22] = LODWORD(v125);
          *(float *)&double v119 = (double)((v95 >> 10) & 0x3FF) * 0.000977517107;
          double v126 = *(float *)&v119;
          *(float *)&double v125 = v126 + v120 * 0.000977517107;
          v76[23] = 1065353216;
          *(float *)&double v113 = v126 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&double v126 = v126 + v124 * 0.000977517107;
          v107[16] = LODWORD(v125);
          v107[17] = LODWORD(v113);
          v107[18] = LODWORD(v126);
          *(float *)&double v126 = (double)((v95 >> 20) & 0x3FF) * 0.000977517107;
          double v127 = *(float *)&v126;
          *(float *)&double v125 = v127 + v120 * 0.000977517107;
          v107[19] = 1065353216;
          *(float *)&double v123 = v127 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&double v127 = v127 + v124 * 0.000977517107;
          v107[20] = LODWORD(v125);
          v107[21] = LODWORD(v123);
          v107[22] = LODWORD(v127);
          v107[23] = 1065353216;
          v75 += 6;
          v71 += 8;
          v74 += 96;
        }
        while (v75 < v15);
        uint64_t v33 = (_DWORD *)((char *)v39 + (v44 & 0x3C) + v71);
        unsigned int v34 = (_DWORD *)((char *)v38 + (v44 & 0x3C) + v71);
        unsigned int v35 = (_DWORD *)((char *)v35 + v71);
        uint64_t v128 = v32 + v74;
        uint64_t v129 = v31 + v74;
      }
      unsigned int v130 = v15 % 3;
      if (v75 < v11)
      {
        do
        {
          unint64_t v131 = *((unsigned __int8 *)&v169 + v130);
          int v132 = (*v33 >> v131) & 0x3FF;
          uint64_t v133 = (v131 >> 2) & 0x3C;
          uint64_t v33 = (_DWORD *)((char *)v33 + v133);
          unint64_t v134 = *((unsigned __int8 *)&v169 + v37);
          int v135 = ((*v35 >> v134) & 0x3FF) - 512;
          uint64_t v136 = (v134 >> 2) & 0x3C;
          if (v37 == 2) {
            unsigned int v137 = 0;
          }
          else {
            unsigned int v137 = v37 + 1;
          }
          unsigned int v138 = (_DWORD *)((char *)v35 + v136);
          unint64_t v139 = *((unsigned __int8 *)&v169 + v137);
          int v140 = (*v138 >> v139) & 0x3FF;
          unsigned int v141 = (_DWORD *)((char *)v138 + ((v139 >> 2) & 0x3C));
          if (v137 == 2) {
            unsigned int v142 = 0;
          }
          else {
            unsigned int v142 = v137 + 1;
          }
          int v143 = v140 - 512;
          if (v75)
          {
            unsigned int v37 = v142;
            unsigned int v35 = v141;
          }
          float v144 = (double)v132 * 0.000977517107;
          double v145 = v144;
          double v146 = (double)v143 * 1.4746;
          double v147 = v145 + v146 * 0.000977517107;
          double v148 = (double)v135 * -0.164553;
          double v149 = (double)v143 * -0.571353;
          double v150 = v145 + v148 * 0.000977517107 + v149 * 0.000977517107;
          double v151 = (double)v135 * 1.8814;
          *(float *)&double v145 = v145 + v151 * 0.000977517107;
          *(_DWORD *)(v129 + 12) = 1065353216;
          float v152 = v147;
          int v153 = (*v34 >> v131) & 0x3FF;
          unsigned int v34 = (_DWORD *)((char *)v34 + v133);
          *(_DWORD *)(v129 + 8) = LODWORD(v145);
          if (v130 == 2) {
            unsigned int v130 = 0;
          }
          else {
            ++v130;
          }
          float v154 = (double)v153 * 0.000977517107;
          float v155 = v150;
          double v156 = v154;
          float v157 = v156 + v146 * 0.000977517107;
          *(float *)uint64_t v129 = v152;
          *(float *)(v129 + 4) = v155;
          v129 += 16;
          float v158 = v156 + v148 * 0.000977517107 + v149 * 0.000977517107;
          *(float *)&double v156 = v156 + v151 * 0.000977517107;
          *(float *)uint64_t v128 = v157;
          *(float *)(v128 + 4) = v158;
          *(_DWORD *)(v128 + 8) = LODWORD(v156);
          *(_DWORD *)(v128 + 12) = 1065353216;
          ++v75;
          v128 += 16;
        }
        while (v11 != v75);
      }
      v27 += 4 * v162;
      uint64_t v28 = &v168[v162];
      uint64_t v16 = v167 + 1;
      v29 += v160;
      uint64_t v24 = v166 + v160;
      unint64_t v26 = v165 + 4 * v161;
    }
    while (v167 + 1 != v163);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU709_RGfA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  int v169 = 1313280;
  unint64_t v8 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  unint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  unint64_t v11 = a6[2];
  if (v10 - v9 < v11) {
    unint64_t v11 = v10 - v9;
  }
  unint64_t v12 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  unint64_t v13 = v10 % 6;
  BOOL v14 = v11 >= v13;
  unint64_t v15 = v11 - v13;
  if (!v14) {
    unint64_t v15 = 0;
  }
  if (v12 >= 2)
  {
    uint64_t v16 = 0;
    unsigned int v164 = v9 % 3;
    unint64_t v17 = 6 * (v9 / 6) - v9 + 6;
    unint64_t v163 = v12 >> 1;
    uint64_t v18 = *a8 * a6[5];
    uint64_t v20 = *a3;
    uint64_t v19 = a3[1];
    unint64_t v22 = *a4;
    unint64_t v21 = a4[1];
    uint64_t v24 = *a7 + v18;
    uint64_t v25 = 16 * a6[4];
    unint64_t v26 = v19 + v21 * (v8 >> 1) + 4 * (v9 / 3);
    unint64_t v27 = v20 + v22 * v8 + 4 * (v9 / 3);
    uint64_t v28 = (_DWORD *)(v27 + v22);
    uint64_t v162 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v161 = v21 >> 2;
    uint64_t v29 = *a7 + *a8 + v18;
    unint64_t v160 = (2 * *a8) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      uint64_t v166 = v24;
      uint64_t v167 = v16;
      uint64_t v30 = 0;
      uint64_t v31 = v24;
      uint64_t v32 = v29;
      uint64_t v33 = (_DWORD *)v27;
      unsigned int v34 = v28;
      unint64_t v165 = v26;
      unsigned int v35 = (_DWORD *)v26;
      unsigned int v36 = v164;
      unsigned int v37 = v164;
      do
      {
        unsigned int v38 = v34;
        unsigned int v39 = v33;
        uint64_t v40 = v31 + v25;
        unint64_t v41 = *((unsigned __int8 *)&v169 + v36);
        uint64_t v42 = v32 + v25;
        int v43 = (*v33 >> v41) & 0x3FF;
        unint64_t v44 = v41 >> 2;
        uint64_t v45 = (v41 >> 2) & 0x3C;
        uint64_t v33 = (_DWORD *)((char *)v33 + v45);
        unint64_t v46 = *((unsigned __int8 *)&v169 + v37);
        int v47 = ((*v35 >> v46) & 0x3FF) - 512;
        uint64_t v48 = (v46 >> 2) & 0x3C;
        if (v37 == 2) {
          unsigned int v49 = 0;
        }
        else {
          unsigned int v49 = v37 + 1;
        }
        unsigned int v50 = (_DWORD *)((char *)v35 + v48);
        unint64_t v51 = *((unsigned __int8 *)&v169 + v49);
        int v52 = (*v50 >> v51) & 0x3FF;
        int v53 = (_DWORD *)((char *)v50 + ((v51 >> 2) & 0x3C));
        if (v49 == 2) {
          unsigned int v54 = 0;
        }
        else {
          unsigned int v54 = v49 + 1;
        }
        int v55 = v52 - 512;
        if (v30)
        {
          unsigned int v37 = v54;
          unsigned int v35 = v53;
        }
        float v56 = (double)v43 * 0.000977517107;
        double v57 = v56;
        double v58 = (double)v55 * 1.5748;
        double v59 = v57 + v58 * 0.000977517107;
        double v60 = (double)v47 * -0.187324;
        double v61 = (double)v55 * -0.468124;
        double v62 = v57 + v60 * 0.000977517107 + v61 * 0.000977517107;
        double v63 = (double)v47 * 1.8556;
        *(float *)&double v57 = v57 + v63 * 0.000977517107;
        *(_DWORD *)(v40 + 12) = 1065353216;
        float v64 = v59;
        int v65 = (*v38 >> v41) & 0x3FF;
        unsigned int v34 = (_DWORD *)((char *)v38 + v45);
        *(_DWORD *)(v40 + 8) = LODWORD(v57);
        if (v36 == 2) {
          unsigned int v36 = 0;
        }
        else {
          ++v36;
        }
        float v66 = (double)v65 * 0.000977517107;
        float v67 = v62;
        double v68 = v66;
        float v69 = v68 + v58 * 0.000977517107;
        *(float *)uint64_t v40 = v64;
        *(float *)(v40 + 4) = v67;
        float v70 = v68 + v60 * 0.000977517107 + v61 * 0.000977517107;
        *(float *)&double v68 = v68 + v63 * 0.000977517107;
        *(float *)uint64_t v42 = v69;
        *(float *)(v42 + 4) = v70;
        *(_DWORD *)(v42 + 8) = LODWORD(v68);
        *(_DWORD *)(v42 + 12) = 1065353216;
        ++v30;
        v32 += 16;
        v31 += 16;
      }
      while (v17 != v30);
      __int16 v168 = v28;
      if (v17 >= v15)
      {
        uint64_t v128 = v32 + v25;
        uint64_t v129 = v31 + v25;
        unint64_t v75 = v17;
      }
      else
      {
        unint64_t v71 = 0;
        __int16 v72 = (char *)v39 + (v44 & 0x3C);
        unint64_t v73 = (char *)v38 + (v44 & 0x3C);
        uint64_t v74 = v25;
        unint64_t v75 = v17;
        do
        {
          unint64_t v76 = (_DWORD *)(v31 + v74);
          unsigned int v78 = v35[v71 / 4];
          unsigned int v77 = v35[v71 / 4 + 1];
          unsigned int v80 = *(_DWORD *)&v72[v71];
          unsigned int v79 = *(_DWORD *)&v72[v71 + 4];
          float v81 = (double)(v80 & 0x3FF) * 0.000977517107;
          double v82 = (double)(int)(((v78 >> 10) & 0x3FF) - 512);
          double v83 = v82 * 1.5748;
          double v84 = v81;
          double v85 = v84 + v82 * 1.5748 * 0.000977517107;
          double v86 = (double)(int)((v78 & 0x3FF) - 512);
          double v87 = v86 * -0.187324;
          double v88 = v82 * -0.468124;
          double v89 = v84 + v86 * -0.187324 * 0.000977517107;
          double v90 = v86 * 1.8556;
          double v91 = v89 + v88 * 0.000977517107;
          float v92 = (double)((v80 >> 10) & 0x3FF) * 0.000977517107;
          double v93 = v92;
          double v94 = v93 + v83 * 0.000977517107;
          *(float *)&double v84 = v84 + v90 * 0.000977517107;
          unsigned int v96 = *(_DWORD *)&v73[v71];
          unsigned int v95 = *(_DWORD *)&v73[v71 + 4];
          double v97 = v93 + v87 * 0.000977517107 + v88 * 0.000977517107;
          float v98 = (double)(v96 & 0x3FF) * 0.000977517107;
          double v99 = v98;
          *(float *)&double v93 = v93 + v90 * 0.000977517107;
          double v100 = v99 + v87 * 0.000977517107 + v88 * 0.000977517107;
          v76[2] = LODWORD(v84);
          *(float *)&double v84 = (double)((v96 >> 10) & 0x3FF) * 0.000977517107;
          double v101 = *(float *)&v84;
          double v102 = v101 + v87 * 0.000977517107 + v88 * 0.000977517107;
          double v103 = v99 + v83 * 0.000977517107;
          v76[6] = LODWORD(v93);
          double v104 = v99 + v90 * 0.000977517107;
          double v105 = v101 + v83 * 0.000977517107;
          double v106 = v101 + v90 * 0.000977517107;
          __int16 v107 = (_DWORD *)(v32 + v74);
          *(float *)&double v85 = v85;
          *(float *)&double v90 = v91;
          v76[3] = 1065353216;
          *(float *)&double v91 = v94;
          *(float *)&double v94 = v97;
          v76[7] = 1065353216;
          *(float *)&double v103 = v103;
          *(float *)&double v97 = v100;
          *(float *)&double v104 = v104;
          *(float *)&double v105 = v105;
          *(float *)&double v102 = v102;
          *(float *)&double v106 = v106;
          _DWORD *v76 = LODWORD(v85);
          v76[1] = LODWORD(v90);
          int v108 = ((v78 >> 20) & 0x3FF) - 512;
          int v109 = (v77 & 0x3FF) - 512;
          v76[4] = LODWORD(v91);
          v76[5] = LODWORD(v94);
          *__int16 v107 = LODWORD(v103);
          v107[1] = LODWORD(v97);
          *(float *)&double v85 = (double)((v80 >> 20) & 0x3FF) * 0.000977517107;
          double v110 = *(float *)&v85;
          double v111 = (double)v109 * 1.5748;
          v107[2] = LODWORD(v104);
          *(float *)&double v91 = v110 + v111 * 0.000977517107;
          double v112 = (double)v108 * -0.187324;
          v107[3] = 1065353216;
          double v113 = (double)v109 * -0.468124;
          *(float *)&double v97 = v110 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v107[4] = LODWORD(v105);
          v107[5] = LODWORD(v102);
          double v114 = (double)v108 * 1.8556;
          v107[6] = LODWORD(v106);
          *(float *)&double v106 = v110 + v114 * 0.000977517107;
          *(float *)&double v105 = (double)(v79 & 0x3FF) * 0.000977517107;
          double v115 = *(float *)&v105;
          v107[7] = 1065353216;
          *(float *)&double v110 = v115 + v111 * 0.000977517107;
          *(float *)&double v104 = v115 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v76[8] = LODWORD(v91);
          v76[9] = LODWORD(v97);
          *(float *)&double v115 = v115 + v114 * 0.000977517107;
          v76[10] = LODWORD(v106);
          *(float *)&double v106 = (double)((v96 >> 20) & 0x3FF) * 0.000977517107;
          double v116 = *(float *)&v106;
          v76[12] = LODWORD(v110);
          v76[13] = LODWORD(v104);
          *(float *)&double v110 = v116 + v111 * 0.000977517107;
          *(float *)&double v91 = v116 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v76[14] = LODWORD(v115);
          *(float *)&double v116 = v116 + v114 * 0.000977517107;
          v76[11] = 1065353216;
          *(float *)&double v115 = (double)(v95 & 0x3FF) * 0.000977517107;
          double v117 = *(float *)&v115;
          *(float *)&double v111 = v117 + v111 * 0.000977517107;
          v76[15] = 1065353216;
          *(float *)&double v113 = v117 + v112 * 0.000977517107 + v113 * 0.000977517107;
          *(float *)&double v114 = v117 + v114 * 0.000977517107;
          v107[8] = LODWORD(v110);
          v107[9] = LODWORD(v91);
          int v118 = ((v77 >> 20) & 0x3FF) - 512;
          v107[10] = LODWORD(v116);
          *(float *)&double v116 = (double)((v79 >> 10) & 0x3FF) * 0.000977517107;
          double v119 = *(float *)&v116;
          v107[11] = 1065353216;
          double v120 = (double)v118 * 1.5748;
          v107[12] = LODWORD(v111);
          v107[13] = LODWORD(v113);
          *(float *)&double v113 = v119 + v120 * 0.000977517107;
          double v121 = (double)(int)(((v77 >> 10) & 0x3FF) - 512);
          double v122 = v121 * -0.187324;
          v107[14] = LODWORD(v114);
          double v123 = (double)v118 * -0.468124;
          *(float *)&double v117 = v119 + v121 * -0.187324 * 0.000977517107 + v123 * 0.000977517107;
          double v124 = v121 * 1.8556;
          v107[15] = 1065353216;
          *(float *)&double v119 = v119 + v124 * 0.000977517107;
          v76[16] = LODWORD(v113);
          v76[17] = LODWORD(v117);
          *(float *)&double v117 = (double)((v79 >> 20) & 0x3FF) * 0.000977517107;
          double v125 = *(float *)&v117;
          *(float *)&double v113 = v125 + v120 * 0.000977517107;
          v76[18] = LODWORD(v119);
          *(float *)&double v119 = v125 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&double v125 = v125 + v124 * 0.000977517107;
          v76[19] = 1065353216;
          v76[20] = LODWORD(v113);
          v76[21] = LODWORD(v119);
          v76[22] = LODWORD(v125);
          *(float *)&double v119 = (double)((v95 >> 10) & 0x3FF) * 0.000977517107;
          double v126 = *(float *)&v119;
          *(float *)&double v125 = v126 + v120 * 0.000977517107;
          v76[23] = 1065353216;
          *(float *)&double v113 = v126 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&double v126 = v126 + v124 * 0.000977517107;
          v107[16] = LODWORD(v125);
          v107[17] = LODWORD(v113);
          v107[18] = LODWORD(v126);
          *(float *)&double v126 = (double)((v95 >> 20) & 0x3FF) * 0.000977517107;
          double v127 = *(float *)&v126;
          *(float *)&double v125 = v127 + v120 * 0.000977517107;
          v107[19] = 1065353216;
          *(float *)&double v123 = v127 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&double v127 = v127 + v124 * 0.000977517107;
          v107[20] = LODWORD(v125);
          v107[21] = LODWORD(v123);
          v107[22] = LODWORD(v127);
          v107[23] = 1065353216;
          v75 += 6;
          v71 += 8;
          v74 += 96;
        }
        while (v75 < v15);
        uint64_t v33 = (_DWORD *)((char *)v39 + (v44 & 0x3C) + v71);
        unsigned int v34 = (_DWORD *)((char *)v38 + (v44 & 0x3C) + v71);
        unsigned int v35 = (_DWORD *)((char *)v35 + v71);
        uint64_t v128 = v32 + v74;
        uint64_t v129 = v31 + v74;
      }
      unsigned int v130 = v15 % 3;
      if (v75 < v11)
      {
        do
        {
          unint64_t v131 = *((unsigned __int8 *)&v169 + v130);
          int v132 = (*v33 >> v131) & 0x3FF;
          uint64_t v133 = (v131 >> 2) & 0x3C;
          uint64_t v33 = (_DWORD *)((char *)v33 + v133);
          unint64_t v134 = *((unsigned __int8 *)&v169 + v37);
          int v135 = ((*v35 >> v134) & 0x3FF) - 512;
          uint64_t v136 = (v134 >> 2) & 0x3C;
          if (v37 == 2) {
            unsigned int v137 = 0;
          }
          else {
            unsigned int v137 = v37 + 1;
          }
          unsigned int v138 = (_DWORD *)((char *)v35 + v136);
          unint64_t v139 = *((unsigned __int8 *)&v169 + v137);
          int v140 = (*v138 >> v139) & 0x3FF;
          unsigned int v141 = (_DWORD *)((char *)v138 + ((v139 >> 2) & 0x3C));
          if (v137 == 2) {
            unsigned int v142 = 0;
          }
          else {
            unsigned int v142 = v137 + 1;
          }
          int v143 = v140 - 512;
          if (v75)
          {
            unsigned int v37 = v142;
            unsigned int v35 = v141;
          }
          float v144 = (double)v132 * 0.000977517107;
          double v145 = v144;
          double v146 = (double)v143 * 1.5748;
          double v147 = v145 + v146 * 0.000977517107;
          double v148 = (double)v135 * -0.187324;
          double v149 = (double)v143 * -0.468124;
          double v150 = v145 + v148 * 0.000977517107 + v149 * 0.000977517107;
          double v151 = (double)v135 * 1.8556;
          *(float *)&double v145 = v145 + v151 * 0.000977517107;
          *(_DWORD *)(v129 + 12) = 1065353216;
          float v152 = v147;
          int v153 = (*v34 >> v131) & 0x3FF;
          unsigned int v34 = (_DWORD *)((char *)v34 + v133);
          *(_DWORD *)(v129 + 8) = LODWORD(v145);
          if (v130 == 2) {
            unsigned int v130 = 0;
          }
          else {
            ++v130;
          }
          float v154 = (double)v153 * 0.000977517107;
          float v155 = v150;
          double v156 = v154;
          float v157 = v156 + v146 * 0.000977517107;
          *(float *)uint64_t v129 = v152;
          *(float *)(v129 + 4) = v155;
          v129 += 16;
          float v158 = v156 + v148 * 0.000977517107 + v149 * 0.000977517107;
          *(float *)&double v156 = v156 + v151 * 0.000977517107;
          *(float *)uint64_t v128 = v157;
          *(float *)(v128 + 4) = v158;
          *(_DWORD *)(v128 + 8) = LODWORD(v156);
          *(_DWORD *)(v128 + 12) = 1065353216;
          ++v75;
          v128 += 16;
        }
        while (v11 != v75);
      }
      v27 += 4 * v162;
      uint64_t v28 = &v168[v162];
      uint64_t v16 = v167 + 1;
      v29 += v160;
      uint64_t v24 = v166 + v160;
      unint64_t v26 = v165 + 4 * v161;
    }
    while (v167 + 1 != v163);
  }
  return 0;
}

uint64_t vt_Copy_pf20ITU601_RGfA(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  int v169 = 1313280;
  unint64_t v8 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  unint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  unint64_t v11 = a6[2];
  if (v10 - v9 < v11) {
    unint64_t v11 = v10 - v9;
  }
  unint64_t v12 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v8;
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  unint64_t v13 = v10 % 6;
  BOOL v14 = v11 >= v13;
  unint64_t v15 = v11 - v13;
  if (!v14) {
    unint64_t v15 = 0;
  }
  if (v12 >= 2)
  {
    uint64_t v16 = 0;
    unsigned int v164 = v9 % 3;
    unint64_t v17 = 6 * (v9 / 6) - v9 + 6;
    unint64_t v163 = v12 >> 1;
    uint64_t v18 = *a8 * a6[5];
    uint64_t v20 = *a3;
    uint64_t v19 = a3[1];
    unint64_t v22 = *a4;
    unint64_t v21 = a4[1];
    uint64_t v24 = *a7 + v18;
    uint64_t v25 = 16 * a6[4];
    unint64_t v26 = v19 + v21 * (v8 >> 1) + 4 * (v9 / 3);
    unint64_t v27 = v20 + v22 * v8 + 4 * (v9 / 3);
    uint64_t v28 = (_DWORD *)(v27 + v22);
    uint64_t v162 = (v22 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v161 = v21 >> 2;
    uint64_t v29 = *a7 + *a8 + v18;
    unint64_t v160 = (2 * *a8) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      uint64_t v166 = v24;
      uint64_t v167 = v16;
      uint64_t v30 = 0;
      uint64_t v31 = v24;
      uint64_t v32 = v29;
      uint64_t v33 = (_DWORD *)v27;
      unsigned int v34 = v28;
      unint64_t v165 = v26;
      unsigned int v35 = (_DWORD *)v26;
      unsigned int v36 = v164;
      unsigned int v37 = v164;
      do
      {
        unsigned int v38 = v34;
        unsigned int v39 = v33;
        uint64_t v40 = v31 + v25;
        unint64_t v41 = *((unsigned __int8 *)&v169 + v36);
        uint64_t v42 = v32 + v25;
        int v43 = (*v33 >> v41) & 0x3FF;
        unint64_t v44 = v41 >> 2;
        uint64_t v45 = (v41 >> 2) & 0x3C;
        uint64_t v33 = (_DWORD *)((char *)v33 + v45);
        unint64_t v46 = *((unsigned __int8 *)&v169 + v37);
        int v47 = ((*v35 >> v46) & 0x3FF) - 512;
        uint64_t v48 = (v46 >> 2) & 0x3C;
        if (v37 == 2) {
          unsigned int v49 = 0;
        }
        else {
          unsigned int v49 = v37 + 1;
        }
        unsigned int v50 = (_DWORD *)((char *)v35 + v48);
        unint64_t v51 = *((unsigned __int8 *)&v169 + v49);
        int v52 = (*v50 >> v51) & 0x3FF;
        int v53 = (_DWORD *)((char *)v50 + ((v51 >> 2) & 0x3C));
        if (v49 == 2) {
          unsigned int v54 = 0;
        }
        else {
          unsigned int v54 = v49 + 1;
        }
        int v55 = v52 - 512;
        if (v30)
        {
          unsigned int v37 = v54;
          unsigned int v35 = v53;
        }
        float v56 = (double)v43 * 0.000977517107;
        double v57 = v56;
        double v58 = (double)v55 * 1.402;
        double v59 = v57 + v58 * 0.000977517107;
        double v60 = (double)v47 * -0.344136;
        double v61 = (double)v55 * -0.714136;
        double v62 = v57 + v60 * 0.000977517107 + v61 * 0.000977517107;
        double v63 = (double)v47 * 1.772;
        *(float *)&double v57 = v57 + v63 * 0.000977517107;
        *(_DWORD *)(v40 + 12) = 1065353216;
        float v64 = v59;
        int v65 = (*v38 >> v41) & 0x3FF;
        unsigned int v34 = (_DWORD *)((char *)v38 + v45);
        *(_DWORD *)(v40 + 8) = LODWORD(v57);
        if (v36 == 2) {
          unsigned int v36 = 0;
        }
        else {
          ++v36;
        }
        float v66 = (double)v65 * 0.000977517107;
        float v67 = v62;
        double v68 = v66;
        float v69 = v68 + v58 * 0.000977517107;
        *(float *)uint64_t v40 = v64;
        *(float *)(v40 + 4) = v67;
        float v70 = v68 + v60 * 0.000977517107 + v61 * 0.000977517107;
        *(float *)&double v68 = v68 + v63 * 0.000977517107;
        *(float *)uint64_t v42 = v69;
        *(float *)(v42 + 4) = v70;
        *(_DWORD *)(v42 + 8) = LODWORD(v68);
        *(_DWORD *)(v42 + 12) = 1065353216;
        ++v30;
        v32 += 16;
        v31 += 16;
      }
      while (v17 != v30);
      __int16 v168 = v28;
      if (v17 >= v15)
      {
        uint64_t v128 = v32 + v25;
        uint64_t v129 = v31 + v25;
        unint64_t v75 = v17;
      }
      else
      {
        unint64_t v71 = 0;
        __int16 v72 = (char *)v39 + (v44 & 0x3C);
        unint64_t v73 = (char *)v38 + (v44 & 0x3C);
        uint64_t v74 = v25;
        unint64_t v75 = v17;
        do
        {
          unint64_t v76 = (_DWORD *)(v31 + v74);
          unsigned int v78 = v35[v71 / 4];
          unsigned int v77 = v35[v71 / 4 + 1];
          unsigned int v80 = *(_DWORD *)&v72[v71];
          unsigned int v79 = *(_DWORD *)&v72[v71 + 4];
          float v81 = (double)(v80 & 0x3FF) * 0.000977517107;
          double v82 = (double)(int)(((v78 >> 10) & 0x3FF) - 512);
          double v83 = v82 * 1.402;
          double v84 = v81;
          double v85 = v84 + v82 * 1.402 * 0.000977517107;
          double v86 = (double)(int)((v78 & 0x3FF) - 512);
          double v87 = v86 * -0.344136;
          double v88 = v82 * -0.714136;
          double v89 = v84 + v86 * -0.344136 * 0.000977517107;
          double v90 = v86 * 1.772;
          double v91 = v89 + v88 * 0.000977517107;
          float v92 = (double)((v80 >> 10) & 0x3FF) * 0.000977517107;
          double v93 = v92;
          double v94 = v93 + v83 * 0.000977517107;
          *(float *)&double v84 = v84 + v90 * 0.000977517107;
          unsigned int v96 = *(_DWORD *)&v73[v71];
          unsigned int v95 = *(_DWORD *)&v73[v71 + 4];
          double v97 = v93 + v87 * 0.000977517107 + v88 * 0.000977517107;
          float v98 = (double)(v96 & 0x3FF) * 0.000977517107;
          double v99 = v98;
          *(float *)&double v93 = v93 + v90 * 0.000977517107;
          double v100 = v99 + v87 * 0.000977517107 + v88 * 0.000977517107;
          v76[2] = LODWORD(v84);
          *(float *)&double v84 = (double)((v96 >> 10) & 0x3FF) * 0.000977517107;
          double v101 = *(float *)&v84;
          double v102 = v101 + v87 * 0.000977517107 + v88 * 0.000977517107;
          double v103 = v99 + v83 * 0.000977517107;
          v76[6] = LODWORD(v93);
          double v104 = v99 + v90 * 0.000977517107;
          double v105 = v101 + v83 * 0.000977517107;
          double v106 = v101 + v90 * 0.000977517107;
          __int16 v107 = (_DWORD *)(v32 + v74);
          *(float *)&double v85 = v85;
          *(float *)&double v90 = v91;
          v76[3] = 1065353216;
          *(float *)&double v91 = v94;
          *(float *)&double v94 = v97;
          v76[7] = 1065353216;
          *(float *)&double v103 = v103;
          *(float *)&double v97 = v100;
          *(float *)&double v104 = v104;
          *(float *)&double v105 = v105;
          *(float *)&double v102 = v102;
          *(float *)&double v106 = v106;
          _DWORD *v76 = LODWORD(v85);
          v76[1] = LODWORD(v90);
          int v108 = ((v78 >> 20) & 0x3FF) - 512;
          int v109 = (v77 & 0x3FF) - 512;
          v76[4] = LODWORD(v91);
          v76[5] = LODWORD(v94);
          *__int16 v107 = LODWORD(v103);
          v107[1] = LODWORD(v97);
          *(float *)&double v85 = (double)((v80 >> 20) & 0x3FF) * 0.000977517107;
          double v110 = *(float *)&v85;
          double v111 = (double)v109 * 1.402;
          v107[2] = LODWORD(v104);
          *(float *)&double v91 = v110 + v111 * 0.000977517107;
          double v112 = (double)v108 * -0.344136;
          v107[3] = 1065353216;
          double v113 = (double)v109 * -0.714136;
          *(float *)&double v97 = v110 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v107[4] = LODWORD(v105);
          v107[5] = LODWORD(v102);
          double v114 = (double)v108 * 1.772;
          v107[6] = LODWORD(v106);
          *(float *)&double v106 = v110 + v114 * 0.000977517107;
          *(float *)&double v105 = (double)(v79 & 0x3FF) * 0.000977517107;
          double v115 = *(float *)&v105;
          v107[7] = 1065353216;
          *(float *)&double v110 = v115 + v111 * 0.000977517107;
          *(float *)&double v104 = v115 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v76[8] = LODWORD(v91);
          v76[9] = LODWORD(v97);
          *(float *)&double v115 = v115 + v114 * 0.000977517107;
          v76[10] = LODWORD(v106);
          *(float *)&double v106 = (double)((v96 >> 20) & 0x3FF) * 0.000977517107;
          double v116 = *(float *)&v106;
          v76[12] = LODWORD(v110);
          v76[13] = LODWORD(v104);
          *(float *)&double v110 = v116 + v111 * 0.000977517107;
          *(float *)&double v91 = v116 + v112 * 0.000977517107 + v113 * 0.000977517107;
          v76[14] = LODWORD(v115);
          *(float *)&double v116 = v116 + v114 * 0.000977517107;
          v76[11] = 1065353216;
          *(float *)&double v115 = (double)(v95 & 0x3FF) * 0.000977517107;
          double v117 = *(float *)&v115;
          *(float *)&double v111 = v117 + v111 * 0.000977517107;
          v76[15] = 1065353216;
          *(float *)&double v113 = v117 + v112 * 0.000977517107 + v113 * 0.000977517107;
          *(float *)&double v114 = v117 + v114 * 0.000977517107;
          v107[8] = LODWORD(v110);
          v107[9] = LODWORD(v91);
          int v118 = ((v77 >> 20) & 0x3FF) - 512;
          v107[10] = LODWORD(v116);
          *(float *)&double v116 = (double)((v79 >> 10) & 0x3FF) * 0.000977517107;
          double v119 = *(float *)&v116;
          v107[11] = 1065353216;
          double v120 = (double)v118 * 1.402;
          v107[12] = LODWORD(v111);
          v107[13] = LODWORD(v113);
          *(float *)&double v113 = v119 + v120 * 0.000977517107;
          double v121 = (double)(int)(((v77 >> 10) & 0x3FF) - 512);
          double v122 = v121 * -0.344136;
          v107[14] = LODWORD(v114);
          double v123 = (double)v118 * -0.714136;
          *(float *)&double v117 = v119 + v121 * -0.344136 * 0.000977517107 + v123 * 0.000977517107;
          double v124 = v121 * 1.772;
          v107[15] = 1065353216;
          *(float *)&double v119 = v119 + v124 * 0.000977517107;
          v76[16] = LODWORD(v113);
          v76[17] = LODWORD(v117);
          *(float *)&double v117 = (double)((v79 >> 20) & 0x3FF) * 0.000977517107;
          double v125 = *(float *)&v117;
          *(float *)&double v113 = v125 + v120 * 0.000977517107;
          v76[18] = LODWORD(v119);
          *(float *)&double v119 = v125 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&double v125 = v125 + v124 * 0.000977517107;
          v76[19] = 1065353216;
          v76[20] = LODWORD(v113);
          v76[21] = LODWORD(v119);
          v76[22] = LODWORD(v125);
          *(float *)&double v119 = (double)((v95 >> 10) & 0x3FF) * 0.000977517107;
          double v126 = *(float *)&v119;
          *(float *)&double v125 = v126 + v120 * 0.000977517107;
          v76[23] = 1065353216;
          *(float *)&double v113 = v126 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&double v126 = v126 + v124 * 0.000977517107;
          v107[16] = LODWORD(v125);
          v107[17] = LODWORD(v113);
          v107[18] = LODWORD(v126);
          *(float *)&double v126 = (double)((v95 >> 20) & 0x3FF) * 0.000977517107;
          double v127 = *(float *)&v126;
          *(float *)&double v125 = v127 + v120 * 0.000977517107;
          v107[19] = 1065353216;
          *(float *)&double v123 = v127 + v122 * 0.000977517107 + v123 * 0.000977517107;
          *(float *)&double v127 = v127 + v124 * 0.000977517107;
          v107[20] = LODWORD(v125);
          v107[21] = LODWORD(v123);
          v107[22] = LODWORD(v127);
          v107[23] = 1065353216;
          v75 += 6;
          v71 += 8;
          v74 += 96;
        }
        while (v75 < v15);
        uint64_t v33 = (_DWORD *)((char *)v39 + (v44 & 0x3C) + v71);
        unsigned int v34 = (_DWORD *)((char *)v38 + (v44 & 0x3C) + v71);
        unsigned int v35 = (_DWORD *)((char *)v35 + v71);
        uint64_t v128 = v32 + v74;
        uint64_t v129 = v31 + v74;
      }
      unsigned int v130 = v15 % 3;
      if (v75 < v11)
      {
        do
        {
          unint64_t v131 = *((unsigned __int8 *)&v169 + v130);
          int v132 = (*v33 >> v131) & 0x3FF;
          uint64_t v133 = (v131 >> 2) & 0x3C;
          uint64_t v33 = (_DWORD *)((char *)v33 + v133);
          unint64_t v134 = *((unsigned __int8 *)&v169 + v37);
          int v135 = ((*v35 >> v134) & 0x3FF) - 512;
          uint64_t v136 = (v134 >> 2) & 0x3C;
          if (v37 == 2) {
            unsigned int v137 = 0;
          }
          else {
            unsigned int v137 = v37 + 1;
          }
          unsigned int v138 = (_DWORD *)((char *)v35 + v136);
          unint64_t v139 = *((unsigned __int8 *)&v169 + v137);
          int v140 = (*v138 >> v139) & 0x3FF;
          unsigned int v141 = (_DWORD *)((char *)v138 + ((v139 >> 2) & 0x3C));
          if (v137 == 2) {
            unsigned int v142 = 0;
          }
          else {
            unsigned int v142 = v137 + 1;
          }
          int v143 = v140 - 512;
          if (v75)
          {
            unsigned int v37 = v142;
            unsigned int v35 = v141;
          }
          float v144 = (double)v132 * 0.000977517107;
          double v145 = v144;
          double v146 = (double)v143 * 1.402;
          double v147 = v145 + v146 * 0.000977517107;
          double v148 = (double)v135 * -0.344136;
          double v149 = (double)v143 * -0.714136;
          double v150 = v145 + v148 * 0.000977517107 + v149 * 0.000977517107;
          double v151 = (double)v135 * 1.772;
          *(float *)&double v145 = v145 + v151 * 0.000977517107;
          *(_DWORD *)(v129 + 12) = 1065353216;
          float v152 = v147;
          int v153 = (*v34 >> v131) & 0x3FF;
          unsigned int v34 = (_DWORD *)((char *)v34 + v133);
          *(_DWORD *)(v129 + 8) = LODWORD(v145);
          if (v130 == 2) {
            unsigned int v130 = 0;
          }
          else {
            ++v130;
          }
          float v154 = (double)v153 * 0.000977517107;
          float v155 = v150;
          double v156 = v154;
          float v157 = v156 + v146 * 0.000977517107;
          *(float *)uint64_t v129 = v152;
          *(float *)(v129 + 4) = v155;
          v129 += 16;
          float v158 = v156 + v148 * 0.000977517107 + v149 * 0.000977517107;
          *(float *)&double v156 = v156 + v151 * 0.000977517107;
          *(float *)uint64_t v128 = v157;
          *(float *)(v128 + 4) = v158;
          *(_DWORD *)(v128 + 8) = LODWORD(v156);
          *(_DWORD *)(v128 + 12) = 1065353216;
          ++v75;
          v128 += 16;
        }
        while (v11 != v75);
      }
      v27 += 4 * v162;
      uint64_t v28 = &v168[v162];
      uint64_t v16 = v167 + 1;
      v29 += v160;
      uint64_t v24 = v166 + v160;
      unint64_t v26 = v165 + 4 * v161;
    }
    while (v167 + 1 != v163);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_xf44_w30r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  long long v22 = 0uLL;
  int v23 = 0;
  unint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D620;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v22 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, kvImageARGB16Q12|kvImageARGB16U, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xf44_w30r;
  *a11 = vt_VImage_Cleanup_xf44_w30r;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_xf44_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = *a8;
    uint64_t v14 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v16 = a2[4];
    uint64_t v15 = a2[5];
    uint64_t v17 = a3[1] + v12 * v15 + 4 * v16;
    uint64_t v18 = *a3 + *a4 * v15 + 2 * v16;
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          unint64_t v21 = (_WORD *)(v14 + 2 * v19);
          unint64_t v22 = (67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)(v17 + v19) >> 6))) >> 36;
          unint64_t v23 = (67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)(v17 + v19 + 2) >> 6))) >> 36;
          unint64_t v24 = (67174465 * (unint64_t)(56064 * (*(unsigned __int16 *)(v18 + 2 * i) >> 6))) >> 36;
          *unint64_t v21 = -1;
          v21[1] = v24 + 4096;
          v21[2] = v22 + 4096;
          v21[3] = v23 + 4096;
          v19 += 4;
        }
      }
      v18 += v11;
      v14 += v13;
      v17 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_xf44_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = *a8;
    uint64_t v14 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v16 = a2[4];
    uint64_t v15 = a2[5];
    uint64_t v17 = a3[1] + v12 * v15 + 4 * v16;
    uint64_t v18 = *a3 + *a4 * v15 + 2 * v16;
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          unint64_t v21 = (unsigned char *)(v14 + v19);
          unint64_t v22 = (4198405 * (unint64_t)(224 * (*(unsigned __int16 *)(v17 + v19) >> 6))) >> 32;
          unint64_t v23 = (4198405 * (unint64_t)(224 * (*(unsigned __int16 *)(v17 + v19 + 2) >> 6))) >> 32;
          unint64_t v24 = (4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v18 + 2 * i) >> 6))) >> 32;
          *unint64_t v21 = -1;
          v21[1] = v24 + 16;
          v21[2] = v22 + 16;
          v21[3] = v23 + 16;
          v19 += 4;
        }
      }
      v18 += v11;
      v14 += v13;
      v17 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    uint64_t v15 = *a8;
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v14 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          unint64_t v22 = (_WORD *)(v16 + v20);
          unint64_t v23 = (unsigned __int16 *)(v19 + 2 * i);
          unsigned int v24 = ((((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)(v18 + v20 + 2) >> 6))) >> 32) >> 4)
               + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)(v18 + v20 + 6) >> 6))) >> 32) >> 4)
               + 8193) >> 1;
          unint64_t v25 = (67174465 * (unint64_t)(56064 * (*v23 >> 6))) >> 36;
          unint64_t v26 = (67174465 * (unint64_t)(56064 * (v23[1] >> 6))) >> 36;
          *unint64_t v22 = ((((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)(v18 + v20) >> 6))) >> 32) >> 4)
                + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)(v18 + v20 + 4) >> 6))) >> 32) >> 4)
                + 8193) >> 1;
          v22[1] = v25 + 4096;
          v22[2] = v24;
          v22[3] = v26 + 4096;
          v20 += 8;
        }
      }
      v19 += v13;
      v16 += v15;
      v18 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_v216(double a1, double a2, double a3, int16x4_t a4, int16x4_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t *a13)
{
  unint64_t v13 = *(void *)(a7 + 24);
  uint64_t v14 = (*(void *)(a7 + 32) & 1) + *(void *)(a7 + 32);
  uint64_t v15 = (*(void *)(a11 + 32) & 1) + *(void *)(a11 + 32);
  unint64_t v16 = ((*(_DWORD *)(a7 + 16) + *(void *)(a7 + 32)) & 0xFFFFFFFE) - v14;
  if (v16 >= (unint64_t)((*(_DWORD *)(a11 + 16) + *(void *)(a11 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v16 = ((*(_DWORD *)(a11 + 16) + *(void *)(a11 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v13 >= *(void *)(a11 + 24)) {
    unint64_t v13 = *(void *)(a11 + 24);
  }
  if (v13)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a13;
    uint64_t v19 = *a9;
    uint64_t v20 = a9[1];
    uint64_t v21 = *a12 + *a13 * *(void *)(a11 + 40) + 2 * v15;
    uint64_t v22 = *(void *)(a7 + 40);
    uint64_t v23 = a8[1] + v20 * v22 + 4 * v14;
    uint64_t v24 = *a8 + *a9 * v22 + 2 * v14;
    uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0x401005u);
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        uint64_t v28 = (double *)v21;
        do
        {
          uint64_t v29 = (__int16 *)(v23 + 4 * v27);
          a4.i16[0] = *v29;
          a5.i16[0] = *(_WORD *)(v24 + v26);
          a5.i16[2] = *(_WORD *)(v24 + v26 + 2);
          a4.i16[2] = v29[1];
          int32x4_t v30 = (int32x4_t)vmull_u16(vshr_n_u16((uint16x4_t)vuzp1_s16(a4, a5), 6uLL), (uint16x4_t)0xDB00DB00E000E000);
          int32x4_t v31 = vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v30.i8, *(uint32x2_t *)v25.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v30, v25));
          *(int16x4_t *)v30.i8 = vadd_s16(vshrn_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v31, (uint32x4_t)vsubq_s32(v30, v31), 1uLL), 9uLL), (int16x4_t)0x1000100010001000);
          a5 = vrev32_s16(*(int16x4_t *)v30.i8);
          a4 = vuzp1_s16(*(int16x4_t *)v30.i8, a5);
          *v28++ = *(double *)&a4;
          v27 += 2;
          v26 += 4;
        }
        while (v27 < v16);
      }
      v24 += v19;
      v21 += v18;
      v23 += v20;
      ++v17;
    }
    while (v17 != v13);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    unint64_t v16 = (unsigned char *)(*a7 + *a8 * *(void *)(a6 + 40) + v10);
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        uint64_t v22 = v16;
        do
        {
          uint64_t v23 = (unsigned __int16 *)(v19 + 2 * v21);
          unsigned int v24 = (((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)(v18 + v20 + 2) >> 6))) >> 32)
                             + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)(v18 + v20 + 6) >> 6))) >> 32)
                             + 33) >> 1;
          unint64_t v25 = (4198405 * (unint64_t)(219 * (*v23 >> 6))) >> 32;
          unint64_t v26 = (4198405 * (unint64_t)(219 * (v23[1] >> 6))) >> 32;
          *uint64_t v22 = (((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)(v18 + v20) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)(v18 + v20 + 4) >> 6))) >> 32)
                              + 33) >> 1;
          v22[1] = v25 + 16;
          v22[2] = v24;
          v22[3] = v26 + 16;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_2vuy(double a1, double a2, double a3, int16x4_t a4, int16x4_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t *a13)
{
  unint64_t v13 = *(void *)(a7 + 24);
  uint64_t v14 = (*(void *)(a7 + 32) & 1) + *(void *)(a7 + 32);
  uint64_t v15 = (*(void *)(a11 + 32) & 1) + *(void *)(a11 + 32);
  unint64_t v16 = ((*(_DWORD *)(a7 + 16) + *(void *)(a7 + 32)) & 0xFFFFFFFE) - v14;
  if (v16 >= (unint64_t)((*(_DWORD *)(a11 + 16) + *(void *)(a11 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v16 = ((*(_DWORD *)(a11 + 16) + *(void *)(a11 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v13 >= *(void *)(a11 + 24)) {
    unint64_t v13 = *(void *)(a11 + 24);
  }
  if (v13)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a13;
    uint64_t v19 = *a9;
    uint64_t v20 = a9[1];
    uint64_t v21 = *a12 + *a13 * *(void *)(a11 + 40) + v15;
    uint64_t v22 = *(void *)(a7 + 40);
    uint64_t v23 = a8[1] + v20 * v22 + 4 * v14;
    uint64_t v24 = *a8 + *a9 * v22 + 2 * v14;
    uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0x401005u);
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        for (unint64_t i = 0; i < v16; i += 2)
        {
          uint64_t v28 = (__int16 *)(v23 + 4 * i);
          a4.i16[0] = *v28;
          a4.i16[2] = v28[1];
          a5.i16[0] = *(_WORD *)(v24 + v26);
          a5.i16[2] = *(_WORD *)(v24 + v26 + 2);
          int32x4_t v29 = (int32x4_t)vmull_u16(vshr_n_u16((uint16x4_t)vuzp1_s16(a4, a5), 6uLL), (uint16x4_t)0xDB00DB00E000E0);
          int32x4_t v30 = vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v29.i8, *(uint32x2_t *)v25.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v29, v25));
          int16x8_t v31 = (int16x8_t)vsubq_s32(v29, v30);
          *(int16x4_t *)v31.i8 = vadd_s16(vshrn_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v30, (uint32x4_t)v31, 1uLL), 9uLL), (int16x4_t)0x10001000100010);
          a5 = vrev32_s16(*(int16x4_t *)v31.i8);
          *(int16x4_t *)v31.i8 = vuzp1_s16(*(int16x4_t *)v31.i8, a5);
          a4 = (int16x4_t)vmovn_s16(v31);
          *(_DWORD *)(v21 + v26) = a4.i32[0];
          v26 += 4;
        }
      }
      v24 += v19;
      v21 += v18;
      v23 += v20;
      ++v17;
    }
    while (v17 != v13);
  }
  return 0;
}

uint64_t vt_Copy_xf44_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  unint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v24 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  unint64_t v26 = v8 & 1;
  if (v17 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      int v34 = v12[1] >> 6;
      uint64_t v32 = v12 + 2;
      *unint64_t v16 = ((67174465 * (unint64_t)(57344 * (*v12 >> 6))) >> 36) + 4096;
      v16[1] = ((67174465 * (unint64_t)(57344 * v34)) >> 36) + 4096;
      uint64_t v33 = v16 + 2;
    }
    else
    {
      uint64_t v32 = v12;
      uint64_t v33 = v16;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        int v37 = *v32 >> 6;
        int v38 = v32[1] >> 6;
        v32 += 2;
        _WORD *v33 = ((67174465 * (unint64_t)(57344 * v37)) >> 36) + 4096;
        v33[1] = ((67174465 * (unint64_t)(57344 * v38)) >> 36) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      int v39 = *v32 >> 6;
      int v40 = v32[1] >> 6;
      _WORD *v33 = (((67174465 * (unint64_t)(57344 * v39)) >> 32) >> 4) + 4096;
      v33[1] = (((67174465 * (unint64_t)(57344 * v40)) >> 32) >> 4) + 4096;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    unint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v17 - v27;
    do
    {
      int v43 = v12;
      unint64_t v44 = v16;
      if (v28)
      {
        int v45 = v12[1] >> 6;
        int v43 = v12 + 2;
        *unint64_t v16 = ((67174465 * (unint64_t)(57344 * (*v12 >> 6))) >> 36) + 4096;
        v16[1] = ((67174465 * (unint64_t)(57344 * v45)) >> 36) + 4096;
        unint64_t v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          int v48 = *v43 >> 6;
          int v49 = v43[1] >> 6;
          v43 += 2;
          *unint64_t v44 = ((67174465 * (unint64_t)(57344 * v48)) >> 36) + 4096;
          v44[1] = ((67174465 * (unint64_t)(57344 * v49)) >> 36) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        int v50 = *v43 >> 6;
        int v51 = v43[1] >> 6;
        *unint64_t v44 = (((67174465 * (unint64_t)(57344 * v50)) >> 32) >> 4) + 4096;
        v44[1] = (((67174465 * (unint64_t)(57344 * v51)) >> 32) >> 4) + 4096;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      unint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if (v28)
    {
      int v52 = *v12 >> 6;
      int v53 = v12[1] >> 6;
      v12 += 2;
      *unint64_t v16 = ((67174465 * (unint64_t)(57344 * v52)) >> 36) + 4096;
      v16[1] = ((67174465 * (unint64_t)(57344 * v53)) >> 36) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        int v55 = *v12 >> 6;
        int v56 = v12[1] >> 6;
        v12 += 2;
        *unint64_t v16 = ((67174465 * (unint64_t)(57344 * v55)) >> 36) + 4096;
        v16[1] = ((67174465 * (unint64_t)(57344 * v56)) >> 36) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      int v57 = *v12 >> 6;
      int v58 = v12[1] >> 6;
      *unint64_t v16 = (((67174465 * (unint64_t)(57344 * v57)) >> 32) >> 4) + 4096;
      v16[1] = (((67174465 * (unint64_t)(57344 * v58)) >> 32) >> 4) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf44_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v23 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      int v33 = v13[1] >> 6;
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = ((67174465 * (unint64_t)(57344 * (*v13 >> 6))) >> 36) + 4096;
      v17[1] = ((67174465 * (unint64_t)(57344 * v33)) >> 36) + 4096;
      uint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      uint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        int v36 = *v31 >> 6;
        int v37 = v31[1] >> 6;
        v31 += 2;
        _WORD *v32 = ((67174465 * (unint64_t)(57344 * v36)) >> 36) + 4096;
        v32[1] = ((67174465 * (unint64_t)(57344 * v37)) >> 36) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      int v38 = *v31 >> 6;
      int v39 = v31[1] >> 6;
      _WORD *v32 = (((67174465 * (unint64_t)(57344 * v38)) >> 32) >> 4) + 4096;
      v32[1] = (((67174465 * (unint64_t)(57344 * v39)) >> 32) >> 4) + 4096;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      int v43 = v17;
      if (v27)
      {
        int v44 = v13[1] >> 6;
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = ((67174465 * (unint64_t)(57344 * (*v13 >> 6))) >> 36) + 4096;
        v17[1] = ((67174465 * (unint64_t)(57344 * v44)) >> 36) + 4096;
        int v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          int v47 = *v42 >> 6;
          int v48 = v42[1] >> 6;
          v42 += 2;
          _WORD *v43 = ((67174465 * (unint64_t)(57344 * v47)) >> 36) + 4096;
          v43[1] = ((67174465 * (unint64_t)(57344 * v48)) >> 36) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        int v49 = *v42 >> 6;
        int v50 = v42[1] >> 6;
        _WORD *v43 = (((67174465 * (unint64_t)(57344 * v49)) >> 32) >> 4) + 4096;
        v43[1] = (((67174465 * (unint64_t)(57344 * v50)) >> 32) >> 4) + 4096;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      int v51 = *v13 >> 6;
      int v52 = v13[1] >> 6;
      v13 += 2;
      *unint64_t v17 = ((67174465 * (unint64_t)(57344 * v51)) >> 36) + 4096;
      v17[1] = ((67174465 * (unint64_t)(57344 * v52)) >> 36) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        int v54 = *v13 >> 6;
        int v55 = v13[1] >> 6;
        v13 += 2;
        *unint64_t v17 = ((67174465 * (unint64_t)(57344 * v54)) >> 36) + 4096;
        v17[1] = ((67174465 * (unint64_t)(57344 * v55)) >> 36) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      int v56 = *v13 >> 6;
      int v57 = v13[1] >> 6;
      *unint64_t v17 = (((67174465 * (unint64_t)(57344 * v56)) >> 32) >> 4) + 4096;
      v17[1] = (((67174465 * (unint64_t)(57344 * v57)) >> 32) >> 4) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf44_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v23 + 2 * i) >> 6))) >> 36;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      unsigned int v33 = v13[1];
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = (67174465 * (unint64_t)(0xFFFF * (*v13 >> 6))) >> 36;
      v17[1] = (67174465 * (unint64_t)(0xFFFF * (v33 >> 6))) >> 36;
      uint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      uint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        unsigned int v36 = *v31;
        unsigned int v37 = v31[1];
        v31 += 2;
        _WORD *v32 = (67174465 * (unint64_t)(0xFFFF * (v36 >> 6))) >> 36;
        v32[1] = (67174465 * (unint64_t)(0xFFFF * (v37 >> 6))) >> 36;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      unsigned int v38 = *v31;
      unsigned int v39 = v31[1];
      _WORD *v32 = (67174465 * (unint64_t)(0xFFFF * (v38 >> 6))) >> 36;
      v32[1] = (67174465 * (unint64_t)(0xFFFF * (v39 >> 6))) >> 36;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      int v43 = v17;
      if (v27)
      {
        unsigned int v44 = v13[1];
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = (67174465 * (unint64_t)(0xFFFF * (*v13 >> 6))) >> 36;
        v17[1] = (67174465 * (unint64_t)(0xFFFF * (v44 >> 6))) >> 36;
        int v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          unsigned int v47 = *v42;
          unsigned int v48 = v42[1];
          v42 += 2;
          _WORD *v43 = (67174465 * (unint64_t)(0xFFFF * (v47 >> 6))) >> 36;
          v43[1] = (67174465 * (unint64_t)(0xFFFF * (v48 >> 6))) >> 36;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        unsigned int v49 = *v42;
        unint64_t v50 = (67174465 * (unint64_t)(0xFFFF * (v42[1] >> 6))) >> 36;
        _WORD *v43 = (67174465 * (unint64_t)(0xFFFF * (v49 >> 6))) >> 36;
        v43[1] = v50;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      unsigned int v51 = *v13;
      unsigned int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = (67174465 * (unint64_t)(0xFFFF * (v51 >> 6))) >> 36;
      v17[1] = (67174465 * (unint64_t)(0xFFFF * (v52 >> 6))) >> 36;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        unsigned int v54 = *v13;
        unsigned int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = (67174465 * (unint64_t)(0xFFFF * (v54 >> 6))) >> 36;
        v17[1] = (67174465 * (unint64_t)(0xFFFF * (v55 >> 6))) >> 36;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      unsigned int v56 = *v13;
      unsigned int v57 = v13[1];
      *unint64_t v17 = (67174465 * (unint64_t)(0xFFFF * (v56 >> 6))) >> 36;
      v17[1] = (67174465 * (unint64_t)(0xFFFF * (v57 >> 6))) >> 36;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v32 = v12 & 1;
  if (v9 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unsigned int v36 = v14 + 4;
      unsigned int v38 = ((((67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 32) >> 4)
           + (((67174465 * (unint64_t)(57344 * (v14[3] >> 6))) >> 32) >> 4)
           + 8193) >> 1;
      *uint64_t v21 = ((((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (v14[2] >> 6))) >> 32) >> 4)
            + 8193) >> 1;
      v21[1] = v38;
      unsigned int v37 = v21 + 2;
    }
    else
    {
      unsigned int v36 = v14;
      unsigned int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unsigned int v41 = ((((67174465 * (unint64_t)(57344 * (v36[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(57344 * (v36[3] >> 6))) >> 32) >> 4)
             + 8193) >> 1;
        *unint64_t v40 = ((((67174465 * (unint64_t)(57344 * (*v36 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (v36[2] >> 6))) >> 32) >> 4)
              + 8193) >> 1;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v9 - v33;
    do
    {
      unsigned int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        unsigned int v44 = v14 + 4;
        unsigned int v46 = ((((67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(57344 * (v14[3] >> 6))) >> 32) >> 4)
             + 8193) >> 1;
        *uint64_t v21 = ((((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (v14[2] >> 6))) >> 32) >> 4)
              + 8193) >> 1;
        v21[1] = v46;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          unsigned int v48 = &v45[v47];
          unsigned int v49 = ((((67174465 * (unint64_t)(57344 * (v44[1] >> 6))) >> 32) >> 4)
               + (((67174465 * (unint64_t)(57344 * (v44[3] >> 6))) >> 32) >> 4)
               + 8193) >> 1;
          *unsigned int v48 = ((((67174465 * (unint64_t)(57344 * (*v44 >> 6))) >> 32) >> 4)
                + (((67174465 * (unint64_t)(57344 * (v44[2] >> 6))) >> 32) >> 4)
                + 8193) >> 1;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if (v34)
    {
      int v50 = *v14 >> 6;
      int v51 = v14[1] >> 6;
      int v52 = v14[2] >> 6;
      int v53 = v14[3] >> 6;
      v14 += 4;
      *uint64_t v21 = ((((67174465 * (unint64_t)(57344 * v50)) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * v52)) >> 32) >> 4)
            + 8193) >> 1;
      v21[1] = ((((67174465 * (unint64_t)(57344 * v51)) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * v53)) >> 32) >> 4)
              + 8193) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        unsigned int v55 = &v21[v54];
        unsigned int v56 = ((((67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(57344 * (v14[3] >> 6))) >> 32) >> 4)
             + 8193) >> 1;
        *unsigned int v55 = ((((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (v14[2] >> 6))) >> 32) >> 4)
              + 8193) >> 1;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v38 = v14[1] >> 6;
      unsigned int v36 = v14 + 4;
      *uint64_t v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
      v21[1] = ((67174465 * (unint64_t)(57344 * v38)) >> 36) + 4096;
      unsigned int v37 = v21 + 2;
    }
    else
    {
      unsigned int v36 = v14;
      unsigned int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unint64_t v41 = (67174465 * (unint64_t)(57344 * (v36[1] >> 6))) >> 36;
        *unint64_t v40 = ((67174465 * (unint64_t)(57344 * (*v36 >> 6))) >> 36) + 4096;
        v40[1] = v41 + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      unsigned int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v46 = v14[1] >> 6;
        unsigned int v44 = v14 + 4;
        *uint64_t v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        v21[1] = ((67174465 * (unint64_t)(57344 * v46)) >> 36) + 4096;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          unsigned int v48 = &v45[v47];
          unint64_t v49 = (67174465 * (unint64_t)(57344 * (v44[1] >> 6))) >> 36;
          *unsigned int v48 = ((67174465 * (unint64_t)(57344 * (*v44 >> 6))) >> 36) + 4096;
          v48[1] = v49 + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      int v50 = *v14 >> 6;
      int v51 = v14[1] >> 6;
      v14 += 4;
      *uint64_t v21 = ((67174465 * (unint64_t)(57344 * v50)) >> 36) + 4096;
      v21[1] = ((67174465 * (unint64_t)(57344 * v51)) >> 36) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unint64_t v54 = (67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 36;
        *int v53 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        v53[1] = v54 + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      unsigned int v36 = ((((67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 32) >> 4)
           + (((67174465 * (unint64_t)(57344 * (v14[3] >> 6))) >> 32) >> 4)
           + 8193) >> 1;
      *uint64_t v21 = ((((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (v14[2] >> 6))) >> 32) >> 4)
            + 8193) >> 1;
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = ((((67174465 * (unint64_t)(57344 * (v34[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(57344 * (v34[3] >> 6))) >> 32) >> 4)
             + 8193) >> 1;
        _WORD *v38 = ((((67174465 * (unint64_t)(57344 * (*v34 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (v34[2] >> 6))) >> 32) >> 4)
              + 8193) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        unsigned int v44 = ((((67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(57344 * (v14[3] >> 6))) >> 32) >> 4)
             + 8193) >> 1;
        *uint64_t v21 = ((((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (v14[2] >> 6))) >> 32) >> 4)
              + 8193) >> 1;
        v21[1] = v44;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = ((((67174465 * (unint64_t)(57344 * (v42[1] >> 6))) >> 32) >> 4)
               + (((67174465 * (unint64_t)(57344 * (v42[3] >> 6))) >> 32) >> 4)
               + 8193) >> 1;
          *int v46 = ((((67174465 * (unint64_t)(57344 * (*v42 >> 6))) >> 32) >> 4)
                + (((67174465 * (unint64_t)(57344 * (v42[2] >> 6))) >> 32) >> 4)
                + 8193) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14 >> 6;
      int v49 = v14[1] >> 6;
      int v50 = v14[2] >> 6;
      int v51 = v14[3] >> 6;
      v14 += 4;
      *uint64_t v21 = ((((67174465 * (unint64_t)(57344 * v48)) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * v50)) >> 32) >> 4)
            + 8193) >> 1;
      v21[1] = ((((67174465 * (unint64_t)(57344 * v49)) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * v51)) >> 32) >> 4)
              + 8193) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unsigned int v54 = ((((67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(57344 * (v14[3] >> 6))) >> 32) >> 4)
             + 8193) >> 1;
        *int v53 = ((((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (v14[2] >> 6))) >> 32) >> 4)
              + 8193) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1] >> 6;
      char v34 = v14 + 4;
      *uint64_t v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
      v21[1] = ((67174465 * (unint64_t)(57344 * v36)) >> 36) + 4096;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (67174465 * (unint64_t)(57344 * (v34[1] >> 6))) >> 36;
        _WORD *v38 = ((67174465 * (unint64_t)(57344 * (*v34 >> 6))) >> 36) + 4096;
        v38[1] = v39 + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        int v44 = v14[1] >> 6;
        unint64_t v42 = v14 + 4;
        *uint64_t v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        v21[1] = ((67174465 * (unint64_t)(57344 * v44)) >> 36) + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unint64_t v47 = (67174465 * (unint64_t)(57344 * (v42[1] >> 6))) >> 36;
          *int v46 = ((67174465 * (unint64_t)(57344 * (*v42 >> 6))) >> 36) + 4096;
          v46[1] = v47 + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14 >> 6;
      int v49 = v14[1] >> 6;
      v14 += 4;
      *uint64_t v21 = ((67174465 * (unint64_t)(57344 * v48)) >> 36) + 4096;
      v21[1] = ((67174465 * (unint64_t)(57344 * v49)) >> 36) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        unint64_t v52 = (67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 36;
        *int v51 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        v51[1] = v52 + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 36;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      unsigned int v36 = ((((67174465 * (unint64_t)(0xFFFF * (v14[1] >> 6))) >> 32) >> 4)
           + (((67174465 * (unint64_t)(0xFFFF * (v14[3] >> 6))) >> 32) >> 4)
           + 1) >> 1;
      *uint64_t v21 = ((((67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (v14[2] >> 6))) >> 32) >> 4)
            + 1) >> 1;
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = ((((67174465 * (unint64_t)(0xFFFF * (v34[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(0xFFFF * (v34[3] >> 6))) >> 32) >> 4)
             + 1) >> 1;
        _WORD *v38 = ((((67174465 * (unint64_t)(0xFFFF * (*v34 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (v34[2] >> 6))) >> 32) >> 4)
              + 1) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        unsigned int v44 = ((((67174465 * (unint64_t)(0xFFFF * (v14[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(0xFFFF * (v14[3] >> 6))) >> 32) >> 4)
             + 1) >> 1;
        *uint64_t v21 = ((((67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (v14[2] >> 6))) >> 32) >> 4)
              + 1) >> 1;
        v21[1] = v44;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = ((((67174465 * (unint64_t)(0xFFFF * (v42[1] >> 6))) >> 32) >> 4)
               + (((67174465 * (unint64_t)(0xFFFF * (v42[3] >> 6))) >> 32) >> 4)
               + 1) >> 1;
          *int v46 = ((((67174465 * (unint64_t)(0xFFFF * (*v42 >> 6))) >> 32) >> 4)
                + (((67174465 * (unint64_t)(0xFFFF * (v42[2] >> 6))) >> 32) >> 4)
                + 1) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v48 = *v14;
      unsigned int v49 = v14[1];
      unsigned int v50 = v14[2];
      unsigned int v51 = v14[3];
      v14 += 4;
      *uint64_t v21 = ((((67174465 * (unint64_t)(0xFFFF * (v48 >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (v50 >> 6))) >> 32) >> 4)
            + 1) >> 1;
      v21[1] = ((((67174465 * (unint64_t)(0xFFFF * (v49 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (v51 >> 6))) >> 32) >> 4)
              + 1) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unsigned int v54 = ((((67174465 * (unint64_t)(0xFFFF * (v14[1] >> 6))) >> 32) >> 4)
             + (((67174465 * (unint64_t)(0xFFFF * (v14[3] >> 6))) >> 32) >> 4)
             + 1) >> 1;
        *int v53 = ((((67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (v14[2] >> 6))) >> 32) >> 4)
              + 1) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 36;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unsigned int v36 = v14[1];
      char v34 = v14 + 4;
      *uint64_t v21 = (67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 36;
      v21[1] = (67174465 * (unint64_t)(0xFFFF * (v36 >> 6))) >> 36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unsigned int v39 = v34[1];
        _WORD *v38 = (67174465 * (unint64_t)(0xFFFF * (*v34 >> 6))) >> 36;
        v38[1] = (67174465 * (unint64_t)(0xFFFF * (v39 >> 6))) >> 36;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unsigned int v44 = v14[1];
        unint64_t v42 = v14 + 4;
        *uint64_t v21 = (67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 36;
        v21[1] = (67174465 * (unint64_t)(0xFFFF * (v44 >> 6))) >> 36;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unsigned int v47 = v42[1];
          *int v46 = (67174465 * (unint64_t)(0xFFFF * (*v42 >> 6))) >> 36;
          v46[1] = (67174465 * (unint64_t)(0xFFFF * (v47 >> 6))) >> 36;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v48 = *v14;
      unsigned int v49 = v14[1];
      v14 += 4;
      *uint64_t v21 = (67174465 * (unint64_t)(0xFFFF * (v48 >> 6))) >> 36;
      v21[1] = (67174465 * (unint64_t)(0xFFFF * (v49 >> 6))) >> 36;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        unsigned int v51 = &v21[v50];
        unsigned int v52 = v14[1];
        *unsigned int v51 = (67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 36;
        v51[1] = (67174465 * (unint64_t)(0xFFFF * (v52 >> 6))) >> 36;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      unsigned int v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v40 = *v39 >> 6;
      int v41 = v39[1] >> 6;
      unint64_t v37 = v15 + 4;
      unsigned int v42 = (((67174465 * (unint64_t)(57344 * (v15[1] >> 6))) >> 32) >> 4)
          + (((67174465 * (unint64_t)(57344 * (v15[3] >> 6))) >> 32) >> 4)
          + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32) >> 4)
          + (((67174465 * (unint64_t)(57344 * v41)) >> 32) >> 4)
          + 16386;
      *unint64_t v22 = ((((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (v15[2] >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * v40)) >> 32) >> 4)
            + 16386) >> 2;
      v22[1] = v42 >> 2;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v43 = 0;
      unsigned int v44 = v37 + 2;
      do
      {
        unsigned int v45 = (((67174465 * (unint64_t)(57344 * (*(v44 - 1) >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (v44[1] >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v44 + v14 - 2) >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v44 + v14 + 2) >> 6))) >> 32) >> 4)
            + 16386;
        int v46 = &v38[v43];
        *int v46 = ((((67174465 * (unint64_t)(57344 * (*(v44 - 2) >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (*v44 >> 6))) >> 32) >> 4)
              + (((67174465
                               * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v44 + v14 - 4) >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v44 + v14) >> 6))) >> 32) >> 4)
              + 16386) >> 2;
        v46[1] = v45 >> 2;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      unsigned int v49 = v15;
      unint64_t v50 = v22;
      if (v9)
      {
        unsigned int v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v52 = *v51 >> 6;
        int v53 = v51[1] >> 6;
        unsigned int v49 = v15 + 4;
        unsigned int v54 = (((67174465 * (unint64_t)(57344 * (v15[1] >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (v15[3] >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(57344 * v53)) >> 32) >> 4)
            + 16386;
        *unint64_t v22 = ((((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (v15[2] >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * v52)) >> 32) >> 4)
              + 16386) >> 2;
        v22[1] = v54 >> 2;
        unint64_t v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v55 = 0;
        unsigned int v56 = v49 + 2;
        do
        {
          unsigned int v57 = (((67174465 * (unint64_t)(57344 * (*(v56 - 1) >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(57344 * (v56[1] >> 6))) >> 32) >> 4)
              + (((67174465
                               * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v56 + v14 - 2) >> 6))) >> 32) >> 4)
              + (((67174465
                               * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v56 + v14 + 2) >> 6))) >> 32) >> 4)
              + 16386;
          int v58 = &v50[v55];
          *int v58 = ((((67174465 * (unint64_t)(57344 * (*(v56 - 2) >> 6))) >> 32) >> 4)
                + (((67174465 * (unint64_t)(57344 * (*v56 >> 6))) >> 32) >> 4)
                + (((67174465
                                 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v56 + v14 - 4) >> 6))) >> 32) >> 4)
                + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v56 + v14) >> 6))) >> 32) >> 4)
                + 16386) >> 2;
          v58[1] = v57 >> 2;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      int v39 = v15[1] >> 6;
      unint64_t v37 = v15 + 4;
      *unint64_t v22 = ((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 36) + 4096;
      v22[1] = ((67174465 * (unint64_t)(57344 * v39)) >> 36) + 4096;
      int v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (67174465 * (unint64_t)(57344 * (v37[1] >> 6))) >> 36;
        *int v41 = ((67174465 * (unint64_t)(57344 * (*v37 >> 6))) >> 36) + 4096;
        v41[1] = v42 + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      int v46 = v15;
      unint64_t v47 = v22;
      if (v9)
      {
        int v48 = v15[1] >> 6;
        int v46 = v15 + 4;
        *unint64_t v22 = ((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 36) + 4096;
        v22[1] = ((67174465 * (unint64_t)(57344 * v48)) >> 36) + 4096;
        unint64_t v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          unint64_t v51 = (67174465 * (unint64_t)(57344 * (v46[1] >> 6))) >> 36;
          *unint64_t v50 = ((67174465 * (unint64_t)(57344 * (*v46 >> 6))) >> 36) + 4096;
          v50[1] = v51 + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * v10);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v62 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + ((unint64_t)(v62 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - v10;
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = v13 - v12;
  unint64_t v25 = v19 - v18;
  if (v24 < v19 - v18) {
    unint64_t v25 = v24;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12 + 2 * v10;
    if (v12 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v32 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 36;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v8 & 1)) {
    uint64_t v34 = v8 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v9 = v9;
  if (v22 >= (v9 & 1u)) {
    uint64_t v35 = v9 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v22 - v35;
  if (v8)
  {
    uint64_t v37 = v34;
    if (v9)
    {
      unint64_t v40 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      unsigned int v41 = *v40;
      unsigned int v42 = v40[1];
      int v38 = v15 + 4;
      unsigned int v43 = (((67174465 * (unint64_t)(0xFFFF * (v15[1] >> 6))) >> 32) >> 4)
          + (((67174465 * (unint64_t)(0xFFFF * (v15[3] >> 6))) >> 32) >> 4)
          + (((67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32) >> 4)
          + (((67174465 * (unint64_t)(0xFFFF * (v42 >> 6))) >> 32) >> 4)
          + 2;
      *uint64_t v21 = ((((67174465 * (unint64_t)(0xFFFF * (*v15 >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (v15[2] >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (v41 >> 6))) >> 32) >> 4)
            + 2) >> 2;
      v21[1] = v43 >> 2;
      int v39 = v21 + 2;
    }
    else
    {
      int v38 = v15;
      int v39 = v21;
    }
    if (v22 != v35)
    {
      unint64_t v44 = 0;
      uint64_t v45 = v38 + 2;
      do
      {
        unsigned int v46 = (((67174465 * (unint64_t)(0xFFFF * (*(v45 - 1) >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (v45[1] >> 6))) >> 32) >> 4)
            + (((67174465
                             * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v45 + v14 - 2) >> 6))) >> 32) >> 4)
            + (((67174465
                             * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v45 + v14 + 2) >> 6))) >> 32) >> 4)
            + 2;
        unint64_t v47 = &v39[v44];
        *unint64_t v47 = ((((67174465 * (unint64_t)(0xFFFF * (*(v45 - 2) >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (*v45 >> 6))) >> 32) >> 4)
              + (((67174465
                               * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v45 + v14 - 4) >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v45 + v14) >> 6))) >> 32) >> 4)
              + 2) >> 2;
        v47[1] = v46 >> 2;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v36);
    }
    v15 += v14;
    uint64_t v21 = (_WORD *)((char *)v21 + v62);
    uint64_t v34 = v37;
  }
  if (v25 != v34)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v25 - v34;
    do
    {
      unint64_t v50 = v15;
      unint64_t v51 = v21;
      uint64_t v52 = v9;
      if (v9)
      {
        int v53 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        unsigned int v54 = *v53;
        unsigned int v55 = v53[1];
        unint64_t v50 = v15 + 4;
        unsigned int v56 = (((67174465 * (unint64_t)(0xFFFF * (v15[1] >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (v15[3] >> 6))) >> 32) >> 4)
            + (((67174465
                             * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (v55 >> 6))) >> 32) >> 4)
            + 2;
        *uint64_t v21 = ((((67174465 * (unint64_t)(0xFFFF * (*v15 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (v15[2] >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (v54 >> 6))) >> 32) >> 4)
              + 2) >> 2;
        v21[1] = v56 >> 2;
        unint64_t v51 = v21 + 2;
      }
      if (v22 != v35)
      {
        unint64_t v57 = 0;
        int v58 = v50 + 2;
        do
        {
          unsigned int v59 = (((67174465 * (unint64_t)(0xFFFF * (*(v58 - 1) >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (v58[1] >> 6))) >> 32) >> 4)
              + (((67174465
                               * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v58 + v14 - 2) >> 6))) >> 32) >> 4)
              + (((67174465
                               * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v58 + v14 + 2) >> 6))) >> 32) >> 4)
              + 2;
          double v60 = &v51[v57];
          *double v60 = ((((67174465 * (unint64_t)(0xFFFF * (*(v58 - 2) >> 6))) >> 32) >> 4)
                + (((67174465 * (unint64_t)(0xFFFF * (*v58 >> 6))) >> 32) >> 4)
                + (((67174465
                                 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v58 + v14 - 4) >> 6))) >> 32) >> 4)
                + (((67174465
                                 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v58 + v14) >> 6))) >> 32) >> 4)
                + 2) >> 2;
          v60[1] = v59 >> 2;
          v57 += 2;
          v58 += 4;
        }
        while (v57 < v36);
      }
      v15 += v14;
      uint64_t v21 = (_WORD *)((char *)v21 + v62);
      v48 += 2;
      uint64_t v9 = v52;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 36;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      unsigned int v39 = v15[1];
      uint64_t v37 = v15 + 4;
      *unint64_t v22 = (67174465 * (unint64_t)(0xFFFF * (*v15 >> 6))) >> 36;
      v22[1] = (67174465 * (unint64_t)(0xFFFF * (v39 >> 6))) >> 36;
      int v38 = v22 + 2;
    }
    else
    {
      uint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        unsigned int v41 = &v38[v40];
        unsigned int v42 = v37[1];
        *unsigned int v41 = (67174465 * (unint64_t)(0xFFFF * (*v37 >> 6))) >> 36;
        v41[1] = (67174465 * (unint64_t)(0xFFFF * (v42 >> 6))) >> 36;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unsigned int v46 = v15;
      unint64_t v47 = v22;
      if (v9)
      {
        unsigned int v48 = v15[1];
        unsigned int v46 = v15 + 4;
        *unint64_t v22 = (67174465 * (unint64_t)(0xFFFF * (*v15 >> 6))) >> 36;
        v22[1] = (67174465 * (unint64_t)(0xFFFF * (v48 >> 6))) >> 36;
        unint64_t v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          unsigned int v51 = v46[1];
          *unint64_t v50 = (67174465 * (unint64_t)(0xFFFF * (*v46 >> 6))) >> 36;
          v50[1] = (67174465 * (unint64_t)(0xFFFF * (v51 >> 6))) >> 36;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_xf44_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v24 + 2 * i) >> 6))) >> 32)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  unint64_t v26 = v8 & 1;
  if (v17 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      int v34 = v12[1] >> 6;
      uint64_t v32 = v12 + 2;
      *uint64_t v16 = 16 * ((4198405 * (unint64_t)(3584 * (*v12 >> 6))) >> 32) + 4096;
      v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v34)) >> 32) + 4096;
      uint64_t v33 = v16 + 2;
    }
    else
    {
      uint64_t v32 = v12;
      uint64_t v33 = v16;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        int v37 = *v32 >> 6;
        int v38 = v32[1] >> 6;
        v32 += 2;
        _WORD *v33 = 16 * ((4198405 * (unint64_t)(3584 * v37)) >> 32) + 4096;
        v33[1] = 16 * ((4198405 * (unint64_t)(3584 * v38)) >> 32) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      int v39 = *v32 >> 6;
      int v40 = v32[1] >> 6;
      _WORD *v33 = 16 * ((4198405 * (unint64_t)(3584 * v39)) >> 32) + 4096;
      v33[1] = 16 * ((4198405 * (unint64_t)(3584 * v40)) >> 32) + 4096;
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v17 - v27;
    do
    {
      unint64_t v43 = v12;
      unint64_t v44 = v16;
      if (v28)
      {
        int v45 = v12[1] >> 6;
        unint64_t v43 = v12 + 2;
        *uint64_t v16 = 16 * ((4198405 * (unint64_t)(3584 * (*v12 >> 6))) >> 32) + 4096;
        v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v45)) >> 32) + 4096;
        unint64_t v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          int v48 = *v43 >> 6;
          int v49 = v43[1] >> 6;
          v43 += 2;
          *unint64_t v44 = 16 * ((4198405 * (unint64_t)(3584 * v48)) >> 32) + 4096;
          v44[1] = 16 * ((4198405 * (unint64_t)(3584 * v49)) >> 32) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        int v50 = *v43 >> 6;
        int v51 = v43[1] >> 6;
        *unint64_t v44 = 16 * ((4198405 * (unint64_t)(3584 * v50)) >> 32) + 4096;
        v44[1] = 16 * ((4198405 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if (v28)
    {
      int v52 = *v12 >> 6;
      int v53 = v12[1] >> 6;
      v12 += 2;
      *uint64_t v16 = 16 * ((4198405 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v53)) >> 32) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        int v55 = *v12 >> 6;
        int v56 = v12[1] >> 6;
        v12 += 2;
        *uint64_t v16 = 16 * ((4198405 * (unint64_t)(3584 * v55)) >> 32) + 4096;
        v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v56)) >> 32) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      int v57 = *v12 >> 6;
      int v58 = v12[1] >> 6;
      *uint64_t v16 = 16 * ((4198405 * (unint64_t)(3584 * v57)) >> 32) + 4096;
      v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v58)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf44_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v23 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      int v33 = v13[1] >> 6;
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = 16 * ((4198405 * (unint64_t)(3584 * (*v13 >> 6))) >> 32) + 4096;
      v17[1] = 16 * ((4198405 * (unint64_t)(3584 * v33)) >> 32) + 4096;
      uint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      uint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        int v36 = *v31 >> 6;
        int v37 = v31[1] >> 6;
        v31 += 2;
        _WORD *v32 = 16 * ((4198405 * (unint64_t)(3584 * v36)) >> 32) + 4096;
        v32[1] = 16 * ((4198405 * (unint64_t)(3584 * v37)) >> 32) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      int v38 = *v31 >> 6;
      int v39 = v31[1] >> 6;
      _WORD *v32 = 16 * ((4198405 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      v32[1] = 16 * ((4198405 * (unint64_t)(3584 * v39)) >> 32) + 4096;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        int v44 = v13[1] >> 6;
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = 16 * ((4198405 * (unint64_t)(3584 * (*v13 >> 6))) >> 32) + 4096;
        v17[1] = 16 * ((4198405 * (unint64_t)(3584 * v44)) >> 32) + 4096;
        unint64_t v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          int v47 = *v42 >> 6;
          int v48 = v42[1] >> 6;
          v42 += 2;
          _WORD *v43 = 16 * ((4198405 * (unint64_t)(3584 * v47)) >> 32) + 4096;
          v43[1] = 16 * ((4198405 * (unint64_t)(3584 * v48)) >> 32) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        int v49 = *v42 >> 6;
        int v50 = v42[1] >> 6;
        _WORD *v43 = 16 * ((4198405 * (unint64_t)(3584 * v49)) >> 32) + 4096;
        v43[1] = 16 * ((4198405 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      int v51 = *v13 >> 6;
      int v52 = v13[1] >> 6;
      v13 += 2;
      *unint64_t v17 = 16 * ((4198405 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      v17[1] = 16 * ((4198405 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        int v54 = *v13 >> 6;
        int v55 = v13[1] >> 6;
        v13 += 2;
        *unint64_t v17 = 16 * ((4198405 * (unint64_t)(3584 * v54)) >> 32) + 4096;
        v17[1] = 16 * ((4198405 * (unint64_t)(3584 * v55)) >> 32) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      int v56 = *v13 >> 6;
      int v57 = v13[1] >> 6;
      *unint64_t v17 = 16 * ((4198405 * (unint64_t)(3584 * v56)) >> 32) + 4096;
      v17[1] = 16 * ((4198405 * (unint64_t)(3584 * v57)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf44_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v23 + 2 * i) >> 6))) >> 32);
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      unsigned int v33 = v13[1];
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = 16 * ((4198405 * (unint64_t)(4095 * (*v13 >> 6))) >> 32);
      v17[1] = 16 * ((4198405 * (unint64_t)(4095 * (v33 >> 6))) >> 32);
      uint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      uint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        unsigned int v36 = *v31;
        unsigned int v37 = v31[1];
        v31 += 2;
        _WORD *v32 = 16 * ((4198405 * (unint64_t)(4095 * (v36 >> 6))) >> 32);
        v32[1] = 16 * ((4198405 * (unint64_t)(4095 * (v37 >> 6))) >> 32);
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      unsigned int v38 = *v31;
      unsigned int v39 = v31[1];
      _WORD *v32 = 16 * ((4198405 * (unint64_t)(4095 * (v38 >> 6))) >> 32);
      v32[1] = 16 * ((4198405 * (unint64_t)(4095 * (v39 >> 6))) >> 32);
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        unsigned int v44 = v13[1];
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = 16 * ((4198405 * (unint64_t)(4095 * (*v13 >> 6))) >> 32);
        v17[1] = 16 * ((4198405 * (unint64_t)(4095 * (v44 >> 6))) >> 32);
        unint64_t v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          unsigned int v47 = *v42;
          unsigned int v48 = v42[1];
          v42 += 2;
          _WORD *v43 = 16 * ((4198405 * (unint64_t)(4095 * (v47 >> 6))) >> 32);
          v43[1] = 16 * ((4198405 * (unint64_t)(4095 * (v48 >> 6))) >> 32);
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        unsigned int v49 = *v42;
        unsigned int v50 = v42[1];
        _WORD *v43 = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
        v43[1] = 16 * ((4198405 * (unint64_t)(4095 * (v50 >> 6))) >> 32);
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      unsigned int v51 = *v13;
      unsigned int v52 = v13[1];
      v13 += 2;
      *unint64_t v17 = 16 * ((4198405 * (unint64_t)(4095 * (v51 >> 6))) >> 32);
      v17[1] = 16 * ((4198405 * (unint64_t)(4095 * (v52 >> 6))) >> 32);
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        unsigned int v54 = *v13;
        unsigned int v55 = v13[1];
        v13 += 2;
        *unint64_t v17 = 16 * ((4198405 * (unint64_t)(4095 * (v54 >> 6))) >> 32);
        v17[1] = 16 * ((4198405 * (unint64_t)(4095 * (v55 >> 6))) >> 32);
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      unsigned int v56 = *v13;
      unsigned int v57 = v13[1];
      *unint64_t v17 = 16 * ((4198405 * (unint64_t)(4095 * (v56 >> 6))) >> 32);
      v17[1] = 16 * ((4198405 * (unint64_t)(4095 * (v57 >> 6))) >> 32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v32 = v12 & 1;
  if (v9 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unsigned int v36 = v14 + 4;
      int v38 = ((4198405 * (unint64_t)(3584 * (v14[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32);
      *uint64_t v21 = (8
            * (((4198405 * (unint64_t)(3584 * (v14[2] >> 6))) >> 32)
             + ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32))
            + 4104) & 0xFFF0;
      v21[1] = (8 * v38 + 4104) & 0xFFF0;
      unsigned int v37 = v21 + 2;
    }
    else
    {
      unsigned int v36 = v14;
      unsigned int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        int v41 = ((4198405 * (unint64_t)(3584 * (v36[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v36[1] >> 6))) >> 32);
        *unint64_t v40 = (8
              * (((4198405 * (unint64_t)(3584 * (v36[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v36 >> 6))) >> 32))
              + 4104) & 0xFFF0;
        v40[1] = (8 * v41 + 4104) & 0xFFF0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v9 - v33;
    do
    {
      unsigned int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        unsigned int v44 = v14 + 4;
        int v46 = ((4198405 * (unint64_t)(3584 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32);
        *uint64_t v21 = (8
              * (((4198405 * (unint64_t)(3584 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32))
              + 4104) & 0xFFF0;
        v21[1] = (8 * v46 + 4104) & 0xFFF0;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          unsigned int v48 = &v45[v47];
          int v49 = ((4198405 * (unint64_t)(3584 * (v44[3] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(3584 * (v44[1] >> 6))) >> 32);
          *unsigned int v48 = (8
                * (((4198405 * (unint64_t)(3584 * (v44[2] >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(3584 * (*v44 >> 6))) >> 32))
                + 4104) & 0xFFF0;
          v48[1] = (8 * v49 + 4104) & 0xFFF0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if (v34)
    {
      int v50 = *v14 >> 6;
      int v51 = v14[1] >> 6;
      int v52 = v14[2] >> 6;
      int v53 = v14[3] >> 6;
      v14 += 4;
      *uint64_t v21 = (8
            * (((4198405 * (unint64_t)(3584 * v52)) >> 32)
             + ((4198405 * (unint64_t)(3584 * v50)) >> 32))
            + 4104) & 0xFFF0;
      v21[1] = (8
              * (((4198405 * (unint64_t)(3584 * v53)) >> 32)
               + ((4198405 * (unint64_t)(3584 * v51)) >> 32))
              + 4104) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        unsigned int v55 = &v21[v54];
        int v56 = ((4198405 * (unint64_t)(3584 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32);
        *unsigned int v55 = (8
              * (((4198405 * (unint64_t)(3584 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32))
              + 4104) & 0xFFF0;
        v55[1] = (8 * v56 + 4104) & 0xFFF0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v38 = v14[1] >> 6;
      unsigned int v36 = v14 + 4;
      *uint64_t v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
      v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      unsigned int v37 = v21 + 2;
    }
    else
    {
      unsigned int v36 = v14;
      unsigned int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unint64_t v41 = (4198405 * (unint64_t)(3584 * (v36[1] >> 6))) >> 32;
        *unint64_t v40 = 16 * ((4198405 * (unint64_t)(3584 * (*v36 >> 6))) >> 32) + 4096;
        v40[1] = 16 * v41 + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      unsigned int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v46 = v14[1] >> 6;
        unsigned int v44 = v14 + 4;
        *uint64_t v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v46)) >> 32) + 4096;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          unsigned int v48 = &v45[v47];
          unint64_t v49 = (4198405 * (unint64_t)(3584 * (v44[1] >> 6))) >> 32;
          *unsigned int v48 = 16 * ((4198405 * (unint64_t)(3584 * (*v44 >> 6))) >> 32) + 4096;
          v48[1] = 16 * v49 + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      int v50 = *v14 >> 6;
      int v51 = v14[1] >> 6;
      v14 += 4;
      *uint64_t v21 = 16 * ((4198405 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unint64_t v54 = (4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32;
        *int v53 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        v53[1] = 16 * v54 + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      int v36 = ((4198405 * (unint64_t)(3584 * (v14[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32);
      *uint64_t v21 = (8
            * (((4198405 * (unint64_t)(3584 * (v14[2] >> 6))) >> 32)
             + ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32))
            + 4104) & 0xFFF0;
      v21[1] = (8 * v36 + 4104) & 0xFFF0;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        int v39 = ((4198405 * (unint64_t)(3584 * (v34[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v34[1] >> 6))) >> 32);
        _WORD *v38 = (8
              * (((4198405 * (unint64_t)(3584 * (v34[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v34 >> 6))) >> 32))
              + 4104) & 0xFFF0;
        v38[1] = (8 * v39 + 4104) & 0xFFF0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        int v44 = ((4198405 * (unint64_t)(3584 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32);
        *uint64_t v21 = (8
              * (((4198405 * (unint64_t)(3584 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32))
              + 4104) & 0xFFF0;
        v21[1] = (8 * v44 + 4104) & 0xFFF0;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          int v47 = ((4198405 * (unint64_t)(3584 * (v42[3] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(3584 * (v42[1] >> 6))) >> 32);
          *int v46 = (8
                * (((4198405 * (unint64_t)(3584 * (v42[2] >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(3584 * (*v42 >> 6))) >> 32))
                + 4104) & 0xFFF0;
          v46[1] = (8 * v47 + 4104) & 0xFFF0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14 >> 6;
      int v49 = v14[1] >> 6;
      int v50 = v14[2] >> 6;
      int v51 = v14[3] >> 6;
      v14 += 4;
      *uint64_t v21 = (8
            * (((4198405 * (unint64_t)(3584 * v50)) >> 32)
             + ((4198405 * (unint64_t)(3584 * v48)) >> 32))
            + 4104) & 0xFFF0;
      v21[1] = (8
              * (((4198405 * (unint64_t)(3584 * v51)) >> 32)
               + ((4198405 * (unint64_t)(3584 * v49)) >> 32))
              + 4104) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        int v54 = ((4198405 * (unint64_t)(3584 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32);
        *int v53 = (8
              * (((4198405 * (unint64_t)(3584 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32))
              + 4104) & 0xFFF0;
        v53[1] = (8 * v54 + 4104) & 0xFFF0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1] >> 6;
      char v34 = v14 + 4;
      *uint64_t v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
      v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v36)) >> 32) + 4096;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (4198405 * (unint64_t)(3584 * (v34[1] >> 6))) >> 32;
        _WORD *v38 = 16 * ((4198405 * (unint64_t)(3584 * (*v34 >> 6))) >> 32) + 4096;
        v38[1] = 16 * v39 + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        int v44 = v14[1] >> 6;
        unint64_t v42 = v14 + 4;
        *uint64_t v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v44)) >> 32) + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unint64_t v47 = (4198405 * (unint64_t)(3584 * (v42[1] >> 6))) >> 32;
          *int v46 = 16 * ((4198405 * (unint64_t)(3584 * (*v42 >> 6))) >> 32) + 4096;
          v46[1] = 16 * v47 + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14 >> 6;
      int v49 = v14[1] >> 6;
      v14 += 4;
      *uint64_t v21 = 16 * ((4198405 * (unint64_t)(3584 * v48)) >> 32) + 4096;
      v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v49)) >> 32) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        unint64_t v52 = (4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32;
        *int v51 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        v51[1] = 16 * v52 + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32);
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      unint64_t v36 = (4198405 * (unint64_t)(4095 * (v14[1] >> 6))) >> 32;
      unsigned int v37 = 4095 * (v14[3] >> 6);
      *uint64_t v21 = (8
            * (((4198405 * (unint64_t)(4095 * (v14[2] >> 6))) >> 32)
             + ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8 * (((4198405 * (unint64_t)v37) >> 32) + v36) + 8) & 0xFFF0;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v38 = 0;
      do
      {
        unint64_t v39 = &v35[v38];
        int v40 = ((4198405 * (unint64_t)(4095 * (v34[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (v34[1] >> 6))) >> 32);
        *unint64_t v39 = (8
              * (((4198405 * (unint64_t)(4095 * (v34[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (*v34 >> 6))) >> 32))
              + 8) & 0xFFF0;
        v39[1] = (8 * v40 + 8) & 0xFFF0;
        v38 += 2;
        v34 += 4;
      }
      while (v38 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v9 - v31;
    do
    {
      uint64_t v43 = v14;
      int v44 = v21;
      if (v32)
      {
        uint64_t v43 = v14 + 4;
        int v45 = ((4198405 * (unint64_t)(4095 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (v14[1] >> 6))) >> 32);
        *uint64_t v21 = (8
              * (((4198405 * (unint64_t)(4095 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32))
              + 8) & 0xFFF0;
        v21[1] = (8 * v45 + 8) & 0xFFF0;
        int v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          unint64_t v47 = &v44[v46];
          int v48 = ((4198405 * (unint64_t)(4095 * (v43[3] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(4095 * (v43[1] >> 6))) >> 32);
          *unint64_t v47 = (8
                * (((4198405 * (unint64_t)(4095 * (v43[2] >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(4095 * (*v43 >> 6))) >> 32))
                + 8) & 0xFFF0;
          v47[1] = (8 * v48 + 8) & 0xFFF0;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v49 = *v14;
      unsigned int v50 = v14[1];
      unsigned int v51 = v14[2];
      unsigned int v52 = v14[3];
      v14 += 4;
      *uint64_t v21 = (8
            * (((4198405 * (unint64_t)(4095 * (v51 >> 6))) >> 32)
             + ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((4198405 * (unint64_t)(4095 * (v52 >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (v50 >> 6))) >> 32))
              + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v53 = 0;
      do
      {
        int v54 = &v21[v53];
        int v55 = ((4198405 * (unint64_t)(4095 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (v14[1] >> 6))) >> 32);
        *int v54 = (8
              * (((4198405 * (unint64_t)(4095 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32))
              + 8) & 0xFFF0;
        v54[1] = (8 * v55 + 8) & 0xFFF0;
        v53 += 2;
        v14 += 4;
      }
      while (v53 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32);
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unsigned int v36 = v14[1];
      char v34 = v14 + 4;
      *uint64_t v21 = 16 * ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32);
      v21[1] = 16 * ((4198405 * (unint64_t)(4095 * (v36 >> 6))) >> 32);
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unint64_t v38 = &v35[v37];
        unint64_t v39 = (4198405 * (unint64_t)(4095 * (v34[1] >> 6))) >> 32;
        _WORD *v38 = 16 * ((4198405 * (unint64_t)(4095 * (*v34 >> 6))) >> 32);
        v38[1] = 16 * v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      uint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unsigned int v44 = v14[1];
        uint64_t v42 = v14 + 4;
        *uint64_t v21 = 16 * ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32);
        v21[1] = 16 * ((4198405 * (unint64_t)(4095 * (v44 >> 6))) >> 32);
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          unint64_t v46 = &v43[v45];
          unint64_t v47 = (4198405 * (unint64_t)(4095 * (v42[1] >> 6))) >> 32;
          *unint64_t v46 = 16 * ((4198405 * (unint64_t)(4095 * (*v42 >> 6))) >> 32);
          v46[1] = 16 * v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v48 = *v14;
      unsigned int v49 = v14[1];
      v14 += 4;
      *uint64_t v21 = 16 * ((4198405 * (unint64_t)(4095 * (v48 >> 6))) >> 32);
      v21[1] = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        unsigned int v51 = &v21[v50];
        unint64_t v52 = (4198405 * (unint64_t)(4095 * (v14[1] >> 6))) >> 32;
        *unsigned int v51 = 16 * ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32);
        v51[1] = 16 * v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      unint64_t v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v40 = *v39 >> 6;
      int v41 = v39[1] >> 6;
      unint64_t v37 = v15 + 4;
      int v42 = ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(3584 * (v15[1] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(3584 * (v15[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(3584 * v41)) >> 32);
      *unint64_t v22 = (4
            * (((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
             + ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32)
             + ((4198405 * (unint64_t)(3584 * (v15[2] >> 6))) >> 32)
             + ((4198405 * (unint64_t)(3584 * v40)) >> 32))
            + 4104) & 0xFFF0;
      v22[1] = (4 * v42 + 4104) & 0xFFF0;
      unint64_t v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      unint64_t v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v43 = 0;
      unsigned int v44 = v37 + 2;
      do
      {
        int v45 = ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v44 + v14 - 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (*(v44 - 1) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v44[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v44 + v14 + 2) >> 6))) >> 32);
        unint64_t v46 = &v38[v43];
        *unint64_t v46 = (4
              * (((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v44 + v14 - 4) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*(v44 - 2) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v44 >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v44 + v14) >> 6))) >> 32))
              + 4104) & 0xFFF0;
        v46[1] = (4 * v45 + 4104) & 0xFFF0;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      unsigned int v49 = v15;
      unint64_t v50 = v22;
      if (v9)
      {
        unsigned int v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v52 = *v51 >> 6;
        int v53 = v51[1] >> 6;
        unsigned int v49 = v15 + 4;
        int v54 = ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v15[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v15[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * v53)) >> 32);
        *unint64_t v22 = (4
              * (((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (v15[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * v52)) >> 32))
              + 4104) & 0xFFF0;
        v22[1] = (4 * v54 + 4104) & 0xFFF0;
        unint64_t v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v55 = 0;
        int v56 = v49 + 2;
        do
        {
          int v57 = ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v56 + v14 - 2) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(3584 * (*(v56 - 1) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(3584 * (v56[1] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v56 + v14 + 2) >> 6))) >> 32);
          int v58 = &v50[v55];
          *int v58 = (4
                * (((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v56 + v14 - 4) >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(3584 * (*(v56 - 2) >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(3584 * (*v56 >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v56 + v14) >> 6))) >> 32))
                + 4104) & 0xFFF0;
          v58[1] = (4 * v57 + 4104) & 0xFFF0;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      int v39 = v15[1] >> 6;
      unint64_t v37 = v15 + 4;
      *unint64_t v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32) + 4096;
      v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v39)) >> 32) + 4096;
      unint64_t v38 = v22 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      unint64_t v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (4198405 * (unint64_t)(3584 * (v37[1] >> 6))) >> 32;
        *int v41 = 16 * ((4198405 * (unint64_t)(3584 * (*v37 >> 6))) >> 32) + 4096;
        v41[1] = 16 * v42 + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unint64_t v46 = v15;
      unint64_t v47 = v22;
      if (v9)
      {
        int v48 = v15[1] >> 6;
        unint64_t v46 = v15 + 4;
        *unint64_t v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32) + 4096;
        v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v48)) >> 32) + 4096;
        unint64_t v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          unint64_t v51 = (4198405 * (unint64_t)(3584 * (v46[1] >> 6))) >> 32;
          *unint64_t v50 = 16 * ((4198405 * (unint64_t)(3584 * (*v46 >> 6))) >> 32) + 4096;
          v50[1] = 16 * v51 + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * v10);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v62 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + ((unint64_t)(v62 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - v10;
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = v13 - v12;
  unint64_t v25 = v19 - v18;
  if (v24 < v19 - v18) {
    unint64_t v25 = v24;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12 + 2 * v10;
    if (v12 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32);
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v8 & 1)) {
    uint64_t v34 = v8 & 1;
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v9 = v9;
  if (v22 >= (v9 & 1u)) {
    uint64_t v35 = v9 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v22 - v35;
  if (v8)
  {
    uint64_t v37 = v34;
    if (v9)
    {
      unint64_t v40 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      unsigned int v41 = *v40;
      unsigned int v42 = v40[1];
      unint64_t v38 = v15 + 4;
      int v43 = ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(4095 * (v15[1] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(4095 * (v15[3] >> 6))) >> 32);
      *uint64_t v21 = (4
            * (((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
             + ((4198405 * (unint64_t)(4095 * (*v15 >> 6))) >> 32)
             + ((4198405 * (unint64_t)(4095 * (v15[2] >> 6))) >> 32)
             + ((4198405 * (unint64_t)(4095 * (v41 >> 6))) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (4 * (v43 + ((4198405 * (unint64_t)(4095 * (v42 >> 6))) >> 32)) + 8) & 0xFFF0;
      int v39 = v21 + 2;
    }
    else
    {
      unint64_t v38 = v15;
      int v39 = v21;
    }
    if (v22 != v35)
    {
      unint64_t v44 = 0;
      uint64_t v45 = v38 + 2;
      do
      {
        int v46 = ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v45 + v14 - 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (*(v45 - 1) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (v45[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v45 + v14 + 2) >> 6))) >> 32);
        unint64_t v47 = &v39[v44];
        *unint64_t v47 = (4
              * (((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v45 + v14 - 4) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (*(v45 - 2) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (*v45 >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v45 + v14) >> 6))) >> 32))
              + 8) & 0xFFF0;
        v47[1] = (4 * v46 + 8) & 0xFFF0;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v36);
    }
    v15 += v14;
    uint64_t v21 = (_WORD *)((char *)v21 + v62);
    uint64_t v34 = v37;
  }
  if (v25 != v34)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v25 - v34;
    do
    {
      unint64_t v50 = v15;
      unint64_t v51 = v21;
      uint64_t v52 = v9;
      if (v9)
      {
        int v53 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        unsigned int v54 = *v53;
        unsigned int v55 = v53[1];
        unint64_t v50 = v15 + 4;
        int v56 = ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (v15[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (v15[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (v55 >> 6))) >> 32);
        *uint64_t v21 = (4
              * (((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (*v15 >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (v15[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (v54 >> 6))) >> 32))
              + 8) & 0xFFF0;
        v21[1] = (4 * v56 + 8) & 0xFFF0;
        unint64_t v51 = v21 + 2;
      }
      if (v22 != v35)
      {
        unint64_t v57 = 0;
        int v58 = v50 + 2;
        do
        {
          int v59 = ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v58 + v14 - 2) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(4095 * (*(v58 - 1) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(4095 * (v58[1] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v58 + v14 + 2) >> 6))) >> 32);
          double v60 = &v51[v57];
          *double v60 = (4
                * (((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v58 + v14 - 4) >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(4095 * (*(v58 - 2) >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(4095 * (*v58 >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v58 + v14) >> 6))) >> 32))
                + 8) & 0xFFF0;
          v60[1] = (4 * v59 + 8) & 0xFFF0;
          v57 += 2;
          v58 += 4;
        }
        while (v57 < v36);
      }
      v15 += v14;
      uint64_t v21 = (_WORD *)((char *)v21 + v62);
      v48 += 2;
      uint64_t v9 = v52;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      unsigned int v39 = v15[1];
      uint64_t v37 = v15 + 4;
      *unint64_t v22 = 16 * ((4198405 * (unint64_t)(4095 * (*v15 >> 6))) >> 32);
      v22[1] = 16 * ((4198405 * (unint64_t)(4095 * (v39 >> 6))) >> 32);
      unint64_t v38 = v22 + 2;
    }
    else
    {
      uint64_t v37 = v15;
      unint64_t v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        unsigned int v41 = &v38[v40];
        unint64_t v42 = (4198405 * (unint64_t)(4095 * (v37[1] >> 6))) >> 32;
        *unsigned int v41 = 16 * ((4198405 * (unint64_t)(4095 * (*v37 >> 6))) >> 32);
        v41[1] = 16 * v42;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      int v46 = v15;
      unint64_t v47 = v22;
      if (v9)
      {
        unsigned int v48 = v15[1];
        int v46 = v15 + 4;
        *unint64_t v22 = 16 * ((4198405 * (unint64_t)(4095 * (*v15 >> 6))) >> 32);
        v22[1] = 16 * ((4198405 * (unint64_t)(4095 * (v48 >> 6))) >> 32);
        unint64_t v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          unint64_t v51 = (4198405 * (unint64_t)(4095 * (v46[1] >> 6))) >> 32;
          *unint64_t v50 = 16 * ((4198405 * (unint64_t)(4095 * (*v46 >> 6))) >> 32);
          v50[1] = 16 * v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_xf44_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v24 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v17);
  }
  unint64_t v26 = v8 & 1;
  if (v17 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      int v34 = v12[1] >> 6;
      uint64_t v32 = v12 + 2;
      *uint64_t v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v12 >> 6))) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v34)) >> 32) << 6) + 4096;
      uint64_t v33 = v16 + 2;
    }
    else
    {
      uint64_t v32 = v12;
      uint64_t v33 = v16;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        int v37 = *v32 >> 6;
        int v38 = v32[1] >> 6;
        v32 += 2;
        _WORD *v33 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v37)) >> 32) << 6) + 4096;
        v33[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      int v39 = *v32 >> 6;
      int v40 = v32[1] >> 6;
      _WORD *v33 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
      v33[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v40)) >> 32) << 6) + 4096;
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v17 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v17 - v27;
    do
    {
      unint64_t v43 = v12;
      unint64_t v44 = v16;
      if (v28)
      {
        int v45 = v12[1] >> 6;
        unint64_t v43 = v12 + 2;
        *uint64_t v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v12 >> 6))) >> 32) << 6) + 4096;
        v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v45)) >> 32) << 6) + 4096;
        unint64_t v44 = v16 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          int v48 = *v43 >> 6;
          int v49 = v43[1] >> 6;
          v43 += 2;
          *unint64_t v44 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
          v44[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        int v50 = *v43 >> 6;
        int v51 = v43[1] >> 6;
        *unint64_t v44 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
        v44[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v17)
  {
    if (v28)
    {
      int v52 = *v12 >> 6;
      int v53 = v12[1] >> 6;
      v12 += 2;
      *uint64_t v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v53)) >> 32) << 6) + 4096;
      v16 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        int v55 = *v12 >> 6;
        int v56 = v12[1] >> 6;
        v12 += 2;
        *uint64_t v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
        v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v56)) >> 32) << 6) + 4096;
        v16 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      int v57 = *v12 >> 6;
      int v58 = v12[1] >> 6;
      *uint64_t v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v58)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf44_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  unint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v22 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v23 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v25 = v8 & 1;
  if (v18 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v27)
    {
      int v33 = v13[1] >> 6;
      unint64_t v31 = v13 + 2;
      *unint64_t v17 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v13 >> 6))) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v33)) >> 32) << 6) + 4096;
      uint64_t v32 = v17 + 2;
    }
    else
    {
      unint64_t v31 = v13;
      uint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        int v36 = *v31 >> 6;
        int v37 = v31[1] >> 6;
        v31 += 2;
        _WORD *v32 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v36)) >> 32) << 6) + 4096;
        v32[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v37)) >> 32) << 6) + 4096;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      int v38 = *v31 >> 6;
      int v39 = v31[1] >> 6;
      _WORD *v32 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      v32[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    unint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v18 - v26;
    do
    {
      uint64_t v42 = v13;
      unint64_t v43 = v17;
      if (v27)
      {
        int v44 = v13[1] >> 6;
        uint64_t v42 = v13 + 2;
        *unint64_t v17 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v13 >> 6))) >> 32) << 6) + 4096;
        v17[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
        unint64_t v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          int v47 = *v42 >> 6;
          int v48 = v42[1] >> 6;
          v42 += 2;
          _WORD *v43 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v47)) >> 32) << 6) + 4096;
          v43[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        int v49 = *v42 >> 6;
        int v50 = v42[1] >> 6;
        _WORD *v43 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
        v43[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      unint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v25 < v18)
  {
    if (v27)
    {
      int v51 = *v13 >> 6;
      int v52 = v13[1] >> 6;
      v13 += 2;
      *unint64_t v17 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        int v54 = *v13 >> 6;
        int v55 = v13[1] >> 6;
        v13 += 2;
        *unint64_t v17 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
        v17[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      int v56 = *v13 >> 6;
      int v57 = v13[1] >> 6;
      *unint64_t v17 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v56)) >> 32) << 6) + 4096;
      v17[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v32 = v12 & 1;
  if (v9 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v36 = v14 + 4;
      int v38 = ((4198405 * (unint64_t)(896 * (v14[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32);
      *uint64_t v21 = (32
            * (((4198405 * (unint64_t)(896 * (v14[2] >> 6))) >> 32)
             + ((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32))
            + 4128) & 0xFFC0;
      v21[1] = (32 * v38 + 4128) & 0xFFC0;
      int v37 = v21 + 2;
    }
    else
    {
      int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        int v41 = ((4198405 * (unint64_t)(896 * (v36[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v36[1] >> 6))) >> 32);
        *unint64_t v40 = (32
              * (((4198405 * (unint64_t)(896 * (v36[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v36 >> 6))) >> 32))
              + 4128) & 0xFFC0;
        v40[1] = (32 * v41 + 4128) & 0xFFC0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v9 - v33;
    do
    {
      int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v44 = v14 + 4;
        int v46 = ((4198405 * (unint64_t)(896 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32);
        *uint64_t v21 = (32
              * (((4198405 * (unint64_t)(896 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32))
              + 4128) & 0xFFC0;
        v21[1] = (32 * v46 + 4128) & 0xFFC0;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          int v49 = ((4198405 * (unint64_t)(896 * (v44[3] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(896 * (v44[1] >> 6))) >> 32);
          *int v48 = (32
                * (((4198405 * (unint64_t)(896 * (v44[2] >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(896 * (*v44 >> 6))) >> 32))
                + 4128) & 0xFFC0;
          v48[1] = (32 * v49 + 4128) & 0xFFC0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v9)
  {
    if (v34)
    {
      int v50 = *v14 >> 6;
      int v51 = v14[1] >> 6;
      int v52 = v14[2] >> 6;
      int v53 = v14[3] >> 6;
      v14 += 4;
      *uint64_t v21 = (32
            * (((4198405 * (unint64_t)(896 * v52)) >> 32)
             + ((4198405 * (unint64_t)(896 * v50)) >> 32))
            + 4128) & 0xFFC0;
      v21[1] = (32
              * (((4198405 * (unint64_t)(896 * v53)) >> 32)
               + ((4198405 * (unint64_t)(896 * v51)) >> 32))
              + 4128) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        int v55 = &v21[v54];
        int v56 = ((4198405 * (unint64_t)(896 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32);
        *int v55 = (32
              * (((4198405 * (unint64_t)(896 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32))
              + 4128) & 0xFFC0;
        v55[1] = (32 * v56 + 4128) & 0xFFC0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      int v38 = v14[1] >> 6;
      int v36 = v14 + 4;
      *uint64_t v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      int v37 = v21 + 2;
    }
    else
    {
      int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unint64_t v41 = (4198405 * (unint64_t)(896 * (v36[1] >> 6))) >> 32;
        *unint64_t v40 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v36 >> 6))) >> 32) << 6) + 4096;
        v40[1] = ((_WORD)v41 << 6) + 4096;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      int v44 = v14;
      unint64_t v45 = v21;
      if (v34)
      {
        int v46 = v14[1] >> 6;
        int v44 = v14 + 4;
        *uint64_t v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v46)) >> 32) << 6) + 4096;
        unint64_t v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          unint64_t v49 = (4198405 * (unint64_t)(896 * (v44[1] >> 6))) >> 32;
          *int v48 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v44 >> 6))) >> 32) << 6) + 4096;
          v48[1] = ((_WORD)v49 << 6) + 4096;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      int v50 = *v14 >> 6;
      int v51 = v14[1] >> 6;
      v14 += 4;
      *uint64_t v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unint64_t v54 = (4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32;
        *int v53 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        v53[1] = ((_WORD)v54 << 6) + 4096;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      int v36 = ((4198405 * (unint64_t)(896 * (v14[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32);
      *uint64_t v21 = (32
            * (((4198405 * (unint64_t)(896 * (v14[2] >> 6))) >> 32)
             + ((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32))
            + 4128) & 0xFFC0;
      v21[1] = (32 * v36 + 4128) & 0xFFC0;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        int v39 = ((4198405 * (unint64_t)(896 * (v34[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v34[1] >> 6))) >> 32);
        _WORD *v38 = (32
              * (((4198405 * (unint64_t)(896 * (v34[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v34 >> 6))) >> 32))
              + 4128) & 0xFFC0;
        v38[1] = (32 * v39 + 4128) & 0xFFC0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        int v44 = ((4198405 * (unint64_t)(896 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32);
        *uint64_t v21 = (32
              * (((4198405 * (unint64_t)(896 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32))
              + 4128) & 0xFFC0;
        v21[1] = (32 * v44 + 4128) & 0xFFC0;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          int v47 = ((4198405 * (unint64_t)(896 * (v42[3] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(896 * (v42[1] >> 6))) >> 32);
          *int v46 = (32
                * (((4198405 * (unint64_t)(896 * (v42[2] >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(896 * (*v42 >> 6))) >> 32))
                + 4128) & 0xFFC0;
          v46[1] = (32 * v47 + 4128) & 0xFFC0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14 >> 6;
      int v49 = v14[1] >> 6;
      int v50 = v14[2] >> 6;
      int v51 = v14[3] >> 6;
      v14 += 4;
      *uint64_t v21 = (32
            * (((4198405 * (unint64_t)(896 * v50)) >> 32)
             + ((4198405 * (unint64_t)(896 * v48)) >> 32))
            + 4128) & 0xFFC0;
      v21[1] = (32
              * (((4198405 * (unint64_t)(896 * v51)) >> 32)
               + ((4198405 * (unint64_t)(896 * v49)) >> 32))
              + 4128) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        int v54 = ((4198405 * (unint64_t)(896 * (v14[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32);
        *int v53 = (32
              * (((4198405 * (unint64_t)(896 * (v14[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32))
              + 4128) & 0xFFC0;
        v53[1] = (32 * v54 + 4128) & 0xFFC0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1] >> 6;
      char v34 = v14 + 4;
      *uint64_t v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v36)) >> 32) << 6) + 4096;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (4198405 * (unint64_t)(896 * (v34[1] >> 6))) >> 32;
        _WORD *v38 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v34 >> 6))) >> 32) << 6) + 4096;
        v38[1] = ((_WORD)v39 << 6) + 4096;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        int v44 = v14[1] >> 6;
        unint64_t v42 = v14 + 4;
        *uint64_t v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          int v46 = &v43[v45];
          unint64_t v47 = (4198405 * (unint64_t)(896 * (v42[1] >> 6))) >> 32;
          *int v46 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v42 >> 6))) >> 32) << 6) + 4096;
          v46[1] = ((_WORD)v47 << 6) + 4096;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14 >> 6;
      int v49 = v14[1] >> 6;
      v14 += 4;
      *uint64_t v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        unint64_t v52 = (4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32;
        *int v51 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        v51[1] = ((_WORD)v52 << 6) + 4096;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = 2 * v14;
  uint64_t v17 = a8[1];
  uint64_t v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v19) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v21 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v21 = *(void *)(a2 + 24);
  }
  if (v21)
  {
    unint64_t v53 = v21;
    uint64_t v54 = a4[1];
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = (char *)(*a7 + *a8 * v15 + v16);
    uint64_t v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    unint64_t v21 = v53;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v54;
  }
  unint64_t v26 = v11 & 1;
  if (v21 >= v26) {
    uint64_t v27 = v11 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v8;
  if (v20 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v29 = v20 - v9;
  if (v11)
  {
    if (v28)
    {
      unint64_t v30 = v13 + 4;
      int v32 = (v13[3] >> 6) + (v13[1] >> 6);
      *uint64_t v18 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
      v18[1] = (32 * v32 + 32) & 0xFFC0;
      uint64_t v31 = v18 + 2;
    }
    else
    {
      unint64_t v30 = v13;
      uint64_t v31 = v18;
    }
    if (v20 != v9)
    {
      unint64_t v33 = 0;
      do
      {
        char v34 = &v31[v33];
        int v35 = ((unsigned __int16)v30[3] >> 6) + ((unsigned __int16)v30[1] >> 6);
        *char v34 = (32 * ((v30[2] >> 6) + (*v30 >> 6)) + 32) & 0xFFC0;
        v34[1] = (32 * v35 + 32) & 0xFFC0;
        v33 += 2;
        v30 += 4;
      }
      while (v33 < v29);
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    unint64_t v36 = 0;
  }
  else
  {
    uint64_t v37 = 0;
    unint64_t v36 = v21 - v27;
    do
    {
      int v38 = v13;
      unint64_t v39 = v18;
      if (v28)
      {
        int v38 = v13 + 4;
        int v40 = (v13[3] >> 6) + (v13[1] >> 6);
        *uint64_t v18 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
        v18[1] = (32 * v40 + 32) & 0xFFC0;
        unint64_t v39 = v18 + 2;
      }
      if (v20 != v9)
      {
        unint64_t v41 = 0;
        do
        {
          unint64_t v42 = &v39[v41];
          int v43 = ((unsigned __int16)v38[3] >> 6) + ((unsigned __int16)v38[1] >> 6);
          *unint64_t v42 = (32 * ((v38[2] >> 6) + (*v38 >> 6)) + 32) & 0xFFC0;
          v42[1] = (32 * v43 + 32) & 0xFFC0;
          v41 += 2;
          v38 += 4;
        }
        while (v41 < v29);
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v18 = (_WORD *)((char *)v18 + v17);
      ++v37;
    }
    while (v37 != v36);
  }
  if (v36 + v26 < v21)
  {
    if (v28)
    {
      unsigned int v44 = *v13;
      unsigned int v45 = v13[1];
      int v46 = v13[2] >> 6;
      int v47 = v13[3] >> 6;
      v13 += 4;
      *uint64_t v18 = (32 * (v46 + (v44 >> 6)) + 32) & 0xFFC0;
      v18[1] = (32 * (v47 + (v45 >> 6)) + 32) & 0xFFC0;
      v18 += 2;
    }
    if (v20 != v9)
    {
      unint64_t v48 = 0;
      do
      {
        int v49 = &v18[v48];
        int v50 = (v13[3] >> 6) + (v13[1] >> 6);
        *int v49 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
        v49[1] = (32 * v50 + 32) & 0xFFC0;
        v48 += 2;
        v13 += 4;
      }
      while (v48 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (_WORD *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = 2 * v14;
  uint64_t v17 = a8[1];
  uint64_t v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v19) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v21 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v21 = *(void *)(a2 + 24);
  }
  if (v21)
  {
    unint64_t v51 = v21;
    uint64_t v52 = a4[1];
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = (char *)(*a7 + *a8 * v15 + v16);
    uint64_t v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    unint64_t v21 = v51;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v52;
  }
  unint64_t v26 = v11 & 1;
  if (v21 >= v26) {
    uint64_t v27 = v11 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v8;
  if (v20 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v29 = v20 - v9;
  if (v11)
  {
    if (v28)
    {
      __int16 v32 = v13[1] & 0xFFC0;
      unint64_t v30 = v13 + 4;
      *uint64_t v18 = *v13 & 0xFFC0;
      v18[1] = v32;
      uint64_t v31 = v18 + 2;
    }
    else
    {
      unint64_t v30 = v13;
      uint64_t v31 = v18;
    }
    if (v20 != v9)
    {
      unint64_t v33 = 0;
      do
      {
        char v34 = &v31[v33];
        __int16 v35 = v30[1] & 0xFFC0;
        *char v34 = *v30 & 0xFFC0;
        v34[1] = v35;
        v33 += 2;
        v30 += 4;
      }
      while (v33 < v29);
    }
    uint64_t v13 = (_WORD *)((char *)v13 + v12);
    uint64_t v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    unint64_t v36 = 0;
  }
  else
  {
    uint64_t v37 = 0;
    unint64_t v36 = v21 - v27;
    do
    {
      int v38 = v13;
      unint64_t v39 = v18;
      if (v28)
      {
        __int16 v40 = v13[1] & 0xFFC0;
        int v38 = v13 + 4;
        *uint64_t v18 = *v13 & 0xFFC0;
        v18[1] = v40;
        unint64_t v39 = v18 + 2;
      }
      if (v20 != v9)
      {
        unint64_t v41 = 0;
        do
        {
          unint64_t v42 = &v39[v41];
          __int16 v43 = v38[1] & 0xFFC0;
          *unint64_t v42 = *v38 & 0xFFC0;
          v42[1] = v43;
          v41 += 2;
          v38 += 4;
        }
        while (v41 < v29);
      }
      uint64_t v13 = (_WORD *)((char *)v13 + v12);
      uint64_t v18 = (_WORD *)((char *)v18 + v17);
      ++v37;
    }
    while (v37 != v36);
  }
  if (v36 + v26 < v21)
  {
    if (v28)
    {
      __int16 v44 = *v13 & 0xFFC0;
      __int16 v45 = v13[1] & 0xFFC0;
      v13 += 4;
      *uint64_t v18 = v44;
      v18[1] = v45;
      v18 += 2;
    }
    if (v20 != v9)
    {
      unint64_t v46 = 0;
      do
      {
        int v47 = &v18[v46];
        __int16 v48 = v13[1] & 0xFFC0;
        *int v47 = *v13 & 0xFFC0;
        v47[1] = v48;
        v46 += 2;
        v13 += 4;
      }
      while (v46 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      unint64_t v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v40 = *v39 >> 6;
      int v41 = v39[1] >> 6;
      uint64_t v37 = v15 + 4;
      int v42 = ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(896 * (v15[1] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(896 * (v15[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(896 * v41)) >> 32);
      *uint64_t v22 = (16
            * (((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
             + ((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32)
             + ((4198405 * (unint64_t)(896 * (v15[2] >> 6))) >> 32)
             + ((4198405 * (unint64_t)(896 * v40)) >> 32))
            + 4128) & 0xFFC0;
      v22[1] = (16 * v42 + 4128) & 0xFFC0;
      int v38 = v22 + 2;
    }
    else
    {
      uint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v43 = 0;
      __int16 v44 = v37 + 2;
      do
      {
        int v45 = ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v44 + v14 - 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (*(v44 - 1) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v44[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v44 + v14 + 2) >> 6))) >> 32);
        unint64_t v46 = &v38[v43];
        *unint64_t v46 = (16
              * (((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v44 + v14 - 4) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*(v44 - 2) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v44 >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v44 + v14) >> 6))) >> 32))
              + 4128) & 0xFFC0;
        v46[1] = (16 * v45 + 4128) & 0xFFC0;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    uint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      int v49 = v15;
      int v50 = v22;
      if (v9)
      {
        unint64_t v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v52 = *v51 >> 6;
        int v53 = v51[1] >> 6;
        int v49 = v15 + 4;
        int v54 = ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v15[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v15[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * v53)) >> 32);
        *uint64_t v22 = (16
              * (((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (v15[2] >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * v52)) >> 32))
              + 4128) & 0xFFC0;
        v22[1] = (16 * v54 + 4128) & 0xFFC0;
        int v50 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v55 = 0;
        int v56 = v49 + 2;
        do
        {
          int v57 = ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v56 + v14 - 2) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(896 * (*(v56 - 1) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(896 * (v56[1] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v56 + v14 + 2) >> 6))) >> 32);
          int v58 = &v50[v55];
          *int v58 = (16
                * (((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v56 + v14 - 4) >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(896 * (*(v56 - 2) >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(896 * (*v56 >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v56 + v14) >> 6))) >> 32))
                + 4128) & 0xFFC0;
          v58[1] = (16 * v57 + 4128) & 0xFFC0;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      uint64_t v22 = (_WORD *)((char *)v22 + v21);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    uint64_t v33 = *a7 + v29 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      int v39 = v15[1] >> 6;
      uint64_t v37 = v15 + 4;
      *uint64_t v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
      int v38 = v22 + 2;
    }
    else
    {
      uint64_t v37 = v15;
      int v38 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (4198405 * (unint64_t)(896 * (v37[1] >> 6))) >> 32;
        *int v41 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v37 >> 6))) >> 32) << 6) + 4096;
        v41[1] = ((_WORD)v42 << 6) + 4096;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    uint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unint64_t v46 = v15;
      unint64_t v47 = v22;
      if (v9)
      {
        int v48 = v15[1] >> 6;
        unint64_t v46 = v15 + 4;
        *uint64_t v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
        unint64_t v47 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          int v50 = &v47[v49];
          unint64_t v51 = (4198405 * (unint64_t)(896 * (v46[1] >> 6))) >> 32;
          *int v50 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v46 >> 6))) >> 32) << 6) + 4096;
          v50[1] = ((_WORD)v51 << 6) + 4096;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      uint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  else {
    unint64_t v25 = v14 - v13;
  }
  if (v25)
  {
    unint64_t v59 = v25;
    uint64_t v60 = a8[1];
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v28);
    uint64_t v30 = (char *)(*a7 + v27 * v18 + v20);
    uint64_t v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, 2 * v24);
      v29 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v31++, 1));
    unint64_t v25 = v59;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
    uint64_t v21 = v60;
  }
  if (v25 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      uint64_t v37 = (_WORD *)((char *)v16 + v15 + 4);
      unsigned int v38 = *v37;
      unsigned int v39 = v37[1];
      uint64_t v35 = v16 + 4;
      int v40 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6)
          + ((unsigned __int16)v16[1] >> 6)
          + ((unsigned __int16)v16[3] >> 6)
          + (v39 >> 6);
      *uint64_t v22 = (16 * ((*(_WORD *)((char *)v16 + v15) >> 6) + (*v16 >> 6) + (v16[2] >> 6) + (v38 >> 6)) + 32) & 0xFFC0;
      v22[1] = (16 * v40 + 32) & 0xFFC0;
      unint64_t v36 = v22 + 2;
    }
    else
    {
      uint64_t v35 = v16;
      unint64_t v36 = v22;
    }
    if (v24 != v10)
    {
      unint64_t v41 = 0;
      unint64_t v42 = v35 + 2;
      do
      {
        unint64_t v43 = &v36[v41];
        int v44 = (*(unsigned __int16 *)((char *)v42 + v15 - 2) >> 6)
            + ((unsigned __int16)*(v42 - 1) >> 6)
            + ((unsigned __int16)v42[1] >> 6)
            + (*(unsigned __int16 *)((char *)v42 + v15 + 2) >> 6);
        _WORD *v43 = (16
              * ((*(_WORD *)((char *)v42 + v15 - 4) >> 6)
               + (*(v42 - 2) >> 6)
               + (*v42 >> 6)
               + (*(_WORD *)((char *)v42 + v15) >> 6))
              + 32) & 0xFFC0;
        v43[1] = (16 * v44 + 32) & 0xFFC0;
        v41 += 2;
        v42 += 4;
      }
      while (v41 < v34);
    }
    v16 += v15;
    uint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v25 != v33)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v25 - v33;
    do
    {
      unint64_t v47 = v16;
      int v48 = v22;
      if (v8)
      {
        unint64_t v49 = (_WORD *)((char *)v16 + v15 + 4);
        unsigned int v50 = *v49;
        unsigned int v51 = v49[1];
        unint64_t v47 = v16 + 4;
        int v52 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6)
            + ((unsigned __int16)v16[1] >> 6)
            + ((unsigned __int16)v16[3] >> 6)
            + (v51 >> 6);
        *uint64_t v22 = (16 * ((*(_WORD *)((char *)v16 + v15) >> 6) + (*v16 >> 6) + (v16[2] >> 6) + (v50 >> 6)) + 32) & 0xFFC0;
        v22[1] = (16 * v52 + 32) & 0xFFC0;
        int v48 = v22 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v53 = 0;
        int v54 = v47 + 2;
        do
        {
          unint64_t v55 = &v48[v53];
          int v56 = (*(unsigned __int16 *)((char *)v54 + v15 - 2) >> 6)
              + ((unsigned __int16)*(v54 - 1) >> 6)
              + ((unsigned __int16)v54[1] >> 6)
              + (*(unsigned __int16 *)((char *)v54 + v15 + 2) >> 6);
          *unint64_t v55 = (16
                * ((*(_WORD *)((char *)v54 + v15 - 4) >> 6)
                 + (*(v54 - 2) >> 6)
                 + (*v54 >> 6)
                 + (*(_WORD *)((char *)v54 + v15) >> 6))
                + 32) & 0xFFC0;
          v55[1] = (16 * v56 + 32) & 0xFFC0;
          v53 += 2;
          v54 += 4;
        }
        while (v53 < v34);
      }
      v16 += v15;
      uint64_t v22 = (_WORD *)((char *)v22 + v21);
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  else {
    unint64_t v25 = v14 - v13;
  }
  if (v25)
  {
    unint64_t v51 = v25;
    uint64_t v52 = a4[1];
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v28);
    uint64_t v30 = (char *)(*a7 + v27 * v18 + v20);
    uint64_t v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, 2 * v24);
      v29 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v31++, 1));
    unint64_t v25 = v51;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
    uint64_t v15 = v52;
  }
  if (v25 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      __int16 v37 = v16[1] & 0xFFC0;
      uint64_t v35 = v16 + 4;
      *uint64_t v22 = *v16 & 0xFFC0;
      v22[1] = v37;
      unint64_t v36 = v22 + 2;
    }
    else
    {
      uint64_t v35 = v16;
      unint64_t v36 = v22;
    }
    if (v24 != v10)
    {
      unint64_t v38 = 0;
      do
      {
        unsigned int v39 = &v36[v38];
        __int16 v40 = v35[1] & 0xFFC0;
        *unsigned int v39 = *v35 & 0xFFC0;
        v39[1] = v40;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    v16 += v15;
    uint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v25 != v33)
  {
    unint64_t v41 = 0;
    unint64_t v42 = v25 - v33;
    do
    {
      unint64_t v43 = v16;
      int v44 = v22;
      if (v8)
      {
        __int16 v45 = v16[1] & 0xFFC0;
        unint64_t v43 = v16 + 4;
        *uint64_t v22 = *v16 & 0xFFC0;
        v22[1] = v45;
        int v44 = v22 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          unint64_t v47 = &v44[v46];
          __int16 v48 = v43[1] & 0xFFC0;
          *unint64_t v47 = *v43 & 0xFFC0;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      v16 += v15;
      uint64_t v22 = (_WORD *)((char *)v22 + v21);
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_Copy_xf44_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v15 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v14 + 2 * v15);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v14;
    uint64_t v22 = *a7 + *a8 * v14;
    uint64_t v23 = *a4;
    uint64_t v24 = v21 + v15;
    uint64_t v25 = v22 + v15;
    uint64_t v26 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(unsigned char *)(v24 + i) = -1;
          *(unsigned char *)(v25 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v26 += v23;
      v25 += v19;
      v24 += v20;
      ++v18;
    }
    while (v18 != v11);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v28 = v8 & 1;
  if (v11 >= v28) {
    uint64_t v29 = v8 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  char v30 = v9;
  unint64_t v31 = v9 & 1;
  if (v10 >= v31) {
    uint64_t v32 = v9 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  unint64_t v33 = v10 - v32;
  if (v8)
  {
    if (v9)
    {
      int v36 = v13[1] >> 6;
      unint64_t v34 = v13 + 2;
      *uint64_t v17 = ((4198405 * (unint64_t)(224 * (*v13 >> 6))) >> 32) + 16;
      v17[1] = ((4198405 * (unint64_t)(224 * v36)) >> 32) + 16;
      uint64_t v35 = v17 + 2;
    }
    else
    {
      unint64_t v34 = v13;
      uint64_t v35 = v17;
    }
    if (v10 == v32)
    {
      unint64_t v37 = 0;
    }
    else
    {
      unint64_t v38 = v10 - v32;
      do
      {
        int v39 = *v34 >> 6;
        int v40 = v34[1] >> 6;
        v34 += 2;
        *uint64_t v35 = ((4198405 * (unint64_t)(224 * v39)) >> 32) + 16;
        v35[1] = ((4198405 * (unint64_t)(224 * v40)) >> 32) + 16;
        v35 += 2;
        --v38;
      }
      while (v38);
      unint64_t v37 = v10 - v32;
    }
    if (v37 + v31 < v10)
    {
      int v41 = *v34 >> 6;
      int v42 = v34[1] >> 6;
      *uint64_t v35 = ((4198405 * (unint64_t)(224 * v41)) >> 32) + 16;
      v35[1] = ((4198405 * (unint64_t)(224 * v42)) >> 32) + 16;
    }
    unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    v17 += v16;
  }
  if (v11 == v29)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v11 - v29;
    do
    {
      __int16 v45 = v13;
      unint64_t v46 = v17;
      if (v30)
      {
        int v47 = v13[1] >> 6;
        __int16 v45 = v13 + 2;
        *uint64_t v17 = ((4198405 * (unint64_t)(224 * (*v13 >> 6))) >> 32) + 16;
        v17[1] = ((4198405 * (unint64_t)(224 * v47)) >> 32) + 16;
        unint64_t v46 = v17 + 2;
      }
      if (v10 == v32)
      {
        unint64_t v48 = 0;
      }
      else
      {
        unint64_t v49 = v10 - v32;
        do
        {
          int v50 = *v45 >> 6;
          int v51 = v45[1] >> 6;
          v45 += 2;
          *unint64_t v46 = ((4198405 * (unint64_t)(224 * v50)) >> 32) + 16;
          v46[1] = ((4198405 * (unint64_t)(224 * v51)) >> 32) + 16;
          v46 += 2;
          --v49;
        }
        while (v49);
        unint64_t v48 = v10 - v32;
      }
      if (v48 + v31 < v10)
      {
        int v52 = *v45 >> 6;
        int v53 = v45[1] >> 6;
        *unint64_t v46 = ((4198405 * (unint64_t)(224 * v52)) >> 32) + 16;
        v46[1] = ((4198405 * (unint64_t)(224 * v53)) >> 32) + 16;
      }
      unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      v17 += v16;
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v11)
  {
    if (v30)
    {
      int v54 = *v13 >> 6;
      int v55 = v13[1] >> 6;
      v13 += 2;
      *uint64_t v17 = ((4198405 * (unint64_t)(224 * v54)) >> 32) + 16;
      v17[1] = ((4198405 * (unint64_t)(224 * v55)) >> 32) + 16;
      v17 += 2;
    }
    if (v10 == v32)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v56 = v10 - v32;
      do
      {
        int v57 = *v13 >> 6;
        int v58 = v13[1] >> 6;
        v13 += 2;
        *uint64_t v17 = ((4198405 * (unint64_t)(224 * v57)) >> 32) + 16;
        v17[1] = ((4198405 * (unint64_t)(224 * v58)) >> 32) + 16;
        v17 += 2;
        --v56;
      }
      while (v56);
    }
    if (v33 + v31 < v10)
    {
      int v59 = *v13 >> 6;
      int v60 = v13[1] >> 6;
      *uint64_t v17 = ((4198405 * (unint64_t)(224 * v59)) >> 32) + 16;
      v17[1] = ((4198405 * (unint64_t)(224 * v60)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf44_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (unsigned char *)(a7[1] + v15 * v13 + 2 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v13 + v14;
    uint64_t v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(unsigned char *)(v21 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v22 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v17);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v24 = v8 & 1;
  if (v17 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    uint64_t v28 = v9 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v9)
    {
      int v32 = v12[1] >> 6;
      char v30 = v12 + 2;
      *uint64_t v16 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
      v16[1] = ((4198405 * (unint64_t)(224 * v32)) >> 32) + 16;
      unint64_t v31 = v16 + 2;
    }
    else
    {
      char v30 = v12;
      unint64_t v31 = v16;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        int v35 = *v30 >> 6;
        int v36 = v30[1] >> 6;
        v30 += 2;
        unsigned char *v31 = ((4198405 * (unint64_t)(224 * v35)) >> 32) + 16;
        v31[1] = ((4198405 * (unint64_t)(224 * v36)) >> 32) + 16;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      int v37 = *v30 >> 6;
      int v38 = v30[1] >> 6;
      unsigned char *v31 = ((4198405 * (unint64_t)(224 * v37)) >> 32) + 16;
      v31[1] = ((4198405 * (unint64_t)(224 * v38)) >> 32) + 16;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v16 += v15;
  }
  if (v17 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v17 - v25;
    do
    {
      int v41 = v12;
      int v42 = v16;
      if (v26)
      {
        int v43 = v12[1] >> 6;
        int v41 = v12 + 2;
        *uint64_t v16 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
        v16[1] = ((4198405 * (unint64_t)(224 * v43)) >> 32) + 16;
        int v42 = v16 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          int v46 = *v41 >> 6;
          int v47 = v41[1] >> 6;
          v41 += 2;
          *int v42 = ((4198405 * (unint64_t)(224 * v46)) >> 32) + 16;
          v42[1] = ((4198405 * (unint64_t)(224 * v47)) >> 32) + 16;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        int v48 = *v41 >> 6;
        int v49 = v41[1] >> 6;
        *int v42 = ((4198405 * (unint64_t)(224 * v48)) >> 32) + 16;
        v42[1] = ((4198405 * (unint64_t)(224 * v49)) >> 32) + 16;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v16 += v15;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v17)
  {
    if (v26)
    {
      int v50 = *v12 >> 6;
      int v51 = v12[1] >> 6;
      v12 += 2;
      *uint64_t v16 = ((4198405 * (unint64_t)(224 * v50)) >> 32) + 16;
      v16[1] = ((4198405 * (unint64_t)(224 * v51)) >> 32) + 16;
      v16 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        int v53 = *v12 >> 6;
        int v54 = v12[1] >> 6;
        v12 += 2;
        *uint64_t v16 = ((4198405 * (unint64_t)(224 * v53)) >> 32) + 16;
        v16[1] = ((4198405 * (unint64_t)(224 * v54)) >> 32) + 16;
        v16 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      int v55 = *v12 >> 6;
      int v56 = v12[1] >> 6;
      *uint64_t v16 = ((4198405 * (unint64_t)(224 * v55)) >> 32) + 16;
      v16[1] = ((4198405 * (unint64_t)(224 * v56)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf44_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (unsigned char *)(a7[1] + v15 * v13 + 2 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v13 + v14;
    uint64_t v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(unsigned char *)(v21 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v22 + 2 * i) >> 6))) >> 32;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v17);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v24 = v8 & 1;
  if (v17 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    uint64_t v28 = v9 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v9)
    {
      unsigned int v32 = v12[1];
      char v30 = v12 + 2;
      *uint64_t v16 = (4198405 * (unint64_t)(255 * (*v12 >> 6))) >> 32;
      v16[1] = (4198405 * (unint64_t)(255 * (v32 >> 6))) >> 32;
      unint64_t v31 = v16 + 2;
    }
    else
    {
      char v30 = v12;
      unint64_t v31 = v16;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        unsigned int v35 = *v30;
        unsigned int v36 = v30[1];
        v30 += 2;
        unsigned char *v31 = (4198405 * (unint64_t)(255 * (v35 >> 6))) >> 32;
        v31[1] = (4198405 * (unint64_t)(255 * (v36 >> 6))) >> 32;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      unsigned int v37 = *v30;
      unsigned int v38 = v30[1];
      unsigned char *v31 = (4198405 * (unint64_t)(255 * (v37 >> 6))) >> 32;
      v31[1] = (4198405 * (unint64_t)(255 * (v38 >> 6))) >> 32;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v16 += v15;
  }
  if (v17 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v17 - v25;
    do
    {
      int v41 = v12;
      int v42 = v16;
      if (v26)
      {
        unsigned int v43 = v12[1];
        int v41 = v12 + 2;
        *uint64_t v16 = (4198405 * (unint64_t)(255 * (*v12 >> 6))) >> 32;
        v16[1] = (4198405 * (unint64_t)(255 * (v43 >> 6))) >> 32;
        int v42 = v16 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          unsigned int v46 = *v41;
          unsigned int v47 = v41[1];
          v41 += 2;
          *int v42 = (4198405 * (unint64_t)(255 * (v46 >> 6))) >> 32;
          v42[1] = (4198405 * (unint64_t)(255 * (v47 >> 6))) >> 32;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        unsigned int v48 = *v41;
        unint64_t v49 = (4198405 * (unint64_t)(255 * (v41[1] >> 6))) >> 32;
        *int v42 = (4198405 * (unint64_t)(255 * (v48 >> 6))) >> 32;
        v42[1] = v49;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v16 += v15;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v17)
  {
    if (v26)
    {
      unsigned int v50 = *v12;
      unsigned int v51 = v12[1];
      v12 += 2;
      *uint64_t v16 = (4198405 * (unint64_t)(255 * (v50 >> 6))) >> 32;
      v16[1] = (4198405 * (unint64_t)(255 * (v51 >> 6))) >> 32;
      v16 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        unsigned int v53 = *v12;
        unsigned int v54 = v12[1];
        v12 += 2;
        *uint64_t v16 = (4198405 * (unint64_t)(255 * (v53 >> 6))) >> 32;
        v16[1] = (4198405 * (unint64_t)(255 * (v54 >> 6))) >> 32;
        v16 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      unsigned int v55 = *v12;
      unsigned int v56 = v12[1];
      *uint64_t v16 = (4198405 * (unint64_t)(255 * (v55 >> 6))) >> 32;
      v16[1] = (4198405 * (unint64_t)(255 * (v56 >> 6))) >> 32;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v19 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v9 >= *(void *)(a6 + 24)) {
    unint64_t v9 = *(void *)(a6 + 24);
  }
  if (v9)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = a7[2] + v22 * v16;
    uint64_t v24 = *a7 + *a8 * v16;
    uint64_t v25 = *a4;
    uint64_t v26 = v23 + v15;
    uint64_t v27 = v24 + v15;
    uint64_t v28 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v26 + i) = -1;
          *(unsigned char *)(v27 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v9);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v8 & 1;
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v19 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v19 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      unsigned int v36 = (((4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32)
                         + ((4198405 * (unint64_t)(224 * (v14[3] >> 6))) >> 32)
                         + 33) >> 1;
      *uint64_t v18 = (((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (v14[2] >> 6))) >> 32)
                          + 33) >> 1;
      v18[1] = v36;
      unsigned int v35 = v18 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      unsigned int v35 = v18;
    }
    if (v19 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unsigned int v38 = &v35[v37];
        unsigned int v39 = (((4198405 * (unint64_t)(224 * (v34[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (v34[3] >> 6))) >> 32)
                           + 33) >> 1;
        unsigned char *v38 = (((4198405 * (unint64_t)(224 * (*v34 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v34[2] >> 6))) >> 32)
                            + 33) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v18 += v17;
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      int v42 = v14;
      unsigned int v43 = v18;
      if (v32)
      {
        int v42 = v14 + 4;
        unsigned int v44 = (((4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (v14[3] >> 6))) >> 32)
                           + 33) >> 1;
        *uint64_t v18 = (((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v14[2] >> 6))) >> 32)
                            + 33) >> 1;
        v18[1] = v44;
        unsigned int v43 = v18 + 2;
      }
      if (v19 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          unsigned int v46 = &v43[v45];
          unsigned int v47 = (((4198405 * (unint64_t)(224 * (v42[1] >> 6))) >> 32)
                             + ((4198405 * (unint64_t)(224 * (v42[3] >> 6))) >> 32)
                             + 33) >> 1;
          *unsigned int v46 = (((4198405 * (unint64_t)(224 * (*v42 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (v42[2] >> 6))) >> 32)
                              + 33) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14 >> 6;
      int v49 = v14[1] >> 6;
      int v50 = v14[2] >> 6;
      int v51 = v14[3] >> 6;
      v14 += 4;
      *uint64_t v18 = (((4198405 * (unint64_t)(224 * v48)) >> 32)
                          + ((4198405 * (unint64_t)(224 * v50)) >> 32)
                          + 33) >> 1;
      v18[1] = (((4198405 * (unint64_t)(224 * v49)) >> 32)
                            + ((4198405 * (unint64_t)(224 * v51)) >> 32)
                            + 33) >> 1;
      v18 += 2;
    }
    if (v19 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        unsigned int v53 = &v18[v52];
        unsigned int v54 = (((4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (v14[3] >> 6))) >> 32)
                           + 33) >> 1;
        *unsigned int v53 = (((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v14[2] >> 6))) >> 32)
                            + 33) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v19 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = a7[2] + v22 * v16;
    uint64_t v24 = *a7 + *a8 * v16;
    uint64_t v25 = *a4;
    uint64_t v26 = v23 + v15;
    uint64_t v27 = v24 + v15;
    uint64_t v28 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v26 + i) = -1;
          *(unsigned char *)(v27 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v19 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v19 - v10;
  if (v12)
  {
    if (v32)
    {
      int v36 = v14[1] >> 6;
      unint64_t v34 = v14 + 4;
      *uint64_t v18 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v36)) >> 32) + 16;
      unsigned int v35 = v18 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      unsigned int v35 = v18;
    }
    if (v19 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unsigned int v38 = &v35[v37];
        unint64_t v39 = (4198405 * (unint64_t)(224 * (v34[1] >> 6))) >> 32;
        unsigned char *v38 = ((4198405 * (unint64_t)(224 * (*v34 >> 6))) >> 32) + 16;
        v38[1] = v39 + 16;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v18 += v17;
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      int v42 = v14;
      unsigned int v43 = v18;
      if (v32)
      {
        int v44 = v14[1] >> 6;
        int v42 = v14 + 4;
        *uint64_t v18 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v18[1] = ((4198405 * (unint64_t)(224 * v44)) >> 32) + 16;
        unsigned int v43 = v18 + 2;
      }
      if (v19 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          unsigned int v46 = &v43[v45];
          unint64_t v47 = (4198405 * (unint64_t)(224 * (v42[1] >> 6))) >> 32;
          *unsigned int v46 = ((4198405 * (unint64_t)(224 * (*v42 >> 6))) >> 32) + 16;
          v46[1] = v47 + 16;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      int v48 = *v14 >> 6;
      int v49 = v14[1] >> 6;
      v14 += 4;
      *uint64_t v18 = ((4198405 * (unint64_t)(224 * v48)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v49)) >> 32) + 16;
      v18 += 2;
    }
    if (v19 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v18[v50];
        unint64_t v52 = (4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32;
        *int v51 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v51[1] = v52 + 16;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v9);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v8 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v9 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v8;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      unint64_t v33 = v14 + 4;
      unsigned int v35 = (((4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32)
                         + ((4198405 * (unint64_t)(224 * (v14[3] >> 6))) >> 32)
                         + 33) >> 1;
      *uint64_t v20 = (((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (v14[2] >> 6))) >> 32)
                          + 33) >> 1;
      v20[1] = v35;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        unsigned int v38 = (((4198405 * (unint64_t)(224 * (v33[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (v33[3] >> 6))) >> 32)
                           + 33) >> 1;
        *unint64_t v37 = (((4198405 * (unint64_t)(224 * (*v33 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v33[2] >> 6))) >> 32)
                            + 33) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v9 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v9 - v30;
    do
    {
      uint64_t v41 = v14;
      int v42 = v20;
      if (v31)
      {
        uint64_t v41 = v14 + 4;
        unsigned int v43 = (((4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (v14[3] >> 6))) >> 32)
                           + 33) >> 1;
        *uint64_t v20 = (((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v14[2] >> 6))) >> 32)
                            + 33) >> 1;
        v20[1] = v43;
        int v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          unint64_t v45 = &v42[v44];
          unsigned int v46 = (((4198405 * (unint64_t)(224 * (v41[1] >> 6))) >> 32)
                             + ((4198405 * (unint64_t)(224 * (v41[3] >> 6))) >> 32)
                             + 33) >> 1;
          *unint64_t v45 = (((4198405 * (unint64_t)(224 * (*v41 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (v41[2] >> 6))) >> 32)
                              + 33) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v9)
  {
    if (v31)
    {
      int v47 = *v14 >> 6;
      int v48 = v14[1] >> 6;
      int v49 = v14[2] >> 6;
      int v50 = v14[3] >> 6;
      v14 += 4;
      *uint64_t v20 = (((4198405 * (unint64_t)(224 * v47)) >> 32)
                          + ((4198405 * (unint64_t)(224 * v49)) >> 32)
                          + 33) >> 1;
      v20[1] = (((4198405 * (unint64_t)(224 * v48)) >> 32)
                            + ((4198405 * (unint64_t)(224 * v50)) >> 32)
                            + 33) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v51 = 0;
      do
      {
        unint64_t v52 = &v20[v51];
        unsigned int v53 = (((4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (v14[3] >> 6))) >> 32)
                           + 33) >> 1;
        *unint64_t v52 = (((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v14[2] >> 6))) >> 32)
                            + 33) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 4;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      int v35 = v14[1] >> 6;
      unint64_t v33 = v14 + 4;
      *uint64_t v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v35)) >> 32) + 16;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        unint64_t v38 = (4198405 * (unint64_t)(224 * (v33[1] >> 6))) >> 32;
        *unint64_t v37 = ((4198405 * (unint64_t)(224 * (*v33 >> 6))) >> 32) + 16;
        v37[1] = v38 + 16;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v8 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v30;
    do
    {
      uint64_t v41 = v14;
      int v42 = v20;
      if (v31)
      {
        int v43 = v14[1] >> 6;
        uint64_t v41 = v14 + 4;
        *uint64_t v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = ((4198405 * (unint64_t)(224 * v43)) >> 32) + 16;
        int v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          unint64_t v45 = &v42[v44];
          unint64_t v46 = (4198405 * (unint64_t)(224 * (v41[1] >> 6))) >> 32;
          *unint64_t v45 = ((4198405 * (unint64_t)(224 * (*v41 >> 6))) >> 32) + 16;
          v45[1] = v46 + 16;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if (v31)
    {
      int v47 = *v14 >> 6;
      int v48 = v14[1] >> 6;
      v14 += 4;
      *uint64_t v20 = ((4198405 * (unint64_t)(224 * v47)) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v48)) >> 32) + 16;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v49 = 0;
      do
      {
        int v50 = &v20[v49];
        unint64_t v51 = (4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32;
        *int v50 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v50[1] = v51 + 16;
        v49 += 2;
        v14 += 4;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v9);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v8 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v9 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v8;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      unint64_t v33 = v14 + 4;
      unsigned int v35 = (((4198405 * (unint64_t)(255 * (v14[1] >> 6))) >> 32)
                         + ((4198405 * (unint64_t)(255 * (v14[3] >> 6))) >> 32)
                         + 1) >> 1;
      *uint64_t v20 = (((4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (v14[2] >> 6))) >> 32)
                          + 1) >> 1;
      v20[1] = v35;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        unsigned int v38 = (((4198405 * (unint64_t)(255 * (v33[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(255 * (v33[3] >> 6))) >> 32)
                           + 1) >> 1;
        *unint64_t v37 = (((4198405 * (unint64_t)(255 * (*v33 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v33[2] >> 6))) >> 32)
                            + 1) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v9 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v9 - v30;
    do
    {
      uint64_t v41 = v14;
      int v42 = v20;
      if (v31)
      {
        uint64_t v41 = v14 + 4;
        unsigned int v43 = (((4198405 * (unint64_t)(255 * (v14[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(255 * (v14[3] >> 6))) >> 32)
                           + 1) >> 1;
        *uint64_t v20 = (((4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v14[2] >> 6))) >> 32)
                            + 1) >> 1;
        v20[1] = v43;
        int v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          unint64_t v45 = &v42[v44];
          unsigned int v46 = (((4198405 * (unint64_t)(255 * (v41[1] >> 6))) >> 32)
                             + ((4198405 * (unint64_t)(255 * (v41[3] >> 6))) >> 32)
                             + 1) >> 1;
          *unint64_t v45 = (((4198405 * (unint64_t)(255 * (*v41 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(255 * (v41[2] >> 6))) >> 32)
                              + 1) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v9)
  {
    if (v31)
    {
      unsigned int v47 = *v14;
      unsigned int v48 = v14[1];
      unsigned int v49 = v14[2];
      unsigned int v50 = v14[3];
      v14 += 4;
      *uint64_t v20 = (((4198405 * (unint64_t)(255 * (v47 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (v49 >> 6))) >> 32)
                          + 1) >> 1;
      v20[1] = (((4198405 * (unint64_t)(255 * (v48 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v50 >> 6))) >> 32)
                            + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v51 = 0;
      do
      {
        unint64_t v52 = &v20[v51];
        unsigned int v53 = (((4198405 * (unint64_t)(255 * (v14[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(255 * (v14[3] >> 6))) >> 32)
                           + 1) >> 1;
        *unint64_t v52 = (((4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v14[2] >> 6))) >> 32)
                            + 1) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 4;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      unsigned int v35 = v14[1];
      unint64_t v33 = v14 + 4;
      *uint64_t v20 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
      v20[1] = (4198405 * (unint64_t)(255 * (v35 >> 6))) >> 32;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        unsigned int v38 = v33[1];
        *unint64_t v37 = (4198405 * (unint64_t)(255 * (*v33 >> 6))) >> 32;
        v37[1] = (4198405 * (unint64_t)(255 * (v38 >> 6))) >> 32;
        v36 += 2;
        v33 += 4;
      }
      while (v36 < v32);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v8 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v30;
    do
    {
      uint64_t v41 = v14;
      int v42 = v20;
      if (v31)
      {
        unsigned int v43 = v14[1];
        uint64_t v41 = v14 + 4;
        *uint64_t v20 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
        v20[1] = (4198405 * (unint64_t)(255 * (v43 >> 6))) >> 32;
        int v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          unint64_t v45 = &v42[v44];
          unsigned int v46 = v41[1];
          *unint64_t v45 = (4198405 * (unint64_t)(255 * (*v41 >> 6))) >> 32;
          v45[1] = (4198405 * (unint64_t)(255 * (v46 >> 6))) >> 32;
          v44 += 2;
          v41 += 4;
        }
        while (v44 < v32);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if (v31)
    {
      unsigned int v47 = *v14;
      unsigned int v48 = v14[1];
      v14 += 4;
      *uint64_t v20 = (4198405 * (unint64_t)(255 * (v47 >> 6))) >> 32;
      v20[1] = (4198405 * (unint64_t)(255 * (v48 >> 6))) >> 32;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v49 = 0;
      do
      {
        unsigned int v50 = &v20[v49];
        unsigned int v51 = v14[1];
        *unsigned int v50 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
        v50[1] = (4198405 * (unint64_t)(255 * (v51 >> 6))) >> 32;
        v49 += 2;
        v14 += 4;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    if (v13 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v27 + v30;
    uint64_t v32 = a7[2] + v29 * v18 + v16;
    uint64_t v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(unsigned char *)(v32 + i) = -1;
          *(unsigned char *)(v33 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v22 - v10;
  if (v12)
  {
    if (v9)
    {
      unint64_t v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v40 = *v39 >> 6;
      int v41 = v39[1] >> 6;
      unint64_t v37 = v15 + 4;
      unsigned int v42 = ((4198405 * (unint64_t)(224 * (v15[1] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * (v15[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * v41)) >> 32)
          + 66;
      *unint64_t v21 = (((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (v15[2] >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * v40)) >> 32)
                          + 66) >> 2;
      v21[1] = v42 >> 2;
      unsigned int v38 = v21 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      unsigned int v38 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v43 = 0;
      unint64_t v44 = v37 + 2;
      do
      {
        unint64_t v45 = &v38[v43];
        unsigned int v46 = ((4198405 * (unint64_t)(224 * (*(v44 - 1) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (v44[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v44 + v14 - 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v44 + v14 + 2) >> 6))) >> 32)
            + 66;
        *unint64_t v45 = (((4198405 * (unint64_t)(224 * (*(v44 - 2) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*v44 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v44 + v14 - 4) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v44 + v14) >> 6))) >> 32)
                            + 66) >> 2;
        v45[1] = v46 >> 2;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v24 - v35;
    do
    {
      unint64_t v49 = v15;
      unsigned int v50 = v21;
      if (v9)
      {
        unsigned int v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v52 = *v51 >> 6;
        int v53 = v51[1] >> 6;
        unint64_t v49 = v15 + 4;
        unsigned int v54 = ((4198405 * (unint64_t)(224 * (v15[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (v15[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * v53)) >> 32)
            + 66;
        *unint64_t v21 = (((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v15[2] >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * v52)) >> 32)
                            + 66) >> 2;
        v21[1] = v54 >> 2;
        unsigned int v50 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v55 = 0;
        unsigned int v56 = v49 + 2;
        do
        {
          int v57 = &v50[v55];
          unsigned int v58 = ((4198405 * (unint64_t)(224 * (*(v56 - 1) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (v56[1] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v56 + v14 - 2) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v56 + v14 + 2) >> 6))) >> 32)
              + 66;
          unsigned char *v57 = (((4198405 * (unint64_t)(224 * (*(v56 - 2) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*v56 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v56 + v14 - 4) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v56 + v14) >> 6))) >> 32)
                              + 66) >> 2;
          v57[1] = v58 >> 2;
          v55 += 2;
          v56 += 4;
        }
        while (v55 < v36);
      }
      v15 += v14;
      v21 += v20;
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    if (v13 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v27 + v30;
    uint64_t v32 = a7[2] + v29 * v18 + v16;
    uint64_t v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(unsigned char *)(v32 + i) = -1;
          *(unsigned char *)(v33 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v22 - v10;
  if (v12)
  {
    if (v9)
    {
      int v39 = v15[1] >> 6;
      unint64_t v37 = v15 + 4;
      *unint64_t v21 = ((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32) + 16;
      v21[1] = ((4198405 * (unint64_t)(224 * v39)) >> 32) + 16;
      unsigned int v38 = v21 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      unsigned int v38 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v38[v40];
        unint64_t v42 = (4198405 * (unint64_t)(224 * (v37[1] >> 6))) >> 32;
        *int v41 = ((4198405 * (unint64_t)(224 * (*v37 >> 6))) >> 32) + 16;
        v41[1] = v42 + 16;
        v40 += 2;
        v37 += 4;
      }
      while (v40 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v24 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unsigned int v46 = v15;
      unint64_t v47 = v21;
      if (v9)
      {
        int v48 = v15[1] >> 6;
        unsigned int v46 = v15 + 4;
        *unint64_t v21 = ((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32) + 16;
        v21[1] = ((4198405 * (unint64_t)(224 * v48)) >> 32) + 16;
        unint64_t v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unsigned int v50 = &v47[v49];
          unint64_t v51 = (4198405 * (unint64_t)(224 * (v46[1] >> 6))) >> 32;
          *unsigned int v50 = ((4198405 * (unint64_t)(224 * (*v46 >> 6))) >> 32) + 16;
          v50[1] = v51 + 16;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      v21 += v20;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    uint64_t v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v30 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v36 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v37 = *v36 >> 6;
      int v38 = v36[1] >> 6;
      unint64_t v34 = v15 + 4;
      unsigned int v39 = ((4198405 * (unint64_t)(224 * (v15[1] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * (v15[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * v38)) >> 32)
          + 66;
      *unint64_t v21 = (((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (v15[2] >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * v37)) >> 32)
                          + 66) >> 2;
      v21[1] = v39 >> 2;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v15;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v40 = 0;
      int v41 = v34 + 2;
      do
      {
        unint64_t v42 = &v35[v40];
        unsigned int v43 = ((4198405 * (unint64_t)(224 * (*(v41 - 1) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (v41[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v41 + v14 - 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v41 + v14 + 2) >> 6))) >> 32)
            + 66;
        *unint64_t v42 = (((4198405 * (unint64_t)(224 * (*(v41 - 2) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*v41 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v41 + v14 - 4) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v41 + v14) >> 6))) >> 32)
                            + 66) >> 2;
        v42[1] = v43 >> 2;
        v40 += 2;
        v41 += 4;
      }
      while (v40 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v24 - v32;
    do
    {
      unsigned int v46 = v15;
      unint64_t v47 = v21;
      if (v8)
      {
        int v48 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v49 = *v48 >> 6;
        int v50 = v48[1] >> 6;
        unsigned int v46 = v15 + 4;
        unsigned int v51 = ((4198405 * (unint64_t)(224 * (v15[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (v15[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * v50)) >> 32)
            + 66;
        *unint64_t v21 = (((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v15[2] >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * v49)) >> 32)
                            + 66) >> 2;
        v21[1] = v51 >> 2;
        unint64_t v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v52 = 0;
        int v53 = v46 + 2;
        do
        {
          unsigned int v54 = &v47[v52];
          unsigned int v55 = ((4198405 * (unint64_t)(224 * (*(v53 - 1) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (v53[1] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v53 + v14 - 2) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v53 + v14 + 2) >> 6))) >> 32)
              + 66;
          *unsigned int v54 = (((4198405 * (unint64_t)(224 * (*(v53 - 2) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*v53 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v53 + v14 - 4) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v53 + v14) >> 6))) >> 32)
                              + 66) >> 2;
          v54[1] = v55 >> 2;
          v52 += 2;
          v53 += 4;
        }
        while (v52 < v33);
      }
      v15 += v14;
      v21 += v20;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    uint64_t v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v30 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      int v36 = v15[1] >> 6;
      unint64_t v34 = v15 + 4;
      *unint64_t v21 = ((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32) + 16;
      v21[1] = ((4198405 * (unint64_t)(224 * v36)) >> 32) + 16;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v15;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = &v35[v37];
        unint64_t v39 = (4198405 * (unint64_t)(224 * (v34[1] >> 6))) >> 32;
        unsigned char *v38 = ((4198405 * (unint64_t)(224 * (*v34 >> 6))) >> 32) + 16;
        v38[1] = v39 + 16;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    unint64_t v40 = 0;
    unint64_t v41 = v24 - v32;
    uint64_t v42 = 2 * v14;
    do
    {
      unsigned int v43 = v15;
      unint64_t v44 = v21;
      if (v8)
      {
        int v45 = v15[1] >> 6;
        unsigned int v43 = v15 + 4;
        *unint64_t v21 = ((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32) + 16;
        v21[1] = ((4198405 * (unint64_t)(224 * v45)) >> 32) + 16;
        unint64_t v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          unint64_t v47 = &v44[v46];
          unint64_t v48 = (4198405 * (unint64_t)(224 * (v43[1] >> 6))) >> 32;
          *unint64_t v47 = ((4198405 * (unint64_t)(224 * (*v43 >> 6))) >> 32) + 16;
          v47[1] = v48 + 16;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v33);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v42);
      v21 += v20;
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v59 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + ((unint64_t)(v59 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  unint64_t v23 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v23)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    if (v13 >= v9) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = *a3 + *a4 * v13 + 2 * v11 + v27;
    uint64_t v29 = *a7 + v26 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v29 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32;
      }
      v28 += v25;
      v29 += v26;
      ++v24;
    }
    while (v24 != v23);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v23 >= v12) {
    unint64_t v31 = v12;
  }
  else {
    unint64_t v31 = 0;
  }
  uint64_t v8 = v8;
  if (v21 >= v10) {
    unint64_t v32 = v10;
  }
  else {
    unint64_t v32 = 0;
  }
  unint64_t v58 = v32;
  unint64_t v33 = v21 - v32;
  if (v12)
  {
    if (v8)
    {
      int v36 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      unsigned int v37 = *v36;
      unsigned int v38 = v36[1];
      unint64_t v34 = v15 + 4;
      unsigned int v39 = ((4198405 * (unint64_t)(255 * (v15[1] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(255 * (v15[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(255 * (v38 >> 6))) >> 32)
          + 2;
      *uint64_t v20 = (((4198405 * (unint64_t)(255 * (*v15 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (v15[2] >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (v37 >> 6))) >> 32)
                          + 2) >> 2;
      v20[1] = v39 >> 2;
      unint64_t v35 = v20 + 2;
    }
    else
    {
      unint64_t v34 = v15;
      unint64_t v35 = v20;
    }
    if (v21 != v32)
    {
      unint64_t v40 = 0;
      unint64_t v41 = v34 + 2;
      do
      {
        uint64_t v42 = &v35[v40];
        unsigned int v43 = ((4198405 * (unint64_t)(255 * (*(v41 - 1) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (v41[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v41 + v14 - 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v41 + v14 + 2) >> 6))) >> 32)
            + 2;
        *uint64_t v42 = (((4198405 * (unint64_t)(255 * (*(v41 - 2) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (*v41 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v41 + v14 - 4) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v41 + v14) >> 6))) >> 32)
                            + 2) >> 2;
        v42[1] = v43 >> 2;
        v40 += 2;
        v41 += 4;
      }
      while (v40 < v33);
    }
    v15 += v14;
    v20 += v59;
  }
  if (v23 != v31)
  {
    unint64_t v44 = 0;
    unint64_t v57 = v23 - v31;
    do
    {
      int v45 = v15;
      unint64_t v46 = v20;
      uint64_t v47 = v8;
      if (v8)
      {
        unint64_t v48 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        unsigned int v49 = *v48;
        unsigned int v50 = v48[1];
        int v45 = v15 + 4;
        unsigned int v51 = ((4198405 * (unint64_t)(255 * (v15[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (v15[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (v50 >> 6))) >> 32)
            + 2;
        *uint64_t v20 = (((4198405 * (unint64_t)(255 * (*v15 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v15[2] >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v49 >> 6))) >> 32)
                            + 2) >> 2;
        v20[1] = v51 >> 2;
        unint64_t v46 = v20 + 2;
      }
      if (v21 != v58)
      {
        unint64_t v52 = 0;
        int v53 = v45 + 2;
        do
        {
          unsigned int v54 = &v46[v52];
          unsigned int v55 = ((4198405 * (unint64_t)(255 * (*(v53 - 1) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(255 * (v53[1] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v53 + v14 - 2) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v53 + v14 + 2) >> 6))) >> 32)
              + 2;
          *unsigned int v54 = (((4198405 * (unint64_t)(255 * (*(v53 - 2) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(255 * (*v53 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v53 + v14 - 4) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v53 + v14) >> 6))) >> 32)
                              + 2) >> 2;
          v54[1] = v55 >> 2;
          v52 += 2;
          v53 += 4;
        }
        while (v52 < v33);
      }
      v15 += v14;
      v20 += v59;
      v44 += 2;
      uint64_t v8 = v47;
    }
    while (v44 < v57);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    uint64_t v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v30 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v36 = v15[1];
      unint64_t v34 = v15 + 4;
      *unint64_t v21 = (4198405 * (unint64_t)(255 * (*v15 >> 6))) >> 32;
      v21[1] = (4198405 * (unint64_t)(255 * (v36 >> 6))) >> 32;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v15;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unsigned int v38 = &v35[v37];
        unsigned int v39 = v34[1];
        unsigned char *v38 = (4198405 * (unint64_t)(255 * (*v34 >> 6))) >> 32;
        v38[1] = (4198405 * (unint64_t)(255 * (v39 >> 6))) >> 32;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    unint64_t v40 = 0;
    unint64_t v41 = v24 - v32;
    uint64_t v42 = 2 * v14;
    do
    {
      unsigned int v43 = v15;
      unint64_t v44 = v21;
      if (v8)
      {
        unsigned int v45 = v15[1];
        unsigned int v43 = v15 + 4;
        *unint64_t v21 = (4198405 * (unint64_t)(255 * (*v15 >> 6))) >> 32;
        v21[1] = (4198405 * (unint64_t)(255 * (v45 >> 6))) >> 32;
        unint64_t v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          uint64_t v47 = &v44[v46];
          unsigned int v48 = v43[1];
          *uint64_t v47 = (4198405 * (unint64_t)(255 * (*v43 >> 6))) >> 32;
          v47[1] = (4198405 * (unint64_t)(255 * (v48 >> 6))) >> 32;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v33);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v42);
      v21 += v20;
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * v11;
    if (v13 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    unint64_t v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v33 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v40 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      int v41 = *v40 >> 6;
      int v42 = v40[1] >> 6;
      unint64_t v37 = v15 + 4;
      unsigned int v43 = ((4198405 * (unint64_t)(224 * (v15[1] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * (v15[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(224 * v42)) >> 32)
          + 66;
      *unint64_t v22 = (((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (v15[2] >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * v41)) >> 32)
                          + 66) >> 2;
      unsigned int v38 = v22 + 1;
      *unint64_t v23 = v43 >> 2;
      unsigned int v39 = v23 + 1;
    }
    else
    {
      unint64_t v37 = v15;
      unsigned int v38 = v22;
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v44 = 0;
      unsigned int v45 = v37 + 2;
      do
      {
        unsigned int v46 = ((4198405 * (unint64_t)(224 * (*(v45 - 1) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (v45[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v45 + v14 - 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v45 + v14 + 2) >> 6))) >> 32)
            + 66;
        *v38++ = (((4198405 * (unint64_t)(224 * (*(v45 - 2) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*v45 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v45 + v14 - 4) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v45 + v14) >> 6))) >> 32)
                              + 66) >> 2;
        *v39++ = v46 >> 2;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v36);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      unsigned int v49 = v15;
      unsigned int v50 = v22;
      unsigned int v51 = v23;
      if (v8)
      {
        unint64_t v52 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        int v53 = *v52 >> 6;
        int v54 = v52[1] >> 6;
        unsigned int v49 = v15 + 4;
        unsigned int v55 = ((4198405 * (unint64_t)(224 * (v15[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (v15[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(224 * v54)) >> 32)
            + 66;
        *unint64_t v22 = (((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (v15[2] >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * v53)) >> 32)
                            + 66) >> 2;
        unsigned int v50 = v22 + 1;
        *unint64_t v23 = v55 >> 2;
        unsigned int v51 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v56 = 0;
        unint64_t v57 = v49 + 2;
        do
        {
          unsigned int v58 = ((4198405 * (unint64_t)(224 * (*(v57 - 1) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (v57[1] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v57 + v14 - 2) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v57 + v14 + 2) >> 6))) >> 32)
              + 66;
          *v50++ = (((4198405 * (unint64_t)(224 * (*(v57 - 2) >> 6))) >> 32)
                                + ((4198405 * (unint64_t)(224 * (*v57 >> 6))) >> 32)
                                + ((4198405
                                  * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v57 + v14 - 4) >> 6))) >> 32)
                                + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v57 + v14) >> 6))) >> 32)
                                + 66) >> 2;
          *v51++ = v58 >> 2;
          v56 += 2;
          v57 += 4;
        }
        while (v56 < v36);
      }
      v15 += v14;
      v22 += v20;
      v23 += v21;
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * v11;
    if (v13 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    unint64_t v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v33 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      int v40 = v15[1] >> 6;
      unint64_t v37 = v15 + 4;
      *unint64_t v22 = ((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32) + 16;
      unsigned int v38 = v22 + 1;
      *unint64_t v23 = ((4198405 * (unint64_t)(224 * v40)) >> 32) + 16;
      unsigned int v39 = v23 + 1;
    }
    else
    {
      unint64_t v37 = v15;
      unsigned int v38 = v22;
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unint64_t v42 = (4198405 * (unint64_t)(224 * (v37[1] >> 6))) >> 32;
        *v38++ = ((4198405 * (unint64_t)(224 * (*v37 >> 6))) >> 32) + 16;
        *v39++ = v42 + 16;
        v41 += 2;
        v37 += 4;
      }
      while (v41 < v36);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unsigned int v46 = v15;
      unint64_t v47 = v22;
      unint64_t v48 = v23;
      if (v8)
      {
        unsigned int v46 = v15 + 4;
        unint64_t v49 = (4198405 * (unint64_t)(224 * (v15[1] >> 6))) >> 32;
        *unint64_t v22 = ((4198405 * (unint64_t)(224 * (*v15 >> 6))) >> 32) + 16;
        unint64_t v47 = v22 + 1;
        *unint64_t v23 = v49 + 16;
        unint64_t v48 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v50 = 0;
        do
        {
          unint64_t v51 = (4198405 * (unint64_t)(224 * (v46[1] >> 6))) >> 32;
          *v47++ = ((4198405 * (unint64_t)(224 * (*v46 >> 6))) >> 32) + 16;
          *v48++ = v51 + 16;
          v50 += 2;
          v46 += 4;
        }
        while (v50 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 += v20;
      v23 += v21;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf44_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v59 = a8[2];
  uint64_t v60 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + ((unint64_t)(v60 * v18) >> 1) + (v16 >> 1));
  uint64_t v21 = (unsigned char *)(a7[2] + ((unint64_t)(v59 * v18) >> 1) + (v16 >> 1));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v13 + 2 * v11;
    if (v13 >= v9) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + v29;
    unint64_t v31 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v31 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v22 >= v10) {
    unint64_t v34 = v10;
  }
  else {
    unint64_t v34 = 0;
  }
  unint64_t v58 = v34;
  unint64_t v35 = v22 - v34;
  if (v12)
  {
    if (v8)
    {
      unsigned int v39 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      unsigned int v40 = *v39;
      unsigned int v41 = v39[1];
      unint64_t v36 = v15 + 4;
      unsigned int v42 = ((4198405 * (unint64_t)(255 * (v15[1] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(255 * (v15[3] >> 6))) >> 32)
          + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(255 * (v41 >> 6))) >> 32)
          + 2;
      *uint64_t v20 = (((4198405 * (unint64_t)(255 * (*v15 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (v15[2] >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (v40 >> 6))) >> 32)
                          + 2) >> 2;
      unint64_t v37 = v20 + 1;
      *uint64_t v21 = v42 >> 2;
      unsigned int v38 = v21 + 1;
    }
    else
    {
      unint64_t v36 = v15;
      unint64_t v37 = v20;
      unsigned int v38 = v21;
    }
    if (v22 != v34)
    {
      unint64_t v43 = 0;
      unint64_t v44 = v36 + 2;
      do
      {
        unsigned int v45 = ((4198405 * (unint64_t)(255 * (*(v44 - 1) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (v44[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v44 + v14 - 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v44 + v14 + 2) >> 6))) >> 32)
            + 2;
        *v37++ = (((4198405 * (unint64_t)(255 * (*(v44 - 2) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(255 * (*v44 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v44 + v14 - 4) >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v44 + v14) >> 6))) >> 32)
                              + 2) >> 2;
        *v38++ = v45 >> 2;
        v43 += 2;
        v44 += 4;
      }
      while (v43 < v35);
    }
    v15 += v14;
    v20 += v60;
    v21 += v59;
  }
  if (v24 != v33)
  {
    unint64_t v46 = 0;
    do
    {
      unint64_t v47 = v15;
      unint64_t v48 = v20;
      unint64_t v49 = v21;
      if (v8)
      {
        unint64_t v50 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        unsigned int v51 = *v50;
        unsigned int v52 = v50[1];
        unint64_t v47 = v15 + 4;
        unsigned int v53 = ((4198405 * (unint64_t)(255 * (v15[1] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (v15[3] >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(255 * (v52 >> 6))) >> 32)
            + 2;
        *uint64_t v20 = (((4198405 * (unint64_t)(255 * (*v15 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v15[2] >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v15 + v14) >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v51 >> 6))) >> 32)
                            + 2) >> 2;
        unint64_t v48 = v20 + 1;
        *uint64_t v21 = v53 >> 2;
        unint64_t v49 = v21 + 1;
      }
      if (v22 != v58)
      {
        unint64_t v54 = 0;
        unsigned int v55 = v47 + 2;
        do
        {
          unsigned int v56 = ((4198405 * (unint64_t)(255 * (*(v55 - 1) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(255 * (v55[1] >> 6))) >> 32)
              + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v55 + v14 - 2) >> 6))) >> 32)
              + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v55 + v14 + 2) >> 6))) >> 32)
              + 2;
          *v48++ = (((4198405 * (unint64_t)(255 * (*(v55 - 2) >> 6))) >> 32)
                                + ((4198405 * (unint64_t)(255 * (*v55 >> 6))) >> 32)
                                + ((4198405
                                  * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v55 + v14 - 4) >> 6))) >> 32)
                                + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v55 + v14) >> 6))) >> 32)
                                + 2) >> 2;
          *v49++ = v56 >> 2;
          v54 += 2;
          v55 += 4;
        }
        while (v54 < v35);
      }
      v15 += v14;
      v20 += v60;
      v21 += v59;
      v46 += 2;
    }
    while (v46 < v24 - v33);
  }
  return 0;
}

uint64_t vt_CopyDec_xf44_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * v11;
    if (v13 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v31;
    unint64_t v33 = *a7 + v29 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v33 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v40 = v15[1];
      unint64_t v37 = v15 + 4;
      *unint64_t v22 = (4198405 * (unint64_t)(255 * (*v15 >> 6))) >> 32;
      unsigned int v38 = v22 + 1;
      *unint64_t v23 = (4198405 * (unint64_t)(255 * (v40 >> 6))) >> 32;
      unsigned int v39 = v23 + 1;
    }
    else
    {
      unint64_t v37 = v15;
      unsigned int v38 = v22;
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        uint64_t v42 = 1070593275 * (v37[1] >> 6);
        *v38++ = (4198405 * (unint64_t)(255 * (*v37 >> 6))) >> 32;
        *v39++ = BYTE4(v42);
        v41 += 2;
        v37 += 4;
      }
      while (v41 < v36);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v26 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      unint64_t v46 = v15;
      unint64_t v47 = v22;
      unint64_t v48 = v23;
      if (v8)
      {
        unsigned int v49 = v15[1];
        unint64_t v46 = v15 + 4;
        *unint64_t v22 = (4198405 * (unint64_t)(255 * (*v15 >> 6))) >> 32;
        unint64_t v47 = v22 + 1;
        *unint64_t v23 = (4198405 * (unint64_t)(255 * (v49 >> 6))) >> 32;
        unint64_t v48 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v50 = 0;
        do
        {
          uint64_t v51 = 1070593275 * (v46[1] >> 6);
          *v47++ = (4198405 * (unint64_t)(255 * (*v46 >> 6))) >> 32;
          *v48++ = BYTE4(v51);
          v50 += 2;
          v46 += 4;
        }
        while (v50 < v36);
      }
      unint64_t v15 = (unsigned __int16 *)((char *)v15 + v45);
      v22 += v20;
      v23 += v21;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_xf22_w30r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  long long v22 = 0uLL;
  int v23 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D620;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v22 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x10u, kvImageARGB16Q12|kvImageARGB16U, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xf22_w30r;
  *a11 = vt_VImage_Cleanup_xf22_w30r;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_xf22_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2]) {
    unint64_t v9 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v10 = a6[3];
  }
  else {
    uint64_t v10 = a2[3];
  }
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a4;
    uint64_t v13 = a4[1];
    uint64_t v14 = *a8;
    uint64_t v15 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v16 = a2[5];
    uint64_t v17 = a3[1] + v13 * v16 + 2 * v8;
    uint64_t v18 = *a3 + *a4 * v16 + 2 * v8;
    do
    {
      if (v9)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        LOWORD(v21) = 0;
        LOWORD(v22) = 0;
        int v23 = (unsigned __int16 *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            int v24 = *v23 >> 6;
            int v25 = v23[1] >> 6;
            v23 += 2;
            unsigned int v22 = (((67174465 * (unint64_t)(57344 * v24)) >> 32) >> 4) + 4096;
            unsigned int v21 = (((67174465 * (unint64_t)(57344 * v25)) >> 32) >> 4) + 4096;
          }
          unint64_t v26 = (_WORD *)(v15 + v19);
          unint64_t v27 = (67174465 * (unint64_t)(56064 * (*(unsigned __int16 *)(v18 + 2 * v20) >> 6))) >> 36;
          _WORD *v26 = -1;
          v26[1] = v27 + 4096;
          v26[2] = v22;
          v26[3] = v21;
          ++v20;
          v19 += 8;
        }
        while (v9 != v20);
      }
      v18 += v12;
      v15 += v14;
      v17 += v13;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_xf22_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v9 >= a6[2]) {
    unint64_t v9 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v10 = a6[3];
  }
  else {
    uint64_t v10 = a2[3];
  }
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a4;
    uint64_t v13 = a4[1];
    uint64_t v14 = *a8;
    uint64_t v15 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v16 = a2[5];
    uint64_t v17 = a3[1] + v13 * v16 + 2 * v8;
    uint64_t v18 = *a3 + *a4 * v16 + 2 * v8;
    do
    {
      if (v9)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        LOBYTE(v21) = 0;
        LOBYTE(v22) = 0;
        int v23 = (unsigned __int16 *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            int v24 = *v23 >> 6;
            int v25 = v23[1] >> 6;
            v23 += 2;
            int v22 = ((4198405 * (unint64_t)(224 * v24)) >> 32) + 16;
            int v21 = ((4198405 * (unint64_t)(224 * v25)) >> 32) + 16;
          }
          unint64_t v26 = (unsigned char *)(v15 + v19);
          unint64_t v27 = (4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v18 + 2 * v20) >> 6))) >> 32;
          unsigned char *v26 = -1;
          v26[1] = v27 + 16;
          v26[2] = v22;
          v26[3] = v21;
          ++v20;
          v19 += 4;
        }
        while (v9 != v20);
      }
      v18 += v12;
      v15 += v14;
      v17 += v13;
      ++v11;
    }
    while (v11 != v10);
  }
  return 0;
}

uint64_t vt_Copy_xf22_v216(double a1, double a2, double a3, int16x4_t a4, int16x4_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t *a13)
{
  unint64_t v13 = *(void *)(a7 + 24);
  uint64_t v14 = (*(void *)(a7 + 32) & 1) + *(void *)(a7 + 32);
  uint64_t v15 = (*(void *)(a11 + 32) & 1) + *(void *)(a11 + 32);
  unint64_t v16 = ((*(_DWORD *)(a7 + 16) + *(void *)(a7 + 32)) & 0xFFFFFFFE) - v14;
  if (v16 >= (unint64_t)((*(_DWORD *)(a11 + 16) + *(void *)(a11 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v16 = ((*(_DWORD *)(a11 + 16) + *(void *)(a11 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v13 >= *(void *)(a11 + 24)) {
    unint64_t v13 = *(void *)(a11 + 24);
  }
  if (v13)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a9;
    uint64_t v19 = a9[1];
    uint64_t v20 = *a13;
    uint64_t v21 = *a12 + *a13 * *(void *)(a11 + 40) + 2 * v15;
    uint64_t v22 = *(void *)(a7 + 40);
    unint64_t v23 = a8[1] + v19 * v22 + ((2 * v14) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v24 = *a8 + *a9 * v22 + 2 * v14;
    uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0x401005u);
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        for (unint64_t i = 0; i < v16; i += 2)
        {
          a4.i16[0] = *(_WORD *)(v23 + v26);
          a4.i16[2] = *(_WORD *)(v23 + v26 + 2);
          a5.i16[0] = *(_WORD *)(v24 + v26);
          a5.i16[2] = *(_WORD *)(v24 + v26 + 2);
          int32x4_t v29 = (int32x4_t)vmull_u16(vshr_n_u16((uint16x4_t)vuzp1_s16(a4, a5), 6uLL), (uint16x4_t)0xDB00DB00E000E000);
          int32x4_t v30 = vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v29.i8, *(uint32x2_t *)v25.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v29, v25));
          *(int16x4_t *)v29.i8 = vadd_s16(vshrn_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v30, (uint32x4_t)vsubq_s32(v29, v30), 1uLL), 9uLL), (int16x4_t)0x1000100010001000);
          a5 = vrev32_s16(*(int16x4_t *)v29.i8);
          a4 = vuzp1_s16(*(int16x4_t *)v29.i8, a5);
          *(double *)(v21 + v27) = *(double *)&a4;
          v27 += 8;
          v26 += 4;
        }
      }
      v24 += v18;
      v21 += v20;
      v23 += v19;
      ++v17;
    }
    while (v17 != v13);
  }
  return 0;
}

uint64_t vt_Copy_xf22_2vuy(double a1, double a2, double a3, int16x4_t a4, int16x4_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t *a13)
{
  unint64_t v13 = *(void *)(a7 + 24);
  uint64_t v14 = (*(void *)(a7 + 32) & 1) + *(void *)(a7 + 32);
  uint64_t v15 = (*(void *)(a11 + 32) & 1) + *(void *)(a11 + 32);
  unint64_t v16 = ((*(_DWORD *)(a7 + 16) + *(void *)(a7 + 32)) & 0xFFFFFFFE) - v14;
  if (v16 >= (unint64_t)((*(_DWORD *)(a11 + 16) + *(void *)(a11 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v16 = ((*(_DWORD *)(a11 + 16) + *(void *)(a11 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v13 >= *(void *)(a11 + 24)) {
    unint64_t v13 = *(void *)(a11 + 24);
  }
  if (v13)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a9;
    uint64_t v19 = a9[1];
    uint64_t v20 = *a13;
    uint64_t v21 = *a12 + *a13 * *(void *)(a11 + 40) + v15;
    uint64_t v22 = *(void *)(a7 + 40);
    unint64_t v23 = a8[1] + v19 * v22 + ((2 * v14) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v24 = *a8 + *a9 * v22 + 2 * v14;
    uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0x401005u);
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        for (unint64_t i = 0; i < v16; i += 2)
        {
          a4.i16[0] = *(_WORD *)(v23 + v26);
          a4.i16[2] = *(_WORD *)(v23 + v26 + 2);
          a5.i16[0] = *(_WORD *)(v24 + v26);
          a5.i16[2] = *(_WORD *)(v24 + v26 + 2);
          int32x4_t v28 = (int32x4_t)vmull_u16(vshr_n_u16((uint16x4_t)vuzp1_s16(a4, a5), 6uLL), (uint16x4_t)0xDB00DB00E000E0);
          int32x4_t v29 = vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v28.i8, *(uint32x2_t *)v25.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v28, v25));
          int16x8_t v30 = (int16x8_t)vsubq_s32(v28, v29);
          *(int16x4_t *)v30.i8 = vadd_s16(vshrn_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v29, (uint32x4_t)v30, 1uLL), 9uLL), (int16x4_t)0x10001000100010);
          a5 = vrev32_s16(*(int16x4_t *)v30.i8);
          *(int16x4_t *)v30.i8 = vuzp1_s16(*(int16x4_t *)v30.i8, a5);
          a4 = (int16x4_t)vmovn_s16(v30);
          *(_DWORD *)(v21 + v26) = a4.i32[0];
          v26 += 4;
        }
      }
      v24 += v18;
      v21 += v20;
      v23 += v19;
      ++v17;
    }
    while (v17 != v13);
  }
  return 0;
}

uint64_t vt_Copy_xf22_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  unint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  unint64_t v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2]) {
    unint64_t v17 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v10 = a6[3];
  }
  if (v10)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v24 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v10);
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v17 >> 1;
  uint64_t v29 = v9 & 1;
  if (v17 >> 1 >= (v17 - v29) >> 1) {
    unint64_t v28 = (v17 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      int v37 = v12[1] >> 6;
      int16x8_t v30 = v12 + 2;
      *unint64_t v16 = ((67174465 * (unint64_t)(57344 * (*v12 >> 6))) >> 36) + 4096;
      v16[1] = ((67174465 * (unint64_t)(57344 * v37)) >> 36) + 4096;
      uint64_t v31 = v16 + 2;
      if (v28)
      {
LABEL_19:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30 >> 6;
          int v34 = v30[1] >> 6;
          v30 += 2;
          _WORD *v31 = ((67174465 * (unint64_t)(57344 * v33)) >> 36) + 4096;
          v31[1] = ((67174465 * (unint64_t)(57344 * v34)) >> 36) + 4096;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      int16x8_t v30 = v12;
      uint64_t v31 = v16;
      if (v28) {
        goto LABEL_19;
      }
    }
    uint64_t v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v17)
    {
      int v38 = *v30 >> 6;
      int v39 = v30[1] >> 6;
      _WORD *v31 = (((67174465 * (unint64_t)(57344 * v38)) >> 32) >> 4) + 4096;
      v31[1] = (((67174465 * (unint64_t)(57344 * v39)) >> 32) >> 4) + 4096;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    unint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v10 - v26;
    do
    {
      uint64_t v42 = v12;
      unint64_t v43 = v16;
      if (v27)
      {
        int v44 = v12[1] >> 6;
        uint64_t v42 = v12 + 2;
        *unint64_t v16 = ((67174465 * (unint64_t)(57344 * (*v12 >> 6))) >> 36) + 4096;
        v16[1] = ((67174465 * (unint64_t)(57344 * v44)) >> 36) + 4096;
        unint64_t v43 = v16 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          int v46 = v42[1] >> 6;
          unsigned int v47 = (((67174465 * (unint64_t)(57344 * (*v42 >> 6))) >> 32) >> 4) + 4096;
          _WORD *v43 = (((67174465 * (unint64_t)(57344 * (*v42 >> 6))) >> 32) >> 4) + 4096;
          unsigned int v48 = (((67174465 * (unint64_t)(57344 * v46)) >> 32) >> 4) + 4096;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v17)
      {
        int v49 = *v42 >> 6;
        int v50 = v42[1] >> 6;
        _WORD *v43 = (((67174465 * (unint64_t)(57344 * v49)) >> 32) >> 4) + 4096;
        v43[1] = (((67174465 * (unint64_t)(57344 * v50)) >> 32) >> 4) + 4096;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      unint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if (v27)
    {
      int v51 = *v12 >> 6;
      int v52 = v12[1] >> 6;
      v12 += 2;
      *unint64_t v16 = ((67174465 * (unint64_t)(57344 * v51)) >> 36) + 4096;
      v16[1] = ((67174465 * (unint64_t)(57344 * v52)) >> 36) + 4096;
      v16 += 2;
    }
    if (v28)
    {
      uint64_t v53 = -(uint64_t)v28;
      do
      {
        int v54 = *v12 >> 6;
        int v55 = v12[1] >> 6;
        v12 += 2;
        *unint64_t v16 = ((67174465 * (unint64_t)(57344 * v54)) >> 36) + 4096;
        v16[1] = ((67174465 * (unint64_t)(57344 * v55)) >> 36) + 4096;
        v16 += 2;
        BOOL v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      uint64_t v56 = 2 * v28;
    }
    else
    {
      uint64_t v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v17)
    {
      int v57 = *v12 >> 6;
      int v58 = v12[1] >> 6;
      *unint64_t v16 = (((67174465 * (unint64_t)(57344 * v57)) >> 32) >> 4) + 4096;
      v16[1] = (((67174465 * (unint64_t)(57344 * v58)) >> 32) >> 4) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v16 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  unint64_t v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17) {
    unint64_t v20 = v17;
  }
  if (v10 >= v16) {
    unint64_t v21 = v16;
  }
  else {
    unint64_t v21 = v10;
  }
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
          *(_WORD *)(v25 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  if (v21 >= (v8 & 1u)) {
    uint64_t v28 = v8 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v9;
  unint64_t v30 = v20 >> 1;
  uint64_t v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1) {
    unint64_t v30 = (v20 - v31) >> 1;
  }
  if (v8)
  {
    if (v29)
    {
      int v39 = v13[1] >> 6;
      uint64_t v32 = v13 + 2;
      *uint64_t v19 = ((67174465 * (unint64_t)(57344 * (*v13 >> 6))) >> 36) + 4096;
      v19[1] = ((67174465 * (unint64_t)(57344 * v39)) >> 36) + 4096;
      int v33 = v19 + 2;
      if (v30)
      {
LABEL_20:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          int v35 = *v32 >> 6;
          int v36 = v32[1] >> 6;
          v32 += 2;
          _WORD *v33 = ((67174465 * (unint64_t)(57344 * v35)) >> 36) + 4096;
          v33[1] = ((67174465 * (unint64_t)(57344 * v36)) >> 36) + 4096;
          v33 += 2;
          BOOL v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v30;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v32 = v13;
      int v33 = v19;
      if (v30) {
        goto LABEL_20;
      }
    }
    uint64_t v38 = 0;
LABEL_26:
    if ((v38 | (unint64_t)v31) < v20)
    {
      int v40 = *v32 >> 6;
      int v41 = v32[1] >> 6;
      _WORD *v33 = (((67174465 * (unint64_t)(57344 * v40)) >> 32) >> 4) + 4096;
      v33[1] = (((67174465 * (unint64_t)(57344 * v41)) >> 32) >> 4) + 4096;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v28)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v21 - v28;
    do
    {
      int v44 = v13;
      uint64_t v45 = v19;
      if (v29)
      {
        int v46 = v13[1] >> 6;
        int v44 = v13 + 2;
        *uint64_t v19 = ((67174465 * (unint64_t)(57344 * (*v13 >> 6))) >> 36) + 4096;
        v19[1] = ((67174465 * (unint64_t)(57344 * v46)) >> 36) + 4096;
        uint64_t v45 = v19 + 2;
      }
      if (v30)
      {
        uint64_t v47 = -(uint64_t)v30;
        do
        {
          int v48 = v44[1] >> 6;
          unsigned int v49 = (((67174465 * (unint64_t)(57344 * (*v44 >> 6))) >> 32) >> 4) + 4096;
          *uint64_t v45 = (((67174465 * (unint64_t)(57344 * (*v44 >> 6))) >> 32) >> 4) + 4096;
          unsigned int v50 = (((67174465 * (unint64_t)(57344 * v48)) >> 32) >> 4) + 4096;
          v45[1] = v50;
          v44 += 2;
          v45[2] = v49;
          v45[3] = v50;
          v45 += 4;
          BOOL v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      if ((v31 | (2 * v30)) < v20)
      {
        int v51 = *v44 >> 6;
        int v52 = v44[1] >> 6;
        *uint64_t v45 = (((67174465 * (unint64_t)(57344 * v51)) >> 32) >> 4) + 4096;
        v45[1] = (((67174465 * (unint64_t)(57344 * v52)) >> 32) >> 4) + 4096;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + (v8 & 1) < v21)
  {
    if (v29)
    {
      int v53 = *v13 >> 6;
      int v54 = v13[1] >> 6;
      v13 += 2;
      *uint64_t v19 = ((67174465 * (unint64_t)(57344 * v53)) >> 36) + 4096;
      v19[1] = ((67174465 * (unint64_t)(57344 * v54)) >> 36) + 4096;
      v19 += 2;
    }
    if (v30)
    {
      uint64_t v55 = -(uint64_t)v30;
      do
      {
        int v56 = *v13 >> 6;
        int v57 = v13[1] >> 6;
        v13 += 2;
        *uint64_t v19 = ((67174465 * (unint64_t)(57344 * v56)) >> 36) + 4096;
        v19[1] = ((67174465 * (unint64_t)(57344 * v57)) >> 36) + 4096;
        v19 += 2;
        BOOL v37 = __CFADD__(v55++, 1);
      }
      while (!v37);
      v30 *= 2;
    }
    if ((v30 | v31) < v20)
    {
      int v58 = *v13 >> 6;
      int v59 = v13[1] >> 6;
      *uint64_t v19 = (((67174465 * (unint64_t)(57344 * v58)) >> 32) >> 4) + 4096;
      v19[1] = (((67174465 * (unint64_t)(57344 * v59)) >> 32) >> 4) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v16 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  unint64_t v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17) {
    unint64_t v20 = v17;
  }
  if (v10 >= v16) {
    unint64_t v21 = v16;
  }
  else {
    unint64_t v21 = v10;
  }
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
          *(_WORD *)(v25 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 36;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  unint64_t v28 = v8 & 1;
  if (v21 >= v28) {
    uint64_t v29 = v8 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  char v30 = v9;
  unint64_t v31 = v20 >> 1;
  uint64_t v32 = v9 & 1;
  if (v20 >> 1 >= (v20 - v32) >> 1) {
    unint64_t v31 = (v20 - v32) >> 1;
  }
  if (v8)
  {
    if (v30)
    {
      unsigned int v40 = v13[1];
      int v33 = v13 + 2;
      *uint64_t v19 = (67174465 * (unint64_t)(0xFFFF * (*v13 >> 6))) >> 36;
      v19[1] = (67174465 * (unint64_t)(0xFFFF * (v40 >> 6))) >> 36;
      uint64_t v34 = v19 + 2;
      if (v31)
      {
LABEL_20:
        uint64_t v35 = -(uint64_t)v31;
        do
        {
          unsigned int v36 = *v33;
          unsigned int v37 = v33[1];
          v33 += 2;
          *uint64_t v34 = (67174465 * (unint64_t)(0xFFFF * (v36 >> 6))) >> 36;
          v34[1] = (67174465 * (unint64_t)(0xFFFF * (v37 >> 6))) >> 36;
          v34 += 2;
          BOOL v38 = __CFADD__(v35++, 1);
        }
        while (!v38);
        uint64_t v39 = 2 * v31;
        goto LABEL_26;
      }
    }
    else
    {
      int v33 = v13;
      uint64_t v34 = v19;
      if (v31) {
        goto LABEL_20;
      }
    }
    uint64_t v39 = 0;
LABEL_26:
    if ((v39 | (unint64_t)v32) < v20)
    {
      unsigned int v41 = *v33;
      unsigned int v42 = v33[1];
      *uint64_t v34 = (67174465 * (unint64_t)(0xFFFF * (v41 >> 6))) >> 36;
      v34[1] = (67174465 * (unint64_t)(0xFFFF * (v42 >> 6))) >> 36;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v29)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v21 - v29;
    do
    {
      uint64_t v45 = v13;
      int v46 = v19;
      if (v30)
      {
        unsigned int v47 = v13[1];
        uint64_t v45 = v13 + 2;
        *uint64_t v19 = (67174465 * (unint64_t)(0xFFFF * (*v13 >> 6))) >> 36;
        v19[1] = (67174465 * (unint64_t)(0xFFFF * (v47 >> 6))) >> 36;
        int v46 = v19 + 2;
      }
      if (v31)
      {
        uint64_t v48 = -(uint64_t)v31;
        do
        {
          unint64_t v49 = (67174465 * (unint64_t)(0xFFFF * (*v45 >> 6))) >> 36;
          unint64_t v50 = (67174465 * (unint64_t)(0xFFFF * (v45[1] >> 6))) >> 36;
          *int v46 = v49;
          v46[1] = v50;
          v45 += 2;
          v46[2] = v49;
          v46[3] = v50;
          v46 += 4;
          BOOL v38 = __CFADD__(v48++, 1);
        }
        while (!v38);
      }
      if ((v32 | (2 * v31)) < v20)
      {
        unsigned int v51 = *v45;
        unint64_t v52 = (67174465 * (unint64_t)(0xFFFF * (v45[1] >> 6))) >> 36;
        *int v46 = (67174465 * (unint64_t)(0xFFFF * (v51 >> 6))) >> 36;
        v46[1] = v52;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v21)
  {
    if (v30)
    {
      unsigned int v53 = *v13;
      unsigned int v54 = v13[1];
      v13 += 2;
      *uint64_t v19 = (67174465 * (unint64_t)(0xFFFF * (v53 >> 6))) >> 36;
      v19[1] = (67174465 * (unint64_t)(0xFFFF * (v54 >> 6))) >> 36;
      v19 += 2;
    }
    if (v31)
    {
      uint64_t v55 = -(uint64_t)v31;
      do
      {
        unsigned int v56 = *v13;
        unsigned int v57 = v13[1];
        v13 += 2;
        *uint64_t v19 = (67174465 * (unint64_t)(0xFFFF * (v56 >> 6))) >> 36;
        v19[1] = (67174465 * (unint64_t)(0xFFFF * (v57 >> 6))) >> 36;
        v19 += 2;
        BOOL v38 = __CFADD__(v55++, 1);
      }
      while (!v38);
      v31 *= 2;
    }
    if ((v31 | v32) < v20)
    {
      unsigned int v58 = *v13;
      unsigned int v59 = v13[1];
      *uint64_t v19 = (67174465 * (unint64_t)(0xFFFF * (v58 >> 6))) >> 36;
      v19[1] = (67174465 * (unint64_t)(0xFFFF * (v59 >> 6))) >> 36;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = a7[2] + v26 * v18 + v19;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = -1;
          *(_WORD *)(v28 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v22 >> 1;
  unint64_t v35 = (v22 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      int v38 = v14[1] >> 6;
      unsigned int v36 = v14 + 2;
      *unint64_t v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
      v21[1] = ((67174465 * (unint64_t)(57344 * v38)) >> 36) + 4096;
      unsigned int v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unsigned int v36 = v14;
      unsigned int v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      unint64_t v40 = (67174465 * (unint64_t)(57344 * (v36[1] >> 6))) >> 36;
      *unsigned int v37 = ((67174465 * (unint64_t)(57344 * (*v36 >> 6))) >> 36) + 4096;
      v37[1] = v40 + 4096;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      uint64_t v44 = v14;
      uint64_t v45 = v21;
      if (v33)
      {
        int v46 = v14[1] >> 6;
        uint64_t v44 = v14 + 2;
        *unint64_t v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        v21[1] = ((67174465 * (unint64_t)(57344 * v46)) >> 36) + 4096;
        uint64_t v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          unint64_t v48 = (67174465 * (unint64_t)(57344 * (v44[1] >> 6))) >> 36;
          *uint64_t v45 = ((67174465 * (unint64_t)(57344 * (*v44 >> 6))) >> 36) + 4096;
          v45[1] = v48 + 4096;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      int v49 = *v14 >> 6;
      int v50 = v14[1] >> 6;
      v14 += 2;
      *unint64_t v21 = ((67174465 * (unint64_t)(57344 * v49)) >> 36) + 4096;
      v21[1] = ((67174465 * (unint64_t)(57344 * v50)) >> 36) + 4096;
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        unint64_t v52 = (67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 36;
        *unint64_t v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        v21[1] = v52 + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v19;
    uint64_t v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v22 >> 1;
  unint64_t v33 = (v22 - v10) >> 1;
  if (v32 >= v33) {
    unint64_t v32 = v33;
  }
  if (v12)
  {
    if (v31)
    {
      int v36 = v14[1] >> 6;
      unint64_t v34 = v14 + 2;
      *unint64_t v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
      v21[1] = ((67174465 * (unint64_t)(57344 * v36)) >> 36) + 4096;
      unint64_t v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v34 = v14;
      unint64_t v35 = v21;
      if (!v32) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = -(uint64_t)v32;
    do
    {
      unint64_t v38 = (67174465 * (unint64_t)(57344 * (v34[1] >> 6))) >> 36;
      *unint64_t v35 = ((67174465 * (unint64_t)(57344 * (*v34 >> 6))) >> 36) + 4096;
      v35[1] = v38 + 4096;
      v34 += 2;
      v35 += 2;
      BOOL v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v30;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v31)
      {
        int v44 = v14[1] >> 6;
        unint64_t v42 = v14 + 2;
        *unint64_t v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        v21[1] = ((67174465 * (unint64_t)(57344 * v44)) >> 36) + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v32)
      {
        uint64_t v45 = -(uint64_t)v32;
        do
        {
          unint64_t v46 = (67174465 * (unint64_t)(57344 * (v42[1] >> 6))) >> 36;
          _WORD *v43 = ((67174465 * (unint64_t)(57344 * (*v42 >> 6))) >> 36) + 4096;
          v43[1] = v46 + 4096;
          v42 += 2;
          v43 += 2;
          BOOL v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if (v31)
    {
      int v47 = *v14 >> 6;
      int v48 = v14[1] >> 6;
      v14 += 2;
      *unint64_t v21 = ((67174465 * (unint64_t)(57344 * v47)) >> 36) + 4096;
      v21[1] = ((67174465 * (unint64_t)(57344 * v48)) >> 36) + 4096;
      v21 += 2;
    }
    if (v32)
    {
      uint64_t v49 = -(uint64_t)v32;
      do
      {
        unint64_t v50 = (67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 36;
        *unint64_t v21 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        v21[1] = v50 + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v19;
    uint64_t v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 36;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v22 >> 1;
  unint64_t v33 = (v22 - v10) >> 1;
  if (v32 >= v33) {
    unint64_t v32 = v33;
  }
  if (v12)
  {
    if (v31)
    {
      unsigned int v36 = v14[1];
      unint64_t v34 = v14 + 2;
      *unint64_t v21 = (67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 36;
      v21[1] = (67174465 * (unint64_t)(0xFFFF * (v36 >> 6))) >> 36;
      unint64_t v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v34 = v14;
      unint64_t v35 = v21;
      if (!v32) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = -(uint64_t)v32;
    do
    {
      unsigned int v38 = v34[1];
      *unint64_t v35 = (67174465 * (unint64_t)(0xFFFF * (*v34 >> 6))) >> 36;
      v35[1] = (67174465 * (unint64_t)(0xFFFF * (v38 >> 6))) >> 36;
      v34 += 2;
      v35 += 2;
      BOOL v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v30;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v31)
      {
        unsigned int v44 = v14[1];
        unint64_t v42 = v14 + 2;
        *unint64_t v21 = (67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 36;
        v21[1] = (67174465 * (unint64_t)(0xFFFF * (v44 >> 6))) >> 36;
        uint64_t v43 = v21 + 2;
      }
      if (v32)
      {
        uint64_t v45 = -(uint64_t)v32;
        do
        {
          unsigned int v46 = v42[1];
          _WORD *v43 = (67174465 * (unint64_t)(0xFFFF * (*v42 >> 6))) >> 36;
          v43[1] = (67174465 * (unint64_t)(0xFFFF * (v46 >> 6))) >> 36;
          v42 += 2;
          v43 += 2;
          BOOL v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if (v31)
    {
      unsigned int v47 = *v14;
      unsigned int v48 = v14[1];
      v14 += 2;
      *unint64_t v21 = (67174465 * (unint64_t)(0xFFFF * (v47 >> 6))) >> 36;
      v21[1] = (67174465 * (unint64_t)(0xFFFF * (v48 >> 6))) >> 36;
      v21 += 2;
    }
    if (v32)
    {
      uint64_t v49 = -(uint64_t)v32;
      do
      {
        unsigned int v50 = v14[1];
        *unint64_t v21 = (67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 36;
        v21[1] = (67174465 * (unint64_t)(0xFFFF * (v50 >> 6))) >> 36;
        v14 += 2;
        v21 += 2;
        BOOL v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      unsigned int v38 = v16 + 2;
      unsigned int v40 = ((((67174465 * (unint64_t)(57344 * (v16[1] >> 6))) >> 32) >> 4)
           + 8193
           + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32) >> 4)) >> 1;
      *uint64_t v23 = ((((67174465 * (unint64_t)(57344 * (*v16 >> 6))) >> 32) >> 4)
            + 8193
            + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32) >> 4)) >> 1;
      v23[1] = v40;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unsigned int v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      int v42 = *v38 >> 6;
      int v43 = v38[1] >> 6;
      int v44 = *(unsigned __int16 *)((char *)v38 + v15) >> 6;
      int v45 = *(unsigned __int16 *)((char *)v38 + v15 + 2) >> 6;
      v38 += 2;
      *BOOL v39 = ((((67174465 * (unint64_t)(57344 * v42)) >> 32) >> 4)
            + 8193
            + (((67174465 * (unint64_t)(57344 * v44)) >> 32) >> 4)) >> 1;
      v39[1] = ((((67174465 * (unint64_t)(57344 * v43)) >> 32) >> 4)
              + 8193
              + (((67174465 * (unint64_t)(57344 * v45)) >> 32) >> 4)) >> 1;
      v39 += 2;
      BOOL v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      uint64_t v49 = v16;
      unsigned int v50 = v23;
      if (v9)
      {
        uint64_t v49 = v16 + 2;
        unsigned int v51 = ((((67174465 * (unint64_t)(57344 * (v16[1] >> 6))) >> 32) >> 4)
             + 8193
             + (((67174465
                              * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32) >> 4)) >> 1;
        *uint64_t v23 = ((((67174465 * (unint64_t)(57344 * (*v16 >> 6))) >> 32) >> 4)
              + 8193
              + (((67174465 * (unint64_t)(57344 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32) >> 4)) >> 1;
        v23[1] = v51;
        unsigned int v50 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v52 = -(uint64_t)v37;
        do
        {
          int v53 = *v49 >> 6;
          int v54 = v49[1] >> 6;
          int v55 = *(unsigned __int16 *)((char *)v49 + v15) >> 6;
          int v56 = *(unsigned __int16 *)((char *)v49 + v15 + 2) >> 6;
          v49 += 2;
          *unsigned int v50 = ((((67174465 * (unint64_t)(57344 * v53)) >> 32) >> 4)
                + 8193
                + (((67174465 * (unint64_t)(57344 * v55)) >> 32) >> 4)) >> 1;
          v50[1] = ((((67174465 * (unint64_t)(57344 * v54)) >> 32) >> 4)
                  + 8193
                  + (((67174465 * (unint64_t)(57344 * v56)) >> 32) >> 4)) >> 1;
          v50 += 2;
          BOOL v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += v15;
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      int v40 = v16[1] >> 6;
      unsigned int v38 = v16 + 2;
      *uint64_t v23 = ((67174465 * (unint64_t)(57344 * (*v16 >> 6))) >> 36) + 4096;
      v23[1] = ((67174465 * (unint64_t)(57344 * v40)) >> 36) + 4096;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unsigned int v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      unint64_t v42 = (67174465 * (unint64_t)(57344 * (v38[1] >> 6))) >> 36;
      *BOOL v39 = ((67174465 * (unint64_t)(57344 * (*v38 >> 6))) >> 36) + 4096;
      v39[1] = v42 + 4096;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v35;
    uint64_t v46 = 2 * v15;
    do
    {
      unint64_t v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        int v49 = v16[1] >> 6;
        unint64_t v47 = v16 + 2;
        *uint64_t v23 = ((67174465 * (unint64_t)(57344 * (*v16 >> 6))) >> 36) + 4096;
        v23[1] = ((67174465 * (unint64_t)(57344 * v49)) >> 36) + 4096;
        unint64_t v48 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v50 = -(uint64_t)v37;
        do
        {
          unint64_t v51 = (67174465 * (unint64_t)(57344 * (v47[1] >> 6))) >> 36;
          *unint64_t v48 = ((67174465 * (unint64_t)(57344 * (*v47 >> 6))) >> 36) + 4096;
          v48[1] = v51 + 4096;
          v47 += 2;
          v48 += 2;
          BOOL v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v46);
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 36;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      unsigned int v38 = v16 + 2;
      unsigned int v40 = ((((67174465 * (unint64_t)(0xFFFF * (v16[1] >> 6))) >> 32) >> 4)
           + (((67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32) >> 4)
           + 1) >> 1;
      *uint64_t v23 = ((((67174465 * (unint64_t)(0xFFFF * (*v16 >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32) >> 4)
            + 1) >> 1;
      v23[1] = v40;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unsigned int v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      unsigned int v42 = *v38;
      unsigned int v43 = v38[1];
      unsigned int v44 = *(unsigned __int16 *)((char *)v38 + v15);
      unsigned int v45 = *(unsigned __int16 *)((char *)v38 + v15 + 2);
      v38 += 2;
      *BOOL v39 = ((((67174465 * (unint64_t)(0xFFFF * (v42 >> 6))) >> 32) >> 4)
            + (((67174465 * (unint64_t)(0xFFFF * (v44 >> 6))) >> 32) >> 4)
            + 1) >> 1;
      v39[1] = ((((67174465 * (unint64_t)(0xFFFF * (v43 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (v45 >> 6))) >> 32) >> 4)
              + 1) >> 1;
      v39 += 2;
      BOOL v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      int v49 = v16;
      uint64_t v50 = v23;
      if (v9)
      {
        int v49 = v16 + 2;
        unsigned int v51 = ((((67174465 * (unint64_t)(0xFFFF * (v16[1] >> 6))) >> 32) >> 4)
             + (((67174465
                              * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32) >> 4)
             + 1) >> 1;
        *uint64_t v23 = ((((67174465 * (unint64_t)(0xFFFF * (*v16 >> 6))) >> 32) >> 4)
              + (((67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32) >> 4)
              + 1) >> 1;
        v23[1] = v51;
        uint64_t v50 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v52 = -(uint64_t)v37;
        do
        {
          unsigned int v53 = *v49;
          unsigned int v54 = v49[1];
          unsigned int v55 = *(unsigned __int16 *)((char *)v49 + v15);
          unsigned int v56 = *(unsigned __int16 *)((char *)v49 + v15 + 2);
          v49 += 2;
          *uint64_t v50 = ((((67174465 * (unint64_t)(0xFFFF * (v53 >> 6))) >> 32) >> 4)
                + (((67174465 * (unint64_t)(0xFFFF * (v55 >> 6))) >> 32) >> 4)
                + 1) >> 1;
          v50[1] = ((((67174465 * (unint64_t)(0xFFFF * (v54 >> 6))) >> 32) >> 4)
                  + (((67174465 * (unint64_t)(0xFFFF * (v56 >> 6))) >> 32) >> 4)
                  + 1) >> 1;
          v50 += 2;
          BOOL v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += v15;
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 36;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      unsigned int v40 = v16[1];
      unsigned int v38 = v16 + 2;
      *uint64_t v23 = (67174465 * (unint64_t)(0xFFFF * (*v16 >> 6))) >> 36;
      v23[1] = (67174465 * (unint64_t)(0xFFFF * (v40 >> 6))) >> 36;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unsigned int v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      unsigned int v42 = v38[1];
      *BOOL v39 = (67174465 * (unint64_t)(0xFFFF * (*v38 >> 6))) >> 36;
      v39[1] = (67174465 * (unint64_t)(0xFFFF * (v42 >> 6))) >> 36;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v35;
    uint64_t v46 = 2 * v15;
    do
    {
      unint64_t v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        unsigned int v49 = v16[1];
        unint64_t v47 = v16 + 2;
        *uint64_t v23 = (67174465 * (unint64_t)(0xFFFF * (*v16 >> 6))) >> 36;
        v23[1] = (67174465 * (unint64_t)(0xFFFF * (v49 >> 6))) >> 36;
        unint64_t v48 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v50 = -(uint64_t)v37;
        do
        {
          unsigned int v51 = v47[1];
          *unint64_t v48 = (67174465 * (unint64_t)(0xFFFF * (*v47 >> 6))) >> 36;
          v48[1] = (67174465 * (unint64_t)(0xFFFF * (v51 >> 6))) >> 36;
          v47 += 2;
          v48 += 2;
          BOOL v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v46);
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_Copy_xf22_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  unint64_t v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2]) {
    unint64_t v17 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v10 = a6[3];
  }
  if (v10)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v24 + 2 * i) >> 6))) >> 32)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v10);
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v17 >> 1;
  uint64_t v29 = v9 & 1;
  if (v17 >> 1 >= (v17 - v29) >> 1) {
    unint64_t v28 = (v17 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      int v37 = v12[1] >> 6;
      uint64_t v30 = v12 + 2;
      *uint64_t v16 = 16 * ((4198405 * (unint64_t)(3584 * (*v12 >> 6))) >> 32) + 4096;
      v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v37)) >> 32) + 4096;
      uint64_t v31 = v16 + 2;
      if (v28)
      {
LABEL_19:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30 >> 6;
          int v34 = v30[1] >> 6;
          v30 += 2;
          _WORD *v31 = 16 * ((4198405 * (unint64_t)(3584 * v33)) >> 32) + 4096;
          v31[1] = 16 * ((4198405 * (unint64_t)(3584 * v34)) >> 32) + 4096;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v30 = v12;
      uint64_t v31 = v16;
      if (v28) {
        goto LABEL_19;
      }
    }
    uint64_t v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v17)
    {
      int v38 = *v30 >> 6;
      int v39 = v30[1] >> 6;
      _WORD *v31 = 16 * ((4198405 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      v31[1] = 16 * ((4198405 * (unint64_t)(3584 * v39)) >> 32) + 4096;
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v10 - v26;
    do
    {
      unsigned int v42 = v12;
      BOOL v43 = v16;
      if (v27)
      {
        int v44 = v12[1] >> 6;
        unsigned int v42 = v12 + 2;
        *uint64_t v16 = 16 * ((4198405 * (unint64_t)(3584 * (*v12 >> 6))) >> 32) + 4096;
        v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v44)) >> 32) + 4096;
        BOOL v43 = v16 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          int v46 = v42[1] >> 6;
          int v47 = 16 * ((4198405 * (unint64_t)(3584 * (*v42 >> 6))) >> 32) + 4096;
          _WORD *v43 = 16 * ((4198405 * (unint64_t)(3584 * (*v42 >> 6))) >> 32) + 4096;
          int v48 = 16 * ((4198405 * (unint64_t)(3584 * v46)) >> 32) + 4096;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v17)
      {
        int v49 = *v42 >> 6;
        int v50 = v42[1] >> 6;
        _WORD *v43 = 16 * ((4198405 * (unint64_t)(3584 * v49)) >> 32) + 4096;
        v43[1] = 16 * ((4198405 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if (v27)
    {
      int v51 = *v12 >> 6;
      int v52 = v12[1] >> 6;
      v12 += 2;
      *uint64_t v16 = 16 * ((4198405 * (unint64_t)(3584 * v51)) >> 32) + 4096;
      v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      v16 += 2;
    }
    if (v28)
    {
      uint64_t v53 = -(uint64_t)v28;
      do
      {
        int v54 = *v12 >> 6;
        int v55 = v12[1] >> 6;
        v12 += 2;
        *uint64_t v16 = 16 * ((4198405 * (unint64_t)(3584 * v54)) >> 32) + 4096;
        v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v55)) >> 32) + 4096;
        v16 += 2;
        BOOL v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      uint64_t v56 = 2 * v28;
    }
    else
    {
      uint64_t v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v17)
    {
      int v57 = *v12 >> 6;
      int v58 = v12[1] >> 6;
      *uint64_t v16 = 16 * ((4198405 * (unint64_t)(3584 * v57)) >> 32) + 4096;
      v16[1] = 16 * ((4198405 * (unint64_t)(3584 * v58)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v16 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  unint64_t v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17) {
    unint64_t v20 = v17;
  }
  if (v10 >= v16) {
    unint64_t v21 = v16;
  }
  else {
    unint64_t v21 = v10;
  }
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
          *(_WORD *)(v25 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  if (v21 >= (v8 & 1u)) {
    uint64_t v28 = v8 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v9;
  unint64_t v30 = v20 >> 1;
  uint64_t v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1) {
    unint64_t v30 = (v20 - v31) >> 1;
  }
  if (v8)
  {
    if (v29)
    {
      int v39 = v13[1] >> 6;
      uint64_t v32 = v13 + 2;
      *uint64_t v19 = 16 * ((4198405 * (unint64_t)(3584 * (*v13 >> 6))) >> 32) + 4096;
      v19[1] = 16 * ((4198405 * (unint64_t)(3584 * v39)) >> 32) + 4096;
      int v33 = v19 + 2;
      if (v30)
      {
LABEL_20:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          int v35 = *v32 >> 6;
          int v36 = v32[1] >> 6;
          v32 += 2;
          _WORD *v33 = 16 * ((4198405 * (unint64_t)(3584 * v35)) >> 32) + 4096;
          v33[1] = 16 * ((4198405 * (unint64_t)(3584 * v36)) >> 32) + 4096;
          v33 += 2;
          BOOL v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v30;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v32 = v13;
      int v33 = v19;
      if (v30) {
        goto LABEL_20;
      }
    }
    uint64_t v38 = 0;
LABEL_26:
    if ((v38 | (unint64_t)v31) < v20)
    {
      int v40 = *v32 >> 6;
      int v41 = v32[1] >> 6;
      _WORD *v33 = 16 * ((4198405 * (unint64_t)(3584 * v40)) >> 32) + 4096;
      v33[1] = 16 * ((4198405 * (unint64_t)(3584 * v41)) >> 32) + 4096;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v28)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v21 - v28;
    do
    {
      int v44 = v13;
      uint64_t v45 = v19;
      if (v29)
      {
        int v46 = v13[1] >> 6;
        int v44 = v13 + 2;
        *uint64_t v19 = 16 * ((4198405 * (unint64_t)(3584 * (*v13 >> 6))) >> 32) + 4096;
        v19[1] = 16 * ((4198405 * (unint64_t)(3584 * v46)) >> 32) + 4096;
        uint64_t v45 = v19 + 2;
      }
      if (v30)
      {
        uint64_t v47 = -(uint64_t)v30;
        do
        {
          int v48 = v44[1] >> 6;
          int v49 = 16 * ((4198405 * (unint64_t)(3584 * (*v44 >> 6))) >> 32) + 4096;
          *uint64_t v45 = 16 * ((4198405 * (unint64_t)(3584 * (*v44 >> 6))) >> 32) + 4096;
          int v50 = 16 * ((4198405 * (unint64_t)(3584 * v48)) >> 32) + 4096;
          v45[1] = v50;
          v44 += 2;
          v45[2] = v49;
          v45[3] = v50;
          v45 += 4;
          BOOL v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      if ((v31 | (2 * v30)) < v20)
      {
        int v51 = *v44 >> 6;
        int v52 = v44[1] >> 6;
        *uint64_t v45 = 16 * ((4198405 * (unint64_t)(3584 * v51)) >> 32) + 4096;
        v45[1] = 16 * ((4198405 * (unint64_t)(3584 * v52)) >> 32) + 4096;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + (v8 & 1) < v21)
  {
    if (v29)
    {
      int v53 = *v13 >> 6;
      int v54 = v13[1] >> 6;
      v13 += 2;
      *uint64_t v19 = 16 * ((4198405 * (unint64_t)(3584 * v53)) >> 32) + 4096;
      v19[1] = 16 * ((4198405 * (unint64_t)(3584 * v54)) >> 32) + 4096;
      v19 += 2;
    }
    if (v30)
    {
      uint64_t v55 = -(uint64_t)v30;
      do
      {
        int v56 = *v13 >> 6;
        int v57 = v13[1] >> 6;
        v13 += 2;
        *uint64_t v19 = 16 * ((4198405 * (unint64_t)(3584 * v56)) >> 32) + 4096;
        v19[1] = 16 * ((4198405 * (unint64_t)(3584 * v57)) >> 32) + 4096;
        v19 += 2;
        BOOL v37 = __CFADD__(v55++, 1);
      }
      while (!v37);
      v30 *= 2;
    }
    if ((v30 | v31) < v20)
    {
      int v58 = *v13 >> 6;
      int v59 = v13[1] >> 6;
      *uint64_t v19 = 16 * ((4198405 * (unint64_t)(3584 * v58)) >> 32) + 4096;
      v19[1] = 16 * ((4198405 * (unint64_t)(3584 * v59)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v16 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  unint64_t v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17) {
    unint64_t v20 = v17;
  }
  if (v10 >= v16) {
    unint64_t v21 = v16;
  }
  else {
    unint64_t v21 = v10;
  }
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
          *(_WORD *)(v25 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 32);
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  unint64_t v28 = v8 & 1;
  if (v21 >= v28) {
    uint64_t v29 = v8 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  char v30 = v9;
  unint64_t v31 = v20 >> 1;
  uint64_t v32 = v9 & 1;
  if (v20 >> 1 >= (v20 - v32) >> 1) {
    unint64_t v31 = (v20 - v32) >> 1;
  }
  if (v8)
  {
    if (v30)
    {
      unsigned int v40 = v13[1];
      int v33 = v13 + 2;
      *uint64_t v19 = 16 * ((4198405 * (unint64_t)(4095 * (*v13 >> 6))) >> 32);
      v19[1] = 16 * ((4198405 * (unint64_t)(4095 * (v40 >> 6))) >> 32);
      uint64_t v34 = v19 + 2;
      if (v31)
      {
LABEL_20:
        uint64_t v35 = -(uint64_t)v31;
        do
        {
          unsigned int v36 = *v33;
          unsigned int v37 = v33[1];
          v33 += 2;
          *uint64_t v34 = 16 * ((4198405 * (unint64_t)(4095 * (v36 >> 6))) >> 32);
          v34[1] = 16 * ((4198405 * (unint64_t)(4095 * (v37 >> 6))) >> 32);
          v34 += 2;
          BOOL v38 = __CFADD__(v35++, 1);
        }
        while (!v38);
        uint64_t v39 = 2 * v31;
        goto LABEL_26;
      }
    }
    else
    {
      int v33 = v13;
      uint64_t v34 = v19;
      if (v31) {
        goto LABEL_20;
      }
    }
    uint64_t v39 = 0;
LABEL_26:
    if ((v39 | (unint64_t)v32) < v20)
    {
      unsigned int v41 = *v33;
      unsigned int v42 = v33[1];
      *uint64_t v34 = 16 * ((4198405 * (unint64_t)(4095 * (v41 >> 6))) >> 32);
      v34[1] = 16 * ((4198405 * (unint64_t)(4095 * (v42 >> 6))) >> 32);
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v29)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v21 - v29;
    do
    {
      uint64_t v45 = v13;
      int v46 = v19;
      if (v30)
      {
        unsigned int v47 = v13[1];
        uint64_t v45 = v13 + 2;
        *uint64_t v19 = 16 * ((4198405 * (unint64_t)(4095 * (*v13 >> 6))) >> 32);
        v19[1] = 16 * ((4198405 * (unint64_t)(4095 * (v47 >> 6))) >> 32);
        int v46 = v19 + 2;
      }
      if (v31)
      {
        uint64_t v48 = -(uint64_t)v31;
        do
        {
          unsigned int v49 = v45[1];
          int v50 = 16 * ((4198405 * (unint64_t)(4095 * (*v45 >> 6))) >> 32);
          *int v46 = 16 * ((4198405 * (unint64_t)(4095 * (*v45 >> 6))) >> 32);
          v46[1] = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
          v45 += 2;
          v46[2] = v50;
          v46[3] = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
          v46 += 4;
          BOOL v38 = __CFADD__(v48++, 1);
        }
        while (!v38);
      }
      if ((v32 | (2 * v31)) < v20)
      {
        unsigned int v51 = *v45;
        unsigned int v52 = v45[1];
        *int v46 = 16 * ((4198405 * (unint64_t)(4095 * (v51 >> 6))) >> 32);
        v46[1] = 16 * ((4198405 * (unint64_t)(4095 * (v52 >> 6))) >> 32);
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v28 < v21)
  {
    if (v30)
    {
      unsigned int v53 = *v13;
      unsigned int v54 = v13[1];
      v13 += 2;
      *uint64_t v19 = 16 * ((4198405 * (unint64_t)(4095 * (v53 >> 6))) >> 32);
      v19[1] = 16 * ((4198405 * (unint64_t)(4095 * (v54 >> 6))) >> 32);
      v19 += 2;
    }
    if (v31)
    {
      uint64_t v55 = -(uint64_t)v31;
      do
      {
        unsigned int v56 = *v13;
        unsigned int v57 = v13[1];
        v13 += 2;
        *uint64_t v19 = 16 * ((4198405 * (unint64_t)(4095 * (v56 >> 6))) >> 32);
        v19[1] = 16 * ((4198405 * (unint64_t)(4095 * (v57 >> 6))) >> 32);
        v19 += 2;
        BOOL v38 = __CFADD__(v55++, 1);
      }
      while (!v38);
      v31 *= 2;
    }
    if ((v31 | v32) < v20)
    {
      unsigned int v58 = *v13;
      unsigned int v59 = v13[1];
      *uint64_t v19 = 16 * ((4198405 * (unint64_t)(4095 * (v58 >> 6))) >> 32);
      v19[1] = 16 * ((4198405 * (unint64_t)(4095 * (v59 >> 6))) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = a7[2] + v26 * v18 + v19;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = -1;
          *(_WORD *)(v28 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32)
                                  + 4096;
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v22 >> 1;
  unint64_t v35 = (v22 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      int v38 = v14[1] >> 6;
      unsigned int v36 = v14 + 2;
      *unint64_t v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
      v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v38)) >> 32) + 4096;
      unsigned int v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unsigned int v36 = v14;
      unsigned int v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      unint64_t v40 = (4198405 * (unint64_t)(3584 * (v36[1] >> 6))) >> 32;
      *unsigned int v37 = 16 * ((4198405 * (unint64_t)(3584 * (*v36 >> 6))) >> 32) + 4096;
      v37[1] = 16 * v40 + 4096;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      uint64_t v44 = v14;
      uint64_t v45 = v21;
      if (v33)
      {
        int v46 = v14[1] >> 6;
        uint64_t v44 = v14 + 2;
        *unint64_t v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v46)) >> 32) + 4096;
        uint64_t v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          unint64_t v48 = (4198405 * (unint64_t)(3584 * (v44[1] >> 6))) >> 32;
          *uint64_t v45 = 16 * ((4198405 * (unint64_t)(3584 * (*v44 >> 6))) >> 32) + 4096;
          v45[1] = 16 * v48 + 4096;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      int v49 = *v14 >> 6;
      int v50 = v14[1] >> 6;
      v14 += 2;
      *unint64_t v21 = 16 * ((4198405 * (unint64_t)(3584 * v49)) >> 32) + 4096;
      v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v50)) >> 32) + 4096;
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        unint64_t v52 = (4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32;
        *unint64_t v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        v21[1] = 16 * v52 + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v19;
    uint64_t v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v22 >> 1;
  unint64_t v33 = (v22 - v10) >> 1;
  if (v32 >= v33) {
    unint64_t v32 = v33;
  }
  if (v12)
  {
    if (v31)
    {
      int v36 = v14[1] >> 6;
      unint64_t v34 = v14 + 2;
      *unint64_t v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
      v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v36)) >> 32) + 4096;
      unint64_t v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v34 = v14;
      unint64_t v35 = v21;
      if (!v32) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = -(uint64_t)v32;
    do
    {
      unint64_t v38 = (4198405 * (unint64_t)(3584 * (v34[1] >> 6))) >> 32;
      *unint64_t v35 = 16 * ((4198405 * (unint64_t)(3584 * (*v34 >> 6))) >> 32) + 4096;
      v35[1] = 16 * v38 + 4096;
      v34 += 2;
      v35 += 2;
      BOOL v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v30;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v31)
      {
        int v44 = v14[1] >> 6;
        unint64_t v42 = v14 + 2;
        *unint64_t v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v44)) >> 32) + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v32)
      {
        uint64_t v45 = -(uint64_t)v32;
        do
        {
          unint64_t v46 = (4198405 * (unint64_t)(3584 * (v42[1] >> 6))) >> 32;
          _WORD *v43 = 16 * ((4198405 * (unint64_t)(3584 * (*v42 >> 6))) >> 32) + 4096;
          v43[1] = 16 * v46 + 4096;
          v42 += 2;
          v43 += 2;
          BOOL v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if (v31)
    {
      int v47 = *v14 >> 6;
      int v48 = v14[1] >> 6;
      v14 += 2;
      *unint64_t v21 = 16 * ((4198405 * (unint64_t)(3584 * v47)) >> 32) + 4096;
      v21[1] = 16 * ((4198405 * (unint64_t)(3584 * v48)) >> 32) + 4096;
      v21 += 2;
    }
    if (v32)
    {
      uint64_t v49 = -(uint64_t)v32;
      do
      {
        unint64_t v50 = (4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32;
        *unint64_t v21 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        v21[1] = 16 * v50 + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v19;
    uint64_t v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v22 >> 1;
  unint64_t v33 = (v22 - v10) >> 1;
  if (v32 >= v33) {
    unint64_t v32 = v33;
  }
  if (v12)
  {
    if (v31)
    {
      unsigned int v36 = v14[1];
      unint64_t v34 = v14 + 2;
      *unint64_t v21 = 16 * ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32);
      v21[1] = 16 * ((4198405 * (unint64_t)(4095 * (v36 >> 6))) >> 32);
      unint64_t v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v34 = v14;
      unint64_t v35 = v21;
      if (!v32) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = -(uint64_t)v32;
    do
    {
      unint64_t v38 = (4198405 * (unint64_t)(4095 * (v34[1] >> 6))) >> 32;
      *unint64_t v35 = 16 * ((4198405 * (unint64_t)(4095 * (*v34 >> 6))) >> 32);
      v35[1] = 16 * v38;
      v34 += 2;
      v35 += 2;
      BOOL v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v30;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v31)
      {
        unsigned int v44 = v14[1];
        unint64_t v42 = v14 + 2;
        *unint64_t v21 = 16 * ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32);
        v21[1] = 16 * ((4198405 * (unint64_t)(4095 * (v44 >> 6))) >> 32);
        uint64_t v43 = v21 + 2;
      }
      if (v32)
      {
        uint64_t v45 = -(uint64_t)v32;
        do
        {
          unint64_t v46 = (4198405 * (unint64_t)(4095 * (v42[1] >> 6))) >> 32;
          _WORD *v43 = 16 * ((4198405 * (unint64_t)(4095 * (*v42 >> 6))) >> 32);
          v43[1] = 16 * v46;
          v42 += 2;
          v43 += 2;
          BOOL v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if (v31)
    {
      unsigned int v47 = *v14;
      unsigned int v48 = v14[1];
      v14 += 2;
      *unint64_t v21 = 16 * ((4198405 * (unint64_t)(4095 * (v47 >> 6))) >> 32);
      v21[1] = 16 * ((4198405 * (unint64_t)(4095 * (v48 >> 6))) >> 32);
      v21 += 2;
    }
    if (v32)
    {
      uint64_t v49 = -(uint64_t)v32;
      do
      {
        unint64_t v50 = (4198405 * (unint64_t)(4095 * (v14[1] >> 6))) >> 32;
        *unint64_t v21 = 16 * ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32);
        v21[1] = 16 * v50;
        v14 += 2;
        v21 += 2;
        BOOL v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      unint64_t v38 = v16 + 2;
      int v40 = ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(3584 * (v16[1] >> 6))) >> 32);
      *uint64_t v23 = (8
            * (((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
             + ((4198405 * (unint64_t)(3584 * (*v16 >> 6))) >> 32))
            + 4104) & 0xFFF0;
      v23[1] = (8 * v40 + 4104) & 0xFFF0;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      int v42 = *v38 >> 6;
      int v43 = v38[1] >> 6;
      int v44 = *(unsigned __int16 *)((char *)v38 + v15) >> 6;
      int v45 = *(unsigned __int16 *)((char *)v38 + v15 + 2) >> 6;
      v38 += 2;
      *BOOL v39 = (8
            * (((4198405 * (unint64_t)(3584 * v44)) >> 32)
             + ((4198405 * (unint64_t)(3584 * v42)) >> 32))
            + 4104) & 0xFFF0;
      v39[1] = (8
              * (((4198405 * (unint64_t)(3584 * v45)) >> 32)
               + ((4198405 * (unint64_t)(3584 * v43)) >> 32))
              + 4104) & 0xFFF0;
      v39 += 2;
      BOOL v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      uint64_t v49 = v16;
      unint64_t v50 = v23;
      if (v9)
      {
        uint64_t v49 = v16 + 2;
        int v51 = ((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(3584 * (v16[1] >> 6))) >> 32);
        *uint64_t v23 = (8
              * (((4198405 * (unint64_t)(3584 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(3584 * (*v16 >> 6))) >> 32))
              + 4104) & 0xFFF0;
        v23[1] = (8 * v51 + 4104) & 0xFFF0;
        unint64_t v50 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v52 = -(uint64_t)v37;
        do
        {
          int v53 = *v49 >> 6;
          int v54 = v49[1] >> 6;
          int v55 = *(unsigned __int16 *)((char *)v49 + v15) >> 6;
          int v56 = *(unsigned __int16 *)((char *)v49 + v15 + 2) >> 6;
          v49 += 2;
          *unint64_t v50 = (8
                * (((4198405 * (unint64_t)(3584 * v55)) >> 32)
                 + ((4198405 * (unint64_t)(3584 * v53)) >> 32))
                + 4104) & 0xFFF0;
          v50[1] = (8
                  * (((4198405 * (unint64_t)(3584 * v56)) >> 32)
                   + ((4198405 * (unint64_t)(3584 * v54)) >> 32))
                  + 4104) & 0xFFF0;
          v50 += 2;
          BOOL v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += v15;
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      int v40 = v16[1] >> 6;
      unint64_t v38 = v16 + 2;
      *uint64_t v23 = 16 * ((4198405 * (unint64_t)(3584 * (*v16 >> 6))) >> 32) + 4096;
      v23[1] = 16 * ((4198405 * (unint64_t)(3584 * v40)) >> 32) + 4096;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      unint64_t v42 = (4198405 * (unint64_t)(3584 * (v38[1] >> 6))) >> 32;
      *BOOL v39 = 16 * ((4198405 * (unint64_t)(3584 * (*v38 >> 6))) >> 32) + 4096;
      v39[1] = 16 * v42 + 4096;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v35;
    uint64_t v46 = 2 * v15;
    do
    {
      unint64_t v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        int v49 = v16[1] >> 6;
        unint64_t v47 = v16 + 2;
        *uint64_t v23 = 16 * ((4198405 * (unint64_t)(3584 * (*v16 >> 6))) >> 32) + 4096;
        v23[1] = 16 * ((4198405 * (unint64_t)(3584 * v49)) >> 32) + 4096;
        unint64_t v48 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v50 = -(uint64_t)v37;
        do
        {
          unint64_t v51 = (4198405 * (unint64_t)(3584 * (v47[1] >> 6))) >> 32;
          *unint64_t v48 = 16 * ((4198405 * (unint64_t)(3584 * (*v47 >> 6))) >> 32) + 4096;
          v48[1] = 16 * v51 + 4096;
          v47 += 2;
          v48 += 2;
          BOOL v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v46);
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      unint64_t v38 = v16 + 2;
      unint64_t v40 = (4198405 * (unint64_t)(4095 * (v16[1] >> 6))) >> 32;
      unsigned int v41 = 4095 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6);
      *uint64_t v23 = (8
            * (((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
             + ((4198405 * (unint64_t)(4095 * (*v16 >> 6))) >> 32))
            + 8) & 0xFFF0;
      v23[1] = (8 * (((4198405 * (unint64_t)v41) >> 32) + v40) + 8) & 0xFFF0;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v42 = -(uint64_t)v37;
    do
    {
      unsigned int v43 = *v38;
      unsigned int v44 = v38[1];
      unsigned int v45 = *(unsigned __int16 *)((char *)v38 + v15);
      unsigned int v46 = *(unsigned __int16 *)((char *)v38 + v15 + 2);
      v38 += 2;
      *BOOL v39 = (8
            * (((4198405 * (unint64_t)(4095 * (v45 >> 6))) >> 32)
             + ((4198405 * (unint64_t)(4095 * (v43 >> 6))) >> 32))
            + 8) & 0xFFF0;
      v39[1] = (8
              * (((4198405 * (unint64_t)(4095 * (v46 >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (v44 >> 6))) >> 32))
              + 8) & 0xFFF0;
      v39 += 2;
      BOOL v47 = __CFADD__(v42++, 1);
    }
    while (!v47);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v26 - v35;
    do
    {
      uint64_t v50 = v16;
      unint64_t v51 = v23;
      if (v9)
      {
        uint64_t v50 = v16 + 2;
        int v52 = ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(4095 * (v16[1] >> 6))) >> 32);
        *uint64_t v23 = (8
              * (((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(4095 * (*v16 >> 6))) >> 32))
              + 8) & 0xFFF0;
        v23[1] = (8 * v52 + 8) & 0xFFF0;
        unint64_t v51 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v53 = -(uint64_t)v37;
        do
        {
          unsigned int v54 = *v50;
          unsigned int v55 = v50[1];
          unsigned int v56 = *(unsigned __int16 *)((char *)v50 + v15);
          unsigned int v57 = *(unsigned __int16 *)((char *)v50 + v15 + 2);
          v50 += 2;
          *unint64_t v51 = (8
                * (((4198405 * (unint64_t)(4095 * (v56 >> 6))) >> 32)
                 + ((4198405 * (unint64_t)(4095 * (v54 >> 6))) >> 32))
                + 8) & 0xFFF0;
          v51[1] = (8
                  * (((4198405 * (unint64_t)(4095 * (v57 >> 6))) >> 32)
                   + ((4198405 * (unint64_t)(4095 * (v55 >> 6))) >> 32))
                  + 8) & 0xFFF0;
          v51 += 2;
          BOOL v47 = __CFADD__(v53++, 1);
        }
        while (!v47);
      }
      v16 += v15;
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      unsigned int v40 = v16[1];
      unint64_t v38 = v16 + 2;
      *uint64_t v23 = 16 * ((4198405 * (unint64_t)(4095 * (*v16 >> 6))) >> 32);
      v23[1] = 16 * ((4198405 * (unint64_t)(4095 * (v40 >> 6))) >> 32);
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      unint64_t v42 = (4198405 * (unint64_t)(4095 * (v38[1] >> 6))) >> 32;
      *BOOL v39 = 16 * ((4198405 * (unint64_t)(4095 * (*v38 >> 6))) >> 32);
      v39[1] = 16 * v42;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v35;
    uint64_t v46 = 2 * v15;
    do
    {
      BOOL v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        unsigned int v49 = v16[1];
        BOOL v47 = v16 + 2;
        *uint64_t v23 = 16 * ((4198405 * (unint64_t)(4095 * (*v16 >> 6))) >> 32);
        v23[1] = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
        unint64_t v48 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v50 = -(uint64_t)v37;
        do
        {
          unint64_t v51 = (4198405 * (unint64_t)(4095 * (v47[1] >> 6))) >> 32;
          *unint64_t v48 = 16 * ((4198405 * (unint64_t)(4095 * (*v47 >> 6))) >> 32);
          v48[1] = 16 * v51;
          v47 += 2;
          v48 += 2;
          BOOL v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v46);
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_Copy_xf22_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v15 = a8[1];
  uint64_t v16 = (_WORD *)(a7[1] + v15 * v14 + 4 * v13);
  unint64_t v17 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v17 >= a6[2]) {
    unint64_t v17 = a6[2];
  }
  if (v10 >= a6[3]) {
    unint64_t v10 = a6[3];
  }
  if (v10)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v14 + 2 * v13;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + v19 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v17)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v24 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v10);
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v17 >> 1;
  uint64_t v29 = v9 & 1;
  if (v17 >> 1 >= (v17 - v29) >> 1) {
    unint64_t v28 = (v17 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      int v37 = v12[1] >> 6;
      uint64_t v30 = v12 + 2;
      *uint64_t v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v12 >> 6))) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v37)) >> 32) << 6) + 4096;
      uint64_t v31 = v16 + 2;
      if (v28)
      {
LABEL_19:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30 >> 6;
          int v34 = v30[1] >> 6;
          v30 += 2;
          _WORD *v31 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v33)) >> 32) << 6) + 4096;
          v31[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v34)) >> 32) << 6) + 4096;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v30 = v12;
      uint64_t v31 = v16;
      if (v28) {
        goto LABEL_19;
      }
    }
    uint64_t v36 = 0;
LABEL_25:
    if ((v36 | (unint64_t)v29) < v17)
    {
      int v38 = *v30 >> 6;
      int v39 = v30[1] >> 6;
      _WORD *v31 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      v31[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    uint64_t v16 = (_WORD *)((char *)v16 + v15);
  }
  if (v10 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v10 - v26;
    do
    {
      unint64_t v42 = v12;
      BOOL v43 = v16;
      if (v27)
      {
        int v44 = v12[1] >> 6;
        unint64_t v42 = v12 + 2;
        *uint64_t v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v12 >> 6))) >> 32) << 6) + 4096;
        v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
        BOOL v43 = v16 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          int v46 = v42[1] >> 6;
          int v47 = ((4198405 * (unint64_t)(896 * (*v42 >> 6))) >> 32 << 6) + 4096;
          _WORD *v43 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v42 >> 6))) >> 32) << 6) + 4096;
          int v48 = ((4198405 * (unint64_t)(896 * v46)) >> 32 << 6) + 4096;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v17)
      {
        int v49 = *v42 >> 6;
        int v50 = v42[1] >> 6;
        _WORD *v43 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
        v43[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      uint64_t v16 = (_WORD *)((char *)v16 + v15);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if (v27)
    {
      int v51 = *v12 >> 6;
      int v52 = v12[1] >> 6;
      v12 += 2;
      *uint64_t v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      v16 += 2;
    }
    if (v28)
    {
      uint64_t v53 = -(uint64_t)v28;
      do
      {
        int v54 = *v12 >> 6;
        int v55 = v12[1] >> 6;
        v12 += 2;
        *uint64_t v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
        v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
        v16 += 2;
        BOOL v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      uint64_t v56 = 2 * v28;
    }
    else
    {
      uint64_t v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v17)
    {
      int v57 = *v12 >> 6;
      int v58 = v12[1] >> 6;
      *uint64_t v16 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
      v16[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v58)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v17 = a6[2];
  unint64_t v16 = a6[3];
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v15 + 4 * v14);
  unint64_t v20 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v20 >= v17) {
    unint64_t v20 = v17;
  }
  if (v10 >= v16) {
    unint64_t v21 = v16;
  }
  else {
    unint64_t v21 = v10;
  }
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v26 = *a3 + *a4 * v8 + 2 * (v9 & 0xFFFFFFFE);
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
          *(_WORD *)(v25 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v21);
  }
  if (v21 >= (v8 & 1u)) {
    uint64_t v28 = v8 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v9;
  unint64_t v30 = v20 >> 1;
  uint64_t v31 = v9 & 1;
  if (v20 >> 1 >= (v20 - v31) >> 1) {
    unint64_t v30 = (v20 - v31) >> 1;
  }
  if (v8)
  {
    if (v29)
    {
      int v39 = v13[1] >> 6;
      uint64_t v32 = v13 + 2;
      *uint64_t v19 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v13 >> 6))) >> 32) << 6) + 4096;
      v19[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
      int v33 = v19 + 2;
      if (v30)
      {
LABEL_20:
        uint64_t v34 = -(uint64_t)v30;
        do
        {
          int v35 = *v32 >> 6;
          int v36 = v32[1] >> 6;
          v32 += 2;
          _WORD *v33 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v35)) >> 32) << 6) + 4096;
          v33[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v36)) >> 32) << 6) + 4096;
          v33 += 2;
          BOOL v37 = __CFADD__(v34++, 1);
        }
        while (!v37);
        uint64_t v38 = 2 * v30;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v32 = v13;
      int v33 = v19;
      if (v30) {
        goto LABEL_20;
      }
    }
    uint64_t v38 = 0;
LABEL_26:
    if ((v38 | (unint64_t)v31) < v20)
    {
      int v40 = *v32 >> 6;
      int v41 = v32[1] >> 6;
      _WORD *v33 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v40)) >> 32) << 6) + 4096;
      v33[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v41)) >> 32) << 6) + 4096;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v21 == v28)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v21 - v28;
    do
    {
      int v44 = v13;
      uint64_t v45 = v19;
      if (v29)
      {
        int v46 = v13[1] >> 6;
        int v44 = v13 + 2;
        *uint64_t v19 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v13 >> 6))) >> 32) << 6) + 4096;
        v19[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v46)) >> 32) << 6) + 4096;
        uint64_t v45 = v19 + 2;
      }
      if (v30)
      {
        uint64_t v47 = -(uint64_t)v30;
        do
        {
          int v48 = v44[1] >> 6;
          int v49 = ((4198405 * (unint64_t)(896 * (*v44 >> 6))) >> 32 << 6) + 4096;
          *uint64_t v45 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v44 >> 6))) >> 32) << 6) + 4096;
          int v50 = ((4198405 * (unint64_t)(896 * v48)) >> 32 << 6) + 4096;
          v45[1] = v50;
          v44 += 2;
          v45[2] = v49;
          v45[3] = v50;
          v45 += 4;
          BOOL v37 = __CFADD__(v47++, 1);
        }
        while (!v37);
      }
      if ((v31 | (2 * v30)) < v20)
      {
        int v51 = *v44 >> 6;
        int v52 = v44[1] >> 6;
        *uint64_t v45 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v51)) >> 32) << 6) + 4096;
        v45[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v52)) >> 32) << 6) + 4096;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + (v8 & 1) < v21)
  {
    if (v29)
    {
      int v53 = *v13 >> 6;
      int v54 = v13[1] >> 6;
      v13 += 2;
      *uint64_t v19 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v53)) >> 32) << 6) + 4096;
      v19[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
      v19 += 2;
    }
    if (v30)
    {
      uint64_t v55 = -(uint64_t)v30;
      do
      {
        int v56 = *v13 >> 6;
        int v57 = v13[1] >> 6;
        v13 += 2;
        *uint64_t v19 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v56)) >> 32) << 6) + 4096;
        v19[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
        v19 += 2;
        BOOL v37 = __CFADD__(v55++, 1);
      }
      while (!v37);
      v30 *= 2;
    }
    if ((v30 | v31) < v20)
    {
      int v58 = *v13 >> 6;
      int v59 = v13[1] >> 6;
      *uint64_t v19 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v58)) >> 32) << 6) + 4096;
      v19[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v59)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a4[1];
  uint64_t v11 = (_WORD *)(a3[1] + v10 * v9 + 2 * (v8 & 0xFFFFFFFE));
  uint64_t v12 = a6[4];
  uint64_t v13 = a6[5];
  uint64_t v14 = a8[1];
  uint64_t v15 = (_WORD *)(a7[1] + v14 * v13 + 4 * v12);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2]) {
    unint64_t v16 = a6[2];
  }
  else {
    unint64_t v16 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (a2[3] >= a6[3]) {
    unint64_t v17 = a6[3];
  }
  else {
    unint64_t v17 = a2[3];
  }
  if (v17)
  {
    uint64_t v57 = a4[1];
    unint64_t v58 = v16;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    unint64_t v21 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    uint64_t v22 = (char *)(*a3 + *a4 * v9 + 2 * (v8 & 0xFFFFFFFE));
    size_t v23 = 2 * v16;
    unint64_t v56 = v17;
    do
    {
      memcpy(v21, v22, v23);
      v22 += v19;
      v21 += v20;
      --v17;
    }
    while (v17);
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    uint64_t v10 = v57;
    unint64_t v16 = v58;
    unint64_t v17 = v56;
  }
  unint64_t v24 = v9 & 1;
  if (v17 >= v24) {
    uint64_t v25 = v9 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v8;
  unint64_t v27 = v16 >> 1;
  uint64_t v28 = v8 & 1;
  if (v16 >> 1 >= (v16 - v28) >> 1) {
    unint64_t v27 = (v16 - v28) >> 1;
  }
  if (v9)
  {
    if (v26)
    {
      __int16 v36 = v11[1] & 0xFFC0;
      char v29 = v11 + 2;
      *uint64_t v15 = *v11 & 0xFFC0;
      v15[1] = v36;
      unint64_t v30 = v15 + 2;
      if (v27)
      {
LABEL_19:
        uint64_t v31 = -(uint64_t)v27;
        do
        {
          __int16 v32 = *v29 & 0xFFC0;
          __int16 v33 = v29[1] & 0xFFC0;
          v29 += 2;
          *unint64_t v30 = v32;
          v30[1] = v33;
          v30 += 2;
          BOOL v34 = __CFADD__(v31++, 1);
        }
        while (!v34);
        uint64_t v35 = 2 * v27;
        goto LABEL_25;
      }
    }
    else
    {
      char v29 = v11;
      unint64_t v30 = v15;
      if (v27) {
        goto LABEL_19;
      }
    }
    uint64_t v35 = 0;
LABEL_25:
    if ((v35 | (unint64_t)v28) < v16)
    {
      __int16 v37 = *v29 & 0xFFC0;
      __int16 v38 = v29[1] & 0xFFC0;
      *unint64_t v30 = v37;
      v30[1] = v38;
    }
    uint64_t v11 = (_WORD *)((char *)v11 + v10);
    uint64_t v15 = (_WORD *)((char *)v15 + v14);
  }
  if (v17 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v17 - v25;
    do
    {
      int v41 = v11;
      unint64_t v42 = (int16x4_t *)v15;
      if (v26)
      {
        __int16 v43 = v11[1] & 0xFFC0;
        int v41 = v11 + 2;
        *uint64_t v15 = *v11 & 0xFFC0;
        v15[1] = v43;
        unint64_t v42 = (int16x4_t *)(v15 + 2);
      }
      if (v27)
      {
        uint64_t v44 = -(uint64_t)v27;
        do
        {
          uint64_t v45 = v41 + 2;
          v46.i32[0] = *v41 & 0xFFC0;
          v46.i32[1] = v41[1] & 0xFFC0;
          *v42++ = vuzp1_s16(v46, v46);
          v41 += 2;
          BOOL v34 = __CFADD__(v44++, 1);
        }
        while (!v34);
      }
      else
      {
        uint64_t v45 = v41;
      }
      if ((v28 | (2 * v27)) < v16)
      {
        __int16 v47 = *v45 & 0xFFC0;
        __int16 v48 = v45[1] & 0xFFC0;
        v42->i16[0] = v47;
        v42->i16[1] = v48;
      }
      uint64_t v11 = (_WORD *)((char *)v11 + v10);
      uint64_t v15 = (_WORD *)((char *)v15 + v14);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v17)
  {
    if (v26)
    {
      __int16 v49 = *v11 & 0xFFC0;
      __int16 v50 = v11[1] & 0xFFC0;
      v11 += 2;
      *uint64_t v15 = v49;
      v15[1] = v50;
      v15 += 2;
    }
    if (v27)
    {
      uint64_t v51 = -(uint64_t)v27;
      do
      {
        __int16 v52 = *v11 & 0xFFC0;
        __int16 v53 = v11[1] & 0xFFC0;
        v11 += 2;
        *uint64_t v15 = v52;
        v15[1] = v53;
        v15 += 2;
        BOOL v34 = __CFADD__(v51++, 1);
      }
      while (!v34);
      v27 *= 2;
    }
    if ((v27 | v28) < v16)
    {
      __int16 v54 = v11[1] & 0xFFC0;
      *uint64_t v15 = *v11 & 0xFFC0;
      v15[1] = v54;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = a7[2] + v26 * v18 + v19;
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    uint64_t v29 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v27 + 2 * i) = -1;
          *(_WORD *)(v28 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  unint64_t v34 = v22 >> 1;
  unint64_t v35 = (v22 - v10) >> 1;
  if (v34 >= v35) {
    unint64_t v34 = v35;
  }
  if (v12)
  {
    if (v33)
    {
      int v38 = v14[1] >> 6;
      __int16 v36 = v14 + 2;
      *unint64_t v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
      __int16 v37 = v21 + 2;
      if (!v34)
      {
LABEL_25:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      __int16 v36 = v14;
      __int16 v37 = v21;
      if (!v34) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = -(uint64_t)v34;
    do
    {
      unint64_t v40 = (4198405 * (unint64_t)(896 * (v36[1] >> 6))) >> 32;
      *__int16 v37 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v36 >> 6))) >> 32) << 6) + 4096;
      v37[1] = ((_WORD)v40 << 6) + 4096;
      v36 += 2;
      v37 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v32)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v32;
    do
    {
      uint64_t v44 = v14;
      uint64_t v45 = v21;
      if (v33)
      {
        int v46 = v14[1] >> 6;
        uint64_t v44 = v14 + 2;
        *unint64_t v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v46)) >> 32) << 6) + 4096;
        uint64_t v45 = v21 + 2;
      }
      if (v34)
      {
        uint64_t v47 = -(uint64_t)v34;
        do
        {
          unint64_t v48 = (4198405 * (unint64_t)(896 * (v44[1] >> 6))) >> 32;
          *uint64_t v45 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v44 >> 6))) >> 32) << 6) + 4096;
          v45[1] = ((_WORD)v48 << 6) + 4096;
          v44 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v47++, 1);
        }
        while (!v41);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v31 < v8)
  {
    if (v33)
    {
      int v49 = *v14 >> 6;
      int v50 = v14[1] >> 6;
      v14 += 2;
      *unint64_t v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
      v21 += 2;
    }
    if (v34)
    {
      uint64_t v51 = -(uint64_t)v34;
      do
      {
        unint64_t v52 = (4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32;
        *unint64_t v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        v21[1] = ((_WORD)v52 << 6) + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v41 = __CFADD__(v51++, 1);
      }
      while (!v41);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + ((2 * (v10 + v9)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  if (v11 - (v10 + v9) >= (unint64_t)(v17 - v16)) {
    unint64_t v22 = v17 - v16;
  }
  else {
    unint64_t v22 = v11 - (v10 + v9);
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v19;
    uint64_t v27 = *a3 + v24 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v26 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v22 >> 1;
  unint64_t v33 = (v22 - v10) >> 1;
  if (v32 >= v33) {
    unint64_t v32 = v33;
  }
  if (v12)
  {
    if (v31)
    {
      int v36 = v14[1] >> 6;
      unint64_t v34 = v14 + 2;
      *unint64_t v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v36)) >> 32) << 6) + 4096;
      unint64_t v35 = v21 + 2;
      if (!v32)
      {
LABEL_25:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        unint64_t v21 = (_WORD *)((char *)v21 + v20);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v34 = v14;
      unint64_t v35 = v21;
      if (!v32) {
        goto LABEL_25;
      }
    }
    uint64_t v37 = -(uint64_t)v32;
    do
    {
      unint64_t v38 = (4198405 * (unint64_t)(896 * (v34[1] >> 6))) >> 32;
      *unint64_t v35 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v34 >> 6))) >> 32) << 6) + 4096;
      v35[1] = ((_WORD)v38 << 6) + 4096;
      v34 += 2;
      v35 += 2;
      BOOL v39 = __CFADD__(v37++, 1);
    }
    while (!v39);
    goto LABEL_25;
  }
LABEL_26:
  if (v8 == v30)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v30;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v31)
      {
        int v44 = v14[1] >> 6;
        unint64_t v42 = v14 + 2;
        *unint64_t v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
        uint64_t v43 = v21 + 2;
      }
      if (v32)
      {
        uint64_t v45 = -(uint64_t)v32;
        do
        {
          unint64_t v46 = (4198405 * (unint64_t)(896 * (v42[1] >> 6))) >> 32;
          _WORD *v43 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v42 >> 6))) >> 32) << 6) + 4096;
          v43[1] = ((_WORD)v46 << 6) + 4096;
          v42 += 2;
          v43 += 2;
          BOOL v39 = __CFADD__(v45++, 1);
        }
        while (!v39);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v29 < v8)
  {
    if (v31)
    {
      int v47 = *v14 >> 6;
      int v48 = v14[1] >> 6;
      v14 += 2;
      *unint64_t v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v47)) >> 32) << 6) + 4096;
      v21[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
      v21 += 2;
    }
    if (v32)
    {
      uint64_t v49 = -(uint64_t)v32;
      do
      {
        unint64_t v50 = (4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32;
        *unint64_t v21 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        v21[1] = ((_WORD)v50 << 6) + 4096;
        v14 += 2;
        v21 += 2;
        BOOL v39 = __CFADD__(v49++, 1);
      }
      while (!v39);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      unint64_t v38 = v16 + 2;
      int v40 = ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
          + ((4198405 * (unint64_t)(896 * (v16[1] >> 6))) >> 32);
      *uint64_t v23 = (32
            * (((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
             + ((4198405 * (unint64_t)(896 * (*v16 >> 6))) >> 32))
            + 4128) & 0xFFC0;
      v23[1] = (32 * v40 + 4128) & 0xFFC0;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      int v42 = *v38 >> 6;
      int v43 = v38[1] >> 6;
      int v44 = *(unsigned __int16 *)((char *)v38 + v15) >> 6;
      int v45 = *(unsigned __int16 *)((char *)v38 + v15 + 2) >> 6;
      v38 += 2;
      *BOOL v39 = (32
            * (((4198405 * (unint64_t)(896 * v44)) >> 32)
             + ((4198405 * (unint64_t)(896 * v42)) >> 32))
            + 4128) & 0xFFC0;
      v39[1] = (32
              * (((4198405 * (unint64_t)(896 * v45)) >> 32)
               + ((4198405 * (unint64_t)(896 * v43)) >> 32))
              + 4128) & 0xFFC0;
      v39 += 2;
      BOOL v46 = __CFADD__(v41++, 1);
    }
    while (!v46);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v26 - v35;
    do
    {
      uint64_t v49 = v16;
      unint64_t v50 = v23;
      if (v9)
      {
        uint64_t v49 = v16 + 2;
        int v51 = ((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
            + ((4198405 * (unint64_t)(896 * (v16[1] >> 6))) >> 32);
        *uint64_t v23 = (32
              * (((4198405 * (unint64_t)(896 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
               + ((4198405 * (unint64_t)(896 * (*v16 >> 6))) >> 32))
              + 4128) & 0xFFC0;
        v23[1] = (32 * v51 + 4128) & 0xFFC0;
        unint64_t v50 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v52 = -(uint64_t)v37;
        do
        {
          int v53 = *v49 >> 6;
          int v54 = v49[1] >> 6;
          int v55 = *(unsigned __int16 *)((char *)v49 + v15) >> 6;
          int v56 = *(unsigned __int16 *)((char *)v49 + v15 + 2) >> 6;
          v49 += 2;
          *unint64_t v50 = (32
                * (((4198405 * (unint64_t)(896 * v55)) >> 32)
                 + ((4198405 * (unint64_t)(896 * v53)) >> 32))
                + 4128) & 0xFFC0;
          v50[1] = (32
                  * (((4198405 * (unint64_t)(896 * v56)) >> 32)
                   + ((4198405 * (unint64_t)(896 * v54)) >> 32))
                  + 4128) & 0xFFC0;
          v50 += 2;
          BOOL v46 = __CFADD__(v52++, 1);
        }
        while (!v46);
      }
      v16 += v15;
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * v12 + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  if (v24 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  else {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  unint64_t v36 = v25 - (v9 & 1);
  if (v25 >> 1 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      int v40 = v16[1] >> 6;
      unint64_t v38 = v16 + 2;
      *uint64_t v23 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v16 >> 6))) >> 32) << 6) + 4096;
      v23[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v40)) >> 32) << 6) + 4096;
      BOOL v39 = v23 + 2;
      if (!v37)
      {
LABEL_29:
        v16 += v15;
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v38 = v16;
      BOOL v39 = v23;
      if (!v37) {
        goto LABEL_29;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      unint64_t v42 = (4198405 * (unint64_t)(896 * (v38[1] >> 6))) >> 32;
      *BOOL v39 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v38 >> 6))) >> 32) << 6) + 4096;
      v39[1] = ((_WORD)v42 << 6) + 4096;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v35;
    uint64_t v46 = 2 * v15;
    do
    {
      unint64_t v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        int v49 = v16[1] >> 6;
        unint64_t v47 = v16 + 2;
        *uint64_t v23 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v16 >> 6))) >> 32) << 6) + 4096;
        v23[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
        unint64_t v48 = v23 + 2;
      }
      if (v37)
      {
        uint64_t v50 = -(uint64_t)v37;
        do
        {
          unint64_t v51 = (4198405 * (unint64_t)(896 * (v47[1] >> 6))) >> 32;
          *unint64_t v48 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v47 >> 6))) >> 32) << 6) + 4096;
          v48[1] = ((_WORD)v51 << 6) + 4096;
          v47 += 2;
          v48 += 2;
          BOOL v43 = __CFADD__(v50++, 1);
        }
        while (!v43);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v46);
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  unint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v18 - v17) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  }
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  else {
    unint64_t v24 = v13 - v12;
  }
  if (v24)
  {
    unint64_t v54 = v23;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    if (v12 >= v9) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = (char *)(*a3 + *a4 * v12 + v14 + v27);
    uint64_t v29 = (char *)(*a7 + v26 * v19 + 2 * v17);
    size_t v30 = 2 * v23;
    unint64_t v56 = v24;
    uint64_t v31 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, v30);
      v28 += v25;
      v29 += v26;
      BOOL v32 = __CFADD__(v31++, 1);
    }
    while (!v32);
    unint64_t v24 = v56;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
    unint64_t v23 = v54;
  }
  if (v24 >= v11) {
    unint64_t v33 = v11;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v23 >> 1 >= (v23 - v10) >> 1) {
    unint64_t v34 = (v23 - v10) >> 1;
  }
  else {
    unint64_t v34 = v23 >> 1;
  }
  if (v11)
  {
    if (v8)
    {
      uint64_t v35 = v16 + 2;
      int v37 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6) + (v16[1] >> 6);
      *uint64_t v22 = (32 * ((*(unsigned __int16 *)((char *)v16 + v15) >> 6) + (*v16 >> 6)) + 32) & 0xFFC0;
      v22[1] = (32 * v37 + 32) & 0xFFC0;
      unint64_t v36 = v22 + 2;
      if (!v34)
      {
LABEL_29:
        v16 += v15;
        uint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v35 = v16;
      unint64_t v36 = v22;
      if (!v34) {
        goto LABEL_29;
      }
    }
    uint64_t v38 = -(uint64_t)v34;
    do
    {
      unsigned int v39 = *v35;
      unsigned int v40 = v35[1];
      int v41 = *(unsigned __int16 *)((char *)v35 + v15) >> 6;
      int v42 = *(unsigned __int16 *)((char *)v35 + v15 + 2) >> 6;
      v35 += 2;
      *unint64_t v36 = (32 * (v41 + (v39 >> 6)) + 32) & 0xFFC0;
      v36[1] = (32 * (v42 + (v40 >> 6)) + 32) & 0xFFC0;
      v36 += 2;
      BOOL v32 = __CFADD__(v38++, 1);
    }
    while (!v32);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v33)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v24 - v33;
    do
    {
      unint64_t v45 = v16;
      uint64_t v46 = v22;
      if (v8)
      {
        unint64_t v45 = v16 + 2;
        int v47 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6) + (v16[1] >> 6);
        *uint64_t v22 = (32 * ((*(unsigned __int16 *)((char *)v16 + v15) >> 6) + (*v16 >> 6)) + 32) & 0xFFC0;
        v22[1] = (32 * v47 + 32) & 0xFFC0;
        uint64_t v46 = v22 + 2;
      }
      if (v34)
      {
        uint64_t v48 = -(uint64_t)v34;
        do
        {
          unsigned int v49 = *v45;
          unsigned int v50 = v45[1];
          int v51 = *(unsigned __int16 *)((char *)v45 + v15) >> 6;
          int v52 = *(unsigned __int16 *)((char *)v45 + v15 + 2) >> 6;
          v45 += 2;
          *uint64_t v46 = (32 * (v51 + (v49 >> 6)) + 32) & 0xFFC0;
          v46[1] = (32 * (v52 + (v50 >> 6)) + 32) & 0xFFC0;
          v46 += 2;
          BOOL v32 = __CFADD__(v48++, 1);
        }
        while (!v32);
      }
      v16 += v15;
      uint64_t v22 = (_WORD *)((char *)v22 + v21);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = v9 & 1;
  uint64_t v12 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v13 = v10 & 1;
  unint64_t v14 = v13 + v10;
  uint64_t v15 = (*(_DWORD *)(a2 + 24) + v10) & 0xFFFFFFFE;
  uint64_t v16 = 2 * (v11 + v9);
  uint64_t v17 = a4[1];
  uint64_t v18 = (_WORD *)(a3[1] + v17 * (v13 + v10) + (v16 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v19 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v20 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v21 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v22 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v23 = 2 * v19;
  uint64_t v24 = a8[1];
  uint64_t v25 = (_WORD *)(a7[1] + ((unint64_t)(v24 * v21) >> 1) + ((2 * v19) & 0x7FFFFFFFFFFFFFFELL));
  if (v12 - (v11 + v9) >= (unint64_t)(v20 - v19)) {
    unint64_t v26 = v20 - v19;
  }
  else {
    unint64_t v26 = v12 - (v11 + v9);
  }
  unint64_t v27 = v15 - v14;
  if (v15 - v14 >= v22 - v21) {
    unint64_t v27 = v22 - v21;
  }
  if (v27)
  {
    unint64_t v52 = v27;
    uint64_t v53 = a4[1];
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    if (v14 >= v10) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = (char *)(*a3 + *a4 * v14 + v16 + v30);
    BOOL v32 = (char *)(*a7 + v29 * v21 + v23);
    unint64_t v51 = v26;
    size_t v33 = 2 * v26;
    uint64_t v34 = -(uint64_t)v27;
    do
    {
      memcpy(v32, v31, v33);
      v31 += v28;
      v32 += v29;
      BOOL v35 = __CFADD__(v34++, 1);
    }
    while (!v35);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v13 = *(void *)(a2 + 40) & 1;
    uint64_t v11 = v9 & 1;
    unint64_t v27 = v52;
    uint64_t v17 = v53;
    unint64_t v26 = v51;
  }
  if (v27 >= v13) {
    unint64_t v36 = v13;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v26 >> 1 >= (v26 - v11) >> 1) {
    unint64_t v37 = (v26 - v11) >> 1;
  }
  else {
    unint64_t v37 = v26 >> 1;
  }
  if (v13)
  {
    if (v9)
    {
      __int16 v40 = v18[1] & 0xFFC0;
      uint64_t v38 = v18 + 2;
      _WORD *v25 = *v18 & 0xFFC0;
      v25[1] = v40;
      unsigned int v39 = v25 + 2;
      if (!v37)
      {
LABEL_28:
        v18 += v17;
        uint64_t v25 = (_WORD *)((char *)v25 + v24);
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v38 = v18;
      unsigned int v39 = v25;
      if (!v37) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v37;
    do
    {
      __int16 v42 = v38[1] & 0xFFC0;
      *unsigned int v39 = *v38 & 0xFFC0;
      v39[1] = v42;
      v38 += 2;
      v39 += 2;
      BOOL v35 = __CFADD__(v41++, 1);
    }
    while (!v35);
    goto LABEL_28;
  }
LABEL_29:
  if (v27 != v36)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v27 - v36;
    do
    {
      unint64_t v45 = v18;
      uint64_t v46 = v25;
      if (v9)
      {
        __int16 v47 = v18[1] & 0xFFC0;
        unint64_t v45 = v18 + 2;
        _WORD *v25 = *v18 & 0xFFC0;
        v25[1] = v47;
        uint64_t v46 = v25 + 2;
      }
      if (v37)
      {
        uint64_t v48 = -(uint64_t)v37;
        do
        {
          __int16 v49 = v45[1] & 0xFFC0;
          *uint64_t v46 = *v45 & 0xFFC0;
          v46[1] = v49;
          v45 += 2;
          v46 += 2;
          BOOL v35 = __CFADD__(v48++, 1);
        }
        while (!v35);
      }
      v18 += v17;
      uint64_t v25 = (_WORD *)((char *)v25 + v24);
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_Copy_xf22_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v13 + 2 * v14);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  if (v10 >= v15) {
    unint64_t v10 = v15;
  }
  if (v10)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = a7[2] + v22 * v13;
    uint64_t v24 = *a7 + *a8 * v13;
    uint64_t v25 = *a4;
    uint64_t v26 = v23 + v14;
    uint64_t v27 = v24 + v14;
    uint64_t v28 = *a3 + v25 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v26 + i) = -1;
          *(unsigned char *)(v27 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v21;
      v26 += v22;
      ++v20;
    }
    while (v20 != v10);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v30 = v8 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  unint64_t v32 = v19 >> 1;
  uint64_t v33 = v9 & 1;
  if (v19 >> 1 >= (v19 - v33) >> 1) {
    unint64_t v32 = (v19 - v33) >> 1;
  }
  if (v8)
  {
    if (v31)
    {
      int v41 = v12[1] >> 6;
      uint64_t v34 = v12 + 2;
      *uint64_t v18 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v41)) >> 32) + 16;
      BOOL v35 = v18 + 2;
      if (v32)
      {
LABEL_20:
        uint64_t v36 = -(uint64_t)v32;
        do
        {
          int v37 = *v34 >> 6;
          int v38 = v34[1] >> 6;
          v34 += 2;
          *BOOL v35 = ((4198405 * (unint64_t)(224 * v37)) >> 32) + 16;
          v35[1] = ((4198405 * (unint64_t)(224 * v38)) >> 32) + 16;
          v35 += 2;
          BOOL v39 = __CFADD__(v36++, 1);
        }
        while (!v39);
        uint64_t v40 = 2 * v32;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v34 = v12;
      BOOL v35 = v18;
      if (v32) {
        goto LABEL_20;
      }
    }
    uint64_t v40 = 0;
LABEL_26:
    if ((v40 | (unint64_t)v33) < v19)
    {
      int v42 = *v34 >> 6;
      int v43 = v34[1] >> 6;
      *BOOL v35 = ((4198405 * (unint64_t)(224 * v42)) >> 32) + 16;
      v35[1] = ((4198405 * (unint64_t)(224 * v43)) >> 32) + 16;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v10 == v30)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v10 - v30;
    do
    {
      uint64_t v46 = v12;
      __int16 v47 = v18;
      if (v31)
      {
        int v48 = v12[1] >> 6;
        uint64_t v46 = v12 + 2;
        *uint64_t v18 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
        v18[1] = ((4198405 * (unint64_t)(224 * v48)) >> 32) + 16;
        __int16 v47 = v18 + 2;
      }
      if (v32)
      {
        uint64_t v49 = -(uint64_t)v32;
        do
        {
          int v50 = v46[1] >> 6;
          int v51 = ((4198405 * (unint64_t)(224 * (*v46 >> 6))) >> 32) + 16;
          *__int16 v47 = ((4198405 * (unint64_t)(224 * (*v46 >> 6))) >> 32) + 16;
          int v52 = ((4198405 * (unint64_t)(224 * v50)) >> 32) + 16;
          v47[1] = v52;
          v46 += 2;
          v47[2] = v51;
          v47[3] = v52;
          v47 += 4;
          BOOL v39 = __CFADD__(v49++, 1);
        }
        while (!v39);
      }
      if ((v33 | (2 * v32)) < v19)
      {
        int v53 = *v46 >> 6;
        int v54 = v46[1] >> 6;
        *__int16 v47 = ((4198405 * (unint64_t)(224 * v53)) >> 32) + 16;
        v47[1] = ((4198405 * (unint64_t)(224 * v54)) >> 32) + 16;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += v17;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + (v8 & 1) < v10)
  {
    if (v31)
    {
      int v55 = *v12 >> 6;
      int v56 = v12[1] >> 6;
      v12 += 2;
      *uint64_t v18 = ((4198405 * (unint64_t)(224 * v55)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v56)) >> 32) + 16;
      v18 += 2;
    }
    if (v32)
    {
      uint64_t v57 = -(uint64_t)v32;
      do
      {
        int v58 = *v12 >> 6;
        int v59 = v12[1] >> 6;
        v12 += 2;
        *uint64_t v18 = ((4198405 * (unint64_t)(224 * v58)) >> 32) + 16;
        v18[1] = ((4198405 * (unint64_t)(224 * v59)) >> 32) + 16;
        v18 += 2;
        BOOL v39 = __CFADD__(v57++, 1);
      }
      while (!v39);
      uint64_t v60 = 2 * v32;
    }
    else
    {
      uint64_t v60 = 0;
    }
    if ((v60 | (unint64_t)v33) < v19)
    {
      int v61 = *v12 >> 6;
      int v62 = v12[1] >> 6;
      *uint64_t v18 = ((4198405 * (unint64_t)(224 * v61)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v62)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v13 + 2 * v14);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  if (v10 >= v15) {
    unint64_t v10 = v15;
  }
  if (v10)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = *a7 + *a8 * v13 + v14;
    uint64_t v24 = *a3 + *a4 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
          *(unsigned char *)(v23 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v24 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v10);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  if (v10 >= (v8 & 1u)) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v19 >> 1;
  uint64_t v29 = v9 & 1;
  if (v19 >> 1 >= (v19 - v29) >> 1) {
    unint64_t v28 = (v19 - v29) >> 1;
  }
  if (v8)
  {
    if (v27)
    {
      int v37 = v12[1] >> 6;
      uint64_t v30 = v12 + 2;
      *uint64_t v18 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v37)) >> 32) + 16;
      char v31 = v18 + 2;
      if (v28)
      {
LABEL_20:
        uint64_t v32 = -(uint64_t)v28;
        do
        {
          int v33 = *v30 >> 6;
          int v34 = v30[1] >> 6;
          v30 += 2;
          unsigned char *v31 = ((4198405 * (unint64_t)(224 * v33)) >> 32) + 16;
          v31[1] = ((4198405 * (unint64_t)(224 * v34)) >> 32) + 16;
          v31 += 2;
          BOOL v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
        uint64_t v36 = 2 * v28;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v30 = v12;
      char v31 = v18;
      if (v28) {
        goto LABEL_20;
      }
    }
    uint64_t v36 = 0;
LABEL_26:
    if ((v36 | (unint64_t)v29) < v19)
    {
      int v38 = *v30 >> 6;
      int v39 = v30[1] >> 6;
      unsigned char *v31 = ((4198405 * (unint64_t)(224 * v38)) >> 32) + 16;
      v31[1] = ((4198405 * (unint64_t)(224 * v39)) >> 32) + 16;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v10 == v26)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v10 - v26;
    do
    {
      int v42 = v12;
      int v43 = v18;
      if (v27)
      {
        int v44 = v12[1] >> 6;
        int v42 = v12 + 2;
        *uint64_t v18 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
        v18[1] = ((4198405 * (unint64_t)(224 * v44)) >> 32) + 16;
        int v43 = v18 + 2;
      }
      if (v28)
      {
        uint64_t v45 = -(uint64_t)v28;
        do
        {
          int v46 = v42[1] >> 6;
          int v47 = ((4198405 * (unint64_t)(224 * (*v42 >> 6))) >> 32) + 16;
          unsigned char *v43 = ((4198405 * (unint64_t)(224 * (*v42 >> 6))) >> 32) + 16;
          int v48 = ((4198405 * (unint64_t)(224 * v46)) >> 32) + 16;
          v43[1] = v48;
          v42 += 2;
          v43[2] = v47;
          v43[3] = v48;
          v43 += 4;
          BOOL v35 = __CFADD__(v45++, 1);
        }
        while (!v35);
      }
      if ((v29 | (2 * v28)) < v19)
      {
        int v49 = *v42 >> 6;
        int v50 = v42[1] >> 6;
        unsigned char *v43 = ((4198405 * (unint64_t)(224 * v49)) >> 32) + 16;
        v43[1] = ((4198405 * (unint64_t)(224 * v50)) >> 32) + 16;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += v17;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + (v8 & 1) < v10)
  {
    if (v27)
    {
      int v51 = *v12 >> 6;
      int v52 = v12[1] >> 6;
      v12 += 2;
      *uint64_t v18 = ((4198405 * (unint64_t)(224 * v51)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v52)) >> 32) + 16;
      v18 += 2;
    }
    if (v28)
    {
      uint64_t v53 = -(uint64_t)v28;
      do
      {
        int v54 = *v12 >> 6;
        int v55 = v12[1] >> 6;
        v12 += 2;
        *uint64_t v18 = ((4198405 * (unint64_t)(224 * v54)) >> 32) + 16;
        v18[1] = ((4198405 * (unint64_t)(224 * v55)) >> 32) + 16;
        v18 += 2;
        BOOL v35 = __CFADD__(v53++, 1);
      }
      while (!v35);
      uint64_t v56 = 2 * v28;
    }
    else
    {
      uint64_t v56 = 0;
    }
    if ((v56 | (unint64_t)v29) < v19)
    {
      int v57 = *v12 >> 6;
      int v58 = v12[1] >> 6;
      *uint64_t v18 = ((4198405 * (unint64_t)(224 * v57)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v58)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[3];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v13 + 2 * v14);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  if (v10 >= v15) {
    unint64_t v10 = v15;
  }
  if (v10)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a4;
    uint64_t v22 = *a8;
    uint64_t v23 = *a7 + *a8 * v13 + v14;
    uint64_t v24 = *a3 + *a4 * v8 + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
          *(unsigned char *)(v23 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v24 + 2 * i) >> 6))) >> 32;
      }
      v24 += v21;
      v23 += v22;
      ++v20;
    }
    while (v20 != v10);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v26 = v8 & 1;
  if (v10 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v19 >> 1;
  uint64_t v30 = v9 & 1;
  if (v19 >> 1 >= (v19 - v30) >> 1) {
    unint64_t v29 = (v19 - v30) >> 1;
  }
  if (v8)
  {
    if (v28)
    {
      unsigned int v38 = v12[1];
      char v31 = v12 + 2;
      *uint64_t v18 = (4198405 * (unint64_t)(255 * (*v12 >> 6))) >> 32;
      v18[1] = (4198405 * (unint64_t)(255 * (v38 >> 6))) >> 32;
      uint64_t v32 = v18 + 2;
      if (v29)
      {
LABEL_20:
        uint64_t v33 = -(uint64_t)v29;
        do
        {
          unsigned int v34 = *v31;
          unsigned int v35 = v31[1];
          v31 += 2;
          unsigned char *v32 = (4198405 * (unint64_t)(255 * (v34 >> 6))) >> 32;
          v32[1] = (4198405 * (unint64_t)(255 * (v35 >> 6))) >> 32;
          v32 += 2;
          BOOL v36 = __CFADD__(v33++, 1);
        }
        while (!v36);
        uint64_t v37 = 2 * v29;
        goto LABEL_26;
      }
    }
    else
    {
      char v31 = v12;
      uint64_t v32 = v18;
      if (v29) {
        goto LABEL_20;
      }
    }
    uint64_t v37 = 0;
LABEL_26:
    if ((v37 | (unint64_t)v30) < v19)
    {
      unsigned int v39 = *v31;
      unsigned int v40 = v31[1];
      unsigned char *v32 = (4198405 * (unint64_t)(255 * (v39 >> 6))) >> 32;
      v32[1] = (4198405 * (unint64_t)(255 * (v40 >> 6))) >> 32;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v10 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v10 - v27;
    do
    {
      int v43 = v12;
      int v44 = v18;
      if (v28)
      {
        unsigned int v45 = v12[1];
        int v43 = v12 + 2;
        *uint64_t v18 = (4198405 * (unint64_t)(255 * (*v12 >> 6))) >> 32;
        v18[1] = (4198405 * (unint64_t)(255 * (v45 >> 6))) >> 32;
        int v44 = v18 + 2;
      }
      if (v29)
      {
        uint64_t v46 = -(uint64_t)v29;
        do
        {
          unint64_t v47 = (4198405 * (unint64_t)(255 * (*v43 >> 6))) >> 32;
          unint64_t v48 = (4198405 * (unint64_t)(255 * (v43[1] >> 6))) >> 32;
          *int v44 = v47;
          v44[1] = v48;
          v43 += 2;
          v44[2] = v47;
          v44[3] = v48;
          v44 += 4;
          BOOL v36 = __CFADD__(v46++, 1);
        }
        while (!v36);
      }
      if ((v30 | (2 * v29)) < v19)
      {
        unsigned int v49 = *v43;
        unint64_t v50 = (4198405 * (unint64_t)(255 * (v43[1] >> 6))) >> 32;
        *int v44 = (4198405 * (unint64_t)(255 * (v49 >> 6))) >> 32;
        v44[1] = v50;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += v17;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v10)
  {
    if (v28)
    {
      unsigned int v51 = *v12;
      unsigned int v52 = v12[1];
      v12 += 2;
      *uint64_t v18 = (4198405 * (unint64_t)(255 * (v51 >> 6))) >> 32;
      v18[1] = (4198405 * (unint64_t)(255 * (v52 >> 6))) >> 32;
      v18 += 2;
    }
    if (v29)
    {
      uint64_t v53 = -(uint64_t)v29;
      do
      {
        unsigned int v54 = *v12;
        unsigned int v55 = v12[1];
        v12 += 2;
        *uint64_t v18 = (4198405 * (unint64_t)(255 * (v54 >> 6))) >> 32;
        v18[1] = (4198405 * (unint64_t)(255 * (v55 >> 6))) >> 32;
        v18 += 2;
        BOOL v36 = __CFADD__(v53++, 1);
      }
      while (!v36);
      uint64_t v56 = 2 * v29;
    }
    else
    {
      uint64_t v56 = 0;
    }
    if ((v56 | (unint64_t)v30) < v19)
    {
      unsigned int v57 = *v12;
      unsigned int v58 = v12[1];
      *uint64_t v18 = (4198405 * (unint64_t)(255 * (v57 >> 6))) >> 32;
      v18[1] = (4198405 * (unint64_t)(255 * (v58 >> 6))) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = 2 * (v10 + v9);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16) {
    unint64_t v21 = v17 - v16;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = *a4;
    uint64_t v26 = a7[2] + v24 * v18 + v16;
    uint64_t v27 = *a7 + *a8 * v18 + v16;
    uint64_t v28 = *a3 + v25 * v11 + v12;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v26 + i) = -1;
          *(unsigned char *)(v27 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v28 += v25;
      v27 += v23;
      v26 += v24;
      ++v22;
    }
    while (v22 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v10 = v9 & 1;
  }
  unint64_t v30 = v11 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v11 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  unint64_t v32 = v21 >> 1;
  unint64_t v33 = v21 - v10;
  if (v32 >= v33 >> 1) {
    unint64_t v34 = v33 >> 1;
  }
  else {
    unint64_t v34 = v32;
  }
  if (v11)
  {
    if (v9)
    {
      int v37 = v14[1] >> 6;
      unsigned int v35 = v14 + 2;
      *uint64_t v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v37)) >> 32) + 16;
      BOOL v36 = v20 + 2;
      if (!v34)
      {
LABEL_26:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      unsigned int v35 = v14;
      BOOL v36 = v20;
      if (!v34) {
        goto LABEL_26;
      }
    }
    uint64_t v38 = -(uint64_t)v34;
    do
    {
      unint64_t v39 = (4198405 * (unint64_t)(224 * (v35[1] >> 6))) >> 32;
      *BOOL v36 = ((4198405 * (unint64_t)(224 * (*v35 >> 6))) >> 32) + 16;
      v36[1] = v39 + 16;
      v36 += 2;
      v35 += 2;
      BOOL v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v31)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v8 - v31;
    do
    {
      int v43 = v14;
      int v44 = v20;
      if (v9)
      {
        int v45 = v14[1] >> 6;
        int v43 = v14 + 2;
        *uint64_t v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = ((4198405 * (unint64_t)(224 * v45)) >> 32) + 16;
        int v44 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v46 = -(uint64_t)v34;
        do
        {
          unint64_t v47 = (4198405 * (unint64_t)(224 * (v43[1] >> 6))) >> 32;
          *int v44 = ((4198405 * (unint64_t)(224 * (*v43 >> 6))) >> 32) + 16;
          v44[1] = v47 + 16;
          v44 += 2;
          v43 += 2;
          BOOL v40 = __CFADD__(v46++, 1);
        }
        while (!v40);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v30 < v8)
  {
    if (v9)
    {
      int v48 = *v14 >> 6;
      int v49 = v14[1] >> 6;
      v14 += 2;
      *uint64_t v20 = ((4198405 * (unint64_t)(224 * v48)) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v49)) >> 32) + 16;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v50 = -(uint64_t)v34;
      do
      {
        unint64_t v51 = (4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32;
        *uint64_t v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = v51 + 16;
        v20 += 2;
        v14 += 2;
        BOOL v40 = __CFADD__(v50++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = 2 * (v10 + v9);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16) {
    unint64_t v21 = v17 - v16;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v18 + v16;
    uint64_t v26 = *a3 + *a4 * v11 + v12;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v25 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v10 = v9 & 1;
  }
  unint64_t v28 = v11 & 1;
  if (v8 >= v28) {
    uint64_t v29 = v11 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  unint64_t v30 = v21 >> 1;
  unint64_t v31 = v21 - v10;
  if (v30 >= v31 >> 1) {
    unint64_t v32 = v31 >> 1;
  }
  else {
    unint64_t v32 = v30;
  }
  if (v11)
  {
    if (v9)
    {
      int v35 = v14[1] >> 6;
      unint64_t v33 = v14 + 2;
      *uint64_t v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v35)) >> 32) + 16;
      unint64_t v34 = v20 + 2;
      if (!v32)
      {
LABEL_26:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
      if (!v32) {
        goto LABEL_26;
      }
    }
    uint64_t v36 = -(uint64_t)v32;
    do
    {
      unint64_t v37 = (4198405 * (unint64_t)(224 * (v33[1] >> 6))) >> 32;
      *unint64_t v34 = ((4198405 * (unint64_t)(224 * (*v33 >> 6))) >> 32) + 16;
      v34[1] = v37 + 16;
      v34 += 2;
      v33 += 2;
      BOOL v38 = __CFADD__(v36++, 1);
    }
    while (!v38);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v29)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v29;
    do
    {
      unint64_t v41 = v14;
      uint64_t v42 = v20;
      if (v9)
      {
        int v43 = v14[1] >> 6;
        unint64_t v41 = v14 + 2;
        *uint64_t v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = ((4198405 * (unint64_t)(224 * v43)) >> 32) + 16;
        uint64_t v42 = v20 + 2;
      }
      if (v32)
      {
        uint64_t v44 = -(uint64_t)v32;
        do
        {
          unint64_t v45 = (4198405 * (unint64_t)(224 * (v41[1] >> 6))) >> 32;
          *uint64_t v42 = ((4198405 * (unint64_t)(224 * (*v41 >> 6))) >> 32) + 16;
          v42[1] = v45 + 16;
          v42 += 2;
          v41 += 2;
          BOOL v38 = __CFADD__(v44++, 1);
        }
        while (!v38);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v28 < v8)
  {
    if (v9)
    {
      int v46 = *v14 >> 6;
      int v47 = v14[1] >> 6;
      v14 += 2;
      *uint64_t v20 = ((4198405 * (unint64_t)(224 * v46)) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v47)) >> 32) + 16;
      v20 += 2;
    }
    if (v32)
    {
      uint64_t v48 = -(uint64_t)v32;
      do
      {
        unint64_t v49 = (4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32;
        *uint64_t v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = v49 + 16;
        v20 += 2;
        v14 += 2;
        BOOL v38 = __CFADD__(v48++, 1);
      }
      while (!v38);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf22_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = 2 * (v10 + v9);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v11 + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v21 >= v17 - v16) {
    unint64_t v21 = v17 - v16;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a7 + *a8 * v18 + v16;
    uint64_t v26 = *a3 + *a4 * v11 + v12;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v25 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 32;
      }
      v26 += v23;
      v25 += v24;
      ++v22;
    }
    while (v22 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v10 = v9 & 1;
  }
  unint64_t v28 = v11 & 1;
  if (v8 >= v28) {
    uint64_t v29 = v11 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  unint64_t v30 = v21 >> 1;
  unint64_t v31 = v21 - v10;
  if (v30 >= v31 >> 1) {
    unint64_t v32 = v31 >> 1;
  }
  else {
    unint64_t v32 = v30;
  }
  if (v11)
  {
    if (v9)
    {
      unsigned int v35 = v14[1];
      unint64_t v33 = v14 + 2;
      *uint64_t v20 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
      v20[1] = (4198405 * (unint64_t)(255 * (v35 >> 6))) >> 32;
      unint64_t v34 = v20 + 2;
      if (!v32)
      {
LABEL_26:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v33 = v14;
      unint64_t v34 = v20;
      if (!v32) {
        goto LABEL_26;
      }
    }
    uint64_t v36 = -(uint64_t)v32;
    do
    {
      unsigned int v37 = v33[1];
      *unint64_t v34 = (4198405 * (unint64_t)(255 * (*v33 >> 6))) >> 32;
      v34[1] = (4198405 * (unint64_t)(255 * (v37 >> 6))) >> 32;
      v34 += 2;
      v33 += 2;
      BOOL v38 = __CFADD__(v36++, 1);
    }
    while (!v38);
    goto LABEL_26;
  }
LABEL_27:
  if (v8 == v29)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v29;
    do
    {
      unint64_t v41 = v14;
      uint64_t v42 = v20;
      if (v9)
      {
        unsigned int v43 = v14[1];
        unint64_t v41 = v14 + 2;
        *uint64_t v20 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
        v20[1] = (4198405 * (unint64_t)(255 * (v43 >> 6))) >> 32;
        uint64_t v42 = v20 + 2;
      }
      if (v32)
      {
        uint64_t v44 = -(uint64_t)v32;
        do
        {
          unsigned int v45 = v41[1];
          *uint64_t v42 = (4198405 * (unint64_t)(255 * (*v41 >> 6))) >> 32;
          v42[1] = (4198405 * (unint64_t)(255 * (v45 >> 6))) >> 32;
          v42 += 2;
          v41 += 2;
          BOOL v38 = __CFADD__(v44++, 1);
        }
        while (!v38);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v28 < v8)
  {
    if (v9)
    {
      unsigned int v46 = *v14;
      unsigned int v47 = v14[1];
      v14 += 2;
      *uint64_t v20 = (4198405 * (unint64_t)(255 * (v46 >> 6))) >> 32;
      v20[1] = (4198405 * (unint64_t)(255 * (v47 >> 6))) >> 32;
      v20 += 2;
    }
    if (v32)
    {
      uint64_t v48 = -(uint64_t)v32;
      do
      {
        unsigned int v49 = v14[1];
        *uint64_t v20 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
        v20[1] = (4198405 * (unint64_t)(255 * (v49 >> 6))) >> 32;
        v20 += 2;
        v14 += 2;
        BOOL v38 = __CFADD__(v48++, 1);
      }
      while (!v38);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v23 >= v18 - v17) {
    unint64_t v23 = v18 - v17;
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    BOOL v27 = v12 >= v8;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    uint64_t v30 = *a3 + *a4 * v12;
    if (v27) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = a7[2] + v29 * v19 + v17;
    uint64_t v34 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(unsigned char *)(v33 + i) = -1;
          *(unsigned char *)(v34 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v36 = v11;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v23 >> 1;
  unint64_t v38 = v23 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v11)
  {
    if (v9)
    {
      uint64_t v40 = v16 + 2;
      unsigned int v42 = (((4198405 * (unint64_t)(224 * (v16[1] >> 6))) >> 32)
                         + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                         + 33) >> 1;
      *uint64_t v22 = (((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                          + 33) >> 1;
      v22[1] = v42;
      unint64_t v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v40 = v16;
      unint64_t v41 = v22;
      if (!v39) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      int v44 = *v40 >> 6;
      int v45 = v40[1] >> 6;
      int v46 = *(unsigned __int16 *)((char *)v40 + v15) >> 6;
      int v47 = *(unsigned __int16 *)((char *)v40 + v15 + 2) >> 6;
      v40 += 2;
      *unint64_t v41 = (((4198405 * (unint64_t)(224 * v44)) >> 32)
                          + ((4198405 * (unint64_t)(224 * v46)) >> 32)
                          + 33) >> 1;
      v41[1] = (((4198405 * (unint64_t)(224 * v45)) >> 32)
                            + ((4198405 * (unint64_t)(224 * v47)) >> 32)
                            + 33) >> 1;
      v41 += 2;
      BOOL v27 = __CFADD__(v43++, 1);
    }
    while (!v27);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v24 - v36;
    do
    {
      uint64_t v50 = v16;
      unint64_t v51 = v22;
      if (v9)
      {
        uint64_t v50 = v16 + 2;
        unsigned int v52 = (((4198405 * (unint64_t)(224 * (v16[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                           + 33) >> 1;
        *uint64_t v22 = (((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                            + 33) >> 1;
        v22[1] = v52;
        unint64_t v51 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v53 = -(uint64_t)v39;
        do
        {
          int v54 = *v50 >> 6;
          int v55 = v50[1] >> 6;
          int v56 = *(unsigned __int16 *)((char *)v50 + v15) >> 6;
          int v57 = *(unsigned __int16 *)((char *)v50 + v15 + 2) >> 6;
          v50 += 2;
          *unint64_t v51 = (((4198405 * (unint64_t)(224 * v54)) >> 32)
                              + ((4198405 * (unint64_t)(224 * v56)) >> 32)
                              + 33) >> 1;
          v51[1] = (((4198405 * (unint64_t)(224 * v55)) >> 32)
                                + ((4198405 * (unint64_t)(224 * v57)) >> 32)
                                + 33) >> 1;
          v51 += 2;
          BOOL v27 = __CFADD__(v53++, 1);
        }
        while (!v27);
      }
      v16 += v15;
      v22 += v21;
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    BOOL v27 = v12 >= v8;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    uint64_t v30 = *a3 + *a4 * v12;
    if (v27) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = a7[2] + v29 * v19 + v17;
    uint64_t v34 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(unsigned char *)(v33 + i) = -1;
          *(unsigned char *)(v34 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v32 += v26;
      v34 += v28;
      v33 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v36 = v11;
  }
  else {
    unint64_t v36 = 0;
  }
  unint64_t v37 = v23 >> 1;
  unint64_t v38 = v23 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v11)
  {
    if (v9)
    {
      int v42 = v16[1] >> 6;
      uint64_t v40 = v16 + 2;
      *uint64_t v22 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
      v22[1] = ((4198405 * (unint64_t)(224 * v42)) >> 32) + 16;
      unint64_t v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v40 = v16;
      unint64_t v41 = v22;
      if (!v39) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      unint64_t v44 = (4198405 * (unint64_t)(224 * (v40[1] >> 6))) >> 32;
      *unint64_t v41 = ((4198405 * (unint64_t)(224 * (*v40 >> 6))) >> 32) + 16;
      v41[1] = v44 + 16;
      v41 += 2;
      v40 += 2;
      BOOL v27 = __CFADD__(v43++, 1);
    }
    while (!v27);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v36)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v24 - v36;
    uint64_t v47 = 2 * v15;
    do
    {
      unint64_t v48 = v16;
      unint64_t v49 = v22;
      if (v9)
      {
        int v50 = v16[1] >> 6;
        unint64_t v48 = v16 + 2;
        *uint64_t v22 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
        v22[1] = ((4198405 * (unint64_t)(224 * v50)) >> 32) + 16;
        unint64_t v49 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v51 = -(uint64_t)v39;
        do
        {
          unint64_t v52 = (4198405 * (unint64_t)(224 * (v48[1] >> 6))) >> 32;
          *unint64_t v49 = ((4198405 * (unint64_t)(224 * (*v48 >> 6))) >> 32) + 16;
          v49[1] = v52 + 16;
          v49 += 2;
          v48 += 2;
          BOOL v27 = __CFADD__(v51++, 1);
        }
        while (!v27);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v47);
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v23 >= v18 - v17) {
    unint64_t v23 = v18 - v17;
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v12 >= v8) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v12 + v14 + v28;
    uint64_t v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(unsigned char *)(v30 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v32 = v11;
  }
  else {
    unint64_t v32 = 0;
  }
  unint64_t v33 = v23 >> 1;
  unint64_t v34 = v23 - v10;
  if (v33 >= v34 >> 1) {
    unint64_t v35 = v34 >> 1;
  }
  else {
    unint64_t v35 = v33;
  }
  if (v11)
  {
    if (v9)
    {
      unint64_t v36 = v16 + 2;
      unsigned int v38 = (((4198405 * (unint64_t)(224 * (v16[1] >> 6))) >> 32)
                         + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                         + 33) >> 1;
      *uint64_t v22 = (((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                          + 33) >> 1;
      v22[1] = v38;
      unint64_t v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v36 = v16;
      unint64_t v37 = v22;
      if (!v35) {
        goto LABEL_29;
      }
    }
    uint64_t v39 = -(uint64_t)v35;
    do
    {
      int v40 = *v36 >> 6;
      int v41 = v36[1] >> 6;
      int v42 = *(unsigned __int16 *)((char *)v36 + v15) >> 6;
      int v43 = *(unsigned __int16 *)((char *)v36 + v15 + 2) >> 6;
      v36 += 2;
      *unint64_t v37 = (((4198405 * (unint64_t)(224 * v40)) >> 32)
                          + ((4198405 * (unint64_t)(224 * v42)) >> 32)
                          + 33) >> 1;
      v37[1] = (((4198405 * (unint64_t)(224 * v41)) >> 32)
                            + ((4198405 * (unint64_t)(224 * v43)) >> 32)
                            + 33) >> 1;
      v37 += 2;
      BOOL v44 = __CFADD__(v39++, 1);
    }
    while (!v44);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v24 - v32;
    do
    {
      uint64_t v47 = v16;
      unint64_t v48 = v22;
      if (v9)
      {
        uint64_t v47 = v16 + 2;
        unsigned int v49 = (((4198405 * (unint64_t)(224 * (v16[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                           + 33) >> 1;
        *uint64_t v22 = (((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                            + 33) >> 1;
        v22[1] = v49;
        unint64_t v48 = v22 + 2;
      }
      if (v35)
      {
        uint64_t v50 = -(uint64_t)v35;
        do
        {
          int v51 = *v47 >> 6;
          int v52 = v47[1] >> 6;
          int v53 = *(unsigned __int16 *)((char *)v47 + v15) >> 6;
          int v54 = *(unsigned __int16 *)((char *)v47 + v15 + 2) >> 6;
          v47 += 2;
          *unint64_t v48 = (((4198405 * (unint64_t)(224 * v51)) >> 32)
                              + ((4198405 * (unint64_t)(224 * v53)) >> 32)
                              + 33) >> 1;
          v48[1] = (((4198405 * (unint64_t)(224 * v52)) >> 32)
                                + ((4198405 * (unint64_t)(224 * v54)) >> 32)
                                + 33) >> 1;
          v48 += 2;
          BOOL v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      v16 += v15;
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v12 >= v8) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v12 + v14 + v28;
    uint64_t v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(unsigned char *)(v30 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v32 = v11;
  }
  else {
    unint64_t v32 = 0;
  }
  unint64_t v33 = v23 >> 1;
  unint64_t v34 = v23 - v10;
  if (v33 >= v34 >> 1) {
    unint64_t v35 = v34 >> 1;
  }
  else {
    unint64_t v35 = v33;
  }
  if (v11)
  {
    if (v9)
    {
      int v38 = v16[1] >> 6;
      unint64_t v36 = v16 + 2;
      *uint64_t v22 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
      v22[1] = ((4198405 * (unint64_t)(224 * v38)) >> 32) + 16;
      unint64_t v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v36 = v16;
      unint64_t v37 = v22;
      if (!v35) {
        goto LABEL_29;
      }
    }
    uint64_t v39 = -(uint64_t)v35;
    do
    {
      unint64_t v40 = (4198405 * (unint64_t)(224 * (v36[1] >> 6))) >> 32;
      *unint64_t v37 = ((4198405 * (unint64_t)(224 * (*v36 >> 6))) >> 32) + 16;
      v37[1] = v40 + 16;
      v37 += 2;
      v36 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    unint64_t v42 = 0;
    unint64_t v43 = v24 - v32;
    uint64_t v44 = 2 * v15;
    do
    {
      unint64_t v45 = v16;
      unint64_t v46 = v22;
      if (v9)
      {
        int v47 = v16[1] >> 6;
        unint64_t v45 = v16 + 2;
        *uint64_t v22 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
        v22[1] = ((4198405 * (unint64_t)(224 * v47)) >> 32) + 16;
        unint64_t v46 = v22 + 2;
      }
      if (v35)
      {
        uint64_t v48 = -(uint64_t)v35;
        do
        {
          unint64_t v49 = (4198405 * (unint64_t)(224 * (v45[1] >> 6))) >> 32;
          *unint64_t v46 = ((4198405 * (unint64_t)(224 * (*v45 >> 6))) >> 32) + 16;
          v46[1] = v49 + 16;
          v46 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v48++, 1);
        }
        while (!v41);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v44);
      v22 += v21;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v23 >= v18 - v17) {
    unint64_t v23 = v18 - v17;
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v12 >= v8) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v12 + v14 + v28;
    uint64_t v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(unsigned char *)(v30 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v32 = v11;
  }
  else {
    unint64_t v32 = 0;
  }
  unint64_t v33 = v23 >> 1;
  unint64_t v34 = v23 - v10;
  if (v33 >= v34 >> 1) {
    unint64_t v35 = v34 >> 1;
  }
  else {
    unint64_t v35 = v33;
  }
  if (v11)
  {
    if (v9)
    {
      unint64_t v36 = v16 + 2;
      unsigned int v38 = (((4198405 * (unint64_t)(255 * (v16[1] >> 6))) >> 32)
                         + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                         + 1) >> 1;
      *uint64_t v22 = (((4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                          + 1) >> 1;
      v22[1] = v38;
      unint64_t v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v36 = v16;
      unint64_t v37 = v22;
      if (!v35) {
        goto LABEL_29;
      }
    }
    uint64_t v39 = -(uint64_t)v35;
    do
    {
      unsigned int v40 = *v36;
      unsigned int v41 = v36[1];
      unsigned int v42 = *(unsigned __int16 *)((char *)v36 + v15);
      unsigned int v43 = *(unsigned __int16 *)((char *)v36 + v15 + 2);
      v36 += 2;
      *unint64_t v37 = (((4198405 * (unint64_t)(255 * (v40 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (v42 >> 6))) >> 32)
                          + 1) >> 1;
      v37[1] = (((4198405 * (unint64_t)(255 * (v41 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v43 >> 6))) >> 32)
                            + 1) >> 1;
      v37 += 2;
      BOOL v44 = __CFADD__(v39++, 1);
    }
    while (!v44);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v24 - v32;
    do
    {
      int v47 = v16;
      uint64_t v48 = v22;
      if (v9)
      {
        int v47 = v16 + 2;
        unsigned int v49 = (((4198405 * (unint64_t)(255 * (v16[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                           + 1) >> 1;
        *uint64_t v22 = (((4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                            + 1) >> 1;
        v22[1] = v49;
        uint64_t v48 = v22 + 2;
      }
      if (v35)
      {
        uint64_t v50 = -(uint64_t)v35;
        do
        {
          unsigned int v51 = *v47;
          unsigned int v52 = v47[1];
          unsigned int v53 = *(unsigned __int16 *)((char *)v47 + v15);
          unsigned int v54 = *(unsigned __int16 *)((char *)v47 + v15 + 2);
          v47 += 2;
          *uint64_t v48 = (((4198405 * (unint64_t)(255 * (v51 >> 6))) >> 32)
                              + ((4198405 * (unint64_t)(255 * (v53 >> 6))) >> 32)
                              + 1) >> 1;
          v48[1] = (((4198405 * (unint64_t)(255 * (v52 >> 6))) >> 32)
                                + ((4198405 * (unint64_t)(255 * (v54 >> 6))) >> 32)
                                + 1) >> 1;
          v48 += 2;
          BOOL v44 = __CFADD__(v50++, 1);
        }
        while (!v44);
      }
      v16 += v15;
      v22 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v8) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v24 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v24 = v20 - v19;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v12 >= v8) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v12 + v14 + v28;
    uint64_t v30 = *a7 + v27 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(unsigned char *)(v30 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32;
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  if (v24 >= v11) {
    unint64_t v32 = v11;
  }
  else {
    unint64_t v32 = 0;
  }
  unint64_t v33 = v23 >> 1;
  unint64_t v34 = v23 - v10;
  if (v33 >= v34 >> 1) {
    unint64_t v35 = v34 >> 1;
  }
  else {
    unint64_t v35 = v33;
  }
  if (v11)
  {
    if (v9)
    {
      unsigned int v38 = v16[1];
      unint64_t v36 = v16 + 2;
      *uint64_t v22 = (4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32;
      v22[1] = (4198405 * (unint64_t)(255 * (v38 >> 6))) >> 32;
      unint64_t v37 = v22 + 2;
      if (!v35)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v36 = v16;
      unint64_t v37 = v22;
      if (!v35) {
        goto LABEL_29;
      }
    }
    uint64_t v39 = -(uint64_t)v35;
    do
    {
      unsigned int v40 = v36[1];
      *unint64_t v37 = (4198405 * (unint64_t)(255 * (*v36 >> 6))) >> 32;
      v37[1] = (4198405 * (unint64_t)(255 * (v40 >> 6))) >> 32;
      v37 += 2;
      v36 += 2;
      BOOL v41 = __CFADD__(v39++, 1);
    }
    while (!v41);
    goto LABEL_29;
  }
LABEL_30:
  if (v24 != v32)
  {
    unint64_t v42 = 0;
    unint64_t v43 = v24 - v32;
    uint64_t v44 = 2 * v15;
    do
    {
      unint64_t v45 = v16;
      unint64_t v46 = v22;
      if (v9)
      {
        unsigned int v47 = v16[1];
        unint64_t v45 = v16 + 2;
        *uint64_t v22 = (4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32;
        v22[1] = (4198405 * (unint64_t)(255 * (v47 >> 6))) >> 32;
        unint64_t v46 = v22 + 2;
      }
      if (v35)
      {
        uint64_t v48 = -(uint64_t)v35;
        do
        {
          unsigned int v49 = v45[1];
          *unint64_t v46 = (4198405 * (unint64_t)(255 * (*v45 >> 6))) >> 32;
          v46[1] = (4198405 * (unint64_t)(255 * (v49 >> 6))) >> 32;
          v46 += 2;
          v45 += 2;
          BOOL v41 = __CFADD__(v48++, 1);
        }
        while (!v41);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v44);
      v22 += v21;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  unint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  unint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    unint64_t v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(unsigned char *)(v33 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v26 >= v11) {
    unint64_t v35 = v11;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v25 >> 1;
  unint64_t v37 = v25 - v10;
  if (v36 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v36;
  }
  if (v11)
  {
    if (v8)
    {
      uint64_t v39 = v16 + 2;
      unsigned int v42 = (((4198405 * (unint64_t)(224 * (v16[1] >> 6))) >> 32)
                         + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                         + 33) >> 1;
      *unint64_t v23 = (((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                          + 33) >> 1;
      unsigned int v40 = v23 + 1;
      *unint64_t v24 = v42;
      BOOL v41 = v24 + 1;
      if (!v38)
      {
LABEL_29:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v39 = v16;
      unsigned int v40 = v23;
      BOOL v41 = v24;
      if (!v38) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v38;
    do
    {
      int v44 = *v39 >> 6;
      int v45 = v39[1] >> 6;
      int v46 = *(unsigned __int16 *)((char *)v39 + v15) >> 6;
      int v47 = *(unsigned __int16 *)((char *)v39 + v15 + 2) >> 6;
      v39 += 2;
      *v40++ = (((4198405 * (unint64_t)(224 * v44)) >> 32)
                            + ((4198405 * (unint64_t)(224 * v46)) >> 32)
                            + 33) >> 1;
      *v41++ = (((4198405 * (unint64_t)(224 * v45)) >> 32)
                            + ((4198405 * (unint64_t)(224 * v47)) >> 32)
                            + 33) >> 1;
      BOOL v48 = __CFADD__(v43++, 1);
    }
    while (!v48);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v49 = 0;
    unint64_t v50 = v26 - v35;
    do
    {
      unsigned int v51 = v16;
      unsigned int v52 = v23;
      unsigned int v53 = v24;
      if (v8)
      {
        unsigned int v51 = v16 + 2;
        unsigned int v54 = (((4198405 * (unint64_t)(224 * (v16[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                           + 33) >> 1;
        *unint64_t v23 = (((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(224 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                            + 33) >> 1;
        unsigned int v52 = v23 + 1;
        *unint64_t v24 = v54;
        unsigned int v53 = v24 + 1;
      }
      if (v38)
      {
        uint64_t v55 = -(uint64_t)v38;
        do
        {
          int v56 = *v51 >> 6;
          int v57 = v51[1] >> 6;
          int v58 = *(unsigned __int16 *)((char *)v51 + v15) >> 6;
          int v59 = *(unsigned __int16 *)((char *)v51 + v15 + 2) >> 6;
          v51 += 2;
          *v52++ = (((4198405 * (unint64_t)(224 * v56)) >> 32)
                                + ((4198405 * (unint64_t)(224 * v58)) >> 32)
                                + 33) >> 1;
          *v53++ = (((4198405 * (unint64_t)(224 * v57)) >> 32)
                                + ((4198405 * (unint64_t)(224 * v59)) >> 32)
                                + 33) >> 1;
          BOOL v48 = __CFADD__(v55++, 1);
        }
        while (!v48);
      }
      v16 += v15;
      v23 += v21;
      v24 += v22;
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  unint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  unint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    unint64_t v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(unsigned char *)(v33 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v26 >= v11) {
    unint64_t v35 = v11;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v25 >> 1;
  unint64_t v37 = v25 - v10;
  if (v36 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v36;
  }
  if (v11)
  {
    if (v8)
    {
      int v42 = v16[1] >> 6;
      uint64_t v39 = v16 + 2;
      *unint64_t v23 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
      unsigned int v40 = v23 + 1;
      *unint64_t v24 = ((4198405 * (unint64_t)(224 * v42)) >> 32) + 16;
      BOOL v41 = v24 + 1;
      if (!v38)
      {
LABEL_29:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v39 = v16;
      unsigned int v40 = v23;
      BOOL v41 = v24;
      if (!v38) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v38;
    do
    {
      uint64_t v44 = 940442720 * (v39[1] >> 6);
      *v40++ = ((4198405 * (unint64_t)(224 * (*v39 >> 6))) >> 32) + 16;
      *v41++ = BYTE4(v44) + 16;
      v39 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v46 = 0;
    unint64_t v47 = v26 - v35;
    uint64_t v48 = 2 * v15;
    do
    {
      unint64_t v49 = v16;
      unint64_t v50 = v23;
      unsigned int v51 = v24;
      if (v8)
      {
        unint64_t v49 = v16 + 2;
        unint64_t v52 = (4198405 * (unint64_t)(224 * (v16[1] >> 6))) >> 32;
        *unint64_t v23 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
        unint64_t v50 = v23 + 1;
        *unint64_t v24 = v52 + 16;
        unsigned int v51 = v24 + 1;
      }
      if (v38)
      {
        uint64_t v53 = -(uint64_t)v38;
        do
        {
          uint64_t v54 = 940442720 * (v49[1] >> 6);
          *v50++ = ((4198405 * (unint64_t)(224 * (*v49 >> 6))) >> 32) + 16;
          *v51++ = BYTE4(v54) + 16;
          v49 += 2;
          BOOL v45 = __CFADD__(v53++, 1);
        }
        while (!v45);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v48);
      v23 += v21;
      v24 += v22;
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

uint64_t vt_CopyAvg_xf22_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  unint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  unint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    unint64_t v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(unsigned char *)(v33 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v26 >= v11) {
    unint64_t v35 = v11;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v25 >> 1;
  unint64_t v37 = v25 - v10;
  if (v36 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v36;
  }
  if (v11)
  {
    if (v8)
    {
      uint64_t v39 = v16 + 2;
      unsigned int v42 = (((4198405 * (unint64_t)(255 * (v16[1] >> 6))) >> 32)
                         + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                         + 1) >> 1;
      *unint64_t v23 = (((4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32)
                          + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                          + 1) >> 1;
      unsigned int v40 = v23 + 1;
      *unint64_t v24 = v42;
      BOOL v41 = v24 + 1;
      if (!v38)
      {
LABEL_29:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v39 = v16;
      unsigned int v40 = v23;
      BOOL v41 = v24;
      if (!v38) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v38;
    do
    {
      unsigned int v44 = *v39;
      unsigned int v45 = v39[1];
      unsigned int v46 = *(unsigned __int16 *)((char *)v39 + v15);
      unsigned int v47 = *(unsigned __int16 *)((char *)v39 + v15 + 2);
      v39 += 2;
      *v40++ = (((4198405 * (unint64_t)(255 * (v44 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v46 >> 6))) >> 32)
                            + 1) >> 1;
      *v41++ = (((4198405 * (unint64_t)(255 * (v45 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (v47 >> 6))) >> 32)
                            + 1) >> 1;
      BOOL v48 = __CFADD__(v43++, 1);
    }
    while (!v48);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v49 = 0;
    unint64_t v50 = v26 - v35;
    do
    {
      unsigned int v51 = v16;
      unint64_t v52 = v23;
      uint64_t v53 = v24;
      if (v8)
      {
        unsigned int v51 = v16 + 2;
        unsigned int v54 = (((4198405 * (unint64_t)(255 * (v16[1] >> 6))) >> 32)
                           + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6))) >> 32)
                           + 1) >> 1;
        *unint64_t v23 = (((4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32)
                            + ((4198405 * (unint64_t)(255 * (*(unsigned __int16 *)((char *)v16 + v15) >> 6))) >> 32)
                            + 1) >> 1;
        unint64_t v52 = v23 + 1;
        *unint64_t v24 = v54;
        uint64_t v53 = v24 + 1;
      }
      if (v38)
      {
        uint64_t v55 = -(uint64_t)v38;
        do
        {
          unsigned int v56 = *v51;
          unsigned int v57 = v51[1];
          unsigned int v58 = *(unsigned __int16 *)((char *)v51 + v15);
          unsigned int v59 = *(unsigned __int16 *)((char *)v51 + v15 + 2);
          v51 += 2;
          *v52++ = (((4198405 * (unint64_t)(255 * (v56 >> 6))) >> 32)
                                + ((4198405 * (unint64_t)(255 * (v58 >> 6))) >> 32)
                                + 1) >> 1;
          *v53++ = (((4198405 * (unint64_t)(255 * (v57 >> 6))) >> 32)
                                + ((4198405 * (unint64_t)(255 * (v59 >> 6))) >> 32)
                                + 1) >> 1;
          BOOL v48 = __CFADD__(v55++, 1);
        }
        while (!v48);
      }
      v16 += v15;
      v23 += v21;
      v24 += v22;
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_CopyDec_xf22_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  unint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v11 + v9) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  unint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v25 >= v18 - v17) {
    unint64_t v25 = v18 - v17;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    unint64_t v33 = *a7 + v29 * v19 + v17;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(unsigned char *)(v33 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  if (v26 >= v11) {
    unint64_t v35 = v11;
  }
  else {
    unint64_t v35 = 0;
  }
  unint64_t v36 = v25 >> 1;
  unint64_t v37 = v25 - v10;
  if (v36 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v36;
  }
  if (v11)
  {
    if (v8)
    {
      unsigned int v42 = v16[1];
      uint64_t v39 = v16 + 2;
      *unint64_t v23 = (4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32;
      unsigned int v40 = v23 + 1;
      *unint64_t v24 = (4198405 * (unint64_t)(255 * (v42 >> 6))) >> 32;
      BOOL v41 = v24 + 1;
      if (!v38)
      {
LABEL_29:
        v16 += v15;
        v23 += v21;
        v24 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v39 = v16;
      unsigned int v40 = v23;
      BOOL v41 = v24;
      if (!v38) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v38;
    do
    {
      unsigned int v44 = v39[1];
      *v40++ = (4198405 * (unint64_t)(255 * (*v39 >> 6))) >> 32;
      *v41++ = (4198405 * (unint64_t)(255 * (v44 >> 6))) >> 32;
      v39 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v26 != v35)
  {
    unint64_t v46 = 0;
    unint64_t v47 = v26 - v35;
    uint64_t v48 = 2 * v15;
    do
    {
      unint64_t v49 = v16;
      unint64_t v50 = v23;
      unsigned int v51 = v24;
      if (v8)
      {
        unsigned int v52 = v16[1];
        unint64_t v49 = v16 + 2;
        *unint64_t v23 = (4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32;
        unint64_t v50 = v23 + 1;
        *unint64_t v24 = (4198405 * (unint64_t)(255 * (v52 >> 6))) >> 32;
        unsigned int v51 = v24 + 1;
      }
      if (v38)
      {
        uint64_t v53 = -(uint64_t)v38;
        do
        {
          unsigned int v54 = v49[1];
          *v50++ = (4198405 * (unint64_t)(255 * (*v49 >> 6))) >> 32;
          *v51++ = (4198405 * (unint64_t)(255 * (v54 >> 6))) >> 32;
          v49 += 2;
          BOOL v45 = __CFADD__(v53++, 1);
        }
        while (!v45);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v48);
      v23 += v21;
      v24 += v22;
      v46 += 2;
    }
    while (v46 < v47);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_xf20_w30r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  long long v22 = 0uLL;
  int v23 = 0;
  unint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D620;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v22 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x11u, kvImageARGB16Q12|kvImageARGB16U, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xf20_w30r;
  *a11 = vt_VImage_Cleanup_xf20_w30r;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_xf20_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[5] & 0xFFFFFFFELL;
  unint64_t v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  uint64_t v10 = a2[3] + a2[5];
  unint64_t v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a8;
    uint64_t v17 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v18 = a3[1] + v15 * (v9 >> 1) + 2 * v8;
    uint64_t v19 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        LOWORD(v22) = 0;
        LOWORD(v23) = 0;
        unint64_t v24 = (unsigned __int16 *)v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            int v25 = *v24 >> 6;
            int v26 = v24[1] >> 6;
            v24 += 2;
            unsigned int v23 = (((67174465 * (unint64_t)(57344 * v25)) >> 32) >> 4) + 4096;
            unsigned int v22 = (((67174465 * (unint64_t)(57344 * v26)) >> 32) >> 4) + 4096;
          }
          uint64_t v27 = (_WORD *)(v17 + v20);
          unint64_t v28 = (67174465 * (unint64_t)(56064 * (*(unsigned __int16 *)(v19 + 2 * v21) >> 6))) >> 36;
          *uint64_t v27 = -1;
          v27[1] = v28 + 4096;
          v27[2] = v23;
          v27[3] = v22;
          ++v21;
          v20 += 8;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_xf20_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[5] & 0xFFFFFFFELL;
  unint64_t v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  uint64_t v10 = a2[3] + a2[5];
  unint64_t v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a8;
    uint64_t v17 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v18 = a3[1] + v15 * (v9 >> 1) + 2 * v8;
    uint64_t v19 = *a3 + *a4 * v9 + 2 * v8;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        LOBYTE(v22) = 0;
        LOBYTE(v23) = 0;
        unint64_t v24 = (unsigned __int16 *)v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            int v25 = *v24 >> 6;
            int v26 = v24[1] >> 6;
            v24 += 2;
            int v23 = ((4198405 * (unint64_t)(224 * v25)) >> 32) + 16;
            int v22 = ((4198405 * (unint64_t)(224 * v26)) >> 32) + 16;
          }
          uint64_t v27 = (unsigned char *)(v17 + v20);
          unint64_t v28 = (4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v19 + 2 * v21) >> 6))) >> 32;
          *uint64_t v27 = -1;
          v27[1] = v28 + 16;
          v27[2] = v23;
          v27[3] = v22;
          ++v21;
          v20 += 4;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_xf20_v216(double a1, double a2, double a3, int16x4_t a4, int16x4_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t *a13)
{
  uint64_t v13 = (*(void *)(a7 + 32) & 1) + *(void *)(a7 + 32);
  unint64_t v14 = *(void *)(a7 + 40) & 0xFFFFFFFELL;
  uint64_t v16 = (*(void *)(a11 + 32) & 1) + *(void *)(a11 + 32);
  unint64_t v17 = ((*(_DWORD *)(a7 + 16) + *(void *)(a7 + 32)) & 0xFFFFFFFE) - v13;
  if (v17 >= (unint64_t)((*(_DWORD *)(a11 + 16) + *(void *)(a11 + 32)) & 0xFFFFFFFE) - v16) {
    unint64_t v17 = ((*(_DWORD *)(a11 + 16) + *(void *)(a11 + 32)) & 0xFFFFFFFE) - v16;
  }
  uint64_t v15 = *(void *)(a7 + 24) + *(void *)(a7 + 40);
  unint64_t v18 = v15 - v14 + (v15 & 1);
  if (v18 >= *(void *)(a11 + 24)) {
    unint64_t v18 = *(void *)(a11 + 24);
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a9;
    uint64_t v21 = a9[1];
    uint64_t v22 = *a13;
    uint64_t v23 = *a12 + *a13 * *(void *)(a11 + 40) + 2 * v16;
    unint64_t v24 = a8[1] + v21 * (v14 >> 1) + ((2 * v13) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v25 = *a8 + *a9 * v14 + 2 * v13;
    uint32x4_t v26 = (uint32x4_t)vdupq_n_s32(0x401005u);
    do
    {
      if (v17)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        for (unint64_t i = 0; i < v17; i += 2)
        {
          a4.i16[0] = *(_WORD *)(v24 + v27);
          a4.i16[2] = *(_WORD *)(v24 + v27 + 2);
          a5.i16[0] = *(_WORD *)(v25 + v27);
          a5.i16[2] = *(_WORD *)(v25 + v27 + 2);
          int32x4_t v30 = (int32x4_t)vmull_u16(vshr_n_u16((uint16x4_t)vuzp1_s16(a4, a5), 6uLL), (uint16x4_t)0xDB00DB00E000E000);
          int32x4_t v31 = vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v30.i8, *(uint32x2_t *)v26.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v30, v26));
          *(int16x4_t *)v30.i8 = vadd_s16(vshrn_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v31, (uint32x4_t)vsubq_s32(v30, v31), 1uLL), 9uLL), (int16x4_t)0x1000100010001000);
          a5 = vrev32_s16(*(int16x4_t *)v30.i8);
          a4 = vuzp1_s16(*(int16x4_t *)v30.i8, a5);
          *(double *)(v23 + v28) = *(double *)&a4;
          v28 += 8;
          v27 += 4;
        }
      }
      v25 += v20;
      v23 += v22;
      v24 += (v19++ << 63 >> 63) & v21;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_Copy_xf20_2vuy(double a1, double a2, double a3, int16x4_t a4, int16x4_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t *a13)
{
  uint64_t v13 = (*(void *)(a7 + 32) & 1) + *(void *)(a7 + 32);
  unint64_t v14 = *(void *)(a7 + 40) & 0xFFFFFFFELL;
  uint64_t v16 = (*(void *)(a11 + 32) & 1) + *(void *)(a11 + 32);
  unint64_t v17 = ((*(_DWORD *)(a7 + 16) + *(void *)(a7 + 32)) & 0xFFFFFFFE) - v13;
  if (v17 >= (unint64_t)((*(_DWORD *)(a11 + 16) + *(void *)(a11 + 32)) & 0xFFFFFFFE) - v16) {
    unint64_t v17 = ((*(_DWORD *)(a11 + 16) + *(void *)(a11 + 32)) & 0xFFFFFFFE) - v16;
  }
  uint64_t v15 = *(void *)(a7 + 24) + *(void *)(a7 + 40);
  unint64_t v18 = v15 - v14 + (v15 & 1);
  if (v18 >= *(void *)(a11 + 24)) {
    unint64_t v18 = *(void *)(a11 + 24);
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a9;
    uint64_t v21 = a9[1];
    uint64_t v22 = *a13;
    uint64_t v23 = *a12 + *a13 * *(void *)(a11 + 40) + v16;
    unint64_t v24 = a8[1] + v21 * (v14 >> 1) + ((2 * v13) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v25 = *a8 + *a9 * v14 + 2 * v13;
    uint32x4_t v26 = (uint32x4_t)vdupq_n_s32(0x401005u);
    do
    {
      if (v17)
      {
        uint64_t v27 = 0;
        for (unint64_t i = 0; i < v17; i += 2)
        {
          a4.i16[0] = *(_WORD *)(v24 + v27);
          a4.i16[2] = *(_WORD *)(v24 + v27 + 2);
          a5.i16[0] = *(_WORD *)(v25 + v27);
          a5.i16[2] = *(_WORD *)(v25 + v27 + 2);
          int32x4_t v29 = (int32x4_t)vmull_u16(vshr_n_u16((uint16x4_t)vuzp1_s16(a4, a5), 6uLL), (uint16x4_t)0xDB00DB00E000E0);
          int32x4_t v30 = vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v29.i8, *(uint32x2_t *)v26.i8), (int32x4_t)vmull_high_u32((uint32x4_t)v29, v26));
          int16x8_t v31 = (int16x8_t)vsubq_s32(v29, v30);
          *(int16x4_t *)v31.i8 = vadd_s16(vshrn_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v30, (uint32x4_t)v31, 1uLL), 9uLL), (int16x4_t)0x10001000100010);
          a5 = vrev32_s16(*(int16x4_t *)v31.i8);
          *(int16x4_t *)v31.i8 = vuzp1_s16(*(int16x4_t *)v31.i8, a5);
          a4 = (int16x4_t)vmovn_s16(v31);
          *(_DWORD *)(v23 + v27) = a4.i32[0];
          v27 += 4;
        }
      }
      v25 += v20;
      v23 += v22;
      v24 += (v19++ << 63 >> 63) & v21;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_Copy_xf20_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  unint64_t v12 = v8 & 0xFFFFFFFE;
  uint64_t v13 = v10 + v8;
  uint64_t v14 = (v10 + v8) & 1;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  unint64_t v19 = a6[2];
  unint64_t v20 = a6[3];
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + v21 * v18 + 4 * v17);
  unint64_t v23 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v23 >= v19) {
    unint64_t v23 = v19;
  }
  unint64_t v24 = v13 - v12 + v14;
  if (v24 >= v20) {
    unint64_t v24 = v20;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + 2 * (v9 & 0xFFFFFFFE) + v30;
    uint64_t v32 = a7[2] + v28 * v18 + 2 * v17;
    uint64_t v33 = *a7 + v27 * v18 + 2 * v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  unint64_t v35 = (v24 - (v8 & 1)) >> 1;
  if (v24 >> 1 < v35) {
    unint64_t v35 = v24 >> 1;
  }
  char v36 = v9;
  unint64_t v37 = v23 >> 1;
  uint64_t v38 = v9 & 1;
  if (v23 >> 1 >= (v23 - v38) >> 1) {
    unint64_t v37 = (v23 - v38) >> 1;
  }
  if (v8)
  {
    if (v36)
    {
      int v46 = v16[1] >> 6;
      uint64_t v39 = v16 + 2;
      *uint64_t v22 = ((67174465 * (unint64_t)(57344 * (*v16 >> 6))) >> 36) + 4096;
      v22[1] = ((67174465 * (unint64_t)(57344 * v46)) >> 36) + 4096;
      unsigned int v40 = v22 + 2;
      if (v37)
      {
LABEL_21:
        uint64_t v41 = -(uint64_t)v37;
        do
        {
          int v42 = *v39 >> 6;
          int v43 = v39[1] >> 6;
          v39 += 2;
          *unsigned int v40 = ((67174465 * (unint64_t)(57344 * v42)) >> 36) + 4096;
          v40[1] = ((67174465 * (unint64_t)(57344 * v43)) >> 36) + 4096;
          v40 += 2;
          BOOL v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        uint64_t v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v39 = v16;
      unsigned int v40 = v22;
      if (v37) {
        goto LABEL_21;
      }
    }
    uint64_t v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v23)
    {
      int v47 = *v39 >> 6;
      int v48 = v39[1] >> 6;
      *unsigned int v40 = (((67174465 * (unint64_t)(57344 * v47)) >> 32) >> 4) + 4096;
      v40[1] = (((67174465 * (unint64_t)(57344 * v48)) >> 32) >> 4) + 4096;
    }
    uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
    uint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      unint64_t v50 = v16;
      unsigned int v51 = v22;
      if (v36)
      {
        unint64_t v50 = v16 + 2;
        unint64_t v52 = (67174465 * (unint64_t)(57344 * (v16[1] >> 6))) >> 36;
        __int16 v53 = ((67174465 * (unint64_t)(57344 * (*v16 >> 6))) >> 36) + 4096;
        *uint64_t v22 = v53;
        LOWORD(v52) = v52 + 4096;
        v22[1] = v52;
        unsigned int v54 = (_WORD *)((char *)v22 + v21);
        *unsigned int v54 = v53;
        v54[1] = v52;
        unsigned int v51 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v55 = -(uint64_t)v37;
        do
        {
          unsigned int v56 = 57344 * (v50[1] >> 6);
          unsigned int v57 = (((67174465 * (unint64_t)(57344 * (*v50 >> 6))) >> 32) >> 4) + 4096;
          *unsigned int v51 = (((67174465 * (unint64_t)(57344 * (*v50 >> 6))) >> 32) >> 4) + 4096;
          unsigned int v58 = (((67174465 * (unint64_t)v56) >> 32) >> 4) + 4096;
          v51[1] = v58;
          v51[2] = v57;
          v51[3] = v58;
          unsigned int v59 = (_WORD *)((char *)v51 + v21);
          _WORD *v59 = v57;
          v59[1] = v58;
          v50 += 2;
          v59[2] = v57;
          v59[3] = v58;
          v51 += 4;
          BOOL v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v23)
      {
        int v60 = *v50 >> 6;
        int v61 = v50[1] >> 6;
        unsigned int v62 = (((67174465 * (unint64_t)(57344 * v60)) >> 32) >> 4) + 4096;
        *unsigned int v51 = v62;
        unsigned int v63 = (((67174465 * (unint64_t)(57344 * v61)) >> 32) >> 4) + 4096;
        v51[1] = v63;
        float v64 = (_WORD *)((char *)v51 + v21);
        *float v64 = v62;
        v64[1] = v63;
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
    uint64_t v65 = 2 * v35;
  }
  else
  {
    uint64_t v65 = 0;
  }
  if ((v65 | v8 & 1) < v24)
  {
    if (v36)
    {
      int v66 = *v16 >> 6;
      int v67 = v16[1] >> 6;
      v16 += 2;
      *uint64_t v22 = ((67174465 * (unint64_t)(57344 * v66)) >> 36) + 4096;
      v22[1] = ((67174465 * (unint64_t)(57344 * v67)) >> 36) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v68 = -(uint64_t)v37;
      do
      {
        int v69 = *v16 >> 6;
        int v70 = v16[1] >> 6;
        v16 += 2;
        *uint64_t v22 = ((67174465 * (unint64_t)(57344 * v69)) >> 36) + 4096;
        v22[1] = ((67174465 * (unint64_t)(57344 * v70)) >> 36) + 4096;
        v22 += 2;
        BOOL v44 = __CFADD__(v68++, 1);
      }
      while (!v44);
      uint64_t v71 = 2 * v37;
    }
    else
    {
      uint64_t v71 = 0;
    }
    if ((v71 | (unint64_t)v38) < v23)
    {
      int v72 = *v16 >> 6;
      int v73 = v16[1] >> 6;
      *uint64_t v22 = (((67174465 * (unint64_t)(57344 * v72)) >> 32) >> 4) + 4096;
      v22[1] = (((67174465 * (unint64_t)(57344 * v73)) >> 32) >> 4) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    uint64_t v28 = *a8;
    uint64_t v29 = v25 + v27;
    uint64_t v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v30 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v32 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v32) {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v21 >> 1;
  uint64_t v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1) {
    unint64_t v34 = (v21 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      int v43 = v14[1] >> 6;
      char v36 = v14 + 2;
      *unint64_t v20 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
      v20[1] = ((67174465 * (unint64_t)(57344 * v43)) >> 36) + 4096;
      unint64_t v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          int v39 = *v36 >> 6;
          int v40 = v36[1] >> 6;
          v36 += 2;
          *unint64_t v37 = ((67174465 * (unint64_t)(57344 * v39)) >> 36) + 4096;
          v37[1] = ((67174465 * (unint64_t)(57344 * v40)) >> 36) + 4096;
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      char v36 = v14;
      unint64_t v37 = v20;
      if (v34) {
        goto LABEL_21;
      }
    }
    uint64_t v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      int v44 = *v36 >> 6;
      int v45 = v36[1] >> 6;
      *unint64_t v37 = (((67174465 * (unint64_t)(57344 * v44)) >> 32) >> 4) + 4096;
      v37[1] = (((67174465 * (unint64_t)(57344 * v45)) >> 32) >> 4) + 4096;
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      int v47 = v14;
      int v48 = v20;
      if (v33)
      {
        int v47 = v14 + 2;
        unint64_t v49 = (67174465 * (unint64_t)(57344 * (v14[1] >> 6))) >> 36;
        __int16 v50 = ((67174465 * (unint64_t)(57344 * (*v14 >> 6))) >> 36) + 4096;
        *unint64_t v20 = v50;
        LOWORD(v49) = v49 + 4096;
        v20[1] = v49;
        unsigned int v51 = (_WORD *)((char *)v20 + v19);
        *unsigned int v51 = v50;
        v51[1] = v49;
        int v48 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v52 = -(uint64_t)v34;
        do
        {
          unsigned int v53 = 57344 * (v47[1] >> 6);
          unsigned int v54 = (((67174465 * (unint64_t)(57344 * (*v47 >> 6))) >> 32) >> 4) + 4096;
          *int v48 = (((67174465 * (unint64_t)(57344 * (*v47 >> 6))) >> 32) >> 4) + 4096;
          unsigned int v55 = (((67174465 * (unint64_t)v53) >> 32) >> 4) + 4096;
          v48[1] = v55;
          v48[2] = v54;
          v48[3] = v55;
          unsigned int v56 = (_WORD *)((char *)v48 + v19);
          *unsigned int v56 = v54;
          v56[1] = v55;
          v47 += 2;
          v56[2] = v54;
          v56[3] = v55;
          v48 += 4;
          BOOL v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        int v57 = *v47 >> 6;
        int v58 = v47[1] >> 6;
        unsigned int v59 = (((67174465 * (unint64_t)(57344 * v57)) >> 32) >> 4) + 4096;
        *int v48 = v59;
        unsigned int v60 = (((67174465 * (unint64_t)(57344 * v58)) >> 32) >> 4) + 4096;
        v48[1] = v60;
        int v61 = (_WORD *)((char *)v48 + v19);
        *int v61 = v59;
        v61[1] = v60;
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v62 = 2 * v32;
  }
  else
  {
    uint64_t v62 = 0;
  }
  if ((v62 | v8 & 1) < v22)
  {
    if (v33)
    {
      int v63 = *v14 >> 6;
      int v64 = v14[1] >> 6;
      v14 += 2;
      *unint64_t v20 = ((67174465 * (unint64_t)(57344 * v63)) >> 36) + 4096;
      v20[1] = ((67174465 * (unint64_t)(57344 * v64)) >> 36) + 4096;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v65 = -(uint64_t)v34;
      do
      {
        int v66 = *v14 >> 6;
        int v67 = v14[1] >> 6;
        v14 += 2;
        *unint64_t v20 = ((67174465 * (unint64_t)(57344 * v66)) >> 36) + 4096;
        v20[1] = ((67174465 * (unint64_t)(57344 * v67)) >> 36) + 4096;
        v20 += 2;
        BOOL v41 = __CFADD__(v65++, 1);
      }
      while (!v41);
      uint64_t v68 = 2 * v34;
    }
    else
    {
      uint64_t v68 = 0;
    }
    if ((v68 | (unint64_t)v35) < v21)
    {
      int v69 = *v14 >> 6;
      int v70 = v14[1] >> 6;
      *unint64_t v20 = (((67174465 * (unint64_t)(57344 * v69)) >> 32) >> 4) + 4096;
      v20[1] = (((67174465 * (unint64_t)(57344 * v70)) >> 32) >> 4) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + 2 * (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 36;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  uint64_t v31 = v8 & 1;
  unint64_t v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32) {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v21 >> 1;
  uint64_t v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1) {
    unint64_t v34 = (v21 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      unsigned int v43 = v14[1];
      char v36 = v14 + 2;
      *unint64_t v20 = (67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 36;
      v20[1] = (67174465 * (unint64_t)(0xFFFF * (v43 >> 6))) >> 36;
      unint64_t v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          unsigned int v39 = *v36;
          unsigned int v40 = v36[1];
          v36 += 2;
          *unint64_t v37 = (67174465 * (unint64_t)(0xFFFF * (v39 >> 6))) >> 36;
          v37[1] = (67174465 * (unint64_t)(0xFFFF * (v40 >> 6))) >> 36;
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      char v36 = v14;
      unint64_t v37 = v20;
      if (v34) {
        goto LABEL_21;
      }
    }
    uint64_t v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      unsigned int v44 = *v36;
      unsigned int v45 = v36[1];
      *unint64_t v37 = (67174465 * (unint64_t)(0xFFFF * (v44 >> 6))) >> 36;
      v37[1] = (67174465 * (unint64_t)(0xFFFF * (v45 >> 6))) >> 36;
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      int v47 = v14;
      int v48 = v20;
      if (v33)
      {
        int v47 = v14 + 2;
        unint64_t v49 = (67174465 * (unint64_t)(0xFFFF * (*v14 >> 6))) >> 36;
        unint64_t v50 = (67174465 * (unint64_t)(0xFFFF * (v14[1] >> 6))) >> 36;
        *unint64_t v20 = v49;
        v20[1] = v50;
        unsigned int v51 = (_WORD *)((char *)v20 + v19);
        *unsigned int v51 = v49;
        v51[1] = v50;
        int v48 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v52 = -(uint64_t)v34;
        do
        {
          unsigned int v53 = v47[1];
          unint64_t v54 = (67174465 * (unint64_t)(0xFFFF * (*v47 >> 6))) >> 36;
          *int v48 = v54;
          unint64_t v55 = (67174465 * (unint64_t)(0xFFFF * (v53 >> 6))) >> 36;
          v48[1] = v55;
          v48[2] = v54;
          v48[3] = v55;
          unsigned int v56 = (_WORD *)((char *)v48 + v19);
          *unsigned int v56 = v54;
          v56[1] = v55;
          v47 += 2;
          v56[2] = v54;
          v56[3] = v55;
          v48 += 4;
          BOOL v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        unint64_t v57 = (67174465 * (unint64_t)(0xFFFF * (*v47 >> 6))) >> 36;
        unint64_t v58 = (67174465 * (unint64_t)(0xFFFF * (v47[1] >> 6))) >> 36;
        *int v48 = v57;
        v48[1] = v58;
        unsigned int v59 = (_WORD *)((char *)v48 + v19);
        _WORD *v59 = v57;
        v59[1] = v58;
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v60 = 2 * v32;
  }
  else
  {
    uint64_t v60 = 0;
  }
  if ((v60 | (unint64_t)v31) < v22)
  {
    if (v33)
    {
      unsigned int v61 = *v14;
      unsigned int v62 = v14[1];
      v14 += 2;
      *unint64_t v20 = (67174465 * (unint64_t)(0xFFFF * (v61 >> 6))) >> 36;
      v20[1] = (67174465 * (unint64_t)(0xFFFF * (v62 >> 6))) >> 36;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v63 = -(uint64_t)v34;
      do
      {
        unsigned int v64 = *v14;
        unsigned int v65 = v14[1];
        v14 += 2;
        *unint64_t v20 = (67174465 * (unint64_t)(0xFFFF * (v64 >> 6))) >> 36;
        v20[1] = (67174465 * (unint64_t)(0xFFFF * (v65 >> 6))) >> 36;
        v20 += 2;
        BOOL v41 = __CFADD__(v63++, 1);
      }
      while (!v41);
      uint64_t v66 = 2 * v34;
    }
    else
    {
      uint64_t v66 = 0;
    }
    if ((v66 | (unint64_t)v35) < v21)
    {
      unsigned int v67 = *v14;
      unsigned int v68 = v14[1];
      *unint64_t v20 = (67174465 * (unint64_t)(0xFFFF * (v67 >> 6))) >> 36;
      v20[1] = (67174465 * (unint64_t)(0xFFFF * (v68 >> 6))) >> 36;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = *a3 + v26 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = v26;
    }
    uint64_t v31 = v29 + 2 * (v9 + v8) + v30;
    uint64_t v32 = a7[2] + v28 * v19 + v20;
    uint64_t v33 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v35 = v11 & 1;
  if (v24 >> 1 >= (v24 - v35) >> 1) {
    unint64_t v36 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v36 = v24 >> 1;
  }
  char v37 = v8;
  unint64_t v38 = v23 >> 1;
  unint64_t v39 = (v23 - v9) >> 1;
  if (v38 >= v39) {
    unint64_t v38 = v39;
  }
  if (v11)
  {
    if (v37)
    {
      int v42 = v15[1] >> 6;
      unsigned int v40 = v15 + 2;
      *unint64_t v22 = ((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 36) + 4096;
      v22[1] = ((67174465 * (unint64_t)(57344 * v42)) >> 36) + 4096;
      BOOL v41 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v40 = v15;
      BOOL v41 = v22;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v38;
    do
    {
      unint64_t v44 = (67174465 * (unint64_t)(57344 * (v40[1] >> 6))) >> 36;
      *BOOL v41 = ((67174465 * (unint64_t)(57344 * (*v40 >> 6))) >> 36) + 4096;
      v41[1] = v44 + 4096;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      int v47 = v15;
      int v48 = v22;
      if (v37)
      {
        int v49 = v15[1] >> 6;
        int v47 = v15 + 2;
        *unint64_t v22 = ((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 36) + 4096;
        v22[1] = ((67174465 * (unint64_t)(57344 * v49)) >> 36) + 4096;
        int v48 = v22 + 2;
      }
      if (v38)
      {
        uint64_t v50 = -(uint64_t)v38;
        do
        {
          unint64_t v51 = (67174465 * (unint64_t)(57344 * (v47[1] >> 6))) >> 36;
          unsigned int v52 = (((67174465 * (unint64_t)(57344 * (*v47 >> 6))) >> 32) >> 4) + 4096;
          *int v48 = (((67174465 * (unint64_t)(57344 * (*v47 >> 6))) >> 32) >> 4) + 4096;
          LOWORD(v51) = v51 + 4096;
          v48[1] = v51;
          unsigned int v53 = (_WORD *)((char *)v48 + v21);
          *unsigned int v53 = v52;
          v53[1] = v51;
          v48 += 2;
          v47 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v54 = 2 * v36;
  }
  else
  {
    uint64_t v54 = 0;
  }
  if ((v54 | (unint64_t)v35) < v24)
  {
    if (v37)
    {
      int v55 = *v15 >> 6;
      int v56 = v15[1] >> 6;
      v15 += 2;
      *unint64_t v22 = ((67174465 * (unint64_t)(57344 * v55)) >> 36) + 4096;
      v22[1] = ((67174465 * (unint64_t)(57344 * v56)) >> 36) + 4096;
      v22 += 2;
    }
    if (v38)
    {
      uint64_t v57 = -(uint64_t)v38;
      do
      {
        unint64_t v58 = (67174465 * (unint64_t)(57344 * (v15[1] >> 6))) >> 36;
        *unint64_t v22 = ((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 36) + 4096;
        v22[1] = v58 + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v45 = __CFADD__(v57++, 1);
      }
      while (!v45);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + 2 * (v9 + v8) + v29;
    uint64_t v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1) {
    unint64_t v34 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v34 = v24 >> 1;
  }
  char v35 = v8;
  unint64_t v36 = v23 >> 1;
  unint64_t v37 = (v23 - v9) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v11)
  {
    if (v35)
    {
      int v40 = v15[1] >> 6;
      unint64_t v38 = v15 + 2;
      *unint64_t v22 = ((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 36) + 4096;
      v22[1] = ((67174465 * (unint64_t)(57344 * v40)) >> 36) + 4096;
      unint64_t v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v38 = v15;
      unint64_t v39 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      unint64_t v42 = (67174465 * (unint64_t)(57344 * (v38[1] >> 6))) >> 36;
      *unint64_t v39 = ((67174465 * (unint64_t)(57344 * (*v38 >> 6))) >> 36) + 4096;
      v39[1] = v42 + 4096;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      BOOL v45 = v15;
      int v46 = v22;
      if (v35)
      {
        int v47 = v15[1] >> 6;
        BOOL v45 = v15 + 2;
        *unint64_t v22 = ((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 36) + 4096;
        v22[1] = ((67174465 * (unint64_t)(57344 * v47)) >> 36) + 4096;
        int v46 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v48 = -(uint64_t)v36;
        do
        {
          unint64_t v49 = (67174465 * (unint64_t)(57344 * (v45[1] >> 6))) >> 36;
          unsigned int v50 = (((67174465 * (unint64_t)(57344 * (*v45 >> 6))) >> 32) >> 4) + 4096;
          *int v46 = (((67174465 * (unint64_t)(57344 * (*v45 >> 6))) >> 32) >> 4) + 4096;
          LOWORD(v49) = v49 + 4096;
          v46[1] = v49;
          unint64_t v51 = (_WORD *)((char *)v46 + v21);
          *unint64_t v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          BOOL v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v52 = 2 * v34;
  }
  else
  {
    uint64_t v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if (v35)
    {
      int v53 = *v15 >> 6;
      int v54 = v15[1] >> 6;
      v15 += 2;
      *unint64_t v22 = ((67174465 * (unint64_t)(57344 * v53)) >> 36) + 4096;
      v22[1] = ((67174465 * (unint64_t)(57344 * v54)) >> 36) + 4096;
      v22 += 2;
    }
    if (v36)
    {
      uint64_t v55 = -(uint64_t)v36;
      do
      {
        unint64_t v56 = (67174465 * (unint64_t)(57344 * (v15[1] >> 6))) >> 36;
        *unint64_t v22 = ((67174465 * (unint64_t)(57344 * (*v15 >> 6))) >> 36) + 4096;
        v22[1] = v56 + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + 2 * (v9 + v8) + v29;
    uint64_t v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 36;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1) {
    unint64_t v34 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v34 = v24 >> 1;
  }
  char v35 = v8;
  unint64_t v36 = v23 >> 1;
  unint64_t v37 = (v23 - v9) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v11)
  {
    if (v35)
    {
      unsigned int v40 = v15[1];
      unint64_t v38 = v15 + 2;
      *unint64_t v22 = (67174465 * (unint64_t)(0xFFFF * (*v15 >> 6))) >> 36;
      v22[1] = (67174465 * (unint64_t)(0xFFFF * (v40 >> 6))) >> 36;
      unint64_t v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v38 = v15;
      unint64_t v39 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      unsigned int v42 = v38[1];
      *unint64_t v39 = (67174465 * (unint64_t)(0xFFFF * (*v38 >> 6))) >> 36;
      v39[1] = (67174465 * (unint64_t)(0xFFFF * (v42 >> 6))) >> 36;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      BOOL v45 = v15;
      int v46 = v22;
      if (v35)
      {
        unsigned int v47 = v15[1];
        BOOL v45 = v15 + 2;
        *unint64_t v22 = (67174465 * (unint64_t)(0xFFFF * (*v15 >> 6))) >> 36;
        v22[1] = (67174465 * (unint64_t)(0xFFFF * (v47 >> 6))) >> 36;
        int v46 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v48 = -(uint64_t)v36;
        do
        {
          unint64_t v49 = (67174465 * (unint64_t)(0xFFFF * (*v45 >> 6))) >> 36;
          unint64_t v50 = (67174465 * (unint64_t)(0xFFFF * (v45[1] >> 6))) >> 36;
          *int v46 = v49;
          v46[1] = v50;
          unint64_t v51 = (_WORD *)((char *)v46 + v21);
          *unint64_t v51 = v49;
          v51[1] = v50;
          v46 += 2;
          v45 += 2;
          BOOL v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v52 = 2 * v34;
  }
  else
  {
    uint64_t v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if (v35)
    {
      unsigned int v53 = *v15;
      unsigned int v54 = v15[1];
      v15 += 2;
      *unint64_t v22 = (67174465 * (unint64_t)(0xFFFF * (v53 >> 6))) >> 36;
      v22[1] = (67174465 * (unint64_t)(0xFFFF * (v54 >> 6))) >> 36;
      v22 += 2;
    }
    if (v36)
    {
      uint64_t v55 = -(uint64_t)v36;
      do
      {
        unsigned int v56 = v15[1];
        *unint64_t v22 = (67174465 * (unint64_t)(0xFFFF * (*v15 >> 6))) >> 36;
        v22[1] = (67174465 * (unint64_t)(0xFFFF * (v56 >> 6))) >> 36;
        v15 += 2;
        v22 += 2;
        BOOL v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v18 - v17) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (((67174465
                                                   * (unint64_t)(56064 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) >> 4)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v35 = v26 >> 1;
  unint64_t v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v35;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      int v42 = v16[1] >> 6;
      unsigned int v40 = v16 + 2;
      *unint64_t v23 = ((67174465 * (unint64_t)(57344 * (*v16 >> 6))) >> 36) + 4096;
      v23[1] = ((67174465 * (unint64_t)(57344 * v42)) >> 36) + 4096;
      uint64_t v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v40 = v16;
      uint64_t v41 = v23;
      if (!v39) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      unint64_t v44 = (67174465 * (unint64_t)(57344 * (v40[1] >> 6))) >> 36;
      *uint64_t v41 = ((67174465 * (unint64_t)(57344 * (*v40 >> 6))) >> 36) + 4096;
      v41[1] = v44 + 4096;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      unsigned int v47 = v16;
      uint64_t v48 = v23;
      if (v9)
      {
        int v49 = v16[1] >> 6;
        unsigned int v47 = v16 + 2;
        *unint64_t v23 = ((67174465 * (unint64_t)(57344 * (*v16 >> 6))) >> 36) + 4096;
        v23[1] = ((67174465 * (unint64_t)(57344 * v49)) >> 36) + 4096;
        uint64_t v48 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          unint64_t v51 = (67174465 * (unint64_t)(57344 * (v47[1] >> 6))) >> 36;
          *uint64_t v48 = ((67174465 * (unint64_t)(57344 * (*v47 >> 6))) >> 36) + 4096;
          v48[1] = v51 + 4096;
          v47 += 2;
          v48 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v18 - v17) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = (67174465 * (unint64_t)(0xFFFF * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 36;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v35 = v26 >> 1;
  unint64_t v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v35;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      unsigned int v42 = v16[1];
      unsigned int v40 = v16 + 2;
      *unint64_t v23 = (67174465 * (unint64_t)(0xFFFF * (*v16 >> 6))) >> 36;
      v23[1] = (67174465 * (unint64_t)(0xFFFF * (v42 >> 6))) >> 36;
      uint64_t v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v40 = v16;
      uint64_t v41 = v23;
      if (!v39) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      unsigned int v44 = v40[1];
      *uint64_t v41 = (67174465 * (unint64_t)(0xFFFF * (*v40 >> 6))) >> 36;
      v41[1] = (67174465 * (unint64_t)(0xFFFF * (v44 >> 6))) >> 36;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      unsigned int v47 = v16;
      uint64_t v48 = v23;
      if (v9)
      {
        unsigned int v49 = v16[1];
        unsigned int v47 = v16 + 2;
        *unint64_t v23 = (67174465 * (unint64_t)(0xFFFF * (*v16 >> 6))) >> 36;
        v23[1] = (67174465 * (unint64_t)(0xFFFF * (v49 >> 6))) >> 36;
        uint64_t v48 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          unsigned int v51 = v47[1];
          *uint64_t v48 = (67174465 * (unint64_t)(0xFFFF * (*v47 >> 6))) >> 36;
          v48[1] = (67174465 * (unint64_t)(0xFFFF * (v51 >> 6))) >> 36;
          v47 += 2;
          v48 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  unint64_t v12 = v8 & 0xFFFFFFFE;
  uint64_t v13 = v10 + v8;
  uint64_t v14 = (v10 + v8) & 1;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  unint64_t v19 = a6[2];
  unint64_t v20 = a6[3];
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + v21 * v18 + 4 * v17);
  unint64_t v23 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v23 >= v19) {
    unint64_t v23 = v19;
  }
  unint64_t v24 = v13 - v12 + v14;
  if (v24 >= v20) {
    unint64_t v24 = v20;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + 2 * (v9 & 0xFFFFFFFE) + v30;
    uint64_t v32 = a7[2] + v28 * v18 + 2 * v17;
    uint64_t v33 = *a7 + v27 * v18 + 2 * v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  unint64_t v35 = (v24 - (v8 & 1)) >> 1;
  if (v24 >> 1 < v35) {
    unint64_t v35 = v24 >> 1;
  }
  char v36 = v9;
  unint64_t v37 = v23 >> 1;
  uint64_t v38 = v9 & 1;
  if (v23 >> 1 >= (v23 - v38) >> 1) {
    unint64_t v37 = (v23 - v38) >> 1;
  }
  if (v8)
  {
    if (v36)
    {
      int v46 = v16[1] >> 6;
      unint64_t v39 = v16 + 2;
      *uint64_t v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v16 >> 6))) >> 32) + 4096;
      v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v46)) >> 32) + 4096;
      unsigned int v40 = v22 + 2;
      if (v37)
      {
LABEL_21:
        uint64_t v41 = -(uint64_t)v37;
        do
        {
          int v42 = *v39 >> 6;
          int v43 = v39[1] >> 6;
          v39 += 2;
          *unsigned int v40 = 16 * ((4198405 * (unint64_t)(3584 * v42)) >> 32) + 4096;
          v40[1] = 16 * ((4198405 * (unint64_t)(3584 * v43)) >> 32) + 4096;
          v40 += 2;
          BOOL v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        uint64_t v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v39 = v16;
      unsigned int v40 = v22;
      if (v37) {
        goto LABEL_21;
      }
    }
    uint64_t v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v23)
    {
      int v47 = *v39 >> 6;
      int v48 = v39[1] >> 6;
      *unsigned int v40 = 16 * ((4198405 * (unint64_t)(3584 * v47)) >> 32) + 4096;
      v40[1] = 16 * ((4198405 * (unint64_t)(3584 * v48)) >> 32) + 4096;
    }
    unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
    uint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      uint64_t v50 = v16;
      unsigned int v51 = v22;
      if (v36)
      {
        uint64_t v50 = v16 + 2;
        unint64_t v52 = (4198405 * (unint64_t)(3584 * (v16[1] >> 6))) >> 32;
        __int16 v53 = 16 * ((4198405 * (unint64_t)(3584 * (*v16 >> 6))) >> 32) + 4096;
        *uint64_t v22 = v53;
        LOWORD(v52) = 16 * v52 + 4096;
        v22[1] = v52;
        unsigned int v54 = (_WORD *)((char *)v22 + v21);
        *unsigned int v54 = v53;
        v54[1] = v52;
        unsigned int v51 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v55 = -(uint64_t)v37;
        do
        {
          uint64_t v56 = 15047083520 * (v50[1] >> 6);
          int v57 = 16 * ((4198405 * (unint64_t)(3584 * (*v50 >> 6))) >> 32) + 4096;
          *unsigned int v51 = 16 * ((4198405 * (unint64_t)(3584 * (*v50 >> 6))) >> 32) + 4096;
          LOWORD(v56) = 16 * WORD2(v56) + 4096;
          v51[1] = v56;
          v51[2] = v57;
          v51[3] = v56;
          unint64_t v58 = (_WORD *)((char *)v51 + v21);
          *unint64_t v58 = v57;
          v58[1] = v56;
          v50 += 2;
          v58[2] = v57;
          v58[3] = v56;
          v51 += 4;
          BOOL v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v23)
      {
        int v59 = *v50 >> 6;
        int v60 = v50[1] >> 6;
        int v61 = 16 * ((4198405 * (unint64_t)(3584 * v59)) >> 32) + 4096;
        *unsigned int v51 = v61;
        int v62 = 16 * ((4198405 * (unint64_t)(3584 * v60)) >> 32) + 4096;
        v51[1] = v62;
        uint64_t v63 = (_WORD *)((char *)v51 + v21);
        *uint64_t v63 = v61;
        v63[1] = v62;
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
    uint64_t v64 = 2 * v35;
  }
  else
  {
    uint64_t v64 = 0;
  }
  if ((v64 | v8 & 1) < v24)
  {
    if (v36)
    {
      int v65 = *v16 >> 6;
      int v66 = v16[1] >> 6;
      v16 += 2;
      *uint64_t v22 = 16 * ((4198405 * (unint64_t)(3584 * v65)) >> 32) + 4096;
      v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v66)) >> 32) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v67 = -(uint64_t)v37;
      do
      {
        int v68 = *v16 >> 6;
        int v69 = v16[1] >> 6;
        v16 += 2;
        *uint64_t v22 = 16 * ((4198405 * (unint64_t)(3584 * v68)) >> 32) + 4096;
        v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v69)) >> 32) + 4096;
        v22 += 2;
        BOOL v44 = __CFADD__(v67++, 1);
      }
      while (!v44);
      uint64_t v70 = 2 * v37;
    }
    else
    {
      uint64_t v70 = 0;
    }
    if ((v70 | (unint64_t)v38) < v23)
    {
      int v71 = *v16 >> 6;
      int v72 = v16[1] >> 6;
      *uint64_t v22 = 16 * ((4198405 * (unint64_t)(3584 * v71)) >> 32) + 4096;
      v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v72)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  if (v12 - v11 + (v12 & 1) >= v17) {
    unint64_t v22 = v17;
  }
  else {
    unint64_t v22 = v12 - v11 + (v12 & 1);
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    uint64_t v28 = *a8;
    uint64_t v29 = v25 + v27;
    uint64_t v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v30 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v32 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v32) {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v21 >> 1;
  uint64_t v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1) {
    unint64_t v34 = (v21 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      int v43 = v14[1] >> 6;
      char v36 = v14 + 2;
      *unint64_t v20 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
      v20[1] = 16 * ((4198405 * (unint64_t)(3584 * v43)) >> 32) + 4096;
      unint64_t v37 = v20 + 2;
      if (v34)
      {
LABEL_22:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          int v39 = *v36 >> 6;
          int v40 = v36[1] >> 6;
          v36 += 2;
          *unint64_t v37 = 16 * ((4198405 * (unint64_t)(3584 * v39)) >> 32) + 4096;
          v37[1] = 16 * ((4198405 * (unint64_t)(3584 * v40)) >> 32) + 4096;
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      char v36 = v14;
      unint64_t v37 = v20;
      if (v34) {
        goto LABEL_22;
      }
    }
    uint64_t v42 = 0;
LABEL_28:
    if ((v42 | (unint64_t)v35) < v21)
    {
      int v44 = *v36 >> 6;
      int v45 = v36[1] >> 6;
      *unint64_t v37 = 16 * ((4198405 * (unint64_t)(3584 * v44)) >> 32) + 4096;
      v37[1] = 16 * ((4198405 * (unint64_t)(3584 * v45)) >> 32) + 4096;
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      int v47 = v14;
      int v48 = v20;
      if (v33)
      {
        int v47 = v14 + 2;
        unint64_t v49 = (4198405 * (unint64_t)(3584 * (v14[1] >> 6))) >> 32;
        __int16 v50 = 16 * ((4198405 * (unint64_t)(3584 * (*v14 >> 6))) >> 32) + 4096;
        *unint64_t v20 = v50;
        LOWORD(v49) = 16 * v49 + 4096;
        v20[1] = v49;
        unsigned int v51 = (_WORD *)((char *)v20 + v19);
        *unsigned int v51 = v50;
        v51[1] = v49;
        int v48 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v52 = -(uint64_t)v34;
        do
        {
          uint64_t v53 = 15047083520 * (v47[1] >> 6);
          int v54 = 16 * ((4198405 * (unint64_t)(3584 * (*v47 >> 6))) >> 32) + 4096;
          *int v48 = 16 * ((4198405 * (unint64_t)(3584 * (*v47 >> 6))) >> 32) + 4096;
          LOWORD(v53) = 16 * WORD2(v53) + 4096;
          v48[1] = v53;
          v48[2] = v54;
          v48[3] = v53;
          uint64_t v55 = (_WORD *)((char *)v48 + v19);
          *uint64_t v55 = v54;
          v55[1] = v53;
          v47 += 2;
          v55[2] = v54;
          v55[3] = v53;
          v48 += 4;
          BOOL v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        int v56 = *v47 >> 6;
        int v57 = v47[1] >> 6;
        int v58 = 16 * ((4198405 * (unint64_t)(3584 * v56)) >> 32) + 4096;
        *int v48 = v58;
        int v59 = 16 * ((4198405 * (unint64_t)(3584 * v57)) >> 32) + 4096;
        v48[1] = v59;
        int v60 = (_WORD *)((char *)v48 + v19);
        *int v60 = v58;
        v60[1] = v59;
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v61 = 2 * v32;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if (v33)
    {
      int v62 = *v14 >> 6;
      int v63 = v14[1] >> 6;
      v14 += 2;
      *unint64_t v20 = 16 * ((4198405 * (unint64_t)(3584 * v62)) >> 32) + 4096;
      v20[1] = 16 * ((4198405 * (unint64_t)(3584 * v63)) >> 32) + 4096;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v64 = -(uint64_t)v34;
      do
      {
        int v65 = *v14 >> 6;
        int v66 = v14[1] >> 6;
        v14 += 2;
        *unint64_t v20 = 16 * ((4198405 * (unint64_t)(3584 * v65)) >> 32) + 4096;
        v20[1] = 16 * ((4198405 * (unint64_t)(3584 * v66)) >> 32) + 4096;
        v20 += 2;
        BOOL v41 = __CFADD__(v64++, 1);
      }
      while (!v41);
      v34 *= 2;
    }
    if ((v34 | v35) < v21)
    {
      int v67 = *v14 >> 6;
      int v68 = v14[1] >> 6;
      *unint64_t v20 = 16 * ((4198405 * (unint64_t)(3584 * v67)) >> 32) + 4096;
      v20[1] = 16 * ((4198405 * (unint64_t)(3584 * v68)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + 2 * (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32);
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  uint64_t v31 = v8 & 1;
  unint64_t v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32) {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v21 >> 1;
  uint64_t v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1) {
    unint64_t v34 = (v21 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      unsigned int v43 = v14[1];
      char v36 = v14 + 2;
      *unint64_t v20 = 16 * ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32);
      v20[1] = 16 * ((4198405 * (unint64_t)(4095 * (v43 >> 6))) >> 32);
      unint64_t v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          unsigned int v39 = *v36;
          unsigned int v40 = v36[1];
          v36 += 2;
          *unint64_t v37 = 16 * ((4198405 * (unint64_t)(4095 * (v39 >> 6))) >> 32);
          v37[1] = 16 * ((4198405 * (unint64_t)(4095 * (v40 >> 6))) >> 32);
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      char v36 = v14;
      unint64_t v37 = v20;
      if (v34) {
        goto LABEL_21;
      }
    }
    uint64_t v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      unsigned int v44 = *v36;
      unsigned int v45 = v36[1];
      *unint64_t v37 = 16 * ((4198405 * (unint64_t)(4095 * (v44 >> 6))) >> 32);
      v37[1] = 16 * ((4198405 * (unint64_t)(4095 * (v45 >> 6))) >> 32);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      int v47 = v14;
      int v48 = v20;
      if (v33)
      {
        unsigned int v49 = v14[1];
        int v47 = v14 + 2;
        int v50 = 16 * ((4198405 * (unint64_t)(4095 * (*v14 >> 6))) >> 32);
        *unint64_t v20 = v50;
        int v51 = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
        v20[1] = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
        uint64_t v52 = (_WORD *)((char *)v20 + v19);
        *uint64_t v52 = v50;
        v52[1] = v51;
        int v48 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v53 = -(uint64_t)v34;
        do
        {
          unsigned int v54 = v47[1];
          int v55 = 16 * ((4198405 * (unint64_t)(4095 * (*v47 >> 6))) >> 32);
          *int v48 = 16 * ((4198405 * (unint64_t)(4095 * (*v47 >> 6))) >> 32);
          int v56 = 16 * ((4198405 * (unint64_t)(4095 * (v54 >> 6))) >> 32);
          v48[1] = 16 * ((4198405 * (unint64_t)(4095 * (v54 >> 6))) >> 32);
          v48[2] = v55;
          v48[3] = 16 * ((4198405 * (unint64_t)(4095 * (v54 >> 6))) >> 32);
          int v57 = (_WORD *)((char *)v48 + v19);
          _WORD *v57 = v55;
          v57[1] = v56;
          v47 += 2;
          v57[2] = v55;
          v57[3] = v56;
          v48 += 4;
          BOOL v41 = __CFADD__(v53++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        unsigned int v58 = *v47;
        unsigned int v59 = v47[1];
        int v60 = 16 * ((4198405 * (unint64_t)(4095 * (v58 >> 6))) >> 32);
        *int v48 = v60;
        int v61 = 16 * ((4198405 * (unint64_t)(4095 * (v59 >> 6))) >> 32);
        v48[1] = v61;
        int v62 = (_WORD *)((char *)v48 + v19);
        *int v62 = v60;
        v62[1] = v61;
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v63 = 2 * v32;
  }
  else
  {
    uint64_t v63 = 0;
  }
  if ((v63 | (unint64_t)v31) < v22)
  {
    if (v33)
    {
      unsigned int v64 = *v14;
      unsigned int v65 = v14[1];
      v14 += 2;
      *unint64_t v20 = 16 * ((4198405 * (unint64_t)(4095 * (v64 >> 6))) >> 32);
      v20[1] = 16 * ((4198405 * (unint64_t)(4095 * (v65 >> 6))) >> 32);
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v66 = -(uint64_t)v34;
      do
      {
        unsigned int v67 = *v14;
        unsigned int v68 = v14[1];
        v14 += 2;
        *unint64_t v20 = 16 * ((4198405 * (unint64_t)(4095 * (v67 >> 6))) >> 32);
        v20[1] = 16 * ((4198405 * (unint64_t)(4095 * (v68 >> 6))) >> 32);
        v20 += 2;
        BOOL v41 = __CFADD__(v66++, 1);
      }
      while (!v41);
      uint64_t v69 = 2 * v34;
    }
    else
    {
      uint64_t v69 = 0;
    }
    if ((v69 | (unint64_t)v35) < v21)
    {
      unsigned int v70 = *v14;
      unsigned int v71 = v14[1];
      *unint64_t v20 = 16 * ((4198405 * (unint64_t)(4095 * (v70 >> 6))) >> 32);
      v20[1] = 16 * ((4198405 * (unint64_t)(4095 * (v71 >> 6))) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = *a3 + v26 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = v26;
    }
    uint64_t v31 = v29 + 2 * (v9 + v8) + v30;
    uint64_t v32 = a7[2] + v28 * v19 + v20;
    uint64_t v33 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v35 = v11 & 1;
  if (v24 >> 1 >= (v24 - v35) >> 1) {
    unint64_t v36 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v36 = v24 >> 1;
  }
  char v37 = v8;
  unint64_t v38 = v23 >> 1;
  unint64_t v39 = (v23 - v9) >> 1;
  if (v38 >= v39) {
    unint64_t v38 = v39;
  }
  if (v11)
  {
    if (v37)
    {
      int v42 = v15[1] >> 6;
      unsigned int v40 = v15 + 2;
      *unint64_t v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32) + 4096;
      v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v42)) >> 32) + 4096;
      BOOL v41 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v40 = v15;
      BOOL v41 = v22;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v38;
    do
    {
      unint64_t v44 = (4198405 * (unint64_t)(3584 * (v40[1] >> 6))) >> 32;
      *BOOL v41 = 16 * ((4198405 * (unint64_t)(3584 * (*v40 >> 6))) >> 32) + 4096;
      v41[1] = 16 * v44 + 4096;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      int v47 = v15;
      int v48 = v22;
      if (v37)
      {
        int v49 = v15[1] >> 6;
        int v47 = v15 + 2;
        *unint64_t v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32) + 4096;
        v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v49)) >> 32) + 4096;
        int v48 = v22 + 2;
      }
      if (v38)
      {
        uint64_t v50 = -(uint64_t)v38;
        do
        {
          unint64_t v51 = (4198405 * (unint64_t)(3584 * (v47[1] >> 6))) >> 32;
          int v52 = 16 * ((4198405 * (unint64_t)(3584 * (*v47 >> 6))) >> 32) + 4096;
          *int v48 = 16 * ((4198405 * (unint64_t)(3584 * (*v47 >> 6))) >> 32) + 4096;
          LOWORD(v51) = 16 * v51 + 4096;
          v48[1] = v51;
          uint64_t v53 = (_WORD *)((char *)v48 + v21);
          *uint64_t v53 = v52;
          v53[1] = v51;
          v48 += 2;
          v47 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v54 = 2 * v36;
  }
  else
  {
    uint64_t v54 = 0;
  }
  if ((v54 | (unint64_t)v35) < v24)
  {
    if (v37)
    {
      int v55 = *v15 >> 6;
      int v56 = v15[1] >> 6;
      v15 += 2;
      *unint64_t v22 = 16 * ((4198405 * (unint64_t)(3584 * v55)) >> 32) + 4096;
      v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v56)) >> 32) + 4096;
      v22 += 2;
    }
    if (v38)
    {
      uint64_t v57 = -(uint64_t)v38;
      do
      {
        unint64_t v58 = (4198405 * (unint64_t)(3584 * (v15[1] >> 6))) >> 32;
        *unint64_t v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32) + 4096;
        v22[1] = 16 * v58 + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v45 = __CFADD__(v57++, 1);
      }
      while (!v45);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + 2 * (v9 + v8) + v29;
    uint64_t v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1) {
    unint64_t v34 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v34 = v24 >> 1;
  }
  char v35 = v8;
  unint64_t v36 = v23 >> 1;
  unint64_t v37 = (v23 - v9) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v11)
  {
    if (v35)
    {
      int v40 = v15[1] >> 6;
      unint64_t v38 = v15 + 2;
      *unint64_t v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32) + 4096;
      v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v40)) >> 32) + 4096;
      unint64_t v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v38 = v15;
      unint64_t v39 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      unint64_t v42 = (4198405 * (unint64_t)(3584 * (v38[1] >> 6))) >> 32;
      *unint64_t v39 = 16 * ((4198405 * (unint64_t)(3584 * (*v38 >> 6))) >> 32) + 4096;
      v39[1] = 16 * v42 + 4096;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      BOOL v45 = v15;
      int v46 = v22;
      if (v35)
      {
        int v47 = v15[1] >> 6;
        BOOL v45 = v15 + 2;
        *unint64_t v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32) + 4096;
        v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v47)) >> 32) + 4096;
        int v46 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v48 = -(uint64_t)v36;
        do
        {
          unint64_t v49 = (4198405 * (unint64_t)(3584 * (v45[1] >> 6))) >> 32;
          int v50 = 16 * ((4198405 * (unint64_t)(3584 * (*v45 >> 6))) >> 32) + 4096;
          *int v46 = 16 * ((4198405 * (unint64_t)(3584 * (*v45 >> 6))) >> 32) + 4096;
          LOWORD(v49) = 16 * v49 + 4096;
          v46[1] = v49;
          unint64_t v51 = (_WORD *)((char *)v46 + v21);
          *unint64_t v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          BOOL v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v52 = 2 * v34;
  }
  else
  {
    uint64_t v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if (v35)
    {
      int v53 = *v15 >> 6;
      int v54 = v15[1] >> 6;
      v15 += 2;
      *unint64_t v22 = 16 * ((4198405 * (unint64_t)(3584 * v53)) >> 32) + 4096;
      v22[1] = 16 * ((4198405 * (unint64_t)(3584 * v54)) >> 32) + 4096;
      v22 += 2;
    }
    if (v36)
    {
      uint64_t v55 = -(uint64_t)v36;
      do
      {
        unint64_t v56 = (4198405 * (unint64_t)(3584 * (v15[1] >> 6))) >> 32;
        *unint64_t v22 = 16 * ((4198405 * (unint64_t)(3584 * (*v15 >> 6))) >> 32) + 4096;
        v22[1] = 16 * v56 + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + 2 * (v9 + v8) + v29;
    uint64_t v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32);
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1) {
    unint64_t v34 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v34 = v24 >> 1;
  }
  char v35 = v8;
  unint64_t v36 = v23 >> 1;
  unint64_t v37 = (v23 - v9) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v11)
  {
    if (v35)
    {
      unsigned int v40 = v15[1];
      unint64_t v38 = v15 + 2;
      *unint64_t v22 = 16 * ((4198405 * (unint64_t)(4095 * (*v15 >> 6))) >> 32);
      v22[1] = 16 * ((4198405 * (unint64_t)(4095 * (v40 >> 6))) >> 32);
      unint64_t v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v38 = v15;
      unint64_t v39 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      unint64_t v42 = (4198405 * (unint64_t)(4095 * (v38[1] >> 6))) >> 32;
      *unint64_t v39 = 16 * ((4198405 * (unint64_t)(4095 * (*v38 >> 6))) >> 32);
      v39[1] = 16 * v42;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      BOOL v45 = v15;
      int v46 = v22;
      if (v35)
      {
        unsigned int v47 = v15[1];
        BOOL v45 = v15 + 2;
        *unint64_t v22 = 16 * ((4198405 * (unint64_t)(4095 * (*v15 >> 6))) >> 32);
        v22[1] = 16 * ((4198405 * (unint64_t)(4095 * (v47 >> 6))) >> 32);
        int v46 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v48 = -(uint64_t)v36;
        do
        {
          unsigned int v49 = v45[1];
          int v50 = 16 * ((4198405 * (unint64_t)(4095 * (*v45 >> 6))) >> 32);
          *int v46 = 16 * ((4198405 * (unint64_t)(4095 * (*v45 >> 6))) >> 32);
          int v51 = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
          v46[1] = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
          uint64_t v52 = (_WORD *)((char *)v46 + v21);
          *uint64_t v52 = v50;
          v52[1] = v51;
          v46 += 2;
          v45 += 2;
          BOOL v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v53 = 2 * v34;
  }
  else
  {
    uint64_t v53 = 0;
  }
  if ((v53 | (unint64_t)v33) < v24)
  {
    if (v35)
    {
      unsigned int v54 = *v15;
      unsigned int v55 = v15[1];
      v15 += 2;
      *unint64_t v22 = 16 * ((4198405 * (unint64_t)(4095 * (v54 >> 6))) >> 32);
      v22[1] = 16 * ((4198405 * (unint64_t)(4095 * (v55 >> 6))) >> 32);
      v22 += 2;
    }
    if (v36)
    {
      uint64_t v56 = -(uint64_t)v36;
      do
      {
        unint64_t v57 = (4198405 * (unint64_t)(4095 * (v15[1] >> 6))) >> 32;
        *unint64_t v22 = 16 * ((4198405 * (unint64_t)(4095 * (*v15 >> 6))) >> 32);
        v22[1] = 16 * v57;
        v15 += 2;
        v22 += 2;
        BOOL v43 = __CFADD__(v56++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v18 - v17) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(3504 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v35 = v26 >> 1;
  unint64_t v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v35;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      int v42 = v16[1] >> 6;
      unsigned int v40 = v16 + 2;
      *unint64_t v23 = 16 * ((4198405 * (unint64_t)(3584 * (*v16 >> 6))) >> 32) + 4096;
      v23[1] = 16 * ((4198405 * (unint64_t)(3584 * v42)) >> 32) + 4096;
      uint64_t v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v40 = v16;
      uint64_t v41 = v23;
      if (!v39) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      unint64_t v44 = (4198405 * (unint64_t)(3584 * (v40[1] >> 6))) >> 32;
      *uint64_t v41 = 16 * ((4198405 * (unint64_t)(3584 * (*v40 >> 6))) >> 32) + 4096;
      v41[1] = 16 * v44 + 4096;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      unsigned int v47 = v16;
      uint64_t v48 = v23;
      if (v9)
      {
        int v49 = v16[1] >> 6;
        unsigned int v47 = v16 + 2;
        *unint64_t v23 = 16 * ((4198405 * (unint64_t)(3584 * (*v16 >> 6))) >> 32) + 4096;
        v23[1] = 16 * ((4198405 * (unint64_t)(3584 * v49)) >> 32) + 4096;
        uint64_t v48 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          unint64_t v51 = (4198405 * (unint64_t)(3584 * (v47[1] >> 6))) >> 32;
          *uint64_t v48 = 16 * ((4198405 * (unint64_t)(3584 * (*v47 >> 6))) >> 32) + 4096;
          v48[1] = 16 * v51 + 4096;
          v47 += 2;
          v48 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v18 - v17) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = 16
                                  * ((4198405 * (unint64_t)(4095 * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v35 = v26 >> 1;
  unint64_t v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v35;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      unsigned int v42 = v16[1];
      unsigned int v40 = v16 + 2;
      *unint64_t v23 = 16 * ((4198405 * (unint64_t)(4095 * (*v16 >> 6))) >> 32);
      v23[1] = 16 * ((4198405 * (unint64_t)(4095 * (v42 >> 6))) >> 32);
      uint64_t v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v40 = v16;
      uint64_t v41 = v23;
      if (!v39) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      unint64_t v44 = (4198405 * (unint64_t)(4095 * (v40[1] >> 6))) >> 32;
      *uint64_t v41 = 16 * ((4198405 * (unint64_t)(4095 * (*v40 >> 6))) >> 32);
      v41[1] = 16 * v44;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      unsigned int v47 = v16;
      uint64_t v48 = v23;
      if (v9)
      {
        unsigned int v49 = v16[1];
        unsigned int v47 = v16 + 2;
        *unint64_t v23 = 16 * ((4198405 * (unint64_t)(4095 * (*v16 >> 6))) >> 32);
        v23[1] = 16 * ((4198405 * (unint64_t)(4095 * (v49 >> 6))) >> 32);
        uint64_t v48 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          unint64_t v51 = (4198405 * (unint64_t)(4095 * (v47[1] >> 6))) >> 32;
          *uint64_t v48 = 16 * ((4198405 * (unint64_t)(4095 * (*v47 >> 6))) >> 32);
          v48[1] = 16 * v51;
          v47 += 2;
          v48 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  unint64_t v12 = v8 & 0xFFFFFFFE;
  uint64_t v13 = v10 + v8;
  uint64_t v14 = (v10 + v8) & 1;
  uint64_t v15 = a4[1];
  unint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  unint64_t v19 = a6[2];
  unint64_t v20 = a6[3];
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + v21 * v18 + 4 * v17);
  unint64_t v23 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v23 >= v19) {
    unint64_t v23 = v19;
  }
  unint64_t v24 = v13 - v12 + v14;
  if (v24 >= v20) {
    unint64_t v24 = v20;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + 2 * (v9 & 0xFFFFFFFE) + v30;
    uint64_t v32 = a7[2] + v28 * v18 + 2 * v17;
    uint64_t v33 = *a7 + v27 * v18 + 2 * v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  unint64_t v35 = (v24 - (v8 & 1)) >> 1;
  if (v24 >> 1 < v35) {
    unint64_t v35 = v24 >> 1;
  }
  char v36 = v9;
  unint64_t v37 = v23 >> 1;
  uint64_t v38 = v9 & 1;
  if (v23 >> 1 >= (v23 - v38) >> 1) {
    unint64_t v37 = (v23 - v38) >> 1;
  }
  if (v8)
  {
    if (v36)
    {
      int v46 = v16[1] >> 6;
      unint64_t v39 = v16 + 2;
      *uint64_t v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v16 >> 6))) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v46)) >> 32) << 6) + 4096;
      unsigned int v40 = v22 + 2;
      if (v37)
      {
LABEL_21:
        uint64_t v41 = -(uint64_t)v37;
        do
        {
          int v42 = *v39 >> 6;
          int v43 = v39[1] >> 6;
          v39 += 2;
          *unsigned int v40 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v42)) >> 32) << 6) + 4096;
          v40[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v43)) >> 32) << 6) + 4096;
          v40 += 2;
          BOOL v44 = __CFADD__(v41++, 1);
        }
        while (!v44);
        uint64_t v45 = 2 * v37;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v39 = v16;
      unsigned int v40 = v22;
      if (v37) {
        goto LABEL_21;
      }
    }
    uint64_t v45 = 0;
LABEL_27:
    if ((v45 | (unint64_t)v38) < v23)
    {
      int v47 = *v39 >> 6;
      int v48 = v39[1] >> 6;
      *unsigned int v40 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v47)) >> 32) << 6) + 4096;
      v40[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
    }
    unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
    uint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      uint64_t v50 = v16;
      unint64_t v51 = v22;
      if (v36)
      {
        uint64_t v50 = v16 + 2;
        unint64_t v52 = (4198405 * (unint64_t)(896 * (v16[1] >> 6))) >> 32;
        __int16 v53 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v16 >> 6))) >> 32) << 6) + 4096;
        *uint64_t v22 = v53;
        LOWORD(v52) = ((_WORD)v52 << 6) + 4096;
        v22[1] = v52;
        unsigned int v54 = (_WORD *)((char *)v22 + v21);
        *unsigned int v54 = v53;
        v54[1] = v52;
        unint64_t v51 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v55 = -(uint64_t)v37;
        do
        {
          uint64_t v56 = 3761770880 * (v50[1] >> 6);
          int v57 = ((4198405 * (unint64_t)(896 * (*v50 >> 6))) >> 32 << 6) + 4096;
          *unint64_t v51 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v50 >> 6))) >> 32) << 6) + 4096;
          LOWORD(v56) = (WORD2(v56) << 6) + 4096;
          v51[1] = v56;
          v51[2] = v57;
          v51[3] = v56;
          unint64_t v58 = (_WORD *)((char *)v51 + v21);
          *unint64_t v58 = v57;
          v58[1] = v56;
          v50 += 2;
          v58[2] = v57;
          v58[3] = v56;
          v51 += 4;
          BOOL v44 = __CFADD__(v55++, 1);
        }
        while (!v44);
      }
      if ((v38 | (2 * v37)) < v23)
      {
        int v59 = *v50 >> 6;
        int v60 = v50[1] >> 6;
        int v61 = ((4198405 * (unint64_t)(896 * v59)) >> 32 << 6) + 4096;
        *unint64_t v51 = v61;
        int v62 = ((4198405 * (unint64_t)(896 * v60)) >> 32 << 6) + 4096;
        v51[1] = v62;
        uint64_t v63 = (_WORD *)((char *)v51 + v21);
        *uint64_t v63 = v61;
        v63[1] = v62;
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
    uint64_t v64 = 2 * v35;
  }
  else
  {
    uint64_t v64 = 0;
  }
  if ((v64 | v8 & 1) < v24)
  {
    if (v36)
    {
      int v65 = *v16 >> 6;
      int v66 = v16[1] >> 6;
      v16 += 2;
      *uint64_t v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v65)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v66)) >> 32) << 6) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v67 = -(uint64_t)v37;
      do
      {
        int v68 = *v16 >> 6;
        int v69 = v16[1] >> 6;
        v16 += 2;
        *uint64_t v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v68)) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v69)) >> 32) << 6) + 4096;
        v22 += 2;
        BOOL v44 = __CFADD__(v67++, 1);
      }
      while (!v44);
      uint64_t v70 = 2 * v37;
    }
    else
    {
      uint64_t v70 = 0;
    }
    if ((v70 | (unint64_t)v38) < v23)
    {
      int v71 = *v16 >> 6;
      int v72 = v16[1] >> 6;
      *uint64_t v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v71)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v72)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  if (v12 - v11 + (v12 & 1) >= v17) {
    unint64_t v22 = v17;
  }
  else {
    unint64_t v22 = v12 - v11 + (v12 & 1);
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = 2 * (v9 & 0xFFFFFFFE) + v26;
    uint64_t v28 = *a8;
    uint64_t v29 = v25 + v27;
    uint64_t v30 = *a7 + *a8 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v30 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v29 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v29 += v24;
      v30 += v28;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v32 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v32) {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v21 >> 1;
  uint64_t v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1) {
    unint64_t v34 = (v21 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      int v43 = v14[1] >> 6;
      char v36 = v14 + 2;
      *unint64_t v20 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v43)) >> 32) << 6) + 4096;
      unint64_t v37 = v20 + 2;
      if (v34)
      {
LABEL_22:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          int v39 = *v36 >> 6;
          int v40 = v36[1] >> 6;
          v36 += 2;
          *unint64_t v37 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
          v37[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v40)) >> 32) << 6) + 4096;
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      char v36 = v14;
      unint64_t v37 = v20;
      if (v34) {
        goto LABEL_22;
      }
    }
    uint64_t v42 = 0;
LABEL_28:
    if ((v42 | (unint64_t)v35) < v21)
    {
      int v44 = *v36 >> 6;
      int v45 = v36[1] >> 6;
      *unint64_t v37 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
      v37[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v45)) >> 32) << 6) + 4096;
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      int v47 = v14;
      int v48 = v20;
      if (v33)
      {
        int v47 = v14 + 2;
        unint64_t v49 = (4198405 * (unint64_t)(896 * (v14[1] >> 6))) >> 32;
        __int16 v50 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v14 >> 6))) >> 32) << 6) + 4096;
        *unint64_t v20 = v50;
        LOWORD(v49) = ((_WORD)v49 << 6) + 4096;
        v20[1] = v49;
        unint64_t v51 = (_WORD *)((char *)v20 + v19);
        *unint64_t v51 = v50;
        v51[1] = v49;
        int v48 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v52 = -(uint64_t)v34;
        do
        {
          uint64_t v53 = 3761770880 * (v47[1] >> 6);
          int v54 = ((4198405 * (unint64_t)(896 * (*v47 >> 6))) >> 32 << 6) + 4096;
          *int v48 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v47 >> 6))) >> 32) << 6) + 4096;
          LOWORD(v53) = (WORD2(v53) << 6) + 4096;
          v48[1] = v53;
          v48[2] = v54;
          v48[3] = v53;
          uint64_t v55 = (_WORD *)((char *)v48 + v19);
          *uint64_t v55 = v54;
          v55[1] = v53;
          v47 += 2;
          v55[2] = v54;
          v55[3] = v53;
          v48 += 4;
          BOOL v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        int v56 = *v47 >> 6;
        int v57 = v47[1] >> 6;
        int v58 = ((4198405 * (unint64_t)(896 * v56)) >> 32 << 6) + 4096;
        *int v48 = v58;
        int v59 = ((4198405 * (unint64_t)(896 * v57)) >> 32 << 6) + 4096;
        v48[1] = v59;
        int v60 = (_WORD *)((char *)v48 + v19);
        *int v60 = v58;
        v60[1] = v59;
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
    }
    uint64_t v61 = 2 * v32;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if (v33)
    {
      int v62 = *v14 >> 6;
      int v63 = v14[1] >> 6;
      v14 += 2;
      *unint64_t v20 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v62)) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v63)) >> 32) << 6) + 4096;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v64 = -(uint64_t)v34;
      do
      {
        int v65 = *v14 >> 6;
        int v66 = v14[1] >> 6;
        v14 += 2;
        *unint64_t v20 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v65)) >> 32) << 6) + 4096;
        v20[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v66)) >> 32) << 6) + 4096;
        v20 += 2;
        BOOL v41 = __CFADD__(v64++, 1);
      }
      while (!v41);
      v34 *= 2;
    }
    if ((v34 | v35) < v21)
    {
      int v67 = *v14 >> 6;
      int v68 = v14[1] >> 6;
      *unint64_t v20 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v67)) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v68)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  unint64_t v10 = v9 & 0xFFFFFFFE;
  unint64_t v11 = a2[3] + v9;
  uint64_t v12 = a4[1];
  uint64_t v13 = (_WORD *)(a3[1] + v12 * (v9 >> 1) + 2 * (v8 & 0xFFFFFFFE));
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  unint64_t v16 = a6[3];
  uint64_t v17 = a8[1];
  unint64_t v18 = (_WORD *)(a7[1] + v17 * v15 + 4 * v14);
  if (a2[2] + v8 - (v8 & 0xFFFFFFFE) + ((a2[2] + v8) & 1uLL) >= a6[2]) {
    unint64_t v19 = a6[2];
  }
  else {
    unint64_t v19 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  }
  if (v11 - v10 + (v11 & 1) >= v16) {
    unint64_t v20 = v16;
  }
  else {
    unint64_t v20 = v11 - v10 + (v11 & 1);
  }
  if (v20)
  {
    unint64_t v66 = v20;
    uint64_t v21 = *a4;
    uint64_t v22 = 2 * (v8 & 0xFFFFFFFE);
    uint64_t v23 = *a8;
    uint64_t v24 = *a3 + *a4 * v10;
    if (v10 >= v9) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = *a4;
    }
    uint64_t v26 = (char *)(v24 + v22 + v25);
    uint64_t v27 = (char *)(*a7 + v23 * v15 + 2 * v14);
    unint64_t v67 = v19;
    size_t v28 = 2 * v19;
    uint64_t v29 = -(uint64_t)v20;
    do
    {
      memcpy(v27, v26, v28);
      v26 += v21;
      v27 += v23;
      BOOL v30 = __CFADD__(v29++, 1);
    }
    while (!v30);
    unint64_t v20 = v66;
    uint64_t v8 = a2[4];
    unint64_t v9 = a2[5];
    unint64_t v19 = v67;
  }
  uint64_t v31 = v9 & 1;
  unint64_t v32 = (v20 - v31) >> 1;
  if (v20 >> 1 < v32) {
    unint64_t v32 = v20 >> 1;
  }
  char v33 = v8;
  unint64_t v34 = v19 >> 1;
  uint64_t v35 = v8 & 1;
  if (v19 >> 1 >= (v19 - v35) >> 1) {
    unint64_t v34 = (v19 - v35) >> 1;
  }
  if (v9)
  {
    if (v33)
    {
      __int16 v42 = v13[1] & 0xFFC0;
      char v36 = v13 + 2;
      *unint64_t v18 = *v13 & 0xFFC0;
      v18[1] = v42;
      unint64_t v37 = v18 + 2;
      if (v34)
      {
LABEL_22:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          __int16 v39 = *v36 & 0xFFC0;
          __int16 v40 = v36[1] & 0xFFC0;
          v36 += 2;
          *unint64_t v37 = v39;
          v37[1] = v40;
          v37 += 2;
          BOOL v30 = __CFADD__(v38++, 1);
        }
        while (!v30);
        uint64_t v41 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      char v36 = v13;
      unint64_t v37 = v18;
      if (v34) {
        goto LABEL_22;
      }
    }
    uint64_t v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v35) < v19)
    {
      __int16 v43 = *v36 & 0xFFC0;
      __int16 v44 = v36[1] & 0xFFC0;
      *unint64_t v37 = v43;
      v37[1] = v44;
    }
    uint64_t v13 = (_WORD *)((char *)v13 + v12);
    unint64_t v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v32)
  {
    for (uint64_t i = 0; i != v32; ++i)
    {
      int v46 = v13;
      int v47 = v18;
      if (v33)
      {
        __int16 v48 = *v13 & 0xFFC0;
        __int16 v49 = v13[1] & 0xFFC0;
        int v46 = v13 + 2;
        *unint64_t v18 = v48;
        v18[1] = v49;
        __int16 v50 = (_WORD *)((char *)v18 + v17);
        *__int16 v50 = v48;
        v50[1] = v49;
        int v47 = v18 + 2;
      }
      if (v34)
      {
        uint64_t v51 = -(uint64_t)v34;
        do
        {
          __int16 v52 = *v46 & 0xFFC0;
          __int16 v53 = v46[1] & 0xFFC0;
          v46 += 2;
          *int v47 = v52;
          v47[1] = v53;
          v47[2] = v52;
          v47[3] = v53;
          int v54 = (_WORD *)((char *)v47 + v17);
          *int v54 = v52;
          v54[1] = v53;
          v54[2] = v52;
          v54[3] = v53;
          v47 += 4;
          BOOL v30 = __CFADD__(v51++, 1);
        }
        while (!v30);
      }
      if ((v35 | (2 * v34)) < v19)
      {
        __int16 v55 = *v46 & 0xFFC0;
        __int16 v56 = v46[1] & 0xFFC0;
        *int v47 = v55;
        v47[1] = v56;
        int v57 = (_WORD *)((char *)v47 + v17);
        _WORD *v57 = v55;
        v57[1] = v56;
      }
      uint64_t v13 = (_WORD *)((char *)v13 + v12);
      v18 += v17;
    }
    v32 *= 2;
  }
  if ((v32 | v31) < v20)
  {
    if (v33)
    {
      __int16 v58 = *v13 & 0xFFC0;
      __int16 v59 = v13[1] & 0xFFC0;
      v13 += 2;
      *unint64_t v18 = v58;
      v18[1] = v59;
      v18 += 2;
    }
    if (v34)
    {
      uint64_t v60 = -(uint64_t)v34;
      do
      {
        __int16 v61 = *v13 & 0xFFC0;
        __int16 v62 = v13[1] & 0xFFC0;
        v13 += 2;
        *unint64_t v18 = v61;
        v18[1] = v62;
        v18 += 2;
        BOOL v30 = __CFADD__(v60++, 1);
      }
      while (!v30);
      v34 *= 2;
    }
    if ((v34 | v35) < v19)
    {
      __int16 v63 = v13[1] & 0xFFC0;
      *unint64_t v18 = *v13 & 0xFFC0;
      v18[1] = v63;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = a8[2];
    uint64_t v29 = *a3 + v26 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = v26;
    }
    uint64_t v31 = v29 + 2 * (v9 + v8) + v30;
    uint64_t v32 = a7[2] + v28 * v19 + v20;
    uint64_t v33 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(_WORD *)(v32 + 2 * i) = -1;
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
        }
      }
      v31 += v26;
      v33 += v27;
      v32 += v28;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v35 = v11 & 1;
  if (v24 >> 1 >= (v24 - v35) >> 1) {
    unint64_t v36 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v36 = v24 >> 1;
  }
  char v37 = v8;
  unint64_t v38 = v23 >> 1;
  unint64_t v39 = (v23 - v9) >> 1;
  if (v38 >= v39) {
    unint64_t v38 = v39;
  }
  if (v11)
  {
    if (v37)
    {
      int v42 = v15[1] >> 6;
      __int16 v40 = v15 + 2;
      *uint64_t v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v42)) >> 32) << 6) + 4096;
      uint64_t v41 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        uint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      __int16 v40 = v15;
      uint64_t v41 = v22;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v38;
    do
    {
      unint64_t v44 = (4198405 * (unint64_t)(896 * (v40[1] >> 6))) >> 32;
      *uint64_t v41 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v40 >> 6))) >> 32) << 6) + 4096;
      v41[1] = ((_WORD)v44 << 6) + 4096;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      int v47 = v15;
      __int16 v48 = v22;
      if (v37)
      {
        int v49 = v15[1] >> 6;
        int v47 = v15 + 2;
        *uint64_t v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
        __int16 v48 = v22 + 2;
      }
      if (v38)
      {
        uint64_t v50 = -(uint64_t)v38;
        do
        {
          unint64_t v51 = (4198405 * (unint64_t)(896 * (v47[1] >> 6))) >> 32;
          int v52 = ((4198405 * (unint64_t)(896 * (*v47 >> 6))) >> 32 << 6) + 4096;
          *__int16 v48 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v47 >> 6))) >> 32) << 6) + 4096;
          LOWORD(v51) = ((_WORD)v51 << 6) + 4096;
          v48[1] = v51;
          __int16 v53 = (_WORD *)((char *)v48 + v21);
          *__int16 v53 = v52;
          v53[1] = v51;
          v48 += 2;
          v47 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v54 = 2 * v36;
  }
  else
  {
    uint64_t v54 = 0;
  }
  if ((v54 | (unint64_t)v35) < v24)
  {
    if (v37)
    {
      int v55 = *v15 >> 6;
      int v56 = v15[1] >> 6;
      v15 += 2;
      *uint64_t v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v56)) >> 32) << 6) + 4096;
      v22 += 2;
    }
    if (v38)
    {
      uint64_t v57 = -(uint64_t)v38;
      do
      {
        unint64_t v58 = (4198405 * (unint64_t)(896 * (v15[1] >> 6))) >> 32;
        *uint64_t v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32) << 6) + 4096;
        v22[1] = ((_WORD)v58 << 6) + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v45 = __CFADD__(v57++, 1);
      }
      while (!v45);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v11 >> 1) + ((2 * (v9 + v8)) & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  if (v10 - (v9 + v8) >= (unint64_t)(v18 - v17)) {
    unint64_t v23 = v18 - v17;
  }
  else {
    unint64_t v23 = v10 - (v9 + v8);
  }
  unint64_t v24 = v13 - v12 + (v13 & 1);
  if (v24 >= v16) {
    unint64_t v24 = v16;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    uint64_t v28 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + 2 * (v9 + v8) + v29;
    uint64_t v31 = *a7 + v27 * v19 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(_WORD *)(v31 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v30 += v26;
      v31 += v27;
      ++v25;
    }
    while (v25 != v24);
  }
  uint64_t v33 = v11 & 1;
  if (v24 >> 1 >= (v24 - v33) >> 1) {
    unint64_t v34 = (v24 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v34 = v24 >> 1;
  }
  char v35 = v8;
  unint64_t v36 = v23 >> 1;
  unint64_t v37 = (v23 - v9) >> 1;
  if (v36 >= v37) {
    unint64_t v36 = v37;
  }
  if (v11)
  {
    if (v35)
    {
      int v40 = v15[1] >> 6;
      unint64_t v38 = v15 + 2;
      *uint64_t v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v40)) >> 32) << 6) + 4096;
      unint64_t v39 = v22 + 2;
      if (!v36)
      {
LABEL_28:
        uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
        uint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v38 = v15;
      unint64_t v39 = v22;
      if (!v36) {
        goto LABEL_28;
      }
    }
    uint64_t v41 = -(uint64_t)v36;
    do
    {
      unint64_t v42 = (4198405 * (unint64_t)(896 * (v38[1] >> 6))) >> 32;
      *unint64_t v39 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v38 >> 6))) >> 32) << 6) + 4096;
      v39[1] = ((_WORD)v42 << 6) + 4096;
      v38 += 2;
      v39 += 2;
      BOOL v43 = __CFADD__(v41++, 1);
    }
    while (!v43);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      BOOL v45 = v15;
      int v46 = v22;
      if (v35)
      {
        int v47 = v15[1] >> 6;
        BOOL v45 = v15 + 2;
        *uint64_t v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v47)) >> 32) << 6) + 4096;
        int v46 = v22 + 2;
      }
      if (v36)
      {
        uint64_t v48 = -(uint64_t)v36;
        do
        {
          unint64_t v49 = (4198405 * (unint64_t)(896 * (v45[1] >> 6))) >> 32;
          int v50 = ((4198405 * (unint64_t)(896 * (*v45 >> 6))) >> 32 << 6) + 4096;
          *int v46 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v45 >> 6))) >> 32) << 6) + 4096;
          LOWORD(v49) = ((_WORD)v49 << 6) + 4096;
          v46[1] = v49;
          unint64_t v51 = (_WORD *)((char *)v46 + v21);
          *unint64_t v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          BOOL v43 = __CFADD__(v48++, 1);
        }
        while (!v43);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v14);
      v22 += v21;
    }
    uint64_t v52 = 2 * v34;
  }
  else
  {
    uint64_t v52 = 0;
  }
  if ((v52 | (unint64_t)v33) < v24)
  {
    if (v35)
    {
      int v53 = *v15 >> 6;
      int v54 = v15[1] >> 6;
      v15 += 2;
      *uint64_t v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * v53)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
      v22 += 2;
    }
    if (v36)
    {
      uint64_t v55 = -(uint64_t)v36;
      do
      {
        unint64_t v56 = (4198405 * (unint64_t)(896 * (v15[1] >> 6))) >> 32;
        *uint64_t v22 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v15 >> 6))) >> 32) << 6) + 4096;
        v22[1] = ((_WORD)v56 << 6) + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v43 = __CFADD__(v55++, 1);
      }
      while (!v43);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  unint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = v10 & 0xFFFFFFFE;
  unint64_t v12 = *(void *)(a2 + 24) + v10;
  uint64_t v13 = 2 * (v9 + v8);
  uint64_t v14 = a4[1];
  uint64_t v15 = (_WORD *)(a3[1] + v14 * (v10 >> 1) + (v13 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = 2 * v16;
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) < v21) {
    unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8);
  }
  if (v12 - v11 + (v12 & 1) >= *(void *)(a6 + 24)) {
    unint64_t v22 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v22 = v12 - v11 + (v12 & 1);
  }
  if (v22)
  {
    unint64_t v54 = v21;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a3 + *a4 * v11;
    if (v11 >= v10) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = (char *)(v25 + v13 + v26);
    uint64_t v28 = (char *)(*a7 + v24 * v17 + v18);
    size_t v29 = 2 * v21;
    unint64_t v56 = v22;
    uint64_t v30 = -(uint64_t)v22;
    do
    {
      memcpy(v28, v27, v29);
      v27 += v23;
      v28 += v24;
      BOOL v31 = __CFADD__(v30++, 1);
    }
    while (!v31);
    unint64_t v22 = v56;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v10 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
    unint64_t v21 = v54;
  }
  uint64_t v32 = v10 & 1;
  if (v22 >> 1 >= (v22 - v32) >> 1) {
    unint64_t v33 = (v22 - (v10 & 1)) >> 1;
  }
  else {
    unint64_t v33 = v22 >> 1;
  }
  char v34 = v8;
  unint64_t v35 = v21 >> 1;
  if (v21 >> 1 >= (v21 - v9) >> 1) {
    unint64_t v35 = (v21 - v9) >> 1;
  }
  if (v10)
  {
    if (v34)
    {
      __int16 v38 = v15[1] & 0xFFC0;
      unint64_t v36 = v15 + 2;
      *uint64_t v20 = *v15 & 0xFFC0;
      v20[1] = v38;
      unint64_t v37 = v20 + 2;
      if (!v35)
      {
LABEL_27:
        uint64_t v15 = (_WORD *)((char *)v15 + v14);
        uint64_t v20 = (_WORD *)((char *)v20 + v19);
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v36 = v15;
      unint64_t v37 = v20;
      if (!v35) {
        goto LABEL_27;
      }
    }
    uint64_t v39 = -(uint64_t)v35;
    do
    {
      __int16 v40 = v36[1] & 0xFFC0;
      *unint64_t v37 = *v36 & 0xFFC0;
      v37[1] = v40;
      v36 += 2;
      v37 += 2;
      BOOL v31 = __CFADD__(v39++, 1);
    }
    while (!v31);
    goto LABEL_27;
  }
LABEL_28:
  if (v33)
  {
    for (uint64_t i = 0; i != v33; ++i)
    {
      unint64_t v42 = v15;
      BOOL v43 = v20;
      if (v34)
      {
        __int16 v44 = v15[1] & 0xFFC0;
        unint64_t v42 = v15 + 2;
        *uint64_t v20 = *v15 & 0xFFC0;
        v20[1] = v44;
        BOOL v43 = v20 + 2;
      }
      if (v35)
      {
        uint64_t v45 = -(uint64_t)v35;
        do
        {
          __int16 v46 = *v42 & 0xFFC0;
          __int16 v47 = v42[1] & 0xFFC0;
          _WORD *v43 = v46;
          v43[1] = v47;
          uint64_t v48 = (_WORD *)((char *)v43 + v19);
          *uint64_t v48 = v46;
          v48[1] = v47;
          v43 += 2;
          v42 += 2;
          BOOL v31 = __CFADD__(v45++, 1);
        }
        while (!v31);
      }
      uint64_t v15 = (_WORD *)((char *)v15 + v14);
      v20 += v19;
    }
    v33 *= 2;
  }
  if ((v33 | v32) < v22)
  {
    if (v34)
    {
      __int16 v49 = *v15 & 0xFFC0;
      __int16 v50 = v15[1] & 0xFFC0;
      v15 += 2;
      *uint64_t v20 = v49;
      v20[1] = v50;
      v20 += 2;
    }
    if (v35)
    {
      uint64_t v51 = -(uint64_t)v35;
      do
      {
        __int16 v52 = v15[1] & 0xFFC0;
        *uint64_t v20 = *v15 & 0xFFC0;
        v20[1] = v52;
        v15 += 2;
        v20 += 2;
        BOOL v31 = __CFADD__(v51++, 1);
      }
      while (!v31);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * v10;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 >> 1) + ((2 * v10) & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  uint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v18 - v17) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v13 - v12;
  if (v13 - v12 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v30 + v14 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = ((unsigned __int16)((4198405
                                                       * (unint64_t)(876
                                                                          * (*(unsigned __int16 *)(v32 + 2 * i) >> 6))) >> 32) << 6)
                                  + 4096;
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v35 = v26 >> 1;
  unint64_t v36 = v26 - (v8 & 1);
  if (v35 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v35;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v8)
  {
    if (v9)
    {
      int v42 = v16[1] >> 6;
      __int16 v40 = v16 + 2;
      *uint64_t v23 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v16 >> 6))) >> 32) << 6) + 4096;
      v23[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v42)) >> 32) << 6) + 4096;
      uint64_t v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        uint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      __int16 v40 = v16;
      uint64_t v41 = v23;
      if (!v39) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      unint64_t v44 = (4198405 * (unint64_t)(896 * (v40[1] >> 6))) >> 32;
      *uint64_t v41 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v40 >> 6))) >> 32) << 6) + 4096;
      v41[1] = ((_WORD)v44 << 6) + 4096;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      __int16 v47 = v16;
      uint64_t v48 = v23;
      if (v9)
      {
        int v49 = v16[1] >> 6;
        __int16 v47 = v16 + 2;
        *uint64_t v23 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v16 >> 6))) >> 32) << 6) + 4096;
        v23[1] = ((unsigned __int16)((4198405 * (unint64_t)(896 * v49)) >> 32) << 6) + 4096;
        uint64_t v48 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          unint64_t v51 = (4198405 * (unint64_t)(896 * (v47[1] >> 6))) >> 32;
          *uint64_t v48 = ((unsigned __int16)((4198405 * (unint64_t)(896 * (*v47 >> 6))) >> 32) << 6) + 4096;
          v48[1] = ((_WORD)v51 << 6) + 4096;
          v47 += 2;
          v48 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      uint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  unint64_t v10 = v8 & 0xFFFFFFFE;
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v14 + 2 * v13);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  unint64_t v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15) {
    unint64_t v20 = v15;
  }
  if (v20)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a4;
    BOOL v23 = v10 >= v8;
    uint64_t v24 = *a8;
    uint64_t v25 = a8[2];
    uint64_t v26 = *a3 + *a4 * v10;
    if (v23) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + 2 * (a2[4] & 0xFFFFFFFELL) + v27;
    uint64_t v29 = a7[2] + v25 * v14 + v13;
    uint64_t v30 = *a7 + v24 * v14 + v13;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v29 + i) = -1;
          *(unsigned char *)(v30 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v28 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v28 += v22;
      v30 += v24;
      v29 += v25;
      ++v21;
    }
    while (v21 != v20);
    uint64_t v9 = a2[4];
    unint64_t v8 = a2[5];
  }
  unint64_t v32 = (v20 - (v8 & 1)) >> 1;
  if (v20 >> 1 < v32) {
    unint64_t v32 = v20 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v19 >> 1;
  uint64_t v35 = v9 & 1;
  if (v19 >> 1 >= (v19 - v35) >> 1) {
    unint64_t v34 = (v19 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      int v42 = v12[1] >> 6;
      unint64_t v36 = v12 + 2;
      *uint64_t v18 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v42)) >> 32) + 16;
      unint64_t v37 = v18 + 2;
      if (v34)
      {
LABEL_22:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          int v39 = *v36 >> 6;
          int v40 = v36[1] >> 6;
          v36 += 2;
          *unint64_t v37 = ((4198405 * (unint64_t)(224 * v39)) >> 32) + 16;
          v37[1] = ((4198405 * (unint64_t)(224 * v40)) >> 32) + 16;
          v37 += 2;
          BOOL v23 = __CFADD__(v38++, 1);
        }
        while (!v23);
        uint64_t v41 = 2 * v34;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v36 = v12;
      unint64_t v37 = v18;
      if (v34) {
        goto LABEL_22;
      }
    }
    uint64_t v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v35) < v19)
    {
      int v43 = *v36 >> 6;
      int v44 = v36[1] >> 6;
      *unint64_t v37 = ((4198405 * (unint64_t)(224 * v43)) >> 32) + 16;
      v37[1] = ((4198405 * (unint64_t)(224 * v44)) >> 32) + 16;
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      __int16 v46 = v12;
      __int16 v47 = v18;
      if (v33)
      {
        __int16 v46 = v12 + 2;
        unint64_t v48 = (4198405 * (unint64_t)(224 * (v12[1] >> 6))) >> 32;
        char v49 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
        *uint64_t v18 = v49;
        LOBYTE(v48) = v48 + 16;
        v18[1] = v48;
        uint64_t v50 = &v18[v17];
        *uint64_t v50 = v49;
        v50[1] = v48;
        __int16 v47 = v18 + 2;
      }
      if (v34)
      {
        uint64_t v51 = -(uint64_t)v34;
        do
        {
          unsigned int v52 = 224 * (v46[1] >> 6);
          int v53 = ((4198405 * (unint64_t)(224 * (*v46 >> 6))) >> 32) + 16;
          *__int16 v47 = ((4198405 * (unint64_t)(224 * (*v46 >> 6))) >> 32) + 16;
          int v54 = ((4198405 * (unint64_t)v52) >> 32) + 16;
          v47[1] = v54;
          v47[2] = v53;
          v47[3] = v54;
          uint64_t v55 = &v47[v17 + 1];
          *(v55 - 1) = v53;
          *uint64_t v55 = v54;
          v46 += 2;
          v55[1] = v53;
          v55[2] = v54;
          v47 += 4;
          BOOL v23 = __CFADD__(v51++, 1);
        }
        while (!v23);
      }
      if ((v35 | (2 * v34)) < v19)
      {
        int v56 = *v46 >> 6;
        int v57 = v46[1] >> 6;
        int v58 = ((4198405 * (unint64_t)(224 * v56)) >> 32) + 16;
        *__int16 v47 = v58;
        int v59 = ((4198405 * (unint64_t)(224 * v57)) >> 32) + 16;
        v47[1] = v59;
        uint64_t v60 = &v47[v17];
        *uint64_t v60 = v58;
        v60[1] = v59;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += 2 * v17;
    }
    uint64_t v61 = 2 * v32;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | v8 & 1) < v20)
  {
    if (v33)
    {
      int v62 = *v12 >> 6;
      int v63 = v12[1] >> 6;
      v12 += 2;
      *uint64_t v18 = ((4198405 * (unint64_t)(224 * v62)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v63)) >> 32) + 16;
      v18 += 2;
    }
    if (v34)
    {
      uint64_t v64 = -(uint64_t)v34;
      do
      {
        int v65 = *v12 >> 6;
        int v66 = v12[1] >> 6;
        v12 += 2;
        *uint64_t v18 = ((4198405 * (unint64_t)(224 * v65)) >> 32) + 16;
        v18[1] = ((4198405 * (unint64_t)(224 * v66)) >> 32) + 16;
        v18 += 2;
        BOOL v23 = __CFADD__(v64++, 1);
      }
      while (!v23);
      uint64_t v67 = 2 * v34;
    }
    else
    {
      uint64_t v67 = 0;
    }
    if ((v67 | (unint64_t)v35) < v19)
    {
      int v68 = *v12 >> 6;
      int v69 = v12[1] >> 6;
      *uint64_t v18 = ((4198405 * (unint64_t)(224 * v68)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v69)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  unint64_t v10 = v8 & 0xFFFFFFFE;
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v14 + 2 * v13);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  unint64_t v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15) {
    unint64_t v20 = v15;
  }
  if (v20)
  {
    uint64_t v21 = 0;
    BOOL v22 = v10 >= v8;
    uint64_t v23 = *a4;
    uint64_t v24 = *a8;
    uint64_t v25 = *a3 + *a4 * v10;
    if (v22) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = v25 + 2 * (a2[4] & 0xFFFFFFFELL) + v26;
    uint64_t v28 = *a7 + v24 * v14 + v13;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
          *(unsigned char *)(v28 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v27 += v23;
      v28 += v24;
      ++v21;
    }
    while (v21 != v20);
    uint64_t v9 = a2[4];
    unint64_t v8 = a2[5];
  }
  unint64_t v30 = (v20 - (v8 & 1)) >> 1;
  if (v20 >> 1 < v30) {
    unint64_t v30 = v20 >> 1;
  }
  char v31 = v9;
  unint64_t v32 = v19 >> 1;
  uint64_t v33 = v9 & 1;
  if (v19 >> 1 >= (v19 - v33) >> 1) {
    unint64_t v32 = (v19 - v33) >> 1;
  }
  if (v8)
  {
    if (v31)
    {
      int v40 = v12[1] >> 6;
      unint64_t v34 = v12 + 2;
      *uint64_t v18 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v40)) >> 32) + 16;
      uint64_t v35 = v18 + 2;
      if (v32)
      {
LABEL_22:
        uint64_t v36 = -(uint64_t)v32;
        do
        {
          int v37 = *v34 >> 6;
          int v38 = v34[1] >> 6;
          v34 += 2;
          *uint64_t v35 = ((4198405 * (unint64_t)(224 * v37)) >> 32) + 16;
          v35[1] = ((4198405 * (unint64_t)(224 * v38)) >> 32) + 16;
          v35 += 2;
          BOOL v22 = __CFADD__(v36++, 1);
        }
        while (!v22);
        uint64_t v39 = 2 * v32;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v34 = v12;
      uint64_t v35 = v18;
      if (v32) {
        goto LABEL_22;
      }
    }
    uint64_t v39 = 0;
LABEL_28:
    if ((v39 | (unint64_t)v33) < v19)
    {
      int v41 = *v34 >> 6;
      int v42 = v34[1] >> 6;
      *uint64_t v35 = ((4198405 * (unint64_t)(224 * v41)) >> 32) + 16;
      v35[1] = ((4198405 * (unint64_t)(224 * v42)) >> 32) + 16;
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v30)
  {
    for (uint64_t j = 0; j != v30; ++j)
    {
      int v44 = v12;
      BOOL v45 = v18;
      if (v31)
      {
        int v44 = v12 + 2;
        unint64_t v46 = (4198405 * (unint64_t)(224 * (v12[1] >> 6))) >> 32;
        char v47 = ((4198405 * (unint64_t)(224 * (*v12 >> 6))) >> 32) + 16;
        *uint64_t v18 = v47;
        LOBYTE(v46) = v46 + 16;
        v18[1] = v46;
        unint64_t v48 = &v18[v17];
        *unint64_t v48 = v47;
        v48[1] = v46;
        BOOL v45 = v18 + 2;
      }
      if (v32)
      {
        uint64_t v49 = -(uint64_t)v32;
        do
        {
          unsigned int v50 = 224 * (v44[1] >> 6);
          int v51 = ((4198405 * (unint64_t)(224 * (*v44 >> 6))) >> 32) + 16;
          *BOOL v45 = ((4198405 * (unint64_t)(224 * (*v44 >> 6))) >> 32) + 16;
          int v52 = ((4198405 * (unint64_t)v50) >> 32) + 16;
          v45[1] = v52;
          v45[2] = v51;
          v45[3] = v52;
          int v53 = &v45[v17 + 1];
          *(v53 - 1) = v51;
          *int v53 = v52;
          v44 += 2;
          v53[1] = v51;
          v53[2] = v52;
          v45 += 4;
          BOOL v22 = __CFADD__(v49++, 1);
        }
        while (!v22);
      }
      if ((v33 | (2 * v32)) < v19)
      {
        int v54 = *v44 >> 6;
        int v55 = v44[1] >> 6;
        int v56 = ((4198405 * (unint64_t)(224 * v54)) >> 32) + 16;
        *BOOL v45 = v56;
        int v57 = ((4198405 * (unint64_t)(224 * v55)) >> 32) + 16;
        v45[1] = v57;
        int v58 = &v45[v17];
        *int v58 = v56;
        v58[1] = v57;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += 2 * v17;
    }
    uint64_t v59 = 2 * v30;
  }
  else
  {
    uint64_t v59 = 0;
  }
  if ((v59 | v8 & 1) < v20)
  {
    if (v31)
    {
      int v60 = *v12 >> 6;
      int v61 = v12[1] >> 6;
      v12 += 2;
      *uint64_t v18 = ((4198405 * (unint64_t)(224 * v60)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v61)) >> 32) + 16;
      v18 += 2;
    }
    if (v32)
    {
      uint64_t v62 = -(uint64_t)v32;
      do
      {
        int v63 = *v12 >> 6;
        int v64 = v12[1] >> 6;
        v12 += 2;
        *uint64_t v18 = ((4198405 * (unint64_t)(224 * v63)) >> 32) + 16;
        v18[1] = ((4198405 * (unint64_t)(224 * v64)) >> 32) + 16;
        v18 += 2;
        BOOL v22 = __CFADD__(v62++, 1);
      }
      while (!v22);
      uint64_t v65 = 2 * v32;
    }
    else
    {
      uint64_t v65 = 0;
    }
    if ((v65 | (unint64_t)v33) < v19)
    {
      int v66 = *v12 >> 6;
      int v67 = v12[1] >> 6;
      *uint64_t v18 = ((4198405 * (unint64_t)(224 * v66)) >> 32) + 16;
      v18[1] = ((4198405 * (unint64_t)(224 * v67)) >> 32) + 16;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  unint64_t v10 = v8 & 0xFFFFFFFE;
  uint64_t v11 = a4[1];
  unint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * (v8 >> 1) + 2 * (v9 & 0xFFFFFFFE));
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v16 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v14 + 2 * v13);
  unint64_t v19 = a2[2] + v9 - (v9 & 0xFFFFFFFE) + ((a2[2] + v9) & 1);
  if (v19 >= v16) {
    unint64_t v19 = v16;
  }
  unint64_t v20 = a2[3] + v8 - v10 + ((a2[3] + v8) & 1);
  if (v20 >= v15) {
    unint64_t v20 = v15;
  }
  if (v20)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = *a3 + *a4 * v10;
    if (v10 >= v8) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = *a4;
    }
    uint64_t v26 = v24 + 2 * (a2[4] & 0xFFFFFFFELL) + v25;
    uint64_t v27 = *a7 + v23 * v14 + v13;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
          *(unsigned char *)(v27 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v26 + 2 * i) >> 6))) >> 32;
      }
      v26 += v22;
      v27 += v23;
      ++v21;
    }
    while (v21 != v20);
    uint64_t v9 = a2[4];
    unint64_t v8 = a2[5];
  }
  uint64_t v29 = v8 & 1;
  unint64_t v30 = (v20 - v29) >> 1;
  if (v20 >> 1 < v30) {
    unint64_t v30 = v20 >> 1;
  }
  char v31 = v9;
  unint64_t v32 = v19 >> 1;
  uint64_t v33 = v9 & 1;
  if (v19 >> 1 >= (v19 - v33) >> 1) {
    unint64_t v32 = (v19 - v33) >> 1;
  }
  if (v8)
  {
    if (v31)
    {
      unsigned int v41 = v12[1];
      unint64_t v34 = v12 + 2;
      *uint64_t v18 = (4198405 * (unint64_t)(255 * (*v12 >> 6))) >> 32;
      v18[1] = (4198405 * (unint64_t)(255 * (v41 >> 6))) >> 32;
      uint64_t v35 = v18 + 2;
      if (v32)
      {
LABEL_22:
        uint64_t v36 = -(uint64_t)v32;
        do
        {
          unsigned int v37 = *v34;
          unsigned int v38 = v34[1];
          v34 += 2;
          *uint64_t v35 = (4198405 * (unint64_t)(255 * (v37 >> 6))) >> 32;
          v35[1] = (4198405 * (unint64_t)(255 * (v38 >> 6))) >> 32;
          v35 += 2;
          BOOL v39 = __CFADD__(v36++, 1);
        }
        while (!v39);
        uint64_t v40 = 2 * v32;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v34 = v12;
      uint64_t v35 = v18;
      if (v32) {
        goto LABEL_22;
      }
    }
    uint64_t v40 = 0;
LABEL_28:
    if ((v40 | (unint64_t)v33) < v19)
    {
      unsigned int v42 = *v34;
      unsigned int v43 = v34[1];
      *uint64_t v35 = (4198405 * (unint64_t)(255 * (v42 >> 6))) >> 32;
      v35[1] = (4198405 * (unint64_t)(255 * (v43 >> 6))) >> 32;
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v18 += v17;
  }
  if (v30)
  {
    for (uint64_t j = 0; j != v30; ++j)
    {
      BOOL v45 = v12;
      unint64_t v46 = v18;
      if (v31)
      {
        BOOL v45 = v12 + 2;
        unint64_t v47 = (4198405 * (unint64_t)(255 * (*v12 >> 6))) >> 32;
        unint64_t v48 = (4198405 * (unint64_t)(255 * (v12[1] >> 6))) >> 32;
        *uint64_t v18 = v47;
        v18[1] = v48;
        uint64_t v49 = &v18[v17];
        *uint64_t v49 = v47;
        v49[1] = v48;
        unint64_t v46 = v18 + 2;
      }
      if (v32)
      {
        uint64_t v50 = -(uint64_t)v32;
        do
        {
          unsigned int v51 = v45[1];
          unint64_t v52 = (4198405 * (unint64_t)(255 * (*v45 >> 6))) >> 32;
          *unint64_t v46 = v52;
          unint64_t v53 = (4198405 * (unint64_t)(255 * (v51 >> 6))) >> 32;
          v46[1] = v53;
          v46[2] = v52;
          v46[3] = v53;
          int v54 = &v46[v17 + 1];
          *(v54 - 1) = v52;
          *int v54 = v53;
          v45 += 2;
          v54[1] = v52;
          v54[2] = v53;
          v46 += 4;
          BOOL v39 = __CFADD__(v50++, 1);
        }
        while (!v39);
      }
      if ((v33 | (2 * v32)) < v19)
      {
        unint64_t v55 = (4198405 * (unint64_t)(255 * (*v45 >> 6))) >> 32;
        unint64_t v56 = (4198405 * (unint64_t)(255 * (v45[1] >> 6))) >> 32;
        *unint64_t v46 = v55;
        v46[1] = v56;
        int v57 = &v46[v17];
        unsigned char *v57 = v55;
        v57[1] = v56;
      }
      unint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v18 += 2 * v17;
    }
    uint64_t v58 = 2 * v30;
  }
  else
  {
    uint64_t v58 = 0;
  }
  if ((v58 | (unint64_t)v29) < v20)
  {
    if (v31)
    {
      unsigned int v59 = *v12;
      unsigned int v60 = v12[1];
      v12 += 2;
      *uint64_t v18 = (4198405 * (unint64_t)(255 * (v59 >> 6))) >> 32;
      v18[1] = (4198405 * (unint64_t)(255 * (v60 >> 6))) >> 32;
      v18 += 2;
    }
    if (v32)
    {
      uint64_t v61 = -(uint64_t)v32;
      do
      {
        unsigned int v62 = *v12;
        unsigned int v63 = v12[1];
        v12 += 2;
        *uint64_t v18 = (4198405 * (unint64_t)(255 * (v62 >> 6))) >> 32;
        v18[1] = (4198405 * (unint64_t)(255 * (v63 >> 6))) >> 32;
        v18 += 2;
        BOOL v39 = __CFADD__(v61++, 1);
      }
      while (!v39);
      uint64_t v64 = 2 * v32;
    }
    else
    {
      uint64_t v64 = 0;
    }
    if ((v64 | (unint64_t)v33) < v19)
    {
      unsigned int v65 = *v12;
      unsigned int v66 = v12[1];
      *uint64_t v18 = (4198405 * (unint64_t)(255 * (v65 >> 6))) >> 32;
      v18[1] = (4198405 * (unint64_t)(255 * (v66 >> 6))) >> 32;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  unint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = v10 & 0xFFFFFFFE;
  uint64_t v12 = 2 * (v9 + v8);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  unint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16) {
    unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8);
  }
  unint64_t v22 = *(void *)(a2 + 24) + v10 - v11 + ((*(void *)(a2 + 24) + v10) & 1);
  if (v22 >= v15) {
    unint64_t v22 = v15;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    BOOL v25 = v11 >= v10;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = *a3 + *a4 * v11;
    if (v25) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v28 + v12 + v29;
    uint64_t v31 = a7[2] + v27 * v18 + v16;
    uint64_t v32 = *a7 + v26 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v31 + i) = -1;
          *(unsigned char *)(v32 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v30 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v30 += v24;
      v32 += v26;
      v31 += v27;
      ++v23;
    }
    while (v23 != v22);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v10 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
  }
  unint64_t v34 = v22 >> 1;
  uint64_t v35 = v10 & 1;
  if (v22 >> 1 >= (v22 - v35) >> 1) {
    unint64_t v34 = (v22 - (v10 & 1)) >> 1;
  }
  unint64_t v36 = v21 >> 1;
  unint64_t v37 = v21 - v9;
  if (v36 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v36;
  }
  if (v10)
  {
    if (v8)
    {
      int v41 = v14[1] >> 6;
      BOOL v39 = v14 + 2;
      *unint64_t v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v41)) >> 32) + 16;
      uint64_t v40 = v20 + 2;
      if (!v38)
      {
LABEL_28:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      BOOL v39 = v14;
      uint64_t v40 = v20;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v42 = -(uint64_t)v38;
    do
    {
      unint64_t v43 = (4198405 * (unint64_t)(224 * (v39[1] >> 6))) >> 32;
      *uint64_t v40 = ((4198405 * (unint64_t)(224 * (*v39 >> 6))) >> 32) + 16;
      v40[1] = v43 + 16;
      v40 += 2;
      v39 += 2;
      BOOL v25 = __CFADD__(v42++, 1);
    }
    while (!v25);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      BOOL v45 = v14;
      unint64_t v46 = v20;
      if (v8)
      {
        int v47 = v14[1] >> 6;
        BOOL v45 = v14 + 2;
        *unint64_t v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = ((4198405 * (unint64_t)(224 * v47)) >> 32) + 16;
        unint64_t v46 = v20 + 2;
      }
      if (v38)
      {
        uint64_t v48 = -(uint64_t)v38;
        do
        {
          unint64_t v49 = (4198405 * (unint64_t)(224 * (v45[1] >> 6))) >> 32;
          int v50 = ((4198405 * (unint64_t)(224 * (*v45 >> 6))) >> 32) + 16;
          *unint64_t v46 = ((4198405 * (unint64_t)(224 * (*v45 >> 6))) >> 32) + 16;
          LOBYTE(v49) = v49 + 16;
          v46[1] = v49;
          unsigned int v51 = &v46[v19];
          *unsigned int v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          BOOL v25 = __CFADD__(v48++, 1);
        }
        while (!v25);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += 2 * v19;
    }
    uint64_t v52 = 2 * v34;
  }
  else
  {
    uint64_t v52 = 0;
  }
  if ((v52 | (unint64_t)v35) < v22)
  {
    if (v8)
    {
      int v53 = *v14 >> 6;
      int v54 = v14[1] >> 6;
      v14 += 2;
      *unint64_t v20 = ((4198405 * (unint64_t)(224 * v53)) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v54)) >> 32) + 16;
      v20 += 2;
    }
    if (v38)
    {
      uint64_t v55 = -(uint64_t)v38;
      do
      {
        unint64_t v56 = (4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32;
        *unint64_t v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = v56 + 16;
        v20 += 2;
        v14 += 2;
        BOOL v25 = __CFADD__(v55++, 1);
      }
      while (!v25);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  unint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = v10 & 0xFFFFFFFE;
  uint64_t v12 = 2 * (v9 + v8);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  unint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16) {
    unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8);
  }
  unint64_t v22 = *(void *)(a2 + 24) + v10 - v11 + ((*(void *)(a2 + 24) + v10) & 1);
  if (v22 >= v15) {
    unint64_t v22 = v15;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    if (v11 >= v10) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = *a3 + *a4 * v11 + v12 + v26;
    uint64_t v28 = *a7 + v25 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v28 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v27 += v24;
      v28 += v25;
      ++v23;
    }
    while (v23 != v22);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v10 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
  }
  unint64_t v30 = v22 >> 1;
  uint64_t v31 = v10 & 1;
  if (v22 >> 1 >= (v22 - v31) >> 1) {
    unint64_t v30 = (v22 - (v10 & 1)) >> 1;
  }
  unint64_t v32 = v21 >> 1;
  unint64_t v33 = v21 - v9;
  if (v32 >= v33 >> 1) {
    unint64_t v34 = v33 >> 1;
  }
  else {
    unint64_t v34 = v32;
  }
  if (v10)
  {
    if (v8)
    {
      int v37 = v14[1] >> 6;
      uint64_t v35 = v14 + 2;
      *unint64_t v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v37)) >> 32) + 16;
      unint64_t v36 = v20 + 2;
      if (!v34)
      {
LABEL_28:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v35 = v14;
      unint64_t v36 = v20;
      if (!v34) {
        goto LABEL_28;
      }
    }
    uint64_t v38 = -(uint64_t)v34;
    do
    {
      unint64_t v39 = (4198405 * (unint64_t)(224 * (v35[1] >> 6))) >> 32;
      *unint64_t v36 = ((4198405 * (unint64_t)(224 * (*v35 >> 6))) >> 32) + 16;
      v36[1] = v39 + 16;
      v36 += 2;
      v35 += 2;
      BOOL v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_28;
  }
LABEL_29:
  if (v30)
  {
    for (uint64_t j = 0; j != v30; ++j)
    {
      uint64_t v42 = v14;
      unint64_t v43 = v20;
      if (v8)
      {
        int v44 = v14[1] >> 6;
        uint64_t v42 = v14 + 2;
        *unint64_t v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = ((4198405 * (unint64_t)(224 * v44)) >> 32) + 16;
        unint64_t v43 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v45 = -(uint64_t)v34;
        do
        {
          unint64_t v46 = (4198405 * (unint64_t)(224 * (v42[1] >> 6))) >> 32;
          int v47 = ((4198405 * (unint64_t)(224 * (*v42 >> 6))) >> 32) + 16;
          unsigned char *v43 = ((4198405 * (unint64_t)(224 * (*v42 >> 6))) >> 32) + 16;
          LOBYTE(v46) = v46 + 16;
          v43[1] = v46;
          uint64_t v48 = &v43[v19];
          *uint64_t v48 = v47;
          v48[1] = v46;
          v43 += 2;
          v42 += 2;
          BOOL v40 = __CFADD__(v45++, 1);
        }
        while (!v40);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += 2 * v19;
    }
    uint64_t v49 = 2 * v30;
  }
  else
  {
    uint64_t v49 = 0;
  }
  if ((v49 | (unint64_t)v31) < v22)
  {
    if (v8)
    {
      int v50 = *v14 >> 6;
      int v51 = v14[1] >> 6;
      v14 += 2;
      *unint64_t v20 = ((4198405 * (unint64_t)(224 * v50)) >> 32) + 16;
      v20[1] = ((4198405 * (unint64_t)(224 * v51)) >> 32) + 16;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v52 = -(uint64_t)v34;
      do
      {
        unint64_t v53 = (4198405 * (unint64_t)(224 * (v14[1] >> 6))) >> 32;
        *unint64_t v20 = ((4198405 * (unint64_t)(224 * (*v14 >> 6))) >> 32) + 16;
        v20[1] = v53 + 16;
        v20 += 2;
        v14 += 2;
        BOOL v40 = __CFADD__(v52++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  unint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = v10 & 0xFFFFFFFE;
  uint64_t v12 = 2 * (v9 + v8);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * (v10 >> 1) + (v12 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  unint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) < v17 - v16) {
    unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8);
  }
  unint64_t v22 = *(void *)(a2 + 24) + v10 - v11 + ((*(void *)(a2 + 24) + v10) & 1);
  if (v22 >= v15) {
    unint64_t v22 = v15;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    if (v11 >= v10) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *a4;
    }
    uint64_t v27 = *a3 + *a4 * v11 + v12 + v26;
    uint64_t v28 = *a7 + v25 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v28 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v27 + 2 * i) >> 6))) >> 32;
      }
      v27 += v24;
      v28 += v25;
      ++v23;
    }
    while (v23 != v22);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v10 = *(void *)(a2 + 40);
    uint64_t v9 = v8 & 1;
  }
  unint64_t v30 = v22 >> 1;
  uint64_t v31 = v10 & 1;
  if (v22 >> 1 >= (v22 - v31) >> 1) {
    unint64_t v30 = (v22 - (v10 & 1)) >> 1;
  }
  unint64_t v32 = v21 >> 1;
  unint64_t v33 = v21 - v9;
  if (v32 >= v33 >> 1) {
    unint64_t v34 = v33 >> 1;
  }
  else {
    unint64_t v34 = v32;
  }
  if (v10)
  {
    if (v8)
    {
      unsigned int v37 = v14[1];
      uint64_t v35 = v14 + 2;
      *unint64_t v20 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
      v20[1] = (4198405 * (unint64_t)(255 * (v37 >> 6))) >> 32;
      unint64_t v36 = v20 + 2;
      if (!v34)
      {
LABEL_28:
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v35 = v14;
      unint64_t v36 = v20;
      if (!v34) {
        goto LABEL_28;
      }
    }
    uint64_t v38 = -(uint64_t)v34;
    do
    {
      unsigned int v39 = v35[1];
      *unint64_t v36 = (4198405 * (unint64_t)(255 * (*v35 >> 6))) >> 32;
      v36[1] = (4198405 * (unint64_t)(255 * (v39 >> 6))) >> 32;
      v36 += 2;
      v35 += 2;
      BOOL v40 = __CFADD__(v38++, 1);
    }
    while (!v40);
    goto LABEL_28;
  }
LABEL_29:
  if (v30)
  {
    for (uint64_t j = 0; j != v30; ++j)
    {
      uint64_t v42 = v14;
      unint64_t v43 = v20;
      if (v8)
      {
        unsigned int v44 = v14[1];
        uint64_t v42 = v14 + 2;
        *unint64_t v20 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
        v20[1] = (4198405 * (unint64_t)(255 * (v44 >> 6))) >> 32;
        unint64_t v43 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v45 = -(uint64_t)v34;
        do
        {
          unint64_t v46 = (4198405 * (unint64_t)(255 * (*v42 >> 6))) >> 32;
          unint64_t v47 = (4198405 * (unint64_t)(255 * (v42[1] >> 6))) >> 32;
          unsigned char *v43 = v46;
          v43[1] = v47;
          uint64_t v48 = &v43[v19];
          *uint64_t v48 = v46;
          v48[1] = v47;
          v43 += 2;
          v42 += 2;
          BOOL v40 = __CFADD__(v45++, 1);
        }
        while (!v40);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += 2 * v19;
    }
    uint64_t v49 = 2 * v30;
  }
  else
  {
    uint64_t v49 = 0;
  }
  if ((v49 | (unint64_t)v31) < v22)
  {
    if (v8)
    {
      unsigned int v50 = *v14;
      unsigned int v51 = v14[1];
      v14 += 2;
      *unint64_t v20 = (4198405 * (unint64_t)(255 * (v50 >> 6))) >> 32;
      v20[1] = (4198405 * (unint64_t)(255 * (v51 >> 6))) >> 32;
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v52 = -(uint64_t)v34;
      do
      {
        unsigned int v53 = v14[1];
        *unint64_t v20 = (4198405 * (unint64_t)(255 * (*v14 >> 6))) >> 32;
        v20[1] = (4198405 * (unint64_t)(255 * (v53 >> 6))) >> 32;
        v20 += 2;
        v14 += 2;
        BOOL v40 = __CFADD__(v52++, 1);
      }
      while (!v40);
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v9) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  }
  unint64_t v24 = v13 - v12;
  unint64_t v25 = v20 - v19;
  if (v13 - v12 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    BOOL v28 = v12 >= v9;
    uint64_t v29 = *a8;
    uint64_t v30 = a8[2];
    uint64_t v31 = *a3 + *a4 * v12;
    if (v28) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v31 + v14 + v32;
    uint64_t v34 = a7[2] + v30 * v19 + v17;
    uint64_t v35 = *a7 + v29 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(unsigned char *)(v34 + i) = -1;
          *(unsigned char *)(v35 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v33 + 2 * i) >> 6))) >> 32)
                              + 16;
        }
      }
      v33 += v27;
      v35 += v29;
      v34 += v30;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  unint64_t v37 = v24 >> 1;
  unint64_t v38 = v24 - v11;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  unint64_t v40 = v23 >> 1;
  unint64_t v41 = v23 - v10;
  if (v40 >= v41 >> 1) {
    unint64_t v42 = v41 >> 1;
  }
  else {
    unint64_t v42 = v40;
  }
  if (v11)
  {
    if (v8)
    {
      int v45 = v16[1] >> 6;
      unint64_t v43 = v16 + 2;
      *unint64_t v22 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
      v22[1] = ((4198405 * (unint64_t)(224 * v45)) >> 32) + 16;
      unsigned int v44 = v22 + 2;
      if (!v42)
      {
LABEL_29:
        uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v43 = v16;
      unsigned int v44 = v22;
      if (!v42) {
        goto LABEL_29;
      }
    }
    uint64_t v46 = -(uint64_t)v42;
    do
    {
      unint64_t v47 = (4198405 * (unint64_t)(224 * (v43[1] >> 6))) >> 32;
      *unsigned int v44 = ((4198405 * (unint64_t)(224 * (*v43 >> 6))) >> 32) + 16;
      v44[1] = v47 + 16;
      v44 += 2;
      v43 += 2;
      BOOL v28 = __CFADD__(v46++, 1);
    }
    while (!v28);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      uint64_t v49 = v16;
      unsigned int v50 = v22;
      if (v8)
      {
        int v51 = v16[1] >> 6;
        uint64_t v49 = v16 + 2;
        *unint64_t v22 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
        v22[1] = ((4198405 * (unint64_t)(224 * v51)) >> 32) + 16;
        unsigned int v50 = v22 + 2;
      }
      if (v42)
      {
        uint64_t v52 = -(uint64_t)v42;
        do
        {
          unint64_t v53 = (4198405 * (unint64_t)(224 * (v49[1] >> 6))) >> 32;
          *unsigned int v50 = ((4198405 * (unint64_t)(224 * (*v49 >> 6))) >> 32) + 16;
          v50[1] = v53 + 16;
          v50 += 2;
          v49 += 2;
          BOOL v28 = __CFADD__(v52++, 1);
        }
        while (!v28);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v9 & 1;
  unint64_t v12 = v11 + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v8);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v9) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) < v18 - v17) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  }
  unint64_t v24 = v13 - v12;
  unint64_t v25 = v20 - v19;
  if (v13 - v12 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v14 + v30;
    uint64_t v32 = *a7 + v28 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
          *(unsigned char *)(v32 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v31 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  unint64_t v34 = v24 >> 1;
  unint64_t v35 = v24 - v11;
  if (v34 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v34;
  }
  unint64_t v37 = v23 >> 1;
  unint64_t v38 = v23 - v10;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  if (v11)
  {
    if (v8)
    {
      int v42 = v16[1] >> 6;
      unint64_t v40 = v16 + 2;
      *unint64_t v22 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
      v22[1] = ((4198405 * (unint64_t)(224 * v42)) >> 32) + 16;
      unint64_t v41 = v22 + 2;
      if (!v39)
      {
LABEL_29:
        uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v40 = v16;
      unint64_t v41 = v22;
      if (!v39) {
        goto LABEL_29;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      unint64_t v44 = (4198405 * (unint64_t)(224 * (v40[1] >> 6))) >> 32;
      *unint64_t v41 = ((4198405 * (unint64_t)(224 * (*v40 >> 6))) >> 32) + 16;
      v41[1] = v44 + 16;
      v41 += 2;
      v40 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_29;
  }
LABEL_30:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      unint64_t v47 = v16;
      uint64_t v48 = v22;
      if (v8)
      {
        int v49 = v16[1] >> 6;
        unint64_t v47 = v16 + 2;
        *unint64_t v22 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
        v22[1] = ((4198405 * (unint64_t)(224 * v49)) >> 32) + 16;
        uint64_t v48 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          unint64_t v51 = (4198405 * (unint64_t)(224 * (v47[1] >> 6))) >> 32;
          *uint64_t v48 = ((4198405 * (unint64_t)(224 * (*v47 >> 6))) >> 32) + 16;
          v48[1] = v51 + 16;
          v48 += 2;
          v47 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v8) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  uint64_t v23 = a7[2];
  unint64_t v24 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v26 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v27 = v13 - v12;
  unint64_t v28 = v20 - v19;
  if (v13 - v12 >= v28) {
    unint64_t v27 = v28;
  }
  if (v27)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    uint64_t v34 = v32 + v14 + v33;
    unint64_t v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
          *(unsigned char *)(v35 + i) = ((4198405 * (unint64_t)(219 * (*(unsigned __int16 *)(v34 + 2 * i) >> 6))) >> 32)
                              + 16;
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  unint64_t v37 = v27 >> 1;
  unint64_t v38 = v27 - v11;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  unint64_t v40 = v26 >> 1;
  unint64_t v41 = v26 - v10;
  if (v40 >= v41 >> 1) {
    unint64_t v42 = v41 >> 1;
  }
  else {
    unint64_t v42 = v40;
  }
  if (v11)
  {
    if (v9)
    {
      int v46 = v16[1] >> 6;
      uint64_t v43 = v16 + 2;
      *unint64_t v24 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
      unint64_t v44 = v24 + 1;
      unsigned char *v25 = ((4198405 * (unint64_t)(224 * v46)) >> 32) + 16;
      BOOL v45 = v25 + 1;
      if (!v42)
      {
LABEL_29:
        uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        v24 += v21;
        v25 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v43 = v16;
      unint64_t v44 = v24;
      BOOL v45 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v42) {
        goto LABEL_29;
      }
    }
    uint64_t v47 = -(uint64_t)v42;
    do
    {
      uint64_t v48 = 940442720 * (v43[1] >> 6);
      *v44++ = ((4198405 * (unint64_t)(224 * (*v43 >> 6))) >> 32) + 16;
      *v45++ = BYTE4(v48) + 16;
      v43 += 2;
      BOOL v49 = __CFADD__(v47++, 1);
    }
    while (!v49);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      unint64_t v51 = v16;
      uint64_t v52 = v24;
      unint64_t v53 = v25;
      if (v9)
      {
        unint64_t v51 = v16 + 2;
        unint64_t v54 = (4198405 * (unint64_t)(224 * (v16[1] >> 6))) >> 32;
        *unint64_t v24 = ((4198405 * (unint64_t)(224 * (*v16 >> 6))) >> 32) + 16;
        uint64_t v52 = v24 + 1;
        unsigned char *v25 = v54 + 16;
        unint64_t v53 = v25 + 1;
      }
      if (v42)
      {
        uint64_t v55 = -(uint64_t)v42;
        do
        {
          uint64_t v56 = 940442720 * (v51[1] >> 6);
          *v52++ = ((4198405 * (unint64_t)(224 * (*v51 >> 6))) >> 32) + 16;
          *v53++ = BYTE4(v56) + 16;
          v51 += 2;
          BOOL v49 = __CFADD__(v55++, 1);
        }
        while (!v49);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      v24 += v21;
      v25 += v22;
    }
  }
  return 0;
}

uint64_t vt_Copy_xf20_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = v9 & 1;
  uint64_t v11 = v8 & 1;
  unint64_t v12 = v11 + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = 2 * (v10 + v9);
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * ((v11 + v8) >> 1) + (v14 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = a8[2];
  uint64_t v23 = a7[2];
  unint64_t v24 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 >> 1));
  unint64_t v25 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
  unint64_t v26 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9) < v18 - v17) {
    unint64_t v26 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  }
  unint64_t v27 = v13 - v12;
  unint64_t v28 = v20 - v19;
  if (v13 - v12 >= v28) {
    unint64_t v27 = v28;
  }
  if (v27)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *a4;
    uint64_t v31 = *a8;
    uint64_t v32 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = *a4;
    }
    uint64_t v34 = v32 + v14 + v33;
    unint64_t v35 = *a7 + v31 * v19 + v17;
    do
    {
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
          *(unsigned char *)(v35 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v34 + 2 * i) >> 6))) >> 32;
      }
      v34 += v30;
      v35 += v31;
      ++v29;
    }
    while (v29 != v27);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v9 & 1;
  }
  unint64_t v37 = v27 >> 1;
  unint64_t v38 = v27 - v11;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  unint64_t v40 = v26 >> 1;
  unint64_t v41 = v26 - v10;
  if (v40 >= v41 >> 1) {
    unint64_t v42 = v41 >> 1;
  }
  else {
    unint64_t v42 = v40;
  }
  if (v11)
  {
    if (v9)
    {
      unsigned int v46 = v16[1];
      uint64_t v43 = v16 + 2;
      *unint64_t v24 = (4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32;
      unint64_t v44 = v24 + 1;
      unsigned char *v25 = (4198405 * (unint64_t)(255 * (v46 >> 6))) >> 32;
      BOOL v45 = v25 + 1;
      if (!v42)
      {
LABEL_29:
        uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
        v24 += v21;
        v25 += v22;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v43 = v16;
      unint64_t v44 = v24;
      BOOL v45 = (unsigned char *)(v23 + ((unint64_t)(v22 * v19) >> 1) + (v17 >> 1));
      if (!v42) {
        goto LABEL_29;
      }
    }
    uint64_t v47 = -(uint64_t)v42;
    do
    {
      unsigned int v48 = v43[1];
      *v44++ = (4198405 * (unint64_t)(255 * (*v43 >> 6))) >> 32;
      *v45++ = (4198405 * (unint64_t)(255 * (v48 >> 6))) >> 32;
      v43 += 2;
      BOOL v49 = __CFADD__(v47++, 1);
    }
    while (!v49);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      unint64_t v51 = v16;
      uint64_t v52 = v24;
      unint64_t v53 = v25;
      if (v9)
      {
        unsigned int v54 = v16[1];
        unint64_t v51 = v16 + 2;
        *unint64_t v24 = (4198405 * (unint64_t)(255 * (*v16 >> 6))) >> 32;
        uint64_t v52 = v24 + 1;
        unsigned char *v25 = (4198405 * (unint64_t)(255 * (v54 >> 6))) >> 32;
        unint64_t v53 = v25 + 1;
      }
      if (v42)
      {
        uint64_t v55 = -(uint64_t)v42;
        do
        {
          unsigned int v56 = v51[1];
          *v52++ = (4198405 * (unint64_t)(255 * (*v51 >> 6))) >> 32;
          *v53++ = (4198405 * (unint64_t)(255 * (v56 >> 6))) >> 32;
          v51 += 2;
          BOOL v49 = __CFADD__(v55++, 1);
        }
        while (!v49);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v15);
      v24 += v21;
      v25 += v22;
    }
  }
  return 0;
}

vImage_Error vt_VImage_Setup_xw44_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v27 = 0uLL;
  int v28 = 0;
  unint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v27 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v27 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v27 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v28 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v27;
    goto LABEL_11;
  }
  uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error v21 = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, kvImageARGB16Q12|kvImageARGB16U, 0);
  if (!v21
    && (*(void *)&v17[2].opaque[16] != a1
     || *(void *)&v17[2].opaque[8] != a2
     || *(void *)&v17[2].opaque[24] != 4 * a1))
  {
    uint64_t v22 = *(void **)v17[2].opaque;
    if (v22)
    {
      *(void *)v17[2].opaque = 0;
      free(v22);
    }
    unint64_t v23 = 4 * a1;
    if (a2 && v23)
    {
      size_t v24 = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (!is_mul_ok(a2, v23)) {
        goto LABEL_25;
      }
      size_t v24 = v23 * a2;
      if (!(v23 * a2)) {
        goto LABEL_25;
      }
      malloc_type_id_t v25 = 1556728742;
    }
    else
    {
      size_t v24 = 0;
      malloc_type_id_t v25 = 1270757447;
    }
    size_t v24 = (size_t)malloc_type_malloc(v24, v25);
LABEL_25:
    *(void *)v17[2].opaque = v24;
    *(void *)&v17[2].opaque[8] = a2;
    *(void *)&v17[2].opaque[16] = a1;
    *(void *)&v17[2].opaque[24] = v23;
  }
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw44_32BGRA;
  *a11 = vt_VImage_Cleanup_xw44_32BGRA;
  *a8 = v17;
  return v21;
}

vImage_Error vt_VImage_Setup_xw44_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v27 = 0uLL;
  int v28 = 0;
  unint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v27 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v27 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v27 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v28 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v27;
    goto LABEL_11;
  }
  uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error v21 = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, kvImageARGB16Q12|kvImageARGB16U, 0);
  if (!v21
    && (*(void *)&v17[2].opaque[16] != a1
     || *(void *)&v17[2].opaque[8] != a2
     || *(void *)&v17[2].opaque[24] != 4 * a1))
  {
    uint64_t v22 = *(void **)v17[2].opaque;
    if (v22)
    {
      *(void *)v17[2].opaque = 0;
      free(v22);
    }
    unint64_t v23 = 4 * a1;
    if (a2 && v23)
    {
      size_t v24 = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (!is_mul_ok(a2, v23)) {
        goto LABEL_25;
      }
      size_t v24 = v23 * a2;
      if (!(v23 * a2)) {
        goto LABEL_25;
      }
      malloc_type_id_t v25 = 1556728742;
    }
    else
    {
      size_t v24 = 0;
      malloc_type_id_t v25 = 1270757447;
    }
    size_t v24 = (size_t)malloc_type_malloc(v24, v25);
LABEL_25:
    *(void *)v17[2].opaque = v24;
    *(void *)&v17[2].opaque[8] = a2;
    *(void *)&v17[2].opaque[16] = a1;
    *(void *)&v17[2].opaque[24] = v23;
  }
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw44_32ARGB;
  *a11 = vt_VImage_Cleanup_xw44_32ARGB;
  *a8 = v17;
  return v21;
}

vImage_Error vt_VImage_Setup_xw44_w30r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  long long v22 = 0uLL;
  int v23 = 0;
  unint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v22 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, kvImageARGB16Q12|kvImageARGB16U, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw44_w30r;
  *a11 = vt_VImage_Cleanup_xw44_w30r;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_xw22_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v27 = 0uLL;
  int v28 = 0;
  unint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v27 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v27 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v27 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v28 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v27;
    goto LABEL_11;
  }
  uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error v21 = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x10u, kvImageARGB16Q12|kvImageARGB16U, 0);
  if (!v21
    && (*(void *)&v17[2].opaque[16] != a1
     || *(void *)&v17[2].opaque[8] != a2
     || *(void *)&v17[2].opaque[24] != 4 * a1))
  {
    long long v22 = *(void **)v17[2].opaque;
    if (v22)
    {
      *(void *)v17[2].opaque = 0;
      free(v22);
    }
    unint64_t v23 = 4 * a1;
    if (a2 && v23)
    {
      size_t v24 = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (!is_mul_ok(a2, v23)) {
        goto LABEL_25;
      }
      size_t v24 = v23 * a2;
      if (!(v23 * a2)) {
        goto LABEL_25;
      }
      malloc_type_id_t v25 = 1556728742;
    }
    else
    {
      size_t v24 = 0;
      malloc_type_id_t v25 = 1270757447;
    }
    size_t v24 = (size_t)malloc_type_malloc(v24, v25);
LABEL_25:
    *(void *)v17[2].opaque = v24;
    *(void *)&v17[2].opaque[8] = a2;
    *(void *)&v17[2].opaque[16] = a1;
    *(void *)&v17[2].opaque[24] = v23;
  }
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw22_32BGRA;
  *a11 = vt_VImage_Cleanup_xw22_32BGRA;
  *a8 = v17;
  return v21;
}

vImage_Error vt_VImage_Setup_xw22_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v27 = 0uLL;
  int v28 = 0;
  unint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v27 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v27 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v27 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v28 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v27;
    goto LABEL_11;
  }
  uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error v21 = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x10u, kvImageARGB16Q12|kvImageARGB16U, 0);
  if (!v21
    && (*(void *)&v17[2].opaque[16] != a1
     || *(void *)&v17[2].opaque[8] != a2
     || *(void *)&v17[2].opaque[24] != 4 * a1))
  {
    long long v22 = *(void **)v17[2].opaque;
    if (v22)
    {
      *(void *)v17[2].opaque = 0;
      free(v22);
    }
    unint64_t v23 = 4 * a1;
    if (a2 && v23)
    {
      size_t v24 = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (!is_mul_ok(a2, v23)) {
        goto LABEL_25;
      }
      size_t v24 = v23 * a2;
      if (!(v23 * a2)) {
        goto LABEL_25;
      }
      malloc_type_id_t v25 = 1556728742;
    }
    else
    {
      size_t v24 = 0;
      malloc_type_id_t v25 = 1270757447;
    }
    size_t v24 = (size_t)malloc_type_malloc(v24, v25);
LABEL_25:
    *(void *)v17[2].opaque = v24;
    *(void *)&v17[2].opaque[8] = a2;
    *(void *)&v17[2].opaque[16] = a1;
    *(void *)&v17[2].opaque[24] = v23;
  }
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw22_32ARGB;
  *a11 = vt_VImage_Cleanup_xw22_32ARGB;
  *a8 = v17;
  return v21;
}

vImage_Error vt_VImage_Setup_xw22_w30r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  long long v22 = 0uLL;
  int v23 = 0;
  unint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v22 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x10u, kvImageARGB16Q12|kvImageARGB16U, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw22_w30r;
  *a11 = vt_VImage_Cleanup_xw22_w30r;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_xw20_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v27 = 0uLL;
  int v28 = 0;
  unint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v27 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v27 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v27 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v28 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v27;
    goto LABEL_11;
  }
  uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error v21 = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x11u, kvImageARGB16Q12|kvImageARGB16U, 0);
  if (!v21
    && (*(void *)&v17[2].opaque[16] != a1
     || *(void *)&v17[2].opaque[8] != a2
     || *(void *)&v17[2].opaque[24] != 4 * a1))
  {
    long long v22 = *(void **)v17[2].opaque;
    if (v22)
    {
      *(void *)v17[2].opaque = 0;
      free(v22);
    }
    unint64_t v23 = 4 * a1;
    if (a2 && v23)
    {
      size_t v24 = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (!is_mul_ok(a2, v23)) {
        goto LABEL_25;
      }
      size_t v24 = v23 * a2;
      if (!(v23 * a2)) {
        goto LABEL_25;
      }
      malloc_type_id_t v25 = 1556728742;
    }
    else
    {
      size_t v24 = 0;
      malloc_type_id_t v25 = 1270757447;
    }
    size_t v24 = (size_t)malloc_type_malloc(v24, v25);
LABEL_25:
    *(void *)v17[2].opaque = v24;
    *(void *)&v17[2].opaque[8] = a2;
    *(void *)&v17[2].opaque[16] = a1;
    *(void *)&v17[2].opaque[24] = v23;
  }
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw20_32BGRA;
  *a11 = vt_VImage_Cleanup_xw20_32BGRA;
  *a8 = v17;
  return v21;
}

vImage_Error vt_VImage_Setup_xw20_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v27 = 0uLL;
  int v28 = 0;
  unint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v27 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v27 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v27 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v28 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v27;
    goto LABEL_11;
  }
  uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error v21 = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x11u, kvImageARGB16Q12|kvImageARGB16U, 0);
  if (!v21
    && (*(void *)&v17[2].opaque[16] != a1
     || *(void *)&v17[2].opaque[8] != a2
     || *(void *)&v17[2].opaque[24] != 4 * a1))
  {
    long long v22 = *(void **)v17[2].opaque;
    if (v22)
    {
      *(void *)v17[2].opaque = 0;
      free(v22);
    }
    unint64_t v23 = 4 * a1;
    if (a2 && v23)
    {
      size_t v24 = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (!is_mul_ok(a2, v23)) {
        goto LABEL_25;
      }
      size_t v24 = v23 * a2;
      if (!(v23 * a2)) {
        goto LABEL_25;
      }
      malloc_type_id_t v25 = 1556728742;
    }
    else
    {
      size_t v24 = 0;
      malloc_type_id_t v25 = 1270757447;
    }
    size_t v24 = (size_t)malloc_type_malloc(v24, v25);
LABEL_25:
    *(void *)v17[2].opaque = v24;
    *(void *)&v17[2].opaque[8] = a2;
    *(void *)&v17[2].opaque[16] = a1;
    *(void *)&v17[2].opaque[24] = v23;
  }
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw20_32ARGB;
  *a11 = vt_VImage_Cleanup_xw20_32ARGB;
  *a8 = v17;
  return v21;
}

vImage_Error vt_VImage_Setup_xw20_w30r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  long long v22 = 0uLL;
  int v23 = 0;
  unint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v22 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, (vImageYpCbCrType)0x11u, kvImageARGB16Q12|kvImageARGB16U, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_xw20_w30r;
  *a11 = vt_VImage_Cleanup_xw20_w30r;
  *a8 = v17;
  return result;
}

uint64_t GetDefaultYpCbCrToARGBMatrixWithDimensionHint(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F167D8];
  VTGetDefaultYCbCrMatrixWithDimensionHints(a1, a2);
  if (FigCFEqual()) {
    return *MEMORY[0x1E4F167D0];
  }
  else {
    return v2;
  }
}

vImage_Error vt_VImage_Copy_2vuy_32ARGB(vImage_YpCbCrToARGB *info, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v10 = a2[4];
  vImage_Flags v11 = *(_DWORD *)&info[2].opaque[40];
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(*a3 + 2 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(void *)(a6 + 32) + (v10 & 1)) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422CbYpCrYp8ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_2vuy_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_2vuy_32BGRA(vImage_YpCbCrToARGB *info, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v10 = a2[4];
  vImage_Flags v11 = *(_DWORD *)&info[2].opaque[40];
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(*a3 + 2 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(void *)(a6 + 32) + (v10 & 1)) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422CbYpCrYp8ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_2vuy_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_yuvs_32ARGB(vImage_YpCbCrToARGB *info, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v10 = a2[4];
  vImage_Flags v11 = *(_DWORD *)&info[2].opaque[40];
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(*a3 + 2 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(void *)(a6 + 32) + (v10 & 1)) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422YpCbYpCr8ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_yuvs_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_yuvs_32BGRA(vImage_YpCbCrToARGB *info, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v10 = a2[4];
  vImage_Flags v11 = *(_DWORD *)&info[2].opaque[40];
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(*a3 + 2 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(void *)(a6 + 32) + (v10 & 1)) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422YpCbYpCr8ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_yuvs_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_yuvf_32ARGB(vImage_YpCbCrToARGB *info, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v10 = a2[4];
  vImage_Flags v11 = *(_DWORD *)&info[2].opaque[40];
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(*a3 + 2 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(void *)(a6 + 32) + (v10 & 1)) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422YpCbYpCr8ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_yuvf_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_yuvf_32BGRA(vImage_YpCbCrToARGB *info, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v10 = a2[4];
  vImage_Flags v11 = *(_DWORD *)&info[2].opaque[40];
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(*a3 + 2 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(void *)(a6 + 32) + (v10 & 1)) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422YpCbYpCr8ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_yuvf_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_y420_32ARGB(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  vImage_Flags v12 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  size_t v15 = *a4;
  size_t v16 = a4[1];
  uint64_t v17 = a3[2];
  size_t v18 = a4[2];
  uint64_t v19 = *a7;
  size_t v20 = *a8;
  long long v22 = a2 + 4;
  uint64_t v21 = a2[4];
  uint64_t v23 = v22[1] & 1;
  uint64_t v24 = v21 & 1;
  BOOL v25 = __OFADD__(v24, v21);
  uint64_t v26 = v24 + v21;
  uint64_t v27 = v23 + v22[1];
  vImagePixelCount v28 = v10 - v24;
  srcYp.width = v28;
  srcYp.rowBytes = v15;
  vImagePixelCount v29 = v11 - v23;
  srcYp.data = (void *)(v13 + v26 + v27 * v15);
  srcYp.height = v29;
  if (v26 < 0 != v25) {
    uint64_t v30 = v26 + 1;
  }
  else {
    uint64_t v30 = v26;
  }
  uint64_t v31 = v14 + (v30 >> 1);
  if (v27 >= 0) {
    uint64_t v32 = v27;
  }
  else {
    uint64_t v32 = v27 + 1;
  }
  uint64_t v33 = v32 >> 1;
  srcCb.width = v28;
  srcCb.rowBytes = v16;
  srcCb.data = (void *)(v31 + v33 * v16);
  srcCb.height = v29;
  srcCr.width = v28;
  srcCr.rowBytes = v18;
  srcCr.data = (void *)(v17 + (v30 >> 1) + v33 * v18);
  srcCr.height = v29;
  uint64_t v34 = (void *)(v19 + 4 * (*(void *)(a6 + 32) + v24) + (*(void *)(a6 + 40) + v23) * v20);
  dest.width = v28;
  dest.rowBytes = v20;
  dest.data = v34;
  dest.height = v29;
  return vImageConvert_420Yp8_Cb8_Cr8ToARGB8888(&srcYp, &srcCb, &srcCr, &dest, info, permuteMap, 0xFFu, v12);
}

void vt_VImage_Cleanup_y420_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_y420_32BGRA(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  vImage_Flags v12 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  size_t v15 = *a4;
  size_t v16 = a4[1];
  uint64_t v17 = a3[2];
  size_t v18 = a4[2];
  uint64_t v19 = *a7;
  size_t v20 = *a8;
  long long v22 = a2 + 4;
  uint64_t v21 = a2[4];
  uint64_t v23 = v22[1] & 1;
  uint64_t v24 = v21 & 1;
  BOOL v25 = __OFADD__(v24, v21);
  uint64_t v26 = v24 + v21;
  uint64_t v27 = v23 + v22[1];
  vImagePixelCount v28 = v10 - v24;
  srcYp.width = v28;
  srcYp.rowBytes = v15;
  vImagePixelCount v29 = v11 - v23;
  srcYp.data = (void *)(v13 + v26 + v27 * v15);
  srcYp.height = v29;
  if (v26 < 0 != v25) {
    uint64_t v30 = v26 + 1;
  }
  else {
    uint64_t v30 = v26;
  }
  uint64_t v31 = v14 + (v30 >> 1);
  if (v27 >= 0) {
    uint64_t v32 = v27;
  }
  else {
    uint64_t v32 = v27 + 1;
  }
  uint64_t v33 = v32 >> 1;
  srcCb.width = v28;
  srcCb.rowBytes = v16;
  srcCb.data = (void *)(v31 + v33 * v16);
  srcCb.height = v29;
  srcCr.width = v28;
  srcCr.rowBytes = v18;
  srcCr.data = (void *)(v17 + (v30 >> 1) + v33 * v18);
  srcCr.height = v29;
  uint64_t v34 = (void *)(v19 + 4 * (*(void *)(a6 + 32) + v24) + (*(void *)(a6 + 40) + v23) * v20);
  dest.width = v28;
  dest.rowBytes = v20;
  dest.data = v34;
  dest.height = v29;
  return vImageConvert_420Yp8_Cb8_Cr8ToARGB8888(&srcYp, &srcCb, &srcCr, &dest, info, permuteMap, 0xFFu, v12);
}

void vt_VImage_Cleanup_y420_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_f420_32ARGB(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  vImage_Flags v12 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  size_t v15 = *a4;
  size_t v16 = a4[1];
  uint64_t v17 = a3[2];
  size_t v18 = a4[2];
  uint64_t v19 = *a7;
  size_t v20 = *a8;
  long long v22 = a2 + 4;
  uint64_t v21 = a2[4];
  uint64_t v23 = v22[1] & 1;
  uint64_t v24 = v21 & 1;
  BOOL v25 = __OFADD__(v24, v21);
  uint64_t v26 = v24 + v21;
  uint64_t v27 = v23 + v22[1];
  vImagePixelCount v28 = v10 - v24;
  srcYp.width = v28;
  srcYp.rowBytes = v15;
  vImagePixelCount v29 = v11 - v23;
  srcYp.data = (void *)(v13 + v26 + v27 * v15);
  srcYp.height = v29;
  if (v26 < 0 != v25) {
    uint64_t v30 = v26 + 1;
  }
  else {
    uint64_t v30 = v26;
  }
  uint64_t v31 = v14 + (v30 >> 1);
  if (v27 >= 0) {
    uint64_t v32 = v27;
  }
  else {
    uint64_t v32 = v27 + 1;
  }
  uint64_t v33 = v32 >> 1;
  srcCb.width = v28;
  srcCb.rowBytes = v16;
  srcCb.data = (void *)(v31 + v33 * v16);
  srcCb.height = v29;
  srcCr.width = v28;
  srcCr.rowBytes = v18;
  srcCr.data = (void *)(v17 + (v30 >> 1) + v33 * v18);
  srcCr.height = v29;
  uint64_t v34 = (void *)(v19 + 4 * (*(void *)(a6 + 32) + v24) + (*(void *)(a6 + 40) + v23) * v20);
  dest.width = v28;
  dest.rowBytes = v20;
  dest.data = v34;
  dest.height = v29;
  return vImageConvert_420Yp8_Cb8_Cr8ToARGB8888(&srcYp, &srcCb, &srcCr, &dest, info, permuteMap, 0xFFu, v12);
}

void vt_VImage_Cleanup_f420_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_f420_32BGRA(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  vImage_Flags v12 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  size_t v15 = *a4;
  size_t v16 = a4[1];
  uint64_t v17 = a3[2];
  size_t v18 = a4[2];
  uint64_t v19 = *a7;
  size_t v20 = *a8;
  long long v22 = a2 + 4;
  uint64_t v21 = a2[4];
  uint64_t v23 = v22[1] & 1;
  uint64_t v24 = v21 & 1;
  BOOL v25 = __OFADD__(v24, v21);
  uint64_t v26 = v24 + v21;
  uint64_t v27 = v23 + v22[1];
  vImagePixelCount v28 = v10 - v24;
  srcYp.width = v28;
  srcYp.rowBytes = v15;
  vImagePixelCount v29 = v11 - v23;
  srcYp.data = (void *)(v13 + v26 + v27 * v15);
  srcYp.height = v29;
  if (v26 < 0 != v25) {
    uint64_t v30 = v26 + 1;
  }
  else {
    uint64_t v30 = v26;
  }
  uint64_t v31 = v14 + (v30 >> 1);
  if (v27 >= 0) {
    uint64_t v32 = v27;
  }
  else {
    uint64_t v32 = v27 + 1;
  }
  uint64_t v33 = v32 >> 1;
  srcCb.width = v28;
  srcCb.rowBytes = v16;
  srcCb.data = (void *)(v31 + v33 * v16);
  srcCb.height = v29;
  srcCr.width = v28;
  srcCr.rowBytes = v18;
  srcCr.data = (void *)(v17 + (v30 >> 1) + v33 * v18);
  srcCr.height = v29;
  uint64_t v34 = (void *)(v19 + 4 * (*(void *)(a6 + 32) + v24) + (*(void *)(a6 + 40) + v23) * v20);
  dest.width = v28;
  dest.rowBytes = v20;
  dest.data = v34;
  dest.height = v29;
  return vImageConvert_420Yp8_Cb8_Cr8ToARGB8888(&srcYp, &srcCb, &srcCr, &dest, info, permuteMap, 0xFFu, v12);
}

void vt_VImage_Cleanup_f420_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_420v_32ARGB(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, void *a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  vImage_Flags v12 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  size_t v15 = *a4;
  size_t v16 = a4[1];
  uint64_t v17 = *a7;
  size_t v18 = *a8;
  uint64_t v20 = a2[4];
  uint64_t v19 = a2[5];
  uint64_t v21 = (v20 & 1) + v20;
  uint64_t v22 = v13 + v21;
  uint64_t v23 = (v19 & 1) + v19;
  uint64_t v24 = (void *)(v22 + v23 * *a4);
  vImagePixelCount v25 = v10 - (v20 & 1);
  srcYp.width = v25;
  srcYp.rowBytes = v15;
  vImagePixelCount v26 = v11 - (v19 & 1);
  srcYp.data = v24;
  srcYp.height = v26;
  if (v23 < 0 != __OFADD__(v19 & 1, v19)) {
    ++v23;
  }
  srcCbCr.width = v25;
  srcCbCr.rowBytes = v16;
  srcCbCr.data = (void *)(v14 + v21 + (v23 >> 1) * v16);
  srcCbCr.height = v11 - (v19 & 1);
  uint64_t v28 = a6[4];
  uint64_t v27 = a6[5];
  dest.width = v25;
  dest.rowBytes = v18;
  dest.data = (void *)(v17 + 4 * (v28 + (v20 & 1)) + (v27 + (v19 & 1)) * v18);
  dest.height = v26;
  vImage_Error result = 4294945520;
  if ((v20 & 0x8000000000000000) == 0 && (v19 & 0x8000000000000000) == 0)
  {
    if (*a2 < v25 + v20) {
      return 4294945520;
    }
    vImage_Error result = 4294945520;
    if (a2[1] >= v26 + v19 && (v28 & 0x8000000000000000) == 0 && (v27 & 0x8000000000000000) == 0)
    {
      if (*a6 >= v28 + v25 && a6[1] >= v27 + v26) {
        return vImageConvert_420Yp8_CbCr8ToARGB8888(&srcYp, &srcCbCr, &dest, info, permuteMap, 0xFFu, v12);
      }
      return 4294945520;
    }
  }
  return result;
}

void vt_VImage_Cleanup_420v_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_420v_32BGRA(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, void *a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  vImage_Flags v12 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  size_t v15 = *a4;
  size_t v16 = a4[1];
  uint64_t v17 = *a7;
  size_t v18 = *a8;
  uint64_t v20 = a2[4];
  uint64_t v19 = a2[5];
  uint64_t v21 = (v20 & 1) + v20;
  uint64_t v22 = v13 + v21;
  uint64_t v23 = (v19 & 1) + v19;
  uint64_t v24 = (void *)(v22 + v23 * *a4);
  vImagePixelCount v25 = v10 - (v20 & 1);
  srcYp.width = v25;
  srcYp.rowBytes = v15;
  vImagePixelCount v26 = v11 - (v19 & 1);
  srcYp.data = v24;
  srcYp.height = v26;
  if (v23 < 0 != __OFADD__(v19 & 1, v19)) {
    ++v23;
  }
  srcCbCr.width = v25;
  srcCbCr.rowBytes = v16;
  srcCbCr.data = (void *)(v14 + v21 + (v23 >> 1) * v16);
  srcCbCr.height = v11 - (v19 & 1);
  uint64_t v28 = a6[4];
  uint64_t v27 = a6[5];
  dest.width = v25;
  dest.rowBytes = v18;
  dest.data = (void *)(v17 + 4 * (v28 + (v20 & 1)) + (v27 + (v19 & 1)) * v18);
  dest.height = v26;
  vImage_Error result = 4294945520;
  if ((v20 & 0x8000000000000000) == 0 && (v19 & 0x8000000000000000) == 0)
  {
    if (*a2 < v25 + v20) {
      return 4294945520;
    }
    vImage_Error result = 4294945520;
    if (a2[1] >= v26 + v19 && (v28 & 0x8000000000000000) == 0 && (v27 & 0x8000000000000000) == 0)
    {
      if (*a6 >= v28 + v25 && a6[1] >= v27 + v26) {
        return vImageConvert_420Yp8_CbCr8ToARGB8888(&srcYp, &srcCbCr, &dest, info, permuteMap, 0xFFu, v12);
      }
      return 4294945520;
    }
  }
  return result;
}

void vt_VImage_Cleanup_420v_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_420f_32BGRA(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, void *a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  vImage_Flags v12 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  size_t v15 = *a4;
  size_t v16 = a4[1];
  uint64_t v17 = *a7;
  size_t v18 = *a8;
  uint64_t v20 = a2[4];
  uint64_t v19 = a2[5];
  uint64_t v21 = (v20 & 1) + v20;
  uint64_t v22 = v13 + v21;
  uint64_t v23 = (v19 & 1) + v19;
  uint64_t v24 = (void *)(v22 + v23 * *a4);
  vImagePixelCount v25 = v10 - (v20 & 1);
  srcYp.width = v25;
  srcYp.rowBytes = v15;
  vImagePixelCount v26 = v11 - (v19 & 1);
  srcYp.data = v24;
  srcYp.height = v26;
  if (v23 < 0 != __OFADD__(v19 & 1, v19)) {
    ++v23;
  }
  srcCbCr.width = v25;
  srcCbCr.rowBytes = v16;
  srcCbCr.data = (void *)(v14 + v21 + (v23 >> 1) * v16);
  srcCbCr.height = v11 - (v19 & 1);
  uint64_t v28 = a6[4];
  uint64_t v27 = a6[5];
  dest.width = v25;
  dest.rowBytes = v18;
  dest.data = (void *)(v17 + 4 * (v28 + (v20 & 1)) + (v27 + (v19 & 1)) * v18);
  dest.height = v26;
  vImage_Error result = 4294945520;
  if ((v20 & 0x8000000000000000) == 0 && (v19 & 0x8000000000000000) == 0)
  {
    if (*a2 < v25 + v20) {
      return 4294945520;
    }
    vImage_Error result = 4294945520;
    if (a2[1] >= v26 + v19 && (v28 & 0x8000000000000000) == 0 && (v27 & 0x8000000000000000) == 0)
    {
      if (*a6 >= v28 + v25 && a6[1] >= v27 + v26) {
        return vImageConvert_420Yp8_CbCr8ToARGB8888(&srcYp, &srcCbCr, &dest, info, permuteMap, 0xFFu, v12);
      }
      return 4294945520;
    }
  }
  return result;
}

void vt_VImage_Cleanup_420f_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_420f_32ARGB(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, void *a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  vImage_Flags v12 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  size_t v15 = *a4;
  size_t v16 = a4[1];
  uint64_t v17 = *a7;
  size_t v18 = *a8;
  uint64_t v20 = a2[4];
  uint64_t v19 = a2[5];
  uint64_t v21 = (v20 & 1) + v20;
  uint64_t v22 = v13 + v21;
  uint64_t v23 = (v19 & 1) + v19;
  uint64_t v24 = (void *)(v22 + v23 * *a4);
  vImagePixelCount v25 = v10 - (v20 & 1);
  srcYp.width = v25;
  srcYp.rowBytes = v15;
  vImagePixelCount v26 = v11 - (v19 & 1);
  srcYp.data = v24;
  srcYp.height = v26;
  if (v23 < 0 != __OFADD__(v19 & 1, v19)) {
    ++v23;
  }
  srcCbCr.width = v25;
  srcCbCr.rowBytes = v16;
  srcCbCr.data = (void *)(v14 + v21 + (v23 >> 1) * v16);
  srcCbCr.height = v11 - (v19 & 1);
  uint64_t v28 = a6[4];
  uint64_t v27 = a6[5];
  dest.width = v25;
  dest.rowBytes = v18;
  dest.data = (void *)(v17 + 4 * (v28 + (v20 & 1)) + (v27 + (v19 & 1)) * v18);
  dest.height = v26;
  vImage_Error result = 4294945520;
  if ((v20 & 0x8000000000000000) == 0 && (v19 & 0x8000000000000000) == 0)
  {
    if (*a2 < v25 + v20) {
      return 4294945520;
    }
    vImage_Error result = 4294945520;
    if (a2[1] >= v26 + v19 && (v28 & 0x8000000000000000) == 0 && (v27 & 0x8000000000000000) == 0)
    {
      if (*a6 >= v28 + v25 && a6[1] >= v27 + v26) {
        return vImageConvert_420Yp8_CbCr8ToARGB8888(&srcYp, &srcCbCr, &dest, info, permuteMap, 0xFFu, v12);
      }
      return 4294945520;
    }
  }
  return result;
}

void vt_VImage_Cleanup_420f_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F167C8];
  VTGetDefaultYCbCrMatrixWithDimensionHints(a1, a2);
  if (FigCFEqual()) {
    return *MEMORY[0x1E4F167C0];
  }
  else {
    return v2;
  }
}

vImage_Error vt_VImage_Copy_32ARGB_2vuy(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v10 = *(void *)(a6 + 32);
  uint64_t v11 = *(void *)(a6 + 40);
  vImage_Flags v12 = *(_DWORD *)(a1 + 296);
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 2 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422CbYpCrYp8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32ARGB_2vuy(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_yuvs(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v10 = *(void *)(a6 + 32);
  uint64_t v11 = *(void *)(a6 + 40);
  vImage_Flags v12 = *(_DWORD *)(a1 + 296);
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 2 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422YpCbYpCr8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32ARGB_yuvs(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_2vuf(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v10 = *(void *)(a6 + 32);
  uint64_t v11 = *(void *)(a6 + 40);
  vImage_Flags v12 = *(_DWORD *)(a1 + 296);
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 2 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422CbYpCrYp8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32ARGB_2vuf(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_yuvf(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v10 = *(void *)(a6 + 32);
  uint64_t v11 = *(void *)(a6 + 40);
  vImage_Flags v12 = *(_DWORD *)(a1 + 296);
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 2 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422YpCbYpCr8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32ARGB_yuvf(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_y420(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v12 = *a3;
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  uint64_t v15 = a7[1];
  size_t v16 = *a8;
  size_t v17 = a8[1];
  uint64_t v18 = a7[2];
  size_t v19 = a8[2];
  uint64_t v21 = *(void *)(a6 + 32);
  uint64_t v20 = *(void *)(a6 + 40);
  uint64_t v22 = a2[4] + (v21 & 1);
  uint64_t v23 = a2[5] + (v20 & 1);
  vImagePixelCount v24 = v9 - (v21 & 1);
  src.width = v24;
  src.rowBytes = v13;
  vImagePixelCount v25 = v10 - (v20 & 1);
  src.data = (void *)(v12 + 4 * v22 + v23 * v13);
  src.height = v25;
  uint64_t v26 = (v21 & 1) + v21;
  uint64_t v27 = v14 + v26;
  uint64_t v28 = (v20 & 1) + v20;
  destYp.width = v24;
  destYp.rowBytes = v16;
  destYp.data = (void *)(v27 + v28 * v16);
  destYp.height = v25;
  if (v26 < 0 != __OFADD__(v21 & 1, v21)) {
    ++v26;
  }
  uint64_t v29 = v28 / 2;
  destCb.width = v24;
  destCb.rowBytes = v17;
  destCb.data = (void *)(v15 + (v26 >> 1) + v29 * v17);
  destCb.height = v25;
  destCr.width = v24;
  destCr.rowBytes = v19;
  destCr.data = (void *)(v18 + (v26 >> 1) + v29 * v19);
  destCr.height = v25;
  return vImageConvert_ARGB8888To420Yp8_Cb8_Cr8(&src, &destYp, &destCb, &destCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v11);
}

void vt_VImage_Cleanup_32ARGB_y420(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_f420(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v12 = *a3;
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  uint64_t v15 = a7[1];
  size_t v16 = *a8;
  size_t v17 = a8[1];
  uint64_t v18 = a7[2];
  size_t v19 = a8[2];
  uint64_t v21 = *(void *)(a6 + 32);
  uint64_t v20 = *(void *)(a6 + 40);
  uint64_t v22 = a2[4] + (v21 & 1);
  uint64_t v23 = a2[5] + (v20 & 1);
  vImagePixelCount v24 = v9 - (v21 & 1);
  src.width = v24;
  src.rowBytes = v13;
  vImagePixelCount v25 = v10 - (v20 & 1);
  src.data = (void *)(v12 + 4 * v22 + v23 * v13);
  src.height = v25;
  uint64_t v26 = (v21 & 1) + v21;
  uint64_t v27 = v14 + v26;
  uint64_t v28 = (v20 & 1) + v20;
  destYp.width = v24;
  destYp.rowBytes = v16;
  destYp.data = (void *)(v27 + v28 * v16);
  destYp.height = v25;
  if (v26 < 0 != __OFADD__(v21 & 1, v21)) {
    ++v26;
  }
  uint64_t v29 = v28 / 2;
  destCb.width = v24;
  destCb.rowBytes = v17;
  destCb.data = (void *)(v15 + (v26 >> 1) + v29 * v17);
  destCb.height = v25;
  destCr.width = v24;
  destCr.rowBytes = v19;
  destCr.data = (void *)(v18 + (v26 >> 1) + v29 * v19);
  destCr.height = v25;
  return vImageConvert_ARGB8888To420Yp8_Cb8_Cr8(&src, &destYp, &destCb, &destCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v11);
}

void vt_VImage_Cleanup_32ARGB_f420(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_420v(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  uint64_t v14 = a7[1];
  size_t v15 = *a8;
  size_t v16 = a8[1];
  uint64_t v17 = *(void *)(a6 + 32);
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a2[4] + (v17 & 1);
  uint64_t v20 = a2[5] + (v18 & 1);
  vImagePixelCount v21 = v8 - (v17 & 1);
  src.width = v21;
  src.rowBytes = v12;
  vImagePixelCount v22 = v9 - (v18 & 1);
  src.data = (void *)(v11 + 4 * v19 + v20 * v12);
  src.height = v22;
  uint64_t v23 = (v17 & 1) + v17;
  uint64_t v24 = v13 + v23;
  uint64_t v25 = (v18 & 1) + v18;
  destYp.width = v21;
  destYp.rowBytes = v15;
  destYp.data = (void *)(v24 + v25 * v15);
  destYp.height = v22;
  uint64_t v26 = v14 + v23;
  if (v25 < 0 != __OFADD__(v18 & 1, v18)) {
    uint64_t v27 = v25 + 1;
  }
  else {
    uint64_t v27 = (v18 & 1) + v18;
  }
  destCbCr.width = v21;
  destCbCr.rowBytes = v16;
  destCbCr.data = (void *)(v26 + (v27 >> 1) * v16);
  destCbCr.height = v22;
  return vImageConvert_ARGB8888To420Yp8_CbCr8(&src, &destYp, &destCbCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32ARGB_420v(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_420f(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  uint64_t v14 = a7[1];
  size_t v15 = *a8;
  size_t v16 = a8[1];
  uint64_t v17 = *(void *)(a6 + 32);
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a2[4] + (v17 & 1);
  uint64_t v20 = a2[5] + (v18 & 1);
  vImagePixelCount v21 = v8 - (v17 & 1);
  src.width = v21;
  src.rowBytes = v12;
  vImagePixelCount v22 = v9 - (v18 & 1);
  src.data = (void *)(v11 + 4 * v19 + v20 * v12);
  src.height = v22;
  uint64_t v23 = (v17 & 1) + v17;
  uint64_t v24 = v13 + v23;
  uint64_t v25 = (v18 & 1) + v18;
  destYp.width = v21;
  destYp.rowBytes = v15;
  destYp.data = (void *)(v24 + v25 * v15);
  destYp.height = v22;
  uint64_t v26 = v14 + v23;
  if (v25 < 0 != __OFADD__(v18 & 1, v18)) {
    uint64_t v27 = v25 + 1;
  }
  else {
    uint64_t v27 = (v18 & 1) + v18;
  }
  destCbCr.width = v21;
  destCbCr.rowBytes = v16;
  destCbCr.data = (void *)(v26 + (v27 >> 1) * v16);
  destCbCr.height = v22;
  return vImageConvert_ARGB8888To420Yp8_CbCr8(&src, &destYp, &destCbCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32ARGB_420f(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_32BGRA(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, v10);
}

void vt_VImage_Cleanup_32ARGB_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_v210(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v10 = *(void *)(a6 + 32);
  uint64_t v11 = *(void *)(a6 + 40);
  uint64_t v12 = a2[5];
  uint64_t v13 = *a3 + 4 * (a2[4] + v10 % 6);
  vImage_Flags v14 = *(_DWORD *)(a1 + 296);
  size_t v15 = *a4;
  uint64_t v16 = *a7;
  size_t v17 = *a8;
  src.data = (void *)(v13 + v12 * *a4);
  src.height = v9;
  src.width = v8 - v10 % 6;
  src.rowBytes = v15;
  dest.data = (void *)(v16 + 16 * (v10 % 6 + v10) / 6 + v11 * v17);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v17;
  return vImageConvert_ARGB8888To422CrYpCbYpCbYpCbYpCrYpCrYp10(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v14);
}

void vt_VImage_Cleanup_32ARGB_v210(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_R10k(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB8888ToRGBA1010102(&src, &dest, 0, 1023, permuteMap, v10);
}

void vt_VImage_Cleanup_32ARGB_R10k(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_v216(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v10 = *(void *)(a6 + 32);
  uint64_t v11 = *(void *)(a6 + 40);
  vImage_Flags v12 = *(_DWORD *)(a1 + 296);
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 4 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422CbYpCrYp16(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32ARGB_v216(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_y408(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB8888To444AYpCbCr8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32ARGB_y408(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_v410(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB8888To444CrYpCb10(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32ARGB_v410(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_y416(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB8888To444AYpCbCr16(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32ARGB_y416(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_RGhA(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  vImagePixelCount v9 = a2[2];
  vImagePixelCount v8 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 197121;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v9;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v9;
  dest.rowBytes = v14;
  *(void *)backgroundColor = 0;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v8;
  dest.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v8;
  vImage_Error result = vImageConvert_ARGB8888ToARGB16U(&src, &dest, permuteMap, 0, backgroundColor, v10);
  if (!result)
  {
    dest.width = 4 * v9;
    return vImageConvert_16Uto16F(&dest, &dest, v10);
  }
  return result;
}

void vt_VImage_Cleanup_32ARGB_RGhA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_XXXX_b3a8(vImagePixelCount a1, vImagePixelCount a2, size_t *a3, void **a4, uint64_t *a5, uint64_t *a6, int a7, int a8, uint64_t a9)
{
  uint64_t v17 = a9;
  int v37 = 0;
  MEMORY[0x199705810](&vImageInitialize_once, vImageLoadFunctions);
  if (a9) {
    uint64_t v17 = *(unsigned int *)(a9 + 8);
  }
  vImage_Error result = -12905;
  if (a8 <= 1380410944)
  {
    if (a8 == 1095911234)
    {
      uint64_t v20 = 0;
      LOBYTE(v37) = 0;
      char v21 = 3;
      char v22 = 2;
      char v19 = 1;
    }
    else
    {
      if (a8 != 1111970369) {
        return result;
      }
      char v21 = 0;
      uint64_t v20 = 3;
      LOBYTE(v37) = 3;
      char v22 = 1;
      char v19 = 2;
    }
  }
  else
  {
    if (a8 != 1380410945 && a8 != 1380411457 && a8 != 1815491698) {
      return result;
    }
    char v19 = 0;
    uint64_t v20 = 3;
    LOBYTE(v37) = 3;
    char v21 = 2;
    char v22 = 1;
  }
  BYTE1(v37) = v19;
  BYTE2(v37) = v22;
  HIBYTE(v37) = v21;
  uint64_t v23 = (char *)*a4;
  src.data = *a4;
  src.height = a2;
  size_t v24 = *a3;
  src.width = a1;
  src.rowBytes = v24;
  uint64_t v25 = *a6;
  uint64_t v26 = (char *)a6[1];
  v38[0] = v25;
  v38[1] = a2;
  uint64_t v27 = *a5;
  v38[2] = a1;
  v38[3] = v27;
  if (v26)
  {
    if (a7)
    {
      dest.data = v26;
      dest.height = a2;
      size_t v28 = a5[1];
      dest.width = a1;
      dest.rowBytes = v28;
      if (a8 == 1095911234 || a8 == 1111970369)
      {
        if (a8 == 1095911234) {
          uint64_t v33 = 0;
        }
        else {
          uint64_t v33 = 3;
        }
        vImage_Error result = vImageExtractChannel_ARGB8888(&src, &dest, v33, v17);
        if (result) {
          return result;
        }
      }
      else
      {
        if (a8 != 1815491698) {
          return result;
        }
        if (a2)
        {
          uint64_t v29 = 0;
          uint64_t v30 = 2 * v20;
          do
          {
            if (a1)
            {
              uint64_t v31 = 0;
              uint64_t v32 = v30;
              do
              {
                v26[v31++] = *(_WORD *)&v23[v32];
                v32 += 8;
              }
              while (a1 != v31);
            }
            v23 += v24;
            v26 += v28;
            ++v29;
          }
          while (v29 != a2);
        }
        vImage_Error result = 0;
      }
    }
    else if (a2)
    {
      do
      {
        memset(v26, 255, a1);
        v26 += a5[1];
        --a2;
      }
      while (a2);
      vImage_Error result = -12905;
    }
  }
  if (a8 <= 1380410944)
  {
    uint64_t v34 = (uint64_t (*)(vImage_Buffer *, void *, uint64_t, uint64_t, int *, uint64_t))vt_ARGB8888ToXRGB2101010;
    if (!vt_ARGB8888ToXRGB2101010) {
      return result;
    }
    goto LABEL_37;
  }
  if (a8 == 1380410945)
  {
    if (!vt_ARGB16UToXRGB2101010) {
      return result;
    }
    uint64_t v34 = (uint64_t (*)(vImage_Buffer *, void *, uint64_t, uint64_t, int *, uint64_t))vt_ARGBFFFFToXRGB2101010;
    uint64_t v35 = v17 | 0x800;
    return v34(&src, v38, 384, 895, &v37, v35);
  }
  if (a8 == 1815491698)
  {
    uint64_t v34 = (uint64_t (*)(vImage_Buffer *, void *, uint64_t, uint64_t, int *, uint64_t))vt_ARGB16UToXRGB2101010;
    if (vt_ARGB16UToXRGB2101010)
    {
LABEL_37:
      uint64_t v35 = v17;
      return v34(&src, v38, 384, 895, &v37, v35);
    }
  }
  return result;
}

void *vImageLoadFunctions()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  strcpy(v2, "/System/Library/Frameworks/Accelerate.framework/Frameworks/vImage.framework/vImage");
  vImage_Error result = dlopen(v2, 1);
  if (result)
  {
    v1 = result;
    vt_XRGB2101010ToARGB8888 = (uint64_t)dlsym(result, "vImageConvert_XRGB2101010ToARGB8888");
    vt_XRGB2101010ToARGB16U = dlsym(v1, "vImageConvert_XRGB2101010ToARGB16U");
    vt_XRGB2101010ToARGB16F = (uint64_t)dlsym(v1, "vImageConvert_XRGB2101010ToARGB16F");
    vt_XRGB2101010ToARGBFFFF = dlsym(v1, "vImageConvert_XRGB2101010ToARGBFFFF");
    vt_XRGB2101010_A8ToARGB8888 = (uint64_t)dlsym(v1, "vImageConvert_XRGB2101010_A8ToARGB8888");
    vt_XRGB2101010_A8ToARGB16U = dlsym(v1, "vImageConvert_XRGB2101010_A8ToARGB16U");
    vt_XRGB2101010_A8ToARGB16F = (uint64_t)dlsym(v1, "vImageConvert_XRGB2101010_A8ToARGB16F");
    vt_XRGB2101010_A8ToARGBFFFF = (uint64_t)dlsym(v1, "vImageConvert_XRGB2101010_A8ToARGBFFFF");
    vt_ARGB8888ToXRGB2101010 = dlsym(v1, "vImageConvert_ARGB8888ToXRGB2101010");
    vt_ARGB16UToXRGB2101010 = (uint64_t)dlsym(v1, "vImageConvert_ARGB16UToXRGB2101010");
    vImage_Error result = dlsym(v1, "vImageConvert_ARGBFFFFToXRGB2101010");
    vt_ARGBFFFFToXRGB2101010 = (uint64_t)result;
  }
  return result;
}

vImage_Error vt_VImage_Copy_32ARGB_xw20(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  uint64_t v14 = a7[1];
  uint64_t v15 = *a8;
  uint64_t v16 = a8[1];
  uint64_t v18 = *(void *)(a6 + 32);
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v19 = a2[4] + (v18 & 1);
  uint64_t v20 = a2[5] + (v17 & 1);
  vImagePixelCount v21 = v8 - (v18 & 1);
  src.width = v21;
  src.rowBytes = v12;
  vImagePixelCount v22 = v9 - (v17 & 1);
  src.data = (void *)(v11 + 4 * v19 + v20 * v12);
  src.height = v22;
  uint64_t v23 = (v18 & 1) + v18;
  uint64_t v24 = v13 + 2 * v23;
  uint64_t v25 = (v17 & 1) + v17;
  vImagePixelCount v36 = v21;
  uint64_t v37 = v15;
  uint64_t v34 = v24 + v25 * v15;
  vImagePixelCount v35 = v22;
  uint64_t v26 = v14 + 2 * v23;
  if (v25 < 0 != __OFADD__(v17 & 1, v17)) {
    uint64_t v27 = v25 + 1;
  }
  else {
    uint64_t v27 = (v17 & 1) + v17;
  }
  vImagePixelCount v32 = v21;
  uint64_t v33 = v16;
  uint64_t v30 = v26 + (v27 >> 1) * v16;
  vImagePixelCount v31 = v22;
  vImage_Error result = vImageConvert_ARGB8888ToARGB2101010(&src, (const vImage_Buffer *)(a1 + 256), 384, 895, permuteMap, v10);
  if (!result) {
    return vImageConvert_XRGB2101010WTo420Yp10_CbCr10();
  }
  return result;
}

void vt_VImage_Cleanup_32ARGB_xw20(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_xw22(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v9 = a2[2];
  vImagePixelCount v10 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  uint64_t v14 = a7[1];
  uint64_t v15 = *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = a2[5];
  uint64_t v18 = *a3 + 4 * (a2[4] + (v15 & 1));
  uint64_t v20 = *a8;
  uint64_t v19 = a8[1];
  src.data = (void *)(v18 + v17 * *a4);
  src.height = v10;
  vImagePixelCount v21 = v9 - (v15 & 1);
  src.width = v21;
  src.rowBytes = v12;
  uint64_t v22 = (v15 & 1) + v15;
  uint64_t v31 = v13 + 2 * v22 + v16 * v20;
  vImagePixelCount v32 = v10;
  vImagePixelCount v33 = v21;
  uint64_t v34 = v20;
  uint64_t v23 = v14 + 2 * v22;
  if (v16 >= 0) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v16 + 1;
  }
  uint64_t v27 = v23 + (v24 >> 1) * v19;
  vImagePixelCount v28 = v10;
  vImagePixelCount v29 = v21;
  uint64_t v30 = v19;
  vImage_Error result = vImageConvert_ARGB8888ToARGB2101010(&src, (const vImage_Buffer *)(a1 + 256), 384, 895, permuteMap, v11);
  if (!result) {
    return vImageConvert_XRGB2101010WTo422Yp10_CbCr10();
  }
  return result;
}

void vt_VImage_Cleanup_32ARGB_xw22(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32ARGB_xw44(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a8;
  uint64_t v14 = a8[1];
  vImagePixelCount v27 = v8;
  uint64_t v28 = v13;
  uint64_t v15 = *a7;
  uint64_t v16 = a7[1];
  vImagePixelCount v23 = v8;
  uint64_t v24 = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  uint64_t v17 = *(void *)(a6 + 32);
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v25 = v15 + 2 * v17 + v18 * v13;
  vImagePixelCount v26 = v9;
  uint64_t v21 = v16 + 2 * v17 + v18 / 2 * v14;
  vImagePixelCount v22 = v9;
  vImage_Error result = vImageConvert_ARGB8888ToARGB2101010(&src, (const vImage_Buffer *)(a1 + 256), 384, 895, permuteMap, v10);
  if (!result) {
    return vImageConvert_XRGB2101010WTo444Yp10_CbCr10();
  }
  return result;
}

void vt_VImage_Cleanup_32ARGB_xw44(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_2vuy(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v10 = *(void *)(a6 + 32);
  uint64_t v11 = *(void *)(a6 + 40);
  vImage_Flags v12 = *(_DWORD *)(a1 + 296);
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 2 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422CbYpCrYp8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32BGRA_2vuy(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_yuvs(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v10 = *(void *)(a6 + 32);
  uint64_t v11 = *(void *)(a6 + 40);
  vImage_Flags v12 = *(_DWORD *)(a1 + 296);
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 2 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422YpCbYpCr8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32BGRA_yuvs(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_420f(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  uint64_t v14 = a7[1];
  size_t v15 = *a8;
  size_t v16 = a8[1];
  uint64_t v17 = *(void *)(a6 + 32);
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a2[4] + (v17 & 1);
  uint64_t v20 = a2[5] + (v18 & 1);
  vImagePixelCount v21 = v8 - (v17 & 1);
  src.width = v21;
  src.rowBytes = v12;
  vImagePixelCount v22 = v9 - (v18 & 1);
  src.data = (void *)(v11 + 4 * v19 + v20 * v12);
  src.height = v22;
  uint64_t v23 = (v17 & 1) + v17;
  uint64_t v24 = v13 + v23;
  uint64_t v25 = (v18 & 1) + v18;
  destYp.width = v21;
  destYp.rowBytes = v15;
  destYp.data = (void *)(v24 + v25 * v15);
  destYp.height = v22;
  uint64_t v26 = v14 + v23;
  if (v25 < 0 != __OFADD__(v18 & 1, v18)) {
    uint64_t v27 = v25 + 1;
  }
  else {
    uint64_t v27 = (v18 & 1) + v18;
  }
  destCbCr.width = v21;
  destCbCr.rowBytes = v16;
  destCbCr.data = (void *)(v26 + (v27 >> 1) * v16);
  destCbCr.height = v22;
  return vImageConvert_ARGB8888To420Yp8_CbCr8(&src, &destYp, &destCbCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32BGRA_420f(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_yuvf(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v10 = *(void *)(a6 + 32);
  uint64_t v11 = *(void *)(a6 + 40);
  vImage_Flags v12 = *(_DWORD *)(a1 + 296);
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 2 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422YpCbYpCr8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32BGRA_yuvf(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_2vuf(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v10 = *(void *)(a6 + 32);
  uint64_t v11 = *(void *)(a6 + 40);
  vImage_Flags v12 = *(_DWORD *)(a1 + 296);
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 2 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422CbYpCrYp8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32BGRA_2vuf(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_y420(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  uint64_t v12 = *a3;
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  uint64_t v15 = a7[1];
  size_t v16 = *a8;
  size_t v17 = a8[1];
  uint64_t v18 = a7[2];
  size_t v19 = a8[2];
  uint64_t v21 = *(void *)(a6 + 32);
  uint64_t v20 = *(void *)(a6 + 40);
  uint64_t v22 = a2[4] + (v21 & 1);
  uint64_t v23 = a2[5] + (v20 & 1);
  vImagePixelCount v24 = v9 - (v21 & 1);
  src.width = v24;
  src.rowBytes = v13;
  vImagePixelCount v25 = v10 - (v20 & 1);
  src.data = (void *)(v12 + 4 * v22 + v23 * v13);
  src.height = v25;
  uint64_t v26 = (v21 & 1) + v21;
  uint64_t v27 = v14 + v26;
  uint64_t v28 = (v20 & 1) + v20;
  destYp.width = v24;
  destYp.rowBytes = v16;
  destYp.data = (void *)(v27 + v28 * v16);
  destYp.height = v25;
  if (v26 < 0 != __OFADD__(v21 & 1, v21)) {
    ++v26;
  }
  uint64_t v29 = v28 / 2;
  destCb.width = v24;
  destCb.rowBytes = v17;
  destCb.data = (void *)(v15 + (v26 >> 1) + v29 * v17);
  destCb.height = v25;
  destCr.width = v24;
  destCr.rowBytes = v19;
  destCr.data = (void *)(v18 + (v26 >> 1) + v29 * v19);
  destCr.height = v25;
  return vImageConvert_ARGB8888To420Yp8_Cb8_Cr8(&src, &destYp, &destCb, &destCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v11);
}

void vt_VImage_Cleanup_32BGRA_y420(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_f420(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  uint64_t v12 = *a3;
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  uint64_t v15 = a7[1];
  size_t v16 = *a8;
  size_t v17 = a8[1];
  uint64_t v18 = a7[2];
  size_t v19 = a8[2];
  uint64_t v21 = *(void *)(a6 + 32);
  uint64_t v20 = *(void *)(a6 + 40);
  uint64_t v22 = a2[4] + (v21 & 1);
  uint64_t v23 = a2[5] + (v20 & 1);
  vImagePixelCount v24 = v9 - (v21 & 1);
  src.width = v24;
  src.rowBytes = v13;
  vImagePixelCount v25 = v10 - (v20 & 1);
  src.data = (void *)(v12 + 4 * v22 + v23 * v13);
  src.height = v25;
  uint64_t v26 = (v21 & 1) + v21;
  uint64_t v27 = v14 + v26;
  uint64_t v28 = (v20 & 1) + v20;
  destYp.width = v24;
  destYp.rowBytes = v16;
  destYp.data = (void *)(v27 + v28 * v16);
  destYp.height = v25;
  if (v26 < 0 != __OFADD__(v21 & 1, v21)) {
    ++v26;
  }
  uint64_t v29 = v28 / 2;
  destCb.width = v24;
  destCb.rowBytes = v17;
  destCb.data = (void *)(v15 + (v26 >> 1) + v29 * v17);
  destCb.height = v25;
  destCr.width = v24;
  destCr.rowBytes = v19;
  destCr.data = (void *)(v18 + (v26 >> 1) + v29 * v19);
  destCr.height = v25;
  return vImageConvert_ARGB8888To420Yp8_Cb8_Cr8(&src, &destYp, &destCb, &destCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v11);
}

void vt_VImage_Cleanup_32BGRA_f420(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_420v(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  uint64_t v14 = a7[1];
  size_t v15 = *a8;
  size_t v16 = a8[1];
  uint64_t v17 = *(void *)(a6 + 32);
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a2[4] + (v17 & 1);
  uint64_t v20 = a2[5] + (v18 & 1);
  vImagePixelCount v21 = v8 - (v17 & 1);
  src.width = v21;
  src.rowBytes = v12;
  vImagePixelCount v22 = v9 - (v18 & 1);
  src.data = (void *)(v11 + 4 * v19 + v20 * v12);
  src.height = v22;
  uint64_t v23 = (v17 & 1) + v17;
  uint64_t v24 = v13 + v23;
  uint64_t v25 = (v18 & 1) + v18;
  destYp.width = v21;
  destYp.rowBytes = v15;
  destYp.data = (void *)(v24 + v25 * v15);
  destYp.height = v22;
  uint64_t v26 = v14 + v23;
  if (v25 < 0 != __OFADD__(v18 & 1, v18)) {
    uint64_t v27 = v25 + 1;
  }
  else {
    uint64_t v27 = (v18 & 1) + v18;
  }
  destCbCr.width = v21;
  destCbCr.rowBytes = v16;
  destCbCr.data = (void *)(v26 + (v27 >> 1) * v16);
  destCbCr.height = v22;
  return vImageConvert_ARGB8888To420Yp8_CbCr8(&src, &destYp, &destCbCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32BGRA_420v(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_v0a8(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  memset(&dest, 0, 24);
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  uint64_t v12 = *a3;
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  uint64_t v15 = a7[1];
  size_t v16 = *a8;
  size_t v17 = a8[1];
  uint64_t v18 = a7[2];
  size_t v19 = a8[2];
  dest.rowBytes = v19;
  uint64_t v21 = *(void *)(a6 + 32);
  uint64_t v20 = *(void *)(a6 + 40);
  uint64_t v22 = v20 & 1;
  uint64_t v23 = v21 & 1;
  uint64_t v24 = a2[4] + v23;
  uint64_t v25 = a2[5] + v22;
  vImagePixelCount v26 = v9 - v23;
  src.width = v9 - v23;
  src.rowBytes = v13;
  vImagePixelCount v27 = v10 - v22;
  src.data = (void *)(v12 + 4 * v24 + v25 * v13);
  src.height = v27;
  uint64_t v28 = v22 + v20;
  destYp.width = v9 - v23;
  destYp.rowBytes = v16;
  destYp.data = (void *)(v14 + v23 + v21 + v28 * v16);
  destYp.height = v27;
  if (v28 < 0 != __OFADD__(v22, v20)) {
    uint64_t v29 = v28 + 1;
  }
  else {
    uint64_t v29 = (v20 & 1) + v20;
  }
  destCbCr.width = v9 - v23;
  destCbCr.rowBytes = v17;
  destCbCr.data = (void *)(v15 + v23 + v21 + (v29 >> 1) * v17);
  destCbCr.height = v27;
  vImage_Error result = vImageConvert_ARGB8888To420Yp8_CbCr8(&src, &destYp, &destCbCr, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v11);
  if (!result)
  {
    uint64_t v31 = (void *)(v18 + *(void *)(a6 + 32) + v23 + (*(void *)(a6 + 40) + v22) * v19);
    dest.height = v27;
    dest.width = v26;
    dest.data = v31;
    return vImageExtractChannel_ARGB8888(&src, &dest, 3, v11);
  }
  return result;
}

void vt_VImage_Cleanup_32BGRA_v0a8(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_32ARGB(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, v10);
}

void vt_VImage_Cleanup_32BGRA_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_v210(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v10 = *(void *)(a6 + 32);
  uint64_t v11 = *(void *)(a6 + 40);
  uint64_t v12 = a2[5];
  uint64_t v13 = *a3 + 4 * (a2[4] + v10 % 6);
  vImage_Flags v14 = *(_DWORD *)(a1 + 296);
  size_t v15 = *a4;
  uint64_t v16 = *a7;
  size_t v17 = *a8;
  src.data = (void *)(v13 + v12 * *a4);
  src.height = v9;
  src.width = v8 - v10 % 6;
  src.rowBytes = v15;
  dest.data = (void *)(v16 + 16 * (v10 % 6 + v10) / 6 + v11 * v17);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v17;
  return vImageConvert_ARGB8888To422CrYpCbYpCbYpCbYpCrYpCrYp10(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v14);
}

void vt_VImage_Cleanup_32BGRA_v210(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_R10k(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB8888ToRGBA1010102(&src, &dest, 0, 1023, permuteMap, v10);
}

void vt_VImage_Cleanup_32BGRA_R10k(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_v216(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v10 = *(void *)(a6 + 32);
  uint64_t v11 = *(void *)(a6 + 40);
  vImage_Flags v12 = *(_DWORD *)(a1 + 296);
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 4 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB8888To422CbYpCrYp16(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_32BGRA_v216(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_y408(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB8888To444AYpCbCr8(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32BGRA_y408(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_v410(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB8888To444CrYpCb10(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32BGRA_v410(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_y416(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB8888To444AYpCbCr16(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_32BGRA_y416(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_RGhA(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  vImagePixelCount v9 = a2[2];
  vImagePixelCount v8 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50331906;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v9;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v9;
  dest.rowBytes = v14;
  *(void *)backgroundColor = 0;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v8;
  dest.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v8;
  vImage_Error result = vImageConvert_ARGB8888ToARGB16U(&src, &dest, permuteMap, 0, backgroundColor, v10);
  if (!result)
  {
    dest.width = 4 * v9;
    return vImageConvert_16Uto16F(&dest, &dest, v10);
  }
  return result;
}

void vt_VImage_Cleanup_32BGRA_RGhA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_xw20(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  uint64_t v14 = a7[1];
  uint64_t v15 = *a8;
  uint64_t v16 = a8[1];
  uint64_t v18 = *(void *)(a6 + 32);
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v19 = a2[4] + (v18 & 1);
  uint64_t v20 = a2[5] + (v17 & 1);
  vImagePixelCount v21 = v8 - (v18 & 1);
  src.width = v21;
  src.rowBytes = v12;
  vImagePixelCount v22 = v9 - (v17 & 1);
  src.data = (void *)(v11 + 4 * v19 + v20 * v12);
  src.height = v22;
  uint64_t v23 = (v18 & 1) + v18;
  uint64_t v24 = v13 + 2 * v23;
  uint64_t v25 = (v17 & 1) + v17;
  vImagePixelCount v36 = v21;
  uint64_t v37 = v15;
  uint64_t v34 = v24 + v25 * v15;
  vImagePixelCount v35 = v22;
  uint64_t v26 = v14 + 2 * v23;
  if (v25 < 0 != __OFADD__(v17 & 1, v17)) {
    uint64_t v27 = v25 + 1;
  }
  else {
    uint64_t v27 = (v17 & 1) + v17;
  }
  vImagePixelCount v32 = v21;
  uint64_t v33 = v16;
  uint64_t v30 = v26 + (v27 >> 1) * v16;
  vImagePixelCount v31 = v22;
  vImage_Error result = vImageConvert_ARGB8888ToARGB2101010(&src, (const vImage_Buffer *)(a1 + 256), 384, 895, permuteMap, v10);
  if (!result) {
    return vImageConvert_XRGB2101010WTo420Yp10_CbCr10();
  }
  return result;
}

void vt_VImage_Cleanup_32BGRA_xw20(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_xw22(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v9 = a2[2];
  vImagePixelCount v10 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  uint64_t v14 = a7[1];
  uint64_t v15 = *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = a2[5];
  uint64_t v18 = *a3 + 4 * (a2[4] + (v15 & 1));
  uint64_t v20 = *a8;
  uint64_t v19 = a8[1];
  src.data = (void *)(v18 + v17 * *a4);
  src.height = v10;
  vImagePixelCount v21 = v9 - (v15 & 1);
  src.width = v21;
  src.rowBytes = v12;
  uint64_t v22 = (v15 & 1) + v15;
  uint64_t v31 = v13 + 2 * v22 + v16 * v20;
  vImagePixelCount v32 = v10;
  vImagePixelCount v33 = v21;
  uint64_t v34 = v20;
  uint64_t v23 = v14 + 2 * v22;
  if (v16 >= 0) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v16 + 1;
  }
  uint64_t v27 = v23 + (v24 >> 1) * v19;
  vImagePixelCount v28 = v10;
  vImagePixelCount v29 = v21;
  uint64_t v30 = v19;
  vImage_Error result = vImageConvert_ARGB8888ToARGB2101010(&src, (const vImage_Buffer *)(a1 + 256), 384, 895, permuteMap, v11);
  if (!result) {
    return vImageConvert_XRGB2101010WTo422Yp10_CbCr10();
  }
  return result;
}

void vt_VImage_Cleanup_32BGRA_xw22(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_32BGRA_xw44(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a8;
  uint64_t v14 = a8[1];
  vImagePixelCount v27 = v8;
  uint64_t v28 = v13;
  uint64_t v15 = *a7;
  uint64_t v16 = a7[1];
  vImagePixelCount v23 = v8;
  uint64_t v24 = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  uint64_t v17 = *(void *)(a6 + 32);
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v25 = v15 + 2 * v17 + v18 * v13;
  vImagePixelCount v26 = v9;
  uint64_t v21 = v16 + 2 * v17 + v18 / 2 * v14;
  vImagePixelCount v22 = v9;
  vImage_Error result = vImageConvert_ARGB8888ToARGB2101010(&src, (const vImage_Buffer *)(a1 + 256), 384, 895, permuteMap, v10);
  if (!result) {
    return vImageConvert_XRGB2101010WTo444Yp10_CbCr10();
  }
  return result;
}

void vt_VImage_Cleanup_32BGRA_xw44(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_L565_32BGRA(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[3];
  vImage_Flags v9 = *(_DWORD *)(a1 + 296);
  uint64_t v10 = *a3;
  size_t v11 = *a4;
  src.width = a2[2];
  src.rowBytes = v11;
  uint64_t v12 = *a7;
  size_t v13 = *a8;
  v15.width = src.width;
  v15.rowBytes = v13;
  src.data = (void *)(v10 + 2 * a2[4] + a2[5] * v11);
  src.height = v8;
  v15.data = (void *)(v12 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v13);
  v15.height = v8;
  return vImageConvert_RGB565toBGRA8888(0xFFu, &src, &v15, v9);
}

void vt_VImage_Cleanup_L565_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_L565_32ARGB(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[3];
  vImage_Flags v9 = *(_DWORD *)(a1 + 296);
  uint64_t v10 = *a3;
  size_t v11 = *a4;
  src.width = a2[2];
  src.rowBytes = v11;
  uint64_t v12 = *a7;
  size_t v13 = *a8;
  v15.width = src.width;
  v15.rowBytes = v13;
  src.data = (void *)(v10 + 2 * a2[4] + a2[5] * v11);
  src.height = v8;
  v15.data = (void *)(v12 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v13);
  v15.height = v8;
  return vImageConvert_RGB565toARGB8888(0xFFu, &src, &v15, v9);
}

void vt_VImage_Cleanup_L565_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_L565_5551(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[3];
  vImage_Flags v9 = *(_DWORD *)(a1 + 296);
  uint64_t v10 = *a3;
  size_t v11 = *a4;
  src.width = a2[2];
  src.rowBytes = v11;
  uint64_t v12 = *a7;
  size_t v13 = *a8;
  v16.width = src.width;
  v16.rowBytes = v13;
  BOOL v14 = *(unsigned char *)(a1 + 288) == 0;
  src.data = (void *)(v10 + 2 * a2[4] + a2[5] * v11);
  src.height = v8;
  v16.data = (void *)(v12 + 2 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v13);
  v16.height = v8;
  return vImageConvert_RGB565toRGBA5551(&src, &v16, 2 * v14, v9);
}

void vt_VImage_Cleanup_L565_5551(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_L565_1555(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[3];
  vImage_Flags v9 = *(_DWORD *)(a1 + 296);
  uint64_t v10 = *a3;
  size_t v11 = *a4;
  src.width = a2[2];
  src.rowBytes = v11;
  uint64_t v12 = *a7;
  size_t v13 = *a8;
  v16.width = src.width;
  v16.rowBytes = v13;
  BOOL v14 = *(unsigned char *)(a1 + 288) == 0;
  src.data = (void *)(v10 + 2 * a2[4] + a2[5] * v11);
  src.height = v8;
  v16.data = (void *)(v12 + 2 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v13);
  v16.height = v8;
  return vImageConvert_RGB565toARGB1555(&src, &v16, 2 * v14, v9);
}

void vt_VImage_Cleanup_L565_1555(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_R10k_32BGRA(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_RGBA1010102ToARGB8888(&src, &dest, 0, 1023, permuteMap, v10);
}

void vt_VImage_Cleanup_R10k_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_R10k_32ARGB(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_RGBA1010102ToARGB8888(&src, &dest, 0, 1023, permuteMap, v10);
}

void vt_VImage_Cleanup_R10k_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_R10k_RGhA(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v9 = a2[2];
  vImagePixelCount v8 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 197121;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v9;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v9;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v8;
  dest.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v8;
  vImage_Error result = vImageConvert_RGBA1010102ToARGB16U(&src, &dest, 0, 1023, permuteMap, v10);
  if (!result)
  {
    dest.width = 4 * v9;
    return vImageConvert_16Uto16F(&dest, &dest, v10);
  }
  return result;
}

void vt_VImage_Cleanup_R10k_RGhA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_y408_y416(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = *a3 + 4 * a2[4];
  uint64_t v9 = a2[2];
  vImagePixelCount v10 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(v8 + a2[5] * *a4);
  src.height = v10;
  v16.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  v16.height = v10;
  src.width = 4 * v9;
  src.rowBytes = v12;
  v16.width = 4 * v9;
  v16.rowBytes = v14;
  return vImageConvert_Planar8To16U(&src, &v16, v11);
}

void vt_VImage_Cleanup_y408_y416(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_y408_32ARGB(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_444AYpCbCr8ToARGB8888(&src, &dest, info, permuteMap, v10);
}

void vt_VImage_Cleanup_y408_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_y408_32BGRA(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_444AYpCbCr8ToARGB8888(&src, &dest, info, permuteMap, v10);
}

void vt_VImage_Cleanup_y408_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_v410_32ARGB(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_444CrYpCb10ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v10);
}

void vt_VImage_Cleanup_v410_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_v410_32BGRA(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_444CrYpCb10ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v10);
}

void vt_VImage_Cleanup_v410_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_v410_l64r(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v9 = a2[2];
  vImagePixelCount v8 = a2[3];
  vImage_Flags v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 197121;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v9;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v9;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v8;
  dest.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v8;
  uint64_t result = vImageConvert_444CrYpCb10ToARGB16Q12(&src, &dest, info, permuteMap, 4095, v10);
  if (!result)
  {
    dest.width = 4 * v9;
    return vImageConvert_16Q12to16U(&dest, &dest, v10);
  }
  return result;
}

void vt_VImage_Cleanup_v410_l64r(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_v410_RGhA(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v9 = a2[2];
  vImagePixelCount v8 = a2[3];
  vImage_Flags v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 197121;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v9;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v9;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 4 * a2[4] + a2[5] * v12);
  src.height = v8;
  dest.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v8;
  uint64_t result = vImageConvert_444CrYpCb10ToARGB16Q12(&src, &dest, info, permuteMap, 4095, v10);
  if (!result)
  {
    dest.width = 4 * v9;
    uint64_t result = vImageConvert_16Q12to16U(&dest, &dest, v10);
    if (!result) {
      return vImageConvert_16Uto16F(&dest, &dest, v10);
    }
  }
  return result;
}

void vt_VImage_Cleanup_v410_RGhA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_y416_y408(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = *a3 + 8 * a2[4];
  uint64_t v9 = a2[2];
  vImagePixelCount v10 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(v8 + a2[5] * *a4);
  src.height = v10;
  v16.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  v16.height = v10;
  src.width = 4 * v9;
  src.rowBytes = v12;
  v16.width = 4 * v9;
  v16.rowBytes = v14;
  return vImageConvert_16UToPlanar8(&src, &v16, v11);
}

void vt_VImage_Cleanup_y416_y408(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_y416_32BGRA(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 8 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_444AYpCbCr16ToARGB8888(&src, &dest, info, permuteMap, v10);
}

void vt_VImage_Cleanup_y416_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_y416_32ARGB(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 8 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_444AYpCbCr16ToARGB8888(&src, &dest, info, permuteMap, v10);
}

void vt_VImage_Cleanup_y416_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_y416_l64r(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 197121;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 8 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_444AYpCbCr16ToARGB16U(&src, &dest, info, permuteMap, v10);
}

void vt_VImage_Cleanup_y416_l64r(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_y416_RGhA(vImage_YpCbCrToARGB *info, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v9 = a2[2];
  vImagePixelCount v8 = a2[3];
  vImage_Flags v10 = *(_DWORD *)&info[2].opaque[40];
  *(_DWORD *)permuteMap = 197121;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v9;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v9;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 8 * a2[4] + a2[5] * v12);
  src.height = v8;
  dest.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v8;
  uint64_t result = vImageConvert_444AYpCbCr16ToARGB16U(&src, &dest, info, permuteMap, v10);
  if (!result)
  {
    dest.width = 4 * v9;
    return vImageConvert_16Uto16F(&dest, &dest, v10);
  }
  return result;
}

void vt_VImage_Cleanup_y416_RGhA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_v216_32BGRA(vImage_YpCbCrToARGB *info, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v10 = a2[4];
  vImage_Flags v11 = *(_DWORD *)&info[2].opaque[40];
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(*a3 + 4 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(void *)(a6 + 32) + (v10 & 1)) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422CbYpCrYp16ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_v216_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_v216_32ARGB(vImage_YpCbCrToARGB *info, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v10 = a2[4];
  vImage_Flags v11 = *(_DWORD *)&info[2].opaque[40];
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(*a3 + 4 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(void *)(a6 + 32) + (v10 & 1)) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422CbYpCrYp16ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_v216_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_v216_l64r(vImage_YpCbCrToARGB *info, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9 = a2[2];
  vImagePixelCount v10 = a2[3];
  *(_DWORD *)permuteMap = 197121;
  uint64_t v11 = *(void *)(a6 + 32);
  uint64_t v12 = *(void *)(a6 + 40);
  vImage_Flags v13 = *(_DWORD *)&info[2].opaque[40];
  size_t v14 = *a4;
  uint64_t v15 = *a7;
  size_t v16 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v11 & 1)) + a2[5] * *a4);
  src.height = v10;
  src.width = v9 - (v11 & 1);
  src.rowBytes = v14;
  dest.data = (void *)(v15 + 8 * ((v11 & 1) + v11) + v12 * v16);
  dest.height = v10;
  dest.width = src.width;
  dest.rowBytes = v16;
  return vImageConvert_422CbYpCrYp16ToARGB16U(&src, &dest, info, permuteMap, 0xFFFFu, v13);
}

void vt_VImage_Cleanup_v216_l64r(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_v216_RGhA(vImage_YpCbCrToARGB *info, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9 = a2[2];
  vImagePixelCount v8 = a2[3];
  *(_DWORD *)permuteMap = 197121;
  uint64_t v10 = *(void *)(a6 + 32);
  uint64_t v11 = *(void *)(a6 + 40);
  vImage_Flags v12 = *(_DWORD *)&info[2].opaque[40];
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  src.data = (void *)(*a3 + 4 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v8;
  src.width = v9 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 8 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v8;
  dest.width = src.width;
  dest.rowBytes = v15;
  uint64_t result = vImageConvert_422CbYpCrYp16ToARGB16U(&src, &dest, info, permuteMap, 0xFFFFu, v12);
  if (!result)
  {
    dest.width = 4 * v9;
    return vImageConvert_16Uto16F(&dest, &dest, v12);
  }
  return result;
}

void vt_VImage_Cleanup_v216_RGhA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_v210_32BGRA(vImage_YpCbCrToARGB *info, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9 = a2[2];
  vImagePixelCount v10 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = a2[4];
  uint64_t v12 = a2[5];
  vImage_Flags v13 = *(_DWORD *)&info[2].opaque[40];
  size_t v14 = *a4;
  uint64_t v15 = *a7;
  size_t v16 = *a8;
  src.data = (void *)(*a3 + 16 * (v11 % 6 + v11) / 6 + v12 * *a4);
  src.height = v10;
  src.width = v9 - v11 % 6;
  src.rowBytes = v14;
  dest.data = (void *)(v15 + 4 * (*(void *)(a6 + 32) + v11 % 6) + *(void *)(a6 + 40) * v16);
  dest.height = v10;
  dest.width = src.width;
  dest.rowBytes = v16;
  return vImageConvert_422CrYpCbYpCbYpCbYpCrYpCrYp10ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v13);
}

void vt_VImage_Cleanup_v210_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_v210_32ARGB(vImage_YpCbCrToARGB *info, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9 = a2[2];
  vImagePixelCount v10 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v11 = a2[4];
  uint64_t v12 = a2[5];
  vImage_Flags v13 = *(_DWORD *)&info[2].opaque[40];
  size_t v14 = *a4;
  uint64_t v15 = *a7;
  size_t v16 = *a8;
  src.data = (void *)(*a3 + 16 * (v11 % 6 + v11) / 6 + v12 * *a4);
  src.height = v10;
  src.width = v9 - v11 % 6;
  src.rowBytes = v14;
  dest.data = (void *)(v15 + 4 * (*(void *)(a6 + 32) + v11 % 6) + *(void *)(a6 + 40) * v16);
  dest.height = v10;
  dest.width = src.width;
  dest.rowBytes = v16;
  return vImageConvert_422CrYpCbYpCbYpCbYpCrYpCrYp10ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v13);
}

void vt_VImage_Cleanup_v210_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_v210_RGhA(vImage_YpCbCrToARGB *info, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9 = a2[2];
  vImagePixelCount v8 = a2[3];
  *(_DWORD *)permuteMap = 197121;
  uint64_t v10 = a2[4];
  vImage_Flags v11 = *(_DWORD *)&info[2].opaque[40];
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(*a3 + 16 * (v10 % 6 + v10) / 6 + a2[5] * *a4);
  src.height = v8;
  src.width = v9 - v10 % 6;
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 8 * (*(void *)(a6 + 32) + v10 % 6) + *(void *)(a6 + 40) * v14);
  dest.height = v8;
  dest.width = src.width;
  dest.rowBytes = v14;
  uint64_t result = vImageConvert_422CrYpCbYpCbYpCbYpCrYpCrYp10ToARGB16Q12(&src, &dest, info, permuteMap, 4095, v11);
  if (!result)
  {
    dest.width = 4 * v9;
    uint64_t result = vImageConvert_16Q12to16U(&dest, &dest, v11);
    if (!result) {
      return vImageConvert_16Uto16F(&dest, &dest, v11);
    }
  }
  return result;
}

void vt_VImage_Cleanup_v210_RGhA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_OneComponent_32BGRA(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[3];
  vImage_Flags v9 = *(_DWORD *)(a1 + 296);
  uint64_t v10 = *a3;
  size_t v11 = *a4;
  srcB.width = a2[2];
  srcB.rowBytes = v11;
  uint64_t v12 = *a7;
  size_t v13 = *a8;
  v15.width = srcB.width;
  v15.rowBytes = v13;
  srcB.data = (void *)(v10 + a2[4] + a2[5] * v11);
  srcB.height = v8;
  v15.data = (void *)(v12 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v13);
  v15.height = v8;
  vImage_Error result = vImageConvert_Planar8toARGB8888(&srcB, &srcB, &srcB, &srcB, &v15, v9);
  if (!result) {
    return vImageOverwriteChannelsWithScalar_ARGB8888(0xFFu, &v15, &v15, 1u, v9);
  }
  return result;
}

void vt_VImage_Cleanup_OneComponent_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_2vuf_32ARGB(vImage_YpCbCrToARGB *info, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v10 = a2[4];
  vImage_Flags v11 = *(_DWORD *)&info[2].opaque[40];
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(*a3 + 2 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(void *)(a6 + 32) + (v10 & 1)) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422CbYpCrYp8ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_2vuf_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_2vuf_32BGRA(vImage_YpCbCrToARGB *info, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v10 = a2[4];
  vImage_Flags v11 = *(_DWORD *)&info[2].opaque[40];
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(*a3 + 2 * ((v10 & 1) + v10) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v12;
  dest.data = (void *)(v13 + 4 * (*(void *)(a6 + 32) + (v10 & 1)) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v14;
  return vImageConvert_422CbYpCrYp8ToARGB8888(&src, &dest, info, permuteMap, 0xFFu, v11);
}

void vt_VImage_Cleanup_2vuf_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_32ARGB(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v10 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 33619971;
  uint64_t v12 = *a3;
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  dest.width = v10;
  dest.rowBytes = v15;
  *(_DWORD *)backgroundColor = 255;
  src.data = (void *)(v12 + 8 * a2[4] + a2[5] * v13);
  src.height = v9;
  dest.data = (void *)(v14 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v15);
  dest.height = v9;
  src.width = 4 * v10;
  src.rowBytes = v13;
  size_t v16 = (const vImage_Buffer *)(a1 + 256);
  *(void *)(a1 + 272) = 4 * v10;
  vImage_Error result = vImageConvert_16Fto16U(&src, (const vImage_Buffer *)(a1 + 256), v11);
  *(void *)(a1 + 272) = v10;
  if (!result) {
    return vImageConvert_ARGB16UToARGB8888(v16, &dest, permuteMap, 0, backgroundColor, v11);
  }
  return result;
}

void vt_VImage_Cleanup_RGhA_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_32BGRA(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v10 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50331906;
  uint64_t v12 = *a3;
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  dest.width = v10;
  dest.rowBytes = v15;
  *(_DWORD *)backgroundColor = -16777216;
  src.data = (void *)(v12 + 8 * a2[4] + a2[5] * v13);
  src.height = v9;
  dest.data = (void *)(v14 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v15);
  dest.height = v9;
  src.width = 4 * v10;
  src.rowBytes = v13;
  size_t v16 = (const vImage_Buffer *)(a1 + 256);
  *(void *)(a1 + 272) = 4 * v10;
  vImage_Error result = vImageConvert_16Fto16U(&src, (const vImage_Buffer *)(a1 + 256), v11);
  *(void *)(a1 + 272) = v10;
  if (!result) {
    return vImageConvert_ARGB16UToARGB8888(v16, &dest, permuteMap, 0, backgroundColor, v11);
  }
  return result;
}

void vt_VImage_Cleanup_RGhA_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_y416(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v10 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 33619971;
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(*a3 + 8 * a2[4] + a2[5] * *a4);
  src.height = v9;
  dest.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  src.width = 4 * v10;
  src.rowBytes = v12;
  dest.width = 4 * v10;
  dest.rowBytes = v14;
  vImage_Error result = vImageConvert_16Fto16U(&src, &dest, v11);
  dest.width = v10;
  src.width = v10;
  src.rowBytes = dest.rowBytes;
  src.data = dest.data;
  if (!result) {
    return vImageConvert_ARGB16UTo444AYpCbCr16(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v11);
  }
  return result;
}

void vt_VImage_Cleanup_RGhA_y416(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_l64r(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = *a3 + 8 * a2[4];
  uint64_t v9 = a2[2];
  vImagePixelCount v10 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(v8 + a2[5] * *a4);
  src.height = v10;
  v16.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  v16.height = v10;
  src.width = 4 * v9;
  src.rowBytes = v12;
  v16.width = 4 * v9;
  v16.rowBytes = v14;
  return vImageConvert_16Fto16U(&src, &v16, v11);
}

void vt_VImage_Cleanup_RGhA_l64r(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_RGfA(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = *a3 + 8 * a2[4];
  uint64_t v9 = a2[2];
  vImagePixelCount v10 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(v8 + a2[5] * *a4);
  src.height = v10;
  v16.data = (void *)(v13 + 16 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  v16.height = v10;
  src.width = 4 * v9;
  src.rowBytes = v12;
  v16.width = 4 * v9;
  v16.rowBytes = v14;
  return vImageConvert_Planar16FtoPlanarF(&src, &v16, v11);
}

void vt_VImage_Cleanup_RGhA_RGfA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_v410(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v10 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 33619971;
  uint64_t v12 = *a3;
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  dest.width = v10;
  dest.rowBytes = v15;
  src.data = (void *)(v12 + 8 * a2[4] + a2[5] * v13);
  src.height = v9;
  dest.data = (void *)(v14 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v15);
  dest.height = v9;
  src.width = 4 * v10;
  src.rowBytes = v13;
  vImage_Buffer v16 = (const vImage_Buffer *)(a1 + 256);
  *(void *)(a1 + 272) = 4 * v10;
  vImage_Error result = vImageConvert_16Fto16U(&src, (const vImage_Buffer *)(a1 + 256), v11);
  if (!result)
  {
    vImage_Error result = vImageConvert_16Uto16Q12(v16, v16, v11);
    *(void *)(a1 + 272) = v10;
    if (!result) {
      vImage_Error result = vImageConvert_ARGB16Q12To444CrYpCb10(v16, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v11);
    }
  }
  *(void *)(a1 + 272) = v10;
  return result;
}

void vt_VImage_Cleanup_RGhA_v410(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_v210(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 33619971;
  uint64_t v11 = *(void *)(a6 + 32);
  uint64_t v12 = *(void *)(a6 + 40);
  vImage_Flags v13 = *(_DWORD *)(a1 + 296);
  size_t v14 = *a4;
  uint64_t v15 = *a7;
  size_t v16 = *a8;
  src.data = (void *)(*a3 + 8 * (a2[4] + v11 % 6) + a2[5] * *a4);
  src.height = v9;
  dest.data = (void *)(v15 + 16 * (v11 % 6 + v11) / 6 + v12 * v16);
  dest.height = v9;
  dest.width = v10 - v11 % 6;
  dest.rowBytes = v16;
  src.width = 4 * v10;
  src.rowBytes = v14;
  uint64_t v17 = (const vImage_Buffer *)(a1 + 256);
  *(void *)(a1 + 272) = 4 * v10;
  vImage_Error result = vImageConvert_16Fto16U(&src, (const vImage_Buffer *)(a1 + 256), v13);
  if (!result)
  {
    vImage_Error result = vImageConvert_16Uto16Q12(v17, v17, v13);
    *(void *)(a1 + 272) = v10;
    if (!result) {
      vImage_Error result = vImageConvert_ARGB16Q12To422CrYpCbYpCbYpCbYpCrYpCrYp10(v17, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v13);
    }
  }
  *(void *)(a1 + 272) = v10;
  return result;
}

void vt_VImage_Cleanup_RGhA_v210(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_v216(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v10 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 33619971;
  uint64_t v11 = *(void *)(a6 + 32);
  uint64_t v12 = *(void *)(a6 + 40);
  vImage_Flags v13 = *(_DWORD *)(a1 + 296);
  size_t v14 = *a4;
  uint64_t v15 = *a7;
  size_t v16 = *a8;
  src.data = (void *)(*a3 + 8 * (a2[4] + (v11 & 1)) + a2[5] * *a4);
  src.height = v9;
  dest.data = (void *)(v15 + 4 * ((v11 & 1) + v11) + v12 * v16);
  dest.height = v9;
  dest.width = v10 - (v11 & 1);
  dest.rowBytes = v16;
  src.width = 4 * v10;
  src.rowBytes = v14;
  uint64_t v17 = (const vImage_Buffer *)(a1 + 256);
  *(void *)(a1 + 272) = 4 * v10;
  vImage_Error result = vImageConvert_16Fto16U(&src, (const vImage_Buffer *)(a1 + 256), v13);
  *(void *)(a1 + 272) = v10;
  if (!result) {
    return vImageConvert_ARGB16UTo422CbYpCrYp16(v17, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v13);
  }
  return result;
}

void vt_VImage_Cleanup_RGhA_v216(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_RGhA_R10k(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v10 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 33619971;
  uint64_t v12 = *a3;
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  dest.width = v10;
  dest.rowBytes = v15;
  src.data = (void *)(v12 + 8 * a2[4] + a2[5] * v13);
  src.height = v9;
  dest.data = (void *)(v14 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v15);
  dest.height = v9;
  src.width = 4 * v10;
  src.rowBytes = v13;
  size_t v16 = (const vImage_Buffer *)(a1 + 256);
  *(void *)(a1 + 272) = 4 * v10;
  vImage_Error result = vImageConvert_16Fto16U(&src, (const vImage_Buffer *)(a1 + 256), v11);
  *(void *)(a1 + 272) = v10;
  if (!result) {
    return vImageConvert_ARGB16UToRGBA1010102(v16, &dest, 0, 1023, permuteMap, v11);
  }
  return result;
}

void vt_VImage_Cleanup_RGhA_R10k(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_RGfA_32ARGB(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 33619971;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  LODWORD(v8) = *(unsigned char *)(a1 + 288) == 0;
  long long maxFloat = xmmword_193E7D630;
  minFloat[0] = 0;
  minFloat[1] = 0;
  src.data = (void *)(v11 + 16 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGBFFFFtoARGB8888_dithered(&src, &dest, (const float *)&maxFloat, (const float *)minFloat, 2 * (int)v8, permuteMap, v10);
}

void vt_VImage_Cleanup_RGfA_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_RGfA_32BGRA(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50331906;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  LODWORD(v8) = *(unsigned char *)(a1 + 288) == 0;
  long long maxFloat = xmmword_193E7D630;
  minFloat[0] = 0;
  minFloat[1] = 0;
  src.data = (void *)(v11 + 16 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGBFFFFtoARGB8888_dithered(&src, &dest, (const float *)&maxFloat, (const float *)minFloat, 2 * (int)v8, permuteMap, v10);
}

void vt_VImage_Cleanup_RGfA_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_RGfA_RGhA(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = *a3 + 16 * a2[4];
  uint64_t v9 = a2[2];
  vImagePixelCount v10 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(v8 + a2[5] * *a4);
  src.height = v10;
  v16.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  v16.height = v10;
  src.width = 4 * v9;
  src.rowBytes = v12;
  v16.width = 4 * v9;
  v16.rowBytes = v14;
  return vImageConvert_PlanarFtoPlanar16F(&src, &v16, v11);
}

void vt_VImage_Cleanup_RGfA_RGhA(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_b3a8_XXXX(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6, int a7, int a8, uint64_t a9)
{
  int v29 = 0;
  MEMORY[0x199705810](&vImageInitialize_once, vImageLoadFunctions);
  if (a9) {
    uint64_t v17 = *(unsigned int *)(a9 + 8);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t result = -12905;
  if (a8 <= 1380410944)
  {
    if (a8 == 1095911234)
    {
      LOBYTE(v29) = 0;
      char v19 = 3;
      char v20 = 2;
      char v21 = 1;
      goto LABEL_13;
    }
    if (a8 != 1111970369) {
      return result;
    }
    char v19 = 0;
    LOBYTE(v29) = 3;
    char v20 = 1;
  }
  else
  {
    if (a8 != 1380410945 && a8 != 1380411457 && a8 != 1815491698) {
      return result;
    }
    char v19 = 0;
    LOBYTE(v29) = 1;
    char v20 = 3;
  }
  char v21 = 2;
LABEL_13:
  BYTE1(v29) = v21;
  BYTE2(v29) = v20;
  HIBYTE(v29) = v19;
  v31[0] = *a4;
  v31[1] = a2;
  uint64_t v22 = *a3;
  v31[2] = a1;
  v31[3] = v22;
  v30[0] = *a6;
  v30[1] = a2;
  uint64_t v23 = *a5;
  v30[2] = a1;
  v30[3] = v23;
  if (a7)
  {
    v28[0] = a4[1];
    v28[1] = a2;
    uint64_t v24 = a3[1];
    v28[2] = a1;
    v28[3] = v24;
    if (a8 <= 1380410944)
    {
      vImagePixelCount v27 = (uint64_t (*)(void *, void *, void *, uint64_t, uint64_t, int *, uint64_t))vt_XRGB2101010_A8ToARGB8888;
      if (!vt_XRGB2101010_A8ToARGB8888) {
        return result;
      }
    }
    else
    {
      if (a8 == 1380410945)
      {
        vImagePixelCount v27 = (uint64_t (*)(void *, void *, void *, uint64_t, uint64_t, int *, uint64_t))vt_XRGB2101010_A8ToARGBFFFF;
        if (!vt_XRGB2101010_A8ToARGBFFFF) {
          return result;
        }
      }
      else
      {
        if (a8 != 1380411457)
        {
          if (vt_XRGB2101010ToARGB16U) {
            return ((uint64_t (*)(void *, void *, void *, uint64_t, uint64_t, int *, uint64_t))vt_XRGB2101010_A8ToARGB16U)(v31, v28, v30, 384, 895, &v29, v17);
          }
          return result;
        }
        vImagePixelCount v27 = (uint64_t (*)(void *, void *, void *, uint64_t, uint64_t, int *, uint64_t))vt_XRGB2101010_A8ToARGB16F;
        if (!vt_XRGB2101010_A8ToARGB16F) {
          return result;
        }
      }
      uint64_t v17 = v17 | 0x800;
    }
    return v27(v31, v28, v30, 384, 895, &v29, v17);
  }
  if (a8 <= 1380410944)
  {
    uint64_t v25 = (void *)vt_XRGB2101010ToARGB8888;
    if (!vt_XRGB2101010ToARGB8888) {
      return result;
    }
    uint64_t v26 = 255;
    return ((uint64_t (*)(void *, uint64_t, void *, uint64_t, uint64_t, int *, uint64_t))v25)(v31, v26, v30, 384, 895, &v29, v17);
  }
  if (a8 == 1380410945)
  {
    if (vt_XRGB2101010_A8ToARGBFFFF) {
      return ((uint64_t (*)(void *, void *, uint64_t, uint64_t, int *, void, float))vt_XRGB2101010ToARGBFFFF)(v31, v30, 384, 895, &v29, v17 | 0x800, 1.0);
    }
  }
  else
  {
    if (a8 != 1380411457)
    {
      uint64_t v25 = vt_XRGB2101010ToARGB16U;
      if (!vt_XRGB2101010ToARGB16U) {
        return result;
      }
      uint64_t v26 = 0xFFFFLL;
      return ((uint64_t (*)(void *, uint64_t, void *, uint64_t, uint64_t, int *, uint64_t))v25)(v31, v26, v30, 384, 895, &v29, v17);
    }
    if (vt_XRGB2101010ToARGB16F) {
      return ((uint64_t (*)(void *, void *, uint64_t, uint64_t, int *, void, float))vt_XRGB2101010ToARGB16F)(v31, v30, 384, 895, &v29, v17 | 0x800, 1.0);
    }
  }
  return result;
}

uint64_t vt_VImage_Copy_w30r_x420()
{
  return vImageConvert_XRGB2101010WTo420Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_x420(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_w30r_x422()
{
  return vImageConvert_XRGB2101010WTo422Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_x422(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_w30r_x444()
{
  return vImageConvert_XRGB2101010WTo444Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_x444(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_w30r_xf20()
{
  return vImageConvert_XRGB2101010WTo420Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_xf20(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_w30r_xf22()
{
  return vImageConvert_XRGB2101010WTo422Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_xf22(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_w30r_xf44()
{
  return vImageConvert_XRGB2101010WTo444Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_xf44(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_w30r_xw20()
{
  return vImageConvert_XRGB2101010WTo420Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_xw20(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_w30r_xw22()
{
  return vImageConvert_XRGB2101010WTo422Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_xw22(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_w30r_xw44()
{
  return vImageConvert_XRGB2101010WTo444Yp10_CbCr10();
}

void vt_VImage_Cleanup_w30r_xw44(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_l64r_RGhA(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = *a3 + 8 * a2[4];
  uint64_t v9 = a2[2];
  vImagePixelCount v10 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  size_t v12 = *a4;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  src.data = (void *)(v8 + a2[5] * *a4);
  src.height = v10;
  v16.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  v16.height = v10;
  src.width = 4 * v9;
  src.rowBytes = v12;
  v16.width = 4 * v9;
  v16.rowBytes = v14;
  return vImageConvert_16Uto16F(&src, &v16, v11);
}

void vt_VImage_Cleanup_l64r_RGhA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_l64r_v410(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v10 = a2[2];
  vImagePixelCount v9 = a2[3];
  uint64_t v11 = *(void *)(a1 + 296);
  *(_DWORD *)permuteMap = 33619971;
  uint64_t v12 = *a3;
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  dest.width = v10;
  dest.rowBytes = v15;
  src.data = (void *)(v12 + 8 * a2[4] + a2[5] * v13);
  src.height = v9;
  dest.data = (void *)(v14 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v15);
  dest.height = v9;
  src.width = 4 * v10;
  src.rowBytes = v13;
  vImage_Buffer v16 = (const vImage_Buffer *)(a1 + 256);
  *(void *)(a1 + 272) = 4 * v10;
  vImage_Error result = vImageConvert_16Uto16Q12(&src, (const vImage_Buffer *)(a1 + 256), 0);
  src.width = v10;
  *(void *)(a1 + 272) = v10;
  if (!result) {
    return vImageConvert_ARGB16Q12To444CrYpCb10(v16, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v11);
  }
  return result;
}

void vt_VImage_Cleanup_l64r_v410(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_l64r_y416(uint64_t a1, void *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 33619971;
  uint64_t v11 = *a3;
  size_t v12 = *a4;
  src.width = v8;
  src.rowBytes = v12;
  uint64_t v13 = *a7;
  size_t v14 = *a8;
  dest.width = v8;
  dest.rowBytes = v14;
  src.data = (void *)(v11 + 8 * a2[4] + a2[5] * v12);
  src.height = v9;
  dest.data = (void *)(v13 + 8 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v14);
  dest.height = v9;
  return vImageConvert_ARGB16UTo444AYpCbCr16(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v10);
}

void vt_VImage_Cleanup_l64r_y416(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_l64r_v216(uint64_t a1, void *a2, void *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  *(_DWORD *)permuteMap = 33619971;
  uint64_t v10 = *(void *)(a6 + 32);
  uint64_t v11 = *(void *)(a6 + 40);
  vImage_Flags v12 = *(_DWORD *)(a1 + 296);
  size_t v13 = *a4;
  uint64_t v14 = *a7;
  size_t v15 = *a8;
  src.data = (void *)(*a3 + 8 * (a2[4] + (v10 & 1)) + a2[5] * *a4);
  src.height = v9;
  src.width = v8 - (v10 & 1);
  src.rowBytes = v13;
  dest.data = (void *)(v14 + 4 * ((v10 & 1) + v10) + v11 * v15);
  dest.height = v9;
  dest.width = src.width;
  dest.rowBytes = v15;
  return vImageConvert_ARGB16UTo422CbYpCrYp16(&src, &dest, (const vImage_ARGBToYpCbCr *)(a1 + 128), permuteMap, v12);
}

void vt_VImage_Cleanup_l64r_v216(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_x444_w30r()
{
  return vImageConvert_444Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_x444_w30r(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_x422_w30r()
{
  return vImageConvert_422Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_x422_w30r(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_x420_w30r()
{
  return vImageConvert_420Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_x420_w30r(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_xf44_w30r()
{
  return vImageConvert_444Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_xf44_w30r(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_xf22_w30r()
{
  return vImageConvert_422Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_xf22_w30r(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_xf20_w30r()
{
  return vImageConvert_420Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_xf20_w30r(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_xw44_32BGRA(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = *a4;
  uint64_t v12 = a4[1];
  vImagePixelCount v29 = v8;
  uint64_t v30 = v11;
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  vImagePixelCount v24 = v8;
  uint64_t v25 = v12;
  uint64_t v15 = *a7;
  size_t v16 = *a8;
  dest.width = v8;
  dest.rowBytes = v16;
  uint64_t v17 = a2[4];
  uint64_t v18 = a2[5];
  uint64_t v27 = v13 + 2 * v17 + v18 * v11;
  vImagePixelCount v28 = v9;
  uint64_t v22 = v14 + 2 * v17 + v18 * v12;
  vImagePixelCount v23 = v9;
  dest.data = (void *)(v15 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v16);
  dest.height = v9;
  char v19 = (const vImage_Buffer *)(a1 + 256);
  vImage_Error result = vImageConvert_444Yp10_CbCr10ToXRGB2101010W();
  if (!result) {
    return vImageConvert_XRGB2101010ToARGB8888(v19, 0xFFu, &dest, 384, 895, permuteMap, v10);
  }
  return result;
}

void vt_VImage_Cleanup_xw44_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_xw44_32ARGB(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[2];
  vImagePixelCount v9 = a2[3];
  vImage_Flags v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v11 = *a4;
  uint64_t v12 = a4[1];
  vImagePixelCount v29 = v8;
  uint64_t v30 = v11;
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  vImagePixelCount v24 = v8;
  uint64_t v25 = v12;
  uint64_t v15 = *a7;
  size_t v16 = *a8;
  dest.width = v8;
  dest.rowBytes = v16;
  uint64_t v17 = a2[4];
  uint64_t v18 = a2[5];
  uint64_t v27 = v13 + 2 * v17 + v18 * v11;
  vImagePixelCount v28 = v9;
  uint64_t v22 = v14 + 2 * v17 + v18 * v12;
  vImagePixelCount v23 = v9;
  dest.data = (void *)(v15 + 4 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v16);
  dest.height = v9;
  char v19 = (const vImage_Buffer *)(a1 + 256);
  vImage_Error result = vImageConvert_444Yp10_CbCr10ToXRGB2101010W();
  if (!result) {
    return vImageConvert_XRGB2101010ToARGB8888(v19, 0xFFu, &dest, 384, 895, permuteMap, v10);
  }
  return result;
}

void vt_VImage_Cleanup_xw44_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_xw44_w30r()
{
  return vImageConvert_444Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_xw44_w30r(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_xw22_32BGRA(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9 = a2[2];
  vImagePixelCount v10 = a2[3];
  *(_DWORD *)permuteMap = 66051;
  uint64_t v11 = a3[1];
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  uint64_t v14 = a2[5];
  uint64_t v15 = a2[4] & 1;
  uint64_t v16 = v15 + a2[4];
  uint64_t v28 = *a3 + 2 * v16 + v14 * *a4;
  vImagePixelCount v29 = v10;
  vImage_Flags v17 = *(_DWORD *)(a1 + 296);
  uint64_t v18 = *a7;
  size_t v19 = *a8;
  uint64_t v30 = v9 - v15;
  uint64_t v31 = v12;
  uint64_t v23 = v11 + 2 * v16 + v14 * v13;
  vImagePixelCount v24 = v10;
  uint64_t v25 = v9 - v15;
  uint64_t v26 = v13;
  dest.data = (void *)(v18 + 4 * (*(void *)(a6 + 32) + v15) + *(void *)(a6 + 40) * v19);
  dest.height = v10;
  dest.width = v9 - v15;
  dest.rowBytes = v19;
  char v20 = (const vImage_Buffer *)(a1 + 256);
  vImage_Error result = vImageConvert_422Yp10_CbCr10ToXRGB2101010W();
  if (!result) {
    return vImageConvert_XRGB2101010ToARGB8888(v20, 0xFFu, &dest, 384, 895, permuteMap, v17);
  }
  return result;
}

void vt_VImage_Cleanup_xw22_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_xw22_32ARGB(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9 = a2[2];
  vImagePixelCount v10 = a2[3];
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v11 = a3[1];
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  uint64_t v14 = a2[5];
  uint64_t v15 = a2[4] & 1;
  uint64_t v16 = v15 + a2[4];
  uint64_t v28 = *a3 + 2 * v16 + v14 * *a4;
  vImagePixelCount v29 = v10;
  vImage_Flags v17 = *(_DWORD *)(a1 + 296);
  uint64_t v18 = *a7;
  size_t v19 = *a8;
  uint64_t v30 = v9 - v15;
  uint64_t v31 = v12;
  uint64_t v23 = v11 + 2 * v16 + v14 * v13;
  vImagePixelCount v24 = v10;
  uint64_t v25 = v9 - v15;
  uint64_t v26 = v13;
  dest.data = (void *)(v18 + 4 * (*(void *)(a6 + 32) + v15) + *(void *)(a6 + 40) * v19);
  dest.height = v10;
  dest.width = v9 - v15;
  dest.rowBytes = v19;
  char v20 = (const vImage_Buffer *)(a1 + 256);
  vImage_Error result = vImageConvert_422Yp10_CbCr10ToXRGB2101010W();
  if (!result) {
    return vImageConvert_XRGB2101010ToARGB8888(v20, 0xFFu, &dest, 384, 895, permuteMap, v17);
  }
  return result;
}

void vt_VImage_Cleanup_xw22_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_xw22_w30r()
{
  return vImageConvert_422Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_xw22_w30r(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_xw20_32BGRA(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 66051;
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  uint64_t v14 = *a4;
  uint64_t v15 = a4[1];
  uint64_t v16 = *a7;
  size_t v17 = *a8;
  uint64_t v18 = a2[4];
  uint64_t v19 = a2[5];
  uint64_t v20 = v19 & 1;
  uint64_t v21 = v18 & 1;
  uint64_t v22 = v21 + v18;
  BOOL v23 = __OFADD__(v20, v19);
  uint64_t v24 = v20 + v19;
  uint64_t v25 = v12 + 2 * v22 + v24 * *a4;
  vImagePixelCount v26 = v9 - v21;
  vImagePixelCount v41 = v26;
  uint64_t v42 = v14;
  vImagePixelCount v27 = v10 - v20;
  uint64_t v39 = v25;
  vImagePixelCount v40 = v27;
  uint64_t v28 = v13 + 2 * v22;
  if (v24 < 0 != v23) {
    uint64_t v29 = v24 + 1;
  }
  else {
    uint64_t v29 = v24;
  }
  vImagePixelCount v36 = v26;
  uint64_t v37 = v15;
  uint64_t v34 = v28 + (v29 >> 1) * v15;
  vImagePixelCount v35 = v27;
  uint64_t v30 = (void *)(v16 + 4 * (*(void *)(a6 + 32) + v21) + (*(void *)(a6 + 40) + v20) * v17);
  dest.width = v26;
  dest.rowBytes = v17;
  dest.data = v30;
  dest.height = v27;
  uint64_t v31 = (const vImage_Buffer *)(a1 + 256);
  vImage_Error result = vImageConvert_420Yp10_CbCr10ToXRGB2101010W();
  if (!result) {
    return vImageConvert_XRGB2101010ToARGB8888(v31, 0xFFu, &dest, 384, 895, permuteMap, v11);
  }
  return result;
}

void vt_VImage_Cleanup_xw20_32BGRA(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_xw20_32ARGB(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  vImage_Flags v11 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)permuteMap = 50462976;
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  uint64_t v14 = *a4;
  uint64_t v15 = a4[1];
  uint64_t v16 = *a7;
  size_t v17 = *a8;
  uint64_t v18 = a2[4];
  uint64_t v19 = a2[5];
  uint64_t v20 = v19 & 1;
  uint64_t v21 = v18 & 1;
  uint64_t v22 = v21 + v18;
  BOOL v23 = __OFADD__(v20, v19);
  uint64_t v24 = v20 + v19;
  uint64_t v25 = v12 + 2 * v22 + v24 * *a4;
  vImagePixelCount v26 = v9 - v21;
  vImagePixelCount v41 = v26;
  uint64_t v42 = v14;
  vImagePixelCount v27 = v10 - v20;
  uint64_t v39 = v25;
  vImagePixelCount v40 = v27;
  uint64_t v28 = v13 + 2 * v22;
  if (v24 < 0 != v23) {
    uint64_t v29 = v24 + 1;
  }
  else {
    uint64_t v29 = v24;
  }
  vImagePixelCount v36 = v26;
  uint64_t v37 = v15;
  uint64_t v34 = v28 + (v29 >> 1) * v15;
  vImagePixelCount v35 = v27;
  uint64_t v30 = (void *)(v16 + 4 * (*(void *)(a6 + 32) + v21) + (*(void *)(a6 + 40) + v20) * v17);
  dest.width = v26;
  dest.rowBytes = v17;
  dest.data = v30;
  dest.height = v27;
  uint64_t v31 = (const vImage_Buffer *)(a1 + 256);
  vImage_Error result = vImageConvert_420Yp10_CbCr10ToXRGB2101010W();
  if (!result) {
    return vImageConvert_XRGB2101010ToARGB8888(v31, 0xFFu, &dest, 384, 895, permuteMap, v11);
  }
  return result;
}

void vt_VImage_Cleanup_xw20_32ARGB(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vt_VImage_Copy_xw20_w30r()
{
  return vImageConvert_420Yp10_CbCr10ToXRGB2101010W();
}

void vt_VImage_Cleanup_xw20_w30r(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t vtPixelTransferSession_BuildChain(uint64_t a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  v4 = pixelBuffer;
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  OSType v7 = CVPixelBufferGetPixelFormatType(a3);
  long long v117 = 0u;
  long long v118 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  double v90 = (void *)*MEMORY[0x1E4F24A78];
  CFTypeRef v8 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
  double v91 = (void *)*MEMORY[0x1E4F24B98];
  CFTypeRef v9 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E4F24B98], 0);
  CVPixelBufferGetWidth(v4);
  CVPixelBufferGetHeight(v4);
  CVPixelBufferGetWidth(a3);
  CVPixelBufferGetHeight(a3);
  v112[3] = 0;
  v112[4] = 0;
  memset((char *)&v112[1] + 7, 0, 9);
  double v111 = 0;
  v112[0] = 0;
  double v110 = 0;
  int v109 = 0;
  value = 0;
  CFTypeRef v107 = 0;
  CFTypeRef v106 = 0;
  CFDictionaryRef v105 = 0;
  CFDictionaryRef theAttachments = 0;
  *(void *)(a1 + 1152) = 0;
  checkIOSurfaceProtectionOptions(v4);
  pixelBuffera = a3;
  checkIOSurfaceProtectionOptions(a3);
  *(unsigned char *)(a1 + 1137) = 0;
  OSType v103 = PixelFormatType;
  *(_DWORD *)(a1 + 580) = PixelFormatType;
  *(_DWORD *)(a1 + 584) = v7;
  uint64_t v10 = *(const void **)(a1 + 688);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 688) = 0;
  }
  vImage_Flags v11 = *(const void **)(a1 + 224);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 224) = 0;
  }
  uint64_t v12 = *(void (**)(void))(a1 + 720);
  if (v12)
  {
    v12(*(void *)(a1 + 712));
    *(_OWORD *)(a1 + 712) = 0u;
  }
  IOSurface = CVPixelBufferGetIOSurface(v4);
  uint64_t v14 = CVPixelBufferGetIOSurface(a3);
  if (IOSurface) {
    IOSurfaceGetID(IOSurface);
  }
  OSType pixelFormat = v7;
  if (v14) {
    IOSurfaceGetID(v14);
  }
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 588) = IOSurface != 0;
  *(unsigned char *)(a1 + 589) = v14 != 0;
  *(void *)(a1 + 176) = 0;
  unsigned int v95 = (const void **)(a1 + 168);
  *(unsigned char *)(a1 + 184) = 0;
  CFDictionaryRef v15 = CVBufferCopyAttachments(pixelBuffera, kCVAttachmentMode_ShouldPropagate);
  CFDictionaryRef v16 = CVBufferCopyAttachments(pixelBuffera, kCVAttachmentMode_ShouldNotPropagate);
  CFDictionaryRef v17 = v16;
  uint64_t v18 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (v15)
  {
    uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
    if (v17) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t MutableCopy = 0;
    if (v16)
    {
LABEL_13:
      CFDictionaryRef v96 = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
      if (!v15) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
  CFDictionaryRef v96 = 0;
  if (v15) {
LABEL_14:
  }
    CFRelease(v15);
LABEL_15:
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v20 = (const void **)MEMORY[0x1E4F24B70];
  if ((!*(void *)(a1 + 1080) || !*(void *)(a1 + 1088)) && !*(void *)(a1 + 1008))
  {
    CVBufferPropagateAttachments(v4, pixelBuffera);
    goto LABEL_37;
  }
  CFDictionaryRef v21 = CVBufferCopyAttachments(v4, kCVAttachmentMode_ShouldPropagate);
  CFAllocatorRef v22 = *v18;
  if (v21)
  {
    Mutable = CFDictionaryCreateMutableCopy(v22, 0, v21);
    CFDictionaryRemoveValue(Mutable, (const void *)*MEMORY[0x1E4F24A00]);
    CFDictionaryRemoveValue(Mutable, *v20);
    CFDictionaryRemoveValue(Mutable, (const void *)*MEMORY[0x1E4F24A90]);
    CFDictionaryRemoveValue(Mutable, (const void *)*MEMORY[0x1E4F24BC8]);
  }
  else
  {
    Mutable = CFDictionaryCreateMutable(v22, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  uint64_t v24 = *(const void **)(a1 + 1008);
  if (v24)
  {
    uint64_t v25 = *v20;
  }
  else
  {
    vImagePixelCount v26 = *(const void **)(a1 + 1080);
    if (!v26 || !*(void *)(a1 + 1088)) {
      goto LABEL_29;
    }
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24A90], v26);
    uint64_t v25 = (const void *)*MEMORY[0x1E4F24BC8];
    uint64_t v24 = *(const void **)(a1 + 1088);
  }
  CFDictionarySetValue(Mutable, v25, v24);
LABEL_29:
  CVBufferSetAttachments(pixelBuffera, Mutable, kCVAttachmentMode_ShouldPropagate);
  if (v21) {
    CFRelease(v21);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_37:
  CVPixelBufferGetIOSurface(v4);
  double v97 = v8;
  buffer = v4;
  if (!IOSurfaceGetProtectionOptions()
    || (CVPixelBufferGetIOSurface(pixelBuffera), IOSurfaceSupportsProtectionOptions()))
  {
    CFAllocatorRef v27 = *v18;
    CFDictionaryRef v28 = CVPixelFormatDescriptionCreateWithPixelFormatType(v27, pixelFormat);
    uint64_t v29 = (const void **)MEMORY[0x1E4F24EB8];
    uint64_t v30 = (const void **)MEMORY[0x1E4F24EA8];
    if (v28)
    {
      CFDictionaryRef v31 = v28;
      CFDictionaryGetValueIfPresent(v28, (const void *)*MEMORY[0x1E4F24E98], (const void **)&value);
      vImagePixelCount v32 = v29;
      CFDictionaryGetValueIfPresent(v31, *v29, (const void **)&v110);
      vImagePixelCount v33 = v30;
      CFDictionaryGetValueIfPresent(v31, *v30, (const void **)&v109);
      FigCFDictionaryGetInt32IfPresent();
      uint64_t v34 = (const void *)*MEMORY[0x1E4F1CFD0];
      if (value && CFEqual(value, (CFTypeRef)*MEMORY[0x1E4F1CFD0]))
      {
        char v35 = 1;
LABEL_46:
        *(unsigned char *)(a1 + 1138) = v35;
        BOOL theDict = FigCFEqual() || FigCFEqual();
        CFAllocatorRef allocator = v27;
        CFDictionaryRef v37 = CVPixelFormatDescriptionCreateWithPixelFormatType(v27, v103);
        CFDictionaryRef v38 = v37;
        if (v37)
        {
          CFDictionaryGetValueIfPresent(v37, (const void *)*MEMORY[0x1E4F24E98], (const void **)&value);
          CFDictionaryGetValueIfPresent(v38, *v32, (const void **)&v110);
          CFDictionaryGetValueIfPresent(v38, *v33, (const void **)&v109);
          FigCFDictionaryGetInt32IfPresent();
        }
        BOOL v39 = value && CFEqual(value, v34);
        vImagePixelCount v40 = (CFStringRef *)MEMORY[0x1E4F24B70];
        *(unsigned char *)(a1 + 1139) = v39;
        BOOL v99 = FigCFEqual() || FigCFEqual();
        vImagePixelCount v41 = *(const void **)(a1 + 192);
        if (v41)
        {
          CFRelease(v41);
          *(void *)(a1 + 192) = 0;
        }
        uint64_t v42 = *(const void **)(a1 + 200);
        if (v42)
        {
          CFRelease(v42);
          *(void *)(a1 + 200) = 0;
        }
        CFStringRef keya = (const __CFString *)*MEMORY[0x1E4F24A00];
        uint64_t v43 = (CGColorSpace *)CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E4F24A00], 0);
        CFTypeRef v44 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
        VTCreateYCbCrCFStringsAndProvideDefaultsFromColorSpaceHint((unint64_t)v44, v99, *(void *)(a1 + 1072), theDict, v43, 0, v112, &v111);
        if (v43) {
          CFRelease(v43);
        }
        if (v44) {
          CFRelease(v44);
        }
        if (*(unsigned char *)(a1 + 1188))
        {
          BOOL v45 = *(const void **)(a1 + 1080);
          if (v45)
          {
            CFRelease(v45);
            *(void *)(a1 + 1080) = 0;
          }
          unsigned int v46 = *(const void **)(a1 + 1088);
          if (v46)
          {
            CFRelease(v46);
            *(void *)(a1 + 1088) = 0;
          }
        }
        *(unsigned char *)(a1 + 1188) = 0;
        if ((pixelFormat == 1999843442 || pixelFormat == 1647534392)
          && !*(void *)(a1 + 1008)
          && !*(void *)(a1 + 1080)
          && !*(void *)(a1 + 1088))
        {
          *(unsigned char *)(a1 + 1188) = 1;
          CFTypeRef v47 = (CFTypeRef)*MEMORY[0x1E4F24AB0];
          if (*MEMORY[0x1E4F24AB0]) {
            CFTypeRef v47 = CFRetain(v47);
          }
          *(void *)(a1 + 1080) = v47;
          CFTypeRef v48 = (CFTypeRef)*MEMORY[0x1E4F24BE0];
          if (*MEMORY[0x1E4F24BE0]) {
            CFTypeRef v48 = CFRetain(v48);
          }
          *(void *)(a1 + 1088) = v48;
        }
        if ((v103 == 1651521076 || v103 == 1647392369)
          && (CFTypeRef v49 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E4F24E08], 0)) != 0)
        {
          CFRelease(v49);
          VTCreateColorAttachments(0, 0, (const void *)*MEMORY[0x1E4F24AA8], (const void *)*MEMORY[0x1E4F24BE8], 0, (const void *)*MEMORY[0x1E4F24C30], v103, 0, *(void *)(a1 + 1008), *(const void **)(a1 + 1080), *(const void **)(a1 + 1088), 0, v111, pixelFormat, *(unsigned char *)(a1 + 1120), &v105, &theAttachments);
        }
        else
        {
          CFTypeRef v50 = CVBufferCopyAttachment(v4, keya, 0);
          unint64_t v51 = v4;
          CFTypeRef v52 = CVBufferCopyAttachment(v4, *v40, 0);
          CFTypeRef v53 = CVBufferCopyAttachment(v51, (CFStringRef)*MEMORY[0x1E4F24A90], 0);
          CFTypeRef v54 = CVBufferCopyAttachment(v51, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
          CFTypeRef v55 = CVBufferCopyAttachment(v51, (CFStringRef)*MEMORY[0x1E4F24B78], 0);
          VTCreateColorAttachments((unint64_t)v50, (unint64_t)v52, v53, v54, v55, v112[0], v103, 0, *(void *)(a1 + 1008), *(const void **)(a1 + 1080), *(const void **)(a1 + 1088), 0, v111, pixelFormat, *(unsigned char *)(a1 + 1120), &v105, &theAttachments);
          if (v50) {
            CFRelease(v50);
          }
          if (v52) {
            CFRelease(v52);
          }
          if (v53) {
            CFRelease(v53);
          }
          v4 = buffer;
          if (v54) {
            CFRelease(v54);
          }
          if (v55) {
            CFRelease(v55);
          }
        }
        VTCreateColorSpacesFromDictionaries(v105, theAttachments, &v107, &v106);
        CVBufferSetAttachments(pixelBuffera, theAttachments, kCVAttachmentMode_ShouldPropagate);
        CFDictionaryRef v56 = theAttachments;
        int v57 = *(__CFDictionary **)(a1 + 776);
        if (!v57)
        {
          int v57 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          *(void *)(a1 + 776) = v57;
        }
        VTConvertToSessionPropertiesFromCVProperties(v56, v57);
        VTRequiresMatrixChange((uint64_t)v112[0], v99, (uint64_t)v111, theDict);
        if (v107 && v106) {
          FigCFEqual();
        }
        if (!v4 || (CFDictionaryRef v58 = theAttachments) == 0) {
LABEL_115:
        }
          FigRegisterIOSurfacePixelTransferCapability();
        unsigned int v59 = (const void *)*MEMORY[0x1E4F24BC8];
        CFTypeRef v60 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
        CFDictionaryGetValue(v58, v59);
        if (FigCFEqual()) {
          BOOL v61 = 1;
        }
        else {
          BOOL v61 = FigCFEqual() != 0;
        }
        if (FigCFEqual())
        {
          BOOL v62 = 1;
          if (v61) {
            goto LABEL_112;
          }
        }
        else
        {
          BOOL v62 = FigCFEqual() != 0;
          if (v61)
          {
LABEL_112:
            FigCFEqual();
LABEL_113:
            if (v60) {
              CFRelease(v60);
            }
            goto LABEL_115;
          }
        }
        unsigned int v63 = (CGColorSpace *)CVBufferCopyAttachment(buffer, keya, 0);
        if (!v63 || (uint64_t v64 = v63, IsHDR = CGColorSpaceIsHDR(v63), CFRelease(v64), !IsHDR))
        {
          if (!v62) {
            goto LABEL_113;
          }
        }
        goto LABEL_112;
      }
    }
    else
    {
      vImagePixelCount v32 = (const void **)MEMORY[0x1E4F24EB8];
      vImagePixelCount v33 = (const void **)MEMORY[0x1E4F24EA8];
      uint64_t v34 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    char v35 = 0;
    goto LABEL_46;
  }
  CFDictionaryRef v36 = (const __CFDictionary *)MutableCopy;
  CFTypeRef v66 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E4F24A00], 0);
  CFTypeRef v94 = CVBufferCopyAttachment(v4, (CFStringRef)*v20, 0);
  CFStringRef key = (CFStringRef)CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E4F24A90], 0);
  CFTypeRef v67 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
  CFTypeRef v68 = CVBufferCopyAttachment(v4, (CFStringRef)*MEMORY[0x1E4F24B78], 0);
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v66) {
    CFRelease(v66);
  }
  CFDictionaryRef v70 = v96;
  if (v94) {
    CFRelease(v94);
  }
  if (key) {
    CFRelease(key);
  }
  if (v67) {
    CFRelease(v67);
  }
  if (v68) {
    CFRelease(v68);
  }
  CVBufferRemoveAllAttachments(pixelBuffera);
  CVBufferSetAttachments(pixelBuffera, v36, kCVAttachmentMode_ShouldPropagate);
  CVBufferSetAttachments(pixelBuffera, v96, kCVAttachmentMode_ShouldNotPropagate);
  if (*(unsigned char *)(a1 + 568) || *(unsigned char *)(a1 + 211) || *(_DWORD *)(a1 + 1016))
  {
    *(_DWORD *)(a1 + 572) = CVPixelBufferGetPixelFormatType(buffer);
    long long v71 = v117;
    *(_OWORD *)(a1 + 592) = v116;
    *(_OWORD *)(a1 + 608) = v71;
    *(_OWORD *)(a1 + 624) = v118;
    *(_DWORD *)(a1 + 576) = CVPixelBufferGetPixelFormatType(pixelBuffera);
    long long v72 = v114;
    *(_OWORD *)(a1 + 640) = v113;
    *(_OWORD *)(a1 + 656) = v72;
    *(_OWORD *)(a1 + 672) = v115;
    *(unsigned char *)(a1 + 744) = 0;
  }
  else
  {
    uint64_t v87 = *(void *)(a1 + 752);
    if (v87)
    {
      double v88 = *(void (**)(void))(v87 + 64);
      if (v88) {
        v88(*(void *)(a1 + 760));
      }
      *(void *)(a1 + 752) = 0;
      *(void *)(a1 + 760) = 0;
    }
  }
  int v73 = v105;
  if (v105) {
    int v73 = (void *)CFRetain(v105);
  }
  *(void *)(a1 + 1104) = v73;
  uint64_t v74 = theAttachments;
  if (theAttachments) {
    uint64_t v74 = (void *)CFRetain(theAttachments);
  }
  *(void *)(a1 + 1096) = v74;
  unint64_t v75 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v75)
  {
    unint64_t v76 = v75;
    if (*v95) {
      CFDictionarySetValue(v75, (const void *)*MEMORY[0x1E4F24A50], *v95);
    }
    unsigned int v77 = *(const void **)(a1 + 176);
    if (v77)
    {
      CFDictionarySetValue(v76, (const void *)*MEMORY[0x1E4F24A10], v77);
      CFDictionarySetValue(v76, (const void *)*MEMORY[0x1E4F24A08], *(const void **)(a1 + 176));
    }
    unsigned int v78 = *(const void **)(a1 + 192);
    if (v78) {
      CFDictionarySetValue(v76, v90, v78);
    }
    unsigned int v79 = *(const void **)(a1 + 200);
    if (v79) {
      CFDictionarySetValue(v76, v91, v79);
    }
    if (*(unsigned char *)(a1 + 1138) && !*(unsigned char *)(a1 + 1139)) {
      CFDictionarySetValue(v76, (const void *)*MEMORY[0x1E4F249D0], (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    CFDictionaryRef v80 = *(const __CFDictionary **)(a1 + 1096);
    if (v80)
    {
      CFDictionaryGetValue(v80, (const void *)*MEMORY[0x1E4F24A00]);
      FigCFDictionarySetValue();
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 1096), (const void *)*MEMORY[0x1E4F24B70]);
      FigCFDictionarySetValue();
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 1096), (const void *)*MEMORY[0x1E4F24A90]);
      FigCFDictionarySetValue();
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 1096), (const void *)*MEMORY[0x1E4F24BC8]);
      FigCFDictionarySetValue();
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 1096), (const void *)*MEMORY[0x1E4F24C18]);
      FigCFDictionarySetValue();
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 1096), (const void *)*MEMORY[0x1E4F24BC0]);
      CFDictionaryRef v70 = v96;
      FigCFDictionarySetValue();
    }
    float v81 = *(const void **)(a1 + 1112);
    if (v81) {
      CFRelease(v81);
    }
    *(void *)(a1 + 1112) = v76;
  }
  *(void *)(a1 + 952) = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24A90], 0);
  *(void *)(a1 + 960) = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
  *(void *)(a1 + 968) = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24B78], 0);
  *(void *)(a1 + 928) = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24B70], 0);
  *(void *)(a1 + 944) = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24A00], 0);
  CFTypeRef v82 = *(CFTypeRef *)(a1 + 1008);
  if (v82) {
    CFTypeRef v82 = CFRetain(v82);
  }
  *(void *)(a1 + 936) = v82;
  CFTypeRef v83 = *(CFTypeRef *)(a1 + 1080);
  if (v83) {
    CFTypeRef v83 = CFRetain(v83);
  }
  *(void *)(a1 + 984) = v83;
  CFTypeRef v84 = *(CFTypeRef *)(a1 + 1088);
  if (v84) {
    CFTypeRef v84 = CFRetain(v84);
  }
  *(void *)(a1 + 992) = v84;
  *(void *)(a1 + 976) = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
  CFTypeRef v85 = *(CFTypeRef *)(a1 + 1072);
  if (v85) {
    CFTypeRef v85 = CFRetain(v85);
  }
  *(void *)(a1 + 1000) = v85;
  if (v112[0]) {
    CFRelease(v112[0]);
  }
  if (v111) {
    CFRelease(v111);
  }
  if (v107) {
    CFRelease(v107);
  }
  if (v106) {
    CFRelease(v106);
  }
  if (v105) {
    CFRelease(v105);
  }
  if (theAttachments) {
    CFRelease(theAttachments);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v70) {
    CFRelease(v70);
  }
  ++*(void *)(a1 + 1224);
  if (v97) {
    CFRelease(v97);
  }
  if (v9) {
    CFRelease(v9);
  }
  return 4294954391;
}

uint64_t vtPixelTransferSessionBuildChainFromBasicTransfer(uint64_t a1)
{
  CFTypeRef cf = 0;
  size_t v2 = *(void *)(a1 + 256);
  size_t v3 = *(void *)(a1 + 264);
  v4 = *(__CVBuffer **)(a1 + 232);
  if (v4)
  {
    uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(v4);
    if (!v2 || (size_t Width = v2, (Height = v3) == 0))
    {
      size_t Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 232));
      size_t Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 232));
    }
    VTPixelTransferChainCreatePixelBufferPoolAttributes(PixelFormatType, Width, Height, (CFMutableDictionaryRef *)&cf);
  }
  else
  {
    LODWORD(PixelFormatType) = 0;
  }
  uint64_t v8 = *(void *)(a1 + 752);
  if (v8 && *(void *)(v8 + 56))
  {
    if (*(unsigned char *)(a1 + 768))
    {
LABEL_10:
      uint64_t appended = vtPixelTransferChainAppendDynamicNode();
LABEL_21:
      uint64_t v13 = appended;
      goto LABEL_23;
    }
    uint64_t v10 = *(void *)(a1 + 696);
    if ((v10 || *(void *)(a1 + 704)) && !*(void *)(a1 + 216))
    {
      if (*(_DWORD *)(a1 + 580) == PixelFormatType)
      {
        uint64_t v13 = vtPixelTransferChainAppendDynamicNode();
        if (!v13)
        {
          uint64_t appended = VTPixelTransferChainAppendSoftwareNode(*(void *)(a1 + 32), 0, *(void *)(a1 + 696), *(void *)(a1 + 704), *(void *)(a1 + 712), *(void (**)(uint64_t))(a1 + 720));
          goto LABEL_21;
        }
        goto LABEL_23;
      }
      uint64_t v15 = VTPixelTransferChainAppendSoftwareNode(*(void *)(a1 + 32), (uint64_t)cf, v10, *(void *)(a1 + 704), *(void *)(a1 + 712), *(void (**)(uint64_t))(a1 + 720));
      goto LABEL_49;
    }
  }
  uint64_t v11 = *(void *)(a1 + 696);
  if (v11)
  {
    if (!*(void *)(a1 + 216))
    {
      uint64_t v12 = *(void *)(a1 + 704);
LABEL_22:
      VTPixelTransferChainAppendSoftwareNode(*(void *)(a1 + 32), 0, v11, v12, *(void *)(a1 + 712), *(void (**)(uint64_t))(a1 + 720));
      uint64_t v13 = 0;
      goto LABEL_23;
    }
    goto LABEL_19;
  }
  uint64_t v12 = *(void *)(a1 + 704);
  if (v12)
  {
    if (!*(void *)(a1 + 216)) {
      goto LABEL_22;
    }
LABEL_19:
    uint64_t v13 = VTPixelTransferChainAppendSoftwareNode(*(void *)(a1 + 32), (uint64_t)cf, v11, *(void *)(a1 + 704), *(void *)(a1 + 712), *(void (**)(uint64_t))(a1 + 720));
    if (v13) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  if (!*(unsigned char *)(a1 + 1184) && *(void *)(a1 + 216))
  {
LABEL_20:
    uint64_t appended = VTPixelTransferChainAppendScalerNode();
    goto LABEL_21;
  }
  if (!*(unsigned char *)(a1 + 1184))
  {
    uint64_t v13 = 4294954391;
    goto LABEL_23;
  }
  if (!v8 || !*(void *)(v8 + 56))
  {
    if (*(void *)(a1 + 216))
    {
      if (*(void *)(a1 + 256) != *(void *)(a1 + 656) || *(void *)(a1 + 264) != *(void *)(a1 + 664))
      {
        uint64_t v13 = VTPixelTransferChainAppendNode(*(void *)(a1 + 32), *(const void **)(a1 + 1160));
        if (!v13) {
          VTPixelTransferChainAppendScalerNode();
        }
        goto LABEL_23;
      }
      VTPixelTransferChainAppendScalerNode();
    }
LABEL_41:
    uint64_t appended = VTPixelTransferChainAppendNode(*(void *)(a1 + 32), *(const void **)(a1 + 1160));
    goto LABEL_21;
  }
  if (*(_DWORD *)(a1 + 572) != PixelFormatType && *(_DWORD *)(a1 + 580) != PixelFormatType)
  {
    uint64_t v15 = VTPixelTransferChainAppendNode(*(void *)(a1 + 32), *(const void **)(a1 + 1160));
LABEL_49:
    uint64_t v13 = v15;
    if (!v15) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
  uint64_t v13 = vtPixelTransferChainAppendDynamicNode();
  if (!v13) {
    goto LABEL_41;
  }
LABEL_23:
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

vImage_Error vtVImageConverterProc(__CVBuffer *a1, __CVBuffer *a2, uint64_t a3)
{
  vImagePixelCount Width = CVPixelBufferGetWidth(a1);
  vImagePixelCount Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  size_t v9 = CVPixelBufferGetBytesPerRow(a2);
  uint64_t v10 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  if (v10) {
    return v10;
  }
  vImage_Error v11 = CVPixelBufferLockBaseAddress(a2, 0);
  if (v11)
  {
    vImage_Error v12 = v11;
    uint64_t v13 = a1;
    CVPixelBufferLockFlags v14 = 1;
  }
  else
  {
    srcs.data = CVPixelBufferGetBaseAddress(a1);
    srcs.height = Height;
    srcs.width = Width;
    srcs.rowBytes = BytesPerRow;
    v16.data = CVPixelBufferGetBaseAddress(a2);
    v16.height = Height;
    v16.width = Width;
    v16.rowBytes = v9;
    vImage_Error v12 = vImageConvert_AnyToAny(*(const vImageConverterRef *)(a3 + 8), &srcs, &v16, 0, 0);
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    uint64_t v13 = a2;
    CVPixelBufferLockFlags v14 = 0;
  }
  CVPixelBufferUnlockBaseAddress(v13, v14);
  return v12;
}

IOSurfaceRef checkIOSurfaceProtectionOptions(__CVBuffer *a1)
{
  IOSurfaceRef result = CVPixelBufferGetIOSurface(a1);
  if (result) {
    return (IOSurfaceRef)(IOSurfaceGetProtectionOptions() != 0);
  }
  return result;
}

uint64_t vtCreateDynamicSession(int64x2_t *a1, CVPixelBufferRef pixelBuffer, OSType a3, int64x2_t *a4, CVPixelBufferRef a5, OSType a6, int64x2_t *a7, int a8, char a9, char a10, char a11, char a12, char *a13, unsigned char *a14, unsigned char *a15)
{
  unint64_t v18 = (unint64_t)a5;
  CVBufferRef buffer = 0;
  int64x2_t v86 = 0u;
  int64x2_t v87 = 0u;
  int64x2_t v85 = 0u;
  if (pixelBuffer) {
    BOOL v23 = a5 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  int v24 = v23;
  uint64_t v84 = 0;
  if (!pixelBuffer && a4)
  {
    if (CVPixelBufferGetPixelFormatType(a5) == a3)
    {
      if (!v18)
      {
        unint64_t v27 = 0;
        vImagePixelCount v33 = 0;
LABEL_43:
        pixelBuffera = v33;
        int64x2_t v37 = a4[1];
        int64x2_t v85 = *a4;
        int64x2_t v86 = v37;
        int64x2_t v38 = a4[2];
LABEL_48:
        int64x2_t v87 = v38;
        int v77 = 1;
        a8 = 1;
        goto LABEL_49;
      }
      uint64_t v25 = (__CVBuffer *)CFRetain((CFTypeRef)v18);
      vImagePixelCount v26 = v25;
      if (v25) {
        unint64_t v27 = (unint64_t)CFRetain(v25);
      }
      else {
        unint64_t v27 = 0;
      }
LABEL_42:
      unint64_t v18 = (unint64_t)CFRetain(a5);
      vImagePixelCount v33 = v26;
      goto LABEL_43;
    }
    uint64_t v30 = vtCreateIntermediatePixelBuffer((__CVBuffer *)v18, a3, a4, 4, &buffer);
    if (!v30)
    {
      CVBufferRef v31 = buffer;
      if (buffer
        && ((CFDictionaryRef v32 = (const __CFDictionary *)a1[69].i64[0]) == 0
         || (CVBufferSetAttachments(buffer, v32, kCVAttachmentMode_ShouldPropagate), (CVBufferRef v31 = buffer) != 0)))
      {
        unint64_t v27 = (unint64_t)CFRetain(v31);
      }
      else
      {
        unint64_t v27 = 0;
      }
      vImagePixelCount v26 = 0;
      vImagePixelCount v33 = 0;
      unint64_t v18 = 0;
      if (!a5) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
LABEL_140:
    uint64_t v53 = v30;
    char v52 = 0;
    uint64_t v43 = 0;
    goto LABEL_94;
  }
  if (!a5 && a7)
  {
    if (CVPixelBufferGetPixelFormatType(pixelBuffer) == a6)
    {
      if (pixelBuffer)
      {
        CFDictionaryRef v28 = (__CVBuffer *)CFRetain(pixelBuffer);
        uint64_t v29 = v28;
        if (v28) {
          unint64_t v18 = (unint64_t)CFRetain(v28);
        }
        else {
          unint64_t v18 = 0;
        }
LABEL_46:
        unint64_t v27 = (unint64_t)CFRetain(pixelBuffer);
        CFDictionaryRef v36 = v29;
        goto LABEL_47;
      }
      unint64_t v18 = 0;
      CFDictionaryRef v36 = 0;
      unint64_t v27 = 0;
    }
    else
    {
      uint64_t v30 = vtCreateIntermediatePixelBuffer(pixelBuffer, a6, a7, 4, &buffer);
      if (v30) {
        goto LABEL_140;
      }
      CVBufferRef v34 = buffer;
      if (buffer
        && ((CFDictionaryRef v35 = (const __CFDictionary *)a1[68].i64[1]) == 0
         || (CVBufferSetAttachments(buffer, v35, kCVAttachmentMode_ShouldPropagate), (CVBufferRef v34 = buffer) != 0)))
      {
        unint64_t v18 = (unint64_t)CFRetain(v34);
      }
      else
      {
        unint64_t v18 = 0;
      }
      uint64_t v29 = 0;
      CFDictionaryRef v36 = 0;
      unint64_t v27 = 0;
      if (pixelBuffer) {
        goto LABEL_46;
      }
    }
LABEL_47:
    pixelBuffera = v36;
    int64x2_t v39 = a7[1];
    int64x2_t v85 = *a7;
    int64x2_t v86 = v39;
    int64x2_t v38 = a7[2];
    goto LABEL_48;
  }
  if (!pixelBuffer)
  {
    unint64_t v27 = 0;
    if (a5) {
      goto LABEL_26;
    }
LABEL_37:
    pixelBuffera = 0;
    int v77 = 1;
    goto LABEL_49;
  }
  unint64_t v27 = (unint64_t)CFRetain(pixelBuffer);
  if (!v18) {
    goto LABEL_37;
  }
LABEL_26:
  int v77 = v24;
  unint64_t v18 = (unint64_t)CFRetain((CFTypeRef)v18);
  pixelBuffera = 0;
LABEL_49:
  int64x2_t v40 = a4[1];
  int64x2_t v92 = *a4;
  uint64_t v74 = a7;
  unint64_t v75 = a4;
  float64x2_t v93 = vcvtq_f64_s64(a4[2]);
  float64x2_t v94 = vcvtq_f64_s64(v40);
  int64x2_t v41 = a7[1];
  float64x2_t v42 = vcvtq_f64_s64(a7[2]);
  int64x2_t v89 = *a7;
  float64x2_t v90 = v42;
  uint64_t v80 = a1[48].i64[1];
  CFTypeRef v82 = a1 + 47;
  CFTypeRef v83 = (CFTypeRef)v18;
  uint64_t v43 = a1[47].i64[0];
  if (v43) {
    uint64_t v44 = a1[47].i64[0];
  }
  else {
    uint64_t v44 = gVTPixelTransferServiceList;
  }
  float64x2_t v91 = vcvtq_f64_s64(v41);
  if (!(v18 | v27) || !v44)
  {
LABEL_81:
    uint64_t v43 = 0;
    CFTypeRef v49 = pixelBuffera;
    CFTypeRef v50 = a1 + 47;
    goto LABEL_82;
  }
  BOOL v45 = v43 != 0;
  uint64_t v78 = *MEMORY[0x1E4F1CF80];
  while (1)
  {
    if (!vtPixelTransferServiceNodeMatchesSourceAndDestinationPixelFormats((uint64_t *)v44, a3, a6)
      || a8 && (*(unsigned char *)(v44 + 32) & 1) == 0)
    {
      goto LABEL_75;
    }
    if (a9 && (*(unsigned char *)(v44 + 32) & 2) == 0) {
      goto LABEL_75;
    }
    if (a11 && (*(unsigned char *)(v44 + 32) & 0x10) == 0) {
      goto LABEL_75;
    }
    if (a12 && (*(unsigned char *)(v44 + 32) & 0x40) == 0) {
      goto LABEL_75;
    }
    if (!a10 && (*(unsigned char *)(v44 + 32) & 8) != 0) {
      goto LABEL_75;
    }
    unsigned int v46 = *(unsigned int (**)(unint64_t, CFTypeRef))(v44 + 40);
    if (v46)
    {
      if (!v46(v27, v83)) {
        goto LABEL_75;
      }
    }
    if (v43) {
      break;
    }
LABEL_73:
    if (!(*(unsigned int (**)(uint64_t, uint64_t, unint64_t, int64x2_t *, CFTypeRef, int64x2_t *, uint64_t *))(v44 + 48))(v78, v80, v27, &v92, v83, &v89, &v84))
    {
      uint64_t v43 = v44;
      int v57 = a1;
      CFTypeRef v50 = a1 + 47;
      goto LABEL_107;
    }
    FigSignalErrorAt();
LABEL_75:
    CFTypeRef v48 = (uint64_t *)(v44 + 72);
    if (v45) {
      CFTypeRef v48 = &gVTPixelTransferServiceList;
    }
    uint64_t v44 = *v48;
    if (*v48)
    {
      if (v44 == v43) {
        uint64_t v44 = *(void *)(v43 + 72);
      }
      BOOL v45 = 0;
      if (v44) {
        continue;
      }
    }
    goto LABEL_81;
  }
  if (v44 != v43)
  {
    CFTypeRef v47 = *(void (**)(uint64_t))(v43 + 64);
    if (v47) {
      v47(a1[47].i64[1]);
    }
    v82->i64[0] = 0;
    a1[47].i64[1] = 0;
    goto LABEL_73;
  }
  int v57 = a1;
  uint64_t v84 = a1[47].i64[1];
  CFTypeRef v50 = a1 + 47;
  v82->i64[0] = 0;
  a1[47].i64[1] = 0;
LABEL_107:
  int v58 = v77;
  if (buffer) {
    int v59 = 0;
  }
  else {
    int v59 = v77;
  }
  CFTypeRef v54 = v83;
  if (v59 != 1) {
    goto LABEL_119;
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffera);
  uint64_t v61 = vtCreateIntermediatePixelBuffer(pixelBuffera, PixelFormatType, &v85, *(_DWORD *)(v43 + 32), &buffer);
  if (v61)
  {
    uint64_t v53 = v61;
    char v52 = 0;
    CFTypeRef v49 = pixelBuffera;
  }
  else if (pixelBuffer)
  {
    int v58 = v77;
    if (a5) {
      goto LABEL_123;
    }
    BOOL v62 = *(unsigned int (**)(unint64_t, CVBufferRef))(v43 + 40);
    if (!v62) {
      goto LABEL_123;
    }
    int v57 = a1;
    if (!v62(v27, buffer)) {
      goto LABEL_123;
    }
LABEL_119:
    uint64_t v64 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t, int64x2_t *, CFTypeRef, int64x2_t *))(v43 + 56);
    if (v64)
    {
      float64x2_t v93 = 0u;
      float64x2_t v94 = 0u;
      int64x2_t v92 = 0u;
      float64x2_t v90 = 0u;
      float64x2_t v91 = 0u;
      int64x2_t v89 = 0u;
      if (v75)
      {
        int64x2_t v65 = v75[1];
        int64x2_t v92 = *v75;
        int64x2_t v66 = v75[2];
        goto LABEL_122;
      }
      if (pixelBuffer)
      {
        v92.i64[0] = CVPixelBufferGetWidth(pixelBuffer);
        int64_t Height = CVPixelBufferGetHeight(pixelBuffer);
        float64x2_t v93 = 0uLL;
        v92.i64[1] = Height;
        v94.f64[0] = (double)v92.i64[0];
        v94.f64[1] = (double)Height;
        uint64_t v64 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t, int64x2_t *, CFTypeRef, int64x2_t *))(v43 + 56);
      }
      else
      {
        int64x2_t v65 = v86;
        int64x2_t v92 = v85;
        int64x2_t v66 = v87;
LABEL_122:
        float64x2_t v93 = vcvtq_f64_s64(v66);
        float64x2_t v94 = vcvtq_f64_s64(v65);
      }
      CFTypeRef v49 = pixelBuffera;
      int64x2_t v68 = v74[1];
      float64x2_t v69 = vcvtq_f64_s64(v74[2]);
      int64x2_t v89 = *v74;
      float64x2_t v90 = v69;
      float64x2_t v91 = vcvtq_f64_s64(v68);
      if (v64(v84, v57[48].i64[1], v27, &v92, v83, &v89))
      {
        FigSignalErrorAt();
        goto LABEL_82;
      }
      if (a15) {
        *a15 = 1;
      }
    }
    v57[47].i64[0] = v43;
    v57[47].i64[1] = v84;
    uint64_t v84 = 0;
    if (v58)
    {
      v57[48].i8[0] = 0;
      CFDictionaryRef v70 = (const void *)v57[14].i64[1];
      CVBufferRef v71 = buffer;
      v57[14].i64[1] = (uint64_t)buffer;
      CFTypeRef v49 = pixelBuffera;
      if (v71) {
        CFRetain(v71);
      }
      if (v70) {
        CFRelease(v70);
      }
      uint64_t v43 = 0;
      uint64_t v53 = 0;
      int64x2_t v72 = v86;
      v57[15] = v85;
      v57[16] = v72;
      v57[17] = v87;
      char v52 = 1;
    }
    else
    {
      int v73 = (const void *)v57[14].i64[1];
      CFTypeRef v49 = pixelBuffera;
      if (v73)
      {
        CFRelease(v73);
        v57[14].i64[1] = 0;
      }
      uint64_t v43 = 0;
      uint64_t v53 = 0;
      char v52 = 1;
      v57[48].i8[0] = 1;
      v57[35].i8[8] = 1;
    }
  }
  else
  {
    unsigned int v63 = *(unsigned int (**)(CVBufferRef, CFTypeRef))(v43 + 40);
    int v58 = v77;
    if (v63 && v63(buffer, v83)) {
      goto LABEL_119;
    }
LABEL_123:
    CFTypeRef v49 = pixelBuffera;
LABEL_82:
    if (v50->i64[0])
    {
      unint64_t v51 = *(void (**)(uint64_t))(v50->i64[0] + 64);
      if (v51) {
        v51(a1[47].i64[1]);
      }
      char v52 = 0;
      uint64_t v53 = 0;
      v50->i64[0] = 0;
      v50->i64[1] = 0;
    }
    else
    {
      char v52 = 0;
      uint64_t v53 = 0;
    }
    CFTypeRef v54 = v83;
  }
  if (v27) {
    CFRelease((CFTypeRef)v27);
  }
  if (v54) {
    CFRelease(v54);
  }
  if (v49) {
    CFRelease(v49);
  }
LABEL_94:
  if (buffer) {
    CFRelease(buffer);
  }
  if (v43) {
    (*(void (**)(uint64_t))(v43 + 64))(v84);
  }
  if (a13) {
    *a13 = v52;
  }
  char v55 = v52 ^ 1;
  if (!a14) {
    char v55 = 1;
  }
  if ((v55 & 1) == 0) {
    *a14 = 1;
  }
  return v53;
}

uint64_t vtCanDynamicSession(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    uint64_t v9 = a9;
  }
  else {
    uint64_t v9 = gVTPixelTransferServiceList;
  }
  if (!v9) {
    return 0;
  }
  for (BOOL i = a9 != 0; ; BOOL i = 0)
  {
    if (vtPixelTransferServiceNodeMatchesSourceAndDestinationPixelFormats((uint64_t *)v9, a2, a4))
    {
      int v17 = *(_DWORD *)(v9 + 32);
      if ((v17 & 1) != 0
        && (!a5 || (v17 & 2) != 0)
        && (!a6 || (v17 & 0x10) != 0)
        && (!a7 || (v17 & 0x40) != 0)
        && (a8 || (v17 & 8) == 0))
      {
        unint64_t v18 = *(unsigned int (**)(uint64_t, uint64_t))(v9 + 40);
        if (!v18 || v18(a1, a3)) {
          break;
        }
      }
    }
    uint64_t v19 = (uint64_t *)(v9 + 72);
    if (i) {
      uint64_t v19 = &gVTPixelTransferServiceList;
    }
    uint64_t v9 = *v19;
    if (!*v19) {
      return 0;
    }
    if (v9 == a9) {
      uint64_t v9 = *(void *)(a9 + 72);
    }
    uint64_t result = 0;
    if (!v9) {
      return result;
    }
  }
  return 1;
}

uint64_t vtPTSIsPixelBufferMetalCompliant(uint64_t a1, CVPixelBufferRef pixelBuffer)
{
  if (!pixelBuffer) {
    return 0;
  }
  uint64_t result = (uint64_t)CVPixelBufferGetIOSurface(pixelBuffer);
  if (!result) {
    return result;
  }
  size_t PlaneCount = CVPixelBufferGetPlaneCount(pixelBuffer);
  if ((vtPTSIsPixelBufferMetalCompliant_didCheck & 1) == 0)
  {
    int RequiredAlignment = VTMetalTransferSessionGetRequiredAlignment(*(void *)(a1 + 1160), &vtPTSIsPixelBufferMetalCompliant_cachedMetalAlignment);
    vtPTSIsPixelBufferMetalCompliant_didCheck = 1;
    vtPTSIsPixelBufferMetalCompliant_alignmentValid = RequiredAlignment == 0;
  }
  CVPixelBufferGetPixelFormatType(pixelBuffer);
  DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (DescriptionWithPixelFormatType)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E4F24EE0]);
    if (Value)
    {
      CFArrayRef v9 = Value;
      CFTypeID v10 = CFGetTypeID(Value);
      if (v10 == CFArrayGetTypeID())
      {
        CFArrayGetValueAtIndex(v9, 0);
        FigCFDictionaryGetInt32IfPresent();
      }
    }
  }
  if (!vtPTSIsPixelBufferMetalCompliant_alignmentValid) {
    return 0;
  }
  if (PlaneCount >= 2)
  {
    size_t v11 = 0;
    while (!(CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v11)
            % vtPTSIsPixelBufferMetalCompliant_cachedMetalAlignment))
    {
      if (PlaneCount == ++v11) {
        return 1;
      }
    }
    return 0;
  }
  return CVPixelBufferGetBytesPerRow(pixelBuffer) % vtPTSIsPixelBufferMetalCompliant_cachedMetalAlignment == 0;
}

uint64_t vtConfigureScalerCommon(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(int, int, int, int, int, int, int, int, uint64_t, int))
{
  int ScalingGroup = getScalingGroup(a2);
  if (getScalingGroup(a1) == ScalingGroup)
  {
    uint64_t v13 = ScalingGroup - 1;
    if (v13 <= 0x1E)
    {
      CVPixelBufferLockFlags v14 = off_1EE4ECB38[v13];
      vtAllocatePlanarBuffersCommon(a1, a3, a5);
      vtAllocatePlanarBuffersCommon(a2, a4, a5 + 128);
      uint64_t result = 0;
      if (!a6) {
        return result;
      }
LABEL_14:
      *a6 = v14;
      return result;
    }
  }
  for (uint64_t i = 0; i != 128; i += 32)
  {
    int v17 = *(void **)(a5 + i);
    if (v17)
    {
      free(v17);
      *(void *)(a5 + i) = 0;
    }
  }
  uint64_t v18 = 0;
  uint64_t v19 = a5 + 128;
  do
  {
    uint64_t v20 = *(void **)(v19 + v18);
    if (v20)
    {
      free(v20);
      *(void *)(v19 + v18) = 0;
    }
    v18 += 32;
  }
  while (v18 != 128);
  CVPixelBufferLockFlags v14 = 0;
  uint64_t result = 4294954391;
  if (a6) {
    goto LABEL_14;
  }
  return result;
}

uint64_t vtCreatePixelBuffer(OSType pixelFormatType, size_t width, size_t height, int a4, CVPixelBufferRef *pixelBufferOut)
{
  if (a4 && !VTAvoidIOSurfaceBackings())
  {
    return FigCreateIOSurfaceBackedCVPixelBuffer(width, height, pixelFormatType, pixelBufferOut);
  }
  else
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    return CVPixelBufferCreate(v9, width, height, pixelFormatType, 0, pixelBufferOut);
  }
}

uint64_t vtBuildMetalSession(__CVBuffer *a1, uint64_t a2, __CVBuffer *a3, uint64_t a4, int a5, const __CFDictionary *a6, void *a7, int a8, __CFDictionary **a9)
{
  CFTypeRef v30 = 0;
  CFTypeRef cf = 0;
  uint64_t v9 = 4294954394;
  if (!a1 || !a3) {
    goto LABEL_34;
  }
  if (!CVPixelBufferGetIOSurface(a1) || !CVPixelBufferGetIOSurface(a3))
  {
    uint64_t v9 = 4294954391;
    goto LABEL_34;
  }
  if (a6) {
    CFDictionaryApplyFunction(a6, (CFDictionaryApplierFunction)sessionPropertyApplier, a7);
  }
  uint64_t PixelBufferDescription = VTMetalTransferSessionCreatePixelBufferDescription(a1, (__CFDictionary **)&cf);
  if (PixelBufferDescription
    || (uint64_t PixelBufferDescription = VTMetalTransferSessionCreatePixelBufferDescription(a3, (__CFDictionary **)&v30),
        PixelBufferDescription))
  {
    uint64_t v9 = PixelBufferDescription;
    goto LABEL_34;
  }
  if (a2)
  {
    CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v20 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    CFDictionaryRef v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    BOOL v23 = CFDictionaryCreateMutable(v19, 0, v20, v21);
    FigCFDictionarySetCFIndex();
    FigCFDictionarySetCFIndex();
    FigCFDictionarySetCFIndex();
    FigCFDictionarySetCFIndex();
    CFDictionarySetValue(v23, @"SourceAmendments", Mutable);
    if (a4)
    {
LABEL_11:
      CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v25 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      CFMutableDictionaryRef v26 = CFDictionaryCreateMutable(v24, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v23) {
        BOOL v23 = CFDictionaryCreateMutable(v24, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      FigCFDictionarySetCFIndex();
      FigCFDictionarySetCFIndex();
      FigCFDictionarySetCFIndex();
      FigCFDictionarySetCFIndex();
      CFArraySetValueAtIndex(v25, 0, v26);
      CFDictionarySetValue(v23, @"DestinationAmendments", v25);
      goto LABEL_17;
    }
  }
  else
  {
    BOOL v23 = 0;
    CFMutableDictionaryRef Mutable = 0;
    if (a4) {
      goto LABEL_11;
    }
  }
  uint64_t v25 = 0;
  CFMutableDictionaryRef v26 = 0;
LABEL_17:
  unint64_t v27 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (a5) {
    CFDictionaryRef v28 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  else {
    CFDictionaryRef v28 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  VTSessionSetProperty(a7, @"WriteBlackPixelsOutsideDestRect", v28);
  if (a8)
  {
    if (!v23) {
      BOOL v23 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    CFDictionarySetValue(v23, @"SetGPUPriorityLow", v27);
  }
  uint64_t v9 = VTMetalTransferSessionConfigureForSourceAndDest(a7, (void *)cf, (void *)v30, v23);
  if (!v9)
  {
    *a9 = v23;
    BOOL v23 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v23) {
    CFRelease(v23);
  }
LABEL_34:
  if (cf) {
    CFRelease(cf);
  }
  if (v30) {
    CFRelease(v30);
  }
  return v9;
}

void vtCreateSessionPropertiesIncludingScaling(uint64_t a1, int a2, __CFDictionary **a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  uint64_t v6 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  v13[0] = @"EnableHardwareAcceleratedTransfer";
  v13[1] = @"EnableHighSpeedTransfer";
  v13[2] = @"DisableDither";
  v13[3] = @"EnableHistogram";
  v13[4] = @"UseOptimalMSRCoefficients";
  v13[5] = @"HistogramRectangle";
  v13[6] = @"EnableGPUAcceleratedTransfer";
  v13[7] = @"SetGPUPriorityLow";
  if (a2)
  {
    *(void *)&long long v14 = @"DestinationCleanAperture";
    *((void *)&v14 + 1) = @"DestinationPixelAspectRatio";
    *(void *)&long long v15 = @"ScalingMode";
    *((void *)&v15 + 1) = @"DownsamplingMode";
    *(void *)&long long v16 = @"SourceCropRectangle";
    *((void *)&v16 + 1) = @"DestinationRectangle";
    unsigned int v8 = 14;
  }
  else
  {
    unsigned int v8 = 8;
  }
  unint64_t v9 = 0;
  v13[v8 | 1] = @"AllowPixelTransferChain";
  v13[v8] = @"Label";
  v13[v8 + 2] = @"AllowPixelTransferGraph";
  uint64_t v10 = 8 * v8 + 24;
  do
  {
    value = 0;
    size_t v11 = (const void *)v13[v9 / 8];
    _VTPixelTransferSessionCopyProperty(a1, v11, v6, (CFDictionaryRef *)&value);
    if (value)
    {
      CFDictionarySetValue(Mutable, v11, value);
      CFRelease(value);
    }
    v9 += 8;
  }
  while (v10 != v9);
  *a3 = Mutable;
}

uint64_t vtPixelTransferSession_BuildColorCorrector(__CVBuffer *a1, OSType a2, CGColorSpace *a3, const __CFDictionary *a4, const __CFDictionary *a5, char a6, __CVBuffer *a7, OSType a8, uint64_t a9, CFDictionaryRef a10, const __CFDictionary *a11, char a12, char a13, void *a14, unsigned __int8 a15, const __CFDictionary *a16, __CFDictionary **a17, char *a18, const __CFDictionary *a19, __int16 a20,int *a21,void *a22,void *a23,void (**a24)(uint64_t),CFTypeRef *a25,CFTypeRef *a26,CVPixelBufferRef *a27,CVPixelBufferRef *a28,VTPixelTransferSessionRef *a29,VTPixelTransferSessionRef *a30)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  uint64_t v34 = CVPixelBufferGetPixelFormatType(a7);
  CVPixelBufferRef v111 = 0;
  CVPixelBufferRef v112 = 0;
  VTPixelTransferSessionRef v109 = 0;
  VTPixelTransferSessionRef pixelTransferSessionOut = 0;
  OSType v108 = 0;
  OSType v107 = 0;
  uint64_t v105 = 0;
  CFTypeRef v106 = 0;
  OSType v103 = 0;
  uint64_t v104 = 0;
  CFTypeRef cf = 0;
  *a27 = 0;
  *a28 = 0;
  *a29 = 0;
  *a30 = 0;
  if (!a21 || *a21 == 4)
  {
    uint64_t v35 = 0;
    CFMutableDictionaryRef Mutable = 0;
    int64x2_t v37 = 0;
    goto LABEL_117;
  }
  uint64_t v38 = v34;
  int64x2_t v39 = 0;
  uint64_t v35 = 0;
  CFDictionaryRef v40 = a11;
  if (PixelFormatType == a2 || v34 == a8) {
    goto LABEL_16;
  }
  if (a13 && VTMetalTransferSessionCanTransfer(a2, a8, 0))
  {
    long long v113 = 0;
    int64x2_t v41 = a1;
    OSType v42 = CVPixelBufferGetPixelFormatType(a1);
    OSType v43 = CVPixelBufferGetPixelFormatType(a7);
    CVPixelBufferRef pixelBufferOut = 0;
    long long v115 = 0;
    if (v42 == a2)
    {
      uint64_t v44 = 0;
      if (!CVPixelBufferGetIOSurface(a1)) {
        goto LABEL_144;
      }
    }
    else
    {
      size_t Width = (int)CVPixelBufferGetWidth(a7);
      int Height = CVPixelBufferGetHeight(a7);
      uint64_t v44 = 1;
      int v49 = vtCreatePixelBuffer(a2, Width, Height, 1, &pixelBufferOut);
      int64x2_t v41 = pixelBufferOut;
      if (v49)
      {
        CFDictionaryRef v56 = 0;
        int v55 = 0;
        if (!pixelBufferOut) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
    if (v43 == a8)
    {
      CFTypeRef v50 = a7;
      if (!CVPixelBufferGetIOSurface(a7)) {
        goto LABEL_144;
      }
    }
    else
    {
      size_t v51 = (int)CVPixelBufferGetWidth(a7);
      int v52 = CVPixelBufferGetHeight(a7);
      if (vtCreatePixelBuffer(a8, v51, v52, 1, (CVPixelBufferRef *)((unint64_t)&pixelBufferOut | (8 * v44))))
      {
LABEL_144:
        CFDictionaryRef v56 = 0;
        int v55 = 0;
        goto LABEL_33;
      }
      CFTypeRef v50 = *(__CVBuffer **)((unint64_t)&pixelBufferOut | (8 * v44));
    }
    int v53 = vtBuildMetalSession(v41, 0, v50, 0, 1, a16, a14, a15, &v113);
    CFTypeRef v54 = v113;
    if (v53 || VTMetalTransferSessionTransferImageSync((const __CFArray *)a14, v41, v50, v113))
    {
      CFDictionaryRef v56 = 0;
      int v55 = 0;
      if (!v54)
      {
LABEL_33:
        int64x2_t v41 = pixelBufferOut;
        if (!pixelBufferOut)
        {
LABEL_35:
          if (v115) {
            CFRelease(v115);
          }
          if (v55)
          {
            char v46 = 1;
            int64x2_t v39 = v56;
            CFDictionaryRef v40 = a11;
            goto LABEL_39;
          }
          int64x2_t v39 = v56;
          CFDictionaryRef v40 = a11;
          goto LABEL_12;
        }
LABEL_34:
        CFRelease(v41);
        goto LABEL_35;
      }
    }
    else
    {
      CVPixelBufferRef v111 = (CVPixelBufferRef)v115;
      CVPixelBufferRef v112 = pixelBufferOut;
      CVPixelBufferRef pixelBufferOut = 0;
      long long v115 = 0;
      int v55 = 1;
      CFDictionaryRef v56 = v54;
      if (!v54) {
        goto LABEL_33;
      }
    }
    CFRelease(v54);
    goto LABEL_33;
  }
  int64x2_t v39 = 0;
LABEL_12:
  uint64_t v45 = VTPixelBlitterColorHandlingOptimized_setup(a2, a5, a8, v40, a19, a20, HIBYTE(a20), &v104, &v105, (uint64_t)&cf, (void (__cdecl **)(void *))&v103);
  if (v45)
  {
    uint64_t v35 = v45;
    if (v103) {
      v103(v104);
    }
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    CFTypeRef cf = 0;
    OSType v103 = 0;
  }
  else
  {
    if (v105)
    {
      char v46 = 0;
LABEL_39:
      uint64_t v35 = 0;
      OSType v108 = a2;
      OSType v107 = a8;
      goto LABEL_40;
    }
    uint64_t v35 = 0;
  }
LABEL_16:
  vtPixelTransferSession_chooseColorCorrectionFormat(PixelFormatType, &v108, a6, 1);
  vtPixelTransferSession_chooseColorCorrectionFormat(v38, &v107, a12, 0);
  if (v112)
  {
    CFRelease(v112);
    CVPixelBufferRef v112 = 0;
  }
  if (v111)
  {
    CFRelease(v111);
    char v46 = 0;
    CVPixelBufferRef v111 = 0;
  }
  else
  {
    char v46 = 0;
  }
LABEL_40:
  OSType v57 = v107;
  if (v38 == v107)
  {
    if (v112)
    {
      if (CVPixelBufferGetPixelFormatType(v112) == v38) {
        goto LABEL_85;
      }
      if (v112)
      {
        CFRelease(v112);
        CVPixelBufferRef v112 = 0;
      }
    }
    int v58 = v39;
    size_t v59 = (int)CVPixelBufferGetWidth(a7);
    size_t v60 = (int)CVPixelBufferGetHeight(a7);
    BOOL v61 = CVPixelBufferGetIOSurface(a7) != 0;
    uint64_t v35 = vtCreatePixelBuffer(v38, v59, v60, v61, &v112);
    if (v35)
    {
      int64x2_t v37 = 0;
      CFMutableDictionaryRef Mutable = 0;
      int64x2_t v39 = v58;
      goto LABEL_111;
    }
    int64x2_t v39 = v58;
LABEL_85:
    CFMutableDictionaryRef Mutable = 0;
    int v71 = 2;
    if (a3)
    {
      uint64_t v84 = (CGColorSpace *)a9;
      if (a9)
      {
        if (!FigCFEqual())
        {
          if (v105) {
            char v85 = 1;
          }
          else {
            char v85 = v46;
          }
          if ((v85 & 1) == 0)
          {
            int v86 = v38;
            int64x2_t v87 = a3;
            int v88 = v38;
LABEL_105:
            uint64_t v35 = VTCreateVImageConverter(v86, v87, v88, v84, (vImageConverterRef *)&v106);
            goto LABEL_106;
          }
          goto LABEL_106;
        }
        goto LABEL_98;
      }
    }
LABEL_108:
    int64x2_t v37 = 0;
    goto LABEL_109;
  }
  OSType v62 = v108;
  if (PixelFormatType != v108)
  {
    if (a3 && a9 && !FigCFEqual() || v62 != v57)
    {
      if (v105) {
        char v67 = 1;
      }
      else {
        char v67 = v46;
      }
      if ((v67 & 1) == 0) {
        uint64_t v35 = VTCreateVImageConverter(v62, a3, v57, (CGColorSpace *)a9, (vImageConverterRef *)&v106);
      }
      if (v35) {
        goto LABEL_83;
      }
    }
    BOOL v68 = ((unint64_t)a3 | a9) == 0;
    BOOL v69 = v62 == v57;
    BOOL v70 = v68 && v69;
    if (v68 && v69) {
      int v71 = 5;
    }
    else {
      int v71 = 3;
    }
    if (v112)
    {
      if (CVPixelBufferGetPixelFormatType(v112) == v62) {
        goto LABEL_72;
      }
      if (v112)
      {
        CFRelease(v112);
        CVPixelBufferRef v112 = 0;
      }
    }
    size_t v72 = (int)CVPixelBufferGetWidth(a7);
    int v73 = v39;
    size_t v74 = (int)CVPixelBufferGetHeight(a7);
    BOOL v75 = CVPixelBufferGetIOSurface(a1) != 0;
    size_t v76 = v74;
    int64x2_t v39 = v73;
    uint64_t v77 = vtCreatePixelBuffer(v62, v72, v76, v75, &v112);
    if (v77) {
      goto LABEL_82;
    }
LABEL_72:
    if (!v70)
    {
      if (!v111) {
        goto LABEL_77;
      }
      if (CVPixelBufferGetPixelFormatType(v111) != v57)
      {
        if (v111)
        {
          CFRelease(v111);
          CVPixelBufferRef v111 = 0;
        }
LABEL_77:
        size_t v78 = (int)CVPixelBufferGetWidth(a7);
        unsigned int v79 = v39;
        size_t v80 = (int)CVPixelBufferGetHeight(a7);
        BOOL v81 = CVPixelBufferGetIOSurface(a7) != 0;
        size_t v82 = v80;
        int64x2_t v39 = v79;
        uint64_t v77 = vtCreatePixelBuffer(v57, v78, v82, v81, &v111);
        if (!v77) {
          goto LABEL_78;
        }
LABEL_82:
        uint64_t v35 = v77;
LABEL_83:
        int64x2_t v37 = 0;
        CFMutableDictionaryRef Mutable = 0;
        goto LABEL_111;
      }
    }
LABEL_78:
    CFAllocatorRef v83 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v77 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &pixelTransferSessionOut);
    if (!v77)
    {
      uint64_t v77 = VTSessionSetProperties(pixelTransferSessionOut, a4);
      if (!v77)
      {
        uint64_t v77 = VTPixelTransferSessionCreate(v83, &v109);
        if (!v77)
        {
          uint64_t v77 = VTSessionSetProperties(v109, a10);
          if (!v77)
          {
            CFDictionaryRef v91 = v40;
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v83, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            uint64_t v92 = VTConvertToSessionPropertiesFromCVProperties(a5, Mutable);
            if (v92 || (uint64_t v92 = VTSessionSetProperties(pixelTransferSessionOut, Mutable), v92))
            {
              uint64_t v35 = v92;
              int64x2_t v37 = 0;
              goto LABEL_111;
            }
            if (_VTPixelTransferSessionTransferImage(pixelTransferSessionOut, a1, v112))
            {
              int64x2_t v37 = 0;
            }
            else
            {
              int64x2_t v37 = CFDictionaryCreateMutable(v83, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              uint64_t v93 = VTConvertToSessionPropertiesFromCVProperties(v91, v37);
              if (v93 || (uint64_t v93 = VTSessionSetProperties(v109, v37), v93))
              {
                uint64_t v35 = v93;
                goto LABEL_111;
              }
              if (v70)
              {
                VTPixelTransferSessionRef v94 = v109;
                CVPixelBufferRef v95 = v112;
              }
              else
              {
                CFDictionaryRef v96 = v112;
                if (!v112) {
                  CFDictionaryRef v96 = a1;
                }
                CVBufferPropagateAttachments(v96, v111);
                CVBufferRemoveAttachment(v111, (CFStringRef)*MEMORY[0x1E4F24A00]);
                CVBufferSetAttachments(v111, v91, kCVAttachmentMode_ShouldPropagate);
                VTPixelTransferSessionRef v94 = v109;
                CVPixelBufferRef v95 = v111;
              }
              if (!_VTPixelTransferSessionTransferImage(v94, v95, a7))
              {
                uint64_t v35 = 0;
                goto LABEL_109;
              }
            }
            uint64_t v35 = 4294955084;
            goto LABEL_111;
          }
        }
      }
    }
    goto LABEL_82;
  }
  if (v112)
  {
    if (CVPixelBufferGetPixelFormatType(v112) == PixelFormatType) {
      goto LABEL_95;
    }
    if (v112)
    {
      CFRelease(v112);
      CVPixelBufferRef v112 = 0;
    }
  }
  unsigned int v63 = v39;
  size_t v64 = (int)CVPixelBufferGetWidth(a1);
  size_t v65 = (int)CVPixelBufferGetHeight(a1);
  BOOL v66 = CVPixelBufferGetIOSurface(a1) != 0;
  uint64_t v35 = vtCreatePixelBuffer(PixelFormatType, v64, v65, v66, &v112);
  if (v35)
  {
    int64x2_t v37 = 0;
    CFMutableDictionaryRef Mutable = 0;
    int64x2_t v39 = v63;
    goto LABEL_111;
  }
  int64x2_t v39 = v63;
LABEL_95:
  CFMutableDictionaryRef Mutable = 0;
  int v71 = 1;
  if (!a3) {
    goto LABEL_108;
  }
  uint64_t v84 = (CGColorSpace *)a9;
  if (!a9) {
    goto LABEL_108;
  }
  if (!FigCFEqual())
  {
    if (v105) {
      char v89 = 1;
    }
    else {
      char v89 = v46;
    }
    if ((v89 & 1) == 0)
    {
      int v86 = PixelFormatType;
      int64x2_t v87 = a3;
      int v88 = PixelFormatType;
      goto LABEL_105;
    }
LABEL_106:
    CFMutableDictionaryRef Mutable = 0;
    if (v35)
    {
      int64x2_t v37 = 0;
      goto LABEL_111;
    }
    goto LABEL_108;
  }
LABEL_98:
  CFMutableDictionaryRef Mutable = 0;
  int64x2_t v37 = 0;
LABEL_109:
  *a27 = v112;
  *a28 = v111;
  CVPixelBufferRef v111 = 0;
  CVPixelBufferRef v112 = 0;
  *a29 = pixelTransferSessionOut;
  *a30 = v109;
  VTPixelTransferSessionRef v109 = 0;
  VTPixelTransferSessionRef pixelTransferSessionOut = 0;
  *a18 = v46;
  *a17 = v39;
  *a22 = v105;
  *a23 = v104;
  *a24 = v103;
  *a25 = cf;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  CFTypeRef cf = 0;
  OSType v103 = 0;
  *a26 = v106;
  CFTypeRef v106 = 0;
  *a21 = v71;
  if (!v35) {
    goto LABEL_117;
  }
  int64x2_t v39 = 0;
LABEL_111:
  if (pixelTransferSessionOut) {
    VTPixelTransferSessionInvalidate(pixelTransferSessionOut);
  }
  if (v109) {
    VTPixelTransferSessionInvalidate(v109);
  }
  if (v39) {
    CFRelease(v39);
  }
LABEL_117:
  if (v103) {
    v103(v104);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v112) {
    CFRelease(v112);
  }
  if (v111) {
    CFRelease(v111);
  }
  if (pixelTransferSessionOut) {
    CFRelease(pixelTransferSessionOut);
  }
  if (v109) {
    CFRelease(v109);
  }
  if (v106) {
    CFRelease(v106);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v37) {
    CFRelease(v37);
  }
  return v35;
}

uint64_t vtCreateIntermediatePixelBuffer(__CVBuffer *a1, OSType pixelFormatType, void *a3, char a4, CVPixelBufferRef *pixelBufferOut)
{
  if (a1)
  {
    if (pixelBufferOut)
    {
      vtCreatePixelBuffer(pixelFormatType, (int)*a3, (int)a3[1], a4 & 4, pixelBufferOut);
      if (*pixelBufferOut) {
        CVBufferPropagateAttachments(a1, *pixelBufferOut);
      }
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

size_t vt_Scale_16_SeparatePlanes(__CVBuffer *a1, int8x16_t *a2, __CVBuffer *a3, int8x16_t *a4, vImage_Buffer *a5, int a6, int a7, int a8, uint64_t a9, vImage_Flags a10)
{
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  vt_SetupOrCleanupPlanarBuffers(a1, a2, (uint64_t)a5, 1);
  CFAllocatorRef v22 = a5 + 4;
  vt_SetupOrCleanupPlanarBuffers(a3, a4, (uint64_t)&a5[4], 1);
  BOOL v23 = a2;
  vt_CopyToOrFromPlanarBuffers(a1, a2, a5, 1, a10);
  uint64_t v16 = 0;
  long long v17 = a5;
  while (1)
  {
    size_t v18 = vtScale(v17, &a5[(v16 & 0xFFFFFFFB) + 4].data, &a5[8].data, a10 | 8, MEMORY[0x1E4F17128], a6);
    if (v18) {
      break;
    }
    ++v16;
    ++v17;
    if (v16 == 3)
    {
      scaleOrSetAlpha8(a1, v23, a3, a4, (uint64_t)a5, a6, a7, a8, a10);
      vt_CopyToOrFromPlanarBuffers(a3, a4, v22, 0, a10);
      break;
    }
  }
  vt_SetupOrCleanupPlanarBuffers(a1, v23, (uint64_t)a5, 0);
  vt_SetupOrCleanupPlanarBuffers(a3, a4, (uint64_t)v22, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a3, 0);
  return v18;
}

uint64_t sessionPropertyApplier(CFStringRef propertyKey, CFTypeRef propertyValue, VTSessionRef session)
{
  return VTSessionSetProperty(session, propertyKey, propertyValue);
}

uint64_t vtPixelTransferSession_chooseColorCorrectionFormat(uint64_t result, _DWORD *a2, char a3, int a4)
{
  OSType v7 = result;
  uint64_t v8 = 0;
  *a2 = 0;
  while (*(_DWORD *)&aAfgrahgrr46lar[v8] != result)
  {
    v8 += 4;
    if (v8 == 20) {
      goto LABEL_6;
    }
  }
  *a2 = result;
  if (result) {
    return result;
  }
LABEL_6:
  uint64_t v9 = 0;
  while (1)
  {
    OSType v10 = *(_DWORD *)&aAfgrahgrr46lar[v9];
    if (a4)
    {
      OSType v11 = v7;
    }
    else
    {
      OSType v11 = *(_DWORD *)&aAfgrahgrr46lar[v9];
      OSType v10 = v7;
    }
    uint64_t result = VTPixelTransferSessionCanTransfer(v11, v10, a3);
    if (result) {
      break;
    }
    v9 += 4;
    if (v9 == 20) {
      return result;
    }
  }
  *a2 = *(_DWORD *)&aAfgrahgrr46lar[v9];
  return result;
}

void vtCombineDictionariesApplier(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t vtPixelTransferAppendSimpleSoftwareNodeCallback(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v16 = 0u;
  long long v17 = 0u;
  CFTypeRef cf = 0;
  uint64_t CurrentDimensions = VTPixelTransferGraphGetCurrentDimensions(a1, (uint64_t)a2, a3, a6, 0, (uint64_t)&v16);
  if (!CurrentDimensions)
  {
    uint64_t CurrentDimensions = VTPixelTransferChainCreatePixelBufferPoolAttributes(*a2, (unint64_t)*(double *)&v17, (unint64_t)*((double *)&v17 + 1), (CFMutableDictionaryRef *)&cf);
    if (!CurrentDimensions)
    {
      if (*(void *)(a3 + 16))
      {
        OSType v10 = malloc_type_malloc(0x10uLL, 0x1000040A65DF9BBuLL);
        *OSType v10 = *(unsigned char *)(a6 + 170) == 0;
        v10[1] = *(unsigned char *)(a6 + 171) == 0;
        v10[2] = *(unsigned char *)(a6 + 172);
        uint64_t v11 = *(void *)(a3 + 16);
        vImage_Error v12 = VTSimpleBlitterCleanup;
      }
      else
      {
        uint64_t v11 = 0;
        OSType v10 = 0;
        vImage_Error v12 = 0;
      }
      uint64_t CurrentDimensions = VTPixelTransferChainAppendSoftwareNode(*(void *)a6, (uint64_t)cf, *(void *)(a3 + 8), v11, (uint64_t)v10, (void (*)(uint64_t))v12);
    }
  }
  uint64_t v13 = CurrentDimensions;
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t vt_Copy_2vuy_420v(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_2vuy_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_2vuy_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_yuvs(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = *a6;
    uint64_t v11 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = 0;
        do
        {
          *(_DWORD *)(v10 + 4 * v12) = __rev16(*(_DWORD *)(v11 + 4 * v12));
          ++v12;
        }
        while (v9 != v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_420f(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_2vuy_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_2vuy_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_2vuy_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_2vuy_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_2vuy_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_2vuy_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_2vuy_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_2vuy_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_2vuy_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_2vuy_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_2vuy_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_2vuy_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_2vuy_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_2vuy_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_2vuy_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_2vuy_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_2vuy_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_2vuy_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_2vuy_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_yuvs_2vuy(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = *a6;
    uint64_t v11 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = 0;
        do
        {
          *(_DWORD *)(v10 + 4 * v12) = __rev16(*(_DWORD *)(v11 + 4 * v12));
          ++v12;
        }
        while (v9 != v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_yuvs_y420(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_yuvs_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_yuvs_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_yuvs_420v(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_yuvs_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_yuvs_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_yuvs_420f(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_yuvs_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_yuvs_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_yuvf_420v(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_yuvf_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_yuvf_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422v_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422v_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422v_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422v_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422v_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422v_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422v_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422v_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422v_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422v_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422v_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422v_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422v_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422v_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422v_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422v_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422v_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422v_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v2a8_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v2a8_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v2a8_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422v_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422v_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422v_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422v_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422v_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422v_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422v_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422v_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422v_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422v_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422v_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422v_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422v_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422v_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422v_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422f_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422f_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422f_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422f_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422f_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422f_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422f_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422f_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422f_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422f_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422f_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422f_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422f_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422f_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422f_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422f_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422f_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422f_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422f_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422f_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422f_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422f_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422f_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422f_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422f_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422f_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422f_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422f_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422f_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422f_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_422f_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_422f_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_422f_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v4a8_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v4a8_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v4a8_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v4a8_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v4a8_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v4a8_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v4a8_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v4a8_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v4a8_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v4a8_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v4a8_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v4a8_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v4a8_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v4a8_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v4a8_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444v_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444v_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444v_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_444f_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_444f_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_444f_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y408_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y408_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y408_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_y416_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_y416_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_y416_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v216_420v(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v216_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v216_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v216_420f(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v216_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v216_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v216_x420(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v216_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v216_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v216_xf20(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v216_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v216_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v216_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v216_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v216_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v216_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v216_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v216_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v216_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v216_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v216_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v216_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v216_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v216_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v216_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v216_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v216_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v216_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v216_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v216_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v216_f420(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v216_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v216_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v210_420v(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v210_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v210_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v210_420f(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v210_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v210_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v210_x420(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v210_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v210_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_v210_xf20(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_v210_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_v210_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x444_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x444_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x444_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_s4as_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_s4as_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_s4as_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_s4as_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_s4as_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_s4as_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_s4as_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_s4as_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_s4as_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_s4as_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_s4as_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_s4as_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_s4as_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_s4as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_s4as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf44_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv22_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv22_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv22_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv22_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv22_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv22_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_s2as_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_s2as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_s2as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv22_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv22_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv22_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv22_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sv22_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sv22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sv22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf22_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf22_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf22_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf22_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf22_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf22_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf22_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf22_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf22_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf22_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_sf22_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_sf22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_sf22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_t4as_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_t4as_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_t4as_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_t4as_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_t4as_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_t4as_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_t4as_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_t4as_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_t4as_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_t4as_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_t4as_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_t4as_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_t4as_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_t4as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_t4as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv44_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8, double a9, double a10, double a11, int16x4_t a12, int16x4_t a13)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_v216(a9, a10, a11, a12, a13, a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8, double a9, double a10, double a11, int16x4_t a12, int16x4_t a13)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_2vuy(a9, a10, a11, a12, a13, a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf44_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv22_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv22_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv22_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv22_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv22_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv22_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_t2as_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_t2as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_t2as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv22_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv22_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv22_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv22_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tv22_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tv22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tv22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf22_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf22_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf22_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf22_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf22_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf22_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf22_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf22_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf22_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf22_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_tf22_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_tf22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_tf22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x4as_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x4as_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x4as_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x4as_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x4as_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x4as_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x4as_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x4as_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x4as_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x4as_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x4as_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x4as_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x4as_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x4as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x4as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x422_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x422_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x422_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x422_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x422_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x422_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x422_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x422_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x422_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x422_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x422_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x422_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x422_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x422_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x422_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x422_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x422_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x422_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x2as_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x2as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x2as_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x422_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x422_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x422_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x422_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x422_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x422_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x422_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x422_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x422_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x422_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x422_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x422_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_x422_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_x422_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_x422_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8, double a9, double a10, double a11, int16x4_t a12, int16x4_t a13)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_v216(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_v216(a9, a10, a11, a12, a13, a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8, double a9, double a10, double a11, int16x4_t a12, int16x4_t a13)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_2vuy(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_2vuy(a9, a10, a11, a12, a13, a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_s2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_sv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_sf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_t2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_tv22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_tf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_x2as(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_x422(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_xf22(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_v2a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_422v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_422f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf44_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf44_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf22_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf22_sv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf22_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf22_sf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf22_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf22_tv20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf22_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf22_tf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf22_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf22_x420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf22_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf22_xf20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf22_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf22_v0a8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf22_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf22_420v(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf22_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf22_420f(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf22_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf22_y420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_Copy_xf22_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  if (a1 && *(unsigned char *)(a1 + 2)) {
    vt_CopyAvg_xf22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    vt_CopyDec_xf22_f420(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t vt_VImage_Setup_L008_L016(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, vImage_Error (**a9)(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8), uint64_t a10, void (**a11)(void **a1))
{
  long long v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *long long v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_L008_L016;
  *a11 = vt_VImage_Cleanup_L008_L016;
  *a8 = v14;
  return 0;
}

uint64_t vt_VImage_Setup_L016_L008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, vImage_Error (**a9)(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8), uint64_t a10, void (**a11)(void **a1))
{
  long long v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *long long v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_L016_L008;
  *a11 = vt_VImage_Cleanup_L016_L008;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Copy_L008_L016(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[3];
  vImage_Flags v9 = *(_DWORD *)(a1 + 296);
  uint64_t v10 = *a3;
  size_t v11 = *a4;
  src.width = a2[2];
  src.rowBytes = v11;
  uint64_t v12 = *a7;
  size_t v13 = *a8;
  v15.width = src.width;
  v15.rowBytes = v13;
  src.data = (void *)(v10 + a2[4] + a2[5] * v11);
  src.height = v8;
  v15.data = (void *)(v12 + 2 * *(void *)(a6 + 32) + *(void *)(a6 + 40) * v13);
  v15.height = v8;
  return vImageConvert_Planar8To16U(&src, &v15, v9);
}

void vt_VImage_Cleanup_L008_L016(void **a1)
{
  free(a1[32]);

  free(a1);
}

vImage_Error vt_VImage_Copy_L016_L008(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8)
{
  vImagePixelCount v8 = a2[3];
  vImage_Flags v9 = *(_DWORD *)(a1 + 296);
  uint64_t v10 = *a3;
  size_t v11 = *a4;
  src.width = a2[2];
  src.rowBytes = v11;
  uint64_t v12 = *a7;
  size_t v13 = *a8;
  v15.width = src.width;
  v15.rowBytes = v13;
  src.data = (void *)(v10 + 2 * a2[4] + a2[5] * v11);
  src.height = v8;
  v15.data = (void *)(v12 + *(void *)(a6 + 32) + *(void *)(a6 + 40) * v13);
  v15.height = v8;
  return vImageConvert_16UToPlanar8(&src, &v15, v9);
}

void vt_VImage_Cleanup_L016_L008(void **a1)
{
  free(a1[32]);

  free(a1);
}

uint64_t DepthWrapperDecoder_CreateInstance()
{
  VTVideoDecoderGetClassID();
  uint64_t v0 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v0;
}

uint64_t DepthWrapperDecoder_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    *(unsigned char *)uint64_t DerivedStorage = 1;
    VTDecompressionSessionInvalidate(*(VTDecompressionSessionRef *)(DerivedStorage + 40));
  }
  return 0;
}

void DepthWrapperDecoder_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = 0;
  v1 = (const void *)DerivedStorage[2];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[2] = 0;
  }
  size_t v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  size_t v3 = (const void *)DerivedStorage[5];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[5] = 0;
  }
  v4 = (const void *)DerivedStorage[3];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[3] = 0;
  }
  uint64_t v5 = DerivedStorage[6];
  if (v5)
  {
    dispatch_release(v5);
    DerivedStorage[6] = 0;
  }
  uint64_t v6 = (void *)DerivedStorage[9];
  if (v6)
  {
    DerivedStorage[9] = 0;
    free(v6);
  }
}

__CFString *DepthWrapperDecoder_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<DepthWrapperDecoder %p>", a1);
  return Mutable;
}

uint64_t DepthWrapperDecoder_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"SublayerDecoderSpecification"))
  {
    vImagePixelCount v8 = *(const void **)(DerivedStorage + 24);
    if (v8) {
      CFTypeRef v9 = CFRetain(v8);
    }
    else {
      CFTypeRef v9 = 0;
    }
    uint64_t result = 0;
    *a4 = v9;
  }
  else
  {
    uint64_t v10 = *(const void **)(DerivedStorage + 40);
    if (v10)
    {
      return VTSessionCopyProperty(v10, a2, a3, a4);
    }
    else
    {
      return 4294954393;
    }
  }
  return result;
}

uint64_t DepthWrapperDecoder_SetProperty(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"SublayerDecoderSpecification"))
  {
    if (a3 && (CFTypeID v6 = CFGetTypeID(a3), v6 == CFDictionaryGetTypeID()))
    {
      uint64_t v7 = *(const void **)(DerivedStorage + 24);
      *(void *)(DerivedStorage + 24) = a3;
      CFRetain(a3);
      if (v7) {
        CFRelease(v7);
      }
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    CFTypeRef v9 = *(const void **)(DerivedStorage + 40);
    if (v9)
    {
      return VTSessionSetProperty(v9, a2, a3);
    }
    else
    {
      return 4294954393;
    }
  }
}

uint64_t DepthWrapperDecoder_StartSession(uint64_t a1, uint64_t a2, const void *a3)
{
  buffer[2] = *MEMORY[0x1E4F143B8];
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = DerivedStorage;
  OSType v57 = 0;
  if (*(_DWORD *)(DerivedStorage + 4) == 1684369512) {
    int v8 = 1751410032;
  }
  else {
    int v8 = 1751411059;
  }
  int v56 = v8;
  CFTypeRef v9 = *(const void **)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 8) = a2;
  *(void *)(DerivedStorage + 16) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v9) {
    CFRelease(v9);
  }
  unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(v7 + 16));
  *(void *)((char *)buffer + 5) = 0;
  buffer[0] = 0;
  size_t v11 = (const void *)*MEMORY[0x1E4F1EE20];
  CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(*(CMFormatDescriptionRef *)(v7 + 16), (CFStringRef)*MEMORY[0x1E4F1EE20]);
  if (Extension)
  {
    CFDictionaryRef v13 = Extension;
    CFTypeID v14 = CFGetTypeID(Extension);
    if (v14 == CFDictionaryGetTypeID())
    {
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v13, @"disc");
      if (Value)
      {
        CFDataRef v16 = Value;
        CFTypeID v17 = CFGetTypeID(Value);
        if (v17 == CFDataGetTypeID() && CFDataGetLength(v16) > 12)
        {
          v62.location = 0;
          v62.length = 13;
          CFDataGetBytes(v16, v62, (UInt8 *)buffer);
          int8x8_t v18 = vrev32_s8(*(int8x8_t *)((char *)buffer + 5));
          v19.i64[0] = v18.i32[0];
          v19.i64[1] = v18.i32[1];
          float32x2_t v20 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_s64(v19), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL)));
          if (v20.f32[0] < 0.0 || v20.f32[1] <= v20.f32[0]) {
            return FigSignalErrorAt();
          }
          *(float32x2_t *)(v7 + 60) = v20;
          uint64_t v21 = *(void *)(v7 + 72);
          float v22 = (float)(v20.f32[1] - v20.f32[0]) + 1.0;
          float v55 = v20.f32[0];
          float v23 = powf(v22, 0.00097752);
          float v24 = powf(v22, -0.00097752);
          for (uint64_t i = 0; i != 2048; i += 2)
          {
            float v24 = v23 * v24;
            _S2 = (float)(v24 + -1.0) + v55;
            __asm { FCVT            H2, S2 }
            *(_WORD *)(v21 + i) = LOWORD(_S2);
          }
          uint64_t v31 = depthdecoder_createPixelBufferAttributesDictionary(Dimensions, HIDWORD(Dimensions), (uint64_t)&v56, &v57);
          CFDictionaryRef v32 = v57;
          if (v31)
          {
            uint64_t v45 = v31;
            goto LABEL_27;
          }
          VTDecoderSessionSetPixelBufferAttributes(*(uint64_t **)(v7 + 8), v57);
          vImagePixelCount v33 = *(const opaqueCMFormatDescription **)(v7 + 16);
          CMVideoDimensions v34 = CMVideoFormatDescriptionGetDimensions(v33);
          CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(v33);
          CFDictionaryRef v36 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
          if (Extensions
            && (CFDictionaryRef v37 = Extensions, (v38 = (const __CFDictionary *)CFDictionaryGetValue(Extensions, v11)) != 0)
            && (CFDictionaryRef v39 = v38, v40 = *v36, (v41 = CFDictionaryCreateMutableCopy(*v36, 0, v37)) != 0))
          {
            OSType v42 = v41;
            uint64_t MutableCopy = CFDictionaryCreateMutableCopy(v40, 0, v39);
            if (MutableCopy)
            {
              uint64_t v44 = MutableCopy;
              CFDictionaryRemoveValue(MutableCopy, @"disc");
              CFDictionarySetValue(v42, v11, v44);
              CFDictionaryRemoveValue(v42, (const void *)*MEMORY[0x1E4F1EE58]);
              CFDictionaryRemoveValue(v42, (const void *)*MEMORY[0x1E4F1EE50]);
              CFDictionaryRef v36 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
              uint64_t v45 = CMVideoFormatDescriptionCreate(v40, 0x68766331u, v34.width, v34.height, v42, (CMVideoFormatDescriptionRef *)(v7 + 32));
              CFRelease(v42);
              char v46 = v44;
            }
            else
            {
              uint64_t v45 = FigSignalErrorAt();
              char v46 = v42;
            }
            CFRelease(v46);
            if (v45) {
              goto LABEL_27;
            }
          }
          else
          {
            uint64_t v45 = FigSignalErrorAt();
            if (v45) {
              goto LABEL_27;
            }
          }
          CFDictionaryRef v47 = *(const __CFDictionary **)(v7 + 24);
          CFTypeRef v48 = *(const opaqueCMFormatDescription **)(v7 + 32);
          VTVideoDecoderGetCMBaseObject(a1);
          uint64_t v49 = CMBaseObjectGetDerivedStorage();
          CFDictionaryRef destinationImageBufferAttributes = 0;
          int v58 = 1278226736;
          unint64_t v50 = (unint64_t)CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(v49 + 16));
          uint64_t v51 = depthdecoder_createPixelBufferAttributesDictionary(v50, HIDWORD(v50), (uint64_t)&v58, &destinationImageBufferAttributes);
          if (!v51)
          {
            int v52 = (VTDecompressionSessionRef *)(v7 + 40);
            CFDictionaryRef v53 = destinationImageBufferAttributes;
            uint64_t v45 = VTDecompressionSessionCreate(*v36, v48, v47, destinationImageBufferAttributes, 0, v52);
            if (!v53) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
          uint64_t v45 = v51;
          CFDictionaryRef v53 = destinationImageBufferAttributes;
          if (destinationImageBufferAttributes) {
LABEL_26:
          }
            CFRelease(v53);
LABEL_27:
          if (v32) {
            CFRelease(v32);
          }
          return v45;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t DepthWrapperDecoder_DecodeFrame(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3, VTDecodeFrameFlags a4, VTDecodeInfoFlags *a5)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_group_enter(*(dispatch_group_t *)(DerivedStorage + 48));
  ++*(_DWORD *)(DerivedStorage + 56);
  if (!CMSampleBufferDataIsReady(a3))
  {
    uint64_t SampleTimingInfo = FigSignalErrorAt();
    goto LABEL_10;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(a3);
  uint64_t v12 = *(const opaqueCMFormatDescription **)(DerivedStorage + 32);
  CMSampleBufferRef sampleBufferOut = 0;
  *(_OWORD *)&timingInfoOut.duration.value = *MEMORY[0x1E4F1F9F8];
  timingInfoOut.duration.epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  timingInfoOut.presentationTimeStamp = timingInfoOut.duration;
  timingInfoOut.decodeTimeStamp = timingInfoOut.duration;
  size_t sampleSizeArray = CMBlockBufferGetDataLength(DataBuffer);
  uint64_t SampleTimingInfo = CMSampleBufferGetSampleTimingInfo(a3, 0, &timingInfoOut);
  if (SampleTimingInfo)
  {
LABEL_10:
    uint64_t v21 = SampleTimingInfo;
LABEL_13:
    depthdecoder_emitDecodedFrame(a1, a2, v21, 0, 0);
    return v21;
  }
  uint64_t v14 = CMSampleBufferCreateReady((CFAllocatorRef)*MEMORY[0x1E4F1CF80], DataBuffer, v12, 1, 1, &timingInfoOut, 1, &sampleSizeArray, &sampleBufferOut);
  if (v14)
  {
    uint64_t v21 = v14;
    if (sampleBufferOut) {
      CFRelease(sampleBufferOut);
    }
    goto LABEL_13;
  }
  CMPropagateAttachments(a3, sampleBufferOut);
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a3, 0);
  if (SampleAttachmentsArray)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    CFArrayRef v17 = CMSampleBufferGetSampleAttachmentsArray(sampleBufferOut, 1u);
    int8x8_t v18 = (void *)CFArrayGetValueAtIndex(v17, 0);
    CFDictionaryApplyFunction(ValueAtIndex, (CFDictionaryApplierFunction)depthdecoder_dictionarySetValue, v18);
  }
  CMSampleBufferRef v19 = sampleBufferOut;
  float32x2_t v20 = *(OpaqueVTDecompressionSession **)(DerivedStorage + 40);
  outputHandler[0] = MEMORY[0x1E4F143A8];
  outputHandler[1] = 0x40000000;
  outputHandler[2] = __DepthWrapperDecoder_DecodeFrame_block_invoke;
  outputHandler[3] = &__block_descriptor_tmp_2;
  char v24 = a4 & 1;
  outputHandler[4] = DerivedStorage;
  outputHandler[5] = a1;
  outputHandler[6] = a2;
  uint64_t v21 = VTDecompressionSessionDecodeFrameWithOutputHandler(v20, sampleBufferOut, a4, a5, outputHandler);
  if (v19) {
    CFRelease(v19);
  }
  return v21;
}

uint64_t DepthWrapperDecoder_CopySupportedPropertyDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v12 = 0;
  CFDictionaryRef v13 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v7 = *(const void **)(DerivedStorage + 40);
    if (v7)
    {
      uint64_t v8 = VTSessionCopySupportedPropertyDictionary(v7, (CFDictionaryRef *)&cf);
      if (v8)
      {
        CFMutableDictionaryRef Mutable = 0;
      }
      else
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
        CFDictionarySetValue(Mutable, @"SublayerDecoderSpecification", v5);
        CFTypeRef v12 = cf;
        CFDictionaryRef v13 = Mutable;
        FigCFCreateCombinedDictionary();
      }
    }
    else
    {
      CFMutableDictionaryRef Mutable = 0;
      uint64_t v8 = 4294954393;
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v8 = 4294954394;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v8;
}

uint64_t DepthWrapperDecoder_FinishDelayedFrames(uint64_t a1)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  uint64_t v2 = VTDecompressionSessionFinishDelayedFrames(*(VTDecompressionSessionRef *)(DerivedStorage + 40));
  if (*(void *)(v3 + 48))
  {
    uint64_t v4 = 2;
    do
    {
      CFDictionaryRef v5 = *(NSObject **)(v3 + 48);
      dispatch_time_t v6 = dispatch_time(0, 1000000000 * v4);
      v4 *= 2;
    }
    while (dispatch_group_wait(v5, v6));
  }
  return v2;
}

uint64_t depthdecoder_createPixelBufferAttributesDictionary(uint64_t a1, uint64_t a2, uint64_t a3, __CFDictionary **a4)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v7 = Mutable;
    CFMutableArrayRef v8 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E4F1D510]);
    if (v8)
    {
      CFMutableArrayRef v9 = v8;
      FigCFArrayAppendInt32();
      CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F24D70], v9);
      CFRelease(v9);
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      *a4 = v7;
      return 0;
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
      CFRelease(v7);
      return v11;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void depthdecoder_emitDecodedFrame(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  VTDecoderSessionEmitDecodedFrame(*(uint64_t **)(DerivedStorage + 8), a2, a3, a4, a5);
  --*(_DWORD *)(DerivedStorage + 56);
  uint64_t v10 = *(NSObject **)(DerivedStorage + 48);

  dispatch_group_leave(v10);
}

void depthdecoder_dictionarySetValue(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

__CFString *VTPixelBufferAttributesCopyNiceDescription(const __CFDictionary *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppend(Mutable, @"[");
  CFDataRef Value = (__CFString *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24E10]);
  uint64_t v4 = (__CFString *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24D08]);
  CFAllocatorRef v5 = @"[any width]";
  if (Value) {
    CFAllocatorRef v5 = Value;
  }
  dispatch_time_t v6 = @"[any height]";
  if (v4) {
    dispatch_time_t v6 = v4;
  }
  CFStringAppendFormat(Mutable, 0, @"%@ x %@, ", v5, v6);
  CFArrayRef v7 = (const __CFArray *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24D70]);
  if (!v7)
  {
    CFStringRef v10 = @"[any pixel format]";
LABEL_24:
    CFStringAppend(Mutable, v10);
    goto LABEL_25;
  }
  CFArrayRef v8 = v7;
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID != CFGetTypeID(v8))
  {
    CFTypeID v11 = CFArrayGetTypeID();
    if (v11 == CFGetTypeID(v8))
    {
      CFIndex Count = CFArrayGetCount(v8);
      uint64_t v13 = Count;
      if (Count <= 100) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = Count - 100;
      }
      CFStringAppend(Mutable, @"[");
      if (v13 >= 1)
      {
        CFIndex v15 = 0;
        if (v13 >= 100) {
          uint64_t v16 = 100;
        }
        else {
          uint64_t v16 = v13;
        }
        do
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v8, v15);
          if (v15) {
            CFStringAppend(Mutable, @", ");
          }
          vtGetPixelFormatNumberAsString(ValueAtIndex, v19);
          CFStringAppendFormat(Mutable, 0, @"%s", v19);
          ++v15;
        }
        while (v16 != v15);
      }
      if (v14 >= 1) {
        CFStringAppendFormat(Mutable, 0, @", (%d more)", v14);
      }
      CFStringRef v10 = @"]";
    }
    else
    {
      CFStringRef v10 = @"[bad pixel format]";
    }
    goto LABEL_24;
  }
  vtGetPixelFormatNumberAsString(v8, v19);
  CFStringAppendFormat(Mutable, 0, @"%s", v19);
LABEL_25:
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)vtAppendNicelyUnlessWHPF, Mutable);
  CFStringAppend(Mutable, @"]");
  return Mutable;
}

char *vtGetPixelFormatNumberAsString(const __CFNumber *a1, char *a2)
{
  signed int valuePtr = 0;
  CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr > 100)
  {
    signed int valuePtr = bswap32(valuePtr);
    snprintf(a2, 0x14uLL, "%.4s");
  }
  else
  {
    snprintf(a2, 0x14uLL, "%d");
  }
  return a2;
}

void vtAppendNicelyUnlessWHPF(const void *a1, const __CFDictionary *a2, uint64_t a3)
{
  if (!CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24E10])
    && !CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24D08])
    && !CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24D70]))
  {
    v6[0] = a3;
    v6[1] = 1;
    vtAppendNicely((uint64_t)a1, a2, (uint64_t)v6);
  }
}

CVPixelBufferPoolRef *vtBuildPixelBufferPoolsCommon(const __CFAllocator *a1, const __CFDictionary *a2, const __CFDictionary *a3, const __CFDictionary *a4, uint64_t a5, const __CFBoolean *a6, unsigned int a7, unsigned int a8, unsigned __int8 a9, char a10, CVPixelBufferPoolRef *a11, CVPixelBufferPoolRef *a12, unsigned char *a13, unsigned char *a14)
{
  double v149 = 0;
  CFDictionaryRef resolvedDictionaryOut = 0;
  double v147 = 0;
  double v148 = 0;
  uint64_t valuePtr = 0;
  CVPixelBufferPoolRef poolOut = 0;
  char v144 = 0;
  if (vtDoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection((BOOL)a2))
  {
    BOOL DoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection = vtDoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection((BOOL)a3);
    if (a10)
    {
LABEL_3:
      char v21 = 1;
      goto LABEL_8;
    }
  }
  else
  {
    BOOL DoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection = 0;
    if (a10) {
      goto LABEL_3;
    }
  }
  if (initDefaultsCommon_onceToken_0 != -1) {
    dispatch_once_f(&initDefaultsCommon_onceToken_0, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce_0);
  }
  char v21 = sAllowMetalTransferSession_0;
LABEL_8:
  char v134 = v21;
  if (!a8)
  {
    CFDictionaryRef value = a2;
    CFTypeRef v30 = 0;
    goto LABEL_31;
  }
  float v22 = (const void **)MEMORY[0x1E4F24D70];
  if (!a2)
  {
    CFTypeRef v30 = 0;
    CFDictionaryRef value = 0;
    if (!a3) {
      goto LABEL_31;
    }
    goto LABEL_23;
  }
  float v23 = (const void *)*MEMORY[0x1E4F24D70];
  CFDictionaryRef value = a2;
  CFArrayRef v24 = (const __CFArray *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F24D70]);
  if (!v24)
  {
LABEL_22:
    CFTypeRef v30 = 0;
    if (!a3) {
      goto LABEL_31;
    }
LABEL_23:
    uint64_t v31 = *v22;
    CFArrayRef v32 = (const __CFArray *)CFDictionaryGetValue(a3, *v22);
    if (v32)
    {
      CFArrayRef v33 = v32;
      CFDictionaryRef v34 = a3;
      CFTypeID v35 = CFGetTypeID(v32);
      if (v35 != CFArrayGetTypeID())
      {
        CFDictionaryRef cf = 0;
        a3 = v34;
        if (a4) {
          goto LABEL_32;
        }
        goto LABEL_35;
      }
      a3 = v34;
      if (CFArrayGetCount(v33))
      {
        PrioritizedPixelFormatListByAlpha = vtCreatePrioritizedPixelFormatListByAlpha(v33);
        uint64_t MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
        {
          uint64_t v77 = (CVPixelBufferPoolRef *)FigSignalErrorAt();
          CFDictionaryRef v57 = 0;
          CFMutableDictionaryRef v41 = 0;
          int v56 = 0;
          size_t v60 = 0;
          size_t v78 = 0;
          CFDictionaryRef cf = 0;
          goto LABEL_242;
        }
        a3 = MutableCopy;
        CFDictionarySetValue(MutableCopy, v31, PrioritizedPixelFormatListByAlpha);
        if (PrioritizedPixelFormatListByAlpha) {
          CFRelease(PrioritizedPixelFormatListByAlpha);
        }
        CFDictionaryRef cf = a3;
        if (a4)
        {
LABEL_32:
          PrioritizedPixelFormatListByAlpha = (void *)FigCFDictionaryCreateMutableCopy();
          if (PrioritizedPixelFormatListByAlpha)
          {
            CFDictionaryRef v37 = (const void *)*MEMORY[0x1E4F24D98];
            double v127 = CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E4F24D98]);
            CFDictionaryRemoveValue((CFMutableDictionaryRef)PrioritizedPixelFormatListByAlpha, v37);
            goto LABEL_36;
          }
          uint64_t v77 = (CVPixelBufferPoolRef *)FigSignalErrorAt();
          CFDictionaryRef v57 = 0;
          CFMutableDictionaryRef v41 = 0;
          int v56 = 0;
          size_t v60 = 0;
          size_t v78 = 0;
LABEL_242:
          if (v30) {
            CFRelease(v30);
          }
          if (cf) {
            CFRelease(cf);
          }
          if (PrioritizedPixelFormatListByAlpha) {
            goto LABEL_247;
          }
          goto LABEL_248;
        }
LABEL_35:
        PrioritizedPixelFormatListByAlpha = 0;
        double v127 = 0;
LABEL_36:
        unsigned int v124 = a8;
        unsigned int v125 = a7;
        CFDictionaryRef v123 = a4;
        if (a6)
        {
          CFTypeID TypeID = CFBooleanGetTypeID();
          if (TypeID == CFGetTypeID(a6))
          {
            int v128 = CFBooleanGetValue(a6);
            if (v128)
            {
              uint64_t valuePtr = -1;
              goto LABEL_43;
            }
          }
          else
          {
            CFTypeID v39 = CFNumberGetTypeID();
            if (v39 == CFGetTypeID(a6))
            {
              CFNumberGetValue(a6, kCFNumberSInt64Type, &valuePtr);
              int v128 = 1;
              goto LABEL_43;
            }
          }
        }
        int v128 = 0;
LABEL_43:
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        CFMutableDictionaryRef v41 = Mutable;
        if (value) {
          CFArrayAppendValue(Mutable, value);
        }
        unsigned int v130 = v30;
        if (a3) {
          CFArrayAppendValue(v41, a3);
        }
        CFDictionaryRef v126 = a3;
        int v132 = PrioritizedPixelFormatListByAlpha;
        CFAllocatorRef alloc = a1;
        int v151 = 0;
        CFIndex Count = CFArrayGetCount(v41);
        if (Count >= 1)
        {
          CFIndex v43 = Count;
          CFIndex v44 = 0;
          long long cf1 = 0uLL;
          int v45 = 0;
          unsigned int v142 = (const void *)*MEMORY[0x1E4F24B28];
          CFStringRef key = (void *)*MEMORY[0x1E4F24C18];
          char v46 = (const void *)*MEMORY[0x1E4F24D20];
          while (1)
          {
            CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v41, v44);
            if (ValueAtIndex)
            {
              CFTypeRef v48 = ValueAtIndex;
              CFTypeID v49 = CFDictionaryGetTypeID();
              if (v49 == CFGetTypeID(v48)) {
                break;
              }
            }
LABEL_68:
            if (v43 == ++v44) {
              goto LABEL_71;
            }
          }
          unint64_t v50 = v41;
          CFNumberRef v51 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v48, v142);
          int v52 = CFDictionaryGetValue((CFDictionaryRef)v48, key);
          if (v51)
          {
            CFTypeID v53 = CFNumberGetTypeID();
            if (v53 == CFGetTypeID(v51))
            {
              if (*((void *)&cf1 + 1))
              {
                double v152 = 0.0;
                v153[0] = 0.0;
                CFNumberGetValue(*((CFNumberRef *)&cf1 + 1), kCFNumberDoubleType, v153);
                CFNumberGetValue(v51, kCFNumberDoubleType, &v152);
                CFMutableDictionaryRef v41 = v50;
                if (vabdd_f64(v153[0], v152) >= 0.01) {
                  goto LABEL_72;
                }
                if (!v52) {
                  goto LABEL_64;
                }
                goto LABEL_59;
              }
              *((void *)&cf1 + 1) = v51;
            }
          }
          CFMutableDictionaryRef v41 = v50;
          if (!v52) {
            goto LABEL_64;
          }
LABEL_59:
          CFTypeID v54 = CFStringGetTypeID();
          if (v54 == CFGetTypeID(v52))
          {
            if ((void)cf1)
            {
              if (!CFEqual((CFTypeRef)cf1, v52)) {
                goto LABEL_72;
              }
            }
            else
            {
              *(void *)&long long cf1 = v52;
            }
          }
LABEL_64:
          CFDictionaryGetValue((CFDictionaryRef)v48, v46);
          FigCFDictionaryGetIntIfPresent();
          if (v45)
          {
            if (v45 != v151) {
              goto LABEL_72;
            }
          }
          else
          {
            int v45 = v151;
          }
          goto LABEL_68;
        }
        int v45 = 0;
        long long cf1 = 0uLL;
LABEL_71:
        if (!CVPixelBufferCreateResolvedAttributesDictionary(0, v41, &resolvedDictionaryOut))
        {
          if (!resolvedDictionaryOut) {
            goto LABEL_98;
          }
          if (cf1 != 0)
          {
            size_t v64 = (const void *)*MEMORY[0x1E4F24B28];
            if (!CFDictionaryGetValue(resolvedDictionaryOut, (const void *)*MEMORY[0x1E4F24B28]))
            {
              size_t v65 = CFDictionaryCreateMutableCopy(0, 0, resolvedDictionaryOut);
              if (!v65) {
                goto LABEL_72;
              }
              BOOL v66 = v65;
              if (*((void *)&cf1 + 1)) {
                CFDictionaryAddValue(v65, v64, *((const void **)&cf1 + 1));
              }
              if ((void)cf1) {
                CFDictionaryAddValue(v66, (const void *)*MEMORY[0x1E4F24C18], (const void *)cf1);
              }
              CFRelease(resolvedDictionaryOut);
              CFDictionaryRef resolvedDictionaryOut = v66;
            }
          }
          if (v45)
          {
            LODWORD(v153[0]) = 0;
            if (CFDictionaryGetValue(resolvedDictionaryOut, (const void *)*MEMORY[0x1E4F24D20]))
            {
              FigCFDictionaryGetIntIfPresent();
              if (!LODWORD(v153[0]))
              {
                uint64_t v67 = FigCFDictionaryCreateMutableCopy();
                if (v67)
                {
                  CFDictionaryRef v68 = (const __CFDictionary *)v67;
                  uint64_t v69 = FigCFDictionaryCreateMutableCopy();
                  if (v69)
                  {
                    BOOL v70 = (const void *)v69;
                    FigCFDictionarySetInt();
                    FigCFDictionarySetValue();
                    CFRelease(v70);
                    if (resolvedDictionaryOut) {
                      CFRelease(resolvedDictionaryOut);
                    }
                    CFDictionaryRef resolvedDictionaryOut = v68;
                  }
                  else
                  {
                    CFRelease(v68);
                  }
                }
              }
            }
          }
        }
LABEL_72:
        if (resolvedDictionaryOut)
        {
          uint64_t v55 = vtCreateUsablePixelBufferAttributes(alloc, a5, resolvedDictionaryOut, 0, 0, &v149, 0);
          CFTypeRef v30 = v130;
          int v56 = v132;
          if (!v55)
          {
            CFDictionaryRef v57 = v149;
            LODWORD(v153[0]) = vtGetFirstPixelFormatFromPixelBufferAttributes(v149, v125, DoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection);
            if (!v57)
            {
              size_t v60 = a12;
              goto LABEL_102;
            }
            int v58 = (const void *)*MEMORY[0x1E4F24D70];
            CFArrayRef v59 = (const __CFArray *)CFDictionaryGetValue(v57, (const void *)*MEMORY[0x1E4F24D70]);
            size_t v60 = a12;
            if (v59 && (CFArrayRef v61 = v59, v62 = CFArrayGetTypeID(), v62 == CFGetTypeID(v61)) && CFArrayGetCount(v61) != 1)
            {
              CFNumberRef v63 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, v153);
              v154.length = CFArrayGetCount(v61);
              v154.location = 0;
              if (CFArrayContainsValue(v61, v154, v63))
              {
                CFDictionaryRef v57 = CFDictionaryCreateMutableCopy(alloc, 0, v57);
                CFDictionarySetValue(v57, v58, v63);
                if (!v63) {
                  goto LABEL_102;
                }
                goto LABEL_80;
              }
            }
            else
            {
              CFNumberRef v63 = 0;
            }
            CFDictionaryRef v57 = (const __CFDictionary *)CFRetain(v57);
            if (!v63)
            {
LABEL_102:
              if (v128)
              {
                char v144 = 0;
                if (!vtCreateOrReuseSharedPixelBufferPool(alloc, v132, v57, (const __CFArray *)valuePtr, v127, &poolOut, &v144))
                {
LABEL_104:
                  CVPixelBufferPoolRelease(*a11);
                  *a11 = poolOut;
                  if (a13) {
                    *a13 = v144;
                  }
                  if (v60)
                  {
                    CVPixelBufferPoolRelease(*v60);
                    size_t v76 = v60;
                    uint64_t v77 = 0;
                    size_t v60 = 0;
                    size_t v78 = 0;
                    PrioritizedPixelFormatListByAlpha = 0;
                    CVPixelBufferPoolRef *v76 = 0;
                    goto LABEL_242;
                  }
                  uint64_t v77 = 0;
                  goto LABEL_120;
                }
              }
              else if (!vtCreateNamedPixelBufferPool(alloc, v132, v57, v127, &poolOut))
              {
                goto LABEL_104;
              }
              uint64_t v77 = (CVPixelBufferPoolRef *)FigSignalErrorAt();
LABEL_119:
              size_t v60 = 0;
LABEL_120:
              size_t v78 = 0;
LABEL_241:
              PrioritizedPixelFormatListByAlpha = 0;
              goto LABEL_242;
            }
LABEL_80:
            CFRelease(v63);
            goto LABEL_102;
          }
          uint64_t v77 = (CVPixelBufferPoolRef *)v55;
LABEL_118:
          CFDictionaryRef v57 = 0;
          goto LABEL_119;
        }
LABEL_98:
        LOBYTE(v151) = 0;
        uint64_t v71 = vtCreateUsablePixelBufferAttributes(alloc, a5, value, v126, 1, &v148, (char *)&v151);
        CFTypeRef v30 = v130;
        int v56 = v132;
        if (v71
          || ((int v72 = v151, !(_BYTE)v151)
            ? (v75 = v148, CFDictionaryRef v73 = v126)
            : (const __CFDictionary *)(CFDictionaryRef v73 = v126,
                                       FirstPixelFormatFromPixelBufferAttributes = vtGetFirstPixelFormatFromPixelBufferAttributes(v126, 0, DoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection), v75 = v148, v72 = FirstPixelFormatFromPixelBufferAttributes == vtGetFirstPixelFormatFromPixelBufferAttributes(v148, 0, DoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection)), uint64_t v71 = vtCreateUsablePixelBufferAttributes(alloc, a5, v73, v75, v72 ^ 1u, &v147, 0), v71))
        {
          uint64_t v77 = (CVPixelBufferPoolRef *)v71;
          goto LABEL_238;
        }
        CFDictionaryRef v79 = v147;
        if (v147 && !(_BYTE)v151)
        {
          double v147 = 0;
          uint64_t v77 = (CVPixelBufferPoolRef *)vtCreateReorderedPixelBufferAttributes(alloc, v79, v75, &v147);
          CFRelease(v79);
          if (v77) {
            goto LABEL_238;
          }
          CFDictionaryRef v79 = v147;
          unsigned int v80 = vtGetFirstPixelFormatFromPixelBufferAttributes(v147, 0, DoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection);
          if (v80 != vtGetFirstPixelFormatFromPixelBufferAttributes(v75, 0, DoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection))
          {
            double v148 = 0;
            uint64_t v77 = (CVPixelBufferPoolRef *)vtCreateReorderedPixelBufferAttributes(alloc, v75, v79, &v148);
            CFRelease(v75);
            if (v77) {
              goto LABEL_118;
            }
          }
        }
        BOOL v81 = a14;
        int v82 = a9;
        if (v79)
        {
          LODWORD(v153[0]) = 0;
          LODWORD(v152) = 0;
          uint64_t v77 = a12;
          int v83 = vtDoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection((BOOL)v79)
             && vtDoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection((BOOL)v148);
          CFTypeID v86 = CFDictionaryGetTypeID();
          if (v86 == CFGetTypeID(v79) && (CFTypeID v87 = CFDictionaryGetTypeID(), v88 = v148, v87 == CFGetTypeID(v148)))
          {
            char v89 = (void *)*MEMORY[0x1E4F24D70];
            CFArrayRef v90 = (const __CFArray *)CFDictionaryGetValue(v79, (const void *)*MEMORY[0x1E4F24D70]);
            valuea = v89;
            CFArrayRef v91 = (const __CFArray *)CFDictionaryGetValue(v88, v89);
            if (v90)
            {
              CFArrayRef v92 = v91;
              if (v91)
              {
                CFTypeID v93 = CFArrayGetTypeID();
                if (v93 == CFGetTypeID(v90)) {
                  CFIndex keya = CFArrayGetCount(v90);
                }
                else {
                  CFIndex keya = 1;
                }
                CFTypeID v100 = CFArrayGetTypeID();
                CFDictionaryRef cf1a = v88;
                if (v100 == CFGetTypeID(v92)) {
                  CFIndex v101 = CFArrayGetCount(v92);
                }
                else {
                  CFIndex v101 = 1;
                }
                OSType v102 = vtGetFirstPixelFormatFromPixelBufferAttributes(v79, 0, v83);
                unsigned int v103 = vtGetFirstPixelFormatFromPixelBufferAttributes(v88, 0, v83);
                int CanTransfer = 0;
                if (v102 == v103) {
                  int CanTransfer = VTPixelTransferSessionCanTransfer(v102, v102, 0);
                }
                if (keya < 1)
                {
                  uint64_t v84 = v79;
                  CFTypeRef v30 = v130;
                  int v56 = v132;
                  uint64_t v77 = a12;
                  CFAllocatorRef v85 = alloc;
LABEL_212:
                  int v82 = a9;
                }
                else
                {
                  CFIndex v105 = 0;
                  double v122 = v41;
                  while (1)
                  {
                    LODWORD(v153[0]) = 0;
                    CFTypeID v106 = CFArrayGetTypeID();
                    if (v106 == CFGetTypeID(v90))
                    {
                      FigCFArrayGetInt32AtIndex();
                    }
                    else
                    {
                      CFTypeID v107 = CFNumberGetTypeID();
                      if (v107 == CFGetTypeID(v90)) {
                        CFNumberGetValue(v90, kCFNumberSInt32Type, v153);
                      }
                    }
                    BOOL v108 = CanTransfer != 0;
                    if (LODWORD(v153[0]) == v102) {
                      BOOL v108 = 0;
                    }
                    if (!v108 && v101 >= 1) {
                      break;
                    }
LABEL_201:
                    ++v105;
                    CFMutableDictionaryRef v41 = v122;
                    if (v105 == keya)
                    {
                      uint64_t v84 = v79;
                      CFTypeRef v30 = v130;
                      int v56 = v132;
LABEL_211:
                      CFAllocatorRef v85 = alloc;
                      uint64_t v77 = a12;
                      BOOL v81 = a14;
                      goto LABEL_212;
                    }
                  }
                  CFIndex v109 = 0;
                  while (1)
                  {
                    LODWORD(v152) = 0;
                    CFTypeID v110 = CFArrayGetTypeID();
                    if (v110 == CFGetTypeID(v92))
                    {
                      FigCFArrayGetInt32AtIndex();
                    }
                    else
                    {
                      CFTypeID v111 = CFNumberGetTypeID();
                      if (v111 == CFGetTypeID(v92)) {
                        CFNumberGetValue(v92, kCFNumberSInt32Type, &v152);
                      }
                    }
                    if ((!CanTransfer || LODWORD(v152) == v103)
                      && LODWORD(v153[0])
                      && LODWORD(v152)
                      && VTPixelTransferSessionCanTransfer(LODWORD(v153[0]), LODWORD(v152), 0))
                    {
                      break;
                    }
                    if (v101 == ++v109) {
                      goto LABEL_201;
                    }
                  }
                  if (!(v109 | v105))
                  {
                    uint64_t v84 = v79;
                    CFTypeRef v30 = v130;
                    int v56 = v132;
                    CFMutableDictionaryRef v41 = v122;
                    goto LABEL_211;
                  }
                  CVPixelBufferRef v112 = 0;
                  CFTypeRef v30 = v130;
                  if (keya >= 2 && v105)
                  {
                    CFArrayRef v113 = (const __CFArray *)FigCFArrayCreateMutableCopy();
                    long long v114 = CFArrayGetValueAtIndex(v113, v105);
                    if (v114)
                    {
                      long long v115 = v114;
                      CFRetain(v114);
                      CFArrayRemoveValueAtIndex(v113, v105);
                      CFArrayInsertValueAtIndex(v113, 0, v115);
                      CFRelease(v115);
                    }
                    else
                    {
                      CFArrayRemoveValueAtIndex(v113, v105);
                      CFArrayInsertValueAtIndex(v113, 0, 0);
                    }
                    uint64_t v84 = CFDictionaryCreateMutableCopy(alloc, 0, v79);
                    CFDictionarySetValue(v84, valuea, v113);
                    double v147 = v84;
                    if (v84) {
                      CFRetain(v84);
                    }
                    CFRelease(v79);
                    CVPixelBufferRef v112 = v84;
                  }
                  else
                  {
                    uint64_t v84 = v79;
                    CFArrayRef v113 = 0;
                  }
                  uint64_t v116 = 0;
                  CFAllocatorRef v85 = alloc;
                  CFArrayRef v117 = 0;
                  if (v101 < 2)
                  {
                    uint64_t v77 = a12;
                  }
                  else
                  {
                    uint64_t v77 = a12;
                    if (v109)
                    {
                      CFArrayRef v117 = (const __CFArray *)FigCFArrayCreateMutableCopy();
                      long long v118 = CFArrayGetValueAtIndex(v117, v109);
                      if (v118)
                      {
                        uint64_t v119 = v118;
                        CFRetain(v118);
                        CFArrayRemoveValueAtIndex(v117, v109);
                        CFArrayInsertValueAtIndex(v117, 0, v119);
                        CFRelease(v119);
                      }
                      else
                      {
                        CFArrayRemoveValueAtIndex(v117, v109);
                        CFArrayInsertValueAtIndex(v117, 0, 0);
                      }
                      uint64_t v116 = CFDictionaryCreateMutableCopy(alloc, 0, cf1a);
                      CFDictionarySetValue(v116, valuea, v117);
                      double v148 = v116;
                      if (v116) {
                        CFRetain(v116);
                      }
                      if (cf1a) {
                        CFRelease(cf1a);
                      }
                    }
                  }
                  if (v113) {
                    CFRelease(v113);
                  }
                  int v56 = v132;
                  CFMutableDictionaryRef v41 = v122;
                  if (v117) {
                    CFRelease(v117);
                  }
                  int v82 = a9;
                  if (v112) {
                    CFRelease(v112);
                  }
                  if (v116) {
                    CFRelease(v116);
                  }
                  BOOL v81 = a14;
                }
                goto LABEL_134;
              }
            }
            uint64_t v84 = v79;
            int v56 = v132;
          }
          else
          {
            uint64_t v84 = v79;
          }
          CFAllocatorRef v85 = alloc;
        }
        else
        {
          uint64_t v84 = 0;
          CFAllocatorRef v85 = alloc;
          uint64_t v77 = a12;
        }
LABEL_134:
        if (v82 == 1)
        {
          CFIndex v94 = FigCFDictionaryGetCount();
          size_t v78 = CFDictionaryCreateMutableCopy(v85, v94, v84);
          CFDictionaryRef v95 = v148;
          if (v148)
          {
            int v143 = v81;
            CFDictionaryRef v96 = (const void *)*MEMORY[0x1E4F24E10];
            CFDictionaryGetValue(v84, (const void *)*MEMORY[0x1E4F24E10]);
            double v97 = CFDictionaryGetValue(v95, v96);
            if (v97) {
              CFDictionarySetValue(v78, v96, v97);
            }
            float v98 = (const void *)*MEMORY[0x1E4F24D08];
            CFDictionaryGetValue(v84, (const void *)*MEMORY[0x1E4F24D08]);
            BOOL v99 = CFDictionaryGetValue(v95, v98);
            if (v99) {
              CFDictionarySetValue(v78, v98, v99);
            }
            uint64_t v77 = a12;
            if (!FigCFEqual())
            {
              CFDictionaryRemoveValue(v78, (const void *)*MEMORY[0x1E4F24CE0]);
              CFDictionaryRemoveValue(v78, (const void *)*MEMORY[0x1E4F24CE8]);
            }
            BOOL v81 = v143;
            if (!FigCFEqual())
            {
              CFDictionaryRemoveValue(v78, (const void *)*MEMORY[0x1E4F24CF0]);
              CFDictionaryRemoveValue(v78, (const void *)*MEMORY[0x1E4F24CD0]);
            }
          }
          HIBYTE(v121) = v134;
          LOBYTE(v121) = 0;
          uint64_t v77 = (CVPixelBufferPoolRef *)vtBuildPixelBufferPoolsCommon(alloc, v78, v84, v123, a5, *MEMORY[0x1E4F1CFD0], v125, v124, v121, a11, v77, a13, v81);
          size_t v60 = 0;
          goto LABEL_240;
        }
        if (v127)
        {
          size_t v60 = (CVPixelBufferPoolRef *)CFStringCreateWithFormat(v85, 0, @"%@_1", v127);
          if (!v60) {
            goto LABEL_172;
          }
        }
        else
        {
          size_t v60 = 0;
        }
        if (v128)
        {
          char v144 = 0;
          if (vtCreateOrReuseSharedPixelBufferPool(alloc, v56, v148, (const __CFArray *)valuePtr, v60, &poolOut, &v144))goto LABEL_172; {
        }
          }
        else if (vtCreateNamedPixelBufferPool(alloc, v56, v148, v60, &poolOut))
        {
          goto LABEL_172;
        }
        if (v60) {
          CFRelease(v60);
        }
        CVPixelBufferPoolRelease(*a11);
        *a11 = poolOut;
        if (a13) {
          *a13 = v144;
        }
        if (v77)
        {
          if (v127)
          {
            size_t v60 = (CVPixelBufferPoolRef *)CFStringCreateWithFormat(alloc, 0, @"%@_2", v127);
            if (!v60) {
              goto LABEL_172;
            }
          }
          else
          {
            size_t v60 = 0;
          }
          if (v128)
          {
            char v144 = 0;
            if (!vtCreateOrReuseSharedPixelBufferPool(alloc, 0, v84, (const __CFArray *)valuePtr, v60, &poolOut, &v144))goto LABEL_167; {
          }
            }
          else if (!vtCreateNamedPixelBufferPool(alloc, 0, v84, v60, &poolOut))
          {
LABEL_167:
            if (v60) {
              CFRelease(v60);
            }
            CVPixelBufferPoolRelease(*v77);
            *uint64_t v77 = poolOut;
            uint64_t v77 = 0;
            if (v81)
            {
              size_t v60 = 0;
              size_t v78 = 0;
              *BOOL v81 = v144;
LABEL_240:
              CFDictionaryRef v57 = 0;
              goto LABEL_241;
            }
            goto LABEL_238;
          }
LABEL_172:
          uint64_t v77 = (CVPixelBufferPoolRef *)FigSignalErrorAt();
LABEL_239:
          size_t v78 = 0;
          goto LABEL_240;
        }
LABEL_238:
        size_t v60 = 0;
        goto LABEL_239;
      }
    }
LABEL_31:
    CFDictionaryRef cf = 0;
    if (a4) {
      goto LABEL_32;
    }
    goto LABEL_35;
  }
  CFArrayRef v25 = v24;
  CFDictionaryRef v26 = a3;
  CFTypeID v27 = CFGetTypeID(v24);
  if (v27 != CFArrayGetTypeID())
  {
    a3 = v26;
    goto LABEL_22;
  }
  a3 = v26;
  if (!CFArrayGetCount(v25)) {
    goto LABEL_22;
  }
  PrioritizedPixelFormatListByAlpha = vtCreatePrioritizedPixelFormatListByAlpha(v25);
  uint64_t v29 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (v29)
  {
    CFTypeRef v30 = v29;
    CFDictionarySetValue(v29, v23, PrioritizedPixelFormatListByAlpha);
    if (PrioritizedPixelFormatListByAlpha) {
      CFRelease(PrioritizedPixelFormatListByAlpha);
    }
    CFDictionaryRef value = v30;
    if (!a3) {
      goto LABEL_31;
    }
    goto LABEL_23;
  }
  uint64_t v77 = (CVPixelBufferPoolRef *)FigSignalErrorAt();
  CFDictionaryRef v57 = 0;
  CFMutableDictionaryRef v41 = 0;
  int v56 = 0;
  size_t v60 = 0;
  size_t v78 = 0;
  if (PrioritizedPixelFormatListByAlpha) {
LABEL_247:
  }
    CFRelease(PrioritizedPixelFormatListByAlpha);
LABEL_248:
  if (v78) {
    CFRelease(v78);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (resolvedDictionaryOut) {
    CFRelease(resolvedDictionaryOut);
  }
  if (v149) {
    CFRelease(v149);
  }
  if (v57) {
    CFRelease(v57);
  }
  if (v148) {
    CFRelease(v148);
  }
  if (v147) {
    CFRelease(v147);
  }
  if (v56) {
    CFRelease(v56);
  }
  if (v60) {
    CFRelease(v60);
  }
  return v77;
}

CVPixelBufferPoolRef *VTBuildPixelBufferPools2(const __CFAllocator *a1, const __CFDictionary *a2, const __CFDictionary *a3, const __CFDictionary *a4, uint64_t a5, const __CFBoolean *a6, unsigned int a7, unsigned int a8, unsigned __int8 a9, char a10, CVPixelBufferPoolRef *a11, CVPixelBufferPoolRef *a12, unsigned char *a13, unsigned char *a14)
{
  return vtBuildPixelBufferPoolsCommon(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t VTCreatePixelBufferPoolAttributesWithName(const __CFAllocator *a1, uint64_t a2, const __CFString *cf, __CFDictionary **a4)
{
  if (cf)
  {
    CFStringRef v5 = cf;
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 == CFStringGetTypeID())
    {
      if (a4)
      {
        if (a2) {
          CFStringRef v5 = CFStringCreateWithFormat(a1, 0, @"%d:%@", a2, v5);
        }
        else {
          CFRetain(v5);
        }
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CFStringRef v10 = Mutable;
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24D98], v5);
          uint64_t v11 = 0;
          *a4 = v10;
          if (!v5) {
            return v11;
          }
        }
        else
        {
          uint64_t v11 = FigSignalErrorAt();
          if (!v5) {
            return v11;
          }
        }
        CFRelease(v5);
        return v11;
      }
    }
  }

  return FigSignalErrorAt();
}

void vtAppendNicely(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  dispatch_time_t v6 = *(__CFString **)a3;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID == CFGetTypeID(a2))
  {
    context[1] = 0;
    CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    CFStringAppend(Mutable, @"[");
    context[0] = Mutable;
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)vtAppendNicely, context);
    CFStringAppend(Mutable, @"]");
    CFMutableArrayRef v9 = 0;
    CFStringRef v10 = Mutable;
  }
  else
  {
    CFTypeID v11 = CFArrayGetTypeID();
    if (v11 == CFGetTypeID(a2))
    {
      CFIndex Count = CFArrayGetCount(a2);
      CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      CFStringAppend(Mutable, @"[");
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
          if (i) {
            CFStringAppend(Mutable, @", ");
          }
          CFStringAppendFormat(Mutable, 0, @"%@", ValueAtIndex);
        }
      }
      CFStringAppend(Mutable, @"]");
      CFStringRef v10 = 0;
      CFMutableArrayRef v9 = Mutable;
    }
    else
    {
      CFStringRef v10 = 0;
      CFMutableArrayRef v9 = 0;
      CFMutableDictionaryRef Mutable = (__CFString *)a2;
    }
  }
  if (*(unsigned char *)(a3 + 8)) {
    CFStringAppend(v6, @", ");
  }
  CFStringAppendFormat(v6, 0, @"%@ = %@", a1, Mutable);
  *(unsigned char *)(a3 + 8) = 1;
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
}

BOOL vtDoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection(BOOL result)
{
  if (result)
  {
    CFDictionaryRef v1 = (const __CFDictionary *)result;
    if (CFDictionaryGetValue((CFDictionaryRef)result, (const void *)*MEMORY[0x1E4F24D70]))
    {
      return 1;
    }
    else
    {
      unint64_t v2 = 0;
      do
      {
        unint64_t v3 = v2;
        if (v2 == 2) {
          break;
        }
        CFDataRef Value = CFDictionaryGetValue(v1, **((const void ***)&vtDoesPixelBufferAttributesDictionaryConstrainPixelFormatSelection_sCVKeysThatConstrainPixelFormatSelection+ v2+ 1));
        unint64_t v2 = v3 + 1;
      }
      while (!Value);
      return v3 < 2;
    }
  }
  return result;
}

CFArrayRef vtCreatePrioritizedPixelFormatListByAlpha(const __CFArray *a1)
{
  CFArrayRef v1 = a1;
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFArrayGetTypeID()) {
    goto LABEL_13;
  }
  if (!v1) {
    return v1;
  }
  if (!CFArrayGetCount(v1)) {
    return 0;
  }
  CFArrayRef MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
  if (!MutableCopy)
  {
LABEL_13:
    FigSignalErrorAt();
    return 0;
  }
  CFArrayRef v1 = MutableCopy;
  CFIndex Count = CFArrayGetCount(MutableCopy);
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    CFIndex v6 = 0;
    CFIndex v7 = 0;
    do
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v1, v6);
      if (vtPixelFormatContainsAlpha((const __CFNumber *)ValueAtIndex))
      {
        if (v6 != v7)
        {
          CFArrayRemoveValueAtIndex(v1, v6);
          CFArrayInsertValueAtIndex(v1, v7, ValueAtIndex);
        }
        ++v7;
      }
      ++v6;
    }
    while (v5 != v6);
  }
  return v1;
}

CFDictionaryRef vtGetFirstPixelFormatFromPixelBufferAttributes(const __CFDictionary *result, int a2, int a3)
{
  OSType valuePtr = 0;
  if (result)
  {
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E4F24D70]);
    if (result)
    {
      CFArrayRef v5 = result;
      CFTypeID v6 = CFGetTypeID(result);
      if (v6 == CFArrayGetTypeID())
      {
        if (!CFArrayGetCount(v5)) {
          return (const __CFDictionary *)valuePtr;
        }
        if (a3 && CFArrayGetCount(v5) >= 1)
        {
          CFIndex v7 = 0;
          CFTypeID v8 = (const void *)*MEMORY[0x1E4F24EE0];
          do
          {
            CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v5, v7);
            if (ValueAtIndex)
            {
              CFNumberRef v10 = ValueAtIndex;
              CFTypeID v11 = CFGetTypeID(ValueAtIndex);
              if (v11 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr);
                DescriptionWithuint64_t PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
                if (DescriptionWithPixelFormatType)
                {
                  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, v8);
                  if (Value)
                  {
                    CFArrayRef v14 = Value;
                    CFTypeID v15 = CFGetTypeID(Value);
                    if (v15 == CFArrayGetTypeID())
                    {
                      CFArrayGetValueAtIndex(v14, 0);
                      FigCFDictionaryGetInt32IfPresent();
                    }
                  }
                }
              }
            }
            ++v7;
          }
          while (v7 < CFArrayGetCount(v5));
        }
        if (a2 && CFArrayGetCount(v5) >= 1)
        {
          CFIndex v16 = 0;
          CFArrayRef v17 = (const void *)*MEMORY[0x1E4F24D10];
          int8x8_t v18 = (const void *)*MEMORY[0x1E4F24D18];
          do
          {
            CFNumberRef v19 = (const __CFNumber *)CFArrayGetValueAtIndex(v5, v16);
            if (v19)
            {
              CFNumberRef v20 = v19;
              CFTypeID v21 = CFGetTypeID(v19);
              if (v21 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v20, kCFNumberSInt32Type, &valuePtr);
                CFDictionaryRef v22 = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
                if (v22)
                {
                  CFDictionaryRef v23 = v22;
                  if (CFDictionaryContainsKey(v22, v17))
                  {
                    if (!CFDictionaryContainsKey(v23, v18)
                      && VTPixelTransferSessionCanTransfer(valuePtr, valuePtr, 0))
                    {
                      return (const __CFDictionary *)valuePtr;
                    }
                  }
                }
              }
            }
          }
          while (++v16 < CFArrayGetCount(v5));
        }
        OSType valuePtr = 0;
        CFArrayRef v5 = (const __CFArray *)CFArrayGetValueAtIndex(v5, 0);
        if (!v5) {
          return (const __CFDictionary *)valuePtr;
        }
      }
      else
      {
        CFTypeID v24 = CFGetTypeID(v5);
        if (v24 != CFNumberGetTypeID()) {
          return (const __CFDictionary *)valuePtr;
        }
      }
      CFTypeID v25 = CFGetTypeID(v5);
      if (v25 == CFNumberGetTypeID()) {
        CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
      }
      return (const __CFDictionary *)valuePtr;
    }
  }
  return result;
}

uint64_t vtCreateOrReuseSharedPixelBufferPool(const __CFAllocator *a1, const void *a2, const __CFDictionary *a3, const __CFArray *a4, const void *a5, void *a6, char *a7)
{
  CFTypeRef cf = 0;
  MEMORY[0x199705810](&vtCreateOrReuseSharedPixelBufferPool_sInitializeVTPSharedPoolOnce, vtInitializeVTPSharedPool);
  unint64_t v11 = 0x1E9334000uLL;
  MEMORY[0x1997056B0](gVTPSharedPool_0);
  unint64_t v12 = 0x1E9334000uLL;
  uint64_t v13 = (void *)gVTPSharedPool_1;
  if (!gVTPSharedPool_1) {
    goto LABEL_28;
  }
  CFIndex v44 = a7;
  CFArrayRef v14 = 0;
  do
  {
    while (1)
    {
      while (1)
      {
        CFTypeID v15 = (CFArrayRef *)v13;
        uint64_t v13 = (void *)*v13;
        CFIndex Count = CFArrayGetCount(v15[2]);
        if (Count >= 1)
        {
          CFIndex v17 = 0;
          do
          {
            CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v15[2], v17);
            if (*ValueAtIndex)
            {
              ++v17;
            }
            else
            {
              CFNumberRef v19 = ValueAtIndex;
              MEMORY[0x199704CF0]();
              CFNumberRef v20 = (const void *)v19[1];
              if (v20)
              {
                CFRelease(v20);
                v19[1] = 0;
              }
              CFTypeID v21 = (const void *)v19[2];
              if (v21)
              {
                CFRelease(v21);
                v19[2] = 0;
              }
              CFArrayRemoveValueAtIndex(v15[2], v17);
              free(v19);
              --Count;
            }
          }
          while (v17 < Count);
        }
        if (v15[1] != a4) {
          break;
        }
        CFArrayRef v14 = v15;
        if (!v13) {
          goto LABEL_26;
        }
      }
      if (!Count) {
        break;
      }
      if (!v13) {
        goto LABEL_26;
      }
    }
    CFArrayRef v22 = v15[2];
    if (v22)
    {
      CFRelease(v22);
      v15[2] = 0;
    }
    v15[1] = 0;
    CFDictionaryRef v23 = (uint64_t *)gVTPSharedPool_1;
    if ((CFArrayRef *)gVTPSharedPool_1 == v15)
    {
      CFTypeID v24 = &gVTPSharedPool_1;
    }
    else
    {
      do
      {
        CFTypeID v24 = v23;
        CFDictionaryRef v23 = (uint64_t *)*v23;
      }
      while (v23 != (uint64_t *)v15);
    }
    *CFTypeID v24 = (uint64_t)*v15;
    free(v15);
  }
  while (v13);
LABEL_26:
  unint64_t v11 = 0x1E9334000;
  a7 = v44;
  unint64_t v12 = 0x1E9334000;
  if (v14)
  {
    CFArrayRef Mutable = v14[2];
  }
  else
  {
LABEL_28:
    CFDictionaryRef v26 = (CFArrayRef *)malloc_type_calloc(1uLL, 0x18uLL, 0x102004014030ADEuLL);
    CFArrayRef v14 = v26;
    if (!v26 || (v26[1] = a4, CFArrayRef Mutable = CFArrayCreateMutable(0, 0, 0), (v14[2] = Mutable) == 0))
    {
      uint64_t v38 = FigSignalErrorAt();
      uint64_t v31 = 0;
      goto LABEL_47;
    }
    *CFArrayRef v14 = *(CFArrayRef *)(v12 + 1576);
    *(void *)(v12 + 1576) = v14;
  }
  CFIndex v27 = CFArrayGetCount(Mutable);
  if (v27 >= 1)
  {
    CFIndex v28 = v27;
    CFIndex v29 = 0;
    while (1)
    {
      CFTypeRef v30 = CFArrayGetValueAtIndex(v14[2], v29);
      if (FigCFEqual())
      {
        if (FigCFEqual()) {
          break;
        }
      }
      if (v28 == ++v29) {
        goto LABEL_36;
      }
    }
    CFTypeRef v37 = (CFTypeRef)MEMORY[0x199704D30](v30);
    CFTypeRef cf = v37;
    if (v37)
    {
      char v36 = 1;
      CFTypeID v35 = a6;
      goto LABEL_45;
    }
    MEMORY[0x199704CF0](v30);
    OSType v42 = (const void *)v30[1];
    if (v42)
    {
      CFRelease(v42);
      v30[1] = 0;
    }
    CFIndex v43 = (const void *)v30[2];
    if (v43)
    {
      CFRelease(v43);
      v30[2] = 0;
    }
    CFArrayRemoveValueAtIndex(v14[2], v29);
    free(v30);
  }
LABEL_36:
  uint64_t v31 = malloc_type_calloc(1uLL, 0x18uLL, 0x6004082687C62uLL);
  if (!v31)
  {
    uint64_t NamedPixelBufferPool = FigSignalErrorAt();
    goto LABEL_67;
  }
  uint64_t NamedPixelBufferPool = vtCreateNamedPixelBufferPool(a1, a2, a3, a5, (CVPixelBufferPoolRef *)&cf);
  if (NamedPixelBufferPool)
  {
LABEL_67:
    uint64_t v38 = NamedPixelBufferPool;
    CFArrayRef v14 = 0;
    goto LABEL_47;
  }
  FigCFWeakReferenceInit();
  if (a3) {
    CFTypeRef v33 = CFRetain(a3);
  }
  else {
    CFTypeRef v33 = 0;
  }
  v31[1] = v33;
  if (a2) {
    CFTypeRef v34 = CFRetain(a2);
  }
  else {
    CFTypeRef v34 = 0;
  }
  CFTypeID v35 = a6;
  v31[2] = v34;
  CFArrayAppendValue(v14[2], v31);
  char v36 = 0;
  CFTypeRef v37 = cf;
LABEL_45:
  *CFTypeID v35 = v37;
  CFTypeRef cf = 0;
  uint64_t v38 = 0;
  CFArrayRef v14 = 0;
  uint64_t v31 = 0;
  if (a7) {
    *a7 = v36;
  }
LABEL_47:
  MEMORY[0x1997056C0](*(void *)(v11 + 1568));
  if (cf) {
    CFRelease(cf);
  }
  if (v31)
  {
    FigCFWeakReferenceStore();
    CFTypeID v39 = (const void *)v31[1];
    if (v39) {
      CFRelease(v39);
    }
    free(v31);
  }
  if (v14)
  {
    CFArrayRef v40 = v14[2];
    if (v40) {
      CFRelease(v40);
    }
    free(v14);
  }
  return v38;
}

uint64_t vtCreateNamedPixelBufferPool(CFAllocatorRef allocator, CFTypeRef cf, CFDictionaryRef pixelBufferAttributes, const void *a4, CVPixelBufferPoolRef *poolOut)
{
  if (a4)
  {
    CFArrayRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      CFDictionaryRef v10 = MutableCopy;
      CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D98], a4);
      uint64_t v11 = CVPixelBufferPoolCreate(allocator, v10, pixelBufferAttributes, poolOut);
LABEL_4:
      CFRelease(v10);
      return v11;
    }
    return FigSignalErrorAt();
  }
  else
  {
    if (cf)
    {
      CFDictionaryRef v10 = (const __CFDictionary *)CFRetain(cf);
      uint64_t v11 = CVPixelBufferPoolCreate(allocator, v10, pixelBufferAttributes, poolOut);
      if (!v10) {
        return v11;
      }
      goto LABEL_4;
    }
    return CVPixelBufferPoolCreate(allocator, 0, pixelBufferAttributes, poolOut);
  }
}

uint64_t vtCreateReorderedPixelBufferAttributes(const __CFAllocator *a1, CFDictionaryRef theDict, const __CFDictionary *a3, __CFDictionary **a4)
{
  if (!theDict)
  {
    CFIndex v29 = 0;
LABEL_81:
    uint64_t v75 = 0;
    *a4 = v29;
    return v75;
  }
  CFTypeID v8 = (const void *)*MEMORY[0x1E4F24D70];
  CFArrayRef Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F24D70]);
  if (!Value) {
    goto LABEL_80;
  }
  CFDictionaryRef v10 = Value;
  CFTypeID TypeID = CFArrayGetTypeID();
  CFTypeID v12 = CFGetTypeID(v10);
  if (!a3) {
    goto LABEL_80;
  }
  if (TypeID != v12) {
    goto LABEL_80;
  }
  uint64_t v13 = CFDictionaryGetValue(a3, v8);
  if (!v13) {
    goto LABEL_80;
  }
  CFArrayRef v14 = v13;
  CFTypeID v15 = CFGetTypeID(v13);
  if (v15 != CFNumberGetTypeID())
  {
    CFTypeID v16 = CFGetTypeID(v14);
    if (v16 != CFArrayGetTypeID())
    {
      return FigSignalErrorAt();
    }
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)v10);
  if (Count < 2 || (CFIndex v18 = Count, (MutableCopy = CFArrayCreateMutableCopy(a1, 0, (CFArrayRef)v10)) == 0))
  {
LABEL_80:
    CFIndex v29 = (__CFDictionary *)CFRetain(theDict);
    goto LABEL_81;
  }
  CFMutableArrayRef v20 = MutableCopy;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
LABEL_79:
    CFRelease(v20);
    goto LABEL_80;
  }
  CFAllocatorRef allocator = a1;
  theArray = Mutable;
  CFTypeID v22 = CFArrayGetTypeID();
  CFIndex range = v18;
  if (v22 == CFGetTypeID(v14))
  {
    CFIndex v23 = CFArrayGetCount((CFArrayRef)v14);
    if (v23 >= 1)
    {
      CFIndex v24 = v23;
      CFIndex v25 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v14, v25);
        CFTypeID v27 = CFNumberGetTypeID();
        if (v27 == CFGetTypeID(ValueAtIndex))
        {
          v83.location = 0;
          v83.length = range;
          FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v20, v83, ValueAtIndex);
          if (FirstIndexOfValue != -1) {
            break;
          }
        }
        if (v24 == ++v25) {
          goto LABEL_21;
        }
      }
      CFIndex v47 = FirstIndexOfValue;
      CFArrayRef v32 = theArray;
      CFArrayAppendValue(theArray, ValueAtIndex);
      CFTypeRef v33 = v20;
      CFIndex v34 = v47;
LABEL_34:
      CFArrayRemoveValueAtIndex(v33, v34);
      goto LABEL_73;
    }
  }
  else
  {
    v84.location = 0;
    v84.length = v18;
    CFIndex v30 = CFArrayGetFirstIndexOfValue(v20, v84, v14);
    if (v30 != -1)
    {
      CFIndex v31 = v30;
      CFArrayRef v32 = theArray;
      CFArrayAppendValue(theArray, v14);
      CFTypeRef v33 = v20;
      CFIndex v34 = v31;
      goto LABEL_34;
    }
  }
LABEL_21:
  CFTypeID v35 = CFArrayGetTypeID();
  if (v35 != CFGetTypeID(v14))
  {
    SimilarPixelFormat = (const void *)vtCreateSimilarPixelFormat((const __CFNumber *)v14);
    if (SimilarPixelFormat)
    {
      OSType v42 = SimilarPixelFormat;
      v86.location = 0;
      v86.length = range;
      CFIndex v45 = CFArrayGetFirstIndexOfValue(v20, v86, SimilarPixelFormat);
      CFArrayRef v32 = theArray;
      if (v45 != -1)
      {
        CFIndex v46 = v45;
        goto LABEL_72;
      }
      CFRelease(v42);
    }
LABEL_36:
    CFTypeID v48 = CFNumberGetTypeID();
    CFArrayRef v32 = theArray;
    if (v48 == CFGetTypeID(v14))
    {
      unsigned int PixelFormatColorSpace = vtGetPixelFormatColorSpace((const __CFNumber *)v14);
      int PixelFormatRange = vtGetPixelFormatRange((uint64_t)v14);
      int PixelFormatBitsPerComponent = vtGetPixelFormatBitsPerComponent((const __CFNumber *)v14);
      unsigned int v77 = PixelFormatColorSpace;
      if (PixelFormatColorSpace)
      {
LABEL_38:
        signed int v51 = PixelFormatBitsPerComponent;
        if (PixelFormatBitsPerComponent < 1)
        {
          int v52 = 0;
        }
        else
        {
          int v52 = 0;
          CFIndex v53 = 0;
          CFIndex v54 = range;
          do
          {
            CFNumberRef v55 = (const __CFNumber *)CFArrayGetValueAtIndex(v20, v53);
            signed int v56 = vtGetPixelFormatBitsPerComponent(v55);
            if (v56 < v51)
            {
              CFArrayRemoveValueAtIndex(v20, v53);
              CFArrayAppendValue(v20, v55);
              --v53;
              --v54;
            }
            if (v52 <= v56) {
              int v52 = v56;
            }
            ++v53;
          }
          while (v53 < v54);
        }
        CFArrayRef v32 = theArray;
        if (v52 < v51)
        {
          CFIndex v64 = 0;
          CFIndex v65 = range;
          do
          {
            BOOL v66 = CFArrayGetValueAtIndex(v20, v64);
            if ((int)vtGetPixelFormatBitsPerComponent((const __CFNumber *)v66) < v52)
            {
              CFArrayRemoveValueAtIndex(v20, v64);
              CFArrayAppendValue(v20, v66);
              --v64;
              --v65;
            }
            ++v64;
          }
          while (v64 < v65);
        }
        if (PixelFormatRange && v77 >= 2)
        {
          CFIndex v67 = 0;
          CFIndex v68 = range;
          do
          {
            uint64_t v69 = CFArrayGetValueAtIndex(v20, v67);
            if (vtGetPixelFormatRange((uint64_t)v69) != PixelFormatRange)
            {
              CFArrayRemoveValueAtIndex(v20, v67);
              CFArrayAppendValue(v20, v69);
              --v67;
              --v68;
            }
            ++v67;
          }
          while (v67 < v68);
        }
        int v70 = 0;
        for (CFIndex i = 0; i != range; ++i)
        {
          int v72 = CFArrayGetValueAtIndex(v20, i);
          if (vtGetPixelFormatColorSpace((const __CFNumber *)v72) == v77) {
            CFArrayInsertValueAtIndex(theArray, v70++, v72);
          }
          else {
            CFArrayAppendValue(theArray, v72);
          }
        }
        goto LABEL_74;
      }
    }
    else
    {
      CFTypeID v57 = CFArrayGetTypeID();
      if (v57 == CFGetTypeID(v14))
      {
        CFIndex v58 = CFArrayGetCount((CFArrayRef)v14);
        if (v58 >= 1)
        {
          CFIndex v59 = v58;
          CFIndex v60 = 0;
          while (1)
          {
            CFNumberRef v61 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v14, v60);
            CFTypeID v62 = CFNumberGetTypeID();
            if (v62 == CFGetTypeID(v61))
            {
              unsigned int v63 = vtGetPixelFormatColorSpace(v61);
              if (v63) {
                break;
              }
            }
            if (v59 == ++v60) {
              goto LABEL_78;
            }
          }
          unsigned int v77 = v63;
          int PixelFormatRange = vtGetPixelFormatRange((uint64_t)v61);
          int PixelFormatBitsPerComponent = vtGetPixelFormatBitsPerComponent(v61);
          goto LABEL_38;
        }
      }
    }
LABEL_78:
    CFRelease(v32);
    goto LABEL_79;
  }
  CFIndex v36 = CFArrayGetCount((CFArrayRef)v14);
  if (v36 < 1) {
    goto LABEL_36;
  }
  CFIndex v37 = v36;
  CFIndex v38 = 0;
  while (1)
  {
    CFTypeID v39 = CFArrayGetValueAtIndex((CFArrayRef)v14, v38);
    CFTypeID v40 = CFNumberGetTypeID();
    if (v40 != CFGetTypeID(v39)) {
      goto LABEL_28;
    }
    CFMutableDictionaryRef v41 = (const void *)vtCreateSimilarPixelFormat((const __CFNumber *)v39);
    if (!v41) {
      goto LABEL_28;
    }
    OSType v42 = v41;
    v85.location = 0;
    v85.length = range;
    CFIndex v43 = CFArrayGetFirstIndexOfValue(v20, v85, v41);
    if (v43 != -1) {
      break;
    }
    CFRelease(v42);
LABEL_28:
    if (v37 == ++v38) {
      goto LABEL_36;
    }
  }
  CFIndex v46 = v43;
  CFArrayRef v32 = theArray;
LABEL_72:
  CFArrayAppendValue(v32, v42);
  CFArrayRemoveValueAtIndex(v20, v46);
  CFRelease(v42);
LABEL_73:
  v87.length = CFArrayGetCount(v20);
  v87.location = 0;
  CFArrayAppendArray(v32, v20, v87);
LABEL_74:
  if (CFArrayGetCount(v32) <= 0) {
    goto LABEL_78;
  }
  CFRelease(v20);
  CFDictionaryRef v73 = CFDictionaryCreateMutableCopy(allocator, 0, theDict);
  if (v73)
  {
    size_t v74 = v73;
    CFDictionarySetValue(v73, v8, v32);
    uint64_t v75 = 0;
    *a4 = v74;
  }
  else
  {
    uint64_t v75 = 4294954392;
  }
  CFRelease(v32);
  return v75;
}

void vtAllowTransferCapabilityCommonOnce_0()
{
  CFPropertyListRef v0 = CFPreferencesCopyValue(@"allowMetalTransferSession", @"com.apple.coremedia", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  sAllowMetalTransferSession_0 = FigCFEqual() != 0;
  if (v0)
  {
    CFRelease(v0);
  }
}

uint64_t vtPixelFormatContainsAlpha(const __CFNumber *a1)
{
  unsigned __int8 v4 = 0;
  OSType valuePtr = 0;
  CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryRef v1 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E4F1CF80], valuePtr);
  FigCFDictionaryGetBooleanIfPresent();
  if (v1) {
    CFRelease(v1);
  }
  return v4;
}

CFMutableArrayRef vtCreateReorderedPixelFormatArray(const __CFAllocator *a1, CFArrayRef theArray, __CFArray *a3)
{
  CFMutableArrayRef v3 = a3;
  if (a3)
  {
    if (CFArrayGetCount(theArray) < 2) {
      return 0;
    }
    CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(a1, 0, theArray);
    if (!MutableCopy) {
      return 0;
    }
    CFMutableArrayRef v7 = MutableCopy;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
    if (!Mutable)
    {
      CFMutableArrayRef v3 = 0;
      CFMutableArrayRef v9 = v7;
      goto LABEL_47;
    }
    CFMutableArrayRef v9 = Mutable;
    CFTypeID v10 = CFGetTypeID(v3);
    if (v10 == CFNumberGetTypeID())
    {
      uint64_t v11 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
      CFArrayAppendValue(v11, v3);
      if (!v11)
      {
LABEL_26:
        CFRelease(v7);
        CFMutableArrayRef v3 = 0;
LABEL_47:
        CFRelease(v9);
        return v3;
      }
    }
    else
    {
      CFTypeID v12 = CFGetTypeID(v3);
      if (v12 != CFArrayGetTypeID()) {
        goto LABEL_26;
      }
      uint64_t v11 = (__CFArray *)CFRetain(v3);
      if (!v11) {
        goto LABEL_26;
      }
    }
    if (!CFArrayGetCount(v11)) {
      goto LABEL_45;
    }
    if (CFArrayGetCount(v11) >= 1)
    {
      int v26 = 0;
      CFIndex v13 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v11, v13);
        v28.length = CFArrayGetCount(v7);
        v28.location = 0;
        FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v7, v28, ValueAtIndex);
        if (FirstIndexOfValue != -1)
        {
          CFIndex v16 = FirstIndexOfValue;
          CFArrayAppendValue(v9, ValueAtIndex);
          CFArrayRemoveValueAtIndex(v7, v16);
        }
        int valuePtr = 0;
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        if (valuePtr <= 1111970368)
        {
          if (valuePtr != 32 && valuePtr != 1094862674)
          {
LABEL_22:
            if (vtPixelFormatContainsAlpha((const __CFNumber *)ValueAtIndex)) {
              int v26 = 1;
            }
          }
        }
        else if (valuePtr != 1111970369 && valuePtr != 1647719521 && valuePtr != 1380401729)
        {
          goto LABEL_22;
        }
        if (++v13 >= CFArrayGetCount(v11)) {
          goto LABEL_28;
        }
      }
    }
    int v26 = 0;
LABEL_28:
    if (!CFArrayGetCount(v9) && CFArrayGetCount(v11) >= 1)
    {
      CFIndex v17 = 0;
      do
      {
        CFNumberRef v18 = (const __CFNumber *)CFArrayGetValueAtIndex(v11, v17);
        uint64_t SimilarPixelFormat = vtCreateSimilarPixelFormat(v18);
        if (SimilarPixelFormat)
        {
          CFMutableArrayRef v20 = (const void *)SimilarPixelFormat;
          v29.length = CFArrayGetCount(v7);
          v29.location = 0;
          CFIndex v21 = CFArrayGetFirstIndexOfValue(v7, v29, v20);
          if (v21 != -1)
          {
            CFIndex v22 = v21;
            CFArrayAppendValue(v9, v20);
            CFArrayRemoveValueAtIndex(v7, v22);
          }
          CFRelease(v20);
        }
        ++v17;
      }
      while (v17 < CFArrayGetCount(v11));
    }
    if (v26 && CFArrayGetCount(v7) >= 1)
    {
      CFIndex v23 = 0;
      do
      {
        CFIndex v24 = CFArrayGetValueAtIndex(v7, v23);
        if (vtPixelFormatContainsAlpha((const __CFNumber *)v24))
        {
          CFArrayAppendValue(v9, v24);
          CFArrayRemoveValueAtIndex(v7, v23);
        }
        else
        {
          ++v23;
        }
      }
      while (v23 < CFArrayGetCount(v7));
    }
    if (CFArrayGetCount(v9) >= 1)
    {
      v30.length = CFArrayGetCount(v7);
      v30.location = 0;
      CFArrayAppendArray(v9, v7, v30);
      CFMutableArrayRef v3 = v9;
      CFMutableArrayRef v9 = 0;
    }
    else
    {
LABEL_45:
      CFMutableArrayRef v3 = 0;
    }
    CFRelease(v11);
    CFRelease(v7);
    if (v9) {
      goto LABEL_47;
    }
  }
  return v3;
}

uint64_t vtAddNumberToCFDictionary(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v5) {
    return 4294954392;
  }
  CFNumberRef v6 = v5;
  CFDictionaryAddValue(a1, a2, v5);
  CFRelease(v6);
  return 0;
}

BOOL vtIsPixelFormatCompatibleWithAttributes(void *a1, uint64_t a2)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  CFDictionaryRef resolvedDictionaryOut = 0;
  if (!a2) {
    return 1;
  }
  CFMutableArrayRef v3 = (void *)*MEMORY[0x1E4F24D70];
  uint64_t v10 = 0;
  keys[0] = v3;
  values = a1;
  CFDictionaryRef v4 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  values = v4;
  uint64_t v10 = a2;
  CFArrayRef v5 = CFArrayCreate(0, (const void **)&values, 2, MEMORY[0x1E4F1D510]);
  CVReturn v6 = CVPixelBufferCreateResolvedAttributesDictionary(0, v5, &resolvedDictionaryOut);
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (resolvedDictionaryOut) {
    CFRelease(resolvedDictionaryOut);
  }
  return v6 == 0;
}

uint64_t vtCreateSimilarPixelFormat(const __CFNumber *a1)
{
  int valuePtr = 0;
  CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr == 1111970369 || valuePtr == 32) {
    return FigCFNumberCreateSInt32();
  }
  else {
    return 0;
  }
}

const void *vtPixelFormatRequiresRGhAFallback(const void *result)
{
  if (result)
  {
    CFTypeID v1 = CFGetTypeID(result);
    uint64_t result = 0;
    if (v1 == CFNumberGetTypeID())
    {
      int UInt64 = FigCFNumberGetUInt64();
      if (UInt64 == 1647392369 || UInt64 == 1651521076 || UInt64 == 1651519798) {
        return (const void *)1;
      }
    }
  }
  return result;
}

uint64_t vtInitializeVTPSharedPool()
{
  uint64_t result = FigSimpleMutexCreate();
  gVTPSharedPool_0 = result;
  return result;
}

CFNumberRef vtGetPixelFormatColorSpace(const __CFNumber *result)
{
  int valuePtr = 0;
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    uint64_t result = (const __CFNumber *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
    if (result)
    {
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      return 0;
    }
  }
  return result;
}

uint64_t vtGetPixelFormatRange(uint64_t result)
{
  int valuePtr = 0;
  if (result)
  {
    CFNumberGetValue((CFNumberRef)result, kCFNumberSInt32Type, &valuePtr);
    uint64_t result = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
    if (result)
    {
      CFDictionaryGetValue((CFDictionaryRef)result, (const void *)*MEMORY[0x1E4F24E50]);
      if (FigCFEqual())
      {
        return 1;
      }
      else if (FigCFEqual())
      {
        return 2;
      }
      else if (FigCFEqual())
      {
        return 3;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

CFNumberRef vtGetPixelFormatBitsPerComponent(const __CFNumber *result)
{
  int valuePtr = 0;
  unsigned int v1 = 0;
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    uint64_t result = (const __CFNumber *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
    if (result)
    {
      uint64_t result = (const __CFNumber *)CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E4F24E20]);
      if (result)
      {
        CFNumberGetValue(result, kCFNumberSInt32Type, &v1);
        return (const __CFNumber *)v1;
      }
    }
  }
  return result;
}

OSStatus VTSessionCopySupportedPropertyDictionary(VTSessionRef session, CFDictionaryRef *supportedPropertyDictionaryOut)
{
  if (session
    && (CFDictionaryRef v4 = (const void *)CFGetTypeID(session),
        CallbacksWithCFTypeID TypeID = VTSessionGetCallbacksWithTypeID(v4),
        supportedPropertyDictionaryOut)
    && CallbacksWithTypeID)
  {
    CVReturn v6 = (uint64_t (*)(VTSessionRef, CFDictionaryRef *))CallbacksWithTypeID[1];
    return v6(session, supportedPropertyDictionaryOut);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

OSStatus VTSessionCopySerializableProperties(VTSessionRef session, CFAllocatorRef allocator, CFDictionaryRef *dictionaryOut)
{
  if (session
    && (CVReturn v6 = (const void *)CFGetTypeID(session), CallbacksWithTypeID = VTSessionGetCallbacksWithTypeID(v6),
                                                 dictionaryOut)
    && CallbacksWithTypeID)
  {
    CFTypeID v8 = (uint64_t (*)(VTSessionRef, CFAllocatorRef, CFDictionaryRef *))CallbacksWithTypeID[5];
    return v8(session, allocator, dictionaryOut);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTHDRMetadataGenerationSessionGetTypeID()
{
  return sVTHDRMetadataGenerationSessionID;
}

uint64_t RegisterVTHDRMetadataGenerationSession()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sVTHDRMetadataGenerationSessionID = result;
  return result;
}

uint64_t VTHDRMetadataGenerationSessionCreate(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  if (!a4) {
    return 4294954394;
  }
  char v5 = a2;
  if (a2 == 2 || a2 == 4)
  {
    MEMORY[0x199705810](&VTHDRMetadataGenerationSessionGetTypeID_sRegisterVTHDRMetadataGenerationSessionOnce, RegisterVTHDRMetadataGenerationSession);
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v7 = Instance;
      uint64_t result = 0;
      *(unsigned char *)(v7 + 17) = v5;
      *(unsigned char *)(v7 + 32) = 1;
      *(void *)(v7 + 24) = 0;
      *(_DWORD *)(v7 + 144) = 1106247680;
      *a4 = v7;
    }
    else
    {
      return 4294954392;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t VTHDRMetadataGenerationSessionSetFramesPerSecond(uint64_t a1, float a2)
{
  if (a2 <= 0.0 || a2 > 240.0) {
    return FigSignalErrorAt();
  }
  *(float *)(a1 + 144) = a2;
  return 0;
}

uint64_t VTHDRMetadataGenerationSessionCreatePaddingNALUForEncoder(uint64_t a1, const __CFData **a2)
{
  if (!a2)
  {
    uint64_t v8 = FigSignalErrorAt();
    CFDictionaryRef v4 = 0;
    goto LABEL_6;
  }
  CFDictionaryRef v4 = (UInt8 *)malloc_type_malloc(0x1F4uLL, 0x1E5E3068uLL);
  if (!v4) {
    goto LABEL_7;
  }
  uint64_t v5 = FigHEVCBridge_WritePaddingNALU();
  if (v5)
  {
LABEL_8:
    uint64_t v8 = v5;
    goto LABEL_6;
  }
  CFDataRef v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 500);
  if (!v6)
  {
LABEL_7:
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_8;
  }
  CFDataRef v7 = v6;
  uint64_t v8 = 0;
  *(void *)(a1 + 24) = CFDataGetLength(v6);
  *a2 = v7;
LABEL_6:
  free(v4);
  return v8;
}

uint64_t VTHDRMetadataGenerationSessionCreateDataFromStatisticsDictionary(uint64_t a1, int a2, char a3, uint64_t a4, int a5, uint64_t a6, CGFloat a7, CGFloat a8)
{
  if (!a4)
  {
    return FigSignalErrorAt();
  }
  CFMutableArrayRef v20 = 0;
  CFIndex v21 = 0;
  memset(v19, 0, 108);
  memset(v18, 0, 108);
  if (FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent()
    || FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent())
  {
    uint64_t result = getValuesFromDictionary(v20, (uint64_t)v18, a7, a8);
    if (!result)
    {
      if (!BYTE5(v18[6])) {
        BYTE4(v18[6]) = a3;
      }
      return createDataFromStatistics(a1, a2, (uint64_t)v18, 1, 1, a6);
    }
    return result;
  }
  if (!FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent()
    && !FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent())
  {
    return FigSignalErrorAt();
  }
  uint64_t result = getValuesFromDictionary(v21, (uint64_t)v19, a7, a8);
  if (!result)
  {
    if (!BYTE5(v19[6])) {
      BYTE4(v19[6]) = a3;
    }
    uint64_t DataFromStatistics = createDataFromStatistics(a1, a2, (uint64_t)v19, a5, 0, a6);
    uint64_t result = 0;
    if (DataFromStatistics) {
      return DataFromStatistics;
    }
  }
  return result;
}

uint64_t getValuesFromDictionary(const void *a1, uint64_t a2, CGFloat a3, CGFloat a4)
{
  memset(&v41, 0, sizeof(v41));
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  float v38 = 0.0;
  memset(&rect, 0, sizeof(rect));
  if (FigCFDictionaryGetFloat32IfPresent()) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = FigCFDictionaryGetFloat32IfPresent() != 0;
  }
  if (FigCFDictionaryGetFloat32IfPresent()) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = FigCFDictionaryGetFloat32IfPresent() != 0;
  }
  if (FigCFDictionaryGetFloat32IfPresent()) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = FigCFDictionaryGetFloat32IfPresent() != 0;
  }
  if (FigCFDictionaryGetFloat32IfPresent()) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = FigCFDictionaryGetFloat32IfPresent() != 0;
  }
  if (FigCFDictionaryGetFloat32IfPresent()) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = FigCFDictionaryGetFloat32IfPresent() != 0;
  }
  int v13 = v8 && v9 && v10;
  double v14 = 0.0;
  if (v13 == 1)
  {
    double v15 = *((float *)&v40 + 1);
    double v16 = 1.0;
    if (*((float *)&v40 + 1) > 1.0) {
      double v15 = 1.0;
    }
    if (*((float *)&v40 + 1) >= 0.0) {
      double v17 = v15;
    }
    else {
      double v17 = 0.0;
    }
    double v18 = *(float *)&v40;
    if (*(float *)&v40 > 1.0) {
      double v18 = 1.0;
    }
    if (*(float *)&v40 >= 0.0) {
      double v19 = v18;
    }
    else {
      double v19 = 0.0;
    }
    if (*((float *)&v39 + 1) <= 1.0) {
      double v16 = *((float *)&v39 + 1);
    }
    if (*((float *)&v39 + 1) >= 0.0) {
      double v20 = v16;
    }
    else {
      double v20 = 0.0;
    }
    char v21 = 1;
  }
  else
  {
    char v21 = 0;
    double v19 = 0.0;
    double v20 = 0.0;
    double v17 = 0.0;
  }
  if (v11 && v12)
  {
    double v22 = v38;
    double v23 = 1.0;
    if (v38 > 1.0) {
      double v22 = 1.0;
    }
    if (v38 >= 0.0) {
      double v14 = v22;
    }
    else {
      double v14 = 0.0;
    }
    if (*(float *)&v39 <= 1.0) {
      double v23 = *(float *)&v39;
    }
    if (*(float *)&v39 >= 0.0) {
      double v24 = v23;
    }
    else {
      double v24 = 0.0;
    }
    char v25 = 1;
  }
  else
  {
    char v25 = 0;
    double v24 = 0.0;
  }
  CFDictionaryRef value = 0;
  if (a1)
  {
    CFTypeID v26 = CFGetTypeID(a1);
    if (v26 == CFDictionaryGetTypeID() && *MEMORY[0x1E4F24BB0])
    {
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, (const void *)*MEMORY[0x1E4F24BB0], (const void **)&value))
      {
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (TypeID == CFGetTypeID(value) && CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)value, &rect))
        {
          CGRect rect = CGRectStandardize(rect);
          v43.origin.CGFloat x = 0.0;
          v43.origin.CGFloat y = 0.0;
          v43.size.CGFloat width = a3;
          v43.size.CGFloat height = a4;
          if (!CGRectContainsRect(v43, rect)) {
            return FigSignalErrorAt();
          }
          CGFloat width = rect.size.width;
          if (rect.size.width <= 0.0) {
            return FigSignalErrorAt();
          }
          CGFloat height = rect.size.height;
          if (rect.size.height <= 0.0) {
            return FigSignalErrorAt();
          }
          if (rect.size.width > 8191.0) {
            return FigSignalErrorAt();
          }
          if (rect.size.height > 8191.0) {
            return FigSignalErrorAt();
          }
          CGFloat x = rect.origin.x;
          if (rect.origin.x > 8191.0) {
            return FigSignalErrorAt();
          }
          CGFloat y = rect.origin.y;
          if (rect.origin.y > 8191.0) {
            return FigSignalErrorAt();
          }
          v44.origin.CGFloat x = 0.0;
          v44.origin.CGFloat y = 0.0;
          v44.size.CGFloat width = a3;
          v44.size.CGFloat height = a4;
          if (!CGRectEqualToRect(*(CGRect *)(&width - 2), v44))
          {
            CGRect v41 = rect;
            char v32 = 1;
            goto LABEL_62;
          }
        }
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  char v32 = 0;
  a4 = 0.0;
  a3 = 0.0;
LABEL_62:
  BOOL v33 = FigCFDictionaryGetInt32IfPresent()
     && FigCFDictionaryGetInt32IfPresent()
     && FigCFDictionaryGetInt32IfPresent();
  if (FigCFDictionaryGetInt32IfPresent())
  {
    char v34 = 1;
    if (v13)
    {
LABEL_69:
      uint64_t result = 0;
      *(double *)a2 = v17;
      *(double *)(a2 + 8) = v19;
      *(double *)(a2 + 16) = v20;
      *(double *)(a2 + 24) = v14;
      *(double *)(a2 + 32) = v24;
      *(_DWORD *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 44) = 0;
      *(_DWORD *)(a2 + 48) = 0;
      *(CGFloat *)(a2 + 52) = a3;
      *(CGFloat *)(a2 + 60) = a4;
      CGSize size = v41.size;
      *(CGPoint *)(a2 + 68) = v41.origin;
      *(CGSize *)(a2 + 84) = size;
      *(unsigned char *)(a2 + 100) = 0;
      *(unsigned char *)(a2 + 101) = v34;
      *(unsigned char *)(a2 + 102) = v21;
      *(unsigned char *)(a2 + 103) = v33;
      *(unsigned char *)(a2 + 104) = v25;
      *(unsigned char *)(a2 + 105) = v32;
      *(_WORD *)(a2 + 106) = 0;
      return result;
    }
  }
  else
  {
    char v34 = 0;
    if (v13) {
      goto LABEL_69;
    }
  }
  return FigSignalErrorAt();
}

uint64_t createDataFromStatistics(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  double v6 = *(double *)a3;
  if (*(double *)a3 >= 0.0 && v6 <= 4095.0)
  {
    double v7 = *(double *)(a3 + 8);
    if (v7 >= 0.0 && v7 <= 4095.0)
    {
      double v8 = *(double *)(a3 + 16);
      if (v8 >= 0.0 && v8 <= 4095.0 && v8 <= v7 && v8 >= v6)
      {
        uint64_t v11 = a1 + 29268;
        if (a2) {
          int v12 = 1;
        }
        else {
          int v12 = 2;
        }
        *(_DWORD *)(a1 + 148) = v12;
        uint64_t v13 = a1 + 148;
        *(unsigned char *)(a1 + 152) = *(unsigned char *)(a3 + 100);
        if (a5 == 1)
        {
          double v15 = *(double *)(a3 + 8);
          double v14 = *(double *)(a3 + 16);
          double v16 = *(double *)(a3 + 24);
          double v17 = *(double *)(a3 + 32);
          int v18 = *(_DWORD *)(a3 + 40);
          int v19 = *(_DWORD *)(a3 + 44);
          int v20 = *(_DWORD *)(a3 + 48);
          double v21 = *(double *)(a3 + 52);
          double v22 = *(double *)(a3 + 60);
          double v23 = *(double *)(a3 + 68);
          double v24 = *(double *)(a3 + 76);
          double v25 = *(double *)(a3 + 84);
          double v26 = *(double *)(a3 + 92);
          int v27 = *(unsigned __int8 *)(a3 + 100);
          __int16 v28 = *(_WORD *)(a3 + 101);
          int v29 = *(unsigned __int8 *)(a3 + 103);
          int v30 = *(unsigned __int8 *)(a3 + 104);
          int v31 = *(unsigned __int8 *)(a3 + 105);
          __int16 v32 = *(_WORD *)(a3 + 106);
          *(double *)(a1 + 36) = v6;
          *(double *)(a1 + 44) = v15;
          *(double *)(a1 + 52) = v14;
          *(double *)(a1 + 60) = v16;
          *(double *)(a1 + 68) = v17;
          *(_DWORD *)(a1 + 76) = v18;
          *(_DWORD *)(a1 + 80) = v19;
          *(_DWORD *)(a1 + 84) = v20;
          *(double *)(a1 + 88) = v21;
          *(double *)(a1 + 96) = v22;
          *(double *)(a1 + 104) = v23;
          *(double *)(a1 + 112) = v24;
          *(double *)(a1 + 120) = v25;
          *(double *)(a1 + 128) = v26;
          *(unsigned char *)(a1 + 136) = v27;
          *(_WORD *)(a1 + 137) = v28;
          *(unsigned char *)(a1 + 139) = v29;
          *(unsigned char *)(a1 + 140) = v30;
          *(unsigned char *)(a1 + 141) = v31;
          *(_WORD *)(a1 + 142) = v32;
          *(unsigned char *)(a1 + 152) = 0;
          *(_DWORD *)(a1 + 29276) = 0;
          *(void *)uint64_t v11 = 0;
          if (v31)
          {
            __int16 v33 = vcvtad_u64_f64(v23);
            __int16 v34 = vcvtad_u64_f64(v24);
            *(_WORD *)(a1 + 29414) = v33;
            *(_WORD *)(a1 + 29418) = v34;
            *(_WORD *)(a1 + 29416) = v21 - (v33 + vcvtad_u64_f64(v25));
            *(_WORD *)(a1 + 29420) = v22 - (v34 + vcvtad_u64_f64(v26));
            *(unsigned char *)(a1 + 29272) = 1;
          }
          *(unsigned char *)uint64_t v11 = 1;
          double v35 = round(v6 * 4095.0);
          if (v35 <= 4095.0) {
            double v36 = v35;
          }
          else {
            double v36 = 4095.0;
          }
          int v37 = (int)v36;
          if (v35 < 0.0) {
            LOWORD(v37) = 0;
          }
          *(_WORD *)(a1 + 29280) = v37;
          double v38 = round(v15 * 4095.0);
          if (v38 <= 4095.0) {
            double v39 = v38;
          }
          else {
            double v39 = 4095.0;
          }
          int v40 = (int)v39;
          if (v38 < 0.0) {
            LOWORD(v40) = 0;
          }
          *(_WORD *)(a1 + 29282) = v40;
          double v41 = round(v14 * 4095.0);
          if (v41 <= 4095.0) {
            double v42 = v41;
          }
          else {
            double v42 = 4095.0;
          }
          int v43 = (int)v42;
          if (v41 < 0.0) {
            LOWORD(v43) = 0;
          }
          *(_WORD *)(a1 + 29284) = v43;
          if (!v27) {
            goto LABEL_119;
          }
          setStaticDMData(a1);
          if (v29)
          {
            *(_WORD *)(v11 + 140) = v18;
            *(_WORD *)(v11 + 136) = v19;
            *(_WORD *)(v11 + 138) = v20;
            *(unsigned char *)(v11 + 2) = 1;
          }
          if (!v30) {
            goto LABEL_119;
          }
          double v44 = round(v17 * 4095.0);
          if (v44 <= 4095.0) {
            double v45 = v44;
          }
          else {
            double v45 = 4095.0;
          }
          int v46 = (int)v45;
          if (v44 < 0.0) {
            LOWORD(v46) = 0;
          }
          double v47 = round(v16 * 4095.0);
          if (v47 <= 4095.0) {
            double v48 = v47;
          }
          else {
            double v48 = 4095.0;
          }
          *(_WORD *)(v11 + 142) = v46;
          if (v47 >= 0.0) {
            LOWORD(v49) = (int)v48;
          }
          else {
            LOWORD(v49) = 0;
          }
        }
        else
        {
          if (*(unsigned __int8 *)(a1 + 32) | a4)
          {
            *(unsigned char *)(a1 + 32) = 0;
            double v50 = *(double *)(a3 + 52);
            double v51 = *(double *)(a3 + 60);
            double v52 = *(double *)(a3 + 68);
            double v53 = *(double *)(a3 + 76);
            double v54 = *(double *)(a3 + 84);
            double v55 = *(double *)(a3 + 92);
            int v56 = *(unsigned __int8 *)(a3 + 100);
            __int16 v141 = *(_WORD *)(a3 + 101);
            char v142 = *(unsigned char *)(a3 + 103);
            int v57 = *(unsigned __int8 *)(a3 + 104);
            int v58 = *(unsigned __int8 *)(a3 + 105);
            __int16 v59 = *(_WORD *)(a3 + 106);
            int v60 = *(_DWORD *)(a3 + 48);
            long long v62 = *(_OWORD *)(a3 + 16);
            long long v61 = *(_OWORD *)(a3 + 32);
            *(_OWORD *)(a1 + 36) = *(_OWORD *)a3;
            *(_OWORD *)(a1 + 52) = v62;
            *(_OWORD *)(a1 + 68) = v61;
            *(_DWORD *)(a1 + 84) = v60;
            *(double *)(a1 + 88) = v50;
            *(double *)(a1 + 96) = v51;
            *(double *)(a1 + 104) = v52;
            *(double *)(a1 + 112) = v53;
            *(double *)(a1 + 120) = v54;
            *(double *)(a1 + 128) = v55;
            *(unsigned char *)(a1 + 136) = v56;
            *(unsigned char *)(a1 + 139) = v142;
            *(_WORD *)(a1 + 137) = v141;
            *(unsigned char *)(a1 + 140) = v57;
            *(unsigned char *)(a1 + 141) = v58;
            *(_WORD *)(a1 + 142) = v59;
            *(unsigned char *)(a1 + 152) = 0;
            *(_DWORD *)(a1 + 29276) = 0;
            *(void *)(a1 + 29268) = 0;
            if (v58)
            {
              __int16 v63 = vcvtad_u64_f64(v52);
              __int16 v64 = vcvtad_u64_f64(v53);
              *(_WORD *)(a1 + 29414) = v63;
              *(_WORD *)(a1 + 29418) = v64;
              *(_WORD *)(a1 + 29416) = v50 - (v63 + vcvtad_u64_f64(v54));
              *(_WORD *)(a1 + 29420) = v51 - (v64 + vcvtad_u64_f64(v55));
              *(unsigned char *)(a1 + 29272) = 1;
            }
            float v65 = *(double *)(a1 + 36);
            float v66 = *(double *)(a1 + 44);
            float v143 = v66;
            float v67 = *(double *)(a1 + 52);
            float v144 = v67;
            float v145 = v65;
            legalizeAndSetLevel1Values(a1, &v145, &v144, &v143);
            if (!v56) {
              goto LABEL_119;
            }
            setStaticDMData(a1);
            double v68 = round(((float)(v67 - v144) + 1.0) * 2048.0);
            if (v68 >= 0.0) {
              __int16 v69 = v68 <= 4095.0 ? (int)v68 : 4095;
            }
            else {
              __int16 v69 = 0;
            }
            *(_WORD *)(v11 + 140) = v69;
            double v103 = round(((float)(v65 - v145) + 1.0) * 2048.0);
            if (v103 >= 0.0) {
              __int16 v104 = v103 <= 4095.0 ? (int)v103 : 4095;
            }
            else {
              __int16 v104 = 0;
            }
            *(_WORD *)(v11 + 136) = v104;
            double v105 = round(((float)(v66 - v143) + 1.0) * 2048.0);
            if (v105 >= 0.0)
            {
              if (v105 <= 4095.0) {
                int v106 = (int)v105;
              }
              else {
                LOWORD(v106) = 4095;
              }
            }
            else
            {
              LOWORD(v106) = 0;
            }
            *(_WORD *)(v11 + 138) = v106;
            *(unsigned char *)(v11 + 2) = 1;
            if (!v57) {
              goto LABEL_119;
            }
            double v111 = round(*(double *)(a1 + 68) * 4095.0);
            if (v111 >= 0.0)
            {
              if (v111 <= 4095.0) {
                int v112 = (int)v111;
              }
              else {
                LOWORD(v112) = 4095;
              }
            }
            else
            {
              LOWORD(v112) = 0;
            }
            *(_WORD *)(v11 + 142) = v112;
            double v113 = *(double *)(a1 + 60);
          }
          else
          {
            double v70 = *(double *)(a3 + 16);
            double v139 = v70;
            double v140 = *(double *)(a3 + 8);
            double v130 = *(double *)(a3 + 24);
            double v131 = *(double *)(a3 + 32);
            double v136 = *(double *)(a3 + 60);
            double v137 = *(double *)(a3 + 52);
            double v134 = *(double *)(a3 + 76);
            double v135 = *(double *)(a3 + 68);
            double v132 = *(double *)(a3 + 92);
            double v133 = *(double *)(a3 + 84);
            int v71 = *(unsigned __int8 *)(a3 + 100);
            int v72 = *(unsigned __int8 *)(a3 + 104);
            int v73 = *(unsigned __int8 *)(a3 + 105);
            *(unsigned char *)(a1 + 152) = 0;
            *(void *)(a1 + 29268) = 0;
            *(_DWORD *)(a1 + 29276) = 0;
            float v74 = *(float *)(a1 + 144);
            double v75 = *(double *)(a1 + 36);
            double v76 = *(double *)(a1 + 44);
            double v77 = *(double *)(a1 + 52);
            double v128 = *(double *)(a1 + 60);
            double v129 = *(double *)(a1 + 68);
            double v78 = v6 - v75;
            if (v6 - v75 <= 0.0) {
              double v78 = -(v6 - v75);
            }
            float v79 = v78;
            float v80 = 1.0 / (expf((float)(v79 + -0.5) * -8.0) + 1.0);
            float v138 = v80;
            double v81 = v70 - v77;
            if (v70 - v77 <= 0.0) {
              double v81 = -(v70 - v77);
            }
            float v82 = v81;
            float v83 = 1.0 / (expf((float)(v82 + -0.25) * -32.0) + 1.0);
            double v84 = v140 - v76;
            if (v140 - v76 <= 0.0) {
              double v84 = -(v140 - v76);
            }
            float v85 = v84;
            float v86 = -0.8;
            if (v76 < v140) {
              float v86 = -0.125;
            }
            float v87 = 1.0 / (expf((float)(v86 + v85) * -8.0) + 1.0);
            float v89 = v6;
            float v90 = 0.8;
            if (v74 > 0.0) {
              float v90 = 24.0 / v74;
            }
            if (v90 <= 1.0) {
              float v91 = v90;
            }
            else {
              float v91 = 1.0;
            }
            float v88 = v75;
            float v92 = (float)((float)(v91 * v138) * v89) + (float)((float)(1.0 - (float)(v91 * v138)) * v88);
            *(double *)(a1 + 36) = v92;
            float v93 = v77;
            float v94 = v139;
            float v95 = (float)((float)(v91 * v83) * v94) + (float)((float)(1.0 - (float)(v91 * v83)) * v93);
            *(double *)(a1 + 52) = v95;
            float v96 = v76;
            float v97 = v140;
            float v98 = (float)((float)(v91 * v87) * v97) + (float)((float)(1.0 - (float)(v91 * v87)) * v96);
            *(double *)(a1 + 44) = v98;
            float v144 = v95;
            float v145 = v92;
            float v143 = v98;
            legalizeAndSetLevel1Values(a1, &v145, &v144, &v143);
            if (v73)
            {
              __int16 v99 = vcvtad_u64_f64(v135);
              *(_WORD *)(v11 + 146) = v99;
              __int16 v100 = vcvtad_u64_f64(v134);
              *(_WORD *)(v11 + 150) = v100;
              *(_WORD *)(v11 + 148) = v137 - (v99 + vcvtad_u64_f64(v133));
              *(_WORD *)(v11 + 152) = v136 - (v100 + vcvtad_u64_f64(v132));
              *(unsigned char *)(v11 + 4) = 1;
              *(double *)(a1 + 88) = v137;
              *(double *)(a1 + 96) = v136;
              *(double *)(a1 + 104) = v135;
              *(double *)(a1 + 112) = v134;
              *(double *)(a1 + 120) = v133;
              *(double *)(a1 + 128) = v132;
              *(unsigned char *)(a1 + 141) = 1;
            }
            if (!v71) {
              goto LABEL_119;
            }
            setStaticDMData(a1);
            double v101 = round(((float)(v95 - v144) + 1.0) * 2048.0);
            if (v101 >= 0.0) {
              __int16 v102 = v101 <= 4095.0 ? (int)v101 : 4095;
            }
            else {
              __int16 v102 = 0;
            }
            *(_WORD *)(v11 + 140) = v102;
            double v107 = round(((float)(v92 - v145) + 1.0) * 2048.0);
            if (v107 >= 0.0) {
              __int16 v108 = v107 <= 4095.0 ? (int)v107 : 4095;
            }
            else {
              __int16 v108 = 0;
            }
            *(_WORD *)(v11 + 136) = v108;
            double v109 = round(((float)(v98 - v143) + 1.0) * 2048.0);
            if (v109 >= 0.0)
            {
              if (v109 <= 4095.0) {
                int v110 = (int)v109;
              }
              else {
                LOWORD(v110) = 4095;
              }
            }
            else
            {
              LOWORD(v110) = 0;
            }
            *(_WORD *)(v11 + 138) = v110;
            *(unsigned char *)(v11 + 2) = 1;
            if (!v72) {
              goto LABEL_119;
            }
            double v114 = v131 - v131;
            if (v131 - v131 <= 0.0) {
              double v114 = -(v131 - v131);
            }
            double v115 = v114 * 8.0 + 0.100000001;
            if (v115 >= 1.0) {
              double v115 = 1.0;
            }
            float v116 = v115;
            float v117 = v128;
            float v118 = v130;
            float v119 = v91 * v116;
            float v120 = 1.0 - (float)(v91 * v116);
            double v113 = (float)((float)((float)(v91 * v116) * v118) + (float)(v120 * v117));
            *(double *)(a1 + 60) = v113;
            float v121 = v129;
            float v122 = v131;
            double v123 = (float)((float)(v119 * v122) + (float)(v120 * v121));
            *(double *)(a1 + 68) = v123;
            *(unsigned char *)(a1 + 140) = 1;
            double v124 = round(v123 * 4095.0);
            if (v124 >= 0.0)
            {
              if (v124 <= 4095.0) {
                __int16 v125 = (int)v124;
              }
              else {
                __int16 v125 = 4095;
              }
            }
            else
            {
              __int16 v125 = 0;
            }
            *(_WORD *)(v11 + 142) = v125;
          }
          double v126 = round(v113 * 4095.0);
          if (v126 >= 0.0)
          {
            if (v126 <= 4095.0) {
              int v49 = (int)v126;
            }
            else {
              LOWORD(v49) = 4095;
            }
          }
          else
          {
            LOWORD(v49) = 0;
          }
        }
        *(_WORD *)(v11 + 144) = v49;
        *(unsigned char *)(v11 + 3) = 1;
LABEL_119:
        return MEMORY[0x1F40DDA28](v13, a6);
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t VTHDRMetadataGenerationSessionCreateDataFromStatistics(uint64_t a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  int v34 = 0;
  memset(v33, 0, sizeof(v33));
  long long v32 = 0u;
  long long v31 = 0u;
  if (*(double *)a4 < 0.0 || *(double *)a4 > 1.0) {
    goto LABEL_37;
  }
  double v7 = *(double *)(a4 + 8);
  if (v7 < 0.0 || v7 > 1.0) {
    goto LABEL_37;
  }
  double v9 = *(double *)(a4 + 16);
  if (v9 < 0.0 || v9 > 1.0) {
    goto LABEL_37;
  }
  v30[0] = *(void *)a4;
  *(double *)&v30[1] = v7;
  *(double *)&v30[2] = v9;
  BYTE14(v33[2]) = 1;
  BYTE12(v33[2]) = *(unsigned char *)(a4 + 100);
  if (*(unsigned char *)(a4 + 104))
  {
    double v16 = *(double *)(a4 + 32);
    if (v16 < 0.0) {
      goto LABEL_37;
    }
    if (v16 > 1.0) {
      goto LABEL_37;
    }
    double v17 = *(double *)(a4 + 24);
    if (v17 < 0.0 || v17 > 1.0) {
      goto LABEL_37;
    }
    LOBYTE(v34) = 1;
    *(double *)&long long v31 = v17;
    *((double *)&v31 + 1) = v16;
  }
  if (!*(unsigned char *)(a4 + 105)
    || (double v18 = *(double *)(a4 + 68), v19 = *(double *)(a4 + 76), v18 == 0.0)
    && v19 == 0.0
    && *(double *)(a4 + 92) == 0.0
    && *(double *)(a4 + 84) == 0.0)
  {
LABEL_33:
    if (a5) {
      BOOL v28 = 1;
    }
    else {
      BOOL v28 = a3 == 0;
    }
    return createDataFromStatistics(a1, a2, (uint64_t)v30, v28, a3 == 0, a6);
  }
  CGFloat v20 = *(double *)(a4 + 52);
  CGFloat v21 = *(double *)(a4 + 60);
  uint64_t v22 = *(void *)(a4 + 84);
  uint64_t v23 = *(void *)(a4 + 92);
  CGRect v36 = CGRectStandardize(*(CGRect *)&v18);
  double x = v36.origin.x;
  double y = v36.origin.y;
  double width = v36.size.width;
  double height = v36.size.height;
  *(CGRect *)((char *)v33 + 12) = v36;
  v36.origin.double x = 0.0;
  v36.origin.double y = 0.0;
  v36.size.double width = v20;
  v36.size.double height = v21;
  v38.origin.double x = x;
  v38.origin.double y = y;
  v38.size.double width = width;
  v38.size.double height = height;
  if (CGRectContainsRect(v36, v38)
    && width > 0.0
    && height > 0.0
    && width <= 8191.0
    && height <= 8191.0
    && x <= 8191.0
    && y <= 8191.0)
  {
    v39.origin.double x = 0.0;
    v39.origin.double y = 0.0;
    v37.origin.double x = x;
    v37.origin.double y = y;
    v37.size.double width = width;
    v37.size.double height = height;
    v39.size.double width = v20;
    v39.size.double height = v21;
    if (!CGRectEqualToRect(v37, v39)) {
      BYTE1(v34) = 1;
    }
    goto LABEL_33;
  }
LABEL_37:

  return FigSignalErrorAt();
}

uint64_t VTHDRMetadataGenerationSessionInsertData(uint64_t a1, CMSampleBufferRef sbuf, const __CFData *a3, CFTypeRef *a4)
{
  unsigned int destination = 0;
  __int16 v22 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef cf = 0;
  if (!a1)
  {
    CopyWithNewSizesAndCMBlockBufferRef DataBuffer = FigSignalErrorAt();
    CFDataRef v5 = 0;
    goto LABEL_29;
  }
  if (!sbuf) {
    goto LABEL_30;
  }
  CFDataRef v5 = a3;
  if (a3)
  {
    if (*(void *)(a1 + 24))
    {
      if (a4)
      {
        if (CMSampleBufferGetNumSamples(sbuf) == 1)
        {
          CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
          if (DataBuffer)
          {
            double v9 = DataBuffer;
            size_t SampleSize = CMSampleBufferGetSampleSize(sbuf, 0);
            unint64_t Length = CFDataGetLength(v5);
            unint64_t v12 = *(void *)(a1 + 24);
            if (v12 < Length) {
              goto LABEL_19;
            }
            size_t v13 = SampleSize - v12;
            if (SampleSize <= v12) {
              goto LABEL_19;
            }
            uint64_t appended = CMBlockBufferCopyDataBytes(v9, SampleSize - v12, 4uLL, &destination);
            if (!appended)
            {
              if (*(void *)(a1 + 24) - 4 != bswap32(destination)) {
                goto LABEL_19;
              }
              uint64_t appended = CMBlockBufferCopyDataBytes(v9, v13 + 4, 1uLL, (char *)&v22 + 1);
              if (!appended)
              {
                if (HIBYTE(v22) != 76) {
                  goto LABEL_19;
                }
                uint64_t appended = CMBlockBufferCopyDataBytes(v9, v13 + 5, 1uLL, &v22);
                if (!appended)
                {
                  if (v22 == 1)
                  {
                    uint64_t appended = writeNALU(v9, v13, (int)Length + 2, v5);
                    if (appended) {
                      goto LABEL_31;
                    }
                    size_t v15 = Length + v13 + 6;
                    uint64_t appended = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v9, 0, v15, 0, &blockBufferOut);
                    if (appended) {
                      goto LABEL_31;
                    }
LABEL_24:
                    CFDataRef v17 = (const __CFData *)malloc_type_malloc(8uLL, 0x100004000313F17uLL);
                    CFDataRef v5 = v17;
                    if (v17)
                    {
                      *(void *)CFDataRef v17 = v15;
                      CopyWithNewSizesAndCMBlockBufferRef DataBuffer = FigSampleBufferCreateCopyWithNewSizesAndDataBuffer();
                      if (CopyWithNewSizesAndDataBuffer)
                      {
                        if (cf) {
                          CFRelease(cf);
                        }
                      }
                      else
                      {
                        *a4 = cf;
                        CFTypeRef cf = 0;
                      }
                    }
                    else
                    {
                      CopyWithNewSizesAndCMBlockBufferRef DataBuffer = 0;
                    }
                    goto LABEL_27;
                  }
LABEL_19:
                  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                  uint64_t appended = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, &blockBufferOut);
                  if (appended) {
                    goto LABEL_31;
                  }
                  uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, v9, 0, SampleSize, 0);
                  if (appended) {
                    goto LABEL_31;
                  }
                  uint64_t appended = CMBlockBufferAppendMemoryBlock(blockBufferOut, 0, Length + 6, v16, 0, 0, Length + 6, 1u);
                  if (appended) {
                    goto LABEL_31;
                  }
                  uint64_t appended = writeNALU(blockBufferOut, SampleSize, (int)Length + 2, v5);
                  if (appended) {
                    goto LABEL_31;
                  }
                  size_t v15 = Length + 6 + SampleSize;
                  goto LABEL_24;
                }
              }
            }
LABEL_31:
            CopyWithNewSizesAndCMBlockBufferRef DataBuffer = appended;
            CFDataRef v5 = 0;
            goto LABEL_27;
          }
        }
      }
    }
LABEL_30:
    uint64_t appended = FigSignalErrorAt();
    goto LABEL_31;
  }
  CopyWithNewSizesAndCMBlockBufferRef DataBuffer = FigSignalErrorAt();
LABEL_27:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
LABEL_29:
  free(v5);
  return CopyWithNewSizesAndDataBuffer;
}

uint64_t writeNALU(OpaqueCMBlockBuffer *a1, size_t a2, int a3, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  size_t Length = CFDataGetLength(theData);
  sourceBytes[0] = HIBYTE(a3);
  sourceBytes[1] = BYTE2(a3);
  sourceBytes[2] = BYTE1(a3);
  sourceBytes[3] = a3;
  __int16 v12 = 380;
  uint64_t result = CMBlockBufferReplaceDataBytes(sourceBytes, a1, a2, 6uLL);
  if (!result) {
    return CMBlockBufferReplaceDataBytes(BytePtr, a1, a2 + 6, Length);
  }
  return result;
}

uint64_t VTHDRMetadataGenerationSessionInvalidate(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 16)) {
    *(unsigned char *)(a1 + 16) = 1;
  }
  return 0;
}

void VTHDRMetadataGenerationSessionInit(uint64_t a1)
{
}

uint64_t VTHDRMetadataGenerationSessionFinalize(uint64_t result)
{
  if (result)
  {
    if (!*(unsigned char *)(result + 16)) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  return result;
}

CFTypeRef VTHDRMetadataGenerationSessionCopyFormattingDesc()
{
  return CFRetain(@"[VTHDRMetadataGenerationSession]");
}

__CFString *VTHDRMetadataGenerationSessionCopyDebugDesc(unsigned __int8 *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<VTHDRMetadataGenerationSession %p [%p]>{invalid:%d, }", a1, v4, a1[16]);
  return Mutable;
}

double setStaticDMData(uint64_t a1)
{
  *(void *)(a1 + 29432) = 0xA00000002;
  *(unsigned char *)(a1 + 29440) = -1;
  *(void *)(a1 + 29442) = 0x80008A00800099ALL;
  *(_DWORD *)(a1 + 29450) = 134219776;
  *(_DWORD *)(a1 + 29472) = 10;
  *(unsigned char *)(a1 + 29476) = 20;
  *(void *)(a1 + 29478) = 0x800076C08000800;
  *(_DWORD *)(a1 + 29486) = 134219776;
  *(unsigned char *)(a1 + 29616) = 0;
  *(void *)(a1 + 29636) = 0x500000002;
  *(unsigned char *)(a1 + 29644) = -1;
  *(_DWORD *)(a1 + 29646) = 3696;
  *(unsigned char *)(a1 + 29650) = 2;
  *(_DWORD *)(a1 + 29668) = 5;
  *(unsigned char *)(a1 + 29672) = 20;
  *(_DWORD *)(a1 + 29674) = 2672;
  *(unsigned char *)(a1 + 29678) = 2;
  double result = 7.74860419e-304;
  *(_DWORD *)(a1 + 29274) = 16843009;
  *(unsigned char *)(a1 + 29752) = 4;
  *(_DWORD *)(a1 + 29753) = 0;
  *(unsigned char *)(a1 + 29757) = 2;
  *(unsigned char *)(a1 + 29278) = 1;
  *(unsigned char *)(a1 + 152) = 1;
  return result;
}

uint64_t legalizeAndSetLevel1Values(uint64_t result, float *a2, float *a3, float *a4)
{
  *a2 = fminf(*a2, 0.0029304);
  *a3 = fmaxf(*a3, 0.2);
  float v4 = fmaxf(*a4, 0.50808);
  *a4 = v4;
  double v5 = v4 + -0.000244200244;
  if (v5 <= *a3)
  {
    float v6 = v5;
    float v7 = v6;
  }
  else
  {
    float v7 = *a3;
  }
  *a3 = v7;
  *(unsigned char *)(result + 29268) = 1;
  double v8 = round(*a2 * 4095.0);
  if (v8 >= 0.0)
  {
    if (v8 <= 4095.0) {
      __int16 v9 = (int)v8;
    }
    else {
      __int16 v9 = 4095;
    }
  }
  else
  {
    __int16 v9 = 0;
  }
  *(_WORD *)(result + 29280) = v9;
  double v10 = round(*a4 * 4095.0);
  if (v10 >= 0.0)
  {
    if (v10 <= 4095.0) {
      __int16 v11 = (int)v10;
    }
    else {
      __int16 v11 = 4095;
    }
  }
  else
  {
    __int16 v11 = 0;
  }
  *(_WORD *)(result + 29282) = v11;
  double v12 = round(v7 * 4095.0);
  if (v12 >= 0.0)
  {
    if (v12 <= 4095.0) {
      int v13 = (int)v12;
    }
    else {
      LOWORD(v13) = 4095;
    }
  }
  else
  {
    LOWORD(v13) = 0;
  }
  *(_WORD *)(result + 29284) = v13;
  return result;
}

uint64_t vtCreateVideoDecoderRegistry()
{
  return FigRegistryCreate();
}

uint64_t vtRegisterVideoDecoderInternal(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  if (VTParavirtualizationIsRunningInGuest())
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    __int16 v11 = Mutable;
    CFDictionarySetValue(Mutable, @"CMClassID", @"com.apple.videotoolbox.videodecoder");
    CFDictionarySetValue(v11, @"CMClassImplementationName", a1);
    CFDictionarySetValue(v11, @"CMClassImplementationID", a2);
    FigCFDictionarySetInt64();
    CFDictionarySetValue(v11, @"CMMatchingInfo", a3);
    if (a4)
    {
      double v12 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    else
    {
      if (!a5)
      {
LABEL_9:
        CFRelease(v11);
        return 0;
      }
      double v12 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(v11, @"VTFactoryFunctionHasSpecificationArgument", *v12);
    FigRegistryAddItem();
    goto LABEL_9;
  }
  return FigSignalErrorAt();
}

BOOL VTHasVideoDecoderRegistryBeenCreated()
{
  return sVideoDecoderRegistry != 0;
}

void vtPrintRegisteredVideoDecoders()
{
  if (sVideoDecoderRegistry) {
    FigRegistryCopyItemList();
  }
}

CFMutableArrayRef VTCopyVideoDecoderRegistryMatchArrayForCodecType(unsigned int a1)
{
  CFStringRef v7 = 0;
  uint64_t v8 = 0;
  *(_DWORD *)bytes = bswap32(a1);
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v2 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 4, 0x600u, 0);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v1, 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef v4 = Mutable;
  if (v2)
  {
    if (!Mutable)
    {
      FigSignalErrorAt();
      goto LABEL_7;
    }
    vtPopulateVideoDecoderRegistry();
    CFStringRef v7 = v2;
    FigRegistryCopyFilteredItemList();
  }
  else if (FigSignalErrorAt() && v4)
  {
    CFRelease(v4);
    CFMutableArrayRef v4 = 0;
  }
  if (v2) {
LABEL_7:
  }
    CFRelease(v2);
  return v4;
}

void vtPopulateVideoDecoderRegistry()
{
  MEMORY[0x199705810](&sInitializeVideoDecoderRegistryOnce, vtInitializeVideoDecoderRegistry);
  MEMORY[0x1997056B0](sVideoDecoderRegistryMutex);
  if (sReloadParavirtualizedDecodersList == 1)
  {
    vtLoadParavirtualizedVideoDecoders();
    sReloadParavirtualizedDecodersList = 0;
  }

  JUMPOUT(0x1997056C0);
}

BOOL vtFilterRegistryItemByCodecType(CFTypeRef *a1)
{
  if (FigRegistryItemCopyMatchingInfo()) {
    return 0;
  }
  CFArrayRef Value = CFDictionaryGetValue(0, @"VTCodecType");
  if (!Value) {
    return 0;
  }
  CFMutableArrayRef v3 = Value;
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 == CFStringGetTypeID())
  {
    if (!CFEqual(v3, *a1)) {
      return 0;
    }
  }
  else
  {
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 != CFArrayGetTypeID()) {
      return 0;
    }
    v8.length = CFArrayGetCount((CFArrayRef)v3);
    v8.location = 0;
    if (!CFArrayContainsValue((CFArrayRef)v3, v8, *a1)) {
      return 0;
    }
  }
  FigCFDictionaryGetBooleanIfPresent();
  return FigCFEqual() == 0;
}

uint64_t VTCopyVideoDecoderList(uint64_t a1, const __CFArray **a2)
{
  uint64_t v46 = 0;
  CFArrayRef v47 = 0;
  long long v45 = 0uLL;
  double v44 = 0;
  CFDictionaryRef v42 = 0;
  CFBundleRef bundle = 0;
  CFDictionaryRef theDict = 0;
  MEMORY[0x199705810](&sCreateVideoDecoderRegistryOnce, vtCreateVideoDecoderRegistry);
  if (!sVideoDecoderRegistry)
  {
    return FigSignalErrorAt();
  }
  vtPopulateVideoDecoderRegistry();
  VTParavirtualizationIsRunningInGuest();
  uint64_t v3 = FigRegistryCopyFilteredItemList();
  if (v3)
  {
    uint64_t v34 = v3;
    CFMutableArrayRef Mutable = 0;
    goto LABEL_58;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"EnableHardwareAcceleratedVideoDecoder", (const void *)*MEMORY[0x1E4F1CFD0]);
  if (VTParavirtualizationIsRunningInGuest()) {
    BYTE1(v46) = 1;
  }
  *((void *)&v45 + 1) = Mutable;
  uint64_t v6 = vtCopyExpandedDecoderListForWrappers(v47, &v45, &v44, 0);
  if (v6)
  {
    uint64_t v34 = v6;
    goto LABEL_58;
  }
  CFArrayRef v7 = v47;
  double v35 = a2;
  CGRect v36 = Mutable;
  if (v44)
  {
    if (v47) {
      CFRelease(v47);
    }
    CFArrayRef v7 = v44;
    CFArrayRef v47 = v44;
    double v44 = 0;
  }
  uint64_t Count = CFArrayGetCount(v7);
  CFMutableArrayRef v10 = CFArrayCreateMutable(v4, Count, MEMORY[0x1E4F1D510]);
  CFArrayRef v11 = v10;
  if (Count < 1)
  {
LABEL_57:
    v50.length = CFArrayGetCount(v11);
    v50.location = 0;
    CFArraySortValues(v11, v50, (CFComparatorFunction)vtCompareCodecName, 0);
    uint64_t v34 = 0;
    CFMutableArrayRef Mutable = v36;
    *double v35 = v11;
    goto LABEL_58;
  }
  CFIndex v12 = 0;
  theArradouble y = v10;
  uint64_t v37 = Count;
  while (1)
  {
    CFArrayGetValueAtIndex(v47, v12);
    unsigned int valuePtr = 0;
    uint64_t v13 = FigRegistryItemCopyDescription();
    if (v13) {
      break;
    }
    uint64_t v13 = FigRegistryItemCopyMatchingInfo();
    if (v13) {
      break;
    }
    uint64_t v13 = FigRegistryItemCopyBundle();
    if (v13) {
      break;
    }
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"VTCodecType");
    if (Value)
    {
      CFStringRef v15 = Value;
      CFTypeID v16 = CFGetTypeID(Value);
      if (v16 == CFArrayGetTypeID() || (CFTypeID v17 = CFGetTypeID(v15), v17 == CFStringGetTypeID()))
      {
        double v18 = CFDictionaryGetValue(v42, @"CMClassImplementationID");
        if (v18)
        {
          double v19 = v18;
          CFTypeID TypeID = CFStringGetTypeID();
          if (TypeID == CFGetTypeID(v19))
          {
            CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(v42, @"CMClassImplementationName");
            if (bundle) {
              CFStringRef v38 = CFBundleCopyLocalizedString(bundle, v21, 0, 0);
            }
            else {
              CFStringRef v38 = 0;
            }
            CFTypeID v23 = CFGetTypeID(v15);
            if (v23 == CFStringGetTypeID())
            {
              CFIndex v24 = 1;
LABEL_40:
              for (CFIndex i = 0; i != v24; ++i)
              {
                CFMutableDictionaryRef v26 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                FigCFDictionarySetValue();
                CFTypeID v27 = CFGetTypeID(v15);
                if (v27 == CFStringGetTypeID()) {
                  CFStringRef ValueAtIndex = v15;
                }
                else {
                  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v15, i);
                }
                CFStringGetCString(ValueAtIndex, buffer, 5, 0x600u);
                unsigned int valuePtr = bswap32(*(unsigned int *)buffer);
                CFNumberRef v29 = CFNumberCreate(v4, kCFNumberSInt32Type, &valuePtr);
                FigCFDictionarySetValue();
                FigCFDictionarySetValue();
                FigCFDictionarySetValue();
                int v30 = CFDictionaryGetValue(theDict, @"VTRating");
                if (v30)
                {
                  long long v31 = v30;
                  CFRetain(v30);
                  FigCFDictionarySetValue();
                  CFRelease(v31);
                }
                else
                {
                  FigCFDictionarySetValue();
                }
                long long v32 = CFDictionaryGetValue(theDict, @"VTIsHardwareAccelerated");
                if (v32)
                {
                  __int16 v33 = v32;
                  CFRetain(v32);
                  FigCFDictionarySetValue();
                  CFRelease(v33);
                }
                else
                {
                  FigCFDictionarySetValue();
                }
                CFArrayRef v11 = theArray;
                CFArrayAppendValue(theArray, v26);
                if (v26) {
                  CFRelease(v26);
                }
                if (v29) {
                  CFRelease(v29);
                }
              }
              uint64_t Count = v37;
            }
            else
            {
              CFIndex v24 = CFArrayGetCount((CFArrayRef)v15);
              if (v24 >= 1) {
                goto LABEL_40;
              }
            }
            CFStringRef v22 = v38;
            goto LABEL_26;
          }
        }
      }
    }
    CFStringRef v22 = 0;
LABEL_26:
    if (theDict)
    {
      CFRelease(theDict);
      CFDictionaryRef theDict = 0;
    }
    if (v42)
    {
      CFRelease(v42);
      CFDictionaryRef v42 = 0;
    }
    if (bundle)
    {
      CFRelease(bundle);
      CFBundleRef bundle = 0;
    }
    if (v22) {
      CFRelease(v22);
    }
    if (++v12 == Count) {
      goto LABEL_57;
    }
  }
  uint64_t v34 = v13;
  CFMutableArrayRef Mutable = v36;
  if (v11) {
    CFRelease(v11);
  }
LABEL_58:
  if (v47) {
    CFRelease(v47);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (bundle) {
    CFRelease(bundle);
  }
  return v34;
}

uint64_t vtFilterRegistryItemToSkipNonParavirtualizedHardwareAcceleratedDecoders()
{
  if (FigRegistryItemCopyMatchingInfo()) {
    return 0;
  }
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  return 1;
}

uint64_t vtCopyExpandedDecoderListForWrappers(const __CFArray *a1, long long *a2, __CFArray **a3, int a4)
{
  CFAllocatorRef v4 = 0;
  uint64_t v5 = 0;
  CFDictionaryRef v48 = 0;
  CFDictionaryRef v49 = 0;
  CFTypeRef v46 = 0;
  CFArrayRef v47 = 0;
  double v44 = 0;
  CFDictionaryRef v45 = 0;
  if (!a1)
  {
    CFStringRef v7 = 0;
    CFMutableArrayRef MutableCopy = 0;
    __int16 v9 = 0;
    goto LABEL_47;
  }
  CFStringRef v7 = 0;
  CFMutableArrayRef MutableCopy = 0;
  __int16 v9 = 0;
  if (!a3) {
    goto LABEL_47;
  }
  CFArrayRef v10 = a1;
  CFIndex Count = CFArrayGetCount(a1);
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFAllocatorRef v4 = Mutable;
  if (Mutable)
  {
    __int16 v33 = a3;
    if (Count < 1)
    {
LABEL_46:
      uint64_t v5 = 0;
      CFStringRef v7 = 0;
      CFMutableArrayRef MutableCopy = 0;
      __int16 v9 = 0;
      const void *v33 = v4;
      CFAllocatorRef v4 = 0;
      goto LABEL_47;
    }
    CFIndex v14 = 0;
    CFStringRef v38 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFStringRef v15 = @"CMDependencies";
    theArradouble y = Mutable;
    CFArrayRef v34 = v10;
    CFIndex v37 = Count;
    while (1)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v10, v14);
      if (ValueAtIndex)
      {
        CFTypeID v17 = ValueAtIndex;
        double v18 = v15;
        uint64_t v19 = FigRegistryItemCopyMatchingInfo();
        if (v19) {
          goto LABEL_74;
        }
        if (!v49) {
          break;
        }
        if (v38 == CFDictionaryGetValue(v49, @"VTIsWrapperDecoder"))
        {
          CFStringRef Value = CFDictionaryGetValue(v49, @"VTWrapsCodecType");
          if (Value)
          {
            CFStringRef v21 = Value;
            CFArrayRef v43 = 0;
            uint64_t v19 = FigRegistryItemCopyDescription();
            if (v19) {
              goto LABEL_74;
            }
            CGRect v39 = CFDictionaryGetValue(v48, @"CMClassImplementationID");
            long long v41 = *a2;
            uint64_t v42 = *((void *)a2 + 2);
            *(void *)&long long v41 = v21;
            uint64_t v19 = FigRegistryCopyFilteredItemList();
            if (v19) {
              goto LABEL_74;
            }
            if (a4 <= 10)
            {
              uint64_t v19 = vtCopyExpandedDecoderListForWrappers(v47, &v41, &v43, (a4 + 1));
              if (v19) {
                goto LABEL_74;
              }
            }
            CFArrayRef v22 = v47;
            if (v43)
            {
              if (v47) {
                CFRelease(v47);
              }
              CFArrayRef v22 = v43;
              CFArrayRef v47 = v43;
              CFArrayRef v43 = 0;
            }
            if (v22)
            {
              CFIndex v23 = CFArrayGetCount(v22);
              if (v23 >= 1)
              {
                CFIndex v24 = v23;
                CFIndex v25 = 0;
                while (1)
                {
                  CFArrayGetValueAtIndex(v47, v25);
                  uint64_t v26 = FigRegistryItemCopyMatchingInfo();
                  if (v26 || (uint64_t v26 = FigRegistryItemCopyDescription(), v26))
                  {
                    uint64_t v5 = v26;
                    CFStringRef v7 = 0;
                    CFMutableArrayRef MutableCopy = 0;
                    __int16 v9 = 0;
                    goto LABEL_72;
                  }
                  CFTypeID v27 = CFDictionaryGetValue(v45, @"CMClassImplementationID");
                  CFMutableArrayRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                  if (!MutableCopy)
                  {
                    __int16 v9 = 0;
LABEL_70:
                    uint64_t v5 = FigSignalErrorAt();
                    CFStringRef v7 = 0;
                    goto LABEL_72;
                  }
                  BOOL v28 = CFDictionaryGetValue(v49, @"VTCodecType");
                  CFDictionarySetValue(MutableCopy, @"VTCodecType", v28);
                  CFDictionarySetValue(MutableCopy, @"VTWrappedDecoderID", v27);
                  __int16 v9 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                  if (!v9) {
                    goto LABEL_70;
                  }
                  CFStringRef v29 = CFStringCreateWithFormat(v12, 0, @"%@:%@", v39, v27);
                  if (!v29) {
                    goto LABEL_70;
                  }
                  CFStringRef v7 = v29;
                  CFDictionarySetValue(v9, @"CMClassImplementationID", v29);
                  int v30 = CFDictionaryGetValue(v45, v18);
                  if (v30) {
                    CFDictionarySetValue(v9, v18, v30);
                  }
                  CFDictionarySetValue(v9, @"CMMatchingInfo", MutableCopy);
                  uint64_t Copy2 = FigRegistryItemCreateCopy2();
                  if (Copy2) {
                    break;
                  }
                  CFArrayAppendValue(theArray, v44);
                  if (v46)
                  {
                    CFRelease(v46);
                    CFTypeRef v46 = 0;
                  }
                  CFStringRef v15 = v18;
                  if (v45)
                  {
                    CFRelease(v45);
                    CFDictionaryRef v45 = 0;
                  }
                  CFRelease(MutableCopy);
                  CFRelease(v7);
                  CFRelease(v9);
                  if (v44)
                  {
                    CFRelease(v44);
                    double v44 = 0;
                  }
                  if (v24 == ++v25) {
                    goto LABEL_38;
                  }
                }
                uint64_t v5 = Copy2;
LABEL_72:
                CFAllocatorRef v4 = theArray;
                goto LABEL_47;
              }
            }
LABEL_38:
            if (v47)
            {
              CFRelease(v47);
              CFArrayRef v47 = 0;
            }
            CFAllocatorRef v4 = theArray;
            CFArrayRef v10 = v34;
          }
        }
        else
        {
          CFArrayAppendValue(v4, v17);
        }
        if (v49)
        {
          CFRelease(v49);
          CFDictionaryRef v49 = 0;
        }
        CFIndex Count = v37;
        if (v48)
        {
          CFRelease(v48);
          CFDictionaryRef v48 = 0;
        }
      }
      if (++v14 == Count) {
        goto LABEL_46;
      }
    }
  }
  uint64_t v19 = FigSignalErrorAt();
LABEL_74:
  uint64_t v5 = v19;
  CFStringRef v7 = 0;
  CFMutableArrayRef MutableCopy = 0;
  __int16 v9 = 0;
LABEL_47:
  if (v47) {
    CFRelease(v47);
  }
  if (v44) {
    CFRelease(v44);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v49) {
    CFRelease(v49);
  }
  if (v48) {
    CFRelease(v48);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v5;
}

CFComparisonResult vtCompareCodecName(const __CFDictionary *a1, const __CFDictionary *a2)
{
  if (!a1) {
    return -1;
  }
  if (!a2) {
    return 1;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"CodecName");
  CFStringRef v4 = (const __CFString *)CFDictionaryGetValue(a2, @"CodecName");
  if (!Value) {
    return -1;
  }
  CFStringRef v5 = v4;
  CFTypeID v6 = CFGetTypeID(Value);
  if (v6 != CFStringGetTypeID()) {
    return -1;
  }
  if (!v5) {
    return 1;
  }
  CFTypeID v7 = CFGetTypeID(v5);
  if (v7 != CFStringGetTypeID()) {
    return 1;
  }

  return CFStringCompare(Value, v5, 0);
}

uint64_t VTCopyVideoDecoderExtensionProperties()
{
  return 4294947786;
}

uint64_t vtFilterRegistryItemByCodecTypeAndVideoDecoderSpecification(uint64_t a1)
{
  CFTypeRef cf = 0;
  CFDictionaryRef theDict = 0;
  uint64_t context = *(void *)(a1 + 8);
  uint64_t v21 = 1;
  if (FigRegistryItemCopyMatchingInfo() || FigRegistryItemCopyDescription()) {
    goto LABEL_33;
  }
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 8);
  if (v2)
  {
    BOOL v3 = CFDictionaryGetValue(v2, @"DecoderID") != 0;
    FigCFDictionaryGetBooleanIfPresent();
  }
  else
  {
    BOOL v3 = 0;
  }
  CFStringRef Value = CFDictionaryGetValue(theDict, @"VTCodecType");
  uint64_t v5 = (uint64_t)Value;
  if (Value)
  {
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 == CFStringGetTypeID())
    {
      if (!CFEqual((CFTypeRef)v5, *(CFTypeRef *)a1)) {
        goto LABEL_33;
      }
    }
    else
    {
      CFTypeID v7 = CFGetTypeID((CFTypeRef)v5);
      if (v7 != CFArrayGetTypeID()) {
        goto LABEL_33;
      }
      v25.length = CFArrayGetCount((CFArrayRef)v5);
      v25.location = 0;
      if (!CFArrayContainsValue((CFArrayRef)v5, v25, *(const void **)a1)) {
        goto LABEL_33;
      }
    }
    CFDictionaryRef v8 = *(const __CFDictionary **)(a1 + 8);
    if (v8)
    {
      __int16 v9 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (v9 == CFDictionaryGetValue(v8, @"AllowParavirtualizedDecoder"))
      {
        CFArrayRef v10 = (const void *)*MEMORY[0x1E4F1CFD0];
        if (v10 == CFDictionaryGetValue(theDict, @"VTIsParavirtualized")) {
          goto LABEL_33;
        }
      }
      CFDictionaryRef v11 = *(const __CFDictionary **)(a1 + 8);
      if (v11)
      {
        CFAllocatorRef v12 = (const void *)*MEMORY[0x1E4F1CFD0];
        if (v12 == CFDictionaryGetValue(v11, @"RequireParavirtualizedDecoder")
          && v9 == CFDictionaryGetValue(theDict, @"VTIsParavirtualized"))
        {
          goto LABEL_33;
        }
      }
    }
    FigCFDictionaryGetBooleanIfPresent();
    if (*(unsigned char *)(a1 + 17))
    {
      buffer[0] = 0;
      FigCFDictionaryGetBooleanIfPresent();
    }
    CFArrayRef v13 = (const __CFArray *)VTGetAllowedDecoderList();
    if (v13)
    {
      CFArrayRef v14 = v13;
      v26.length = CFArrayGetCount(v13);
      v26.location = 0;
      if (!CFArrayContainsValue(v14, v26, *(const void **)a1)) {
        goto LABEL_33;
      }
    }
    if (FigCFEqual())
    {
      CFDictionaryRef v15 = *(const __CFDictionary **)(a1 + 8);
      if (v15)
      {
        CFTypeID v16 = (const void *)*MEMORY[0x1E4F1CFD0];
        if (v16 != CFDictionaryGetValue(v15, @"EnableAppleOnlySWAV1")) {
          goto LABEL_33;
        }
      }
    }
    FigCFDictionaryGetBooleanIfPresent();
    VTAvoidHardwareDecoders();
    if (VTAvoidHardwareJPEGDecoders()) {
      CFStringGetCString(*(CFStringRef *)a1, buffer, 5, 0x600u);
    }
    if (CFStringGetCString(*(CFStringRef *)a1, buffer, 5, 0x600u)) {
      FigCodecTypeIsProtected((buffer[1] << 16) | (buffer[0] << 24) | (buffer[2] << 8) | buffer[3]);
    }
    if (v3) {
      goto LABEL_39;
    }
    if (*(unsigned char *)(a1 + 16))
    {
LABEL_33:
      uint64_t v5 = 0;
      goto LABEL_34;
    }
    CFDictionaryRef v18 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"VTRequiredSpecificationEntries");
    if (v18 && (CFTypeID v19 = CFGetTypeID(v18), v19 == CFDictionaryGetTypeID()))
    {
      CFDictionaryApplyFunction(v18, (CFDictionaryApplierFunction)vtCheckRequiredSpecificationKey, &context);
      uint64_t v5 = v21;
    }
    else
    {
LABEL_39:
      uint64_t v5 = 1;
    }
  }
LABEL_34:
  if (theDict) {
    CFRelease(theDict);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t vtSortRegistryItemsByRating()
{
  if (!FigRegistryItemCopyMatchingInfo() && !FigRegistryItemCopyMatchingInfo())
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
  }
  return 0;
}

CFDictionaryRef vtCheckRequiredSpecificationKey(void *key, const void *a2, uint64_t a3)
{
  CFDictionaryRef result = *(const __CFDictionary **)a3;
  if (!*(void *)a3
    || (CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, key), !a2)
    || !result
    || (CFDictionaryRef result = (const __CFDictionary *)CFEqual(result, a2), !result))
  {
    *(unsigned char *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t FigCodecTypeIsProtected(int a1)
{
  uint64_t result = 1;
  if (a1 <= 1902207794)
  {
    if (a1 <= 1685220712)
    {
      if (a1 <= 1667524656)
      {
        if (a1 <= 1667326823)
        {
          if (a1 == 1633771875 || a1 == 1667312947) {
            return result;
          }
          unsigned __int16 v4 = 24931;
        }
        else if (a1 > 1667330146)
        {
          if (a1 == 1667330147) {
            return result;
          }
          unsigned __int16 v4 = 30307;
        }
        else
        {
          if (a1 == 1667326824) {
            return result;
          }
          unsigned __int16 v4 = 25456;
        }
        int v6 = v4 | 0x63610000;
        goto LABEL_81;
      }
      if (a1 <= 1667656802)
      {
        if (a1 != 1667524657 && a1 != 1667574579)
        {
          int v6 = 1667575091;
          goto LABEL_81;
        }
        return result;
      }
      if (a1 > 1668047202)
      {
        if (a1 == 1668047203) {
          return result;
        }
        int v6 = 1668641633;
      }
      else
      {
        if (a1 == 1667656803) {
          return result;
        }
        int v6 = 1667790435;
      }
LABEL_81:
      if (a1 == v6) {
        return result;
      }
      return 0;
    }
    if (a1 <= 1885430578)
    {
      if (a1 <= 1701733237)
      {
        if (a1 != 1685220713 && a1 != 1700886115)
        {
          int v6 = 1701733217;
          goto LABEL_81;
        }
        return result;
      }
      if (a1 > 1882599479)
      {
        if (a1 == 1882599480) {
          return result;
        }
        int v6 = 1885430115;
      }
      else
      {
        if (a1 == 1701733238) {
          return result;
        }
        int v6 = 1869117027;
      }
      goto LABEL_81;
    }
    if (a1 <= 1885547314)
    {
      unsigned int v8 = a1 - 1885430579;
      if (v8 > 0x3D || ((1 << v8) & 0x2020000000000001) == 0) {
        return 0;
      }
      return result;
    }
    if (a1 <= 1886745440)
    {
      if (a1 == 1885547315) {
        return result;
      }
      int v6 = 1885692723;
      goto LABEL_81;
    }
    if (a1 == 1886745441) {
      return result;
    }
    unsigned __int16 v5 = 24931;
LABEL_78:
    int v6 = v5 | 0x71610000;
    goto LABEL_81;
  }
  if (a1 <= 1902667125)
  {
    if (a1 > 1902324530)
    {
      if (a1 <= 1902405732)
      {
        if (a1 == 1902324531 || a1 == 1902403958) {
          return result;
        }
        unsigned __int16 v7 = 26673;
      }
      else
      {
        if (a1 > 1902469938)
        {
          if (a1 == 1902469939) {
            return result;
          }
          int v6 = 1902537827;
          goto LABEL_81;
        }
        if (a1 == 1902405733) {
          return result;
        }
        unsigned __int16 v7 = 28024;
      }
      int v6 = v7 | 0x71640000;
      goto LABEL_81;
    }
    if ((a1 - 1902207795) <= 0x3D && ((1 << (a1 - 51)) & 0x2020000000000001) != 0
      || (a1 - 1902212657) <= 0x34 && ((1 << (a1 - 49)) & 0x14000000000001) != 0)
    {
      return result;
    }
    unsigned __int16 v5 = 28771;
    goto LABEL_78;
  }
  if (a1 <= 2053202738)
  {
    if (a1 <= 1902998903)
    {
      if (a1 != 1902667126 && a1 != 1902671459)
      {
        int v6 = 1902928227;
        goto LABEL_81;
      }
      return result;
    }
    if (a1 > 1903587384)
    {
      if (a1 == 1903587385) {
        return result;
      }
      unsigned __int16 v3 = 24931;
      goto LABEL_71;
    }
    if (a1 == 1902998904) {
      return result;
    }
    int v6 = 1903522657;
    goto LABEL_81;
  }
  if (a1 > 2053319474)
  {
    if (a1 > 2053923170)
    {
      if (a1 == 2053923171) {
        return result;
      }
      int v6 = 2054517601;
    }
    else
    {
      if (a1 == 2053319475) {
        return result;
      }
      int v6 = 2053464883;
    }
    goto LABEL_81;
  }
  if ((a1 - 2053202739) > 0x3D || ((1 << (a1 - 51)) & 0x2020000000000001) == 0)
  {
    unsigned __int16 v3 = 30307;
LABEL_71:
    int v6 = v3 | 0x7A610000;
    goto LABEL_81;
  }
  return result;
}

void vtInitializeVideoDecoderRegistry()
{
  if (shouldPreferInternalDecoders_preferInternalOnceToken != -1) {
    dispatch_once_f(&shouldPreferInternalDecoders_preferInternalOnceToken, &shouldPreferInternalDecoders_preferInternal, (dispatch_function_t)vtGetPreferInternalDecoders);
  }
  int v0 = shouldPreferInternalDecoders_preferInternal;
  sVideoDecoderRegistryMutedouble x = FigSimpleMutexCreate();
  MEMORY[0x199705810](&sCreateVideoDecoderRegistryOnce, vtCreateVideoDecoderRegistry);
  if (FigIsHDRAllowedOnDevice())
  {
    vtRegisterVideoDecoderWithInfoKeysAndValues(0x64766831u, 0, @"DolbyVision (HEVC)", @"com.apple.videotoolbox.videodecoder.dolbyvision.hevc", 8, @"hvc1", (uint64_t)DolbyVisionDecoder_CreateInstance, v1, 0);
    vtRegisterVideoDecoderWithInfoKeysAndValues(0x646D7578u, 0, @"DolbyVision (HEVC) with Muxed Alpha", @"com.apple.videotoolbox.videodecoder.dolbyvision.hevc-with-alpha", 8, @"muxa", (uint64_t)DolbyVisionDecoder_CreateInstance, v2, 0);
    vtRegisterVideoDecoderWithInfoKeysAndValues(0x64617631u, 0, @"DolbyVision (AV1)", @"com.apple.videotoolbox.videodecoder.dolbyvision.av1", 8, @"av01", (uint64_t)DolbyVisionDecoder_CreateInstance, v3, 0);
    vtRegisterVideoDecoderWithInfoKeysAndValues(0x71646176u, 0, @"Protected DolbyVision (AV1 cbcs)", @"com.apple.videotoolbox.videodecoder.dolbyvision.qda1", 8, @"qav1", (uint64_t)DolbyVisionDecoder_CreateInstance, v4, 0);
    vtRegisterVideoDecoderWithInfoKeysAndValues(0x71646831u, 0, @"Protected DolbyVision (HEVC cbcs)", @"com.apple.videotoolbox.videodecoder.dolbyvision.qdh1", 8, @"qhvc", (uint64_t)DolbyVisionDecoder_CreateInstance, v5, 0);
    if (_os_feature_enabled_impl()) {
      vtRegisterVideoDecoderWithInfoKeysAndValues(0x71646D78u, 0, @"Protected DolbyVision (HEVC cbcs) with Muxed Alpha", @"com.apple.videotoolbox.videodecoder.dolbyvision.qdmx", 8, @"qmux", (uint64_t)DolbyVisionDecoder_CreateInstance, v6, 0);
    }
    vtRegisterVideoDecoderWithInfoKeysAndValues(0x63646831u, 0, @"Protected DolbyVision (HEVC)", @"com.apple.videotoolbox.videodecoder.dolbyvision.cdh1", 8, @"chvc", (uint64_t)DolbyVisionDecoder_CreateInstance, v6, 0);
  }
  vtRegisterVideoDecoderWithInfoKeysAndValues(0x6A706567u, 4294967276, @"JPEG applejpeg", @"com.apple.videotoolbox.videodecoder.jpeg.applejpeg", 0, 0, (uint64_t)AppleJPEGVideoDecoder_CreateInstance, v1, 0);
  vtRegisterVideoDecoderWithInfoKeysAndValues(0x6A706567u, 4294967266, @"JPEG", @"com.apple.videotoolbox.videodecoder.jpeg", 0, 0, (uint64_t)JPEGVideoDecoder_CreateInstance, v7, 0);
  vtRegisterVideoDecoderWithInfoKeysAndValues(0x646D6231u, 4294967276, @"OpenDML JPEG applejpeg", @"com.apple.videotoolbox.videodecoder.dmb1.applejpeg", 0, 0, (uint64_t)AppleJPEGVideoDecoder_CreateInstance, v8, 0);
  vtRegisterVideoDecoderWithInfoKeysAndValues(0x646D6231u, 4294967266, @"OpenDML JPEG", @"com.apple.videotoolbox.videodecoder.dmb1", 0, 0, (uint64_t)JPEGVideoDecoder_CreateInstance, v9, 0);
  vtRegisterVideoDecoderWithInfoKeysAndValues(0x69706220u, 0, @"Test IPB", @"com.apple.videotoolbox.videodecoder.ipb", 0, 0, (uint64_t)TestIPBVideoDecoder_CreateInstance, v10, 0);
  vtRegisterVideoDecoderWithInfoKeysAndValues(0x6D757861u, 0, @"Muxed Alpha", @"com.apple.videotoolbox.videodecoder.hevc-with-alpha", 8, @"hvc1", (uint64_t)MuxedAlphaDecoder_CreateInstance, v11, 0);
  if (_os_feature_enabled_impl()) {
    vtRegisterVideoDecoderWithInfoKeysAndValues(0x716D7578u, 0, @"Muxed Alpha (CBCS)", @"com.apple.videotoolbox.videodecoder.cbcs-hevc-with-alpha", 8, @"qhvc", (uint64_t)MuxedAlphaDecoder_CreateInstance, v12, 0);
  }
  vtRegisterVideoDecoderWithInfoKeysAndValues(0x64697368u, 0, @"Disparity", @"com.apple.videotoolbox.videodecoder.disparity-hevc", 8, @"hvc1", (uint64_t)DepthWrapperDecoder_CreateInstance, v12, 0);
  vtRegisterVideoDecoderWithInfoKeysAndValues(0x64657068u, 0, @"Depth", @"com.apple.videotoolbox.videodecoder.depth-hevc", 8, @"hvc1", (uint64_t)DepthWrapperDecoder_CreateInstance, v13, 0);
  if (v0) {
    VTLoadVideoDecodersPreferringInternalBundles();
  }
  else {
    VTLoadVideoDecoders();
  }
  if (!VTAvoidHardwareDecoders())
  {
    vtLoadParavirtualizedVideoDecoders();
  }
}

void vtLoadParavirtualizedVideoDecoders()
{
  if (vtLoadParavirtualizedVideoDecoders_sCreateGuestUUIDOnce != -1) {
    dispatch_once(&vtLoadParavirtualizedVideoDecoders_sCreateGuestUUIDOnce, &__block_literal_global_1);
  }
  if (VTParavirtualizationGuestInstallHandlerForUUID((CFUUIDBytes *)&vtLoadParavirtualizedVideoDecoders_sGuestUUID, &__block_literal_global_194, 0))return; {
  v45[0] = 0;
  }
  *(void *)bytes = 0;
  CMBlockBufferRef v44 = 0;
  CFTypeRef v41 = 0;
  uint64_t v42 = 0;
  int appended = VTParavirtualizationCreateMessageAndByteStream(1684366195, 1, (uint64_t)&vtLoadParavirtualizedVideoDecoders_sGuestUUID, 0, &v44, bytes);
  if (appended) {
    goto LABEL_56;
  }
  int appended = VTParavirtualizationMessageAppendUInt32();
  if (appended) {
    goto LABEL_56;
  }
  long long v39 = kVTParavirtualizationDefaultReplyTimeout;
  uint64_t v40 = 0;
  int appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v44, (uint64_t)&v39, &v42);
  if (appended) {
    goto LABEL_56;
  }
  int appended = VTParavirtualizationMessageCopyCFPropertyList(v42, 744777059, &v41);
  if (appended) {
    goto LABEL_56;
  }
  if (!v41 || (CFTypeID v1 = CFGetTypeID(v41), v1 != CFArrayGetTypeID()))
  {
    int appended = FigSignalErrorAt();
LABEL_56:
    int UInt32 = appended;
    CFArrayRef v2 = 0;
    goto LABEL_11;
  }
  CFArrayRef v2 = (const __CFArray *)v41;
  CFTypeRef v41 = 0;
  int UInt32 = VTParavirtualizationMessageGetUInt32(v42, 745956722, v45);
LABEL_11:
  if (v41) {
    CFRelease(v41);
  }
  if (v44) {
    CFRelease(v44);
  }
  if (*(void *)bytes) {
    CFRelease(*(CFTypeRef *)bytes);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (UInt32)
  {
LABEL_45:
    if (!v2) {
      return;
    }
  }
  else
  {
    if (!v2) {
      return;
    }
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v4 = 0;
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFStringRef v6 = @"paravirtualized:%@";
      __int16 v33 = (const void *)*MEMORY[0x1E4F1CFC8];
      CFArrayRef v34 = v2;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v2, v4);
        if (!ValueAtIndex || (CFDictionaryRef v8 = ValueAtIndex, v9 = CFGetTypeID(ValueAtIndex), v9 != CFDictionaryGetTypeID()))
        {
          FigSignalErrorAt();
          goto LABEL_45;
        }
        LODWORD(v39) = 0;
        CFStringRef Value = CFDictionaryGetValue(v8, @"CMClassImplementationID");
        CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(v8, @"VTCodecType");
        if (v11
          && ((CFStringRef v12 = v11, v13 = CFGetTypeID(v11), v13 == CFStringGetTypeID())
           || (CFTypeID v14 = CFGetTypeID(v12), v14 == CFArrayGetTypeID())))
        {
          CFStringRef v37 = CFStringCreateWithFormat(v5, 0, v6, Value, v27, v28, v29, v30, v31, v32);
          CFStringRef cf = 0;
        }
        else
        {
          LODWORD(v44) = 0;
          FigCFDictionaryGetInt32IfPresent();
          int v15 = (int)v44;
          if ((_os_feature_enabled_impl() & 1) == 0 && FigCodecTypeIsProtected(v15)
            || v15 == 1634759272
            || v15 == 1634759278)
          {
            goto LABEL_44;
          }
          *(_DWORD *)bytes = bswap32(v44);
          CFStringRef v12 = CFStringCreateWithBytes(v5, bytes, 4, 0x600u, 0);
          CFStringRef v37 = CFStringCreateWithFormat(v5, 0, @"paravirtualized:%@:%c%c%c%c", Value, v44 >> 24, BYTE2(v44), BYTE1(v44), v44);
          CFStringRef cf = v12;
        }
        CFAllocatorRef v16 = v5;
        CFStringRef v17 = v6;
        CGRect v36 = Value;
        FigCFDictionaryGetInt32IfPresent();
        CFDictionaryRef v18 = CFDictionaryGetValue(v8, @"CMClassImplementationName");
        CFTypeID v19 = CFDictionaryGetValue(v8, @"VTDecoderCapabilities");
        CGFloat v20 = CFDictionaryGetValue(v8, @"IsPreferredInternalPlugin");
        if (v20) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = v33;
        }
        CFStringRef v22 = CFStringCreateWithFormat(v16, 0, v17, v18);
        long long v31 = v21;
        uint64_t v32 = 0;
        CFStringRef v29 = v19;
        int v30 = @"IsPreferredInternalPlugin";
        CFTypeID v27 = v36;
        BOOL v28 = @"VTDecoderCapabilities";
        CFStringRef v6 = v17;
        if (vtRegisterVideoDecoderWithSpecificationArgumentWithInfoKeysAndValues(v12, v39, v22, v37, v23, v24, v25, v26, @"VTHostDecoderID"))
        {
          if (v22) {
            CFRelease(v22);
          }
          if (v37) {
            CFRelease(v37);
          }
          CFArrayRef v2 = v34;
          if (cf) {
            CFRelease(cf);
          }
          goto LABEL_45;
        }
        CFAllocatorRef v5 = v16;
        if (v22) {
          CFRelease(v22);
        }
        if (v37) {
          CFRelease(v37);
        }
        CFArrayRef v2 = v34;
        if (cf) {
          CFRelease(cf);
        }
LABEL_44:
        if (Count == ++v4) {
          goto LABEL_45;
        }
      }
    }
  }
  CFRelease(v2);
}

uint64_t vtGetPreferInternalDecoders(unsigned char *a1)
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  *a1 = result;
  return result;
}

void vtRegisterVideoDecoderWithInfoKeysAndValues(unsigned int a1, uint64_t a2, const void *a3, const void *a4, char a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9)
{
  *(_DWORD *)bytes = bswap32(a1);
  CFStringRef v15 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 4, 0x600u, 0);
  if (v15)
  {
    CFStringRef v16 = v15;
    vtRegisterVideoDecoderWithInfoKeysAndValuesInternal2(v15, a2, a3, a4, a5, a6, a7, 0, &a9);
    CFRelease(v16);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t vtRegisterVideoDecoderWithInfoKeysAndValuesInternal2(const void *a1, uint64_t a2, const void *a3, const void *a4, char a5, const void *a6, uint64_t a7, uint64_t a8, const void **a9)
{
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFDictionaryRef v18 = Mutable;
    CFDictionarySetValue(Mutable, @"VTCodecType", a1);
    FigCFDictionarySetInt32();
    CFTypeID v19 = (const void **)MEMORY[0x1E4F1CFC8];
    if (a5) {
      CFDictionarySetValue(v18, @"VTAllowSandboxedDecode", (const void *)*MEMORY[0x1E4F1CFC8]);
    }
    CGFloat v20 = (const void **)MEMORY[0x1E4F1CFD0];
    if ((a5 & 2) != 0) {
      uint64_t v21 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v21 = v19;
    }
    CFDictionarySetValue(v18, @"VTIsHardwareAccelerated", *v21);
    if ((a5 & 8) != 0)
    {
      CFDictionarySetValue(v18, @"VTIsWrapperDecoder", *v20);
      if (a6) {
        CFDictionarySetValue(v18, @"VTWrapsCodecType", a6);
      }
    }
    if ((a5 & 0x10) != 0) {
      CFDictionarySetValue(v18, @"VTIsParavirtualized", *v20);
    }
    CFMutableDictionaryRef v22 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v22)
    {
      uint64_t v23 = v22;
      CGRect v36 = a9 + 1;
      uint64_t v25 = *a9;
      if (*a9)
      {
        do
        {
          uint64_t v26 = v36;
          CFStringRef v37 = v36 + 1;
          CFTypeID v27 = *v26;
          if (*v26)
          {
            int v28 = CFEqual(v25, @"VTHostDecoderID");
            CFStringRef v29 = v18;
            if (!v28)
            {
              int v30 = CFEqual(v25, @"VTDecoderCapabilities");
              CFStringRef v29 = v18;
              if (!v30)
              {
                if (CFEqual(v25, @"IsPreferredInternalPlugin")) {
                  CFStringRef v29 = v18;
                }
                else {
                  CFStringRef v29 = v23;
                }
              }
            }
            CFDictionarySetValue(v29, v25, v27);
          }
          long long v31 = v37;
          CGRect v36 = v37 + 1;
          uint64_t v25 = *v31;
        }
        while (*v31);
      }
      if (CFDictionaryGetCount(v23) >= 1) {
        CFDictionarySetValue(v18, @"VTRequiredSpecificationEntries", v23);
      }
      uint64_t v32 = vtRegisterVideoDecoderInternal(a3, a4, v18, a7, a8);
      CFRelease(v18);
      __int16 v33 = v23;
    }
    else
    {
      uint64_t v32 = FigSignalErrorAt();
      __int16 v33 = v18;
    }
    CFRelease(v33);
    return v32;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void __vtLoadParavirtualizedVideoDecoders_block_invoke()
{
  CFUUIDRef v0 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  vtLoadParavirtualizedVideoDecoders_sGuestUUID = (__int128)CFUUIDGetUUIDBytes(v0);
  if (v0)
  {
    CFRelease(v0);
  }
}

uint64_t __vtLoadParavirtualizedVideoDecoders_block_invoke_2(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  long long v6 = vtLoadParavirtualizedVideoDecoders_sGuestUUID;
  CFUUIDRef v3 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFUUIDBytes)vtLoadParavirtualizedVideoDecoders_sGuestUUID);
  int v5 = 0;
  if (!VTParavirtualizationMessageGetMessageTypeAndFlagsAndGuestUUID(a2, &v5, 0, 0))
  {
    if (v5 == 1383295341)
    {
      if (!vtUnregisterParavirtualizedVideoDecoders()) {
        sReloadParavirtualizedDecodersList = 1;
      }
    }
    else if (v5 == 1115252001 && !vtUnregisterParavirtualizedVideoDecoders())
    {
      sReloadParavirtualizedDecodersList = 1;
      VTParavirtualizationGuestRemoveHandlerForUUID((CFUUIDBytes *)&v6);
    }
  }
  if (v3) {
    CFRelease(v3);
  }
  return 0;
}

uint64_t vtUnregisterParavirtualizedVideoDecoders()
{
  if (sVideoDecoderRegistry)
  {
    uint64_t v0 = FigRegistryCopyFilteredItemList();
    if (v0) {
      return v0;
    }
    else {
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t vtFilterRegistryItemForParavirtualizedDecodersOnly()
{
  if (!FigRegistryItemCopyMatchingInfo()) {
    FigCFDictionaryGetBooleanIfPresent();
  }
  return 0;
}

uint64_t vtRegisterVideoDecoderWithSpecificationArgumentWithInfoKeysAndValues(const void *a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  return vtRegisterVideoDecoderWithInfoKeysAndValuesInternal2(a1, a2, a3, a4, 19, 0, 0, (uint64_t)ParavirtualizedVideoDecoder_CreateInstanceWithSpecification, &a9);
}

uint64_t vtscr_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sVTCompressionSessionRemoteID = result;
  return result;
}

uint64_t VTCompressionSessionRemote_Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v14 = vtcsr_oneTimeInitialization();
  if (v14) {
    goto LABEL_28;
  }
  MEMORY[0x199705810](&VTCompressionSessionRemoteGetTypeID_sRegisterVTCompressionSessionRemoteOnce, vtscr_Register);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t v14 = FigSignalErrorAt();
LABEL_28:
    uint64_t v22 = v14;
    CGFloat v20 = 0;
    goto LABEL_21;
  }
  uint64_t v16 = Instance;
  *(void *)(Instance + 96) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_DWORD *)(v16 + 32) = 0;
  *(void *)(v16 + 112) = a10;
  *(void *)(v16 + 176) = a11;
  *(void *)(v16 + 80) = dispatch_group_create();
  *(void *)(v16 + 88) = FigDispatchQueueCreateWithPriority();
  *(void *)(v16 + 72) = dispatch_queue_create("com.apple.coremedia.compressionsession.pendingframequeue", 0);
  *(void *)(v16 + 128) = FigSemaphoreCreate();
  *(void *)(v16 + 160) = FigSemaphoreCreate();
  *(void *)(v16 + 208) = 1;
  *(void *)(v16 + 48) = FigSemaphoreCreate();
  CFStringRef v17 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a6)
  {
    if (VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode())
    {
      if (CFDictionaryContainsKey(a6, @"CMSession"))
      {
        CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy(*v17, 0, a6);
        if (!MutableCopy)
        {
          uint64_t v22 = 0;
          CGFloat v20 = 0;
          goto LABEL_23;
        }
        CFTypeID v19 = MutableCopy;
        CFDictionaryRemoveValue(MutableCopy, @"CMSession");
        CGFloat v20 = v19;
      }
      else
      {
        CGFloat v20 = 0;
      }
    }
    else
    {
      CGFloat v20 = 0;
    }
    uint64_t CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
    if (CFDataFromCFPropertyList) {
      goto LABEL_22;
    }
  }
  else
  {
    CGFloat v20 = 0;
  }
  if (a7 && (uint64_t CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList(), CFDataFromCFPropertyList)
    || a9 && (uint64_t CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList(), CFDataFromCFPropertyList)
    || (*(void *)(v16 + 224) = 0,
        uint64_t CFDataFromCFPropertyList = weakReferenceTable_AddPointerAndGetKey(),
        CFDataFromCFPropertyList)
    || (uint64_t CFDataFromCFPropertyList = FigRPCCreateServerConnectionForObject(), CFDataFromCFPropertyList)
    || (uint64_t CFDataFromCFPropertyList = FigRPCGetServerConnectionInfo(), CFDataFromCFPropertyList))
  {
LABEL_22:
    uint64_t v22 = CFDataFromCFPropertyList;
    goto LABEL_23;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  uint64_t v22 = 0;
  if (a12)
  {
    *a12 = v16;
LABEL_21:
    uint64_t v23 = vtcsr_handleMachErrorsInternal(0, v22);
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v23 = vtcsr_handleMachErrorsInternal(v16, v22);
  CFRelease((CFTypeRef)v16);
LABEL_24:
  if (v20) {
    CFRelease(v20);
  }
  return v23;
}

uint64_t vtcsr_oneTimeInitialization()
{
  uint64_t v3 = 0;
  CFIndex v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __vtcsr_oneTimeInitialization_block_invoke;
  block[3] = &unk_1E5785118;
  block[4] = &v3;
  if (vtcsr_oneTimeInitialization_once != -1) {
    dispatch_once(&vtcsr_oneTimeInitialization_once, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t weakReferenceTable_AddPointerAndGetKey()
{
  MEMORY[0x199705810](&gWeakReferenceTable_RemoteCompressionSessionClientThreadOnce, weakReferenceTable_OneTimeInitialization);
  if (gWeakReferenceTable_RemoteCompressionSessionClient)
  {
    return MEMORY[0x1F40DCCD0]();
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void vtcsr_handleDeadServerConnection(uint64_t a1, uint64_t a2)
{
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  v9[3] = 0;
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2000000000;
  v8[3] = 0;
  *(unsigned char *)(a2 + 28) = 1;
  uint64_t v3 = *(NSObject **)(a2 + 72);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __vtcsr_handleDeadServerConnection_block_invoke;
  block[3] = &unk_1E57851D0;
  void block[5] = v8;
  block[6] = a2;
  block[4] = v9;
  dispatch_sync(v3, block);
  CFRetain((CFTypeRef)a2);
  CFIndex v4 = *(NSObject **)(a2 + 80);
  uint64_t v5 = *(NSObject **)(a2 + 88);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  void v6[2] = __vtcsr_handleDeadServerConnection_block_invoke_2;
  v6[3] = &unk_1E57851F8;
  v6[4] = v8;
  v6[5] = v9;
  v6[6] = a2;
  dispatch_group_async(v4, v5, v6);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v9, 8);
}

uint64_t vtcsr_handleMachErrorsInternal(uint64_t a1, uint64_t a2)
{
  if ((int)a2 <= 268435458)
  {
    if (a2 != -308 && a2 != -303) {
      goto LABEL_11;
    }
  }
  else if ((a2 - 268435459) >= 2 && a2 != 268451843)
  {
LABEL_11:
    uint64_t v2 = a2;
LABEL_12:
    if (!VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode()) {
      goto LABEL_15;
    }
    return v2;
  }
  if (a1)
  {
    *(unsigned char *)(a1 + 28) = 1;
    uint64_t v2 = 4294954384;
    goto LABEL_12;
  }
  if (!VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode())
  {
    uint64_t v2 = 4294954384;
LABEL_15:
    FigRPCKillServerOnTimeout();
    return v2;
  }
  return 4294954384;
}

void *VTCompressionSessionRemote_Invalidate(void *result)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  uint64_t v1 = (uint64_t)result;
  if (*((unsigned char *)result + 60)) {
    return result;
  }
  *((unsigned char *)result + 60) = 1;
  mach_port_t v2 = *((_DWORD *)result + 6);
  if (v2 && *(void *)(v1 + 96))
  {
    if (*(void *)(v1 + 120))
    {
      if (VTCompressionSessionRemoteClient_CompleteTiles(v2))
      {
LABEL_8:
        if (*(void *)(v1 + 88)) {
          vtcsr_dequeueAllPendingFramesAndCallbackClientForEach(v1, 1, 1);
        }
        FigSemaphoreWaitRelative();
        FigSemaphoreSignal();
        VTCompressionSessionRemoteClient_Destroy(*(_DWORD *)(v1 + 24));
        goto LABEL_11;
      }
    }
    else if (*(_DWORD *)(v1 + 32) == 2)
    {
      if (VTCompressionSessionRemoteClient_CompleteMotionEstimation(v2)) {
        goto LABEL_8;
      }
    }
    else
    {
      long long v8 = *MEMORY[0x1E4F1F9F8];
      uint64_t v9 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      if (VTCompressionSessionRemoteClient_CompleteFrames(v2, &v8)) {
        goto LABEL_8;
      }
    }
    FigSemaphoreWaitRelative();
    goto LABEL_8;
  }
LABEL_11:
  if (*(void *)(v1 + 16))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    FigRPCDisposeServerConnection();
    *(void *)(v1 + 16) = 0;
  }
  uint64_t v3 = *(NSObject **)(v1 + 80);
  if (v3) {
    dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  }
  CFIndex v4 = *(const void **)(v1 + 64);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(v1 + 64) = 0;
  }
  uint64_t v5 = *(const void **)(v1 + 104);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(v1 + 104) = 0;
  }
  int v6 = *(const void **)(v1 + 192);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(v1 + 192) = 0;
  }
  uint64_t v7 = *(const void **)(v1 + 200);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(v1 + 200) = 0;
  }
  return weakReferenceTable_RemovePointer((void *)(v1 + 224));
}

uint64_t vtcsr_dequeueAllPendingFramesAndCallbackClientForEach(uint64_t a1, char a2, int a3)
{
  uint64_t v11 = 0;
  CFStringRef v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = 0;
  uint64_t v5 = *(NSObject **)(a1 + 80);
  int v6 = *(NSObject **)(a1 + 88);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __vtcsr_dequeueAllPendingFramesAndCallbackClientForEach_block_invoke;
  block[3] = &unk_1E5785140;
  char v10 = a2;
  block[4] = &v11;
  void block[5] = a1;
  dispatch_group_async(v5, v6, block);
  if (a3) {
    dispatch_group_wait(*(dispatch_group_t *)(a1 + 80), 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v7 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void *weakReferenceTable_RemovePointer(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    MEMORY[0x199705810](&gWeakReferenceTable_RemoteCompressionSessionClientThreadOnce, weakReferenceTable_OneTimeInitialization);
    if (gWeakReferenceTable_RemoteCompressionSessionClient)
    {
      uint64_t result = (void *)FigCFWeakReferenceTableRemoveValue();
      void *v1 = 0;
    }
    else
    {
      return (void *)FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t VTCompressionSessionRemote_CopySupportedPropertyDictionary(uint64_t a1)
{
  unsigned int v8 = 0;
  uint64_t v7 = 0;
  int v6 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 60))
  {
    return FigSignalErrorAt();
  }
  uint64_t CFPropertyListFromData = VTCompressionSessionRemoteClient_CopySupportedPropertyDictionary(*(_DWORD *)(a1 + 24), &v7, &v6, &v8);
  if (CFPropertyListFromData) {
    goto LABEL_9;
  }
  uint64_t v4 = v8;
  if (!v8)
  {
    uint64_t CFPropertyListFromData = FigCreateCFPropertyListFromData();
LABEL_9:
    uint64_t v4 = CFPropertyListFromData;
  }
  uint64_t v5 = vtcsr_handleMachErrorsInternal(a1, v4);
  if (v6) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v7);
  }
  return v5;
}

uint64_t VTCompressionSessionRemote_CopySerializableProperties(uint64_t a1)
{
  unsigned int v8 = 0;
  uint64_t v7 = 0;
  int v6 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 60))
  {
    return FigSignalErrorAt();
  }
  uint64_t CFPropertyListFromData = VTCompressionSessionRemoteClient_CopySerializableProperties(*(_DWORD *)(a1 + 24), &v7, &v6, &v8);
  if (CFPropertyListFromData) {
    goto LABEL_9;
  }
  uint64_t v4 = v8;
  if (!v8)
  {
    uint64_t CFPropertyListFromData = FigCreateCFPropertyListFromData();
LABEL_9:
    uint64_t v4 = CFPropertyListFromData;
  }
  uint64_t v5 = vtcsr_handleMachErrorsInternal(a1, v4);
  if (v6) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v7);
  }
  return v5;
}

uint64_t VTCompressionSessionRemote_CopyProperty(uint64_t a1)
{
  unsigned int v9 = 0;
  uint64_t v8 = 0;
  int v7 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 60))
  {
    return FigSignalErrorAt();
  }
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  uint64_t CFPropertyListFromData = VTCompressionSessionRemoteClient_CopyProperty(*(_DWORD *)(a1 + 24), CStringPtrAndBufferToFree, &v8, &v7, &v9);
  if (CFPropertyListFromData) {
    goto LABEL_9;
  }
  uint64_t v5 = v9;
  if (!v9)
  {
    uint64_t CFPropertyListFromData = FigCreateCFPropertyListFromData();
LABEL_9:
    uint64_t v5 = CFPropertyListFromData;
  }
  free(0);
  uint64_t v6 = vtcsr_handleMachErrorsInternal(a1, v5);
  if (v7) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v8);
  }
  return v6;
}

uint64_t VTCompressionSessionRemote_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  unsigned int v17 = 0;
  if (!*(unsigned char *)(a1 + 28) && !*(unsigned char *)(a1 + 60))
  {
    if (FigCFEqual())
    {
      int v7 = *(const void **)(a1 + 216);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(a1 + 216) = 0;
      }
    }
    if (CFEqual(@"MultiPassStorage", a2))
    {
      if (a3 && (uint64_t v8 = *(void *)(a3 + 16)) != 0) {
        int v9 = *(_DWORD *)(v8 + 24);
      }
      else {
        int v9 = 0;
      }
      unsigned int v10 = VTCompressionSessionRemoteClient_SetMultiPassStorage(*(_DWORD *)(a1 + 24), v9, &v17);
    }
    else
    {
      CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
      CFGetAllocator((CFTypeRef)a1);
      uint64_t CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
      if (CFDataFromCFPropertyList)
      {
        uint64_t v16 = CFDataFromCFPropertyList;
LABEL_20:
        free(0);
        return vtcsr_handleMachErrorsInternal(a1, v16);
      }
      mach_port_t v13 = *(_DWORD *)(a1 + 24);
      BytePtr = CFDataGetBytePtr(0);
      unsigned int Length = CFDataGetLength(0);
      unsigned int v10 = VTCompressionSessionRemoteClient_SetProperty(v13, CStringPtrAndBufferToFree, (uint64_t)BytePtr, Length, (int *)&v17);
    }
    if (v10) {
      uint64_t v16 = v10;
    }
    else {
      uint64_t v16 = v17;
    }
    goto LABEL_20;
  }

  return FigSignalErrorAt();
}

uint64_t VTCompressionSessionRemote_SetProperties(uint64_t a1, CFDictionaryRef theDict)
{
  unsigned int v19 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 60))
  {
    return FigSignalErrorAt();
  }
  CFStringRef Value = CFDictionaryGetValue(theDict, @"MultiPassStorage");
  if (!Value)
  {
    uint64_t v8 = 0;
    goto LABEL_16;
  }
  uint64_t v6 = Value[2];
  if (v6) {
    int v7 = *(_DWORD *)(v6 + 24);
  }
  else {
    int v7 = 0;
  }
  uint64_t v9 = VTCompressionSessionRemoteClient_SetMultiPassStorage(*(_DWORD *)(a1 + 24), v7, &v19);
  if (v9) {
    goto LABEL_27;
  }
  uint64_t v10 = v19;
  if (!v19)
  {
    if (CFDictionaryGetCount(theDict) >= 2)
    {
      CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
      if (MutableCopy)
      {
        CFStringRef v12 = MutableCopy;
        CFDictionaryRemoveValue(MutableCopy, @"MultiPassStorage");
        uint64_t v8 = v12;
LABEL_16:
        CFGetAllocator((CFTypeRef)a1);
        uint64_t CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
        if (CFDataFromCFPropertyList)
        {
          uint64_t v10 = CFDataFromCFPropertyList;
        }
        else
        {
          mach_port_t v14 = *(_DWORD *)(a1 + 24);
          BytePtr = CFDataGetBytePtr(0);
          int Length = CFDataGetLength(0);
          unsigned int v17 = VTCompressionSessionRemoteClient_SetProperties(v14, (uint64_t)BytePtr, Length, (int *)&v19);
          if (v17) {
            uint64_t v10 = v17;
          }
          else {
            uint64_t v10 = v19;
          }
        }
        goto LABEL_22;
      }
      uint64_t v9 = FigSignalErrorAt();
LABEL_27:
      uint64_t v10 = v9;
      goto LABEL_21;
    }
    uint64_t v10 = 0;
  }
LABEL_21:
  uint64_t v8 = 0;
LABEL_22:
  uint64_t v18 = vtcsr_handleMachErrorsInternal(a1, v10);
  if (v8) {
    CFRelease(v8);
  }
  return v18;
}

uint64_t VTCompressionSessionRemote_GetPixelBufferPool(void *cf)
{
  if (*((unsigned char *)cf + 28) || *((unsigned char *)cf + 60))
  {
    if (FigSignalErrorAt()) {
      return 0;
    }
    return cf[25];
  }
  CFGetAllocator(cf);
  uint64_t v2 = VTCompressionSessionRemote_CopyProperty((uint64_t)cf);
  if (!v2)
  {
    if (FigCFEqual())
    {
LABEL_10:
      uint64_t v5 = 0;
      goto LABEL_11;
    }
    uint64_t v2 = VTCompressionSessionRemote_CopyProperty((uint64_t)cf);
    if (!v2)
    {
      uint64_t v3 = (const void *)cf[25];
      if (v3)
      {
        CFRelease(v3);
        cf[25] = 0;
      }
      uint64_t v4 = (const void *)cf[24];
      cf[24] = 0;
      if (v4) {
        CFRelease(v4);
      }
      goto LABEL_10;
    }
  }
  uint64_t v5 = v2;
LABEL_11:
  if (vtcsr_handleMachErrorsInternal((uint64_t)cf, v5)) {
    return 0;
  }
  return cf[25];
}

uint64_t VTCompressionSessionRemote_PrepareToEncodeFrames(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 60))
  {
    return FigSignalErrorAt();
  }
  uint64_t v3 = VTCompressionSessionRemoteClient_PrepareToEncodeFrames(*(_DWORD *)(a1 + 24));
  if (v3) {
    goto LABEL_13;
  }
  if (FigSemaphoreWaitRelative())
  {
    uint64_t v3 = FigSignalErrorAt();
LABEL_13:
    uint64_t v4 = v3;
    goto LABEL_9;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 140);
LABEL_9:

  return vtcsr_handleMachErrorsInternal(a1, v4);
}

uint64_t VTCompressionSessionRemoteCallbackServer_PrepareToEncodeFramesReturn(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = weakReferenceTable_CopyPointerFromKey();
  if (v4)
  {
    uint64_t v5 = (const void *)v4;
    *(_DWORD *)(v4 + 140) = a3;
    FigSemaphoreSignal();
    CFRelease(v5);
  }
  return 0;
}

uint64_t weakReferenceTable_CopyPointerFromKey()
{
  MEMORY[0x199705810](&gWeakReferenceTable_RemoteCompressionSessionClientThreadOnce, weakReferenceTable_OneTimeInitialization);
  if (gWeakReferenceTable_RemoteCompressionSessionClient)
  {
    return MEMORY[0x1F40DCCE8]();
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t VTCompressionSessionRemote_EncodeFrame(uint64_t a1, uint64_t a2, OpaqueCMTaggedBufferGroup *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  long long v11 = *(_OWORD *)a4;
  uint64_t v12 = *(void *)(a4 + 16);
  long long v9 = *a5;
  uint64_t v10 = *((void *)a5 + 2);
  return vtCompressionSessionRemote_EncodeFrameCommon(a1, a2, a3, &v11, (uint64_t)&v9, a6, a7, a8, 0);
}

uint64_t vtCompressionSessionRemote_EncodeFrameCommon(uint64_t a1, uint64_t a2, CMTaggedBufferGroupRef group, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8, const void *a9)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  int v104 = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  CFDataRef theData = 0;
  uint64_t v121 = 0;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 60))
  {
    return FigSignalErrorAt();
  }
  uint64_t v16 = (vm_map_t *)MEMORY[0x1E4F14960];
  if (!a2)
  {
    uint64_t v92 = a7;
    float v94 = a4;
    uint64_t v95 = a5;
    float v91 = a8;
    if (group)
    {
      CMItemCount Count = CMTaggedBufferGroupGetCount(group);
      if (Count < 6)
      {
        CMItemCount v22 = Count;
        if (Count >= 1)
        {
          CFIndex v23 = 0;
          uint64_t v97 = *MEMORY[0x1E4F1CF80];
          uint64_t v24 = &v109;
          while (1)
          {
            TagCollectionAtIndedouble x = CMTaggedBufferGroupGetTagCollectionAtIndex(group, v23);
            CFDataRef v26 = (const __CFData *)MEMORY[0x199705710](TagCollectionAtIndex, v97);
            CFDataRef v19 = v26;
            if (!v26) {
              break;
            }
            CFIndex Length = CFDataGetLength(v26);
            uint64_t v28 = vm_allocate(*v16, (vm_address_t *)v24 + 3, Length, 1543503873);
            if (v28) {
              goto LABEL_57;
            }
            v124.location = 0;
            v124.length = Length;
            CFDataGetBytes(v19, v124, *((UInt8 **)v24 + 3));
            *((_DWORD *)v24 + 8) = Length;
            CFRelease(v19);
            if (!FigTaggedBufferGroupGetCVPixelBufferAtIndex()) {
              goto LABEL_58;
            }
            *(void *)&long long v107 = 0;
            uint64_t SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
            *((_DWORD *)v24 + 4) = 0;
            if (SerializedAtomDataForPixelBuffer) {
              goto LABEL_8;
            }
            *(void *)(a1 + 184) = (*MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
            ++v23;
            uint64_t v24 = (long long *)((char *)v24 + 40);
            if (v22 == v23) {
              goto LABEL_20;
            }
          }
          uint64_t v28 = FigSignalErrorAt();
LABEL_57:
          uint64_t v18 = v28;
          goto LABEL_39;
        }
      }
LABEL_58:
      uint64_t CFDataFromCFPropertyList = FigSignalErrorAt();
      goto LABEL_59;
    }
LABEL_20:
    if (!a6 || (uint64_t CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList(), !CFDataFromCFPropertyList))
    {
      int v30 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x10A00404814DC14uLL);
      uint64_t v31 = *(void *)(a1 + 208);
      *(void *)(a1 + 208) = v31 + 1;
      *int v30 = v31;
      v30[1] = v92;
      void v30[4] = (uint64_t)_Block_copy(a9);
      uint64_t v32 = *(NSObject **)(a1 + 72);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __vtCompressionSessionRemote_EncodeFrameCommon_block_invoke;
      block[3] = &__block_descriptor_tmp_19;
      block[4] = a1;
      void block[5] = v30;
      dispatch_sync(v32, block);
      mach_port_name_t v33 = *(_DWORD *)(a1 + 24);
      int v34 = v104;
      uint64_t v35 = v103;
      unsigned int v36 = v102;
      unsigned int v37 = v109;
      uint64_t v38 = *((void *)&v109 + 1);
      unsigned int v39 = v110;
      uint64_t v40 = *((void *)&v110 + 1);
      unsigned int v41 = v111;
      unsigned int v42 = DWORD2(v111);
      uint64_t v43 = v112;
      unsigned int v44 = DWORD2(v112);
      unint64_t v45 = v113;
      unsigned int v46 = DWORD2(v113);
      unsigned int v47 = v114;
      uint64_t v48 = *((void *)&v114 + 1);
      unsigned int v49 = v115;
      uint64_t v50 = *((void *)&v115 + 1);
      unsigned int v51 = v116;
      unsigned int v52 = DWORD2(v116);
      uint64_t v53 = v117;
      unsigned int v54 = DWORD2(v117);
      uint64_t v98 = v118;
      unsigned int aBlock = DWORD2(v118);
      unsigned int v93 = v119;
      uint64_t v90 = *((void *)&v119 + 1);
      unsigned int v89 = v120;
      uint64_t v88 = *((void *)&v120 + 1);
      unsigned int v87 = v121;
      int v55 = (int)theData;
      if (theData)
      {
        uint64_t v72 = v117;
        unsigned int v73 = DWORD2(v116);
        unsigned int v74 = v116;
        uint64_t v75 = *((void *)&v115 + 1);
        unsigned int v76 = v115;
        uint64_t v77 = *((void *)&v114 + 1);
        unsigned int v78 = v114;
        unsigned int v79 = DWORD2(v113);
        unint64_t v80 = v113;
        unsigned int v81 = DWORD2(v112);
        uint64_t v82 = v112;
        unsigned int v83 = DWORD2(v111);
        unsigned int v84 = v111;
        uint64_t v85 = *((void *)&v110 + 1);
        unsigned int v86 = v110;
        uint64_t v56 = *((void *)&v109 + 1);
        unsigned int v57 = v109;
        unsigned int v58 = v102;
        uint64_t v59 = v103;
        int v60 = v104;
        mach_port_name_t v61 = *(_DWORD *)(a1 + 24);
        BytePtr = CFDataGetBytePtr(theData);
        int v55 = (int)theData;
        if (theData) {
          int v55 = CFDataGetLength(theData);
        }
        mach_port_name_t v33 = v61;
        int v34 = v60;
        uint64_t v35 = v59;
        unsigned int v36 = v58;
        unsigned int v37 = v57;
        uint64_t v38 = v56;
        unsigned int v39 = v86;
        uint64_t v40 = v85;
        unsigned int v41 = v84;
        unsigned int v42 = v83;
        uint64_t v43 = v82;
        unsigned int v44 = v81;
        unint64_t v45 = v80;
        unsigned int v47 = v78;
        unsigned int v46 = v79;
        uint64_t v48 = v77;
        unsigned int v49 = v76;
        uint64_t v50 = v75;
        unsigned int v52 = v73;
        unsigned int v51 = v74;
        uint64_t v53 = v72;
      }
      else
      {
        BytePtr = 0;
      }
      uint64_t v63 = *v30;
      long long v107 = *v94;
      uint64_t v108 = *((void *)v94 + 2);
      long long v105 = *(_OWORD *)v95;
      uint64_t v106 = *(void *)(v95 + 16);
      uint64_t v64 = VTCompressionSessionRemoteClient_EncodeFrame(v33, v34, v35, v36, v37, v38, v39, v40, __SPAIR64__(v42, v41), v43, v44, v45, __SPAIR64__(v47, v46), v48, v49, v50, __SPAIR64__(v52, v51), v53, v54,
              v98,
              __SPAIR64__(v93, aBlock),
              v90,
              v89,
              v88,
              v87,
              (uint64_t)&v107,
              &v105,
              (uint64_t)BytePtr,
              v55,
              v63);
      if (v64)
      {
        uint64_t v18 = v64;
        goto LABEL_36;
      }
      FigSemaphoreWaitRelative();
      uint64_t v18 = *(unsigned int *)(a1 + 140);
      int v65 = *(unsigned __int8 *)(a1 + 144);
      if (!v18)
      {
        int v66 = *(_DWORD *)(a1 + 136);
        if (v66)
        {
          if (!v91)
          {
            uint64_t v18 = 0;
            if (*(unsigned char *)(a1 + 144)) {
              goto LABEL_38;
            }
            goto LABEL_36;
          }
        }
        else
        {
          uint64_t v67 = vtcsr_dequeueAllPendingFramesAndCallbackClientForEach(a1, 0, 1);
          uint64_t v18 = v67;
          if (!v91 || v67) {
            goto LABEL_35;
          }
        }
        uint64_t v18 = 0;
        *float v91 = v66;
      }
LABEL_35:
      if (v65)
      {
LABEL_38:
        CFDataRef v19 = 0;
        goto LABEL_39;
      }
LABEL_36:
      double v68 = *(NSObject **)(a1 + 72);
      v99[0] = MEMORY[0x1E4F143A8];
      v99[1] = 0x40000000;
      v99[2] = __vtCompressionSessionRemote_EncodeFrameCommon_block_invoke_2;
      v99[3] = &__block_descriptor_tmp_20_0;
      v99[4] = a1;
      v99[5] = v30;
      dispatch_sync(v68, v99);
      goto LABEL_38;
    }
LABEL_59:
    uint64_t v18 = CFDataFromCFPropertyList;
    goto LABEL_38;
  }
  uint64_t SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
  if (!SerializedAtomDataForPixelBuffer)
  {
    uint64_t v92 = a7;
    float v94 = a4;
    uint64_t v95 = a5;
    float v91 = a8;
    *(void *)(a1 + 184) = (v102 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
    goto LABEL_20;
  }
LABEL_8:
  uint64_t v18 = SerializedAtomDataForPixelBuffer;
  CFDataRef v19 = 0;
  *(void *)(a1 + 184) = 0;
LABEL_39:
  uint64_t v69 = vtcsr_handleMachErrorsInternal(a1, v18);
  if (v104) {
    FigMachPortReleaseSendRight_();
  }
  if (v102) {
    MEMORY[0x199706B20](*v16, v103);
  }
  if (theData) {
    CFRelease(theData);
  }
  for (uint64_t i = 0; i != 200; i += 40)
  {
    if (*(_DWORD *)((char *)&v109 + i)) {
      FigMachPortReleaseSendRight_();
    }
    int v71 = (char *)&v109 + i;
    if (*(_DWORD *)((char *)&v109 + i + 16)) {
      MEMORY[0x199706B20](*v16, *((void *)v71 + 1));
    }
    if (*((_DWORD *)v71 + 8)) {
      MEMORY[0x199706B20](*v16, *(void *)((char *)&v110 + i + 8));
    }
  }
  if (v19) {
    CFRelease(v19);
  }
  return v69;
}

uint64_t VTCompressionSessionRemote_EncodeFrameWithOutputHandler(uint64_t a1, uint64_t a2, OpaqueCMTaggedBufferGroup *a3, uint64_t a4, long long *a5, uint64_t a6, _DWORD *a7, const void *a8)
{
  long long v11 = *(_OWORD *)a4;
  uint64_t v12 = *(void *)(a4 + 16);
  long long v9 = *a5;
  uint64_t v10 = *((void *)a5 + 2);
  return vtCompressionSessionRemote_EncodeFrameCommon(a1, a2, a3, &v11, (uint64_t)&v9, a6, 0, a7, a8);
}

uint64_t VTCompressionSessionRemoteCallbackServer_EncodeReturn(uint64_t a1, uint64_t a2, int a3, char a4, int a5)
{
  uint64_t v8 = weakReferenceTable_CopyPointerFromKey();
  if (v8)
  {
    long long v9 = (const void *)v8;
    *(_DWORD *)(v8 + 136) = a3;
    *(_DWORD *)(v8 + 140) = a5;
    *(unsigned char *)(v8 + 144) = a4;
    FigSemaphoreSignal();
    CFRelease(v9);
  }
  return 0;
}

uint64_t VTCompressionSessionRemote_CompleteFrames(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 28) && !*(unsigned char *)(a1 + 60))
  {
    mach_port_t v4 = *(_DWORD *)(a1 + 24);
    long long v7 = *(_OWORD *)a2;
    uint64_t v8 = *(void *)(a2 + 16);
    uint64_t v5 = VTCompressionSessionRemoteClient_CompleteFrames(v4, &v7);
    if (!v5)
    {
      FigSemaphoreWaitRelative();
      uint64_t v6 = *(unsigned int *)(a1 + 168);
      if (v6) {
        return vtcsr_handleMachErrorsInternal(a1, v6);
      }
      uint64_t v5 = vtcsr_dequeueAllPendingFramesAndCallbackClientForEach(a1, 0, 1);
      if (!v5)
      {
        FigSemaphoreWaitRelative();
        FigSemaphoreSignal();
        uint64_t v6 = 0;
        return vtcsr_handleMachErrorsInternal(a1, v6);
      }
    }
    uint64_t v6 = v5;
    return vtcsr_handleMachErrorsInternal(a1, v6);
  }

  return FigSignalErrorAt();
}

uint64_t VTCompressionSessionRemoteCallbackServer_CompleteFramesReturn(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = weakReferenceTable_CopyPointerFromKey();
  if (v4)
  {
    uint64_t v5 = (const void *)v4;
    *(_DWORD *)(v4 + 168) = a3;
    FigSemaphoreSignal();
    CFRelease(v5);
  }
  return 0;
}

uint64_t VTCompressionSessionRemote_BeginPass(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v8 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 60))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v6 = VTCompressionSessionRemoteClient_BeginPass(*(_DWORD *)(a1 + 24), a2, &v8, (_DWORD *)&v8 + 1);
    if (v6)
    {
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v7 = HIDWORD(v8);
      if (a3 && !HIDWORD(v8)) {
        *a3 = v8;
      }
    }
    return vtcsr_handleMachErrorsInternal(a1, v7);
  }
}

uint64_t VTCompressionSessionRemote_EndPass(uint64_t a1, BOOL *a2, _DWORD *a3)
{
  uint64_t v10 = 0;
  int v9 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 60))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = VTCompressionSessionRemoteClient_EndPass(*(_DWORD *)(a1 + 24), &v10, &v9, (_DWORD *)&v10 + 1);
    if (v7)
    {
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v8 = HIDWORD(v10);
      if (!HIDWORD(v10))
      {
        if (a2) {
          *a2 = v10 != 0;
        }
        uint64_t v8 = 0;
        if (a3) {
          *a3 = v9;
        }
      }
    }
    return vtcsr_handleMachErrorsInternal(a1, v8);
  }
}

uint64_t VTCompressionSessionRemote_GetTimeRangesForNextPass(uint64_t a1, uint64_t *a2, void *a3)
{
  unsigned int v15 = 0;
  mach_port_t v13 = 0;
  uint64_t v14 = 0;
  unsigned int v12 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 60))
  {
    return FigSignalErrorAt();
  }
  uint64_t TimeRangesForNextPass = VTCompressionSessionRemoteClient_GetTimeRangesForNextPass(*(_DWORD *)(a1 + 24), &v14, &v13, &v12, &v15);
  if (TimeRangesForNextPass)
  {
    uint64_t v8 = TimeRangesForNextPass;
    goto LABEL_22;
  }
  uint64_t v8 = v15;
  if (!v15)
  {
    int v9 = 0;
    if (v12 && v14 >= 1)
    {
      size_t v10 = 48 * v14;
      if (48 * v14 > (unint64_t)v12) {
        goto LABEL_21;
      }
      uint64_t v8 = 4294954392;
      if ((unint64_t)v14 > 0x555555555555555) {
        goto LABEL_22;
      }
      if (!v10) {
        goto LABEL_22;
      }
      long long v11 = malloc_type_malloc(v10, 0x5CC9CBA6uLL);
      if (!v11) {
        goto LABEL_22;
      }
      int v9 = v11;
      memcpy(v11, v13, 48 * v14);
    }
    if (a2) {
      *a2 = v14;
    }
    if (a3)
    {
      uint64_t v8 = 0;
      *a3 = v9;
      goto LABEL_22;
    }
    if (v9) {
      free(v9);
    }
LABEL_21:
    uint64_t v8 = 0;
  }
LABEL_22:
  if (v12) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v13);
  }
  return vtcsr_handleMachErrorsInternal(a1, v8);
}

uint64_t VTMultiPassStorageRemote_Create(uint64_t a1, uint64_t a2, const __CFURL *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = vtcsr_oneTimeInitialization();
  if (v9) {
    goto LABEL_30;
  }
  MEMORY[0x199705810](&VTCompressionSessionRemoteGetTypeID_sRegisterVTCompressionSessionRemoteOnce, vtscr_Register);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t v9 = FigSignalErrorAt();
LABEL_30:
    uint64_t v22 = v9;
    a3 = 0;
    unsigned int v17 = 0;
    goto LABEL_19;
  }
  long long v11 = (void *)Instance;
  *(void *)(Instance + 80) = dispatch_group_create();
  v11[11] = dispatch_queue_create("com.apple.coremedia.compressionsession.clientcallback", 0);
  if (a5)
  {
    uint64_t CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
    if (CFDataFromCFPropertyList)
    {
      uint64_t v22 = CFDataFromCFPropertyList;
      a3 = 0;
      unsigned int v17 = 0;
      goto LABEL_23;
    }
  }
  if (a3)
  {
    CFURLRef v13 = CFURLCopyAbsoluteURL(a3);
    a3 = v13;
    if (v13)
    {
      CFStringRef v14 = CFURLGetString(v13);
      if (v14)
      {
        CFStringRef v15 = v14;
        CFIndex MaximumSizeOfFileSystemRepresentation = CFStringGetMaximumSizeOfFileSystemRepresentation(v14);
        if (MaximumSizeOfFileSystemRepresentation < 1024)
        {
          unsigned int v17 = 0;
          p_char buffer = &buffer;
          CFIndex v19 = 1024;
          goto LABEL_13;
        }
        CFIndex v19 = MaximumSizeOfFileSystemRepresentation + 1;
        CGFloat v20 = (char *)malloc_type_malloc(MaximumSizeOfFileSystemRepresentation + 1, 0x9C832853uLL);
        if (v20)
        {
          p_char buffer = v20;
          unsigned int v17 = v20;
LABEL_13:
          if (CFStringGetFileSystemRepresentation(v15, p_buffer, v19)) {
            goto LABEL_14;
          }
LABEL_21:
          Kedouble y = FigSignalErrorAt();
LABEL_22:
          uint64_t v22 = Key;
          goto LABEL_23;
        }
      }
    }
    unsigned int v17 = 0;
    goto LABEL_21;
  }
  unsigned int v17 = 0;
LABEL_14:
  v11[28] = 0;
  Kedouble y = weakReferenceTable_AddPointerAndGetKey();
  if (Key) {
    goto LABEL_22;
  }
  Kedouble y = FigRPCCreateServerConnectionForObject();
  if (Key) {
    goto LABEL_22;
  }
  Kedouble y = FigRPCGetServerConnectionInfo();
  if (Key) {
    goto LABEL_22;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  uint64_t v22 = 0;
  if (a6)
  {
    *a6 = v11;
LABEL_19:
    uint64_t v23 = vtcsr_handleMachErrorsInternal(0, v22);
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v23 = vtcsr_handleMachErrorsInternal((uint64_t)v11, v22);
  CFRelease(v11);
LABEL_24:
  if (v17) {
    free(v17);
  }
  if (a3) {
    CFRelease(a3);
  }
  return v23;
}

void *VTMultiPassStorageRemote_Invalidate(void *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    if (!*((unsigned char *)result + 60))
    {
      *((unsigned char *)result + 60) = 1;
      int v2 = *((_DWORD *)result + 6);
      if (v2 && !*(unsigned char *)(v1 + 28))
      {
        uint64_t v3 = VTCompressionSessionRemoteClient_MultiPassStorageDestroy(v2);
        vtcsr_handleMachErrorsInternal(v1, v3);
      }
      if (*(void *)(v1 + 16))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        FigRPCDisposeServerConnection();
        *(void *)(v1 + 16) = 0;
      }
      return weakReferenceTable_RemovePointer((void *)(v1 + 224));
    }
  }
  return result;
}

uint64_t VTMultiPassStorageRemote_SetIdentifier(uint64_t a1)
{
  unsigned int v6 = 0;
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  unsigned int v3 = VTCompressionSessionRemoteClient_MultiPassStorageSetIdentifier(*(_DWORD *)(a1 + 24), CStringPtrAndBufferToFree, &v6);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = v6;
  }
  free(0);
  return vtcsr_handleMachErrorsInternal(a1, v4);
}

CFStringRef VTMultiPassStorageRemote_CopyIdentifier(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = VTCompressionSessionRemoteClient_MultiPassStorageCopyIdentifier(*(_DWORD *)(a1 + 24), cStr);
  if (v2) {
    CFStringRef v3 = 0;
  }
  else {
    CFStringRef v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0);
  }
  vtcsr_handleMachErrorsInternal(a1, v2);
  return v3;
}

uint64_t VTMultiPassStorageRemote_SetDataAtTimeStamp(uint64_t a1, uint64_t a2, int a3, CFDataRef theData)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unsigned int v14 = 0;
  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    int Length = CFDataGetLength(theData);
  }
  else
  {
    BytePtr = 0;
    int Length = 0;
  }
  mach_port_t v10 = *(_DWORD *)(a1 + 24);
  long long v15 = *(_OWORD *)a2;
  uint64_t v16 = *(void *)(a2 + 16);
  unsigned int v11 = VTCompressionSessionRemoteClient_MultiPassStorageSetDataAtTimeStamp(v10, &v15, a3, (uint64_t)BytePtr, Length, (int *)&v14);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v14;
  }
  return vtcsr_handleMachErrorsInternal(a1, v12);
}

uint64_t VTMultiPassStorageRemote_GetTimeStamp(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unsigned int v12 = 0;
  CStringPtrAndBufferToFree = (char *)FigCFStringGetCStringPtrAndBufferToFree();
  mach_port_name_t v8 = *(_DWORD *)(a1 + 24);
  long long v13 = *a2;
  uint64_t v14 = *((void *)a2 + 2);
  unsigned int TimeStamp = VTCompressionSessionRemoteClient_MultiPassStorageGetTimeStamp(v8, (uint64_t)&v13, CStringPtrAndBufferToFree, a4, &v12);
  if (TimeStamp) {
    uint64_t v10 = TimeStamp;
  }
  else {
    uint64_t v10 = v12;
  }
  free(0);
  return vtcsr_handleMachErrorsInternal(a1, v10);
}

uint64_t VTMultiPassStorageRemote_GetTimeStampAndDuration(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a5;
  uint64_t v14 = a4;
  unsigned int v12 = 0;
  CStringPtrAndBufferToFree = (char *)FigCFStringGetCStringPtrAndBufferToFree();
  mach_port_name_t v8 = *(_DWORD *)(a1 + 24);
  long long v15 = *a2;
  uint64_t v16 = *((void *)a2 + 2);
  unsigned int TimeStampAndDuration = VTCompressionSessionRemoteClient_MultiPassStorageGetTimeStampAndDuration(v8, (uint64_t)&v15, CStringPtrAndBufferToFree, (uint64_t)&v14, (uint64_t)&v13, &v12);
  if (TimeStampAndDuration) {
    uint64_t v10 = TimeStampAndDuration;
  }
  else {
    uint64_t v10 = v12;
  }
  free(0);
  return vtcsr_handleMachErrorsInternal(a1, v10);
}

uint64_t VTMultiPassStorageRemote_CopyDataAtTimeStamp(uint64_t a1, long long *a2, int a3, __CFData **a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unsigned int v13 = 0;
  *(void *)&length[1] = 0;
  length[0] = 0;
  int v6 = *(_DWORD *)(a1 + 24);
  long long v14 = *a2;
  uint64_t v15 = *((void *)a2 + 2);
  uint64_t v7 = VTCompressionSessionRemoteClient_MultiPassStorageCopyDataAtTimeStamp(v6, (uint64_t)&v14, a3, &length[1], length, &v13);
  if (v7)
  {
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = v13;
    if (v13) {
      goto LABEL_10;
    }
    if (!length[0])
    {
      if (!a4)
      {
        uint64_t v8 = 0;
        return vtcsr_handleMachErrorsInternal(a1, v8);
      }
      uint64_t v10 = 0;
LABEL_9:
      uint64_t v8 = 0;
      *a4 = v10;
      goto LABEL_10;
    }
    CFMutableArrayRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (Mutable)
    {
      uint64_t v10 = Mutable;
      CFDataAppendBytes(Mutable, *(const UInt8 **)&length[1], length[0]);
      if (!a4)
      {
        CFRelease(v10);
        uint64_t v8 = 0;
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    uint64_t v8 = 4294954392;
  }
LABEL_10:
  if (length[0]) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], *(void *)&length[1]);
  }
  return vtcsr_handleMachErrorsInternal(a1, v8);
}

uint64_t VTTileCompressionSessionRemote_Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v13 = vtcsr_oneTimeInitialization();
  if (v13) {
    goto LABEL_26;
  }
  MEMORY[0x199705810](&VTCompressionSessionRemoteGetTypeID_sRegisterVTCompressionSessionRemoteOnce, vtscr_Register);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t v13 = FigSignalErrorAt();
LABEL_26:
    uint64_t v21 = v13;
    CFIndex v19 = 0;
    goto LABEL_19;
  }
  uint64_t v15 = Instance;
  *(void *)(Instance + 96) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_DWORD *)(v15 + 32) = 1;
  *(void *)(v15 + 120) = a8;
  *(void *)(v15 + 176) = a9;
  *(void *)(v15 + 80) = dispatch_group_create();
  *(void *)(v15 + 88) = FigDispatchQueueCreateWithPriority();
  *(void *)(v15 + 72) = dispatch_queue_create("com.apple.coremedia.compressionsession.pendingframequeue", 0);
  *(void *)(v15 + 128) = FigSemaphoreCreate();
  *(void *)(v15 + 160) = FigSemaphoreCreate();
  *(void *)(v15 + 208) = 1;
  *(void *)(v15 + 48) = FigSemaphoreCreate();
  uint64_t v16 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a5)
  {
    if (VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode())
    {
      if (CFDictionaryContainsKey(a5, @"CMSession"))
      {
        CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy(*v16, 0, a5);
        if (!MutableCopy)
        {
          uint64_t v21 = 0;
          CFIndex v19 = 0;
          goto LABEL_21;
        }
        uint64_t v18 = MutableCopy;
        CFDictionaryRemoveValue(MutableCopy, @"CMSession");
        CFIndex v19 = v18;
      }
      else
      {
        CFIndex v19 = 0;
      }
    }
    else
    {
      CFIndex v19 = 0;
    }
    uint64_t CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
    if (CFDataFromCFPropertyList) {
      goto LABEL_20;
    }
  }
  else
  {
    CFIndex v19 = 0;
  }
  if (a6 && (uint64_t CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList(), CFDataFromCFPropertyList)
    || (*(void *)(v15 + 224) = 0,
        uint64_t CFDataFromCFPropertyList = weakReferenceTable_AddPointerAndGetKey(),
        CFDataFromCFPropertyList)
    || (uint64_t CFDataFromCFPropertyList = FigRPCCreateServerConnectionForObject(), CFDataFromCFPropertyList)
    || (uint64_t CFDataFromCFPropertyList = FigRPCGetServerConnectionInfo(), CFDataFromCFPropertyList))
  {
LABEL_20:
    uint64_t v21 = CFDataFromCFPropertyList;
    goto LABEL_21;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  uint64_t v21 = 0;
  if (a10)
  {
    *a10 = v15;
LABEL_19:
    uint64_t v22 = vtcsr_handleMachErrorsInternal(0, v21);
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v22 = vtcsr_handleMachErrorsInternal(v15, v21);
  CFRelease((CFTypeRef)v15);
LABEL_22:
  if (v19) {
    CFRelease(v19);
  }
  return v22;
}

uint64_t VTTileCompressionSessionRemote_PrepareToEncodeTiles(uint64_t a1, int a2, void *a3)
{
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 60))
  {
    return FigSignalErrorAt();
  }
  uint64_t v6 = VTCompressionSessionRemoteClient_PrepareToEncodeTiles(*(_DWORD *)(a1 + 24), a2);
  if (!v6)
  {
    if (!FigSemaphoreWaitRelative())
    {
      uint64_t v7 = *(unsigned int *)(a1 + 140);
      if (a3) {
        *a3 = *(void *)(a1 + 148);
      }
      goto LABEL_10;
    }
    uint64_t v6 = FigSignalErrorAt();
  }
  uint64_t v7 = v6;
LABEL_10:

  return vtcsr_handleMachErrorsInternal(a1, v7);
}

uint64_t VTCompressionSessionRemoteCallbackServer_PrepareToEncodeTilesReturn(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = weakReferenceTable_CopyPointerFromKey();
  if (v6)
  {
    uint64_t v7 = (const void *)v6;
    *(void *)(v6 + 148) = a3;
    *(_DWORD *)(v6 + 140) = a4;
    FigSemaphoreSignal();
    CFRelease(v7);
  }
  return 0;
}

uint64_t VTTileCompressionSessionRemote_EncodeTile(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  int v37 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  CFDataRef theData = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 60))
  {
    return FigSignalErrorAt();
  }
  if (!FigCFEqual())
  {
    uint64_t SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
    if (SerializedAtomDataForPixelBuffer)
    {
      uint64_t v26 = SerializedAtomDataForPixelBuffer;
      *(void *)(a1 + 184) = 0;
      goto LABEL_22;
    }
    *(void *)(a1 + 184) = (v35 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
    uint64_t v31 = *(const void **)(a1 + 216);
    *(void *)(a1 + 216) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v31) {
      CFRelease(v31);
    }
  }
  if (a5)
  {
    uint64_t CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
    if (CFDataFromCFPropertyList)
    {
      uint64_t v26 = CFDataFromCFPropertyList;
      goto LABEL_22;
    }
  }
  uint64_t v16 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x10A00404814DC14uLL);
  uint64_t v17 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = v17 + 1;
  *uint64_t v16 = v17;
  v16[1] = a6;
  uint64_t v18 = *(NSObject **)(a1 + 72);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __VTTileCompressionSessionRemote_EncodeTile_block_invoke;
  block[3] = &__block_descriptor_tmp_6_0;
  block[4] = a1;
  void block[5] = v16;
  dispatch_sync(v18, block);
  mach_port_name_t v19 = *(_DWORD *)(a1 + 24);
  int v20 = v37;
  uint64_t v21 = v36;
  int v22 = v35;
  if (!theData)
  {
    BytePtr = 0;
    goto LABEL_15;
  }
  BytePtr = CFDataGetBytePtr(theData);
  if (!theData)
  {
LABEL_15:
    int Length = 0;
    goto LABEL_16;
  }
  int Length = CFDataGetLength(theData);
LABEL_16:
  uint64_t v27 = VTCompressionSessionRemoteClient_EncodeTile(v19, v20, v21, v22, a3, a4, (uint64_t)BytePtr, Length, *v16);
  if (v27)
  {
    uint64_t v26 = v27;
  }
  else
  {
    FigSemaphoreWaitRelative();
    uint64_t v26 = *(unsigned int *)(a1 + 140);
    int v28 = *(unsigned __int8 *)(a1 + 144);
    if (a7 && !v26) {
      *a7 = *(_DWORD *)(a1 + 136);
    }
    if (v28) {
      goto LABEL_22;
    }
  }
  CFStringRef v29 = *(NSObject **)(a1 + 72);
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 0x40000000;
  v32[2] = __VTTileCompressionSessionRemote_EncodeTile_block_invoke_2;
  v32[3] = &__block_descriptor_tmp_7_0;
  v32[4] = a1;
  v32[5] = v16;
  dispatch_sync(v29, v32);
LABEL_22:
  uint64_t v30 = vtcsr_handleMachErrorsInternal(a1, v26);
  FigMachPortReleaseSendRight_();
  if (v35) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v36);
  }
  if (theData) {
    CFRelease(theData);
  }
  return v30;
}

uint64_t VTTileCompressionSessionRemote_CompleteTiles(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 60))
  {
    return FigSignalErrorAt();
  }
  uint64_t v3 = VTCompressionSessionRemoteClient_CompleteTiles(*(_DWORD *)(a1 + 24));
  if (v3) {
    goto LABEL_13;
  }
  FigSemaphoreWaitRelative();
  uint64_t v4 = *(unsigned int *)(a1 + 168);
  if (!v4)
  {
    uint64_t v3 = vtcsr_dequeueAllPendingFramesAndCallbackClientForEach(a1, 0, 1);
    if (!v3)
    {
      FigSemaphoreWaitRelative();
      FigSemaphoreSignal();
      uint64_t v4 = 0;
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v4 = v3;
  }
LABEL_10:

  return vtcsr_handleMachErrorsInternal(a1, v4);
}

uint64_t VTMotionEstimationSessionRemote_Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8 = vtcsr_oneTimeInitialization();
  if (v8) {
    goto LABEL_15;
  }
  MEMORY[0x199705810](&VTCompressionSessionRemoteGetTypeID_sRegisterVTCompressionSessionRemoteOnce, vtscr_Register);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t v8 = FigSignalErrorAt();
LABEL_15:
    uint64_t v12 = v8;
    return vtcsr_handleMachErrorsInternal(0, v12);
  }
  uint64_t v10 = Instance;
  *(void *)(Instance + 96) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_DWORD *)(v10 + 32) = 2;
  *(void *)(v10 + 120) = 0;
  *(void *)(v10 + 176) = 0;
  *(void *)(v10 + 80) = dispatch_group_create();
  *(void *)(v10 + 88) = FigDispatchQueueCreateWithPriority();
  *(void *)(v10 + 72) = dispatch_queue_create("com.apple.coremedia.compressionsession.pendingframequeue", 0);
  *(void *)(v10 + 128) = FigSemaphoreCreate();
  *(void *)(v10 + 160) = FigSemaphoreCreate();
  *(void *)(v10 + 208) = 1;
  *(void *)(v10 + 48) = FigSemaphoreCreate();
  if (a5 && (uint64_t CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList(), CFDataFromCFPropertyList)
    || (*(void *)(v10 + 224) = 0,
        uint64_t CFDataFromCFPropertyList = weakReferenceTable_AddPointerAndGetKey(),
        CFDataFromCFPropertyList)
    || (uint64_t CFDataFromCFPropertyList = FigRPCCreateServerConnectionForObject(), CFDataFromCFPropertyList)
    || (uint64_t CFDataFromCFPropertyList = FigRPCGetServerConnectionInfo(), CFDataFromCFPropertyList))
  {
    uint64_t v12 = CFDataFromCFPropertyList;
    goto LABEL_12;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  uint64_t v12 = 0;
  if (!a6)
  {
LABEL_12:
    uint64_t v13 = vtcsr_handleMachErrorsInternal(v10, v12);
    CFRelease((CFTypeRef)v10);
    return v13;
  }
  *a6 = v10;
  return vtcsr_handleMachErrorsInternal(0, v12);
}

uint64_t VTCompressionSessionRemote_CopySourcePixelBufferAttributes(uint64_t a1)
{
  unsigned int v8 = 0;
  uint64_t v7 = 0;
  int v6 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 60))
  {
    return FigSignalErrorAt();
  }
  uint64_t CFPropertyListFromData = VTCompressionSessionRemoteClient_MotionEstimationCopySourcePixelBufferAttributes(*(_DWORD *)(a1 + 24), &v7, &v6, &v8);
  if (CFPropertyListFromData) {
    goto LABEL_9;
  }
  uint64_t v4 = v8;
  if (!v8)
  {
    uint64_t CFPropertyListFromData = FigCreateCFPropertyListFromData();
LABEL_9:
    uint64_t v4 = CFPropertyListFromData;
  }
  uint64_t v5 = vtcsr_handleMachErrorsInternal(a1, v4);
  if (v6) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v7);
  }
  return v5;
}

uint64_t VTCompressionSessionRemote_EstimateMotionVectors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 60))
  {
    return FigSignalErrorAt();
  }
  if (a2)
  {
    uint64_t SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
    if (SerializedAtomDataForPixelBuffer)
    {
LABEL_11:
      uint64_t v11 = SerializedAtomDataForPixelBuffer;
      *(void *)(a1 + 184) = 0;
      goto LABEL_19;
    }
    *(void *)(a1 + 184) = (v23 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
  }
  if (a3)
  {
    uint64_t SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
    if (SerializedAtomDataForPixelBuffer) {
      goto LABEL_11;
    }
    *(void *)(a1 + 184) = (v22 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
  }
  uint64_t v12 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x10A00404814DC14uLL);
  uint64_t v13 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = v13 + 1;
  *uint64_t v12 = v13;
  v12[1] = 0;
  v12[4] = 0;
  v12[5] = (uint64_t)_Block_copy(a6);
  long long v14 = *(NSObject **)(a1 + 72);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __VTCompressionSessionRemote_EstimateMotionVectors_block_invoke;
  block[3] = &__block_descriptor_tmp_10_0;
  block[4] = a1;
  void block[5] = v12;
  dispatch_sync(v14, block);
  uint64_t v15 = VTCompressionSessionRemoteClient_EstimateMotion(*(_DWORD *)(a1 + 24), SHIDWORD(v26), v25, v23, v26, v24, v22, *v12);
  if (v15)
  {
    uint64_t v11 = v15;
  }
  else
  {
    FigSemaphoreWaitRelative();
    uint64_t v11 = *(unsigned int *)(a1 + 140);
    int v16 = *(unsigned __int8 *)(a1 + 144);
    if (!v11 && (*(unsigned char *)(a1 + 136) & 1) == 0) {
      uint64_t v11 = vtcsr_dequeueAllPendingFramesAndCallbackClientForEach(a1, 0, 1);
    }
    if (v16) {
      goto LABEL_19;
    }
  }
  uint64_t v17 = *(NSObject **)(a1 + 72);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 0x40000000;
  v20[2] = __VTCompressionSessionRemote_EstimateMotionVectors_block_invoke_2;
  v20[3] = &__block_descriptor_tmp_11_0;
  v20[4] = a1;
  v20[5] = v12;
  dispatch_sync(v17, v20);
LABEL_19:
  uint64_t v18 = vtcsr_handleMachErrorsInternal(a1, v11);
  if (HIDWORD(v26)) {
    FigMachPortReleaseSendRight_();
  }
  mach_port_name_t v19 = (unsigned int *)MEMORY[0x1E4F14960];
  if (v23) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v25);
  }
  if (v26) {
    FigMachPortReleaseSendRight_();
  }
  if (v22) {
    MEMORY[0x199706B20](*v19, v24);
  }
  return v18;
}

uint64_t VTCompressionSessionRemote_CompleteMotionVectors(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 28) || *(unsigned char *)(a1 + 60))
  {
    return FigSignalErrorAt();
  }
  uint64_t v3 = VTCompressionSessionRemoteClient_CompleteMotionEstimation(*(_DWORD *)(a1 + 24));
  if (v3) {
    goto LABEL_13;
  }
  FigSemaphoreWaitRelative();
  uint64_t v4 = *(unsigned int *)(a1 + 168);
  if (!v4)
  {
    uint64_t v3 = vtcsr_dequeueAllPendingFramesAndCallbackClientForEach(a1, 0, 1);
    if (!v3)
    {
      FigSemaphoreWaitRelative();
      FigSemaphoreSignal();
      uint64_t v4 = 0;
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v4 = v3;
  }
LABEL_10:

  return vtcsr_handleMachErrorsInternal(a1, v4);
}

uint64_t VTCompressionSessionRemoteCallbackServer_NotificationIsPending()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v13 = 1;
  uint64_t v0 = weakReferenceTable_CopyPointerFromKey();
  if (v0)
  {
    uint64_t v1 = v0;
    uint64_t v12 = 0;
    if (!*(unsigned char *)(v0 + 60))
    {
      CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F14960];
      do
      {
        uint64_t v11 = 0;
        unsigned int v10 = 0;
        int v13 = 0;
        if (!VTCompressionSessionRemoteClient_GetNextPendingNotification(*(_DWORD *)(v1 + 24), &v13, &v12, cStr, &v11, &v10))
        {
          uint64_t v4 = v11;
          unsigned int v5 = v10;
          CFTypeRef cf = 0;
          if (!*(unsigned char *)(v1 + 60))
          {
            CFStringRef v6 = CFStringCreateWithCString(v2, cStr, 0);
            if (v6 && (!v4 || !v5 || !FigCreateCFPropertyListFromData()))
            {
              uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
              if (v7)
              {
                unsigned int v8 = (const void *)v7;
                CMNotificationCenterGetDefaultLocalCenter();
                CMNotificationCenterPostNotification();
                CFRelease(v8);
              }
            }
            if (cf) {
              CFRelease(cf);
            }
            if (v6) {
              CFRelease(v6);
            }
          }
          MEMORY[0x199706B20](*v3, v11, v10);
        }
      }
      while (v13);
    }
    CFRelease((CFTypeRef)v1);
  }
  return 0;
}

uint64_t VTCompressionSessionRemoteCallbackServer_FrameIsPending()
{
  uint64_t v0 = weakReferenceTable_CopyPointerFromKey();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    if (!*(unsigned char *)(v0 + 60)) {
      vtcsr_dequeueAllPendingFramesAndCallbackClientForEach(v0, 0, 0);
    }
    CFRelease(v1);
  }
  return 0;
}

double vtcsr_Init(uint64_t a1)
{
  *(void *)(a1 + 224) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void vtcsr_Finalize(uint64_t a1)
{
  VTCompressionSessionRemote_Invalidate((void *)a1);
  CFAllocatorRef v2 = *(NSObject **)(a1 + 80);
  if (v2)
  {
    dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(*(dispatch_object_t *)(a1 + 80));
  }
  uint64_t v3 = *(NSObject **)(a1 + 88);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = *(NSObject **)(a1 + 72);
  if (v4) {
    dispatch_release(v4);
  }
  FigSemaphoreDestroy();
  FigSemaphoreDestroy();
  FigSemaphoreDestroy();
  unsigned int v5 = *(const void **)(a1 + 96);
  if (v5) {
    CFRelease(v5);
  }
  CFStringRef v6 = *(const void **)(a1 + 216);
  if (v6)
  {
    CFRelease(v6);
  }
}

CFStringRef vtcsr_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[VTCompressionSessionRemote %p]", a1);
}

CFStringRef vtcsr_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[VTCompressionSessionRemote %p]", a1);
}

uint64_t __vtcsr_oneTimeInitialization_block_invoke(uint64_t a1)
{
  VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode();
  uint64_t result = FigRPCCreateRemoteClient();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t weakReferenceTable_OneTimeInitialization()
{
  return MEMORY[0x1F40DCCF8](*MEMORY[0x1E4F1CF80], 0, &gWeakReferenceTable_RemoteCompressionSessionClient);
}

void __vtcsr_dequeueAllPendingFramesAndCallbackClientForEach_block_invoke(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 40) + 60) || *(unsigned char *)(a1 + 48))
  {
    int v2 = 0;
    while (1)
    {
      uint64_t v3 = *(void *)(a1 + 40);
      uint64_t v50 = 0;
      v51[0] = 0;
      uint64_t v46 = 0;
      unsigned int v47 = &v46;
      uint64_t v48 = 0x2000000000;
      uint64_t v49 = 0;
      uint64_t v40 = 0;
      unsigned int v41 = &v40;
      uint64_t v42 = 0x3002000000;
      uint64_t v43 = __Block_byref_object_copy_;
      unsigned int v44 = __Block_byref_object_dispose_;
      uint64_t v45 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = &v34;
      uint64_t v36 = 0x3002000000;
      int v37 = __Block_byref_object_copy_;
      uint64_t v38 = __Block_byref_object_dispose_;
      uint64_t v39 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = &v30;
      uint64_t v32 = 0x2000000000;
      uint64_t v33 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = &v26;
      uint64_t v28 = 0x2000000000;
      uint64_t v29 = 0;
      uint64_t v25 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = &v21;
      uint64_t v23 = 0x2000000000;
      char v24 = 0;
      CFTypeRef cf = 0;
      uint64_t v20 = 0;
      CFTypeRef v18 = 0;
      int v17 = 0;
      uint64_t v16 = 0;
      int v15 = 0;
      uint64_t v14 = 0;
      int v13 = 0;
      uint64_t v4 = VTCompressionSessionRemoteClient_DequeueNextPendingEncodedFrame(*(_DWORD *)(v3 + 24), &v50, &v49, (_DWORD *)&v20 + 1, &v20, &v17, &v16, &v15, v51, (_DWORD *)&v50 + 1, &v14, &v13, (_DWORD *)v51 + 1);
      if (v4)
      {
        uint64_t CFPropertyListFromData = v4;
        goto LABEL_26;
      }
      uint64_t CFPropertyListFromData = HIDWORD(v51[0]);
      if (!HIDWORD(v51[0])) {
        break;
      }
LABEL_26:
      int v11 = vtcsr_handleMachErrorsInternal(v3, CFPropertyListFromData);
      if (v17) {
        FigMachPortReleaseSendRight_();
      }
      if (v15) {
        MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v16);
      }
      _Block_release((const void *)v41[5]);
      _Block_release((const void *)v35[5]);
      if (cf) {
        CFRelease(cf);
      }
      if (v18) {
        CFRelease(v18);
      }
      _Block_object_dispose(&v21, 8);
      _Block_object_dispose(&v26, 8);
      _Block_object_dispose(&v30, 8);
      _Block_object_dispose(&v34, 8);
      _Block_object_dispose(&v40, 8);
      _Block_object_dispose(&v46, 8);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v11;
      if (!v2 || *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        return;
      }
    }
    if (!v50)
    {
      uint64_t CFPropertyListFromData = 0;
LABEL_25:
      int v2 = LOBYTE(v51[0]);
      goto LABEL_26;
    }
    if (HIDWORD(v50))
    {
      if (v15)
      {
        FigRemote_CreateSampleBufferFromSerializedAtomData();
LABEL_13:
        int v15 = 0;
      }
    }
    else if (v17 | v15)
    {
      FigRemote_CreatePixelBufferFromSerializedAtomData();
      goto LABEL_13;
    }
    uint64_t CFPropertyListFromData = FigCreateCFPropertyListFromData();
    CFStringRef v6 = *(NSObject **)(v3 + 72);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __vtcsr_dequeueNextPendingFrameAndCallbackClient_block_invoke;
    block[3] = &unk_1E5785168;
    block[4] = &v46;
    void block[5] = &v40;
    void block[6] = &v34;
    void block[7] = &v30;
    block[8] = &v26;
    block[9] = &v21;
    block[10] = v3;
    dispatch_sync(v6, block);
    if (!*((unsigned char *)v22 + 24))
    {
      uint64_t CFPropertyListFromData = 4294954384;
      goto LABEL_26;
    }
    uint64_t v7 = *(void (**)(void, uint64_t, void, void, CFTypeRef))(v3 + 112);
    if (v7)
    {
      v7(*(void *)(v3 + 176), v47[3], HIDWORD(v20), v20, cf);
    }
    else
    {
      unsigned int v8 = *(void (**)(void, uint64_t, uint64_t, uint64_t, void, void, CFTypeRef))(v3 + 120);
      if (v8)
      {
        v8(*(void *)(v3 + 176), v47[3], v31[3], v27[3], HIDWORD(v20), v20, cf);
      }
      else
      {
        uint64_t v9 = v41[5];
        if (v9)
        {
          (*(void (**)(uint64_t, void, void, CFTypeRef))(v9 + 16))(v9, HIDWORD(v20), v20, cf);
        }
        else
        {
          uint64_t v10 = v35[5];
          if (v10) {
            (*(void (**)(uint64_t, void, void, uint64_t, CFTypeRef))(v10 + 16))(v10, HIDWORD(v20), v20, v25, v18);
          }
        }
      }
    }
    if (!FigAtomicDecrement32()) {
      FigSemaphoreSignal();
    }
    goto LABEL_25;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void __vtcsr_dequeueNextPendingFrameAndCallbackClient_block_invoke(void *a1)
{
  int v2 = *(void **)(a1[10] + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1[4] + 8);
    while (*v2 != *(void *)(v3 + 24))
    {
      int v2 = (void *)v2[6];
      if (!v2) {
        return;
      }
    }
    *(void *)(v3 + 24) = v2[1];
    *(void *)(*(void *)(a1[5] + 8) + 40) = v2[4];
    *(void *)(*(void *)(a1[6] + 8) + 40) = v2[5];
    *(void *)(*(void *)(a1[7] + 8) + 24) = v2[2];
    *(void *)(*(void *)(a1[8] + 8) + 24) = v2[3];
    uint64_t v4 = a1[10];
    uint64_t v7 = *(void **)(v4 + 40);
    unsigned int v5 = (void *)(v4 + 40);
    CFStringRef v6 = v7;
    if (v7 != v2)
    {
      do
      {
        unsigned int v8 = v6;
        CFStringRef v6 = (void *)v6[6];
      }
      while (v6 != v2);
      unsigned int v5 = v8 + 6;
    }
    *unsigned int v5 = v2[6];
    free(v2);
    *(unsigned char *)(*(void *)(a1[9] + 8) + 24) = 1;
  }
}

void *__vtcsr_handleDeadServerConnection_block_invoke(void *result)
{
  *(void *)(*(void *)(result[4] + 8) + 24) = *(void *)(result[6] + 40);
  *(void *)(*(void *)(result[5] + 8) + 24) = *(void *)(*(void *)(result[4] + 8) + 24);
  *(void *)(result[6] + 40) = 0;
  return result;
}

void __vtcsr_handleDeadServerConnection_block_invoke_2(void *a1)
{
  for (uint64_t i = a1[4]; ; uint64_t i = a1[4])
  {
    uint64_t v3 = *(void *)(*(void *)(i + 8) + 24);
    if (!v3) {
      break;
    }
    *(void *)(*(void *)(a1[5] + 8) + 24) = v3;
    *(void *)(*(void *)(a1[4] + 8) + 24) = *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 48);
    uint64_t v4 = (void *)a1[6];
    unsigned int v5 = (void (*)(void, void, uint64_t, uint64_t, void))v4[14];
    if (v5)
    {
      v5(v4[22], *(void *)(*(void *)(*(void *)(a1[5] + 8) + 24) + 8), 4294954384, 2, 0);
    }
    else
    {
      CFStringRef v6 = (void (*)(uint64_t, void, void, void, uint64_t, uint64_t, void))v4[15];
      if (v6)
      {
        uint64_t v7 = v4[22];
        unsigned int v8 = *(void **)(*(void *)(a1[5] + 8) + 24);
        v6(v7, v8[1], v8[2], v8[3], 4294954384, 2, 0);
      }
      else
      {
        uint64_t v9 = *(void *)(*(void *)(a1[5] + 8) + 24);
        uint64_t v10 = *(void *)(v9 + 40);
        if (v10)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v10 + 16))(v10, 4294954384, 2, 0, 0);
        }
        else
        {
          uint64_t v11 = *(void *)(v9 + 32);
          if (v11) {
            (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v11 + 16))(v11, 4294954384, 2, 0);
          }
        }
      }
    }
    _Block_release(*(const void **)(*(void *)(*(void *)(a1[5] + 8) + 24) + 32));
    free(*(void **)(*(void *)(a1[5] + 8) + 24));
    if (!FigAtomicDecrement32()) {
      FigSemaphoreSignal();
    }
  }
  uint64_t v12 = a1[6];
  if (*(void *)(v12 + 128))
  {
    *(unsigned char *)(v12 + 144) = 0;
    *(void *)(v12 + 136) = 0;
    FigSemaphoreSignal();
    uint64_t v12 = a1[6];
  }
  if (!*(void *)(v12 + 160) || (*(_DWORD *)(v12 + 168) = 0, FigSemaphoreSignal(), (uint64_t v12 = a1[6]) != 0))
  {
    CFRelease((CFTypeRef)v12);
  }
}

uint64_t DepthWrapperEncoder_CreateInstance()
{
  VTVideoEncoderGetClassID();
  uint64_t result = CMDerivedObjectCreate();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t DepthWrapperEncoder_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    *(unsigned char *)uint64_t DerivedStorage = 1;
    uint64_t v1 = *(OpaqueVTCompressionSession **)(DerivedStorage + 72);
    if (v1) {
      VTCompressionSessionInvalidate(v1);
    }
  }
  return 0;
}

void DepthWrapperEncoder_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = 0;
  uint64_t v1 = (const void *)DerivedStorage[4];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[4] = 0;
  }
  int v2 = (const void *)DerivedStorage[6];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[6] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[7];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[7] = 0;
  }
  uint64_t v4 = (const void *)DerivedStorage[8];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[8] = 0;
  }
  unsigned int v5 = (const void *)DerivedStorage[9];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[9] = 0;
  }
  CFStringRef v6 = DerivedStorage[10];
  if (v6)
  {
    dispatch_release(v6);
    DerivedStorage[10] = 0;
  }
  uint64_t v7 = (void *)DerivedStorage[12];
  if (v7)
  {
    DerivedStorage[12] = 0;
    free(v7);
  }
}

__CFString *DepthWrapperEncoder_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<DepthWrapperVideoEncoder %p>", a1);
  return Mutable;
}

uint64_t DepthWrapperEncoder_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, CFMutableDictionaryRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"SublayerEncoderSpecification"))
  {
    unsigned int v8 = *(const void **)(DerivedStorage + 56);
    if (v8) {
      uint64_t v9 = (__CFDictionary *)CFRetain(v8);
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t result = 0;
    *a4 = v9;
    return result;
  }
  int v10 = *(_DWORD *)(DerivedStorage + 16);
  if (v10 == 1684632424)
  {
    if (CFEqual(a2, @"MinAndMaxDisparity")) {
      goto LABEL_9;
    }
    int v10 = *(_DWORD *)(DerivedStorage + 16);
  }
  if (v10 == 1684369512 && CFEqual(a2, @"MinAndMaxDepth"))
  {
LABEL_9:
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v12 = Mutable;
      FigCFDictionarySetFloat();
      FigCFDictionarySetFloat();
      uint64_t result = 0;
      *a4 = v12;
    }
    else
    {
      return FigSignalErrorAt();
    }
    return result;
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 72);
  if (!v14) {
    return 4294954393;
  }

  return VTSessionCopyProperty(v14, a2, a3, a4);
}

uint64_t DepthWrapperEncoder_SetProperty(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"ProfileLevel"))
  {
    if (FigCFEqual()) {
      return 0;
    }
    goto LABEL_35;
  }
  if (!CFEqual(a2, @"SublayerEncoderSpecification"))
  {
    if (CFEqual(a2, @"InputPixelFormat"))
    {
      if (!a3) {
        goto LABEL_35;
      }
      CFTypeID v10 = CFGetTypeID(a3);
      if (v10 != CFNumberGetTypeID()) {
        goto LABEL_35;
      }
      if (*(void *)(DerivedStorage + 72))
      {
        LODWORD(v19.CFDictionarySetValue(theDict, key, value) = 1278226736;
        CFNumberRef v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &v19);
        uint64_t v6 = VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 72), a2, v11);
        if (v11) {
          CFRelease(v11);
        }
        return v6;
      }
      return 4294954393;
    }
    int v12 = *(_DWORD *)(DerivedStorage + 16);
    if (v12 == 1684632424)
    {
      if (CFEqual(a2, @"MinAndMaxDisparity")) {
        goto LABEL_21;
      }
      int v12 = *(_DWORD *)(DerivedStorage + 16);
    }
    if (v12 != 1684369512 || !CFEqual(a2, @"MinAndMaxDepth"))
    {
      uint64_t v16 = *(const void **)(DerivedStorage + 72);
      if (v16)
      {
        OSStatus v17 = VTSessionSetProperty(v16, a2, a3);
        if (v17)
        {
          unsigned int v18 = v17;
          if (CFEqual(a2, @"SourceFrameCount")) {
            return 0;
          }
          else {
            return v18;
          }
        }
        return 0;
      }
      return 4294954393;
    }
LABEL_21:
    if (a3)
    {
      CFTypeID v13 = CFGetTypeID(a3);
      if (v13 == CFDictionaryGetTypeID())
      {
        float v20 = 16.0;
        float v21 = 0.0;
        if (!FigCFDictionaryGetFloatIfPresent()
          || v21 < 0.0
          || v21 > 32768.0
          || !FigCFDictionaryGetFloatIfPresent()
          || v20 <= v21
          || v21 > 32768.0)
        {
          return FigSignalErrorAt();
        }
        uint64_t v14 = *(OpaqueVTCompressionSession **)(DerivedStorage + 72);
        CMTime v19 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        uint64_t v6 = VTCompressionSessionCompleteFrames(v14, &v19);
        float v15 = v20;
        *(float *)(DerivedStorage + 40) = v21;
        *(float *)(DerivedStorage + 44) = v15;
        *(unsigned char *)(DerivedStorage + 104) = 0;
        return v6;
      }
    }
    goto LABEL_35;
  }
  if (a3)
  {
    CFTypeID v8 = CFGetTypeID(a3);
    if (v8 == CFDictionaryGetTypeID())
    {
      uint64_t v9 = *(const void **)(DerivedStorage + 56);
      *(void *)(DerivedStorage + 56) = a3;
      CFRetain(a3);
      if (v9) {
        CFRelease(v9);
      }
      return 0;
    }
  }
LABEL_35:

  return FigSignalErrorAt();
}

uint64_t DepthWrapperEncoder_StartSession(uint64_t a1, uint64_t a2, unint64_t a3, const void *a4)
{
  uint64_t v7 = HIDWORD(a3);
  VTVideoEncoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = DerivedStorage;
  qmemcpy(v21, "010Lsidh", sizeof(v21));
  CFDictionaryRef sourceImageBufferAttributes = 0;
  CFMutableDictionaryRef v20 = 0;
  *(void *)(DerivedStorage + 8) = a2;
  *(_DWORD *)(DerivedStorage + 20) = a3;
  *(_DWORD *)(DerivedStorage + 24) = v7;
  if (*(_DWORD *)(DerivedStorage + 16) == 1684369512) {
    v21[1] = 1751410032;
  }
  CFTypeID v10 = *(const void **)(DerivedStorage + 32);
  *(void *)(DerivedStorage + 32) = a4;
  if (a4) {
    CFRetain(a4);
  }
  if (v10) {
    CFRelease(v10);
  }
  CFNumberRef v11 = *(const void **)(v9 + 48);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(v9 + 48) = 0;
  }
  uint64_t v12 = depthencoder_createPixelBufferAttributesDictionary(a3, v7, (uint64_t)&v21[1], &v20);
  CFMutableDictionaryRef v13 = v20;
  if (v12
    || (VTEncoderSessionSetPixelBufferAttributes(*(uint64_t **)(v9 + 8), v20),
        uint64_t v12 = depthencoder_createPixelBufferAttributesDictionary(a3, v7, (uint64_t)v21, &sourceImageBufferAttributes),
        v12)
    || (uint64_t v14 = (VTSessionRef *)(v9 + 72),
        uint64_t v12 = VTCompressionSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3, v7, 0x68766331u, *(CFDictionaryRef *)(v9 + 56), sourceImageBufferAttributes, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, (VTCompressionSessionRef *)(v9 + 72)), v12)|| (uint64_t v12 = VTSessionSetProperty(*v14, @"ProfileLevel", @"HEVC_Monochrome10_AutoLevel"), v12))
  {
    uint64_t v17 = v12;
    if (v13) {
LABEL_18:
    }
      CFRelease(v13);
  }
  else
  {
    int v15 = *(_DWORD *)(v9 + 16);
    uint64_t v16 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (v15 == 1684369512)
    {
      VTSessionSetProperty(*(VTSessionRef *)(v9 + 72), @"EncodesDepth", (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      int v15 = *(_DWORD *)(v9 + 16);
    }
    if (v15 == 1684632424) {
      VTSessionSetProperty(*v14, @"EncodesDisparity", *v16);
    }
    uint64_t v17 = 0;
    if (v13) {
      goto LABEL_18;
    }
  }
  if (sourceImageBufferAttributes) {
    CFRelease(sourceImageBufferAttributes);
  }
  return v17;
}

uint64_t DepthWrapperEncoder_EncodeFrame(uint64_t a1, const void *a2, __CVBuffer *a3, CMTime *a4, CMTime *a5, const __CFDictionary *a6, _DWORD *a7)
{
  VTVideoEncoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v15 = DerivedStorage;
  if (*a7) {
    *a7 = 0;
  }
  CVPixelBufferRef pixelBufferOut = 0;
  dispatch_group_enter(*(dispatch_group_t *)(DerivedStorage + 80));
  ++*(_DWORD *)(v15 + 88);
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  PixelBufferPool = VTCompressionSessionGetPixelBufferPool(*(VTCompressionSessionRef *)(v15 + 72));
  uint64_t v18 = CVPixelBufferPoolCreatePixelBuffer(v16, PixelBufferPool, &pixelBufferOut);
  if (v18)
  {
    uint64_t v47 = v18;
    depthencoder_emitEncodedFrame(a1, a2, v18, 0, 0);
  }
  else
  {
    uint64_t v49 = a4;
    uint64_t v50 = a2;
    unsigned int v51 = a5;
    CFDictionaryRef v52 = a6;
    if (!*(unsigned char *)(v15 + 104))
    {
      uint64_t v19 = *(void *)(v15 + 96);
      float v20 = *(float *)(v15 + 40);
      float v21 = (float)(*(float *)(v15 + 44) - v20) + 1.0;
      float v22 = powf(v21, 0.00097752);
      float v23 = powf(v21, -0.00048876);
      int v24 = 0;
      int v25 = 0;
      float v26 = 0.0;
      do
      {
        float v23 = v22 * v23;
        _S0 = v20 + (float)(v23 + -1.0);
        __asm { FCVT            H0, S0 }
        float v32 = _S0;
        LODWORD(__pattern4.CFDictionarySetValue(theDict, key, value) = v24 | v25;
        char v33 = LOBYTE(_S0) - LOBYTE(v26);
        memset_pattern4((void *)(v19 + 2 * LOWORD(v26)), &__pattern4, (2 * (LODWORD(_S0) - LODWORD(v26))) & 0x1FFFC);
        if (v33) {
          *(_WORD *)(v19 + 2 * LODWORD(v32) - 2) = v25;
        }
        v25 += 64;
        v24 += 0x400000;
        float v26 = v32;
      }
      while (v25 != 0x10000);
      LODWORD(__pattern4.CFDictionarySetValue(theDict, key, value) = -4128832;
      memset_pattern4((void *)(v19 + 2 * LODWORD(v32)), &__pattern4, (2 * (-32768 - LODWORD(v32))) & 0x1FFFC);
      if ((-32768 - LODWORD(v32))) {
        *(_WORD *)(v19 + 65534) = -64;
      }
      bzero((void *)(v19 + 0x10000), 0x10000uLL);
      *(unsigned char *)(v15 + 104) = 1;
      uint64_t v34 = *(const void **)(v15 + 48);
      if (v34)
      {
        CFRelease(v34);
        *(void *)(v15 + 48) = 0;
      }
    }
    uint64_t v35 = pixelBufferOut;
    VTVideoEncoderGetCMBaseObject(a1);
    uint64_t v36 = CMBaseObjectGetDerivedStorage();
    size_t Width = CVPixelBufferGetWidth(a3);
    size_t Height = CVPixelBufferGetHeight(a3);
    CVPixelBufferLockBaseAddress(a3, 1uLL);
    CVPixelBufferLockBaseAddress(v35, 0);
    BaseAddress = (unsigned __int16 *)CVPixelBufferGetBaseAddress(a3);
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a3);
    unsigned int v41 = (char *)CVPixelBufferGetBaseAddress(v35);
    size_t v42 = CVPixelBufferGetBytesPerRow(v35);
    if (Height)
    {
      uint64_t v43 = 0;
      uint64_t v44 = *(void *)(v36 + 96);
      do
      {
        if (Width)
        {
          for (uint64_t i = 0; i != Width; ++i)
            *(_WORD *)&v41[2 * i] = *(_WORD *)(v44 + 2 * BaseAddress[i]);
        }
        BaseAddress = (unsigned __int16 *)((char *)BaseAddress + BytesPerRow);
        v41 += v42;
        ++v43;
      }
      while (v43 != Height);
    }
    CVPixelBufferUnlockBaseAddress(a3, 1uLL);
    CVPixelBufferUnlockBaseAddress(v35, 0);
    uint64_t v46 = *(OpaqueVTCompressionSession **)(v15 + 72);
    outputHandler[0] = MEMORY[0x1E4F143A8];
    outputHandler[1] = 0x40000000;
    outputHandler[2] = __DepthWrapperEncoder_EncodeFrame_block_invoke;
    outputHandler[3] = &__block_descriptor_tmp_5;
    outputHandler[4] = v15;
    outputHandler[5] = a1;
    outputHandler[6] = v50;
    CMTime __pattern4 = *v49;
    CMTime duration = *v51;
    uint64_t v47 = VTCompressionSessionEncodeFrameWithOutputHandler(v46, pixelBufferOut, &__pattern4, &duration, v52, 0, outputHandler);
  }
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  return v47;
}

uint64_t DepthWrapperEncoder_CompleteFrames(uint64_t a1, CMTime *a2)
{
  VTVideoEncoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(OpaqueVTCompressionSession **)(DerivedStorage + 72);
  CMTime v10 = *a2;
  uint64_t v5 = VTCompressionSessionCompleteFrames(v4, &v10);
  if (*(void *)(DerivedStorage + 80))
  {
    uint64_t v6 = 2;
    do
    {
      uint64_t v7 = *(NSObject **)(DerivedStorage + 80);
      dispatch_time_t v8 = dispatch_time(0, 1000000000 * v6);
      v6 *= 2;
    }
    while (dispatch_group_wait(v7, v8));
  }
  return v5;
}

uint64_t DepthWrapperEncoder_CopySupportedPropertyDictionary(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  VTVideoEncoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v9 = 0;
  CMTime v10 = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v4 = VTSessionCopySupportedPropertyDictionary(*(VTSessionRef *)(DerivedStorage + 72), (CFDictionaryRef *)&cf);
  if (v4)
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"SublayerEncoderSpecification", v3);
    CFDictionarySetValue(Mutable, @"SourceFrameCount", v3);
    int v6 = *(_DWORD *)(DerivedStorage + 16);
    if (v6 == 1684632424)
    {
      CFDictionarySetValue(Mutable, @"MinAndMaxDisparity", v3);
      int v6 = *(_DWORD *)(DerivedStorage + 16);
    }
    if (v6 == 1684369512) {
      CFDictionarySetValue(Mutable, @"MinAndMaxDepth", v3);
    }
    CFTypeRef v9 = cf;
    CMTime v10 = Mutable;
    FigCFCreateCombinedDictionary();
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

uint64_t depthencoder_createPixelBufferAttributesDictionary(uint64_t a1, uint64_t a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v6 = Mutable;
    CFMutableArrayRef v7 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (v7)
    {
      CFMutableArrayRef v8 = v7;
      uint64_t appended = FigCFArrayAppendInt32();
      if (appended)
      {
        CFRelease(v6);
      }
      else
      {
        CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E4F24D70], v8);
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        *a4 = v6;
      }
      CFRelease(v8);
      return appended;
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
      CFRelease(v6);
      return v11;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void depthencoder_emitEncodedFrame(uint64_t a1, const void *a2, uint64_t a3, unsigned int a4, opaqueCMSampleBuffer *a5)
{
  VTVideoEncoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  VTEncoderSessionEmitEncodedFrame(*(uint64_t **)(DerivedStorage + 8), a2, a3, a4, a5);
  --*(_DWORD *)(DerivedStorage + 88);
  CMTime v10 = *(NSObject **)(DerivedStorage + 80);

  dispatch_group_leave(v10);
}

uint64_t VTRegisterVideoEncoderWithInfo(unsigned int a1, const __CFDictionary *a2, uint64_t a3)
{
  int valuePtr = 0;
  MEMORY[0x199705810](&sCreateVideoEncoderRegistryOnce, vtCreateVideoEncoderRegistry);
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a2)
  {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a2);
    if (MutableCopy)
    {
      CFMutableArrayRef v8 = MutableCopy;
      CFStringRef Value = CFDictionaryGetValue(MutableCopy, @"CMClassImplementationID");
      goto LABEL_6;
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableArrayRef v8 = Mutable;
      CFStringRef Value = 0;
LABEL_6:
      *(_DWORD *)bytes = bswap32(a1);
      CFStringRef v11 = CFStringCreateWithBytes(v6, bytes, 4, 0x600u, 0);
      if (v11)
      {
        CFStringRef v12 = v11;
        CFDictionarySetValue(v8, @"VTCodecType", v11);
        CFStringRef v13 = CFStringCreateWithFormat(v6, 0, @"Dynamically Registered %@ Video Encoder", v12);
        CFNumberRef v14 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
        if (v14)
        {
          CFDictionaryAddValue(v8, @"VTRating", v14);
          CFDictionarySetValue(v8, @"VTAllowSandboxedEncode", (const void *)*MEMORY[0x1E4F1CFC8]);
          uint64_t v15 = vtRegisterVideoEncoderInternal(v12, v13, Value, (uint64_t)v8, a3, 0);
        }
        else
        {
          uint64_t v15 = FigSignalErrorAt();
        }
        uint64_t v17 = v15;
        CFRelease(v8);
        CFRelease(v12);
        if (v13) {
          CFRelease(v13);
        }
        if (!v14) {
          return v17;
        }
        CFNumberRef v18 = v14;
      }
      else
      {
        uint64_t v17 = FigSignalErrorAt();
        CFNumberRef v18 = v8;
      }
      CFRelease(v18);
      return v17;
    }
  }

  return FigSignalErrorAt();
}

uint64_t vtCreateVideoEncoderRegistry()
{
  return FigRegistryCreate();
}

uint64_t vtRegisterVideoEncoderInternal(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = 4294954394;
  if (!a1 || !a2) {
    return result;
  }
  if (VTParavirtualizationIsRunningInGuest())
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  CFNumberRef v14 = Mutable;
  CFDictionarySetValue(Mutable, @"CMClassID", @"com.apple.videotoolbox.videoencoder");
  CFDictionarySetValue(v14, @"CMClassImplementationName", a2);
  if (a3) {
    CFDictionarySetValue(v14, @"CMClassImplementationID", a3);
  }
  CFDictionarySetValue(v14, @"VTCodecName", a1);
  CFDictionarySetValue(v14, @"VTEncoderName", a2);
  FigCFDictionarySetInt32();
  FigCFDictionarySetValue();
  if (FigCFEqual())
  {
    uint64_t v15 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(v15, @"IORegistryRequiredKey", @"IOGVACodec");
    CFDictionarySetValue(v14, @"CMDependencies", v15);
    if (a5)
    {
LABEL_10:
      CFAllocatorRef v16 = (const void **)MEMORY[0x1E4F1CFC8];
LABEL_14:
      CFDictionarySetValue(v14, @"VTFactoryFunctionHasSpecificationArgument", *v16);
      FigRegistryAddItem();
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v15 = 0;
    if (a5) {
      goto LABEL_10;
    }
  }
  if (a6)
  {
    CFAllocatorRef v16 = (const void **)MEMORY[0x1E4F1CFD0];
    goto LABEL_14;
  }
LABEL_15:
  if (v15) {
    CFRelease(v15);
  }
  CFRelease(v14);
  return 0;
}

BOOL VTHasVideoEncoderRegistryBeenCreated()
{
  return sVideoEncoderRegistry != 0;
}

uint64_t VTSelectAndCreateVideoEncoderInstanceInternal(unsigned int a1, uint64_t a2, int a3, CFTypeRef cf, CFIndex a5, void *a6, unsigned char *a7, CFIndex *a8, void *a9)
{
  CFArrayRef v71 = 0;
  CFDictionaryRef theDict = 0;
  theArradouble y = 0;
  CFDictionaryRef v68 = 0;
  if (!cf)
  {
    LODWORD(v16) = 0;
    CFDictionaryRef v13 = 0;
LABEL_8:
    CFStringRef Value = 0;
    goto LABEL_9;
  }
  CFDictionaryRef v12 = (const __CFDictionary *)CFRetain(cf);
  CFDictionaryRef v13 = v12;
  if (!v12)
  {
    LODWORD(v16) = 0;
    goto LABEL_8;
  }
  CFStringRef Value = CFDictionaryGetValue(v12, @"EncoderID");
  uint64_t v15 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (v15 != CFDictionaryGetValue(v13, @"RequiredLowLatency")) {
    CFDictionaryGetValue(v13, @"EnableLowLatencyRateControl");
  }
  LODWORD(v16) = 1;
LABEL_9:
  vtPopulateVideoEncoderRegistry();
  char v60 = (char)v16;
  if (!sVideoEncoderRegistry)
  {
    uint64_t v22 = FigSignalErrorAt();
    CFStringRef v19 = 0;
    if (!a7) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  int v65 = 0;
  CFDictionaryRef v66 = 0;
  uint64_t v67 = 0;
  if (v16)
  {
    CFAllocatorRef v16 = (const void *)*MEMORY[0x1E4F1CFD0];
    LOBYTE(v16) = v16 == CFDictionaryGetValue(v13, @"RequireHardwareAcceleratedVideoEncoder");
  }
  *(_DWORD *)bytes = bswap32(a1);
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v18 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 4, 0x600u, 0);
  CFStringRef v19 = v18;
  if (!v18)
  {
    uint64_t v23 = FigSignalErrorAt();
    goto LABEL_18;
  }
  int v65 = (uint64_t (*)(void, void, void))v18;
  CFDictionaryRef v66 = v13;
  LOBYTE(v67) = (_BYTE)v16;
  BYTE1(v67) = 1;
  unsigned int v20 = FigRegistryCopyFilteredItemList();
  if (v20)
  {
LABEL_14:
    CFArrayRef v21 = v71;
    goto LABEL_24;
  }
  BYTE1(v67) = 0;
  uint64_t v23 = vtCopyExpandedEncoderListForWrappers(v71, (uint64_t)&v65, &theArray);
  if (v23)
  {
LABEL_18:
    uint64_t v22 = v23;
    goto LABEL_105;
  }
  CFArrayRef v21 = theArray;
  if (!theArray) {
    goto LABEL_14;
  }
  if (v71)
  {
    CFRelease(v71);
    CFArrayRef v21 = theArray;
  }
  CFArrayRef v71 = v21;
  theArradouble y = 0;
LABEL_24:
  uint64_t v22 = 4294954388;
  if (!v21 || ((Count = CFArrayGetCount(v21)) != 0 ? (uint64_t v22 = v20) : (uint64_t v22 = 4294954388), !Count || v20))
  {
LABEL_60:
    if (!a7) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  if (!Value) {
    goto LABEL_56;
  }
  CFStringRef key = v19;
  unsigned int v57 = a8;
  CFArrayRef v25 = v71;
  CFTypeRef v72 = 0;
  CFDictionaryRef v73 = 0;
  CFIndex v26 = CFArrayGetCount(v71);
  CFArrayRef Mutable = CFArrayCreateMutable(v17, 0, MEMORY[0x1E4F1D510]);
  if (v26 < 1)
  {
LABEL_44:
    uint64_t v22 = 0;
    theArradouble y = Mutable;
    CFArrayRef v31 = 0;
    goto LABEL_45;
  }
  CFIndex v27 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v25, v27);
    if (!ValueAtIndex) {
      goto LABEL_41;
    }
    uint64_t v29 = ValueAtIndex;
    uint64_t v30 = FigRegistryItemCopyDescription();
    if (v30) {
      break;
    }
    uint64_t v30 = FigRegistryItemCopyMatchingInfo();
    if (v30) {
      break;
    }
    CFDictionaryGetValue(v73, @"CMClassImplementationID");
    if (FigCFEqual())
    {
      CFArrayAppendValue(Mutable, v29);
      goto LABEL_44;
    }
    if (v73)
    {
      CFRelease(v73);
      CFDictionaryRef v73 = 0;
    }
    if (v72)
    {
      CFRelease(v72);
      CFTypeRef v72 = 0;
    }
LABEL_41:
    if (v26 == ++v27) {
      goto LABEL_44;
    }
  }
  uint64_t v22 = v30;
  CFArrayRef v31 = Mutable;
LABEL_45:
  CFStringRef v19 = key;
  a8 = v57;
  if (v73) {
    CFRelease(v73);
  }
  if (v72) {
    CFRelease(v72);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v22)
  {
LABEL_105:
    uint64_t v39 = 0;
    goto LABEL_106;
  }
  if (v71) {
    CFRelease(v71);
  }
  CFArrayRef v32 = theArray;
  CFArrayRef v71 = theArray;
  theArradouble y = 0;
  if (!v32 || !CFArrayGetCount(v32))
  {
    uint64_t v22 = 4294954388;
    goto LABEL_60;
  }
LABEL_56:
  CFIndex v33 = CFArrayGetCount(v71);
  CFArrayRef MutableCopy = CFArrayCreateMutableCopy(v17, v33, v71);
  if (MutableCopy)
  {
    uint64_t v35 = MutableCopy;
    v74.length = CFArrayGetCount(MutableCopy);
    v74.location = 0;
    CFArraySortValues(v35, v74, (CFComparatorFunction)vtSortRegistryItemsByVideoEncoderRating, v13);
    CFRelease(v71);
    uint64_t v22 = 0;
    CFArrayRef v71 = v35;
    if (!a7) {
      goto LABEL_62;
    }
LABEL_61:
    *a7 = 0;
    goto LABEL_62;
  }
  uint64_t v22 = 0;
  if (a7) {
    goto LABEL_61;
  }
LABEL_62:
  if (!a6) {
    goto LABEL_105;
  }
  if (v71) {
    CFIndex v36 = CFArrayGetCount(v71);
  }
  else {
    CFIndex v36 = 0;
  }
  if (v36 <= a5) {
    unsigned int v37 = -12908;
  }
  else {
    unsigned int v37 = v22;
  }
  if (v37) {
    BOOL v38 = 0;
  }
  else {
    BOOL v38 = v36 == 0;
  }
  if (v38) {
    uint64_t v22 = 4294954388;
  }
  else {
    uint64_t v22 = v37;
  }
  if (v22)
  {
    FigSignalErrorAt();
    goto LABEL_105;
  }
  if (v36 <= a5)
  {
    uint64_t v22 = 0;
    goto LABEL_105;
  }
  unsigned int v58 = a8;
  uint64_t v39 = 0;
  uint64_t v40 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (2)
  {
    int v65 = 0;
    CFDictionaryRef v73 = 0;
    CFArrayGetValueAtIndex(v71, a5);
    FigRegistryItemCopyMatchingInfo();
    FigRegistryItemCopyDescription();
    if (!theDict)
    {
      unsigned int v41 = 0;
LABEL_88:
      if (!FigRegistryItemGetFactory()) {
        goto LABEL_90;
      }
      int v65 = 0;
      goto LABEL_92;
    }
    unsigned int v41 = CFDictionaryGetValue(theDict, @"CMClassImplementationID");
    if (!theDict || v40 != CFDictionaryGetValue(theDict, @"VTFactoryFunctionHasSpecificationArgument")) {
      goto LABEL_88;
    }
    if (FigRegistryItemGetFactory()) {
      CFDictionaryRef v73 = 0;
    }
    if (v68)
    {
      size_t v42 = CFDictionaryGetValue(v68, @"VTHostEncoderID");
      if (v42)
      {
        uint64_t v43 = v42;
        uint64_t v39 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionarySetValue(v39, @"VTHostEncoderID", v43);
      }
    }
LABEL_90:
    if (v65)
    {
      uint64_t v44 = v65(a1, a2, a6);
      goto LABEL_95;
    }
LABEL_92:
    if (v73) {
      uint64_t v44 = ((uint64_t (*)(void, const void *, __CFDictionary *, uint64_t, void *))v73)(a1, v41, v39, a2, a6);
    }
    else {
      uint64_t v44 = FigSignalErrorAt();
    }
LABEL_95:
    uint64_t v22 = v44;
    if (v44 || !*a6 && (uint64_t v22 = FigSignalErrorAt(), v22))
    {
      if (theDict)
      {
        CFRelease(theDict);
        CFDictionaryRef theDict = 0;
      }
      if (v68)
      {
        CFRelease(v68);
        CFDictionaryRef v68 = 0;
      }
      if (v36 == ++a5) {
        goto LABEL_106;
      }
      continue;
    }
    break;
  }
  if (v58) {
    *unsigned int v58 = a5;
  }
  if (a9 && theDict)
  {
    CFDictionaryGetValue(theDict, @"CMClassImplementationName");
    if (v41) {
      CFTypeRef v46 = CFRetain(v41);
    }
    else {
      CFTypeRef v46 = 0;
    }
    *a9 = v46;
  }
  if (!v68) {
    goto LABEL_142;
  }
  char v47 = v60 ^ 1;
  if (!*a6) {
    char v47 = 1;
  }
  if ((v47 & 1) == 0 && CFDictionaryGetValue(v68, @"VTWrappedEncoderID"))
  {
    uint64_t v48 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (v48)
    {
      uint64_t v49 = v48;
      CFDictionaryRemoveValue(v48, @"EncoderID");
      uint64_t v50 = CFDictionaryGetValue(v68, @"VTWrappedEncoderID");
      if (v50)
      {
        CFDictionarySetValue(v49, @"EncoderID", v50);
        uint64_t CMBaseObject = VTVideoEncoderGetCMBaseObject(*a6);
        uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v52) {
          uint64_t v53 = v52;
        }
        else {
          uint64_t v53 = 0;
        }
        unsigned int v54 = *(void (**)(uint64_t, __CFString *, __CFDictionary *))(v53 + 56);
        if (v54) {
          v54(CMBaseObject, @"SublayerEncoderSpecification", v49);
        }
        CFRelease(v49);
        goto LABEL_142;
      }
    }
    uint64_t v22 = FigSignalErrorAt();
  }
  else
  {
LABEL_142:
    uint64_t v22 = 0;
  }
LABEL_106:
  if (theDict) {
    CFRelease(theDict);
  }
  if (v68) {
    CFRelease(v68);
  }
  if (v71) {
    CFRelease(v71);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v39) {
    CFRelease(v39);
  }
  return v22;
}

void vtPopulateVideoEncoderRegistry()
{
  MEMORY[0x199705810](&sInitializeVideoEncoderRegistryOnce, vtInitializeVideoEncoderRegistry);
  MEMORY[0x1997056B0](sVideoEncoderRegistryMutex);
  if (sReloadParavirtualizedEncodersList == 1)
  {
    vtLoadParavirtualizedVideoEncoders();
    sReloadParavirtualizedEncodersList = 0;
  }

  JUMPOUT(0x1997056C0);
}

uint64_t vtFilterRegistryItemByCodecTypeAndVideoEncoderSpecification(uint64_t a1)
{
  CFTypeRef cf = 0;
  CFDictionaryRef theDict = 0;
  uint64_t context = *(void *)(a1 + 8);
  uint64_t v26 = 1;
  char v24 = 0;
  if (FigRegistryItemCopyMatchingInfo() || FigRegistryItemCopyDescription()) {
    goto LABEL_21;
  }
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 8);
  if (v2)
  {
    BOOL v3 = CFDictionaryGetValue(v2, @"EncoderID") != 0;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), @"RequiredPropertySupport");
  }
  else
  {
    BOOL v3 = 0;
    CFDictionaryRef Value = 0;
  }
  uint64_t v5 = (__CFDictionary *)CFDictionaryGetValue(theDict, @"VTCodecType");
  CFAllocatorRef v6 = v5;
  if (!v5)
  {
    uint64_t v14 = 0;
    goto LABEL_22;
  }
  if ((CFTypeID v7 = CFGetTypeID(v5), v7 != CFStringGetTypeID())
    || !CFEqual(v6, *(CFTypeRef *)a1)
    || (CFDictionaryRef v8 = *(const __CFDictionary **)(a1 + 8)) != 0
    && ((CFTypeRef v9 = (const void *)*MEMORY[0x1E4F1CFC8], v9 == CFDictionaryGetValue(v8, @"AllowParavirtualizedEncoder"))
     && (CMTime v10 = (const void *)*MEMORY[0x1E4F1CFD0], v10 == CFDictionaryGetValue(theDict, @"VTIsParavirtualized"))
     || (CFDictionaryRef v11 = *(const __CFDictionary **)(a1 + 8)) != 0
     && (CFDictionaryRef v12 = (const void *)*MEMORY[0x1E4F1CFD0],
         v12 == CFDictionaryGetValue(v11, @"RequireParavirtualizedEncoder"))
     && v9 == CFDictionaryGetValue(theDict, @"VTIsParavirtualized")))
  {
LABEL_21:
    uint64_t v14 = 0;
    CFAllocatorRef v6 = 0;
LABEL_22:
    CFArrayRef v13 = 0;
    CFDictionaryRef Value = 0;
    goto LABEL_23;
  }
  if (v3) {
    goto LABEL_16;
  }
  FigCFDictionaryGetBooleanIfPresent();
  if (*(unsigned char *)(a1 + 18))
  {
    LOBYTE(valuePtr) = 0;
    FigCFDictionaryGetBooleanIfPresent();
  }
  char v23 = 0;
  FigCFDictionaryGetBooleanIfPresent();
  VTAvoidHardwareEncoders();
  if (*(unsigned char *)(a1 + 17))
  {
    CFAllocatorRef v16 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (v16 == CFDictionaryGetValue(theDict, @"VTIsWrapperEncoder"))
    {
LABEL_16:
      CFAllocatorRef v6 = 0;
      CFArrayRef v13 = 0;
      CFDictionaryRef Value = 0;
      goto LABEL_17;
    }
  }
  if (!Value)
  {
    CFArrayRef v13 = 0;
    goto LABEL_52;
  }
  CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(theDict, @"VTSupportedProfileArray");
  CFArrayRef v13 = v17;
  if (!v17) {
    goto LABEL_51;
  }
  CFRetain(v17);
  int valuePtr = 0;
  CFDictionaryGetValue(Value, @"ProfileLevel");
  if (FigCFEqual())
  {
    int v18 = 1;
    int valuePtr = 1;
  }
  else
  {
    int v18 = 0;
  }
  if (FigCFEqual())
  {
    int v18 = 2;
    int valuePtr = 2;
  }
  if (FigCFEqual())
  {
    int v18 = 3;
    int valuePtr = 3;
  }
  if (FigCFEqual())
  {
    int valuePtr = 4;
    goto LABEL_49;
  }
  if (!v18)
  {
LABEL_51:
    CFDictionaryRef Value = 0;
    goto LABEL_52;
  }
LABEL_49:
  CFDictionaryRef Value = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  v29.length = CFArrayGetCount(v13);
  v29.location = 0;
  if (!CFArrayContainsValue(v13, v29, Value))
  {
    uint64_t v14 = 0;
    CFAllocatorRef v6 = 0;
    goto LABEL_23;
  }
LABEL_52:
  CFStringRef v19 = CFDictionaryGetValue(theDict, @"VTRequiredSpecificationEntries");
  if (v24)
  {
    CFArrayRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      CFAllocatorRef v6 = MutableCopy;
      CFDictionarySetValue(MutableCopy, @"EnableHardwareAcceleratedVideoEncoder", (const void *)*MEMORY[0x1E4F1CFD0]);
      CFStringRef v19 = v6;
      goto LABEL_56;
    }
  }
  CFAllocatorRef v6 = 0;
  if (!v19)
  {
LABEL_17:
    uint64_t v14 = 1;
    goto LABEL_23;
  }
LABEL_56:
  CFTypeID v21 = CFGetTypeID(v19);
  if (v21 != CFDictionaryGetTypeID()) {
    goto LABEL_17;
  }
  CFDictionaryApplyFunction((CFDictionaryRef)v19, (CFDictionaryApplierFunction)vtCheckRequiredVideoEncoderSpecificationKey, &context);
  uint64_t v14 = v26;
LABEL_23:
  if (theDict) {
    CFRelease(theDict);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Value) {
    CFRelease(Value);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v14;
}

uint64_t vtCopyExpandedEncoderListForWrappers(const __CFArray *a1, uint64_t a2, CFMutableArrayRef *a3)
{
  CFMutableArrayRef Mutable = 0;
  uint64_t v4 = 0;
  if (a1 && a3)
  {
    CFIndex Count = CFArrayGetCount(a1);
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (!Mutable)
    {
LABEL_16:
      uint64_t v8 = FigSignalErrorAt();
LABEL_17:
      uint64_t v4 = v8;
      goto LABEL_13;
    }
    if (Count >= 1)
    {
      CFIndex v7 = 0;
      uint64_t v4 = 0;
      while (!CFArrayGetValueAtIndex(a1, v7))
      {
        if (++v7 == Count) {
          goto LABEL_12;
        }
      }
      uint64_t v8 = FigRegistryItemCopyMatchingInfo();
      if (v8) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    uint64_t v4 = 0;
LABEL_12:
    *a3 = Mutable;
    CFMutableArrayRef Mutable = 0;
  }
LABEL_13:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v4;
}

uint64_t vtSortRegistryItemsByVideoEncoderRating()
{
  CFDictionaryRef v14 = 0;
  CFDictionaryRef theDict = 0;
  CFDictionaryRef v12 = 0;
  CFDictionaryRef v13 = 0;
  uint64_t valuePtr = 0;
  if (FigRegistryItemCopyMatchingInfo() || FigRegistryItemCopyMatchingInfo())
  {
    uint64_t v9 = 0;
    goto LABEL_32;
  }
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"VTRating");
  uint64_t v1 = Value;
  if (Value)
  {
    CFRetain(Value);
    CFTypeID v2 = CFGetTypeID(v1);
    if (v2 == CFNumberGetTypeID()) {
      CFNumberGetValue((CFNumberRef)v1, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    }
  }
  BOOL v3 = CFDictionaryGetValue(v14, @"VTRating");
  uint64_t v4 = v3;
  if (v3)
  {
    CFRetain(v3);
    CFTypeID v5 = CFGetTypeID(v4);
    if (v5 == CFNumberGetTypeID()) {
      CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr);
    }
  }
  if (HIDWORD(valuePtr) != valuePtr)
  {
    if (SHIDWORD(valuePtr) > (int)valuePtr) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = -1;
    }
    goto LABEL_28;
  }
  CFStringRef v6 = 0;
  if (!FigRegistryItemCopyDescription() && v13) {
    CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(v13, @"CMClassImplementationID");
  }
  if (!FigRegistryItemCopyDescription() && v12)
  {
    CFStringRef v7 = (const __CFString *)CFDictionaryGetValue(v12, @"CMClassImplementationID");
    if ((unint64_t)v6 | (unint64_t)v7) {
      uint64_t v8 = -1;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v6) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v8;
    }
    if (v6 && v7)
    {
      uint64_t v9 = CFStringCompare(v6, v7, 0);
      if (!v1) {
        goto LABEL_30;
      }
LABEL_29:
      CFRelease(v1);
      goto LABEL_30;
    }
LABEL_28:
    if (!v1) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  uint64_t v9 = v6 != 0;
  if (v1) {
    goto LABEL_29;
  }
LABEL_30:
  if (v4) {
    CFRelease(v4);
  }
LABEL_32:
  if (theDict) {
    CFRelease(theDict);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  return -v9;
}

uint64_t VTCreateVideoEncoderInstanceFromEncoderID(const void *a1, uint64_t a2, CFTypeRef *a3)
{
  CFArrayRef listOfVideoEncodersOut = 0;
  int v17 = 0;
  CFTypeRef cf = 0;
  if (a1)
  {
    uint64_t v5 = VTCopyVideoEncoderList(0, &listOfVideoEncodersOut);
    CFArrayRef v6 = listOfVideoEncodersOut;
    if (v5)
    {
      uint64_t v14 = v5;
      CFMutableArrayRef Mutable = 0;
      if (!listOfVideoEncodersOut) {
        goto LABEL_14;
      }
    }
    else
    {
      if (CFArrayGetCount(listOfVideoEncodersOut) >= 1)
      {
        CFIndex v7 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v7);
          CFDictionaryRef Value = CFDictionaryGetValue(ValueAtIndex, @"EncoderID");
          if (Value && CFEqual(Value, a1) && FigCFDictionaryGetInt32IfPresent()) {
            break;
          }
          ++v7;
        }
        while (v7 < CFArrayGetCount(v6));
      }
      uint64_t v10 = *MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(Mutable, @"EncoderID", a1);
      uint64_t v13 = VTSelectAndCreateVideoEncoderInstanceInternal(v17, v10, v12, Mutable, 0, &cf, 0, 0, 0);
      uint64_t v14 = v13;
      if (a3 && !v13)
      {
        *a3 = cf;
        CFTypeRef cf = 0;
      }
      if (!v6) {
        goto LABEL_14;
      }
    }
    CFRelease(v6);
LABEL_14:
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (cf) {
      CFRelease(cf);
    }
    return v14;
  }

  return FigSignalErrorAt();
}

OSStatus VTCopyVideoEncoderList(CFDictionaryRef options, CFArrayRef *listOfVideoEncodersOut)
{
  uint64_t v68 = 0;
  CFArrayRef v69 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  CFDictionaryRef v64 = 0;
  CFMutableArrayRef v65 = 0;
  long long v62 = 0;
  CFDictionaryRef v63 = 0;
  vtPopulateVideoEncoderRegistry();
  if (!sVideoEncoderRegistry)
  {
    return FigSignalErrorAt();
  }
  OSStatus v4 = FigRegistryCopyFilteredItemList();
  if (v4)
  {
    OSStatus v50 = v4;
    CFMutableArrayRef Mutable = 0;
LABEL_108:
    CFSetRef v13 = 0;
    CFSetRef v14 = 0;
    goto LABEL_87;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v55 = (void *)*MEMORY[0x1E4F1CFD0];
  CFDictionarySetValue(Mutable, @"EnableHardwareAcceleratedVideoEncoder", (const void *)*MEMORY[0x1E4F1CFD0]);
  if (VTParavirtualizationIsRunningInGuest()) {
    BYTE2(v68) = 1;
  }
  uint64_t v67 = Mutable;
  OSStatus v7 = vtCopyExpandedEncoderListForWrappers(v69, (uint64_t)&v66, &v65);
  if (v7)
  {
    OSStatus v50 = v7;
    goto LABEL_108;
  }
  CFArrayRef v8 = v69;
  uint64_t v56 = listOfVideoEncodersOut;
  unsigned int v57 = Mutable;
  if (v65)
  {
    if (v69) {
      CFRelease(v69);
    }
    CFArrayRef v8 = v65;
    CFArrayRef v69 = v65;
    CFMutableArrayRef v65 = 0;
  }
  uint64_t Count = CFArrayGetCount(v8);
  theArradouble y = CFArrayCreateMutable(v5, Count, MEMORY[0x1E4F1D510]);
  CFDictionaryRef v11 = (const CFSetCallBacks *)MEMORY[0x1E4F1D548];
  CFSetRef cf = CFSetCreateMutable(v5, Count, MEMORY[0x1E4F1D548]);
  CFSetRef v60 = CFSetCreateMutable(v5, Count, v11);
  if (Count < 1)
  {
LABEL_86:
    v72.length = CFArrayGetCount(theArray);
    v72.location = 0;
    CFArraySortValues(theArray, v72, (CFComparatorFunction)vtCompareCodecNameThenEncoderName, 0);
    OSStatus v50 = 0;
    *uint64_t v56 = theArray;
    CFMutableArrayRef Mutable = v57;
    CFSetRef v13 = v60;
    CFSetRef v14 = cf;
    goto LABEL_87;
  }
  CFIndex v12 = 0;
  CFSetRef v13 = v60;
  CFSetRef v14 = cf;
  do
  {
    CFArrayGetValueAtIndex(v69, v12);
    OSStatus v15 = FigRegistryItemCopyMatchingInfo();
    if (v15)
    {
      OSStatus v50 = v15;
      CFMutableArrayRef Mutable = v57;
      goto LABEL_104;
    }
    if (!vtShouldSkipEncoder(options, v63))
    {
      CFAllocatorRef v16 = CFDictionaryGetValue(v63, @"VTCodecType");
      if (v16)
      {
        int v17 = v16;
        CFTypeID TypeID = CFStringGetTypeID();
        if (TypeID == CFGetTypeID(v17))
        {
          if (CFSetContainsValue(cf, v17)) {
            CFStringRef v19 = v60;
          }
          else {
            CFStringRef v19 = cf;
          }
          CFSetAddValue(v19, v17);
        }
      }
    }
    ++v12;
  }
  while (Count != v12);
  CFIndex v20 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(v69, v20);
    unsigned int valuePtr = 0;
    OSStatus v21 = FigRegistryItemCopyDescription();
    if (v21) {
      break;
    }
    OSStatus v21 = FigRegistryItemCopyMatchingInfo();
    if (v21) {
      break;
    }
    OSStatus v21 = FigRegistryItemCopyBundle();
    if (v21) {
      break;
    }
    if (!vtShouldSkipEncoder(options, v63))
    {
      CFArrayRef v25 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFStringRef v26 = (const __CFString *)CFDictionaryGetValue(v63, @"VTCodecType");
      if (!v26 || (CFStringRef v27 = v26, v28 = CFStringGetTypeID(), v28 != CFGetTypeID(v27)))
      {
        CFNumberRef v24 = 0;
        goto LABEL_41;
      }
      CFStringGetCString(v27, buffer, 5, 0x600u);
      unsigned int valuePtr = bswap32(*(unsigned int *)buffer);
      CFNumberRef v24 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v25, @"CodecType", v24);
      uint64_t v22 = (__CFString *)CFDictionaryGetValue(v64, @"CMClassImplementationID");
      if (v22)
      {
        CFTypeID v29 = CFStringGetTypeID();
        if (v29 != CFGetTypeID(v22)) {
          goto LABEL_41;
        }
        CFDictionarySetValue(v25, @"EncoderID", v22);
        uint64_t v22 = (__CFString *)CFDictionaryGetValue(v64, @"VTCodecName");
        if (v22)
        {
          CFTypeID v30 = CFStringGetTypeID();
          if (v30 == CFGetTypeID(v22))
          {
            if (v62)
            {
              CFStringRef v31 = CFBundleCopyLocalizedString(v62, v22, 0, 0);
              CFStringRef v23 = v31;
              if (v31) {
                uint64_t v22 = (__CFString *)v31;
              }
            }
            else
            {
              CFStringRef v23 = 0;
            }
            if (FigCFEqual()) {
              uint64_t v22 = @"H.265";
            }
            CFDictionarySetValue(v25, @"CodecName", v22);
            CFStringRef v32 = (const __CFString *)CFDictionaryGetValue(v64, @"VTEncoderName");
            if (v32)
            {
              CFDictionaryRef value = v22;
              CFStringRef v33 = v32;
              CFTypeID v52 = CFStringGetTypeID();
              CFStringRef v53 = v33;
              if (v52 == CFGetTypeID(v33))
              {
                if (v62)
                {
                  CFStringRef v34 = CFBundleCopyLocalizedString(v62, v33, 0, 0);
                  CFStringRef v35 = v33;
                  uint64_t v22 = (__CFString *)v34;
                  if (v34) {
                    CFStringRef v35 = v34;
                  }
                }
                else
                {
                  uint64_t v22 = 0;
                  CFStringRef v35 = v53;
                }
                CFStringRef v54 = v35;
                CFDictionarySetValue(v25, @"EncoderName", v35);
                if (CFSetContainsValue(v60, v27))
                {
                  CFIndex v36 = v25;
                  CFStringRef v37 = v54;
                }
                else
                {
                  CFIndex v36 = v25;
                  CFStringRef v37 = value;
                }
                CFDictionarySetValue(v36, @"DisplayName", v37);
                matched = copyObjectForKeyFromMatchInfoOrIORegistry(v63, @"VTRating");
                if (matched)
                {
                  uint64_t v39 = matched;
                  CFDictionarySetValue(v25, @"PerformanceRating", matched);
                  CFRelease(v39);
                }
                uint64_t v40 = copyObjectForKeyFromMatchInfoOrIORegistry(v63, @"VTQualityRating");
                if (v40)
                {
                  unsigned int v41 = v40;
                  CFDictionarySetValue(v25, @"QualityRating", v40);
                  CFRelease(v41);
                }
                size_t v42 = copyObjectForKeyFromMatchInfoOrIORegistry(v63, @"VTInstanceLimit");
                if (v42)
                {
                  uint64_t v43 = v42;
                  CFDictionarySetValue(v25, @"InstanceLimit", v55);
                  CFRelease(v43);
                }
                uint64_t v44 = copyObjectForKeyFromMatchInfoOrIORegistry(v63, @"VTIsHardwareAccelerated");
                if (v44)
                {
                  uint64_t v45 = v44;
                  CFDictionarySetValue(v25, @"IsHardwareAccelerated", v44);
                  CFRelease(v45);
                }
                InferredPropertiesForCodec = createInferredPropertiesForCodec(v63);
                if (InferredPropertiesForCodec)
                {
                  char v47 = InferredPropertiesForCodec;
                  CFDictionarySetValue(v25, @"SupportedSelectionProperties", InferredPropertiesForCodec);
                  CFRelease(v47);
                }
                uint64_t v48 = copyObjectForKeyFromMatchInfoOrIORegistry(v63, @"VTSupportsMultiPass");
                if (v48)
                {
                  uint64_t v49 = v48;
                  CFDictionarySetValue(v25, @"SupportsMultiPass", v55);
                  CFRelease(v49);
                }
                CFArrayAppendValue(theArray, v25);
                goto LABEL_43;
              }
            }
LABEL_42:
            uint64_t v22 = 0;
LABEL_43:
            if (v25) {
              CFRelease(v25);
            }
            goto LABEL_45;
          }
LABEL_41:
          CFStringRef v23 = 0;
          goto LABEL_42;
        }
      }
      CFStringRef v23 = 0;
      goto LABEL_43;
    }
    uint64_t v22 = 0;
    CFStringRef v23 = 0;
    CFNumberRef v24 = 0;
LABEL_45:
    if (v63)
    {
      CFRelease(v63);
      CFDictionaryRef v63 = 0;
    }
    if (v24) {
      CFRelease(v24);
    }
    if (v64)
    {
      CFRelease(v64);
      CFDictionaryRef v64 = 0;
    }
    if (v62)
    {
      CFRelease(v62);
      long long v62 = 0;
    }
    if (v23) {
      CFRelease(v23);
    }
    if (v22) {
      CFRelease(v22);
    }
    if (Count == ++v20) {
      goto LABEL_86;
    }
  }
  OSStatus v50 = v21;
  CFMutableArrayRef Mutable = v57;
  CFSetRef v13 = v60;
  CFSetRef v14 = cf;
LABEL_104:
  if (theArray) {
    CFRelease(theArray);
  }
LABEL_87:
  if (v69) {
    CFRelease(v69);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v63) {
    CFRelease(v63);
  }
  if (v64) {
    CFRelease(v64);
  }
  if (v62) {
    CFRelease(v62);
  }
  return v50;
}

uint64_t VTCopySupportedPropertyForVideoEncoderID(uint64_t a1)
{
  theArradouble y = 0;
  uint64_t v6 = 0;
  CFTypeRef cf = 0;
  if (!a1) {
    return FigSignalErrorAt();
  }
  vtPopulateVideoEncoderRegistry();
  if (!sVideoEncoderRegistry) {
    return FigSignalErrorAt();
  }
  uint64_t v1 = FigRegistryCopyFilteredItemList();
  if (v1) {
    return v1;
  }
  return 4294954388;
}

BOOL vtFilterRegistryItemByEncoderID(uint64_t a1)
{
  int v2 = FigRegistryItemCopyDescription();
  uint64_t v3 = 0;
  if (a1 && !v2)
  {
    CFDictionaryGetValue(0, @"CMClassImplementationID");
    return FigCFEqual() != 0;
  }
  return v3;
}

uint64_t vtFilterRegistryItemWithPlatformRestrictions()
{
  if (!FigRegistryItemCopyMatchingInfo())
  {
    FigCFDictionaryGetBooleanIfPresent();
    if (VTParavirtualizationIsRunningInGuest()) {
      FigCFDictionaryGetBooleanIfPresent();
    }
  }
  return 1;
}

BOOL vtShouldSkipEncoder(const __CFDictionary *a1, CFDictionaryRef theDict)
{
  OSStatus v4 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (v4 == CFDictionaryGetValue(theDict, @"Hide"))
  {
    if (a1 && v4 == CFDictionaryGetValue(a1, @"RevealHiddenEncoders")) {
      return 0;
    }
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (v4 == CFDictionaryGetValue(theDict, @"DVFamily")) {
    return !a1 || v4 != CFDictionaryGetValue(a1, @"IncludeStandardDefinitionDVEncoders");
  }
  return v5;
}

const void *copyObjectForKeyFromMatchInfoOrIORegistry(const __CFDictionary *a1, const void *a2)
{
  CFDictionaryRef Value = CFDictionaryGetValue(a1, a2);
  uint64_t v3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  return v3;
}

__CFDictionary *createInferredPropertiesForCodec(const __CFDictionary *a1)
{
  if (!a1) {
    return 0;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"VTCodecType");
  CFArrayRef v3 = (const __CFArray *)CFDictionaryGetValue(a1, @"VTSupportedProfileArray");
  if (!v3) {
    return 0;
  }
  CFArrayRef v4 = v3;
  CFRetain(v3);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableArrayRef v7 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E4F1D510]);
  CFStringGetCString(Value, buffer, 5, 0x600u);
  int v8 = bswap32(*(unsigned int *)buffer);
  if (v8 > 1836415072)
  {
    if (v8 > 1902407031)
    {
      if (v8 > 1902671458)
      {
        if (v8 == 1902998904) {
          goto LABEL_29;
        }
        unsigned __int16 v10 = 30307;
      }
      else
      {
        if (v8 == 1902407032) {
          goto LABEL_29;
        }
        unsigned __int16 v10 = 25974;
      }
      int v9 = v10 | 0x71680000;
    }
    else if (v8 > 1902405680)
    {
      if (v8 == 1902405681) {
        goto LABEL_29;
      }
      int v9 = 1902405733;
    }
    else
    {
      if (v8 == 1836415073) {
        goto LABEL_29;
      }
      int v9 = 1869117027;
    }
  }
  else if (v8 > 1685481572)
  {
    if (v8 > 1751479856)
    {
      if (v8 == 1751479857) {
        goto LABEL_29;
      }
      int v9 = 1752589105;
    }
    else
    {
      if (v8 == 1685481573) {
        goto LABEL_29;
      }
      int v9 = 1718908520;
    }
  }
  else
  {
    if (v8 <= 1684895095)
    {
      if (v8 != 1667524657)
      {
        int v9 = 1667790435;
        goto LABEL_28;
      }
LABEL_29:
      CFIndex Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        CFIndex v12 = Count;
        for (uint64_t i = 0; i != v12; ++i)
          FigCFArrayGetIntAtIndex();
      }
      CFDictionarySetValue(Mutable, @"ProfileLevel", v7);
      goto LABEL_33;
    }
    if (v8 == 1684895096) {
      goto LABEL_29;
    }
    int v9 = 1685481521;
  }
LABEL_28:
  if (v8 == v9) {
    goto LABEL_29;
  }
LABEL_33:
  CFRelease(v4);
  if (v7) {
    CFRelease(v7);
  }
  return Mutable;
}

CFComparisonResult vtCompareCodecNameThenEncoderName(const __CFDictionary *a1, const __CFDictionary *a2)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"CodecName");
  CFStringRef v5 = (const __CFString *)CFDictionaryGetValue(a2, @"CodecName");
  CFComparisonResult result = CFStringCompare(Value, v5, 0);
  if (result == kCFCompareEqualTo)
  {
    CFStringRef v7 = (const __CFString *)CFDictionaryGetValue(a1, @"EncoderName");
    CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(a2, @"EncoderName");
    return CFStringCompare(v7, v8, 0);
  }
  return result;
}

OSStatus VTCopySupportedPropertyDictionaryForEncoder(int32_t width, int32_t height, CMVideoCodecType codecType, CFDictionaryRef encoderSpecification, CFStringRef *encoderIDOut, CFDictionaryRef *supportedPropertiesOut)
{
  VTSessionRef session = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  OSStatus v9 = VTCompressionSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], width, height, codecType, encoderSpecification, 0, 0, 0, 0, (VTCompressionSessionRef *)&session);
  if (v9) {
    goto LABEL_8;
  }
  if (!encoderIDOut)
  {
    if (!supportedPropertiesOut)
    {
      OSStatus v11 = 0;
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  OSStatus v10 = VTSessionCopyProperty(session, @"EncoderID", v8, encoderIDOut);
  OSStatus v11 = v10;
  if (supportedPropertiesOut && !v10)
  {
LABEL_7:
    OSStatus v9 = VTSessionCopySupportedPropertyDictionary(session, supportedPropertiesOut);
LABEL_8:
    OSStatus v11 = v9;
  }
LABEL_10:
  if (session) {
    CFRelease(session);
  }
  return v11;
}

void vtInitializeVideoEncoderRegistry()
{
  if (shouldPreferInternalEncoders_preferInternalOnceToken != -1) {
    dispatch_once_f(&shouldPreferInternalEncoders_preferInternalOnceToken, &shouldPreferInternalEncoders_preferInternal, (dispatch_function_t)vtGetPreferInternalEncoders);
  }
  int v0 = shouldPreferInternalEncoders_preferInternal;
  sVideoEncoderRegistryMutedouble x = FigSimpleMutexCreate();
  MEMORY[0x199705810](&sCreateVideoEncoderRegistryOnce, vtCreateVideoEncoderRegistry);
  vtRegisterVideoEncoderWithInfoKeysAndValues(0x6D757861u, v1, @"Muxed Alpha", @"Apple Muxed Alpha", @"com.apple.videotoolbox.videoencoder.hevc-with-alpha", 48, @"hvc1", (uint64_t)MuxedAlphaEncoder_CreateInstance, 0);
  vtRegisterVideoEncoderWithInfoKeysAndValues(0x64697368u, v2, @"Disparity", @"Apple Disparity (HEVC)", @"com.apple.videotoolbox.videoencoder.disparity-hevc", 16, @"hvc1", (uint64_t)DepthWrapperEncoder_CreateInstance, 0);
  vtRegisterVideoEncoderWithInfoKeysAndValues(0x64657068u, v3, @"Depth", @"Apple Depth (HEVC)", @"com.apple.videotoolbox.videoencoder.depth-hevc", 16, @"hvc1", (uint64_t)DepthWrapperEncoder_CreateInstance, 0);
  if (os_variant_has_internal_content()) {
    vtRegisterVideoEncoderWithInfoKeysAndValues(0x69706220u, v4, @"Test IPB", @"Apple Test IPB", @"com.apple.videotoolbox.videoencoder.testipb", 4, 0, (uint64_t)TestIPBVideoEncoder_CreateInstance, 0);
  }
  if (v0) {
    VTLoadVideoEncodersPreferringInternalBundles();
  }
  else {
    VTLoadVideoEncoders();
  }

  vtLoadParavirtualizedVideoEncoders();
}

void vtLoadParavirtualizedVideoEncoders()
{
  if (vtLoadParavirtualizedVideoEncoders_sCreateGuestUUIDOnce != -1) {
    dispatch_once(&vtLoadParavirtualizedVideoEncoders_sCreateGuestUUIDOnce, &__block_literal_global_2);
  }
  if (VTParavirtualizationGuestInstallHandlerForUUID(&vtLoadParavirtualizedVideoEncoders_sGuestUUID, &__block_literal_global_81, 0))return; {
  int v24 = 0;
  }
  CFTypeRef v22 = 0;
  CFTypeRef v23 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v21 = 0;
  int appended = VTParavirtualizationCreateMessageAndByteStream(1701733235, 1, (uint64_t)&vtLoadParavirtualizedVideoEncoders_sGuestUUID, 0, (CMBlockBufferRef *)&v23, &v22);
  if (appended) {
    goto LABEL_36;
  }
  int appended = VTParavirtualizationMessageAppendUInt32();
  if (appended) {
    goto LABEL_36;
  }
  long long v18 = kVTParavirtualizationDefaultReplyTimeout;
  uint64_t v19 = 0;
  int appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)v23, (uint64_t)&v18, &v21);
  if (appended) {
    goto LABEL_36;
  }
  int appended = VTParavirtualizationMessageCopyCFPropertyList((OpaqueCMBlockBuffer *)v21, 744844899, &cf);
  if (appended) {
    goto LABEL_36;
  }
  if (!cf || (CFTypeID v1 = CFGetTypeID(cf), v1 != CFArrayGetTypeID()))
  {
    int appended = FigSignalErrorAt();
LABEL_36:
    int UInt32 = appended;
    CFArrayRef v2 = 0;
    goto LABEL_11;
  }
  CFArrayRef v2 = (const __CFArray *)cf;
  CFTypeRef cf = 0;
  int UInt32 = VTParavirtualizationMessageGetUInt32((OpaqueCMBlockBuffer *)v21, 745956722, &v24);
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (UInt32)
  {
LABEL_31:
    if (!v2) {
      return;
    }
  }
  else
  {
    if (!v2) {
      return;
    }
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v4 = 0;
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v2, v4);
        if (!ValueAtIndex) {
          break;
        }
        CFDictionaryRef v7 = ValueAtIndex;
        CFTypeID v8 = CFGetTypeID(ValueAtIndex);
        if (v8 != CFDictionaryGetTypeID()) {
          break;
        }
        LODWORD(v18) = 0;
        LODWORD(v23) = 0;
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        CFStringRef Value = CFDictionaryGetValue(v7, @"VTCodecName");
        OSStatus v10 = CFDictionaryGetValue(v7, @"CMClassImplementationName");
        OSStatus v11 = CFDictionaryGetValue(v7, @"CMClassImplementationID");
        CFStringRef v12 = CFStringCreateWithFormat(v5, 0, @"paravirtualized:%@", v10);
        CFStringRef v13 = CFStringCreateWithFormat(v5, 0, @"paravirtualized:%@", v11);
        if (!vtRegisterVideoEncoderWithSpecificationArgumentWithInfoKeysAndValues(v18, (int)v23, Value, v12, v13, v14, v15, v16, @"VTHostEncoderID"))
        {
          if (v12) {
            CFRelease(v12);
          }
          if (v13) {
            CFRelease(v13);
          }
          if (Count != ++v4) {
            continue;
          }
        }
        goto LABEL_31;
      }
      FigSignalErrorAt();
    }
  }
  CFRelease(v2);
}

uint64_t vtGetPreferInternalEncoders(unsigned char *a1)
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  *a1 = result;
  return result;
}

uint64_t vtRegisterVideoEncoderWithInfoKeysAndValues(unsigned int a1, uint64_t a2, const void *a3, const void *a4, const void *a5, __int16 a6, const void *a7, uint64_t a8, const void *a9)
{
  unsigned int v10 = a1;
  return vtRegisterVideoEncoderWithInfoKeysAndValuesInternal(&v10, 0, a3, a4, a5, a6, a7, a8, 0, &a9);
}

uint64_t vtRegisterVideoEncoderWithInfoKeysAndValuesInternal(unsigned int *a1, int a2, const void *a3, const void *a4, const void *a5, __int16 a6, const void *a7, uint64_t a8, uint64_t a9, const void **a10)
{
  int valuePtr = a2;
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v19 = Mutable;
    *(_DWORD *)bytes = bswap32(*a1);
    CFStringRef v20 = CFStringCreateWithBytes(v17, bytes, 4, 0x600u, 0);
    if (!v20)
    {
      CFNumberRef v21 = 0;
      goto LABEL_35;
    }
    CFStringRef v34 = a5;
    CFDictionarySetValue(v19, @"VTCodecType", v20);
    CFNumberRef v21 = CFNumberCreate(v17, kCFNumberSInt32Type, &valuePtr);
    if (!v21)
    {
LABEL_35:
      uint64_t v31 = FigSignalErrorAt();
LABEL_36:
      CFRelease(v19);
      if (v20) {
        CFRelease(v20);
      }
      if (v21) {
        CFRelease(v21);
      }
      return v31;
    }
    CFDictionarySetValue(v19, @"VTRating", v21);
    if ((a6 & 2) != 0)
    {
      CFDictionarySetValue(v19, @"VTIsHardwareAccelerated", (const void *)*MEMORY[0x1E4F1CFD0]);
      if ((a6 & 4) == 0)
      {
LABEL_6:
        if ((a6 & 0x80) == 0) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
    else if ((a6 & 4) == 0)
    {
      goto LABEL_6;
    }
    CFDictionarySetValue(v19, @"Hide", (const void *)*MEMORY[0x1E4F1CFD0]);
    if ((a6 & 0x80) == 0)
    {
LABEL_8:
      uint64_t v33 = a8;
      if ((a6 & 8) != 0) {
        CFDictionarySetValue(v19, @"VTAllowSandboxedEncode", (const void *)*MEMORY[0x1E4F1CFC8]);
      }
      if ((a6 & 0x10) != 0)
      {
        CFTypeRef v22 = (const void *)*MEMORY[0x1E4F1CFD0];
        CFDictionarySetValue(v19, @"VTIsWrapperEncoder", (const void *)*MEMORY[0x1E4F1CFD0]);
        if (a7) {
          CFDictionarySetValue(v19, @"VTWrapsCodecType", a7);
        }
        if ((a6 & 0x20) != 0) {
          FigCFDictionarySetInt32();
        }
        if ((a6 & 0x100) != 0) {
          CFDictionarySetValue(v19, @"VTWrapsSoftwareCodecOnly", v22);
        }
      }
      if ((a6 & 0x40) != 0) {
        CFDictionarySetValue(v19, @"VTSupportsMultiPass", (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      if ((a6 & 0x200) != 0) {
        CFDictionarySetValue(v19, @"VTIsParavirtualized", (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      CFMutableDictionaryRef v23 = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v23)
      {
        int v24 = v23;
        BOOL v38 = a10 + 1;
        CFStringRef v26 = *a10;
        if (*a10)
        {
          do
          {
            CFStringRef v27 = v38;
            uint64_t v39 = v38 + 1;
            CFTypeID v28 = *v27;
            if (!*v27) {
              break;
            }
            CFTypeID v29 = CFEqual(v26, @"VTHostEncoderID") ? v19 : v24;
            CFDictionarySetValue(v29, v26, v28);
            CFTypeID v30 = v39;
            BOOL v38 = v39 + 1;
            CFStringRef v26 = *v30;
          }
          while (*v30);
        }
        if (CFDictionaryGetCount(v24) >= 1) {
          CFDictionarySetValue(v19, @"VTRequiredSpecificationEntries", v24);
        }
        uint64_t v31 = vtRegisterVideoEncoderInternal(a3, a4, v34, (uint64_t)v19, v33, a9);
        CFRelease(v19);
        uint64_t v19 = v24;
        goto LABEL_36;
      }
      goto LABEL_35;
    }
LABEL_7:
    CFDictionarySetValue(v19, @"DVFamily", (const void *)*MEMORY[0x1E4F1CFD0]);
    goto LABEL_8;
  }

  return FigSignalErrorAt();
}

void __vtLoadParavirtualizedVideoEncoders_block_invoke()
{
  CFUUIDRef v0 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  vtLoadParavirtualizedVideoEncoders_sGuestUUID = CFUUIDGetUUIDBytes(v0);
  if (v0)
  {
    CFRelease(v0);
  }
}

uint64_t __vtLoadParavirtualizedVideoEncoders_block_invoke_2(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  CFUUIDBytes v6 = vtLoadParavirtualizedVideoEncoders_sGuestUUID;
  CFUUIDRef v3 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], vtLoadParavirtualizedVideoEncoders_sGuestUUID);
  int v5 = 0;
  if (!VTParavirtualizationMessageGetMessageTypeAndFlagsAndGuestUUID(a2, &v5, 0, 0))
  {
    if (v5 == 1383295341)
    {
      if (!vtUnregisterParavirtualizedVideoEncoders()) {
        sReloadParavirtualizedEncodersList = 1;
      }
    }
    else if (v5 == 1115252001 && !vtUnregisterParavirtualizedVideoEncoders())
    {
      sReloadParavirtualizedEncodersList = 1;
      VTParavirtualizationGuestRemoveHandlerForUUID(&v6);
    }
  }
  if (v3) {
    CFRelease(v3);
  }
  return 0;
}

uint64_t vtUnregisterParavirtualizedVideoEncoders()
{
  if (sVideoEncoderRegistry)
  {
    uint64_t v0 = FigRegistryCopyFilteredItemList();
    if (v0) {
      return v0;
    }
    else {
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t vtFilterRegistryItemForParavirtualizedEncodersOnly()
{
  if (!FigRegistryItemCopyMatchingInfo()) {
    FigCFDictionaryGetBooleanIfPresent();
  }
  return 0;
}

uint64_t vtRegisterVideoEncoderWithSpecificationArgumentWithInfoKeysAndValues(unsigned int a1, int a2, const void *a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  unsigned int v10 = a1;
  return vtRegisterVideoEncoderWithInfoKeysAndValuesInternal(&v10, a2, a3, a4, a5, 514, 0, 0, (uint64_t)ParavirtualizedVideoEncoder_CreateInstanceWithSpecification, &a9);
}

uint64_t vtCheckRequiredVideoEncoderSpecificationKey(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t result = FigCFEqual();
  if (!result)
  {
    uint64_t result = *(void *)a3;
    if (!*(void *)a3
      || (uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)result, a1), !a2)
      || !result
      || (uint64_t result = CFEqual((CFTypeRef)result, a2), !result))
    {
      *(unsigned char *)(a3 + 8) = 0;
    }
  }
  return result;
}

__CFDictionary *VTCopyVP9DecoderCapabilitiesDictionary()
{
  int valuePtr = 51;
  if (!VTIsHardwareDecodeSupported(0x76703039u)) {
    return 0;
  }
  int v16 = 0;
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v3 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v3)
    {
      CFDictionarySetValue(Mutable, @"VTPerProfileSupport", v3);
      CFIndex v4 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E4F1D510]);
      if (!v4)
      {
LABEL_8:
        int v12 = 0;
        goto LABEL_9;
      }
      int v16 = 0;
      CFNumberRef v5 = CFNumberCreate(v0, kCFNumberIntType, &v16);
      CFArrayAppendValue(v4, v5);
      CFRelease(v5);
      int v16 = 2;
      CFNumberRef v6 = CFNumberCreate(v0, kCFNumberIntType, &v16);
      CFArrayAppendValue(v4, v6);
      CFRelease(v6);
      CFDictionarySetValue(Mutable, @"VTSupportedProfiles", v4);
      CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v7)
      {
        CFMutableDictionaryRef v8 = v7;
        CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v9)
        {
          unsigned int v10 = v9;
          CFDictionarySetValue(v3, @"0", v8);
          CFDictionarySetValue(v3, @"2", v8);
          OSStatus v11 = (const void *)*MEMORY[0x1E4F1CFD0];
          CFDictionarySetValue(v8, @"VTIsHardwareAccelerated", (const void *)*MEMORY[0x1E4F1CFD0]);
          CFDictionarySetValue(v10, @"VTIsHardwareAccelerated", v11);
          CFDictionarySetValue(v8, @"VTMaxPlaybackLevel", v1);
          CFDictionarySetValue(v10, @"VTMaxPlaybackLevel", v1);
          CFRelease(v8);
          CFRelease(v10);
          goto LABEL_8;
        }
        int v12 = FigSignalErrorAt();
        CFRelease(v8);
      }
      else
      {
        int v12 = FigSignalErrorAt();
      }
    }
    else
    {
      int v12 = FigSignalErrorAt();
      CFIndex v4 = 0;
    }
  }
  else
  {
    int v12 = FigSignalErrorAt();
    CFIndex v4 = 0;
    CFMutableDictionaryRef v3 = 0;
  }
LABEL_9:
  if (v1) {
    CFRelease(v1);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (Mutable) {
    BOOL v13 = v12 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

__CFDictionary *VTCopyDecoderCapabilitiesDictionaryForCodecTypes(const __CFArray *a1)
{
  int IsHDRAllowedOnDevice = FigIsHDRAllowedOnDevice();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int UInt32 = (const void *)FigCFNumberCreateUInt32();
  uint64_t v5 = FigCFNumberCreateUInt32();
  CFNumberRef v6 = (const void *)v5;
  if (!a1)
  {
    FigSignalErrorAt();
    CFMutableDictionaryRef v9 = 0;
    goto LABEL_19;
  }
  if (!UInt32)
  {
    FigSignalErrorAt();
    CFMutableDictionaryRef v9 = 0;
    if (!v6) {
      return v9;
    }
    goto LABEL_22;
  }
  if (v5)
  {
    if (FigCFArrayContainsValue() && !FigCFArrayContainsValue())
    {
      CFArrayRef MutableCopy = (__CFArray *)FigCFArrayCreateMutableCopy();
      CFArrayAppendValue(MutableCopy, v6);
      a1 = MutableCopy;
    }
    else
    {
      CFArrayRef MutableCopy = 0;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v9 = Mutable;
    if (Mutable)
    {
      if (IsHDRAllowedOnDevice) {
        unsigned int v10 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        unsigned int v10 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(Mutable, @"VTIsHDRAllowedOnDevice", v10);
      CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v11)
      {
        CFDictionarySetValue(v9, @"VTCodecSupportDict", v11);
        if (CFArrayGetCount(a1) < 1)
        {
LABEL_16:
          CFRelease(v11);
LABEL_17:
          if (!MutableCopy) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }
        FigCFArrayGetIntAtIndex();
        if (FigSignalErrorAt()) {
          goto LABEL_25;
        }
      }
      else if (FigSignalErrorAt())
      {
LABEL_25:
        CFRelease(v9);
        CFMutableDictionaryRef v9 = 0;
      }
      if (!v11) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    FigSignalErrorAt();
    if (MutableCopy) {
LABEL_18:
    }
      CFRelease(MutableCopy);
LABEL_19:
    if (!UInt32) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  FigSignalErrorAt();
  CFMutableDictionaryRef v9 = 0;
LABEL_20:
  CFRelease(UInt32);
LABEL_21:
  if (v6) {
LABEL_22:
  }
    CFRelease(v6);
  return v9;
}

CFStringRef vtCreateStringFromCodecType(unsigned int a1)
{
  __sprintf_chk(cStr, 0, 5uLL, "%c%c%c%c", HIBYTE(a1), BYTE2(a1), BYTE1(a1), a1);
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x8000100u);
}

__CFDictionary *VTCopyHEVCDecoderCapabilitiesDictionary()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFArrayRef v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v4 = CFDictionaryCreateMutable(v0, 0, v1, v2);
  int IsHDRAllowedOnDevice = FigIsHDRAllowedOnDevice();
  if (Mutable)
  {
    CFNumberRef v6 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (IsHDRAllowedOnDevice) {
      CFMutableDictionaryRef v7 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else {
      CFMutableDictionaryRef v7 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(Mutable, @"VTIsHDRAllowedOnDevice", v7);
    MEMORY[0x199705810](&sCreateVideoDecoderRegistryOnce_0, vtVideoDecoderInfoInitOnce);
    CFDictionarySetValue(Mutable, @"VTPerProfileSupport", v4);
    CFArrayRef matched = VTCopyVideoDecoderRegistryMatchArrayForCodecType(0x68766331u);
    CFStringRef v34 = 0;
    uint64_t v35 = 0;
    CFDictionaryRef context = 0;
    CFIndex Count = CFArrayGetCount(matched);
    if (Count < 1)
    {
      BOOL v13 = 0;
    }
    else
    {
      CFIndex v10 = Count;
      CFIndex v11 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(matched, v11);
        BOOL v12 = FigCFDictionaryGetBooleanIfPresent() != 0;
        BOOL v13 = v12;
        if (!v12) {
          break;
        }
        if (v10 == ++v11)
        {
          char v14 = 0;
          goto LABEL_16;
        }
      }
    }
    char v14 = 1;
LABEL_16:
    LOBYTE(v35) = v14;
    CFDictionaryRef ModelSpecificPropertyList = (const __CFDictionary *)FigCreateModelSpecificPropertyList();
    if (ModelSpecificPropertyList)
    {
      CFDictionaryRef v16 = ModelSpecificPropertyList;
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ModelSpecificPropertyList, @"VideoCodecProfiles");
      CFDictionaryRef v18 = Value;
      if (Value)
      {
        CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"hvc1");
        if (v19)
        {
          CFDictionaryRef v20 = v19;
          CFDictionaryRef cf = v16;
          CFNumberRef v21 = v4;
          CFArrayRef v22 = (const __CFArray *)CFDictionaryGetValue(v19, @"SupportedProfiles");
          if (!v22)
          {
            CFDictionaryRef v18 = 0;
            CFMutableArrayRef v29 = 0;
            CFMutableArrayRef MutableCopy = 0;
            goto LABEL_53;
          }
          CFArrayRef v23 = v22;
          CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(v0, 0, v22);
          if (MutableCopy)
          {
            CFDictionarySetValue(Mutable, @"VTSupportedProfiles", MutableCopy);
            CFDictionaryRef context = v20;
            CFStringRef v34 = v21;
            v36.length = CFArrayGetCount(v23);
            v36.location = 0;
            CFArrayApplyFunction(v23, v36, (CFArrayApplierFunction)vtAddProfileToDict, &context);
            CFDictionaryRef v25 = (const __CFDictionary *)CFDictionaryGetValue(v18, @"dvh1");
            if (!v25
              || (v26 = v25, (CFArrayRef v27 = (const __CFArray *)CFDictionaryGetValue(v25, @"SupportedProfiles")) == 0))
            {
              CFDictionaryRef v18 = 0;
LABEL_45:
              CFMutableArrayRef v29 = 0;
LABEL_53:
              int v30 = 0;
LABEL_57:
              CFMutableDictionaryRef v4 = v21;
LABEL_29:
              CFDictionaryRef v16 = cf;
              goto LABEL_30;
            }
            CFDictionaryRef v18 = CFArrayCreateMutableCopy(v0, 0, v27);
            if (v18)
            {
              CFDictionarySetValue(Mutable, @"VTDoViSupportedProfiles", v18);
              if (!v13) {
                CFDictionarySetValue(Mutable, @"VTDoViIsHardwareAccelerated", v6);
              }
              CFArrayRef v28 = (const __CFArray *)CFDictionaryGetValue(v26, @"SupportedLevels");
              if (v28)
              {
                CFMutableArrayRef v29 = CFArrayCreateMutableCopy(v0, 0, v28);
                CFMutableDictionaryRef v4 = v21;
                if (v29)
                {
                  CFDictionarySetValue(Mutable, @"VTDoViSupportedLevels", v29);
                  int v30 = 0;
                }
                else
                {
                  int v30 = FigSignalErrorAt();
                }
                goto LABEL_29;
              }
              goto LABEL_45;
            }
            int v30 = FigSignalErrorAt();
          }
          else
          {
            int v30 = FigSignalErrorAt();
            CFDictionaryRef v18 = 0;
          }
          CFMutableArrayRef v29 = 0;
          goto LABEL_57;
        }
        CFDictionaryRef v18 = 0;
      }
      CFMutableArrayRef v29 = 0;
      CFMutableArrayRef MutableCopy = 0;
      int v30 = 0;
LABEL_30:
      CFRelease(v16);
      if (!v4) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
    int v30 = 0;
    CFMutableArrayRef MutableCopy = 0;
  }
  else
  {
    int v30 = FigSignalErrorAt();
    CFMutableArrayRef MutableCopy = 0;
    CFArrayRef matched = 0;
  }
  CFMutableArrayRef v29 = 0;
  CFDictionaryRef v18 = 0;
  if (v4) {
LABEL_31:
  }
    CFRelease(v4);
LABEL_32:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (matched) {
    CFRelease(matched);
  }
  if (Mutable && v30)
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

void vtAddProfileToDict(const __CFNumber *a1, uint64_t a2)
{
  unsigned int valuePtr = 0;
  if (a1)
  {
    if (a2)
    {
      CFDictionaryRef v4 = *(const __CFDictionary **)a2;
      CFAllocatorRef v3 = *(__CFDictionary **)(a2 + 8);
      CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d", valuePtr);
      if (v6)
      {
        CFStringRef v7 = v6;
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CFMutableDictionaryRef v9 = Mutable;
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v4, @"PerProfileConstraints");
          if (!Value
            || (CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(Value, v7)) == 0
            || (BOOL v12 = CFDictionaryGetValue(v11, @"MaxLevel")) == 0)
          {
            BOOL v12 = CFDictionaryGetValue(v4, @"MaxLevel");
          }
          if (*(unsigned char *)(a2 + 16)) {
            CFDictionarySetValue(v9, @"VTIsHardwareAccelerated", (const void *)*MEMORY[0x1E4F1CFD0]);
          }
          if (v12) {
            CFDictionarySetValue(v9, @"VTMaxDecodeLevel", v12);
          }
          CFDictionarySetValue(v3, v7, v9);
          CFRelease(v9);
        }
        CFRelease(v7);
      }
    }
  }
}

CFMutableDictionaryRef VTCopyAV1DecoderCapabilitiesDictionary()
{
  CFArrayRef matched = VTCopyVideoDecoderRegistryMatchArrayForCodecType(0x61763031u);
  CFIndex Count = CFArrayGetCount(matched);
  if (Count < 1)
  {
LABEL_25:
    CFMutableArrayRef MutableCopy = 0;
    CFDictionaryRef v12 = 0;
    CFDictionaryRef v9 = 0;
    goto LABEL_26;
  }
  CFIndex v2 = Count;
  CFIndex v3 = 0;
  int v4 = 0;
  BOOL v5 = 1;
  do
  {
    CFArrayGetValueAtIndex(matched, v3);
    char v30 = 0;
    if (FigCFDictionaryGetBooleanIfPresent())
    {
      int v4 = 1;
    }
    else if (VTIsHardwareDecodeSupported(0x61763031u))
    {
      goto LABEL_8;
    }
    BOOL v5 = v2 > ++v3;
  }
  while (v2 != v3);
  if (!v4) {
    goto LABEL_25;
  }
LABEL_8:
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    CFMutableArrayRef MutableCopy = 0;
    CFDictionaryRef v12 = 0;
    CFDictionaryRef v9 = 0;
    goto LABEL_27;
  }
  CFDictionaryRef ModelSpecificPropertyList = (const __CFDictionary *)FigCreateModelSpecificPropertyList();
  CFDictionaryRef v9 = ModelSpecificPropertyList;
  if (!ModelSpecificPropertyList) {
    goto LABEL_36;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ModelSpecificPropertyList, @"VideoCodecProfiles");
  if (!Value) {
    goto LABEL_36;
  }
  CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"av01");
  CFDictionaryRef v12 = v11;
  if (!v11)
  {
    CFMutableArrayRef MutableCopy = 0;
    goto LABEL_27;
  }
  CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(v11, @"SupportedProfiles");
  if (!v13)
  {
LABEL_36:
    CFMutableArrayRef MutableCopy = 0;
LABEL_37:
    if (!FigSignalErrorAt())
    {
      CFDictionaryRef v12 = 0;
      goto LABEL_27;
    }
    CFRelease(Mutable);
    CFDictionaryRef v12 = 0;
LABEL_26:
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_27;
  }
  CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(v6, 0, v13);
  if (!MutableCopy) {
    goto LABEL_37;
  }
  CFDictionarySetValue(Mutable, @"VTSupportedProfiles", MutableCopy);
  CFDictionaryRef theDict = (const __CFDictionary *)CFDictionaryGetValue(v12, @"PerProfileConstraints");
  CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v15) {
    goto LABEL_37;
  }
  CFArrayRef v28 = v15;
  CFDictionaryRef v25 = v9;
  CFArrayRef cf = matched;
  if (CFArrayGetCount(MutableCopy) >= 1)
  {
    CFIndex v16 = 0;
    CFAllocatorRef v17 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!v5) {
      CFAllocatorRef v17 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionaryRef v18 = *v17;
    do
    {
      unsigned int valuePtr = 0;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(MutableCopy, v16);
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
      CFStringRef v20 = CFStringCreateWithFormat(v6, 0, @"%d", valuePtr);
      CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v20);
      CFArrayRef v22 = CFDictionaryCreateMutableCopy(v6, 0, v21);
      CFDictionaryAddValue(v22, @"VTIsHardwareAccelerated", v18);
      CFArrayRef v23 = CFDictionaryGetValue(v21, @"MaxLevel");
      CFDictionaryAddValue(v22, @"VTMaxPlaybackLevel", v23);
      CFDictionaryRemoveValue(v22, @"MaxLevel");
      CFDictionaryAddValue(v28, v20, v22);
      if (v22) {
        CFRelease(v22);
      }
      if (v20) {
        CFRelease(v20);
      }
      ++v16;
    }
    while (CFArrayGetCount(MutableCopy) > v16);
  }
  CFDictionaryRef v12 = v28;
  CFDictionarySetValue(Mutable, @"VTPerProfileSupport", v28);
  CFArrayRef matched = cf;
  CFDictionaryRef v9 = v25;
LABEL_27:
  if (matched) {
    CFRelease(matched);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v9) {
    CFRelease(v9);
  }
  return Mutable;
}

uint64_t VTGetHEVCCapabilitesForFormatDescription(CMFormatDescriptionRef desc, const __CFDictionary *a2, unint64_t a3, unint64_t a4)
{
  __int16 v12 = 0;
  if (a3 | a4)
  {
    if (!desc || !a2 || CMFormatDescriptionGetMediaType(desc) != 1986618469) {
      goto LABEL_39;
    }
    signed int MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
    if (MediaSubType > 1836415072)
    {
      if (MediaSubType > 1902407031)
      {
        if (MediaSubType > 1902671458)
        {
          if (MediaSubType == 1902671459) {
            goto LABEL_29;
          }
          int v9 = 1902998904;
        }
        else
        {
          if (MediaSubType == 1902407032) {
            goto LABEL_29;
          }
          int v9 = 1902667126;
        }
      }
      else if (MediaSubType > 1902405680)
      {
        if (MediaSubType == 1902405681) {
          goto LABEL_29;
        }
        int v9 = 1902405733;
      }
      else
      {
        if (MediaSubType == 1836415073) {
          goto LABEL_29;
        }
        int v9 = 1869117027;
      }
    }
    else if (MediaSubType > 1685481572)
    {
      if (MediaSubType > 1751479856)
      {
        if (MediaSubType == 1751479857) {
          goto LABEL_29;
        }
        int v9 = 1752589105;
      }
      else
      {
        if (MediaSubType == 1685481573) {
          goto LABEL_29;
        }
        int v9 = 1718908520;
      }
    }
    else
    {
      if (MediaSubType <= 1684895095)
      {
        if (MediaSubType != 1667524657)
        {
          int v9 = 1667790435;
          goto LABEL_28;
        }
LABEL_29:
        CFDictionaryRef Value = CFDictionaryGetValue(a2, @"VTIsHDRAllowedOnDevice");
        if (CMVideoFormatDescriptionGetVideoDynamicRange() - 11 >= 0xFFFFFFF7
          && (!Value || FigCFEqual()))
        {
          uint64_t result = 0;
          if (!a3) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
        uint64_t result = vtGetHEVCDecoderCapabilitiesForFormatDescription(desc, a2, (unsigned char *)&v12 + 1, (char *)&v12);
        if (!a3)
        {
LABEL_36:
          if (a4) {
            *(unsigned char *)a4 = v12;
          }
          return result;
        }
LABEL_35:
        *(unsigned char *)a3 = HIBYTE(v12);
        goto LABEL_36;
      }
      if (MediaSubType == 1684895096) {
        goto LABEL_29;
      }
      int v9 = 1685481521;
    }
LABEL_28:
    if (MediaSubType == v9) {
      goto LABEL_29;
    }
LABEL_39:
    uint64_t result = FigSignalErrorAt();
    if (!a3) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }

  return FigSignalErrorAt();
}

uint64_t vtGetHEVCDecoderCapabilitiesForFormatDescription(const opaqueCMFormatDescription *a1, const __CFDictionary *a2, unsigned char *a3, char *a4)
{
  uint64_t v36 = 0;
  __int16 valuePtr = 0;
  unsigned __int8 v34 = 0;
  if (!a2) {
    goto LABEL_38;
  }
  CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1EE20]);
  if (!Extension) {
    goto LABEL_38;
  }
  CFDictionaryRef v8 = Extension;
  CFTypeID v9 = CFGetTypeID(Extension);
  if (v9 != CFDictionaryGetTypeID()) {
    goto LABEL_38;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v8, @"hvcC");
  if (!Value) {
    goto LABEL_38;
  }
  CFArrayRef v11 = Value;
  CFTypeID v12 = CFGetTypeID(Value);
  if (v12 == CFArrayGetTypeID())
  {
    CFArrayGetValueAtIndex(v11, 0);
  }
  else
  {
    CFGetTypeID(v11);
    CFDataGetTypeID();
  }
  uint64_t v37 = 0;
  HEVCParameterSetAtIndedouble x = FigHEVCBridge_GetHEVCParameterSetAtIndex();
  if (HEVCParameterSetAtIndex
    || (HEVCParameterSetAtIndedouble x = FigHEVCBridge_GetSPSProfileTierLevel(), HEVCParameterSetAtIndex))
  {
LABEL_39:
    uint64_t v26 = HEVCParameterSetAtIndex;
    LOBYTE(v18) = 0;
    char v27 = 0;
    if (!a3) {
      goto LABEL_35;
    }
LABEL_34:
    *a3 = (_BYTE)v18;
    goto LABEL_35;
  }
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt8Type, (char *)&valuePtr + 1);
  if (!v15)
  {
LABEL_38:
    HEVCParameterSetAtIndedouble x = FigSignalErrorAt();
    goto LABEL_39;
  }
  CFNumberRef v16 = v15;
  CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(a2, @"VTSupportedProfiles");
  CFArrayRef v18 = v17;
  if (!v17)
  {
LABEL_19:
    uint64_t v26 = 0;
    goto LABEL_21;
  }
  v38.length = CFArrayGetCount(v17);
  v38.location = 0;
  if (!CFArrayContainsValue(v18, v38, v16))
  {
    LOBYTE(v18) = 0;
    goto LABEL_19;
  }
  CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"VTPerProfileSupport");
  if (!v19)
  {
    uint64_t v26 = 0;
    LOBYTE(v18) = 1;
    goto LABEL_21;
  }
  CFDictionaryRef v20 = v19;
  CFStringRef v21 = CFStringCreateWithFormat(v14, 0, @"%d", HIBYTE(valuePtr));
  if (!v21)
  {
    uint64_t v26 = FigSignalErrorAt();
    LOBYTE(v18) = 0;
LABEL_21:
    CFRelease(v16);
    char v27 = (char)v18;
    if (!a3) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  CFStringRef v22 = v21;
  CFDictionaryRef v23 = (const __CFDictionary *)CFDictionaryGetValue(v20, v21);
  if (v23)
  {
    CFDictionaryRef v24 = v23;
    CFArrayRef v18 = (const __CFArray *)CFDictionaryGetValue(v23, @"VTMaxDecodeLevel");
    CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(v24, @"VTMaxPlaybackLevel");
    char v33 = 0;
    FigCFDictionaryGetBooleanIfPresent();
    int v32 = 0;
    if (v18)
    {
      CFNumberGetValue(v18, kCFNumberSInt32Type, &v32);
      LOBYTE(v18) = v32 >= v34;
    }
    else
    {
      LOBYTE(v18) = 1;
    }
    BOOL v28 = (char)v18;
    if (v25)
    {
      CFNumberGetValue(v25, kCFNumberSInt32Type, &v32);
      BOOL v28 = v32 >= v34;
    }
    unsigned int v29 = CMVideoFormatDescriptionGetVideoDynamicRange() - 2;
    if (v33) {
      BOOL v30 = 1;
    }
    else {
      BOOL v30 = v29 >= 9;
    }
    char v27 = v30 && v28;
  }
  else
  {
    LOBYTE(v18) = 1;
    char v27 = 1;
  }
  CFRelease(v16);
  CFRelease(v22);
  uint64_t v26 = 0;
  if (a3) {
    goto LABEL_34;
  }
LABEL_35:
  if (a4) {
    *a4 = v27;
  }
  return v26;
}

uint64_t VTGetDecoderCapabilitesForFormatDescription(CMFormatDescriptionRef desc, const __CFDictionary *a2, unint64_t a3, unint64_t a4)
{
  __int16 v15 = 0;
  if (a3 | a4)
  {
    if (desc && a2 && CMFormatDescriptionGetMediaType(desc) == 1986618469)
    {
      signed int MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
      CFArrayRef Value = CFDictionaryGetValue(a2, @"VTIsHDRAllowedOnDevice");
      if (CMVideoFormatDescriptionGetVideoDynamicRange() - 11 >= 0xFFFFFFF7
        && (!Value || FigCFEqual()))
      {
        uint64_t result = 0;
LABEL_28:
        if (a3) {
          *(unsigned char *)a3 = HIBYTE(v15);
        }
        if (a4) {
          *(unsigned char *)a4 = v15;
        }
        return result;
      }
      CFDictionaryRef v10 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"VTCodecSupportDict");
      if (v10)
      {
        CFStringRef StringFromCodecType = vtCreateStringFromCodecType(MediaSubType);
        CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(v10, StringFromCodecType);
        if (StringFromCodecType) {
          CFRelease(StringFromCodecType);
        }
      }
      else
      {
        CFDictionaryRef v12 = 0;
      }
      if (MediaSubType <= 1635135536)
      {
        if (((MediaSubType - 1634755432) > 0xB || ((1 << (MediaSubType - 104)) & 0x8C1) == 0)
          && MediaSubType != 1634743400
          && MediaSubType != 1634743416)
        {
          goto LABEL_33;
        }
LABEL_27:
        uint64_t result = 0;
        HIBYTE(v15) = v12 != 0;
        LOBYTE(v15) = v12 != 0;
        goto LABEL_28;
      }
      switch(MediaSubType)
      {
        case 1635135537:
          goto LABEL_27;
        case 1752589105:
LABEL_25:
          if (v12) {
            uint64_t result = vtGetHEVCDecoderCapabilitiesForFormatDescription(desc, v12, (unsigned char *)&v15 + 1, (char *)&v15);
          }
          else {
            uint64_t result = VTGetHEVCCapabilitesForFormatDescription(desc, a2, (unint64_t)&v15 + 1, (unint64_t)&v15);
          }
          goto LABEL_28;
        case 1685481521:
          if (v10)
          {
            CFStringRef v14 = vtCreateStringFromCodecType(0x68766331u);
            CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(v10, v14);
            if (v14) {
              CFRelease(v14);
            }
          }
          goto LABEL_25;
      }
    }
LABEL_33:
    uint64_t result = FigSignalErrorAt();
    goto LABEL_28;
  }

  return FigSignalErrorAt();
}

BOOL VTDecoderCapabilitiesDictionaryAllowsHDR(const __CFDictionary *a1)
{
  if (a1) {
    CFArrayRef Value = CFDictionaryGetValue(a1, @"VTIsHDRAllowedOnDevice");
  }
  else {
    CFArrayRef Value = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  return Value == (const void *)*MEMORY[0x1E4F1CFD0];
}

BOOL VTIsSecTaskEntitledForSpecifyingVP9Decode(__SecTask *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeRef v1 = SecTaskCopyValueForEntitlement(a1, @"com.apple.coremedia.allow-specifying-alternate-video-decoder-selection", 0);
  BOOL v2 = v1 == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

uint64_t VTIsSecTaskEntitledForVP9Decode(SecTaskRef task)
{
  uint64_t v1 = (uint64_t)task;
  if (task)
  {
    CFTypeRef v2 = SecTaskCopyValueForEntitlement(task, @"com.apple.developer.coremedia.allow-alternate-video-decoder-selection", 0);
    if (!v2) {
      CFTypeRef v2 = SecTaskCopyValueForEntitlement((SecTaskRef)v1, @"com.apple.coremedia.allow-alternate-video-decoder-selection", 0);
    }
    if (v2 != (CFTypeRef)*MEMORY[0x1E4F1CFD0] && !FigIsSecTaskGPUExtensionOfBrowserEngine())
    {
      uint64_t v1 = 0;
      if (!v2) {
        return v1;
      }
      goto LABEL_7;
    }
    uint64_t v1 = 1;
    if (v2) {
LABEL_7:
    }
      CFRelease(v2);
  }
  return v1;
}

uint64_t SRSEnhancementFilter_CreateInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 4294954394;
  }
  VTTemporalFilterPluginGetClassID();
  uint64_t v3 = CMDerivedObjectCreate();
  if (!v3) {
    return 4294954392;
  }
  return v3;
}

uint64_t SRSEnhancementFilter_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 82) = 1;
  SRSEnhancementFilter_CompleteFrames();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 88);
  if (v1) {
    dispatch_release(v1);
  }
  CFTypeRef v2 = *(NSObject **)(DerivedStorage + 96);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 56);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 56) = 0;
  }
  int v4 = *(const void **)(DerivedStorage + 64);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 64) = 0;
  }
  BOOL v5 = *(const void **)(DerivedStorage + 72);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 72) = 0;
  }
  CFAllocatorRef v6 = *(const void **)(DerivedStorage + 112);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 112) = 0;
  }
  CFStringRef v7 = *(const void **)(DerivedStorage + 144);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 144) = 0;
  }
  CFDictionaryRef v8 = *(const void **)(DerivedStorage + 120);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 120) = 0;
  }
  CFTypeID v9 = *(const void **)(DerivedStorage + 40);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 40) = 0;
  }
  CFDictionaryRef v10 = *(const void **)(DerivedStorage + 48);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 48) = 0;
  }
  *(void *)uint64_t DerivedStorage = 0;
  return 0;
}

__CFString *SRSEnhancementFilter_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<SRSEnhancementFilter %p>", a1);
  return Mutable;
}

uint64_t SRSEnhancementFilter_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 82)) {
    return 4294954393;
  }
  uint64_t v7 = DerivedStorage;
  if (CFEqual(a2, @"FilterSourcePixelBufferAttributes"))
  {
    CFDictionaryRef v8 = *(const void **)(v7 + 56);
    if (v8)
    {
LABEL_4:
      DictionaryRepresentation = (void *)CFRetain(v8);
LABEL_5:
      CFDictionaryRef v10 = DictionaryRepresentation;
LABEL_9:
      uint64_t result = 0;
LABEL_10:
      *a4 = v10;
      return result;
    }
LABEL_8:
    CFDictionaryRef v10 = 0;
    goto LABEL_9;
  }
  if (CFEqual(a2, @"FilterDestinationPixelBufferAttributes"))
  {
    CFDictionaryRef v8 = *(const void **)(v7 + 64);
    if (v8) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  if (CFEqual(a2, @"MaxLookBehind"))
  {
    int v16 = 0;
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_int valuePtr = &v16;
LABEL_15:
    DictionaryRepresentation = CFNumberCreate(v12, kCFNumberIntType, p_valuePtr);
    goto LABEL_5;
  }
  if (CFEqual(a2, @"MaxLookAhead"))
  {
    int valuePtr = 0;
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_int valuePtr = &valuePtr;
    goto LABEL_15;
  }
  if (CFEqual(a2, @"RealTime"))
  {
    uint64_t result = 0;
    if (*(unsigned char *)(v7 + 80)) {
      CFStringRef v14 = (void **)MEMORY[0x1E4F1CFD0];
    }
    else {
      CFStringRef v14 = (void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionaryRef v10 = *v14;
    goto LABEL_10;
  }
  if (CFEqual(a2, @"OutputDimensions"))
  {
    v17.double width = (double)*(int *)(v7 + 16);
    v17.double height = (double)*(int *)(v7 + 20);
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v17);
    goto LABEL_5;
  }
  if (CFEqual(a2, @"FilterParameters"))
  {
    CFDictionaryRef v8 = *(const void **)(v7 + 120);
    if (v8) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  return 4294954396;
}

uint64_t SRSEnhancementFilter_SetProperty(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 82)) {
    return 4294954393;
  }
  uint64_t v6 = DerivedStorage;
  if (CFEqual(a2, @"FilterSourcePixelBufferAttributes")
    || CFEqual(a2, @"FilterDestinationPixelBufferAttributes")
    || CFEqual(a2, @"MaxLookBehind")
    || CFEqual(a2, @"MaxLookAhead"))
  {
    return 4294954395;
  }
  if (CFEqual(a2, @"RealTime"))
  {
    uint64_t result = 0;
    *(unsigned char *)(v6 + 80) = *MEMORY[0x1E4F1CFD0] == (void)a3;
    return result;
  }
  if (!CFEqual(a2, @"FilterParameters"))
  {
    if (!CFEqual(a2, @"OutputDimensions")) {
      return 4294954396;
    }
    v12.int width = 0.0;
    v12.int height = 0.0;
    if (a3)
    {
      uint64_t result = CGSizeMakeWithDictionaryRepresentation(a3, &v12);
      if (!result) {
        return result;
      }
      if (v12.width > 4096.0) {
        return 4294954394;
      }
      if (v12.height > 2160.0) {
        return 4294954394;
      }
      int v8 = *(_DWORD *)(v6 + 8);
      int width = (int)v12.width;
      if (v8 != (int)v12.width && 2 * v8 != width) {
        return 4294954394;
      }
      int v10 = *(_DWORD *)(v6 + 12);
      int height = (int)v12.height;
      if (v10 != (int)v12.height && 2 * v10 != height) {
        return 4294954394;
      }
      if (*(_DWORD *)(v6 + 16) != width || *(_DWORD *)(v6 + 20) != height)
      {
        *(_DWORD *)(v6 + 16) = width;
        *(_DWORD *)(v6 + 20) = height;
        srsFilter_calculateOutputDimensions(*(void *)(v6 + 8), *(void *)(v6 + 16), v6 + 24);
        uint64_t result = *(void *)(v6 + 64);
        if (result)
        {
          CFRelease((CFTypeRef)result);
          uint64_t result = 0;
          *(void *)(v6 + 64) = 0;
        }
        return result;
      }
    }
    return 0;
  }
  if (!a3)
  {
    uint64_t result = 0;
    *(void *)(v6 + 120) = 0;
    return result;
  }
  uint64_t result = (uint64_t)CFRetain(a3);
  *(void *)(v6 + 120) = result;
  if (!result) {
    return result;
  }
  if (!*(void *)(v6 + 144)) {
    return 0;
  }
  if (FigCFEqual())
  {
LABEL_17:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 144), (const void *)*MEMORY[0x1E4F6ED48], (const void *)*MEMORY[0x1E4F6ED58]);
    return 0;
  }
  uint64_t result = FigCFEqual();
  if (result)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 144), (const void *)*MEMORY[0x1E4F6ED10], (const void *)*MEMORY[0x1E4F6ED20]);
    goto LABEL_17;
  }
  return result;
}

uint64_t SRSEnhancementFilter_CompleteFrames()
{
  CFAllocatorRef v0 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 88);
  if (v0) {
    dispatch_group_wait(v0, 0xFFFFFFFFFFFFFFFFLL);
  }
  return 0;
}

uint64_t srsFilter_calculateOutputDimensions(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = HIDWORD(a2);
  *(void *)a3 = result;
  if (result != a2)
  {
    if (__PAIR64__(2 * HIDWORD(result), 2 * (int)result) == a2)
    {
      *(_DWORD *)a3 = a2;
    }
    else
    {
      float v4 = (float)SHIDWORD(a2) / (float)SHIDWORD(result);
      int v5 = (int)(float)(v4 * (float)(int)result);
      float v6 = (float)(int)a2 / (float)(int)result;
      if (v6 <= v4)
      {
        int v5 = a2;
        LODWORD(v3) = (int)(float)(v6 * (float)SHIDWORD(result));
      }
      *(_DWORD *)a3 = (v5 + 1) & 0xFFFFFFFE;
      LODWORD(v3) = (v3 + 1) & 0xFFFFFFFE;
    }
    *(_DWORD *)(a3 + 4) = v3;
  }
  return result;
}

uint64_t SRSEnhancementFilter_StartSession(uint64_t a1, uint64_t *a2, __CFDictionary *a3)
{
  uint64_t DerivedStorage = (__CFDictionary **)CMBaseObjectGetDerivedStorage();
  *uint64_t DerivedStorage = (__CFDictionary *)a2;
  uint64_t v6 = 4294954394;
  if (a2
    && (int)a3 >= 32
    && (int)a3 <= 4096
    && (a3 & 1) == 0
    && (BYTE4(a3) & 1) == 0
    && (HIDWORD(a3) - 2161) >= 0xFFFFF7CF)
  {
    uint64_t v7 = DerivedStorage;
    DerivedStorage[1] = a3;
    DerivedStorage[3] = a3;
    DerivedStorage[2] = a3;
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 4294954392;
    }
    CFMutableDictionaryRef v10 = Mutable;
    CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v11)
    {
      uint64_t v6 = 4294954392;
LABEL_18:
      CFRelease(v10);
      return v6;
    }
    CFMutableDictionaryRef v12 = v11;
    CFDictionaryAddValue(v10, (const void *)*MEMORY[0x1E4F6ED08], v11);
    if (IOSurfaceAcceleratorCreate())
    {
      CFArrayRef v13 = 0;
      uint64_t v6 = 4294954392;
    }
    else
    {
      v7[11] = (__CFDictionary *)dispatch_group_create();
      v7[12] = (__CFDictionary *)FigDispatchQueueCreateWithPriority();
      CFArrayRef v13 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFStringRef v14 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      uint64_t v6 = (uint64_t)v14;
      if (v14)
      {
        addNumberToCFArray(v14, 875704950);
        addNumberToCFArray((__CFArray *)v6, 875704934);
        addNumberToCFArray((__CFArray *)v6, 875836534);
        addNumberToCFArray((__CFArray *)v6, 875836518);
        addNumberToCFArray((__CFArray *)v6, 2037741171);
        addNumberToCFArray((__CFArray *)v6, 2037741158);
        addNumberToCFArray((__CFArray *)v6, 2016686642);
        addNumberToCFArray((__CFArray *)v6, 2019963442);
        addNumberToCFArray((__CFArray *)v6, 2016687156);
        addNumberToCFArray((__CFArray *)v6, 2019963956);
        addNumberToCFArray((__CFArray *)v6, 1983131952);
        addNumberToCFArray((__CFArray *)v6, 1882468914);
        addNumberToCFArray((__CFArray *)v6, 1885745714);
        addNumberToCFArray((__CFArray *)v6, 1882469428);
        addNumberToCFArray((__CFArray *)v6, 1885746228);
        addNumberToCFArray((__CFArray *)v6, 875704438);
        addNumberToCFArray((__CFArray *)v6, 875704422);
        addNumberToCFArray((__CFArray *)v6, 2016686640);
        addNumberToCFArray((__CFArray *)v6, 2019963440);
        addNumberToCFArray((__CFArray *)v6, 1882468912);
        addNumberToCFArray((__CFArray *)v6, 1885745712);
        CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E4F24D70], (const void *)v6);
        CFRelease((CFTypeRef)v6);
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport(v13, 0, v7 + 7);
        if (PixelBufferAttributesWithIOSurfaceSupport)
        {
          uint64_t v6 = PixelBufferAttributesWithIOSurfaceSupport;
        }
        else
        {
          if (v13) {
            CFRelease(v13);
          }
          uint64_t v16 = VTTemporalFilterPluginSessionSetInputPixelBufferAttributes(a2, v7[7]);
          if (!v16) {
            uint64_t v16 = VTPixelTransferSessionCreate(v8, v7 + 6);
          }
          uint64_t v6 = v16;
          CFArrayRef v13 = 0;
        }
      }
    }
    CFRelease(v12);
    CFRelease(v10);
    CFMutableDictionaryRef v10 = v13;
    if (v13) {
      goto LABEL_18;
    }
  }
  return v6;
}

uint64_t SRSEnhancementFilter_ProcessFrame(uint64_t a1, const void *a2, __CVBuffer *a3, long long *a4)
{
  uint64_t v68 = 0;
  CFArrayRef v69 = &v68;
  uint64_t v70 = 0x2000000000;
  uint64_t DerivedStorage = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v64 = 0;
  CFMutableArrayRef v65 = (CVPixelBufferRef *)&v64;
  uint64_t v66 = 0x2000000000;
  uint64_t v67 = 0;
  uint64_t v60 = 0;
  mach_port_name_t v61 = (CVPixelBufferRef *)&v60;
  uint64_t v62 = 0x2000000000;
  uint64_t v63 = 0;
  uint64_t v56 = 0;
  unsigned int v57 = &v56;
  uint64_t v58 = 0x2000000000;
  uint64_t v59 = 0;
  uint64_t v7 = v69[3];
  BOOL v8 = *(_DWORD *)(v7 + 28) != *(_DWORD *)(v7 + 12) || *(_DWORD *)(v7 + 24) != *(_DWORD *)(v7 + 8);
  if (*(void *)v7)
  {
    if (!*(unsigned char *)(v7 + 82))
    {
      dispatch_group_wait(*(dispatch_group_t *)(v7 + 88), 0xFFFFFFFFFFFFFFFFLL);
      signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a3);
      uint64_t v10 = v69[3];
      if (PixelFormatType != *(_DWORD *)(v10 + 104))
      {
        CFMutableDictionaryRef v11 = *(const void **)(v10 + 64);
        if (v11)
        {
          CFRelease(v11);
          *(void *)(v69[3] + 64) = 0;
        }
      }
      CVPixelBufferGetIOSurface(a3);
      uint64_t ProtectionOptions = IOSurfaceGetProtectionOptions();
      uint64_t v13 = v69[3];
      if (ProtectionOptions != *(void *)(v13 + 128))
      {
        CFStringRef v14 = *(const void **)(v13 + 64);
        if (v14)
        {
          CFRelease(v14);
          __int16 v15 = v69;
          *(void *)(v69[3] + 64) = 0;
          uint64_t v13 = v15[3];
        }
      }
      if (*(unsigned __int8 *)(v13 + 136) != *(unsigned __int8 *)(v13 + 33))
      {
        uint64_t v16 = *(const void **)(v13 + 64);
        if (v16)
        {
          CFRelease(v16);
          CGSize v17 = v69;
          *(void *)(v69[3] + 64) = 0;
          uint64_t v13 = v17[3];
        }
      }
      CFArrayRef v18 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
      if (*(void *)(v13 + 64))
      {
LABEL_35:
        *(_DWORD *)(v13 + 104) = PixelFormatType;
        *(void *)(v13 + 128) = ProtectionOptions;
        *(unsigned char *)(v13 + 136) = *(unsigned char *)(v13 + 33);
        OutputPixelBufferPool = (__CVPixelBufferPool *)VTTemporalFilterPluginSessionGetOutputPixelBufferPool(*(uint64_t **)v13);
        if (OutputPixelBufferPool)
        {
          CFAllocatorRef v32 = *v18;
          uint64_t PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(v32, OutputPixelBufferPool, v65 + 3);
          if (v65[3])
          {
            uint64_t v30 = PixelBuffer;
            uint64_t v34 = v69[3];
            if (!*(unsigned char *)(v34 + 32) || (uint64_t v35 = *(__CVPixelBufferPool **)(v34 + 40)) == 0)
            {
LABEL_41:
              if (a3) {
                CFTypeRef v37 = CFRetain(a3);
              }
              else {
                CFTypeRef v37 = 0;
              }
              v57[3] = (uint64_t)v37;
              uint64_t v38 = v69[3];
              uint64_t v39 = *(NSObject **)(v38 + 88);
              uint64_t v40 = *(NSObject **)(v38 + 96);
              block[0] = MEMORY[0x1E4F143A8];
              block[1] = 0x40000000;
              block[2] = __SRSEnhancementFilter_ProcessFrame_block_invoke;
              block[3] = &unk_1E5785280;
              block[4] = &v68;
              void block[5] = &v60;
              void block[6] = &v64;
              void block[7] = &v56;
              BOOL v55 = v8;
              long long v53 = *a4;
              uint64_t v54 = *((void *)a4 + 2);
              block[8] = a2;
              dispatch_group_async(v39, v40, block);
              uint64_t v41 = v69[3];
              if (!*(unsigned char *)(v41 + 81)) {
                dispatch_group_wait(*(dispatch_group_t *)(v41 + 88), 0xFFFFFFFFFFFFFFFFLL);
              }
              goto LABEL_46;
            }
            uint64_t v36 = CVPixelBufferPoolCreatePixelBuffer(v32, v35, v61 + 3);
            if (v61[3])
            {
              uint64_t v30 = v36;
              goto LABEL_41;
            }
          }
        }
        goto LABEL_79;
      }
      uint64_t v19 = CMBaseObjectGetDerivedStorage();
      CFAllocatorRef v20 = *v18;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*v18, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        CFStringRef v22 = Mutable;
        BOOL v50 = v8;
        unsigned int v51 = a4;
        CFMutableArrayRef v23 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        if (v23)
        {
          CFDictionaryRef v24 = v23;
          int v25 = PixelFormatType;
          if (*(unsigned char *)(v19 + 33)) {
            goto LABEL_19;
          }
          CFStringRef v27 = *(const __CFString **)(v19 + 112);
          if (v27)
          {
            CFTypeID v28 = CFGetTypeID(*(CFTypeRef *)(v19 + 112));
            if (v28 == CFStringGetTypeID())
            {
              CFStringGetCString(v27, buffer, 5, 0x600u);
              int v25 = bswap32(*(unsigned int *)buffer);
              goto LABEL_19;
            }
          }
          int v25 = 1882468914;
          if (PixelFormatType > 1885746227)
          {
            if (PixelFormatType <= 2019963439)
            {
              if (PixelFormatType != 1885746228)
              {
                if (PixelFormatType != 1983131952)
                {
                  int v43 = 2016687156;
LABEL_66:
                  if (PixelFormatType != v43) {
                    goto LABEL_19;
                  }
                }
LABEL_67:
                int v25 = 1882469428;
                goto LABEL_19;
              }
            }
            else
            {
              if (PixelFormatType <= 2019963955)
              {
                if (PixelFormatType != 2019963440)
                {
                  int v44 = 2019963442;
                  goto LABEL_72;
                }
                goto LABEL_73;
              }
              if (PixelFormatType != 2019963956)
              {
                int v44 = 2037741158;
LABEL_72:
                if (PixelFormatType != v44) {
                  goto LABEL_19;
                }
                goto LABEL_73;
              }
            }
          }
          else
          {
            if (PixelFormatType > 875836533)
            {
              if (PixelFormatType <= 1885745711)
              {
                if (PixelFormatType != 875836534)
                {
                  int v43 = 1882469428;
                  goto LABEL_66;
                }
                goto LABEL_67;
              }
              if (PixelFormatType != 1885745712)
              {
                int v44 = 1885745714;
                goto LABEL_72;
              }
LABEL_73:
              int v25 = 1885745714;
              goto LABEL_19;
            }
            if (PixelFormatType == 875704422 || PixelFormatType == 875704934) {
              goto LABEL_73;
            }
            if (PixelFormatType != 875836518)
            {
LABEL_19:
              uint64_t v49 = a2;
              addNumberToCFArray(v24, v25);
              CFDictionaryAddValue(v22, (const void *)*MEMORY[0x1E4F24D70], v24);
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              CFAllocatorRef allocator = v20;
              if (ProtectionOptions)
              {
                CFMutableDictionaryRef v26 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (!v26)
                {
                  uint64_t v30 = 4294954392;
LABEL_31:
                  CFArrayRef v18 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
                  CFRelease(v22);
                  CFRelease(v24);
                  if (v26) {
                    CFRelease(v26);
                  }
                  a2 = v49;
                  a4 = v51;
                  BOOL v8 = v50;
                  if (v30) {
                    goto LABEL_80;
                  }
                  uint64_t v13 = v69[3];
                  goto LABEL_35;
                }
                FigCFDictionarySetInt64();
                FigCFDictionarySetValue();
              }
              else
              {
                CFMutableDictionaryRef v26 = 0;
              }
              uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport(v22, 0, (__CFDictionary **)(v19 + 64));
              if (PixelBufferAttributesWithIOSurfaceSupport
                || (uint64_t PixelBufferAttributesWithIOSurfaceSupport = VTTemporalFilterPluginSessionSetOutputPixelBufferAttributes(*(uint64_t **)v19, *(const void **)(v19 + 64)), PixelBufferAttributesWithIOSurfaceSupport))
              {
                uint64_t v30 = PixelBufferAttributesWithIOSurfaceSupport;
              }
              else if (*(unsigned char *)(v19 + 32) && !*(unsigned char *)(v19 + 33))
              {
                *(void *)char buffer = 0;
                FigCFDictionarySetInt32();
                FigCFDictionarySetInt32();
                uint64_t v30 = FigCreatePixelBufferAttributesWithIOSurfaceSupport(v22, 0, (__CFDictionary **)buffer);
                CVPixelBufferPoolCreate(allocator, 0, *(CFDictionaryRef *)buffer, (CVPixelBufferPoolRef *)(v19 + 40));
                if (*(void *)buffer) {
                  CFRelease(*(CFTypeRef *)buffer);
                }
              }
              else
              {
                uint64_t v30 = 0;
              }
              goto LABEL_31;
            }
          }
          int v25 = 1885746228;
          goto LABEL_19;
        }
        CFRelease(v22);
      }
LABEL_79:
      uint64_t v30 = 4294954392;
      goto LABEL_80;
    }
    uint64_t v30 = 4294954393;
  }
  else
  {
    uint64_t v30 = 4294954394;
  }
LABEL_80:
  CVPixelBufferRef v45 = v65[3];
  if (v45) {
    CFRelease(v45);
  }
  CFTypeRef v46 = (const void *)v57[3];
  if (v46) {
    CFRelease(v46);
  }
  CVPixelBufferRef v47 = v61[3];
  if (v47) {
    CFRelease(v47);
  }
  VTTemporalFilterPluginSessionConcludeInputFrame(*(uint64_t **)v69[3], a2);
LABEL_46:
  _Block_object_dispose(&v56, 8);
  _Block_object_dispose(&v60, 8);
  _Block_object_dispose(&v64, 8);
  _Block_object_dispose(&v68, 8);
  return v30;
}

uint64_t SRSEnhancementFilter_CopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  MEMORY[0x199705810](&gSRSFilterCreateSupportedPropertyDictionaryOnce, srsFilter_createSupportedPropertyDictionary);
  if (a2 && gSRSFilterSupportedPropertyDictionary)
  {
    *a2 = CFRetain((CFTypeRef)gSRSFilterSupportedPropertyDictionary);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void addNumberToCFArray(__CFArray *a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v3)
  {
    CFNumberRef v4 = v3;
    CFArrayAppendValue(a1, v3);
    CFRelease(v4);
  }
}

void srsFilter_createSupportedPropertyDictionary()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  gSRSFilterSupportedPropertyDictionardouble y = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (gSRSFilterSupportedPropertyDictionary)
  {
    CFDictionaryRef v1 = CFDictionaryCreate(v0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryAddValue((CFMutableDictionaryRef)gSRSFilterSupportedPropertyDictionary, @"OutputDimensions", v1);
    CFDictionaryAddValue((CFMutableDictionaryRef)gSRSFilterSupportedPropertyDictionary, @"RealTime", v1);
    CFDictionaryAddValue((CFMutableDictionaryRef)gSRSFilterSupportedPropertyDictionary, @"FilterSourcePixelBufferAttributes", v1);
    CFDictionaryAddValue((CFMutableDictionaryRef)gSRSFilterSupportedPropertyDictionary, @"FilterDestinationPixelBufferAttributes", v1);
    CFDictionaryAddValue((CFMutableDictionaryRef)gSRSFilterSupportedPropertyDictionary, @"MaxLookBehind", v1);
    CFDictionaryAddValue((CFMutableDictionaryRef)gSRSFilterSupportedPropertyDictionary, @"MaxLookAhead", v1);
    CFDictionaryAddValue((CFMutableDictionaryRef)gSRSFilterSupportedPropertyDictionary, @"FilterParameters", v1);
    if (v1)
    {
      CFRelease(v1);
    }
  }
}

uint64_t jpeg_setupreadbuffer(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 24) = a2;
  *(_DWORD *)(result + 12) = 32;
  *(void *)(result + 56) = a3;
  *(void *)(result + 64) = a2 + a3;
  return result;
}

uint64_t popbytes(uint64_t result, int a2, _WORD *a3)
{
  if (!a2) {
    return 0;
  }
  CFNumberRef v3 = (unsigned __int8 **)result;
  LODWORD(result) = 0;
  unint64_t v4 = (unint64_t)v3[8];
  int v5 = *v3;
  while ((unint64_t)v5 < v4)
  {
    --a2;
    *CFNumberRef v3 = v5 + 1;
    uint64_t result = *v5++ | (result << 8);
    if (!(_WORD)a2) {
      return result;
    }
  }
  *a3 = -12909;
  return 0xFFFFFFFFLL;
}

uint64_t popbytesCallback(uint64_t result, int a2, _WORD *a3)
{
  if (!a2) {
    return 0;
  }
  CFNumberRef v3 = (unsigned __int8 **)result;
  LODWORD(result) = 0;
  unint64_t v4 = (unint64_t)v3[8];
  int v5 = *v3;
  while ((unint64_t)v5 < v4)
  {
    --a2;
    *CFNumberRef v3 = v5 + 1;
    uint64_t result = *v5++ | (result << 8);
    if (!(_WORD)a2) {
      return result;
    }
  }
  *a3 = -12909;
  return 0xFFFFFFFFLL;
}

uint64_t popbitsa(unsigned __int8 **a1, int a2)
{
  int v2 = *((_DWORD *)a1 + 2);
  int v3 = *((_DWORD *)a1 + 3);
  if (v3 >= 8)
  {
    unint64_t v4 = (unint64_t)a1[8];
    int v5 = *a1;
    while (1)
    {
      v2 <<= 8;
      *((_DWORD *)a1 + 2) = v2;
      if ((unint64_t)v5 >= v4) {
        break;
      }
      uint64_t v6 = v5 + 1;
      *a1 = v5 + 1;
      int v9 = *v5;
      uint64_t v7 = v5 + 2;
      int v8 = v9;
      if (*((_DWORD *)a1 + 5) == v9 && (unint64_t)v7 < v4)
      {
        *a1 = v7;
        if (!*v6) {
          uint64_t v6 = v7;
        }
        *a1 = v6;
      }
      v2 |= v8;
      int v11 = v3 - 8;
      *((_DWORD *)a1 + 2) = v2;
      *((_DWORD *)a1 + 3) = v3 - 8;
      int v5 = v6;
      BOOL v12 = v3 <= 15;
      v3 -= 8;
      if (v12) {
        goto LABEL_15;
      }
    }
  }
  int v11 = v3;
LABEL_15:
  *((_DWORD *)a1 + 3) = v11 + a2;
  return (v2 << v11) >> -(char)a2;
}

uint64_t GetConversionRoutine(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned __int8 *a7, int a8, int a9, char a10)
{
  *a2 = DoNothing;
  if (a8) {
    goto LABEL_2;
  }
  int v12 = *(__int16 *)(a1 + 3274);
  switch(v12)
  {
    case 1:
      a8 = 944206457;
      goto LABEL_2;
    case 4:
      a8 = 2036556651;
      goto LABEL_2;
    case 3:
      a8 = 1497580320;
LABEL_2:
      uint64_t v10 = IDCTFlex;
      switch(a6)
      {
        case 1:
          uint64_t v10 = IDCTFlex;
          int v11 = 1852796517;
          goto LABEL_45;
        case 2:
          if (*a7 != 17) {
            goto LABEL_36;
          }
          int v16 = a7[1];
          goto LABEL_33;
        case 3:
          int v13 = *a7;
          switch(v13)
          {
            case 17:
              if (a7[1] != 17) {
                goto LABEL_36;
              }
              int v16 = a7[2];
              goto LABEL_33;
            case 33:
              if (a7[1] == 17 && a7[2] == 17)
              {
                uint64_t v10 = IDCTFlex;
                int v11 = 875704864;
                goto LABEL_45;
              }
              break;
            case 34:
              if (a7[1] == 17 && a7[2] == 17)
              {
                uint64_t v10 = IDCT;
                int v11 = 875639072;
                goto LABEL_45;
              }
              break;
            default:
              goto LABEL_36;
          }
          goto LABEL_43;
        case 4:
          int v14 = *a7;
          switch(v14)
          {
            case 17:
              if (a7[1] == 17 && a7[2] == 17)
              {
                int v16 = a7[3];
LABEL_33:
                if (v16 == 17) {
                  int v11 = 1852796517;
                }
                else {
                  int v11 = 0;
                }
                goto LABEL_44;
              }
              break;
            case 33:
              if (a7[1] == 17 && a7[2] == 17 && a7[3] == 33)
              {
                uint64_t v10 = IDCTFlex;
                int v15 = 875704864;
                goto LABEL_42;
              }
              goto LABEL_43;
            case 34:
              if (a7[1] == 17 && a7[2] == 17 && a7[3] == 34)
              {
                uint64_t v10 = IDCTFlex;
                int v15 = 875639072;
LABEL_42:
                int v11 = v15 | 0x14;
                goto LABEL_45;
              }
LABEL_43:
              int v11 = 0;
LABEL_44:
              uint64_t v10 = IDCTFlex;
              goto LABEL_45;
          }
LABEL_36:
          uint64_t v10 = IDCTFlex;
LABEL_37:
          int v11 = 0;
LABEL_45:
          if (a8 == 1497580320)
          {
            if (v11 != 875704864)
            {
              if (v11 != 875639072)
              {
                __int16 v17 = -12910;
                if (a9 <= 875704437)
                {
                  if (a9 == 32)
                  {
                    CFMutableArrayRef v23 = yuvto32ARGBOne;
                    int v19 = 1;
                    __int16 v20 = 4;
                  }
                  else
                  {
                    if (a9 != 846624121) {
                      return v17;
                    }
                    __int16 v20 = 2;
                    CFMutableArrayRef v23 = yuvto2vuyOne;
                    int v19 = 2;
                  }
                }
                else
                {
                  switch(a9)
                  {
                    case 875704438:
                      __int16 v20 = 0;
                      int v19 = 2;
                      CFStringRef v21 = yuvto420vOne;
                      break;
                    case 2033463856:
                      __int16 v20 = 0;
                      int v19 = 2;
                      CFStringRef v21 = yuvtoY420One;
                      break;
                    case 1111970369:
                      int v19 = 1;
                      __int16 v20 = 4;
                      CFStringRef v21 = yuvto32BGRAOne;
                      break;
                    default:
                      return v17;
                  }
                  CFMutableArrayRef v23 = v21;
                }
                int v27 = *(unsigned __int16 *)(a1 + 4096);
                if (v27 == 17)
                {
                  *a2 = v23;
                }
                else
                {
                  *a2 = UpsampleThenContinue;
                  *(_WORD *)(a3 + 56) = a6;
                  *(_WORD *)(a3 + 58) = v27;
                  if (a6 >= 1)
                  {
                    int v28 = 0;
                    do
                    {
                      *(unsigned char *)(a3 + (__int16)v28 + 62) = a7[(__int16)v28];
                      ++v28;
                    }
                    while (a6 > (__int16)v28);
                  }
                  *(_WORD *)(a3 + 60) = v20;
                  *(void *)(a3 + 48) = v23;
                }
                goto LABEL_107;
              }
              __int16 v17 = -12910;
              if (a9 <= 875704437)
              {
                if (a9 != 32)
                {
                  if (a9 != 846624121) {
                    return v17;
                  }
                  CFArrayRef v18 = yuv411to2vuy;
                  goto LABEL_88;
                }
                BOOL v24 = a10 == 0;
                int v25 = yuvto32ARGBTab;
                CFMutableDictionaryRef v26 = yuvto32ARGB;
              }
              else
              {
                if (a9 == 875704438)
                {
                  CFArrayRef v18 = yuv411to420v;
                  goto LABEL_88;
                }
                if (a9 != 1111970369)
                {
                  if (a9 != 2033463856) {
                    return v17;
                  }
                  CFArrayRef v18 = yuv411toY420;
                  goto LABEL_88;
                }
                BOOL v24 = a10 == 0;
                int v25 = yuvto32BGRATab;
                CFMutableDictionaryRef v26 = yuvto32BGRA;
              }
              if (v24) {
                int v25 = (__int16 *(*)(uint64_t, uint64_t *, uint64_t *))v26;
              }
              *a2 = v25;
              goto LABEL_99;
            }
            __int16 v17 = -12910;
            if (a9 <= 875704437)
            {
              if (a9 != 32)
              {
                if (a9 != 846624121) {
                  return v17;
                }
                CFArrayRef v18 = yuv422to2vuy;
                goto LABEL_88;
              }
              CFStringRef v22 = yuvto32ARGB2111;
            }
            else
            {
              if (a9 == 875704438)
              {
                CFArrayRef v18 = yuv422to420v;
                goto LABEL_88;
              }
              if (a9 != 1111970369)
              {
                if (a9 != 2033463856) {
                  return v17;
                }
                CFArrayRef v18 = yuv422toY420;
                goto LABEL_88;
              }
              CFStringRef v22 = yuvto32BGRA2111;
            }
          }
          else
          {
            if (a8 != 944206457) {
              return -12910;
            }
            __int16 v17 = -12910;
            if (a9 > 875704437)
            {
              if (a9 != 875704438)
              {
                if (a9 != 1111970369)
                {
                  if (a9 != 2033463856) {
                    return v17;
                  }
                  CFArrayRef v18 = ytoY420One;
                  goto LABEL_88;
                }
                CFStringRef v22 = yto32BGRAOne;
                goto LABEL_98;
              }
              CFArrayRef v18 = yto420vOne;
LABEL_88:
              *a2 = v18;
              int v19 = 2;
              goto LABEL_107;
            }
            if (a9 != 32)
            {
              if (a9 != 846624121) {
                return v17;
              }
              CFArrayRef v18 = yto2vuyOne;
              goto LABEL_88;
            }
            CFStringRef v22 = yto32ARGBOne;
          }
LABEL_98:
          *a2 = v22;
LABEL_99:
          int v19 = 1;
LABEL_107:
          *(void *)(a1 + 4416) = v10;
          UpdatePinAndGammaTables(a1, v19);
          return 0;
        default:
          goto LABEL_37;
      }
  }
  return -12910;
}

uint64_t getyuvMB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v6 = *(unsigned __int16 *)(a2 + 48);
  *(void *)(a1 + 3200) = &unk_193E7DD88;
  int v7 = *(unsigned __int8 *)(a1 + 4128);
  if (*(unsigned char *)(a1 + 4128)) {
    int v8 = (unsigned int (*)(uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t))ExtractBufferedBlocks;
  }
  else {
    int v8 = (unsigned int (*)(uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t))DecodeBlocks;
  }
  if (a6)
  {
    __int16 v9 = a6;
    uint64_t v13 = a1 + 96;
    uint64_t v14 = a1 + 1632;
    uint64_t v15 = a1 + 3200;
    int v16 = *(void (**)(uint64_t, uint64_t, unsigned char *))(a1 + 4416);
    uint64_t v33 = 0;
    memset(v32, 0, sizeof(v32));
    if (v7) {
      int v17 = 0;
    }
    else {
      int v17 = v6;
    }
    unsigned int v29 = (char *)(a1 + 3400);
    while (1)
    {
      if (v17)
      {
        int v18 = *(_DWORD *)(a2 + 52);
        BOOL v19 = __OFSUB__(v18--, 1);
        *(_DWORD *)(a2 + 52) = v18;
        if ((v18 < 0) ^ v19 | (v18 == 0))
        {
          int v20 = -*(unsigned __int16 *)(a2 + 12) & 7;
          if (v20) {
            popbitsa((unsigned __int8 **)a2, v20);
          }
          while ((unsigned __int16)popbitsa((unsigned __int8 **)a2, 8) == 255)
            ;
          reset_DC_pred(a1);
          *(_DWORD *)(a2 + 52) = v17;
        }
      }
      if (v8(a1, a2, v13, v31, a3)) {
        break;
      }
      *(void *)&v32[0] = v14;
      if (*(__int16 *)(a1 + 3274) >= 2)
      {
        uint64_t v21 = *(unsigned __int16 *)(a1 + 3274) - 1;
        CFStringRef v22 = v29;
        CFMutableArrayRef v23 = (uint64_t *)v32 + 1;
        uint64_t v24 = v14;
        do
        {
          uint64_t v25 = *v22++;
          v24 += v25 << 7;
          *v23++ = v24;
          --v21;
        }
        while (v21);
      }
      --v9;
      v16(v13, v14, v31);
      (*(void (**)(uint64_t, _OWORD *, uint64_t))(a1 + 3192))(a4, v32, v15);
      for (uint64_t i = 0; i != 240; i += 80)
        *(void *)(a4 + i + 16) += *(void *)(a4 + i + 48);
      if (!v9) {
        return 0;
      }
    }
    return -1;
  }
  else
  {
    return 0;
  }
}

_WORD *FilterBlock(int a1, _WORD *a2, uint64_t *a3, int a4, int a5, int a6, int a7)
{
  uint64_t result = 0;
  if (a1 > 8480)
  {
    if (a1 > 8721)
    {
      if (a1 != 8722)
      {
        if (a1 != 8737)
        {
          if (a1 != 8738) {
            return result;
          }
          goto LABEL_39;
        }
        unsigned int v33 = 0;
        uint64_t v34 = *a3;
        uint64_t v35 = a2;
        uint64_t v36 = *a3;
        do
        {
          uint64_t v37 = 0;
          unsigned int v38 = 0;
          do
          {
            uint64_t v39 = &v35[v37];
            __int16 v40 = *(_WORD *)(v36 + v37 * 2);
            *uint64_t v39 = v40;
            v39[8] = v40;
            ++v37;
            BOOL v17 = v38++ >= 7;
          }
          while (!v17);
          v36 += 16;
          uint64_t v35 = (_WORD *)((char *)v35 + v37 * 2 + 16);
          BOOL v17 = v33++ >= 3;
        }
        while (!v17);
        if (a4 != a6)
        {
          uint64_t v18 = v34 + 128;
          goto LABEL_51;
        }
        if (a5 != a7)
        {
          uint64_t v18 = v34 - 64;
          goto LABEL_51;
        }
        return a2;
      }
LABEL_30:
      unsigned int v26 = 0;
      uint64_t v20 = *a3;
      int v27 = a2;
      int v28 = (__int16 *)*a3;
      do
      {
        unsigned int v29 = 0;
        uint64_t v30 = v28;
        do
        {
          __int16 v31 = *v30++;
          *int v27 = v31;
          CFAllocatorRef v32 = v27 + 2;
          v27[1] = v31;
          v27 += 2;
          BOOL v17 = v29++ >= 3;
        }
        while (!v17);
        v28 += 8;
        int v27 = v32;
        BOOL v17 = v26++ >= 7;
      }
      while (!v17);
      if (a4 == a6)
      {
        if (a5 == a7) {
          return a2;
        }
        uint64_t v18 = v20 + 120;
LABEL_51:
        *a3 = v18;
        return a2;
      }
      goto LABEL_40;
    }
    if (a1 != 8481)
    {
      if (a1 == 8721)
      {
        unsigned int v19 = 0;
        uint64_t v20 = *a3;
        uint64_t v21 = a2;
        CFStringRef v22 = (__int16 *)*a3;
        do
        {
          unsigned int v23 = 0;
          v21 += 8;
          uint64_t v24 = v22;
          do
          {
            __int16 v25 = *v24++;
            *uint64_t v21 = v25;
            *(v21 - 8) = v25;
            v21[1] = v25;
            *(v21 - 7) = v25;
            v21 += 2;
            BOOL v17 = v23++ >= 3;
          }
          while (!v17);
          v22 += 8;
          BOOL v17 = v19++ >= 3;
        }
        while (!v17);
        if (a4 == a6 && a5 != a7)
        {
          uint64_t v18 = v20 + 56;
          goto LABEL_51;
        }
LABEL_40:
        uint64_t v18 = v20 + 8;
        goto LABEL_51;
      }
      return result;
    }
LABEL_39:
    a2 = (_WORD *)*a3;
    uint64_t v18 = *a3 + 128;
    goto LABEL_51;
  }
  if (a1 <= 4625)
  {
    if (a1 != 4369)
    {
      if (a1 == 4625)
      {
        unsigned int v9 = 0;
        uint64_t v10 = *a3;
        int v11 = a2;
        uint64_t v12 = *a3;
        do
        {
          uint64_t v13 = 0;
          unsigned int v14 = 0;
          do
          {
            uint64_t v15 = &v11[v13];
            __int16 v16 = *(_WORD *)(v12 + v13 * 2);
            *uint64_t v15 = v16;
            v15[8] = v16;
            ++v13;
            BOOL v17 = v14++ >= 7;
          }
          while (!v17);
          v12 += 16;
          int v11 = (_WORD *)((char *)v11 + v13 * 2 + 16);
          BOOL v17 = v9++ >= 3;
        }
        while (!v17);
        uint64_t v18 = v10 + 64;
        goto LABEL_51;
      }
      return result;
    }
    goto LABEL_39;
  }
  if (a1 == 4626) {
    goto LABEL_39;
  }
  if (a1 == 8465) {
    goto LABEL_30;
  }
  return result;
}

uint64_t VTParavirtualizationCreateSerializedAtomDataBlockBufferForSampleBuffer(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, CFTypeRef *a4, CMBlockBufferRef *a5)
{
  if (a3)
  {
    if (a4) {
      CFTypeRef v9 = *a4;
    }
    else {
      CFTypeRef v9 = 0;
    }
    uint64_t v11 = MEMORY[0x199705810](&sVTParavirtualizationInitIndexedKeysOnce, vtParavirtualizationInitializeIndexedKeys);
    if (v11) {
      return v11;
    }
    uint64_t v47 = 0;
    memset(v46, 0, sizeof(v46));
    CMBlockBufferRef blockBufferOut = 0;
    CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(a3);
    CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(a3);
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t appended = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, &blockBufferOut);
    if (appended) {
      goto LABEL_101;
    }
    uint64_t appended = FigAtomWriterInitWithBlockBuffer();
    if (appended) {
      goto LABEL_101;
    }
    uint64_t appended = FigAtomWriterBeginAtom();
    if (appended) {
      goto LABEL_101;
    }
    memset(&v48, 0, 24);
    CMSampleBufferGetOutputPresentationTimeStamp(&v48.duration, a3);
    if (v48.duration.flags)
    {
      uint64_t appended = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
      if (appended) {
        goto LABEL_101;
      }
    }
    timingArrayEntriesNeededOut[0] = 0;
    memset(&v48, 0, sizeof(v48));
    SampleTimingInfoArradouble y = CMSampleBufferGetSampleTimingInfoArray(a3, 0, 0, timingArrayEntriesNeededOut);
    if (SampleTimingInfoArray == -12736)
    {
LABEL_27:
      if (!DataBuffer)
      {
        v48.duration.CFDictionaryRef value = 0;
        uint64_t appended = vtParavirtualizationAtomWriterAppendNumSamples(a3);
        if (!appended)
        {
          unsigned int v23 = &v48;
LABEL_41:
          uint64_t appended = vtParavirtualizationAtomWriterAppendSampleSizeArray(a3, (uint64_t)v46, &v23->duration.value);
          if (!appended)
          {
            if (v9 && FigCFEqual()
              || (uint64_t appended = vtParavirtualizationAtomWriterAppendCMFormatDescription(FormatDescription),
                  !appended))
            {
              if (FormatDescription) {
                CFTypeRef v25 = CFRetain(FormatDescription);
              }
              else {
                CFTypeRef v25 = 0;
              }
              uint64_t Decryptor = FigSampleBufferGetDecryptor();
              if (Decryptor)
              {
                uint64_t v27 = Decryptor;
                memset(&v48, 0, 56);
                uint64_t v28 = FigAtomWriterInitWithParent();
                if (v28) {
                  goto LABEL_105;
                }
                uint64_t v28 = FigAtomWriterBeginAtom();
                if (v28) {
                  goto LABEL_105;
                }
                timingArrayEntriesNeededOut[0] = 0;
                uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v30 = v29 ? v29 : 0;
                __int16 v31 = *(void (**)(uint64_t, CMItemCount *))(v30 + 8);
                if (v31)
                {
                  v31(v27, timingArrayEntriesNeededOut);
                  CMItemCount v32 = timingArrayEntriesNeededOut[0];
                }
                else
                {
                  CMItemCount v32 = 0;
                }
                CMItemCount v51 = v32;
                uint64_t v28 = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
                if (v28) {
                  goto LABEL_105;
                }
                int v50 = 0;
                uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v34 = v33 ? v33 : 0;
                uint64_t v35 = *(void (**)(uint64_t, int *))(v34 + 16);
                if (v35)
                {
                  v35(v27, &v50);
                  int v36 = v50;
                }
                else
                {
                  int v36 = 0;
                }
                int v49 = v36;
                uint64_t v28 = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
                if (v28 || (uint64_t v28 = FigAtomWriterEndAtom(), v28))
                {
LABEL_105:
                  uint64_t v17 = v28;
                  goto LABEL_88;
                }
              }
              CFDictionaryRef v37 = CMCopyDictionaryOfAttachments(v14, a3, 1u);
              if (v37
                && ((memset(&v48, 0, 56), uint64_t v38 = FigAtomWriterInitWithParent(), v38)
                 || (uint64_t v38 = FigAtomWriterBeginAtom(), v38)
                 || (uint64_t v38 = vtParavirtualizationAtomWriterAppendCFDictionary(v37, 0), v38)
                 || (uint64_t v38 = FigAtomWriterEndAtom(), v38)))
              {
                uint64_t v17 = v38;
                CFDictionaryRef v39 = 0;
              }
              else
              {
                CFDictionaryRef v39 = CMCopyDictionaryOfAttachments(v14, a3, 0);
                if (v39)
                {
                  memset(&v48, 0, 56);
                  uint64_t v40 = FigAtomWriterInitWithParent();
                  if (v40) {
                    goto LABEL_103;
                  }
                  uint64_t v40 = FigAtomWriterBeginAtom();
                  if (v40) {
                    goto LABEL_103;
                  }
                  uint64_t v40 = vtParavirtualizationAtomWriterAppendCFDictionary(v39, 0);
                  if (v40) {
                    goto LABEL_103;
                  }
                  uint64_t v40 = FigAtomWriterEndAtom();
                  if (v40) {
                    goto LABEL_103;
                  }
                }
                CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a3, 0);
                if (SampleAttachmentsArray
                  && ((CFArrayRef v42 = SampleAttachmentsArray,
                       memset(&v48, 0, 56),
                       uint64_t v40 = FigAtomWriterInitWithParent(),
                       v40)
                   || (uint64_t v40 = FigAtomWriterBeginAtom(), v40)
                   || (uint64_t v40 = (uint64_t)vtParavirtualizationAtomWriterAppendCFArray(v42), v40)
                   || (uint64_t v40 = FigAtomWriterEndAtom(), v40)))
                {
LABEL_103:
                  uint64_t v17 = v40;
                  if (!v37)
                  {
LABEL_86:
                    if (v39) {
                      CFRelease(v39);
                    }
                    goto LABEL_88;
                  }
                }
                else
                {
                  uint64_t v43 = FigAtomWriterEndAtom();
                  uint64_t v17 = v43;
                  if (a5 && !v43)
                  {
                    *a5 = blockBufferOut;
                    CMBlockBufferRef blockBufferOut = 0;
                  }
                  if (!v37) {
                    goto LABEL_86;
                  }
                }
              }
              CFRelease(v37);
              goto LABEL_86;
            }
          }
        }
LABEL_101:
        uint64_t v17 = appended;
        goto LABEL_102;
      }
      CMItemCount v51 = 0;
      v48.duration.CFDictionaryRef value = 0;
      Dataint Length = CMBlockBufferGetDataLength(DataBuffer);
      timingArrayEntriesNeededOut[0] = 0;
      if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, DataLength))
      {
        CFDictionaryRef value = DataBuffer;
      }
      else
      {
        uint64_t Contiguous = CMBlockBufferCreateContiguous(v14, DataBuffer, v14, 0, 0, DataLength, 1u, (CMBlockBufferRef *)&v48);
        if (Contiguous) {
          goto LABEL_36;
        }
        CFDictionaryRef value = (OpaqueCMBlockBuffer *)v48.duration.value;
      }
      uint64_t Contiguous = CMBlockBufferGetDataPointer(value, 0, 0, 0, (char **)timingArrayEntriesNeededOut);
      if (!Contiguous) {
        uint64_t Contiguous = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
      }
LABEL_36:
      uint64_t v17 = Contiguous;
      if (v48.duration.value) {
        CFRelease((CFTypeRef)v48.duration.value);
      }
      if (v17) {
        goto LABEL_102;
      }
      uint64_t appended = vtParavirtualizationAtomWriterAppendNumSamples(a3);
      if (!appended)
      {
        unsigned int v23 = (CMSampleTimingInfo *)&v51;
        goto LABEL_41;
      }
      goto LABEL_101;
    }
    uint64_t v17 = SampleTimingInfoArray;
    if (SampleTimingInfoArray)
    {
      unsigned int v19 = 0;
      goto LABEL_109;
    }
    if (timingArrayEntriesNeededOut[0] == 1)
    {
      uint64_t v18 = CMSampleBufferGetSampleTimingInfoArray(a3, 1, &v48, timingArrayEntriesNeededOut);
      unsigned int v19 = 0;
      if (v18)
      {
LABEL_18:
        uint64_t v17 = v18;
LABEL_109:
        free(v19);
        goto LABEL_102;
      }
    }
    else if (timingArrayEntriesNeededOut[0] < 2)
    {
      unsigned int v19 = 0;
    }
    else
    {
      if (timingArrayEntriesNeededOut[0] > 0x38E38E38E38E38EuLL
        || (uint64_t v20 = (CMSampleTimingInfo *)malloc_type_malloc(72 * timingArrayEntriesNeededOut[0], 0x5CC9CBA6uLL)) == 0)
      {
        uint64_t v17 = FigSignalErrorAt();
        unsigned int v19 = 0;
        goto LABEL_26;
      }
      unsigned int v19 = v20;
      uint64_t v18 = CMSampleBufferGetSampleTimingInfoArray(a3, timingArrayEntriesNeededOut[0], v20, timingArrayEntriesNeededOut);
      if (v18) {
        goto LABEL_18;
      }
    }
    uint64_t v17 = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
LABEL_26:
    free(v19);
    if (v17)
    {
LABEL_102:
      CFTypeRef v25 = 0;
LABEL_88:
      if (blockBufferOut) {
        CFRelease(blockBufferOut);
      }
      if (!a4 || (!v17 ? (BOOL v44 = v25 == 0) : (BOOL v44 = 1), v44))
      {
        if (v25) {
          CFRelease(v25);
        }
      }
      else
      {
        if (*a4) {
          CFRelease(*a4);
        }
        uint64_t v17 = 0;
        *a4 = v25;
      }
      return v17;
    }
    goto LABEL_27;
  }
  return FigSignalErrorAt();
}

CFArrayRef vtParavirtualizationInitializeIndexedKeys()
{
  uint64_t v173 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (void *)*MEMORY[0x1E4F1F208];
  values[0] = *(void **)MEMORY[0x1E4F1F200];
  values[1] = v0;
  CFDictionaryRef v1 = (void *)*MEMORY[0x1E4F1F1F8];
  values[2] = *(void **)MEMORY[0x1E4F1F1F0];
  values[3] = v1;
  int v2 = (void *)*MEMORY[0x1E4F1F1C0];
  values[4] = *(void **)MEMORY[0x1E4F1F1A8];
  values[5] = v2;
  int v3 = (void *)*MEMORY[0x1E4F1F1B8];
  values[6] = *(void **)MEMORY[0x1E4F1F1B0];
  values[7] = v3;
  unint64_t v4 = (void *)*MEMORY[0x1E4F1F198];
  values[8] = *(void **)MEMORY[0x1E4F1F190];
  values[9] = v4;
  uint64_t v5 = (void *)*MEMORY[0x1E4F1F238];
  values[10] = *(void **)MEMORY[0x1E4F1F2B8];
  values[11] = v5;
  int v6 = (void *)*MEMORY[0x1E4F1F2C0];
  values[12] = *(void **)MEMORY[0x1E4F1F2A8];
  values[13] = v6;
  int v7 = (void *)*MEMORY[0x1E4F1F300];
  values[14] = *(void **)MEMORY[0x1E4F1F308];
  values[15] = v7;
  int v8 = (void *)*MEMORY[0x1E4F1F2C8];
  values[16] = *(void **)MEMORY[0x1E4F1F2E8];
  values[17] = v8;
  CFTypeRef v9 = (void *)*MEMORY[0x1E4F1F258];
  values[18] = *(void **)MEMORY[0x1E4F1F278];
  values[19] = v9;
  uint64_t v10 = (void *)*MEMORY[0x1E4F1F228];
  values[20] = *(void **)MEMORY[0x1E4F1F2A0];
  values[21] = v10;
  uint64_t v11 = (void *)*MEMORY[0x1E4F1F2D8];
  values[22] = *(void **)MEMORY[0x1E4F1F270];
  values[23] = v11;
  uint64_t v12 = (void *)*MEMORY[0x1E4F1F290];
  values[24] = *(void **)MEMORY[0x1E4F1F2D0];
  values[25] = v12;
  uint64_t v13 = (void *)*MEMORY[0x1E4F21A10];
  values[26] = *(void **)MEMORY[0x1E4F21A58];
  values[27] = v13;
  CFAllocatorRef v14 = (void *)*MEMORY[0x1E4F21A70];
  values[28] = *(void **)MEMORY[0x1E4F21A78];
  values[29] = v14;
  uint64_t v15 = (void *)*MEMORY[0x1E4F1F2F8];
  values[30] = *(void **)MEMORY[0x1E4F21A20];
  values[31] = v15;
  __int16 v16 = (void *)*MEMORY[0x1E4F1F310];
  values[32] = *(void **)MEMORY[0x1E4F1F330];
  values[33] = v16;
  uint64_t v17 = (void *)*MEMORY[0x1E4F1F260];
  values[34] = *(void **)MEMORY[0x1E4F1F250];
  values[35] = v17;
  values[36] = *(void **)MEMORY[0x1E4F1F220];
  values[37] = @"ReferenceWasRefreshed";
  values[38] = @"EncoderRetryCount";
  values[39] = @"RequireAcknowledgementToken";
  uint64_t v18 = (void *)*MEMORY[0x1E4F1FA38];
  values[40] = *(void **)MEMORY[0x1E4F1FA40];
  values[41] = v18;
  unsigned int v19 = (void *)*MEMORY[0x1E4F1F9E8];
  values[42] = *(void **)MEMORY[0x1E4F1F9E0];
  values[43] = v19;
  values[44] = @"X";
  values[45] = @"Y";
  values[46] = @"Width";
  values[47] = @"Height";
  uint64_t v20 = (void *)*MEMORY[0x1E4F1EE20];
  values[48] = *(void **)MEMORY[0x1E4F1EE08];
  values[49] = v20;
  uint64_t v21 = (void *)*MEMORY[0x1E4F1EE50];
  values[50] = *(void **)MEMORY[0x1E4F1EE58];
  values[51] = v21;
  CFStringRef v22 = (void *)*MEMORY[0x1E4F1ED90];
  values[52] = *(void **)MEMORY[0x1E4F1EDA8];
  values[53] = v22;
  unsigned int v23 = (void *)*MEMORY[0x1E4F24A88];
  values[54] = *(void **)MEMORY[0x1E4F24A78];
  values[55] = v23;
  uint64_t v24 = (void *)*MEMORY[0x1E4F24A70];
  values[56] = *(void **)MEMORY[0x1E4F24A68];
  values[57] = v24;
  CFTypeRef v25 = (void *)*MEMORY[0x1E4F1EEA8];
  values[58] = *(void **)MEMORY[0x1E4F24A80];
  values[59] = v25;
  unsigned int v26 = (void *)*MEMORY[0x1E4F1EEC8];
  values[60] = *(void **)MEMORY[0x1E4F1EEB8];
  values[61] = v26;
  uint64_t v27 = (void *)*MEMORY[0x1E4F24B00];
  values[62] = *(void **)MEMORY[0x1E4F24AF8];
  values[63] = v27;
  values[64] = *(void **)MEMORY[0x1E4F24B20];
  values[65] = *(void **)MEMORY[0x1E4F24B18];
  values[66] = *(void **)MEMORY[0x1E4F24B08];
  values[67] = *(void **)MEMORY[0x1E4F24B10];
  values[68] = *(void **)MEMORY[0x1E4F24B98];
  values[69] = *(void **)MEMORY[0x1E4F24B90];
  values[70] = *(void **)MEMORY[0x1E4F24BA0];
  uint64_t v32 = *MEMORY[0x1E4F24A90];
  uint64_t v33 = *MEMORY[0x1E4F24AB0];
  uint64_t v34 = *MEMORY[0x1E4F24AA0];
  uint64_t v35 = *MEMORY[0x1E4F24AC8];
  uint64_t v36 = *MEMORY[0x1E4F24BC8];
  uint64_t v37 = *MEMORY[0x1E4F24BE0];
  uint64_t v38 = *MEMORY[0x1E4F24BF0];
  uint64_t v39 = *MEMORY[0x1E4F24C08];
  uint64_t v40 = *MEMORY[0x1E4F24B28];
  uint64_t v41 = *MEMORY[0x1E4F24C18];
  uint64_t v42 = *MEMORY[0x1E4F24C48];
  uint64_t v43 = *MEMORY[0x1E4F24C40];
  uint64_t v44 = *MEMORY[0x1E4F24C60];
  uint64_t v45 = *MEMORY[0x1E4F1EDB0];
  uint64_t v46 = *MEMORY[0x1E4F1EDF0];
  uint64_t v47 = *MEMORY[0x1E4F1ED48];
  uint64_t v48 = *MEMORY[0x1E4F24A10];
  uint64_t v49 = *MEMORY[0x1E4F24A08];
  uint64_t v50 = *MEMORY[0x1E4F24A38];
  uint64_t v51 = *MEMORY[0x1E4F24A28];
  uint64_t v52 = *MEMORY[0x1E4F24A48];
  uint64_t v53 = *MEMORY[0x1E4F24A40];
  uint64_t v54 = *MEMORY[0x1E4F24A20];
  uint64_t v55 = *MEMORY[0x1E4F24A18];
  uint64_t v56 = *MEMORY[0x1E4F24A30];
  uint64_t v57 = *MEMORY[0x1E4F1EE38];
  uint64_t v58 = *MEMORY[0x1E4F1EE28];
  uint64_t v59 = *MEMORY[0x1E4F1EE60];
  uint64_t v60 = *MEMORY[0x1E4F1EE18];
  uint64_t v61 = *MEMORY[0x1E4F1EE48];
  uint64_t v62 = *MEMORY[0x1E4F215F8];
  uint64_t v63 = *MEMORY[0x1E4F21600];
  uint64_t v64 = *MEMORY[0x1E4F215F0];
  uint64_t v65 = *MEMORY[0x1E4F21608];
  uint64_t v66 = @"avcC";
  uint64_t v67 = @"d263";
  uint64_t v68 = @"uuid";
  CFArrayRef v69 = @"UUID";
  uint64_t v70 = @"sinf";
  CFArrayRef v71 = @"pinf";
  uint64_t v72 = *MEMORY[0x1E4F1F1A0];
  CFDictionaryRef v73 = @"hvcC";
  uint64_t v74 = *MEMORY[0x1E4F1ED18];
  uint64_t v75 = *MEMORY[0x1E4F1F0D8];
  uint64_t v76 = *MEMORY[0x1E4F1F0F0];
  uint64_t v77 = *MEMORY[0x1E4F1F0D0];
  uint64_t v78 = *MEMORY[0x1E4F1F0C8];
  uint64_t v79 = *MEMORY[0x1E4F1F0C0];
  uint64_t v80 = *MEMORY[0x1E4F1F0B8];
  uint64_t v81 = *MEMORY[0x1E4F215D8];
  uint64_t v82 = *MEMORY[0x1E4F215D0];
  uint64_t v83 = *MEMORY[0x1E4F215E8];
  uint64_t v84 = *MEMORY[0x1E4F1F0E8];
  uint64_t v85 = *MEMORY[0x1E4F1F120];
  uint64_t v86 = *MEMORY[0x1E4F1F0E0];
  uint64_t v87 = *MEMORY[0x1E4F1F470];
  uint64_t v88 = *MEMORY[0x1E4F1F450];
  uint64_t v89 = *MEMORY[0x1E4F1F448];
  uint64_t v90 = *MEMORY[0x1E4F1F440];
  uint64_t v91 = *MEMORY[0x1E4F1F438];
  uint64_t v92 = *MEMORY[0x1E4F1F430];
  uint64_t v93 = *MEMORY[0x1E4F1F468];
  uint64_t v94 = *MEMORY[0x1E4F1F4B8];
  uint64_t v95 = *MEMORY[0x1E4F1F4A8];
  uint64_t v96 = *MEMORY[0x1E4F1F4A0];
  uint64_t v97 = *MEMORY[0x1E4F1F4B0];
  uint64_t v98 = *MEMORY[0x1E4F1F460];
  uint64_t v99 = *MEMORY[0x1E4F1F500];
  uint64_t v100 = *MEMORY[0x1E4F1F4D8];
  uint64_t v101 = *MEMORY[0x1E4F1F4E0];
  uint64_t v102 = *MEMORY[0x1E4F1F4F0];
  uint64_t v103 = *MEMORY[0x1E4F1F4E8];
  uint64_t v104 = *MEMORY[0x1E4F1F480];
  uint64_t v105 = *MEMORY[0x1E4F1F498];
  uint64_t v106 = *MEMORY[0x1E4F1F4D0];
  uint64_t v107 = *MEMORY[0x1E4F1F478];
  uint64_t v108 = *MEMORY[0x1E4F1F490];
  uint64_t v109 = *MEMORY[0x1E4F1F4F8];
  uint64_t v110 = *MEMORY[0x1E4F1F4C8];
  uint64_t v111 = *MEMORY[0x1E4F1F458];
  uint64_t v112 = v104;
  uint64_t v113 = v105;
  uint64_t v114 = *MEMORY[0x1E4F1F9C8];
  uint64_t v115 = *MEMORY[0x1E4F1F9D8];
  uint64_t v116 = *MEMORY[0x1E4F1F9D0];
  uint64_t v117 = *MEMORY[0x1E4F1EF08];
  uint64_t v118 = *MEMORY[0x1E4F1EF20];
  uint64_t v119 = *MEMORY[0x1E4F1EF18];
  uint64_t v120 = *MEMORY[0x1E4F1EEF8];
  uint64_t v121 = *MEMORY[0x1E4F1EF30];
  uint64_t v122 = *MEMORY[0x1E4F249D0];
  uint64_t v123 = *MEMORY[0x1E4F24A00];
  uint64_t v124 = *MEMORY[0x1E4F24B70];
  uint64_t v125 = v32;
  uint64_t v126 = v36;
  uint64_t v127 = v41;
  double v128 = @"ColorInfoGuessedBy";
  uint64_t v129 = *MEMORY[0x1E4F24980];
  uint64_t v130 = *MEMORY[0x1E4F249A0];
  uint64_t v131 = *MEMORY[0x1E4F24998];
  double v132 = @"SceneReferredExtendedLinear";
  uint64_t v133 = *MEMORY[0x1E4F21A60];
  uint64_t v134 = *MEMORY[0x1E4F1F218];
  uint64_t v135 = *MEMORY[0x1E4F1F240];
  uint64_t v136 = *MEMORY[0x1E4F1F248];
  uint64_t v137 = *MEMORY[0x1E4F1F2F0];
  uint64_t v138 = *MEMORY[0x1E4F1F1D8];
  uint64_t v139 = *MEMORY[0x1E4F1ED30];
  double v140 = @"auxi";
  __int16 v141 = @"ccst";
  char v142 = @"slmC";
  uint64_t v143 = *MEMORY[0x1E4F1F298];
  uint64_t v144 = *MEMORY[0x1E4F1F268];
  float v145 = @"FECGroupID";
  double v146 = @"FECLastFrameInGroup";
  double v147 = @"FECLevelOfProtection";
  double v148 = @"QualityMetrics";
  double v149 = @"EncodedFrameAvgQP";
  double v150 = @"PadByteCount";
  int v151 = @"VRAWidth";
  double v152 = @"VRAHeight";
  uint64_t v153 = *MEMORY[0x1E4F24A50];
  CFRange v154 = @"dvvC";
  float v155 = @"disc";
  uint64_t v156 = *MEMORY[0x1E4F1EF90];
  uint64_t v157 = *MEMORY[0x1E4F1EF70];
  uint64_t v158 = *MEMORY[0x1E4F1EF80];
  uint64_t v159 = *MEMORY[0x1E4F1EF88];
  uint64_t v160 = *MEMORY[0x1E4F1EF60];
  uint64_t v161 = *MEMORY[0x1E4F1EF68];
  uint64_t v162 = *MEMORY[0x1E4F1EF78];
  uint64_t v163 = *MEMORY[0x1E4F1F1E0];
  uint64_t v164 = *MEMORY[0x1E4F1F1E8];
  uint64_t v165 = *MEMORY[0x1E4F1F1D0];
  uint64_t v166 = v138;
  uint64_t v167 = *MEMORY[0x1E4F1F188];
  __int16 v168 = @"av1C";
  uint64_t v169 = *MEMORY[0x1E4F24B88];
  uint64_t v170 = *MEMORY[0x1E4F24AD0];
  uint64_t v171 = *MEMORY[0x1E4F1F1C8];
  __int16 v172 = @"vpcC";
  CFAllocatorRef v28 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v29 = 0;
  sVTParavirtualizationStringToKeyIndexDict = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 212, MEMORY[0x1E4F1D530], 0);
  do
  {
    CFDictionaryAddValue((CFMutableDictionaryRef)sVTParavirtualizationStringToKeyIndexDict, values[(void)v29], v29);
    uint64_t v29 = (char *)v29 + 1;
  }
  while (v29 != (const void *)212);
  CFArrayRef result = CFArrayCreate(v28, (const void **)values, 212, MEMORY[0x1E4F1D510]);
  sVTParavirtualizationArrayOfIndexedKeys = (uint64_t)result;
  return result;
}

uint64_t VTParavirtualizationCreateSampleBufferFromSerializedAtomDataBlockBuffer(int a1, CMBlockBufferRef theBuffer, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!CMBlockBufferIsRangeContiguous(theBuffer, 0, 0)) {
    return 4294954516;
  }
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef cf = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  int v19 = 0;
  size_t size = 0;
  *(_OWORD *)&numSamples[1] = *MEMORY[0x1E4F1F9F8];
  uint64_t v17 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  numSamples[0] = 0;
  CMSampleBufferRef sbuf = 0;
  uint64_t v15 = 0;
  CFTypeRef v12 = 0;
  uint64_t v13 = 0;
  if (a6 && a4)
  {
    uint64_t v8 = MEMORY[0x199705810](&sVTParavirtualizationInitIndexedKeysOnce, vtParavirtualizationInitializeIndexedKeys);
    if (!v8)
    {
      uint64_t v8 = FigAtomStreamInitWithBBuf();
      if (!v8)
      {
        FigAtomStreamGetCurrentAtomTypeAndDataLength();
        uint64_t v8 = FigSignalErrorAt();
      }
    }
    uint64_t v9 = v8;
  }
  else
  {
    FigSignalErrorAt();
    uint64_t v9 = 0;
  }
  free(0);
  free(0);
  free(0);
  return v9;
}

CMItemCount vtParavirtualizationAtomWriterAppendNumSamples(opaqueCMSampleBuffer *a1)
{
  CMItemCount result = CMSampleBufferGetNumSamples(a1);
  if (result) {
    return vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
  }
  return result;
}

uint64_t vtParavirtualizationAtomWriterAppendSampleSizeArray(opaqueCMSampleBuffer *a1, uint64_t a2, CMItemCount *a3)
{
  size_t v20 = 0;
  CMItemCount sizeArrayEntriesNeededOut = 0;
  SampleSizeArradouble y = CMSampleBufferGetSampleSizeArray(a1, 0, 0, &sizeArrayEntriesNeededOut);
  if (SampleSizeArray == -12735)
  {
    uint64_t appended = 0;
    goto LABEL_11;
  }
  uint64_t appended = SampleSizeArray;
  CMItemCount v7 = sizeArrayEntriesNeededOut;
  if (a3) {
    *a3 = sizeArrayEntriesNeededOut;
  }
  if (v7 != 1)
  {
    if (v7 < 2)
    {
      if (!SampleSizeArray)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        goto LABEL_28;
      }
    }
    else
    {
      if (!((unint64_t)v7 >> 61))
      {
        CFTypeRef v12 = (size_t *)malloc_type_malloc(8 * v7, 0x5CC9CBA6uLL);
        if (v12)
        {
          uint64_t v10 = v12;
          uint64_t v13 = CMSampleBufferGetSampleSizeArray(a1, sizeArrayEntriesNeededOut, v12, &sizeArrayEntriesNeededOut);
          if (v13)
          {
LABEL_18:
            uint64_t appended = v13;
            goto LABEL_19;
          }
          uint64_t v8 = v10;
          goto LABEL_15;
        }
      }
      uint64_t appended = FigSignalErrorAt();
    }
LABEL_11:
    uint64_t v10 = 0;
LABEL_19:
    uint64_t v11 = 0;
    goto LABEL_29;
  }
  uint64_t v8 = &v20;
  uint64_t v9 = CMSampleBufferGetSampleSizeArray(a1, 1, &v20, &sizeArrayEntriesNeededOut);
  uint64_t v10 = 0;
  if (!v9)
  {
LABEL_15:
    if (sizeArrayEntriesNeededOut)
    {
      if ((unint64_t)sizeArrayEntriesNeededOut >> 62)
      {
LABEL_17:
        uint64_t v13 = FigSignalErrorAt();
        goto LABEL_18;
      }
      size_t v14 = 4 * sizeArrayEntriesNeededOut;
      malloc_type_id_t v15 = 1556728742;
    }
    else
    {
      size_t v14 = 0;
      malloc_type_id_t v15 = 1270757447;
    }
    __int16 v16 = malloc_type_malloc(v14, v15);
    uint64_t v11 = v16;
    if (!v16) {
      goto LABEL_17;
    }
    CMItemCount v17 = sizeArrayEntriesNeededOut;
    if (sizeArrayEntriesNeededOut >= 1)
    {
      uint64_t v18 = 0;
      do
      {
        *((_DWORD *)v16 + v18) = v8[v18];
        ++v18;
      }
      while (v17 != v18);
    }
LABEL_28:
    uint64_t appended = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
    goto LABEL_29;
  }
  uint64_t appended = v9;
  uint64_t v11 = 0;
LABEL_29:
  free(v10);
  free(v11);
  return appended;
}

uint64_t vtParavirtualizationAtomWriterAppendCMFormatDescription(const opaqueCMFormatDescription *a1)
{
  uint64_t appended = FigAtomWriterInitWithParent();
  if (appended) {
    return appended;
  }
  uint64_t appended = FigAtomWriterBeginAtom();
  if (appended) {
    return appended;
  }
  CMMediaType MediaType = CMFormatDescriptionGetMediaType(a1);
  uint64_t appended = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
  if (appended) {
    return appended;
  }
  if (MediaType == 1635088502 || MediaType == 1986618469 || MediaType == 1885954932)
  {
    CMVideoFormatDescriptionGetDimensions(a1);
    CMFormatDescriptionGetMediaSubType(a1);
    uint64_t appended = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
    if (appended) {
      return appended;
    }
    uint64_t v3 = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
    if (v3) {
      return v3;
    }
  }
  else
  {
    uint64_t v3 = FigSignalErrorAt();
  }
  CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(a1);
  if (Extensions)
  {
    CFDictionaryRef v5 = Extensions;
    uint64_t v6 = FigAtomWriterInitWithParent();
    if (!v6)
    {
      uint64_t v6 = FigAtomWriterBeginAtom();
      if (!v6)
      {
        uint64_t v6 = vtParavirtualizationAtomWriterAppendCFDictionary(v5, 0);
        if (!v6) {
          uint64_t v6 = FigAtomWriterEndAtom();
        }
      }
    }
    uint64_t v3 = v6;
  }
  if (!v3) {
    return FigAtomWriterEndAtom();
  }
  return v3;
}

uint64_t vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock()
{
  uint64_t result = FigAtomWriterInitWithParent();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result)
    {
      uint64_t result = FigAtomWriterAppendData();
      if (!result) {
        return FigAtomWriterEndAtom();
      }
    }
  }
  return result;
}

uint64_t vtParavirtualizationAtomWriterAppendCFDictionary(const __CFDictionary *a1, uint64_t a2)
{
  uint64_t Count = FigCFDictionaryGetCount();
  uint64_t v5 = Count;
  if (a2 || Count >= 1)
  {
    uint64_t v7 = FigAtomWriterInitWithParent();
    if (!v7)
    {
      uint64_t v7 = FigAtomWriterBeginAtom();
      if (!v7)
      {
        if (v5 < 1)
        {
          uint64_t v8 = 0;
          uint64_t v9 = 0;
LABEL_26:
          uint64_t appended = FigAtomWriterEndAtom();
LABEL_27:
          uint64_t v6 = appended;
          goto LABEL_28;
        }
        if (!((unint64_t)v5 >> 61))
        {
          uint64_t v10 = (const void **)malloc_type_malloc(8 * v5, 0x5CC9CBA6uLL);
          if (v10)
          {
            uint64_t v8 = v10;
            uint64_t v9 = (const void **)malloc_type_malloc(8 * v5, 0x5CC9CBA6uLL);
            if (v9)
            {
              CFDictionaryGetKeysAndValues(a1, v8, v9);
              uint64_t v11 = 0;
              while (1)
              {
                CFTypeRef v12 = v8[v11];
                if (!v12) {
                  break;
                }
                CFTypeID v13 = CFGetTypeID(v8[v11]);
                if (v13 != CFStringGetTypeID()) {
                  break;
                }
                size_t v14 = (void *)v9[v11];
                uint64_t v19 = 0;
                memset(v18, 0, sizeof(v18));
                uint64_t appended = FigAtomWriterInitWithParent();
                if (appended) {
                  goto LABEL_27;
                }
                uint64_t appended = FigAtomWriterBeginAtom();
                if (appended) {
                  goto LABEL_27;
                }
                CFDictionaryRef value = 0;
                if (CFDictionaryGetValueIfPresent((CFDictionaryRef)sVTParavirtualizationStringToKeyIndexDict, v12, (const void **)&value))
                {
                  __int16 v20 = (__int16)value;
                  uint64_t appended = vtParavirtualizationAtomWriterAppendAtomWithMemoryBlock();
                  if (appended) {
                    goto LABEL_27;
                  }
                }
                else
                {
                  uint64_t appended = vtParavirtualizationAtomWriterAppendCFPropertyList();
                  if (appended) {
                    goto LABEL_27;
                  }
                }
                uint64_t appended = vtParavirtualizationAtomWriterAppendCFType(v14, a2, (uint64_t)v18);
                if (appended) {
                  goto LABEL_27;
                }
                uint64_t appended = FigAtomWriterEndAtom();
                if (appended) {
                  goto LABEL_27;
                }
                if (v5 == ++v11) {
                  goto LABEL_26;
                }
              }
            }
            uint64_t appended = FigSignalErrorAt();
            goto LABEL_27;
          }
        }
        uint64_t v7 = FigSignalErrorAt();
      }
    }
    uint64_t v6 = v7;
    goto LABEL_10;
  }
  uint64_t v6 = 0;
LABEL_10:
  uint64_t v8 = 0;
  uint64_t v9 = 0;
LABEL_28:
  free(v8);
  free(v9);
  return v6;
}

uint64_t vtParavirtualizationAtomWriterAppendCFPropertyList()
{
  uint64_t result = FigAtomWriterInitWithParent();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result)
    {
      uint64_t result = FigCreateCFDataFromCFPropertyList();
      if (!result)
      {
        CFDataGetBytePtr(0);
        CFDataGetLength(0);
        uint64_t result = FigAtomWriterAppendData();
        if (!result) {
          return FigAtomWriterEndAtom();
        }
      }
    }
  }
  return result;
}

uint64_t vtParavirtualizationAtomWriterAppendCFType(void *a1, uint64_t a2, uint64_t a3)
{
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 == CFArrayGetTypeID())
  {
    return (uint64_t)vtParavirtualizationAtomWriterAppendCFArray((const __CFArray *)a1);
  }
  else if (v6 == CFDictionaryGetTypeID())
  {
    return vtParavirtualizationAtomWriterAppendCFDictionary(a1, a2, a3);
  }
  else if (v6 == CFNumberGetTypeID() {
         || v6 == CFBooleanGetTypeID()
  }
         || v6 == CFStringGetTypeID()
         || v6 == CFDataGetTypeID()
         || v6 == CFDateGetTypeID())
  {
    return vtParavirtualizationAtomWriterAppendCFPropertyList();
  }
  else if (v6 == CGColorSpaceGetTypeID())
  {
    return (uint64_t)vtParavirtualizationAtomWriterAppendCGColorSpace((CGColorSpace *)a1);
  }
  else if (v6 == CFURLGetTypeID())
  {
    return vtParavirtualizationAtomWriterAppendCFURL((const __CFURL *)a1);
  }
  else if (v6 == CMFormatDescriptionGetTypeID())
  {
    return vtParavirtualizationAtomWriterAppendCMFormatDescription(a1, a3);
  }
  else if (v6 == CFNullGetTypeID())
  {
    return vtParavirtualizationAtomWriterAppendNULL();
  }
  else
  {
    return 4294954516;
  }
}

CFArrayRef vtParavirtualizationAtomWriterAppendCFArray(const __CFArray *result)
{
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  if (result)
  {
    CFArrayRef v1 = result;
    CFIndex Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v3 = Count;
      uint64_t result = (const __CFArray *)FigAtomWriterInitWithParent();
      if (!result)
      {
        uint64_t result = (const __CFArray *)FigAtomWriterBeginAtom();
        if (!result)
        {
          CFIndex v4 = 0;
          while (1)
          {
            CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v1, v4);
            uint64_t result = (const __CFArray *)vtParavirtualizationAtomWriterAppendCFType(ValueAtIndex, 1, v6);
            if (result) {
              break;
            }
            if (v3 == ++v4) {
              return (const __CFArray *)FigAtomWriterEndAtom();
            }
          }
        }
      }
    }
  }
  return result;
}

CFPropertyListRef vtParavirtualizationAtomWriterAppendCGColorSpace(CGColorSpace *a1)
{
  CFPropertyListRef result = CGColorSpaceCopyPropertyList(a1);
  if (result)
  {
    int v2 = result;
    uint64_t appended = vtParavirtualizationAtomWriterAppendCFPropertyList();
    CFRelease(v2);
    return (CFPropertyListRef)appended;
  }
  return result;
}

uint64_t vtParavirtualizationAtomWriterAppendCFURL(const __CFURL *a1)
{
  CFURLRef v1 = CFURLCopyAbsoluteURL(a1);
  if (v1)
  {
    CFURLRef v2 = v1;
    if (CFURLGetString(v1)) {
      uint64_t appended = vtParavirtualizationAtomWriterAppendCFPropertyList();
    }
    else {
      uint64_t appended = FigSignalErrorAt();
    }
    uint64_t v4 = appended;
    CFRelease(v2);
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t vtParavirtualizationAtomWriterAppendNULL()
{
  uint64_t result = FigAtomWriterInitWithParent();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result) {
      return FigAtomWriterEndAtom();
    }
  }
  return result;
}

uint64_t vtParavirtualizationAtomDataReaderCopyCMFormatDescription()
{
  uint64_t v0 = FigAtomStreamInitWithParent();
  if (v0) {
    return v0;
  }
  while (1)
  {
    CurrentAtomTypeAndDataint Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (CurrentAtomTypeAndDataLength) {
      break;
    }
    uint64_t Atom = FigAtomStreamAdvanceToNextAtom();
    if (Atom == -12890) {
      return FigSignalErrorAt();
    }
    uint64_t v3 = Atom;
    if (Atom) {
      return v3;
    }
  }
  return CurrentAtomTypeAndDataLength;
}

uint64_t vtParavirtualizationAtomDataReaderCopyCFDictionary(uint64_t a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v4 = Mutable;
  if (!a2) {
    goto LABEL_8;
  }
  if (Mutable)
  {
    uint64_t v5 = FigAtomStreamInitWithParent();
    if (v5)
    {
      uint64_t v8 = v5;
LABEL_6:
      CFRelease(v4);
      return v8;
    }
    CurrentAtomTypeAndDataint Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (CurrentAtomTypeAndDataLength)
    {
LABEL_9:
      uint64_t v8 = CurrentAtomTypeAndDataLength;
      if (!v4) {
        return v8;
      }
      goto LABEL_6;
    }
LABEL_8:
    CurrentAtomTypeAndDataint Length = FigSignalErrorAt();
    goto LABEL_9;
  }

  return FigSignalErrorAt();
}

uint64_t vtParavirtualizationAtomDataReaderCopyCFPropertyList(uint64_t a1, void *a2)
{
  CurrentAtomTypeAndDataint Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (CurrentAtomTypeAndDataLength)
  {
    uint64_t CFPropertyListFromData = CurrentAtomTypeAndDataLength;
    CFMutableDictionaryRef v4 = 0;
    goto LABEL_8;
  }
  CFMutableDictionaryRef v4 = malloc_type_malloc(0, 0xBDDA3AC1uLL);
  if (!v4)
  {
    uint64_t BBuf = FigSignalErrorAt();
LABEL_11:
    uint64_t CFPropertyListFromData = BBuf;
    goto LABEL_8;
  }
  uint64_t BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if (BBuf) {
    goto LABEL_11;
  }
  uint64_t BBuf = CMBlockBufferCopyDataBytes(0, 0, 0, v4);
  if (BBuf) {
    goto LABEL_11;
  }
  uint64_t CFPropertyListFromData = FigCreateCFPropertyListFromData();
  if (a2 && !CFPropertyListFromData) {
    *a2 = 0;
  }
LABEL_8:
  free(v4);
  return CFPropertyListFromData;
}

uint64_t vtParavirtualizationAtomDataReaderCopyCFType(uint64_t a1, int a2, void *a3)
{
  if (a2 > 1685349749)
  {
    if (a2 <= 1853189227)
    {
      if (a2 != 1685349750)
      {
        if (a2 != 1717859171)
        {
          int v4 = 1852662390;
          goto LABEL_24;
        }
        return vtParavirtualizationAtomDataReaderCopyCMFormatDescription(a1, a3);
      }
LABEL_25:
      return vtParavirtualizationAtomDataReaderCopyCFPropertyList(a1, a3);
    }
    if (a2 == 1853189228)
    {
      uint64_t v6 = 0;
      *a3 = CFRetain((CFTypeRef)*MEMORY[0x1E4F1D260]);
      return v6;
    }
    if (a2 == 1937011307) {
      goto LABEL_25;
    }
    if (a2 == 1970433142 && a3)
    {
      CFTypeRef cf = 0;
      uint64_t v6 = vtParavirtualizationAtomDataReaderCopyCFPropertyList(a1, &cf);
      CFTypeRef v7 = cf;
      if (!v6 && cf)
      {
        CFTypeID v8 = CFGetTypeID(cf);
        if (v8 == CFStringGetTypeID()) {
          *a3 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFStringRef)cf, 0);
        }
        CFTypeRef v7 = cf;
      }
LABEL_44:
      if (v7) {
        CFRelease(v7);
      }
      return v6;
    }
    goto LABEL_35;
  }
  if (a2 > 1668051570)
  {
    switch(a2)
    {
      case 1668051571:
        if (a3)
        {
          CFTypeRef cf = 0;
          uint64_t v6 = vtParavirtualizationAtomDataReaderCopyCFPropertyList(a1, &cf);
          CFTypeRef v7 = cf;
          if (!v6)
          {
            if (cf)
            {
              CGColorSpaceRef v9 = CGColorSpaceCreateWithPropertyList(cf);
              CFTypeRef v7 = cf;
            }
            else
            {
              CGColorSpaceRef v9 = 0;
            }
            *a3 = v9;
          }
          goto LABEL_44;
        }
        break;
      case 1684108406:
        goto LABEL_25;
      case 1684628340:
        return vtParavirtualizationAtomDataReaderCopyCFDictionary(a1, a3);
    }
LABEL_35:
    return FigSignalErrorAt();
  }
  if (a2 != 1634886009)
  {
    int v4 = 1651862646;
LABEL_24:
    if (a2 == v4) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }

  return vtParavirtualizationAtomDataReaderCopyCFArray(a1, a3);
}

uint64_t vtParavirtualizationAtomDataReaderCopyCFArray(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v4 = FigAtomStreamInitWithParent();
    if (v4) {
      return v4;
    }
    while (1)
    {
      CurrentAtomTypeAndDataint Length = FigAtomStreamGetCurrentAtomTypeAndDataLength();
      if (CurrentAtomTypeAndDataLength) {
        break;
      }
      uint64_t Atom = FigAtomStreamAdvanceToNextAtom();
      if (Atom == -12890)
      {
        uint64_t v7 = 0;
        *a2 = 0;
        return v7;
      }
      uint64_t v7 = Atom;
      if (Atom) {
        return v7;
      }
    }
    return CurrentAtomTypeAndDataLength;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void *__getFigFairPlayCPELimitedCryptorCreateSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MediaToolboxLibrary();
  uint64_t result = dlsym(v2, "FigFairPlayCPELimitedCryptorCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getFigFairPlayCPELimitedCryptorCreateSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t MediaToolboxLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!MediaToolboxLibraryCore_frameworkLibrary)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    v3[2] = 0x40000000;
    v3[3] = __MediaToolboxLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_tmp_67;
    v3[5] = v3;
    long long v4 = xmmword_1E57852C8;
    uint64_t v5 = 0;
    MediaToolboxLibraryCore_frameworkLibrardouble y = _sl_dlopen();
  }
  uint64_t v0 = MediaToolboxLibraryCore_frameworkLibrary;
  CFURLRef v1 = (void *)v3[0];
  if (!MediaToolboxLibraryCore_frameworkLibrary)
  {
    CFURLRef v1 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v3[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MediaToolboxLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaToolboxLibraryCore_frameworkLibrardouble y = result;
  return result;
}

void *__getFigPKDMSECPELimitedCryptorCreateWithExternalProtectionMethodsSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MediaToolboxLibrary();
  uint64_t result = dlsym(v2, "FigPKDMSECPELimitedCryptorCreateWithExternalProtectionMethods");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getFigPKDMSECPELimitedCryptorCreateWithExternalProtectionMethodsSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                               + 24);
  return result;
}

void *__getFigPKDCPELimitedCryptorCreateWithExternalProtectionMethodsSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MediaToolboxLibrary();
  uint64_t result = dlsym(v2, "FigPKDCPELimitedCryptorCreateWithExternalProtectionMethods");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getFigPKDCPELimitedCryptorCreateWithExternalProtectionMethodsSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                         + 24);
  return result;
}

void vtParavirtualizationCopyEachEntry(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t VTPixelTransferNodeRotationCopyProperty()
{
  return 4294954396;
}

uint64_t VTPixelTransferNodeRotationSetProperty()
{
  return 4294954396;
}

uint64_t VTPixelTransferNodeRotationCopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t VTPixelTransferAppendSoftwareRotationNodeCallback(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  long long v15 = 0u;
  long long v16 = 0u;
  CFTypeRef cf = 0;
  uint64_t CurrentDimensions = VTPixelTransferGraphGetCurrentDimensions(a1, (uint64_t)a2, a3, (uint64_t)a6, 0, (uint64_t)&v15);
  if (CurrentDimensions) {
    return CurrentDimensions;
  }
  uint64_t PixelBufferPoolAttributes = VTPixelTransferChainCreatePixelBufferPoolAttributes(*a2, (unint64_t)*(double *)&v16, (unint64_t)*((double *)&v16 + 1), (CFMutableDictionaryRef *)&cf);
  CFTypeRef v11 = cf;
  if (PixelBufferPoolAttributes)
  {
    uint64_t appended = PixelBufferPoolAttributes;
    if (!cf) {
      return appended;
    }
    goto LABEL_4;
  }
  uint64_t appended = VTPixelTransferChainAppendRotationNode(*a6, *(void *)(a3 + 8));
  CFTypeRef v11 = cf;
  if (cf) {
LABEL_4:
  }
    CFRelease(v11);
  return appended;
}

uint64_t VTPixelTransferChainAppendRotationNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    VTPixelTransferNodeGetClassID();
    uint64_t v2 = CMDerivedObjectCreate();
    FigSignalErrorAt();
  }
  return v2;
}

void VTPixelRotationSessionInvalidate(VTPixelRotationSessionRef session)
{
  if (session)
  {
    if (!*((unsigned char *)session + 16)) {
      *((unsigned char *)session + 16) = 1;
    }
  }
}

CFTypeID VTPixelRotationSessionGetTypeID(void)
{
  return sVTPixelRotationSessionID;
}

void RegisterVTPixelRotationSession()
{
  uint64_t v0 = (const void *)_CFRuntimeRegisterClass();
  sVTPixelRotationSessionID = (uint64_t)v0;
  sVTPixelRotationSessionPropertyCallbacks = 0;
  *(void *)algn_1EB3B8AE8 = VTPixelRotationSessionCopySupportedPropertyDictionary;
  qword_1EB3B8AF0 = (uint64_t)VTPixelRotationSessionSetProperty;
  qword_1EB3B8AF8 = (uint64_t)VTPixelRotationSessionCopyProperty;
  qword_1EB3B8B00 = (uint64_t)VTPixelRotationSessionSetProperties;
  qword_1EB3B8B08 = (uint64_t)VTPixelRotationSessionCopySerializableProperties;

  VTSessionRegisterCallbacksForTypeID(&sVTPixelRotationSessionPropertyCallbacks, v0);
}

uint64_t VTPixelRotationSessionCreateWithRotationAndFlip(uint64_t a1, int a2, char a3, char a4, uint64_t *a5)
{
  FigKTraceInit();
  if (a2 > 179)
  {
    if (a2 != 180 && a2 != 270)
    {
LABEL_13:
      return FigSignalErrorAt();
    }
  }
  else if (a2 && a2 != 90)
  {
    goto LABEL_13;
  }
  if (!a5) {
    goto LABEL_13;
  }
  MEMORY[0x199705810](&VTPixelRotationSessionGetTypeID_sRegisterVTPixelRotationSessionOnce, RegisterVTPixelRotationSession);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    goto LABEL_13;
  }
  uint64_t v11 = Instance;
  MEMORY[0x199705810](&sReadDebugOverrideAllDefaultsOnce, ReadDebugOverrideAllDefaults);
  *(void *)(v11 + 40) = 0;
  *(_DWORD *)(v11 + 52) = a2;
  *(unsigned char *)(v11 + 56) = a3;
  *(unsigned char *)(v11 + 57) = a4;
  *(unsigned char *)(v11 + 32) = 0;
  *(unsigned char *)(v11 + 135) = globalEnableHardwareAcceleratedTransfer;
  *(unsigned char *)(v11 + 133) = globalEnableGPUAcceleratedTransfer;
  *(unsigned char *)(v11 + 134) = 0;
  *(unsigned char *)(v11 + 132) = globalEnableSoftwareTransfer;
  *(_WORD *)(v11 + 129) = 0;
  *(unsigned char *)(v11 + 208) = 0;
  *(void *)(v11 + 216) = 0;
  if (globalUsePixelTransferChain == 1) {
    VTPixelTransferChainCreate(a1, (uint64_t *)(v11 + 40));
  }
  *(unsigned char *)(v11 + 48) = globalUsePixelTransferGraph;
  *(unsigned char *)(v11 + 49) = globalAllowFallbacks;
  *(void *)(v11 + 152) = 0;
  *(_DWORD *)(v11 + 232) = 0;
  *(void *)(v11 + 144) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v12 = VTCelesteRotationNodeCreate(v11 + 224);
  if (v12) {
    CFRelease((CFTypeRef)v11);
  }
  else {
    *a5 = v11;
  }
  return v12;
}

void ReadDebugOverrideAllDefaults()
{
  globalEnableHardwareAcceleratedTransfer = 1;
  globalEnableGPUAcceleratedTransfer = 1;
  globalEnableSoftwareTransfer = 1;
  globalUsePixelTransferChain = 1;
  globalUsePixelTransferGraph = 1;
  globalAllowFallbacks = 1;
}

OSStatus VTPixelRotationSessionCreate(CFAllocatorRef allocator, VTPixelRotationSessionRef *pixelRotationSessionOut)
{
  return VTPixelRotationSessionCreateWithRotationAndFlip((uint64_t)allocator, 0, 0, 0, (uint64_t *)pixelRotationSessionOut);
}

uint64_t VTPixelRotationSessionCopySupportedPropertyDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  long long v28 = (__CFString *)*MEMORY[0x1E4F143B8];
  long long v27 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  uint64_t v19 = 0;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  *a2 = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else
  {
    keys = @"PropertyType";
    long long v21 = @"ReadWriteStatus";
    values = @"Boolean";
    CFTypeID v13 = @"ReadWrite";
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v5) {
      return FigSignalErrorAt();
    }
    uint64_t v6 = (__CFString *)v5;
    keys = @"PropertyType";
    long long v21 = @"ReadWriteStatus";
    values = @"Boolean";
    CFTypeID v13 = @"ReadOnly";
    CFDictionaryRef v7 = CFDictionaryCreate(v4, (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v7)
    {
      CFDictionaryRef v8 = v7;
      long long v21 = @"FlipVerticalOrientation";
      values = v6;
      CFTypeID v13 = v6;
      *(void *)&long long v22 = @"Rotation";
      *((void *)&v22 + 1) = @"ScalingSupported";
      *(void *)&long long v14 = v6;
      *((void *)&v14 + 1) = v7;
      *(void *)&long long v23 = @"NonIntegralSourceBoundingOriginSupported";
      *((void *)&v23 + 1) = @"ForceDisableVectorInstructions";
      *(void *)&long long v15 = v7;
      *((void *)&v15 + 1) = v6;
      *(void *)&long long v24 = @"ForceSingleThreaded";
      *((void *)&v24 + 1) = @"EnableSoftwareTransfer";
      *(void *)&long long v16 = v6;
      *((void *)&v16 + 1) = v6;
      *(void *)&long long v25 = @"AllowPixelTransferChain";
      *((void *)&v25 + 1) = @"AllowPixelTransferGraph";
      *(void *)&long long v17 = v6;
      *((void *)&v17 + 1) = v6;
      *(void *)&long long v26 = @"EnableGPUAcceleratedTransfer";
      *((void *)&v26 + 1) = @"SetGPUPriorityLow";
      *(void *)&long long v18 = v6;
      *((void *)&v18 + 1) = v6;
      long long v27 = @"EnableHardwareAcceleratedTransfer";
      long long v28 = @"Label";
      uint64_t v19 = v6;
      keys = v6;
      CFDictionaryRef v9 = CFDictionaryCreate(v4, (const void **)&keys, (const void **)&values, 14, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v9)
      {
        uint64_t v10 = 0;
        *a2 = v9;
      }
      else
      {
        uint64_t v10 = FigSignalErrorAt();
      }
      CFRelease(v6);
      uint64_t v11 = v8;
    }
    else
    {
      uint64_t v10 = FigSignalErrorAt();
      uint64_t v11 = v6;
    }
    CFRelease(v11);
    return v10;
  }
}

uint64_t VTPixelRotationSessionSetProperty(uint64_t a1, const __CFString *a2, const __CFBoolean *a3)
{
  v97[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  v97[0] = 0;
  if (!*(unsigned char *)(a1 + 16))
  {
    if (FigAtomicIncrement32() != 1)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t v8 = fig_log_call_emit_and_clean_up_after_send_and_compose();
      VTPixelTransferSessionThreadBearTrap(v8);
    }
    VTMetalTransferSessionCopySupportedPropertyDictionary(*(void *)(a1 + 136), v97);
    if (CFEqual(a2, @"FlipHorizontalOrientation"))
    {
      if ((const __CFBoolean *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
        a3 = (const __CFBoolean *)*MEMORY[0x1E4F1CFC8];
      }
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        int v11 = *(unsigned __int8 *)(a1 + 56);
        if (v11 != CFBooleanGetValue(a3))
        {
          uint64_t v12 = 0;
          *(unsigned char *)(a1 + 56) = CFBooleanGetValue(a3);
LABEL_55:
          *(unsigned char *)(a1 + 32) = 0;
          goto LABEL_305;
        }
        goto LABEL_24;
      }
      goto LABEL_303;
    }
    if (CFEqual(a2, @"FlipVerticalOrientation"))
    {
      if ((const __CFBoolean *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
        a3 = (const __CFBoolean *)*MEMORY[0x1E4F1CFC8];
      }
      CFTypeID v14 = CFBooleanGetTypeID();
      if (v14 == CFGetTypeID(a3))
      {
        int v15 = *(unsigned __int8 *)(a1 + 57);
        if (v15 != CFBooleanGetValue(a3))
        {
          uint64_t v12 = 0;
          *(unsigned char *)(a1 + 57) = CFBooleanGetValue(a3);
          goto LABEL_55;
        }
LABEL_24:
        uint64_t v12 = 0;
LABEL_305:
        FigAtomicDecrement32();
        return v12;
      }
      goto LABEL_303;
    }
    if (CFEqual(a2, @"Rotation"))
    {
      uint64_t v12 = 0;
      if (a3)
      {
        int v16 = 0;
        if ((const __CFBoolean *)*MEMORY[0x1E4F1D260] != a3)
        {
          int v16 = *(_DWORD *)(a1 + 52);
          if (FigCFEqual())
          {
            uint64_t v12 = 0;
            int v16 = 0;
          }
          else if (FigCFEqual())
          {
            uint64_t v12 = 0;
            int v16 = 90;
          }
          else if (FigCFEqual())
          {
            uint64_t v12 = 0;
            int v16 = 180;
          }
          else if (FigCFEqual())
          {
            uint64_t v12 = 0;
            int v16 = 270;
          }
          else
          {
            uint64_t v12 = FigSignalErrorAt();
          }
        }
      }
      else
      {
        int v16 = 0;
      }
      if (v16 == *(_DWORD *)(a1 + 52)) {
        goto LABEL_305;
      }
      *(_DWORD *)(a1 + 52) = v16;
      goto LABEL_55;
    }
    long long v17 = @"RotationEnableHighSpeedTransfer";
    if (CFEqual(a2, @"RotationEnableHighSpeedTransfer")
      || (long long v17 = @"RotationZeroFillData", CFEqual(a2, @"RotationZeroFillData"))
      || (long long v17 = @"RotationEnableHistogram", CFEqual(a2, @"RotationEnableHistogram"))
      || (long long v17 = @"RotationHistogramRectangle", CFEqual(a2, @"RotationHistogramRectangle")))
    {
      uint64_t v18 = *(void *)(a1 + 224);
      if (v18)
      {
        uint64_t v19 = VTPixelTransferNodeCelesteRotationSetProperty(v18, v17, a3);
LABEL_304:
        uint64_t v12 = v19;
        goto LABEL_305;
      }
LABEL_303:
      uint64_t v19 = FigSignalErrorAt();
      goto LABEL_304;
    }
    if (FigCFEqual())
    {
      if ((const __CFBoolean *)*MEMORY[0x1E4F1D260] == a3) {
        a3 = 0;
      }
      if (a3)
      {
        CFTypeID v20 = CFGetTypeID(a3);
        if (v20 != CFStringGetTypeID()) {
          goto LABEL_303;
        }
      }
      if (FigCFEqual()) {
        goto LABEL_24;
      }
      long long v21 = *(const void **)(a1 + 104);
      *(void *)(a1 + 104) = a3;
      if (!a3) {
        goto LABEL_80;
      }
      goto LABEL_79;
    }
    if (FigCFEqual())
    {
      if ((const __CFBoolean *)*MEMORY[0x1E4F1D260] == a3) {
        a3 = 0;
      }
      if (a3)
      {
        CFTypeID v22 = CFGetTypeID(a3);
        if (v22 != CFStringGetTypeID()) {
          goto LABEL_303;
        }
      }
      if (FigCFEqual()) {
        goto LABEL_24;
      }
      long long v21 = *(const void **)(a1 + 112);
      *(void *)(a1 + 112) = a3;
      if (!a3) {
        goto LABEL_80;
      }
      goto LABEL_79;
    }
    if (FigCFEqual())
    {
      if (a3)
      {
        CFTypeID v23 = CFGetTypeID(a3);
        if (v23 != CFDataGetTypeID()) {
          goto LABEL_303;
        }
      }
      if ((const __CFBoolean *)*MEMORY[0x1E4F1D260] == a3) {
        a3 = 0;
      }
      if (FigCFEqual()) {
        goto LABEL_24;
      }
      long long v21 = *(const void **)(a1 + 88);
      *(void *)(a1 + 88) = a3;
      if (!a3) {
        goto LABEL_80;
      }
      goto LABEL_79;
    }
    if (FigCFEqual())
    {
      if ((const __CFBoolean *)*MEMORY[0x1E4F1D260] == a3) {
        a3 = 0;
      }
      if (a3)
      {
        CFTypeID v24 = CFGetTypeID(a3);
        if (v24 != CFStringGetTypeID()) {
          goto LABEL_303;
        }
      }
      if (FigCFEqual()) {
        goto LABEL_24;
      }
      long long v21 = *(const void **)(a1 + 96);
      *(void *)(a1 + 96) = a3;
      if (!a3) {
        goto LABEL_80;
      }
      goto LABEL_79;
    }
    if (FigCFEqual())
    {
      if ((const __CFBoolean *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
        a3 = (const __CFBoolean *)*MEMORY[0x1E4F1CFC8];
      }
      CFTypeID v26 = CFBooleanGetTypeID();
      if (v26 == CFGetTypeID(a3))
      {
        int v27 = *(unsigned __int8 *)(a1 + 129);
        if (v27 != CFBooleanGetValue(a3))
        {
          uint64_t v12 = 0;
          *(unsigned char *)(a1 + 129) = CFBooleanGetValue(a3);
          goto LABEL_55;
        }
        goto LABEL_24;
      }
      goto LABEL_303;
    }
    if (FigCFEqual())
    {
      if (a3 && (const __CFBoolean *)*MEMORY[0x1E4F1D260] != a3
        || (a3 = (const __CFBoolean *)*MEMORY[0x1E4F1CFC8]) != 0)
      {
        CFTypeID v28 = CFBooleanGetTypeID();
        if (v28 == CFGetTypeID(a3))
        {
          int v29 = *(unsigned __int8 *)(a1 + 130);
          if (v29 != CFBooleanGetValue(a3))
          {
            uint64_t v12 = 0;
            *(unsigned char *)(a1 + 130) = CFBooleanGetValue(a3);
            goto LABEL_55;
          }
          goto LABEL_24;
        }
      }
      goto LABEL_303;
    }
    if (FigCFEqual())
    {
      if (a3 && (const __CFBoolean *)*MEMORY[0x1E4F1D260] != a3
        || (!globalEnableSoftwareTransfer
          ? (long long v30 = (const __CFBoolean **)MEMORY[0x1E4F1CFC8])
          : (long long v30 = (const __CFBoolean **)MEMORY[0x1E4F1CFD0]),
            (a3 = *v30) != 0))
      {
        CFTypeID v31 = CFBooleanGetTypeID();
        if (v31 == CFGetTypeID(a3))
        {
          int v32 = *(unsigned __int8 *)(a1 + 132);
          if (v32 != CFBooleanGetValue(a3))
          {
            uint64_t v12 = 0;
            *(unsigned char *)(a1 + 132) = CFBooleanGetValue(a3);
            goto LABEL_55;
          }
          goto LABEL_24;
        }
      }
      goto LABEL_303;
    }
    if (FigCFEqual())
    {
      if (globalUsePixelTransferChain) {
        long long v33 = (const void **)MEMORY[0x1E4F1CFD0];
      }
      else {
        long long v33 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      if ((const __CFBoolean *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
        uint64_t v35 = *v33;
      }
      else {
        uint64_t v35 = a3;
      }
      CFTypeID v36 = CFBooleanGetTypeID();
      if (v36 != CFGetTypeID(v35)) {
        goto LABEL_303;
      }
      uint64_t v37 = (const void **)(a1 + 40);
      if (*(void *)(a1 + 40))
      {
        int Value = CFBooleanGetValue((CFBooleanRef)v35);
        uint64_t v39 = *v37;
        if (!Value)
        {
          if (v39)
          {
            CFRelease(v39);
            *uint64_t v37 = 0;
          }
          goto LABEL_82;
        }
        if (v39) {
          goto LABEL_24;
        }
      }
      if (!CFBooleanGetValue((CFBooleanRef)v35)) {
        goto LABEL_24;
      }
      CFAllocatorRef v40 = CFGetAllocator((CFTypeRef)a1);
      VTPixelTransferChainCreate((uint64_t)v40, (uint64_t *)(a1 + 40));
LABEL_82:
      uint64_t v12 = 0;
      goto LABEL_55;
    }
    if (FigCFEqual())
    {
      if (globalUsePixelTransferGraph) {
        uint64_t v41 = (const __CFBoolean **)MEMORY[0x1E4F1CFD0];
      }
      else {
        uint64_t v41 = (const __CFBoolean **)MEMORY[0x1E4F1CFC8];
      }
      if ((const __CFBoolean *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
        a3 = *v41;
      }
      CFTypeID v43 = CFBooleanGetTypeID();
      if (v43 == CFGetTypeID(a3))
      {
        int v44 = CFBooleanGetValue(a3);
        if (v44 != *(unsigned __int8 *)(a1 + 48))
        {
          uint64_t v12 = 0;
          *(unsigned char *)(a1 + 48) = v44;
          goto LABEL_55;
        }
        goto LABEL_24;
      }
      goto LABEL_303;
    }
    if (FigCFEqual())
    {
      if (globalEnableGPUAcceleratedTransfer) {
        uint64_t v45 = (const __CFBoolean **)MEMORY[0x1E4F1CFD0];
      }
      else {
        uint64_t v45 = (const __CFBoolean **)MEMORY[0x1E4F1CFC8];
      }
      if ((const __CFBoolean *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
        a3 = *v45;
      }
      CFTypeID v47 = CFBooleanGetTypeID();
      if (v47 == CFGetTypeID(a3))
      {
        int v48 = *(unsigned __int8 *)(a1 + 133);
        if (v48 != CFBooleanGetValue(a3))
        {
          uint64_t v12 = 0;
          *(unsigned char *)(a1 + 133) = CFBooleanGetValue(a3);
          goto LABEL_55;
        }
        goto LABEL_24;
      }
      goto LABEL_303;
    }
    if (FigCFEqual())
    {
      if ((const __CFBoolean *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
        a3 = (const __CFBoolean *)*MEMORY[0x1E4F1CFC8];
      }
      CFTypeID v50 = CFBooleanGetTypeID();
      if (v50 == CFGetTypeID(a3))
      {
        int v51 = *(unsigned __int8 *)(a1 + 134);
        if (v51 != CFBooleanGetValue(a3))
        {
          uint64_t v12 = 0;
          *(unsigned char *)(a1 + 134) = CFBooleanGetValue(a3);
          goto LABEL_55;
        }
        goto LABEL_24;
      }
      goto LABEL_303;
    }
    if (FigCFEqual())
    {
      if (globalEnableHardwareAcceleratedTransfer) {
        uint64_t v52 = (const __CFBoolean **)MEMORY[0x1E4F1CFD0];
      }
      else {
        uint64_t v52 = (const __CFBoolean **)MEMORY[0x1E4F1CFC8];
      }
      if ((const __CFBoolean *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
        a3 = *v52;
      }
      CFTypeID v54 = CFBooleanGetTypeID();
      if (v54 == CFGetTypeID(a3))
      {
        int v55 = *(unsigned __int8 *)(a1 + 135);
        if (v55 != CFBooleanGetValue(a3))
        {
          uint64_t v12 = 0;
          *(unsigned char *)(a1 + 135) = CFBooleanGetValue(a3);
          goto LABEL_55;
        }
        goto LABEL_24;
      }
      goto LABEL_303;
    }
    if (CFEqual(a2, @"PQEOTFOpticalScale"))
    {
      uint64_t v56 = *(const void **)(a1 + 136);
      if (v56) {
        VTSessionSetProperty(v56, a2, a3);
      }
      uint64_t v57 = *(__CFDictionary **)(a1 + 144);
      if (v57)
      {
        if (a3)
        {
          CFDictionarySetValue(v57, a2, a3);
LABEL_185:
          CFTypeID v60 = CFGetTypeID(a3);
          if (v60 != CFNumberGetTypeID()) {
            goto LABEL_303;
          }
          if (FigCFEqual()) {
            goto LABEL_24;
          }
          long long v21 = *(const void **)(a1 + 176);
          *(void *)(a1 + 176) = a3;
          goto LABEL_79;
        }
        CFDictionaryRemoveValue(v57, a2);
      }
      else if (a3)
      {
        goto LABEL_185;
      }
      uint64_t v61 = *(const void **)(a1 + 176);
      if (v61)
      {
        CFRelease(v61);
        uint64_t v12 = 0;
        *(void *)(a1 + 176) = 0;
        goto LABEL_305;
      }
      goto LABEL_24;
    }
    if (CFEqual(a2, @"PQInvEOTFOpticalScale"))
    {
      uint64_t v58 = *(const void **)(a1 + 136);
      if (v58) {
        VTSessionSetProperty(v58, a2, a3);
      }
      uint64_t v59 = *(__CFDictionary **)(a1 + 144);
      if (v59)
      {
        if (a3)
        {
          CFDictionarySetValue(v59, a2, a3);
LABEL_198:
          CFTypeID v64 = CFGetTypeID(a3);
          if (v64 != CFNumberGetTypeID()) {
            goto LABEL_303;
          }
          if (FigCFEqual()) {
            goto LABEL_24;
          }
          long long v21 = *(const void **)(a1 + 184);
          *(void *)(a1 + 184) = a3;
          goto LABEL_79;
        }
        CFDictionaryRemoveValue(v59, a2);
      }
      else if (a3)
      {
        goto LABEL_198;
      }
      uint64_t v65 = *(const void **)(a1 + 184);
      if (v65)
      {
        CFRelease(v65);
        uint64_t v12 = 0;
        *(void *)(a1 + 184) = 0;
        goto LABEL_305;
      }
      goto LABEL_24;
    }
    if (CFEqual(a2, @"HLGOETFOpticalScale"))
    {
      uint64_t v62 = *(const void **)(a1 + 136);
      if (v62) {
        VTSessionSetProperty(v62, a2, a3);
      }
      uint64_t v63 = *(__CFDictionary **)(a1 + 144);
      if (v63)
      {
        if (a3)
        {
          CFDictionarySetValue(v63, a2, a3);
LABEL_211:
          CFTypeID v68 = CFGetTypeID(a3);
          if (v68 != CFNumberGetTypeID()) {
            goto LABEL_303;
          }
          if (FigCFEqual()) {
            goto LABEL_24;
          }
          long long v21 = *(const void **)(a1 + 192);
          *(void *)(a1 + 192) = a3;
          goto LABEL_79;
        }
        CFDictionaryRemoveValue(v63, a2);
      }
      else if (a3)
      {
        goto LABEL_211;
      }
      CFArrayRef v69 = *(const void **)(a1 + 192);
      if (v69)
      {
        CFRelease(v69);
        uint64_t v12 = 0;
        *(void *)(a1 + 192) = 0;
        goto LABEL_305;
      }
      goto LABEL_24;
    }
    if (!CFEqual(a2, @"HLGInvOETFOpticalScale"))
    {
      if (CFEqual(a2, @"DisableDither"))
      {
        if ((const __CFBoolean *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
          a3 = (const __CFBoolean *)*MEMORY[0x1E4F1CFC8];
        }
        if (a3)
        {
          CFTypeID v71 = CFBooleanGetTypeID();
          if (v71 == CFGetTypeID(a3))
          {
            int v72 = CFBooleanGetValue(a3);
            if (v72 != *(unsigned __int8 *)(a1 + 208))
            {
              uint64_t v12 = 0;
              *(unsigned char *)(a1 + 208) = v72;
              goto LABEL_55;
            }
            goto LABEL_24;
          }
        }
        goto LABEL_303;
      }
      if (CFEqual(a2, @"vImageFlags"))
      {
        uint64_t UInt64 = 0;
        uint64_t v12 = 0;
        if (a3 && (const __CFBoolean *)*MEMORY[0x1E4F1D260] != a3)
        {
          uint64_t UInt64 = *(void *)(a1 + 216);
          CFTypeID v76 = CFNumberGetTypeID();
          if (v76 == CFGetTypeID(a3))
          {
            uint64_t UInt64 = FigCFNumberGetUInt64();
            uint64_t v12 = 0;
          }
          else
          {
            uint64_t v12 = FigSignalErrorAt();
          }
        }
        if (UInt64 == *(void *)(a1 + 216)) {
          goto LABEL_305;
        }
        *(void *)(a1 + 216) = UInt64;
        goto LABEL_55;
      }
      if (CFEqual(a2, @"AllowFallbacks"))
      {
        if (a3 && (const __CFBoolean *)*MEMORY[0x1E4F1D260] != a3
          || (!globalAllowFallbacks
            ? (uint64_t v77 = (const __CFBoolean **)MEMORY[0x1E4F1CFC8])
            : (uint64_t v77 = (const __CFBoolean **)MEMORY[0x1E4F1CFD0]),
              (a3 = *v77) != 0))
        {
          CFTypeID v78 = CFBooleanGetTypeID();
          if (v78 == CFGetTypeID(a3))
          {
            int v79 = CFBooleanGetValue(a3);
            if (v79 != *(unsigned __int8 *)(a1 + 49))
            {
              uint64_t v12 = 0;
              *(unsigned char *)(a1 + 49) = v79;
              goto LABEL_55;
            }
            goto LABEL_24;
          }
        }
        goto LABEL_303;
      }
      if (!CFEqual(a2, @"ReducedPrecisionFractionalOffsets"))
      {
        if (CFEqual(a2, @"WriteBlackPixelsOutsideDestRect"))
        {
          if (!a3) {
            goto LABEL_303;
          }
          CFTypeID v85 = CFBooleanGetTypeID();
          if (v85 != CFGetTypeID(a3)) {
            goto LABEL_303;
          }
          *(unsigned char *)(a1 + 232) = CFBooleanGetValue(a3);
        }
        else if (CFEqual(a2, @"PreferRenderKernel"))
        {
          if (!a3) {
            goto LABEL_303;
          }
          CFTypeID v86 = CFBooleanGetTypeID();
          if (v86 != CFGetTypeID(a3)) {
            goto LABEL_303;
          }
          *(unsigned char *)(a1 + 234) = CFBooleanGetValue(a3);
        }
        else
        {
          if (!CFEqual(a2, @"AllowLowQualityScaling"))
          {
            if (!CFEqual(a2, @"Label"))
            {
              if (!CFEqual(a2, @"DownsamplingMode"))
              {
                uint64_t v12 = 4294954396;
                goto LABEL_305;
              }
              if (!a3 || FigCFEqual()) {
                goto LABEL_293;
              }
              if (FigCFEqual())
              {
                uint64_t v12 = 0;
                *(unsigned char *)(a1 + 131) = 1;
                goto LABEL_305;
              }
              if (FigCFEqual())
              {
LABEL_293:
                uint64_t v12 = 0;
                *(unsigned char *)(a1 + 131) = 0;
                goto LABEL_305;
              }
              goto LABEL_303;
            }
            if (a3 && !FigCFEqual())
            {
              CFTypeID v95 = CFGetTypeID(a3);
              if (v95 != CFStringGetTypeID()) {
                goto LABEL_303;
              }
              uint64_t v96 = *(const void **)(a1 + 24);
              *(void *)(a1 + 24) = a3;
              CFRetain(a3);
              if (v96) {
                CFRelease(v96);
              }
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 144), a2, a3);
              uint64_t v92 = *(const void **)(a1 + 136);
              if (!v92) {
                goto LABEL_24;
              }
              CFStringRef v93 = a2;
              CFBooleanRef v94 = a3;
            }
            else
            {
              uint64_t v91 = *(const void **)(a1 + 24);
              if (v91)
              {
                CFRelease(v91);
                *(void *)(a1 + 24) = 0;
              }
              CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 144), a2);
              uint64_t v92 = *(const void **)(a1 + 136);
              if (!v92) {
                goto LABEL_24;
              }
              CFStringRef v93 = a2;
              CFBooleanRef v94 = 0;
            }
            uint64_t v19 = VTSessionSetProperty(v92, v93, v94);
            goto LABEL_304;
          }
          if (!a3) {
            goto LABEL_303;
          }
          CFTypeID v87 = CFBooleanGetTypeID();
          if (v87 != CFGetTypeID(a3)) {
            goto LABEL_303;
          }
          *(unsigned char *)(a1 + 235) = CFBooleanGetValue(a3);
        }
        uint64_t v88 = *(const void **)(a1 + 136);
        if (v88) {
          VTSessionSetProperty(v88, a2, a3);
        }
        uint64_t v89 = *(__CFDictionary **)(a1 + 144);
        if (v89) {
          CFDictionarySetValue(v89, a2, a3);
        }
        goto LABEL_24;
      }
      if ((const __CFBoolean *)*MEMORY[0x1E4F1D260] == a3 || a3 == 0) {
        a3 = (const __CFBoolean *)*MEMORY[0x1E4F1CFC8];
      }
      if (!a3) {
        goto LABEL_303;
      }
      CFTypeID v81 = CFGetTypeID(a3);
      if (v81 != CFBooleanGetTypeID()) {
        goto LABEL_303;
      }
      int v82 = CFBooleanGetValue(a3);
      if (v82 == *(unsigned __int8 *)(a1 + 236)) {
        goto LABEL_24;
      }
      int v83 = v82;
      IOSurfaceAcceleratorCapabilityFractionalunint64_t Dimensions = FigGetIOSurfaceAcceleratorCapabilityFractionalDimensions();
      if (v83 && !IOSurfaceAcceleratorCapabilityFractionalDimensions)
      {
        uint64_t v12 = 4294954394;
        goto LABEL_305;
      }
      *(unsigned char *)(a1 + 236) = v83;
      uint64_t v90 = *(void *)(a1 + 224);
      if (v90)
      {
        uint64_t v12 = VTPixelTransferNodeCelesteRotationSetProperty(v90, @"ReducedPrecisionFractionalOffsets", a3);
        goto LABEL_55;
      }
      goto LABEL_82;
    }
    uint64_t v66 = *(const void **)(a1 + 136);
    if (v66) {
      VTSessionSetProperty(v66, a2, a3);
    }
    uint64_t v67 = *(__CFDictionary **)(a1 + 144);
    if (v67)
    {
      if (a3)
      {
        CFDictionarySetValue(v67, a2, a3);
LABEL_228:
        CFTypeID v73 = CFGetTypeID(a3);
        if (v73 != CFNumberGetTypeID()) {
          goto LABEL_303;
        }
        if (FigCFEqual()) {
          goto LABEL_24;
        }
        long long v21 = *(const void **)(a1 + 200);
        *(void *)(a1 + 200) = a3;
LABEL_79:
        CFRetain(a3);
LABEL_80:
        if (v21) {
          CFRelease(v21);
        }
        goto LABEL_82;
      }
      CFDictionaryRemoveValue(v67, a2);
    }
    else if (a3)
    {
      goto LABEL_228;
    }
    uint64_t v74 = *(const void **)(a1 + 200);
    if (v74)
    {
      CFRelease(v74);
      uint64_t v12 = 0;
      *(void *)(a1 + 200) = 0;
      goto LABEL_305;
    }
    goto LABEL_24;
  }

  return FigSignalErrorAt();
}

uint64_t VTPixelRotationSessionCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  *a4 = 0;
  if (!*(unsigned char *)(a1 + 16))
  {
    if (FigAtomicIncrement32() != 1)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t v9 = fig_log_call_emit_and_clean_up_after_send_and_compose();
      VTPixelTransferSessionThreadBearTrap(v9);
    }
    if (CFEqual(a2, @"FlipHorizontalOrientation"))
    {
      uint64_t v10 = (const CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v11 = *(unsigned __int8 *)(a1 + 56);
LABEL_11:
      uint64_t v12 = (const CFStringRef *)MEMORY[0x1E4F1CFC8];
      BOOL v13 = v11 == 0;
      goto LABEL_12;
    }
    if (CFEqual(a2, @"FlipVerticalOrientation"))
    {
      uint64_t v10 = (const CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v11 = *(unsigned __int8 *)(a1 + 57);
      goto LABEL_11;
    }
    if (CFEqual(a2, @"Rotation"))
    {
      int v16 = *(_DWORD *)(a1 + 52);
      if (v16 > 179)
      {
        if (v16 == 180)
        {
          uint64_t v10 = &kVTRotation_180;
          goto LABEL_14;
        }
        if (v16 == 270)
        {
          uint64_t v10 = &kVTRotation_CCW90;
          goto LABEL_14;
        }
      }
      else
      {
        if (!v16)
        {
          uint64_t v10 = &kVTRotation_0;
          goto LABEL_14;
        }
        if (v16 == 90)
        {
          uint64_t v10 = &kVTRotation_CW90;
          goto LABEL_14;
        }
      }
LABEL_30:
      uint64_t v19 = FigSignalErrorAt();
      goto LABEL_31;
    }
    long long v17 = @"ScalingSupported";
    if (CFEqual(a2, @"ScalingSupported")
      || (long long v17 = @"NonIntegralSourceBoundingOriginSupported",
          CFEqual(a2, @"NonIntegralSourceBoundingOriginSupported")))
    {
      uint64_t v18 = *(void *)(a1 + 224);
      if (!v18)
      {
        uint64_t v10 = (const CFStringRef *)MEMORY[0x1E4F1CFC8];
        goto LABEL_14;
      }
    }
    else
    {
      long long v17 = @"RotationEnableHighSpeedTransfer";
      if (!CFEqual(a2, @"RotationEnableHighSpeedTransfer"))
      {
        long long v17 = @"RotationZeroFillData";
        if (!CFEqual(a2, @"RotationZeroFillData"))
        {
          long long v17 = @"RotationEnableHistogram";
          if (!CFEqual(a2, @"RotationEnableHistogram"))
          {
            long long v17 = @"RotationHistogramData";
            if (!CFEqual(a2, @"RotationHistogramData"))
            {
              long long v17 = @"RotationHistogramRectangle";
              if (!CFEqual(a2, @"RotationHistogramRectangle"))
              {
                if (FigCFEqual())
                {
                  uint64_t UInt64 = *(const void **)(a1 + 104);
                  if (!UInt64) {
                    goto LABEL_16;
                  }
                  goto LABEL_15;
                }
                if (FigCFEqual())
                {
                  uint64_t UInt64 = *(const void **)(a1 + 112);
                  if (!UInt64) {
                    goto LABEL_16;
                  }
                  goto LABEL_15;
                }
                if (FigCFEqual())
                {
                  uint64_t UInt64 = *(const void **)(a1 + 88);
                  if (!UInt64) {
                    goto LABEL_16;
                  }
                  goto LABEL_15;
                }
                if (FigCFEqual())
                {
                  uint64_t UInt64 = *(const void **)(a1 + 96);
                  if (!UInt64) {
                    goto LABEL_16;
                  }
                  goto LABEL_15;
                }
                if (CFEqual(a2, @"ForceDisableVectorInstructions"))
                {
                  uint64_t v10 = (const CFStringRef *)MEMORY[0x1E4F1CFD0];
                  int v11 = *(unsigned __int8 *)(a1 + 129);
                  goto LABEL_11;
                }
                if (CFEqual(a2, @"ForceSingleThreaded"))
                {
                  uint64_t v10 = (const CFStringRef *)MEMORY[0x1E4F1CFD0];
                  int v11 = *(unsigned __int8 *)(a1 + 130);
                  goto LABEL_11;
                }
                if (CFEqual(a2, @"EnableSoftwareTransfer"))
                {
                  uint64_t v10 = (const CFStringRef *)MEMORY[0x1E4F1CFD0];
                  int v11 = *(unsigned __int8 *)(a1 + 132);
                  goto LABEL_11;
                }
                if (CFEqual(a2, @"AllowPixelTransferChain"))
                {
                  uint64_t v10 = (const CFStringRef *)MEMORY[0x1E4F1CFD0];
                  uint64_t v12 = (const CFStringRef *)MEMORY[0x1E4F1CFC8];
                  BOOL v13 = *(void *)(a1 + 40) == 0;
LABEL_12:
                  if (v13) {
                    uint64_t v10 = v12;
                  }
                  goto LABEL_14;
                }
                if (CFEqual(a2, @"AllowPixelTransferGraph"))
                {
                  uint64_t v10 = (const CFStringRef *)MEMORY[0x1E4F1CFD0];
                  int v11 = *(unsigned __int8 *)(a1 + 48);
                  goto LABEL_11;
                }
                if (CFEqual(a2, @"EnableGPUAcceleratedTransfer"))
                {
                  uint64_t v10 = (const CFStringRef *)MEMORY[0x1E4F1CFD0];
                  int v11 = *(unsigned __int8 *)(a1 + 133);
                  goto LABEL_11;
                }
                if (CFEqual(a2, @"SetGPUPriorityLow"))
                {
                  uint64_t v10 = (const CFStringRef *)MEMORY[0x1E4F1CFD0];
                  int v11 = *(unsigned __int8 *)(a1 + 134);
                  goto LABEL_11;
                }
                if (CFEqual(a2, @"EnableHardwareAcceleratedTransfer"))
                {
                  uint64_t v10 = (const CFStringRef *)MEMORY[0x1E4F1CFD0];
                  int v11 = *(unsigned __int8 *)(a1 + 135);
                  goto LABEL_11;
                }
                if (CFEqual(a2, @"PQEOTFOpticalScale"))
                {
                  uint64_t UInt64 = *(const void **)(a1 + 176);
                  if (!UInt64) {
                    goto LABEL_16;
                  }
                  goto LABEL_15;
                }
                if (CFEqual(a2, @"PQInvEOTFOpticalScale"))
                {
                  uint64_t UInt64 = *(const void **)(a1 + 184);
                  if (!UInt64) {
                    goto LABEL_16;
                  }
                  goto LABEL_15;
                }
                if (CFEqual(a2, @"HLGOETFOpticalScale"))
                {
                  uint64_t UInt64 = *(const void **)(a1 + 192);
                  if (!UInt64) {
                    goto LABEL_16;
                  }
                  goto LABEL_15;
                }
                if (CFEqual(a2, @"HLGInvOETFOpticalScale"))
                {
                  uint64_t UInt64 = *(const void **)(a1 + 200);
                  if (!UInt64) {
                    goto LABEL_16;
                  }
                  goto LABEL_15;
                }
                if (CFEqual(a2, @"DisableDither"))
                {
                  uint64_t v10 = (const CFStringRef *)MEMORY[0x1E4F1CFD0];
                  int v11 = *(unsigned __int8 *)(a1 + 208);
                  goto LABEL_11;
                }
                if (CFEqual(a2, @"vImageFlags"))
                {
                  if (!*(void *)(a1 + 216))
                  {
                    uint64_t v15 = 0;
                    *a4 = 0;
                    goto LABEL_17;
                  }
                  uint64_t UInt64 = (const void *)FigCFNumberCreateUInt64();
                  goto LABEL_16;
                }
                if (CFEqual(a2, @"AllowFallbacks"))
                {
                  uint64_t v10 = (const CFStringRef *)MEMORY[0x1E4F1CFD0];
                  int v11 = *(unsigned __int8 *)(a1 + 49);
                  goto LABEL_11;
                }
                if (CFEqual(a2, @"ReducedPrecisionFractionalOffsets"))
                {
                  uint64_t v10 = (const CFStringRef *)MEMORY[0x1E4F1CFD0];
                  int v11 = *(unsigned __int8 *)(a1 + 236);
                  goto LABEL_11;
                }
                if (CFEqual(a2, @"HardwareSupportsFractionalDimensions"))
                {
                  IOSurfaceAcceleratorCapabilityFractionalunint64_t Dimensions = FigGetIOSurfaceAcceleratorCapabilityFractionalDimensions();
                  uint64_t v10 = (const CFStringRef *)MEMORY[0x1E4F1CFD0];
                  if (!IOSurfaceAcceleratorCapabilityFractionalDimensions) {
                    uint64_t v10 = (const CFStringRef *)MEMORY[0x1E4F1CFC8];
                  }
                }
                else
                {
                  if (CFEqual(a2, @"Label"))
                  {
                    uint64_t UInt64 = *(const void **)(a1 + 24);
                    goto LABEL_15;
                  }
                  if (!CFEqual(a2, @"DownsamplingMode"))
                  {
                    if (!CFEqual(a2, @"MostRecentChainDescription"))
                    {
                      uint64_t v15 = 4294954396;
                      goto LABEL_17;
                    }
                    uint64_t UInt64 = *(const void **)(a1 + 40);
                    if (UInt64) {
                      uint64_t UInt64 = VTPixelTransferChainCopyDescriptionChain((uint64_t)UInt64);
                    }
                    goto LABEL_16;
                  }
                  if (*(unsigned char *)(a1 + 131)) {
                    uint64_t v10 = &kVTDownsamplingMode_Average;
                  }
                  else {
                    uint64_t v10 = &kVTDownsamplingMode_Decimate;
                  }
                }
LABEL_14:
                uint64_t UInt64 = *v10;
LABEL_15:
                uint64_t UInt64 = CFRetain(UInt64);
LABEL_16:
                uint64_t v15 = 0;
                *a4 = UInt64;
LABEL_17:
                FigAtomicDecrement32();
                return v15;
              }
            }
          }
        }
      }
      uint64_t v18 = *(void *)(a1 + 224);
      if (!v18) {
        goto LABEL_30;
      }
    }
    uint64_t v19 = VTPixelTransferNodeCelesteRotationCopyProperty(v18, v17, *MEMORY[0x1E4F1CF80], a4);
LABEL_31:
    uint64_t v15 = v19;
    goto LABEL_17;
  }

  return FigSignalErrorAt();
}

uint64_t VTPixelRotationSessionSetProperties(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v3 = a1;
  if (*(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else if (theDict)
  {
    uint64_t v4 = 0;
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)vtPixelRotationSessionSetOneProperty, &v3);
    return v4;
  }
  else
  {
    return 0;
  }
}

uint64_t vtPixelRotationSessionSetOneProperty(const __CFString *a1, const __CFBoolean *a2, uint64_t a3)
{
  uint64_t result = VTPixelRotationSessionSetProperty(*(void *)a3, a1, a2);
  if (!*(_DWORD *)(a3 + 8)) {
    *(_DWORD *)(a3 + 8) = result;
  }
  return result;
}

uint64_t VTPixelRotationSessionCopySerializableProperties()
{
  return FigSignalErrorAt();
}

OSStatus VTPixelRotationSessionRotateImage(VTPixelRotationSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  if (!*((unsigned char *)session + 16) && sourceBuffer && destinationBuffer)
  {
    double Width = (double)CVPixelBufferGetWidth(sourceBuffer);
    double Height = (double)CVPixelBufferGetHeight(sourceBuffer);
    double v8 = (double)CVPixelBufferGetWidth(destinationBuffer);
    double v9 = (double)CVPixelBufferGetHeight(destinationBuffer);
    CFTypeRef v10 = CVBufferCopyAttachment(sourceBuffer, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
    if (v10)
    {
      FigCFDictionaryGetCGFloatIfPresent();
      FigCFDictionaryGetCGFloatIfPresent();
      FigCFDictionaryGetCGFloatIfPresent();
      FigCFDictionaryGetCGFloatIfPresent();
      v16.origin = 0u;
      v16.size_t size = 0u;
      CFMutableDictionaryRef Mutable = 0;
      if (!CGRectIsEmpty(v16))
      {
        int v12 = *((_DWORD *)session + 13);
        if (v12 > 179)
        {
          if (v12 != 270 && v12 != 180) {
            goto LABEL_18;
          }
        }
        else if (v12 && v12 != 90)
        {
          goto LABEL_18;
        }
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          FigCFDictionarySetCGFloat();
          FigCFDictionarySetCGFloat();
          FigCFDictionarySetCGFloat();
          FigCFDictionarySetCGFloat();
        }
      }
    }
    else
    {
      CFMutableDictionaryRef Mutable = 0;
    }
LABEL_18:
    OSStatus v14 = VTPixelRotationSessionRotateSubImage((uint64_t)session, sourceBuffer, destinationBuffer, 0.0, 0.0, Width, Height, 0.0, 0.0, v8, v9);
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v10) {
      CFRelease(v10);
    }
    return v14;
  }

  return FigSignalErrorAt();
}

uint64_t VTPixelRotationSessionRotateSubImage(uint64_t a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3, double a4, double a5, double a6, double a7, float64_t a8, float64_t a9, float64_t a10, float64_t a11)
{
  uint64_t v12 = 0;
  if (pixelBuffer && a3)
  {
    CVPixelBufferGetWidth(pixelBuffer);
    CVPixelBufferGetWidth(a3);
    CVPixelBufferGetHeight(pixelBuffer);
    CVPixelBufferGetHeight(a3);
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    printable4CC(PixelFormatType);
    OSType v24 = CVPixelBufferGetPixelFormatType(a3);
    printable4CC(v24);
    if (a1 && FigAtomicIncrement32() != 1)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t v26 = fig_log_call_emit_and_clean_up_after_send_and_compose();
      VTPixelTransferSessionThreadBearTrap(v26);
    }
    int v27 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    uint64_t v12 = _VTPixelRotationSessionRotateSubImage(a1, pixelBuffer, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    if (*v27 == 1) {
      kdebug_trace();
    }
  }
  if (a1) {
    FigAtomicDecrement32();
  }
  return v12;
}

uint64_t _VTPixelRotationSessionRotateSubImage(uint64_t a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3, double a4, double a5, double a6, double a7, float64_t a8, float64_t a9, float64_t a10, float64_t a11)
{
  CFTypeID v20 = pixelBuffer;
  v280[5] = *MEMORY[0x1E4F143B8];
  *(double *)v251.i64 = a4;
  *(double *)&v251.i64[1] = a5;
  *(double *)v252.i64 = a6;
  *(double *)&v252.i64[1] = a7;
  v249.f64[0] = a8;
  v249.f64[1] = a9;
  v250.f64[0] = a10;
  v250.f64[1] = a11;
  char v248 = 0;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  CFTypeRef Width = (CFTypeRef)CVPixelBufferGetWidth(v20);
  CFTypeRef Height = (CFTypeRef)CVPixelBufferGetHeight(v20);
  OSType v226 = CVPixelBufferGetPixelFormatType(a3);
  CFTypeRef v231 = (CFTypeRef)CVPixelBufferGetWidth(a3);
  *(void *)unint64_t v228 = CVPixelBufferGetHeight(a3);
  char buffer = CVPixelBufferGetIOSurface(v20);
  IOSurface = CVPixelBufferGetIOSurface(a3);
  CFStringRef v21 = (const __CFString *)*MEMORY[0x1E4F24A90];
  CFTypeRef v242 = CVBufferCopyAttachment(v20, (CFStringRef)*MEMORY[0x1E4F24A90], 0);
  CFStringRef v22 = (const __CFString *)*MEMORY[0x1E4F24BC8];
  CFTypeRef v245 = CVBufferCopyAttachment(v20, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
  CFStringRef v23 = (const __CFString *)*MEMORY[0x1E4F24B78];
  CFTypeRef v244 = CVBufferCopyAttachment(v20, (CFStringRef)*MEMORY[0x1E4F24B78], 0);
  CFStringRef v24 = (const __CFString *)*MEMORY[0x1E4F24C18];
  CFTypeRef v25 = CVBufferCopyAttachment(v20, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
  CFStringRef v26 = (const __CFString *)*MEMORY[0x1E4F24B70];
  CFTypeRef v241 = CVBufferCopyAttachment(v20, (CFStringRef)*MEMORY[0x1E4F24B70], 0);
  CFStringRef v27 = (const __CFString *)*MEMORY[0x1E4F24A00];
  CFTypeRef v243 = CVBufferCopyAttachment(v20, (CFStringRef)*MEMORY[0x1E4F24A00], 0);
  CFAllocatorRef v28 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef cf = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAbsoluteTimeGetCurrent();
  if (*(unsigned char *)(a1 + 16)
    || (CFStringRef v216 = v27, v217 = v23, v220 = v21, key = v24, v218 = v26, allocator = v28, v222 = v22, CFEqual(v20, a3)))
  {
    uint64_t v29 = FigSignalErrorAt();
    CFDictionaryRef v30 = 0;
    CFDictionaryRef v31 = 0;
    int v32 = 0;
    long long v33 = 0;
    uint64_t v35 = v241;
    uint64_t v34 = v242;
    CFMutableDictionaryRef v36 = cf;
    uint64_t v37 = v25;
    goto LABEL_4;
  }
  pixelBuffera = a3;
  if (buffer) {
    IOSurfaceGetID(buffer);
  }
  if (IOSurface) {
    IOSurfaceGetID(IOSurface);
  }
  CFTypeRef v213 = v25;
  uint64_t v39 = (void *)*MEMORY[0x1E4F1CFD0];
  FigCFDictionarySetValue();
  uint64_t v40 = a1;
  FigCFDictionarySetBoolean();
  int v41 = *(_DWORD *)(a1 + 52);
  if (v41 > 179)
  {
    if (v41 != 180 && v41 != 270) {
      goto LABEL_157;
    }
  }
  else if (v41 && v41 != 90)
  {
LABEL_157:
    uint64_t v29 = FigSignalErrorAt();
    CFDictionaryRef v30 = 0;
    CFDictionaryRef v31 = 0;
    int v32 = 0;
    long long v33 = 0;
    uint64_t v35 = v241;
    uint64_t v34 = v242;
    uint64_t v37 = v213;
    CFMutableDictionaryRef v36 = cf;
    goto LABEL_4;
  }
  CFDictionaryRef value = v39;
  if (a6 >= 0.0) {
    double v42 = a6;
  }
  else {
    double v42 = -a6;
  }
  double v43 = -0.0;
  if (a6 >= 0.0) {
    double v44 = -0.0;
  }
  else {
    double v44 = a6;
  }
  double v45 = a4 + v44;
  if (a7 >= 0.0) {
    double v46 = a7;
  }
  else {
    double v46 = -a7;
  }
  if (a7 >= 0.0) {
    double v47 = -0.0;
  }
  else {
    double v47 = a7;
  }
  double v48 = a5 + v47;
  double v49 = v42;
  *(double *)v251.i64 = v45;
  *(double *)&v251.i64[1] = v48;
  *(double *)v252.i64 = v42;
  *(double *)&v252.i64[1] = v46;
  double v211 = v46;
  if (a10 >= 0.0) {
    double v50 = a10;
  }
  else {
    double v50 = -a10;
  }
  if (a10 >= 0.0) {
    double v51 = -0.0;
  }
  else {
    double v51 = a10;
  }
  double v52 = a8 + v51;
  if (a11 < 0.0) {
    double v43 = a11;
  }
  double v53 = a9 + v43;
  v249.f64[0] = a8 + v51;
  v249.f64[1] = v53;
  if (a11 >= 0.0) {
    double v54 = a11;
  }
  else {
    double v54 = -a11;
  }
  v250.f64[0] = v50;
  v250.f64[1] = v54;
  OSType v55 = CVPixelBufferGetPixelFormatType(v20);
  OSType v56 = CVPixelBufferGetPixelFormatType(a3);
  CFTypeRef v257 = 0;
  CFTypeRef v253 = 0;
  v273.i8[0] = 0;
  LOBYTE(v271) = 0;
  v280[0] = 0;
  v279[0] = 0;
  *(void *)&long long v277 = 0;
  *(void *)&long long v275 = 0;
  CFDictionaryRef v57 = CVPixelFormatDescriptionCreateWithPixelFormatType(v28, v55);
  FigCFDictionaryGetBooleanIfPresent();
  if (v57) {
    CFRelease(v57);
  }
  CFDictionaryRef v58 = CVPixelFormatDescriptionCreateWithPixelFormatType(v28, v56);
  FigCFDictionaryGetBooleanIfPresent();
  if (v58) {
    CFRelease(v58);
  }
  CFTypeRef v59 = CVBufferCopyAttachment(v20, key, 0);
  VTCreateYCbCrCFStringsAndProvideDefaults(v59, v273.u8[0], *(const void **)(a1 + 96), v271, &v257, &v253);
  CFTypeID v60 = (CGColorSpace *)CVBufferCopyAttachment(v20, v27, 0);
  CFTypeRef v61 = CVBufferCopyAttachment(v20, v218, 0);
  CFTypeRef v62 = CVBufferCopyAttachment(v20, v21, 0);
  CFTypeRef v63 = CVBufferCopyAttachment(v20, v222, 0);
  CFTypeRef v64 = CVBufferCopyAttachment(v20, v217, 0);
  VTCreateColorAttachments((unint64_t)v60, (unint64_t)v61, v62, v63, v64, v257, v55, 0, *(void *)(a1 + 88), *(const void **)(a1 + 104), *(const void **)(a1 + 112), 0, v253, v56, 0, (__CFDictionary **)v280, v279);
  VTCreateColorSpacesFromDictionaries((CFDictionaryRef)v280[0], v279[0], &v277, &v275);
  if (FigCFEqual()) {
    BOOL IsHDR = 1;
  }
  else {
    BOOL IsHDR = FigCFEqual() != 0;
  }
  if (FigCFEqual()) {
    BOOL v66 = 1;
  }
  else {
    BOOL v66 = FigCFEqual() != 0;
  }
  if (v60) {
    char v67 = IsHDR;
  }
  else {
    char v67 = 1;
  }
  if ((v67 & 1) == 0) {
    BOOL IsHDR = CGColorSpaceIsHDR(v60);
  }
  size_t v68 = v280[0];
  v280[0] = 0;
  CFDictionaryRef buffera = (const __CFDictionary *)v68;
  IOSurfaceRef v240 = v279[0];
  v279[0] = 0;
  if (IsHDR || v66) {
    FigCFEqual();
  }
  __int16 v214 = (const void *)v277;
  *(void *)&long long v277 = 0;
  __int16 v212 = (const void *)v275;
  *(void *)&long long v275 = 0;
  if (v257) {
    CFRelease(v257);
  }
  if (v253) {
    CFRelease(v253);
  }
  if (v59) {
    CFRelease(v59);
  }
  if (v60) {
    CFRelease(v60);
  }
  if (v61) {
    CFRelease(v61);
  }
  if (v62) {
    CFRelease(v62);
  }
  CFDictionaryRef v31 = v240;
  if (v63) {
    CFRelease(v63);
  }
  if (v64) {
    CFRelease(v64);
  }
  if ((void)v277) {
    CFRelease((CFTypeRef)v277);
  }
  if ((void)v275) {
    CFRelease((CFTypeRef)v275);
  }
  BOOL v215 = 0;
  if (v214 && v212) {
    BOOL v215 = FigCFEqual() == 0;
  }
  CFDictionaryRef v69 = CVBufferCopyAttachments(v20, kCVAttachmentMode_ShouldPropagate);
  if ((unint64_t)v69 | (unint64_t)v240)
  {
    uint64_t v70 = v69;
    CFMutableArrayRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (v70) {
      CFRelease(v70);
    }
    CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E4F24A78]);
    CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E4F24B98]);
    CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E4F24AD8]);
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    if (MutableCopy)
    {
      CVBufferSetAttachments(pixelBuffera, MutableCopy, kCVAttachmentMode_ShouldPropagate);
      CFRelease(MutableCopy);
    }
  }
  char v72 = *(unsigned char *)(a1 + 32);
  if (!v72)
  {
    char v81 = 0;
    goto LABEL_116;
  }
  uint64_t v73 = *(void *)(a1 + 88);
  uint64_t v74 = *(void *)(a1 + 96);
  uint64_t v76 = *(void *)(a1 + 104);
  uint64_t v75 = *(void *)(a1 + 112);
  int v77 = *(_DWORD *)(a1 + 240);
  if (v77 != CVPixelBufferGetPixelFormatType(v20)
    || (int v78 = *(_DWORD *)(a1 + 304), v78 != CVPixelBufferGetPixelFormatType(pixelBuffera)))
  {
    char v81 = 0;
    CFDictionaryRef v31 = v240;
    goto LABEL_116;
  }
  CFDictionaryRef v31 = v240;
  if (!v74)
  {
    if (v73 || (char v81 = 1, v76) && v75)
    {
      CFTypeRef v123 = CVBufferCopyAttachment(v20, v216, 0);
      CFTypeRef v124 = CVBufferCopyAttachment(v20, v218, 0);
      CFTypeRef v125 = CVBufferCopyAttachment(v20, v220, 0);
      CFTypeRef v126 = CVBufferCopyAttachment(v20, v222, 0);
      CFTypeRef v79 = CVBufferCopyAttachment(v20, v217, 0);
      if (FigCFEqual()
        && FigCFEqual()
        && FigCFEqual()
        && FigCFEqual())
      {
        if (FigCFEqual()) {
          char v127 = v72;
        }
        else {
          char v127 = 0;
        }
      }
      else
      {
        char v127 = 0;
      }
      *(unsigned char *)(a1 + 32) = v127;
      uint64_t v34 = v242;
      if (v123) {
        CFRelease(v123);
      }
      if (v124) {
        CFRelease(v124);
      }
      uint64_t v37 = v213;
      if (v125) {
        CFRelease(v125);
      }
      uint64_t v35 = v241;
      uint64_t v40 = a1;
      if (v126) {
        CFRelease(v126);
      }
      goto LABEL_248;
    }
LABEL_116:
    *(unsigned char *)(a1 + 32) = v81;
    uint64_t v35 = v241;
    uint64_t v34 = v242;
    uint64_t v37 = v213;
    size_t v82 = (size_t)Height;
    goto LABEL_117;
  }
  CFTypeRef v79 = CVBufferCopyAttachment(v20, key, 0);
  if (FigCFEqual()) {
    char v80 = v72;
  }
  else {
    char v80 = 0;
  }
  *(unsigned char *)(a1 + 32) = v80;
  uint64_t v35 = v241;
  uint64_t v34 = v242;
  uint64_t v37 = v213;
LABEL_248:
  size_t v82 = (size_t)Height;
  if (v79) {
    CFRelease(v79);
  }
LABEL_117:
  *(_DWORD *)(v40 + 240) = PixelFormatType;
  *(void *)(v40 + 248) = Width;
  *(void *)(v40 + 256) = v82;
  int64x2_t v83 = v252;
  *(int64x2_t *)(v40 + 272) = v251;
  *(int64x2_t *)(v40 + 288) = v83;
  uint64_t v84 = *(const void **)(v40 + 376);
  if (v84) {
    CFRelease(v84);
  }
  CFTypeID v85 = *(const void **)(v40 + 384);
  if (v85) {
    CFRelease(v85);
  }
  CFTypeID v86 = *(const void **)(v40 + 392);
  if (v86) {
    CFRelease(v86);
  }
  CFTypeID v87 = *(const void **)(v40 + 400);
  if (v87) {
    CFRelease(v87);
  }
  uint64_t v88 = *(const void **)(v40 + 408);
  if (v88) {
    CFRelease(v88);
  }
  uint64_t v89 = *(const void **)(v40 + 416);
  if (v89) {
    CFRelease(v89);
  }
  CFTypeRef v90 = v243;
  if (v243) {
    CFTypeRef v90 = CFRetain(v243);
  }
  *(void *)(v40 + 376) = v90;
  if (v35) {
    CFTypeRef v91 = CFRetain(v35);
  }
  else {
    CFTypeRef v91 = 0;
  }
  *(void *)(v40 + 384) = v91;
  if (v37) {
    CFTypeRef v92 = CFRetain(v37);
  }
  else {
    CFTypeRef v92 = 0;
  }
  *(void *)(v40 + 392) = v92;
  if (v34) {
    CFTypeRef v93 = CFRetain(v34);
  }
  else {
    CFTypeRef v93 = 0;
  }
  *(void *)(v40 + 400) = v93;
  CFTypeRef v94 = v245;
  if (v245) {
    CFTypeRef v94 = CFRetain(v245);
  }
  *(void *)(v40 + 408) = v94;
  CFTypeRef v95 = v244;
  if (v244) {
    CFTypeRef v95 = CFRetain(v244);
  }
  *(void *)(v40 + 416) = v95;
  *(_DWORD *)(v40 + 304) = v226;
  *(void *)(v40 + 312) = v231;
  *(void *)(v40 + 320) = *(void *)v228;
  float64x2_t v96 = v250;
  *(float64x2_t *)(v40 + 336) = v249;
  *(float64x2_t *)(v40 + 352) = v96;
  if (*(unsigned char *)(v40 + 32))
  {
    uint64_t v29 = 0;
  }
  else
  {
    if (*(unsigned char *)(v40 + 48))
    {
      CFTypeRef v257 = Width;
      size_t v258 = v82;
      int64x2_t v259 = v251;
      int64x2_t v260 = v252;
      CFTypeRef v253 = v231;
      size_t v254 = *(void *)v228;
      float64x2_t v255 = v249;
      float64x2_t v256 = v250;
      if (*(unsigned char *)(v40 + 133) && !*(void *)(v40 + 136) && !VTAvoidHardwarePixelTransfer())
      {
        VTMetalTransferSessionCreate((uint64_t)allocator, 0, v40 + 136);
        VTMetalTransferSessionSetProperties(*(void *)(v40 + 136), *(void *)(v40 + 144));
      }
      FigRegisterIOSurfacePixelTransferCapability();
    }
    uint64_t v29 = 0;
    CFArrayRef v128 = *(const __CFArray **)(v40 + 40);
    if (v128)
    {
      if (!VTPixelTransferChainHasNodes(v128))
      {
        uint64_t v29 = vtPixelRotation_BuildChain(*(void *)(v40 + 40), v20, pixelBuffera, v31, v215, *(unsigned __int8 *)(v40 + 135), *(unsigned __int8 *)(v40 + 133), *(_DWORD *)(v40 + 52), v45, v48, v49, v211, v52, v53, v50, v54, *(_WORD *)(v40 + 56), HIBYTE(*(_WORD *)(v40 + 56)), *(void *)(v40 + 144),
                *(unsigned char *)(v40 + 134),
                a1 + 240,
                &v248);
        if (v29)
        {
          uint64_t v129 = *(const void **)(v40 + 40);
          if (v129)
          {
            CFRelease(v129);
            *(void *)(v40 + 40) = 0;
          }
        }
      }
    }
  }
  uint64_t v97 = *(const void **)(v40 + 40);
  if (v97 && !v248)
  {
    int v98 = vtPixelRotationChainDoTransfer((uint64_t)v97, v20, (long long *)v251.i8, pixelBuffera, (long long *)&v249);
    uint64_t v97 = *(const void **)(v40 + 40);
    if (v98)
    {
      if (v97)
      {
        CFRelease(v97);
        *(void *)(v40 + 40) = 0;
      }
      goto LABEL_160;
    }
    uint64_t v29 = 0;
  }
  if (v97) {
    goto LABEL_221;
  }
LABEL_160:
  signed int v99 = CVPixelBufferGetPixelFormatType(v20);
  memset(v280, 0, 32);
  memset(v279, 0, sizeof(v279));
  long long v277 = 0u;
  long long v278 = 0u;
  long long v275 = 0u;
  long long v276 = 0u;
  int64x2_t v273 = 0u;
  long long v274 = 0u;
  long long v271 = 0u;
  long long v272 = 0u;
  int64x2_t v269 = 0u;
  long long v270 = 0u;
  long long v267 = 0u;
  long long v268 = 0u;
  *(unsigned char *)(v40 + 233) = 0;
  if (*(unsigned char *)(v40 + 135) && !VTAvoidHardwarePixelTransfer())
  {
    uint64_t v29 = vt_Rotate_Celeste(*(void *)(v40 + 224), v20, buffera, pixelBuffera, v45, v48, v49, v211, v52, v53, v50, v54, v31, *(_DWORD *)(v40 + 52), *(unsigned __int8 *)(v40 + 56), *(unsigned __int8 *)(v40 + 57));
    if (!v29) {
      goto LABEL_220;
    }
  }
  else
  {
    uint64_t v29 = 0;
  }
  if (!*(unsigned char *)(v40 + 133)) {
    goto LABEL_186;
  }
  uint64_t v100 = (const __CFArray **)(v40 + 136);
  if (*(void *)(v40 + 136)) {
    goto LABEL_168;
  }
  if (!VTAvoidHardwarePixelTransfer())
  {
    VTMetalTransferSessionCreate((uint64_t)allocator, 0, v40 + 136);
    VTMetalTransferSessionSetProperties(*(void *)(v40 + 136), *(void *)(v40 + 144));
  }
  if (*v100)
  {
LABEL_168:
    signed int v229 = v99;
    uint64_t v101 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    uint64_t v102 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v103 = CFDictionaryCreateMutable(allocator, 0, v101, v102);
    uint64_t v104 = CFDictionaryCreateMutable(allocator, 0, v101, v102);
    uint64_t v105 = v40;
    uint64_t v106 = CFDictionaryGetValue(v31, v220);
    uint64_t v107 = CFDictionaryGetValue(v31, v222);
    int v225 = (void *)CFDictionaryGetValue(v31, key);
    unsigned int v227 = (void *)CFDictionaryGetValue(v31, v218);
    if (*(_DWORD *)(v105 + 52)) {
      FigCFDictionarySetInt();
    }
    if (*(unsigned char *)(a1 + 56)) {
      CFDictionarySetValue(v103, @"FlipHorizontalOrientation", value);
    }
    unsigned int v232 = v104;
    if (*(unsigned char *)(a1 + 57)) {
      CFDictionarySetValue(v103, @"FlipVerticalOrientation", value);
    }
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    int v234 = v103;
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
    if (v106) {
      CFDictionarySetValue(v104, v220, v106);
    }
    if (v107) {
      CFDictionarySetValue(v104, v222, v107);
    }
    uint64_t v35 = v241;
    uint64_t v34 = v242;
    CFDictionaryRef v31 = v240;
    uint64_t v40 = a1;
    if (v225) {
      CFDictionarySetValue(v104, key, v225);
    }
    if (v227) {
      CFDictionarySetValue(v104, v218, v227);
    }
    CFDictionarySetValue(Mutable, @"SourceAmendments", v234);
    CFDictionarySetValue(Mutable, @"DestinationAmendments", v104);
    if (*(unsigned char *)(a1 + 134)) {
      CFDictionarySetValue(Mutable, @"SetGPUPriorityLow", value);
    }
    uint64_t v29 = VTMetalTransferSessionTransferImageSync(*v100, v20, pixelBuffera, Mutable);
    if (!v29)
    {
      uint64_t v108 = 0;
      *(unsigned char *)(a1 + 233) = 1;
LABEL_212:
      uint64_t v122 = Mutable;
      if (!Mutable)
      {
LABEL_214:
        if (v234) {
          CFRelease(v234);
        }
        if (v232) {
          CFRelease(v232);
        }
        if (v108) {
          CFRelease(v108);
        }
        goto LABEL_220;
      }
LABEL_213:
      CFRelease(v122);
      goto LABEL_214;
    }
    signed int v99 = v229;
  }
  else
  {
LABEL_186:
    int v234 = 0;
    CFMutableDictionaryRef Mutable = 0;
    unsigned int v232 = 0;
  }
  if (!*(unsigned char *)(v40 + 132))
  {
LABEL_199:
    uint64_t v29 = FigSignalErrorAt();
LABEL_200:
    uint64_t v108 = 0;
    goto LABEL_212;
  }
  CFDictionaryGetValue(buffera, v220);
  if (FigCFEqual())
  {
    CFDictionaryGetValue(buffera, v222);
    if (FigCFEqual())
    {
      CFDictionaryGetValue(v31, v220);
      if (FigCFEqual())
      {
        CFDictionaryGetValue(v31, v222);
        if (FigCFEqual())
        {
          if (v49 == v50 && v211 == v54 && !*(_DWORD *)(v40 + 52) && !*(unsigned char *)(v40 + 56) && !*(unsigned char *)(v40 + 57))
          {
            OSType v138 = CVPixelBufferGetPixelFormatType(v20);
            OSType v230 = CVPixelBufferGetPixelFormatType(pixelBuffera);
            CVPixelBufferLockBaseAddress(v20, 1uLL);
            CVPixelBufferLockBaseAddress(pixelBuffera, 0);
            CFTypeRef v257 = (CFTypeRef)CVPixelBufferGetWidth(v20);
            size_t v258 = CVPixelBufferGetHeight(v20);
            v259.i64[0] = (uint64_t)v49;
            v259.i64[1] = (uint64_t)v211;
            v260.i64[0] = (uint64_t)v45;
            v260.i64[1] = (uint64_t)v48;
            CFTypeRef v253 = (CFTypeRef)CVPixelBufferGetWidth(pixelBuffera);
            size_t v254 = CVPixelBufferGetHeight(pixelBuffera);
            *(void *)&v255.f64[0] = (uint64_t)v50;
            *(void *)&v255.f64[1] = (uint64_t)v54;
            *(void *)&v256.f64[0] = (uint64_t)v52;
            *(void *)&v256.f64[1] = (uint64_t)v53;
            size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v20, 0);
            v266[0] = BytesPerRowOfPlane;
            size_t v140 = CVPixelBufferGetBytesPerRowOfPlane(v20, 1uLL);
            v266[1] = v140;
            size_t v141 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffera, 0);
            v265[0] = v141;
            size_t v142 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffera, 1uLL);
            v265[1] = v142;
            v264[0] = CVPixelBufferGetBaseAddressOfPlane(v20, 0);
            v264[1] = CVPixelBufferGetBaseAddressOfPlane(v20, 1uLL);
            v263[0] = CVPixelBufferGetBaseAddressOfPlane(pixelBuffera, 0);
            v263[1] = CVPixelBufferGetBaseAddressOfPlane(pixelBuffera, 1uLL);
            v262[0] = CVPixelBufferGetHeightOfPlane(v20, 0) * BytesPerRowOfPlane;
            v262[1] = CVPixelBufferGetHeightOfPlane(v20, 1uLL) * v140;
            v261[0] = CVPixelBufferGetHeightOfPlane(pixelBuffera, 0) * v141;
            v261[1] = CVPixelBufferGetHeightOfPlane(pixelBuffera, 1uLL) * v142;
            uint64_t v143 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            uint64_t v108 = v143;
            uint64_t v144 = *(const void **)(a1 + 176);
            if (v144) {
              CFDictionarySetValue(v143, @"kCGPQEOTFOpticalScale", v144);
            }
            float v145 = *(const void **)(a1 + 184);
            if (v145) {
              CFDictionarySetValue(v108, @"kCGPQInvEOTFOpticalScale", v145);
            }
            double v146 = *(const void **)(a1 + 192);
            uint64_t v34 = v242;
            CFDictionaryRef v31 = v240;
            if (v146) {
              CFDictionarySetValue(v108, @"kCGHLGOETFOpticalScale", v146);
            }
            double v147 = *(const void **)(a1 + 200);
            if (v147) {
              CFDictionarySetValue(v108, @"kCGHLGInvOETFOpticalScale", v147);
            }
            uint64_t v148 = a1;
            double v149 = (void *)(a1 + 152);
            if (!*(void *)(a1 + 152))
            {
              uint64_t v29 = VTPixelBlitterColorHandlingOptimized_setup(v138, buffera, v230, v240, v108, *(unsigned __int8 *)(a1 + 129), *(unsigned __int8 *)(a1 + 130), v149, (void *)(a1 + 168), 0, (void (__cdecl **)(void *))(a1 + 160));
              if (v29) {
                goto LABEL_296;
              }
              uint64_t v148 = a1;
            }
            double v150 = *(uint64_t (**)(void, CFTypeRef *, void *, void *, void *, CFTypeRef *, void *, void *, void *))(v148 + 168);
            if (v150) {
              uint64_t v29 = v150(*v149, &v257, v264, v266, v262, &v253, v263, v265, v261);
            }
            CVPixelBufferUnlockBaseAddress(v20, 1uLL);
            CVPixelBufferUnlockBaseAddress(pixelBuffera, 0);
LABEL_296:
            uint64_t v122 = Mutable;
            uint64_t v35 = v241;
            uint64_t v40 = a1;
            if (!Mutable) {
              goto LABEL_214;
            }
            goto LABEL_213;
          }
        }
      }
    }
  }
  if (*(unsigned char *)(v40 + 56) && *(unsigned char *)(v40 + 57) || !VTDoColorDictionariesMatch(buffera, v31)) {
    goto LABEL_199;
  }
  double v109 = v49;
  double v110 = floor(v45);
  double v111 = floor(v48);
  double v112 = ceil(v45 + v109) - v110;
  double v113 = ceil(v48 + v211) - v111;
  double v114 = v54;
  double v115 = floor(v52);
  double v116 = v50;
  double v117 = floor(v53);
  double v118 = ceil(v52 + v116) - v115;
  double v119 = ceil(v53 + v114) - v117;
  if (vtPixelRotation_IsValidForSoftware(*(_DWORD *)(v40 + 52), v20, pixelBuffera, v110, v111, v112, v113, v115, v117, v118, v119))
  {
    size_t PlaneCount = 1;
    CVPixelBufferLockBaseAddress(v20, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffera, 0);
    if (CVPixelBufferIsPlanar(v20)) {
      size_t PlaneCount = CVPixelBufferGetPlaneCount(v20);
    }
    uint64_t v29 = vtPixelRotationSession_PrepareRotationParameters(v20, PlaneCount, v280, (size_t *)v279, (void **)&v275, (size_t *)&v277, (OSType *)(v40 + 72), (void *)(v40 + 64), v110, v111, v112, v113);
    if (v29) {
      goto LABEL_258;
    }
    size_t v121 = CVPixelBufferIsPlanar(pixelBuffera) ? CVPixelBufferGetPlaneCount(pixelBuffera) : 1;
    uint64_t v29 = vtPixelRotationSession_PrepareRotationParameters(pixelBuffera, v121, (size_t *)&v273, (size_t *)&v271, (void **)&v267, (size_t *)&v269, (OSType *)(v40 + 72), (void *)(v40 + 64), v115, v117, v118, v119);
    if (v29) {
      goto LABEL_258;
    }
    int v130 = *(_DWORD *)(v40 + 52);
    if (v130)
    {
      if (v99 <= 1815491697)
      {
        if (v99 > 1278226533)
        {
          if (v99 > 1647534391)
          {
            if (v99 > 1717856626)
            {
              if (v99 != 1717856627)
              {
                if (v99 == 1751410032) {
                  goto LABEL_383;
                }
                int v131 = 1751411059;
                goto LABEL_331;
              }
              goto LABEL_401;
            }
            uint64_t v135 = v20;
            if (v99 != 1647534392)
            {
              signed int v136 = v99;
              int v137 = 1717855600;
LABEL_365:
              uint64_t v35 = v241;
              uint64_t v34 = v242;
              CFDictionaryRef v31 = v240;
              uint64_t v40 = a1;
              CFTypeID v20 = v135;
              if (v136 != v137) {
                goto LABEL_440;
              }
              goto LABEL_401;
            }
            uint64_t v29 = vt_Rotate_b3a8((vImagePixelCount *)&v273, (vImagePixelCount *)&v271, (size_t *)&v277, (uint64_t)&v275, (size_t *)&v269, (uint64_t)&v267, v130);
            uint64_t v35 = v241;
            uint64_t v34 = v242;
            CFDictionaryRef v31 = v240;
            uint64_t v40 = a1;
            if (v29) {
              goto LABEL_258;
            }
            int v188 = *(unsigned __int8 *)(a1 + 56);
            int v189 = *(unsigned __int8 *)(a1 + 57);
            if (!(v188 | v189)) {
              goto LABEL_449;
            }
            uint64_t v185 = vt_Flip_b3a8(v273.i64, (uint64_t *)&v271, v269.i64, (uint64_t *)&v267, v269.i64, (uint64_t *)&v267, v188, v189);
            goto LABEL_477;
          }
          if (v99 <= 1278226741)
          {
            if (v99 != 1278226534)
            {
              int v131 = 1278226536;
LABEL_331:
              if (v99 != v131) {
                goto LABEL_440;
              }
LABEL_383:
              uint64_t v29 = vt_Rotate_16((vImagePixelCount *)&v273, (vImagePixelCount *)&v271, (size_t *)&v277, (void **)&v275, (size_t *)&v269, (void **)&v267, v130);
              if (!v29)
              {
                int v172 = *(unsigned __int8 *)(v40 + 56);
                int v173 = *(unsigned __int8 *)(v40 + 57);
                if (v172 | v173)
                {
                  uint64_t v154 = vt_Flip_16(v273.i64, (uint64_t *)&v271, v269.i64, (char **)&v267, v269.i64, (char **)&v267, v172, v173);
                  goto LABEL_513;
                }
LABEL_403:
                uint64_t v29 = 0;
LABEL_514:
                uint64_t v35 = v241;
                uint64_t v34 = v242;
                CFDictionaryRef v31 = v240;
                uint64_t v40 = a1;
                goto LABEL_258;
              }
              goto LABEL_258;
            }
LABEL_401:
            uint64_t v29 = vt_Rotate_32((vImagePixelCount *)&v273, (vImagePixelCount *)&v271, (size_t *)&v277, (void **)&v275, (size_t *)&v269, (void **)&v267, v130);
            if (!v29)
            {
              int v178 = *(unsigned __int8 *)(v40 + 56);
              int v179 = *(unsigned __int8 *)(v40 + 57);
              if (v178 | v179)
              {
                uint64_t v154 = vt_Flip_32(v273.i64, (uint64_t *)&v271, v269.i64, (char **)&v267, v269.i64, (char **)&v267, v178, v179);
                goto LABEL_513;
              }
              goto LABEL_403;
            }
            goto LABEL_258;
          }
          if (v99 == 1278226742) {
            goto LABEL_383;
          }
          if (v99 == 1380411457) {
            goto LABEL_380;
          }
          goto LABEL_440;
        }
        if (v99 > 875836517)
        {
          if (v99 > 1111970368)
          {
            if (v99 == 1111970369) {
              goto LABEL_401;
            }
            if (v99 == 1278226488)
            {
              uint64_t v29 = vt_Rotate_8((vImagePixelCount *)&v273, (vImagePixelCount *)&v271, (size_t *)&v277, (void **)&v275, (size_t *)&v269, (void **)&v267, v130);
              if (!v29)
              {
                int v174 = *(unsigned __int8 *)(v40 + 56);
                int v175 = *(unsigned __int8 *)(v40 + 57);
                if (v174 | v175)
                {
                  uint64_t v154 = vt_Flip_8(v273.i64, (uint64_t *)&v271, v269.i64, (char **)&v267, v269.i64, (char **)&v267, v174, v175);
                  goto LABEL_513;
                }
                goto LABEL_403;
              }
LABEL_258:
              CVPixelBufferUnlockBaseAddress(v20, 1uLL);
              CVPixelBufferUnlockBaseAddress(pixelBuffera, 0);
              goto LABEL_200;
            }
            goto LABEL_440;
          }
          if (v99 == 875836518) {
            goto LABEL_372;
          }
          int v160 = 875836534;
        }
        else
        {
          if (v99 <= 875704421)
          {
            if (v99 == 32) {
              goto LABEL_401;
            }
            if (v99 != 846624121) {
              goto LABEL_440;
            }
            uint64_t v29 = vt_Rotate_2vuy(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (unint64_t *)&v275, v269.i64, (unsigned char **)&v267, v130);
            if (v29) {
              goto LABEL_258;
            }
            int v152 = *(unsigned __int8 *)(v40 + 56);
            int v153 = *(unsigned __int8 *)(v40 + 57);
            if (!(v152 | v153)) {
              goto LABEL_403;
            }
            uint64_t v154 = vt_Flip_2vuy(v273.i64, (uint64_t *)&v271, v269.i64, (char **)&v267, v269.i64, (char **)&v267, v152, v153);
            goto LABEL_513;
          }
          if (v99 == 875704422)
          {
LABEL_372:
            uint64_t v29 = vt_Rotate_420v(&v273, (vImagePixelCount *)&v271, (uint64_t)&v277, (uint64_t *)&v275, &v269, (uint64_t)&v267, v130);
            if (v29) {
              goto LABEL_258;
            }
            int v167 = *(unsigned __int8 *)(v40 + 56);
            int v168 = *(unsigned __int8 *)(v40 + 57);
            if (!(v167 | v168)) {
              goto LABEL_403;
            }
            uint64_t v154 = vt_Flip_420v(v273.i64, (uint64_t *)&v271, v269.i64, (uint64_t *)&v267, v269.i64, (uint64_t *)&v267, v167, v168);
            goto LABEL_513;
          }
          int v160 = 875704438;
        }
        if (v99 != v160) {
          goto LABEL_440;
        }
        goto LABEL_372;
      }
      if (v99 > 2019963441)
      {
        if (v99 > 2021077553)
        {
          uint64_t v135 = v20;
          if (v99 > 2021078127)
          {
            if (v99 == 2037741171)
            {
              uint64_t v29 = vt_Rotate_yuvs(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (unint64_t *)&v275, v269.i64, (unsigned char **)&v267, v130);
              uint64_t v35 = v241;
              uint64_t v34 = v242;
              CFDictionaryRef v31 = v240;
              uint64_t v40 = a1;
              if (v29) {
                goto LABEL_258;
              }
              int v183 = *(unsigned __int8 *)(a1 + 56);
              int v184 = *(unsigned __int8 *)(a1 + 57);
              if (!(v183 | v184))
              {
LABEL_449:
                uint64_t v29 = 0;
LABEL_478:
                uint64_t v35 = v241;
                uint64_t v34 = v242;
                CFDictionaryRef v31 = v240;
                uint64_t v40 = a1;
                CFTypeID v20 = v135;
                goto LABEL_258;
              }
              uint64_t v185 = vt_Flip_yuvs(v273.i64, (uint64_t *)&v271, v269.i64, (char **)&v267, v269.i64, (char **)&v267, v183, v184);
            }
            else
            {
              signed int v136 = v99;
              if (v99 != 2033463856)
              {
                int v137 = 2021078128;
                goto LABEL_365;
              }
              uint64_t v29 = vt_Rotate_y420(&v273, (uint64_t)&v271, (uint64_t)&v277, &v275, &v269, &v267, v130);
              uint64_t v35 = v241;
              uint64_t v34 = v242;
              CFDictionaryRef v31 = v240;
              uint64_t v40 = a1;
              if (v29) {
                goto LABEL_258;
              }
              int v186 = *(unsigned __int8 *)(a1 + 56);
              int v187 = *(unsigned __int8 *)(a1 + 57);
              if (!(v186 | v187)) {
                goto LABEL_449;
              }
              uint64_t v185 = vt_Flip_y420((uint64_t)&v273, (uint64_t)&v271, (uint64_t)&v269, (uint64_t)&v267, (uint64_t)&v269, (uint64_t)&v267, v186, v187);
            }
LABEL_477:
            uint64_t v29 = v185;
            goto LABEL_478;
          }
          uint64_t v35 = v241;
          uint64_t v34 = v242;
          CFDictionaryRef v31 = v240;
          uint64_t v40 = a1;
          if (v99 == 2021077554) {
            goto LABEL_398;
          }
          unsigned __int16 v166 = 13364;
          goto LABEL_388;
        }
        if (v99 > 2019964015)
        {
          if (v99 == 2019964016) {
            goto LABEL_401;
          }
          unsigned __int16 v166 = 12848;
LABEL_388:
          int v169 = v166 | 0x78770000;
          goto LABEL_397;
        }
        if (v99 == 2019963442) {
          goto LABEL_398;
        }
        unsigned __int16 v159 = 13364;
LABEL_396:
        int v169 = v159 | 0x78660000;
LABEL_397:
        if (v99 != v169) {
          goto LABEL_440;
        }
LABEL_398:
        uint64_t v29 = vt_Rotate_x420(&v273, (vImagePixelCount *)&v271, (uint64_t)&v277, (uint64_t)&v275, &v269, (uint64_t)&v267, v130);
        if (!v29)
        {
          int v176 = *(unsigned __int8 *)(v40 + 56);
          int v177 = *(unsigned __int8 *)(v40 + 57);
          if (v176 | v177)
          {
            uint64_t v154 = vt_Flip_x420(v273.i64, (uint64_t *)&v271, v269.i64, (uint64_t *)&v267, v269.i64, (uint64_t *)&v267, v176, v177);
            goto LABEL_513;
          }
          goto LABEL_403;
        }
        goto LABEL_258;
      }
      if (v99 > 2016686641)
      {
        if (v99 > 2016687215)
        {
          if (v99 == 2016687216) {
            goto LABEL_401;
          }
          unsigned __int16 v159 = 12848;
          goto LABEL_396;
        }
        if (v99 == 2016686642) {
          goto LABEL_398;
        }
        unsigned __int16 v161 = 13364;
      }
      else
      {
        if (v99 <= 1999843441)
        {
          if (v99 == 1815491698)
          {
LABEL_380:
            uint64_t v29 = vt_Rotate_64((vImagePixelCount *)&v273, (vImagePixelCount *)&v271, (size_t *)&v277, (void **)&v275, (size_t *)&v269, (void **)&v267, v130);
            if (v29) {
              goto LABEL_258;
            }
            int v170 = *(unsigned __int8 *)(v40 + 56);
            int v171 = *(unsigned __int8 *)(v40 + 57);
            if (!(v170 | v171)) {
              goto LABEL_403;
            }
            uint64_t v154 = vt_Flip_64(v273.i64, (uint64_t *)&v271, v269.i64, (char **)&v267, v269.i64, (char **)&v267, v170, v171);
            goto LABEL_513;
          }
          if (v99 != 1983000886)
          {
LABEL_440:
            uint64_t v158 = FigSignalErrorAt();
            goto LABEL_510;
          }
          uint64_t v29 = vt_Rotate_v216(v273.i64, (uint64_t *)&v271, (unint64_t *)&v277, (_WORD **)&v275, (unint64_t *)&v269, (char **)&v267, v130);
          if (v29) {
            goto LABEL_258;
          }
          int v155 = *(unsigned __int8 *)(v40 + 56);
          int v156 = *(unsigned __int8 *)(v40 + 57);
          if (!(v155 | v156)) {
            goto LABEL_403;
          }
          uint64_t v154 = vt_Flip_v216(v273.i64, (uint64_t *)&v271, (unint64_t *)&v269, (char **)&v267, (unint64_t *)&v269, (char **)&v267, v155, v156);
LABEL_513:
          uint64_t v29 = v154;
          goto LABEL_514;
        }
        if (v99 == 1999843442) {
          goto LABEL_401;
        }
        unsigned __int16 v161 = 12848;
      }
      int v169 = v161 | 0x78340000;
      goto LABEL_397;
    }
    int v132 = *(unsigned __int8 *)(v40 + 56);
    if (*(unsigned char *)(v40 + 56) || *(unsigned char *)(v40 + 57))
    {
      if (v99 <= 1815491697)
      {
        if (v99 > 1278226533)
        {
          if (v99 > 1647534391)
          {
            signed int v133 = v99;
            if (v99 > 1717856626)
            {
              uint64_t v35 = v241;
              uint64_t v34 = v242;
              CFDictionaryRef v31 = v240;
              uint64_t v40 = a1;
              if (v99 != 1717856627)
              {
                if (v99 != 1751410032)
                {
                  int v134 = 1751411059;
                  goto LABEL_352;
                }
LABEL_427:
                uint64_t v158 = vt_Flip_16(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (char **)&v275, v269.i64, (char **)&v267, v132, *(unsigned __int8 *)(v40 + 57));
                goto LABEL_510;
              }
LABEL_439:
              uint64_t v158 = vt_Flip_32(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (char **)&v275, v269.i64, (char **)&v267, v132, *(unsigned __int8 *)(v40 + 57));
              goto LABEL_510;
            }
            if (v99 != 1647534392)
            {
              int v151 = 1717855600;
LABEL_413:
              uint64_t v35 = v241;
              uint64_t v34 = v242;
              CFDictionaryRef v31 = v240;
              uint64_t v40 = a1;
              if (v133 != v151) {
                goto LABEL_440;
              }
              goto LABEL_439;
            }
            uint64_t v40 = a1;
            uint64_t v190 = vt_Flip_b3a8(v273.i64, (uint64_t *)&v271, v269.i64, (uint64_t *)&v267, v269.i64, (uint64_t *)&v267, v132, *(unsigned __int8 *)(a1 + 57));
            goto LABEL_461;
          }
          signed int v133 = v99;
          if (v99 <= 1278226741)
          {
            uint64_t v35 = v241;
            uint64_t v34 = v242;
            CFDictionaryRef v31 = v240;
            uint64_t v40 = a1;
            if (v99 != 1278226534)
            {
              int v134 = 1278226536;
LABEL_352:
              if (v133 != v134) {
                goto LABEL_440;
              }
              goto LABEL_427;
            }
            goto LABEL_439;
          }
          uint64_t v35 = v241;
          uint64_t v34 = v242;
          CFDictionaryRef v31 = v240;
          uint64_t v40 = a1;
          if (v99 == 1278226742) {
            goto LABEL_427;
          }
          if (v99 != 1380411457) {
            goto LABEL_440;
          }
          goto LABEL_426;
        }
        if (v99 > 875836517)
        {
          signed int v157 = v99;
          if (v99 > 1111970368)
          {
            uint64_t v35 = v241;
            uint64_t v34 = v242;
            CFDictionaryRef v31 = v240;
            uint64_t v40 = a1;
            if (v99 == 1111970369) {
              goto LABEL_439;
            }
            if (v99 != 1278226488) {
              goto LABEL_440;
            }
            uint64_t v158 = vt_Flip_8(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (char **)&v275, v269.i64, (char **)&v267, v132, *(unsigned __int8 *)(a1 + 57));
            goto LABEL_510;
          }
          uint64_t v35 = v241;
          uint64_t v34 = v242;
          CFDictionaryRef v31 = v240;
          uint64_t v40 = a1;
          if (v99 != 875836518)
          {
            int v164 = 875836534;
            goto LABEL_419;
          }
        }
        else
        {
          signed int v157 = v99;
          if (v99 <= 875704421)
          {
            uint64_t v35 = v241;
            uint64_t v34 = v242;
            CFDictionaryRef v31 = v240;
            uint64_t v40 = a1;
            if (v99 == 32) {
              goto LABEL_439;
            }
            if (v99 != 846624121) {
              goto LABEL_440;
            }
            uint64_t v158 = vt_Flip_2vuy(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (char **)&v275, v269.i64, (char **)&v267, v132, *(unsigned __int8 *)(a1 + 57));
            goto LABEL_510;
          }
          uint64_t v35 = v241;
          uint64_t v34 = v242;
          CFDictionaryRef v31 = v240;
          uint64_t v40 = a1;
          if (v99 != 875704422)
          {
            int v164 = 875704438;
LABEL_419:
            if (v157 != v164) {
              goto LABEL_440;
            }
          }
        }
        uint64_t v158 = vt_Flip_420v(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (uint64_t *)&v275, v269.i64, (uint64_t *)&v267, v132, *(unsigned __int8 *)(v40 + 57));
        goto LABEL_510;
      }
      if (v99 > 2019963441)
      {
        if (v99 > 2021077553)
        {
          signed int v133 = v99;
          if (v99 > 2021078127)
          {
            if (v99 == 2037741171)
            {
              uint64_t v40 = a1;
              uint64_t v190 = vt_Flip_yuvs(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (char **)&v275, v269.i64, (char **)&v267, v132, *(unsigned __int8 *)(a1 + 57));
            }
            else
            {
              if (v99 != 2033463856)
              {
                int v151 = 2021078128;
                goto LABEL_413;
              }
              uint64_t v40 = a1;
              uint64_t v190 = vt_Flip_y420((uint64_t)&v273, (uint64_t)&v271, (uint64_t)&v277, (uint64_t)&v275, (uint64_t)&v269, (uint64_t)&v267, v132, *(unsigned __int8 *)(a1 + 57));
            }
LABEL_461:
            uint64_t v29 = v190;
            uint64_t v35 = v241;
            uint64_t v34 = v242;
            CFDictionaryRef v31 = v240;
            goto LABEL_258;
          }
          uint64_t v35 = v241;
          uint64_t v34 = v242;
          CFDictionaryRef v31 = v240;
          uint64_t v40 = a1;
          if (v99 != 2021077554)
          {
            unsigned __int16 v181 = 13364;
LABEL_430:
            int v182 = v181 | 0x78770000;
            goto LABEL_437;
          }
          goto LABEL_438;
        }
        signed int v133 = v99;
        if (v99 > 2019964015)
        {
          uint64_t v35 = v241;
          uint64_t v34 = v242;
          CFDictionaryRef v31 = v240;
          uint64_t v40 = a1;
          if (v99 == 2019964016) {
            goto LABEL_439;
          }
          unsigned __int16 v181 = 12848;
          goto LABEL_430;
        }
        uint64_t v35 = v241;
        uint64_t v34 = v242;
        CFDictionaryRef v31 = v240;
        uint64_t v40 = a1;
        if (v99 == 2019963442)
        {
LABEL_438:
          uint64_t v158 = vt_Flip_x420(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (uint64_t *)&v275, v269.i64, (uint64_t *)&v267, v132, *(unsigned __int8 *)(v40 + 57));
          goto LABEL_510;
        }
        unsigned __int16 v163 = 13364;
LABEL_436:
        int v182 = v163 | 0x78660000;
LABEL_437:
        if (v133 != v182) {
          goto LABEL_440;
        }
        goto LABEL_438;
      }
      if (v99 > 2016686641)
      {
        signed int v133 = v99;
        if (v99 > 2016687215)
        {
          uint64_t v35 = v241;
          uint64_t v34 = v242;
          CFDictionaryRef v31 = v240;
          uint64_t v40 = a1;
          if (v99 == 2016687216) {
            goto LABEL_439;
          }
          unsigned __int16 v163 = 12848;
          goto LABEL_436;
        }
        uint64_t v35 = v241;
        uint64_t v34 = v242;
        CFDictionaryRef v31 = v240;
        uint64_t v40 = a1;
        if (v99 == 2016686642) {
          goto LABEL_438;
        }
        unsigned __int16 v165 = 13364;
      }
      else
      {
        signed int v133 = v99;
        if (v99 <= 1999843441)
        {
          uint64_t v35 = v241;
          uint64_t v34 = v242;
          CFDictionaryRef v31 = v240;
          uint64_t v40 = a1;
          if (v99 == 1815491698)
          {
LABEL_426:
            uint64_t v158 = vt_Flip_64(v273.i64, (uint64_t *)&v271, (uint64_t *)&v277, (char **)&v275, v269.i64, (char **)&v267, v132, *(unsigned __int8 *)(v40 + 57));
            goto LABEL_510;
          }
          if (v99 != 1983000886) {
            goto LABEL_440;
          }
          uint64_t v158 = vt_Flip_v216(v273.i64, (uint64_t *)&v271, (unint64_t *)&v277, (char **)&v275, (unint64_t *)&v269, (char **)&v267, v132, *(unsigned __int8 *)(a1 + 57));
LABEL_510:
          uint64_t v29 = v158;
          goto LABEL_258;
        }
        uint64_t v35 = v241;
        uint64_t v34 = v242;
        CFDictionaryRef v31 = v240;
        uint64_t v40 = a1;
        if (v99 == 1999843442) {
          goto LABEL_439;
        }
        unsigned __int16 v165 = 12848;
      }
      int v182 = v165 | 0x78340000;
      goto LABEL_437;
    }
    if (v99 <= 1815491697)
    {
      if (v99 > 1278226533)
      {
        if (v99 > 1647534391)
        {
          if (v99 > 1717856626)
          {
            if (v99 != 1717856627)
            {
              if (v99 != 1751410032)
              {
                int v162 = 1751411059;
                goto LABEL_465;
              }
LABEL_496:
              unsigned int v203 = (char *)v275;
              uint64_t v204 = v277;
              int v205 = (char *)v267;
              uint64_t v206 = v269.i64[0];
              uint64_t v207 = v273.i64[0];
              uint64_t v208 = v271;
              uint64_t v209 = 2;
              goto LABEL_512;
            }
LABEL_511:
            unsigned int v203 = (char *)v275;
            uint64_t v204 = v277;
            int v205 = (char *)v267;
            uint64_t v206 = v269.i64[0];
            uint64_t v207 = v273.i64[0];
            uint64_t v208 = v271;
            uint64_t v209 = 4;
            goto LABEL_512;
          }
          if (v99 != 1647534392)
          {
            int v180 = 1717855600;
LABEL_481:
            if (v99 != v180) {
              goto LABEL_521;
            }
            goto LABEL_511;
          }
          uint64_t v29 = vtCopyPlane((char *)v275, v277, (char *)v267, v269.i64[0], v273.i64[0], v271, 4);
          uint64_t v35 = v241;
          uint64_t v34 = v242;
          CFDictionaryRef v31 = v240;
          uint64_t v40 = a1;
          if (v29) {
            goto LABEL_258;
          }
          unsigned int v195 = (char *)*((void *)&v275 + 1);
          uint64_t v196 = *((void *)&v277 + 1);
          int v197 = (char *)*((void *)&v267 + 1);
          uint64_t v198 = v269.i64[1];
          uint64_t v199 = v273.i64[1];
          uint64_t v200 = *((void *)&v271 + 1);
          goto LABEL_520;
        }
        if (v99 <= 1278226741)
        {
          if (v99 == 1278226534) {
            goto LABEL_511;
          }
          int v162 = 1278226536;
          goto LABEL_465;
        }
        if (v99 == 1278226742) {
          goto LABEL_496;
        }
        if (v99 == 1380411457)
        {
LABEL_495:
          unsigned int v203 = (char *)v275;
          uint64_t v204 = v277;
          int v205 = (char *)v267;
          uint64_t v206 = v269.i64[0];
          uint64_t v207 = v273.i64[0];
          uint64_t v208 = v271;
          uint64_t v209 = 8;
LABEL_512:
          uint64_t v154 = vtCopyPlane(v203, v204, v205, v206, v207, v208, v209);
          goto LABEL_513;
        }
LABEL_521:
        uint64_t v154 = FigSignalErrorAt();
        goto LABEL_513;
      }
      if (v99 > 875836517)
      {
        if (v99 > 1111970368)
        {
          if (v99 == 1111970369) {
            goto LABEL_511;
          }
          if (v99 == 1278226488)
          {
            unsigned int v203 = (char *)v275;
            uint64_t v204 = v277;
            int v205 = (char *)v267;
            uint64_t v206 = v269.i64[0];
            uint64_t v207 = v273.i64[0];
            uint64_t v208 = v271;
            uint64_t v209 = 1;
            goto LABEL_512;
          }
          goto LABEL_521;
        }
        if (v99 == 875836518) {
          goto LABEL_488;
        }
        int v192 = 875836534;
      }
      else
      {
        if (v99 <= 875704421)
        {
          if (v99 == 32) {
            goto LABEL_511;
          }
          int v162 = 846624121;
LABEL_465:
          if (v99 != v162) {
            goto LABEL_521;
          }
          goto LABEL_496;
        }
        if (v99 == 875704422)
        {
LABEL_488:
          uint64_t v29 = vtCopyPlane((char *)v275, v277, (char *)v267, v269.i64[0], v273.i64[0], v271, 1);
          uint64_t v35 = v241;
          uint64_t v34 = v242;
          CFDictionaryRef v31 = v240;
          uint64_t v40 = a1;
          if (v29) {
            goto LABEL_258;
          }
          unsigned int v195 = (char *)*((void *)&v275 + 1);
          uint64_t v196 = *((void *)&v277 + 1);
          int v197 = (char *)*((void *)&v267 + 1);
          uint64_t v198 = v269.i64[1];
          uint64_t v199 = v273.i64[1];
          uint64_t v200 = *((void *)&v271 + 1);
          uint64_t v201 = 2;
LABEL_509:
          uint64_t v158 = vtCopyPlane(v195, v196, v197, v198, v199, v200, v201);
          goto LABEL_510;
        }
        int v192 = 875704438;
      }
      if (v99 != v192) {
        goto LABEL_521;
      }
      goto LABEL_488;
    }
    if (v99 > 2019963441)
    {
      if (v99 > 2021077553)
      {
        if (v99 > 2021078127)
        {
          if (v99 == 2037741171) {
            goto LABEL_496;
          }
          if (v99 != 2033463856)
          {
            int v180 = 2021078128;
            goto LABEL_481;
          }
          uint64_t v29 = vtCopyPlane((char *)v275, v277, (char *)v267, v269.i64[0], v273.i64[0], v271, 1);
          uint64_t v35 = v241;
          uint64_t v34 = v242;
          CFDictionaryRef v31 = v240;
          uint64_t v40 = a1;
          if (v29) {
            goto LABEL_258;
          }
          uint64_t v29 = vtCopyPlane(*((char **)&v275 + 1), *((uint64_t *)&v277 + 1), *((char **)&v267 + 1), v269.i64[1], v273.i64[1], *((uint64_t *)&v271 + 1), 1);
          if (v29) {
            goto LABEL_258;
          }
          unsigned int v195 = (char *)v276;
          uint64_t v196 = v278;
          int v197 = (char *)v268;
          uint64_t v198 = v270;
          uint64_t v199 = v274;
          uint64_t v200 = v272;
LABEL_520:
          uint64_t v201 = 1;
          goto LABEL_509;
        }
        if (v99 != 2021077554)
        {
          unsigned __int16 v194 = 13364;
LABEL_499:
          int v202 = v194 | 0x78770000;
          goto LABEL_506;
        }
        goto LABEL_507;
      }
      if (v99 > 2019964015)
      {
        if (v99 == 2019964016) {
          goto LABEL_511;
        }
        unsigned __int16 v194 = 12848;
        goto LABEL_499;
      }
      if (v99 == 2019963442)
      {
LABEL_507:
        uint64_t v29 = vtCopyPlane((char *)v275, v277, (char *)v267, v269.i64[0], v273.i64[0], v271, 2);
        uint64_t v35 = v241;
        uint64_t v34 = v242;
        CFDictionaryRef v31 = v240;
        uint64_t v40 = a1;
        if (v29) {
          goto LABEL_258;
        }
        unsigned int v195 = (char *)*((void *)&v275 + 1);
        uint64_t v196 = *((void *)&v277 + 1);
        int v197 = (char *)*((void *)&v267 + 1);
        uint64_t v198 = v269.i64[1];
        uint64_t v199 = v273.i64[1];
        uint64_t v200 = *((void *)&v271 + 1);
        uint64_t v201 = 4;
        goto LABEL_509;
      }
      unsigned __int16 v191 = 13364;
LABEL_505:
      int v202 = v191 | 0x78660000;
LABEL_506:
      if (v99 != v202) {
        goto LABEL_521;
      }
      goto LABEL_507;
    }
    if (v99 > 2016686641)
    {
      if (v99 > 2016687215)
      {
        if (v99 == 2016687216) {
          goto LABEL_511;
        }
        unsigned __int16 v191 = 12848;
        goto LABEL_505;
      }
      if (v99 == 2016686642) {
        goto LABEL_507;
      }
      unsigned __int16 v193 = 13364;
    }
    else
    {
      if (v99 <= 1999843441)
      {
        if (v99 != 1815491698)
        {
          int v180 = 1983000886;
          goto LABEL_481;
        }
        goto LABEL_495;
      }
      if (v99 == 1999843442) {
        goto LABEL_511;
      }
      unsigned __int16 v193 = 12848;
    }
    int v202 = v193 | 0x78340000;
    goto LABEL_506;
  }
  uint64_t v29 = FigSignalErrorAt();
LABEL_220:
  uint64_t v37 = v213;
LABEL_221:
  if (*(unsigned char *)(v40 + 232))
  {
    CFMutableDictionaryRef v36 = cf;
    CFDictionaryRef v30 = buffera;
    if (!*(unsigned char *)(v40 + 233))
    {
      CFTypeRef v257 = (CFTypeRef)CVPixelBufferGetWidth(pixelBuffera);
      size_t v258 = CVPixelBufferGetHeight(pixelBuffera);
      int64x2_t v259 = vcvtq_s64_f64(v250);
      int64x2_t v260 = vcvtq_s64_f64(v249);
      uint64_t v29 = VTFillPixelsOutsideDestRectWithBlack(pixelBuffera, (uint64_t *)&v257, (uint64_t **)(v40 + 64));
      if (v29) {
        goto LABEL_227;
      }
    }
  }
  else
  {
    CFMutableDictionaryRef v36 = cf;
    CFDictionaryRef v30 = buffera;
  }
  *(unsigned char *)(v40 + 32) = 1;
LABEL_227:
  long long v33 = v212;
  int v32 = v214;
LABEL_4:
  if (v36) {
    CFRelease(v36);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v245) {
    CFRelease(v245);
  }
  if (v244) {
    CFRelease(v244);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v243) {
    CFRelease(v243);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v33) {
    CFRelease(v33);
  }
  return v29;
}

uint64_t VTPixelRotationSessionFlush(uint64_t a1, CVOptionFlags a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4 || (uint64_t result = VTPixelTransferChainFlush(v4, a2), !result))
  {
    uint64_t result = *(void *)(a1 + 136);
    if (result)
    {
      return VTMetalTransferSessionFlush(result, a2);
    }
  }
  return result;
}

void VTPixelTransferNodeRotationFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  free(*(void **)(DerivedStorage + 40));
  *(void *)(DerivedStorage + 40) = 0;

  VTPixelTransferNodeBaseFinalize();
}

__CFString *VTPixelTransferNodeRotationCopyDebugDescription()
{
  return @"[VTPixelTransferNodeRotation]";
}

uint64_t VTPixelTransferNodeRotationDoTransfer(uint64_t a1, __CVBuffer *a2, double *a3, __CVBuffer *a4, double *a5)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  memset(v40, 0, sizeof(v40));
  memset(v39, 0, sizeof(v39));
  memset(v38, 0, sizeof(v38));
  memset(v37, 0, sizeof(v37));
  memset(v36, 0, sizeof(v36));
  memset(v35, 0, sizeof(v35));
  memset(v34, 0, sizeof(v34));
  memset(v33, 0, sizeof(v33));
  double v7 = a3[2];
  double v8 = a3[3];
  double v9 = a3[4];
  double v10 = a3[5];
  double v11 = a5[2];
  double v12 = a5[3];
  double v13 = a5[4];
  double v14 = a5[5];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v16 = floor(v7);
  double v17 = floor(v8);
  double v18 = ceil(v7 + v9) - v16;
  double v19 = ceil(v8 + v10) - v17;
  double v20 = floor(v11);
  double v21 = floor(v12);
  double v22 = v11 + v13;
  double v23 = v16;
  double v24 = ceil(v22) - v20;
  double v25 = v12 + v14;
  double v26 = v17;
  double v27 = ceil(v25) - v21;
  if (vtPixelRotation_IsValidForSoftware(*(_DWORD *)(DerivedStorage + 32), a2, a4, v16, v17, v18, v19, v20, v21, v24, v27))
  {
    size_t PlaneCount = 1;
    CVPixelBufferLockBaseAddress(a2, 1uLL);
    CVPixelBufferLockBaseAddress(a4, 0);
    if (CVPixelBufferIsPlanar(a2)) {
      size_t PlaneCount = CVPixelBufferGetPlaneCount(a2);
    }
    uint64_t v29 = vtPixelRotationSession_PrepareRotationParameters(a2, PlaneCount, (size_t *)v40, (size_t *)v39, (void **)v37, (size_t *)v38, (OSType *)(DerivedStorage + 36), (void *)(DerivedStorage + 40), v23, v26, v18, v19);
    if (!v29)
    {
      if (CVPixelBufferIsPlanar(a4)) {
        size_t v30 = CVPixelBufferGetPlaneCount(a4);
      }
      else {
        size_t v30 = 1;
      }
      uint64_t v29 = vtPixelRotationSession_PrepareRotationParameters(a4, v30, (size_t *)v36, (size_t *)v35, (void **)v33, (size_t *)v34, (OSType *)(DerivedStorage + 36), (void *)(DerivedStorage + 40), v20, v21, v24, v27);
      if (!v29)
      {
        int v32 = *(uint64_t (**)(_OWORD *, _OWORD *, _OWORD *, _OWORD *, _OWORD *, _OWORD *, _OWORD *, _OWORD *))(DerivedStorage + 24);
        if (v32) {
          uint64_t v29 = v32(v40, v39, v38, v37, v36, v35, v34, v33);
        }
        else {
          uint64_t v29 = 0;
        }
      }
    }
    CVPixelBufferUnlockBaseAddress(a2, 1uLL);
    CVPixelBufferUnlockBaseAddress(a4, 0);
    return v29;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t vtPixelRotation_IsValidForSoftware(int a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  OSType v23 = CVPixelBufferGetPixelFormatType(a3);
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  size_t v26 = CVPixelBufferGetWidth(a3);
  size_t v27 = CVPixelBufferGetHeight(a3);
  if (PixelFormatType != v23 || a4 < 0.0) {
    return 0;
  }
  unint64_t v28 = v27;
  uint64_t result = 0;
  if (a4 + a6 > (double)Width || a5 < 0.0 || a5 + a7 > (double)Height) {
    return result;
  }
  if (a8 < 0.0) {
    return 0;
  }
  uint64_t result = 0;
  if (a8 + a10 > (double)v26 || a9 < 0.0 || a9 + a11 > (double)v28) {
    return result;
  }
  if (a1 <= 179)
  {
    if (a1) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  if (a1 != 270)
  {
    if (a1 != 180) {
      return 1;
    }
LABEL_17:
    uint64_t result = 0;
    if (a6 != a10 || a7 != a11) {
      return result;
    }
LABEL_19:
    if (a1 == 90) {
      goto LABEL_20;
    }
    return 1;
  }
LABEL_20:
  uint64_t result = 0;
  if (a6 == a11 && a7 == a10) {
    return 1;
  }
  return result;
}

uint64_t vtPixelRotationSession_PrepareRotationParameters(__CVBuffer *a1, size_t a2, size_t *a3, size_t *a4, void **a5, size_t *a6, OSType *a7, void *a8, double a9, double a10, double a11, double a12)
{
  BOOL v22 = a10 != 0.0 || a9 != 0.0;
  unint64_t v23 = (unint64_t)a11;
  size_t Width = CVPixelBufferGetWidth(a1);
  unint64_t v52 = (unint64_t)a12;
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t v25 = Height;
  BOOL v48 = v22;
  unint64_t v49 = v23;
  if (!v22 && Width == v23 && Height == v52)
  {
LABEL_18:
    if (CVPixelBufferIsPlanar(a1))
    {
      if (!a2) {
        return 0;
      }
      size_t v33 = 0;
      do
      {
        a3[v33] = CVPixelBufferGetWidthOfPlane(a1, v33);
        a4[v33] = CVPixelBufferGetHeightOfPlane(a1, v33);
        a5[v33] = CVPixelBufferGetBaseAddressOfPlane(a1, v33);
        a6[v33] = CVPixelBufferGetBytesPerRowOfPlane(a1, v33);
        ++v33;
      }
      while (a2 != v33);
    }
    else
    {
      *a3 = CVPixelBufferGetWidth(a1);
      *a4 = CVPixelBufferGetHeight(a1);
      *a5 = CVPixelBufferGetBaseAddress(a1);
      *a6 = CVPixelBufferGetBytesPerRow(a1);
    }
    char v34 = !v48;
    if (!a2) {
      char v34 = 1;
    }
    if ((v34 & 1) == 0)
    {
      uint64_t v35 = 0;
      size_t v36 = a2;
      do
      {
        uint64_t v37 = (void *)(*a8 + v35);
        uint64_t v38 = *a6++;
        *a5 = (char *)*a5
            + (v37[2] >> 3) * ((unint64_t)a9 / (v37[3] * *v37))
            + v38 * ((unint64_t)a10 / (v37[4] * v37[1]));
        ++a5;
        v35 += 112;
        --v36;
      }
      while (v36);
    }
    size_t v39 = v25;
    if (Width != v49 && a2)
    {
      uint64_t v40 = (unint64_t *)(*a8 + 24);
      size_t v41 = a2;
      do
      {
        unint64_t v42 = *v40;
        v40 += 14;
        *a3++ = (v49 - 1 + v42) / v42;
        --v41;
      }
      while (v41);
    }
    uint64_t v43 = 0;
    if (v39 == v52 || !a2) {
      return v43;
    }
    double v44 = (unint64_t *)(*a8 + 32);
    do
    {
      unint64_t v45 = *v44;
      v44 += 14;
      *a4++ = (v52 - 1 + v45) / v45;
      --a2;
    }
    while (a2);
    return 0;
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  unint64_t v28 = (void *)*a8;
  OSType pixelFormat = PixelFormatType;
  if (*a7 == PixelFormatType)
  {
    if (v28) {
      goto LABEL_18;
    }
  }
  else
  {
    free(v28);
    *a8 = 0;
    *a7 = 0;
  }
  double v47 = a8;
  uint64_t v29 = malloc_type_calloc(a2, 0x70uLL, 0x100004081F0E799uLL);
  if (!a2)
  {
LABEL_17:
    *a7 = pixelFormat;
    *double v47 = v29;
    a8 = v47;
    goto LABEL_18;
  }
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  while (1)
  {
    uint64_t PixelFormatPixelBlockInfo = VTBlackFillGetPixelFormatPixelBlockInfo(pixelFormat, v31, &v29[v30], &v29[v30 + 8], &v29[v30 + 16], &v29[v30 + 24], &v29[v30 + 32], &v29[v30 + 105], &v29[v30 + 40], &v29[v30 + 104], &v29[v30 + 106], &v29[v30 + 110]);
    if (PixelFormatPixelBlockInfo) {
      break;
    }
    ++v31;
    v30 += 112;
    if (a2 == v31) {
      goto LABEL_17;
    }
  }
  uint64_t v43 = PixelFormatPixelBlockInfo;
  free(v29);
  return v43;
}

double vtPixelRotationSessionInit(uint64_t a1)
{
  *(void *)(a1 + 416) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void vtPixelRotationSessionFinalize(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 16)) {
    *(unsigned char *)(a1 + 16) = 1;
  }
  if (*(void *)(a1 + 152))
  {
    uint64_t v2 = *(void (**)(void))(a1 + 160);
    if (v2)
    {
      v2();
      *(void *)(a1 + 168) = 0;
    }
  }
  free(*(void **)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  uint64_t v3 = *(const void **)(a1 + 176);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 176) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 184);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 184) = 0;
  }
  CFDictionaryRef v5 = *(const void **)(a1 + 192);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 192) = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 200);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 200) = 0;
  }
  double v7 = *(const void **)(a1 + 224);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 224) = 0;
  }
  double v8 = *(const void **)(a1 + 136);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 136) = 0;
  }
  double v9 = *(const void **)(a1 + 144);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 144) = 0;
  }
  double v10 = *(const void **)(a1 + 376);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 376) = 0;
  }
  double v11 = *(const void **)(a1 + 384);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 384) = 0;
  }
  double v12 = *(const void **)(a1 + 392);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 392) = 0;
  }
  double v13 = *(const void **)(a1 + 400);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 400) = 0;
  }
  double v14 = *(const void **)(a1 + 408);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 408) = 0;
  }
  uint64_t v15 = *(const void **)(a1 + 416);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 416) = 0;
  }
  double v16 = *(const void **)(a1 + 40);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 40) = 0;
  }
}

CFTypeRef vtPixelRotationSessionCopyFormattingDesc()
{
  return CFRetain(@"[VTPixelRotationSession]");
}

__CFString *vtPixelRotationSessionCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<VTPixelRotationSession %p [%p]>{", a1, v4);
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

uint64_t vtPixelRotationChainDoTransfer(uint64_t result, CVPixelBufferRef pixelBuffer, long long *a3, __CVBuffer *a4, long long *a5)
{
  if (result)
  {
    uint64_t v9 = result;
    *(void *)&v13[0] = CVPixelBufferGetWidth(pixelBuffer);
    *((void *)&v13[0] + 1) = CVPixelBufferGetHeight(pixelBuffer);
    long long v10 = a3[1];
    v13[1] = *a3;
    v13[2] = v10;
    *(void *)&v12[0] = CVPixelBufferGetWidth(a4);
    *((void *)&v12[0] + 1) = CVPixelBufferGetHeight(a4);
    long long v11 = a5[1];
    v12[1] = *a5;
    v12[2] = v11;
    return VTPixelTransferChainDoTransfer(v9, pixelBuffer, v13, a4, v12);
  }
  return result;
}

uint64_t vtPixelRotation_BuildChain(uint64_t a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3, const __CFDictionary *a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, unsigned __int8 a17, unsigned __int8 a18, uint64_t a19, char a20,uint64_t a21,unsigned char *a22)
{
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  OSType v71 = CVPixelBufferGetPixelFormatType(a3);
  cf[0] = 0;
  uint64_t v34 = a1;
  VTPixelTransferChainRemoveAllNodes(a1);
  if (a6 && !VTAvoidHardwarePixelTransfer())
  {
    uint64_t appended = VTPixelTransferChainAppendCelesteRotationNode(a1, a8, a17, a18, 0);
    if (!appended)
    {
      uint64_t v41 = 0;
      *(_DWORD *)(a21 + 128) = 3;
      goto LABEL_290;
    }
  }
  else
  {
    uint64_t appended = 0;
  }
  if (!a7)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    size_t v39 = 0;
LABEL_8:
    uint64_t v40 = a21;
    goto LABEL_9;
  }
  uint64_t v36 = appended;
  if (VTAvoidHardwarePixelTransfer()
    || (CFAllocatorRef v47 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        VTMetalTransferSessionCreate(*MEMORY[0x1E4F1CF80], 0, (uint64_t)cf),
        !cf[0]))
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    size_t v39 = 0;
    uint64_t v40 = a21;
    uint64_t appended = v36;
    goto LABEL_9;
  }
  BOOL v48 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  unint64_t v49 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFDictionaryRef theDict = CFDictionaryCreateMutable(v47, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v47, 0, v48, v49);
  CFAllocatorRef v51 = v47;
  uint64_t v38 = Mutable;
  unint64_t v52 = CFDictionaryCreateMutable(v51, 0, v48, v49);
  CFStringRef key = (void *)*MEMORY[0x1E4F24A90];
  CFDictionaryRef value = (void *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E4F24A90]);
  CFTypeRef v63 = (void *)*MEMORY[0x1E4F24BC8];
  char v67 = (void *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E4F24BC8]);
  CFTypeRef v64 = (void *)*MEMORY[0x1E4F24C18];
  size_t v68 = (void *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E4F24C18]);
  uint64_t v65 = (void *)*MEMORY[0x1E4F24B70];
  CFDictionaryRef v69 = (void *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E4F24B70]);
  VTMetalTransferSessionSetProperties(cf[0], a19);
  if (a8) {
    FigCFDictionarySetInt();
  }
  double v53 = (const void **)MEMORY[0x1E4F1CFD0];
  if (a17) {
    CFDictionarySetValue(v38, @"FlipHorizontalOrientation", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  if (a18) {
    CFDictionarySetValue(v38, @"FlipVerticalOrientation", *v53);
  }
  FigCFDictionarySetFloat32();
  FigCFDictionarySetFloat32();
  FigCFDictionarySetFloat32();
  FigCFDictionarySetFloat32();
  FigCFDictionarySetFloat32();
  FigCFDictionarySetFloat32();
  FigCFDictionarySetFloat32();
  size_t v39 = v52;
  FigCFDictionarySetFloat32();
  if (value) {
    CFDictionarySetValue(v52, key, value);
  }
  uint64_t v37 = theDict;
  if (v67) {
    CFDictionarySetValue(v52, v63, v67);
  }
  if (v68) {
    CFDictionarySetValue(v52, v64, v68);
  }
  if (v69) {
    CFDictionarySetValue(v52, v65, v69);
  }
  CFDictionarySetValue(theDict, @"SourceAmendments", v38);
  CFDictionarySetValue(theDict, @"DestinationAmendments", v52);
  if (a20) {
    CFDictionarySetValue(theDict, @"SetGPUPriorityLow", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  uint64_t appended = VTMetalTransferSessionTransferImageSync((const __CFArray *)cf[0], pixelBuffer, a3, theDict);
  if (appended) {
    goto LABEL_8;
  }
  uint64_t v40 = a21;
  if (a22) {
    *a22 = 1;
  }
  *(_DWORD *)(a21 + 128) = 2;
  uint64_t appended = VTPixelTransferChainAppendNode(v34, cf[0]);
  if (!appended)
  {
    uint64_t v41 = 0;
    if (!theDict) {
      goto LABEL_286;
    }
    goto LABEL_285;
  }
LABEL_9:
  if (a5)
  {
    uint64_t v41 = 4294954382;
    if (!v37) {
      goto LABEL_286;
    }
    goto LABEL_285;
  }
  if (a8 == 180 || !a8)
  {
    uint64_t v41 = 4294954382;
    if (a11 != a15 || a12 != a16) {
      goto LABEL_284;
    }
LABEL_17:
    if (PixelFormatType != v71) {
      goto LABEL_283;
    }
    if (PixelFormatType > 1751410031)
    {
      if (PixelFormatType > 2019963439)
      {
        if (PixelFormatType > 2021078067)
        {
          if (PixelFormatType > 2033463855)
          {
            if (PixelFormatType == 2033463856)
            {
              int v42 = a18 | a17;
              if (a8 || v42)
              {
                uint64_t v43 = 0;
                if (a8 == 90) {
                  double v44 = vt_Rotate_y420_90CW;
                }
                else {
                  double v44 = vt_Rotate_y420_180;
                }
                if (a8 != 90 && a8 != 180)
                {
                  uint64_t v43 = 0;
                  if (a8 == 270) {
                    double v44 = vt_Rotate_y420_90CCW;
                  }
                  else {
                    double v44 = 0;
                  }
                }
              }
              else
              {
                uint64_t v43 = vt_Copy_y420_Crop;
                double v44 = 0;
              }
              if (a17) {
                OSType v56 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, void *, uint64_t *, uint64_t *, char **))vt_Flip_y420_Hor;
              }
              else {
                OSType v56 = 0;
              }
              BOOL v57 = a18 == 0;
              CFDictionaryRef v58 = vt_Flip_y420_Ver;
              goto LABEL_272;
            }
            if (PixelFormatType == 2037741158 || PixelFormatType == 2037741171)
            {
              int v42 = a18 | a17;
              if (a8 || v42)
              {
                uint64_t v43 = 0;
                if (a8 == 90) {
                  double v44 = vt_Rotate_yuvs_90CW;
                }
                else {
                  double v44 = vt_Rotate_yuvs_180;
                }
                if (a8 != 90 && a8 != 180)
                {
                  uint64_t v43 = 0;
                  if (a8 == 270) {
                    double v44 = vt_Rotate_yuvs_90CCW;
                  }
                  else {
                    double v44 = 0;
                  }
                }
              }
              else
              {
                uint64_t v43 = vt_Copy_NonPlanar16_Crop;
                double v44 = 0;
              }
              if (a17) {
                OSType v56 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, void *, uint64_t *, uint64_t *, char **))vt_Flip_yuvs_Hor;
              }
              else {
                OSType v56 = 0;
              }
              BOOL v57 = a18 == 0;
              CFDictionaryRef v58 = vt_Flip_yuvs_Ver;
LABEL_272:
              if (v57) {
                CFTypeRef v59 = v56;
              }
              else {
                CFTypeRef v59 = v58;
              }
              if (!v42 && v43)
              {
                uint64_t appended = VTPixelTransferChainAppendSoftwareNode(v34, 0, (uint64_t)v43, 0, 0, 0);
                int v42 = 0;
                *(_DWORD *)(v40 + 128) = 1;
              }
              goto LABEL_278;
            }
LABEL_196:
            CFTypeRef v59 = 0;
            if (a18 | a17) {
              goto LABEL_280;
            }
            goto LABEL_283;
          }
          if (PixelFormatType != 2021078068)
          {
            int v46 = 2021078128;
            goto LABEL_132;
          }
LABEL_112:
          int v42 = a18 | a17;
          if (a8 || v42)
          {
            uint64_t v43 = 0;
            if (a8 == 90) {
              double v44 = vt_Rotate_x420_90CW;
            }
            else {
              double v44 = vt_Rotate_x420_180;
            }
            if (a8 != 90 && a8 != 180)
            {
              uint64_t v43 = 0;
              if (a8 == 270) {
                double v44 = vt_Rotate_x420_90CCW;
              }
              else {
                double v44 = 0;
              }
            }
          }
          else
          {
            double v44 = 0;
            uint64_t v43 = vt_Copy_x420_Crop;
            if (PixelFormatType != 2016686640 && PixelFormatType != 2019963440 && PixelFormatType != 2021077552)
            {
              double v44 = 0;
              uint64_t v43 = vt_Copy_x444_Crop;
            }
          }
          if (a17) {
            OSType v56 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, void *, uint64_t *, uint64_t *, char **))vt_Flip_x420_Hor;
          }
          else {
            OSType v56 = 0;
          }
          BOOL v57 = a18 == 0;
          CFDictionaryRef v58 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, void *, uint64_t *, uint64_t *, char **))vt_Flip_x420_Ver;
          goto LABEL_272;
        }
        if (PixelFormatType > 2019964015)
        {
          if (PixelFormatType == 2019964016) {
            goto LABEL_133;
          }
          int v54 = 2021077552;
        }
        else
        {
          if (PixelFormatType == 2019963440) {
            goto LABEL_112;
          }
          int v54 = 2019963956;
        }
LABEL_101:
        if (PixelFormatType != v54) {
          goto LABEL_196;
        }
        goto LABEL_112;
      }
      if (PixelFormatType <= 1999843441)
      {
        if (PixelFormatType <= 1815491697)
        {
          if (PixelFormatType == 1751410032) {
            goto LABEL_96;
          }
          int v45 = 1751411059;
          goto LABEL_95;
        }
        if (PixelFormatType != 1815491698)
        {
          if (PixelFormatType == 1983000886)
          {
            int v42 = a18 | a17;
            if (a8 || v42)
            {
              uint64_t v43 = 0;
              if (a8 == 90) {
                double v44 = vt_Rotate_v216_90CW;
              }
              else {
                double v44 = vt_Rotate_v216_180;
              }
              if (a8 != 90 && a8 != 180)
              {
                uint64_t v43 = 0;
                if (a8 == 270) {
                  double v44 = vt_Rotate_v216_90CCW;
                }
                else {
                  double v44 = 0;
                }
              }
            }
            else
            {
              uint64_t v43 = vt_Copy_NonPlanar32_Crop;
              double v44 = 0;
            }
            if (a17) {
              OSType v56 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, void *, uint64_t *, uint64_t *, char **))vt_Flip_v216_Hor;
            }
            else {
              OSType v56 = 0;
            }
            BOOL v57 = a18 == 0;
            CFDictionaryRef v58 = vt_Flip_v216_Ver;
            goto LABEL_272;
          }
          goto LABEL_196;
        }
LABEL_151:
        int v42 = a18 | a17;
        if (a8 || v42)
        {
          if (a8 == 90) {
            double v44 = vt_Rotate_64_90CW;
          }
          else {
            double v44 = vt_Rotate_64_180;
          }
          if (a8 != 90 && a8 != 180)
          {
            if (a8 == 270) {
              double v44 = vt_Rotate_64_90CCW;
            }
            else {
              double v44 = 0;
            }
          }
        }
        else
        {
          double v44 = 0;
        }
        if (a17) {
          CFTypeID v60 = vt_Flip_64_Hor;
        }
        else {
          CFTypeID v60 = 0;
        }
        if (a18) {
          CFTypeRef v59 = vt_Flip_64_Ver;
        }
        else {
          CFTypeRef v59 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, void *, uint64_t *, uint64_t *, char **))v60;
        }
LABEL_278:
        if (v44)
        {
          uint64_t appended = VTPixelTransferChainAppendRotationNode(v34, (uint64_t)v44);
          *(_DWORD *)(v40 + 128) = 1;
          if (v42) {
            goto LABEL_280;
          }
        }
        else if (v42)
        {
LABEL_280:
          uint64_t v41 = VTPixelTransferChainAppendRotationNode(v34, (uint64_t)v59);
          *(_DWORD *)(v40 + 128) = 1;
          if (!v37) {
            goto LABEL_286;
          }
          goto LABEL_285;
        }
LABEL_283:
        uint64_t v41 = appended;
        goto LABEL_284;
      }
      if (PixelFormatType <= 2016687155)
      {
        if (PixelFormatType == 1999843442) {
          goto LABEL_133;
        }
        int v54 = 2016686640;
        goto LABEL_101;
      }
      if (PixelFormatType == 2016687156) {
        goto LABEL_112;
      }
      int v46 = 2016687216;
      goto LABEL_132;
    }
    if (PixelFormatType > 1278226487)
    {
      if (PixelFormatType > 1380411456)
      {
        if (PixelFormatType <= 1717855599)
        {
          if (PixelFormatType != 1380411457)
          {
            if (PixelFormatType == 1647534392)
            {
              int v42 = a18 | a17;
              if (a8 || v42)
              {
                uint64_t v43 = 0;
                if (a8 == 90) {
                  double v44 = vt_Rotate_b3a8_90CW;
                }
                else {
                  double v44 = vt_Rotate_b3a8_180;
                }
                if (a8 != 90 && a8 != 180)
                {
                  uint64_t v43 = 0;
                  if (a8 == 270) {
                    double v44 = vt_Rotate_b3a8_90CCW;
                  }
                  else {
                    double v44 = 0;
                  }
                }
              }
              else
              {
                uint64_t v43 = vt_Copy_b3a8_b3a8_Crop;
                double v44 = 0;
              }
              if (a17) {
                OSType v56 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, void *, uint64_t *, uint64_t *, char **))vt_Flip_b3a8_Hor;
              }
              else {
                OSType v56 = 0;
              }
              BOOL v57 = a18 == 0;
              CFDictionaryRef v58 = vt_Flip_b3a8_Ver;
              goto LABEL_272;
            }
            goto LABEL_196;
          }
          goto LABEL_151;
        }
        if (PixelFormatType == 1717855600) {
          goto LABEL_133;
        }
        int v46 = 1717856627;
      }
      else
      {
        if (PixelFormatType > 1278226535)
        {
          if (PixelFormatType == 1278226536) {
            goto LABEL_96;
          }
          int v45 = 1278226742;
LABEL_95:
          if (PixelFormatType != v45) {
            goto LABEL_196;
          }
LABEL_96:
          int v42 = a18 | a17;
          if (a8 || v42)
          {
            uint64_t v43 = 0;
            if (a8 == 90) {
              double v44 = vt_Rotate_16_90CW;
            }
            else {
              double v44 = vt_Rotate_16_180;
            }
            if (a8 != 90 && a8 != 180)
            {
              uint64_t v43 = 0;
              if (a8 == 270) {
                double v44 = vt_Rotate_16_90CCW;
              }
              else {
                double v44 = 0;
              }
            }
          }
          else
          {
            uint64_t v43 = vt_Copy_NonPlanar16_Crop;
            double v44 = 0;
          }
          if (a17) {
            OSType v56 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, void *, uint64_t *, uint64_t *, char **))vt_Flip_16_Hor;
          }
          else {
            OSType v56 = 0;
          }
          BOOL v57 = a18 == 0;
          CFDictionaryRef v58 = vt_Flip_16_Ver;
          goto LABEL_272;
        }
        if (PixelFormatType == 1278226488)
        {
          int v42 = a18 | a17;
          if (a8 || v42)
          {
            uint64_t v43 = 0;
            if (a8 == 90) {
              double v44 = vt_Rotate_8_90CW;
            }
            else {
              double v44 = vt_Rotate_8_180;
            }
            if (a8 != 90 && a8 != 180)
            {
              uint64_t v43 = 0;
              if (a8 == 270) {
                double v44 = vt_Rotate_8_90CCW;
              }
              else {
                double v44 = 0;
              }
            }
          }
          else
          {
            uint64_t v43 = vt_Copy_NonPlanar8_Crop;
            double v44 = 0;
          }
          if (a17) {
            OSType v56 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, void *, uint64_t *, uint64_t *, char **))vt_Flip_8_Hor;
          }
          else {
            OSType v56 = 0;
          }
          BOOL v57 = a18 == 0;
          CFDictionaryRef v58 = vt_Flip_8_Ver;
          goto LABEL_272;
        }
        int v46 = 1278226534;
      }
LABEL_132:
      if (PixelFormatType != v46) {
        goto LABEL_196;
      }
LABEL_133:
      int v42 = a18 | a17;
      if (a8 || v42)
      {
        uint64_t v43 = 0;
        if (a8 == 90) {
          double v44 = vt_Rotate_32_90CW;
        }
        else {
          double v44 = vt_Rotate_32_180;
        }
        if (a8 != 90 && a8 != 180)
        {
          uint64_t v43 = 0;
          if (a8 == 270) {
            double v44 = vt_Rotate_32_90CCW;
          }
          else {
            double v44 = 0;
          }
        }
      }
      else
      {
        uint64_t v43 = vt_Copy_NonPlanar32_Crop;
        double v44 = 0;
      }
      if (a17) {
        OSType v56 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, void *, uint64_t *, uint64_t *, char **))vt_Flip_32_Hor;
      }
      else {
        OSType v56 = 0;
      }
      BOOL v57 = a18 == 0;
      CFDictionaryRef v58 = vt_Flip_32_Ver;
      goto LABEL_272;
    }
    if (PixelFormatType > 875704437)
    {
      if (PixelFormatType > 875836533)
      {
        if (PixelFormatType != 875836534)
        {
          int v46 = 1111970369;
          goto LABEL_132;
        }
LABEL_105:
        int v42 = a18 | a17;
        if (a8 || v42)
        {
          uint64_t v43 = 0;
          if (a8 == 90) {
            double v44 = vt_Rotate_420v_90CW;
          }
          else {
            double v44 = vt_Rotate_420v_180;
          }
          if (a8 != 90 && a8 != 180)
          {
            uint64_t v43 = 0;
            if (a8 == 270) {
              double v44 = vt_Rotate_420v_90CCW;
            }
            else {
              double v44 = 0;
            }
          }
        }
        else
        {
          double v44 = 0;
          if ((PixelFormatType & 0xFFFFFFEF) == 0x34323066) {
            uint64_t v43 = vt_Copy_420v_Crop;
          }
          else {
            uint64_t v43 = vt_Copy_444v_Crop;
          }
        }
        if (a17) {
          OSType v56 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, void *, uint64_t *, uint64_t *, char **))vt_Flip_420v_Hor;
        }
        else {
          OSType v56 = 0;
        }
        BOOL v57 = a18 == 0;
        CFDictionaryRef v58 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, void *, uint64_t *, uint64_t *, char **))vt_Flip_420v_Ver;
        goto LABEL_272;
      }
      if (PixelFormatType == 875704438) {
        goto LABEL_105;
      }
      int v55 = 875836518;
    }
    else
    {
      if (PixelFormatType <= 846624120)
      {
        if (PixelFormatType == 32) {
          goto LABEL_133;
        }
        if (PixelFormatType != 846624102) {
          goto LABEL_196;
        }
LABEL_148:
        int v42 = a18 | a17;
        if (a8 || v42)
        {
          uint64_t v43 = 0;
          if (a8 == 90) {
            double v44 = vt_Rotate_2vuy_90CW;
          }
          else {
            double v44 = vt_Rotate_2vuy_180;
          }
          if (a8 != 90 && a8 != 180)
          {
            uint64_t v43 = 0;
            if (a8 == 270) {
              double v44 = vt_Rotate_2vuy_90CCW;
            }
            else {
              double v44 = 0;
            }
          }
        }
        else
        {
          uint64_t v43 = vt_Copy_NonPlanar16_Crop;
          double v44 = 0;
        }
        if (a17) {
          OSType v56 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, void *, uint64_t *, uint64_t *, char **))vt_Flip_2vuy_Hor;
        }
        else {
          OSType v56 = 0;
        }
        BOOL v57 = a18 == 0;
        CFDictionaryRef v58 = (uint64_t (*)(unint64_t *, uint64_t, uint64_t *, char **, void *, uint64_t *, uint64_t *, char **))vt_Flip_2vuy_Ver;
        goto LABEL_272;
      }
      if (PixelFormatType == 846624121) {
        goto LABEL_148;
      }
      int v55 = 875704422;
    }
    if (PixelFormatType != v55) {
      goto LABEL_196;
    }
    goto LABEL_105;
  }
  uint64_t v41 = 4294954382;
  if (a11 == a16 && a12 == a15) {
    goto LABEL_17;
  }
LABEL_284:
  if (v37) {
LABEL_285:
  }
    CFRelease(v37);
LABEL_286:
  if (v38) {
    CFRelease(v38);
  }
  if (v39) {
    CFRelease(v39);
  }
LABEL_290:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v41;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

unsigned char *vt_Copy_RGhA_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, float32x4_t a5, float16x8_t a6, float32x4_t a7)
{
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a1 + 20);
  uint64_t v9 = *(void *)(a1 + 36);
  uint64_t v10 = *(void *)(a1 + 44);
  uint64_t v11 = *(void *)(a1 + 28);
  unint64_t v12 = 2 * *a1;
  uint64_t v13 = 2 * (v11 * a2 / v12);
  uint64_t v14 = v10 + v13;
  uint64_t v15 = 2 * ((v11 + v11 * a2) / v12);
  uint64_t v16 = v10 + v15;
  uint64_t v17 = *((void *)a1 + 14);
  unint64_t v18 = *((void *)a1 + 13) * a2;
  uint64_t v19 = *((void *)a1 + 19);
  uint64_t v21 = *((void *)a1 + 15);
  uint64_t v20 = (uint64_t *)*((void *)a1 + 16);
  size_t v22 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v23 = **((void **)a1 + 8);
  uint64_t v24 = **((void **)a1 + 7);
  uint64_t v277 = *v22;
  uint64_t v25 = v22[1];
  uint64_t v26 = v22[2];
  uint64_t v28 = *v20;
  double result = (unsigned char *)v20[1];
  uint64_t v29 = v20[2];
  int v331 = *(_DWORD *)(v19 + 154);
  unsigned int v30 = *(unsigned __int16 *)(v19 + 144);
  unsigned int v31 = *(unsigned __int16 *)(v19 + 146);
  unsigned int v32 = *(unsigned __int16 *)(v19 + 148);
  unsigned int v33 = *(unsigned __int16 *)(v19 + 150);
  unsigned int v34 = *(unsigned __int16 *)(v19 + 152);
  float v324 = *(float *)(v19 + 36);
  float v323 = *(float *)(v19 + 40);
  a7.i32[0] = *(_DWORD *)(v19 + 48);
  float v322 = *(float *)(v19 + 44);
  v36.i32[0] = *(_DWORD *)(v19 + 52);
  v35.i32[0] = *(_DWORD *)(v19 + 56);
  unsigned __int32 v37 = *(_DWORD *)(v19 + 60);
  a6.i32[0] = *(_DWORD *)(v19 + 64);
  uint64_t v38 = v21 + 2 * (v18 / v12);
  uint64_t v278 = v23;
  uint64_t v39 = v23 * v14;
  a5.i32[0] = *(_DWORD *)(v19 + 68);
  float v321 = *(float *)(v19 + 72);
  float v320 = *(float *)(v19 + 76);
  float v319 = *(float *)(v19 + 80);
  if (v38 >= 0) {
    uint64_t v40 = v38;
  }
  else {
    uint64_t v40 = v38 + 1;
  }
  float v318 = *(float *)(v19 + 84);
  float v317 = *(float *)(v19 + 88);
  uint64_t v275 = v25;
  uint64_t v276 = v26;
  uint64_t v41 = v25 * (v40 >> 1);
  float v316 = *(float *)(v19 + 92);
  float v315 = *(float *)(v19 + 96);
  uint64_t v42 = v29 + v26 * v38;
  float v314 = *(float *)(v19 + 100);
  _S17 = *(float *)(v19 + 108);
  float v313 = *(float *)(v19 + 104);
  _S18 = *(float *)(v19 + 112);
  _S19 = *(float *)(v19 + 116);
  _S20 = *(float *)(v19 + 120);
  _Q6.i32[1] = 0;
  memset(v330, 0, sizeof(v330));
  do
  {
    unsigned int v48 = 0;
    char v49 = *((unsigned char *)&v331 + v7);
    do
    {
      *((unsigned char *)v330 + 8 * (((_BYTE)v7 + (v48 >> 3)) & 0x1F) + v48) = v49 + 4 * v48;
      ++v48;
    }
    while (v48 != 8);
    ++v7;
  }
  while (v7 != 4);
  _ZF = v15 == v13;
  uint64_t v52 = v277;
  uint64_t v51 = v278;
  uint64_t v53 = v276;
  if (!_ZF)
  {
    unint64_t v54 = 0;
    unint64_t v274 = v16 - v14;
    uint64_t v55 = v19 + 16548;
    float v56 = (float)v30;
    float v308 = (float)v31;
    float v57 = (float)v32;
    float v325 = (float)v33;
    float v58 = (float)v34;
    a7.i32[1] = v37;
    __asm { FMOV            V5.2S, #0.25 }
    *(float32x2_t *)a7.f32 = vmul_f32(*(float32x2_t *)a7.f32, _D5);
    v36.i32[1] = a6.i32[0];
    *(float32x2_t *)a6.i8 = vmul_f32(v36, _D5);
    v35.i32[1] = a5.i32[0];
    *(float32x2_t *)a5.f32 = vmul_f32(v35, _D5);
    uint64_t v63 = v19 + 32932;
    uint64_t v64 = v19 + 164;
    _S1 = v324;
    __asm { FCVT            H1, S1 }
    float16x8_t v303 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a7), 0);
    short float v304 = *(short float *)&_S1;
    _S1 = v323;
    __asm { FCVT            H1, S1 }
    float16x8_t v301 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)a6), 0);
    short float v302 = *(short float *)&_S1;
    _S1 = v322;
    __asm { FCVT            H1, S1 }
    _Q0 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    float16x8_t v299 = (float16x8_t)_Q0;
    short float v300 = *(short float *)&_S1;
    __asm { FCVT            H0, S17 }
    short float v298 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S18 }
    short float v297 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S19 }
    short float v296 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S20 }
    short float v295 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v321;
    __asm { FCVT            H0, S0 }
    short float v294 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v320;
    __asm { FCVT            H0, S0 }
    short float v293 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v319;
    __asm { FCVT            H0, S0 }
    short float v292 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v318;
    __asm { FCVT            H0, S0 }
    short float v291 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v317;
    __asm { FCVT            H0, S0 }
    int32x4_t v290 = _Q0;
    *(float *)_Q0.i32 = v316;
    __asm { FCVT            H0, S0 }
    short float v289 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v315;
    __asm { FCVT            H0, S0 }
    short float v329 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v314;
    __asm { FCVT            H0, S0 }
    short float v328 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v30;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v31;
    int16x8_t v70 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v32;
    int16x8_t v71 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v287 = (float16x8_t)v71;
    float16x8_t v288 = (float16x8_t)v70;
    *(short float *)v71.i16 = (short float)v33;
    int16x8_t v72 = vdupq_lane_s16(*(int16x4_t *)v71.i8, 0);
    *(short float *)v71.i16 = (short float)v34;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)v71.i8, 0);
    float16x8_t v285 = (float16x8_t)_Q0;
    float16x8_t v286 = (float16x8_t)v72;
    *(float *)_Q0.i32 = v313;
    __asm { FCVT            H0, S0 }
    short float v327 = *(short float *)_Q0.i16;
    uint64_t v74 = &result[v41];
    if (v29) {
      uint64_t v75 = (int8x8_t *)(v42 + v17);
    }
    else {
      uint64_t v75 = 0;
    }
    double result = &v74[v17];
    uint64_t v76 = (int8x8_t *)(v28 + v277 * v38 + v17);
    int v77 = (const __int16 *)(v24 + v39 + 8 * v9);
    float v306 = *(float *)a6.i32;
    unint64_t v307 = a7.i64[0];
    float v283 = *(float *)&a6.i32[1];
    float v284 = a7.f32[1];
    float v305 = a5.f32[0];
    float v281 = v58;
    float v282 = a5.f32[1];
    v78.i64[0] = 0x9000900090009000;
    v78.i64[1] = 0x9000900090009000;
    float v312 = _S17;
    float v311 = _S18;
    float v310 = _S19;
    float v309 = _S20;
    do
    {
      CFTypeRef v79 = (char *)v77 + v51;
      char v80 = (int8x8_t *)((char *)v76 + v52);
      char v81 = (int8x8_t *)((char *)v75 + v53);
      unint64_t v279 = v80;
      uint64_t v280 = (char *)v75 + v53;
      if ((int)v8 < 8)
      {
        unint64_t v161 = 0;
        int64x2_t v83 = (const __int16 *)((char *)v77 + v51);
        int v160 = result;
      }
      else
      {
        uint64_t v82 = 0;
        int64x2_t v83 = (const __int16 *)((char *)v77 + v51);
        do
        {
          int16x8x4_t v333 = vld4q_s16(v77);
          v77 += 32;
          int16x8x4_t v332 = vld4q_s16(v83);
          v83 += 32;
          if (v75)
          {
            float16x8_t v84 = (float16x8_t)vdupq_n_s16(0x5BF8u);
            int8x8_t v85 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16((float16x8_t)v333.val[3], v84)));
            int8x8_t v86 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16((float16x8_t)v332.val[3], v84)));
          }
          else
          {
            int8x8_t v85 = 0;
            int8x8_t v86 = 0;
          }
          int8x8_t v326 = v86;
          v87.i64[0] = 0x7000700070007000;
          v87.i64[1] = 0x7000700070007000;
          float16x8_t v88 = vmulq_f16((float16x8_t)v333.val[1], v87);
          float16x8_t v89 = vmulq_f16((float16x8_t)v333.val[2], v87);
          float16x8_t v90 = vmulq_f16((float16x8_t)v332.val[0], v87);
          float16x8_t v91 = vmulq_f16((float16x8_t)v332.val[1], v87);
          uint16x8_t v92 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v333.val[0], v87), (float16x8_t)0), v78));
          uint32x4_t v93 = vmovl_high_u16(v92);
          uint32x4_t v94 = vmovl_u16(*(uint16x4_t *)v92.i8);
          v95.i16[0] = *(_WORD *)(v64 + 2 * v94.u32[0]);
          v95.i16[1] = *(_WORD *)(v64 + 2 * v94.u32[1]);
          v95.i16[2] = *(_WORD *)(v64 + 2 * v94.u32[2]);
          v95.i16[3] = *(_WORD *)(v64 + 2 * v94.u32[3]);
          v95.i16[4] = *(_WORD *)(v64 + 2 * v93.u32[0]);
          v95.i16[5] = *(_WORD *)(v64 + 2 * v93.u32[1]);
          v95.i16[6] = *(_WORD *)(v64 + 2 * v93.u32[2]);
          v95.i16[7] = *(_WORD *)(v64 + 2 * v93.u32[3]);
          uint16x8_t v96 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v88, (float16x8_t)0), v78));
          uint32x4_t v97 = vmovl_high_u16(v96);
          uint32x4_t v98 = vmovl_u16(*(uint16x4_t *)v96.i8);
          v99.i16[0] = *(_WORD *)(v64 + 2 * v98.u32[0]);
          v99.i16[1] = *(_WORD *)(v64 + 2 * v98.u32[1]);
          v99.i16[2] = *(_WORD *)(v64 + 2 * v98.u32[2]);
          v99.i16[3] = *(_WORD *)(v64 + 2 * v98.u32[3]);
          v99.i16[4] = *(_WORD *)(v64 + 2 * v97.u32[0]);
          v99.i16[5] = *(_WORD *)(v64 + 2 * v97.u32[1]);
          v99.i16[6] = *(_WORD *)(v64 + 2 * v97.u32[2]);
          v99.i16[7] = *(_WORD *)(v64 + 2 * v97.u32[3]);
          uint16x8_t v100 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v89, (float16x8_t)0), v78));
          uint32x4_t v101 = vmovl_high_u16(v100);
          uint32x4_t v102 = vmovl_u16(*(uint16x4_t *)v100.i8);
          v103.i16[0] = *(_WORD *)(v64 + 2 * v102.u32[0]);
          v103.i16[1] = *(_WORD *)(v64 + 2 * v102.u32[1]);
          v103.i16[2] = *(_WORD *)(v64 + 2 * v102.u32[2]);
          v103.i16[3] = *(_WORD *)(v64 + 2 * v102.u32[3]);
          v103.i16[4] = *(_WORD *)(v64 + 2 * v101.u32[0]);
          v103.i16[5] = *(_WORD *)(v64 + 2 * v101.u32[1]);
          v103.i16[6] = *(_WORD *)(v64 + 2 * v101.u32[2]);
          v103.i16[7] = *(_WORD *)(v64 + 2 * v101.u32[3]);
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v90, (float16x8_t)0), v78));
          uint32x4_t v105 = vmovl_high_u16(v104);
          uint32x4_t v106 = vmovl_u16(*(uint16x4_t *)v104.i8);
          v107.i16[0] = *(_WORD *)(v64 + 2 * v106.u32[0]);
          v107.i16[1] = *(_WORD *)(v64 + 2 * v106.u32[1]);
          v107.i16[2] = *(_WORD *)(v64 + 2 * v106.u32[2]);
          v107.i16[3] = *(_WORD *)(v64 + 2 * v106.u32[3]);
          v107.i16[4] = *(_WORD *)(v64 + 2 * v105.u32[0]);
          v107.i16[5] = *(_WORD *)(v64 + 2 * v105.u32[1]);
          v107.i16[6] = *(_WORD *)(v64 + 2 * v105.u32[2]);
          v107.i16[7] = *(_WORD *)(v64 + 2 * v105.u32[3]);
          uint16x8_t v108 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v91, (float16x8_t)0), v78));
          uint32x4_t v109 = vmovl_high_u16(v108);
          uint32x4_t v110 = vmovl_u16(*(uint16x4_t *)v108.i8);
          v91.i16[0] = *(_WORD *)(v64 + 2 * v110.u32[0]);
          v91.i16[1] = *(_WORD *)(v64 + 2 * v110.u32[1]);
          v91.i16[2] = *(_WORD *)(v64 + 2 * v110.u32[2]);
          v91.i16[3] = *(_WORD *)(v64 + 2 * v110.u32[3]);
          v91.i16[4] = *(_WORD *)(v64 + 2 * v109.u32[0]);
          v91.i16[5] = *(_WORD *)(v64 + 2 * v109.u32[1]);
          v91.i16[6] = *(_WORD *)(v64 + 2 * v109.u32[2]);
          v91.i16[7] = *(_WORD *)(v64 + 2 * v109.u32[3]);
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v332.val[2], v87), (float16x8_t)0), v78));
          uint32x4_t v112 = vmovl_high_u16(v111);
          float16x8_t v113 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v111.i8);
          v113.i16[0] = *(_WORD *)(v64 + 2 * v113.u32[0]);
          v113.i16[1] = *(_WORD *)(v64 + 2 * v113.u32[1]);
          v113.i16[2] = *(_WORD *)(v64 + 2 * v113.u32[2]);
          v113.i16[3] = *(_WORD *)(v64 + 2 * v113.u32[3]);
          v113.i16[4] = *(_WORD *)(v64 + 2 * v112.u32[0]);
          v113.i16[5] = *(_WORD *)(v64 + 2 * v112.u32[1]);
          v113.i16[6] = *(_WORD *)(v64 + 2 * v112.u32[2]);
          v113.i16[7] = *(_WORD *)(v64 + 2 * v112.u32[3]);
          uint16x8_t v114 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v95, v298), v99, v297), v103, v296), vmaxq_f16(vmaxq_f16(v95, v99), v103), v295), (float16x8_t)0), v78));
          uint32x4_t v115 = vmovl_high_u16(v114);
          uint32x4_t v116 = vmovl_u16(*(uint16x4_t *)v114.i8);
          v117.i16[0] = *(_WORD *)(v55 + 2 * v116.u32[0]);
          v117.i16[1] = *(_WORD *)(v55 + 2 * v116.u32[1]);
          v117.i16[2] = *(_WORD *)(v55 + 2 * v116.u32[2]);
          v117.i16[3] = *(_WORD *)(v55 + 2 * v116.u32[3]);
          v117.i16[4] = *(_WORD *)(v55 + 2 * v115.u32[0]);
          v117.i16[5] = *(_WORD *)(v55 + 2 * v115.u32[1]);
          v117.i16[6] = *(_WORD *)(v55 + 2 * v115.u32[2]);
          v117.i16[7] = *(_WORD *)(v55 + 2 * v115.u32[3]);
          float16x8_t v118 = vmulq_f16(v95, v117);
          float16x8_t v119 = vmulq_f16(v99, v117);
          float16x8_t v120 = vmulq_f16(v103, v117);
          uint16x8_t v121 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v107, v298), v91, v297), v113, v296), vmaxq_f16(vmaxq_f16(v107, v91), v113), v295), (float16x8_t)0), v78));
          uint32x4_t v122 = vmovl_high_u16(v121);
          float16x8_t v123 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v121.i8);
          v123.i16[0] = *(_WORD *)(v55 + 2 * v123.u32[0]);
          v123.i16[1] = *(_WORD *)(v55 + 2 * v123.u32[1]);
          v123.i16[2] = *(_WORD *)(v55 + 2 * v123.u32[2]);
          v123.i16[3] = *(_WORD *)(v55 + 2 * v123.u32[3]);
          v123.i16[4] = *(_WORD *)(v55 + 2 * v122.u32[0]);
          v123.i16[5] = *(_WORD *)(v55 + 2 * v122.u32[1]);
          v123.i16[6] = *(_WORD *)(v55 + 2 * v122.u32[2]);
          v123.i16[7] = *(_WORD *)(v55 + 2 * v122.u32[3]);
          float16x8_t v124 = vmulq_f16(v107, v123);
          float16x8_t v125 = vmulq_f16(v91, v123);
          float16x8_t v126 = vmulq_f16(v113, v123);
          v127.i16[7] = v290.i16[7];
          float16x8_t v128 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v118, v291), v119, *(short float *)v290.i16), v120, v289);
          float16x8_t v129 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v120, v327), v119, v328), v118, v329);
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v118, v294), v119, v293), v120, v292), (float16x8_t)0), v78));
          uint32x4_t v131 = vmovl_high_u16(v130);
          uint32x4_t v132 = vmovl_u16(*(uint16x4_t *)v130.i8);
          v127.i16[0] = *(_WORD *)(v63 + 2 * v132.u32[0]);
          v127.i16[1] = *(_WORD *)(v63 + 2 * v132.u32[1]);
          v127.i16[2] = *(_WORD *)(v63 + 2 * v132.u32[2]);
          v127.i16[3] = *(_WORD *)(v63 + 2 * v132.u32[3]);
          v127.i16[4] = *(_WORD *)(v63 + 2 * v131.u32[0]);
          v127.i16[5] = *(_WORD *)(v63 + 2 * v131.u32[1]);
          v127.i16[6] = *(_WORD *)(v63 + 2 * v131.u32[2]);
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v128, (float16x8_t)0), v78));
          uint32x4_t v134 = vmovl_high_u16(v133);
          uint32x4_t v135 = vmovl_u16(*(uint16x4_t *)v133.i8);
          v107.i16[0] = *(_WORD *)(v63 + 2 * v135.u32[0]);
          v107.i16[1] = *(_WORD *)(v63 + 2 * v135.u32[1]);
          v107.i16[2] = *(_WORD *)(v63 + 2 * v135.u32[2]);
          v107.i16[3] = *(_WORD *)(v63 + 2 * v135.u32[3]);
          v107.i16[4] = *(_WORD *)(v63 + 2 * v134.u32[0]);
          v107.i16[5] = *(_WORD *)(v63 + 2 * v134.u32[1]);
          v107.i16[6] = *(_WORD *)(v63 + 2 * v134.u32[2]);
          float16x8_t v136 = (float16x8_t)vuzp1q_s16(v127, (int16x8_t)v107);
          v127.i16[7] = *(_WORD *)(v63 + 2 * v131.u32[3]);
          v107.i16[7] = *(_WORD *)(v63 + 2 * v134.u32[3]);
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v129, (float16x8_t)0), v78));
          uint32x4_t v138 = vmovl_high_u16(v137);
          uint32x4_t v139 = vmovl_u16(*(uint16x4_t *)v137.i8);
          *(void *)&long long v140 = v138.u32[2];
          *((void *)&v140 + 1) = v138.u32[3];
          long long v141 = v140;
          *(void *)&long long v140 = v138.u32[0];
          *((void *)&v140 + 1) = v138.u32[1];
          long long v142 = v140;
          *((void *)&v140 + 1) = v139.u32[3];
          v72.i16[7] = (unint64_t)v139.u32[3] >> 48;
          v72.i16[0] = *(_WORD *)(v63 + 2 * v139.u32[0]);
          v72.i16[1] = *(_WORD *)(v63 + 2 * v139.u32[1]);
          v72.i16[2] = *(_WORD *)(v63 + 2 * v139.u32[2]);
          v72.i16[3] = *(_WORD *)(v63 + 2 * *((void *)&v140 + 1));
          v72.i16[4] = *(_WORD *)(v63 + 2 * v142);
          v72.i16[5] = *(_WORD *)(v63 + 2 * *((void *)&v142 + 1));
          v72.i16[6] = *(_WORD *)(v63 + 2 * v141);
          float16x8_t v143 = (float16x8_t)v72;
          v143.i16[7] = *(_WORD *)(v63 + 2 * *((void *)&v141 + 1));
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v124, v294), v125, v293), v126, v292), (float16x8_t)0), v78));
          float16x8_t v145 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v144.i8);
          uint32x4_t v146 = vmovl_high_u16(v144);
          *(void *)&long long v140 = v146.u32[2];
          *((void *)&v140 + 1) = v146.u32[3];
          long long v147 = v140;
          *((void *)&v140 + 1) = v145.u32[3];
          v145.i16[7] = (unint64_t)v145.u32[3] >> 48;
          v145.i16[0] = *(_WORD *)(v63 + 2 * v145.u32[0]);
          v145.i16[1] = *(_WORD *)(v63 + 2 * v145.u32[1]);
          v145.i16[2] = *(_WORD *)(v63 + 2 * v145.u32[2]);
          v145.i16[3] = *(_WORD *)(v63 + 2 * *((void *)&v140 + 1));
          v145.i16[4] = *(_WORD *)(v63 + 2 * v146.u32[0]);
          v145.i16[5] = *(_WORD *)(v63 + 2 * v146.u32[1]);
          v145.i16[6] = *(_WORD *)(v63 + 2 * v147);
          uint64_t v148 = (__int16 *)(v63 + 2 * *((void *)&v147 + 1));
          uint16x8_t v149 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v124, v291), v125, *(short float *)v290.i16), v126, v289), (float16x8_t)0), v78));
          uint32x4_t v150 = vmovl_u16(*(uint16x4_t *)v149.i8);
          uint32x4_t v151 = vmovl_high_u16(v149);
          *(void *)&long long v140 = v151.u32[2];
          *((void *)&v140 + 1) = v151.u32[3];
          long long v152 = v140;
          *((void *)&v140 + 1) = v150.u32[3];
          v150.i16[7] = (unint64_t)v150.u32[3] >> 48;
          _Q6.i16[0] = *(_WORD *)(v63 + 2 * v150.u32[0]);
          _Q6.i16[1] = *(_WORD *)(v63 + 2 * v150.u32[1]);
          _Q6.i16[2] = *(_WORD *)(v63 + 2 * v150.u32[2]);
          _Q6.i16[3] = *(_WORD *)(v63 + 2 * *((void *)&v140 + 1));
          _Q6.i16[4] = *(_WORD *)(v63 + 2 * v151.u32[0]);
          _Q6.i16[5] = *(_WORD *)(v63 + 2 * v151.u32[1]);
          _Q6.i16[6] = *(_WORD *)(v63 + 2 * v152);
          float16x8_t v153 = (float16x8_t)vuzp1q_s16((int16x8_t)v145, (int16x8_t)_Q6);
          v145.i16[7] = *v148;
          _Q6.i16[7] = *(_WORD *)(v63 + 2 * *((void *)&v152 + 1));
          uint16x8_t v154 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v126, v327), v125, v328), v124, v329), (float16x8_t)0), v78));
          uint32x4_t v155 = vmovl_high_u16(v154);
          int16x8_t v156 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v154.i8);
          *(void *)&long long v140 = v155.u32[2];
          *((void *)&v140 + 1) = v155.u32[3];
          long long v157 = v140;
          *(void *)&long long v140 = v155.u32[0];
          *((void *)&v140 + 1) = v155.u32[1];
          long long v158 = v140;
          *((void *)&v140 + 1) = v156.u32[3];
          v156.i16[7] = (unint64_t)v156.u32[3] >> 48;
          v156.i16[0] = *(_WORD *)(v63 + 2 * v156.u32[0]);
          v156.i16[1] = *(_WORD *)(v63 + 2 * v156.u32[1]);
          v156.i16[2] = *(_WORD *)(v63 + 2 * v156.u32[2]);
          v156.i16[3] = *(_WORD *)(v63 + 2 * *((void *)&v140 + 1));
          v156.i16[4] = *(_WORD *)(v63 + 2 * v158);
          v156.i16[5] = *(_WORD *)(v63 + 2 * *((void *)&v158 + 1));
          v156.i16[6] = *(_WORD *)(v63 + 2 * v157);
          float16x8_t v159 = (float16x8_t)v156;
          v159.i16[7] = *(_WORD *)(v63 + 2 * *((void *)&v157 + 1));
          *v76++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v69, (float16x8_t)v127, v304), v107, v302), v143, v300), v69), v287)));
          *v80++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v69, v145, v304), _Q6, v302), v159, v300), v69), v287)));
          _Q0 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v136, (float16x8_t)vuzp2q_s16(v127, (int16x8_t)v107)), v153), (float16x8_t)vuzp2q_s16((int16x8_t)v145, (int16x8_t)_Q6));
          a6 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v288, v303, (float16x8_t)vzip1q_s16(_Q0, _Q0)), v301, (float16x8_t)vzip2q_s16(_Q0, _Q0)), v299, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v72, v72), (float16x8_t)vtrn2q_s16((int16x8_t)v143, (int16x8_t)v143)), (float16x8_t)vtrn1q_s16(v156, v156)), (float16x8_t)vtrn2q_s16((int16x8_t)v159, (int16x8_t)v159)));
          v72.i32[1] = v285.i32[1];
          *(int8x8_t *)_Q0.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(a6, v286), v285)));
          *(void *)&result[v82] = _Q0.i64[0];
          if (v75)
          {
            *v75++ = v85;
            _Q0.i32[1] = v326.i32[1];
            *v81++ = v326;
          }
          float v58 = v281;
          v82 += 8;
        }
        while ((int)v82 < (int)v8 - 7);
        int v160 = &result[v82];
        unint64_t v161 = v8 & 0xFFFFFFF8;
      }
      if (v8 > v161)
      {
        uint64_t v162 = 0;
        unsigned __int16 v163 = v77 + 4;
        int v164 = v83 + 4;
        do
        {
          uint64_t v165 = v162 + 2 * v331;
          _Q0.i16[0] = *(const __int16 *)((char *)v163 + v165 - 8);
          uint64_t v166 = v162 + 2 * BYTE1(v331);
          uint64_t v167 = v162 + 2 * BYTE2(v331);
          _Q0.i16[1] = *(const __int16 *)((char *)v163 + v166 - 8);
          float32x2_t v168 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q0.i8), v168), 0), v168)));
          _D0.i16[0] = *(_WORD *)(v64 + 2 * _D0.u32[0]);
          v72.i16[0] = *(const __int16 *)((char *)v163 + v167 - 8);
          __asm { FCVT            S30, H0 }
          _D0.i16[0] = *(_WORD *)(v64 + 2 * _D0.u32[1]);
          __asm { FCVT            S9, H0 }
          v72.i16[1] = *(const __int16 *)((char *)v163 + v165);
          *(int32x2_t *)_Q0.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)v72.i8), v168), 0), v168)));
          _H1 = *(_WORD *)(v64 + 2 * _Q0.u32[0]);
          __asm { FCVT            S11, H1 }
          float v174 = fmaxf(_S30, fmaxf(_S9, _S11));
          float v175 = (float)((float)((float)(_S18 * _S9) + (float)(_S17 * _S30)) + (float)(_S19 * _S11))
               + (float)(_S20 * v174);
          float v176 = 8191.0;
          if (v175 <= 8191.0)
          {
            float v176 = (float)((float)((float)(_S18 * _S9) + (float)(_S17 * _S30)) + (float)(_S19 * _S11))
                 + (float)(_S20 * v174);
            if (v175 < 0.0) {
              float v176 = 0.0;
            }
          }
          v72.i16[0] = *(const __int16 *)((char *)v163 + v166);
          _H0 = *(_WORD *)(v64 + 2 * _Q0.u32[1]);
          v72.i16[1] = *(const __int16 *)((char *)v163 + v167);
          __asm { FCVT            S12, H0 }
          _D0 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)v72.i8), v168), 0), v168)));
          _D0.i16[0] = *(_WORD *)(v64 + 2 * _D0.u32[0]);
          __asm { FCVT            S14, H0 }
          _D0.i16[0] = *(_WORD *)(v64 + 2 * _D0.u32[1]);
          __asm { FCVT            S15, H0 }
          float v181 = fmaxf(_S12, fmaxf(_S14, _S15));
          *(float *)_D0.i32 = (float)((float)((float)(_S18 * _S14) + (float)(_S17 * _S12)) + (float)(_S19 * _S15))
                            + (float)(_S20 * v181);
          float v183 = 8191.0;
          if (*(float *)_D0.i32 <= 8191.0)
          {
            float v183 = (float)((float)((float)(_S18 * _S14) + (float)(_S17 * _S12)) + (float)(_S19 * _S15))
                 + (float)(_S20 * v181);
            if (*(float *)_D0.i32 < 0.0) {
              float v183 = 0.0;
            }
          }
          _D0.i16[0] = *(const __int16 *)((char *)v164 + v165 - 8);
          _D0.i16[1] = *(const __int16 *)((char *)v164 + v166 - 8);
          *(int32x2_t *)_Q0.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D0), v168), 0), v168)));
          _Q0.i16[0] = *(_WORD *)(v64 + 2 * _Q0.u32[0]);
          int v184 = (__int16 *)((char *)v164 + v167);
          a6.i16[0] = *(v184 - 4);
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v64 + 2 * _Q0.u32[1]);
          __asm { FCVT            S1, H1 }
          a6.i16[1] = *(const __int16 *)((char *)v164 + v165);
          int32x2_t v187 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)a6.i8), v168), 0), v168)));
          _H3 = *(_WORD *)(v64 + 2 * v187.u32[0]);
          __asm { FCVT            S3, H3 }
          float v190 = (float)((float)((float)(_S18 * _S1) + (float)(_S17 * *(float *)_Q0.i32)) + (float)(_S19 * _S3))
               + (float)(_S20 * fmaxf(*(float *)_Q0.i32, fmaxf(_S1, _S3)));
          float v191 = 8191.0;
          if (v190 <= 8191.0)
          {
            float v191 = v190;
            if (v190 < 0.0) {
              float v191 = 0.0;
            }
          }
          _Q6.i16[0] = *(const __int16 *)((char *)v164 + v166);
          _H5 = *(_WORD *)(v64 + 2 * v187.u32[1]);
          _Q6.i16[1] = *v184;
          __asm { FCVT            S5, H5 }
          *(float32x2_t *)_Q6.i8 = vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q6.i8), v168), 0);
          _D2 = vcvt_s32_f32(vrnda_f32(vminnm_f32(*(float32x2_t *)_Q6.i8, v168)));
          _D2.i16[0] = *(_WORD *)(v64 + 2 * _D2.u32[0]);
          __asm { FCVT            S2, H2 }
          _Q6.i16[0] = *(_WORD *)(v64 + 2 * _D2.u32[1]);
          __asm { FCVT            S6, H6 }
          float v196 = (float)((float)((float)(_S18 * _S2) + (float)(_S17 * _S5)) + (float)(_S19 * *(float *)_Q6.i32))
               + (float)(_S20 * fmaxf(_S5, fmaxf(_S2, *(float *)_Q6.i32)));
          float v197 = 8191.0;
          if (v196 <= 8191.0)
          {
            float v197 = v196;
            if (v196 < 0.0) {
              float v197 = 0.0;
            }
          }
          if (v75)
          {
            uint64_t v198 = v162 + 2 * HIBYTE(v331);
            _H7 = *(const __int16 *)((char *)v163 + v198 - 8);
            __asm { FCVT            S7, H7 }
            _H17 = *(const __int16 *)((char *)v163 + v198);
            __asm { FCVT            S17, H17 }
            unsigned int v203 = (__int16 *)((char *)v164 + v198);
            _H18 = *(v203 - 4);
            __asm { FCVT            S18, H18 }
            _H19 = *v203;
            __asm { FCVT            S19, H19 }
            __int8 v208 = llroundf(_S7 * 255.0);
            __int8 v209 = llroundf(_S17 * 255.0);
            __int8 v210 = llroundf(_S18 * 255.0);
            __int8 v211 = llroundf(_S19 * 255.0);
          }
          else
          {
            __int8 v210 = 0;
            __int8 v208 = 0;
            __int8 v209 = 0;
            __int8 v211 = 0;
          }
          _H7 = *(_WORD *)(v55 + 2 * llroundf(v176));
          __asm { FCVT            S7, H7 }
          float v214 = _S30 * _S7;
          float v215 = _S9 * _S7;
          float v216 = _S11 * _S7;
          _H19 = *(_WORD *)(v55 + 2 * llroundf(v183));
          __asm { FCVT            S19, H19 }
          float v219 = _S12 * _S19;
          float v220 = _S14 * _S19;
          float v221 = _S15 * _S19;
          _H4 = *(_WORD *)(v55 + 2 * llroundf(v191));
          __asm { FCVT            S4, H4 }
          _S0 = *(float *)_Q0.i32 * _S4;
          _S1 = _S1 * _S4;
          _S3 = _S3 * _S4;
          LOWORD(_S4) = *(_WORD *)(v55 + 2 * llroundf(v197));
          __asm { FCVT            S4, H4 }
          float v228 = _S5 * _S4;
          float v229 = _S2 * _S4;
          _S4 = *(float *)_Q6.i32 * _S4;
          _S6 = (float)((float)(v320 * v215) + (float)(v214 * v321)) + (float)(v216 * v319);
          float v232 = (float)((float)(v317 * v215) + (float)(v214 * v318)) + (float)(v216 * v316);
          _S7 = (float)((float)(v314 * v215) + (float)(v214 * v315)) + (float)(v216 * v313);
          _S17 = (float)((float)(v320 * v220) + (float)(v219 * v321)) + (float)(v221 * v319);
          _S18 = (float)((float)(v317 * v220) + (float)(v219 * v318)) + (float)(v221 * v316);
          _S19 = (float)((float)(v314 * v220) + (float)(v219 * v315)) + (float)(v221 * v313);
          float v237 = (float)((float)(v320 * _S1) + (float)(_S0 * v321)) + (float)(_S3 * v319);
          float v238 = (float)((float)(v317 * _S1) + (float)(_S0 * v318)) + (float)(_S3 * v316);
          float v239 = (float)((float)(v314 * _S1) + (float)(_S0 * v315)) + (float)(_S3 * v313);
          float v240 = (float)((float)(v320 * v229) + (float)(v228 * v321)) + (float)(_S4 * v319);
          float v241 = (float)((float)(v317 * v229) + (float)(v228 * v318)) + (float)(_S4 * v316);
          float v242 = (float)((float)(v314 * v229) + (float)(v228 * v315)) + (float)(_S4 * v313);
          LOWORD(_S0) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S2, H0 }
          LOWORD(_S0) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v232, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S4) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H4
            FCVT            S4, H6
          }
          LOWORD(_S6) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v237, 0.0), 8191.0)));
          __asm { FCVT            S16, H6 }
          LOWORD(_S6) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v238, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v239, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S17) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v240, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S18) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v241, 0.0), 8191.0)));
          LOWORD(_S19) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v242, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H18
            FCVT            S19, H19
          }
          float v255 = (float)((float)((float)(v323 * _S0) + (float)(v324 * _S2)) + (float)(v322 * _S1)) + v56;
          if (v255 < v56) {
            float v256 = v56;
          }
          else {
            float v256 = (float)((float)((float)(v323 * _S0) + (float)(v324 * _S2)) + (float)(v322 * _S1)) + v56;
          }
          BOOL v257 = v255 <= v57;
          float v258 = (float)((float)((float)(v323 * _S5) + (float)(v324 * _S3)) + (float)(v322 * _S4)) + v56;
          if (!v257) {
            float v256 = (float)v32;
          }
          __int8 v259 = llroundf(v256);
          if (v258 < v56) {
            float v260 = v56;
          }
          else {
            float v260 = (float)((float)((float)(v323 * _S5) + (float)(v324 * _S3)) + (float)(v322 * _S4)) + v56;
          }
          BOOL v257 = v258 <= v57;
          float v261 = (float)((float)((float)(v323 * _S6) + (float)(v324 * _S16)) + (float)(v322 * _S7)) + v56;
          if (!v257) {
            float v260 = (float)v32;
          }
          __int8 v262 = llroundf(v260);
          if (v261 < v56) {
            float v263 = v56;
          }
          else {
            float v263 = (float)((float)((float)(v323 * _S6) + (float)(v324 * _S16)) + (float)(v322 * _S7)) + v56;
          }
          BOOL v257 = v261 <= v57;
          float v264 = (float)((float)((float)(v323 * _S18) + (float)(v324 * _S17)) + (float)(v322 * _S19)) + v56;
          if (!v257) {
            float v263 = (float)v32;
          }
          __int8 v265 = llroundf(v263);
          if (v264 < v56) {
            float v266 = v56;
          }
          else {
            float v266 = (float)((float)((float)(v323 * _S18) + (float)(v324 * _S17)) + (float)(v322 * _S19)) + v56;
          }
          if (v264 <= v57) {
            float v267 = v266;
          }
          else {
            float v267 = (float)v32;
          }
          float v268 = (float)((float)(_S2 + _S3) + _S16) + _S17;
          float v269 = (float)((float)(_S0 + _S5) + _S6) + _S18;
          v76->i8[0] = v259;
          v76->i8[1] = v262;
          v80->i8[0] = v265;
          v80->i8[1] = llroundf(v267);
          float v270 = (float)((float)(_S1 + _S4) + _S7) + _S19;
          float v271 = (float)((float)(v308 + (float)(v268 * *(float *)&v307)) + (float)(v269 * v306)) + (float)(v270 * v305);
          a6.i64[0] = __PAIR64__(HIDWORD(v307), LODWORD(v58));
          if (v271 <= v58)
          {
            *(float *)a6.i32 = (float)((float)(v308 + (float)(v268 * *(float *)&v307)) + (float)(v269 * v306))
                             + (float)(v270 * v305);
            if (v271 < v325) {
              *(float *)a6.i32 = (float)v33;
            }
          }
          float v272 = (float)((float)(v308 + (float)(v268 * v284)) + (float)(v269 * v283)) + (float)(v270 * v282);
          *int v160 = llroundf(*(float *)a6.i32);
          float v273 = v58;
          _S17 = v312;
          _S18 = v311;
          _S19 = v310;
          _S20 = v309;
          if (v272 <= v58)
          {
            float v273 = v272;
            if (v272 < v325) {
              float v273 = (float)v33;
            }
          }
          v160[1] = llroundf(v273);
          if (v75)
          {
            v75->i8[0] = v208;
            v75->i8[1] = v209;
            uint64_t v75 = (int8x8_t *)((char *)v75 + 2);
            v81->i8[0] = v210;
            v81->i8[1] = v211;
            char v81 = (int8x8_t *)((char *)v81 + 2);
          }
          v161 += 2;
          v162 += 16;
          uint64_t v76 = (int8x8_t *)((char *)v76 + 2);
          char v80 = (int8x8_t *)((char *)v80 + 2);
          v160 += 2;
        }
        while (v8 > v161);
      }
      uint64_t v52 = v277;
      uint64_t v51 = v278;
      int v77 = (const __int16 *)&v79[v278];
      uint64_t v76 = (int8x8_t *)((char *)v279 + v277);
      uint64_t v53 = v276;
      result += v275;
      uint64_t v75 = (int8x8_t *)&v280[v276];
      v54 += 2;
    }
    while (v274 > v54);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_TRC_Tone_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, float a3, double _D1, double a5, double a6, double _D4)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = 2 * *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    uint64_t v14 = *(void *)(result + 44) + 2 * v10;
    unint64_t v166 = 2 * v11 - 2 * v10;
    uint64_t v15 = *((void *)result + 19);
    uint64_t v16 = (uint64_t *)*((void *)result + 17);
    uint64_t v17 = **((void **)result + 8);
    uint64_t v18 = *v16;
    uint64_t v19 = v16[1];
    uint64_t v20 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    float v21 = (float)LODWORD(a3);
    LOWORD(_D1) = *(_WORD *)(v15 + 146);
    float v22 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v15 + 148);
    float v23 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v15 + 150);
    *(float *)&unsigned int v24 = (float)LODWORD(_D1);
    float v187 = *(float *)&v24;
    float v188 = v22;
    LOWORD(v24) = *(_WORD *)(v15 + 152);
    float v25 = (float)v24;
    float v185 = *(float *)(v15 + 40);
    float v186 = *(float *)(v15 + 36);
    float v183 = *(float *)(v15 + 48) * 0.25;
    float v184 = *(float *)(v15 + 44);
    float v181 = *(float *)(v15 + 56) * 0.25;
    float v182 = *(float *)(v15 + 52) * 0.25;
    float v179 = *(float *)(v15 + 64) * 0.25;
    float v180 = *(float *)(v15 + 60) * 0.25;
    float v177 = *(float *)(v15 + 68) * 0.25;
    float v178 = *(float *)(v15 + 72);
    float v175 = *(float *)(v15 + 80);
    float v176 = *(float *)(v15 + 76);
    float v173 = *(float *)(v15 + 88);
    float v174 = *(float *)(v15 + 84);
    float v171 = *(float *)(v15 + 96);
    float v172 = *(float *)(v15 + 92);
    float v26 = *(float *)(v15 + 108);
    float v169 = *(float *)(v15 + 104);
    float v170 = *(float *)(v15 + 100);
    uint64_t v27 = v15 + 164;
    uint64_t v28 = v15 + 16548;
    uint64_t v29 = v15 + 32932;
    float v31 = *(float *)(v15 + 112);
    float v30 = *(float *)(v15 + 116);
    float v32 = *(float *)(v15 + 120);
    uint64_t v33 = *((void *)result + 14);
    uint64_t v34 = (void *)*((void *)result + 16);
    uint64_t v35 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v9);
    double result = (unsigned __int8 *)(**((void **)result + 7) + v17 * v14 + 8 * *(void *)(result + 36));
    uint64_t v36 = v34[1];
    uint64_t v37 = (unsigned char *)(*v34 + v35 * v18 + v33);
    uint64_t v38 = v34[2];
    if (v38) {
      uint64_t v39 = (unsigned char *)(v38 + v35 * v20 + v33);
    }
    else {
      uint64_t v39 = 0;
    }
    uint64_t v40 = *(unsigned __int8 *)(v15 + 157);
    uint64_t v41 = *(unsigned __int8 *)(v15 + 156);
    if (v35 >= 0) {
      uint64_t v42 = v35;
    }
    else {
      uint64_t v42 = v35 + 1;
    }
    uint64_t v163 = v19;
    float32x2_t v43 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v44 = *(unsigned __int8 *)(v15 + 155);
    uint64_t v45 = *(unsigned __int8 *)(v15 + 154);
    uint64_t v46 = v36 + (v42 >> 1) * v19 + v33;
    float v167 = *(float *)(v15 + 112);
    float v168 = *(float *)(v15 + 108);
    uint64_t v164 = v18;
    uint64_t v165 = v17;
    uint64_t v162 = v20;
    do
    {
      CFAllocatorRef v47 = &v39[v20];
      unsigned int v48 = &v37[v18];
      char v49 = &result[v17];
      if (v13)
      {
        unint64_t v50 = 0;
        uint64_t v51 = &v39[v20];
        uint64_t v52 = &v37[v18];
        uint64_t v53 = &result[v17];
        do
        {
          LOWORD(_D1) = *(_WORD *)&result[2 * v45];
          LOWORD(a6) = *(_WORD *)&result[2 * v41];
          unint64_t v54 = result + 8;
          WORD1(_D1) = *(_WORD *)&result[2 * v44];
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D1), v43), 0), v43)));
          _D1.i16[0] = *(_WORD *)(v27 + 2 * _D1.u32[0]);
          __asm { FCVT            S15, H1 }
          _D1.i16[0] = *(_WORD *)(v27 + 2 * _D1.u32[1]);
          __asm { FCVT            S16, H1 }
          WORD1(a6) = *(_WORD *)&result[2 * v45 + 8];
          int32x2_t v62 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&a6), v43), 0), v43)));
          _H3 = *(_WORD *)(v27 + 2 * v62.u32[0]);
          __asm { FCVT            S17, H3 }
          float v65 = fmaxf(_S15, fmaxf(_S16, _S17));
          float v66 = (float)((float)((float)(v31 * _S16) + (float)(v26 * _S15)) + (float)(v30 * _S17)) + (float)(v32 * v65);
          float v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            float v67 = (float)((float)((float)(v31 * _S16) + (float)(v26 * _S15)) + (float)(v30 * _S17)) + (float)(v32 * v65);
            if (v66 < 0.0) {
              float v67 = 0.0;
            }
          }
          LOWORD(a6) = *(_WORD *)&v54[2 * v44];
          _H1 = *(_WORD *)(v27 + 2 * v62.u32[1]);
          WORD1(a6) = *(_WORD *)&v54[2 * v41];
          __asm { FCVT            S19, H1 }
          _D1 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&a6), v43), 0), v43)));
          _D1.i16[0] = *(_WORD *)(v27 + 2 * _D1.u32[0]);
          __asm { FCVT            S20, H1 }
          _D1.i16[0] = *(_WORD *)(v27 + 2 * _D1.u32[1]);
          __asm { FCVT            S22, H1 }
          *(float *)_D1.i32 = (float)((float)((float)(v31 * _S20) + (float)(v26 * _S19)) + (float)(v30 * _S22))
                            + (float)(v32 * fmaxf(_S19, fmaxf(_S20, _S22)));
          LODWORD(a6) = 1174403072;
          if (*(float *)_D1.i32 <= 8191.0)
          {
            LODWORD(a6) = _D1.i32[0];
            if (*(float *)_D1.i32 < 0.0) {
              a6 = 0.0;
            }
          }
          _D1.i16[0] = *(_WORD *)&v53[2 * v45];
          LOWORD(_D4) = *(_WORD *)&v53[2 * v41];
          uint64_t v73 = v53 + 8;
          _D1.i16[1] = *(_WORD *)&v53[2 * v44];
          _D1 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D1), v43), 0), v43))));
          LOWORD(_D1) = *(_WORD *)(v27 + 2 * LODWORD(_D1));
          __asm { FCVT            S1, H1 }
          _H5 = *(_WORD *)(v27 + 2 * HIDWORD(_D1));
          __asm { FCVT            S12, H5 }
          WORD1(_D4) = *(_WORD *)&v53[2 * v45 + 8];
          int32x2_t v76 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D4), v43), 0), v43)));
          _H5 = *(_WORD *)(v27 + 2 * v76.u32[0]);
          __asm { FCVT            S5, H5 }
          float v79 = (float)((float)((float)(v31 * _S12) + (float)(v26 * *(float *)&_D1)) + (float)(v30 * _S5))
              + (float)(v32 * fmaxf(*(float *)&_D1, fmaxf(_S12, _S5)));
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          v7.i16[0] = *(_WORD *)&v73[2 * v44];
          _H4 = *(_WORD *)(v27 + 2 * v76.u32[1]);
          v7.i16[1] = *(_WORD *)&v73[2 * v41];
          __asm { FCVT            S7, H4 }
          _D4 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v7), v43), 0), v43))));
          LOWORD(_D4) = *(_WORD *)(v27 + 2 * LODWORD(_D4));
          __asm { FCVT            S4, H4 }
          _H21 = *(_WORD *)(v27 + 2 * HIDWORD(_D4));
          __asm { FCVT            S21, H21 }
          float v85 = (float)((float)((float)(v31 * *(float *)&_D4) + (float)(v26 * _S7)) + (float)(v30 * _S21))
              + (float)(v32 * fmaxf(_S7, fmaxf(*(float *)&_D4, _S21)));
          float v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          if (v39)
          {
            _H23 = *(_WORD *)&result[2 * v40];
            __asm { FCVT            S23, H23 }
            _H25 = *(_WORD *)&v54[2 * v40];
            _H26 = *(_WORD *)&v53[2 * v40];
            __asm
            {
              FCVT            S25, H25
              FCVT            S26, H26
            }
            _H27 = *(_WORD *)&v73[2 * v40];
            __asm { FCVT            S27, H27 }
            char v95 = llroundf(_S23 * 255.0);
            char v96 = llroundf(_S25 * 255.0);
            char v97 = llroundf(_S26 * 255.0);
            char v98 = llroundf(_S27 * 255.0);
          }
          else
          {
            char v97 = 0;
            char v95 = 0;
            char v96 = 0;
            char v98 = 0;
          }
          _H18 = *(_WORD *)(v28 + 2 * llroundf(v67));
          __asm { FCVT            S18, H18 }
          float v101 = _S15 * _S18;
          float v102 = _S16 * _S18;
          float v103 = _S17 * _S18;
          _H3 = *(_WORD *)(v28 + 2 * llroundf(*(float *)&a6));
          __asm { FCVT            S3, H3 }
          float v106 = _S19 * _S3;
          float v107 = _S20 * _S3;
          _S3 = _S22 * _S3;
          _H6 = *(_WORD *)(v28 + 2 * llroundf(v80));
          __asm { FCVT            S6, H6 }
          _S1 = *(float *)&_D1 * _S6;
          float v112 = _S12 * _S6;
          float v113 = _S5 * _S6;
          LOWORD(_S6) = *(_WORD *)(v28 + 2 * llroundf(v86));
          __asm { FCVT            S6, H6 }
          float v115 = _S7 * _S6;
          _S4 = *(float *)&_D4 * _S6;
          _S6 = _S21 * _S6;
          _S21 = (float)((float)(v176 * v102) + (float)(v101 * v178)) + (float)(v103 * v175);
          float v119 = (float)((float)(v173 * v102) + (float)(v101 * v174)) + (float)(v103 * v172);
          _S16 = (float)((float)(v170 * v102) + (float)(v101 * v171)) + (float)(v103 * v169);
          _S17 = (float)((float)(v176 * v107) + (float)(v106 * v178)) + (float)(_S3 * v175);
          float v122 = (float)((float)(v173 * v107) + (float)(v106 * v174)) + (float)(_S3 * v172);
          float v123 = (float)((float)(v170 * v107) + (float)(v106 * v171)) + (float)(_S3 * v169);
          _S19 = (float)((float)(v176 * v112) + (float)(_S1 * v178)) + (float)(v113 * v175);
          float v125 = (float)((float)(v173 * v112) + (float)(_S1 * v174)) + (float)(v113 * v172);
          _S20 = (float)((float)(v170 * v112) + (float)(_S1 * v171)) + (float)(v113 * v169);
          float v127 = (float)((float)(v176 * _S4) + (float)(v115 * v178)) + (float)(_S6 * v175);
          float v128 = (float)((float)(v173 * _S4) + (float)(v115 * v174)) + (float)(_S6 * v172);
          float v129 = (float)((float)(v170 * _S4) + (float)(v115 * v171)) + (float)(_S6 * v169);
          LOWORD(_S1) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S5, H1 }
          LOWORD(_S1) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S4) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S6) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          LOWORD(_S16) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H6
            FCVT            S6, H16
          }
          LOWORD(_S16) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S18, H16 }
          LOWORD(_S16) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          LOWORD(_S17) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S19) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H20
            FCVT            S21, H21
          }
          float v142 = (float)((float)((float)(v185 * _S1) + (float)(v186 * _S5)) + (float)(v184 * _S3)) + v21;
          if (v142 < v21) {
            float v143 = v21;
          }
          else {
            float v143 = (float)((float)((float)(v185 * _S1) + (float)(v186 * _S5)) + (float)(v184 * _S3)) + v21;
          }
          BOOL v144 = v142 <= v23;
          float v145 = (float)((float)((float)(v185 * _S7) + (float)(v186 * _S4)) + (float)(v184 * _S6)) + v21;
          if (!v144) {
            float v143 = v23;
          }
          char v146 = llroundf(v143);
          if (v145 < v21) {
            float v147 = v21;
          }
          else {
            float v147 = (float)((float)((float)(v185 * _S7) + (float)(v186 * _S4)) + (float)(v184 * _S6)) + v21;
          }
          BOOL v144 = v145 <= v23;
          float v148 = (float)((float)((float)(v185 * _S16) + (float)(v186 * _S18)) + (float)(v184 * _S17)) + v21;
          if (!v144) {
            float v147 = v23;
          }
          char v149 = llroundf(v147);
          if (v148 < v21) {
            float v150 = v21;
          }
          else {
            float v150 = (float)((float)((float)(v185 * _S16) + (float)(v186 * _S18)) + (float)(v184 * _S17)) + v21;
          }
          BOOL v144 = v148 <= v23;
          float v151 = (float)((float)((float)(v185 * _S20) + (float)(v186 * _S19)) + (float)(v184 * _S21)) + v21;
          if (!v144) {
            float v150 = v23;
          }
          char v152 = llroundf(v150);
          if (v151 < v21) {
            float v153 = v21;
          }
          else {
            float v153 = (float)((float)((float)(v185 * _S20) + (float)(v186 * _S19)) + (float)(v184 * _S21)) + v21;
          }
          if (v151 <= v23) {
            float v154 = v153;
          }
          else {
            float v154 = v23;
          }
          float v155 = (float)((float)(_S5 + _S4) + _S18) + _S19;
          float v156 = (float)((float)(_S1 + _S7) + _S16) + _S20;
          *uint64_t v37 = v146;
          v37[1] = v149;
          *uint64_t v52 = v152;
          v52[1] = llroundf(v154);
          float v157 = (float)((float)(_S3 + _S6) + _S17) + _S21;
          float v158 = (float)((float)(v188 + (float)(v155 * v183)) + (float)(v156 * v182)) + (float)(v157 * v181);
          float v159 = v25;
          if (v158 <= v25)
          {
            float v159 = (float)((float)(v188 + (float)(v155 * v183)) + (float)(v156 * v182)) + (float)(v157 * v181);
            if (v158 < v187) {
              float v159 = v187;
            }
          }
          float v160 = (float)((float)(v188 + (float)(v155 * v180)) + (float)(v156 * v179)) + (float)(v157 * v177);
          *(unsigned char *)(v46 + v50) = llroundf(v159);
          float v161 = v25;
          float v31 = v167;
          float v26 = v168;
          if (v160 <= v25)
          {
            float v161 = v160;
            if (v160 < v187) {
              float v161 = v187;
            }
          }
          *(unsigned char *)(v46 + v50 + 1) = llroundf(v161);
          if (v39)
          {
            *uint64_t v39 = v95;
            v39[1] = v96;
            v39 += 2;
            *uint64_t v51 = v97;
            v51[1] = v98;
            v51 += 2;
          }
          result += 16;
          v53 += 16;
          v37 += 2;
          v52 += 2;
          v50 += 2;
        }
        while (v13 > v50);
      }
      uint64_t v18 = v164;
      uint64_t v17 = v165;
      double result = &v49[v165];
      uint64_t v37 = &v48[v164];
      uint64_t v20 = v162;
      v46 += v163;
      uint64_t v39 = &v47[v162];
      v12 += 2;
    }
    while (v166 > v12);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

int8x8_t *vt_Copy_RGhA_TRC_Mat_TRC_420vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, float32x4_t _Q2, float16x8_t a6)
{
  uint64_t v8 = 0;
  unint64_t v9 = *(void *)(a1 + 20);
  uint64_t v10 = *(void *)(a1 + 36);
  uint64_t v11 = *(void *)(a1 + 44);
  uint64_t v12 = *(void *)(a1 + 28);
  unint64_t v13 = 2 * *a1;
  uint64_t v14 = 2 * (v12 * a2 / v13);
  uint64_t v15 = v11 + v14;
  uint64_t v16 = 2 * ((v12 + v12 * a2) / v13);
  uint64_t v17 = v11 + v16;
  uint64_t v18 = *((void *)a1 + 14);
  unint64_t v19 = *((void *)a1 + 13) * a2;
  uint64_t v20 = *((void *)a1 + 19);
  uint64_t v22 = *((void *)a1 + 15);
  uint64_t v21 = *((void *)a1 + 16);
  uint64_t v23 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v24 = **((void **)a1 + 8);
  uint64_t v25 = **((void **)a1 + 7);
  uint64_t v26 = v23[1];
  uint64_t v227 = *v23;
  double result = *(int8x8_t **)v21;
  uint64_t v28 = *(void *)(v21 + 8);
  uint64_t v29 = v23[2];
  uint64_t v30 = *(void *)(v21 + 16);
  int v268 = *(_DWORD *)(v20 + 154);
  unsigned int v31 = *(unsigned __int16 *)(v20 + 144);
  unsigned int v32 = *(unsigned __int16 *)(v20 + 146);
  unsigned int v33 = *(unsigned __int16 *)(v20 + 148);
  unsigned int v34 = *(unsigned __int16 *)(v20 + 150);
  unsigned int v35 = *(unsigned __int16 *)(v20 + 152);
  float v264 = *(float *)(v20 + 36);
  float v261 = *(float *)(v20 + 40);
  v36.i32[0] = *(_DWORD *)(v20 + 48);
  float v263 = *(float *)(v20 + 44);
  uint64_t v37 = v22 + 2 * (v19 / v13);
  uint64_t v228 = v24;
  uint64_t v38 = v24 * v15;
  v40.i32[0] = *(_DWORD *)(v20 + 52);
  v39.i32[0] = *(_DWORD *)(v20 + 56);
  __int32 v41 = *(_DWORD *)(v20 + 60);
  __int32 v42 = *(_DWORD *)(v20 + 64);
  if (v37 >= 0) {
    uint64_t v43 = v37;
  }
  else {
    uint64_t v43 = v37 + 1;
  }
  __int32 v44 = *(_DWORD *)(v20 + 68);
  float v262 = *(float *)(v20 + 72);
  uint64_t v225 = v26;
  uint64_t v226 = v29;
  uint64_t v45 = v26 * (v43 >> 1);
  float v260 = *(float *)(v20 + 76);
  float v259 = *(float *)(v20 + 80);
  uint64_t v46 = v30 + v29 * v37;
  float v258 = *(float *)(v20 + 84);
  _S16 = *(float *)(v20 + 92);
  float v257 = *(float *)(v20 + 88);
  _S17 = *(float *)(v20 + 96);
  _S18 = *(float *)(v20 + 100);
  _S19 = *(float *)(v20 + 104);
  v51.i64[1] = 0;
  memset(v267, 0, sizeof(v267));
  do
  {
    unsigned int v52 = 0;
    char v53 = *((unsigned char *)&v268 + v8);
    do
    {
      *((unsigned char *)v267 + 8 * (((_BYTE)v8 + (v52 >> 3)) & 0x1F) + v52) = v53 + 4 * v52;
      ++v52;
    }
    while (v52 != 8);
    ++v8;
  }
  while (v8 != 4);
  _ZF = v16 == v14;
  uint64_t v55 = v227;
  uint64_t v56 = v226;
  if (!_ZF)
  {
    unint64_t v57 = 0;
    unint64_t v224 = v17 - v15;
    float v58 = (float)v31;
    float v256 = (float)v32;
    float v59 = (float)v33;
    float v265 = (float)v34;
    uint64_t v60 = v20 + 16548;
    uint64_t v61 = v20 + 164;
    float v62 = (float)v35;
    v36.i32[1] = v41;
    __asm { FMOV            V0.2S, #0.25 }
    *(float32x2_t *)v51.f32 = vmul_f32(v36, _D0);
    v40.i32[1] = v42;
    *(float32x2_t *)_Q2.f32 = vmul_f32(v40, _D0);
    v39.i32[1] = v44;
    *(float32x2_t *)a6.i8 = vmul_f32(v39, _D0);
    _D0.f32[0] = v264;
    __asm { FCVT            H0, S0 }
    short float v251 = *(short float *)_D0.i16;
    float16x8_t v252 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v51), 0);
    _D0.f32[0] = v261;
    __asm { FCVT            H0, S0 }
    short float v249 = *(short float *)_D0.i16;
    float16x8_t v250 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(_Q2), 0);
    *(float16x4_t *)&_Q0 = vcvt_f16_f32((float32x4_t)a6);
    *((void *)&_Q0 + 1) = _Q0;
    int32x4_t v68 = vdupq_lane_s32(*(int32x2_t *)&_Q0, 0);
    *(float *)&_Q0 = v263;
    __asm { FCVT            H0, S0 }
    short float v247 = *(short float *)&_Q0;
    float16x8_t v248 = (float16x8_t)v68;
    *(float *)&_Q0 = v262;
    __asm { FCVT            H0, S0 }
    short float v246 = *(short float *)&_Q0;
    *(float *)&_Q0 = v260;
    __asm { FCVT            H0, S0 }
    short float v245 = *(short float *)&_Q0;
    *(float *)&_Q0 = v259;
    __asm { FCVT            H0, S0 }
    short float v244 = *(short float *)&_Q0;
    *(float *)&_Q0 = v258;
    __asm { FCVT            H0, S0 }
    short float v243 = *(short float *)&_Q0;
    *(float *)&_Q0 = v257;
    __asm { FCVT            H0, S0 }
    short float v242 = *(short float *)&_Q0;
    __asm { FCVT            H0, S16 }
    short float v241 = *(short float *)&_Q0;
    __asm { FCVT            H0, S17 }
    long long v266 = _Q0;
    __asm { FCVT            H0, S18 }
    short float v240 = *(short float *)&_Q0;
    *(short float *)&_Q0 = (short float)v31;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_Q0, 0);
    *(short float *)&_Q0 = (short float)v32;
    int16x8_t v70 = vdupq_lane_s16(*(int16x4_t *)&_Q0, 0);
    *(short float *)&_Q0 = (short float)v33;
    int16x8_t v71 = vdupq_lane_s16(*(int16x4_t *)&_Q0, 0);
    float16x8_t v238 = (float16x8_t)v71;
    float16x8_t v239 = (float16x8_t)v70;
    *(short float *)v71.i16 = (short float)v34;
    int16x8_t v72 = vdupq_lane_s16(*(int16x4_t *)v71.i8, 0);
    *(short float *)v71.i16 = (short float)v35;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)v71.i8, 0);
    float16x8_t v236 = (float16x8_t)_Q0;
    float16x8_t v237 = (float16x8_t)v72;
    __asm { FCVT            H0, S19 }
    short float v235 = *(short float *)_Q0.i16;
    if (v30) {
      uint64_t v74 = (int8x8_t *)(v46 + v18);
    }
    else {
      uint64_t v74 = 0;
    }
    uint64_t v75 = (unsigned char *)(v28 + v45 + v18);
    double result = (int8x8_t *)((char *)result + v227 * v37 + v18);
    int32x2_t v76 = (const __int16 *)(v25 + v38 + 8 * v10);
    float v254 = _Q2.f32[0];
    float v255 = v51.f32[0];
    float v233 = _Q2.f32[1];
    float v234 = v51.f32[1];
    unint64_t v253 = a6.i64[0];
    float v232 = *(float *)&a6.i32[1];
    v77.i64[0] = 0x9000900090009000;
    v77.i64[1] = 0x9000900090009000;
    do
    {
      float16x8_t v78 = (const __int16 *)((char *)v76 + v24);
      float v79 = (int8x8_t *)((char *)result + v55);
      float v80 = (int8x8_t *)((char *)v74 + v56);
      CFTypeRef v231 = (char *)v74 + v56;
      float v229 = v79;
      if ((int)v9 < 8)
      {
        unint64_t v147 = 0;
        char v146 = v75;
        uint64_t v82 = v78;
      }
      else
      {
        uint64_t v81 = 0;
        uint64_t v82 = v78;
        do
        {
          int16x8x4_t v270 = vld4q_s16(v76);
          v76 += 32;
          int16x8x4_t v269 = vld4q_s16(v82);
          v82 += 32;
          if (v74)
          {
            float16x8_t v83 = (float16x8_t)vdupq_n_s16(0x5BF8u);
            int8x8_t v84 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16((float16x8_t)v270.val[3], v83)));
            int8x8_t v85 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16((float16x8_t)v269.val[3], v83)));
          }
          else
          {
            int8x8_t v84 = 0;
            int8x8_t v85 = 0;
          }
          v86.i64[0] = 0x7000700070007000;
          v86.i64[1] = 0x7000700070007000;
          float16x8_t v87 = vmulq_f16((float16x8_t)v270.val[1], v86);
          float16x8_t v88 = vmulq_f16((float16x8_t)v270.val[2], v86);
          float16x8_t v89 = vmulq_f16((float16x8_t)v269.val[0], v86);
          float16x8_t v90 = vmulq_f16((float16x8_t)v269.val[1], v86);
          uint16x8_t v91 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v270.val[0], v86), (float16x8_t)0), v77));
          uint32x4_t v92 = vmovl_high_u16(v91);
          uint32x4_t v93 = vmovl_u16(*(uint16x4_t *)v91.i8);
          v94.i16[0] = *(_WORD *)(v61 + 2 * v93.u32[0]);
          v94.i16[1] = *(_WORD *)(v61 + 2 * v93.u32[1]);
          v94.i16[2] = *(_WORD *)(v61 + 2 * v93.u32[2]);
          v94.i16[3] = *(_WORD *)(v61 + 2 * v93.u32[3]);
          v94.i16[4] = *(_WORD *)(v61 + 2 * v92.u32[0]);
          v94.i16[5] = *(_WORD *)(v61 + 2 * v92.u32[1]);
          v94.i16[6] = *(_WORD *)(v61 + 2 * v92.u32[2]);
          v94.i16[7] = *(_WORD *)(v61 + 2 * v92.u32[3]);
          uint16x8_t v95 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v87, (float16x8_t)0), v77));
          uint32x4_t v96 = vmovl_high_u16(v95);
          uint32x4_t v97 = vmovl_u16(*(uint16x4_t *)v95.i8);
          v98.i16[0] = *(_WORD *)(v61 + 2 * v97.u32[0]);
          v98.i16[1] = *(_WORD *)(v61 + 2 * v97.u32[1]);
          v98.i16[2] = *(_WORD *)(v61 + 2 * v97.u32[2]);
          v98.i16[3] = *(_WORD *)(v61 + 2 * v97.u32[3]);
          v98.i16[4] = *(_WORD *)(v61 + 2 * v96.u32[0]);
          v98.i16[5] = *(_WORD *)(v61 + 2 * v96.u32[1]);
          v98.i16[6] = *(_WORD *)(v61 + 2 * v96.u32[2]);
          v98.i16[7] = *(_WORD *)(v61 + 2 * v96.u32[3]);
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v88, (float16x8_t)0), v77));
          uint32x4_t v100 = vmovl_high_u16(v99);
          uint32x4_t v101 = vmovl_u16(*(uint16x4_t *)v99.i8);
          v87.i16[0] = *(_WORD *)(v61 + 2 * v101.u32[0]);
          v87.i16[1] = *(_WORD *)(v61 + 2 * v101.u32[1]);
          v87.i16[2] = *(_WORD *)(v61 + 2 * v101.u32[2]);
          v87.i16[3] = *(_WORD *)(v61 + 2 * v101.u32[3]);
          v87.i16[4] = *(_WORD *)(v61 + 2 * v100.u32[0]);
          v87.i16[5] = *(_WORD *)(v61 + 2 * v100.u32[1]);
          v87.i16[6] = *(_WORD *)(v61 + 2 * v100.u32[2]);
          v87.i16[7] = *(_WORD *)(v61 + 2 * v100.u32[3]);
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v89, (float16x8_t)0), v77));
          uint32x4_t v103 = vmovl_high_u16(v102);
          uint32x4_t v104 = vmovl_u16(*(uint16x4_t *)v102.i8);
          v89.i16[0] = *(_WORD *)(v61 + 2 * v104.u32[0]);
          v89.i16[1] = *(_WORD *)(v61 + 2 * v104.u32[1]);
          v89.i16[2] = *(_WORD *)(v61 + 2 * v104.u32[2]);
          v89.i16[3] = *(_WORD *)(v61 + 2 * v104.u32[3]);
          v89.i16[4] = *(_WORD *)(v61 + 2 * v103.u32[0]);
          v89.i16[5] = *(_WORD *)(v61 + 2 * v103.u32[1]);
          v89.i16[6] = *(_WORD *)(v61 + 2 * v103.u32[2]);
          v89.i16[7] = *(_WORD *)(v61 + 2 * v103.u32[3]);
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v90, (float16x8_t)0), v77));
          uint32x4_t v106 = vmovl_high_u16(v105);
          uint32x4_t v107 = vmovl_u16(*(uint16x4_t *)v105.i8);
          v88.i16[0] = *(_WORD *)(v61 + 2 * v107.u32[0]);
          v88.i16[1] = *(_WORD *)(v61 + 2 * v107.u32[1]);
          v88.i16[2] = *(_WORD *)(v61 + 2 * v107.u32[2]);
          v88.i16[3] = *(_WORD *)(v61 + 2 * v107.u32[3]);
          v88.i16[4] = *(_WORD *)(v61 + 2 * v106.u32[0]);
          v88.i16[5] = *(_WORD *)(v61 + 2 * v106.u32[1]);
          v88.i16[6] = *(_WORD *)(v61 + 2 * v106.u32[2]);
          v88.i16[7] = *(_WORD *)(v61 + 2 * v106.u32[3]);
          uint16x8_t v108 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v269.val[2], v86), (float16x8_t)0), v77));
          uint32x4_t v109 = vmovl_high_u16(v108);
          uint32x4_t v110 = vmovl_u16(*(uint16x4_t *)v108.i8);
          v111.i16[0] = *(_WORD *)(v61 + 2 * v110.u32[0]);
          v111.i16[1] = *(_WORD *)(v61 + 2 * v110.u32[1]);
          v111.i16[2] = *(_WORD *)(v61 + 2 * v110.u32[2]);
          v111.i16[3] = *(_WORD *)(v61 + 2 * v110.u32[3]);
          v111.i16[4] = *(_WORD *)(v61 + 2 * v109.u32[0]);
          v111.i16[5] = *(_WORD *)(v61 + 2 * v109.u32[1]);
          v111.i16[6] = *(_WORD *)(v61 + 2 * v109.u32[2]);
          v111.i16[7] = *(_WORD *)(v61 + 2 * v109.u32[3]);
          float16x8_t v112 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v94, v246), v98, v245), v87, v244);
          float16x8_t v113 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v94, v243), v98, v242), v87, v241);
          float16x8_t v114 = vmlaq_n_f16(vmulq_n_f16(v87, v235), v98, v240);
          v98.i16[7] = HIWORD(v266);
          float16x8_t v115 = vmlaq_n_f16(v114, v94, *(short float *)&v266);
          float16x8_t v116 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v89, v246), v88, v245), v111, v244);
          float16x8_t v117 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v89, v243), v88, v242), v111, v241);
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v112, (float16x8_t)0), v77));
          uint32x4_t v119 = vmovl_high_u16(v118);
          uint32x4_t v120 = vmovl_u16(*(uint16x4_t *)v118.i8);
          v98.i16[0] = *(_WORD *)(v60 + 2 * v120.u32[0]);
          v98.i16[1] = *(_WORD *)(v60 + 2 * v120.u32[1]);
          v98.i16[2] = *(_WORD *)(v60 + 2 * v120.u32[2]);
          v98.i16[3] = *(_WORD *)(v60 + 2 * v120.u32[3]);
          v98.i16[4] = *(_WORD *)(v60 + 2 * v119.u32[0]);
          v98.i16[5] = *(_WORD *)(v60 + 2 * v119.u32[1]);
          v98.i16[6] = *(_WORD *)(v60 + 2 * v119.u32[2]);
          uint16x8_t v121 = (__int16 *)(v60 + 2 * v119.u32[3]);
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, (float16x8_t)0), v77));
          uint32x4_t v123 = vmovl_high_u16(v122);
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v122.i8);
          v113.i16[0] = *(_WORD *)(v60 + 2 * v124.u32[0]);
          v113.i16[1] = *(_WORD *)(v60 + 2 * v124.u32[1]);
          v113.i16[2] = *(_WORD *)(v60 + 2 * v124.u32[2]);
          v113.i16[3] = *(_WORD *)(v60 + 2 * v124.u32[3]);
          v113.i16[4] = *(_WORD *)(v60 + 2 * v123.u32[0]);
          v113.i16[5] = *(_WORD *)(v60 + 2 * v123.u32[1]);
          v113.i16[6] = *(_WORD *)(v60 + 2 * v123.u32[2]);
          float16x8_t v125 = (float16x8_t)vuzp1q_s16((int16x8_t)v98, (int16x8_t)v113);
          v98.i16[7] = *v121;
          v113.i16[7] = *(_WORD *)(v60 + 2 * v123.u32[3]);
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v77));
          uint32x4_t v127 = vmovl_high_u16(v126);
          uint32x4_t v128 = vmovl_u16(*(uint16x4_t *)v126.i8);
          v115.i16[0] = *(_WORD *)(v60 + 2 * v128.u32[0]);
          v115.i16[1] = *(_WORD *)(v60 + 2 * v128.u32[1]);
          v115.i16[2] = *(_WORD *)(v60 + 2 * v128.u32[2]);
          v115.i16[3] = *(_WORD *)(v60 + 2 * v128.u32[3]);
          v115.i16[4] = *(_WORD *)(v60 + 2 * v127.u32[0]);
          v115.i16[5] = *(_WORD *)(v60 + 2 * v127.u32[1]);
          v115.i16[6] = *(_WORD *)(v60 + 2 * v127.u32[2]);
          float16x8_t v129 = vmlaq_n_f16(vmulq_n_f16(v111, v235), v88, v240);
          float16x8_t v7 = v115;
          v7.i16[7] = *(_WORD *)(v60 + 2 * v127.u32[3]);
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)0), v77));
          uint32x4_t v131 = vmovl_u16(*(uint16x4_t *)v130.i8);
          uint32x4_t v132 = vmovl_high_u16(v130);
          *(void *)&long long v133 = v132.u32[2];
          *((void *)&v133 + 1) = v132.u32[3];
          long long v134 = v133;
          *((void *)&v133 + 1) = v131.u32[3];
          v131.i16[7] = (unint64_t)v131.u32[3] >> 48;
          _Q2.i16[0] = *(_WORD *)(v60 + 2 * v131.u32[0]);
          _Q2.i16[1] = *(_WORD *)(v60 + 2 * v131.u32[1]);
          _Q2.i16[2] = *(_WORD *)(v60 + 2 * v131.u32[2]);
          _Q2.i16[3] = *(_WORD *)(v60 + 2 * *((void *)&v133 + 1));
          _Q2.i16[4] = *(_WORD *)(v60 + 2 * v132.u32[0]);
          _Q2.i16[5] = *(_WORD *)(v60 + 2 * v132.u32[1]);
          _Q2.i16[6] = *(_WORD *)(v60 + 2 * v134);
          uint32x4_t v135 = (unsigned __int16 *)(v60 + 2 * *((void *)&v134 + 1));
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, (float16x8_t)0), v77));
          float16x8_t v137 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v136.i8);
          uint32x4_t v138 = vmovl_high_u16(v136);
          *(void *)&long long v133 = v138.u32[2];
          *((void *)&v133 + 1) = v138.u32[3];
          long long v139 = v133;
          *((void *)&v133 + 1) = v137.u32[3];
          v137.i16[7] = (unint64_t)v137.u32[3] >> 48;
          v137.i16[0] = *(_WORD *)(v60 + 2 * v137.u32[0]);
          v137.i16[1] = *(_WORD *)(v60 + 2 * v137.u32[1]);
          v137.i16[2] = *(_WORD *)(v60 + 2 * v137.u32[2]);
          v137.i16[3] = *(_WORD *)(v60 + 2 * *((void *)&v133 + 1));
          v137.i16[4] = *(_WORD *)(v60 + 2 * v138.u32[0]);
          v137.i16[5] = *(_WORD *)(v60 + 2 * v138.u32[1]);
          v137.i16[6] = *(_WORD *)(v60 + 2 * v139);
          float16x8_t v140 = (float16x8_t)vuzp1q_s16((int16x8_t)_Q2, (int16x8_t)v137);
          _Q2.i16[7] = *v135;
          v137.i16[7] = *(_WORD *)(v60 + 2 * *((void *)&v139 + 1));
          uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v129, v89, *(short float *)&v266), (float16x8_t)0), v77));
          uint32x4_t v142 = vmovl_high_u16(v141);
          uint32x4_t v143 = vmovl_u16(*(uint16x4_t *)v141.i8);
          *(void *)&long long v133 = v142.u32[2];
          *((void *)&v133 + 1) = v142.u32[3];
          long long v144 = v133;
          *(void *)&long long v133 = v142.u32[0];
          *((void *)&v133 + 1) = v142.u32[1];
          long long v145 = v133;
          *((void *)&v133 + 1) = v143.u32[3];
          _Q0.i16[7] = (unint64_t)v143.u32[3] >> 48;
          _Q0.i16[0] = *(_WORD *)(v60 + 2 * v143.u32[0]);
          _Q0.i16[1] = *(_WORD *)(v60 + 2 * v143.u32[1]);
          _Q0.i16[2] = *(_WORD *)(v60 + 2 * v143.u32[2]);
          _Q0.i16[3] = *(_WORD *)(v60 + 2 * *((void *)&v133 + 1));
          _Q0.i16[4] = *(_WORD *)(v60 + 2 * v145);
          _Q0.i16[5] = *(_WORD *)(v60 + 2 * *((void *)&v145 + 1));
          _Q0.i16[6] = *(_WORD *)(v60 + 2 * v144);
          _Q8 = (float16x8_t)_Q0;
          _Q8.i16[7] = *(_WORD *)(v60 + 2 * *((void *)&v144 + 1));
          *result++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v69, v98, v251), v113, v249), v7, v247), v69), v238)));
          *v79++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v69, (float16x8_t)_Q2, v251), v137, v249), _Q8, v247), v69), v238)));
          float32x4_t v51 = (float32x4_t)vaddq_f16(vaddq_f16(vaddq_f16(v125, (float16x8_t)vuzp2q_s16((int16x8_t)v98, (int16x8_t)v113)), v140), (float16x8_t)vuzp2q_s16((int16x8_t)_Q2, (int16x8_t)v137));
          _Q2.i32[1] = v250.i32[1];
          a6 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v239, v252, (float16x8_t)vzip1q_s16((int16x8_t)v51, (int16x8_t)v51)), v250, (float16x8_t)vzip2q_s16((int16x8_t)v51, (int16x8_t)v51)), v248, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v115, (int16x8_t)v115), (float16x8_t)vtrn2q_s16((int16x8_t)v7, (int16x8_t)v7)), (float16x8_t)vtrn1q_s16(_Q0, _Q0)), (float16x8_t)vtrn2q_s16((int16x8_t)_Q8, (int16x8_t)_Q8)));
          v51.i32[1] = v236.i32[1];
          *(int8x8_t *)_Q0.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(a6, v237), v236)));
          *(void *)&v75[v81] = _Q0.i64[0];
          if (v74)
          {
            *v74++ = v84;
            *v80++ = v85;
          }
          v81 += 8;
        }
        while ((int)v81 < (int)v9 - 7);
        char v146 = &v75[v81];
        unint64_t v147 = v9 & 0xFFFFFFF8;
      }
      OSType v230 = v78;
      if (v9 > v147)
      {
        uint64_t v148 = 0;
        char v149 = v76 + 4;
        float v150 = v82 + 4;
        do
        {
          if (v74)
          {
            uint64_t v151 = v148 + 2 * HIBYTE(v268);
            _H0 = *(const __int16 *)((char *)v150 + v151);
            __asm { FCVT            S0, H0 }
            _H1 = *(const __int16 *)((char *)v150 + v151 - 8);
            __asm { FCVT            S1, H1 }
            float v156 = (__int16 *)((char *)v149 + v151);
            _H2 = *v156;
            __asm { FCVT            S2, H2 }
            _H3 = *(v156 - 4);
            __asm { FCVT            S3, H3 }
            __int8 v161 = llroundf(_S3 * 255.0);
            __int8 v162 = llroundf(_S2 * 255.0);
            __int8 v163 = llroundf(_S1 * 255.0);
            __int8 v164 = llroundf(_S0 * 255.0);
          }
          else
          {
            __int8 v163 = 0;
            __int8 v161 = 0;
            __int8 v162 = 0;
            __int8 v164 = 0;
          }
          uint64_t v165 = v148 + 2 * v268;
          unint64_t v166 = (__int16 *)((char *)v149 + v165);
          _Q0.i16[0] = *(const __int16 *)((char *)v149 + v165 - 8);
          uint64_t v167 = v148 + 2 * BYTE1(v268);
          uint64_t v168 = v148 + 2 * BYTE2(v268);
          v51.i16[0] = *(const __int16 *)((char *)v149 + v168 - 8);
          _Q2.i16[0] = *(const __int16 *)((char *)v149 + v167);
          float v169 = (__int16 *)((char *)v150 + v165);
          a6.i16[0] = *(v169 - 4);
          v7.i16[0] = *(const __int16 *)((char *)v150 + v168 - 8);
          _Q0.i16[1] = *(const __int16 *)((char *)v149 + v167 - 8);
          _Q8.i16[0] = *(const __int16 *)((char *)v150 + v167);
          float32x2_t v170 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q0.i8), v170), 0), v170)));
          _D0.i16[0] = *(_WORD *)(v61 + 2 * _D0.u32[0]);
          _H26 = *(_WORD *)(v61 + 2 * _D0.u32[1]);
          v51.i16[1] = *v166;
          __asm { FCVT            S21, H0 }
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)v51.f32), v170), 0), v170)));
          _D0.i16[0] = *(_WORD *)(v61 + 2 * _D0.u32[0]);
          __asm
          {
            FCVT            S10, H26
            FCVT            S9, H0
          }
          _D0.i16[0] = *(_WORD *)(v61 + 2 * _D0.u32[1]);
          _Q2.i16[1] = *(const __int16 *)((char *)v149 + v168);
          __asm { FCVT            S26, H0 }
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q2.f32), v170), 0), v170)));
          _D0.i16[0] = *(_WORD *)(v61 + 2 * _D0.u32[0]);
          __asm { FCVT            S12, H0 }
          _D0.i16[0] = *(_WORD *)(v61 + 2 * _D0.u32[1]);
          __asm { FCVT            S11, H0 }
          a6.i16[1] = *(const __int16 *)((char *)v150 + v167 - 8);
          *(int32x2_t *)_Q0.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)a6.i8), v170), 0), v170)));
          _Q0.i16[0] = *(_WORD *)(v61 + 2 * _Q0.u32[0]);
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v61 + 2 * _Q0.u32[1]);
          v7.i16[1] = *v169;
          *(int32x2_t *)_Q2.f32 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)v7.i8), v170), 0), v170)));
          __asm { FCVT            S1, H1 }
          _Q2.i16[0] = *(_WORD *)(v61 + 2 * _Q2.u32[0]);
          _H3 = *(_WORD *)(v61 + 2 * _Q2.u32[1]);
          __asm
          {
            FCVT            S2, H2
            FCVT            S3, H3
          }
          _Q8.i16[1] = *(const __int16 *)((char *)v150 + v168);
          *(float32x2_t *)_Q8.i8 = vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q8.i8), v170), 0);
          _D23 = vcvt_s32_f32(vrnda_f32(vminnm_f32(*(float32x2_t *)_Q8.i8, v170)));
          _D23.i16[0] = *(_WORD *)(v61 + 2 * _D23.u32[0]);
          __asm { FCVT            S23, H23 }
          _Q8.i16[0] = *(_WORD *)(v61 + 2 * _D23.u32[1]);
          __asm { FCVT            S8, H8 }
          float v186 = (float)((float)(v260 * _S10) + (float)(_S21 * v262)) + (float)(_S9 * v259);
          float v187 = (float)((float)(v257 * _S10) + (float)(_S21 * v258)) + (float)(_S9 * _S16);
          _S9 = (float)((float)(_S18 * _S10) + (float)(_S21 * _S17)) + (float)(_S9 * _S19);
          float v189 = (float)((float)(v260 * _S12) + (float)(_S26 * v262)) + (float)(_S11 * v259);
          float v190 = (float)((float)(v257 * _S12) + (float)(_S26 * v258)) + (float)(_S11 * _S16);
          _S11 = (float)((float)(_S18 * _S12) + (float)(_S26 * _S17)) + (float)(_S11 * _S19);
          float v192 = (float)((float)(v260 * _S1) + (float)(*(float *)_Q0.i32 * v262)) + (float)(_Q2.f32[0] * v259);
          float v193 = (float)((float)(v257 * _S1) + (float)(*(float *)_Q0.i32 * v258)) + (float)(_Q2.f32[0] * _S16);
          *(float *)_Q0.i32 = (float)((float)(_S18 * _S1) + (float)(*(float *)_Q0.i32 * _S17))
                            + (float)(_Q2.f32[0] * _S19);
          _S1 = (float)((float)(v260 * *(float *)_D23.i32) + (float)(_S3 * v262)) + (float)(*(float *)_Q8.i32 * v259);
          _Q2.f32[0] = (float)((float)(v257 * *(float *)_D23.i32) + (float)(_S3 * v258))
                     + (float)(*(float *)_Q8.i32 * _S16);
          float v195 = (float)((float)(_S18 * *(float *)_D23.i32) + (float)(_S3 * _S17)) + (float)(*(float *)_Q8.i32 * _S19);
          LOWORD(_S21) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v186, 0.0), 8191.0)));
          __asm { FCVT            S26, H21 }
          LOWORD(_S21) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v187, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _D23.i16[0] = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S9, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          _Q8.i16[0] = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v189, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          LOWORD(_S9) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v190, 0.0), 8191.0)));
          LOWORD(_S11) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H9
            FCVT            S9, H11
          }
          LOWORD(_S11) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v192, 0.0), 8191.0)));
          LODWORD(v169) = llroundf(fminf(fmaxf(v193, 0.0), 8191.0));
          __asm { FCVT            S28, H11 }
          LOWORD(_S11) = *(_WORD *)(v60 + 2 * v169);
          __asm { FCVT            S11, H11 }
          _Q0.i16[0] = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(*(float *)_Q0.i32, 0.0), 8191.0)));
          __asm { FCVT            S12, H0 }
          _Q0.i16[0] = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_Q2.f32[0], 0.0), 8191.0)));
          _Q2.i16[0] = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v195, 0.0), 8191.0)));
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H2
          }
          float v205 = (float)((float)((float)(v261 * _S21) + (float)(v264 * _S26)) + (float)(v263 * _S23)) + v58;
          if (v205 < v58) {
            float v206 = v58;
          }
          else {
            float v206 = (float)((float)((float)(v261 * _S21) + (float)(v264 * _S26)) + (float)(v263 * _S23)) + v58;
          }
          BOOL v207 = v205 <= v59;
          float v208 = (float)((float)((float)(v261 * _S10) + (float)(v264 * *(float *)_Q8.i32)) + (float)(v263 * _S9)) + v58;
          if (!v207) {
            float v206 = (float)v33;
          }
          __int8 v209 = llroundf(v206);
          if (v208 < v58) {
            float v210 = v58;
          }
          else {
            float v210 = (float)((float)((float)(v261 * _S10) + (float)(v264 * *(float *)_Q8.i32)) + (float)(v263 * _S9))
          }
                 + v58;
          BOOL v207 = v208 <= v59;
          float v211 = (float)((float)((float)(v261 * _S11) + (float)(v264 * _S28)) + (float)(v263 * _S12)) + v58;
          if (!v207) {
            float v210 = (float)v33;
          }
          __int8 v212 = llroundf(v210);
          if (v211 < v58) {
            float v213 = v58;
          }
          else {
            float v213 = (float)((float)((float)(v261 * _S11) + (float)(v264 * _S28)) + (float)(v263 * _S12)) + v58;
          }
          BOOL v207 = v211 <= v59;
          float v214 = (float)((float)((float)(v261 * _S1) + (float)(v264 * *(float *)_Q0.i32)) + (float)(v263 * _Q2.f32[0]))
               + v58;
          if (!v207) {
            float v213 = (float)v33;
          }
          __int8 v215 = llroundf(v213);
          if (v214 < v58) {
            float v216 = v58;
          }
          else {
            float v216 = (float)((float)((float)(v261 * _S1) + (float)(v264 * *(float *)_Q0.i32)) + (float)(v263 * _Q2.f32[0]))
          }
                 + v58;
          if (v214 <= v59) {
            float v217 = v216;
          }
          else {
            float v217 = (float)v33;
          }
          float v218 = (float)((float)(_S26 + *(float *)_Q8.i32) + _S28) + *(float *)_Q0.i32;
          float v219 = (float)((float)(_S21 + _S10) + _S11) + _S1;
          result->i8[0] = v209;
          result->i8[1] = v212;
          v79->i8[0] = v215;
          v79->i8[1] = llroundf(v217);
          float v220 = (float)((float)(_S23 + _S9) + _S12) + _Q2.f32[0];
          a6.i32[1] = HIDWORD(v253);
          float v221 = (float)((float)(v256 + (float)(v218 * v255)) + (float)(v219 * v254)) + (float)(v220 * *(float *)&v253);
          *(float *)a6.i32 = (float)v35;
          if (v221 <= v62)
          {
            *(float *)a6.i32 = (float)((float)(v256 + (float)(v218 * v255)) + (float)(v219 * v254))
                             + (float)(v220 * *(float *)&v253);
            if (v221 < v265) {
              *(float *)a6.i32 = (float)v34;
            }
          }
          float v222 = (float)((float)(v256 + (float)(v218 * v234)) + (float)(v219 * v233)) + (float)(v220 * v232);
          *char v146 = llroundf(*(float *)a6.i32);
          float v223 = (float)v35;
          if (v222 <= v62)
          {
            float v223 = v222;
            if (v222 < v265) {
              float v223 = (float)v34;
            }
          }
          v146[1] = llroundf(v223);
          if (v74)
          {
            v74->i8[0] = v161;
            v74->i8[1] = v162;
            uint64_t v74 = (int8x8_t *)((char *)v74 + 2);
            v80->i8[0] = v163;
            v80->i8[1] = v164;
            float v80 = (int8x8_t *)((char *)v80 + 2);
          }
          v147 += 2;
          v148 += 16;
          double result = (int8x8_t *)((char *)result + 2);
          float v79 = (int8x8_t *)((char *)v79 + 2);
          v146 += 2;
        }
        while (v9 > v147);
      }
      uint64_t v55 = v227;
      uint64_t v24 = v228;
      int32x2_t v76 = (const __int16 *)((char *)v230 + v228);
      double result = (int8x8_t *)((char *)v229 + v227);
      uint64_t v56 = v226;
      v75 += v225;
      uint64_t v74 = (int8x8_t *)&v231[v226];
      v57 += 2;
    }
    while (v224 > v57);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_420vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v12 = *(void *)(result + 28);
  unint64_t v13 = 2 * *(unsigned __int8 *)result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = (v12 + v12 * a2) / v13;
  if (2 * v15 != 2 * v14)
  {
    unint64_t v16 = 0;
    unint64_t v17 = *(void *)(result + 20);
    uint64_t v18 = *(void *)(result + 44) + 2 * v14;
    unint64_t v136 = 2 * v15 - 2 * v14;
    uint64_t v19 = *(void *)(result + 152);
    uint64_t v20 = *(uint64_t **)(result + 136);
    uint64_t v21 = **(void **)(result + 64);
    uint64_t v23 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v24 = v20[2];
    LOWORD(a3) = *(_WORD *)(v19 + 144);
    float v25 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v19 + 146);
    *(float *)&unsigned int v26 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v19 + 148);
    float v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v19 + 150);
    float v146 = (float)LODWORD(a4);
    float v147 = (float)LODWORD(a6);
    LOWORD(v26) = *(_WORD *)(v19 + 152);
    float v28 = (float)v26;
    float v29 = *(float *)(v19 + 44);
    float v144 = *(float *)(v19 + 40);
    float v145 = *(float *)(v19 + 36);
    float v142 = *(float *)(v19 + 52) * 0.25;
    float v143 = *(float *)(v19 + 48) * 0.25;
    float v140 = *(float *)(v19 + 60) * 0.25;
    float v141 = *(float *)(v19 + 56) * 0.25;
    float v30 = *(float *)(v19 + 72);
    float v138 = *(float *)(v19 + 68) * 0.25;
    float v139 = *(float *)(v19 + 64) * 0.25;
    float v31 = *(float *)(v19 + 76);
    float v32 = *(float *)(v19 + 80);
    float v33 = *(float *)(v19 + 84);
    float v34 = *(float *)(v19 + 88);
    float v35 = *(float *)(v19 + 92);
    float v36 = *(float *)(v19 + 96);
    float v37 = *(float *)(v19 + 100);
    float v38 = *(float *)(v19 + 104);
    uint64_t v39 = v19 + 164;
    uint64_t v40 = v19 + 16548;
    uint64_t v41 = *(void *)(result + 112);
    __int32 v42 = *(void **)(result + 128);
    uint64_t v43 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v13);
    uint64_t v44 = **(void **)(result + 56) + v21 * v18 + 8 * *(void *)(result + 36);
    uint64_t v45 = v42[1];
    uint64_t v46 = (unsigned char *)(*v42 + v43 * v23 + v41);
    uint64_t v47 = v42[2];
    if (v47) {
      unsigned int v48 = (unsigned char *)(v47 + v43 * v24 + v41);
    }
    else {
      unsigned int v48 = 0;
    }
    double result = *(unsigned __int8 *)(v19 + 157);
    uint64_t v49 = *(unsigned __int8 *)(v19 + 156);
    float32x2_t v50 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v51 = *(unsigned __int8 *)(v19 + 155);
    uint64_t v52 = *(unsigned __int8 *)(v19 + 154);
    uint64_t v53 = v45 + v43 / 2 * v22 + v41;
    uint64_t v134 = v23;
    uint64_t v135 = v21;
    uint64_t v133 = v24;
    do
    {
      float16x8_t v137 = &v48[v24];
      unint64_t v54 = &v46[v23];
      uint64_t v55 = v44 + v21;
      if (v17)
      {
        unint64_t v56 = 0;
        unint64_t v57 = &v48[v24];
        float v58 = &v46[v23];
        uint64_t v59 = v44 + v21;
        do
        {
          uint64_t v60 = v44 + 8;
          uint64_t v61 = v59 + 8;
          if (v48)
          {
            _H16 = *(_WORD *)(v61 + 2 * result);
            __asm { FCVT            S16, H16 }
            _H17 = *(_WORD *)(v59 + 2 * result);
            _H18 = *(_WORD *)(v60 + 2 * result);
            __asm
            {
              FCVT            S17, H17
              FCVT            S18, H18
            }
            _H19 = *(_WORD *)(v44 + 2 * result);
            __asm { FCVT            S19, H19 }
            char v74 = llroundf(_S19 * 255.0);
            char v75 = llroundf(_S18 * 255.0);
            char v76 = llroundf(_S17 * 255.0);
            char v77 = llroundf(_S16 * 255.0);
          }
          else
          {
            char v76 = 0;
            char v74 = 0;
            char v75 = 0;
            char v77 = 0;
          }
          _D16.i16[0] = *(_WORD *)(v44 + 2 * v52);
          v9.i16[0] = *(_WORD *)(v44 + 2 * v49);
          v10.i16[0] = *(_WORD *)(v60 + 2 * v51);
          _D19.i16[0] = *(_WORD *)(v59 + 2 * v52);
          _D13.i16[0] = *(_WORD *)(v59 + 2 * v49);
          _D16.i16[1] = *(_WORD *)(v44 + 2 * v51);
          _D16 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D16), v50), 0), v50)));
          _D16.i16[0] = *(_WORD *)(v39 + 2 * _D16.u32[0]);
          _D14.i16[0] = *(_WORD *)(v61 + 2 * v51);
          __asm { FCVT            S11, H16 }
          _D16.i16[0] = *(_WORD *)(v39 + 2 * _D16.u32[1]);
          __asm { FCVT            S12, H16 }
          v9.i16[1] = *(_WORD *)(v60 + 2 * v52);
          _D16 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v9), v50), 0), v50)));
          _D16.i16[0] = *(_WORD *)(v39 + 2 * _D16.u32[0]);
          _H17 = *(_WORD *)(v39 + 2 * _D16.u32[1]);
          v10.i16[1] = *(_WORD *)(v60 + 2 * v49);
          __asm { FCVT            S15, H16 }
          _D16 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v10), v50), 0), v50)));
          _H18 = *(_WORD *)(v39 + 2 * _D16.u32[0]);
          __asm
          {
            FCVT            S16, H17
            FCVT            S17, H18
          }
          _H18 = *(_WORD *)(v39 + 2 * _D16.u32[1]);
          _D19.i16[1] = *(_WORD *)(v59 + 2 * v51);
          __asm { FCVT            S18, H18 }
          _D19 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D19), v50), 0), v50)));
          _D19.i16[0] = *(_WORD *)(v39 + 2 * _D19.u32[0]);
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v39 + 2 * _D19.u32[1]);
          __asm { FCVT            S20, H20 }
          _D13.i16[1] = *(_WORD *)(v61 + 2 * v52);
          _D13 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D13), v50), 0), v50)));
          _D13.i16[0] = *(_WORD *)(v39 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _H22 = *(_WORD *)(v39 + 2 * _D13.u32[1]);
          _D14.i16[1] = *(_WORD *)(v61 + 2 * v49);
          _D14 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D14), v50), 0), v50)));
          __asm { FCVT            S22, H22 }
          _D14.i16[0] = *(_WORD *)(v39 + 2 * _D14.u32[0]);
          _H3 = *(_WORD *)(v39 + 2 * _D14.u32[1]);
          __asm
          {
            FCVT            S14, H14
            FCVT            S3, H3
          }
          _S1 = (float)((float)(v31 * _S12) + (float)(_S11 * v30)) + (float)(_S15 * v32);
          float v95 = (float)((float)(v34 * _S12) + (float)(_S11 * v33)) + (float)(_S15 * v35);
          float v96 = (float)((float)(v37 * _S12) + (float)(_S11 * v36)) + (float)(_S15 * v38);
          float v97 = (float)((float)(v31 * _S17) + (float)(*(float *)_D16.i32 * v30)) + (float)(_S18 * v32);
          _S5 = (float)((float)(v34 * _S17) + (float)(*(float *)_D16.i32 * v33)) + (float)(_S18 * v35);
          *(float *)_D16.i32 = (float)((float)(v37 * _S17) + (float)(*(float *)_D16.i32 * v36)) + (float)(_S18 * v38);
          float v99 = (float)((float)(v31 * _S20) + (float)(*(float *)_D19.i32 * v30)) + (float)(*(float *)_D13.i32 * v32);
          float v100 = (float)((float)(v34 * _S20) + (float)(*(float *)_D19.i32 * v33)) + (float)(*(float *)_D13.i32 * v35);
          *(float *)_D19.i32 = (float)((float)(v37 * _S20) + (float)(*(float *)_D19.i32 * v36))
                             + (float)(*(float *)_D13.i32 * v38);
          float v101 = (float)((float)(v31 * *(float *)_D14.i32) + (float)(_S22 * v30)) + (float)(_S3 * v32);
          _S6 = (float)((float)(v34 * *(float *)_D14.i32) + (float)(_S22 * v33)) + (float)(_S3 * v35);
          _S3 = (float)((float)(v37 * *(float *)_D14.i32) + (float)(_S22 * v36)) + (float)(_S3 * v38);
          LOWORD(_S1) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S13, H1 }
          LOWORD(_S1) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          __asm { FCVT            S11, H1 }
          LOWORD(_S1) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S12, H1 }
          LOWORD(_S1) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S14, H1 }
          LOWORD(_S1) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(*(float *)_D16.i32, 0.0), 8191.0)));
          __asm
          {
            FCVT            S16, H1
            FCVT            S15, H5
          }
          LOWORD(_S1) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S5) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __asm { FCVT            S17, H5 }
          LOWORD(_S5) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(*(float *)_D19.i32, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          LOWORD(_S5) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S3, H3
          }
          *(float *)_D19.i32 = (float)((float)((float)(v144 * _S11) + (float)(v145 * *(float *)_D13.i32))
                                     + (float)(v29 * _S12))
                             + v25;
          if (*(float *)_D19.i32 < v25) {
            float v113 = v25;
          }
          else {
            float v113 = (float)((float)((float)(v144 * _S11) + (float)(v145 * *(float *)_D13.i32)) + (float)(v29 * _S12))
          }
                 + v25;
          BOOL v114 = *(float *)_D19.i32 <= v27;
          float v115 = (float)((float)((float)(v144 * *(float *)_D16.i32) + (float)(v145 * *(float *)_D14.i32))
                       + (float)(v29 * _S15))
               + v25;
          if (!v114) {
            float v113 = v27;
          }
          char v116 = llroundf(v113);
          if (v115 < v25) {
            float v117 = v25;
          }
          else {
            float v117 = (float)((float)((float)(v144 * *(float *)_D16.i32) + (float)(v145 * *(float *)_D14.i32))
          }
                         + (float)(v29 * _S15))
                 + v25;
          BOOL v114 = v115 <= v27;
          float v118 = (float)((float)((float)(v144 * _S17) + (float)(v145 * _S1)) + (float)(v29 * _S18)) + v25;
          if (!v114) {
            float v117 = v27;
          }
          char v119 = llroundf(v117);
          if (v118 < v25) {
            float v120 = v25;
          }
          else {
            float v120 = (float)((float)((float)(v144 * _S17) + (float)(v145 * _S1)) + (float)(v29 * _S18)) + v25;
          }
          BOOL v114 = v118 <= v27;
          float v121 = (float)((float)((float)(v144 * _S6) + (float)(v145 * _S5)) + (float)(v29 * _S3)) + v25;
          if (!v114) {
            float v120 = v27;
          }
          char v122 = llroundf(v120);
          if (v121 < v25) {
            float v123 = v25;
          }
          else {
            float v123 = (float)((float)((float)(v144 * _S6) + (float)(v145 * _S5)) + (float)(v29 * _S3)) + v25;
          }
          if (v121 <= v27) {
            float v124 = v123;
          }
          else {
            float v124 = v27;
          }
          char v125 = llroundf(v124);
          float v126 = (float)((float)(*(float *)_D13.i32 + *(float *)_D14.i32) + _S1) + _S5;
          float v127 = (float)((float)(_S11 + *(float *)_D16.i32) + _S17) + _S6;
          *uint64_t v46 = v116;
          v46[1] = v119;
          *float v58 = v122;
          v58[1] = v125;
          float v128 = (float)((float)(_S12 + _S15) + _S18) + _S3;
          float v129 = (float)((float)(v146 + (float)(v126 * v143)) + (float)(v127 * v142)) + (float)(v128 * v141);
          float v130 = v28;
          if (v129 <= v28)
          {
            float v130 = (float)((float)(v146 + (float)(v126 * v143)) + (float)(v127 * v142)) + (float)(v128 * v141);
            if (v129 < v147) {
              float v130 = v147;
            }
          }
          float v131 = (float)((float)(v146 + (float)(v126 * v140)) + (float)(v127 * v139)) + (float)(v128 * v138);
          *(unsigned char *)(v53 + v56) = llroundf(v130);
          float v132 = v28;
          if (v131 <= v28)
          {
            float v132 = v131;
            if (v131 < v147) {
              float v132 = v147;
            }
          }
          *(unsigned char *)(v53 + v56 + 1) = llroundf(v132);
          if (v48)
          {
            *unsigned int v48 = v74;
            v48[1] = v75;
            v48 += 2;
            unsigned char *v57 = v76;
            v57[1] = v77;
            v57 += 2;
          }
          v44 += 16;
          v59 += 16;
          v46 += 2;
          v58 += 2;
          v56 += 2;
        }
        while (v17 > v56);
      }
      uint64_t v23 = v134;
      uint64_t v21 = v135;
      uint64_t v44 = v55 + v135;
      uint64_t v46 = &v54[v134];
      uint64_t v24 = v133;
      v53 += v22;
      unsigned int v48 = &v137[v133];
      v16 += 2;
    }
    while (v136 > v16);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_420vf_neon_fp16_GCD);
  return 0;
}

int8x8_t *vt_Copy_RGhA_rgb_420vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v5 = 0;
  unint64_t v6 = *(void *)(a1 + 20);
  uint64_t v174 = *(void *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 44);
  uint64_t v8 = *(void *)(a1 + 28);
  unint64_t v9 = 2 * *a1;
  uint64_t v10 = 2 * (v8 * a2 / v9);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = 2 * ((v8 + v8 * a2) / v9);
  uint64_t v13 = v7 + v12;
  uint64_t v14 = *((void *)a1 + 14);
  unint64_t v15 = *((void *)a1 + 13) * a2;
  uint64_t v16 = *((void *)a1 + 19);
  uint64_t v17 = *((void *)a1 + 15);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v20 = **((void **)a1 + 8);
  uint64_t v21 = **((void **)a1 + 7);
  uint64_t v163 = *v19;
  uint64_t v22 = v19[1];
  uint64_t v23 = v19[2];
  uint64_t v172 = *v18;
  uint64_t v25 = v18[1];
  double result = (int8x8_t *)v18[2];
  unsigned int v26 = *(_DWORD *)(v16 + 136);
  int v177 = *(_DWORD *)(v16 + 154);
  uint64_t v27 = v17 + 2 * (v15 / v9);
  uint64_t v164 = v20;
  unsigned int v28 = *(unsigned __int16 *)(v16 + 144);
  unsigned int v29 = *(unsigned __int16 *)(v16 + 146);
  unsigned int v30 = *(unsigned __int16 *)(v16 + 148);
  unsigned int v31 = *(unsigned __int16 *)(v16 + 150);
  if (v27 >= 0) {
    uint64_t v32 = v27;
  }
  else {
    uint64_t v32 = v27 + 1;
  }
  unsigned int v33 = *(unsigned __int16 *)(v16 + 152);
  uint64_t v162 = v22;
  uint64_t v34 = v22 * (v32 >> 1);
  _S0 = *(float *)(v16 + 36);
  _S1 = *(float *)(v16 + 40);
  _S2 = *(float *)(v16 + 44);
  v4.i32[0] = *(_DWORD *)(v16 + 48);
  v38.i32[0] = *(_DWORD *)(v16 + 52);
  v3.i32[0] = *(_DWORD *)(v16 + 56);
  __int32 v39 = *(_DWORD *)(v16 + 60);
  v2.i32[0] = *(_DWORD *)(v16 + 64);
  __int32 v40 = *(_DWORD *)(v16 + 68);
  memset(v176, 0, sizeof(v176));
  do
  {
    unsigned int v41 = 0;
    char v42 = *((unsigned char *)&v177 + v5);
    do
    {
      *((unsigned char *)v176 + 8 * (((_BYTE)v5 + (v41 >> 3)) & 0x1F) + v41) = v42 + 4 * v41;
      ++v41;
    }
    while (v41 != 8);
    ++v5;
  }
  while (v5 != 4);
  uint64_t v43 = v163;
  if (v12 != v10)
  {
    unint64_t v44 = 0;
    unint64_t v161 = v13 - v11;
    _S3 = (float)v26;
    float v46 = (float)v28;
    float v47 = (float)v29;
    float v48 = (float)v30;
    float v49 = (float)v31;
    float v50 = (float)v33;
    v4.i32[1] = v39;
    __asm { FMOV            V22.2S, #0.25 }
    *(float32x2_t *)v4.f32 = vmul_f32(*(float32x2_t *)v4.f32, _D22);
    v38.i32[1] = v2.i32[0];
    *(float32x2_t *)v2.f32 = vmul_f32(v38, _D22);
    v3.i32[1] = v40;
    *(float32x2_t *)v3.f32 = vmul_f32(*(float32x2_t *)v3.f32, _D22);
    __asm { FCVT            H8, S0 }
    float16x8_t v170 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v2), 0);
    float16x8_t v171 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    int16x4_t v57 = (int16x4_t)vcvt_f16_f32(v3);
    __asm { FCVT            H9, S1 }
    int32x4_t v59 = vdupq_lane_s32((int32x2_t)v57, 0);
    *(short float *)v57.i16 = (short float)v28;
    float16x8_t v60 = (float16x8_t)vdupq_lane_s16(v57, 0);
    *(short float *)v57.i16 = (short float)v29;
    int16x8_t v61 = vdupq_lane_s16(v57, 0);
    float16x8_t v168 = (float16x8_t)v61;
    float16x8_t v169 = (float16x8_t)v59;
    *(short float *)v61.i16 = (short float)v30;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v61.i8, 0);
    *(short float *)v61.i16 = (short float)v31;
    int16x8_t v63 = vdupq_lane_s16(*(int16x4_t *)v61.i8, 0);
    *(short float *)v61.i16 = (short float)v33;
    float16x8_t v166 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v61.i8, 0);
    float16x8_t v167 = (float16x8_t)v63;
    __asm { FCVT            H10, S2 }
    uint64_t v65 = v25 + v34;
    if (result) {
      double result = (int8x8_t *)((char *)result + v23 * v27 + v14);
    }
    else {
      double result = 0;
    }
    float v66 = (unsigned char *)(v65 + v14);
    float v67 = (int8x8_t *)(v172 + v163 * v27 + v14);
    int32x4_t v68 = (const __int16 *)(v21 + v20 * v11 + 8 * v174);
    __asm { FCVT            H11, S3 }
    float v173 = v2.f32[0];
    float v175 = v4.f32[0];
    float v165 = v2.f32[1];
    uint64_t v70 = v3.i64[0];
    do
    {
      int16x8_t v71 = (char *)v68 + v20;
      int16x8_t v72 = (char *)v67 + v43;
      uint64_t v73 = (char *)result + v23;
      if ((int)v6 < 8)
      {
        unint64_t v89 = 0;
        char v77 = (int8x8_t *)((char *)v67 + v43);
        float16x8_t v88 = v66;
        char v76 = (int8x8_t *)((char *)result + v23);
        char v75 = (const __int16 *)((char *)v68 + v20);
      }
      else
      {
        uint64_t v74 = 0;
        char v75 = (const __int16 *)((char *)v68 + v20);
        char v76 = (int8x8_t *)((char *)result + v23);
        char v77 = (int8x8_t *)((char *)v67 + v43);
        do
        {
          int16x8x4_t v179 = vld4q_s16(v68);
          v68 += 32;
          int16x8x4_t v178 = vld4q_s16(v75);
          v75 += 32;
          if (result)
          {
            float16x8_t v78 = (float16x8_t)vdupq_n_s16(0x5BF8u);
            int8x8_t v79 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16((float16x8_t)v179.val[3], v78)));
            int8x8_t v80 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16((float16x8_t)v178.val[3], v78)));
          }
          else
          {
            int8x8_t v79 = 0;
            int8x8_t v80 = 0;
          }
          float16x8_t v81 = vmulq_n_f16((float16x8_t)v179.val[0], _H11);
          float16x8_t v82 = vmulq_n_f16((float16x8_t)v179.val[1], _H11);
          float16x8_t v83 = vmulq_n_f16((float16x8_t)v179.val[2], _H11);
          float16x8_t v84 = vmulq_n_f16((float16x8_t)v178.val[0], _H11);
          float16x8_t v85 = vmulq_n_f16((float16x8_t)v178.val[1], _H11);
          float16x8_t v86 = vmulq_n_f16((float16x8_t)v178.val[2], _H11);
          *v67++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v60, v81, _H8), v82, _H9), v83, _H10), v60), v62)));
          *v77++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v60, v84, _H8), v85, _H9), v86, _H10), v60), v62)));
          int16x8_t v87 = (int16x8_t)vaddq_f16((float16x8_t)vuzp2q_s16((int16x8_t)v84, (int16x8_t)v85), vaddq_f16(vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v81, (int16x8_t)v82), (float16x8_t)vuzp2q_s16((int16x8_t)v81, (int16x8_t)v82)), (float16x8_t)vuzp1q_s16((int16x8_t)v84, (int16x8_t)v85)));
          *(int8x8_t *)&v66[v74] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v168, v171, (float16x8_t)vzip1q_s16(v87, v87)), v170, (float16x8_t)vzip2q_s16(v87, v87)), v169, vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v86, (int16x8_t)v86), vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v83,
                                                                                     (int16x8_t)v83),
                                                                      (float16x8_t)vtrn2q_s16((int16x8_t)v83, (int16x8_t)v83)), (float16x8_t)vtrn1q_s16((int16x8_t)v86, (int16x8_t)v86)))), v167), v166)));
          if (result)
          {
            *result++ = v79;
            *v76++ = v80;
          }
          v74 += 8;
        }
        while ((int)v74 < (int)v6 - 7);
        float16x8_t v88 = &v66[v74];
        unint64_t v89 = v6 & 0xFFFFFFF8;
      }
      if (v6 > v89)
      {
        uint64_t v90 = 0;
        uint16x8_t v91 = v68 + 4;
        uint32x4_t v92 = v75 + 4;
        do
        {
          if (result)
          {
            uint64_t v93 = v90 + 2 * HIBYTE(v177);
            _H17 = *(const __int16 *)((char *)v92 + v93);
            __asm { FCVT            S17, H17 }
            _H18 = *(const __int16 *)((char *)v92 + v93 - 8);
            __asm { FCVT            S18, H18 }
            float16x8_t v98 = (__int16 *)((char *)v91 + v93);
            _H19 = *v98;
            __asm { FCVT            S19, H19 }
            _H20 = *(v98 - 4);
            __asm { FCVT            S20, H20 }
            __int8 v103 = llroundf(_S20 * 255.0);
            __int8 v104 = llroundf(_S19 * 255.0);
            __int8 v105 = llroundf(_S18 * 255.0);
            __int8 v106 = llroundf(_S17 * 255.0);
          }
          else
          {
            __int8 v105 = 0;
            __int8 v103 = 0;
            __int8 v104 = 0;
            __int8 v106 = 0;
          }
          uint64_t v107 = v90 + 2 * v177;
          _H17 = *(const __int16 *)((char *)v91 + v107 - 8);
          __asm { FCVT            S17, H17 }
          float v110 = _S3 * _S17;
          uint64_t v111 = v90 + 2 * BYTE1(v177);
          LOWORD(_S17) = *(const __int16 *)((char *)v91 + v111 - 8);
          __asm { FCVT            S17, H17 }
          float v113 = _S3 * _S17;
          uint64_t v114 = v90 + 2 * BYTE2(v177);
          LOWORD(_S17) = *(const __int16 *)((char *)v91 + v114 - 8);
          __asm { FCVT            S17, H17 }
          float v116 = _S3 * _S17;
          LOWORD(_S17) = *(const __int16 *)((char *)v91 + v107);
          __asm { FCVT            S17, H17 }
          float v118 = _S3 * _S17;
          _H18 = *(const __int16 *)((char *)v91 + v111);
          __asm { FCVT            S18, H18 }
          float v121 = _S3 * _S18;
          LOWORD(_S18) = *(const __int16 *)((char *)v91 + v114);
          __asm { FCVT            S18, H18 }
          float v123 = _S3 * _S18;
          LOWORD(_S18) = *(const __int16 *)((char *)v92 + v107 - 8);
          __asm { FCVT            S18, H18 }
          float v125 = _S3 * _S18;
          float v126 = (__int16 *)((char *)v92 + v111);
          _H19 = *(v126 - 4);
          __asm { FCVT            S19, H19 }
          float v129 = _S3 * _S19;
          float v130 = (__int16 *)((char *)v92 + v114);
          _H20 = *(v130 - 4);
          __asm { FCVT            S20, H20 }
          float v133 = _S3 * _S20;
          _H26 = *(const __int16 *)((char *)v92 + v107);
          __asm { FCVT            S26, H26 }
          float v136 = _S3 * _S26;
          _H27 = *v126;
          __asm { FCVT            S27, H27 }
          float v139 = _S3 * _S27;
          _H28 = *v130;
          __asm { FCVT            S28, H28 }
          float v142 = _S3 * _S28;
          float v143 = (float)((float)((float)(_S1 * v113) + (float)(_S0 * v110)) + (float)(_S2 * v116)) + v46;
          float v144 = (float)((float)((float)(_S1 * v121) + (float)(_S0 * v118)) + (float)(_S2 * v123)) + v46;
          float v145 = (float)((float)((float)(_S1 * v129) + (float)(_S0 * v125)) + (float)(_S2 * v133)) + v46;
          float v146 = (float)((float)((float)(_S1 * v139) + (float)(_S0 * v136)) + (float)(_S2 * v142)) + v46;
          if (v143 < v46) {
            float v147 = v46;
          }
          else {
            float v147 = (float)((float)((float)(_S1 * v113) + (float)(_S0 * v110)) + (float)(_S2 * v116)) + v46;
          }
          if (v143 <= v48) {
            float v148 = v147;
          }
          else {
            float v148 = v48;
          }
          __int8 v149 = llroundf(v148);
          if (v144 < v46) {
            float v150 = v46;
          }
          else {
            float v150 = (float)((float)((float)(_S1 * v121) + (float)(_S0 * v118)) + (float)(_S2 * v123)) + v46;
          }
          if (v144 <= v48) {
            float v151 = v150;
          }
          else {
            float v151 = v48;
          }
          v67->i8[0] = v149;
          v67->i8[1] = llroundf(v151);
          if (v145 < v46) {
            float v152 = v46;
          }
          else {
            float v152 = (float)((float)((float)(_S1 * v129) + (float)(_S0 * v125)) + (float)(_S2 * v133)) + v46;
          }
          if (v145 > v48) {
            float v152 = v48;
          }
          v77->i8[0] = llroundf(v152);
          if (v146 < v46) {
            float v153 = v46;
          }
          else {
            float v153 = (float)((float)((float)(_S1 * v139) + (float)(_S0 * v136)) + (float)(_S2 * v142)) + v46;
          }
          if (v146 > v48) {
            float v153 = v48;
          }
          v77->i8[1] = llroundf(v153);
          float v154 = (float)((float)(v110 + v118) + v125) + v136;
          float v155 = (float)((float)(v113 + v121) + v129) + v139;
          float v156 = (float)((float)(v116 + v123) + v133) + v142;
          float v157 = (float)((float)(v47 + (float)(v154 * v175)) + (float)(v155 * v173)) + (float)(v156 * *(float *)&v70);
          float v158 = v50;
          if (v157 <= v50)
          {
            float v158 = (float)((float)(v47 + (float)(v154 * v175)) + (float)(v155 * v173)) + (float)(v156 * *(float *)&v70);
            if (v157 < v49) {
              float v158 = v49;
            }
          }
          float v159 = (float)((float)(v47 + (float)(v154 * v4.f32[1])) + (float)(v155 * v165))
               + (float)(v156 * *((float *)&v70 + 1));
          *float16x8_t v88 = llroundf(v158);
          float v160 = v50;
          if (v159 <= v50)
          {
            float v160 = v159;
            if (v159 < v49) {
              float v160 = v49;
            }
          }
          v88[1] = llroundf(v160);
          if (result)
          {
            result->i8[0] = v103;
            result->i8[1] = v104;
            double result = (int8x8_t *)((char *)result + 2);
            v76->i8[0] = v105;
            v76->i8[1] = v106;
            char v76 = (int8x8_t *)((char *)v76 + 2);
          }
          v89 += 2;
          v90 += 16;
          float v67 = (int8x8_t *)((char *)v67 + 2);
          char v77 = (int8x8_t *)((char *)v77 + 2);
          v88 += 2;
        }
        while (v6 > v89);
      }
      uint64_t v43 = v163;
      uint64_t v20 = v164;
      int32x4_t v68 = (const __int16 *)&v71[v164];
      float v67 = (int8x8_t *)&v72[v163];
      v66 += v162;
      double result = (int8x8_t *)&v73[v23];
      v44 += 2;
    }
    while (v161 > v44);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_420vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_420vf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = 2 * *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    uint64_t v14 = *(void *)(result + 44) + 2 * v10;
    unint64_t v15 = 2 * v11 - 2 * v10;
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(uint64_t **)(result + 136);
    uint64_t v18 = **(void **)(result + 64);
    uint64_t v19 = *v17;
    uint64_t v20 = v17[1];
    uint64_t v21 = v17[2];
    float v22 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    float v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v26 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v27 = (float)LODWORD(a8);
    float v28 = *(float *)(v16 + 36);
    float v29 = *(float *)(v16 + 40);
    float v30 = *(float *)(v16 + 44);
    float v31 = *(float *)(v16 + 48) * 0.25;
    float v32 = *(float *)(v16 + 52) * 0.25;
    float v33 = *(float *)(v16 + 56) * 0.25;
    float v34 = *(float *)(v16 + 60) * 0.25;
    float v35 = *(float *)(v16 + 64) * 0.25;
    float v36 = *(float *)(v16 + 68) * 0.25;
    uint64_t v37 = *(void *)(result + 112);
    uint64_t v38 = *(void **)(result + 128);
    uint64_t v39 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v9);
    uint64_t v40 = **(void **)(result + 56) + v18 * v14 + 8 * *(void *)(result + 36);
    unsigned int v41 = (unsigned char *)(*v38 + v39 * v19 + v37);
    uint64_t v42 = v38[2];
    if (v42) {
      uint64_t v43 = (unsigned char *)(v42 + v39 * v21 + v37);
    }
    else {
      uint64_t v43 = 0;
    }
    uint64_t v44 = *(unsigned __int8 *)(v16 + 157);
    double result = *(unsigned __int8 *)(v16 + 156);
    uint64_t v45 = v38[1] + v39 / 2 * v20;
    uint64_t v46 = *(unsigned __int8 *)(v16 + 155);
    uint64_t v47 = *(unsigned __int8 *)(v16 + 154);
    uint64_t v48 = v45 + v37;
    do
    {
      float v49 = &v43[v21];
      float v50 = &v41[v19];
      uint64_t v51 = v40 + v18;
      if (v13)
      {
        unint64_t v52 = 0;
        uint64_t v53 = &v43[v21];
        unint64_t v54 = &v41[v19];
        uint64_t v55 = v40 + v18;
        do
        {
          uint64_t v56 = v40 + 8;
          uint64_t v57 = v55 + 8;
          if (v43)
          {
            _H23 = *(_WORD *)(v57 + 2 * v44);
            __asm { FCVT            S23, H23 }
            _H24 = *(_WORD *)(v55 + 2 * v44);
            _H25 = *(_WORD *)(v56 + 2 * v44);
            __asm
            {
              FCVT            S24, H24
              FCVT            S25, H25
            }
            _H26 = *(_WORD *)(v40 + 2 * v44);
            __asm { FCVT            S26, H26 }
            char v70 = llroundf(_S26 * 255.0);
            char v71 = llroundf(_S25 * 255.0);
            char v72 = llroundf(_S24 * 255.0);
            char v73 = llroundf(_S23 * 255.0);
          }
          else
          {
            char v72 = 0;
            char v70 = 0;
            char v71 = 0;
            char v73 = 0;
          }
          _H23 = *(_WORD *)(v40 + 2 * v47);
          __asm { FCVT            S23, H23 }
          float v76 = v22 * _S23;
          LOWORD(_S23) = *(_WORD *)(v40 + 2 * v46);
          __asm { FCVT            S23, H23 }
          float v78 = v22 * _S23;
          LOWORD(_S23) = *(_WORD *)(v40 + 2 * result);
          __asm { FCVT            S23, H23 }
          float v80 = v22 * _S23;
          _H26 = *(_WORD *)(v56 + 2 * v47);
          __asm { FCVT            S26, H26 }
          float v83 = v22 * _S26;
          LOWORD(_S26) = *(_WORD *)(v56 + 2 * v46);
          __asm { FCVT            S26, H26 }
          float v85 = v22 * _S26;
          LOWORD(_S26) = *(_WORD *)(v56 + 2 * result);
          __asm { FCVT            S26, H26 }
          float v87 = v22 * _S26;
          _H29 = *(_WORD *)(v55 + 2 * v47);
          __asm { FCVT            S29, H29 }
          float v90 = v22 * _S29;
          _H30 = *(_WORD *)(v55 + 2 * v46);
          __asm { FCVT            S30, H30 }
          float v93 = v22 * _S30;
          _H31 = *(_WORD *)(v55 + 2 * result);
          __asm { FCVT            S31, H31 }
          float v96 = v22 * _S31;
          _H8 = *(_WORD *)(v57 + 2 * v47);
          __asm { FCVT            S8, H8 }
          float v99 = v22 * _S8;
          _H9 = *(_WORD *)(v57 + 2 * v46);
          __asm { FCVT            S9, H9 }
          float v102 = v22 * _S9;
          _H10 = *(_WORD *)(v57 + 2 * result);
          __asm { FCVT            S10, H10 }
          float v105 = v22 * _S10;
          float v106 = (float)((float)((float)(v29 * v78) + (float)(v28 * v76)) + (float)(v30 * v80)) + v23;
          float v107 = (float)((float)((float)(v29 * v85) + (float)(v28 * v83)) + (float)(v30 * v87)) + v23;
          float v108 = (float)((float)((float)(v29 * v93) + (float)(v28 * v90)) + (float)(v30 * v96)) + v23;
          float v109 = (float)((float)((float)(v29 * v102) + (float)(v28 * v99)) + (float)(v30 * v105)) + v23;
          if (v106 < v23) {
            float v110 = v23;
          }
          else {
            float v110 = (float)((float)((float)(v29 * v78) + (float)(v28 * v76)) + (float)(v30 * v80)) + v23;
          }
          if (v106 <= v25) {
            float v111 = v110;
          }
          else {
            float v111 = v25;
          }
          char v112 = llroundf(v111);
          if (v107 < v23) {
            float v113 = v23;
          }
          else {
            float v113 = (float)((float)((float)(v29 * v85) + (float)(v28 * v83)) + (float)(v30 * v87)) + v23;
          }
          if (v107 > v25) {
            float v113 = v25;
          }
          *unsigned int v41 = v112;
          v41[1] = llroundf(v113);
          if (v108 < v23) {
            float v114 = v23;
          }
          else {
            float v114 = (float)((float)((float)(v29 * v93) + (float)(v28 * v90)) + (float)(v30 * v96)) + v23;
          }
          if (v108 > v25) {
            float v114 = v25;
          }
          *unint64_t v54 = llroundf(v114);
          if (v109 < v23) {
            float v115 = v23;
          }
          else {
            float v115 = (float)((float)((float)(v29 * v102) + (float)(v28 * v99)) + (float)(v30 * v105)) + v23;
          }
          if (v109 > v25) {
            float v115 = v25;
          }
          v54[1] = llroundf(v115);
          float v116 = (float)((float)(v76 + v83) + v90) + v99;
          float v117 = (float)((float)(v78 + v85) + v93) + v102;
          float v118 = (float)((float)(v80 + v87) + v96) + v105;
          float v119 = (float)((float)(v24 + (float)(v116 * v31)) + (float)(v117 * v32)) + (float)(v118 * v33);
          float v120 = v27;
          if (v119 <= v27)
          {
            float v120 = (float)((float)(v24 + (float)(v116 * v31)) + (float)(v117 * v32)) + (float)(v118 * v33);
            if (v119 < v26) {
              float v120 = v26;
            }
          }
          float v121 = (float)((float)(v24 + (float)(v116 * v34)) + (float)(v117 * v35)) + (float)(v118 * v36);
          *(unsigned char *)(v48 + v52) = llroundf(v120);
          float v122 = v27;
          if (v121 <= v27)
          {
            float v122 = v121;
            if (v121 < v26) {
              float v122 = v26;
            }
          }
          *(unsigned char *)(v48 + v52 + 1) = llroundf(v122);
          if (v43)
          {
            unsigned char *v43 = v70;
            v43[1] = v71;
            v43 += 2;
            *uint64_t v53 = v72;
            v53[1] = v73;
            v53 += 2;
          }
          v40 += 16;
          v55 += 16;
          v41 += 2;
          v54 += 2;
          v52 += 2;
        }
        while (v13 > v52);
      }
      uint64_t v40 = v51 + v18;
      unsigned int v41 = &v50[v19];
      v48 += v20;
      uint64_t v43 = &v49[v21];
      v12 += 2;
    }
    while (v15 > v12);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, int16x8_t _Q1, uint8x8_t a5, float16x8_t a6, double a7, double a8, float16x8_t _Q6)
{
  uint64_t v11 = 0;
  unint64_t v12 = *(void *)(a1 + 20);
  uint64_t v13 = *(void *)(a1 + 36);
  uint64_t v14 = *(void *)(a1 + 44);
  uint64_t v15 = *(void *)(a1 + 28);
  unint64_t v16 = 2 * *a1;
  uint64_t v17 = 2 * (v15 * a2 / v16);
  uint64_t v18 = v14 + v17;
  uint64_t v19 = 2 * ((v15 + v15 * a2) / v16);
  uint64_t v20 = v14 + v19;
  uint64_t v21 = *((void *)a1 + 14);
  unint64_t v22 = *((void *)a1 + 13) * a2;
  uint64_t v23 = *((void *)a1 + 19);
  uint64_t v25 = *((void *)a1 + 15);
  uint64_t v24 = (uint64_t *)*((void *)a1 + 16);
  float v26 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v27 = **((void **)a1 + 8);
  uint64_t result = **((void **)a1 + 7);
  uint64_t v29 = *v26;
  uint64_t v30 = v26[1];
  uint64_t v31 = *v24;
  uint64_t v32 = v24[1];
  a5.i32[0] = *(_DWORD *)(v23 + 154);
  __int32 v345 = a5.i32[0];
  unsigned int v33 = *(unsigned __int16 *)(v23 + 144);
  unsigned int v34 = *(unsigned __int8 *)(v23 + 132);
  unsigned int v35 = *(unsigned __int16 *)(v23 + 146);
  unsigned int v36 = *(unsigned __int16 *)(v23 + 148);
  unsigned int v37 = *(unsigned __int16 *)(v23 + 150);
  unsigned int v38 = *(unsigned __int16 *)(v23 + 152);
  float v340 = *(float *)(v23 + 36);
  float v339 = *(float *)(v23 + 40);
  v39.i32[0] = *(_DWORD *)(v23 + 48);
  float v338 = *(float *)(v23 + 44);
  v41.i32[0] = *(_DWORD *)(v23 + 52);
  v40.i32[0] = *(_DWORD *)(v23 + 56);
  _Q1.i32[0] = *(_DWORD *)(v23 + 60);
  __int32 v42 = *(_DWORD *)(v23 + 64);
  uint64_t v43 = v25 + 2 * (v22 / v16);
  uint64_t v44 = v27 * v18;
  __int32 v45 = *(_DWORD *)(v23 + 68);
  float v337 = *(float *)(v23 + 72);
  float v336 = *(float *)(v23 + 76);
  float v335 = *(float *)(v23 + 80);
  if (v43 >= 0) {
    uint64_t v46 = v43;
  }
  else {
    uint64_t v46 = v43 + 1;
  }
  float v334 = *(float *)(v23 + 84);
  float v333 = *(float *)(v23 + 88);
  float v332 = *(float *)(v23 + 92);
  float v331 = *(float *)(v23 + 96);
  uint64_t v295 = v30;
  uint64_t v47 = v30 * (v46 >> 1);
  uint16x8_t v48 = vmovl_u8(a5);
  float v330 = *(float *)(v23 + 100);
  _S17 = *(float *)(v23 + 108);
  float v329 = *(float *)(v23 + 104);
  _S18 = *(float *)(v23 + 112);
  _S19 = *(float *)(v23 + 116);
  _S20 = *(float *)(v23 + 120);
  v53.i64[1] = 0;
  memset(v344, 0, sizeof(v344));
  do
  {
    unsigned int v54 = 0;
    char v55 = *((unsigned char *)&v345 + v11);
    do
    {
      *((unsigned char *)v344 + 8 * (((_BYTE)v11 + (v54 >> 3)) & 0x1F) + v54) = v55 + 4 * v54;
      ++v54;
    }
    while (v54 != 8);
    ++v11;
  }
  while (v11 != 4);
  if (v19 != v17)
  {
    unint64_t v293 = v20 - v18;
    float v56 = (float)v33;
    float v326 = (float)v36;
    float v341 = (float)v37;
    uint64_t v57 = v23 + 16548;
    float v58 = (float)v38;
    v39.i32[1] = _Q1.i32[0];
    __asm { FMOV            V1.2S, #0.25 }
    *(float32x2_t *)v53.f32 = vmul_f32(v39, *(float32x2_t *)_Q1.i8);
    v41.i32[1] = v42;
    *(float32x2_t *)a6.i8 = vmul_f32(v41, *(float32x2_t *)_Q1.i8);
    v40.i32[1] = v45;
    *(float32x2_t *)_Q1.i8 = vmul_f32(v40, *(float32x2_t *)_Q1.i8);
    uint64_t v63 = v23 + 32932;
    uint64_t v64 = v23 + 164;
    _S0 = v340;
    __asm { FCVT            H8, S0 }
    _S0 = v339;
    __asm { FCVT            H9, S0 }
    _S0 = v338;
    __asm { FCVT            H10, S0 }
    int32x4_t v71 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v53), 0);
    int32x4_t v72 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)a6), 0);
    _D0 = (int16x4_t)vcvt_f16_f32((float32x4_t)_Q1);
    float16x8_t v74 = (float16x8_t)vdupq_lane_s32((int32x2_t)_D0, 0);
    __asm
    {
      FCVT            H4, S17
      FCVT            H5, S18
      FCVT            H6, S19
      FCVT            H7, S20
    }
    *(float *)_D0.i32 = v337;
    __asm { FCVT            H11, S0 }
    *(float *)_D0.i32 = v336;
    __asm { FCVT            H12, S0 }
    *(float *)_D0.i32 = v335;
    __asm { FCVT            H13, S0 }
    *(float *)_D0.i32 = v334;
    __asm { FCVT            H14, S0 }
    *(float *)_D0.i32 = v333;
    __asm { FCVT            H15, S0 }
    *(float *)_D0.i32 = v332;
    __asm { FCVT            H0, S0 }
    short float v308 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v331;
    __asm { FCVT            H0, S0 }
    short float v307 = *(short float *)_D0.i16;
    *(short float *)_D0.i16 = (short float)v33;
    float16x8_t v82 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v35;
    int16x8_t v83 = vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v36;
    int16x8_t v84 = vdupq_lane_s16(_D0, 0);
    *(float *)_D0.i32 = v330;
    __asm { FCVT            H0, S0 }
    short float v303 = *(short float *)_D0.i16;
    *(short float *)_D0.i16 = (short float)v37;
    _Q0 = vdupq_lane_s16(_D0, 0);
    float16x8_t v302 = (float16x8_t)_Q0;
    uint64_t v86 = v48.u16[1];
    float16x8_t v87 = (float16x8_t)v84;
    *(float *)_Q0.i32 = v329;
    __asm { FCVT            H0, S0 }
    short float v301 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v38;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    unsigned __int8 v89 = 16 - v34;
    uint64_t v90 = v32 + v47;
    unint64_t v91 = 0;
    if (v34 >= 0x11) {
      unsigned __int8 v89 = 0;
    }
    uint32x4_t v92 = (int16x8_t *)(v90 + 2 * v21);
    float v93 = (uint16x8_t *)(v31 + v29 * v43 + 2 * v21);
    float16x8_t v94 = (const __int16 *)(result + v44 + 8 * v13);
    uint64_t result = (v12 - 7);
    unsigned __int8 v95 = v89;
    uint64_t v284 = v86;
    unint64_t v285 = v12 & 0xFFFFFFF8;
    float v96 = (float *)&unk_193E7D000;
    uint16x8_t v298 = (uint16x8_t)vdupq_n_s16(v89);
    float v323 = *(float *)a6.i32;
    uint64_t v324 = v53.i64[0];
    float v297 = v53.f32[1];
    unint64_t v97 = _Q1.i64[0];
    float v296 = *(float *)&a6.i32[1];
    uint64_t v294 = v29;
    float16x8_t v300 = (float16x8_t)_Q0;
    uint64_t v287 = v27;
    unint64_t v288 = v12;
    float v328 = _S18;
    float v327 = (float)v35;
    float v325 = _S17;
    short float v321 = _H10;
    short float v322 = _H9;
    float16x8_t v319 = (float16x8_t)v72;
    float16x8_t v320 = (float16x8_t)v71;
    short float v317 = _H4;
    float16x8_t v318 = v74;
    short float v315 = _H6;
    short float v316 = _H5;
    short float v313 = _H11;
    short float v314 = _H7;
    short float v311 = _H13;
    short float v312 = _H12;
    long long v309 = _Q15;
    long long v310 = _Q14;
    int16x8_t v305 = v83;
    float16x8_t v306 = v82;
    float16x8_t v304 = (float16x8_t)v84;
    unsigned int v299 = v12 - 7;
    unsigned __int8 v286 = v89;
    do
    {
      float16x8_t v98 = (char *)v94 + v27;
      float v99 = &v93->i8[v29];
      if ((int)v12 < 8)
      {
        unint64_t v184 = 0;
        __int8 v103 = (uint16x8_t *)((char *)v93 + v29);
        float v102 = v92;
        float v101 = (const __int16 *)((char *)v94 + v27);
      }
      else
      {
        short float v291 = v92;
        unint64_t v292 = v91;
        int v100 = 0;
        short float v289 = &v93->i8[v29];
        int32x4_t v290 = (char *)v94 + v27;
        float v101 = (const __int16 *)((char *)v94 + v27);
        float v102 = v92;
        __int8 v103 = (uint16x8_t *)((char *)v93 + v29);
        v104.i64[0] = 0x7000700070007000;
        v104.i64[1] = 0x7000700070007000;
        float16x8_t v105 = 0uLL;
        v106.i64[0] = 0x9000900090009000;
        v106.i64[1] = 0x9000900090009000;
        do
        {
          int16x8x4_t v346 = vld4q_s16(v94);
          float v107 = v94 + 32;
          v343 = v107;
          int16x8x4_t v347 = vld4q_s16(v101);
          float v108 = v101 + 32;
          v342 = v108;
          float16x8_t v109 = vmulq_f16((float16x8_t)v346.val[0], v104);
          float16x8_t v110 = (float16x8_t)v83;
          float16x8_t v111 = vmulq_f16((float16x8_t)v346.val[1], v104);
          v346.val[0] = (int16x8_t)vmulq_f16((float16x8_t)v346.val[2], v104);
          v346.val[1] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v109, v105), v106));
          v346.val[2] = (int16x8_t)vmovl_high_u16((uint16x8_t)v346.val[1]);
          v346.val[1] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v346.val[1].i8);
          uint64_t v112 = v346.val[1].u32[1];
          uint64_t v113 = v346.val[1].u32[3];
          v114.i16[0] = *(_WORD *)(v64 + 2 * v346.val[1].u32[0]);
          float v115 = (__int16 *)(v64 + 2 * v346.val[1].u32[2]);
          uint64_t v116 = v346.val[2].u32[1];
          float v117 = (__int16 *)(v64 + 2 * v346.val[2].u32[0]);
          uint64_t v118 = v346.val[2].u32[3];
          float v119 = (__int16 *)(v64 + 2 * v346.val[2].u32[2]);
          v346.val[1] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v111, v105), v106));
          v346.val[2] = (int16x8_t)vmovl_high_u16((uint16x8_t)v346.val[1]);
          v120.i64[0] = v346.val[2].u32[2];
          v120.i64[1] = v346.val[2].u32[3];
          v346.val[3] = v120;
          v120.i64[0] = v346.val[2].u32[0];
          v120.i64[1] = v346.val[2].u32[1];
          v346.val[2] = v120;
          v346.val[1] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v346.val[1].i8);
          v120.i64[0] = v346.val[1].u32[2];
          v120.i64[1] = v346.val[1].u32[3];
          v121.i16[0] = *(_WORD *)(v64 + 2 * v346.val[1].u32[0]);
          float v122 = (__int16 *)(v64 + 2 * v116);
          float v123 = (__int16 *)(v64 + 2 * v118);
          float v124 = (__int16 *)(v64 + 2 * v346.val[1].u32[1]);
          v346.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v346.val[0], (float16x8_t)0), v106));
          v346.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v346.val[0]);
          v346.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v346.val[0].i8);
          v125.i16[0] = *(_WORD *)(v64 + 2 * v346.val[0].u32[0]);
          float v126 = (__int16 *)(v64 + 2 * v346.val[0].u32[1]);
          float v127 = (__int16 *)(v64 + 2 * v346.val[0].u32[2]);
          float v128 = (__int16 *)(v64 + 2 * v346.val[0].u32[3]);
          float v129 = (__int16 *)(v64 + 2 * v346.val[1].u32[0]);
          float v130 = (__int16 *)(v64 + 2 * v346.val[1].u32[1]);
          float v131 = (__int16 *)(v64 + 2 * v346.val[1].u32[2]);
          float v132 = (__int16 *)(v64 + 2 * v346.val[1].u32[3]);
          v114.i16[1] = *(_WORD *)(v64 + 2 * v112);
          v346.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v347.val[0], v104), (float16x8_t)0), v106));
          v346.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v346.val[0]);
          v121.i16[1] = *v124;
          v346.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v346.val[0].i8);
          v125.i16[1] = *v126;
          v133.i16[0] = *(_WORD *)(v64 + 2 * v346.val[0].u32[0]);
          v114.i16[2] = *v115;
          v121.i16[2] = *(_WORD *)(v64 + 2 * v120.i64[0]);
          uint64_t v134 = (__int16 *)(v64 + 2 * v346.val[0].u32[3]);
          v125.i16[2] = *v127;
          uint64_t v135 = (__int16 *)(v64 + 2 * v346.val[1].u32[0]);
          v114.i16[3] = *(_WORD *)(v64 + 2 * v113);
          float v136 = (__int16 *)(v64 + 2 * v346.val[1].u32[1]);
          float16x8_t v137 = (__int16 *)(v64 + 2 * v346.val[1].u32[2]);
          float v138 = (__int16 *)(v64 + 2 * v346.val[1].u32[3]);
          v121.i16[3] = *(_WORD *)(v64 + 2 * v120.i64[1]);
          v133.i16[1] = *(_WORD *)(v64 + 2 * v346.val[0].u32[1]);
          v133.i16[2] = *(_WORD *)(v64 + 2 * v346.val[0].u32[2]);
          v125.i16[3] = *v128;
          v346.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v347.val[1], v104), (float16x8_t)0), v106));
          v346.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v346.val[0]);
          v133.i16[3] = *v134;
          v346.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v346.val[0].i8);
          v114.i16[4] = *v117;
          v121.i16[4] = *(_WORD *)(v64 + 2 * v346.val[2].i64[0]);
          v139.i16[0] = *(_WORD *)(v64 + 2 * v346.val[0].u32[0]);
          v125.i16[4] = *v129;
          v133.i16[4] = *v135;
          v114.i16[5] = *v122;
          v121.i16[5] = *(_WORD *)(v64 + 2 * v346.val[2].i64[1]);
          float v140 = (__int16 *)(v64 + 2 * v346.val[1].u32[2]);
          float v141 = (__int16 *)(v64 + 2 * v346.val[1].u32[3]);
          v139.i16[1] = *(_WORD *)(v64 + 2 * v346.val[0].u32[1]);
          v125.i16[5] = *v130;
          v139.i16[2] = *(_WORD *)(v64 + 2 * v346.val[0].u32[2]);
          v139.i16[3] = *(_WORD *)(v64 + 2 * v346.val[0].u32[3]);
          v133.i16[5] = *v136;
          v139.i16[4] = *(_WORD *)(v64 + 2 * v346.val[1].u32[0]);
          v139.i16[5] = *(_WORD *)(v64 + 2 * v346.val[1].u32[1]);
          v114.i16[6] = *v119;
          v346.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v347.val[2], v104), (float16x8_t)0), v106));
          v346.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v346.val[0]);
          v121.i16[6] = *(_WORD *)(v64 + 2 * v346.val[3].i64[0]);
          v346.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v346.val[0].i8);
          v125.i16[6] = *v131;
          v133.i16[6] = *v137;
          v142.i16[0] = *(_WORD *)(v64 + 2 * v346.val[0].u32[0]);
          v139.i16[6] = *v140;
          v114.i16[7] = *v123;
          v121.i16[7] = *(_WORD *)(v64 + 2 * v346.val[3].i64[1]);
          v125.i16[7] = *v132;
          v142.i16[1] = *(_WORD *)(v64 + 2 * v346.val[0].u32[1]);
          v133.i16[7] = *v138;
          v142.i16[2] = *(_WORD *)(v64 + 2 * v346.val[0].u32[2]);
          v142.i16[3] = *(_WORD *)(v64 + 2 * v346.val[0].u32[3]);
          v139.i16[7] = *v141;
          v142.i16[4] = *(_WORD *)(v64 + 2 * v346.val[1].u32[0]);
          v142.i16[5] = *(_WORD *)(v64 + 2 * v346.val[1].u32[1]);
          v142.i16[6] = *(_WORD *)(v64 + 2 * v346.val[1].u32[2]);
          v142.i16[7] = *(_WORD *)(v64 + 2 * v346.val[1].u32[3]);
          v346.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v114, v317), v121, v316), v125, v315), vmaxq_f16(vmaxq_f16(v114, v121), v125), v314), (float16x8_t)0), v106));
          v346.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v346.val[0]);
          v346.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v346.val[0].i8);
          uint64_t v143 = v346.val[0].u32[1];
          uint64_t v144 = v346.val[0].u32[0];
          v120.i64[0] = v346.val[1].u32[2];
          v120.i64[1] = v346.val[1].u32[3];
          v346.val[2] = v120;
          v120.i64[1] = v346.val[1].u32[1];
          uint64_t v145 = v346.val[0].u32[3];
          uint64_t v146 = v346.val[0].u32[2];
          uint64_t v147 = v346.val[1].u32[0];
          uint64_t v148 = v346.val[2].i64[0];
          v346.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v133, v317), v139, v316), v142, v315), vmaxq_f16(vmaxq_f16(v133, v139), v142), v314), (float16x8_t)0), v106));
          v346.val[1] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v346.val[0].i8);
          v346.val[2].i16[0] = *(_WORD *)(v57 + 2 * v144);
          __int8 v149 = (__int16 *)(v57 + 2 * v346.val[2].i64[1]);
          v346.val[2].i16[1] = *(_WORD *)(v57 + 2 * v143);
          v346.val[2].i16[2] = *(_WORD *)(v57 + 2 * v146);
          v346.val[0] = (int16x8_t)vmovl_high_u16((uint16x8_t)v346.val[0]);
          v346.val[2].i16[3] = *(_WORD *)(v57 + 2 * v145);
          v346.val[2].i16[4] = *(_WORD *)(v57 + 2 * v147);
          uint64_t v150 = v346.val[0].u32[0];
          v346.val[2].i16[5] = *(_WORD *)(v57 + 2 * v120.i64[1]);
          v346.val[0].i16[0] = *(_WORD *)(v57 + 2 * v346.val[1].u32[0]);
          v346.val[2].i16[6] = *(_WORD *)(v57 + 2 * v148);
          uint64_t v151 = v346.val[0].u32[3];
          v346.val[2].i16[7] = *v149;
          float v152 = (__int16 *)(v57 + 2 * v346.val[0].u32[1]);
          v346.val[0].i16[1] = *(_WORD *)(v57 + 2 * v346.val[1].u32[1]);
          v346.val[0].i16[2] = *(_WORD *)(v57 + 2 * v346.val[1].u32[2]);
          v346.val[3] = (int16x8_t)vmulq_f16(v114, (float16x8_t)v346.val[2]);
          uint64_t v153 = v346.val[0].u32[2];
          v346.val[0].i16[3] = *(_WORD *)(v57 + 2 * v346.val[1].u32[3]);
          v346.val[0].i16[4] = *(_WORD *)(v57 + 2 * v150);
          v346.val[1] = (int16x8_t)vmulq_f16(v121, (float16x8_t)v346.val[2]);
          v346.val[0].i16[5] = *v152;
          v346.val[0].i16[6] = *(_WORD *)(v57 + 2 * v153);
          v346.val[2] = (int16x8_t)vmulq_f16(v125, (float16x8_t)v346.val[2]);
          v346.val[0].i16[7] = *(_WORD *)(v57 + 2 * v151);
          v347.val[0] = (int16x8_t)vmulq_f16(v133, (float16x8_t)v346.val[0]);
          v347.val[1] = (int16x8_t)vmulq_f16(v139, (float16x8_t)v346.val[0]);
          v347.val[2] = (int16x8_t)vmulq_f16(v142, (float16x8_t)v346.val[0]);
          v114.i16[7] = HIWORD(v310);
          v125.i16[7] = HIWORD(v309);
          float16x8_t v154 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v346.val[3], *(short float *)&v310), (float16x8_t)v346.val[1], *(short float *)&v309), (float16x8_t)v346.val[2], v308);
          float16x8_t v155 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v346.val[2], v301), (float16x8_t)v346.val[1], v303), (float16x8_t)v346.val[3], v307);
          float16x8_t v156 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v347.val[0], v313), (float16x8_t)v347.val[1], v312), (float16x8_t)v347.val[2], v311);
          v346.val[1] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v346.val[3], v313), (float16x8_t)v346.val[1], v312), (float16x8_t)v346.val[2], v311), (float16x8_t)0), v106));
          v346.val[2] = (int16x8_t)vmovl_high_u16((uint16x8_t)v346.val[1]);
          v120.i64[0] = v346.val[2].u32[2];
          v120.i64[1] = v346.val[2].u32[3];
          v346.val[3] = v120;
          v120.i64[0] = v346.val[2].u32[0];
          v120.i64[1] = v346.val[2].u32[1];
          v346.val[2] = v120;
          v346.val[1] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v346.val[1].i8);
          v120.i64[0] = v346.val[1].u32[2];
          v120.i64[1] = v346.val[1].u32[3];
          uint64_t v157 = v346.val[1].u32[1];
          uint64_t v158 = v346.val[1].u32[0];
          uint64_t v159 = v346.val[2].i64[1];
          uint64_t v160 = v346.val[2].i64[0];
          v346.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v154, (float16x8_t)0), v106));
          v346.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v346.val[0]);
          v346.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v346.val[0].i8);
          v125.i16[0] = *(_WORD *)(v63 + 2 * v158);
          uint64_t v161 = v346.val[0].u32[1];
          v114.i16[0] = *(_WORD *)(v63 + 2 * v346.val[0].u32[0]);
          uint64_t v162 = v346.val[0].u32[3];
          uint64_t v163 = (__int16 *)(v63 + 2 * v346.val[0].u32[2]);
          uint64_t v164 = v346.val[1].u32[1];
          uint64_t v165 = v346.val[1].u32[0];
          uint64_t v166 = v346.val[1].u32[3];
          float16x8_t v167 = (__int16 *)(v63 + 2 * v157);
          uint64_t v168 = v346.val[1].u32[2];
          v346.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v155, (float16x8_t)0), v106));
          v346.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v346.val[0]);
          v346.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v346.val[0].i8);
          v154.i16[0] = *(_WORD *)(v63 + 2 * v346.val[0].u32[0]);
          float16x8_t v169 = (__int16 *)(v63 + 2 * v162);
          float16x8_t v170 = (__int16 *)(v63 + 2 * v346.val[0].u32[1]);
          float16x8_t v171 = (__int16 *)(v63 + 2 * v346.val[0].u32[2]);
          uint64_t v172 = (__int16 *)(v63 + 2 * v346.val[0].u32[3]);
          uint64_t v173 = v346.val[1].u32[1];
          uint64_t v174 = v346.val[1].u32[3];
          v125.i16[1] = *v167;
          uint64_t v175 = v346.val[1].u32[0];
          uint64_t v176 = v346.val[1].u32[2];
          v114.i16[1] = *(_WORD *)(v63 + 2 * v161);
          v346.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v156, (float16x8_t)0), v106));
          v346.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v346.val[0]);
          v346.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v346.val[0].i8);
          v154.i16[1] = *v170;
          v125.i16[2] = *(_WORD *)(v63 + 2 * v120.i64[0]);
          v156.i16[0] = *(_WORD *)(v63 + 2 * v346.val[0].u32[0]);
          v114.i16[2] = *v163;
          v154.i16[2] = *v171;
          v156.i16[1] = *(_WORD *)(v63 + 2 * v346.val[0].u32[1]);
          v125.i16[3] = *(_WORD *)(v63 + 2 * v120.i64[1]);
          int v177 = (__int16 *)(v63 + 2 * v346.val[0].u32[3]);
          v156.i16[2] = *(_WORD *)(v63 + 2 * v346.val[0].u32[2]);
          v114.i16[3] = *v169;
          v346.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v347.val[0], *(short float *)&v310), (float16x8_t)v347.val[1], *(short float *)&v309), (float16x8_t)v347.val[2], v308), (float16x8_t)0), v106));
          v346.val[2] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v346.val[0].i8);
          v154.i16[3] = *v172;
          v156.i16[3] = *v177;
          v155.i16[0] = *(_WORD *)(v63 + 2 * v346.val[2].u32[0]);
          v125.i16[4] = *(_WORD *)(v63 + 2 * v160);
          v114.i16[4] = *(_WORD *)(v63 + 2 * v165);
          int16x8x4_t v178 = (unsigned __int16 *)(v63 + 2 * v166);
          v154.i16[4] = *(_WORD *)(v63 + 2 * v175);
          int16x8x4_t v179 = (__int16 *)(v63 + 2 * v176);
          float v101 = v342;
          v156.i16[4] = *(_WORD *)(v63 + 2 * v346.val[1].u32[0]);
          v125.i16[5] = *(_WORD *)(v63 + 2 * v159);
          v155.i16[1] = *(_WORD *)(v63 + 2 * v346.val[2].u32[1]);
          v114.i16[5] = *(_WORD *)(v63 + 2 * v164);
          v155.i16[2] = *(_WORD *)(v63 + 2 * v346.val[2].u32[2]);
          v154.i16[5] = *(_WORD *)(v63 + 2 * v173);
          float v180 = (__int16 *)(v63 + 2 * v346.val[1].u32[3]);
          v156.i16[5] = *(_WORD *)(v63 + 2 * v346.val[1].u32[1]);
          v346.val[0] = (int16x8_t)vmovl_high_u16((uint16x8_t)v346.val[0]);
          v125.i16[6] = *(_WORD *)(v63 + 2 * v346.val[3].i64[0]);
          float16x8_t v94 = v343;
          v155.i16[3] = *(_WORD *)(v63 + 2 * v346.val[2].u32[3]);
          v114.i16[6] = *(_WORD *)(v63 + 2 * v168);
          v155.i16[4] = *(_WORD *)(v63 + 2 * v346.val[0].u32[0]);
          v154.i16[6] = *v179;
          uint64_t v181 = v346.val[0].u32[3];
          v156.i16[6] = *(_WORD *)(v63 + 2 * v346.val[1].u32[2]);
          v155.i16[5] = *(_WORD *)(v63 + 2 * v346.val[0].u32[1]);
          int16x8_t v83 = (int16x8_t)v110;
          v105.i16[3] = 0;
          v105.i64[1] = 0;
          v155.i16[6] = *(_WORD *)(v63 + 2 * v346.val[0].u32[2]);
          v346.val[1] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v347.val[2], v301), (float16x8_t)v347.val[1], v303), (float16x8_t)v347.val[0], v307), (float16x8_t)0), v106));
          v346.val[0] = (int16x8_t)vmovl_high_u16((uint16x8_t)v346.val[1]);
          v346.val[1] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v346.val[1].i8);
          v346.val[2] = vuzp1q_s16((int16x8_t)v125, (int16x8_t)v114);
          v125.i16[7] = *(_WORD *)(v63 + 2 * v346.val[3].i64[1]);
          v120.i64[0] = v346.val[0].u32[0];
          v120.i64[1] = v346.val[0].u32[1];
          v346.val[3] = v120;
          v120.i64[1] = v346.val[1].u32[3];
          _Q1.i16[7] = (unint64_t)v346.val[1].u32[3] >> 48;
          _Q1.i16[0] = *(_WORD *)(v63 + 2 * v346.val[1].u32[0]);
          uint64_t v182 = v346.val[3].i64[1];
          *(void *)((char *)&v105 - 2) = *v178;
          _Q1.i16[1] = *(_WORD *)(v63 + 2 * v346.val[1].u32[1]);
          uint64_t v183 = v346.val[3].i64[0];
          v346.val[3] = vuzp1q_s16((int16x8_t)v156, (int16x8_t)v155);
          uint64_t result = v299;
          v156.i16[7] = *v180;
          _Q1.i16[2] = *(_WORD *)(v63 + 2 * v346.val[1].u32[2]);
          _Q1.i16[3] = *(_WORD *)(v63 + 2 * v120.i64[1]);
          v155.i16[7] = *(_WORD *)(v63 + 2 * v181);
          _Q1.i16[4] = *(_WORD *)(v63 + 2 * v183);
          _Q6 = (float16x8_t)vuzp2q_s16((int16x8_t)v156, (int16x8_t)v155);
          v347.val[3] = (int16x8_t)v154;
          _Q1.i16[5] = *(_WORD *)(v63 + 2 * v182);
          _Q1.i16[6] = *(_WORD *)(v63 + 2 * v346.val[0].u32[2]);
          v347.val[3].i16[7] = *(_WORD *)(v63 + 2 * v174);
          v347.val[0] = _Q1;
          v347.val[0].i16[7] = *(_WORD *)(v63 + 2 * v346.val[0].u32[3]);
          *v93++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v82, v125, _H8), v114, _H9), (float16x8_t)v347.val[3], _H10), v82), v87)), v298);
          v346.val[0] = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)v346.val[2], (float16x8_t)vuzp2q_s16((int16x8_t)v125, (int16x8_t)v114)), (float16x8_t)v346.val[3]), _Q6);
          *v103++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v82, v156, _H8), v155, _H9), (float16x8_t)v347.val[0], _H10), v82), v87)), v298);
          a6 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v110, v320, (float16x8_t)vzip1q_s16(v346.val[0], v346.val[0])), v319, (float16x8_t)vzip2q_s16(v346.val[0], v346.val[0])), v74, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v154, (int16x8_t)v154), (float16x8_t)vtrn2q_s16(v347.val[3], v347.val[3])), (float16x8_t)vtrn1q_s16(_Q1, _Q1)), (float16x8_t)vtrn2q_s16(v347.val[0], v347.val[0])));
          _Q1.i32[1] = v300.i32[1];
          _Q0 = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(a6, v302), v300)), v298);
          *v102++ = _Q0;
          v100 += 8;
        }
        while (v100 < (int)v299);
        unint64_t v184 = v285;
        uint64_t v27 = v287;
        unint64_t v12 = v288;
        uint32x4_t v92 = v291;
        unint64_t v91 = v292;
        unsigned __int8 v95 = v286;
        float v96 = (float *)&unk_193E7D000;
        float v99 = v289;
        float16x8_t v98 = v290;
      }
      if (v12 > v184)
      {
        uint64_t v185 = 0;
        float v186 = &v94[v284];
        float v187 = &v101[v284];
        do
        {
          uint64_t v188 = v185 * 2 + 2 * v345;
          _Q0.i16[0] = *(const __int16 *)((char *)v94 + v188);
          _Q0.i16[1] = v186[v185];
          uint64_t v189 = v185 * 2 + 2 * BYTE2(v345);
          float32x2_t v190 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q0.i8), v190), 0), v190)));
          _D0.i16[0] = *(_WORD *)(v64 + 2 * _D0.u32[0]);
          _Q1.i16[0] = *(const __int16 *)((char *)v94 + v189);
          __asm { FCVT            S31, H0 }
          _D0.i16[0] = *(_WORD *)(v64 + 2 * _D0.u32[1]);
          __asm { FCVT            S11, H0 }
          _Q1.i16[1] = *(const __int16 *)((char *)v94 + v188 + 8);
          *(int32x2_t *)_Q0.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q1.i8), v190), 0), v190)));
          _H1 = *(_WORD *)(v64 + 2 * _Q0.u32[0]);
          __asm { FCVT            S13, H1 }
          float v196 = fmaxf(_S31, fmaxf(_S11, _S13));
          float v197 = (float)((float)((float)(_S18 * _S11) + (float)(_S17 * _S31)) + (float)(_S19 * _S13))
               + (float)(_S20 * v196);
          float v198 = v96[70];
          float v199 = v198;
          if (v197 <= v198)
          {
            float v199 = (float)((float)((float)(_S18 * _S11) + (float)(_S17 * _S31)) + (float)(_S19 * _S13))
                 + (float)(_S20 * v196);
            if (v197 < 0.0) {
              float v199 = 0.0;
            }
          }
          _Q1.i16[0] = v186[v185 + 4];
          _H0 = *(_WORD *)(v64 + 2 * _Q0.u32[1]);
          _Q1.i16[1] = *(const __int16 *)((char *)v94 + v189 + 8);
          __asm { FCVT            S30, H0 }
          *(int32x2_t *)_Q0.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q1.i8), v190), 0), v190)));
          _Q0.i16[0] = *(_WORD *)(v64 + 2 * _Q0.u32[0]);
          __asm { FCVT            S27, H0 }
          _Q0.i16[0] = *(_WORD *)(v64 + 2 * _Q0.u32[1]);
          __asm { FCVT            S9, H0 }
          float v204 = (float)((float)((float)(_S18 * _S27) + (float)(_S17 * _S30)) + (float)(_S19 * _S9))
               + (float)(_S20 * fmaxf(_S30, fmaxf(_S27, _S9)));
          _Q0.i32[0] = (__int32)v96[70];
          if (v204 <= v198)
          {
            *(float *)_Q0.i32 = v204;
            if (v204 < 0.0) {
              _Q0.i64[0] = 0;
            }
          }
          _Q1.i16[0] = *(const __int16 *)((char *)v101 + v188);
          _Q1.i16[1] = v187[v185];
          *(int32x2_t *)_Q1.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q1.i8), v190), 0), v190)));
          _Q1.i16[0] = *(_WORD *)(v64 + 2 * _Q1.u32[0]);
          a6.i16[0] = *(const __int16 *)((char *)v101 + v189);
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v64 + 2 * _Q1.u32[1]);
          __asm { FCVT            S2, H2 }
          a6.i16[1] = *(const __int16 *)((char *)v101 + v188 + 8);
          int32x2_t v207 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)a6.i8), v190), 0), v190)));
          _H3 = *(_WORD *)(v64 + 2 * v207.u32[0]);
          __asm { FCVT            S3, H3 }
          float v210 = (float)((float)((float)(_S18 * _S2) + (float)(_S17 * *(float *)_Q1.i32)) + (float)(_S19 * _S3))
               + (float)(_S20 * fmaxf(*(float *)_Q1.i32, fmaxf(_S2, _S3)));
          float v211 = v96[70];
          if (v210 <= v198)
          {
            float v211 = v210;
            if (v210 < 0.0) {
              float v211 = 0.0;
            }
          }
          _Q6.i16[0] = v187[v185 + 4];
          _H4 = *(_WORD *)(v64 + 2 * v207.u32[1]);
          _Q6.i16[1] = *(const __int16 *)((char *)v101 + v189 + 8);
          __asm { FCVT            S4, H4 }
          *(int32x2_t *)_Q6.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q6.i8), v190), 0), v190)));
          _Q6.i16[0] = *(_WORD *)(v64 + 2 * _Q6.u32[0]);
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v64 + 2 * _Q6.u32[1]);
          __asm { FCVT            S7, H7 }
          _H12 = *(_WORD *)(v57 + 2 * llroundf(v199));
          __asm { FCVT            S16, H12 }
          float v218 = _S31 * _S16;
          float v219 = _S11 * _S16;
          float v220 = _S13 * _S16;
          _H0 = *(_WORD *)(v57 + 2 * llroundf(*(float *)_Q0.i32));
          __asm { FCVT            S0, H0 }
          float v223 = _S30 * _S0;
          float v224 = _S27 * _S0;
          float v225 = _S9 * _S0;
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * llroundf(v211));
          __asm { FCVT            S5, H0 }
          float v227 = *(float *)_Q1.i32 * _S5;
          float v228 = _S2 * _S5;
          float v229 = _S3 * _S5;
          float v230 = (float)((float)((float)(_S18 * *(float *)_Q6.i32) + (float)(_S17 * _S4)) + (float)(_S19 * _S7))
               + (float)(_S20 * fmaxf(_S4, fmaxf(*(float *)_Q6.i32, _S7)));
          float v231 = v96[70];
          if (v230 <= v198)
          {
            float v231 = v230;
            if (v230 < 0.0) {
              float v231 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v57 + 2 * llroundf(v231));
          __asm { FCVT            S3, H3 }
          float v234 = _S4 * _S3;
          float v235 = *(float *)_Q6.i32 * _S3;
          float v236 = _S7 * _S3;
          _S6 = (float)((float)(v336 * v219) + (float)(v218 * v337)) + (float)(v220 * v335);
          float v238 = (float)((float)(v333 * v219) + (float)(v218 * v334)) + (float)(v220 * v332);
          float v239 = (float)((float)(v330 * v219) + (float)(v218 * v331)) + (float)(v220 * v329);
          float v240 = (float)((float)(v336 * v224) + (float)(v223 * v337)) + (float)(v225 * v335);
          float v241 = (float)((float)(v333 * v224) + (float)(v223 * v334)) + (float)(v225 * v332);
          float v242 = (float)((float)(v330 * v224) + (float)(v223 * v331)) + (float)(v225 * v329);
          float v243 = (float)((float)(v336 * v228) + (float)(v227 * v337)) + (float)(v229 * v335);
          float v244 = (float)((float)(v333 * v228) + (float)(v227 * v334)) + (float)(v229 * v332);
          float v245 = (float)((float)(v330 * v228) + (float)(v227 * v331)) + (float)(v229 * v329);
          _S1 = (float)(v333 * v235) + (float)(v234 * v334);
          _S2 = (float)(v330 * v235) + (float)(v234 * v331);
          _S4 = (float)((float)(v336 * v235) + (float)(v234 * v337)) + (float)(v236 * v335);
          _S5 = _S1 + (float)(v236 * v332);
          float v250 = _S2 + (float)(v236 * v329);
          _H0 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), v198)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v238, 0.0), v198)));
          __asm { FCVT            S27, H1 }
          LOWORD(_S1) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v239, 0.0), v198)));
          LOWORD(_S2) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v240, 0.0), v198)));
          __asm
          {
            FCVT            S30, H1
            FCVT            S31, H2
          }
          LOWORD(_S1) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v241, 0.0), v198)));
          __asm { FCVT            S11, H1 }
          LOWORD(_S1) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v242, 0.0), v198)));
          __asm { FCVT            S9, H1 }
          LOWORD(_S1) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v243, 0.0), v198)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v244, 0.0), v198)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S6) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v245, 0.0), v198)));
          LOWORD(_S4) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), v198)));
          __asm
          {
            FCVT            S12, H6
            FCVT            S4, H4
          }
          LOWORD(_S5) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), v198)));
          unsigned int v262 = llroundf(fminf(fmaxf(v250, 0.0), v198));
          __asm { FCVT            S3, H5 }
          LOWORD(_S5) = *(_WORD *)(v63 + 2 * v262);
          __asm { FCVT            S5, H5 }
          float v265 = (float)((float)((float)(v339 * _S27) + (float)(v340 * _S0)) + (float)(v338 * _S30)) + v56;
          if (v265 < v56) {
            float v266 = v56;
          }
          else {
            float v266 = (float)((float)((float)(v339 * _S27) + (float)(v340 * _S0)) + (float)(v338 * _S30)) + v56;
          }
          BOOL v267 = v265 <= v326;
          float v268 = (float)((float)((float)(v339 * _S11) + (float)(v340 * _S31)) + (float)(v338 * _S9)) + v56;
          if (!v267) {
            float v266 = (float)v36;
          }
          unsigned int v269 = llroundf(v266);
          if (v268 < v56) {
            float v270 = v56;
          }
          else {
            float v270 = (float)((float)((float)(v339 * _S11) + (float)(v340 * _S31)) + (float)(v338 * _S9)) + v56;
          }
          BOOL v267 = v268 <= v326;
          float v271 = (float)((float)((float)(v339 * _S2) + (float)(v340 * _S1)) + (float)(v338 * _S12)) + v56;
          if (!v267) {
            float v270 = (float)v36;
          }
          unsigned int v272 = llroundf(v270);
          if (v271 < v56) {
            float v273 = v56;
          }
          else {
            float v273 = (float)((float)((float)(v339 * _S2) + (float)(v340 * _S1)) + (float)(v338 * _S12)) + v56;
          }
          BOOL v267 = v271 <= v326;
          float v274 = (float)((float)((float)(v339 * _S3) + (float)(v340 * _S4)) + (float)(v338 * _S5)) + v56;
          if (!v267) {
            float v273 = (float)v36;
          }
          unsigned int v275 = llroundf(v273);
          if (v274 < v56) {
            float v276 = v56;
          }
          else {
            float v276 = (float)((float)((float)(v339 * _S3) + (float)(v340 * _S4)) + (float)(v338 * _S5)) + v56;
          }
          if (v274 <= v326) {
            float v277 = v276;
          }
          else {
            float v277 = (float)v36;
          }
          float v278 = (float)((float)(_S0 + _S31) + _S1) + _S4;
          float v279 = (float)((float)(_S27 + _S11) + _S2) + _S3;
          v93->i16[0] = v269 << v95;
          v93->i16[1] = v272 << v95;
          v103->i16[0] = v275 << v95;
          v103->i16[1] = llroundf(v277) << v95;
          float v280 = (float)((float)(_S30 + _S9) + _S12) + _S5;
          float v281 = (float)((float)(v327 + (float)(v278 * *(float *)&v324)) + (float)(v279 * v323))
               + (float)(v280 * *(float *)&v97);
          a6.i64[0] = __PAIR64__(HIDWORD(v324), LODWORD(v58));
          if (v281 <= v58)
          {
            *(float *)a6.i32 = (float)((float)(v327 + (float)(v278 * *(float *)&v324)) + (float)(v279 * v323))
                             + (float)(v280 * *(float *)&v97);
            if (v281 < v341) {
              *(float *)a6.i32 = v341;
            }
          }
          float v282 = (float)((float)(v327 + (float)(v278 * v297)) + (float)(v279 * v296))
               + (float)(v280 * *((float *)&v97 + 1));
          v102->i16[0] = llroundf(*(float *)a6.i32) << v95;
          float v283 = v58;
          _H10 = v321;
          _H9 = v322;
          int16x8_t v83 = v305;
          float16x8_t v82 = v306;
          float16x8_t v87 = v304;
          if (v282 <= v58)
          {
            float v283 = v282;
            if (v282 < v341) {
              float v283 = v341;
            }
          }
          v184 += 2;
          v185 += 8;
          v102->i16[1] = llroundf(v283) << v95;
          float v93 = (uint16x8_t *)((char *)v93 + 4);
          __int8 v103 = (uint16x8_t *)((char *)v103 + 4);
          float v102 = (int16x8_t *)((char *)v102 + 4);
          _S17 = v325;
          _S18 = v328;
          float16x8_t v74 = v318;
        }
        while (v12 > v184);
      }
      float16x8_t v94 = (const __int16 *)&v98[v27];
      uint64_t v29 = v294;
      float v93 = (uint16x8_t *)&v99[v294];
      uint32x4_t v92 = (int16x8_t *)((char *)v92 + v295);
      v91 += 2;
    }
    while (v293 > v91);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf420_GCD(unint64_t result, uint64_t a2, float a3, double _D1, double a5, double a6, double _D4, double a8, double a9, float16x4_t a10)
{
  uint64_t v10 = *(void *)(result + 28);
  unint64_t v11 = 2 * *(unsigned __int8 *)result;
  unint64_t v12 = v10 * a2 / v11;
  unint64_t v13 = (v10 + v10 * a2) / v11;
  if (2 * v13 != 2 * v12)
  {
    unint64_t v14 = 0;
    unint64_t v15 = *(void *)(result + 20);
    uint64_t v16 = *(void *)(result + 44) + 2 * v12;
    unint64_t v17 = 2 * v13 - 2 * v12;
    uint64_t v18 = *(void *)(result + 152);
    uint64_t v19 = *(uint64_t **)(result + 136);
    uint64_t v20 = **(void **)(result + 64);
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    LOWORD(a3) = *(_WORD *)(v18 + 144);
    float v23 = (float)LODWORD(a3);
    LOWORD(_D1) = *(_WORD *)(v18 + 146);
    float v24 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v18 + 148);
    float v25 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v18 + 150);
    *(float *)&_D1 = (float)LODWORD(_D1);
    float v180 = *(float *)&_D1;
    LOWORD(_D1) = *(_WORD *)(v18 + 152);
    float v176 = *(float *)(v18 + 40);
    float v177 = *(float *)(v18 + 36);
    float v174 = *(float *)(v18 + 48) * 0.25;
    float v175 = *(float *)(v18 + 44);
    float v172 = *(float *)(v18 + 56) * 0.25;
    float v173 = *(float *)(v18 + 52) * 0.25;
    float v170 = *(float *)(v18 + 64) * 0.25;
    float v171 = *(float *)(v18 + 60) * 0.25;
    float v168 = *(float *)(v18 + 68) * 0.25;
    float v169 = *(float *)(v18 + 72);
    float v166 = *(float *)(v18 + 80);
    float v167 = *(float *)(v18 + 76);
    float v164 = *(float *)(v18 + 88);
    float v165 = *(float *)(v18 + 84);
    float v162 = *(float *)(v18 + 96);
    float v163 = *(float *)(v18 + 92);
    float v26 = *(float *)(v18 + 108);
    float v160 = *(float *)(v18 + 104);
    float v161 = *(float *)(v18 + 100);
    uint64_t v27 = v18 + 164;
    uint64_t v28 = v18 + 16548;
    uint64_t v29 = v18 + 32932;
    float v30 = *(float *)(v18 + 112);
    float v31 = *(float *)(v18 + 116);
    float v32 = *(float *)(v18 + 120);
    uint64_t v33 = *(void *)(result + 112);
    unint64_t v34 = *(void *)(result + 104) * a2 / v11;
    uint64_t v35 = *(void **)(result + 128);
    uint64_t v36 = *(void *)(result + 120) + 2 * v34;
    uint64_t v37 = **(void **)(result + 56) + v20 * v16 + 8 * *(void *)(result + 36);
    uint64_t v38 = v35[1];
    uint64_t v39 = (char *)(*v35 + v36 * v21 + 2 * v33);
    unsigned int v40 = *(unsigned __int8 *)(v18 + 132);
    if (v40 >= 0x11) {
      char v41 = 0;
    }
    else {
      char v41 = 16 - v40;
    }
    uint64_t result = *(unsigned __int8 *)(v18 + 156);
    if (v36 >= 0) {
      uint64_t v42 = v36;
    }
    else {
      uint64_t v42 = v36 + 1;
    }
    uint64_t v43 = v38 + (v42 >> 1) * v22;
    uint64_t v44 = *(unsigned __int8 *)(v18 + 155);
    uint64_t v45 = *(unsigned __int8 *)(v18 + 154);
    uint64_t v46 = v43 + 2 * v33;
    char v47 = v41;
    float32x2_t v48 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    float v178 = (float)LODWORD(_D1);
    float v179 = v24;
    float v158 = v26;
    float v159 = v30;
    float v157 = v31;
    do
    {
      float v49 = &v39[v21];
      uint64_t v50 = v37 + v20;
      if (v15)
      {
        unint64_t v51 = 0;
        uint64_t v52 = v37 + v20;
        float32x4_t v53 = &v39[v21];
        do
        {
          LOWORD(_D1) = *(_WORD *)(v37 + 2 * v45);
          LOWORD(a6) = *(_WORD *)(v37 + 2 * result);
          uint64_t v54 = v37 + 8;
          WORD1(_D1) = *(_WORD *)(v37 + 2 * v44);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D1), v48), 0), v48)));
          _D1.i16[0] = *(_WORD *)(v27 + 2 * _D1.u32[0]);
          __asm { FCVT            S15, H1 }
          _D1.i16[0] = *(_WORD *)(v27 + 2 * _D1.u32[1]);
          __asm { FCVT            S16, H1 }
          WORD1(a6) = *(_WORD *)(v37 + 8 + 2 * v45);
          int32x2_t v62 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&a6), v48), 0), v48)));
          _H3 = *(_WORD *)(v27 + 2 * v62.u32[0]);
          __asm { FCVT            S17, H3 }
          float v65 = fmaxf(_S15, fmaxf(_S16, _S17));
          float v66 = (float)((float)((float)(v30 * _S16) + (float)(v26 * _S15)) + (float)(v31 * _S17)) + (float)(v32 * v65);
          float v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            float v67 = (float)((float)((float)(v30 * _S16) + (float)(v26 * _S15)) + (float)(v31 * _S17)) + (float)(v32 * v65);
            if (v66 < 0.0) {
              float v67 = 0.0;
            }
          }
          LOWORD(a6) = *(_WORD *)(v54 + 2 * v44);
          _H1 = *(_WORD *)(v27 + 2 * v62.u32[1]);
          WORD1(a6) = *(_WORD *)(v54 + 2 * result);
          __asm { FCVT            S19, H1 }
          _D1 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&a6), v48), 0), v48)));
          _D1.i16[0] = *(_WORD *)(v27 + 2 * _D1.u32[0]);
          __asm { FCVT            S20, H1 }
          _D1.i16[0] = *(_WORD *)(v27 + 2 * _D1.u32[1]);
          __asm { FCVT            S22, H1 }
          *(float *)_D1.i32 = (float)((float)((float)(v30 * _S20) + (float)(v26 * _S19)) + (float)(v31 * _S22))
                            + (float)(v32 * fmaxf(_S19, fmaxf(_S20, _S22)));
          LODWORD(a6) = 1174403072;
          if (*(float *)_D1.i32 <= 8191.0)
          {
            LODWORD(a6) = _D1.i32[0];
            if (*(float *)_D1.i32 < 0.0) {
              a6 = 0.0;
            }
          }
          _D1.i16[0] = *(_WORD *)(v52 + 2 * v45);
          LOWORD(_D4) = *(_WORD *)(v52 + 2 * result);
          uint64_t v73 = v52 + 8;
          _D1.i16[1] = *(_WORD *)(v52 + 2 * v44);
          _D1 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D1), v48), 0), v48))));
          LOWORD(_D1) = *(_WORD *)(v27 + 2 * LODWORD(_D1));
          __asm { FCVT            S1, H1 }
          _H5 = *(_WORD *)(v27 + 2 * HIDWORD(_D1));
          __asm { FCVT            S12, H5 }
          WORD1(_D4) = *(_WORD *)(v52 + 8 + 2 * v45);
          int32x2_t v76 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D4), v48), 0), v48)));
          _H5 = *(_WORD *)(v27 + 2 * v76.u32[0]);
          __asm { FCVT            S5, H5 }
          float v79 = fmaxf(*(float *)&_D1, fmaxf(_S12, _S5));
          float v80 = (float)((float)((float)(v30 * _S12) + (float)(v26 * *(float *)&_D1)) + (float)(v31 * _S5))
              + (float)(v32 * v79);
          float v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            float v81 = (float)((float)((float)(v30 * _S12) + (float)(v26 * *(float *)&_D1)) + (float)(v31 * _S5))
                + (float)(v32 * v79);
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          a10.i16[0] = *(_WORD *)(v73 + 2 * v44);
          _H4 = *(_WORD *)(v27 + 2 * v76.u32[1]);
          a10.i16[1] = *(_WORD *)(v73 + 2 * result);
          __asm { FCVT            S6, H4 }
          _D4 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(a10), v48), 0), v48))));
          LOWORD(_D4) = *(_WORD *)(v27 + 2 * LODWORD(_D4));
          __asm { FCVT            S23, H4 }
          LOWORD(_D4) = *(_WORD *)(v27 + 2 * HIDWORD(_D4));
          __asm { FCVT            S24, H4 }
          LOWORD(_D4) = *(_WORD *)(v28 + 2 * llroundf(v67));
          __asm { FCVT            S7, H4 }
          float v87 = _S15 * _S7;
          *(float *)&_D4 = _S16 * _S7;
          float v88 = _S17 * _S7;
          _H3 = *(_WORD *)(v28 + 2 * llroundf(*(float *)&a6));
          __asm { FCVT            S3, H3 }
          float v91 = _S19 * _S3;
          float v92 = _S20 * _S3;
          float v93 = _S22 * _S3;
          LOWORD(_S3) = *(_WORD *)(v28 + 2 * llroundf(v81));
          __asm { FCVT            S3, H3 }
          float v95 = *(float *)&_D1 * _S3;
          float v96 = _S12 * _S3;
          float v97 = _S5 * _S3;
          float v98 = (float)((float)((float)(v30 * _S23) + (float)(v26 * _S6)) + (float)(v31 * _S24))
              + (float)(v32 * fmaxf(_S6, fmaxf(_S23, _S24)));
          float v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          _H5 = *(_WORD *)(v28 + 2 * llroundf(v99));
          __asm { FCVT            S5, H5 }
          _S6 = _S6 * _S5;
          float v103 = _S23 * _S5;
          float v104 = _S24 * _S5;
          float v105 = (float)((float)(v167 * *(float *)&_D4) + (float)(v87 * v169)) + (float)(v88 * v166);
          float v106 = (float)((float)(v164 * *(float *)&_D4) + (float)(v87 * v165)) + (float)(v88 * v163);
          _S4 = (float)((float)(v161 * *(float *)&_D4) + (float)(v87 * v162)) + (float)(v88 * v160);
          float v108 = (float)((float)(v167 * v92) + (float)(v91 * v169)) + (float)(v93 * v166);
          float v109 = (float)((float)(v164 * v92) + (float)(v91 * v165)) + (float)(v93 * v163);
          float v110 = (float)((float)(v161 * v92) + (float)(v91 * v162)) + (float)(v93 * v160);
          float v111 = (float)((float)(v167 * v96) + (float)(v95 * v169)) + (float)(v97 * v166);
          float v112 = (float)((float)(v164 * v96) + (float)(v95 * v165)) + (float)(v97 * v163);
          float v113 = (float)((float)(v161 * v96) + (float)(v95 * v162)) + (float)(v97 * v160);
          float v114 = (float)((float)(v167 * v103) + (float)(_S6 * v169)) + (float)(v104 * v166);
          float v115 = (float)((float)(v164 * v103) + (float)(_S6 * v165)) + (float)(v104 * v163);
          float v116 = (float)((float)(v161 * v103) + (float)(_S6 * v162)) + (float)(v104 * v160);
          _H1 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          __asm { FCVT            S16, H1 }
          _H1 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          __asm { FCVT            S3, H1 }
          _H1 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v108, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H1
            FCVT            S18, H4
          }
          _H1 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          __asm { FCVT            S20, H1 }
          _H1 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S19, H1 }
          _H1 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S4) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          __asm { FCVT            S22, H4 }
          LOWORD(_S4) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H4
            FCVT            S4, H6
          }
          LOWORD(_S6) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          unsigned int v133 = llroundf(fminf(fmaxf(v116, 0.0), 8191.0));
          __asm { FCVT            S5, H6 }
          LOWORD(_S6) = *(_WORD *)(v29 + 2 * v133);
          __asm { FCVT            S6, H6 }
          float v136 = (float)((float)((float)(v176 * _S3) + (float)(v177 * _S16)) + (float)(v175 * _S17)) + v23;
          if (v136 < v23) {
            float v137 = v23;
          }
          else {
            float v137 = (float)((float)((float)(v176 * _S3) + (float)(v177 * _S16)) + (float)(v175 * _S17)) + v23;
          }
          BOOL v138 = v136 <= v25;
          float v139 = (float)((float)((float)(v176 * _S20) + (float)(v177 * _S18)) + (float)(v175 * _S19)) + v23;
          if (!v138) {
            float v137 = v25;
          }
          unsigned int v140 = llroundf(v137);
          if (v139 < v23) {
            float v141 = v23;
          }
          else {
            float v141 = (float)((float)((float)(v176 * _S20) + (float)(v177 * _S18)) + (float)(v175 * _S19)) + v23;
          }
          BOOL v138 = v139 <= v25;
          float v142 = (float)((float)((float)(v176 * _S22) + (float)(v177 * _S1)) + (float)(v175 * _S12)) + v23;
          if (!v138) {
            float v141 = v25;
          }
          unsigned int v143 = llroundf(v141);
          if (v142 < v23) {
            float v144 = v23;
          }
          else {
            float v144 = (float)((float)((float)(v176 * _S22) + (float)(v177 * _S1)) + (float)(v175 * _S12)) + v23;
          }
          BOOL v138 = v142 <= v25;
          float v145 = (float)((float)((float)(v176 * _S5) + (float)(v177 * _S4)) + (float)(v175 * _S6)) + v23;
          if (!v138) {
            float v144 = v25;
          }
          unsigned int v146 = llroundf(v144);
          if (v145 < v23) {
            float v147 = v23;
          }
          else {
            float v147 = (float)((float)((float)(v176 * _S5) + (float)(v177 * _S4)) + (float)(v175 * _S6)) + v23;
          }
          if (v145 <= v25) {
            float v148 = v147;
          }
          else {
            float v148 = v25;
          }
          float v149 = (float)((float)(_S16 + _S18) + _S1) + _S4;
          float v150 = (float)((float)(_S3 + _S20) + _S22) + _S5;
          *(_WORD *)uint64_t v39 = v140 << v47;
          *((_WORD *)v39 + 1) = v143 << v47;
          *(_WORD *)float32x4_t v53 = v146 << v47;
          *((_WORD *)v53 + 1) = llroundf(v148) << v47;
          float v151 = (float)((float)(_S17 + _S19) + _S12) + _S6;
          float v152 = (float)((float)(v179 + (float)(v149 * v174)) + (float)(v150 * v173)) + (float)(v151 * v172);
          float v153 = v178;
          if (v152 <= v178)
          {
            float v153 = (float)((float)(v179 + (float)(v149 * v174)) + (float)(v150 * v173)) + (float)(v151 * v172);
            if (v152 < v180) {
              float v153 = v180;
            }
          }
          float16x8_t v154 = (_WORD *)(v46 + 2 * v51);
          float v155 = (float)((float)(v179 + (float)(v149 * v171)) + (float)(v150 * v170)) + (float)(v151 * v168);
          *float16x8_t v154 = llroundf(v153) << v47;
          float v156 = v178;
          if (v155 <= v178)
          {
            float v156 = v155;
            if (v155 < v180) {
              float v156 = v180;
            }
          }
          v37 += 16;
          v52 += 16;
          v39 += 4;
          v53 += 4;
          v154[1] = llroundf(v156) << v47;
          v51 += 2;
          float v26 = v158;
          float v30 = v159;
          float v31 = v157;
        }
        while (v15 > v51);
      }
      uint64_t v37 = v50 + v20;
      uint64_t v39 = &v49[v21];
      v46 += v22;
      v14 += 2;
    }
    while (v17 > v14);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

const __int16 *vt_Copy_RGhA_TRC_Mat_TRC_xf420_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, int16x8_t a5, double a6, float32x4_t a7, double a8, uint8x8_t a9)
{
  uint64_t v12 = 0;
  unint64_t v13 = *(void *)(a1 + 20);
  uint64_t v14 = *(void *)(a1 + 36);
  uint64_t v15 = *(void *)(a1 + 44);
  uint64_t v16 = *(void *)(a1 + 28);
  unint64_t v17 = 2 * *a1;
  uint64_t v18 = 2 * (v16 * a2 / v17);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = 2 * ((v16 + v16 * a2) / v17);
  uint64_t v21 = v15 + v20;
  uint64_t v22 = *((void *)a1 + 14);
  unint64_t v23 = *((void *)a1 + 13) * a2;
  uint64_t v24 = *((void *)a1 + 19);
  uint64_t v26 = *((void *)a1 + 15);
  float v25 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v27 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v28 = **((void **)a1 + 8);
  uint64_t result = (const __int16 *)**((void **)a1 + 7);
  uint64_t v31 = *v27;
  uint64_t v30 = v27[1];
  uint64_t v32 = *v25;
  uint64_t v33 = v25[1];
  a9.i32[0] = *(_DWORD *)(v24 + 154);
  __int32 v302 = a9.i32[0];
  unsigned int v34 = *(unsigned __int16 *)(v24 + 144);
  unsigned int v35 = *(unsigned __int8 *)(v24 + 132);
  unsigned int v36 = *(unsigned __int16 *)(v24 + 146);
  unsigned int v37 = *(unsigned __int16 *)(v24 + 148);
  unsigned int v38 = *(unsigned __int16 *)(v24 + 150);
  unsigned int v39 = *(unsigned __int16 *)(v24 + 152);
  float v298 = *(float *)(v24 + 36);
  float v297 = *(float *)(v24 + 40);
  v40.i32[0] = *(_DWORD *)(v24 + 48);
  float v296 = *(float *)(v24 + 44);
  uint64_t v41 = v26 + 2 * (v23 / v17);
  uint64_t v42 = v28 * v19;
  _D0.i32[0] = *(_DWORD *)(v24 + 52);
  v44.i32[0] = *(_DWORD *)(v24 + 56);
  __int32 v45 = *(_DWORD *)(v24 + 60);
  v11.i32[0] = *(_DWORD *)(v24 + 64);
  if (v41 >= 0) {
    uint64_t v46 = v41;
  }
  else {
    uint64_t v46 = v41 + 1;
  }
  a5.i32[0] = *(_DWORD *)(v24 + 68);
  float v295 = *(float *)(v24 + 72);
  float v294 = *(float *)(v24 + 76);
  float v47 = *(float *)(v24 + 80);
  float v48 = *(float *)(v24 + 84);
  uint64_t v268 = v30;
  uint64_t v49 = v30 * (v46 >> 1);
  uint16x8_t v50 = vmovl_u8(a9);
  _S7 = *(float *)(v24 + 88);
  _S16 = *(float *)(v24 + 92);
  _S17 = *(float *)(v24 + 96);
  _S18 = *(float *)(v24 + 100);
  _S19 = *(float *)(v24 + 104);
  memset(v301, 0, sizeof(v301));
  do
  {
    unsigned int v56 = 0;
    char v57 = *((unsigned char *)&v302 + v12);
    do
    {
      *((unsigned char *)v301 + 8 * (((_BYTE)v12 + (v56 >> 3)) & 0x1F) + v56) = v57 + 4 * v56;
      ++v56;
    }
    while (v56 != 8);
    ++v12;
  }
  while (v12 != 4);
  float v269 = v48;
  float v270 = v47;
  if (v20 != v18)
  {
    unint64_t v267 = v21 - v19;
    uint64_t v58 = v24 + 16548;
    uint64_t v59 = v24 + 164;
    float v60 = (float)v34;
    float v300 = (float)v36;
    float v61 = (float)v37;
    float v299 = (float)v38;
    float v62 = (float)v39;
    v40.i32[1] = v45;
    __asm { FMOV            V3.2S, #0.25 }
    *(float32x2_t *)a7.f32 = vmul_f32(v40, *(float32x2_t *)_Q3.i8);
    _D0.i32[1] = v11.i32[0];
    v44.i32[1] = a5.i32[0];
    *(float32x2_t *)a5.i8 = vmul_f32(_D0, *(float32x2_t *)_Q3.i8);
    *(float32x2_t *)v11.f32 = vmul_f32(v44, *(float32x2_t *)_Q3.i8);
    _D0.f32[0] = v298;
    __asm { FCVT            H0, S0 }
    float32x2_t v290 = _D0;
    *(float *)_Q0.i32 = v297;
    __asm { FCVT            H3, S0 }
    int32x4_t v68 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a7), 0);
    *(float *)_Q0.i32 = v296;
    __asm { FCVT            H8, S0 }
    int32x4_t v70 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)a5), 0);
    int16x4_t v71 = (int16x4_t)vcvt_f16_f32(v11);
    float16x8_t v72 = (float16x8_t)vdupq_lane_s32((int32x2_t)v71, 0);
    *(float *)_Q0.i32 = v295;
    __asm { FCVT            H9, S0 }
    *(float *)_Q0.i32 = v294;
    __asm { FCVT            H0, S0 }
    _S1 = v270;
    __asm { FCVT            H10, S1 }
    _S1 = v269;
    __asm
    {
      FCVT            H11, S1
      FCVT            H12, S7
      FCVT            H13, S16
      FCVT            H14, S17
      FCVT            H15, S18
      FCVT            H1, S19
    }
    short float v278 = *(short float *)&_S1;
    *(short float *)v71.i16 = (short float)v34;
    float16x8_t v83 = (float16x8_t)vdupq_lane_s16(v71, 0);
    *(short float *)v71.i16 = (short float)v36;
    float16x8_t v84 = (float16x8_t)vdupq_lane_s16(v71, 0);
    *(short float *)v71.i16 = (short float)v37;
    int16x8_t v85 = vdupq_lane_s16(v71, 0);
    *(short float *)v71.i16 = (short float)v38;
    int16x8_t v86 = vdupq_lane_s16(v71, 0);
    *(short float *)v71.i16 = (short float)v39;
    int16x8_t v87 = vdupq_lane_s16(v71, 0);
    unsigned __int8 v88 = 16 - v35;
    if (v35 >= 0x11) {
      unsigned __int8 v88 = 0;
    }
    uint64_t v89 = v33 + v49 + 2 * v22;
    uint64_t v90 = v32 + v31 * v41;
    unint64_t v91 = 0;
    float v92 = (uint16x8_t *)(v90 + 2 * v22);
    uint64_t result = (const __int16 *)((char *)result + 8 * v14 + v42);
    unsigned __int8 v93 = v88;
    uint16x8_t v255 = (uint16x8_t)vdupq_n_s16(v88);
    unint64_t v292 = a5.i64[0];
    float v293 = a7.f32[0];
    float v272 = *(float *)&a5.i32[1];
    float v273 = a7.f32[1];
    uint64_t v291 = v11.i64[0];
    float v271 = v11.f32[1];
    a5.i32[1] = v70.i32[1];
    float16x8_t v94 = (float16x8_t)v68;
    uint64_t v253 = v50.u16[1];
    unint64_t v254 = v13 & 0xFFFFFFF8;
    float v95 = (float *)&unk_193E7D000;
    v96.i64[0] = 0x9000900090009000;
    v96.i64[1] = 0x9000900090009000;
    short float v288 = _H8;
    uint64_t v289 = _Q3.i64[0];
    float16x8_t v265 = v72;
    int32x4_t v266 = v68;
    short float v286 = _H9;
    float16x8_t v287 = (float16x8_t)v70;
    short float v284 = _H10;
    short float v285 = *(short float *)_Q0.i16;
    short float v282 = _H12;
    short float v283 = _H11;
    short float v280 = _H14;
    short float v281 = _H13;
    short float v279 = _H15;
    float16x8_t v264 = v84;
    float16x8_t v276 = (float16x8_t)v86;
    float16x8_t v277 = (float16x8_t)v85;
    float16x8_t v275 = (float16x8_t)v87;
    uint64_t v258 = v28;
    unint64_t v259 = v13;
    uint64_t v257 = v31;
    int v274 = v13 - 7;
    unsigned __int8 v256 = v88;
    float v251 = _S16;
    float v252 = _S7;
    do
    {
      float v97 = (char *)result + v28;
      float v98 = &v92->i8[v31];
      if ((int)v13 < 8)
      {
        unint64_t v182 = 0;
        float v102 = (uint16x8_t *)v89;
        float v101 = (uint16x8_t *)((char *)v92 + v31);
        int v100 = (const __int16 *)((char *)result + v28);
        float v184 = v269;
        float v183 = v270;
      }
      else
      {
        uint64_t v262 = v89;
        unint64_t v263 = v91;
        int v99 = 0;
        float v260 = &v92->i8[v31];
        float v261 = (char *)result + v28;
        int v100 = (const __int16 *)((char *)result + v28);
        float v101 = (uint16x8_t *)((char *)v92 + v31);
        float v102 = (uint16x8_t *)v89;
        v103.i64[0] = 0x7000700070007000;
        v103.i64[1] = 0x7000700070007000;
        do
        {
          *(int16x8x4_t *)(&v9 - 6) = vld4q_s16(result);
          result += 32;
          float16x8_t v104 = v94;
          int16x8x4_t v303 = vld4q_s16(v100);
          v100 += 32;
          float16x8_t v106 = vmulq_f16(v105, v103);
          float16x8_t v109 = vmulq_f16((float16x8_t)v303.val[0], v103);
          float16x8_t v110 = vmulq_f16((float16x8_t)v303.val[1], v103);
          float16x8_t v111 = vmulq_f16((float16x8_t)v303.val[2], v103);
          v303.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v106, (float16x8_t)0), v96));
          v303.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v303.val[0]);
          v112.i64[0] = v303.val[1].u32[2];
          v112.i64[1] = v303.val[1].u32[3];
          v303.val[2] = v112;
          v112.i64[0] = v303.val[1].u32[0];
          v112.i64[1] = v303.val[1].u32[1];
          v303.val[1] = v112;
          v303.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v303.val[0].i8);
          v112.i64[0] = v303.val[0].u32[2];
          v112.i64[1] = v303.val[0].u32[3];
          v303.val[3] = v112;
          v112.i64[1] = v303.val[0].u32[1];
          v106.i16[0] = *(_WORD *)(v59 + 2 * v303.val[0].u32[0]);
          uint64_t v113 = v303.val[1].i64[1];
          uint64_t v114 = v303.val[2].i64[1];
          float v115 = (__int16 *)(v59 + 2 * v303.val[1].i64[0]);
          float v116 = (__int16 *)(v59 + 2 * v303.val[2].i64[0]);
          v303.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v107, v103), (float16x8_t)0), v96));
          float v117 = (__int16 *)(v59 + 2 * v112.i64[1]);
          v303.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v303.val[0]);
          v112.i64[0] = v303.val[1].u32[2];
          v112.i64[1] = v303.val[1].u32[3];
          v303.val[2] = v112;
          v112.i64[0] = v303.val[1].u32[0];
          v112.i64[1] = v303.val[1].u32[1];
          v303.val[1] = v112;
          v303.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v303.val[0].i8);
          _Q13.i16[0] = *(_WORD *)(v59 + 2 * v303.val[0].u32[0]);
          uint64_t v118 = (__int16 *)(v59 + 2 * v113);
          v112.i64[1] = v303.val[0].u32[3];
          float v119 = (__int16 *)(v59 + 2 * v303.val[0].u32[2]);
          int16x8_t v120 = (__int16 *)(v59 + 2 * v114);
          uint64_t v121 = v303.val[1].i64[1];
          float v122 = (__int16 *)(v59 + 2 * v303.val[0].u32[1]);
          float v123 = (__int16 *)(v59 + 2 * v303.val[1].i64[0]);
          v303.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v108, v103), (float16x8_t)0), v96));
          v303.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v303.val[0]);
          v303.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v303.val[0].i8);
          float v124 = (__int16 *)(v59 + 2 * v121);
          v125.i16[0] = *(_WORD *)(v59 + 2 * v303.val[0].u32[0]);
          float v126 = (__int16 *)(v59 + 2 * v303.val[0].u32[1]);
          float v127 = (__int16 *)(v59 + 2 * v303.val[0].u32[2]);
          float v128 = (__int16 *)(v59 + 2 * v303.val[1].u32[0]);
          float v129 = (__int16 *)(v59 + 2 * v303.val[0].u32[3]);
          float v130 = (__int16 *)(v59 + 2 * v303.val[1].u32[1]);
          float v131 = (__int16 *)(v59 + 2 * v303.val[1].u32[2]);
          float v132 = (__int16 *)(v59 + 2 * v303.val[1].u32[3]);
          v303.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v109, (float16x8_t)0), v96));
          v303.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v303.val[0]);
          v106.i16[1] = *v117;
          v303.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v303.val[0].i8);
          _Q13.i16[1] = *v122;
          v125.i16[1] = *v126;
          v107.i16[0] = *(_WORD *)(v59 + 2 * v303.val[0].u32[0]);
          v106.i16[2] = *(_WORD *)(v59 + 2 * v303.val[3].i64[0]);
          unsigned int v133 = (__int16 *)(v59 + 2 * v303.val[0].u32[3]);
          _Q13.i16[2] = *v119;
          uint64_t v134 = (__int16 *)(v59 + 2 * v303.val[1].u32[0]);
          v125.i16[2] = *v127;
          v107.i16[1] = *(_WORD *)(v59 + 2 * v303.val[0].u32[1]);
          v106.i16[3] = *(_WORD *)(v59 + 2 * v303.val[3].i64[1]);
          uint64_t v135 = (__int16 *)(v59 + 2 * v303.val[1].u32[1]);
          float v136 = (__int16 *)(v59 + 2 * v303.val[1].u32[2]);
          float v137 = (__int16 *)(v59 + 2 * v303.val[1].u32[3]);
          _Q13.i16[3] = *(_WORD *)(v59 + 2 * v112.i64[1]);
          v107.i16[2] = *(_WORD *)(v59 + 2 * v303.val[0].u32[2]);
          v125.i16[3] = *v129;
          v303.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v110, (float16x8_t)0), v96));
          v303.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v303.val[0]);
          v107.i16[3] = *v133;
          v303.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v303.val[0].i8);
          v106.i16[4] = *v115;
          v108.i16[0] = *(_WORD *)(v59 + 2 * v303.val[0].u32[0]);
          _Q13.i16[4] = *v123;
          v125.i16[4] = *v128;
          v107.i16[4] = *v134;
          v106.i16[5] = *v118;
          BOOL v138 = (__int16 *)(v59 + 2 * v303.val[1].u32[2]);
          float v139 = (__int16 *)(v59 + 2 * v303.val[1].u32[3]);
          _Q13.i16[5] = *v124;
          v108.i16[1] = *(_WORD *)(v59 + 2 * v303.val[0].u32[1]);
          v108.i16[2] = *(_WORD *)(v59 + 2 * v303.val[0].u32[2]);
          v125.i16[5] = *v130;
          v108.i16[3] = *(_WORD *)(v59 + 2 * v303.val[0].u32[3]);
          v108.i16[4] = *(_WORD *)(v59 + 2 * v303.val[1].u32[0]);
          v107.i16[5] = *v135;
          v108.i16[5] = *(_WORD *)(v59 + 2 * v303.val[1].u32[1]);
          v106.i16[6] = *v116;
          v303.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v111, (float16x8_t)0), v96));
          v303.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v303.val[0]);
          _Q13.i16[6] = *(_WORD *)(v59 + 2 * v303.val[2].i64[0]);
          v303.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v303.val[0].i8);
          v125.i16[6] = *v131;
          v303.val[3].i16[0] = *(_WORD *)(v59 + 2 * v303.val[0].u32[0]);
          v107.i16[6] = *v136;
          v108.i16[6] = *v138;
          v106.i16[7] = *v120;
          _Q13.i16[7] = *(_WORD *)(v59 + 2 * v303.val[2].i64[1]);
          v125.i16[7] = *v132;
          v303.val[3].i16[1] = *(_WORD *)(v59 + 2 * v303.val[0].u32[1]);
          v303.val[3].i16[2] = *(_WORD *)(v59 + 2 * v303.val[0].u32[2]);
          v107.i16[7] = *v137;
          v303.val[3].i16[3] = *(_WORD *)(v59 + 2 * v303.val[0].u32[3]);
          v303.val[3].i16[4] = *(_WORD *)(v59 + 2 * v303.val[1].u32[0]);
          v108.i16[7] = *v139;
          v303.val[3].i16[5] = *(_WORD *)(v59 + 2 * v303.val[1].u32[1]);
          v303.val[3].i16[6] = *(_WORD *)(v59 + 2 * v303.val[1].u32[2]);
          v303.val[3].i16[7] = *(_WORD *)(v59 + 2 * v303.val[1].u32[3]);
          float16x8_t v140 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v106, v283), _Q13, v282), v125, v281);
          float16x8_t v141 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v125, v278), _Q13, v279), v106, v280);
          float16x8_t v142 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v107, v286), v108, v285), (float16x8_t)v303.val[3], v284);
          float16x8_t v143 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v303.val[3], v278), v108, v279), v107, v280);
          v303.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v106, v286), _Q13, v285), v125, v284), (float16x8_t)0), v96));
          v303.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v303.val[0]);
          v303.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v303.val[0].i8);
          uint64_t v144 = v303.val[0].u32[1];
          uint64_t v145 = v303.val[0].u32[0];
          uint64_t v146 = v303.val[0].u32[3];
          uint64_t v147 = v303.val[0].u32[2];
          uint64_t v148 = v303.val[1].u32[1];
          uint64_t v149 = v303.val[1].u32[0];
          uint64_t v150 = v303.val[1].u32[3];
          v303.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v140, (float16x8_t)0), v96));
          uint64_t v151 = v303.val[1].u32[2];
          v303.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v303.val[0]);
          v303.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v303.val[0].i8);
          v106.i16[0] = *(_WORD *)(v58 + 2 * v145);
          uint64_t v152 = v303.val[0].u32[1];
          v140.i16[0] = *(_WORD *)(v58 + 2 * v303.val[0].u32[0]);
          uint64_t v153 = v303.val[0].u32[3];
          float16x8_t v154 = (__int16 *)(v58 + 2 * v303.val[0].u32[2]);
          uint64_t v155 = v303.val[1].u32[1];
          uint64_t v156 = v303.val[1].u32[0];
          uint64_t v157 = v303.val[1].u32[3];
          float v158 = (__int16 *)(v58 + 2 * v144);
          uint64_t v159 = v303.val[1].u32[2];
          v303.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v141, (float16x8_t)0), v96));
          v303.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v303.val[0]);
          float v160 = (__int16 *)(v58 + 2 * v146);
          v303.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v303.val[0].i8);
          float v161 = (__int16 *)(v58 + 2 * v152);
          v141.i16[0] = *(_WORD *)(v58 + 2 * v303.val[0].u32[0]);
          float v162 = (__int16 *)(v58 + 2 * v153);
          float v163 = (__int16 *)(v58 + 2 * v303.val[0].u32[1]);
          float v164 = (__int16 *)(v58 + 2 * v303.val[0].u32[2]);
          float v165 = (__int16 *)(v58 + 2 * v303.val[0].u32[3]);
          uint64_t v166 = v303.val[1].u32[1];
          uint64_t v167 = v303.val[1].u32[3];
          v106.i16[1] = *v158;
          uint64_t v168 = v303.val[1].u32[0];
          uint64_t v169 = v303.val[1].u32[2];
          v140.i16[1] = *v161;
          v303.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v142, (float16x8_t)0), v96));
          v303.val[1] = (int16x8_t)vmovl_high_u16((uint16x8_t)v303.val[0]);
          v303.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v303.val[0].i8);
          v141.i16[1] = *v163;
          v106.i16[2] = *(_WORD *)(v58 + 2 * v147);
          v142.i16[0] = *(_WORD *)(v58 + 2 * v303.val[0].u32[0]);
          v140.i16[2] = *v154;
          v141.i16[2] = *v164;
          v142.i16[1] = *(_WORD *)(v58 + 2 * v303.val[0].u32[1]);
          v106.i16[3] = *v160;
          float v170 = (__int16 *)(v58 + 2 * v303.val[0].u32[3]);
          v142.i16[2] = *(_WORD *)(v58 + 2 * v303.val[0].u32[2]);
          v140.i16[3] = *v162;
          v303.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v107, v283), v108, v282), (float16x8_t)v303.val[3], v281), (float16x8_t)0), v96));
          v303.val[2] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v303.val[0].i8);
          v141.i16[3] = *v165;
          v142.i16[3] = *v170;
          v107.i16[0] = *(_WORD *)(v58 + 2 * v303.val[2].u32[0]);
          v106.i16[4] = *(_WORD *)(v58 + 2 * v149);
          v140.i16[4] = *(_WORD *)(v58 + 2 * v156);
          v141.i16[4] = *(_WORD *)(v58 + 2 * v168);
          v142.i16[4] = *(_WORD *)(v58 + 2 * v303.val[1].u32[0]);
          v106.i16[5] = *(_WORD *)(v58 + 2 * v148);
          v107.i16[1] = *(_WORD *)(v58 + 2 * v303.val[2].u32[1]);
          v140.i16[5] = *(_WORD *)(v58 + 2 * v155);
          v107.i16[2] = *(_WORD *)(v58 + 2 * v303.val[2].u32[2]);
          v141.i16[5] = *(_WORD *)(v58 + 2 * v166);
          float v171 = (__int16 *)(v58 + 2 * v303.val[1].u32[3]);
          v142.i16[5] = *(_WORD *)(v58 + 2 * v303.val[1].u32[1]);
          v303.val[0] = (int16x8_t)vmovl_high_u16((uint16x8_t)v303.val[0]);
          v106.i16[6] = *(_WORD *)(v58 + 2 * v151);
          v107.i16[3] = *(_WORD *)(v58 + 2 * v303.val[2].u32[3]);
          v140.i16[6] = *(_WORD *)(v58 + 2 * v159);
          v107.i16[4] = *(_WORD *)(v58 + 2 * v303.val[0].u32[0]);
          v141.i16[6] = *(_WORD *)(v58 + 2 * v169);
          uint64_t v172 = v303.val[0].u32[3];
          v142.i16[6] = *(_WORD *)(v58 + 2 * v303.val[1].u32[2]);
          v107.i16[5] = *(_WORD *)(v58 + 2 * v303.val[0].u32[1]);
          v107.i16[6] = *(_WORD *)(v58 + 2 * v303.val[0].u32[2]);
          v303.val[0] = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v143, (float16x8_t)0), v96));
          uint32x4_t v173 = vmovl_high_u16((uint16x8_t)v303.val[0]);
          v303.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v303.val[0].i8);
          v303.val[1] = vuzp1q_s16((int16x8_t)v106, (int16x8_t)v140);
          v106.i16[7] = *(_WORD *)(v58 + 2 * v150);
          v112.i64[0] = v173.u32[0];
          v112.i64[1] = v173.u32[1];
          v303.val[2] = v112;
          v112.i64[1] = v303.val[0].u32[3];
          v303.val[0].i16[7] = (unint64_t)v303.val[0].u32[3] >> 48;
          v303.val[0].i16[0] = *(_WORD *)(v58 + 2 * v303.val[0].u32[0]);
          uint64_t v174 = v303.val[2].i64[1];
          v140.i16[7] = *(_WORD *)(v58 + 2 * v157);
          v303.val[0].i16[1] = *(_WORD *)(v58 + 2 * v303.val[0].u32[1]);
          uint64_t v175 = v303.val[2].i64[0];
          a5 = vuzp1q_s16((int16x8_t)v142, (int16x8_t)v107);
          v142.i16[7] = *v171;
          v303.val[0].i16[2] = *(_WORD *)(v58 + 2 * v303.val[0].u32[2]);
          uint64_t v176 = v173.u32[3];
          v303.val[0].i16[3] = *(_WORD *)(v58 + 2 * v112.i64[1]);
          v107.i16[7] = *(_WORD *)(v58 + 2 * v172);
          float v177 = (__int16 *)(v58 + 2 * v173.u32[2]);
          v303.val[0].i16[4] = *(_WORD *)(v58 + 2 * v175);
          _Q13.i32[1] = HIDWORD(v289);
          v9.i32[1] = v290.i32[1];
          v303.val[3] = (int16x8_t)vmlaq_n_f16(vmlaq_n_f16(v83, v106, *(short float *)v290.i16), v140, *(short float *)&v289);
          float16x8_t v178 = vmlaq_n_f16(vmlaq_n_f16(v83, v142, *(short float *)v290.i16), v107, *(short float *)&v289);
          float16x8_t v179 = (float16x8_t)vuzp2q_s16((int16x8_t)v142, (int16x8_t)v107);
          float16x8_t v180 = v141;
          v303.val[0].i16[5] = *(_WORD *)(v58 + 2 * v174);
          v303.val[0].i16[6] = *v177;
          v180.i16[7] = *(_WORD *)(v58 + 2 * v167);
          v303.val[1] = (int16x8_t)vaddq_f16((float16x8_t)v303.val[1], (float16x8_t)vuzp2q_s16((int16x8_t)v106, (int16x8_t)v140));
          float16x8_t v181 = (float16x8_t)v303.val[0];
          v181.i16[7] = *(_WORD *)(v58 + 2 * v176);
          *v92++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)v303.val[3], v180, v288), v83), v277)), v255);
          int16x8_t v87 = (int16x8_t)vaddq_f16(vaddq_f16((float16x8_t)v303.val[1], (float16x8_t)a5), v179);
          *v101++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v178, v181, v288), v83), v277)), v255);
          a5.i32[1] = v287.i32[1];
          float16x8_t v94 = v104;
          _Q3 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v84, v104, (float16x8_t)vzip1q_s16(v87, v87)), v287, (float16x8_t)vzip2q_s16(v87, v87)), v72, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v141, (int16x8_t)v141), (float16x8_t)vtrn2q_s16((int16x8_t)v180, (int16x8_t)v180)), (float16x8_t)vtrn1q_s16(v303.val[0], v303.val[0])), (float16x8_t)vtrn2q_s16((int16x8_t)v181, (int16x8_t)v181)));
          v87.i32[1] = v275.i32[1];
          _Q0 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(_Q3, v276), v275)), v255);
          *v102++ = _Q0;
          v99 += 8;
        }
        while (v99 < v274);
        unint64_t v182 = v254;
        uint64_t v28 = v258;
        unint64_t v13 = v259;
        uint64_t v31 = v257;
        uint64_t v89 = v262;
        unint64_t v91 = v263;
        unsigned __int8 v93 = v256;
        float v95 = (float *)&unk_193E7D000;
        float v98 = v260;
        float v97 = v261;
        float v184 = v269;
        float v183 = v270;
        _S16 = v251;
        _S7 = v252;
      }
      if (v13 > v182)
      {
        uint64_t v185 = 0;
        float v186 = &result[v253];
        float v187 = &v100[v253];
        do
        {
          uint64_t v188 = v185 * 2 + 2 * v302;
          _Q0.i16[0] = *(const __int16 *)((char *)result + v188);
          uint64_t v189 = v185 * 2 + 2 * BYTE2(v302);
          v87.i16[0] = *(const __int16 *)((char *)result + v189);
          float32x2_t v190 = (__int16 *)((char *)result + v188 + 8);
          a5.i16[0] = v186[v185 + 4];
          float v191 = (__int16 *)((char *)v100 + v188);
          _Q0.i16[1] = v186[v185];
          float32x2_t v192 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q0.i8), v192), 0), v192)));
          _Q3.i16[0] = *v191;
          _D0.i16[0] = *(_WORD *)(v59 + 2 * _D0.u32[0]);
          v9.i16[0] = *(const __int16 *)((char *)v100 + v189);
          _Q13.i16[0] = v187[v185 + 4];
          _H9 = *(_WORD *)(v59 + 2 * _D0.u32[1]);
          __asm
          {
            FCVT            S21, H0
            FCVT            S9, H9
          }
          v87.i16[1] = *v190;
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)v87.i8), v192), 0), v192)));
          _D0.i16[0] = *(_WORD *)(v59 + 2 * _D0.u32[0]);
          __asm { FCVT            S12, H0 }
          _D0.i16[0] = *(_WORD *)(v59 + 2 * _D0.u32[1]);
          __asm { FCVT            S10, H0 }
          a5.i16[1] = *(const __int16 *)((char *)result + v189 + 8);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)a5.i8), v192), 0), v192)));
          _D0.i16[0] = *(_WORD *)(v59 + 2 * _D0.u32[0]);
          _H1 = *(_WORD *)(v59 + 2 * _D0.u32[1]);
          _Q3.i16[1] = v187[v185];
          __asm { FCVT            S14, H0 }
          *(int32x2_t *)_Q0.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q3.i8), v192), 0), v192)));
          _Q0.i16[0] = *(_WORD *)(v59 + 2 * _Q0.u32[0]);
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          _H2 = *(_WORD *)(v59 + 2 * _Q0.u32[1]);
          v9.i16[1] = v191[4];
          __asm { FCVT            S2, H2 }
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v9), v192), 0), v192)));
          _D3.i16[0] = *(_WORD *)(v59 + 2 * _D3.u32[0]);
          __asm { FCVT            S3, H3 }
          _H11 = *(_WORD *)(v59 + 2 * _D3.u32[1]);
          __asm { FCVT            S11, H11 }
          _Q13.i16[1] = *(const __int16 *)((char *)v100 + v189 + 8);
          *(float32x2_t *)_Q13.i8 = vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q13.i8), v192), 0);
          _D8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(*(float32x2_t *)_Q13.i8, v192)));
          _D8.i16[0] = *(_WORD *)(v59 + 2 * _D8.u32[0]);
          __asm { FCVT            S8, H8 }
          _Q13.i16[0] = *(_WORD *)(v59 + 2 * _D8.u32[1]);
          __asm { FCVT            S13, H13 }
          float v210 = (float)((float)(v294 * _S9) + (float)(_S21 * v295)) + (float)(_S12 * v183);
          _S26 = (float)((float)(_S7 * _S9) + (float)(_S21 * v184)) + (float)(_S12 * _S16);
          float v212 = (float)((float)(_S18 * _S9) + (float)(_S21 * _S17)) + (float)(_S12 * _S19);
          float v213 = (float)((float)(v294 * _S14) + (float)(_S10 * v295)) + (float)(_S1 * v183);
          float v214 = (float)((float)(_S7 * _S14) + (float)(_S10 * v184)) + (float)(_S1 * _S16);
          _S1 = (float)((float)(_S18 * _S14) + (float)(_S10 * _S17)) + (float)(_S1 * _S19);
          float v216 = (float)((float)(v294 * _S2) + (float)(*(float *)_Q0.i32 * v295)) + (float)(*(float *)_D3.i32 * v183);
          float v217 = (float)((float)(_S7 * _S2) + (float)(*(float *)_Q0.i32 * v184)) + (float)(*(float *)_D3.i32 * _S16);
          *(float *)_Q0.i32 = (float)((float)(_S18 * _S2) + (float)(*(float *)_Q0.i32 * _S17))
                            + (float)(*(float *)_D3.i32 * _S19);
          _S2 = (float)((float)(v294 * *(float *)_D8.i32) + (float)(_S11 * v295)) + (float)(*(float *)_Q13.i32 * v183);
          *(float *)_D3.i32 = (float)((float)(_S7 * *(float *)_D8.i32) + (float)(_S11 * v184))
                            + (float)(*(float *)_Q13.i32 * _S16);
          float v219 = (float)((float)(_S18 * *(float *)_D8.i32) + (float)(_S11 * _S17)) + (float)(*(float *)_Q13.i32 * _S19);
          float v220 = v95[70];
          LOWORD(_S21) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v210, 0.0), v220)));
          __asm { FCVT            S21, H21 }
          LOWORD(_S26) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), v220)));
          __asm { FCVT            S8, H26 }
          LOWORD(_S26) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v212, 0.0), v220)));
          LOWORD(_S10) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v213, 0.0), v220)));
          __asm
          {
            FCVT            S9, H26
            FCVT            S10, H10
          }
          LOWORD(_S26) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v214, 0.0), v220)));
          __asm { FCVT            S13, H26 }
          LOWORD(_S1) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), v220)));
          __asm { FCVT            S12, H1 }
          LOWORD(_S1) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v216, 0.0), v220)));
          __asm { FCVT            S14, H1 }
          LOWORD(_S1) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v217, 0.0), v220)));
          __asm { FCVT            S15, H1 }
          _Q0.i16[0] = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(*(float *)_Q0.i32, 0.0), v220)));
          LOWORD(_S1) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), v220)));
          __asm
          {
            FCVT            S11, H0
            FCVT            S0, H1
          }
          LOWORD(_S1) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(*(float *)_D3.i32, 0.0), v220)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v219, 0.0), v220)));
          __asm { FCVT            S2, H2 }
          float v231 = (float)((float)((float)(v297 * _S8) + (float)(v298 * _S21)) + (float)(v296 * _S9)) + v60;
          if (v231 < v60) {
            float v232 = v60;
          }
          else {
            float v232 = (float)((float)((float)(v297 * _S8) + (float)(v298 * _S21)) + (float)(v296 * _S9)) + v60;
          }
          BOOL v233 = v231 <= v61;
          float v234 = (float)((float)((float)(v297 * *(float *)_Q13.i32) + (float)(v298 * _S10)) + (float)(v296 * _S12))
               + v60;
          if (!v233) {
            float v232 = v61;
          }
          unsigned int v235 = llroundf(v232);
          if (v234 < v60) {
            float v236 = v60;
          }
          else {
            float v236 = (float)((float)((float)(v297 * *(float *)_Q13.i32) + (float)(v298 * _S10)) + (float)(v296 * _S12))
          }
                 + v60;
          BOOL v233 = v234 <= v61;
          float v237 = (float)((float)((float)(v297 * _S15) + (float)(v298 * _S14)) + (float)(v296 * _S11)) + v60;
          if (!v233) {
            float v236 = v61;
          }
          unsigned int v238 = llroundf(v236);
          if (v237 < v60) {
            float v239 = v60;
          }
          else {
            float v239 = (float)((float)((float)(v297 * _S15) + (float)(v298 * _S14)) + (float)(v296 * _S11)) + v60;
          }
          BOOL v233 = v237 <= v61;
          float v240 = (float)((float)((float)(v297 * _S1) + (float)(v298 * *(float *)_Q0.i32)) + (float)(v296 * _S2)) + v60;
          if (!v233) {
            float v239 = v61;
          }
          unsigned int v241 = llroundf(v239);
          if (v240 < v60) {
            float v242 = v60;
          }
          else {
            float v242 = (float)((float)((float)(v297 * _S1) + (float)(v298 * *(float *)_Q0.i32)) + (float)(v296 * _S2)) + v60;
          }
          if (v240 <= v61) {
            float v243 = v242;
          }
          else {
            float v243 = v61;
          }
          float v244 = (float)((float)(_S21 + _S10) + _S14) + *(float *)_Q0.i32;
          float v245 = (float)((float)(_S8 + *(float *)_Q13.i32) + _S15) + _S1;
          v92->i16[0] = v235 << v93;
          v92->i16[1] = v238 << v93;
          v101->i16[0] = v241 << v93;
          v101->i16[1] = llroundf(v243) << v93;
          _Q3.i32[1] = HIDWORD(v292);
          float v246 = (float)((float)(_S9 + _S12) + _S11) + _S2;
          _Q0.i32[1] = HIDWORD(v291);
          float v247 = (float)((float)(v300 + (float)(v244 * v293)) + (float)(v245 * *(float *)&v292))
               + (float)(v246 * *(float *)&v291);
          float v248 = v62;
          if (v247 <= v62)
          {
            float v248 = (float)((float)(v300 + (float)(v244 * v293)) + (float)(v245 * *(float *)&v292))
                 + (float)(v246 * *(float *)&v291);
            if (v247 < v299) {
              float v248 = v299;
            }
          }
          float v249 = (float)((float)(v300 + (float)(v244 * v273)) + (float)(v245 * v272)) + (float)(v246 * v271);
          v102->i16[0] = llroundf(v248) << v93;
          float v250 = v62;
          if (v249 <= v62)
          {
            float v250 = v249;
            if (v249 < v299) {
              float v250 = v299;
            }
          }
          v182 += 2;
          v185 += 8;
          v102->i16[1] = llroundf(v250) << v93;
          float v92 = (uint16x8_t *)((char *)v92 + 4);
          float v101 = (uint16x8_t *)((char *)v101 + 4);
          float v102 = (uint16x8_t *)((char *)v102 + 4);
        }
        while (v13 > v182);
      }
      uint64_t result = (const __int16 *)&v97[v28];
      float v92 = (uint16x8_t *)&v98[v31];
      v89 += v268;
      v91 += 2;
      float16x8_t v72 = v265;
      float16x8_t v94 = (float16x8_t)v266;
      float16x8_t v84 = v264;
    }
    while (v267 > v91);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = 2 * *result;
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (2 * v14 != 2 * v13)
  {
    unint64_t v15 = 0;
    unint64_t v16 = *(void *)(result + 20);
    uint64_t v17 = *(void *)(result + 44) + 2 * v13;
    unint64_t v18 = 2 * v14 - 2 * v13;
    uint64_t v19 = *((void *)result + 19);
    uint64_t v20 = (uint64_t *)*((void *)result + 17);
    uint64_t v21 = **((void **)result + 8);
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    LOWORD(a3) = *(_WORD *)(v19 + 144);
    float v24 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v19 + 146);
    *(float *)&unsigned int v25 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v19 + 148);
    float v26 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v19 + 150);
    float v130 = (float)LODWORD(a6);
    float v131 = (float)LODWORD(a4);
    LOWORD(v25) = *(_WORD *)(v19 + 152);
    float v27 = (float)v25;
    float v128 = *(float *)(v19 + 40);
    float v129 = *(float *)(v19 + 36);
    float v126 = *(float *)(v19 + 48) * 0.25;
    float v127 = *(float *)(v19 + 44);
    float v124 = *(float *)(v19 + 56) * 0.25;
    float v125 = *(float *)(v19 + 52) * 0.25;
    float v122 = *(float *)(v19 + 64) * 0.25;
    float v123 = *(float *)(v19 + 60) * 0.25;
    float v28 = *(float *)(v19 + 72);
    float v121 = *(float *)(v19 + 68) * 0.25;
    float v29 = *(float *)(v19 + 76);
    float v30 = *(float *)(v19 + 80);
    float v31 = *(float *)(v19 + 84);
    float v32 = *(float *)(v19 + 88);
    float v33 = *(float *)(v19 + 92);
    float v34 = *(float *)(v19 + 96);
    float v35 = *(float *)(v19 + 100);
    float v36 = *(float *)(v19 + 104);
    uint64_t v37 = v19 + 164;
    uint64_t v38 = v19 + 16548;
    uint64_t v39 = *((void *)result + 14);
    unint64_t v40 = *((void *)result + 13) * a2 / v12;
    uint64_t v41 = (uint64_t *)*((void *)result + 16);
    uint64_t v42 = *((void *)result + 15) + 2 * v40;
    uint64_t v43 = **((void **)result + 7) + v21 * v17 + 8 * *(void *)(result + 36);
    uint64_t v45 = *v41;
    uint64_t v44 = v41[1];
    uint64_t result = (unsigned __int8 *)(v45 + v42 * v22 + 2 * v39);
    unsigned int v46 = *(unsigned __int8 *)(v19 + 132);
    if (v46 >= 0x11) {
      char v47 = 0;
    }
    else {
      char v47 = 16 - v46;
    }
    uint64_t v48 = *(unsigned __int8 *)(v19 + 156);
    if (v42 >= 0) {
      uint64_t v49 = v42;
    }
    else {
      uint64_t v49 = v42 + 1;
    }
    uint64_t v50 = v44 + (v49 >> 1) * v23;
    uint64_t v51 = *(unsigned __int8 *)(v19 + 155);
    uint64_t v52 = *(unsigned __int8 *)(v19 + 154);
    uint64_t v53 = v50 + 2 * v39;
    char v54 = v47;
    float32x2_t v55 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      unsigned int v56 = &result[v22];
      uint64_t v57 = v43 + v21;
      if (v16)
      {
        unint64_t v58 = 0;
        uint64_t v59 = v43 + v21;
        float v60 = &result[v22];
        do
        {
          _D16.i16[0] = *(_WORD *)(v43 + 2 * v52);
          _D17.i16[0] = *(_WORD *)(v43 + 2 * v48);
          v9.i16[0] = *(_WORD *)(v43 + 8 + 2 * v51);
          _D19.i16[0] = *(_WORD *)(v59 + 2 * v52);
          _D13.i16[0] = *(_WORD *)(v59 + 2 * v48);
          _D16.i16[1] = *(_WORD *)(v43 + 2 * v51);
          float16x4_t v61 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D16), v55), 0), v55)));
          _H11 = *(_WORD *)(v37 + 2 * v61.u32[0]);
          v61.i16[0] = *(_WORD *)(v59 + 8 + 2 * v51);
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v37 + 2 * v61.u32[1]);
          _D17.i16[1] = *(_WORD *)(v43 + 8 + 2 * v52);
          _D17 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D17), v55), 0), v55)));
          __asm { FCVT            S14, H12 }
          _D17.i16[0] = *(_WORD *)(v37 + 2 * _D17.u32[0]);
          _H12 = *(_WORD *)(v37 + 2 * _D17.u32[1]);
          __asm
          {
            FCVT            S15, H17
            FCVT            S12, H12
          }
          v9.i16[1] = *(_WORD *)(v43 + 8 + 2 * v48);
          _D17 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v9), v55), 0), v55)));
          _D17.i16[0] = *(_WORD *)(v37 + 2 * _D17.u32[0]);
          __asm { FCVT            S18, H17 }
          _D17.i16[0] = *(_WORD *)(v37 + 2 * _D17.u32[1]);
          __asm { FCVT            S17, H17 }
          _D19.i16[1] = *(_WORD *)(v59 + 2 * v51);
          _D19 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D19), v55), 0), v55)));
          _D19.i16[0] = *(_WORD *)(v37 + 2 * _D19.u32[0]);
          _H20 = *(_WORD *)(v37 + 2 * _D19.u32[1]);
          _D13.i16[1] = *(_WORD *)(v59 + 8 + 2 * v52);
          __asm { FCVT            S19, H19 }
          _D13 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D13), v55), 0), v55)));
          _D13.i16[0] = *(_WORD *)(v37 + 2 * _D13.u32[0]);
          __asm
          {
            FCVT            S20, H20
            FCVT            S13, H13
          }
          _H22 = *(_WORD *)(v37 + 2 * _D13.u32[1]);
          v61.i16[1] = *(_WORD *)(v59 + 8 + 2 * v48);
          __asm { FCVT            S22, H22 }
          _D16 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v61), v55), 0), v55)));
          _D16.i16[0] = *(_WORD *)(v37 + 2 * _D16.u32[0]);
          __asm { FCVT            S16, H16 }
          _H3 = *(_WORD *)(v37 + 2 * _D16.u32[1]);
          __asm { FCVT            S3, H3 }
          _S1 = (float)((float)(v29 * _S14) + (float)(_S11 * v28)) + (float)(_S15 * v30);
          float v82 = (float)((float)(v32 * _S14) + (float)(_S11 * v31)) + (float)(_S15 * v33);
          float v83 = (float)((float)(v35 * _S14) + (float)(_S11 * v34)) + (float)(_S15 * v36);
          float v84 = (float)((float)(v29 * _S18) + (float)(_S12 * v28)) + (float)(*(float *)_D17.i32 * v30);
          _S5 = (float)((float)(v32 * _S18) + (float)(_S12 * v31)) + (float)(*(float *)_D17.i32 * v33);
          *(float *)_D17.i32 = (float)((float)(v35 * _S18) + (float)(_S12 * v34)) + (float)(*(float *)_D17.i32 * v36);
          float v86 = (float)((float)(v29 * _S20) + (float)(*(float *)_D19.i32 * v28)) + (float)(*(float *)_D13.i32 * v30);
          float v87 = (float)((float)(v32 * _S20) + (float)(*(float *)_D19.i32 * v31)) + (float)(*(float *)_D13.i32 * v33);
          *(float *)_D19.i32 = (float)((float)(v35 * _S20) + (float)(*(float *)_D19.i32 * v34))
                             + (float)(*(float *)_D13.i32 * v36);
          float v88 = (float)((float)(v29 * *(float *)_D16.i32) + (float)(_S22 * v28)) + (float)(_S3 * v30);
          float v89 = (float)((float)(v32 * *(float *)_D16.i32) + (float)(_S22 * v31)) + (float)(_S3 * v33);
          float v90 = (float)((float)(v35 * *(float *)_D16.i32) + (float)(_S22 * v34)) + (float)(_S3 * v36);
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S11, H1 }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S12, H1 }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _D16.i16[0] = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm
          {
            FCVT            S13, H1
            FCVT            S14, H16
          }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S16, H1 }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(*(float *)_D17.i32, 0.0), 8191.0)));
          __asm { FCVT            S15, H1 }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S17, H1 }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S18, H1 }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(*(float *)_D19.i32, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H1
            FCVT            S1, H5
          }
          LOWORD(_S5) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          unsigned int v97 = llroundf(fminf(fmaxf(v90, 0.0), 8191.0));
          __asm { FCVT            S3, H5 }
          LOWORD(_S5) = *(_WORD *)(v38 + 2 * v97);
          __asm { FCVT            S5, H5 }
          float v100 = (float)((float)((float)(v128 * _S12) + (float)(v129 * _S11)) + (float)(v127 * *(float *)_D13.i32))
               + v24;
          if (v100 < v24) {
            float v101 = v24;
          }
          else {
            float v101 = (float)((float)((float)(v128 * _S12) + (float)(v129 * _S11)) + (float)(v127 * *(float *)_D13.i32))
          }
                 + v24;
          BOOL v102 = v100 <= v26;
          float v103 = (float)((float)((float)(v128 * *(float *)_D16.i32) + (float)(v129 * _S14)) + (float)(v127 * _S15))
               + v24;
          if (!v102) {
            float v101 = v26;
          }
          unsigned int v104 = llroundf(v101);
          if (v103 < v24) {
            float v105 = v24;
          }
          else {
            float v105 = (float)((float)((float)(v128 * *(float *)_D16.i32) + (float)(v129 * _S14)) + (float)(v127 * _S15))
          }
                 + v24;
          BOOL v102 = v103 <= v26;
          float v106 = (float)((float)((float)(v128 * _S18) + (float)(v129 * *(float *)_D17.i32))
                       + (float)(v127 * *(float *)_D19.i32))
               + v24;
          if (!v102) {
            float v105 = v26;
          }
          unsigned int v107 = llroundf(v105);
          if (v106 < v24) {
            float v108 = v24;
          }
          else {
            float v108 = (float)((float)((float)(v128 * _S18) + (float)(v129 * *(float *)_D17.i32))
          }
                         + (float)(v127 * *(float *)_D19.i32))
                 + v24;
          BOOL v102 = v106 <= v26;
          float v109 = (float)((float)((float)(v128 * _S3) + (float)(v129 * _S1)) + (float)(v127 * _S5)) + v24;
          if (!v102) {
            float v108 = v26;
          }
          unsigned int v110 = llroundf(v108);
          if (v109 < v24) {
            float v111 = v24;
          }
          else {
            float v111 = (float)((float)((float)(v128 * _S3) + (float)(v129 * _S1)) + (float)(v127 * _S5)) + v24;
          }
          if (v109 <= v26) {
            float v112 = v111;
          }
          else {
            float v112 = v26;
          }
          float v113 = (float)((float)(_S11 + _S14) + *(float *)_D17.i32) + _S1;
          float v114 = (float)((float)(_S12 + *(float *)_D16.i32) + _S18) + _S3;
          *(_WORD *)uint64_t result = v104 << v54;
          *((_WORD *)result + 1) = v107 << v54;
          *(_WORD *)float v60 = v110 << v54;
          *((_WORD *)v60 + 1) = llroundf(v112) << v54;
          float v115 = (float)((float)(*(float *)_D13.i32 + _S15) + *(float *)_D19.i32) + _S5;
          float v116 = (float)((float)(v131 + (float)(v113 * v126)) + (float)(v114 * v125)) + (float)(v115 * v124);
          float v117 = v27;
          if (v116 <= v27)
          {
            float v117 = (float)((float)(v131 + (float)(v113 * v126)) + (float)(v114 * v125)) + (float)(v115 * v124);
            if (v116 < v130) {
              float v117 = v130;
            }
          }
          uint64_t v118 = (_WORD *)(v53 + 2 * v58);
          float v119 = (float)((float)(v131 + (float)(v113 * v123)) + (float)(v114 * v122)) + (float)(v115 * v121);
          *uint64_t v118 = llroundf(v117) << v54;
          float v120 = v27;
          if (v119 <= v27)
          {
            float v120 = v119;
            if (v119 < v130) {
              float v120 = v130;
            }
          }
          v43 += 16;
          v59 += 16;
          result += 4;
          v60 += 4;
          v118[1] = llroundf(v120) << v54;
          v58 += 2;
        }
        while (v16 > v58);
      }
      uint64_t v43 = v57 + v21;
      uint64_t result = &v56[v22];
      v53 += v23;
      v15 += 2;
    }
    while (v18 > v15);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_xf420_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGhA_rgb_xf420_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, uint8x8_t a5, double a6, double a7, double a8, double a9, float32x4_t a10)
{
  uint64_t v12 = 0;
  unint64_t v13 = *(void *)(a1 + 20);
  uint64_t v154 = *(void *)(a1 + 36);
  uint64_t v14 = *(void *)(a1 + 44);
  uint64_t v15 = *(void *)(a1 + 28);
  unint64_t v16 = 2 * *a1;
  uint64_t v17 = 2 * (v15 * a2 / v16);
  uint64_t v18 = v14 + v17;
  uint64_t v19 = 2 * ((v15 + v15 * a2) / v16);
  uint64_t v20 = v14 + v19;
  uint64_t v21 = *((void *)a1 + 14);
  unint64_t v22 = *((void *)a1 + 13) * a2;
  uint64_t v23 = *((void *)a1 + 19);
  uint64_t v24 = *((void *)a1 + 15);
  unsigned int v25 = (uint64_t *)*((void *)a1 + 16);
  float v26 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v27 = **((void **)a1 + 8);
  uint64_t v28 = **((void **)a1 + 7);
  uint64_t v29 = *v26;
  uint64_t v30 = v26[1];
  uint64_t result = *v25;
  uint64_t v32 = v25[1];
  unsigned int v33 = *(_DWORD *)(v23 + 136);
  a5.i32[0] = *(_DWORD *)(v23 + 154);
  __int32 v158 = a5.i32[0];
  unsigned int v34 = *(unsigned __int16 *)(v23 + 144);
  uint64_t v35 = v24 + 2 * (v22 / v16);
  uint64_t v36 = v27 * v18;
  unsigned int v37 = *(unsigned __int8 *)(v23 + 132);
  unsigned int v38 = *(unsigned __int16 *)(v23 + 146);
  unsigned int v39 = *(unsigned __int16 *)(v23 + 148);
  unsigned int v40 = *(unsigned __int16 *)(v23 + 150);
  if (v35 >= 0) {
    uint64_t v41 = v35;
  }
  else {
    uint64_t v41 = v35 + 1;
  }
  unsigned int v42 = *(unsigned __int16 *)(v23 + 152);
  _S0 = *(float *)(v23 + 36);
  _S1 = *(float *)(v23 + 40);
  uint64_t v45 = v30 * (v41 >> 1);
  uint16x8_t v46 = vmovl_u8(a5);
  _S2 = *(float *)(v23 + 44);
  v48.i32[0] = *(_DWORD *)(v23 + 48);
  v10.i32[0] = *(_DWORD *)(v23 + 52);
  v11.i32[0] = *(_DWORD *)(v23 + 56);
  __int32 v50 = *(_DWORD *)(v23 + 60);
  __int32 v49 = *(_DWORD *)(v23 + 64);
  __int32 v51 = *(_DWORD *)(v23 + 68);
  memset(v157, 0, sizeof(v157));
  do
  {
    unsigned int v52 = 0;
    char v53 = *((unsigned char *)&v158 + v12);
    do
    {
      *((unsigned char *)v157 + 8 * (((_BYTE)v12 + (v52 >> 3)) & 0x1F) + v52) = v53 + 4 * v52;
      ++v52;
    }
    while (v52 != 8);
    ++v12;
  }
  while (v12 != 4);
  if (v19 != v17)
  {
    unint64_t v54 = 0;
    _S3 = (float)v33;
    float v56 = (float)v34;
    float v57 = (float)v38;
    float v58 = (float)v39;
    float v156 = (float)v40;
    float v59 = (float)v42;
    unint64_t v60 = v20 - v18;
    v48.i32[1] = v50;
    __asm { FMOV            V22.2S, #0.25 }
    v10.i32[1] = v49;
    *(float32x2_t *)a10.f32 = vmul_f32(v48, _D22);
    *(float32x2_t *)v10.f32 = vmul_f32(*(float32x2_t *)v10.f32, _D22);
    v11.i32[1] = v51;
    *(float32x2_t *)v11.f32 = vmul_f32(*(float32x2_t *)v11.f32, _D22);
    __asm
    {
      FCVT            H8, S0
      FCVT            H9, S1
      FCVT            H10, S2
    }
    float16x8_t v149 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float16x8_t v150 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a10), 0);
    int16x4_t v69 = (int16x4_t)vcvt_f16_f32(v11);
    int32x4_t v70 = vdupq_lane_s32((int32x2_t)v69, 0);
    *(short float *)v69.i16 = (short float)v34;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(v69, 0);
    *(short float *)v69.i16 = (short float)v38;
    int16x8_t v72 = vdupq_lane_s16(v69, 0);
    float16x8_t v147 = (float16x8_t)v72;
    float16x8_t v148 = (float16x8_t)v70;
    *(short float *)v72.i16 = (short float)v39;
    float16x8_t v73 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v72.i8, 0);
    *(short float *)v72.i16 = (short float)v40;
    int16x8_t v74 = vdupq_lane_s16(*(int16x4_t *)v72.i8, 0);
    float16x8_t v146 = (float16x8_t)v74;
    *(short float *)v74.i16 = (short float)v42;
    float16x8_t v75 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v74.i8, 0);
    uint64_t v76 = v32 + v45;
    if (v37 >= 0x11) {
      unsigned __int8 v77 = 0;
    }
    else {
      unsigned __int8 v77 = 16 - v37;
    }
    float v78 = (uint16x8_t *)(v76 + 2 * v21);
    float v79 = (uint16x8_t *)(result + v29 * v35 + 2 * v21);
    float v80 = (const __int16 *)(v28 + v36 + 8 * v154);
    uint64_t result = v77;
    uint16x8_t v81 = (uint16x8_t)vdupq_n_s16(v77);
    __asm { FCVT            H11, S3 }
    float v153 = v10.f32[0];
    float v155 = a10.f32[0];
    float v152 = v10.f32[1];
    uint64_t v83 = v11.i64[0];
    uint64_t v84 = v46.u16[1];
    float16x8_t v151 = v75;
    do
    {
      int16x8_t v85 = (char *)v80 + v27;
      float v86 = &v79->i8[v29];
      if ((int)v13 < 8)
      {
        unint64_t v93 = 0;
        float v90 = v78;
        float v89 = (uint16x8_t *)((char *)v79 + v29);
        float v88 = (const __int16 *)((char *)v80 + v27);
      }
      else
      {
        int v87 = 0;
        float v88 = (const __int16 *)((char *)v80 + v27);
        float v89 = (uint16x8_t *)((char *)v79 + v29);
        float v90 = v78;
        do
        {
          int16x8x4_t v159 = vld4q_s16(v80);
          v80 += 32;
          int16x8x4_t v160 = vld4q_s16(v88);
          v88 += 32;
          float16x8_t v91 = vmulq_n_f16((float16x8_t)v159.val[0], _H11);
          float16x8_t v92 = vmulq_n_f16((float16x8_t)v159.val[1], _H11);
          v159.val[0] = (int16x8_t)vmulq_n_f16((float16x8_t)v159.val[2], _H11);
          v159.val[1] = (int16x8_t)vmulq_n_f16((float16x8_t)v160.val[0], _H11);
          v159.val[2] = (int16x8_t)vmulq_n_f16((float16x8_t)v160.val[1], _H11);
          v160.val[0] = (int16x8_t)vmulq_n_f16((float16x8_t)v160.val[2], _H11);
          *v79++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v71, v91, _H8), v92, _H9), (float16x8_t)v159.val[0], _H10), v71), v73)), v81);
          *v89++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v71, (float16x8_t)v159.val[1], _H8), (float16x8_t)v159.val[2], _H9), (float16x8_t)v160.val[0], _H10), v71), v73)), v81);
          v160.val[1] = (int16x8_t)vaddq_f16((float16x8_t)vuzp2q_s16(v159.val[1], v159.val[2]), vaddq_f16(vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v91, (int16x8_t)v92), (float16x8_t)vuzp2q_s16((int16x8_t)v91, (int16x8_t)v92)), (float16x8_t)vuzp1q_s16(v159.val[1], v159.val[2])));
          *v90++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v147, v150, (float16x8_t)vzip1q_s16(v160.val[1], v160.val[1])), v149, (float16x8_t)vzip2q_s16(v160.val[1], v160.val[1])), v148, vaddq_f16((float16x8_t)vtrn2q_s16(v160.val[0], v160.val[0]), vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v159.val[0], v159.val[0]), (float16x8_t)vtrn2q_s16(v159.val[0], v159.val[0])), (float16x8_t)vtrn1q_s16(v160.val[0], v160.val[0])))), v146), v75)), v81);
          v87 += 8;
        }
        while (v87 < (int)v13 - 7);
        unint64_t v93 = v13 & 0xFFFFFFF8;
      }
      if (v13 > v93)
      {
        uint64_t v94 = 0;
        float v95 = &v80[v84];
        float16x8_t v96 = &v88[v84];
        do
        {
          uint64_t v97 = v94 * 2 + 2 * v158;
          _H17 = *(const __int16 *)((char *)v80 + v97);
          __asm { FCVT            S17, H17 }
          float v100 = _S3 * _S17;
          LOWORD(_S17) = v95[v94];
          __asm { FCVT            S17, H17 }
          float v102 = _S3 * _S17;
          uint64_t v103 = v94 * 2 + 2 * BYTE2(v158);
          LOWORD(_S17) = *(const __int16 *)((char *)v80 + v103);
          __asm { FCVT            S17, H17 }
          float v105 = _S3 * _S17;
          LOWORD(_S17) = *(const __int16 *)((char *)v80 + v97 + 8);
          __asm { FCVT            S17, H17 }
          float v107 = _S3 * _S17;
          LOWORD(_S17) = v95[v94 + 4];
          __asm { FCVT            S17, H17 }
          float v109 = _S3 * _S17;
          _H19 = *(const __int16 *)((char *)v80 + v103 + 8);
          __asm { FCVT            S19, H19 }
          float v112 = _S3 * _S19;
          float v113 = (_WORD *)((char *)v88 + v97);
          LOWORD(_S19) = *v113;
          __asm { FCVT            S19, H19 }
          float v115 = _S3 * _S19;
          _H20 = v96[v94];
          __asm { FCVT            S20, H20 }
          float v118 = _S3 * _S20;
          _H21 = *(const __int16 *)((char *)v88 + v103);
          __asm { FCVT            S21, H21 }
          float v121 = _S3 * _S21;
          _H22 = v113[4];
          __asm { FCVT            S22, H22 }
          float v124 = _S3 * _S22;
          _H24 = v96[v94 + 4];
          __asm { FCVT            S24, H24 }
          float v127 = _S3 * _S24;
          _H26 = *(const __int16 *)((char *)v88 + v103 + 8);
          __asm { FCVT            S26, H26 }
          float v130 = _S3 * _S26;
          float v131 = (float)((float)((float)(_S1 * v102) + (float)(_S0 * v100)) + (float)(_S2 * v105)) + v56;
          float v132 = (float)((float)((float)(_S1 * v109) + (float)(_S0 * v107)) + (float)(_S2 * v112)) + v56;
          float v133 = (float)((float)((float)(_S1 * v118) + (float)(_S0 * v115)) + (float)(_S2 * v121)) + v56;
          float v134 = (float)((float)((float)(_S1 * v127) + (float)(_S0 * v124)) + (float)(_S2 * v130)) + v56;
          if (v131 < v56) {
            float v135 = v56;
          }
          else {
            float v135 = (float)((float)((float)(_S1 * v102) + (float)(_S0 * v100)) + (float)(_S2 * v105)) + v56;
          }
          if (v131 > v58) {
            float v135 = v58;
          }
          v79->i16[0] = llroundf(v135) << result;
          if (v132 < v56) {
            float v136 = v56;
          }
          else {
            float v136 = (float)((float)((float)(_S1 * v109) + (float)(_S0 * v107)) + (float)(_S2 * v112)) + v56;
          }
          if (v132 > v58) {
            float v136 = v58;
          }
          v79->i16[1] = llroundf(v136) << result;
          if (v133 < v56) {
            float v137 = v56;
          }
          else {
            float v137 = (float)((float)((float)(_S1 * v118) + (float)(_S0 * v115)) + (float)(_S2 * v121)) + v56;
          }
          if (v133 > v58) {
            float v137 = v58;
          }
          v89->i16[0] = llroundf(v137) << result;
          if (v134 < v56) {
            float v138 = v56;
          }
          else {
            float v138 = (float)((float)((float)(_S1 * v127) + (float)(_S0 * v124)) + (float)(_S2 * v130)) + v56;
          }
          if (v134 > v58) {
            float v138 = v58;
          }
          v89->i16[1] = llroundf(v138) << result;
          float v139 = (float)((float)(v100 + v107) + v115) + v124;
          float v140 = (float)((float)(v102 + v109) + v118) + v127;
          float v141 = (float)((float)(v105 + v112) + v121) + v130;
          float v142 = (float)((float)(v57 + (float)(v139 * v155)) + (float)(v140 * v153)) + (float)(v141 * *(float *)&v83);
          float v143 = v59;
          if (v142 <= v59)
          {
            float v143 = (float)((float)(v57 + (float)(v139 * v155)) + (float)(v140 * v153)) + (float)(v141 * *(float *)&v83);
            if (v142 < v156) {
              float v143 = v156;
            }
          }
          float v144 = (float)((float)(v57 + (float)(v139 * a10.f32[1])) + (float)(v140 * v152))
               + (float)(v141 * *((float *)&v83 + 1));
          v90->i16[0] = llroundf(v143) << result;
          float v145 = v59;
          if (v144 <= v59)
          {
            float v145 = v144;
            if (v144 < v156) {
              float v145 = v156;
            }
          }
          v93 += 2;
          v94 += 8;
          v90->i16[1] = llroundf(v145) << result;
          float v79 = (uint16x8_t *)((char *)v79 + 4);
          float v89 = (uint16x8_t *)((char *)v89 + 4);
          float v90 = (uint16x8_t *)((char *)v90 + 4);
        }
        while (v13 > v93);
      }
      float v80 = (const __int16 *)&v85[v27];
      float v79 = (uint16x8_t *)&v86[v29];
      float v78 = (uint16x8_t *)((char *)v78 + v30);
      v54 += 2;
      float16x8_t v75 = v151;
    }
    while (v60 > v54);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_xf420_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_xf420_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = 2 * *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    uint64_t v14 = *(void *)(result + 44) + 2 * v10;
    unint64_t v15 = 2 * v11 - 2 * v10;
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(uint64_t **)(result + 136);
    uint64_t v18 = **(void **)(result + 64);
    uint64_t v19 = *v17;
    uint64_t v20 = v17[1];
    float v21 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    float v22 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v23 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v24 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v25 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v26 = (float)LODWORD(a8);
    float v27 = *(float *)(v16 + 36);
    float v28 = *(float *)(v16 + 40);
    float v29 = *(float *)(v16 + 44);
    float v30 = *(float *)(v16 + 48) * 0.25;
    float v31 = *(float *)(v16 + 52) * 0.25;
    float v32 = *(float *)(v16 + 56) * 0.25;
    float v33 = *(float *)(v16 + 60) * 0.25;
    float v34 = *(float *)(v16 + 64) * 0.25;
    float v35 = *(float *)(v16 + 68) * 0.25;
    uint64_t v36 = *(void *)(result + 112);
    uint64_t v37 = *(uint64_t **)(result + 128);
    uint64_t v38 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v9);
    uint64_t v39 = **(void **)(result + 56) + v18 * v14 + 8 * *(void *)(result + 36);
    uint64_t v40 = *v37;
    uint64_t v41 = v37[1];
    unsigned int v42 = (char *)(v40 + v38 * v19 + 2 * v36);
    unsigned int v43 = *(unsigned __int8 *)(v16 + 132);
    if (v43 >= 0x11) {
      char v44 = 0;
    }
    else {
      char v44 = 16 - v43;
    }
    uint64_t v45 = *(unsigned __int8 *)(v16 + 156);
    if (v38 >= 0) {
      uint64_t v46 = v38;
    }
    else {
      uint64_t v46 = v38 + 1;
    }
    uint64_t v47 = v41 + (v46 >> 1) * v20;
    uint64_t v48 = *(unsigned __int8 *)(v16 + 155);
    uint64_t result = *(unsigned __int8 *)(v16 + 154);
    uint64_t v49 = v47 + 2 * v36;
    char v50 = v44;
    do
    {
      __int32 v51 = &v42[v19];
      uint64_t v52 = v39 + v18;
      if (v13)
      {
        unint64_t v53 = 0;
        uint64_t v54 = v39 + v18;
        float32x2_t v55 = &v42[v19];
        do
        {
          _H23 = *(_WORD *)(v39 + 2 * result);
          __asm { FCVT            S23, H23 }
          float v62 = v21 * _S23;
          LOWORD(_S23) = *(_WORD *)(v39 + 2 * v48);
          __asm { FCVT            S23, H23 }
          float v64 = v21 * _S23;
          LOWORD(_S23) = *(_WORD *)(v39 + 2 * v45);
          __asm { FCVT            S23, H23 }
          float v66 = v21 * _S23;
          _H26 = *(_WORD *)(v39 + 8 + 2 * result);
          __asm { FCVT            S26, H26 }
          float v69 = v21 * _S26;
          LOWORD(_S26) = *(_WORD *)(v39 + 8 + 2 * v48);
          __asm { FCVT            S26, H26 }
          _H29 = *(_WORD *)(v39 + 8 + 2 * v45);
          float v72 = v21 * _S26;
          __asm { FCVT            S26, H29 }
          float v74 = v21 * _S26;
          _H29 = *(_WORD *)(v54 + 2 * result);
          __asm { FCVT            S29, H29 }
          float v77 = v21 * _S29;
          _H30 = *(_WORD *)(v54 + 2 * v48);
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v54 + 2 * v45);
          float v81 = v21 * _S30;
          __asm { FCVT            S31, H31 }
          float v83 = v21 * _S31;
          _H8 = *(_WORD *)(v54 + 8 + 2 * result);
          __asm { FCVT            S8, H8 }
          float v86 = v21 * _S8;
          _H9 = *(_WORD *)(v54 + 8 + 2 * v48);
          __asm { FCVT            S9, H9 }
          float v89 = v21 * _S9;
          _H10 = *(_WORD *)(v54 + 8 + 2 * v45);
          __asm { FCVT            S10, H10 }
          float v92 = v21 * _S10;
          float v93 = (float)((float)((float)(v28 * v64) + (float)(v27 * v62)) + (float)(v29 * v66)) + v22;
          float v94 = (float)((float)((float)(v28 * v72) + (float)(v27 * v69)) + (float)(v29 * v74)) + v22;
          float v95 = (float)((float)((float)(v28 * v81) + (float)(v27 * v77)) + (float)(v29 * v83)) + v22;
          float v96 = (float)((float)((float)(v28 * v89) + (float)(v27 * v86)) + (float)(v29 * v92)) + v22;
          if (v93 < v22) {
            float v97 = v22;
          }
          else {
            float v97 = (float)((float)((float)(v28 * v64) + (float)(v27 * v62)) + (float)(v29 * v66)) + v22;
          }
          if (v93 <= v24) {
            float v98 = v97;
          }
          else {
            float v98 = v24;
          }
          *(_WORD *)unsigned int v42 = llroundf(v98) << v50;
          if (v94 < v22) {
            float v99 = v22;
          }
          else {
            float v99 = (float)((float)((float)(v28 * v72) + (float)(v27 * v69)) + (float)(v29 * v74)) + v22;
          }
          if (v94 > v24) {
            float v99 = v24;
          }
          *((_WORD *)v42 + 1) = llroundf(v99) << v50;
          if (v95 < v22) {
            float v100 = v22;
          }
          else {
            float v100 = (float)((float)((float)(v28 * v81) + (float)(v27 * v77)) + (float)(v29 * v83)) + v22;
          }
          if (v95 > v24) {
            float v100 = v24;
          }
          *(_WORD *)float32x2_t v55 = llroundf(v100) << v50;
          if (v96 < v22) {
            float v101 = v22;
          }
          else {
            float v101 = (float)((float)((float)(v28 * v89) + (float)(v27 * v86)) + (float)(v29 * v92)) + v22;
          }
          if (v96 > v24) {
            float v101 = v24;
          }
          *((_WORD *)v55 + 1) = llroundf(v101) << v50;
          float v102 = (float)((float)(v62 + v69) + v77) + v86;
          float v103 = (float)((float)(v64 + v72) + v81) + v89;
          float v104 = (float)((float)(v66 + v74) + v83) + v92;
          float v105 = (float)((float)(v23 + (float)(v102 * v30)) + (float)(v103 * v31)) + (float)(v104 * v32);
          float v106 = v26;
          if (v105 <= v26)
          {
            float v106 = (float)((float)(v23 + (float)(v102 * v30)) + (float)(v103 * v31)) + (float)(v104 * v32);
            if (v105 < v25) {
              float v106 = v25;
            }
          }
          float v107 = (_WORD *)(v49 + 2 * v53);
          float v108 = (float)((float)(v23 + (float)(v102 * v33)) + (float)(v103 * v34)) + (float)(v104 * v35);
          *float v107 = llroundf(v106) << v50;
          float v109 = v26;
          if (v108 <= v26)
          {
            float v109 = v108;
            if (v108 < v25) {
              float v109 = v25;
            }
          }
          v39 += 16;
          v54 += 16;
          v42 += 4;
          v55 += 4;
          v107[1] = llroundf(v109) << v50;
          v53 += 2;
        }
        while (v13 > v53);
      }
      uint64_t v39 = v52 + v18;
      unsigned int v42 = &v51[v19];
      v49 += v20;
      v12 += 2;
    }
    while (v15 > v12);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

int8x8_t *vt_Copy_RGhA_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v8 = 0;
  unint64_t v9 = *(void *)(a1 + 20);
  uint64_t v217 = *(void *)(a1 + 36);
  uint64_t v10 = *(void *)(a1 + 44);
  uint64_t v11 = *(void *)(a1 + 28);
  unint64_t v12 = *a1;
  unint64_t v13 = v11 * a2 / v12;
  uint64_t v14 = v13 + v10;
  unint64_t v15 = (v11 + v11 * a2) / v12;
  uint64_t v16 = v15 + v10;
  uint64_t v17 = *((void *)a1 + 14);
  uint64_t v18 = *((void *)a1 + 19);
  uint64_t v19 = *((void *)a1 + 15);
  uint64_t v20 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v21 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v22 = **((void **)a1 + 8);
  unint64_t v23 = *((void *)a1 + 13) * a2;
  uint64_t v24 = **((void **)a1 + 7);
  uint64_t v188 = *v21;
  uint64_t v25 = v21[1];
  uint64_t v26 = v21[2];
  uint64_t v27 = v20[1];
  uint64_t v215 = *v20;
  uint64_t result = (int8x8_t *)v20[2];
  int v225 = *(_DWORD *)(v18 + 154);
  unsigned int v29 = *(unsigned __int16 *)(v18 + 144);
  unsigned int v30 = *(unsigned __int16 *)(v18 + 146);
  unsigned int v31 = *(unsigned __int16 *)(v18 + 148);
  unsigned int v32 = *(unsigned __int16 *)(v18 + 150);
  unsigned int v33 = *(unsigned __int16 *)(v18 + 152);
  float v222 = *(float *)(v18 + 36);
  float v221 = *(float *)(v18 + 40);
  v34.i32[0] = *(_DWORD *)(v18 + 48);
  float v220 = *(float *)(v18 + 44);
  a5.i32[0] = *(_DWORD *)(v18 + 52);
  v35.i32[0] = *(_DWORD *)(v18 + 56);
  __int32 v37 = *(_DWORD *)(v18 + 60);
  unsigned __int32 v36 = *(_DWORD *)(v18 + 64);
  __int32 v38 = *(_DWORD *)(v18 + 68);
  float v219 = *(float *)(v18 + 72);
  _S4 = *(float *)(v18 + 76);
  _S5 = *(float *)(v18 + 80);
  _S6 = *(float *)(v18 + 84);
  _S7 = *(float *)(v18 + 88);
  uint64_t v43 = v23 / v12 + v19;
  uint64_t v186 = v25;
  uint64_t v187 = v22;
  _S16 = *(float *)(v18 + 92);
  _S17 = *(float *)(v18 + 96);
  _S18 = *(float *)(v18 + 100);
  _S19 = *(float *)(v18 + 104);
  _S20 = *(float *)(v18 + 108);
  _S21 = *(float *)(v18 + 112);
  _S22 = *(float *)(v18 + 116);
  _S23 = *(float *)(v18 + 120);
  memset(v224, 0, sizeof(v224));
  do
  {
    unsigned int v52 = 0;
    char v53 = *((unsigned char *)&v225 + v8);
    do
    {
      *((unsigned char *)v224 + 8 * (((_BYTE)v8 + (v52 >> 3)) & 0x1F) + v52) = v53 + 4 * v52;
      ++v52;
    }
    while (v52 != 8);
    ++v8;
  }
  while (v8 != 4);
  if (v15 != v13)
  {
    uint64_t v54 = 0;
    uint64_t v185 = v16 - v14;
    float v55 = (float)v29;
    float v56 = (float)v30;
    float v57 = (float)v31;
    float v223 = (float)v32;
    float v58 = (float)v33;
    uint64_t v59 = v18 + 16548;
    v34.i32[1] = v37;
    a5.i32[1] = v36;
    *(float32x2_t *)a6.f32 = vmul_f32(v34, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)a5.f32 = vmul_f32(*(float32x2_t *)a5.f32, (float32x2_t)0x3F0000003F000000);
    v35.i32[1] = v38;
    *(float32x2_t *)v7.f32 = vmul_f32(v35, (float32x2_t)0x3F0000003F000000);
    uint64_t v60 = v18 + 32932;
    uint64_t v61 = v18 + 164;
    _S0 = v222;
    __asm { FCVT            H0, S0 }
    short float v213 = *(short float *)&_S0;
    _S1 = v221;
    __asm { FCVT            H1, S1 }
    float16x8_t v211 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a6), 0);
    short float v212 = *(short float *)&_S1;
    _S1 = v220;
    __asm { FCVT            H1, S1 }
    float16x8_t v209 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    short float v210 = *(short float *)&_S1;
    _D0 = (int16x4_t)vcvt_f16_f32(v7);
    int32x4_t v70 = vdupq_lane_s32((int32x2_t)_D0, 0);
    __asm { FCVT            H0, S20 }
    short float v207 = *(short float *)_D0.i16;
    float16x8_t v208 = (float16x8_t)v70;
    __asm { FCVT            H0, S21 }
    short float v206 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S22 }
    short float v205 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S23 }
    short float v204 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v219;
    __asm { FCVT            H0, S0 }
    short float v203 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S4 }
    short float v202 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S5 }
    short float v201 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S6 }
    short float v200 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S7 }
    short float v199 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S16 }
    short float v198 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S17 }
    short float v197 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S18 }
    short float v196 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S19 }
    short float v195 = *(short float *)_D0.i16;
    *(short float *)_D0.i16 = (short float)v29;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v30;
    int16x8_t v72 = vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v31;
    int16x8_t v73 = vdupq_lane_s16(_D0, 0);
    float16x8_t v193 = (float16x8_t)v73;
    float16x8_t v194 = (float16x8_t)v72;
    *(short float *)v73.i16 = (short float)v32;
    float16x8_t v74 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v73.i8, 0);
    *(short float *)v73.i16 = (short float)v33;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)v73.i8, 0);
    float16x8_t v191 = (float16x8_t)_Q0;
    float16x8_t v192 = v74;
    if (result) {
      uint64_t result = (int8x8_t *)((char *)result + v26 * v43 + v17);
    }
    else {
      uint64_t result = 0;
    }
    if (v27) {
      uint64_t v76 = (unsigned char *)(v27 + v25 * v43 + v17);
    }
    else {
      uint64_t v76 = 0;
    }
    float v77 = (int8x8_t *)(v215 + v188 * v43 + v17);
    uint64_t v78 = v24 + v22 * v14 + 8 * v217;
    float v216 = a5.f32[0];
    unint64_t v218 = a6.i64[0];
    float v189 = a5.f32[1];
    float v190 = a6.f32[1];
    float v214 = v7.f32[0];
    v79.i64[0] = 0x9000900090009000;
    v79.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v9 < 8)
      {
        unint64_t v127 = 0;
        float v83 = v77;
        float v126 = v76;
        float v82 = result;
        float v81 = (const __int16 *)v78;
      }
      else
      {
        uint64_t v80 = 0;
        float v81 = (const __int16 *)v78;
        float v82 = result;
        float v83 = v77;
        do
        {
          int16x8x4_t v226 = vld4q_s16(v81);
          v81 += 32;
          if (v82) {
            int8x8_t v84 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16((float16x8_t)v226.val[3], (float16x8_t)vdupq_n_s16(0x5BF8u))));
          }
          else {
            int8x8_t v84 = 0;
          }
          v85.i64[0] = 0x7000700070007000;
          v85.i64[1] = 0x7000700070007000;
          uint16x8_t v86 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v226.val[0], v85), (float16x8_t)0), v79));
          float16x8_t v87 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v86.i8);
          uint32x4_t v88 = vmovl_high_u16(v86);
          uint64_t v89 = v88.u32[1];
          uint64_t v90 = v88.u32[0];
          uint64_t v91 = v88.u32[3];
          uint64_t v92 = v88.u32[2];
          uint16x8_t v93 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v226.val[1], v85), (float16x8_t)0), v79));
          float16x8_t v94 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v93.i8);
          v87.i16[0] = *(_WORD *)(v61 + 2 * v87.u32[0]);
          v87.i16[1] = *(_WORD *)(v61 + 2 * v87.u32[1]);
          v87.i16[2] = *(_WORD *)(v61 + 2 * v87.u32[2]);
          v87.i16[3] = *(_WORD *)(v61 + 2 * v87.u32[3]);
          v87.i16[4] = *(_WORD *)(v61 + 2 * v90);
          v87.i16[5] = *(_WORD *)(v61 + 2 * v89);
          v87.i16[6] = *(_WORD *)(v61 + 2 * v92);
          v87.i16[7] = *(_WORD *)(v61 + 2 * v91);
          uint32x4_t v95 = vmovl_high_u16(v93);
          v94.i16[0] = *(_WORD *)(v61 + 2 * v94.u32[0]);
          v94.i16[1] = *(_WORD *)(v61 + 2 * v94.u32[1]);
          v94.i16[2] = *(_WORD *)(v61 + 2 * v94.u32[2]);
          v94.i16[3] = *(_WORD *)(v61 + 2 * v94.u32[3]);
          v94.i16[4] = *(_WORD *)(v61 + 2 * v95.u32[0]);
          v94.i16[5] = *(_WORD *)(v61 + 2 * v95.u32[1]);
          v94.i16[6] = *(_WORD *)(v61 + 2 * v95.u32[2]);
          v94.i16[7] = *(_WORD *)(v61 + 2 * v95.u32[3]);
          uint16x8_t v96 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v226.val[2], v85), (float16x8_t)0), v79));
          float16x8_t v97 = (float16x8_t)vmovl_high_u16(v96);
          *(void *)&long long v98 = v97.u32[2];
          *((void *)&v98 + 1) = v97.u32[3];
          long long v99 = v98;
          *(void *)&long long v98 = v97.u32[0];
          *((void *)&v98 + 1) = v97.u32[1];
          uint32x4_t v100 = vmovl_u16(*(uint16x4_t *)v96.i8);
          v97.i16[0] = *(_WORD *)(v61 + 2 * v100.u32[0]);
          v97.i16[1] = *(_WORD *)(v61 + 2 * v100.u32[1]);
          v97.i16[2] = *(_WORD *)(v61 + 2 * v100.u32[2]);
          v97.i16[3] = *(_WORD *)(v61 + 2 * v100.u32[3]);
          v97.i16[4] = *(_WORD *)(v61 + 2 * v98);
          v97.i16[5] = *(_WORD *)(v61 + 2 * *((void *)&v98 + 1));
          v97.i16[6] = *(_WORD *)(v61 + 2 * v99);
          v97.i16[7] = *(_WORD *)(v61 + 2 * *((void *)&v99 + 1));
          uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v87, v207), v94, v206), v97, v205), vmaxq_f16(vmaxq_f16(v87, v94), v97), v204), (float16x8_t)0), v79));
          uint32x4_t v102 = vmovl_high_u16(v101);
          uint32x4_t v103 = vmovl_u16(*(uint16x4_t *)v101.i8);
          v104.i16[0] = *(_WORD *)(v59 + 2 * v103.u32[0]);
          v104.i16[1] = *(_WORD *)(v59 + 2 * v103.u32[1]);
          v104.i16[2] = *(_WORD *)(v59 + 2 * v103.u32[2]);
          v104.i16[3] = *(_WORD *)(v59 + 2 * v103.u32[3]);
          v104.i16[4] = *(_WORD *)(v59 + 2 * v102.u32[0]);
          v104.i16[5] = *(_WORD *)(v59 + 2 * v102.u32[1]);
          v104.i16[6] = *(_WORD *)(v59 + 2 * v102.u32[2]);
          v104.i16[7] = *(_WORD *)(v59 + 2 * v102.u32[3]);
          float16x8_t v105 = vmulq_f16(v87, v104);
          float16x8_t v106 = vmulq_f16(v94, v104);
          float16x8_t v107 = vmulq_f16(v97, v104);
          float16x8_t v108 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v105, v200), v106, v199), v107, v198);
          float16x8_t v109 = vmulq_n_f16(v107, v195);
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v105, v203), v106, v202), v107, v201), (float16x8_t)0), v79));
          uint32x4_t v111 = vmovl_high_u16(v110);
          uint32x4_t v112 = vmovl_u16(*(uint16x4_t *)v110.i8);
          v87.i16[7] = (unint64_t)v112.u32[1] >> 48;
          v87.i16[0] = *(_WORD *)(v60 + 2 * v112.u32[0]);
          v87.i16[1] = *(_WORD *)(v60 + 2 * v112.u32[1]);
          v87.i16[2] = *(_WORD *)(v60 + 2 * v112.u32[2]);
          v87.i16[3] = *(_WORD *)(v60 + 2 * v112.u32[3]);
          v87.i16[4] = *(_WORD *)(v60 + 2 * v111.u32[0]);
          v87.i16[5] = *(_WORD *)(v60 + 2 * v111.u32[1]);
          v87.i16[6] = *(_WORD *)(v60 + 2 * v111.u32[2]);
          float16x8_t v74 = v87;
          v74.i16[7] = *(_WORD *)(v60 + 2 * v111.u32[3]);
          float16x8_t v113 = vmlaq_n_f16(v109, v106, v196);
          uint16x8_t v114 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v108, (float16x8_t)0), v79));
          uint32x4_t v115 = vmovl_high_u16(v114);
          int16x8_t v116 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v114.i8);
          *(void *)&long long v98 = v115.u32[2];
          *((void *)&v98 + 1) = v115.u32[3];
          long long v117 = v98;
          *(void *)&long long v98 = v115.u32[0];
          *((void *)&v98 + 1) = v115.u32[1];
          long long v118 = v98;
          *((void *)&v98 + 1) = v116.u32[3];
          v116.i16[7] = (unint64_t)v116.u32[3] >> 48;
          v116.i16[0] = *(_WORD *)(v60 + 2 * v116.u32[0]);
          v116.i16[1] = *(_WORD *)(v60 + 2 * v116.u32[1]);
          v116.i16[2] = *(_WORD *)(v60 + 2 * v116.u32[2]);
          v116.i16[3] = *(_WORD *)(v60 + 2 * *((void *)&v98 + 1));
          v116.i16[4] = *(_WORD *)(v60 + 2 * v118);
          v116.i16[5] = *(_WORD *)(v60 + 2 * *((void *)&v118 + 1));
          v116.i16[6] = *(_WORD *)(v60 + 2 * v117);
          float16x8_t v119 = vmlaq_n_f16(v113, v105, v197);
          float16x8_t v120 = (float16x8_t)v116;
          v120.i16[7] = *(_WORD *)(v60 + 2 * *((void *)&v117 + 1));
          uint16x8_t v121 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, (float16x8_t)0), v79));
          uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v121.i8);
          uint32x4_t v123 = vmovl_high_u16(v121);
          *(void *)&long long v98 = v123.u32[2];
          *((void *)&v98 + 1) = v123.u32[3];
          long long v124 = v98;
          *((void *)&v98 + 1) = v122.u32[3];
          _Q8.i16[7] = (unint64_t)v122.u32[3] >> 48;
          _Q8.i16[0] = *(_WORD *)(v60 + 2 * v122.u32[0]);
          _Q8.i16[1] = *(_WORD *)(v60 + 2 * v122.u32[1]);
          _Q8.i16[2] = *(_WORD *)(v60 + 2 * v122.u32[2]);
          _Q8.i16[3] = *(_WORD *)(v60 + 2 * *((void *)&v98 + 1));
          _Q8.i16[4] = *(_WORD *)(v60 + 2 * v123.u32[0]);
          _Q8.i16[5] = *(_WORD *)(v60 + 2 * v123.u32[1]);
          _Q8.i16[6] = *(_WORD *)(v60 + 2 * v124);
          float16x8_t v125 = (float16x8_t)_Q8;
          v125.i16[7] = *(_WORD *)(v60 + 2 * *((void *)&v124 + 1));
          *v83++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v71, v74, v213), v120, v212), v125, v210), v71), v193)));
          _Q0 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v87, v116), (float16x8_t)vuzp2q_s16((int16x8_t)v74, (int16x8_t)v120));
          v74.i32[1] = v191.i32[1];
          *(int8x8_t *)_Q0.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v194, v211, (float16x8_t)vzip1q_s16(_Q0, _Q0)), v209, (float16x8_t)vzip2q_s16(_Q0, _Q0)), v208, vaddq_f16((float16x8_t)vtrn1q_s16(_Q8, _Q8), (float16x8_t)vtrn2q_s16((int16x8_t)v125, (int16x8_t)v125))), v192), v191)));
          *(void *)&v76[v80] = _Q0.i64[0];
          if (v82) {
            *v82++ = v84;
          }
          v80 += 8;
        }
        while ((int)v80 < (int)v9 - 7);
        float v126 = &v76[v80];
        unint64_t v127 = v9 & 0xFFFFFFF8;
      }
      if (v9 > v127)
      {
        float v128 = v81 + 4;
        do
        {
          float v129 = (__int16 *)&v128[v225];
          _Q0.i16[0] = *(v129 - 4);
          float v130 = (__int16 *)&v128[BYTE1(v225)];
          _Q0.i16[1] = *(v130 - 4);
          float32x2_t v131 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q0.i8), v131), 0), v131)));
          _D0.i16[0] = *(_WORD *)(v61 + 2 * _D0.u32[0]);
          float v133 = (__int16 *)&v128[BYTE2(v225)];
          v74.i16[0] = *(v133 - 4);
          __asm { FCVT            S12, H0 }
          _D0.i16[0] = *(_WORD *)(v61 + 2 * _D0.u32[1]);
          __asm { FCVT            S13, H0 }
          v74.i16[1] = *v129;
          *(float32x2_t *)_Q0.i8 = vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)v74.i8), v131), 0), v131));
          int32x2_t v136 = vcvt_s32_f32(*(float32x2_t *)_Q0.i8);
          _Q0.i16[0] = *(_WORD *)(v61 + 2 * v136.u32[0]);
          __asm { FCVT            S0, H0 }
          float v137 = (float)((float)((float)(_S21 * _S13) + (float)(_S20 * _S12)) + (float)(_S22 * *(float *)_Q0.i32))
               + (float)(_S23 * fmaxf(_S12, fmaxf(_S13, *(float *)_Q0.i32)));
          float v138 = 8191.0;
          if (v137 <= 8191.0)
          {
            float v138 = v137;
            if (v137 < 0.0) {
              float v138 = 0.0;
            }
          }
          _Q8.i16[0] = *v130;
          _H2 = *(_WORD *)(v61 + 2 * v136.u32[1]);
          _Q8.i16[1] = *v133;
          __asm { FCVT            S2, H2 }
          *(float32x2_t *)_Q8.i8 = vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q8.i8), v131), 0);
          _D31 = vcvt_s32_f32(vrnda_f32(vminnm_f32(*(float32x2_t *)_Q8.i8, v131)));
          _D31.i16[0] = *(_WORD *)(v61 + 2 * _D31.u32[0]);
          __asm { FCVT            S31, H31 }
          _Q8.i16[0] = *(_WORD *)(v61 + 2 * _D31.u32[1]);
          __asm { FCVT            S8, H8 }
          float v143 = (float)((float)((float)(_S21 * _S31) + (float)(_S20 * _S2)) + (float)(_S22 * *(float *)_Q8.i32))
               + (float)(_S23 * fmaxf(_S2, fmaxf(_S31, *(float *)_Q8.i32)));
          float v144 = 8191.0;
          if (v143 <= 8191.0)
          {
            float v144 = v143;
            if (v143 < 0.0) {
              float v144 = 0.0;
            }
          }
          if (v82)
          {
            float v145 = &v128[HIBYTE(v225)];
            _H14 = *(v145 - 4);
            __asm { FCVT            S14, H14 }
            _H27 = *v145;
            __asm { FCVT            S27, H27 }
            __int8 v150 = llroundf(_S14 * 255.0);
            __int8 v151 = llroundf(_S27 * 255.0);
          }
          else
          {
            __int8 v150 = 0;
            __int8 v151 = 0;
          }
          _H1 = *(_WORD *)(v59 + 2 * llroundf(v138));
          __asm { FCVT            S1, H1 }
          float v154 = _S12 * _S1;
          float v155 = _S13 * _S1;
          float v156 = *(float *)_Q0.i32 * _S1;
          LOWORD(_S1) = *(_WORD *)(v59 + 2 * llroundf(v144));
          __asm { FCVT            S1, H1 }
          _S2 = _S2 * _S1;
          _S31 = _S31 * _S1;
          float v160 = *(float *)_Q8.i32 * _S1;
          float v161 = (float)((float)(_S4 * v155) + (float)(v154 * v219)) + (float)(v156 * _S5);
          float v162 = (float)((float)(_S7 * v155) + (float)(v154 * _S6)) + (float)(v156 * _S16);
          _S0 = (float)((float)(_S18 * v155) + (float)(v154 * _S17)) + (float)(v156 * _S19);
          float v164 = (float)((float)(_S4 * _S31) + (float)(_S2 * v219)) + (float)(v160 * _S5);
          _S27 = (float)((float)(_S7 * _S31) + (float)(_S2 * _S6)) + (float)(v160 * _S16);
          _S1 = (float)((float)(_S18 * _S31) + (float)(_S2 * _S17)) + (float)(v160 * _S19);
          LOWORD(_S2) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          LOWORD(_S31) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S31, H31
          }
          LOWORD(_S0) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          unsigned int v169 = llroundf(fminf(fmaxf(v164, 0.0), 8191.0));
          __asm { FCVT            S3, H0 }
          LOWORD(_S0) = *(_WORD *)(v60 + 2 * v169);
          __asm { FCVT            S0, H0 }
          LOWORD(_S27) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S27, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          LOWORD(_S1) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S30, H1 }
          float v174 = (float)((float)((float)(v221 * _S31) + (float)(v222 * _S2)) + (float)(v220 * _S3)) + v55;
          float v175 = (float)((float)((float)(v221 * _S27) + (float)(v222 * _S0)) + (float)(v220 * _S30)) + v55;
          if (v174 < v55) {
            float v176 = v55;
          }
          else {
            float v176 = (float)((float)((float)(v221 * _S31) + (float)(v222 * _S2)) + (float)(v220 * _S3)) + v55;
          }
          if (v174 <= v57) {
            float v177 = v176;
          }
          else {
            float v177 = v57;
          }
          v83->i8[0] = llroundf(v177);
          if (v175 < v55) {
            float v178 = v55;
          }
          else {
            float v178 = (float)((float)((float)(v221 * _S27) + (float)(v222 * _S0)) + (float)(v220 * _S30)) + v55;
          }
          if (v175 > v57) {
            float v178 = v57;
          }
          v83->i8[1] = llroundf(v178);
          float v179 = _S2 + _S0;
          v74.i32[1] = HIDWORD(v218);
          *(float *)v74.i32 = _S31 + _S27;
          float v180 = _S3 + _S30;
          float v181 = (float)((float)(v56 + (float)(v179 * *(float *)&v218)) + (float)((float)(_S31 + _S27) * v216))
               + (float)((float)(_S3 + _S30) * v214);
          float v182 = (float)v33;
          if (v181 <= v58)
          {
            float v182 = (float)((float)(v56 + (float)(v179 * *(float *)&v218)) + (float)(*(float *)v74.i32 * v216))
                 + (float)(v180 * v214);
            if (v181 < v223) {
              float v182 = (float)v32;
            }
          }
          float v183 = (float)((float)(v56 + (float)(v179 * v190)) + (float)(*(float *)v74.i32 * v189))
               + (float)(v180 * v7.f32[1]);
          *float v126 = llroundf(v182);
          float v184 = (float)v33;
          if (v183 <= v58)
          {
            float v184 = v183;
            if (v183 < v223) {
              float v184 = (float)v32;
            }
          }
          v126[1] = llroundf(v184);
          if (v82)
          {
            v82->i8[0] = v150;
            v82->i8[1] = v151;
            float v82 = (int8x8_t *)((char *)v82 + 2);
          }
          v127 += 2;
          v128 += 8;
          float v83 = (int8x8_t *)((char *)v83 + 2);
          v126 += 2;
        }
        while (v9 > v127);
      }
      v78 += v187;
      float v77 = (int8x8_t *)((char *)v77 + v188);
      v76 += v186;
      uint64_t result = (int8x8_t *)((char *)result + v26);
      ++v54;
    }
    while (v54 != v185);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_422vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, double _D3)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(uint64_t **)(result + 136);
    uint64_t v18 = *(void **)(result + 56);
    uint64_t v19 = **(void **)(result + 64);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    LOWORD(a3) = *(_WORD *)(v16 + 144);
    float v23 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v16 + 146);
    float v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 148);
    float v25 = (float)LODWORD(a5);
    LOWORD(_D3) = *(_WORD *)(v16 + 150);
    float v26 = (float)LODWORD(_D3);
    LOWORD(_D3) = *(_WORD *)(v16 + 152);
    float v27 = (float)LODWORD(_D3);
    float v129 = *(float *)(v16 + 36);
    float v130 = v26;
    float v28 = *(float *)(v16 + 44);
    float v127 = *(float *)(v16 + 48) * 0.5;
    float v128 = *(float *)(v16 + 40);
    float v125 = *(float *)(v16 + 56) * 0.5;
    float v126 = *(float *)(v16 + 52) * 0.5;
    float v123 = *(float *)(v16 + 64) * 0.5;
    float v124 = *(float *)(v16 + 60) * 0.5;
    float v29 = *(float *)(v16 + 72);
    float v122 = *(float *)(v16 + 68) * 0.5;
    float v30 = *(float *)(v16 + 76);
    float v31 = *(float *)(v16 + 80);
    float v32 = *(float *)(v16 + 84);
    float v33 = *(float *)(v16 + 88);
    float v34 = *(float *)(v16 + 92);
    float v35 = *(float *)(v16 + 96);
    float v36 = *(float *)(v16 + 100);
    float v37 = *(float *)(v16 + 104);
    uint64_t v38 = v16 + 164;
    uint64_t v39 = v16 + 16548;
    uint64_t v40 = v16 + 32932;
    float v42 = *(float *)(v16 + 108);
    float v41 = *(float *)(v16 + 112);
    float v43 = *(float *)(v16 + 116);
    float v44 = *(float *)(v16 + 120);
    uint64_t v45 = *(uint64_t **)(result + 128);
    uint64_t v46 = *(void *)(result + 112);
    unint64_t v47 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
    uint64_t v48 = *(void *)(result + 36);
    uint64_t result = *(unsigned __int8 *)(v16 + 157);
    uint64_t v49 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v50 = *(unsigned __int8 *)(v16 + 155);
    uint64_t v51 = *(unsigned __int8 *)(v16 + 154);
    uint64_t v52 = v45[2];
    if (v52) {
      char v53 = (unsigned char *)(v52 + v47 * v22 + v46);
    }
    else {
      char v53 = 0;
    }
    uint64_t v55 = *v45;
    uint64_t v54 = v45[1];
    uint64_t v56 = v54 + v47 * v21 + v46;
    if (!v54) {
      uint64_t v56 = 0;
    }
    float v57 = (unsigned char *)(v55 + v47 * v20 + v46);
    float32x2_t v58 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v59 = *v18 + v19 * v14 + 8 * v48;
    do
    {
      if (v13)
      {
        unint64_t v60 = 0;
        uint64_t v61 = v53;
        float v62 = v57;
        uint64_t v63 = v59;
        do
        {
          float v64 = v24;
          LOWORD(_D3) = *(_WORD *)(v63 + 2 * v51);
          v6.i16[0] = *(_WORD *)(v63 + 2 * v49);
          uint64_t v65 = v63 + 8;
          WORD1(_D3) = *(_WORD *)(v63 + 2 * v50);
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D3), v58), 0), v58)));
          _D3.i16[0] = *(_WORD *)(v38 + 2 * _D3.u32[0]);
          __asm { FCVT            S15, H3 }
          _D3.i16[0] = *(_WORD *)(v38 + 2 * _D3.u32[1]);
          __asm { FCVT            S16, H3 }
          v6.i16[1] = *(_WORD *)(v63 + 8 + 2 * v51);
          _D3 = COERCE_DOUBLE(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v6), v58), 0), v58)));
          int32x2_t v73 = vcvt_s32_f32(*(float32x2_t *)&_D3);
          LOWORD(_D3) = *(_WORD *)(v38 + 2 * v73.u32[0]);
          __asm { FCVT            S17, H3 }
          float v75 = fmaxf(_S15, fmaxf(_S16, _S17));
          float v76 = (float)((float)((float)(v41 * _S16) + (float)(v42 * _S15)) + (float)(v43 * _S17)) + (float)(v44 * v75);
          LODWORD(_D3) = 1174403072;
          if (v76 <= 8191.0)
          {
            *(float *)&_D3 = (float)((float)((float)(v41 * _S16) + (float)(v42 * _S15)) + (float)(v43 * _S17))
                           + (float)(v44 * v75);
            if (v76 < 0.0) {
              _D3 = 0.0;
            }
          }
          _D18.i16[0] = *(_WORD *)(v65 + 2 * v50);
          _H19 = *(_WORD *)(v38 + 2 * v73.u32[1]);
          _D18.i16[1] = *(_WORD *)(v65 + 2 * v49);
          __asm { FCVT            S19, H19 }
          _D18 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D18), v58), 0), v58)));
          _D18.i16[0] = *(_WORD *)(v38 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v38 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          float v81 = (float)((float)((float)(v41 * _S20) + (float)(v42 * _S19)) + (float)(v43 * _S22))
              + (float)(v44 * fmaxf(_S19, fmaxf(_S20, _S22)));
          _D18.i32[0] = 1174403072;
          if (v81 <= 8191.0)
          {
            *(float *)_D18.i32 = v81;
            if (v81 < 0.0) {
              _D18 = 0;
            }
          }
          if (v61)
          {
            _H13 = *(_WORD *)(v63 + 2 * result);
            __asm { FCVT            S13, H13 }
            _H1 = *(_WORD *)(v65 + 2 * result);
            __asm { FCVT            S1, H1 }
            char v86 = llroundf(_S13 * 255.0);
            char v87 = llroundf(_S1 * 255.0);
          }
          else
          {
            char v86 = 0;
            char v87 = 0;
          }
          float v24 = v64;
          _H1 = *(_WORD *)(v39 + 2 * llroundf(*(float *)&_D3));
          __asm { FCVT            S1, H1 }
          float v90 = _S15 * _S1;
          float v91 = _S16 * _S1;
          float v92 = _S17 * _S1;
          _H16 = *(_WORD *)(v39 + 2 * llroundf(*(float *)_D18.i32));
          __asm { FCVT            S16, H16 }
          _S17 = _S19 * _S16;
          _S18 = _S20 * _S16;
          float v97 = _S22 * _S16;
          float v98 = (float)((float)(v30 * v91) + (float)(v90 * v29)) + (float)(v92 * v31);
          float v99 = (float)((float)(v33 * v91) + (float)(v90 * v32)) + (float)(v92 * v34);
          _S1 = (float)((float)(v36 * v91) + (float)(v90 * v35)) + (float)(v92 * v37);
          _S3 = (float)((float)(v30 * _S18) + (float)(_S17 * v29)) + (float)(v97 * v31);
          _S5 = (float)((float)(v33 * _S18) + (float)(_S17 * v32)) + (float)(v97 * v34);
          _S16 = (float)((float)(v36 * _S18) + (float)(_S17 * v35)) + (float)(v97 * v37);
          LOWORD(_S17) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          LOWORD(_S18) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S18, H18
          }
          LOWORD(_S1) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S16) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S19, H16 }
          float v110 = (float)((float)((float)(v128 * _S18) + (float)(v129 * _S17)) + (float)(v28 * _S1)) + v23;
          float v111 = (float)((float)((float)(v128 * _S5) + (float)(v129 * _S3)) + (float)(v28 * _S19)) + v23;
          if (v110 < v23) {
            float v112 = v23;
          }
          else {
            float v112 = (float)((float)((float)(v128 * _S18) + (float)(v129 * _S17)) + (float)(v28 * _S1)) + v23;
          }
          if (v110 <= v25) {
            float v113 = v112;
          }
          else {
            float v113 = v25;
          }
          *float v62 = llroundf(v113);
          if (v111 < v23) {
            float v114 = v23;
          }
          else {
            float v114 = (float)((float)((float)(v128 * _S5) + (float)(v129 * _S3)) + (float)(v28 * _S19)) + v23;
          }
          if (v111 > v25) {
            float v114 = v25;
          }
          v62[1] = llroundf(v114);
          float v115 = _S17 + _S3;
          float v116 = _S18 + _S5;
          float v117 = _S1 + _S19;
          float v118 = (float)((float)(v64 + (float)(v115 * v127)) + (float)((float)(_S18 + _S5) * v126))
               + (float)((float)(_S1 + _S19) * v125);
          float v119 = v27;
          if (v118 <= v27)
          {
            float v119 = v118;
            if (v118 < v130) {
              float v119 = v130;
            }
          }
          float v120 = (float)((float)(v64 + (float)(v115 * v124)) + (float)(v116 * v123)) + (float)(v117 * v122);
          *(unsigned char *)(v56 + v60) = llroundf(v119);
          float v121 = v27;
          if (v120 <= v27)
          {
            float v121 = v120;
            if (v120 < v130) {
              float v121 = v130;
            }
          }
          *(unsigned char *)(v56 + v60 + 1) = llroundf(v121);
          if (v61)
          {
            *uint64_t v61 = v86;
            v61[1] = v87;
            v61 += 2;
          }
          v63 += 16;
          v60 += 2;
          v62 += 2;
        }
        while (v13 > v60);
      }
      v59 += v19;
      v57 += v20;
      v56 += v21;
      v53 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

unsigned char *vt_Copy_RGhA_TRC_Mat_TRC_422vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v5 = 0;
  unint64_t v6 = *(void *)(a1 + 20);
  uint64_t v183 = *(void *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 44);
  uint64_t v8 = *(void *)(a1 + 28);
  unint64_t v9 = *a1;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = v10 + v7;
  unint64_t v12 = (v8 + v8 * a2) / v9;
  uint64_t v13 = v12 + v7;
  uint64_t v14 = *((void *)a1 + 14);
  uint64_t v15 = *((void *)a1 + 19);
  unint64_t v16 = *((void *)a1 + 13) * a2;
  uint64_t v17 = *((void *)a1 + 15);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v20 = **((void **)a1 + 8);
  uint64_t v182 = **((void **)a1 + 7);
  uint64_t v21 = *v19;
  uint64_t v22 = v19[1];
  uint64_t v23 = v19[2];
  uint64_t v181 = *v18;
  uint64_t result = (unsigned char *)v18[1];
  uint64_t v25 = v18[2];
  int v185 = *(_DWORD *)(v15 + 154);
  unsigned int v26 = *(unsigned __int16 *)(v15 + 144);
  unsigned int v27 = *(unsigned __int16 *)(v15 + 146);
  unsigned int v28 = *(unsigned __int16 *)(v15 + 148);
  unsigned int v29 = *(unsigned __int16 *)(v15 + 150);
  unsigned int v30 = *(unsigned __int16 *)(v15 + 152);
  _S0 = *(float *)(v15 + 36);
  _S1 = *(float *)(v15 + 40);
  _S2 = *(float *)(v15 + 44);
  v34.i32[0] = *(_DWORD *)(v15 + 48);
  _Q26.i32[0] = *(_DWORD *)(v15 + 52);
  _Q27.i32[0] = *(_DWORD *)(v15 + 56);
  __int32 v36 = *(_DWORD *)(v15 + 60);
  __int32 v35 = *(_DWORD *)(v15 + 64);
  __int32 v38 = *(_DWORD *)(v15 + 68);
  _S3 = *(float *)(v15 + 72);
  uint64_t v39 = v16 / v9 + v17;
  uint64_t v40 = v20 * v11;
  _S4 = *(float *)(v15 + 76);
  _S5 = *(float *)(v15 + 80);
  _S6 = *(float *)(v15 + 84);
  _S7 = *(float *)(v15 + 88);
  _S16 = *(float *)(v15 + 92);
  _S17 = *(float *)(v15 + 96);
  _S18 = *(float *)(v15 + 100);
  _S19 = *(float *)(v15 + 104);
  memset(v184, 0, sizeof(v184));
  do
  {
    unsigned int v49 = 0;
    char v50 = *((unsigned char *)&v185 + v5);
    do
    {
      *((unsigned char *)v184 + 8 * (((_BYTE)v5 + (v49 >> 3)) & 0x1F) + v49) = v50 + 4 * v49;
      ++v49;
    }
    while (v49 != 8);
    ++v5;
  }
  while (v5 != 4);
  if (v12 != v10)
  {
    uint64_t v51 = 0;
    uint64_t v52 = v13 - v11;
    uint64_t v53 = v15 + 16548;
    uint64_t v54 = v15 + 164;
    float v55 = (float)v26;
    float v56 = (float)v27;
    float v57 = (float)v28;
    float v58 = (float)v29;
    float v59 = (float)v30;
    v34.i32[1] = v36;
    *(float32x2_t *)v2.f32 = vmul_f32(v34, (float32x2_t)0x3F0000003F000000);
    _Q26.i32[1] = v35;
    *(float32x2_t *)_Q26.i8 = vmul_f32(*(float32x2_t *)_Q26.i8, (float32x2_t)0x3F0000003F000000);
    _Q27.i32[1] = v38;
    *(float32x2_t *)_Q27.i8 = vmul_f32(*(float32x2_t *)_Q27.i8, (float32x2_t)0x3F0000003F000000);
    __asm { FCVT            H9, S0 }
    float16x8_t v179 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v2), 0);
    short float v180 = _H9;
    __asm { FCVT            H9, S1 }
    float16x8_t v177 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)_Q26), 0);
    short float v178 = _H9;
    __asm { FCVT            H9, S2 }
    int32x4_t v67 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)_Q27), 0);
    float16x8_t v175 = (float16x8_t)v67;
    short float v176 = _H9;
    __asm { FCVT            H9, S3 }
    short float v174 = _H9;
    __asm { FCVT            H9, S4 }
    short float v173 = _H9;
    __asm { FCVT            H9, S5 }
    short float v172 = _H9;
    __asm { FCVT            H9, S6 }
    short float v171 = _H9;
    __asm { FCVT            H9, S7 }
    short float v170 = _H9;
    __asm { FCVT            H9, S16 }
    short float v169 = _H9;
    __asm { FCVT            H9, S17 }
    short float v168 = _H9;
    __asm { FCVT            H9, S18 }
    short float v167 = _H9;
    __asm { FCVT            H9, S19 }
    *(short float *)v67.i16 = (short float)v26;
    float16x8_t v77 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v67.i8, 0);
    *(short float *)v67.i16 = (short float)v27;
    int16x8_t v78 = vdupq_lane_s16(*(int16x4_t *)v67.i8, 0);
    float16x8_t v166 = (float16x8_t)v78;
    *(short float *)v78.i16 = (short float)v28;
    int16x8_t v79 = vdupq_lane_s16(*(int16x4_t *)v78.i8, 0);
    *(short float *)v78.i16 = (short float)v29;
    int16x8_t v80 = vdupq_lane_s16(*(int16x4_t *)v78.i8, 0);
    float16x8_t v164 = (float16x8_t)v80;
    float16x8_t v165 = (float16x8_t)v79;
    *(short float *)v80.i16 = (short float)v30;
    _Q25 = vdupq_lane_s16(*(int16x4_t *)v80.i8, 0);
    float16x8_t v163 = (float16x8_t)_Q25;
    if (v25) {
      float v82 = (int8x8_t *)(v25 + v23 * v39 + v14);
    }
    else {
      float v82 = 0;
    }
    if (result) {
      result += v22 * v39 + v14;
    }
    else {
      uint64_t result = 0;
    }
    float v83 = (int8x8_t *)(v181 + v21 * v39 + v14);
    uint64_t v84 = v182 + v40 + 8 * v183;
    uint64_t v85 = _Q26.i64[0];
    uint64_t v86 = _Q27.i64[0];
    v87.i64[0] = 0x7000700070007000;
    v87.i64[1] = 0x7000700070007000;
    v88.i64[0] = 0x9000900090009000;
    v88.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v6 < 8)
      {
        unint64_t v127 = 0;
        float v126 = result;
        float v92 = v82;
        float v91 = v83;
        float v90 = (const __int16 *)v84;
      }
      else
      {
        uint64_t v89 = 0;
        float v90 = (const __int16 *)v84;
        float v91 = v83;
        float v92 = v82;
        do
        {
          int16x8x4_t v186 = vld4q_s16(v90);
          v90 += 32;
          if (v92) {
            int8x8_t v93 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16((float16x8_t)v186.val[3], (float16x8_t)vdupq_n_s16(0x5BF8u))));
          }
          else {
            int8x8_t v93 = 0;
          }
          float16x8_t v94 = vmulq_f16((float16x8_t)v186.val[1], v87);
          float16x8_t v95 = vmulq_f16((float16x8_t)v186.val[2], v87);
          uint16x8_t v96 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v186.val[0], v87), (float16x8_t)0), v88));
          float16x8_t v97 = (float16x8_t)vmovl_high_u16(v96);
          *(void *)&long long v98 = v97.u32[2];
          *((void *)&v98 + 1) = v97.u32[3];
          long long v99 = v98;
          *(void *)&long long v98 = v97.u32[0];
          *((void *)&v98 + 1) = v97.u32[1];
          uint32x4_t v100 = vmovl_u16(*(uint16x4_t *)v96.i8);
          v97.i16[0] = *(_WORD *)(v54 + 2 * v100.u32[0]);
          v97.i16[1] = *(_WORD *)(v54 + 2 * v100.u32[1]);
          v97.i16[2] = *(_WORD *)(v54 + 2 * v100.u32[2]);
          v97.i16[3] = *(_WORD *)(v54 + 2 * v100.u32[3]);
          v97.i16[4] = *(_WORD *)(v54 + 2 * v98);
          v97.i16[5] = *(_WORD *)(v54 + 2 * *((void *)&v98 + 1));
          v97.i16[6] = *(_WORD *)(v54 + 2 * v99);
          v97.i16[7] = *(_WORD *)(v54 + 2 * *((void *)&v99 + 1));
          uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v94, (float16x8_t)0), v88));
          float16x8_t v102 = (float16x8_t)vmovl_high_u16(v101);
          *(void *)&long long v98 = v102.u32[2];
          *((void *)&v98 + 1) = v102.u32[3];
          long long v103 = v98;
          *(void *)&long long v98 = v102.u32[0];
          *((void *)&v98 + 1) = v102.u32[1];
          uint32x4_t v104 = vmovl_u16(*(uint16x4_t *)v101.i8);
          v102.i16[0] = *(_WORD *)(v54 + 2 * v104.u32[0]);
          v102.i16[1] = *(_WORD *)(v54 + 2 * v104.u32[1]);
          v102.i16[2] = *(_WORD *)(v54 + 2 * v104.u32[2]);
          v102.i16[3] = *(_WORD *)(v54 + 2 * v104.u32[3]);
          v102.i16[4] = *(_WORD *)(v54 + 2 * v98);
          v102.i16[5] = *(_WORD *)(v54 + 2 * *((void *)&v98 + 1));
          v102.i16[6] = *(_WORD *)(v54 + 2 * v103);
          v102.i16[7] = *(_WORD *)(v54 + 2 * *((void *)&v103 + 1));
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v95, (float16x8_t)0), v88));
          uint32x4_t v106 = vmovl_high_u16(v105);
          float16x8_t v107 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v105.i8);
          v107.i16[0] = *(_WORD *)(v54 + 2 * v107.u32[0]);
          v107.i16[1] = *(_WORD *)(v54 + 2 * v107.u32[1]);
          v107.i16[2] = *(_WORD *)(v54 + 2 * v107.u32[2]);
          v107.i16[3] = *(_WORD *)(v54 + 2 * v107.u32[3]);
          v107.i16[4] = *(_WORD *)(v54 + 2 * v106.u32[0]);
          v107.i16[5] = *(_WORD *)(v54 + 2 * v106.u32[1]);
          v107.i16[6] = *(_WORD *)(v54 + 2 * v106.u32[2]);
          v107.i16[7] = *(_WORD *)(v54 + 2 * v106.u32[3]);
          float16x8_t v108 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v97, v171), v102, v170), v107, v169);
          float16x8_t v109 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v107, _H9), v102, v167), v97, v168);
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v97, v174), v102, v173), v107, v172), (float16x8_t)0), v88));
          uint32x4_t v111 = vmovl_high_u16(v110);
          *(void *)&long long v98 = v111.u32[2];
          *((void *)&v98 + 1) = v111.u32[3];
          long long v112 = v98;
          *(void *)&long long v98 = v111.u32[0];
          *((void *)&v98 + 1) = v111.u32[1];
          uint32x4_t v113 = vmovl_u16(*(uint16x4_t *)v110.i8);
          v111.i16[7] = (unint64_t)v113.u32[1] >> 48;
          _Q26.i16[0] = *(_WORD *)(v53 + 2 * v113.u32[0]);
          _Q26.i16[1] = *(_WORD *)(v53 + 2 * v113.u32[1]);
          _Q26.i16[2] = *(_WORD *)(v53 + 2 * v113.u32[2]);
          _Q26.i16[3] = *(_WORD *)(v53 + 2 * v113.u32[3]);
          _Q26.i16[4] = *(_WORD *)(v53 + 2 * v98);
          _Q26.i16[5] = *(_WORD *)(v53 + 2 * *((void *)&v98 + 1));
          _Q26.i16[6] = *(_WORD *)(v53 + 2 * v112);
          float v114 = (__int16 *)(v53 + 2 * *((void *)&v112 + 1));
          uint16x8_t v115 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v108, (float16x8_t)0), v88));
          float16x8_t v116 = (float16x8_t)vmovl_high_u16(v115);
          *(void *)&long long v98 = v116.u32[2];
          *((void *)&v98 + 1) = v116.u32[3];
          long long v117 = v98;
          *(void *)&long long v98 = v116.u32[0];
          *((void *)&v98 + 1) = v116.u32[1];
          uint32x4_t v118 = vmovl_u16(*(uint16x4_t *)v115.i8);
          v116.i16[7] = (unint64_t)v118.u32[1] >> 48;
          v116.i16[0] = *(_WORD *)(v53 + 2 * v118.u32[0]);
          v116.i16[1] = *(_WORD *)(v53 + 2 * v118.u32[1]);
          v116.i16[2] = *(_WORD *)(v53 + 2 * v118.u32[2]);
          v116.i16[3] = *(_WORD *)(v53 + 2 * v118.u32[3]);
          v116.i16[4] = *(_WORD *)(v53 + 2 * v98);
          v116.i16[5] = *(_WORD *)(v53 + 2 * *((void *)&v98 + 1));
          v116.i16[6] = *(_WORD *)(v53 + 2 * v117);
          float16x8_t v119 = (float16x8_t)vuzp1q_s16((int16x8_t)_Q26, (int16x8_t)v116);
          _Q26.i16[7] = *v114;
          v116.i16[7] = *(_WORD *)(v53 + 2 * *((void *)&v117 + 1));
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v109, (float16x8_t)0), v88));
          uint32x4_t v121 = vmovl_high_u16(v120);
          *(void *)&long long v98 = v121.u32[2];
          *((void *)&v98 + 1) = v121.u32[3];
          long long v122 = v98;
          *(void *)&long long v98 = v121.u32[0];
          *((void *)&v98 + 1) = v121.u32[1];
          long long v123 = v98;
          float16x8_t v124 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v120.i8);
          *((void *)&v98 + 1) = v124.u32[3];
          v124.i16[7] = (unint64_t)v124.u32[1] >> 48;
          v124.i16[0] = *(_WORD *)(v53 + 2 * v124.u32[0]);
          v124.i16[1] = *(_WORD *)(v53 + 2 * v124.u32[1]);
          v124.i16[2] = *(_WORD *)(v53 + 2 * v124.u32[2]);
          v124.i16[3] = *(_WORD *)(v53 + 2 * *((void *)&v98 + 1));
          v124.i16[4] = *(_WORD *)(v53 + 2 * v123);
          v124.i16[5] = *(_WORD *)(v53 + 2 * *((void *)&v123 + 1));
          v124.i16[6] = *(_WORD *)(v53 + 2 * v122);
          float16x8_t v125 = (float16x8_t)vtrn1q_s16((int16x8_t)v124, (int16x8_t)v124);
          v124.i16[7] = *(_WORD *)(v53 + 2 * *((void *)&v122 + 1));
          *v91++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v77, _Q26, v180), v116, v178), v124, v176), v77), v165)));
          _Q25 = (int16x8_t)vaddq_f16(v119, (float16x8_t)vuzp2q_s16((int16x8_t)_Q26, (int16x8_t)v116));
          _Q27 = vaddq_f16(v125, (float16x8_t)vtrn2q_s16((int16x8_t)v124, (int16x8_t)v124));
          _Q26.i32[1] = v163.i32[1];
          *(int8x8_t *)_Q25.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v166, v179, (float16x8_t)vzip1q_s16(_Q25, _Q25)), v177, (float16x8_t)vzip2q_s16(_Q25, _Q25)), v175, _Q27), v164), v163)));
          *(void *)&result[v89] = _Q25.i64[0];
          if (v92) {
            *v92++ = v93;
          }
          v89 += 8;
        }
        while ((int)v89 < (int)v6 - 7);
        float v126 = &result[v89];
        unint64_t v127 = v6 & 0xFFFFFFF8;
      }
      if (v6 > v127)
      {
        float v128 = v90 + 4;
        do
        {
          if (v92)
          {
            float v129 = &v128[HIBYTE(v185)];
            _H25 = *v129;
            __asm { FCVT            S25, H25 }
            _H26 = *(v129 - 4);
            __asm { FCVT            S26, H26 }
            __int8 v134 = llroundf(_S26 * 255.0);
            __int8 v135 = llroundf(_S25 * 255.0);
          }
          else
          {
            __int8 v134 = 0;
            __int8 v135 = 0;
          }
          int32x2_t v136 = (__int16 *)&v128[v185];
          _Q25.i16[0] = *(v136 - 4);
          float v137 = (__int16 *)&v128[BYTE1(v185)];
          float v138 = (__int16 *)&v128[BYTE2(v185)];
          _Q26.i16[0] = *(v138 - 4);
          _Q27.i16[0] = *v137;
          _Q25.i16[1] = *(v137 - 4);
          _D28 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          *(int32x2_t *)_Q25.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q25.i8), _D28), 0), _D28)));
          _Q25.i16[0] = *(_WORD *)(v54 + 2 * _Q25.u32[0]);
          __asm { FCVT            S25, H25 }
          _H29 = *(_WORD *)(v54 + 2 * _Q25.u32[1]);
          __asm { FCVT            S29, H29 }
          _Q26.i16[1] = *v136;
          *(int32x2_t *)_Q26.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q26.i8), _D28), 0), _D28)));
          _Q26.i16[0] = *(_WORD *)(v54 + 2 * _Q26.u32[0]);
          _H30 = *(_WORD *)(v54 + 2 * _Q26.u32[1]);
          _Q27.i16[1] = *v138;
          __asm { FCVT            S26, H26 }
          *(int32x2_t *)_Q27.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q27.i8), _D28), 0), _D28)));
          _Q27.i16[0] = *(_WORD *)(v54 + 2 * _Q27.u32[0]);
          __asm
          {
            FCVT            S28, H30
            FCVT            S27, H27
          }
          _H30 = *(_WORD *)(v54 + 2 * _Q27.u32[1]);
          __asm { FCVT            S30, H30 }
          _S10 = (float)((float)(_S4 * _S29) + (float)(*(float *)_Q25.i32 * _S3)) + (float)(*(float *)_Q26.i32 * _S5);
          float v146 = (float)((float)(_S7 * _S29) + (float)(*(float *)_Q25.i32 * _S6)) + (float)(*(float *)_Q26.i32 * _S16);
          *(float *)_Q25.i32 = (float)((float)(_S18 * _S29) + (float)(*(float *)_Q25.i32 * _S17))
                             + (float)(*(float *)_Q26.i32 * _S19);
          *(float *)_Q26.i32 = (float)((float)(_S4 * *(float *)_Q27.i32) + (float)(_D28.f32[0] * _S3))
                             + (float)(_S30 * _S5);
          float v147 = (float)((float)(_S7 * *(float *)_Q27.i32) + (float)(_D28.f32[0] * _S6)) + (float)(_S30 * _S16);
          *(float *)_Q27.i32 = (float)((float)(_S18 * *(float *)_Q27.i32) + (float)(_D28.f32[0] * _S17))
                             + (float)(_S30 * _S19);
          _D28.i16[0] = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          LOWORD(_S10) = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H28
            FCVT            S10, H10
          }
          _Q25.i16[0] = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(*(float *)_Q25.i32, 0.0), 8191.0)));
          __asm { FCVT            S11, H25 }
          _Q25.i16[0] = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(*(float *)_Q26.i32, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _Q26.i16[0] = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _Q27.i16[0] = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(*(float *)_Q27.i32, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          float v151 = (float)((float)((float)(_S1 * _S10) + (float)(_S0 * _S28)) + (float)(_S2 * _S11)) + v55;
          float v152 = (float)((float)((float)(_S1 * *(float *)_Q26.i32) + (float)(_S0 * *(float *)_Q25.i32))
                       + (float)(_S2 * *(float *)_Q27.i32))
               + v55;
          if (v151 < v55) {
            float v153 = v55;
          }
          else {
            float v153 = (float)((float)((float)(_S1 * _S10) + (float)(_S0 * _S28)) + (float)(_S2 * _S11)) + v55;
          }
          if (v151 <= v57) {
            float v154 = v153;
          }
          else {
            float v154 = v57;
          }
          v91->i8[0] = llroundf(v154);
          if (v152 < v55) {
            float v155 = v55;
          }
          else {
            float v155 = (float)((float)((float)(_S1 * *(float *)_Q26.i32) + (float)(_S0 * *(float *)_Q25.i32))
          }
                         + (float)(_S2 * *(float *)_Q27.i32))
                 + v55;
          if (v152 > v57) {
            float v155 = v57;
          }
          v91->i8[1] = llroundf(v155);
          float v156 = _S28 + *(float *)_Q25.i32;
          float v157 = _S10 + *(float *)_Q26.i32;
          float v158 = _S11 + *(float *)_Q27.i32;
          float v159 = (float)((float)(v56 + (float)(v156 * v2.f32[0])) + (float)(v157 * *(float *)&v85))
               + (float)(v158 * *(float *)&v86);
          float v160 = (float)v30;
          if (v159 <= v59)
          {
            float v160 = (float)((float)(v56 + (float)(v156 * v2.f32[0])) + (float)(v157 * *(float *)&v85))
                 + (float)(v158 * *(float *)&v86);
            if (v159 < v58) {
              float v160 = (float)v29;
            }
          }
          float v161 = (float)((float)(v56 + (float)(v156 * v2.f32[1])) + (float)(v157 * *((float *)&v85 + 1)))
               + (float)(v158 * *((float *)&v86 + 1));
          *float v126 = llroundf(v160);
          float v162 = (float)v30;
          if (v161 <= v59)
          {
            float v162 = v161;
            if (v161 < v58) {
              float v162 = (float)v29;
            }
          }
          v126[1] = llroundf(v162);
          if (v92)
          {
            v92->i8[0] = v134;
            v92->i8[1] = v135;
            float v92 = (int8x8_t *)((char *)v92 + 2);
          }
          v127 += 2;
          v128 += 8;
          float v91 = (int8x8_t *)((char *)v91 + 2);
          v126 += 2;
        }
        while (v6 > v127);
      }
      v84 += v20;
      float v83 = (int8x8_t *)((char *)v83 + v21);
      result += v22;
      float v82 = (int8x8_t *)((char *)v82 + v23);
      ++v51;
    }
    while (v51 != v52);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_422vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v10 = *(void *)(result + 28);
  unint64_t v11 = *(unsigned __int8 *)result;
  unint64_t v12 = v10 * a2 / v11;
  unint64_t v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    uint64_t v14 = 0;
    unint64_t v15 = *(void *)(result + 20);
    unint64_t v16 = v12 + *(void *)(result + 44);
    unint64_t v17 = v13 - v12;
    uint64_t v18 = *(void *)(result + 152);
    uint64_t v19 = *(uint64_t **)(result + 136);
    uint64_t v20 = *(void **)(result + 56);
    uint64_t v21 = **(void **)(result + 64);
    uint64_t v22 = *v19;
    uint64_t v23 = v19[1];
    uint64_t v24 = v19[2];
    LOWORD(a3) = *(_WORD *)(v18 + 144);
    float v25 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v18 + 146);
    float v26 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v18 + 148);
    float v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v18 + 150);
    float v28 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v18 + 152);
    float v29 = (float)LODWORD(a7);
    float v30 = *(float *)(v18 + 36);
    float v31 = *(float *)(v18 + 40);
    float v32 = *(float *)(v18 + 44);
    float v102 = *(float *)(v18 + 52) * 0.5;
    float v103 = *(float *)(v18 + 48) * 0.5;
    float v100 = *(float *)(v18 + 60) * 0.5;
    float v101 = *(float *)(v18 + 56) * 0.5;
    float v33 = *(float *)(v18 + 64) * 0.5;
    float v34 = *(float *)(v18 + 72);
    float v35 = *(float *)(v18 + 68) * 0.5;
    float v36 = *(float *)(v18 + 76);
    float v37 = *(float *)(v18 + 80);
    float v38 = *(float *)(v18 + 84);
    float v39 = *(float *)(v18 + 88);
    float v40 = *(float *)(v18 + 92);
    float v41 = *(float *)(v18 + 96);
    float v42 = *(float *)(v18 + 100);
    float v43 = *(float *)(v18 + 104);
    uint64_t v44 = v18 + 164;
    uint64_t v45 = v18 + 16548;
    uint64_t v46 = *(uint64_t **)(result + 128);
    uint64_t v47 = *(void *)(result + 112);
    unint64_t v48 = *(void *)(result + 104) * a2 / v11 + *(void *)(result + 120);
    uint64_t v49 = *(void *)(result + 36);
    uint64_t v50 = *(unsigned __int8 *)(v18 + 157);
    uint64_t result = *(unsigned __int8 *)(v18 + 156);
    uint64_t v51 = *(unsigned __int8 *)(v18 + 155);
    uint64_t v52 = *(unsigned __int8 *)(v18 + 154);
    uint64_t v53 = v46[2];
    if (v53) {
      uint64_t v54 = (unsigned char *)(v53 + v48 * v24 + v47);
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v56 = *v46;
    uint64_t v55 = v46[1];
    uint64_t v57 = v55 + v48 * v23 + v47;
    if (!v55) {
      uint64_t v57 = 0;
    }
    float v58 = (unsigned char *)(v56 + v48 * v22 + v47);
    float32x2_t v59 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v60 = *v20 + v21 * v16 + 8 * v49;
    do
    {
      if (v15)
      {
        unint64_t v61 = 0;
        uint64_t v62 = v60;
        uint64_t v63 = v54;
        float v64 = v58;
        do
        {
          uint64_t v65 = v62 + 8;
          if (v63)
          {
            _H11 = *(_WORD *)(v65 + 2 * v50);
            __asm { FCVT            S11, H11 }
            _H12 = *(_WORD *)(v62 + 2 * v50);
            __asm { FCVT            S12, H12 }
            char v74 = llroundf(_S12 * 255.0);
            char v75 = llroundf(_S11 * 255.0);
          }
          else
          {
            char v74 = 0;
            char v75 = 0;
          }
          _D11.i16[0] = *(_WORD *)(v62 + 2 * v52);
          _D12.i16[0] = *(_WORD *)(v62 + 2 * result);
          _D11.i16[1] = *(_WORD *)(v62 + 2 * v51);
          _D11 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D11), v59), 0), v59)));
          _D11.i16[0] = *(_WORD *)(v44 + 2 * _D11.u32[0]);
          _D13.i16[0] = *(_WORD *)(v65 + 2 * v51);
          _H14 = *(_WORD *)(v44 + 2 * _D11.u32[1]);
          __asm
          {
            FCVT            S11, H11
            FCVT            S14, H14
          }
          _D12.i16[1] = *(_WORD *)(v65 + 2 * v52);
          _D12 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D12), v59), 0), v59)));
          _D12.i16[0] = *(_WORD *)(v44 + 2 * _D12.u32[0]);
          __asm { FCVT            S12, H12 }
          _H15 = *(_WORD *)(v44 + 2 * _D12.u32[1]);
          __asm { FCVT            S15, H15 }
          _D13.i16[1] = *(_WORD *)(v65 + 2 * result);
          _D13 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D13), v59), 0), v59)));
          _D13.i16[0] = *(_WORD *)(v44 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _H16 = *(_WORD *)(v44 + 2 * _D13.u32[1]);
          __asm { FCVT            S16, H16 }
          _S17 = (float)((float)(v36 * _S14) + (float)(*(float *)_D11.i32 * v34)) + (float)(*(float *)_D12.i32 * v37);
          _S18 = (float)((float)(v39 * _S14) + (float)(*(float *)_D11.i32 * v38)) + (float)(*(float *)_D12.i32 * v40);
          *(float *)_D11.i32 = (float)((float)(v42 * _S14) + (float)(*(float *)_D11.i32 * v41))
                             + (float)(*(float *)_D12.i32 * v43);
          *(float *)_D12.i32 = (float)((float)(v36 * *(float *)_D13.i32) + (float)(_S15 * v34)) + (float)(_S16 * v37);
          float v84 = (float)((float)(v39 * *(float *)_D13.i32) + (float)(_S15 * v38)) + (float)(_S16 * v40);
          _S16 = (float)((float)(v42 * *(float *)_D13.i32) + (float)(_S15 * v41)) + (float)(_S16 * v43);
          LOWORD(_S17) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          LOWORD(_S18) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S18, H18
          }
          _D11.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(*(float *)_D11.i32, 0.0), 8191.0)));
          __asm { FCVT            S13, H11 }
          _D11.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(*(float *)_D12.i32, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _D12.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          LOWORD(_S16) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          float v89 = (float)((float)((float)(v31 * _S18) + (float)(v30 * _S17)) + (float)(v32 * *(float *)_D13.i32)) + v25;
          float v90 = (float)((float)((float)(v31 * *(float *)_D12.i32) + (float)(v30 * *(float *)_D11.i32))
                      + (float)(v32 * _S16))
              + v25;
          if (v89 < v25) {
            float v91 = v25;
          }
          else {
            float v91 = (float)((float)((float)(v31 * _S18) + (float)(v30 * _S17)) + (float)(v32 * *(float *)_D13.i32)) + v25;
          }
          if (v89 > v27) {
            float v91 = v27;
          }
          *float v64 = llroundf(v91);
          if (v90 < v25) {
            float v92 = v25;
          }
          else {
            float v92 = (float)((float)((float)(v31 * *(float *)_D12.i32) + (float)(v30 * *(float *)_D11.i32))
          }
                        + (float)(v32 * _S16))
                + v25;
          if (v90 > v27) {
            float v92 = v27;
          }
          v64[1] = llroundf(v92);
          float v93 = _S17 + *(float *)_D11.i32;
          float v94 = _S18 + *(float *)_D12.i32;
          float v95 = *(float *)_D13.i32 + _S16;
          float v96 = (float)((float)(v26 + (float)(v93 * v103)) + (float)(v94 * v102)) + (float)(v95 * v101);
          float v97 = v29;
          if (v96 <= v29)
          {
            float v97 = (float)((float)(v26 + (float)(v93 * v103)) + (float)(v94 * v102)) + (float)(v95 * v101);
            if (v96 < v28) {
              float v97 = v28;
            }
          }
          float v98 = (float)((float)(v26 + (float)(v93 * v100)) + (float)(v94 * v33)) + (float)(v95 * v35);
          *(unsigned char *)(v57 + v61) = llroundf(v97);
          float v99 = v29;
          if (v98 <= v29)
          {
            float v99 = v98;
            if (v98 < v28) {
              float v99 = v28;
            }
          }
          *(unsigned char *)(v57 + v61 + 1) = llroundf(v99);
          if (v63)
          {
            *uint64_t v63 = v74;
            v63[1] = v75;
            v63 += 2;
          }
          v62 += 16;
          v61 += 2;
          v64 += 2;
        }
        while (v15 > v61);
      }
      v60 += v21;
      v58 += v22;
      v57 += v23;
      v54 += v24;
      ++v14;
    }
    while (v14 != v17);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_422vf_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGhA_rgb_422vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v5 = 0;
  unint64_t v6 = *(void *)(a1 + 20);
  uint64_t v126 = *(void *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 44);
  uint64_t v8 = *(void *)(a1 + 28);
  unint64_t v9 = *a1;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = v10 + v7;
  unint64_t v12 = (v8 + v8 * a2) / v9;
  uint64_t v13 = v12 + v7;
  uint64_t v14 = *((void *)a1 + 14);
  unint64_t v15 = *((void *)a1 + 13) * a2;
  uint64_t v16 = *((void *)a1 + 19);
  uint64_t v17 = *((void *)a1 + 15);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v20 = **((void **)a1 + 8);
  uint64_t v125 = **((void **)a1 + 7);
  uint64_t v21 = *v19;
  uint64_t v22 = v19[1];
  uint64_t v23 = v19[2];
  uint64_t v124 = *v18;
  uint64_t v25 = v18[1];
  uint64_t v24 = v18[2];
  unsigned int v26 = *(_DWORD *)(v16 + 136);
  int v132 = *(_DWORD *)(v16 + 154);
  unsigned int v27 = *(unsigned __int16 *)(v16 + 144);
  unsigned int v28 = *(unsigned __int16 *)(v16 + 146);
  unsigned int v29 = *(unsigned __int16 *)(v16 + 148);
  unsigned int v30 = *(unsigned __int16 *)(v16 + 150);
  unsigned int v31 = *(unsigned __int16 *)(v16 + 152);
  uint64_t v32 = v15 / v9 + v17;
  uint64_t v33 = v20 * v11;
  _S0 = *(float *)(v16 + 36);
  _S1 = *(float *)(v16 + 40);
  _S2 = *(float *)(v16 + 44);
  v2.i32[0] = *(_DWORD *)(v16 + 48);
  v3.i32[0] = *(_DWORD *)(v16 + 52);
  v4.i32[0] = *(_DWORD *)(v16 + 56);
  __int32 v38 = *(_DWORD *)(v16 + 60);
  __int32 v37 = *(_DWORD *)(v16 + 64);
  __int32 v39 = *(_DWORD *)(v16 + 68);
  memset(v131, 0, sizeof(v131));
  do
  {
    unsigned int v40 = 0;
    int v41 = *((unsigned __int8 *)&v132 + v5);
    do
    {
      uint64_t result = v41 + 4 * v40;
      *((unsigned char *)v131 + 8 * (((_BYTE)v5 + (v40 >> 3)) & 0x1F) + v40) = v41 + 4 * v40;
      ++v40;
    }
    while (v40 != 8);
    ++v5;
  }
  while (v5 != 4);
  if (v12 != v10)
  {
    uint64_t v43 = 0;
    uint64_t v44 = v13 - v11;
    _S3 = (float)v26;
    float v46 = (float)v27;
    float v47 = (float)v28;
    float v48 = (float)v29;
    float v49 = (float)v30;
    float v50 = (float)v31;
    v2.i32[1] = v38;
    *(float32x2_t *)v2.f32 = vmul_f32(*(float32x2_t *)v2.f32, (float32x2_t)0x3F0000003F000000);
    v3.i32[1] = v37;
    v4.i32[1] = v39;
    *(float32x2_t *)v3.f32 = vmul_f32(*(float32x2_t *)v3.f32, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)v4.f32 = vmul_f32(*(float32x2_t *)v4.f32, (float32x2_t)0x3F0000003F000000);
    __asm { FCVT            H8, S0 }
    short float v130 = _H8;
    __asm { FCVT            H8, S1 }
    float16x8_t v128 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v2), 0);
    short float v129 = _H8;
    __asm { FCVT            H8, S2 }
    short float v127 = _H8;
    float16x8_t v58 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    int16x4_t v59 = (int16x4_t)vcvt_f16_f32(v4);
    float16x8_t v60 = (float16x8_t)vdupq_lane_s32((int32x2_t)v59, 0);
    *(short float *)v59.i16 = (short float)v27;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(v59, 0);
    *(short float *)v59.i16 = (short float)v28;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(v59, 0);
    *(short float *)v59.i16 = (short float)v29;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(v59, 0);
    *(short float *)v59.i16 = (short float)v30;
    float16x8_t v64 = (float16x8_t)vdupq_lane_s16(v59, 0);
    *(short float *)v59.i16 = (short float)v31;
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(v59, 0);
    if (v24) {
      uint64_t v66 = v24 + v23 * v32 + v14;
    }
    else {
      uint64_t v66 = 0;
    }
    if (v25) {
      int32x4_t v67 = (unsigned char *)(v25 + v22 * v32 + v14);
    }
    else {
      int32x4_t v67 = 0;
    }
    int32x4_t v68 = (int8x8_t *)(v124 + v21 * v32 + v14);
    uint64_t result = v125 + v33 + 8 * v126;
    __asm { FCVT            H11, S3 }
    uint64_t v70 = v2.i64[0];
    uint64_t v71 = v3.i64[0];
    float v72 = v4.f32[0];
    do
    {
      if ((int)v6 < 8)
      {
        unint64_t v84 = 0;
        float v83 = v67;
        uint64_t v76 = v66;
        char v75 = v68;
        char v74 = (const __int16 *)result;
      }
      else
      {
        uint64_t v73 = 0;
        char v74 = (const __int16 *)result;
        char v75 = v68;
        uint64_t v76 = v66;
        do
        {
          int16x8x4_t v133 = vld4q_s16(v74);
          v74 += 32;
          float16x8_t v77 = vmulq_n_f16((float16x8_t)v133.val[0], _H11);
          float16x8_t v78 = vmulq_n_f16((float16x8_t)v133.val[1], _H11);
          float16x8_t v79 = vmulq_n_f16((float16x8_t)v133.val[2], _H11);
          double v80 = COERCE_DOUBLE(vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16((float16x8_t)v133.val[3], (float16x8_t)vdupq_n_s16(0x5BF8u)))));
          if (v76) {
            double v81 = v80;
          }
          else {
            double v81 = 0.0;
          }
          *v75++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v61, v77, v130), v78, v129), v79, v127), v61), v63)));
          int16x8_t v82 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v77, (int16x8_t)v78), (float16x8_t)vuzp2q_s16((int16x8_t)v77, (int16x8_t)v78));
          *(int8x8_t *)&v67[v73] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v62, v128, (float16x8_t)vzip1q_s16(v82, v82)), v58, (float16x8_t)vzip2q_s16(v82, v82)), v60, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v79, (int16x8_t)v79), (float16x8_t)vtrn2q_s16((int16x8_t)v79, (int16x8_t)v79))), v64),
                                                            v65)));
          if (v76)
          {
            *(double *)uint64_t v76 = v81;
            v76 += 8;
          }
          v73 += 8;
        }
        while ((int)v73 < (int)v6 - 7);
        float v83 = &v67[v73];
        unint64_t v84 = v6 & 0xFFFFFFF8;
      }
      if (v6 > v84)
      {
        uint64_t v85 = v74 + 4;
        do
        {
          if (v76)
          {
            uint64_t v86 = &v85[HIBYTE(v132)];
            _H16 = *v86;
            __asm { FCVT            S16, H16 }
            _H17 = *(v86 - 4);
            __asm { FCVT            S17, H17 }
            char v91 = llroundf(_S17 * 255.0);
            char v92 = llroundf(_S16 * 255.0);
          }
          else
          {
            char v91 = 0;
            char v92 = 0;
          }
          float v93 = &v85[v132];
          _H16 = *(v93 - 4);
          __asm { FCVT            S16, H16 }
          float v96 = _S3 * _S16;
          float v97 = &v85[BYTE1(v132)];
          _H17 = *(v97 - 4);
          __asm { FCVT            S17, H17 }
          float v100 = _S3 * _S17;
          float v101 = &v85[BYTE2(v132)];
          _H18 = *(v101 - 4);
          __asm { FCVT            S18, H18 }
          float v104 = _S3 * _S18;
          _H8 = *v93;
          __asm { FCVT            S8, H8 }
          float v107 = _S3 * _S8;
          _H12 = *v97;
          __asm { FCVT            S12, H12 }
          float v110 = _S3 * _S12;
          LOWORD(_S12) = *v101;
          __asm { FCVT            S12, H12 }
          float v112 = _S3 * _S12;
          float v113 = (float)((float)((float)(_S1 * v100) + (float)(_S0 * v96)) + (float)(_S2 * v104)) + v46;
          float v114 = (float)((float)((float)(_S1 * v110) + (float)(_S0 * v107)) + (float)(_S2 * v112)) + v46;
          if (v113 < v46) {
            float v115 = v46;
          }
          else {
            float v115 = (float)((float)((float)(_S1 * v100) + (float)(_S0 * v96)) + (float)(_S2 * v104)) + v46;
          }
          if (v113 > v48) {
            float v115 = v48;
          }
          v75->i8[0] = llroundf(v115);
          if (v114 < v46) {
            float v116 = v46;
          }
          else {
            float v116 = (float)((float)((float)(_S1 * v110) + (float)(_S0 * v107)) + (float)(_S2 * v112)) + v46;
          }
          if (v114 > v48) {
            float v116 = v48;
          }
          v75->i8[1] = llroundf(v116);
          float v117 = v96 + v107;
          float v118 = v100 + v110;
          float v119 = v104 + v112;
          float v120 = (float)((float)(v47 + (float)((float)(v96 + v107) * *(float *)&v70)) + (float)(v118 * *(float *)&v71))
               + (float)(v119 * v72);
          float v121 = v50;
          if (v120 <= v50)
          {
            float v121 = v120;
            if (v120 < v49) {
              float v121 = v49;
            }
          }
          float v122 = (float)((float)(v47 + (float)(v117 * *((float *)&v70 + 1))) + (float)(v118 * *((float *)&v71 + 1)))
               + (float)(v119 * v4.f32[1]);
          *float v83 = llroundf(v121);
          float v123 = v50;
          if (v122 <= v50)
          {
            float v123 = v122;
            if (v122 < v49) {
              float v123 = v49;
            }
          }
          v83[1] = llroundf(v123);
          if (v76)
          {
            *(unsigned char *)uint64_t v76 = v91;
            *(unsigned char *)(v76 + 1) = v92;
            v76 += 2;
          }
          v84 += 2;
          v85 += 8;
          char v75 = (int8x8_t *)((char *)v75 + 2);
          v83 += 2;
        }
        while (v6 > v84);
      }
      result += v20;
      int32x4_t v68 = (int8x8_t *)((char *)v68 + v21);
      v67 += v22;
      v66 += v23;
      ++v43;
    }
    while (v43 != v44);
  }
  return result;
}