uint64_t vtmtsFixUpProcessingShortcuts(uint64_t result, int a2)
{
  uint64_t v3;
  char v4;
  int v5;
  int v6;
  int v7;

  v3 = result;
  v4 = *(unsigned char *)(result + 127);
  if (v4)
  {
    if (*(unsigned char *)(result + 128) || *(unsigned char *)(result + 129) || *(unsigned char *)(result + 1303))
    {
      v4 = 1;
    }
    else
    {
      v4 = 1;
      if (*(unsigned char *)(result + 1305))
      {
        *(unsigned char *)(result + 127) = 0;
        *(_WORD *)(result + 1304) = 1;
        v4 = 0;
      }
    }
  }
  if (*(unsigned char *)(result + 126))
  {
    if ((v4 & 1) == 0
      && !*(unsigned char *)(result + 128)
      && !*(unsigned char *)(result + 129)
      && !*(unsigned char *)(result + 1303)
      && !*(unsigned char *)(result + 1304)
      && !*(unsigned char *)(result + 1305))
    {
      if (*(unsigned char *)(result + 1306))
      {
        result = formatSupportsChangeRange(*(_DWORD *)result);
        if (result)
        {
          result = formatSupportsChangeRange(*(_DWORD *)(v3 + 1220));
          if (result)
          {
            *(unsigned char *)(v3 + 126) = 0;
            *(unsigned char *)(v3 + 1306) = 0;
            *(unsigned char *)(v3 + 1308) = 1;
          }
        }
      }
    }
  }
  if (a2)
  {
    v5 = 2;
    *(_DWORD *)(v3 + 1216) = 2;
    v6 = *(_DWORD *)(v3 + 108);
  }
  else
  {
    v6 = *(_DWORD *)(v3 + 108);
    v7 = *(_DWORD *)(v3 + 1296);
    if (v6 == v7 && !*(unsigned char *)(v3 + 124))
    {
      *(_DWORD *)(v3 + 1216) = v6;
      goto LABEL_26;
    }
    if (v6 == 2 || v6 == 4 || v7 == 4 || v7 == 2) {
      v5 = 2;
    }
    else {
      v5 = 1;
    }
    *(_DWORD *)(v3 + 1216) = v5;
  }
  if (v6 != v5) {
    *(unsigned char *)(v3 + 124) = 1;
  }
  v6 = v5;
LABEL_26:
  if (*(_DWORD *)(v3 + 1296) != v6) {
    *(unsigned char *)(v3 + 1316) = 1;
  }
  return result;
}

float32x2_t setupAffine(int a1, int a2, _OWORD *a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  long long v17 = a3[1];
  *(_OWORD *)&v34.a = *a3;
  *(_OWORD *)&v34.c = v17;
  *(_OWORD *)&v34.tx = a3[2];
  memset(&v35, 0, sizeof(v35));
  CGAffineTransformInvert(&v35, &v34);
  uint64_t v18 = a10 + 60 * a1;
  __asm { FMOV            V2.2S, #1.0 }
  float32x2_t v24 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a2 == 0), 0x1FuLL)), _D2, (int8x8_t)vcvt_f32_s32((int32x2_t)__PAIR64__(a9, a8)));
  float64x2_t v25 = vcvtq_f64_f32(v24);
  float32x2_t v26 = vcvt_f32_f64(vdivq_f64(*(float64x2_t *)&v35.a, v25));
  float32x2_t v27 = vcvt_f32_f64(vdivq_f64(*(float64x2_t *)&v35.c, v25));
  *(float32x2_t *)(v18 + 32) = v26;
  *(float32x2_t *)(v18 + 40) = v27;
  __asm { FMOV            V5.2D, #0.5 }
  *(float32x2_t *)(v18 + 48) = vcvt_f32_f64(vaddq_f64(vmlaq_f64(vmulq_f64(vcvtq_f64_f32(v27), _Q5), _Q5, vcvtq_f64_f32(v26)), vcvtq_f64_f32(vcvt_f32_f64(vdivq_f64(*(float64x2_t *)&v35.tx, v25)))));
  float32x2_t v29 = vcvt_f32_s32((int32x2_t)__PAIR64__(a7, a4));
  float32x2_t v30 = vcvt_f32_s32((int32x2_t)__PAIR64__(a5, a6));
  float32x2_t v31 = vadd_f32(v30, v29);
  v29.i32[1] = v30.i32[1];
  *(float32x2_t *)(v18 + 68) = vdiv_f32(v29, v24);
  __asm { FMOV            V2.2D, #-0.25 }
  float32x2_t result = vcvt_f32_f64(vdivq_f64(vaddq_f64(vcvtq_f64_f32(v31), _Q2), v25));
  *(float32x2_t *)(v18 + 76) = result;
  *(_DWORD *)(v18 + 56) = a8;
  *(_DWORD *)(v18 + 60) = a9;
  return result;
}

void setupRenderRotationAndCrop(void *a1, unsigned __int8 *a2, __CFString **a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, unsigned __int8 a11, unsigned __int8 a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20,int a21,int a22,int a23,int a24,int a25,void *a26,void *a27,uint64_t a28,id *a29)
{
  int v30 = a13;
  int v31 = a12;
  int v32 = a11;
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  uint64_t v113 = 0;
  id v114 = 0;
  if (a13) {
    BOOL v33 = a13 == 180;
  }
  else {
    BOOL v33 = 1;
  }
  if (v33) {
    int v34 = a16;
  }
  else {
    int v34 = a17;
  }
  int v111 = v34;
  if (v33) {
    int v35 = a17;
  }
  else {
    int v35 = a16;
  }
  int v103 = v35;
  float v104 = (float)a19;
  float v105 = (float)a18;
  if (a10) {
    float v36 = (float)a19;
  }
  else {
    float v36 = 1.0;
  }
  if (a10) {
    float v37 = (float)a18;
  }
  else {
    float v37 = 1.0;
  }
  if (a13)
  {
    if (a13 == 90)
    {
      unsigned int v38 = 6;
    }
    else if (a13 == 180)
    {
      unsigned int v38 = 0;
      int v30 = 0;
      int v32 = a11 == 0;
      int v31 = a12 == 0;
    }
    else
    {
      unsigned int v38 = 2 * (a13 == 270);
    }
  }
  else
  {
    unsigned int v38 = 0;
  }
  if (v32) {
    float v39 = -1.0;
  }
  else {
    float v39 = 1.0;
  }
  if (v31) {
    float v40 = -1.0;
  }
  else {
    float v40 = 1.0;
  }
  if (a16) {
    int v41 = a16;
  }
  else {
    int v41 = a22;
  }
  if (a17) {
    int v42 = a17;
  }
  else {
    int v42 = a23;
  }
  float v106 = v39;
  float v107 = v40;
  if (v30)
  {
    if (v30 == 90 || v30 == 270)
    {
      float v43 = 1.0;
      if (v30 != 90) {
        float v43 = -1.0;
      }
      float v44 = (float)v42;
      float v45 = (float)((float)v42 / (float)a22) * (float)-(float)(v39 * v43);
      float v46 = (float)v41;
      float v47 = (float)((float)v41 / (float)a23) * (float)(v43 * v40);
      int v48 = a4;
      uint64_t v49 = a28 + 60 * a4;
      *(_DWORD *)(v49 + 32) = 0;
      uint64_t v50 = v49 + 32;
      *(_DWORD *)(v50 + 12) = 0;
      int v51 = a14 + v41 - 1;
      if (v47 > 0.0) {
        int v51 = a14;
      }
      float v52 = (float)v51;
      int v53 = a15 + v42 - 1;
      if (v45 > 0.0) {
        int v53 = a15;
      }
      float v54 = (float)v53;
      if (!a6)
      {
        float v52 = v52 - (float)(v47 * (float)a21);
        float v54 = v54 - (float)(v45 * (float)a20);
      }
      int v55 = a8;
      *(float *)(v50 + 16) = v52 / v37;
      *(float *)(v50 + 20) = v54 / v36;
      *(float *)(v50 + 4) = v45 / v36;
      *(float *)(v50 + 8) = v47 / v37;
    }
    else
    {
      int v55 = a8;
      int v48 = a4;
      float v46 = (float)v41;
      float v44 = (float)v42;
    }
  }
  else
  {
    float v46 = (float)v41;
    float v56 = (float)((float)v41 / (float)a22) * v39;
    int v48 = a4;
    uint64_t v57 = a28 + 60 * a4;
    *(_DWORD *)(v57 + 36) = 0;
    *(_DWORD *)(v57 + 40) = 0;
    float v44 = (float)v42;
    float v58 = (float)((float)v42 / (float)a23) * v40;
    int v59 = a14 + v41 - 1;
    if (v32) {
      int v60 = v59;
    }
    else {
      int v60 = a14;
    }
    float v61 = (float)v60;
    if (v31) {
      int v62 = a15 + v42 - 1;
    }
    else {
      int v62 = a15;
    }
    float v63 = (float)v62;
    if (!a6)
    {
      float v61 = v61 - (float)(v56 * (float)a20);
      float v63 = v63 - (float)(v58 * (float)a21);
    }
    int v55 = a8;
    *(float *)(v57 + 48) = v61 / v37;
    *(float *)(v57 + 52) = v63 / v36;
    *(float *)(v57 + 32) = v56 / v37;
    *(float *)(v57 + 44) = v58 / v36;
  }
  float v64 = (float)a14;
  float v65 = 0.0;
  uint64_t v66 = a28 + 60 * v48;
  float v67 = (float)a15;
  *(float *)(v66 + 68) = fmaxf((float)a14 / v37, 0.0);
  *(float *)(v66 + 72) = fmaxf((float)a15 / v36, 0.0);
  float v68 = ((float)(fmaxf((float)a14, 0.0) + v46) + -0.25) / v37;
  float v109 = v44;
  float v69 = ((float)(fmaxf((float)a15, 0.0) + v44) + -0.25) / v36;
  *(float *)(v66 + 76) = v68;
  *(float *)(v66 + 80) = v69;
  *(_DWORD *)(v66 + 56) = a18;
  *(_DWORD *)(v66 + 60) = a19;
  if (a6) {
    int v70 = a20;
  }
  else {
    int v70 = 0;
  }
  if (a6) {
    int v71 = a21;
  }
  else {
    int v71 = 0;
  }
  *(_DWORD *)(a28 + 8) = v70;
  *(_DWORD *)(a28 + 12) = v71;
  int v72 = a24;
  int v73 = a25;
  if (a6)
  {
    int v72 = a22;
    int v73 = a23;
  }
  *(_DWORD *)a28 = v72;
  *(_DWORD *)(a28 + 4) = v73;
  if (!a9 && a29 && !vtmtsGetIntermediateScalingFormat(a2, a5, 0, 0, 0, 0))
  {
    if (v111 == a22)
    {
      float v74 = 0.0;
      if (v103 == a23) {
        goto LABEL_76;
      }
      vtmtsBuildScalingTable(a1, a7 == 0, (float *)&v113, &v114, (_DWORD *)(a28 + 84), (_DWORD *)(a28 + 88), (float)a23 / v109, 1.0 / v36);
      float v76 = *(float *)&v113;
      v77 = (float *)(a28 + 52);
      float v74 = 0.0;
      float v65 = *(float *)&v113;
    }
    else
    {
      vtmtsBuildScalingTable(a1, a7 == 0, (float *)&v113 + 1, &v114, (_DWORD *)(a28 + 84), (_DWORD *)(a28 + 88), (float)a22 / v46, 1.0 / v37);
      float v76 = *((float *)&v113 + 1);
      v77 = (float *)(a28 + 48);
      float v74 = *((float *)&v113 + 1);
    }
    float *v77 = v76 + *v77;
    goto LABEL_76;
  }
  id v114 = 0;
  float v74 = 0.0;
  if (!v55)
  {
    float v75 = 0.0;
    if (a9) {
      goto LABEL_79;
    }
  }
LABEL_76:
  if (v111 == a22)
  {
    if (a10)
    {
      float v75 = v74;
      if (v103 == a23)
      {
LABEL_79:
        float v78 = 0.5 / v37 + *(float *)(a28 + 48);
        float v79 = 0.5 / v36 + *(float *)(a28 + 52);
        *(float *)(a28 + 48) = v78;
        *(float *)(a28 + 52) = v79;
        float v74 = v75;
      }
    }
  }
  if (a7)
  {
    if (a6)
    {
      float v80 = v64 + (float)(v74 * v37);
      float v81 = v67 + (float)(v65 * v36);
      float v82 = v80 + v46;
      float v83 = v81 + v109;
    }
    else
    {
      if (v30)
      {
        float v80 = (float)(v64 - (float)((float)(v46 * (float)a21) / (float)a23)) + (float)(v65 * v36);
        float v81 = (float)(v67 - (float)((float)(v109 * (float)a20) / (float)a22)) + (float)(v74 * v37);
        float v82 = (float)((float)(v46 * (float)a25) / (float)a23) + v80;
        float v86 = (float)(v109 * (float)a24) / (float)a22;
      }
      else
      {
        float v80 = (float)(v64 - (float)((float)(v46 * (float)a20) / (float)a22)) + (float)(v74 * v37);
        float v81 = (float)(v67 - (float)((float)(v109 * (float)a21) / (float)a23)) + (float)(v65 * v36);
        float v82 = (float)((float)(v46 * (float)a24) / (float)a22) + v80;
        float v86 = (float)(v109 * (float)a25) / (float)a23;
      }
      float v83 = v86 + v81;
    }
    float v115 = v80;
    float v116 = v81;
    float v117 = v80;
    float v118 = v83;
    float v119 = v82;
    float v120 = v83;
    float v121 = v82;
    float v122 = v81;
    if (a10)
    {
      float v115 = v80 / v105;
      float v116 = v81 / v104;
      float v117 = v80 / v105;
      float v118 = v83 / v104;
      float v119 = v82 / v105;
      float v120 = v83 / v104;
      float v121 = v82 / v105;
      float v122 = v81 / v104;
    }
    *(void *)&long long v87 = *(void *)(&v115 + v38);
    *((void *)&v87 + 1) = *(void *)(&v115 + (((_BYTE)v38 + 6) & 6));
    *(void *)&long long v88 = *(void *)(&v115 + (((_BYTE)v38 + 2) & 6));
    *((void *)&v88 + 1) = *(void *)(&v115 + (((_BYTE)v38 + 4) & 6));
    v124[0] = v87;
    v124[1] = v88;
    v89 = (void *)[a1 newBufferWithBytes:v124 length:32 options:0];
    v85 = v89;
    if (*a3) {
      v90 = *a3;
    }
    else {
      v90 = @"com.apple.VideoToolbox.VTMetalTransferSession";
    }
    [v89 setLabel:v90];
    float v91 = 0.0;
    if (a6) {
      float v92 = (float)a20;
    }
    else {
      float v92 = 0.0;
    }
    if (a6) {
      float v91 = (float)a21;
    }
    float v93 = (float)a20 + (float)a22;
    float v94 = (float)a24;
    if (!a6) {
      float v93 = (float)a24;
    }
    float v95 = (float)a21 + (float)a23;
    float v96 = (float)a25;
    if (!a6) {
      float v95 = (float)a25;
    }
    float v97 = (float)(v92 / v94) * 2.0 + -1.0;
    float v98 = 1.0 - (float)(v91 / v96) * 2.0;
    float v99 = (float)(v93 / v94) * 2.0 + -1.0;
    float v100 = 1.0 - (float)(v95 / v96) * 2.0;
    v123[0] = v106 * v97;
    v123[1] = v107 * v98;
    v123[2] = v106 * v99;
    v123[3] = v107 * v98;
    v123[4] = v106 * v97;
    v123[5] = v107 * v100;
    v123[6] = v106 * v99;
    v123[7] = v107 * v100;
    v101 = (void *)[a1 newBufferWithBytes:v123 length:32 options:0];
    v84 = v101;
    if (*a3) {
      v102 = *a3;
    }
    else {
      v102 = @"com.apple.VideoToolbox.VTMetalTransferSession";
    }
    [v101 setLabel:v102];
  }
  else
  {
    v84 = 0;
    v85 = 0;
  }
  *a26 = v84;
  *a27 = v85;
  if (a29)
  {

    if (v114)
    {
      *a29 = v114;
      id v114 = 0;
    }
  }
}

void setupBackgroundColor(float32_t a1, float a2, float a3, float a4, uint64_t a5, int a6, int a7, int a8, int a9, void *a10)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (a10)
  {
    uint64_t v14 = [a10 contents];
    CFDictionaryRef DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
    if (DescriptionWithPixelFormatType
      && (CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E4F24EB8]),
          FigCFEqual()))
    {
      vtmtsPopulateRGBToYCbCrMatrix(a7, a8, a9, (uint64_t)&v42);
      if (a8 == 1)
      {
        float32_t v16 = (float)((float)((float)(v43 * a2) + (float)(a1 * v42)) + (float)(a3 * v44)) + 0.062745098;
        v17.f32[0] = v16;
      }
      else
      {
        v17.f32[0] = (float)((float)(v43 * a2) + (float)(a1 * v42)) + (float)(a3 * v44);
      }
      float v18 = (float)((float)((float)(v46 * a2) + (float)(a1 * v45)) + (float)(a3 * v47)) + 0.5;
      float v19 = (float)((float)((float)(v49 * a2) + (float)(a1 * v48)) + (float)(a3 * v50)) + 0.5;
    }
    else
    {
      float v18 = a2;
      float v19 = a3;
      v17.f32[0] = a1;
    }
    switch(a6)
    {
      case 1:
        unsigned int v20 = ((unsigned __int32)v17.i32[0] >> 23);
        if (v20 >= 0x70)
        {
          int v28 = 127 - v20;
          if (v28 <= -15) {
            LOWORD(v28) = -15;
          }
          __int16 v21 = 15360 - ((_WORD)v28 << 10);
        }
        else
        {
          __int16 v21 = 0;
        }
        *(_WORD *)(v14 + 16) = v17.i16[1] & 0x8000 | ((unsigned __int32)v17.i32[0] >> 13) & 0x3FF | v21;
        unsigned int v29 = (LODWORD(v18) >> 23);
        if (v29 >= 0x70)
        {
          int v31 = 127 - v29;
          if (v31 <= -15) {
            LOWORD(v31) = -15;
          }
          __int16 v30 = 15360 - ((_WORD)v31 << 10);
        }
        else
        {
          __int16 v30 = 0;
        }
        *(_WORD *)(v14 + 18) = HIWORD(v18) & 0x8000 | (LODWORD(v18) >> 13) & 0x3FF | v30;
        unsigned int v32 = (LODWORD(v19) >> 23);
        if (v32 >= 0x70)
        {
          int v34 = 127 - v32;
          if (v34 <= -15) {
            LOWORD(v34) = -15;
          }
          __int16 v33 = 15360 - ((_WORD)v34 << 10);
        }
        else
        {
          __int16 v33 = 0;
        }
        *(_WORD *)(v14 + 20) = HIWORD(v19) & 0x8000 | (LODWORD(v19) >> 13) & 0x3FF | v33;
        unsigned int v35 = (LODWORD(a4) >> 23);
        if (v35 >= 0x70)
        {
          int v37 = 127 - v35;
          if (v37 <= -15) {
            LOWORD(v37) = -15;
          }
          __int16 v36 = 15360 - ((_WORD)v37 << 10);
        }
        else
        {
          __int16 v36 = 0;
        }
        *(_WORD *)(v14 + 22) = HIWORD(a4) & 0x8000 | (LODWORD(a4) >> 13) & 0x3FF | v36;
        break;
      case 2:
        *(_DWORD *)(v14 + 16) = v17.i32[0];
        *(float *)(v14 + 20) = v18;
        *(float *)(v14 + 24) = v19;
        *(float *)(v14 + 28) = a4;
        break;
      case 4:
        v17.f32[1] = v18;
        v17.i64[1] = __PAIR64__(LODWORD(a4), LODWORD(v19));
        float32x4_t v22 = vmulq_f32(v17, (float32x4_t)vdupq_n_s32(0x477FFF00u));
        __asm { FMOV            V2.2D, #0.5 }
        *(int16x4_t *)(v14 + 16) = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v22.f32), _Q2))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vaddq_f64(vcvt_hight_f64_f32(v22), _Q2))));
        break;
      case 5:
        *(unsigned char *)(v14 + 16) = (int)(v17.f32[0] * 255.0 + 0.5);
        *(unsigned char *)(v14 + 17) = (int)(v18 * 255.0 + 0.5);
        *(unsigned char *)(v14 + 18) = (int)(v19 * 255.0 + 0.5);
        *(unsigned char *)(v14 + 19) = (int)(a4 * 255.0 + 0.5);
        break;
      default:
        return;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void VTMTSRenderPassDescriptorSetFunctionName(uint64_t a1, CFTypeRef cf)
{
  v2 = *(const void **)(a1 + 24);
  *(void *)(a1 + 24) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t vtAllocateMetalTextureForList(void *a1, unint64_t a2, unint64_t a3, uint64_t a4, CFIndex a5, CFArrayRef theArray)
{
  if (!theArray || CFArrayGetCount(theArray) < (unint64_t)a5 || !a1) {
    goto LABEL_22;
  }
  if (!a2) {
    goto LABEL_8;
  }
  unint64_t v12 = [a1 maxTextureWidth2D];
  v13 = 0;
  uint64_t v14 = 0;
  if (!a3 || v12 < a2) {
    goto LABEL_10;
  }
  if ([a1 maxTextureHeight2D] < a3
    || CFArrayGetCount(theArray) > a5
    && (ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a5)) != 0
    && (float32x4_t v17 = ValueAtIndex, [ValueAtIndex width] == a2)
    && [v17 height] == a3
    && [v17 pixelFormat] == a4)
  {
LABEL_8:
    uint64_t v14 = 0;
LABEL_9:
    v13 = 0;
    goto LABEL_10;
  }
  float v18 = (void *)[MEMORY[0x1E4F35330] texture2DDescriptorWithPixelFormat:a4 width:a2 height:a3 mipmapped:0];
  [v18 setUsage:3];
  uint64_t v19 = [a1 newTextureWithDescriptor:v18];
  if (!v19)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_22:
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_9;
  }
  v13 = (void *)v19;
  if (CFArrayGetCount(theArray) == a5) {
    CFArrayAppendValue(theArray, v13);
  }
  else {
    CFArraySetValueAtIndex(theArray, a5, v13);
  }
  uint64_t v14 = 0;
LABEL_10:

  return v14;
}

float vtmtsPopulateYCbCrToRGBMatrix(int a1, int a2, int a3, float32x4_t *a4)
{
  if ((a1 - 5) > 1)
  {
    a4[2].i32[0] = 0;
    if (a1 == 9) {
      v4 = &YUVToRGBFull2020Matrix;
    }
    else {
      v4 = &YUVToRGBFull709Matrix;
    }
  }
  else
  {
    a4[2].i32[0] = 0;
    v4 = &YUVToRGBFull601Matrix;
  }
  int32x4_t v5 = (int32x4_t)*v4;
  long long v6 = v4[1];
  *a4 = (float32x4_t)*v4;
  a4[1] = (float32x4_t)v6;
  if (a2 == 3)
  {
    if (a3 >= 16) {
      int v12 = 16;
    }
    else {
      int v12 = a3;
    }
    if (v12 <= 8) {
      LOBYTE(v12) = 8;
    }
    *(float *)v5.i32 = (float)~(-1 << (v12 - 1)) / (float)~(-1 << v12);
    a4->f32[0] = a4->f32[0] / *(float *)v5.i32;
    a4->f32[3] = a4->f32[3] / *(float *)v5.i32;
    f32 = &a4[1].f32[2];
    goto LABEL_20;
  }
  if (a2 == 1)
  {
    if (a3 >= 16) {
      int v7 = 16;
    }
    else {
      int v7 = a3;
    }
    if (v7 <= 8) {
      int v7 = 8;
    }
    *(float *)v5.i32 = (float)~(-1 << v7);
    *(float32x2_t *)v5.i8 = vdiv_f32(vcvt_f32_s32(vadd_s32((int32x2_t)vshl_u32((uint32x2_t)0xE0000000DBLL, (uint32x2_t)vdup_n_s32(v7 - 8)), (int32x2_t)-1)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 0));
    float32x4_t v8 = vdivq_f32(*a4, (float32x4_t)vzip1q_s32(v5, vrev64q_s32(v5)));
    float32x4_t v9 = (float32x4_t)vextq_s8((int8x16_t)vzip1q_s32(v5, v5), (int8x16_t)v5, 8uLL);
    v5.i32[0] = v5.i32[1];
    float32x4_t v10 = vdivq_f32(a4[1], v9);
    *a4 = v8;
    a4[1] = v10;
    f32 = a4[2].f32;
LABEL_20:
    *(float *)v5.i32 = *f32 / *(float *)v5.i32;
    float *f32 = *(float *)v5.i32;
  }
  return *(float *)v5.i32;
}

double vtmtsPopulateRGBToYCbCrMatrix(int a1, int a2, int a3, uint64_t a4)
{
  if ((a1 - 5) > 1)
  {
    if (a1 == 9)
    {
      *(_DWORD *)(a4 + 32) = -1121666948;
      v4 = &RGBToYUVFull2020Matrix;
    }
    else
    {
      *(_DWORD *)(a4 + 32) = -1120155120;
      v4 = &RGBToYUVFull709Matrix;
    }
  }
  else
  {
    *(_DWORD *)(a4 + 32) = -1113159960;
    v4 = &RGBToYUVFull601Matrix;
  }
  long long v5 = *v4;
  int32x4_t v6 = (int32x4_t)v4[1];
  *(_OWORD *)a4 = *v4;
  *(int32x4_t *)(a4 + 16) = v6;
  if (a2 == 3)
  {
    unsigned int v11 = 0;
    if (a3 >= 16) {
      int v12 = 16;
    }
    else {
      int v12 = a3;
    }
    if (v12 <= 8) {
      LOBYTE(v12) = 8;
    }
    float v9 = (float)~(-1 << (v12 - 1)) / (float)~(-1 << v12);
    float32x4_t v10 = (float *)a4;
    goto LABEL_20;
  }
  if (a2 == 1)
  {
    if (a3 >= 16) {
      int v7 = 16;
    }
    else {
      int v7 = a3;
    }
    if (v7 <= 8) {
      int v7 = 8;
    }
    *(float *)&long long v5 = (float)~(-1 << v7);
    *(float32x2_t *)v6.i8 = vdiv_f32(vcvt_f32_s32(vadd_s32((int32x2_t)vshl_u32((uint32x2_t)0xE0000000DBLL, (uint32x2_t)vdup_n_s32(v7 - 8)), (int32x2_t)-1)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v5, 0));
    float32x4_t v8 = (float32x4_t)vzip1q_s32(v6, v6);
    v8.i32[2] = v6.i32[0];
    *(float32x4_t *)a4 = vmulq_f32(v8, *(float32x4_t *)a4);
    float v9 = *(float *)&v6.i32[1];
    *(float32x2_t *)(a4 + 16) = vmul_lane_f32(*(float32x2_t *)(a4 + 16), *(float32x2_t *)v6.i8, 1);
    float32x4_t v10 = (float *)(a4 + 24);
    unsigned int v11 = 2;
LABEL_20:
    *float32x4_t v10 = v9 * *v10;
    uint64_t v13 = a4 + 12 * v11;
    *(float32x2_t *)&long long v5 = vmul_n_f32(*(float32x2_t *)(v13 + 4), v9);
    *(void *)(v13 + 4) = v5;
  }
  return *(double *)&v5;
}

uint64_t __VTPopulateColorPrimariesAndTransferFunctionValuesModern_block_invoke(uint64_t a1, uint64_t a2)
{
  **(_DWORD **)(a1 + 32) = *(void *)(a2 + 4);
  return 1;
}

uint64_t __VTPopulateColorPrimariesAndTransferFunctionValuesModern_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(int *)(a1 + 56) <= a3)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -12905;
  }
  else
  {
    CGColorTRCGetFunction();
    CGColorFunctionGetInputRange();
    float v6 = v5;
    float v8 = v7;
    CGColorFunctionGetOutputRange();
    *(_OWORD *)(*(void *)(a1 + 40) + 52 * (*(void *)(a1 + 48) + a3)) = 0u;
    *(_OWORD *)(*(void *)(a1 + 40) + 52 * (*(void *)(a1 + 48) + a3) + 16) = 0u;
    *(_DWORD *)(*(void *)(a1 + 40) + 52 * (*(void *)(a1 + 48) + a3) + 32) = 0;
    if (v9 > -3.4028e38 && v10 < 3.4028e38)
    {
      uint64_t v11 = *(void *)(a1 + 40) + 52 * (*(void *)(a1 + 48) + a3);
      *(unsigned char *)(v11 + 40) = 1;
      *(float *)(v11 + 44) = v9;
      *(float *)(v11 + 48) = v10;
    }
    if (v6 > -3.4028e38 && v8 < 3.4028e38)
    {
      uint64_t v12 = *(void *)(a1 + 48) + a3;
      BOOL v13 = v12 < 1;
      uint64_t v14 = v12 - 1;
      if (!v13)
      {
        uint64_t v15 = *(void *)(a1 + 40);
        uint64_t v16 = v15 + 52 * v14;
        int v18 = *(unsigned __int8 *)(v16 + 40);
        float32x4_t v17 = (unsigned char *)(v16 + 40);
        uint64_t v19 = (float *)(v17 + 4);
        if (v18)
        {
          float v20 = *v19;
          if (*v19 < v6)
          {
            *uint64_t v19 = v6;
            float v20 = v6;
          }
          if (v20 <= v8) {
            goto LABEL_16;
          }
        }
        else
        {
          *uint64_t v19 = v6;
        }
        *(float *)(v15 + 52 * v14 + 48) = v8;
LABEL_16:
        *float32x4_t v17 = 1;
      }
    }
  }
  return 1;
}

uint64_t __VTPopulateColorPrimariesAndTransferFunctionValuesModern_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(int *)(a1 + 56) <= a3)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -12905;
  }
  else
  {
    CGColorMatrixGetMatrix();
    float v5 = (_DWORD *)(*(void *)(a1 + 40) + 52 * (*(void *)(a1 + 48) + a3));
    *float v5 = 40;
    v5[1] = 0;
    *(void *)(*(void *)(a1 + 40) + 52 * (*(void *)(a1 + 48) + a3) + 8) = 0;
    *(void *)(*(void *)(a1 + 40) + 52 * (*(void *)(a1 + 48) + a3) + 16) = 0;
    *(_DWORD *)(*(void *)(a1 + 40) + 52 * (*(void *)(a1 + 48) + a3) + 24) = 0;
    *(void *)(*(void *)(a1 + 40) + 52 * (*(void *)(a1 + 48) + a3) + 28) = 0;
    *(_DWORD *)(*(void *)(a1 + 40) + 52 * (*(void *)(a1 + 48) + a3) + 36) = 0;
    *(unsigned char *)(*(void *)(a1 + 40) + 52 * (*(void *)(a1 + 48) + a3) + 40) = 0;
  }
  return 1;
}

uint64_t __VTPopulateColorPrimariesAndTransferFunctionValuesModern_block_invoke_4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v6 = *(const void **)(*(void *)(a2 + 68) + 8 * a4);
  CGColorNxMTransformGetTransform();
  float v7 = (void *)a1[7];
  if (*v7)
  {
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = -12905;
  }
  else
  {
    uint64_t v9 = a1[6] + 52 * (a1[5] + a3);
    *(_DWORD *)uint64_t v9 = 50;
    *(unsigned char *)(v9 + 40) = 0;
    if (v6)
    {
      CFTypeRef v10 = CFRetain(v6);
      float v7 = (void *)a1[7];
    }
    else
    {
      CFTypeRef v10 = 0;
    }
    *float v7 = v10;
  }
  return 1;
}

float matrixMultiply(float *a1, float *a2, float *a3)
{
  *a3 = (float)((float)(a1[1] * a2[3]) + (float)(*a1 * *a2)) + (float)(a1[2] * a2[6]);
  a3[1] = (float)((float)(a1[1] * a2[4]) + (float)(*a1 * a2[1])) + (float)(a1[2] * a2[7]);
  a3[2] = (float)((float)(a1[1] * a2[5]) + (float)(*a1 * a2[2])) + (float)(a1[2] * a2[8]);
  a3[3] = (float)((float)(a1[4] * a2[3]) + (float)(a1[3] * *a2)) + (float)(a1[5] * a2[6]);
  a3[4] = (float)((float)(a1[4] * a2[4]) + (float)(a1[3] * a2[1])) + (float)(a1[5] * a2[7]);
  a3[5] = (float)((float)(a1[4] * a2[5]) + (float)(a1[3] * a2[2])) + (float)(a1[5] * a2[8]);
  a3[6] = (float)((float)(a1[7] * a2[3]) + (float)(a1[6] * *a2)) + (float)(a1[8] * a2[6]);
  a3[7] = (float)((float)(a1[7] * a2[4]) + (float)(a1[6] * a2[1])) + (float)(a1[8] * a2[7]);
  float result = (float)((float)(a1[7] * a2[5]) + (float)(a1[6] * a2[2])) + (float)(a1[8] * a2[8]);
  a3[8] = result;
  return result;
}

uint64_t returnMetalFormatIfSamplable(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1 && a2)
  {
    MTLPixelFormatGetInfoForDevice();
    return 0;
  }
  return v2;
}

uint64_t RegisterVTMTSTextureDescriptor()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sVTMTSTextureDescriptorID = result;
  return result;
}

double vtMTSTextureDescriptorInit(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

__CFString *vtCopyVTMTSTextureDescriptorFormattingDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = (void *)MEMORY[0x199706500]();
  CFAllocatorRef v5 = CFGetAllocator(a1);
  CFMutableStringRef v6 = CFStringCreateMutable(v5, 0);
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<VTMTSTextureDescriptor %p [%p]>{", a1, v7);
  CFStringAppendFormat(Mutable, 0, @"\n%@}", v6);
  if (v6) {
    CFRelease(v6);
  }
  return Mutable;
}

uint64_t getEquivalentUncompressedPixelFormat(uint64_t a1)
{
  CFDictionaryRef DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  int valuePtr = a1;
  if (DescriptionWithPixelFormatType)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E4F24EE0]);
    if (Value)
    {
      CFArrayRef v4 = Value;
      CFTypeID v5 = CFGetTypeID(Value);
      if (v5 == CFArrayGetTypeID())
      {
        CFArrayGetValueAtIndex(v4, 0);
        FigCFDictionaryGetInt32IfPresent();
      }
    }
  }
  return a1;
}

uint64_t appendSrcTextureDescriptions(uint64_t a1, int a2, uint64_t a3, CFArrayRef theArray, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, uint64_t a13, uint64_t a14, int a15, int a16, int a17, uint64_t a18, uint64_t a19, int a20,int a21,int a22,uint64_t a23,uint64_t a24,int a25,int a26,int a27)
{
  uint64_t v98 = a8;
  if (theArray) {
    int Count = CFArrayGetCount(theArray);
  }
  else {
    int Count = 0;
  }
  __int16 v33 = *(unsigned __int8 **)(a1 + 160);
  if (v33[18] || !*(unsigned char *)(a1 + 72))
  {
    uint64_t v98 = 0;
    a9 = 0;
  }
  if (v33[19] || !*(unsigned char *)(a1 + 72)) {
    a13 = 0;
  }
  float v97 = theArray;
  int v96 = a2;
  if (v33[16])
  {
    a18 = 0;
    a19 = 0;
  }
  int v34 = *(_DWORD *)(a1 + 24);
  CFDictionaryRef v35 = *(const __CFDictionary **)(a1 + 16);
  uint64_t v36 = *(void *)(a1 + 152);
  uint64_t v93 = a1;
  uint64_t v37 = a3 + 152 * v34;
  int v38 = *(_DWORD *)(a1 + 172);
  float v92 = (_DWORD *)(v37 + 120);
  int v100 = 0;
  __int16 v99 = 0;
  getCharacteristicsFromPixelDescription(v35, 0, (uint64_t)&v99 + 1, 0, &v100, (uint64_t)&v99, 0, 0);
  if (v33[6])
  {
    *(void *)&long long v101 = 0;
    if (!selectFunctionConstantForMetalDevice(v36, a5, a2, v37 + 52, v37 + 84, &v101, (int *)(v37 + 108)))
    {
      uint64_t v43 = v93;
      uint64_t v42 = a3;
      int v41 = a2;
      goto LABEL_27;
    }
    int appended = vtAppendTexDescSample(v36, theArray, (_DWORD *)v101, a5, 4, 0, 1, v34, 0, 0, 1, 1u);
    int v40 = 0;
    if (!appended)
    {
      *(unsigned char *)(v37 + 127) = 0;
      *(_DWORD *)(a3 + 52 * v38 + 1352) = -1;
      *(unsigned char *)(v37 + 126) = 0;
      *float v92 = 0;
      int v40 = 1;
    }
  }
  else
  {
    int v40 = 0;
  }
  int v41 = a2;
  if ((v33[7] || a6 && !(v33[4] | v40))
    && (*(void *)&long long v101 = 0,
        selectFunctionConstantForMetalDevice(v36, a6, a2, v37 + 52, v37 + 84, &v101, (int *)(v37 + 108))))
  {
    uint64_t v43 = v93;
    uint64_t v42 = a3;
    if (!vtAppendTexDescSample(v36, v97, (_DWORD *)v101, a6, 4, 0, 1, v34, 0, 0, 1, 1u))
    {
      *float v92 = a7;
      int v40 = 1;
    }
    if (v40) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v43 = v93;
    uint64_t v42 = a3;
    if (v40)
    {
LABEL_24:
      uint64_t result = 0;
      float v45 = (unsigned char *)(v42 + 152 * *(int *)(v43 + 24));
      v45[115] = 1;
      v45[117] = 1;
      v45[112] = 0;
      v45[124] = 0;
      return result;
    }
  }
LABEL_27:
  int v46 = a25;
  int v47 = a26;
  uint64_t v49 = a23;
  uint64_t v48 = a24;
  ensureReadableFormatPair(*(void *)(v43 + 152), &v98, &a9);
  ensureReadableFormatPair(*(void *)(v43 + 152), &a13, &a14);
  ensureReadableFormatPair(*(void *)(v43 + 152), &a18, &a19);
  int v95 = v46;
  if (!*(void *)(v43 + 152)) {
    goto LABEL_51;
  }
  if (v49)
  {
    uint64_t v104 = 0;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v101 = 0u;
    MTLPixelFormatGetInfoForDevice();
    if ((BYTE8(v101) & 4) != 0) {
      uint64_t v50 = v49;
    }
    else {
      uint64_t v50 = 0;
    }
    if (v48) {
      goto LABEL_33;
    }
LABEL_37:
    uint64_t v51 = 0;
    goto LABEL_38;
  }
  uint64_t v50 = 0;
  if (!v48) {
    goto LABEL_37;
  }
LABEL_33:
  uint64_t v104 = 0;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v101 = 0u;
  MTLPixelFormatGetInfoForDevice();
  if ((BYTE8(v101) & 4) != 0) {
    uint64_t v51 = v48;
  }
  else {
    uint64_t v51 = 0;
  }
LABEL_38:
  if (v51) {
    BOOL v52 = 1;
  }
  else {
    BOOL v52 = v48 == 0;
  }
  if (v52) {
    uint64_t v53 = v50;
  }
  else {
    uint64_t v53 = 0;
  }
  if (v53) {
    BOOL v54 = 1;
  }
  else {
    BOOL v54 = v49 == 0;
  }
  if (v54) {
    uint64_t v48 = v51;
  }
  else {
    uint64_t v48 = 0;
  }
  uint64_t v49 = v53;
LABEL_51:
  float v55 = fmodf(*(float *)(v43 + 128), 4.0);
  uint64_t v56 = a13;
  uint64_t v57 = v98;
  if (*(_DWORD *)(v43 + 68) != 3) {
    goto LABEL_56;
  }
  int v58 = Count;
  if (!(v98 | a13))
  {
    int v66 = 0;
    goto LABEL_68;
  }
  int v59 = *(_DWORD *)(v43 + 24);
  if (!*(unsigned char *)(v43 + 208))
  {
    char v60 = *(unsigned char *)(v42 + 152 * v59 + 112);
    if (!v60) {
      goto LABEL_55;
    }
    if (v55 < 0.001 || v55 > 3.99)
    {
      char v60 = (*(unsigned char *)(v43 + 136) & 3) == 0;
      goto LABEL_55;
    }
  }
  char v60 = 0;
LABEL_55:
  *(unsigned char *)(v42 + 152 * v59 + 116) = v60;
LABEL_56:
  uint64_t v61 = a14;
  *(void *)&long long v101 = 0;
  if (!v56
    || (int v62 = *(_DWORD *)(v43 + 24), !*(unsigned char *)(v42 + 152 * v62 + 116))
    || v57 && !*(unsigned char *)(v42 + 152 * v62 + 124)
    || !selectFunctionConstantForMetalDevice(*(void *)(v43 + 152), v48, v41, v42 + 152 * v62 + 36, v42 + 152 * v62 + 68, &v101, 0))
  {
    int v66 = 0;
    int v58 = Count;
LABEL_68:
    if (v98)
    {
      if (!*(unsigned char *)(v43 + 73))
      {
        int v78 = *(_DWORD *)(v43 + 24);
        if (*(unsigned char *)(v42 + 152 * v78 + 116))
        {
          if (!*(unsigned char *)(v42 + 152 * v78 + 124))
          {
            uint64_t v79 = a9;
            uint64_t result = vtAppendTexDescRead(*(void *)(v43 + 152), v97, (_DWORD *)(v42 + 152 * v78 + 4), v98, 0, 4, v78, v58, 1, 1);
            if (result) {
              return result;
            }
            int v80 = a12;
            int v81 = *(_DWORD *)(v43 + 24);
            uint64_t v82 = v42 + 152 * v81;
            *(_DWORD *)(v82 + 108) = *(_DWORD *)(v43 + 188);
            *(_DWORD *)(v82 + 120) = v80;
            if (v79)
            {
              uint64_t result = vtAppendTexDescRead(*(void *)(v43 + 152), v97, (_DWORD *)(v42 + 152 * v81 + 8), v79, a10, a11, v81, v58 + 1, *(_DWORD *)(v43 + 196), *(_DWORD *)(v43 + 200));
              if (result) {
                return result;
              }
              int v81 = *(_DWORD *)(v43 + 24);
            }
            if (!*(unsigned char *)(v42 + 152 * v81 + 112))
            {
              uint64_t result = 0;
              *(_DWORD *)(v42 + 152 * v81 + 108) = v41;
              return result;
            }
            return 0;
          }
        }
      }
    }
    uint64_t v67 = a18;
    *(void *)&long long v101 = 0;
    if (!v49)
    {
LABEL_71:
      uint64_t v68 = a19;
      *(void *)&long long v101 = 0;
      if (!v67) {
        return 4294954391;
      }
      int v94 = v47;
      uint64_t result = vtAppendTexDescRead(*(void *)(v43 + 152), v97, (_DWORD *)(v42 + 152 * *(int *)(v43 + 24) + 20), v67, 0, 1, *(_DWORD *)(v43 + 24), v58, 1, 1);
      if (result) {
        return result;
      }
      int v72 = a22;
      int v73 = v58;
      int v74 = v58 + 1;
      int v75 = *(_DWORD *)(v43 + 24);
      uint64_t v76 = v42 + 152 * v75;
      *(_DWORD *)(v76 + 108) = *(_DWORD *)(v43 + 188);
      *(_DWORD *)(v76 + 120) = v72;
      *(unsigned char *)(v76 + 116) = 0;
      if (v68)
      {
        uint64_t result = vtAppendTexDescRead(*(void *)(v43 + 152), v97, (_DWORD *)(v42 + 152 * v75 + 24), v68, a20, a21, v75, v74, *(_DWORD *)(v43 + 196), *(_DWORD *)(v43 + 200));
        int v77 = v96;
        if (result) {
          return result;
        }
        int v74 = v73 + 2;
        int v75 = *(_DWORD *)(v43 + 24);
      }
      else
      {
        int v77 = v96;
      }
      if (v48)
      {
        if (!selectFunctionConstantForMetalDevice(*(void *)(v43 + 152), v48, v77, v42 + 152 * v75 + 52, v42 + 152 * v75 + 84, &v101, 0))return 4294954391; {
        int v86 = *(_DWORD *)(v43 + 24);
        }
        if (*(unsigned char *)(v42 + 152 * v86 + 112)) {
          int v87 = 1;
        }
        else {
          int v87 = 2;
        }
        uint64_t result = vtAppendTexDescSample(*(void *)(v43 + 152), v97, (_DWORD *)v101, v49, v87, 0, 1, v86, v74, v66, 1, 1u);
        if (result) {
          return result;
        }
        uint64_t v88 = v42 + 152 * *(int *)(v43 + 24);
        if (!selectFunctionConstantForMetalDevice(*(void *)(v43 + 152), v48, v77, v88 + 56, v88 + 88, &v101, 0))return 4294954391; {
        uint64_t result = vtAppendTexDescSample(*(void *)(v43 + 152), v97, (_DWORD *)v101, v48, 2, v95, v94, *(_DWORD *)(v43 + 24), v74 + 1, v66 + 1, *(_DWORD *)(v43 + 196), *(_DWORD *)(v43 + 200));
        }
        if (result) {
          return result;
        }
        int v75 = *(_DWORD *)(v43 + 24);
      }
      if (!*(unsigned char *)(v42 + 152 * v75 + 112))
      {
        uint64_t result = 0;
        *(_DWORD *)(v42 + 152 * v75 + 108) = v77;
        return result;
      }
      return 0;
    }
    int v69 = *(_DWORD *)(v43 + 24);
    if ((!a18
       || *(unsigned char *)(v42 + 152 * v69 + 124)
       || *(_DWORD *)(v43 + 68) == 2
       || !*(unsigned char *)(v42 + 152 * v69 + 112)
       || *(unsigned char *)(v43 + 73))
      && selectFunctionConstantForMetalDevice(*(void *)(v43 + 152), v49, v41, v42 + 152 * v69 + 52, v42 + 152 * v69 + 84, &v101, (int *)(v42 + 152 * v69 + 108)))
    {
      int v70 = *(_DWORD *)(v43 + 24);
      if (*(unsigned char *)(v42 + 152 * v70 + 112))
      {
        int v71 = 1;
      }
      else if (*(unsigned char *)(v42 + 152 * v70 + 115))
      {
        int v71 = 4;
      }
      else
      {
        int v71 = 2;
      }
      uint64_t result = vtAppendTexDescSample(*(void *)(v43 + 152), v97, (_DWORD *)v101, v49, v71, 0, 1, v70, v58, v66, 1, 1u);
      if (result) {
        return result;
      }
      if (!v48)
      {
LABEL_100:
        uint64_t result = 0;
        int v84 = a27;
        uint64_t v85 = v42 + 152 * *(int *)(v43 + 24);
        *(unsigned char *)(v85 + 124) = 0;
        *(_DWORD *)(v85 + 120) = v84;
        *(unsigned char *)(v85 + 116) = 0;
        return result;
      }
      ++v58;
      ++v66;
      uint64_t v83 = v42 + 152 * *(int *)(v43 + 24);
      if (selectFunctionConstantForMetalDevice(*(void *)(v43 + 152), v48, v41, v83 + 56, v83 + 88, &v101, (int *)(v83 + 108)))
      {
        uint64_t result = vtAppendTexDescSample(*(void *)(v43 + 152), v97, (_DWORD *)v101, v48, 2, v95, v47, *(_DWORD *)(v43 + 24), v58, v66, *(_DWORD *)(v43 + 196), *(_DWORD *)(v43 + 200));
        if (result) {
          return result;
        }
        goto LABEL_100;
      }
    }
    uint64_t v67 = a18;
    goto LABEL_71;
  }
  uint64_t result = vtAppendTexDescRead(*(void *)(v43 + 152), v97, (_DWORD *)v101, v56, 0, a16, *(_DWORD *)(v43 + 24), Count, 1, 1);
  if (result) {
    return result;
  }
  int v63 = *(_DWORD *)(v43 + 24);
  uint64_t v64 = v42 + 152 * v63;
  *(unsigned char *)(v64 + 124) = 0;
  *(_DWORD *)(v64 + 120) = 0;
  if (v61)
  {
    float v65 = v97;
    if (*(unsigned char *)(v43 + 73))
    {
      int v58 = Count + 1;
      if (!v48) {
        return 0;
      }
    }
    else
    {
      if (!selectFunctionConstantForMetalDevice(*(void *)(v43 + 152), v48, v41, v42 + 152 * v63 + 40, v42 + 152 * v63 + 72, &v101, (int *)(v42 + 152 * v63 + 108)))
      {
        int v66 = 1;
        int v58 = Count + 1;
        goto LABEL_68;
      }
      uint64_t result = vtAppendTexDescRead(*(void *)(v43 + 152), v97, (_DWORD *)v101, v61, a15, a17, *(_DWORD *)(v43 + 24), Count + 1, *(_DWORD *)(v43 + 196), *(_DWORD *)(v43 + 200));
      if (result) {
        return result;
      }
      int v58 = Count + 2;
      if (!v48) {
        return 0;
      }
    }
  }
  else
  {
    int v58 = Count + 1;
    float v65 = v97;
    if (!v48) {
      return 0;
    }
  }
  if (!*(unsigned char *)(v43 + 73)) {
    return 0;
  }
  uint64_t v89 = v42 + 152 * *(int *)(v43 + 24);
  int v66 = 1;
  if (!selectFunctionConstantForMetalDevice(*(void *)(v43 + 152), v48, v41, v89 + 56, v89 + 88, &v101, (int *)(v89 + 108)))goto LABEL_68; {
  uint64_t result = vtAppendTexDescSample(*(void *)(v43 + 152), v65, (_DWORD *)v101, v48, 2, v95, v47, *(_DWORD *)(v43 + 24), v58, 1, *(_DWORD *)(v43 + 196), *(_DWORD *)(v43 + 200));
  }
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t appendSrcTextureDescriptions_4PlaneSample(uint64_t a1, int a2, uint64_t a3, CFArrayRef theArray, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  v29[4] = *MEMORY[0x1E4F143B8];
  if (theArray) {
    int Count = CFArrayGetCount(theArray);
  }
  else {
    int Count = 0;
  }
  uint64_t v18 = 0;
  float64x2_t v25 = 0;
  v29[0] = a5;
  v29[1] = a6;
  v29[2] = a7;
  v29[3] = a8;
  uint64_t v19 = a3 + 52;
  int v20 = Count;
  int v27 = 1;
  int v28 = a9;
  uint64_t v26 = 0x100000001;
  while (1)
  {
    uint64_t v21 = v29[v18];
    if (!v21)
    {
LABEL_9:
      uint64_t result = 0;
      uint64_t v24 = a3 + 152 * *(int *)(a1 + 24);
      *(unsigned char *)(v24 + 124) = 0;
      *(_DWORD *)(v24 + 120) = 0;
      *(unsigned char *)(v24 + 116) = 0;
      return result;
    }
    int v22 = *((_DWORD *)&v26 + v18);
    uint64_t result = selectFunctionConstantForMetalDevice(*(void *)(a1 + 152), v29[v18], a2, v19 + 152 * *(int *)(a1 + 24), v19 + 152 * *(int *)(a1 + 24) + 32, &v25, (int *)(a3 + 152 * *(int *)(a1 + 24) + 108));
    if (!result) {
      return result;
    }
    if (vtAppendTexDescSample(*(void *)(a1 + 152), theArray, v25, v21, 2, v18, v22, *(_DWORD *)(a1 + 24), v20 + (int)v18, v18, 1, 1u))return 4294954391; {
    ++v18;
    }
    v19 += 4;
    if (v18 == 4) {
      goto LABEL_9;
    }
  }
}

uint64_t ensureReadableFormatPair(uint64_t result, void *a2, uint64_t *a3)
{
  if (result && a2 && a3)
  {
    uint64_t v5 = *a3;
    if (*a2)
    {
      uint64_t result = MTLPixelFormatGetInfoForDevice();
      if (!v5)
      {
LABEL_8:
        *a2 = 0;
        *a3 = 0;
        return result;
      }
    }
    else if (!v5)
    {
      goto LABEL_8;
    }
    uint64_t result = MTLPixelFormatGetInfoForDevice();
    goto LABEL_8;
  }
  return result;
}

uint64_t selectFunctionConstantForMetalDevice(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6, int *a7)
{
  uint64_t result = 0;
  if (!a1 || !a2) {
    return result;
  }
  MTLPixelFormatGetInfoForDevice();
  if ((*(_DWORD *)v15 & 0x20000) != 0)
  {
    uint64_t result = 1;
    int v14 = 1;
    if (a3 == 1 || (v15[2] & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v15[2])
  {
LABEL_8:
    int v14 = 2;
    uint64_t result = 1;
    a4 = a5;
    goto LABEL_9;
  }
  uint64_t result = 0;
  a4 = 0;
  int v14 = 0;
LABEL_9:
  if (a6) {
    *a6 = a4;
  }
  if (a7) {
    *a7 = v14;
  }
  return result;
}

uint64_t vtAppendTexDescSample(uint64_t a1, __CFArray *a2, _DWORD *a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, unsigned int a12)
{
  if (!a2) {
    return 4294954391;
  }
  if (!returnMetalFormatIfSamplable(a1, a4)) {
    return 4294954391;
  }
  MEMORY[0x199705810](&VTMTSTextureDescriptorGetTypeID_sRegisterVTMTSTextureDescriptorOnce, RegisterVTMTSTextureDescriptor);
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(_DWORD *)(Instance + 16) = 0;
  *(_DWORD *)(Instance + 20) = a8;
  *(_DWORD *)(Instance + 24) = a6;
  *(void *)(Instance + 32) = a4;
  *(_DWORD *)(Instance + 40) = a7;
  *(_DWORD *)(Instance + 44) = a9;
  *(_DWORD *)(Instance + 48) = a5;
  *(_DWORD *)(Instance + 52) = a10;
  *(_DWORD *)(Instance + 56) = a11;
  *(void *)(Instance + 60) = a12;
  CFArrayAppendValue(a2, (const void *)Instance);
  if (a3) {
    *a3 = a9;
  }
  CFRelease((CFTypeRef)Instance);
  return 0;
}

uint64_t vtAppendTexDescRead(uint64_t a1, __CFArray *a2, _DWORD *a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  if (!a2) {
    return 4294954391;
  }
  if (a1)
  {
    if (a4) {
      MTLPixelFormatGetInfoForDevice();
    }
    return 4294954391;
  }
  if (!a4) {
    return 4294954391;
  }
  MEMORY[0x199705810](&VTMTSTextureDescriptorGetTypeID_sRegisterVTMTSTextureDescriptorOnce, RegisterVTMTSTextureDescriptor);
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(_DWORD *)(Instance + 16) = 0;
  *(_DWORD *)(Instance + 20) = a7;
  *(_DWORD *)(Instance + 24) = a5;
  *(void *)(Instance + 32) = a4;
  *(_DWORD *)(Instance + 40) = a6;
  *(_DWORD *)(Instance + 44) = a8;
  *(_DWORD *)(Instance + 48) = 0;
  *(_DWORD *)(Instance + 60) = a10;
  *(_DWORD *)(Instance + 64) = 0;
  *(_DWORD *)(Instance + 56) = a9;
  CFArrayAppendValue(a2, (const void *)Instance);
  if (a3) {
    *a3 = a8;
  }
  CFRelease((CFTypeRef)Instance);
  return 0;
}

uint64_t returnMetalFormatIfWritable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (DescriptionWithPixelFormatType)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E4F24EE0]);
    if (Value)
    {
      CFArrayRef v7 = Value;
      CFTypeID v8 = CFGetTypeID(Value);
      if (v8 == CFArrayGetTypeID())
      {
        CFArrayGetValueAtIndex(v7, 0);
        FigCFDictionaryGetInt32IfPresent();
      }
    }
  }
  if (!a1) {
    return a3;
  }
  if (a3) {
    MTLPixelFormatGetInfoForDevice();
  }
  return 0;
}

uint64_t appendDstTextureDescriptions(unsigned int *a1, int a2, uint64_t a3, __CFArray *a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, int a16, int a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,int a24,int a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,int a31,int a32,int a33,int a34,int a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,int a40,int a41,int a42,int a43,int a44)
{
  int v46 = a5;
  int v51 = a1[1];
  BOOL v52 = (unsigned char *)*((void *)a1 + 13);
  if (v52[22] || *((unsigned char *)a1 + 68))
  {
    a10 = 0;
    a11 = 0;
    a12 = 0;
  }
  if (v52[23] || *((unsigned char *)a1 + 68))
  {
    a19 = 0;
    a20 = 0;
    a21 = 0;
  }
  if (v52[20])
  {
    a27 = 0;
    a28 = 0;
    a29 = 0;
  }
  if (v52[21])
  {
    a36 = 0;
    a37 = 0;
    a38 = 0;
  }
  unsigned int v53 = a1[6];
  if (v53 == 2)
  {
    CFDictionaryRef v54 = (const __CFDictionary *)*((void *)a1 + 2);
    uint64_t v55 = *((void *)a1 + 12);
    signed int v103 = a1[29];
    int v109 = 0;
    __int16 v108 = 0;
    getCharacteristicsFromPixelDescription(v54, 0, (uint64_t)&v108 + 1, 0, &v109, (uint64_t)&v108, 0, 0);
    char v56 = v52[12];
    int v107 = a2;
    if (v56)
    {
      if (!selectFunctionConstantForMetalDevice(v55, a6, a2, 0, 0, 0, (int *)(a3 + 1296)))
      {
LABEL_26:
        unsigned int v53 = a1[6];
        int v46 = a5;
        a2 = v107;
        goto LABEL_27;
      }
      char v57 = 1;
      if (vtAppendTexDescRender(v55, a4, a6, 0, 1, 0, 1, 1))
      {
        char v56 = 0;
      }
      else
      {
        char v57 = 0;
        *(_WORD *)(a3 + 1305) = 0;
        *(_DWORD *)(a3 + 52 * v103 + 1352) = -1;
        *(_DWORD *)(a3 + 1312) = a7;
        char v56 = 1;
      }
    }
    else
    {
      char v57 = 1;
    }
    if (!v52[13])
    {
      if (v52[10]) {
        char v56 = 1;
      }
      if (!a8 || (v56 & 1) != 0) {
        goto LABEL_25;
      }
    }
    if (selectFunctionConstantForMetalDevice(v55, a8, v107, 0, 0, 0, (int *)(a3 + 1296))
      && !vtAppendTexDescRender(v55, a4, a8, 0, 1, 0, 1, 1))
    {
      *(_DWORD *)(a3 + 1312) = a9;
    }
    else
    {
LABEL_25:
      if (v57) {
        goto LABEL_26;
      }
    }
    uint64_t result = 0;
    *(unsigned char *)(a3 + 1301) = 1;
LABEL_56:
    *(unsigned char *)(a3 + 1316) = 0;
    return result;
  }
LABEL_27:
  uint64_t v58 = *((void *)a1 + 12);
  if (v53 == 3)
  {
    ensureWritableFormatTriple(v58, *a1, &a10, &a11, &a12);
    ensureWritableFormatTriple(*((void *)a1 + 12), *a1, &a19, &a20, &a21);
    ensureWritableFormatTriple(*((void *)a1 + 12), *a1, &a27, &a28, &a29);
    ensureWritableFormatTriple(*((void *)a1 + 12), *a1, &a36, &a37, &a38);
  }
  else
  {
    ensureRenderableFormatTriple(v58, &a10, &a11, &a12);
    ensureRenderableFormatTriple(*((void *)a1 + 12), &a19, &a20, &a21);
    ensureRenderableFormatTriple(*((void *)a1 + 12), &a27, &a28, &a29);
    ensureRenderableFormatTriple(*((void *)a1 + 12), &a36, &a37, &a38);
  }
  unsigned int v59 = a1[6];
  uint64_t v60 = a19;
  uint64_t v61 = a10;
  if (v59 == 3)
  {
    if (!(a10 | a19)) {
      goto LABEL_58;
    }
    if (*((unsigned char *)a1 + 144))
    {
      BOOL v62 = (a1[18] & 3) == 0 && (a1[20] & 3) == 0;
      *(unsigned char *)(a3 + 1300) = v62;
    }
  }
  uint64_t v65 = a20;
  uint64_t v64 = a21;
  v110 = 0;
  if (v59 == 2 || !v60 || !*(unsigned char *)(a3 + 1300) || v61 && !*(unsigned char *)(a3 + 1316)) {
    goto LABEL_58;
  }
  *(unsigned char *)(a3 + 1316) = 0;
  *(_DWORD *)(a3 + 1312) = 0;
  if (!selectFunctionConstantForMetalDevice(*((void *)a1 + 12), v60, a2, a3 + 1248, a3 + 1272, &v110, (int *)(a3 + 1296)))goto LABEL_58; {
  uint64_t result = vtAppendTexDescWrite(*((void *)a1 + 12), *a1, a4, v110, v60, 0, a24, v51, 1, 1);
  }
  if (result) {
    return result;
  }
  if (!v65) {
    goto LABEL_55;
  }
  if (!selectFunctionConstantForMetalDevice(*((void *)a1 + 12), v65, a2, a3 + 1252, a3 + 1276, &v110, (int *)(a3 + 1296)))
  {
    ++v51;
    goto LABEL_58;
  }
  if (v46 == 1)
  {
    int v66 = a1[34];
    int v67 = a1[35];
  }
  else
  {
    int v66 = 1;
    int v67 = 1;
  }
  uint64_t result = vtAppendTexDescWrite(*((void *)a1 + 12), *a1, a4, v110, v65, a22, a25, v51 + 1, v66, v67);
  if (result) {
    return result;
  }
  if (!v64)
  {
LABEL_55:
    uint64_t result = 0;
    goto LABEL_56;
  }
  v51 += 2;
  if (!selectFunctionConstantForMetalDevice(*((void *)a1 + 12), v64, a2, a3 + 1256, a3 + 1280, &v110, (int *)(a3 + 1296)))
  {
LABEL_58:
    uint64_t v68 = a10;
    if (a10 && a1[6] != 2 && *(unsigned char *)(a3 + 1300))
    {
      int v69 = v46;
      int v70 = a15;
      int v71 = a18;
      uint64_t v73 = a11;
      uint64_t v72 = a12;
      *(_DWORD *)(a3 + 1296) = a1[33];
      *(_DWORD *)(a3 + 1312) = v71;
      uint64_t result = vtAppendTexDescWrite(*((void *)a1 + 12), *a1, a4, (_DWORD *)(a3 + 1224), v68, 0, v70, v51, 1, 1);
      if (!result)
      {
        if (!v73) {
          return 0;
        }
        if (v69 == 1)
        {
          int v74 = a1[34];
          int v75 = a1[35];
        }
        else
        {
          int v74 = 1;
          int v75 = 1;
        }
        uint64_t result = vtAppendTexDescWrite(*((void *)a1 + 12), *a1, a4, (_DWORD *)(a3 + 1228), v73, a13, a16, v51 + 1, v74, v75);
        if (!result)
        {
          if (!v72) {
            return 0;
          }
          uint64_t result = vtAppendTexDescWrite(*((void *)a1 + 12), *a1, a4, (_DWORD *)(a3 + 1232), v72, a14, a17, v51 + 2, 1, 1);
          if (!result) {
            return 0;
          }
        }
      }
      return result;
    }
    int v76 = a2;
    uint64_t v77 = a36;
    uint64_t v78 = a37;
    v111[0] = 0;
    if (!a36) {
      goto LABEL_99;
    }
    uint64_t v105 = a38;
    int v80 = a41;
    int v79 = a42;
    int v82 = a39;
    int v81 = a40;
    int v84 = a43;
    int v83 = a44;
    if (a27)
    {
      unsigned int v85 = a1[6];
      if (!*(unsigned char *)(a3 + 1316))
      {
        if (v85 == 2)
        {
          int v86 = a42;
          int v101 = a40;
          int v102 = a43;
          int v87 = (unsigned char *)(a3 + 1316);
          *(_DWORD *)(a3 + 1296) = v76;
          *(unsigned char *)(a3 + 1316) = 0;
          *(unsigned char *)(a3 + 1300) = 0;
          *(_DWORD *)(a3 + 1312) = v83;
          uint64_t v88 = *((void *)a1 + 12);
LABEL_73:
          uint64_t result = vtAppendTexDescRender(v88, a4, v77, 0, v80, 0, 1, 1);
          if (result) {
            return result;
          }
          if (v78)
          {
            uint64_t result = vtAppendTexDescRender(*((void *)a1 + 12), a4, v78, v82, v86, 1, a1[34], a1[35]);
            if (result) {
              return result;
            }
            if (v105)
            {
              uint64_t result = vtAppendTexDescRender(*((void *)a1 + 12), a4, v105, v101, v102, 2, a1[34], a1[35]);
              if (result) {
                return result;
              }
            }
          }
LABEL_97:
          uint64_t result = 0;
          *int v87 = 0;
          return result;
        }
        goto LABEL_99;
      }
    }
    else
    {
      unsigned int v85 = a1[6];
    }
    *(_DWORD *)(a3 + 1296) = v76;
    *(unsigned char *)(a3 + 1316) = 0;
    *(unsigned char *)(a3 + 1300) = 0;
    *(_DWORD *)(a3 + 1312) = v83;
    uint64_t v88 = *((void *)a1 + 12);
    int v101 = v81;
    int v102 = v84;
    if (v85 == 2)
    {
      int v86 = v79;
      int v87 = (unsigned char *)(a3 + 1316);
      goto LABEL_73;
    }
    int v100 = v79;
    if (selectFunctionConstantForMetalDevice(v88, v77, v76, a3 + 1260, a3 + 1284, v111, (int *)(a3 + 1296)))
    {
      uint64_t result = vtAppendTexDescWrite(*((void *)a1 + 12), *a1, a4, v111[0], v77, 0, v80, v51, 1, 1);
      if (result) {
        return result;
      }
      if (!v78) {
        goto LABEL_96;
      }
      if (!selectFunctionConstantForMetalDevice(*((void *)a1 + 12), v78, v76, a3 + 1264, a3 + 1288, v111, (int *)(a3 + 1296)))
      {
        ++v51;
        goto LABEL_99;
      }
      if (v46 == 1)
      {
        int v89 = a1[34];
        int v90 = a1[35];
      }
      else
      {
        int v89 = 1;
        int v90 = 1;
      }
      uint64_t result = vtAppendTexDescWrite(*((void *)a1 + 12), *a1, a4, v111[0], v78, v82, v100, v51 + 1, v89, v90);
      if (result) {
        return result;
      }
      if (!v105)
      {
LABEL_96:
        int v87 = (unsigned char *)(a3 + 1316);
        goto LABEL_97;
      }
      v51 += 2;
      if (selectFunctionConstantForMetalDevice(*((void *)a1 + 12), v105, v76, a3 + 1268, a3 + 1292, v111, (int *)(a3 + 1296)))
      {
        uint64_t result = vtAppendTexDescWrite(*((void *)a1 + 12), *a1, a4, v111[0], v105, v101, v102, v51, 1, 1);
        int v87 = (unsigned char *)(a3 + 1316);
        if (result) {
          return result;
        }
        goto LABEL_97;
      }
    }
LABEL_99:
    uint64_t v91 = a27;
    if (a27 && a1[6] != 2)
    {
      int v93 = v46;
      int v94 = a32;
      int v95 = a35;
      uint64_t v97 = a28;
      uint64_t v96 = a29;
      *(_DWORD *)(a3 + 1296) = a1[33];
      *(_DWORD *)(a3 + 1312) = v95;
      *(unsigned char *)(a3 + 1300) = 0;
      LODWORD(result) = vtAppendTexDescWrite(*((void *)a1 + 12), *a1, a4, (_DWORD *)(a3 + 1236), v91, 0, v94, v51, 1, 1);
      if (result
        || v97
        && (v93 != 1 ? (int v98 = 1, v99 = 1) : (int v98 = a1[34], v99 = a1[35]),
            (LODWORD(result) = vtAppendTexDescWrite(*((void *)a1 + 12), *a1, a4, (_DWORD *)(a3 + 1240), v97, a30, a33, v51 + 1, v98, v99), result)|| v96&& (LODWORD(result) = vtAppendTexDescWrite(*((void *)a1 + 12), *a1, a4, (_DWORD *)(a3 + 1244), v96, a31,
                                 a34,
                                 v51 + 2,
                                 1,
                                 1),
             result)))
      {
        int v92 = 0;
      }
      else
      {
        LODWORD(result) = 0;
        int v92 = 1;
      }
    }
    else
    {
      int v92 = 0;
      LODWORD(result) = 0;
    }
    if (result) {
      int v92 = 1;
    }
    if (v92) {
      return result;
    }
    else {
      return 4294954391;
    }
  }
  uint64_t result = vtAppendTexDescWrite(*((void *)a1 + 12), *a1, a4, v110, v64, a23, a26, v51, 1, 1);
  if (!result) {
    goto LABEL_55;
  }
  return result;
}

uint64_t ensureWritableFormatTriple(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if (result && a3 && a4 && a5)
  {
    uint64_t v9 = result;
    uint64_t v10 = *a3;
    uint64_t v11 = *a4;
    uint64_t v12 = *a5;
    uint64_t v13 = returnMetalFormatIfWritable(result, a2, *a3);
    uint64_t v14 = returnMetalFormatIfWritable(v9, a2, v11);
    uint64_t result = returnMetalFormatIfWritable(v9, a2, v12);
    if (v10) {
      BOOL v15 = v13 == 0;
    }
    else {
      BOOL v15 = 0;
    }
    int v16 = !v15;
    if (v15) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = v14;
    }
    if (v11) {
      BOOL v18 = v17 == 0;
    }
    else {
      BOOL v18 = 0;
    }
    int v19 = !v18;
    if ((v19 & v16) != 0) {
      uint64_t v20 = result;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v12) {
      BOOL v21 = v20 == 0;
    }
    else {
      BOOL v21 = 0;
    }
    int v22 = !v21;
    int v23 = v22 & v19;
    if (!v23) {
      uint64_t v17 = 0;
    }
    if ((v16 & v23) != 0) {
      uint64_t v24 = v13;
    }
    else {
      uint64_t v24 = 0;
    }
    *a3 = v24;
    if (v22) {
      uint64_t v25 = v20;
    }
    else {
      uint64_t v25 = 0;
    }
    *a4 = v17;
    *a5 = v25;
  }
  return result;
}

uint64_t ensureRenderableFormatTriple(uint64_t result, void *a2, uint64_t *a3, uint64_t *a4)
{
  if (result && a2 && a3 && a4)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = *a4;
    if (*a2)
    {
      uint64_t result = MTLPixelFormatGetInfoForDevice();
      if (v7) {
        goto LABEL_7;
      }
    }
    else if (v7)
    {
LABEL_7:
      uint64_t result = MTLPixelFormatGetInfoForDevice();
      if (!v8)
      {
LABEL_11:
        *a2 = 0;
        *a3 = 0;
        *a4 = 0;
        return result;
      }
LABEL_8:
      uint64_t result = MTLPixelFormatGetInfoForDevice();
      goto LABEL_11;
    }
    if (!v8) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  return result;
}

uint64_t vtAppendTexDescRender(uint64_t a1, __CFArray *a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  if (!a2) {
    return 4294954391;
  }
  if (!returnMetalFormatIfRenderable(a1, a3)) {
    return 4294954391;
  }
  MEMORY[0x199705810](&VTMTSTextureDescriptorGetTypeID_sRegisterVTMTSTextureDescriptorOnce, RegisterVTMTSTextureDescriptor);
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 16) = 1;
  *(_DWORD *)(Instance + 24) = a4;
  *(void *)(Instance + 32) = a3;
  *(_DWORD *)(Instance + 40) = a5;
  *(_DWORD *)(Instance + 44) = a6;
  *(_DWORD *)(Instance + 48) = 0;
  *(_DWORD *)(Instance + 60) = a8;
  *(_DWORD *)(Instance + 64) = 1;
  *(_DWORD *)(Instance + 56) = a7;
  CFArrayAppendValue(a2, (const void *)Instance);
  CFRelease((CFTypeRef)Instance);
  return 0;
}

uint64_t returnMetalFormatIfRenderable(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1 && a2)
  {
    MTLPixelFormatGetInfoForDevice();
    return 0;
  }
  return v2;
}

uint64_t vtAppendTexDescWrite(uint64_t a1, uint64_t a2, __CFArray *a3, _DWORD *a4, uint64_t a5, int a6, int a7, int a8, int a9, int a10)
{
  if (!a3) {
    return 4294954391;
  }
  if (!returnMetalFormatIfWritable(a1, a2, a5)) {
    return 4294954391;
  }
  MEMORY[0x199705810](&VTMTSTextureDescriptorGetTypeID_sRegisterVTMTSTextureDescriptorOnce, RegisterVTMTSTextureDescriptor);
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 16) = 1;
  *(_DWORD *)(Instance + 24) = a6;
  *(void *)(Instance + 32) = a5;
  *(_DWORD *)(Instance + 40) = a7;
  *(_DWORD *)(Instance + 44) = a8;
  *(_DWORD *)(Instance + 48) = 0;
  *(_DWORD *)(Instance + 60) = a10;
  *(_DWORD *)(Instance + 64) = 0;
  *(_DWORD *)(Instance + 56) = a9;
  CFArrayAppendValue(a3, (const void *)Instance);
  if (a4) {
    *a4 = a8;
  }
  CFRelease((CFTypeRef)Instance);
  return 0;
}

uint64_t formatSupportsChangeRange(int a1)
{
  uint64_t result = 0;
  if (a1 > 1952855091)
  {
    if (a1 <= 2019963441)
    {
      if (a1 <= 1982882103)
      {
        if (a1 > 1953903153)
        {
          if (a1 == 1953903154) {
            return 1;
          }
          unsigned __int16 v6 = 13364;
        }
        else
        {
          if (a1 == 1952855092) {
            return 1;
          }
          unsigned __int16 v6 = 12848;
        }
        int v3 = v6 | 0x74760000;
        goto LABEL_58;
      }
      if (a1 <= 2016686641)
      {
        if (a1 == 1982882104) {
          return 1;
        }
        int v3 = 2016686640;
        goto LABEL_58;
      }
      if (a1 == 2016686642 || a1 == 2016687156) {
        return 1;
      }
      unsigned __int16 v5 = 12848;
    }
    else
    {
      if (a1 > 2021077551)
      {
        if (a1 <= 2021078067)
        {
          if (a1 == 2021077552) {
            return 1;
          }
          int v3 = 2021077554;
        }
        else
        {
          if (a1 == 2021078068 || a1 == 2037741171) {
            return 1;
          }
          int v3 = 2037741158;
        }
        goto LABEL_58;
      }
      if (a1 > 2020619315)
      {
        if (a1 == 2020619316 || a1 == 2020632116) {
          return 1;
        }
        int v3 = 2020636468;
        goto LABEL_58;
      }
      if (a1 == 2019963442) {
        return 1;
      }
      unsigned __int16 v5 = 13364;
    }
    int v3 = v5 | 0x78660000;
    goto LABEL_58;
  }
  if (a1 <= 1751527985)
  {
    if (a1 > 875704933)
    {
      if (a1 > 875836517)
      {
        if (a1 == 875836518 || a1 == 875836534) {
          return 1;
        }
        unsigned __int16 v4 = 12848;
LABEL_40:
        int v3 = v4 | 0x68660000;
        goto LABEL_58;
      }
      if (a1 == 875704934) {
        return 1;
      }
      unsigned __int16 v7 = 12918;
      goto LABEL_54;
    }
    if (a1 > 875704421)
    {
      if (a1 == 875704422) {
        return 1;
      }
      unsigned __int16 v7 = 12406;
LABEL_54:
      int v3 = v7 | 0x34320000;
      goto LABEL_58;
    }
    if (a1 == 846624102) {
      return 1;
    }
    int v3 = 846624121;
LABEL_58:
    if (a1 != v3) {
      return result;
    }
    return 1;
  }
  if (a1 > 1937125935)
  {
    if (a1 <= 1937126451)
    {
      if (a1 == 1937125936) {
        return 1;
      }
      int v3 = 1937125938;
    }
    else
    {
      if (a1 == 1937126452 || a1 == 1952854576) {
        return 1;
      }
      int v3 = 1952854578;
    }
    goto LABEL_58;
  }
  if (a1 <= 1936077359)
  {
    if (a1 == 1751527986) {
      return 1;
    }
    unsigned __int16 v4 = 13364;
    goto LABEL_40;
  }
  if (a1 != 1936077360 && a1 != 1936077362)
  {
    int v3 = 1936077876;
    goto LABEL_58;
  }
  return 1;
}

void vtmtsBuildScalingTable(void *a1, int a2, float *a3, void *a4, _DWORD *a5, _DWORD *a6, float a7, float a8)
{
  uint64_t v8 = 0;
  if (a7 >= -1.0) {
    float v9 = a7;
  }
  else {
    float v9 = -1.0;
  }
  if (a7 <= 1.0) {
    float v10 = v9;
  }
  else {
    float v10 = 1.0;
  }
  if (a3 && a1 && a4 && a5 && a6)
  {
    if (a7 <= 0.001 && a7 >= -0.001)
    {
      uint64_t v8 = 0;
    }
    else
    {
      int v11 = (int)(fabsf(3.0 / v10) * 2.0 + 0.5);
      if (v11 <= 6) {
        uint64_t v12 = 6;
      }
      else {
        uint64_t v12 = v11;
      }
      uint64_t v13 = (v12 + 3);
      uint64_t v31 = v13 & 0x7FFFFFFC;
      uint64_t v14 = (float *)malloc_type_malloc(4 * (v31 << 6), 0x100004052888210uLL);
      unint64_t v15 = 0;
      float v16 = 1.0;
      __int16 v33 = v14;
      do
      {
        float v17 = (float)((float)((float)(int)v12 * -0.5) + 1.0) + (float)((float)v15 * -0.015625);
        float v18 = 0.0;
        int v19 = v14;
        uint64_t v20 = v12;
        do
        {
          float v21 = v10 * v17;
          float v22 = fabsf(v10 * v17);
          float v23 = 0.0;
          if (v22 < 3.0)
          {
            float v23 = 1.0;
            if (v22 >= 0.000000059605)
            {
              float v24 = sinf(v21 * 3.1416);
              float v25 = sinf((float)(v21 * 3.1416) / 3.0);
              float v16 = 1.0;
              float v23 = (float)(v24 * v25) / (float)((float)(v21 * (float)((float)(v21 * 3.1416) * 3.1416)) / 3.0);
            }
          }
          *v19++ = v23;
          float v18 = v18 + v23;
          float v17 = v17 + v16;
          --v20;
        }
        while (v20);
        uint64_t v26 = 0;
        do
        {
          v14[v26] = (float)(v16 / v18) * v14[v26];
          ++v26;
        }
        while (v12 != v26);
        ++v15;
        uint64_t v14 = (float *)((char *)v14 + ((4 * v13) & 0x3FFFFFFF0));
      }
      while (v15 != 64);
      uint64_t v27 = v13 >> 2;
      int v28 = objc_msgSend(a1, "newTextureWithDescriptor:", objc_msgSend(MEMORY[0x1E4F35330], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 125, v27, 64, 0));
      memset(v41, 0, 24);
      v41[3] = v27;
      long long v42 = xmmword_193E80660;
      uint64_t v8 = v33;
      [v28 replaceRegion:v41 mipmapLevel:0 withBytes:v33 bytesPerRow:4 * v31];
      double v29 = (float)(0.5 / a7) - (double)(int)v12 * 0.5 + 0.5;
      if (!a2) {
        double v29 = 0.5 - (double)(int)v12 * 0.5;
      }
      float v30 = v29;
      *a3 = v30 * a8;
      *a5 = v12;
      *a6 = 64;
      *a4 = v28;
    }
  }
  free(v8);
}

uint64_t loadMTLFunctionConstants(unsigned int *a1, id *a2)
{
  *a2 = 0;
  uint64_t result = objc_opt_new();
  unsigned __int16 v5 = (void *)result;
  if (a1)
  {
    int EquivalentUncompressedPixelFormat = getEquivalentUncompressedPixelFormat(*a1);
    int v13 = getEquivalentUncompressedPixelFormat(a1[38]);
    int v12 = getEquivalentUncompressedPixelFormat(a1[305]);
    [v5 setConstantValue:&EquivalentUncompressedPixelFormat type:33 atIndex:0];
    [v5 setConstantValue:&v13 type:33 atIndex:1];
    [v5 setConstantValue:&v12 type:33 atIndex:2];
    [v5 setConstantValue:a1 + 9 type:29 atIndex:3];
    [v5 setConstantValue:a1 + 10 type:29 atIndex:4];
    [v5 setConstantValue:a1 + 11 type:29 atIndex:5];
    [v5 setConstantValue:a1 + 12 type:29 atIndex:6];
    [v5 setConstantValue:a1 + 13 type:29 atIndex:7];
    [v5 setConstantValue:a1 + 14 type:29 atIndex:8];
    [v5 setConstantValue:a1 + 15 type:29 atIndex:9];
    [v5 setConstantValue:a1 + 16 type:29 atIndex:10];
    [v5 setConstantValue:a1 + 17 type:29 atIndex:11];
    [v5 setConstantValue:a1 + 18 type:29 atIndex:12];
    [v5 setConstantValue:a1 + 19 type:29 atIndex:13];
    [v5 setConstantValue:a1 + 20 type:29 atIndex:14];
    [v5 setConstantValue:a1 + 21 type:29 atIndex:15];
    [v5 setConstantValue:a1 + 22 type:29 atIndex:16];
    [v5 setConstantValue:a1 + 23 type:29 atIndex:17];
    [v5 setConstantValue:a1 + 24 type:29 atIndex:18];
    [v5 setConstantValue:a1 + 1 type:29 atIndex:19];
    [v5 setConstantValue:a1 + 2 type:29 atIndex:20];
    [v5 setConstantValue:a1 + 3 type:29 atIndex:21];
    [v5 setConstantValue:a1 + 4 type:29 atIndex:22];
    [v5 setConstantValue:a1 + 5 type:29 atIndex:23];
    [v5 setConstantValue:a1 + 6 type:29 atIndex:24];
    [v5 setConstantValue:a1 + 7 type:29 atIndex:25];
    [v5 setConstantValue:a1 + 8 type:29 atIndex:26];
    [v5 setConstantValue:a1 + 47 type:29 atIndex:27];
    [v5 setConstantValue:a1 + 48 type:29 atIndex:28];
    [v5 setConstantValue:a1 + 51 type:29 atIndex:29];
    [v5 setConstantValue:a1 + 52 type:29 atIndex:30];
    [v5 setConstantValue:a1 + 55 type:29 atIndex:31];
    [v5 setConstantValue:a1 + 56 type:29 atIndex:32];
    [v5 setConstantValue:a1 + 59 type:29 atIndex:33];
    [v5 setConstantValue:a1 + 60 type:29 atIndex:34];
    [v5 setConstantValue:a1 + 39 type:29 atIndex:35];
    [v5 setConstantValue:a1 + 40 type:29 atIndex:36];
    [v5 setConstantValue:a1 + 43 type:29 atIndex:37];
    [v5 setConstantValue:a1 + 44 type:29 atIndex:38];
    [v5 setConstantValue:a1 + 312 type:29 atIndex:39];
    [v5 setConstantValue:a1 + 313 type:29 atIndex:40];
    [v5 setConstantValue:a1 + 314 type:29 atIndex:41];
    [v5 setConstantValue:a1 + 315 type:29 atIndex:42];
    [v5 setConstantValue:a1 + 316 type:29 atIndex:43];
    [v5 setConstantValue:a1 + 317 type:29 atIndex:44];
    [v5 setConstantValue:a1 + 318 type:29 atIndex:45];
    [v5 setConstantValue:a1 + 319 type:29 atIndex:46];
    [v5 setConstantValue:a1 + 320 type:29 atIndex:47];
    [v5 setConstantValue:a1 + 321 type:29 atIndex:48];
    [v5 setConstantValue:a1 + 322 type:29 atIndex:49];
    [v5 setConstantValue:a1 + 323 type:29 atIndex:50];
    [v5 setConstantValue:a1 + 306 type:29 atIndex:51];
    [v5 setConstantValue:a1 + 307 type:29 atIndex:52];
    [v5 setConstantValue:a1 + 308 type:29 atIndex:53];
    [v5 setConstantValue:a1 + 309 type:29 atIndex:54];
    [v5 setConstantValue:a1 + 310 type:29 atIndex:55];
    [v5 setConstantValue:a1 + 311 type:29 atIndex:56];
    [v5 setConstantValue:a1 + 25 type:29 atIndex:57];
    [v5 setConstantValue:a1 + 26 type:29 atIndex:58];
    [v5 setConstantValue:a1 + 64 type:29 atIndex:59];
    [v5 setConstantValue:a1 + 27 type:29 atIndex:60];
    [v5 setConstantValue:a1 + 65 type:29 atIndex:61];
    [v5 setConstantValue:a1 + 304 type:29 atIndex:62];
    [v5 setConstantValue:a1 + 324 type:29 atIndex:63];
    [v5 setConstantValue:a1 + 28 type:53 atIndex:64];
    [v5 setConstantValue:(char *)a1 + 113 type:53 atIndex:65];
    [v5 setConstantValue:(char *)a1 + 114 type:53 atIndex:66];
    [v5 setConstantValue:(char *)a1 + 115 type:53 atIndex:67];
    [v5 setConstantValue:a1 + 29 type:53 atIndex:68];
    [v5 setConstantValue:(char *)a1 + 117 type:53 atIndex:69];
    [v5 setConstantValue:a1 + 66 type:53 atIndex:70];
    [v5 setConstantValue:(char *)a1 + 265 type:53 atIndex:71];
    [v5 setConstantValue:(char *)a1 + 266 type:53 atIndex:72];
    [v5 setConstantValue:(char *)a1 + 267 type:53 atIndex:73];
    [v5 setConstantValue:a1 + 67 type:53 atIndex:74];
    [v5 setConstantValue:(char *)a1 + 269 type:53 atIndex:75];
    [v5 setConstantValue:a1 + 325 type:53 atIndex:76];
    [v5 setConstantValue:(char *)a1 + 1301 type:53 atIndex:77];
    [v5 setConstantValue:a1 + 30 type:29 atIndex:78];
    [v5 setConstantValue:a1 + 31 type:53 atIndex:79];
    [v5 setConstantValue:(char *)a1 + 125 type:53 atIndex:80];
    [v5 setConstantValue:(char *)a1 + 126 type:53 atIndex:81];
    [v5 setConstantValue:(char *)a1 + 127 type:53 atIndex:82];
    [v5 setConstantValue:a1 + 32 type:53 atIndex:83];
    [v5 setConstantValue:(char *)a1 + 129 type:53 atIndex:84];
    [v5 setConstantValue:a1 + 68 type:29 atIndex:85];
    [v5 setConstantValue:a1 + 69 type:53 atIndex:86];
    [v5 setConstantValue:(char *)a1 + 277 type:53 atIndex:87];
    [v5 setConstantValue:(char *)a1 + 278 type:53 atIndex:88];
    [v5 setConstantValue:(char *)a1 + 279 type:53 atIndex:89];
    [v5 setConstantValue:a1 + 70 type:53 atIndex:90];
    [v5 setConstantValue:(char *)a1 + 281 type:53 atIndex:91];
    [v5 setConstantValue:(char *)a1 + 1303 type:53 atIndex:92];
    [v5 setConstantValue:a1 + 326 type:53 atIndex:93];
    [v5 setConstantValue:(char *)a1 + 1305 type:53 atIndex:94];
    [v5 setConstantValue:(char *)a1 + 1307 type:53 atIndex:95];
    [v5 setConstantValue:a1 + 327 type:53 atIndex:96];
    [v5 setConstantValue:(char *)a1 + 1309 type:53 atIndex:97];
    [v5 setConstantValue:(char *)a1 + 1306 type:53 atIndex:98];
    [v5 setConstantValue:a1 + 328 type:29 atIndex:99];
    [v5 setConstantValue:a1 + 329 type:53 atIndex:100];
    [v5 setConstantValue:a1 + 33 type:29 atIndex:102];
    [v5 setConstantValue:a1 + 35 type:29 atIndex:103];
    [v5 setConstantValue:a1 + 36 type:29 atIndex:104];
    [v5 setConstantValue:a1 + 37 type:29 atIndex:105];
    [v5 setConstantValue:a1 + 71 type:29 atIndex:106];
    [v5 setConstantValue:a1 + 73 type:29 atIndex:107];
    [v5 setConstantValue:a1 + 74 type:29 atIndex:108];
    [v5 setConstantValue:a1 + 75 type:29 atIndex:109];
    [v5 setConstantValue:a1 + 330 type:29 atIndex:110];
    [v5 setConstantValue:a1 + 332 type:29 atIndex:111];
    [v5 setConstantValue:a1 + 333 type:29 atIndex:112];
    [v5 setConstantValue:a1 + 334 type:29 atIndex:113];
    [v5 setConstantValue:a1 + 335 type:33 atIndex:114];
    [v5 setConstantValue:a1 + 336 type:29 atIndex:101];
    [v5 setConstantValue:a1 + 337 type:53 atIndex:115];
    [v5 setConstantValue:(char *)a1 + 1349 type:53 atIndex:116];
    [v5 setConstantValue:(char *)a1 + 1350 type:53 atIndex:117];
    [v5 setConstantValue:(char *)a1 + 1351 type:53 atIndex:118];
    uint64_t v6 = 0;
    unsigned __int16 v7 = a1 + 339;
    uint64_t v8 = 123;
    do
    {
      float v9 = &a1[13 * v6];
      [v5 setConstantValue:v9 + 338 type:29 atIndex:13 * v6 + 119];
      [v5 setConstantValue:v9 + 348 type:53 atIndex:13 * v6 + 120];
      [v5 setConstantValue:v9 + 349 type:3 atIndex:13 * v6 + 121];
      [v5 setConstantValue:v9 + 350 type:3 atIndex:13 * v6 + 122];
      uint64_t v10 = 0;
      int v11 = v7;
      do
        [v5 setConstantValue:v11++ type:3 atIndex:v8 + v10++];
      while (v10 != 9);
      ++v6;
      v7 += 13;
      v8 += 13;
    }
    while (v6 != 9);
    [v5 setConstantValue:a1 + 455 type:29 atIndex:236];
    uint64_t result = [v5 setConstantValue:a1 + 456 type:29 atIndex:237];
  }
  *a2 = v5;
  return result;
}

float *setBufferExtents(float *result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = result;
  int v15 = a5;
  int v16 = a4;
  if (a6 && a2[4] == 1)
  {
    *uint64_t result = 0.0;
LABEL_8:
    v10[1] = 0.0;
LABEL_13:
    v10[2] = (float)(unint64_t)(a4 - 1);
LABEL_14:
    float v11 = (float)(unint64_t)(a5 - 1);
LABEL_15:
    v10[3] = v11;
    return result;
  }
  if (a2[14]) {
    uint64_t result = (float *)FigCFDictionaryGetInt32IfPresent();
  }
  *uint64_t v10 = 0.0;
  if (a6 && a2[4] == 1) {
    goto LABEL_8;
  }
  if (a2[15]) {
    uint64_t result = (float *)FigCFDictionaryGetInt32IfPresent();
  }
  v10[1] = 0.0;
  if (a6 && a2[4] == 1) {
    goto LABEL_13;
  }
  if (!a2[14] || (uint64_t result = (float *)FigCFDictionaryGetInt32IfPresent(), !result))
  {
    float v13 = (float)(unint64_t)(a4 - 1);
LABEL_22:
    v10[2] = v13;
    if (!a6) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  float v12 = (float)(((v16 + a2[10] - 1) / a2[10] + a2[14] - 1) / a2[14] - 1);
  v10[2] = v12;
  float v13 = (float)(unint64_t)(a4 - 1);
  if (v12 > v13) {
    goto LABEL_22;
  }
  if (!a6) {
    goto LABEL_24;
  }
LABEL_23:
  if (a2[4] == 1) {
    goto LABEL_14;
  }
LABEL_24:
  if (!a2[15]) {
    goto LABEL_14;
  }
  uint64_t result = (float *)FigCFDictionaryGetInt32IfPresent();
  if (!result) {
    goto LABEL_14;
  }
  float v14 = (float)((v15 + a2[15] - 1) / a2[15] - 1);
  v10[3] = v14;
  float v11 = (float)(unint64_t)(a5 - 1);
  if (v14 > v11) {
    goto LABEL_15;
  }
  return result;
}

void vtGetBufferAttachmentInt32IfPresent(__CVBuffer *a1, const __CFString *a2, _DWORD *a3)
{
  CFTypeRef v4 = CVBufferCopyAttachment(a1, a2, 0);
  if (v4)
  {
    unsigned __int16 v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFNumberGetTypeID())
    {
      int SInt32 = FigCFNumberGetSInt32();
      if (a3) {
        *a3 = SInt32;
      }
    }
    CFRelease(v5);
  }
}

void vtGetBufferAttachmentFloatIfPresent(__CVBuffer *a1, const __CFString *a2, _DWORD *a3)
{
  CFTypeRef v4 = CVBufferCopyAttachment(a1, a2, 0);
  if (v4)
  {
    unsigned __int16 v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFNumberGetTypeID())
    {
      FigCFNumberGetFloat32();
      if (a3) {
        *a3 = v7;
      }
    }
    CFRelease(v5);
  }
}

uint64_t VTDecompressionSessionRemoteServer_EnableMIO(uint64_t a1)
{
  outputMultiImageRefcon = 0;
  if (!vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&outputMultiImageRefcon)) {
    VTDecompressionSessionSetMultiImageCallback(*((VTDecompressionSessionRef *)outputMultiImageRefcon + 3), (VTDecompressionOutputMultiImageCallback)vtdss_enqueueTaggedBufferGroup, outputMultiImageRefcon);
  }
  if (outputMultiImageRefcon) {
    CFRelease(outputMultiImageRefcon);
  }
  return 0;
}

uint64_t vtdss_findAndRetainClientFromCommandPort(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigRPCLookupClientConnection();
  if (!result)
  {
    uint64_t result = FigRPCGetConnectionInfo();
    if (!result)
    {
      if (a2)
      {
        uint64_t result = 4294954393;
        if (*(void *)a2)
        {
          if (*(unsigned char *)(*(void *)a2 + 185)) {
            return 4294954393;
          }
          else {
            return 0;
          }
        }
      }
      else
      {
        return 4294954393;
      }
    }
  }
  return result;
}

void vtdss_enqueueTaggedBufferGroup(uint64_t a1, uint64_t a2, int a3, int a4, const void *a5, long long *a6, long long *a7)
{
  if (!*(unsigned char *)(a1 + 184) && !*(unsigned char *)(a1 + 186))
  {
    float v14 = malloc_type_calloc(1uLL, 0x58uLL, 0x10A00404D8A4D16uLL);
    if (v14)
    {
      uint64_t v15 = (uint64_t)v14;
      v14[1] = a2;
      *((_DWORD *)v14 + 4) = a3;
      *((_DWORD *)v14 + 5) = a4;
      if (a5) {
        CFTypeRef v16 = CFRetain(a5);
      }
      else {
        CFTypeRef v16 = 0;
      }
      *(void *)(v15 + 32) = v16;
      long long v17 = *a6;
      *(void *)(v15 + 56) = *((void *)a6 + 2);
      *(_OWORD *)(v15 + 40) = v17;
      long long v18 = *a7;
      *(void *)(v15 + 80) = *((void *)a7 + 2);
      *(_OWORD *)(v15 + 64) = v18;
      vtdss_enqueueFrame(a1, v15);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t VTDecompressionSessionServerStart()
{
  FigKTraceInit();
  int ShouldUseSeparateCodecProcessForDecode = VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode();
  BOOL v1 = ShouldUseSeparateCodecProcessForDecode != 0;
  if (ShouldUseSeparateCodecProcessForDecode) {
    uint64_t v2 = "com.apple.coremedia.videocodecd.decompressionsession";
  }
  else {
    uint64_t v2 = "com.apple.coremedia.decompressionsession";
  }

  return MEMORY[0x1F40DDF60](v2, 636, v1, &VTDecompressionSessionServerStart_subsystems, 1, VTDecompressionSessionRemoteServer_Destroy, VTDecompressionSessionServerStart_timeoutDebugCallbacks, &gVTDecompressionServerState);
}

uint64_t vtdss_createTimeoutDebugContext(uint64_t a1)
{
  CFTypeRef cf = 0;
  vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&cf);
  if (!cf) {
    return 0;
  }
  uint64_t v1 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (cf) {
    CFRelease(cf);
  }
  return v1;
}

void vtdss_freeTimeoutDebugContext(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void vtdss_collectTimeoutDebugInfo(uint64_t a1, char *__str, size_t __size)
{
  CFDictionaryRef v51 = 0;
  v52[0] = 0;
  CFDictionaryRef v50 = 0;
  CMTime v49 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v48 = v49;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v45 = 0;
  if (!a1)
  {
    snprintf(__str, __size, "debugContext is NULL");
    goto LABEL_15;
  }
  uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
  {
    snprintf(__str, __size, "iClient is NULL");
    goto LABEL_15;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 + 24);
  if (v7)
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v9 = VTDecompressionSessionCopyProperty(*(void *)(v5 + 24), @"NumberOfFramesBeingDecoded", (const __CFAllocator *)*MEMORY[0x1E4F1CF80], v52);
    if (v9)
    {
      uint64_t v29 = v9;
      uint64_t v27 = "failed to get pending frame count: err = %d";
    }
    else
    {
      uint64_t UInt32 = FigCFNumberGetUInt32();
      if (VTDecompressionSessionCopyProperty(v7, @"MinOutputPresentationTimeStampOfFramesBeingDecoded", v8, &v51))
      {
        uint64_t v27 = "failed to get minOutputPTS of pending frames";
      }
      else
      {
        CMTimeMakeFromDictionary(&v49, v51);
        if (VTDecompressionSessionCopyProperty(v7, @"MaxOutputPresentationTimeStampOfFramesBeingDecoded", v8, &v50))
        {
          uint64_t v27 = "failed to get maxOutputPTS of pending frames";
        }
        else
        {
          CMTimeMakeFromDictionary(&v48, v50);
          uint64_t v11 = VTDecompressionSessionCopyProperty(v7, @"NumberOfFramesInDecoder", v8, &v47);
          if (v11)
          {
            uint64_t v29 = v11;
            uint64_t v27 = "failed to get frames in decoder count: err = %d";
          }
          else
          {
            uint64_t UInt64 = FigCFNumberGetUInt64();
            uint64_t v13 = VTDecompressionSessionCopyProperty(v7, @"MinFrameIDOfFramesInDecoder", v8, &v46);
            if (v13)
            {
              uint64_t v29 = v13;
              uint64_t v27 = "failed to get MinFrameIDOfFramesInDecoder: err = %d";
            }
            else
            {
              uint64_t v14 = FigCFNumberGetUInt64();
              uint64_t v15 = VTDecompressionSessionCopyProperty(v7, @"MaxFrameIDOfFramesInDecoder", v8, &v45);
              if (!v15)
              {
                uint64_t v43 = UInt32;
                uint64_t v16 = FigCFNumberGetUInt64();
                long long v17 = *(const opaqueCMFormatDescription **)(v6 + 40);
                long long v42 = __str;
                size_t v18 = __size;
                if (v17) {
                  LODWORD(v17) = CMFormatDescriptionGetMediaSubType(v17);
                }
                uint64_t v19 = v17 >> 24;
                uint64_t v20 = BYTE2(v17);
                uint64_t v21 = BYTE1(v17);
                uint64_t v22 = v17;
                CMTime time = v49;
                Float64 Seconds = CMTimeGetSeconds(&time);
                CMTime time = v48;
                Float64 v24 = CMTimeGetSeconds(&time);
                CMTime time = *(CMTime *)(v6 + 224);
                Float64 v25 = CMTimeGetSeconds(&time);
                uint64_t v40 = v14;
                uint64_t v41 = v16;
                uint64_t v38 = *(void *)(v6 + 248);
                uint64_t v39 = UInt64;
                Float64 v36 = v24;
                Float64 v37 = v25;
                Float64 v35 = Seconds;
                uint64_t v26 = v42;
                uint64_t v33 = v22;
                uint64_t v34 = v43;
                uint64_t v27 = "session[%p]: codecType: '%c%c%c%c' pendingFramesCount: %d, (minPTS: %1.3f, maxPTS: %1.3f), last De"
                      "codeFrame PTS: %1.3f (frameID: %llu), framesInDecoder: %llu, (minFrameID: %llu, maxFrameID: %llu)";
                uint64_t v31 = v20;
                uint64_t v32 = v21;
                uint64_t v29 = v7;
                uint64_t v30 = v19;
                size_t v28 = v18;
                goto LABEL_13;
              }
              uint64_t v29 = v15;
              uint64_t v27 = "failed to get MaxFrameIDOfFramesInDecoder: err = %d";
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t v27 = "decompressionSession is NULL";
  }
  uint64_t v26 = __str;
  size_t v28 = __size;
LABEL_13:
  snprintf(v26, v28, v27, v29, v30, v31, v32, v33, v34, *(void *)&v35, *(void *)&v36, *(void *)&v37, v38, v39, v40, v41);
  CFRelease((CFTypeRef)v6);
  if (v52[0]) {
    CFRelease(v52[0]);
  }
LABEL_15:
  if (v51) {
    CFRelease(v51);
  }
  if (v50) {
    CFRelease(v50);
  }
}

uint64_t VTDecompressionSessionRemoteServer_Destroy(uint64_t a1)
{
  uint64_t v6 = 0;
  vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v6);
  uint64_t v1 = v6;
  if (v6)
  {
    *(unsigned char *)(v6 + 184) = 1;
    if (*(void *)(v1 + 160) && *(void *)(v1 + 168))
    {
      FigSemaphoreSignal();
      dispatch_group_wait(*(dispatch_group_t *)(v6 + 168), 0xFFFFFFFFFFFFFFFFLL);
    }
    FigRPCDisposeClientConnection();
    uint64_t v2 = v6;
    *(void *)(v6 + 16) = 0;
    if (*(void *)(v2 + 24))
    {
      VTDecompressionSessionInvalidate(*(VTDecompressionSessionRef *)(v2 + 24));
      uint64_t v2 = v6;
    }
    if (*(void *)(v2 + 32))
    {
      VTTileDecompressionSessionInvalidate(*(void *)(v2 + 32));
      uint64_t v2 = v6;
    }
    int v3 = *(NSObject **)(v2 + 144);
    if (v3)
    {
      v5[0] = MEMORY[0x1E4F143A8];
      v5[1] = 0x40000000;
      v5[2] = __VTDecompressionSessionRemoteServer_Destroy_block_invoke;
      v5[3] = &__block_descriptor_tmp_20;
      v5[4] = v2;
      dispatch_sync(v3, v5);
      uint64_t v2 = v6;
    }
    CFRelease((CFTypeRef)v2);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_Create(uint64_t a1, int a2, _OWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9, unsigned int a10, const char *a11, _DWORD *a12, void *a13, uint64_t *a14, int *a15)
{
  uint64_t v19 = a9;
  long long v20 = a3[1];
  *(_OWORD *)token.val = *a3;
  *(_OWORD *)&token.val[4] = v20;
  uint64_t ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  CFArrayRef theArray = 0;
  VTDecompressionSessionRef decompressionSessionOut = 0;
  VTDecompressionOutputCallbackRecord outputCallback = (VTDecompressionOutputCallbackRecord)xmmword_1EE4EDF38;
  *a12 = 0;
  *a13 = 0;
  *a14 = 0;
  CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a11) {
    CFStringRef v23 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a11, 0x8000100u);
  }
  else {
    CFStringRef v23 = 0;
  }
  CFStringRef cf = v23;
  FigProcessInfoCreateWithDetails();
  uint64_t v44 = a6;
  int FormatDescriptionArrayFromSerializedAtomData = FigRemote_CreateFormatDescriptionArrayFromSerializedAtomData();
  unsigned int v47 = a8;
  if (FormatDescriptionArrayFromSerializedAtomData) {
    goto LABEL_37;
  }
  if (CFArrayGetCount(theArray) < 1)
  {
    uint64_t v27 = 0;
    MutableCopy = 0;
    int v39 = -12902;
LABEL_41:
    uint64_t v36 = v44;
    goto LABEL_26;
  }
  ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, 0);
  int FormatDescriptionArrayFromSerializedAtomData = FigCreateCFPropertyListFromData();
  if (FormatDescriptionArrayFromSerializedAtomData
    || (int FormatDescriptionArrayFromSerializedAtomData = FigCreateCFPropertyListFromData()) != 0)
  {
LABEL_37:
    int v39 = FormatDescriptionArrayFromSerializedAtomData;
    uint64_t v27 = 0;
LABEL_40:
    MutableCopy = 0;
    goto LABEL_41;
  }
  if (DecompressionSessionClient_GetTypeID_sRegisterDecompressionSessionClientTypeOnce != -1) {
    dispatch_once_f(&DecompressionSessionClient_GetTypeID_sRegisterDecompressionSessionClientTypeOnce, &DecompressionSessionClient_GetTypeID_sDecompressionSessionClientID, (dispatch_function_t)DecompressionSessionClient_RegisterType);
  }
  uint64_t Instance = (CFTypeRef *)_CFRuntimeCreateInstance();
  uint64_t v27 = Instance;
  if (!Instance)
  {
    int v39 = FigSignalErrorAt();
    goto LABEL_40;
  }
  outputCallback.decompressionOutputRefCon = Instance;
  size_t v28 = Instance + 13;
  long long v29 = a3[1];
  *(_OWORD *)token.val = *a3;
  *(_OWORD *)&token.val[4] = v29;
  int v30 = VTFigAudioSessionCreate(&token, ClientPIDFromAuditToken, @"VTDecompressionSessionClient", Instance + 13);
  if (v30)
  {
    int v39 = v30;
    MutableCopy = 0;
    uint64_t v19 = a9;
    goto LABEL_41;
  }
  uint64_t v42 = a7;
  long long v31 = a3[1];
  *(_OWORD *)token.val = *a3;
  *(_OWORD *)&token.val[4] = v31;
  uint64_t v32 = SecTaskCreateWithAuditToken(v22, &token);
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!VTIsSecTaskEntitledForSpecifyingVP9Decode(v32))
  {
    if (VTIsSecTaskEntitledForVP9Decode(v32))
    {
      CFDictionarySetValue(MutableCopy, @"AllowAlternateDecoderSelection", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    else if (CFDictionaryContainsKey(MutableCopy, @"AllowAlternateDecoderSelection"))
    {
      CFDictionaryRemoveValue(MutableCopy, @"AllowAlternateDecoderSelection");
    }
  }
  OSStatus v34 = VTDecompressionSessionCreate(v22, ValueAtIndex, MutableCopy, 0, &outputCallback, &decompressionSessionOut);
  if (v34)
  {
    int v39 = v34;
    uint64_t v19 = a9;
    uint64_t v36 = v44;
  }
  else
  {
    int v35 = vtdss_initializeClient((uint64_t)v27, decompressionSessionOut, 0, a2, a4, ClientPIDFromAuditToken, 0, (int)a12, a13);
    if (v35)
    {
      int v39 = v35;
      uint64_t v19 = a9;
      uint64_t v36 = v44;
    }
    else
    {
      uint64_t v36 = v44;
      if (*v28 && (CMNotificationCenterGetDefaultLocalCenter(), (int v37 = FigNotificationCenterAddWeakListener()) != 0))
      {
        int v39 = v37;
      }
      else
      {
        token.val[0] = ClientPIDFromAuditToken;
        CFNumberRef v38 = CFNumberCreate(v22, kCFNumberSInt32Type, &token);
        VTSessionSetProperty(decompressionSessionOut, @"ClientPID", v38);
        CFRelease(v38);
        int v39 = 0;
        *a14 = FigRemote_GetServerTimeoutToken();
      }
      uint64_t v19 = a9;
    }
  }
  if (v32) {
    CFRelease(v32);
  }
  a7 = v42;
LABEL_26:
  if (cf) {
    CFRelease(cf);
  }
  if (decompressionSessionOut) {
    CFRelease(decompressionSessionOut);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v27) {
    CFRelease(v27);
  }
  FigMachPortReleaseSendRight_();
  uint64_t v40 = (unsigned int *)MEMORY[0x1E4F14960];
  MEMORY[0x199706B20](*MEMORY[0x1E4F14960], a5, v36);
  MEMORY[0x199706B20](*v40, a7, v47);
  MEMORY[0x199706B20](*v40, v19, a10);
  *a15 = v39;
  return 0;
}

void DecompressionOutputCallback_0(uint64_t a1, uint64_t a2, int a3, int a4, const void *a5, long long *a6, long long *a7)
{
  if (!*(unsigned char *)(a1 + 184) && !*(unsigned char *)(a1 + 186))
  {
    uint64_t v14 = malloc_type_calloc(1uLL, 0x58uLL, 0x10A00404D8A4D16uLL);
    if (v14)
    {
      uint64_t v15 = (uint64_t)v14;
      v14[1] = a2;
      *((_DWORD *)v14 + 4) = a3;
      *((_DWORD *)v14 + 5) = a4;
      if (a5) {
        CFTypeRef v16 = CFRetain(a5);
      }
      else {
        CFTypeRef v16 = 0;
      }
      *(void *)(v15 + 24) = v16;
      long long v17 = *a6;
      *(void *)(v15 + 56) = *((void *)a6 + 2);
      *(_OWORD *)(v15 + 40) = v17;
      long long v18 = *a7;
      *(void *)(v15 + 80) = *((void *)a7 + 2);
      *(_OWORD *)(v15 + 64) = v18;
      vtdss_enqueueFrame(a1, v15);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t vtdss_initializeClient(uint64_t a1, const void *a2, const void *a3, int a4, uint64_t a5, int a6, CFTypeRef cf, int a8, void *a9)
{
  *(_DWORD *)(a1 + 88) = a6;
  if (cf) {
    CFTypeRef v14 = CFRetain(cf);
  }
  else {
    CFTypeRef v14 = 0;
  }
  *(void *)(a1 + 96) = v14;
  if (a2) {
    CFTypeRef v15 = CFRetain(a2);
  }
  else {
    CFTypeRef v15 = 0;
  }
  *(void *)(a1 + 24) = v15;
  if (a3) {
    CFTypeRef v16 = CFRetain(a3);
  }
  else {
    CFTypeRef v16 = 0;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 32) = v16;
  *(_DWORD *)(a1 + 56) = a4;
  *(void *)(a1 + 64) = a5;
  *(void *)(a1 + 128) = a1 + 120;
  *(void *)(a1 + 144) = dispatch_queue_create("DecompressionSessionQueuedFrames", 0);
  *(unsigned char *)(a1 + 152) = 1;
  *(void *)(a1 + 168) = dispatch_group_create();
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  long long v18 = dispatch_queue_create("DecompressionSessionMessageQueue", initially_inactive);
  *(void *)(a1 + 176) = v18;
  dispatch_set_qos_class_floor(v18, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(*(dispatch_object_t *)(a1 + 176));
  *(void *)(a1 + 160) = FigSemaphoreCreate();
  if (*(void *)(a1 + 256) || (uint64_t v19 = FigOSTransactionCreate(), (*(void *)(a1 + 256) = v19) != 0))
  {
    uint64_t v20 = FigRPCCreateClientConnection();
    if (v20)
    {
      uint64_t v21 = v20;
    }
    else
    {
      uint64_t v21 = FigRPCGetConnectionInfo();
      if (!v21) {
        *a9 = 0;
      }
    }
  }
  else
  {
    uint64_t v21 = FigSignalErrorAt();
  }
  FigMachPortReleaseSendRight_();
  return v21;
}

void vtdss_appStateChangeListener(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  unsigned int valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F75C98]);
  if (!Value) {
    goto LABEL_7;
  }
  CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  int v7 = valuePtr;
  if (valuePtr > 8)
  {
LABEL_8:
    *(_DWORD *)(a2 + 112) = v7;
    return;
  }
  if (((1 << valuePtr) & 0x16) == 0)
  {
    if (((1 << valuePtr) & 0x101) != 0)
    {
LABEL_7:
      int v7 = 8;
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  CFAllocatorRef v8 = *(const void **)(a2 + 24);
  if (v8) {
    CFTypeRef v9 = CFRetain(v8);
  }
  else {
    CFTypeRef v9 = 0;
  }
  uint64_t v10 = *(const void **)(a2 + 32);
  if (v10)
  {
    CFTypeRef v11 = CFRetain(v10);
    if (!v9) {
      goto LABEL_14;
    }
LABEL_16:
    float v12 = *(NSObject **)(a2 + 176);
    dispatch_retain(*(dispatch_object_t *)(a2 + 168));
    dispatch_retain(v12);
    *(_DWORD *)(a2 + 112) = valuePtr;
    *(unsigned char *)(a2 + 185) = 1;
    FigRPCExecuteByServerAsync();
    return;
  }
  CFTypeRef v11 = 0;
  if (v9) {
    goto LABEL_16;
  }
LABEL_14:
  if (valuePtr == 1 && v11) {
    goto LABEL_16;
  }
  if (v11) {
    CFRelease(v11);
  }
}

uint64_t VTDecompressionSessionRemoteServer_Invalidate(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (!vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&cf))
  {
    CFTypeRef v1 = cf;
    *((unsigned char *)cf + 186) = 1;
    if (*((void *)v1 + 20) && *((void *)v1 + 21))
    {
      FigSemaphoreSignal();
      dispatch_group_wait(*((dispatch_group_t *)cf + 21), 0xFFFFFFFFFFFFFFFFLL);
      CFTypeRef v1 = cf;
    }
    if (*((void *)v1 + 3))
    {
      VTDecompressionSessionInvalidate(*((VTDecompressionSessionRef *)v1 + 3));
      CFTypeRef v1 = cf;
    }
    if (!*((void *)v1 + 4)) {
      goto LABEL_10;
    }
    VTTileDecompressionSessionInvalidate(*((void *)v1 + 4));
  }
  CFTypeRef v1 = cf;
  if (cf) {
LABEL_10:
  }
    CFRelease(v1);
  return 0;
}

void vtdss_freeQueuedFrame(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)a1[3];
    if (v2)
    {
      CFRelease(v2);
      a1[3] = 0;
    }
    int v3 = (const void *)a1[4];
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }
}

uint64_t VTDecompressionSessionRemoteServer_DecodeFrame(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, unsigned int a7, uint64_t a8, int a9)
{
  uint64_t v30 = 0;
  long long v31 = 0;
  CFTypeRef cf = 0;
  int v16 = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v31);
  if (v16)
  {
    int v23 = v16;
  }
  else
  {
    int SampleBufferFromSerializedAtomData = FigRemote_CreateSampleBufferFromSerializedAtomData();
    if (!SampleBufferFromSerializedAtomData
      && (!a7 || (int SampleBufferFromSerializedAtomData = FigCreateCFPropertyListFromData()) == 0))
    {
      long long v18 = v31;
      if (a9)
      {
        uint64_t v19 = (OpaqueVTDecompressionSession *)*((void *)v31 + 3);
        if (!*((void *)v19 + 14))
        {
          VTDecompressionSessionSetMultiImageCallback(v19, (VTDecompressionOutputMultiImageCallback)vtdss_enqueueTaggedBufferGroup, v31);
          long long v18 = v31;
        }
      }
      CFRetain(v18);
      uint64_t v20 = *((void *)v31 + 21);
      uint64_t v21 = *((void *)v31 + 22);
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 0x40000000;
      v25[2] = __VTDecompressionSessionRemoteServer_DecodeFrame_block_invoke;
      v25[3] = &__block_descriptor_tmp_4_1;
      v25[4] = v31;
      v25[5] = v30;
      v25[6] = a8;
      v25[7] = cf;
      int v26 = a5;
      int v27 = a2;
      unsigned int v28 = a7;
      v25[8] = a6;
      dispatch_group_async(v20, v21, v25);
      goto LABEL_9;
    }
    int v23 = SampleBufferFromSerializedAtomData;
    a4 = 0;
  }
  if (a2) {
    FigMachPortReleaseSendRight_();
  }
  Float64 v24 = (unsigned int *)MEMORY[0x1E4F14960];
  if (a4) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], a3, a4);
  }
  if (a7) {
    MEMORY[0x199706B20](*v24, a6, a7);
  }
  if (v31)
  {
    VTDecompressionSessionRemoteCallbackClient_DecodeFrameReturn(*((_DWORD *)v31 + 14), *((void *)v31 + 8), 0, 0, v23);
LABEL_9:
    if (v31) {
      CFRelease(v31);
    }
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_DequeueNextPendingFrame(uint64_t a1, _DWORD *a2, void *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, void *a7, _DWORD *a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,uint64_t a21,void *a22,void *a23,_DWORD *a24,_DWORD *a25)
{
  Float64 v25 = a8;
  int v26 = a7;
  int v27 = a6;
  long long v31 = a24;
  uint64_t v30 = a25;
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  long long v77 = a9;
  v78[0] = a10;
  v78[1] = a11;
  v78[2] = a12;
  v78[3] = a13;
  v78[4] = a14;
  v78[5] = a15;
  v78[6] = a16;
  v78[7] = a17;
  v78[8] = a18;
  v78[9] = a19;
  v78[10] = a20;
  uint64_t v79 = a21;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  uint64_t v32 = 32;
  *a8 = 0;
  do
  {
    uint64_t v33 = (&v74)[(unint64_t)v32 / 8];
    **(_DWORD **)((char *)&v73 + v32) = 0;
    *uint64_t v33 = 0;
    OSStatus v34 = *(void **)((char *)&v76 + v32);
    **(_DWORD **)((char *)&v75 + v32) = 0;
    *OSStatus v34 = 0;
    **(_DWORD **)((char *)&v78[-1] + v32) = 0;
    v32 += 40;
  }
  while (v32 != 232);
  *a22 = 0;
  a22[1] = 0;
  a22[2] = 0;
  *a23 = 0;
  a23[1] = 0;
  a23[2] = 0;
  *a24 = 0;
  int v35 = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&cf);
  BOOL v36 = v35 != -12903 || cf == 0;
  if (!v36 || (int v37 = v35) == 0)
  {
    int v63 = a4;
    uint64_t v73 = 0;
    int v74 = &v73;
    uint64_t v75 = 0x2000000000;
    uint64_t v76 = 0;
    uint64_t v69 = 0;
    int v70 = &v69;
    uint64_t v71 = 0x2000000000;
    char v72 = 0;
    CFNumberRef v38 = *((void *)cf + 18);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __vtdss_dequeueFrame_block_invoke;
    block[3] = &unk_1E5786088;
    block[5] = &v69;
    block[6] = cf;
    block[4] = &v73;
    dispatch_sync(v38, block);
    int v65 = *((unsigned __int8 *)v70 + 24);
    uint64_t v39 = v74[3];
    _Block_object_dispose(&v69, 8);
    _Block_object_dispose(&v73, 8);
    if (v39)
    {
      BOOL v62 = a5;
      if (*(void *)(v39 + 24))
      {
        int SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
        if (SerializedAtomDataForPixelBuffer)
        {
          int v37 = SerializedAtomDataForPixelBuffer;
          CFDataRef v41 = 0;
          *((void *)cf + 9) = 0;
          goto LABEL_29;
        }
        *((void *)cf + 9) = (*MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
      }
      unsigned int v59 = v27;
      uint64_t v60 = v26;
      uint64_t v61 = v25;
      uint64_t v43 = *(OpaqueCMTaggedBufferGroup **)(v39 + 32);
      if (v43)
      {
        CMItemCount Count = CMTaggedBufferGroupGetCount(v43);
        if (Count > 5)
        {
LABEL_40:
          int v37 = FigSignalErrorAt();
          CFDataRef v41 = 0;
LABEL_37:
          int v26 = v60;
          Float64 v25 = v61;
          int v27 = v59;
          uint64_t v30 = a25;
          goto LABEL_29;
        }
        CMItemCount v45 = Count;
        if (Count >= 1)
        {
          CFIndex v46 = 0;
          uint64_t v47 = *MEMORY[0x1E4F1CF80];
          CMTime v48 = v78;
          while (1)
          {
            CMTagCollectionRef TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(*(CMTaggedBufferGroupRef *)(v39 + 32), v46);
            CFDataRef v50 = (const __CFData *)MEMORY[0x199705710](TagCollectionAtIndex, v47);
            CFDataRef v41 = v50;
            if (!v50) {
              break;
            }
            CFIndex Length = CFDataGetLength(v50);
            BOOL v52 = (vm_address_t *)*((void *)v48 + 1);
            int v53 = vm_allocate(*MEMORY[0x1E4F14960], v52, Length, 1543503873);
            if (v53) {
              goto LABEL_39;
            }
            v81.location = 0;
            v81.length = Length;
            CFDataGetBytes(v41, v81, (UInt8 *)*v52);
            **((_DWORD **)v48 + 2) = Length;
            CFRelease(v41);
            if (!FigTaggedBufferGroupGetCVPixelBufferAtIndex()) {
              goto LABEL_40;
            }
            block[0] = 0;
            int v54 = FigRemote_CreateSerializedAtomDataForPixelBuffer();
            uint64_t v55 = block[0];
            **(_DWORD **)CMTime v48 = block[0];
            if (v54)
            {
              int v37 = v54;
              CFDataRef v41 = 0;
              *((void *)cf + 9) = 0;
              goto LABEL_37;
            }
            *((void *)cf + 9) = (v55 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
            ++v46;
            CMTime v48 = (_OWORD *)((char *)v48 + 40);
            if (v45 == v46) {
              goto LABEL_24;
            }
          }
          int v53 = FigSignalErrorAt();
LABEL_39:
          int v37 = v53;
          goto LABEL_37;
        }
      }
LABEL_24:
      *a2 = 1;
      *a3 = *(void *)(v39 + 8);
      *int v63 = *(_DWORD *)(v39 + 16);
      *BOOL v62 = *(_DWORD *)(v39 + 20);
      if (a22)
      {
        long long v56 = *(_OWORD *)(v39 + 40);
        a22[2] = *(void *)(v39 + 56);
        *(_OWORD *)a22 = v56;
      }
      int v26 = v60;
      Float64 v25 = v61;
      int v27 = v59;
      uint64_t v30 = a25;
      long long v31 = a24;
      int v42 = v65;
      if (a23)
      {
        long long v57 = *(_OWORD *)(v39 + 64);
        a23[2] = *(void *)(v39 + 80);
        *(_OWORD *)a23 = v57;
      }
    }
    else
    {
      *a2 = 0;
      int v42 = v65;
    }
    CFDataRef v41 = 0;
    int v37 = 0;
    *long long v31 = v42;
    goto LABEL_29;
  }
  CFDataRef v41 = 0;
  uint64_t v39 = 0;
LABEL_29:
  vtdss_freeQueuedFrame((void *)v39);
  *int v27 = 0;
  *int v26 = 0;
  *Float64 v25 = 0;
  if (v30) {
    *uint64_t v30 = v37;
  }
  if (v41) {
    CFRelease(v41);
  }
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_CopySupportedPropertyDictionary(uint64_t a1, void *a2, _DWORD *a3, kern_return_t *a4)
{
  kern_return_t CFDataFromCFPropertyList;
  uint64_t v8;
  kern_return_t v9;
  uint64_t v10;
  kern_return_t v11;
  vm_size_t Length;
  kern_return_t v13;
  void *v14;
  const UInt8 *BytePtr;
  vm_address_t v17;
  CFDataRef theData;
  CFTypeRef cf;
  CFTypeRef v20;

  CFTypeRef cf = 0;
  uint64_t v20 = 0;
  long long v17 = 0;
  theData = 0;
  *a2 = 0;
  *a3 = 0;
  CFDataFromCFPropertyList = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v20);
  if (CFDataFromCFPropertyList) {
    goto LABEL_20;
  }
  CFAllocatorRef v8 = *((void *)v20 + 3);
  if (v8)
  {
    CFTypeRef v9 = VTDecompressionSessionCopySupportedPropertyDictionary(v8, &cf);
  }
  else
  {
    uint64_t v10 = *((void *)v20 + 4);
    if (v10) {
      CFTypeRef v9 = VTTileDecompressionSessionCopySupportedPropertyDictionary(v10, &cf);
    }
    else {
      CFTypeRef v9 = FigSignalErrorAt();
    }
  }
  CFTypeRef v11 = v9;
  if (v9) {
    goto LABEL_21;
  }
  CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
  if (CFDataFromCFPropertyList)
  {
LABEL_20:
    CFTypeRef v11 = CFDataFromCFPropertyList;
LABEL_21:
    LODWORD(Length) = 0;
    goto LABEL_11;
  }
  CFIndex Length = CFDataGetLength(theData);
  uint64_t v13 = vm_allocate(*MEMORY[0x1E4F14960], &v17, Length, 1560281089);
  if (v13)
  {
    CFTypeRef v11 = v13;
  }
  else
  {
    CFTypeRef v14 = (void *)v17;
    BytePtr = CFDataGetBytePtr(theData);
    memcpy(v14, BytePtr, Length);
    CFTypeRef v11 = 0;
  }
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  if (theData) {
    CFRelease(theData);
  }
  *a2 = v17;
  *a3 = Length;
  if (a4) {
    *a4 = v11;
  }
  if (v20) {
    CFRelease(v20);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_CopySerializableProperties(uint64_t a1, void *a2, _DWORD *a3, kern_return_t *a4)
{
  kern_return_t CFDataFromCFPropertyList;
  uint64_t v8;
  kern_return_t v9;
  uint64_t v10;
  kern_return_t v11;
  vm_size_t Length;
  kern_return_t v13;
  void *v14;
  const UInt8 *BytePtr;
  vm_address_t v17;
  CFDataRef theData;
  CFTypeRef cf;
  CFTypeRef v20;

  CFTypeRef cf = 0;
  uint64_t v20 = 0;
  long long v17 = 0;
  theData = 0;
  *a2 = 0;
  *a3 = 0;
  CFDataFromCFPropertyList = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v20);
  if (CFDataFromCFPropertyList) {
    goto LABEL_20;
  }
  CFAllocatorRef v8 = *((void *)v20 + 3);
  if (v8)
  {
    CFTypeRef v9 = VTDecompressionSessionCopySerializableProperties(v8, *MEMORY[0x1E4F1CF80], &cf);
  }
  else
  {
    uint64_t v10 = *((void *)v20 + 4);
    if (v10) {
      CFTypeRef v9 = VTTileDecompressionSessionCopySerializableProperties(v10, *MEMORY[0x1E4F1CF80], &cf);
    }
    else {
      CFTypeRef v9 = FigSignalErrorAt();
    }
  }
  CFTypeRef v11 = v9;
  if (v9) {
    goto LABEL_21;
  }
  CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
  if (CFDataFromCFPropertyList)
  {
LABEL_20:
    CFTypeRef v11 = CFDataFromCFPropertyList;
LABEL_21:
    LODWORD(Length) = 0;
    goto LABEL_11;
  }
  CFIndex Length = CFDataGetLength(theData);
  uint64_t v13 = vm_allocate(*MEMORY[0x1E4F14960], &v17, Length, 1560281089);
  if (v13)
  {
    CFTypeRef v11 = v13;
  }
  else
  {
    CFTypeRef v14 = (void *)v17;
    BytePtr = CFDataGetBytePtr(theData);
    memcpy(v14, BytePtr, Length);
    CFTypeRef v11 = 0;
  }
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  if (theData) {
    CFRelease(theData);
  }
  *a2 = v17;
  *a3 = Length;
  if (a4) {
    *a4 = v11;
  }
  if (v20) {
    CFRelease(v20);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_CopyProperty(uint64_t a1, const char *a2, void *a3, _DWORD *a4, kern_return_t *a5)
{
  kern_return_t v9;
  CFAllocatorRef v10;
  CFStringRef v11;
  CFStringRef v12;
  uint64_t v13;
  kern_return_t v14;
  uint64_t v15;
  kern_return_t v16;
  vm_size_t Length;
  kern_return_t CFDataFromCFPropertyList;
  kern_return_t v19;
  void *v20;
  const UInt8 *BytePtr;
  vm_address_t v23;
  CFDataRef theData;
  CFTypeRef cf;
  CFTypeRef v26;

  CFTypeRef cf = 0;
  int v26 = 0;
  int v23 = 0;
  theData = 0;
  *a3 = 0;
  *a4 = 0;
  CFTypeRef v9 = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v26);
  if (v9) {
    goto LABEL_23;
  }
  uint64_t v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFTypeRef v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0);
  if (!v11)
  {
    CFTypeRef v9 = FigSignalErrorAt();
LABEL_23:
    int v16 = v9;
    LODWORD(Length) = 0;
    goto LABEL_15;
  }
  float v12 = v11;
  uint64_t v13 = *((void *)v26 + 3);
  if (v13)
  {
    CFTypeRef v14 = VTDecompressionSessionCopyProperty(v13, v12, v10, &cf);
  }
  else
  {
    CFTypeRef v15 = *((void *)v26 + 4);
    if (v15) {
      CFTypeRef v14 = VTTileDecompressionSessionCopyProperty(v15, v12, v10, &cf);
    }
    else {
      CFTypeRef v14 = FigSignalErrorAt();
    }
  }
  int v16 = v14;
  if (v14) {
    goto LABEL_9;
  }
  CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
  if (CFDataFromCFPropertyList)
  {
    int v16 = CFDataFromCFPropertyList;
LABEL_9:
    LODWORD(Length) = 0;
    goto LABEL_13;
  }
  CFIndex Length = CFDataGetLength(theData);
  uint64_t v19 = vm_allocate(*MEMORY[0x1E4F14960], &v23, Length, 1560281089);
  if (v19)
  {
    int v16 = v19;
  }
  else
  {
    uint64_t v20 = (void *)v23;
    BytePtr = CFDataGetBytePtr(theData);
    memcpy(v20, BytePtr, Length);
    int v16 = 0;
  }
LABEL_13:
  CFRelease(v12);
  if (cf) {
    CFRelease(cf);
  }
LABEL_15:
  if (theData) {
    CFRelease(theData);
  }
  *a3 = v23;
  *a4 = Length;
  if (a5) {
    *a5 = v16;
  }
  if (v26) {
    CFRelease(v26);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_SetProperty(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4, _DWORD *a5)
{
  CFTypeRef v19 = 0;
  int v9 = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v19);
  if (!v9)
  {
    uint64_t v10 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0);
    if (!v10) {
      goto LABEL_11;
    }
    int CFPropertyListFromData = FigCreateCFPropertyListFromData();
    if (CFPropertyListFromData) {
      goto LABEL_12;
    }
    int v12 = FigCFEqual();
    uint64_t v13 = v19;
    if (v12)
    {
      CFTypeRef v14 = (const void *)*((void *)v19 + 24);
      if (v14)
      {
        CFRelease(v14);
        uint64_t v13 = v19;
        *((void *)v19 + 24) = 0;
      }
    }
    uint64_t v15 = v13[3];
    if (v15)
    {
      int CFPropertyListFromData = VTDecompressionSessionSetProperty(v15, v10, 0);
      goto LABEL_12;
    }
    uint64_t v16 = v13[4];
    if (v16) {
      int CFPropertyListFromData = VTTileDecompressionSessionSetProperty(v16, v10, 0);
    }
    else {
LABEL_11:
    }
      int CFPropertyListFromData = FigSignalErrorAt();
LABEL_12:
    int v17 = CFPropertyListFromData;
    if (!a4) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  int v17 = v9;
  uint64_t v10 = 0;
  if (a4) {
LABEL_13:
  }
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], a3, a4);
LABEL_14:
  if (v10) {
    CFRelease(v10);
  }
  if (a5) {
    *a5 = v17;
  }
  if (v19) {
    CFRelease(v19);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_SetProperties(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  CFTypeRef v13 = 0;
  int CFPropertyListFromData = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v13);
  if (!CFPropertyListFromData)
  {
    int CFPropertyListFromData = FigCreateCFPropertyListFromData();
    if (!CFPropertyListFromData)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID != CFGetTypeID(0)) {
        goto LABEL_8;
      }
      uint64_t v9 = *((void *)v13 + 3);
      if (v9)
      {
        int CFPropertyListFromData = VTDecompressionSessionSetProperties(v9, 0);
        goto LABEL_9;
      }
      uint64_t v10 = *((void *)v13 + 4);
      if (v10) {
        int CFPropertyListFromData = VTTileDecompressionSessionSetProperties(v10, 0);
      }
      else {
LABEL_8:
      }
        int CFPropertyListFromData = FigSignalErrorAt();
    }
  }
LABEL_9:
  int v11 = CFPropertyListFromData;
  if (a3) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], a2, a3);
  }
  if (a4) {
    *a4 = v11;
  }
  if (v13) {
    CFRelease(v13);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_FinishDelayedFrames(uint64_t a1)
{
  CFTypeRef v6 = 0;
  int v1 = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v6);
  if (v1)
  {
    if (!v6) {
      return 0;
    }
    VTDecompressionSessionRemoteCallbackClient_FinishDelayedFramesReturn(*((_DWORD *)v6 + 14), *((void *)v6 + 8), v1);
  }
  else
  {
    CFRetain(v6);
    uint64_t v2 = *((void *)v6 + 21);
    int v3 = *((void *)v6 + 22);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = __VTDecompressionSessionRemoteServer_FinishDelayedFrames_block_invoke;
    v5[3] = &__block_descriptor_tmp_5_3;
    v5[4] = v6;
    dispatch_group_async(v2, v3, v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_CanAcceptFormatDescription(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  CFTypeRef cf = 0;
  *a4 = 0;
  if (vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&cf))
  {
    *a4 = 0;
  }
  else
  {
    if (FigRemote_CreateFormatDescriptionArrayFromSerializedAtomData() || CFArrayGetCount(0) < 1)
    {
      int CanAcceptFormatDescription = 0;
    }
    else
    {
      ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(0, 0);
      int CanAcceptFormatDescription = VTDecompressionSessionCanAcceptFormatDescription(*((VTDecompressionSessionRef *)cf + 3), ValueAtIndex);
    }
    *a4 = CanAcceptFormatDescription;
  }
  MEMORY[0x199706B20](*MEMORY[0x1E4F14960], a2, a3);
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_CopyBlackPixelBuffer(uint64_t a1, _DWORD *a2, void *a3, _DWORD *a4, _DWORD *a5)
{
  CVPixelBufferRef pixelBufferOut = 0;
  CFTypeRef cf = 0;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  int SerializedAtomDataForPixelBuffer = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&cf);
  if (!SerializedAtomDataForPixelBuffer)
  {
    int SerializedAtomDataForPixelBuffer = VTDecompressionSessionCopyBlackPixelBuffer(*((VTDecompressionSessionRef *)cf + 3), &pixelBufferOut);
    if (!SerializedAtomDataForPixelBuffer)
    {
      int SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
      if (SerializedAtomDataForPixelBuffer) {
        *((void *)cf + 10) = 0;
      }
      else {
        *((void *)cf + 10) = (*MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
      }
    }
  }
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  if (a5) {
    *a5 = SerializedAtomDataForPixelBuffer;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1, void *a2)
{
  uint64_t v15 = 0;
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x3000000000;
  long long v13 = *MEMORY[0x1E4F1F9F8];
  uint64_t v14 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (!vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v15))
  {
    VTDecompressionSessionGetMinOutputPresentationTimeStampOfFramesBeingDecoded(v15[3], &v8);
    int v3 = v11;
    *(_OWORD *)(v11 + 3) = v8;
    v3[5] = v9;
    CFTypeRef v4 = v15[18];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 0x40000000;
    v7[2] = __VTDecompressionSessionRemoteServer_GetMinOutputPresentationTimeStampOfFramesBeingDecoded_block_invoke;
    v7[3] = &unk_1E5785F90;
    v7[4] = &v10;
    v7[5] = v15;
    dispatch_sync(v4, v7);
  }
  if (a2)
  {
    uint64_t v5 = v11[5];
    *(_OWORD *)a2 = *(_OWORD *)(v11 + 3);
    a2[2] = v5;
  }
  if (v15) {
    CFRelease(v15);
  }
  _Block_object_dispose(&v10, 8);
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1, void *a2, void *a3, _DWORD *a4)
{
  int v23 = 0;
  uint64_t v18 = 0;
  CFTypeRef v19 = (CMTime *)&v18;
  uint64_t v20 = 0x3000000000;
  long long v21 = *MEMORY[0x1E4F1F9F8];
  uint64_t v22 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v13 = 0;
  uint64_t v14 = (CMTime *)&v13;
  uint64_t v15 = 0x3000000000;
  long long v16 = v21;
  uint64_t v17 = v22;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  int MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v23);
  if (!MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded)
  {
    int MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded = VTDecompressionSessionGetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(v23[3], v19 + 1, v14 + 1);
    if (!MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded)
    {
      long long v8 = v23[18];
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 0x40000000;
      v12[2] = __VTDecompressionSessionRemoteServer_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded_block_invoke;
      v12[3] = &unk_1E5785FB8;
      v12[4] = &v18;
      v12[5] = &v13;
      v12[6] = v23;
      dispatch_sync(v8, v12);
      if (a2)
      {
        CMTimeEpoch epoch = v19[1].epoch;
        *(_OWORD *)a2 = *(_OWORD *)&v19[1].value;
        a2[2] = epoch;
      }
      int MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded = 0;
      if (a3)
      {
        CMTimeEpoch v10 = v14[1].epoch;
        *(_OWORD *)a3 = *(_OWORD *)&v14[1].value;
        a3[2] = v10;
      }
    }
  }
  if (a4) {
    *a4 = MinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded;
  }
  if (v23) {
    CFRelease(v23);
  }
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v18, 8);
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_TileCreate(uint64_t a1, int a2, _OWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8, const char *a9, _DWORD *a10, void *a11, uint64_t *a12, int *a13)
{
  long long v16 = a3[1];
  *(_OWORD *)session = *a3;
  long long v39 = v16;
  int ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  CFArrayRef theArray = 0;
  session[0] = 0;
  CFTypeRef v35 = 0;
  CFTypeRef cf = 0;
  *a10 = 0;
  *a11 = 0;
  *a12 = 0;
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a9) {
    CFStringRef v19 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a9, 0x8000100u);
  }
  else {
    CFStringRef v19 = 0;
  }
  FigProcessInfoCreateWithDetails();
  uint64_t v30 = a6;
  int FormatDescriptionArrayFromSerializedAtomData = FigRemote_CreateFormatDescriptionArrayFromSerializedAtomData();
  uint64_t v31 = a7;
  if (FormatDescriptionArrayFromSerializedAtomData) {
    goto LABEL_27;
  }
  if (CFArrayGetCount(theArray) < 1)
  {
    uint64_t Instance = 0;
    int v25 = -12902;
    goto LABEL_14;
  }
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, 0);
  int FormatDescriptionArrayFromSerializedAtomData = FigCreateCFPropertyListFromData();
  if (FormatDescriptionArrayFromSerializedAtomData)
  {
LABEL_27:
    int v25 = FormatDescriptionArrayFromSerializedAtomData;
    uint64_t Instance = 0;
    goto LABEL_14;
  }
  if (DecompressionSessionClient_GetTypeID_sRegisterDecompressionSessionClientTypeOnce != -1) {
    dispatch_once_f(&DecompressionSessionClient_GetTypeID_sRegisterDecompressionSessionClientTypeOnce, &DecompressionSessionClient_GetTypeID_sDecompressionSessionClientID, (dispatch_function_t)DecompressionSessionClient_RegisterType);
  }
  uint64_t Instance = (void *)_CFRuntimeCreateInstance();
  if (!Instance || (uint64_t v23 = FigOSTransactionCreate(), (Instance[32] = v23) == 0))
  {
    int v24 = FigSignalErrorAt();
    goto LABEL_30;
  }
  int v24 = VTTileDecompressionSessionCreate((uint64_t)v18, ValueAtIndex, (const __CFDictionary *)cf, (uint64_t)TileDecompressionOutputCallback_0, (uint64_t)Instance, (uint64_t *)session);
  if (v24)
  {
LABEL_30:
    int v25 = v24;
    goto LABEL_14;
  }
  int v25 = vtdss_initializeClient((uint64_t)Instance, 0, session[0], a2, a4, ClientPIDFromAuditToken, v35, (int)a10, a11);
  if (!v25)
  {
    int valuePtr = ClientPIDFromAuditToken;
    CFNumberRef v26 = CFNumberCreate(v18, kCFNumberSInt32Type, &valuePtr);
    VTSessionSetProperty(session[0], @"ClientPID", v26);
    CFRelease(v26);
    *a12 = FigRemote_GetServerTimeoutToken();
  }
LABEL_14:
  if (session[0]) {
    CFRelease(session[0]);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (Instance) {
    CFRelease(Instance);
  }
  if (v35) {
    CFRelease(v35);
  }
  FigMachPortReleaseSendRight_();
  int v27 = (unsigned int *)MEMORY[0x1E4F14960];
  MEMORY[0x199706B20](*MEMORY[0x1E4F14960], a5, v30);
  MEMORY[0x199706B20](*v27, v31, a8);
  *a13 = v25;
  return 0;
}

void TileDecompressionOutputCallback_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  if (!*(unsigned char *)(a1 + 184) && !*(unsigned char *)(a1 + 186))
  {
    uint64_t v12 = malloc_type_calloc(1uLL, 0x58uLL, 0x10A00404D8A4D16uLL);
    if (v12)
    {
      v12[1] = a2;
      *((_DWORD *)v12 + 4) = a7;
      *((_DWORD *)v12 + 5) = a8;
      v12[3] = 0;
      vtdss_enqueueFrame(a1, (uint64_t)v12);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t VTDecompressionSessionRemoteServer_DecodeTile(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, unsigned int a9, uint64_t a10, int a11, uint64_t a12)
{
  CFTypeRef v36 = 0;
  v37[0] = 0;
  CFTypeRef cf = 0;
  int v19 = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)v37);
  if (v19)
  {
    int v29 = v19;
    goto LABEL_25;
  }
  int SampleBufferFromSerializedAtomData = FigRemote_CreateSampleBufferFromSerializedAtomData();
  if (!SampleBufferFromSerializedAtomData)
  {
    if (!(a9 | a7))
    {
      CFTypeRef v22 = (CFTypeRef)*((void *)v37[0] + 24);
      if (v22) {
        CFTypeRef v22 = CFRetain(v22);
      }
      CFTypeRef cf = v22;
      goto LABEL_15;
    }
    int SampleBufferFromSerializedAtomData = FigRemote_CreatePixelBufferFromSerializedAtomData();
    if (!SampleBufferFromSerializedAtomData)
    {
      long long v21 = v37[0];
      if (FigDebugIsInternalBuild()) {
        v21[220] = 0;
      }
      uint64_t v23 = (const void *)*((void *)v37[0] + 24);
      CFTypeRef v24 = cf;
      *((void *)v37[0] + 24) = cf;
      if (v24) {
        CFRetain(v24);
      }
      if (v23) {
        CFRelease(v23);
      }
      CFTypeRef v22 = cf;
LABEL_15:
      if (v22)
      {
        CFTypeRef v25 = v37[0];
        if (*((unsigned char *)v37[0] + 220)) {
          ++*((_DWORD *)v37[0] + 50);
        }
        CFRetain(v25);
        CFNumberRef v26 = *((void *)v37[0] + 21);
        int v27 = *((void *)v37[0] + 22);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = __VTDecompressionSessionRemoteServer_DecodeTile_block_invoke;
        block[3] = &__block_descriptor_tmp_9_3;
        block[4] = v37[0];
        block[5] = v36;
        block[8] = a5;
        block[9] = a6;
        block[10] = a10;
        block[6] = cf;
        void block[7] = a12;
        int v32 = a11;
        int v33 = a2;
        int v34 = a7;
        dispatch_group_async(v26, v27, block);
        goto LABEL_19;
      }
      int SampleBufferFromSerializedAtomData = FigSignalErrorAt();
    }
  }
  int v29 = SampleBufferFromSerializedAtomData;
  a4 = 0;
LABEL_25:
  uint64_t v30 = (unsigned int *)MEMORY[0x1E4F14960];
  if (a9) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], a8, a9);
  }
  if (!v29) {
    goto LABEL_19;
  }
  if (a2) {
    FigMachPortReleaseSendRight_();
  }
  if (a7) {
    FigMachPortReleaseSendRight_();
  }
  if (a4) {
    MEMORY[0x199706B20](*v30, a3, a4);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v37[0])
  {
    VTDecompressionSessionRemoteCallbackClient_DecodeFrameReturn(*((_DWORD *)v37[0] + 14), *((void *)v37[0] + 8), 0, 0, v29);
LABEL_19:
    if (v37[0]) {
      CFRelease(v37[0]);
    }
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_FinishDelayedTiles(uint64_t a1)
{
  CFTypeRef v6 = 0;
  int v1 = vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v6);
  if (v1)
  {
    if (!v6) {
      return 0;
    }
    VTDecompressionSessionRemoteCallbackClient_FinishDelayedFramesReturn(*((_DWORD *)v6 + 14), *((void *)v6 + 8), v1);
  }
  else
  {
    CFRetain(v6);
    uint64_t v2 = *((void *)v6 + 21);
    int v3 = *((void *)v6 + 22);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = __VTDecompressionSessionRemoteServer_FinishDelayedTiles_block_invoke;
    v5[3] = &__block_descriptor_tmp_10_3;
    v5[4] = v6;
    dispatch_group_async(v2, v3, v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteServer_GetNextPendingNotification(uint64_t a1, _DWORD *a2, void *a3, char *a4, vm_address_t *a5, unsigned int *a6)
{
  CFTypeRef v16 = 0;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  vtdss_findAndRetainClientFromCommandPort(a1, (uint64_t)&v16);
  if (!v16) {
    return 0;
  }
  CFTypeRef v19 = 0;
  CFTypeRef cf = 0;
  uint64_t v17 = 0;
  CFDataRef theData = 0;
  uint64_t PendingNotification = FigRPCFetchNextPendingNotification();
  if (PendingNotification)
  {
    uint64_t v12 = PendingNotification;
  }
  else
  {
    FigCreateCFDataFromCFPropertyList();
    CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    if (CStringPtrAndBufferToFree) {
      strlcpy(a4, CStringPtrAndBufferToFree, 0x200uLL);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v19)
    {
      CFRelease(v19);
      CFTypeRef v19 = 0;
    }
    if (theData)
    {
      unsigned int Length = CFDataGetLength(theData);
      *a6 = Length;
      uint64_t v12 = vm_allocate(*MEMORY[0x1E4F14960], a5, Length, 1560281089);
      if (!v12)
      {
        uint64_t v13 = (void *)*a5;
        BytePtr = CFDataGetBytePtr(theData);
        memcpy(v13, BytePtr, *a6);
      }
    }
    else
    {
      uint64_t v12 = 0;
      *a5 = 0;
      *a6 = 0;
    }
  }
  free(v17);
  if (theData) {
    CFRelease(theData);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v12;
}

void vtdss_enqueueFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  CFTypeRef v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  int v3 = *(NSObject **)(a1 + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __vtdss_enqueueFrame_block_invoke;
  block[3] = &unk_1E5786020;
  block[5] = a2;
  block[6] = a1;
  block[4] = &v5;
  dispatch_sync(v3, block);
  if (!*(unsigned char *)(a1 + 184) && !*(unsigned char *)(a1 + 186))
  {
    if (*((unsigned char *)v6 + 24)) {
      VTDecompressionSessionRemoteCallbackClient_FrameIsPending(*(_DWORD *)(a1 + 56), *(void *)(a1 + 64));
    }
    if (*(unsigned char *)(a1 + 152))
    {
      while (!*(unsigned char *)(a1 + 184)
           && !*(unsigned char *)(a1 + 186)
           && !*(unsigned char *)(a1 + 185)
           && FigSemaphoreWaitRelative() == -12792)
        ;
    }
  }
  _Block_object_dispose(&v5, 8);
}

uint64_t __vtdss_enqueueFrame_block_invoke(uint64_t result)
{
  **(void **)(result + 40) = 0;
  **(void **)(*(void *)(result + 48) + 128) = *(void *)(result + 40);
  *(void *)(*(void *)(result + 48) + 128) = *(void *)(result + 40);
  if (!*(unsigned char *)(*(void *)(result + 48) + 136))
  {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    *(unsigned char *)(*(void *)(result + 48) + 136) = 1;
  }
  return result;
}

uint64_t DecompressionSessionClient_RegisterType(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double DecompressionSessionClient_Init(uint64_t a1)
{
  *(void *)(a1 + 256) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void DecompressionSessionClient_Finalize(uint64_t a1)
{
  FigRPCDisposeClientConnection();
  *(void *)(a1 + 16) = 0;
  if (*(unsigned char *)(a1 + 220)) {
    *(unsigned char *)(a1 + 220) = 0;
  }
  if (*(void *)(a1 + 104))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    uint64_t v2 = *(const void **)(a1 + 104);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 104) = 0;
    }
  }
  int v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0;
  }
  CFTypeRef v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v5 = *(NSObject **)(a1 + 144);
  if (v5) {
    dispatch_release(v5);
  }
  CFTypeRef v6 = *(NSObject **)(a1 + 168);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *(NSObject **)(a1 + 176);
  if (v7) {
    dispatch_release(v7);
  }
  FigSemaphoreDestroy();
  char v8 = *(const void **)(a1 + 40);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v9 = *(const void **)(a1 + 192);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 192) = 0;
  }
  CMTimeEpoch v10 = *(const void **)(a1 + 48);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 48) = 0;
  }
  FigServer_RememberProcessInfoForAFewSeconds();
  int v11 = *(const void **)(a1 + 96);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 96) = 0;
  }
  uint64_t v12 = *(void **)(a1 + 256);
  if (v12)
  {
    os_release(v12);
    *(void *)(a1 + 256) = 0;
  }
}

__CFString *DecompressionSessionClient_CopyDebugDesc(uint64_t a1)
{
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"DecompressionSessionClient %p", a1);
  return Mutable;
}

void __vtdss_appStateChangeListener_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  int v1 = *(NSObject **)(a1 + 40);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = __vtdss_appStateChangeListener_block_invoke_2;
  v3[3] = &__block_descriptor_tmp_31;
  long long v4 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = v2;
  CFTypeRef v6 = v1;
  dispatch_group_async(v2, v1, v3);
}

void __vtdss_appStateChangeListener_block_invoke_2(uint64_t a1)
{
  VTDecompressionSessionInvalidate(*(VTDecompressionSessionRef *)(a1 + 32));
  VTTileDecompressionSessionInvalidate(*(void *)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  long long v4 = *(NSObject **)(a1 + 48);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(NSObject **)(a1 + 56);
  if (v5)
  {
    dispatch_release(v5);
  }
}

uint64_t __vtdss_dequeueFrame_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(*(void *)(result + 48) + 120);
  int v1 = *(uint64_t **)(*(void *)(*(void *)(result + 32) + 8) + 24);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 48);
    long long v4 = *(uint64_t **)(v3 + 120);
    if (v4 == v1)
    {
      uint64_t v8 = *v1;
      *(void *)(v3 + 120) = v8;
      if (v8) {
        goto LABEL_9;
      }
      uint64_t v7 = *(void *)(result + 48);
      uint64_t v5 = (uint64_t *)(v7 + 120);
    }
    else
    {
      do
      {
        uint64_t v5 = v4;
        long long v4 = (uint64_t *)*v4;
      }
      while (v4 != v1);
      uint64_t v6 = *v1;
      *uint64_t v5 = v6;
      if (v6) {
        goto LABEL_9;
      }
      uint64_t v7 = *(void *)(result + 48);
    }
    *(void *)(v7 + 128) = v5;
LABEL_9:
    double result = FigSemaphoreSignal();
    *(unsigned char *)(*(void *)(*(void *)(v2 + 40) + 8) + 24) = *(void *)(*(void *)(v2 + 48) + 120) != 0;
    if (!*(unsigned char *)(*(void *)(*(void *)(v2 + 40) + 8) + 24)) {
      *(unsigned char *)(*(void *)(v2 + 48) + 136) = 0;
    }
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

unsigned char *vt_Copy_RGfA_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a1 + 20);
  uint64_t v9 = *(void *)(a1 + 36);
  uint64_t v10 = *(void *)(a1 + 44);
  uint64_t v11 = *(void *)(a1 + 28);
  unint64_t v12 = 2 * *a1;
  uint64_t v13 = 2 * (v11 * a2 / v12);
  uint64_t v14 = v10 + v13;
  uint64_t v15 = 2 * ((v11 + v11 * a2) / v12);
  uint64_t v16 = v10 + v15;
  uint64_t v17 = *((void *)a1 + 14);
  unint64_t v18 = *((void *)a1 + 13) * a2;
  uint64_t v19 = *((void *)a1 + 19);
  uint64_t v21 = *((void *)a1 + 15);
  uint64_t v20 = (uint64_t *)*((void *)a1 + 16);
  size_t v22 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v23 = **((void **)a1 + 8);
  uint64_t v24 = **((void **)a1 + 7);
  uint64_t v285 = *v22;
  uint64_t v25 = v22[1];
  uint64_t v26 = v22[2];
  uint64_t v28 = *v20;
  double result = (unsigned char *)v20[1];
  uint64_t v29 = v20[2];
  int v339 = *(_DWORD *)(v19 + 154);
  unsigned int v30 = *(unsigned __int16 *)(v19 + 144);
  unsigned int v31 = *(unsigned __int16 *)(v19 + 146);
  unsigned int v32 = *(unsigned __int16 *)(v19 + 148);
  unsigned int v33 = *(unsigned __int16 *)(v19 + 150);
  unsigned int v34 = *(unsigned __int16 *)(v19 + 152);
  float v332 = *(float *)(v19 + 36);
  float v331 = *(float *)(v19 + 40);
  a7.i32[0] = *(_DWORD *)(v19 + 48);
  float v330 = *(float *)(v19 + 44);
  v36.i32[0] = *(_DWORD *)(v19 + 52);
  v35.i32[0] = *(_DWORD *)(v19 + 56);
  unsigned __int32 v37 = *(_DWORD *)(v19 + 60);
  a6.i32[0] = *(_DWORD *)(v19 + 64);
  uint64_t v38 = v21 + 2 * (v18 / v12);
  uint64_t v286 = v23;
  uint64_t v39 = v23 * v14;
  a5.i32[0] = *(_DWORD *)(v19 + 68);
  float v329 = *(float *)(v19 + 72);
  float v328 = *(float *)(v19 + 76);
  float v327 = *(float *)(v19 + 80);
  if (v38 >= 0) {
    uint64_t v40 = v38;
  }
  else {
    uint64_t v40 = v38 + 1;
  }
  float v326 = *(float *)(v19 + 84);
  float v325 = *(float *)(v19 + 88);
  uint64_t v283 = v25;
  uint64_t v284 = v26;
  uint64_t v41 = v25 * (v40 >> 1);
  float v324 = *(float *)(v19 + 92);
  float v323 = *(float *)(v19 + 96);
  uint64_t v42 = v29 + v26 * v38;
  float v322 = *(float *)(v19 + 100);
  _S17 = *(float *)(v19 + 108);
  float v321 = *(float *)(v19 + 104);
  _S18 = *(float *)(v19 + 112);
  _S19 = *(float *)(v19 + 116);
  _S20 = *(float *)(v19 + 120);
  memset(v338, 0, sizeof(v338));
  do
  {
    unsigned int v47 = 0;
    char v48 = *((unsigned char *)&v339 + v7);
    do
    {
      *((unsigned char *)v338 + 8 * (((_BYTE)v7 + (v47 >> 3)) & 0x1F) + v47) = v48 + 4 * v47;
      ++v47;
    }
    while (v47 != 8);
    ++v7;
  }
  while (v7 != 4);
  _ZF = v15 == v13;
  uint64_t v51 = v285;
  uint64_t v50 = v286;
  uint64_t v52 = v284;
  if (!_ZF)
  {
    unint64_t v53 = 0;
    unint64_t v282 = v16 - v14;
    uint64_t v54 = v19 + 16548;
    float v55 = (float)v30;
    float v316 = (float)v31;
    float v56 = (float)v32;
    float v333 = (float)v33;
    float v57 = (float)v34;
    a7.i32[1] = v37;
    __asm { FMOV            V5.2S, #0.25 }
    *(float32x2_t *)a7.f32 = vmul_f32(*(float32x2_t *)a7.f32, _D5);
    v36.i32[1] = a6.i32[0];
    *(float32x2_t *)a6.f32 = vmul_f32(v36, _D5);
    v35.i32[1] = a5.i32[0];
    *(float32x2_t *)a5.f32 = vmul_f32(v35, _D5);
    uint64_t v62 = v19 + 32932;
    uint64_t v63 = v19 + 164;
    _S1 = v332;
    __asm { FCVT            H1, S1 }
    float16x8_t v311 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a7), 0);
    short float v312 = *(short float *)&_S1;
    _S1 = v331;
    __asm { FCVT            H1, S1 }
    float16x8_t v309 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a6), 0);
    short float v310 = *(short float *)&_S1;
    _S1 = v330;
    __asm { FCVT            H1, S1 }
    _Q0 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    float16x8_t v307 = (float16x8_t)_Q0;
    short float v308 = *(short float *)&_S1;
    __asm { FCVT            H0, S17 }
    short float v306 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S18 }
    short float v305 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S19 }
    short float v304 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S20 }
    short float v303 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v329;
    __asm { FCVT            H0, S0 }
    short float v302 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v328;
    __asm { FCVT            H0, S0 }
    short float v301 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v327;
    __asm { FCVT            H0, S0 }
    short float v300 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v326;
    __asm { FCVT            H0, S0 }
    short float v299 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v325;
    __asm { FCVT            H0, S0 }
    int32x4_t v298 = _Q0;
    *(float *)_Q0.i32 = v324;
    __asm { FCVT            H0, S0 }
    short float v297 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v323;
    __asm { FCVT            H0, S0 }
    short float v337 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v322;
    __asm { FCVT            H0, S0 }
    short float v336 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v30;
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v31;
    int16x8_t v69 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v32;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v295 = (float16x8_t)_Q0;
    float16x8_t v296 = (float16x8_t)v69;
    *(short float *)_Q0.i16 = (short float)v33;
    int16x8_t v71 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v34;
    float16x8_t v293 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v294 = (float16x8_t)v71;
    *(float *)_Q0.i32 = v321;
    __asm { FCVT            H0, S0 }
    short float v335 = *(short float *)_Q0.i16;
    char v72 = &result[v41];
    if (v29) {
      uint64_t v73 = (int8x8_t *)(v42 + v17);
    }
    else {
      uint64_t v73 = 0;
    }
    double result = &v72[v17];
    int v74 = (int8x8_t *)(v28 + v285 * v38 + v17);
    uint64_t v75 = v24 + v39 + 16 * v9;
    float v314 = a6.f32[0];
    float v315 = a7.f32[0];
    float v291 = a6.f32[1];
    float v292 = a7.f32[1];
    float v313 = a5.f32[0];
    float v289 = v57;
    float v290 = a5.f32[1];
    v76.i64[0] = 0x9000900090009000;
    v76.i64[1] = 0x9000900090009000;
    float v320 = _S17;
    float v319 = _S18;
    float v318 = _S19;
    float v317 = _S20;
    do
    {
      uint64_t v77 = v75 + v50;
      uint64_t v78 = (int8x8_t *)((char *)v74 + v51);
      uint64_t v79 = (int8x8_t *)((char *)v73 + v52);
      v287 = v78;
      v288 = (char *)v73 + v52;
      if ((int)v8 < 8)
      {
        unint64_t v165 = 0;
        CFRange v81 = (const float *)(v75 + v50);
        v164 = result;
      }
      else
      {
        uint64_t v80 = 0;
        CFRange v81 = (const float *)(v75 + v50);
        do
        {
          int v82 = (const float *)v75;
          float32x4x4_t v342 = vld4q_f32(v82);
          v82 += 16;
          float32x4x4_t v341 = vld4q_f32(v82);
          int v83 = v81;
          float32x4x4_t v343 = vld4q_f32(v83);
          v83 += 16;
          float32x4x4_t v340 = vld4q_f32(v83);
          if (v73)
          {
            float16x8_t v84 = (float16x8_t)vdupq_n_s16(0x5BF8u);
            int8x8_t v85 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v342.val[3]), v341.val[3]), v84)));
            int8x8_t v86 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v343.val[3]), v340.val[3]), v84)));
          }
          else
          {
            int8x8_t v85 = 0;
            int8x8_t v86 = 0;
          }
          int8x8_t v334 = v86;
          float16x8_t v87 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v342.val[0]), v341.val[0]);
          int16x4_t v88 = (int16x4_t)vcvt_f16_f32(v343.val[0]);
          v89.i64[0] = 0x7000700070007000;
          v89.i64[1] = 0x7000700070007000;
          float16x8_t v90 = vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v342.val[2]), v341.val[2]), v89);
          float16x8_t v91 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v343.val[2]), v340.val[2]);
          float16x8_t v92 = vmulq_f16(vcvt_hight_f16_f32(v88, v340.val[0]), v89);
          float16x8_t v93 = vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v343.val[1]), v340.val[1]), v89);
          float16x8_t v94 = vmulq_f16(v91, v89);
          uint16x8_t v95 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v87, v89), (float16x8_t)0), v76));
          uint32x4_t v96 = vmovl_high_u16(v95);
          uint32x4_t v97 = vmovl_u16(*(uint16x4_t *)v95.i8);
          v98.i16[0] = *(_WORD *)(v63 + 2 * v97.u32[0]);
          v98.i16[1] = *(_WORD *)(v63 + 2 * v97.u32[1]);
          v98.i16[2] = *(_WORD *)(v63 + 2 * v97.u32[2]);
          v98.i16[3] = *(_WORD *)(v63 + 2 * v97.u32[3]);
          v98.i16[4] = *(_WORD *)(v63 + 2 * v96.u32[0]);
          v98.i16[5] = *(_WORD *)(v63 + 2 * v96.u32[1]);
          v98.i16[6] = *(_WORD *)(v63 + 2 * v96.u32[2]);
          v98.i16[7] = *(_WORD *)(v63 + 2 * v96.u32[3]);
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v342.val[1]), v341.val[1]), v89), (float16x8_t)0), v76));
          uint32x4_t v100 = vmovl_high_u16(v99);
          uint32x4_t v101 = vmovl_u16(*(uint16x4_t *)v99.i8);
          v102.i16[0] = *(_WORD *)(v63 + 2 * v101.u32[0]);
          v102.i16[1] = *(_WORD *)(v63 + 2 * v101.u32[1]);
          v102.i16[2] = *(_WORD *)(v63 + 2 * v101.u32[2]);
          v102.i16[3] = *(_WORD *)(v63 + 2 * v101.u32[3]);
          v102.i16[4] = *(_WORD *)(v63 + 2 * v100.u32[0]);
          v102.i16[5] = *(_WORD *)(v63 + 2 * v100.u32[1]);
          v102.i16[6] = *(_WORD *)(v63 + 2 * v100.u32[2]);
          v102.i16[7] = *(_WORD *)(v63 + 2 * v100.u32[3]);
          uint16x8_t v103 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v90, (float16x8_t)0), v76));
          uint32x4_t v104 = vmovl_high_u16(v103);
          uint32x4_t v105 = vmovl_u16(*(uint16x4_t *)v103.i8);
          v106.i16[0] = *(_WORD *)(v63 + 2 * v105.u32[0]);
          v106.i16[1] = *(_WORD *)(v63 + 2 * v105.u32[1]);
          v106.i16[2] = *(_WORD *)(v63 + 2 * v105.u32[2]);
          v106.i16[3] = *(_WORD *)(v63 + 2 * v105.u32[3]);
          v106.i16[4] = *(_WORD *)(v63 + 2 * v104.u32[0]);
          v106.i16[5] = *(_WORD *)(v63 + 2 * v104.u32[1]);
          v106.i16[6] = *(_WORD *)(v63 + 2 * v104.u32[2]);
          v106.i16[7] = *(_WORD *)(v63 + 2 * v104.u32[3]);
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v92, (float16x8_t)0), v76));
          uint32x4_t v108 = vmovl_high_u16(v107);
          uint32x4_t v109 = vmovl_u16(*(uint16x4_t *)v107.i8);
          v91.i16[0] = *(_WORD *)(v63 + 2 * v109.u32[0]);
          v91.i16[1] = *(_WORD *)(v63 + 2 * v109.u32[1]);
          v91.i16[2] = *(_WORD *)(v63 + 2 * v109.u32[2]);
          v91.i16[3] = *(_WORD *)(v63 + 2 * v109.u32[3]);
          v91.i16[4] = *(_WORD *)(v63 + 2 * v108.u32[0]);
          v91.i16[5] = *(_WORD *)(v63 + 2 * v108.u32[1]);
          v91.i16[6] = *(_WORD *)(v63 + 2 * v108.u32[2]);
          v91.i16[7] = *(_WORD *)(v63 + 2 * v108.u32[3]);
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v93, (float16x8_t)0), v76));
          uint32x4_t v111 = vmovl_high_u16(v110);
          uint32x4_t v112 = vmovl_u16(*(uint16x4_t *)v110.i8);
          v93.i16[0] = *(_WORD *)(v63 + 2 * v112.u32[0]);
          v93.i16[1] = *(_WORD *)(v63 + 2 * v112.u32[1]);
          v93.i16[2] = *(_WORD *)(v63 + 2 * v112.u32[2]);
          v93.i16[3] = *(_WORD *)(v63 + 2 * v112.u32[3]);
          v93.i16[4] = *(_WORD *)(v63 + 2 * v111.u32[0]);
          v93.i16[5] = *(_WORD *)(v63 + 2 * v111.u32[1]);
          v93.i16[6] = *(_WORD *)(v63 + 2 * v111.u32[2]);
          v93.i16[7] = *(_WORD *)(v63 + 2 * v111.u32[3]);
          uint16x8_t v113 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v94, (float16x8_t)0), v76));
          uint32x4_t v114 = vmovl_high_u16(v113);
          uint32x4_t v115 = vmovl_u16(*(uint16x4_t *)v113.i8);
          v116.i16[0] = *(_WORD *)(v63 + 2 * v115.u32[0]);
          v116.i16[1] = *(_WORD *)(v63 + 2 * v115.u32[1]);
          v116.i16[2] = *(_WORD *)(v63 + 2 * v115.u32[2]);
          v116.i16[3] = *(_WORD *)(v63 + 2 * v115.u32[3]);
          v116.i16[4] = *(_WORD *)(v63 + 2 * v114.u32[0]);
          v116.i16[5] = *(_WORD *)(v63 + 2 * v114.u32[1]);
          v116.i16[6] = *(_WORD *)(v63 + 2 * v114.u32[2]);
          v116.i16[7] = *(_WORD *)(v63 + 2 * v114.u32[3]);
          uint16x8_t v117 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v98, v306), v102, v305), v106, v304), vmaxq_f16(vmaxq_f16(v98, v102), v106), v303), (float16x8_t)0), v76));
          uint32x4_t v118 = vmovl_high_u16(v117);
          uint32x4_t v119 = vmovl_u16(*(uint16x4_t *)v117.i8);
          v120.i16[0] = *(_WORD *)(v54 + 2 * v119.u32[0]);
          v120.i16[1] = *(_WORD *)(v54 + 2 * v119.u32[1]);
          v120.i16[2] = *(_WORD *)(v54 + 2 * v119.u32[2]);
          v120.i16[3] = *(_WORD *)(v54 + 2 * v119.u32[3]);
          v120.i16[4] = *(_WORD *)(v54 + 2 * v118.u32[0]);
          v120.i16[5] = *(_WORD *)(v54 + 2 * v118.u32[1]);
          v120.i16[6] = *(_WORD *)(v54 + 2 * v118.u32[2]);
          v120.i16[7] = *(_WORD *)(v54 + 2 * v118.u32[3]);
          float16x8_t v121 = vmulq_f16(v98, v120);
          float16x8_t v122 = vmulq_f16(v102, v120);
          float16x8_t v123 = vmulq_f16(v106, v120);
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v91, v306), v93, v305), v116, v304), vmaxq_f16(vmaxq_f16(v91, v93), v116), v303), (float16x8_t)0), v76));
          uint32x4_t v125 = vmovl_high_u16(v124);
          float16x8_t v126 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v124.i8);
          v126.i16[0] = *(_WORD *)(v54 + 2 * v126.u32[0]);
          v126.i16[1] = *(_WORD *)(v54 + 2 * v126.u32[1]);
          v126.i16[2] = *(_WORD *)(v54 + 2 * v126.u32[2]);
          v126.i16[3] = *(_WORD *)(v54 + 2 * v126.u32[3]);
          v126.i16[4] = *(_WORD *)(v54 + 2 * v125.u32[0]);
          v126.i16[5] = *(_WORD *)(v54 + 2 * v125.u32[1]);
          v126.i16[6] = *(_WORD *)(v54 + 2 * v125.u32[2]);
          v126.i16[7] = *(_WORD *)(v54 + 2 * v125.u32[3]);
          float16x8_t v127 = vmulq_f16(v91, v126);
          float16x8_t v128 = vmulq_f16(v93, v126);
          float16x8_t v129 = vmulq_f16(v116, v126);
          v130.i16[7] = v298.i16[7];
          float16x8_t v131 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v121, v299), v122, *(short float *)v298.i16), v123, v297);
          float16x8_t v132 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v123, v335), v122, v336), v121, v337);
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v121, v302), v122, v301), v123, v300), (float16x8_t)0), v76));
          uint32x4_t v134 = vmovl_high_u16(v133);
          uint32x4_t v135 = vmovl_u16(*(uint16x4_t *)v133.i8);
          v130.i16[0] = *(_WORD *)(v62 + 2 * v135.u32[0]);
          v130.i16[1] = *(_WORD *)(v62 + 2 * v135.u32[1]);
          v130.i16[2] = *(_WORD *)(v62 + 2 * v135.u32[2]);
          v130.i16[3] = *(_WORD *)(v62 + 2 * v135.u32[3]);
          v130.i16[4] = *(_WORD *)(v62 + 2 * v134.u32[0]);
          v130.i16[5] = *(_WORD *)(v62 + 2 * v134.u32[1]);
          v130.i16[6] = *(_WORD *)(v62 + 2 * v134.u32[2]);
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, (float16x8_t)0), v76));
          uint32x4_t v137 = vmovl_high_u16(v136);
          uint32x4_t v138 = vmovl_u16(*(uint16x4_t *)v136.i8);
          v91.i16[0] = *(_WORD *)(v62 + 2 * v138.u32[0]);
          v91.i16[1] = *(_WORD *)(v62 + 2 * v138.u32[1]);
          v91.i16[2] = *(_WORD *)(v62 + 2 * v138.u32[2]);
          v91.i16[3] = *(_WORD *)(v62 + 2 * v138.u32[3]);
          v91.i16[4] = *(_WORD *)(v62 + 2 * v137.u32[0]);
          v91.i16[5] = *(_WORD *)(v62 + 2 * v137.u32[1]);
          v91.i16[6] = *(_WORD *)(v62 + 2 * v137.u32[2]);
          float16x8_t v139 = (float16x8_t)vuzp1q_s16(v130, (int16x8_t)v91);
          v130.i16[7] = *(_WORD *)(v62 + 2 * v134.u32[3]);
          v91.i16[7] = *(_WORD *)(v62 + 2 * v137.u32[3]);
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v132, (float16x8_t)0), v76));
          uint32x4_t v141 = vmovl_high_u16(v140);
          int16x8_t v142 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v140.i8);
          *(void *)&long long v143 = v141.u32[2];
          *((void *)&v143 + 1) = v141.u32[3];
          long long v144 = v143;
          *(void *)&long long v143 = v141.u32[0];
          *((void *)&v143 + 1) = v141.u32[1];
          long long v145 = v143;
          *((void *)&v143 + 1) = v142.u32[3];
          v142.i16[7] = (unint64_t)v142.u32[3] >> 48;
          v142.i16[0] = *(_WORD *)(v62 + 2 * v142.u32[0]);
          v142.i16[1] = *(_WORD *)(v62 + 2 * v142.u32[1]);
          v142.i16[2] = *(_WORD *)(v62 + 2 * v142.u32[2]);
          v142.i16[3] = *(_WORD *)(v62 + 2 * *((void *)&v143 + 1));
          v142.i16[4] = *(_WORD *)(v62 + 2 * v145);
          v142.i16[5] = *(_WORD *)(v62 + 2 * *((void *)&v145 + 1));
          v142.i16[6] = *(_WORD *)(v62 + 2 * v144);
          float16x8_t v146 = (float16x8_t)v142;
          v146.i16[7] = *(_WORD *)(v62 + 2 * *((void *)&v144 + 1));
          uint16x8_t v147 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v127, v302), v128, v301), v129, v300), (float16x8_t)0), v76));
          float16x8_t v148 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v147.i8);
          uint32x4_t v149 = vmovl_high_u16(v147);
          *(void *)&long long v143 = v149.u32[2];
          *((void *)&v143 + 1) = v149.u32[3];
          long long v150 = v143;
          *((void *)&v143 + 1) = v148.u32[3];
          v148.i16[7] = (unint64_t)v148.u32[3] >> 48;
          v148.i16[0] = *(_WORD *)(v62 + 2 * v148.u32[0]);
          v148.i16[1] = *(_WORD *)(v62 + 2 * v148.u32[1]);
          v148.i16[2] = *(_WORD *)(v62 + 2 * v148.u32[2]);
          v148.i16[3] = *(_WORD *)(v62 + 2 * *((void *)&v143 + 1));
          v148.i16[4] = *(_WORD *)(v62 + 2 * v149.u32[0]);
          v148.i16[5] = *(_WORD *)(v62 + 2 * v149.u32[1]);
          v148.i16[6] = *(_WORD *)(v62 + 2 * v150);
          v151 = (__int16 *)(v62 + 2 * *((void *)&v150 + 1));
          uint16x8_t v152 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v127, v299), v128, *(short float *)v298.i16), v129, v297), (float16x8_t)0), v76));
          float16x8_t v153 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v152.i8);
          uint32x4_t v154 = vmovl_high_u16(v152);
          *(void *)&long long v143 = v154.u32[2];
          *((void *)&v143 + 1) = v154.u32[3];
          long long v155 = v143;
          *((void *)&v143 + 1) = v153.u32[3];
          v153.i16[7] = (unint64_t)v153.u32[3] >> 48;
          v153.i16[0] = *(_WORD *)(v62 + 2 * v153.u32[0]);
          v153.i16[1] = *(_WORD *)(v62 + 2 * v153.u32[1]);
          v153.i16[2] = *(_WORD *)(v62 + 2 * v153.u32[2]);
          v153.i16[3] = *(_WORD *)(v62 + 2 * *((void *)&v143 + 1));
          v153.i16[4] = *(_WORD *)(v62 + 2 * v154.u32[0]);
          v153.i16[5] = *(_WORD *)(v62 + 2 * v154.u32[1]);
          v153.i16[6] = *(_WORD *)(v62 + 2 * v155);
          float16x8_t v156 = (float16x8_t)vuzp1q_s16((int16x8_t)v148, (int16x8_t)v153);
          v148.i16[7] = *v151;
          v153.i16[7] = *(_WORD *)(v62 + 2 * *((void *)&v155 + 1));
          uint16x8_t v157 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v335), v128, v336), v127, v337), (float16x8_t)0), v76));
          uint32x4_t v158 = vmovl_high_u16(v157);
          int16x8_t v159 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v157.i8);
          *(void *)&long long v143 = v158.u32[2];
          *((void *)&v143 + 1) = v158.u32[3];
          long long v160 = v143;
          *(void *)&long long v143 = v158.u32[0];
          *((void *)&v143 + 1) = v158.u32[1];
          long long v161 = v143;
          *((void *)&v143 + 1) = v159.u32[3];
          v159.i16[7] = (unint64_t)v159.u32[3] >> 48;
          v159.i16[0] = *(_WORD *)(v62 + 2 * v159.u32[0]);
          v159.i16[1] = *(_WORD *)(v62 + 2 * v159.u32[1]);
          v159.i16[2] = *(_WORD *)(v62 + 2 * v159.u32[2]);
          v159.i16[3] = *(_WORD *)(v62 + 2 * *((void *)&v143 + 1));
          v159.i16[4] = *(_WORD *)(v62 + 2 * v161);
          v159.i16[5] = *(_WORD *)(v62 + 2 * *((void *)&v161 + 1));
          v159.i16[6] = *(_WORD *)(v62 + 2 * v160);
          float16x8_t v162 = (float16x8_t)v159;
          v162.i16[7] = *(_WORD *)(v62 + 2 * *((void *)&v160 + 1));
          *v74++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v68, (float16x8_t)v130, v312), v91, v310), v146, v308), v68), v295)));
          *v78++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v68, v148, v312), v153, v310), v162, v308), v68), v295)));
          int16x8_t v163 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v139, (float16x8_t)vuzp2q_s16(v130, (int16x8_t)v91)), v156), (float16x8_t)vuzp2q_s16((int16x8_t)v148, (int16x8_t)v153));
          *(int8x8_t *)&result[v80] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v296, v311, (float16x8_t)vzip1q_s16(v163, v163)), v309, (float16x8_t)vzip2q_s16(v163, v163)), v307, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v142, v142), (float16x8_t)vtrn2q_s16((int16x8_t)v146, (int16x8_t)v146)), (float16x8_t)vtrn1q_s16(v159, v159)),
                                                                     (float16x8_t)vtrn2q_s16((int16x8_t)v162, (int16x8_t)v162))), v294), v293)));
          if (v73)
          {
            *v73++ = v85;
            *v79++ = v334;
          }
          float v57 = v289;
          v75 += 128;
          v81 += 32;
          v80 += 8;
        }
        while ((int)v80 < (int)v8 - 7);
        v164 = &result[v80];
        unint64_t v165 = v8 & 0xFFFFFFF8;
      }
      if (v8 > v165)
      {
        uint64_t v166 = 0;
        v167 = v81 + 4;
        uint64_t v168 = v75 + 16;
        do
        {
          uint64_t v169 = v166 + 4 * v339;
          v170.i32[0] = *(_DWORD *)(v168 + v169 - 16);
          uint64_t v171 = v166 + 4 * BYTE1(v339);
          v170.i32[1] = *(_DWORD *)(v168 + v171 - 16);
          float32x2_t v172 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v170, v172), 0), v172)));
          uint64_t v174 = v166 + 4 * BYTE2(v339);
          _D0.i16[0] = *(_WORD *)(v63 + 2 * _D0.u32[0]);
          _D1.i32[0] = *(_DWORD *)(v168 + v174 - 16);
          __asm { FCVT            S30, H0 }
          _D0.i16[0] = *(_WORD *)(v63 + 2 * _D0.u32[1]);
          __asm { FCVT            S9, H0 }
          _D1.i32[1] = *(_DWORD *)(v168 + v169);
          int32x2_t v178 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D1, v172), 0), v172)));
          _D1.i16[0] = *(_WORD *)(v63 + 2 * v178.u32[0]);
          __asm { FCVT            S11, H1 }
          float v180 = fmaxf(_S30, fmaxf(_S9, _S11));
          float v181 = (float)((float)((float)(_S18 * _S9) + (float)(_S17 * _S30)) + (float)(_S19 * _S11))
               + (float)(_S20 * v180);
          float v182 = 8191.0;
          if (v181 <= 8191.0)
          {
            float v182 = (float)((float)((float)(_S18 * _S9) + (float)(_S17 * _S30)) + (float)(_S19 * _S11))
                 + (float)(_S20 * v180);
            if (v181 < 0.0) {
              float v182 = 0.0;
            }
          }
          v183.i32[0] = *(_DWORD *)(v168 + v171);
          _H0 = *(_WORD *)(v63 + 2 * v178.u32[1]);
          __asm { FCVT            S12, H0 }
          v183.i32[1] = *(_DWORD *)(v168 + v174);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v183, v172), 0), v172)));
          _D0.i16[0] = *(_WORD *)(v63 + 2 * _D0.u32[0]);
          __asm { FCVT            S14, H0 }
          _D0.i16[0] = *(_WORD *)(v63 + 2 * _D0.u32[1]);
          __asm { FCVT            S15, H0 }
          float v189 = fmaxf(_S12, fmaxf(_S14, _S15));
          float v190 = (float)((float)((float)(_S18 * _S14) + (float)(_S17 * _S12)) + (float)(_S19 * _S15))
               + (float)(_S20 * v189);
          float v191 = 8191.0;
          if (v190 <= 8191.0)
          {
            float v191 = (float)((float)((float)(_S18 * _S14) + (float)(_S17 * _S12)) + (float)(_S19 * _S15))
                 + (float)(_S20 * v189);
            if (v190 < 0.0) {
              float v191 = 0.0;
            }
          }
          v192.f32[0] = *(const float *)((char *)v167 + v169 - 16);
          v192.f32[1] = *(const float *)((char *)v167 + v171 - 16);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v192, v172), 0), v172)));
          _D0.i16[0] = *(_WORD *)(v63 + 2 * _D0.u32[0]);
          v194 = (__int32 *)((char *)v167 + v174);
          _D3.i32[0] = *(v194 - 4);
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v63 + 2 * _D0.u32[1]);
          _D3.f32[1] = *(const float *)((char *)v167 + v169);
          __asm { FCVT            S1, H1 }
          int32x2_t v199 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D3, v172), 0), v172)));
          _D3.i16[0] = *(_WORD *)(v63 + 2 * v199.u32[0]);
          __asm { FCVT            S3, H3 }
          float v201 = (float)((float)((float)(_S18 * _S1) + (float)(_S17 * _S0)) + (float)(_S19 * _S3))
               + (float)(_S20 * fmaxf(_S0, fmaxf(_S1, _S3)));
          float v202 = 8191.0;
          if (v201 <= 8191.0)
          {
            float v202 = v201;
            if (v201 < 0.0) {
              float v202 = 0.0;
            }
          }
          _D6.f32[0] = *(const float *)((char *)v167 + v171);
          _H5 = *(_WORD *)(v63 + 2 * v199.u32[1]);
          __asm { FCVT            S5, H5 }
          _D6.i32[1] = *v194;
          _D2 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D6, v172), 0), v172)));
          _D2.i16[0] = *(_WORD *)(v63 + 2 * _D2.u32[0]);
          __asm { FCVT            S2, H2 }
          _D6.i16[0] = *(_WORD *)(v63 + 2 * _D2.u32[1]);
          __asm { FCVT            S6, H6 }
          float v209 = (float)((float)((float)(_S18 * _S2) + (float)(_S17 * _S5)) + (float)(_S19 * _S6))
               + (float)(_S20 * fmaxf(_S5, fmaxf(_S2, _S6)));
          float v210 = 8191.0;
          if (v209 <= 8191.0)
          {
            float v210 = v209;
            if (v209 < 0.0) {
              float v210 = 0.0;
            }
          }
          if (v73)
          {
            uint64_t v211 = v166 + 4 * HIBYTE(v339);
            float v212 = *(float *)(v168 + v211 - 16);
            float v213 = *(float *)(v168 + v211);
            v214 = (float *)((char *)v167 + v211);
            __int8 v215 = llroundf(v212 * 255.0);
            __int8 v216 = llroundf(v213 * 255.0);
            __int8 v217 = llroundf(*(v214 - 4) * 255.0);
            __int8 v218 = llroundf(*v214 * 255.0);
          }
          else
          {
            __int8 v217 = 0;
            __int8 v215 = 0;
            __int8 v216 = 0;
            __int8 v218 = 0;
          }
          _H7 = *(_WORD *)(v54 + 2 * llroundf(v182));
          __asm { FCVT            S7, H7 }
          float v221 = _S30 * _S7;
          float v222 = _S9 * _S7;
          float v223 = _S11 * _S7;
          _H19 = *(_WORD *)(v54 + 2 * llroundf(v191));
          __asm { FCVT            S19, H19 }
          float v226 = _S12 * _S19;
          float v227 = _S14 * _S19;
          float v228 = _S15 * _S19;
          _H4 = *(_WORD *)(v54 + 2 * llroundf(v202));
          __asm { FCVT            S4, H4 }
          _S0 = _S0 * _S4;
          _S1 = _S1 * _S4;
          _S3 = _S3 * _S4;
          LOWORD(_S4) = *(_WORD *)(v54 + 2 * llroundf(v210));
          __asm { FCVT            S4, H4 }
          float v235 = _S5 * _S4;
          float v236 = _S2 * _S4;
          _S4 = _S6 * _S4;
          _S6 = (float)((float)(v328 * v222) + (float)(v221 * v329)) + (float)(v223 * v327);
          float v239 = (float)((float)(v325 * v222) + (float)(v221 * v326)) + (float)(v223 * v324);
          _S7 = (float)((float)(v322 * v222) + (float)(v221 * v323)) + (float)(v223 * v321);
          _S17 = (float)((float)(v328 * v227) + (float)(v226 * v329)) + (float)(v228 * v327);
          _S18 = (float)((float)(v325 * v227) + (float)(v226 * v326)) + (float)(v228 * v324);
          _S19 = (float)((float)(v322 * v227) + (float)(v226 * v323)) + (float)(v228 * v321);
          float v244 = (float)((float)(v328 * _S1) + (float)(_S0 * v329)) + (float)(_S3 * v327);
          float v245 = (float)((float)(v325 * _S1) + (float)(_S0 * v326)) + (float)(_S3 * v324);
          float v246 = (float)((float)(v322 * _S1) + (float)(_S0 * v323)) + (float)(_S3 * v321);
          float v247 = (float)((float)(v328 * v236) + (float)(v235 * v329)) + (float)(_S4 * v327);
          float v248 = (float)((float)(v325 * v236) + (float)(v235 * v326)) + (float)(_S4 * v324);
          float v249 = (float)((float)(v322 * v236) + (float)(v235 * v323)) + (float)(_S4 * v321);
          LOWORD(_S0) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S2, H0 }
          LOWORD(_S0) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v239, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S4) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H4
            FCVT            S4, H6
          }
          LOWORD(_S6) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v244, 0.0), 8191.0)));
          __asm { FCVT            S16, H6 }
          LOWORD(_S6) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v245, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v246, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S17) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v247, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S18) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v248, 0.0), 8191.0)));
          LOWORD(_S19) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v249, 0.0), 8191.0)));
          __asm
          {
            FCVT            S18, H18
            FCVT            S19, H19
          }
          float v262 = (float)((float)((float)(v331 * _S0) + (float)(v332 * _S2)) + (float)(v330 * _S1)) + v55;
          if (v262 < v55) {
            float v263 = v55;
          }
          else {
            float v263 = (float)((float)((float)(v331 * _S0) + (float)(v332 * _S2)) + (float)(v330 * _S1)) + v55;
          }
          BOOL v264 = v262 <= v56;
          float v265 = (float)((float)((float)(v331 * _S5) + (float)(v332 * _S3)) + (float)(v330 * _S4)) + v55;
          if (!v264) {
            float v263 = (float)v32;
          }
          __int8 v266 = llroundf(v263);
          if (v265 < v55) {
            float v267 = v55;
          }
          else {
            float v267 = (float)((float)((float)(v331 * _S5) + (float)(v332 * _S3)) + (float)(v330 * _S4)) + v55;
          }
          BOOL v264 = v265 <= v56;
          float v268 = (float)((float)((float)(v331 * _S6) + (float)(v332 * _S16)) + (float)(v330 * _S7)) + v55;
          if (!v264) {
            float v267 = (float)v32;
          }
          __int8 v269 = llroundf(v267);
          if (v268 < v55) {
            float v270 = v55;
          }
          else {
            float v270 = (float)((float)((float)(v331 * _S6) + (float)(v332 * _S16)) + (float)(v330 * _S7)) + v55;
          }
          BOOL v264 = v268 <= v56;
          float v271 = (float)((float)((float)(v331 * _S18) + (float)(v332 * _S17)) + (float)(v330 * _S19)) + v55;
          if (!v264) {
            float v270 = (float)v32;
          }
          __int8 v272 = llroundf(v270);
          if (v271 < v55) {
            float v273 = v55;
          }
          else {
            float v273 = (float)((float)((float)(v331 * _S18) + (float)(v332 * _S17)) + (float)(v330 * _S19)) + v55;
          }
          if (v271 <= v56) {
            float v274 = v273;
          }
          else {
            float v274 = (float)v32;
          }
          float v275 = (float)((float)(_S2 + _S3) + _S16) + _S17;
          float v276 = (float)((float)(_S0 + _S5) + _S6) + _S18;
          v74->i8[0] = v266;
          v74->i8[1] = v269;
          v78->i8[0] = v272;
          v78->i8[1] = llroundf(v274);
          float v277 = (float)((float)(_S1 + _S4) + _S7) + _S19;
          float v278 = (float)((float)(v316 + (float)(v275 * v315)) + (float)(v276 * v314)) + (float)(v277 * v313);
          float v279 = v57;
          if (v278 <= v57)
          {
            float v279 = (float)((float)(v316 + (float)(v275 * v315)) + (float)(v276 * v314)) + (float)(v277 * v313);
            if (v278 < v333) {
              float v279 = (float)v33;
            }
          }
          float v280 = (float)((float)(v316 + (float)(v275 * v292)) + (float)(v276 * v291)) + (float)(v277 * v290);
          unsigned char *v164 = llroundf(v279);
          float v281 = v57;
          _S17 = v320;
          _S18 = v319;
          _S19 = v318;
          _S20 = v317;
          if (v280 <= v57)
          {
            float v281 = v280;
            if (v280 < v333) {
              float v281 = (float)v33;
            }
          }
          v164[1] = llroundf(v281);
          if (v73)
          {
            v73->i8[0] = v215;
            v73->i8[1] = v216;
            uint64_t v73 = (int8x8_t *)((char *)v73 + 2);
            v79->i8[0] = v217;
            v79->i8[1] = v218;
            uint64_t v79 = (int8x8_t *)((char *)v79 + 2);
          }
          v165 += 2;
          v166 += 32;
          int v74 = (int8x8_t *)((char *)v74 + 2);
          uint64_t v78 = (int8x8_t *)((char *)v78 + 2);
          v164 += 2;
        }
        while (v8 > v165);
      }
      uint64_t v51 = v285;
      uint64_t v50 = v286;
      uint64_t v75 = v77 + v286;
      int v74 = (int8x8_t *)((char *)v287 + v285);
      uint64_t v52 = v284;
      result += v283;
      uint64_t v73 = (int8x8_t *)&v288[v284];
      v53 += 2;
    }
    while (v282 > v53);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_TRC_Tone_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, float a3, float a4)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = 2 * *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    unint64_t v9 = *(void *)(result + 20);
    uint64_t v10 = *(void *)(result + 44) + 2 * v6;
    unint64_t v165 = 2 * v7 - 2 * v6;
    uint64_t v11 = *((void *)result + 19);
    uint64_t v12 = (uint64_t *)*((void *)result + 17);
    uint64_t v13 = **((void **)result + 8);
    uint64_t v14 = *v12;
    uint64_t v15 = v12[1];
    uint64_t v16 = v12[2];
    LOWORD(a3) = *(_WORD *)(v11 + 144);
    float v17 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v11 + 146);
    float v18 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v11 + 148);
    float v19 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v11 + 150);
    *(float *)&unsigned int v20 = (float)LODWORD(a4);
    float v186 = *(float *)&v20;
    float v187 = v18;
    LOWORD(v20) = *(_WORD *)(v11 + 152);
    float v21 = (float)v20;
    float v184 = *(float *)(v11 + 40);
    float v185 = *(float *)(v11 + 36);
    float v182 = *(float *)(v11 + 48) * 0.25;
    float v183 = *(float *)(v11 + 44);
    float v180 = *(float *)(v11 + 56) * 0.25;
    float v181 = *(float *)(v11 + 52) * 0.25;
    float v178 = *(float *)(v11 + 64) * 0.25;
    float v179 = *(float *)(v11 + 60) * 0.25;
    float v176 = *(float *)(v11 + 68) * 0.25;
    float v177 = *(float *)(v11 + 72);
    float v174 = *(float *)(v11 + 80);
    float v175 = *(float *)(v11 + 76);
    float v172 = *(float *)(v11 + 88);
    float v173 = *(float *)(v11 + 84);
    float v170 = *(float *)(v11 + 96);
    float v171 = *(float *)(v11 + 92);
    float v22 = *(float *)(v11 + 108);
    float v168 = *(float *)(v11 + 104);
    float v169 = *(float *)(v11 + 100);
    uint64_t v23 = v11 + 164;
    uint64_t v24 = v11 + 16548;
    uint64_t v25 = v11 + 32932;
    float v27 = *(float *)(v11 + 112);
    float v26 = *(float *)(v11 + 116);
    float v28 = *(float *)(v11 + 120);
    uint64_t v29 = *((void *)result + 14);
    uint64_t v30 = (void *)*((void *)result + 16);
    uint64_t v31 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v5);
    double result = (unsigned __int8 *)(**((void **)result + 7) + v13 * v10 + 16 * *(void *)(result + 36));
    uint64_t v32 = v30[1];
    uint64_t v33 = (unsigned char *)(*v30 + v31 * v14 + v29);
    uint64_t v34 = v30[2];
    if (v34) {
      uint64_t v35 = (unsigned char *)(v34 + v31 * v16 + v29);
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v36 = *(unsigned __int8 *)(v11 + 157);
    uint64_t v37 = *(unsigned __int8 *)(v11 + 156);
    if (v31 >= 0) {
      uint64_t v38 = v31;
    }
    else {
      uint64_t v38 = v31 + 1;
    }
    uint64_t v162 = v15;
    float32x2_t v39 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v40 = *(unsigned __int8 *)(v11 + 155);
    uint64_t v41 = *(unsigned __int8 *)(v11 + 154);
    uint64_t v42 = v32 + (v38 >> 1) * v15 + v29;
    float v166 = *(float *)(v11 + 112);
    float v167 = *(float *)(v11 + 108);
    uint64_t v163 = v14;
    uint64_t v164 = v13;
    uint64_t v161 = v16;
    do
    {
      uint64_t v43 = &v35[v16];
      uint64_t v44 = &v33[v14];
      CMItemCount v45 = &result[v13];
      if (v9)
      {
        unint64_t v46 = 0;
        unsigned int v47 = &v35[v16];
        char v48 = &v33[v14];
        CMTime v49 = &result[v13];
        do
        {
          v50.i32[0] = *(_DWORD *)&result[4 * v41];
          v50.i32[1] = *(_DWORD *)&result[4 * v40];
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v50, v39), 0), v39)));
          uint64_t v52 = result + 16;
          _D1.i16[0] = *(_WORD *)(v23 + 2 * _D1.u32[0]);
          __asm { FCVT            S15, H1 }
          _D1.i16[0] = *(_WORD *)(v23 + 2 * _D1.u32[1]);
          _D3.i32[0] = *(_DWORD *)&result[4 * v37];
          _D3.i32[1] = *(_DWORD *)&result[4 * v41 + 16];
          __asm { FCVT            S16, H1 }
          int32x2_t v60 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D3, v39), 0), v39)));
          _D3.i16[0] = *(_WORD *)(v23 + 2 * v60.u32[0]);
          __asm { FCVT            S17, H3 }
          float v62 = fmaxf(_S15, fmaxf(_S16, _S17));
          float v63 = (float)((float)((float)(v27 * _S16) + (float)(v22 * _S15)) + (float)(v26 * _S17)) + (float)(v28 * v62);
          float v64 = 8191.0;
          if (v63 <= 8191.0)
          {
            float v64 = (float)((float)((float)(v27 * _S16) + (float)(v22 * _S15)) + (float)(v26 * _S17)) + (float)(v28 * v62);
            if (v63 < 0.0) {
              float v64 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v23 + 2 * v60.u32[1]);
          __asm { FCVT            S19, H1 }
          v67.i32[0] = *(_DWORD *)&v52[4 * v40];
          v67.i32[1] = *(_DWORD *)&v52[4 * v37];
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v67, v39), 0), v39)));
          _D1.i16[0] = *(_WORD *)(v23 + 2 * _D1.u32[0]);
          __asm { FCVT            S20, H1 }
          _D1.i16[0] = *(_WORD *)(v23 + 2 * _D1.u32[1]);
          __asm { FCVT            S22, H1 }
          float v71 = (float)((float)((float)(v27 * _S20) + (float)(v22 * _S19)) + (float)(v26 * _S22))
              + (float)(v28 * fmaxf(_S19, fmaxf(_S20, _S22)));
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          v73.i32[0] = *(_DWORD *)&v49[4 * v41];
          v73.i32[1] = *(_DWORD *)&v49[4 * v40];
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v73, v39), 0), v39)));
          uint64_t v75 = v49 + 16;
          _D1.i16[0] = *(_WORD *)(v23 + 2 * _D1.u32[0]);
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v23 + 2 * _D1.u32[1]);
          _D5.i32[0] = *(_DWORD *)&v49[4 * v37];
          _D5.i32[1] = *(_DWORD *)&v49[4 * v41 + 16];
          __asm { FCVT            S12, H4 }
          int32x2_t v80 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D5, v39), 0), v39)));
          _D5.i16[0] = *(_WORD *)(v23 + 2 * v80.u32[0]);
          __asm { FCVT            S5, H5 }
          float v82 = (float)((float)((float)(v27 * _S12) + (float)(v22 * _S1)) + (float)(v26 * _S5))
              + (float)(v28 * fmaxf(_S1, fmaxf(_S12, _S5)));
          float v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v23 + 2 * v80.u32[1]);
          __asm { FCVT            S7, H4 }
          v86.i32[0] = *(_DWORD *)&v75[4 * v40];
          v86.i32[1] = *(_DWORD *)&v75[4 * v37];
          _D4 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v86, v39), 0), v39)));
          _D4.i16[0] = *(_WORD *)(v23 + 2 * _D4.u32[0]);
          __asm { FCVT            S4, H4 }
          _H21 = *(_WORD *)(v23 + 2 * _D4.u32[1]);
          __asm { FCVT            S21, H21 }
          float v91 = (float)((float)((float)(v27 * _S4) + (float)(v22 * _S7)) + (float)(v26 * _S21))
              + (float)(v28 * fmaxf(_S7, fmaxf(_S4, _S21)));
          float v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          if (v35)
          {
            float v93 = *(float *)&v75[4 * v36];
            char v94 = llroundf(*(float *)&result[4 * v36] * 255.0);
            char v95 = llroundf(*(float *)&v52[4 * v36] * 255.0);
            char v96 = llroundf(*(float *)&v49[4 * v36] * 255.0);
            char v97 = llroundf(v93 * 255.0);
          }
          else
          {
            char v96 = 0;
            char v94 = 0;
            char v95 = 0;
            char v97 = 0;
          }
          _H18 = *(_WORD *)(v24 + 2 * llroundf(v64));
          __asm { FCVT            S18, H18 }
          float v100 = _S15 * _S18;
          float v101 = _S16 * _S18;
          float v102 = _S17 * _S18;
          _H3 = *(_WORD *)(v24 + 2 * llroundf(v72));
          __asm { FCVT            S3, H3 }
          float v105 = _S19 * _S3;
          float v106 = _S20 * _S3;
          _S3 = _S22 * _S3;
          _H6 = *(_WORD *)(v24 + 2 * llroundf(v83));
          __asm { FCVT            S6, H6 }
          _S1 = _S1 * _S6;
          float v111 = _S12 * _S6;
          float v112 = _S5 * _S6;
          LOWORD(_S6) = *(_WORD *)(v24 + 2 * llroundf(v92));
          __asm { FCVT            S6, H6 }
          float v114 = _S7 * _S6;
          _S4 = _S4 * _S6;
          float v116 = _S21 * _S6;
          _S21 = (float)((float)(v175 * v101) + (float)(v100 * v177)) + (float)(v102 * v174);
          float v118 = (float)((float)(v172 * v101) + (float)(v100 * v173)) + (float)(v102 * v171);
          _S16 = (float)((float)(v169 * v101) + (float)(v100 * v170)) + (float)(v102 * v168);
          _S17 = (float)((float)(v175 * v106) + (float)(v105 * v177)) + (float)(_S3 * v174);
          float v121 = (float)((float)(v172 * v106) + (float)(v105 * v173)) + (float)(_S3 * v171);
          float v122 = (float)((float)(v169 * v106) + (float)(v105 * v170)) + (float)(_S3 * v168);
          _S19 = (float)((float)(v175 * v111) + (float)(_S1 * v177)) + (float)(v112 * v174);
          float v124 = (float)((float)(v172 * v111) + (float)(_S1 * v173)) + (float)(v112 * v171);
          _S20 = (float)((float)(v169 * v111) + (float)(_S1 * v170)) + (float)(v112 * v168);
          float v126 = (float)((float)(v175 * _S4) + (float)(v114 * v177)) + (float)(v116 * v174);
          float v127 = (float)((float)(v172 * _S4) + (float)(v114 * v173)) + (float)(v116 * v171);
          float v128 = (float)((float)(v169 * _S4) + (float)(v114 * v170)) + (float)(v116 * v168);
          LOWORD(_S1) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S5, H1 }
          LOWORD(_S1) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S4) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S6, H4 }
          LOWORD(_S4) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          LOWORD(_S16) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H4
            FCVT            S4, H16
          }
          LOWORD(_S16) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S18, H16 }
          LOWORD(_S16) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          LOWORD(_S17) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S19) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H20
            FCVT            S21, H21
          }
          float v141 = (float)((float)((float)(v184 * _S1) + (float)(v185 * _S5)) + (float)(v183 * _S3)) + v17;
          if (v141 < v17) {
            float v142 = v17;
          }
          else {
            float v142 = (float)((float)((float)(v184 * _S1) + (float)(v185 * _S5)) + (float)(v183 * _S3)) + v17;
          }
          BOOL v143 = v141 <= v19;
          float v144 = (float)((float)((float)(v184 * _S7) + (float)(v185 * _S6)) + (float)(v183 * _S4)) + v17;
          if (!v143) {
            float v142 = v19;
          }
          char v145 = llroundf(v142);
          if (v144 < v17) {
            float v146 = v17;
          }
          else {
            float v146 = (float)((float)((float)(v184 * _S7) + (float)(v185 * _S6)) + (float)(v183 * _S4)) + v17;
          }
          BOOL v143 = v144 <= v19;
          float v147 = (float)((float)((float)(v184 * _S16) + (float)(v185 * _S18)) + (float)(v183 * _S17)) + v17;
          if (!v143) {
            float v146 = v19;
          }
          char v148 = llroundf(v146);
          if (v147 < v17) {
            float v149 = v17;
          }
          else {
            float v149 = (float)((float)((float)(v184 * _S16) + (float)(v185 * _S18)) + (float)(v183 * _S17)) + v17;
          }
          BOOL v143 = v147 <= v19;
          float v150 = (float)((float)((float)(v184 * _S20) + (float)(v185 * _S19)) + (float)(v183 * _S21)) + v17;
          if (!v143) {
            float v149 = v19;
          }
          char v151 = llroundf(v149);
          if (v150 < v17) {
            float v152 = v17;
          }
          else {
            float v152 = (float)((float)((float)(v184 * _S20) + (float)(v185 * _S19)) + (float)(v183 * _S21)) + v17;
          }
          if (v150 <= v19) {
            float v153 = v152;
          }
          else {
            float v153 = v19;
          }
          float v154 = (float)((float)(_S5 + _S6) + _S18) + _S19;
          float v155 = (float)((float)(_S1 + _S7) + _S16) + _S20;
          *uint64_t v33 = v145;
          v33[1] = v148;
          *char v48 = v151;
          v48[1] = llroundf(v153);
          float v156 = (float)((float)(_S3 + _S4) + _S17) + _S21;
          float v157 = (float)((float)(v187 + (float)(v154 * v182)) + (float)(v155 * v181)) + (float)(v156 * v180);
          float v158 = v21;
          if (v157 <= v21)
          {
            float v158 = (float)((float)(v187 + (float)(v154 * v182)) + (float)(v155 * v181)) + (float)(v156 * v180);
            if (v157 < v186) {
              float v158 = v186;
            }
          }
          float v159 = (float)((float)(v187 + (float)(v154 * v179)) + (float)(v155 * v178)) + (float)(v156 * v176);
          *(unsigned char *)(v42 + v46) = llroundf(v158);
          float v160 = v21;
          float v27 = v166;
          float v22 = v167;
          if (v159 <= v21)
          {
            float v160 = v159;
            if (v159 < v186) {
              float v160 = v186;
            }
          }
          *(unsigned char *)(v42 + v46 + 1) = llroundf(v160);
          if (v35)
          {
            *uint64_t v35 = v94;
            v35[1] = v95;
            v35 += 2;
            *unsigned int v47 = v96;
            v47[1] = v97;
            v47 += 2;
          }
          result += 32;
          v49 += 32;
          v33 += 2;
          v48 += 2;
          v46 += 2;
        }
        while (v9 > v46);
      }
      uint64_t v14 = v163;
      uint64_t v13 = v164;
      double result = &v45[v164];
      uint64_t v33 = &v44[v163];
      uint64_t v16 = v161;
      v42 += v162;
      uint64_t v35 = &v43[v161];
      v8 += 2;
    }
    while (v165 > v8);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

int8x8_t *vt_Copy_RGfA_TRC_Mat_TRC_420vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v6 = 0;
  unint64_t v7 = *(void *)(a1 + 20);
  uint64_t v8 = *(void *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 44);
  uint64_t v10 = *(void *)(a1 + 28);
  unint64_t v11 = 2 * *a1;
  uint64_t v12 = 2 * (v10 * a2 / v11);
  uint64_t v13 = v9 + v12;
  uint64_t v14 = 2 * ((v10 + v10 * a2) / v11);
  uint64_t v15 = v9 + v14;
  uint64_t v16 = *((void *)a1 + 14);
  unint64_t v17 = *((void *)a1 + 13) * a2;
  uint64_t v18 = *((void *)a1 + 19);
  uint64_t v20 = *((void *)a1 + 15);
  uint64_t v19 = *((void *)a1 + 16);
  uint64_t v21 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v22 = **((void **)a1 + 8);
  uint64_t v23 = **((void **)a1 + 7);
  uint64_t v24 = v21[1];
  uint64_t v227 = *v21;
  double result = *(int8x8_t **)v19;
  uint64_t v26 = *(void *)(v19 + 8);
  uint64_t v27 = v21[2];
  uint64_t v28 = *(void *)(v19 + 16);
  int v270 = *(_DWORD *)(v18 + 154);
  unsigned int v29 = *(unsigned __int16 *)(v18 + 144);
  unsigned int v30 = *(unsigned __int16 *)(v18 + 146);
  unsigned int v31 = *(unsigned __int16 *)(v18 + 148);
  unsigned int v32 = *(unsigned __int16 *)(v18 + 150);
  unsigned int v33 = *(unsigned __int16 *)(v18 + 152);
  float v265 = *(float *)(v18 + 36);
  float v264 = *(float *)(v18 + 40);
  v34.i32[0] = *(_DWORD *)(v18 + 48);
  float v263 = *(float *)(v18 + 44);
  uint64_t v35 = v20 + 2 * (v17 / v11);
  uint64_t v228 = v22;
  uint64_t v36 = v22 * v13;
  v38.i32[0] = *(_DWORD *)(v18 + 52);
  v37.i32[0] = *(_DWORD *)(v18 + 56);
  __int32 v39 = *(_DWORD *)(v18 + 60);
  __int32 v40 = *(_DWORD *)(v18 + 64);
  if (v35 >= 0) {
    uint64_t v41 = v35;
  }
  else {
    uint64_t v41 = v35 + 1;
  }
  __int32 v42 = *(_DWORD *)(v18 + 68);
  float v262 = *(float *)(v18 + 72);
  uint64_t v225 = v24;
  uint64_t v226 = v27;
  uint64_t v43 = v24 * (v41 >> 1);
  float v259 = *(float *)(v18 + 76);
  float v258 = *(float *)(v18 + 80);
  uint64_t v44 = v28 + v27 * v35;
  float v261 = *(float *)(v18 + 84);
  float v260 = *(float *)(v18 + 88);
  float v257 = *(float *)(v18 + 92);
  float v256 = *(float *)(v18 + 96);
  float v255 = *(float *)(v18 + 100);
  float v254 = *(float *)(v18 + 104);
  v45.i64[1] = 0;
  memset(v269, 0, sizeof(v269));
  do
  {
    unsigned int v46 = 0;
    char v47 = *((unsigned char *)&v270 + v6);
    do
    {
      *((unsigned char *)v269 + 8 * (((_BYTE)v6 + (v46 >> 3)) & 0x1F) + v46) = v47 + 4 * v46;
      ++v46;
    }
    while (v46 != 8);
    ++v6;
  }
  while (v6 != 4);
  _ZF = v14 == v12;
  uint64_t v49 = v227;
  uint64_t v50 = v226;
  if (!_ZF)
  {
    unint64_t v51 = 0;
    unint64_t v224 = v15 - v13;
    float v52 = (float)v29;
    float v253 = (float)v30;
    float v53 = (float)v31;
    float v266 = (float)v32;
    uint64_t v54 = v18 + 16548;
    uint64_t v55 = v18 + 164;
    float v56 = (float)v33;
    v34.i32[1] = v39;
    __asm { FMOV            V0.2S, #0.25 }
    *(float32x2_t *)v45.f32 = vmul_f32(v34, _D0);
    v38.i32[1] = v40;
    *(float32x2_t *)a5.f32 = vmul_f32(v38, _D0);
    v37.i32[1] = v42;
    *(float32x2_t *)a6.f32 = vmul_f32(v37, _D0);
    _D0.f32[0] = v265;
    __asm { FCVT            H0, S0 }
    short float v249 = *(short float *)_D0.i16;
    float16x8_t v250 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v45), 0);
    _D0.f32[0] = v264;
    __asm { FCVT            H0, S0 }
    short float v247 = *(short float *)_D0.i16;
    float16x8_t v248 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    *(float16x4_t *)&_Q0 = vcvt_f16_f32(a6);
    *((void *)&_Q0 + 1) = _Q0;
    int32x4_t v62 = vdupq_lane_s32(*(int32x2_t *)&_Q0, 0);
    *(float *)&_Q0 = v263;
    __asm { FCVT            H0, S0 }
    short float v245 = *(short float *)&_Q0;
    float16x8_t v246 = (float16x8_t)v62;
    *(float *)&_Q0 = v262;
    __asm { FCVT            H0, S0 }
    short float v244 = *(short float *)&_Q0;
    *(float *)&_Q0 = v259;
    __asm { FCVT            H0, S0 }
    short float v243 = *(short float *)&_Q0;
    *(float *)&_Q0 = v258;
    __asm { FCVT            H0, S0 }
    short float v242 = *(short float *)&_Q0;
    *(float *)&_Q0 = v261;
    __asm { FCVT            H0, S0 }
    short float v241 = *(short float *)&_Q0;
    *(float *)&_Q0 = v260;
    __asm { FCVT            H0, S0 }
    short float v240 = *(short float *)&_Q0;
    *(float *)&_Q0 = v257;
    __asm { FCVT            H0, S0 }
    short float v239 = *(short float *)&_Q0;
    *(float *)&_Q0 = v256;
    __asm { FCVT            H0, S0 }
    long long v268 = _Q0;
    *(float *)&_Q0 = v255;
    __asm { FCVT            H0, S0 }
    short float v267 = *(short float *)&_Q0;
    *(short float *)&_Q0 = (short float)v29;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_Q0, 0);
    *(short float *)&_Q0 = (short float)v30;
    int16x8_t v64 = vdupq_lane_s16(*(int16x4_t *)&_Q0, 0);
    *(short float *)&_Q0 = (short float)v31;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)&_Q0, 0);
    float16x8_t v237 = (float16x8_t)_Q0;
    float16x8_t v238 = (float16x8_t)v64;
    *(short float *)_Q0.i16 = (short float)v32;
    int16x8_t v66 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v33;
    float16x8_t v235 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v236 = (float16x8_t)v66;
    *(float *)_Q0.i32 = v254;
    __asm { FCVT            H0, S0 }
    short float v234 = *(short float *)_Q0.i16;
    if (v28) {
      float32x2_t v67 = (int8x8_t *)(v44 + v16);
    }
    else {
      float32x2_t v67 = 0;
    }
    float16x8_t v68 = (unsigned char *)(v26 + v43 + v16);
    double result = (int8x8_t *)((char *)result + v227 * v35 + v16);
    uint64_t v69 = v23 + v36 + 16 * v8;
    float v251 = a5.f32[0];
    float v252 = v45.f32[0];
    float v232 = a5.f32[1];
    float v233 = v45.f32[1];
    unint64_t v70 = a6.i64[0];
    v71.i64[0] = 0x9000900090009000;
    v71.i64[1] = 0x9000900090009000;
    do
    {
      float v72 = (const float *)(v69 + v22);
      float32x2_t v73 = (int8x8_t *)((char *)result + v49);
      int v74 = (int8x8_t *)((char *)v67 + v50);
      v231 = (char *)v67 + v50;
      v229 = v73;
      if ((int)v7 < 8)
      {
        unint64_t v150 = 0;
        float16x8_t v76 = v72;
        float v149 = v68;
      }
      else
      {
        uint64_t v75 = 0;
        float16x8_t v76 = v72;
        do
        {
          uint64_t v77 = (const float *)v69;
          float32x4x4_t v272 = vld4q_f32(v77);
          v77 += 16;
          float32x4x4_t v271 = vld4q_f32(v77);
          uint64_t v78 = v76;
          float32x4x4_t v274 = vld4q_f32(v78);
          v78 += 16;
          float32x4x4_t v273 = vld4q_f32(v78);
          if (v67)
          {
            float16x8_t v79 = (float16x8_t)vdupq_n_s16(0x5BF8u);
            int8x8_t v80 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v272.val[3]), v271.val[3]), v79)));
            int8x8_t v81 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v274.val[3]), v273.val[3]), v79)));
          }
          else
          {
            int8x8_t v80 = 0;
            int8x8_t v81 = 0;
          }
          float16x8_t v82 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v272.val[0]), v271.val[0]);
          float16x8_t v83 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v272.val[1]), v271.val[1]);
          float16x8_t v84 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v272.val[2]), v271.val[2]);
          v85.i64[0] = 0x7000700070007000;
          v85.i64[1] = 0x7000700070007000;
          float16x8_t v86 = vmulq_f16(v82, v85);
          float16x8_t v87 = vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v274.val[0]), v273.val[0]), v85);
          float16x8_t v88 = vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v274.val[2]), v273.val[2]), v85);
          uint16x8_t v89 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v86, (float16x8_t)0), v71));
          uint32x4_t v90 = vmovl_high_u16(v89);
          uint32x4_t v91 = vmovl_u16(*(uint16x4_t *)v89.i8);
          v92.i16[0] = *(_WORD *)(v55 + 2 * v91.u32[0]);
          v92.i16[1] = *(_WORD *)(v55 + 2 * v91.u32[1]);
          v92.i16[2] = *(_WORD *)(v55 + 2 * v91.u32[2]);
          v92.i16[3] = *(_WORD *)(v55 + 2 * v91.u32[3]);
          v92.i16[4] = *(_WORD *)(v55 + 2 * v90.u32[0]);
          v92.i16[5] = *(_WORD *)(v55 + 2 * v90.u32[1]);
          v92.i16[6] = *(_WORD *)(v55 + 2 * v90.u32[2]);
          v92.i16[7] = *(_WORD *)(v55 + 2 * v90.u32[3]);
          uint16x8_t v93 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v83, v85), (float16x8_t)0), v71));
          uint32x4_t v94 = vmovl_high_u16(v93);
          uint32x4_t v95 = vmovl_u16(*(uint16x4_t *)v93.i8);
          v96.i16[0] = *(_WORD *)(v55 + 2 * v95.u32[0]);
          v96.i16[1] = *(_WORD *)(v55 + 2 * v95.u32[1]);
          v96.i16[2] = *(_WORD *)(v55 + 2 * v95.u32[2]);
          v96.i16[3] = *(_WORD *)(v55 + 2 * v95.u32[3]);
          v96.i16[4] = *(_WORD *)(v55 + 2 * v94.u32[0]);
          v96.i16[5] = *(_WORD *)(v55 + 2 * v94.u32[1]);
          v96.i16[6] = *(_WORD *)(v55 + 2 * v94.u32[2]);
          v96.i16[7] = *(_WORD *)(v55 + 2 * v94.u32[3]);
          uint16x8_t v97 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v84, v85), (float16x8_t)0), v71));
          uint32x4_t v98 = vmovl_high_u16(v97);
          uint32x4_t v99 = vmovl_u16(*(uint16x4_t *)v97.i8);
          v100.i16[0] = *(_WORD *)(v55 + 2 * v99.u32[0]);
          v100.i16[1] = *(_WORD *)(v55 + 2 * v99.u32[1]);
          v100.i16[2] = *(_WORD *)(v55 + 2 * v99.u32[2]);
          v100.i16[3] = *(_WORD *)(v55 + 2 * v99.u32[3]);
          v100.i16[4] = *(_WORD *)(v55 + 2 * v98.u32[0]);
          v100.i16[5] = *(_WORD *)(v55 + 2 * v98.u32[1]);
          v100.i16[6] = *(_WORD *)(v55 + 2 * v98.u32[2]);
          v100.i16[7] = *(_WORD *)(v55 + 2 * v98.u32[3]);
          uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v87, (float16x8_t)0), v71));
          uint32x4_t v102 = vmovl_high_u16(v101);
          uint32x4_t v103 = vmovl_u16(*(uint16x4_t *)v101.i8);
          v87.i16[0] = *(_WORD *)(v55 + 2 * v103.u32[0]);
          v87.i16[1] = *(_WORD *)(v55 + 2 * v103.u32[1]);
          v87.i16[2] = *(_WORD *)(v55 + 2 * v103.u32[2]);
          v87.i16[3] = *(_WORD *)(v55 + 2 * v103.u32[3]);
          v87.i16[4] = *(_WORD *)(v55 + 2 * v102.u32[0]);
          v87.i16[5] = *(_WORD *)(v55 + 2 * v102.u32[1]);
          v87.i16[6] = *(_WORD *)(v55 + 2 * v102.u32[2]);
          v87.i16[7] = *(_WORD *)(v55 + 2 * v102.u32[3]);
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v274.val[1]), v273.val[1]), v85), (float16x8_t)0), v71));
          uint32x4_t v105 = vmovl_high_u16(v104);
          uint32x4_t v106 = vmovl_u16(*(uint16x4_t *)v104.i8);
          v107.i16[0] = *(_WORD *)(v55 + 2 * v106.u32[0]);
          v107.i16[1] = *(_WORD *)(v55 + 2 * v106.u32[1]);
          v107.i16[2] = *(_WORD *)(v55 + 2 * v106.u32[2]);
          v107.i16[3] = *(_WORD *)(v55 + 2 * v106.u32[3]);
          v107.i16[4] = *(_WORD *)(v55 + 2 * v105.u32[0]);
          v107.i16[5] = *(_WORD *)(v55 + 2 * v105.u32[1]);
          v107.i16[6] = *(_WORD *)(v55 + 2 * v105.u32[2]);
          v107.i16[7] = *(_WORD *)(v55 + 2 * v105.u32[3]);
          uint16x8_t v108 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v88, (float16x8_t)0), v71));
          uint32x4_t v109 = vmovl_high_u16(v108);
          uint32x4_t v110 = vmovl_u16(*(uint16x4_t *)v108.i8);
          v111.i16[0] = *(_WORD *)(v55 + 2 * v110.u32[0]);
          v111.i16[1] = *(_WORD *)(v55 + 2 * v110.u32[1]);
          v111.i16[2] = *(_WORD *)(v55 + 2 * v110.u32[2]);
          v111.i16[3] = *(_WORD *)(v55 + 2 * v110.u32[3]);
          v111.i16[4] = *(_WORD *)(v55 + 2 * v109.u32[0]);
          v111.i16[5] = *(_WORD *)(v55 + 2 * v109.u32[1]);
          v111.i16[6] = *(_WORD *)(v55 + 2 * v109.u32[2]);
          v111.i16[7] = *(_WORD *)(v55 + 2 * v109.u32[3]);
          float16x8_t v112 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v92, v244), v96, v243), v100, v242);
          float16x8_t v113 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v92, v241), v96, v240), v100, v239);
          float16x8_t v114 = vmlaq_n_f16(vmulq_n_f16(v100, v234), v96, v267);
          v96.i16[7] = HIWORD(v268);
          float16x8_t v115 = vmlaq_n_f16(v114, v92, *(short float *)&v268);
          float16x8_t v116 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v87, v244), v107, v243), v111, v242);
          float16x8_t v117 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v87, v241), v107, v240), v111, v239);
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v112, (float16x8_t)0), v71));
          uint32x4_t v119 = vmovl_high_u16(v118);
          uint32x4_t v120 = vmovl_u16(*(uint16x4_t *)v118.i8);
          v96.i16[0] = *(_WORD *)(v54 + 2 * v120.u32[0]);
          v96.i16[1] = *(_WORD *)(v54 + 2 * v120.u32[1]);
          v96.i16[2] = *(_WORD *)(v54 + 2 * v120.u32[2]);
          v96.i16[3] = *(_WORD *)(v54 + 2 * v120.u32[3]);
          v96.i16[4] = *(_WORD *)(v54 + 2 * v119.u32[0]);
          v96.i16[5] = *(_WORD *)(v54 + 2 * v119.u32[1]);
          v96.i16[6] = *(_WORD *)(v54 + 2 * v119.u32[2]);
          float v121 = (__int16 *)(v54 + 2 * v119.u32[3]);
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, (float16x8_t)0), v71));
          uint32x4_t v123 = vmovl_high_u16(v122);
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v122.i8);
          v113.i16[0] = *(_WORD *)(v54 + 2 * v124.u32[0]);
          v113.i16[1] = *(_WORD *)(v54 + 2 * v124.u32[1]);
          v113.i16[2] = *(_WORD *)(v54 + 2 * v124.u32[2]);
          v113.i16[3] = *(_WORD *)(v54 + 2 * v124.u32[3]);
          v113.i16[4] = *(_WORD *)(v54 + 2 * v123.u32[0]);
          v113.i16[5] = *(_WORD *)(v54 + 2 * v123.u32[1]);
          v113.i16[6] = *(_WORD *)(v54 + 2 * v123.u32[2]);
          float16x8_t v125 = (float16x8_t)vuzp1q_s16((int16x8_t)v96, (int16x8_t)v113);
          v96.i16[7] = *v121;
          v113.i16[7] = *(_WORD *)(v54 + 2 * v123.u32[3]);
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v71));
          uint32x4_t v127 = vmovl_high_u16(v126);
          uint32x4_t v128 = vmovl_u16(*(uint16x4_t *)v126.i8);
          v115.i16[0] = *(_WORD *)(v54 + 2 * v128.u32[0]);
          v115.i16[1] = *(_WORD *)(v54 + 2 * v128.u32[1]);
          v115.i16[2] = *(_WORD *)(v54 + 2 * v128.u32[2]);
          v115.i16[3] = *(_WORD *)(v54 + 2 * v128.u32[3]);
          v115.i16[4] = *(_WORD *)(v54 + 2 * v127.u32[0]);
          v115.i16[5] = *(_WORD *)(v54 + 2 * v127.u32[1]);
          v115.i16[6] = *(_WORD *)(v54 + 2 * v127.u32[2]);
          float16x8_t v129 = vmlaq_n_f16(vmulq_n_f16(v111, v234), v107, v267);
          float16x8_t v130 = v115;
          v130.i16[7] = *(_WORD *)(v54 + 2 * v127.u32[3]);
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)0), v71));
          float16x8_t v132 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v131.i8);
          uint32x4_t v133 = vmovl_high_u16(v131);
          *(void *)&long long v134 = v133.u32[2];
          *((void *)&v134 + 1) = v133.u32[3];
          long long v135 = v134;
          *((void *)&v134 + 1) = v132.u32[3];
          v132.i16[7] = (unint64_t)v132.u32[3] >> 48;
          v132.i16[0] = *(_WORD *)(v54 + 2 * v132.u32[0]);
          v132.i16[1] = *(_WORD *)(v54 + 2 * v132.u32[1]);
          v132.i16[2] = *(_WORD *)(v54 + 2 * v132.u32[2]);
          v132.i16[3] = *(_WORD *)(v54 + 2 * *((void *)&v134 + 1));
          v132.i16[4] = *(_WORD *)(v54 + 2 * v133.u32[0]);
          v132.i16[5] = *(_WORD *)(v54 + 2 * v133.u32[1]);
          v132.i16[6] = *(_WORD *)(v54 + 2 * v135);
          uint16x8_t v136 = (__int16 *)(v54 + 2 * *((void *)&v135 + 1));
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, (float16x8_t)0), v71));
          float16x8_t v138 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v137.i8);
          uint32x4_t v139 = vmovl_high_u16(v137);
          *(void *)&long long v134 = v139.u32[2];
          *((void *)&v134 + 1) = v139.u32[3];
          long long v140 = v134;
          *((void *)&v134 + 1) = v138.u32[3];
          v138.i16[7] = (unint64_t)v138.u32[3] >> 48;
          v138.i16[0] = *(_WORD *)(v54 + 2 * v138.u32[0]);
          v138.i16[1] = *(_WORD *)(v54 + 2 * v138.u32[1]);
          v138.i16[2] = *(_WORD *)(v54 + 2 * v138.u32[2]);
          v138.i16[3] = *(_WORD *)(v54 + 2 * *((void *)&v134 + 1));
          v138.i16[4] = *(_WORD *)(v54 + 2 * v139.u32[0]);
          v138.i16[5] = *(_WORD *)(v54 + 2 * v139.u32[1]);
          v138.i16[6] = *(_WORD *)(v54 + 2 * v140);
          float16x8_t v141 = (float16x8_t)vuzp1q_s16((int16x8_t)v132, (int16x8_t)v138);
          v132.i16[7] = *v136;
          v138.i16[7] = *(_WORD *)(v54 + 2 * *((void *)&v140 + 1));
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v129, v87, *(short float *)&v268), (float16x8_t)0), v71));
          uint32x4_t v143 = vmovl_high_u16(v142);
          int16x8_t v144 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v142.i8);
          *(void *)&long long v134 = v143.u32[2];
          *((void *)&v134 + 1) = v143.u32[3];
          long long v145 = v134;
          *(void *)&long long v134 = v143.u32[0];
          *((void *)&v134 + 1) = v143.u32[1];
          long long v146 = v134;
          *((void *)&v134 + 1) = v144.u32[3];
          v144.i16[7] = (unint64_t)v144.u32[3] >> 48;
          v144.i16[0] = *(_WORD *)(v54 + 2 * v144.u32[0]);
          v144.i16[1] = *(_WORD *)(v54 + 2 * v144.u32[1]);
          v144.i16[2] = *(_WORD *)(v54 + 2 * v144.u32[2]);
          v144.i16[3] = *(_WORD *)(v54 + 2 * *((void *)&v134 + 1));
          v144.i16[4] = *(_WORD *)(v54 + 2 * v146);
          v144.i16[5] = *(_WORD *)(v54 + 2 * *((void *)&v146 + 1));
          v144.i16[6] = *(_WORD *)(v54 + 2 * v145);
          float16x8_t v147 = (float16x8_t)v144;
          v147.i16[7] = *(_WORD *)(v54 + 2 * *((void *)&v145 + 1));
          *result++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v63, v96, v249), v113, v247), v130, v245), v63), v237)));
          *v73++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v63, v132, v249), v138, v247), v147, v245), v63), v237)));
          int16x8_t v148 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v125, (float16x8_t)vuzp2q_s16((int16x8_t)v96, (int16x8_t)v113)), v141), (float16x8_t)vuzp2q_s16((int16x8_t)v132, (int16x8_t)v138));
          *(int8x8_t *)&v68[v75] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v238, v250, (float16x8_t)vzip1q_s16(v148, v148)), v248, (float16x8_t)vzip2q_s16(v148, v148)), v246, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v115, (int16x8_t)v115), (float16x8_t)vtrn2q_s16((int16x8_t)v130,
                                                                                     (int16x8_t)v130)),
                                                                    (float16x8_t)vtrn1q_s16(v144, v144)),
                                                                  (float16x8_t)vtrn2q_s16((int16x8_t)v147, (int16x8_t)v147))), v236), v235)));
          if (v67)
          {
            *v67++ = v80;
            *v74++ = v81;
          }
          v69 += 128;
          v76 += 32;
          v75 += 8;
        }
        while ((int)v75 < (int)v7 - 7);
        float v149 = &v68[v75];
        unint64_t v150 = v7 & 0xFFFFFFF8;
      }
      v230 = v72;
      if (v7 > v150)
      {
        uint64_t v151 = 0;
        uint64_t v152 = v69 + 16;
        float v153 = v76 + 4;
        do
        {
          if (v67)
          {
            uint64_t v154 = v151 + 4 * HIBYTE(v270);
            float v155 = *(const float *)((char *)v153 + v154);
            float v156 = *(const float *)((char *)v153 + v154 - 16);
            float v157 = (float *)(v152 + v154);
            __int8 v158 = llroundf(*(v157 - 4) * 255.0);
            __int8 v159 = llroundf(*v157 * 255.0);
            __int8 v160 = llroundf(v156 * 255.0);
            __int8 v161 = llroundf(v155 * 255.0);
          }
          else
          {
            __int8 v160 = 0;
            __int8 v158 = 0;
            __int8 v159 = 0;
            __int8 v161 = 0;
          }
          uint64_t v162 = v151 + 4 * v270;
          uint64_t v163 = (__int32 *)(v152 + v162);
          v164.i32[0] = *(_DWORD *)(v152 + v162 - 16);
          uint64_t v165 = v151 + 4 * BYTE1(v270);
          uint64_t v166 = v151 + 4 * BYTE2(v270);
          v167.i32[0] = *(_DWORD *)(v152 + v166 - 16);
          _D2.i32[0] = *(_DWORD *)(v152 + v165);
          float v169 = (__int32 *)((char *)v153 + v162);
          v170.i32[0] = *(v169 - 4);
          v164.i32[1] = *(_DWORD *)(v152 + v165 - 16);
          float32x2_t v171 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v164, v171), 0), v171)));
          _D0.i16[0] = *(_WORD *)(v55 + 2 * _D0.u32[0]);
          _D4.f32[0] = *(const float *)((char *)v153 + v166 - 16);
          v174.f32[0] = *(const float *)((char *)v153 + v165);
          __asm { FCVT            S21, H0 }
          _D0.i16[0] = *(_WORD *)(v55 + 2 * _D0.u32[1]);
          v167.i32[1] = *v163;
          __asm { FCVT            S26, H0 }
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v167, v171), 0), v171)));
          _D0.i16[0] = *(_WORD *)(v55 + 2 * _D0.u32[0]);
          __asm { FCVT            S9, H0 }
          _D0.i16[0] = *(_WORD *)(v55 + 2 * _D0.u32[1]);
          __asm { FCVT            S23, H0 }
          _D2.i32[1] = *(_DWORD *)(v152 + v166);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D2, v171), 0), v171)));
          _D0.i16[0] = *(_WORD *)(v55 + 2 * _D0.u32[0]);
          __asm { FCVT            S11, H0 }
          _D0.i16[0] = *(_WORD *)(v55 + 2 * _D0.u32[1]);
          v170.f32[1] = *(const float *)((char *)v153 + v165 - 16);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v170, v171), 0), v171)));
          _D1.i16[0] = *(_WORD *)(v55 + 2 * _D1.u32[0]);
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          _D2.i16[0] = *(_WORD *)(v55 + 2 * _D1.u32[1]);
          _D4.i32[1] = *v169;
          __asm { FCVT            S2, H2 }
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D4, v171), 0), v171)));
          _D3.i16[0] = *(_WORD *)(v55 + 2 * _D3.u32[0]);
          __asm { FCVT            S3, H3 }
          _D4.i16[0] = *(_WORD *)(v55 + 2 * _D3.u32[1]);
          __asm { FCVT            S4, H4 }
          v174.f32[1] = *(const float *)((char *)v153 + v166);
          _D5 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v174, v171), 0), v171)));
          _D5.i16[0] = *(_WORD *)(v55 + 2 * _D5.u32[0]);
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v55 + 2 * _D5.u32[1]);
          __asm { FCVT            S6, H6 }
          float v187 = (float)((float)(v259 * _S26) + (float)(_S21 * v262)) + (float)(_S9 * v258);
          v171.f32[0] = (float)((float)(v260 * _S26) + (float)(_S21 * v261)) + (float)(_S9 * v257);
          float v188 = (float)((float)(v255 * _S26) + (float)(_S21 * v256)) + (float)(_S9 * v254);
          v174.f32[0] = (float)((float)(v259 * _S11) + (float)(_S23 * v262)) + (float)(*(float *)_D0.i32 * v258);
          float v189 = (float)((float)(v260 * _S11) + (float)(_S23 * v261)) + (float)(*(float *)_D0.i32 * v257);
          *(float *)_D0.i32 = (float)((float)(v255 * _S11) + (float)(_S23 * v256)) + (float)(*(float *)_D0.i32 * v254);
          float v190 = (float)((float)(v259 * _D2.f32[0]) + (float)(*(float *)_D1.i32 * v262))
               + (float)(*(float *)_D3.i32 * v258);
          float v191 = (float)((float)(v260 * _D2.f32[0]) + (float)(*(float *)_D1.i32 * v261))
               + (float)(*(float *)_D3.i32 * v257);
          *(float *)_D1.i32 = (float)((float)(v255 * _D2.f32[0]) + (float)(*(float *)_D1.i32 * v256))
                            + (float)(*(float *)_D3.i32 * v254);
          _D2.f32[0] = (float)((float)(v259 * *(float *)_D5.i32) + (float)(_D4.f32[0] * v262)) + (float)(_S6 * v258);
          *(float *)_D3.i32 = (float)((float)(v260 * *(float *)_D5.i32) + (float)(_D4.f32[0] * v261))
                            + (float)(_S6 * v257);
          _D4.f32[0] = (float)((float)(v255 * *(float *)_D5.i32) + (float)(_D4.f32[0] * v256)) + (float)(_S6 * v254);
          _D5.i16[0] = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v187, 0.0), 8191.0)));
          __asm { FCVT            S26, H5 }
          _D5.i16[0] = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v171.f32[0], 0.0), 8191.0)));
          __asm { FCVT            S21, H5 }
          _D5.i16[0] = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v188, 0.0), 8191.0)));
          __asm { FCVT            S23, H5 }
          _D5.i16[0] = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v174.f32[0], 0.0), 8191.0)));
          __asm { FCVT            S8, H5 }
          _D5.i16[0] = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v189, 0.0), 8191.0)));
          _D0.i16[0] = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(*(float *)_D0.i32, 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H5
            FCVT            S9, H0
          }
          _D0.i16[0] = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v190, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _D5.i16[0] = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v191, 0.0), 8191.0)));
          __asm { FCVT            S11, H5 }
          _D1.i16[0] = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(*(float *)_D1.i32, 0.0), 8191.0)));
          __asm { FCVT            S12, H1 }
          _D1.i16[0] = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_D2.f32[0], 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _D2.i16[0] = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(*(float *)_D3.i32, 0.0), 8191.0)));
          _D3.i16[0] = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_D4.f32[0], 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S3, H3
          }
          float v204 = (float)((float)((float)(v264 * _S21) + (float)(v265 * _S26)) + (float)(v263 * _S23)) + v52;
          if (v204 < v52) {
            float v205 = v52;
          }
          else {
            float v205 = (float)((float)((float)(v264 * _S21) + (float)(v265 * _S26)) + (float)(v263 * _S23)) + v52;
          }
          BOOL v206 = v204 <= v53;
          float v207 = (float)((float)((float)(v264 * _S10) + (float)(v265 * _S8)) + (float)(v263 * _S9)) + v52;
          if (!v206) {
            float v205 = (float)v31;
          }
          __int8 v208 = llroundf(v205);
          if (v207 < v52) {
            float v209 = v52;
          }
          else {
            float v209 = (float)((float)((float)(v264 * _S10) + (float)(v265 * _S8)) + (float)(v263 * _S9)) + v52;
          }
          BOOL v206 = v207 <= v53;
          float v210 = (float)((float)((float)(v264 * _S11) + (float)(v265 * _S0)) + (float)(v263 * _S12)) + v52;
          if (!v206) {
            float v209 = (float)v31;
          }
          __int8 v211 = llroundf(v209);
          if (v210 < v52) {
            float v212 = v52;
          }
          else {
            float v212 = (float)((float)((float)(v264 * _S11) + (float)(v265 * _S0)) + (float)(v263 * _S12)) + v52;
          }
          BOOL v206 = v210 <= v53;
          float v213 = (float)((float)((float)(v264 * _S2) + (float)(v265 * _S1)) + (float)(v263 * _S3)) + v52;
          if (!v206) {
            float v212 = (float)v31;
          }
          __int8 v214 = llroundf(v212);
          if (v213 < v52) {
            float v215 = v52;
          }
          else {
            float v215 = (float)((float)((float)(v264 * _S2) + (float)(v265 * _S1)) + (float)(v263 * _S3)) + v52;
          }
          if (v213 <= v53) {
            float v216 = v215;
          }
          else {
            float v216 = (float)v31;
          }
          float v217 = (float)((float)(_S26 + _S8) + _S0) + _S1;
          float v218 = (float)((float)(_S21 + _S10) + _S11) + _S2;
          result->i8[0] = v208;
          result->i8[1] = v211;
          v73->i8[0] = v214;
          v73->i8[1] = llroundf(v216);
          float v219 = (float)((float)(_S23 + _S9) + _S12) + _S3;
          float v220 = (float)((float)(v253 + (float)(v217 * v252)) + (float)(v218 * v251)) + (float)(v219 * *(float *)&v70);
          float v221 = (float)v33;
          if (v220 <= v56)
          {
            float v221 = (float)((float)(v253 + (float)(v217 * v252)) + (float)(v218 * v251)) + (float)(v219 * *(float *)&v70);
            if (v220 < v266) {
              float v221 = (float)v32;
            }
          }
          float v222 = (float)((float)(v253 + (float)(v217 * v233)) + (float)(v218 * v232))
               + (float)(v219 * *((float *)&v70 + 1));
          *float v149 = llroundf(v221);
          float v223 = (float)v33;
          if (v222 <= v56)
          {
            float v223 = v222;
            if (v222 < v266) {
              float v223 = (float)v32;
            }
          }
          v149[1] = llroundf(v223);
          if (v67)
          {
            v67->i8[0] = v158;
            v67->i8[1] = v159;
            float32x2_t v67 = (int8x8_t *)((char *)v67 + 2);
            v74->i8[0] = v160;
            v74->i8[1] = v161;
            int v74 = (int8x8_t *)((char *)v74 + 2);
          }
          v150 += 2;
          v151 += 32;
          double result = (int8x8_t *)((char *)result + 2);
          float32x2_t v73 = (int8x8_t *)((char *)v73 + 2);
          v149 += 2;
        }
        while (v7 > v150);
      }
      uint64_t v49 = v227;
      uint64_t v22 = v228;
      uint64_t v69 = (uint64_t)v230 + v228;
      double result = (int8x8_t *)((char *)v229 + v227);
      uint64_t v50 = v226;
      v68 += v225;
      float32x2_t v67 = (int8x8_t *)&v231[v226];
      v51 += 2;
    }
    while (v224 > v51);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_420vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44) + 2 * v8;
    unint64_t v125 = 2 * v9 - 2 * v8;
    uint64_t v13 = *(void *)(result + 152);
    uint64_t v14 = *(uint64_t **)(result + 136);
    uint64_t v15 = **(void **)(result + 64);
    uint64_t v17 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v18 = v14[2];
    LOWORD(a3) = *(_WORD *)(v13 + 144);
    float v19 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v13 + 146);
    *(float *)&unsigned int v20 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v13 + 148);
    float v21 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v13 + 150);
    float v140 = (float)LODWORD(a4);
    float v141 = (float)LODWORD(a6);
    LOWORD(v20) = *(_WORD *)(v13 + 152);
    float v138 = *(float *)(v13 + 36);
    float v139 = (float)v20;
    float v136 = *(float *)(v13 + 44);
    float v137 = *(float *)(v13 + 40);
    float v134 = *(float *)(v13 + 52) * 0.25;
    float v135 = *(float *)(v13 + 48) * 0.25;
    float v132 = *(float *)(v13 + 60) * 0.25;
    float v133 = *(float *)(v13 + 56) * 0.25;
    float v130 = *(float *)(v13 + 72);
    float v131 = *(float *)(v13 + 64) * 0.25;
    float v129 = *(float *)(v13 + 68) * 0.25;
    float v22 = *(float *)(v13 + 76);
    float v23 = *(float *)(v13 + 80);
    float v24 = *(float *)(v13 + 84);
    float v25 = *(float *)(v13 + 88);
    float v26 = *(float *)(v13 + 92);
    float v27 = *(float *)(v13 + 96);
    float v28 = *(float *)(v13 + 100);
    float v29 = *(float *)(v13 + 104);
    uint64_t v30 = v13 + 164;
    uint64_t v31 = v13 + 16548;
    uint64_t v32 = *(void *)(result + 112);
    uint64_t v33 = *(void **)(result + 128);
    uint64_t v34 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v7);
    uint64_t v35 = **(void **)(result + 56) + v15 * v12 + 16 * *(void *)(result + 36);
    uint64_t v36 = (unsigned char *)(*v33 + v34 * v17 + v32);
    uint64_t v37 = v33[2];
    if (v37) {
      uint64_t v38 = (unsigned char *)(v37 + v34 * v18 + v32);
    }
    else {
      uint64_t v38 = 0;
    }
    double result = *(unsigned __int8 *)(v13 + 157);
    uint64_t v39 = *(unsigned __int8 *)(v13 + 156);
    uint64_t v122 = v16;
    uint64_t v40 = v33[1] + v34 / 2 * v16;
    float32x2_t v41 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v42 = *(unsigned __int8 *)(v13 + 155);
    uint64_t v43 = *(unsigned __int8 *)(v13 + 154);
    uint64_t v44 = v40 + v32;
    uint64_t v123 = v17;
    uint64_t v124 = v15;
    uint64_t v121 = v18;
    do
    {
      uint32x4_t v128 = &v38[v18];
      uint32x4_t v127 = &v36[v17];
      uint64_t v126 = v35 + v15;
      if (v11)
      {
        unint64_t v45 = 0;
        char v47 = &v36[v17];
        unsigned int v46 = &v38[v18];
        uint64_t v48 = v35 + v15;
        do
        {
          uint64_t v49 = v35 + 16;
          uint64_t v50 = v48 + 16;
          if (v38)
          {
            char v51 = llroundf(*(float *)(v35 + 4 * result) * 255.0);
            char v52 = llroundf(*(float *)(v49 + 4 * result) * 255.0);
            char v53 = llroundf(*(float *)(v48 + 4 * result) * 255.0);
            char v54 = llroundf(*(float *)(v50 + 4 * result) * 255.0);
          }
          else
          {
            char v53 = 0;
            char v51 = 0;
            char v52 = 0;
            char v54 = 0;
          }
          v55.i32[0] = *(_DWORD *)(v35 + 4 * v43);
          v55.i32[1] = *(_DWORD *)(v35 + 4 * v42);
          _D16 = (float32x2_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v55, v41), 0), v41)));
          _D16.i16[0] = *(_WORD *)(v30 + 2 * _D16.u32[0]);
          _H17 = *(_WORD *)(v30 + 2 * _D16.u32[1]);
          __asm { FCVT            S11, H16 }
          _D16.i32[0] = *(_DWORD *)(v35 + 4 * v39);
          _D16.i32[1] = *(_DWORD *)(v49 + 4 * v43);
          _D16 = (float32x2_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D16, v41), 0), v41)));
          __asm { FCVT            S12, H17 }
          _D16.i16[0] = *(_WORD *)(v30 + 2 * _D16.u32[0]);
          _H17 = *(_WORD *)(v30 + 2 * _D16.u32[1]);
          __asm { FCVT            S13, H16 }
          _D16.i32[0] = *(_DWORD *)(v49 + 4 * v42);
          _D16.i32[1] = *(_DWORD *)(v49 + 4 * v39);
          _D18 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D16, v41), 0), v41)));
          __asm { FCVT            S16, H17 }
          _H17 = *(_WORD *)(v30 + 2 * _D18.u32[0]);
          _D18.i16[0] = *(_WORD *)(v30 + 2 * _D18.u32[1]);
          __asm { FCVT            S14, H17 }
          v70.i32[0] = *(_DWORD *)(v48 + 4 * v43);
          v70.i32[1] = *(_DWORD *)(v48 + 4 * v42);
          _D17 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v70, v41), 0), v41)));
          __asm { FCVT            S18, H18 }
          _D17.i16[0] = *(_WORD *)(v30 + 2 * _D17.u32[0]);
          _H15 = *(_WORD *)(v30 + 2 * _D17.u32[1]);
          __asm { FCVT            S17, H17 }
          v73.i32[0] = *(_DWORD *)(v48 + 4 * v39);
          v73.i32[1] = *(_DWORD *)(v50 + 4 * v43);
          _D19 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v73, v41), 0), v41)));
          __asm { FCVT            S15, H15 }
          _D19.i16[0] = *(_WORD *)(v30 + 2 * _D19.u32[0]);
          _H20 = *(_WORD *)(v30 + 2 * _D19.u32[1]);
          __asm { FCVT            S19, H19 }
          v77.i32[0] = *(_DWORD *)(v50 + 4 * v42);
          v77.i32[1] = *(_DWORD *)(v50 + 4 * v39);
          _D22 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v77, v41), 0), v41)));
          __asm { FCVT            S20, H20 }
          _D22.i16[0] = *(_WORD *)(v30 + 2 * _D22.u32[0]);
          _H3 = *(_WORD *)(v30 + 2 * _D22.u32[1]);
          __asm
          {
            FCVT            S22, H22
            FCVT            S3, H3
          }
          _S1 = (float)((float)(v22 * _S12) + (float)(_S11 * v130)) + (float)(_S13 * v23);
          float v83 = (float)((float)(v25 * _S12) + (float)(_S11 * v24)) + (float)(_S13 * v26);
          float v84 = (float)((float)(v28 * _S12) + (float)(_S11 * v27)) + (float)(_S13 * v29);
          _S5 = (float)((float)(v22 * _S14) + (float)(_D16.f32[0] * v130)) + (float)(*(float *)_D18.i32 * v23);
          float v86 = (float)((float)(v25 * _S14) + (float)(_D16.f32[0] * v24)) + (float)(*(float *)_D18.i32 * v26);
          _D16.f32[0] = (float)((float)(v28 * _S14) + (float)(_D16.f32[0] * v27)) + (float)(*(float *)_D18.i32 * v29);
          *(float *)_D18.i32 = (float)((float)(v22 * _S15) + (float)(*(float *)_D17.i32 * v130))
                             + (float)(*(float *)_D19.i32 * v23);
          float v87 = (float)((float)(v25 * _S15) + (float)(*(float *)_D17.i32 * v24)) + (float)(*(float *)_D19.i32 * v26);
          *(float *)_D19.i32 = (float)((float)(v28 * _S15) + (float)(*(float *)_D17.i32 * v27))
                             + (float)(*(float *)_D19.i32 * v29);
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S13, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S11, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S12, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S14, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_D16.f32[0], 0.0), 8191.0)));
          __asm
          {
            FCVT            S16, H1
            FCVT            S15, H5
          }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(*(float *)_D18.i32, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S5) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S17, H5 }
          LOWORD(_S5) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(*(float *)_D19.i32, 0.0), 8191.0)));
          __asm { FCVT            S18, H5 }
          _H4 = *(_WORD *)(v31
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v22 * *(float *)_D22.i32) + (float)(_S20 * v130)) + (float)(_S3 * v23), 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v31
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v25 * *(float *)_D22.i32) + (float)(_S20 * v24))+ (float)(_S3 * v26), 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v31
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v28 * *(float *)_D22.i32) + (float)(_S20 * v27))+ (float)(_S3 * v29), 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H5
            FCVT            S3, H3
          }
          float v101 = (float)((float)((float)(v137 * _S11) + (float)(v138 * _S13)) + (float)(v136 * _S12)) + v19;
          if (v101 < v19) {
            float v102 = v19;
          }
          else {
            float v102 = (float)((float)((float)(v137 * _S11) + (float)(v138 * _S13)) + (float)(v136 * _S12)) + v19;
          }
          BOOL v103 = v101 <= v21;
          float v104 = (float)((float)((float)(v137 * _S16) + (float)(v138 * _S14)) + (float)(v136 * _S15)) + v19;
          if (!v103) {
            float v102 = v21;
          }
          char v105 = llroundf(v102);
          if (v104 < v19) {
            float v106 = v19;
          }
          else {
            float v106 = (float)((float)((float)(v137 * _S16) + (float)(v138 * _S14)) + (float)(v136 * _S15)) + v19;
          }
          BOOL v103 = v104 <= v21;
          float v107 = (float)((float)((float)(v137 * _S17) + (float)(v138 * _S1)) + (float)(v136 * _S18)) + v19;
          if (!v103) {
            float v106 = v21;
          }
          char v108 = llroundf(v106);
          if (v107 < v19) {
            float v109 = v19;
          }
          else {
            float v109 = (float)((float)((float)(v137 * _S17) + (float)(v138 * _S1)) + (float)(v136 * _S18)) + v19;
          }
          BOOL v103 = v107 <= v21;
          float v110 = (float)((float)((float)(v137 * _S5) + (float)(v138 * _S4)) + (float)(v136 * _S3)) + v19;
          if (!v103) {
            float v109 = v21;
          }
          char v111 = llroundf(v109);
          if (v110 < v19) {
            float v112 = v19;
          }
          else {
            float v112 = (float)((float)((float)(v137 * _S5) + (float)(v138 * _S4)) + (float)(v136 * _S3)) + v19;
          }
          if (v110 <= v21) {
            float v113 = v112;
          }
          else {
            float v113 = v21;
          }
          float v114 = (float)((float)(_S13 + _S14) + _S1) + _S4;
          float v115 = (float)((float)(_S11 + _S16) + _S17) + _S5;
          *uint64_t v36 = v105;
          v36[1] = v108;
          *char v47 = v111;
          v47[1] = llroundf(v113);
          float v116 = (float)((float)(_S12 + _S15) + _S18) + _S3;
          float v117 = (float)((float)(v140 + (float)(v114 * v135)) + (float)(v115 * v134)) + (float)(v116 * v133);
          float v118 = v139;
          if (v117 <= v139)
          {
            float v118 = (float)((float)(v140 + (float)(v114 * v135)) + (float)(v115 * v134)) + (float)(v116 * v133);
            if (v117 < v141) {
              float v118 = v141;
            }
          }
          float v119 = (float)((float)(v140 + (float)(v114 * v132)) + (float)(v115 * v131)) + (float)(v116 * v129);
          *(unsigned char *)(v44 + v45) = llroundf(v118);
          float v120 = v139;
          if (v119 <= v139)
          {
            float v120 = v119;
            if (v119 < v141) {
              float v120 = v141;
            }
          }
          *(unsigned char *)(v44 + v45 + 1) = llroundf(v120);
          if (v38)
          {
            *uint64_t v38 = v51;
            v38[1] = v52;
            v38 += 2;
            *unsigned int v46 = v53;
            v46[1] = v54;
            v46 += 2;
          }
          v35 += 32;
          v48 += 32;
          v36 += 2;
          v47 += 2;
          v45 += 2;
        }
        while (v11 > v45);
      }
      uint64_t v17 = v123;
      uint64_t v15 = v124;
      uint64_t v35 = v126 + v124;
      uint64_t v36 = &v127[v123];
      uint64_t v18 = v121;
      v44 += v122;
      uint64_t v38 = &v128[v121];
      v10 += 2;
    }
    while (v125 > v10);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_420vf_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGfA_rgb_420vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float32x4_t a10)
{
  uint64_t v12 = 0;
  unint64_t v13 = *(void *)(a1 + 20);
  uint64_t v159 = *(void *)(a1 + 36);
  uint64_t v14 = *(void *)(a1 + 44);
  uint64_t v15 = *(void *)(a1 + 28);
  unint64_t v16 = 2 * *a1;
  uint64_t v17 = 2 * (v15 * a2 / v16);
  uint64_t v18 = v14 + v17;
  uint64_t v19 = 2 * ((v15 + v15 * a2) / v16);
  uint64_t v20 = v14 + v19;
  uint64_t v21 = *((void *)a1 + 14);
  unint64_t v22 = *((void *)a1 + 13) * a2;
  uint64_t v23 = *((void *)a1 + 19);
  uint64_t v24 = *((void *)a1 + 15);
  float v25 = (uint64_t *)*((void *)a1 + 16);
  float v26 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v27 = **((void **)a1 + 8);
  uint64_t v28 = **((void **)a1 + 7);
  uint64_t v146 = *v26;
  uint64_t v29 = v26[1];
  uint64_t v30 = v26[2];
  uint64_t v157 = *v25;
  uint64_t v32 = v25[1];
  uint64_t result = v25[2];
  unsigned int v33 = *(_DWORD *)(v23 + 136);
  int v161 = *(_DWORD *)(v23 + 154);
  uint64_t v34 = v24 + 2 * (v22 / v16);
  uint64_t v147 = v27;
  unsigned int v35 = *(unsigned __int16 *)(v23 + 144);
  unsigned int v36 = *(unsigned __int16 *)(v23 + 146);
  unsigned int v37 = *(unsigned __int16 *)(v23 + 148);
  unsigned int v38 = *(unsigned __int16 *)(v23 + 150);
  if (v34 >= 0) {
    uint64_t v39 = v34;
  }
  else {
    uint64_t v39 = v34 + 1;
  }
  unsigned int v40 = *(unsigned __int16 *)(v23 + 152);
  uint64_t v145 = v29;
  uint64_t v41 = v29 * (v39 >> 1);
  _S0 = *(float *)(v23 + 36);
  _S1 = *(float *)(v23 + 40);
  _S2 = *(float *)(v23 + 44);
  v45.i32[0] = *(_DWORD *)(v23 + 48);
  v10.i32[0] = *(_DWORD *)(v23 + 52);
  v11.i32[0] = *(_DWORD *)(v23 + 56);
  __int32 v47 = *(_DWORD *)(v23 + 60);
  __int32 v46 = *(_DWORD *)(v23 + 64);
  __int32 v48 = *(_DWORD *)(v23 + 68);
  memset(v160, 0, sizeof(v160));
  do
  {
    unsigned int v49 = 0;
    char v50 = *((unsigned char *)&v161 + v12);
    do
    {
      *((unsigned char *)v160 + 8 * (((_BYTE)v12 + (v49 >> 3)) & 0x1F) + v49) = v50 + 4 * v49;
      ++v49;
    }
    while (v49 != 8);
    ++v12;
  }
  while (v12 != 4);
  uint64_t v51 = v146;
  if (v19 != v17)
  {
    unint64_t v52 = 0;
    _S3 = (float)v33;
    float v54 = (float)v35;
    float v55 = (float)v36;
    float v56 = (float)v37;
    float v57 = (float)v38;
    float v58 = (float)v40;
    v45.i32[1] = v47;
    unint64_t v144 = v20 - v18;
    __asm { FMOV            V22.2S, #0.25 }
    *(float32x2_t *)a10.f32 = vmul_f32(v45, _D22);
    v10.i32[1] = v46;
    *(float32x2_t *)v10.f32 = vmul_f32(*(float32x2_t *)v10.f32, _D22);
    v11.i32[1] = v48;
    *(float32x2_t *)v11.f32 = vmul_f32(*(float32x2_t *)v11.f32, _D22);
    __asm
    {
      FCVT            H5, S0
      FCVT            H8, S1
    }
    short float v155 = _H8;
    float16x8_t v156 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a10), 0);
    int16x4_t v66 = (int16x4_t)vcvt_f16_f32(v11);
    __asm { FCVT            H8, S2 }
    short float v153 = _H8;
    float16x8_t v154 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    int32x4_t v68 = vdupq_lane_s32((int32x2_t)v66, 0);
    *(short float *)v66.i16 = (short float)v35;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(v66, 0);
    *(short float *)v66.i16 = (short float)v36;
    int16x8_t v70 = vdupq_lane_s16(v66, 0);
    float16x8_t v151 = (float16x8_t)v70;
    float16x8_t v152 = (float16x8_t)v68;
    *(short float *)v70.i16 = (short float)v37;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v70.i8, 0);
    *(short float *)v70.i16 = (short float)v38;
    int16x8_t v72 = vdupq_lane_s16(*(int16x4_t *)v70.i8, 0);
    *(short float *)v70.i16 = (short float)v40;
    float16x8_t v149 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v70.i8, 0);
    float16x8_t v150 = (float16x8_t)v72;
    uint64_t v73 = v32 + v41;
    if (result) {
      result += v30 * v34 + v21;
    }
    else {
      uint64_t result = 0;
    }
    int v74 = (unsigned char *)(v73 + v21);
    uint64_t v75 = (int8x8_t *)(v157 + v146 * v34 + v21);
    uint64_t v76 = v28 + v27 * v18 + 16 * v159;
    __asm { FCVT            H11, S3 }
    float v158 = v10.f32[0];
    unint64_t v78 = a10.i64[0];
    float v148 = v10.f32[1];
    uint64_t v79 = v11.i64[0];
    do
    {
      uint64_t v80 = v76 + v27;
      int8x8_t v81 = (char *)v75 + v51;
      uint64_t v82 = result + v30;
      if ((int)v13 < 8)
      {
        unint64_t v97 = 0;
        float v86 = (const float *)(v76 + v27);
        float16x8_t v85 = (int8x8_t *)((char *)v75 + v51);
        float16x8_t v96 = v74;
        float v84 = (int8x8_t *)(result + v30);
      }
      else
      {
        uint64_t v83 = 0;
        float v84 = (int8x8_t *)(result + v30);
        float16x8_t v85 = (int8x8_t *)((char *)v75 + v51);
        float v86 = (const float *)(v76 + v27);
        do
        {
          float v87 = (const float *)v76;
          float32x4x4_t v163 = vld4q_f32(v87);
          v87 += 16;
          float32x4x4_t v164 = vld4q_f32(v87);
          float16x8_t v88 = v86;
          float32x4x4_t v165 = vld4q_f32(v88);
          v88 += 16;
          float16x8_t v89 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v163.val[0]), v164.val[0]);
          float32x4x4_t v162 = vld4q_f32(v88);
          v164.val[0] = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v165.val[0]), v162.val[0]);
          v162.val[0] = (float32x4_t)vmulq_n_f16(v89, _H11);
          float16x8_t v90 = vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v163.val[1]), v164.val[1]), _H11);
          float16x8_t v91 = vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v163.val[2]), v164.val[2]), _H11);
          v164.val[0] = (float32x4_t)vmulq_n_f16((float16x8_t)v164.val[0], _H11);
          v164.val[1] = (float32x4_t)vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v165.val[1]), v162.val[1]), _H11);
          v164.val[2] = (float32x4_t)vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v165.val[2]), v162.val[2]), _H11);
          float16x8_t v92 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          *v75++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v69, (float16x8_t)v162.val[0], _H5), v90, v155), v91, v153), v69), v71)));
          *v85++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v69, (float16x8_t)v164.val[0], _H5), (float16x8_t)v164.val[1], v155), (float16x8_t)v164.val[2], v153), v69), v71)));
          v162.val[0] = (float32x4_t)vaddq_f16((float16x8_t)vuzp2q_s16((int16x8_t)v164.val[0], (int16x8_t)v164.val[1]), vaddq_f16(vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v162.val[0], (int16x8_t)v90), (float16x8_t)vuzp2q_s16((int16x8_t)v162.val[0], (int16x8_t)v90)), (float16x8_t)vuzp1q_s16((int16x8_t)v164.val[0], (int16x8_t)v164.val[1])));
          *(int8x8_t *)&v74[v83] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v151, v156, (float16x8_t)vzip1q_s16((int16x8_t)v162.val[0], (int16x8_t)v162.val[0])), v154, (float16x8_t)vzip2q_s16((int16x8_t)v162.val[0], (int16x8_t)v162.val[0])), v152, vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v164.val[2], (int16x8_t)v164.val[2]),
                                                                  vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v91, (int16x8_t)v91), (float16x8_t)vtrn2q_s16((int16x8_t)v91, (int16x8_t)v91)), (float16x8_t)vtrn1q_s16((int16x8_t)v164.val[2], (int16x8_t)v164.val[2])))), v150), v149)));
          double v93 = COERCE_DOUBLE(vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v163.val[3]), v164.val[3]), v92))));
          int8x8_t v94 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v165.val[3]), v162.val[3]), v92)));
          if (result) {
            double v95 = v93;
          }
          else {
            double v95 = 0.0;
          }
          if (result)
          {
            *(double *)uint64_t result = v95;
            result += 8;
            *v84++ = v94;
          }
          v76 += 128;
          v86 += 32;
          v83 += 8;
        }
        while ((int)v83 < (int)v13 - 7);
        float16x8_t v96 = &v74[v83];
        unint64_t v97 = v13 & 0xFFFFFFF8;
      }
      if (v13 > v97)
      {
        uint64_t v98 = 0;
        uint64_t v99 = v76 + 16;
        float16x8_t v100 = v86 + 4;
        do
        {
          if (result)
          {
            uint64_t v101 = v98 + 4 * HIBYTE(v161);
            float v102 = *(const float *)((char *)v100 + v101);
            float v103 = *(const float *)((char *)v100 + v101 - 16);
            float v104 = (float *)(v99 + v101);
            float v105 = *v104;
            char v106 = llroundf(*(v104 - 4) * 255.0);
            char v107 = llroundf(v105 * 255.0);
            __int8 v108 = llroundf(v103 * 255.0);
            __int8 v109 = llroundf(v102 * 255.0);
          }
          else
          {
            __int8 v108 = 0;
            char v106 = 0;
            char v107 = 0;
            __int8 v109 = 0;
          }
          uint64_t v110 = v98 + 4 * v161;
          float v111 = *(float *)(v99 + v110 - 16) * _S3;
          uint64_t v112 = v98 + 4 * BYTE1(v161);
          float v113 = *(float *)(v99 + v112 - 16) * _S3;
          uint64_t v114 = v98 + 4 * BYTE2(v161);
          float v115 = *(float *)(v99 + v114 - 16) * _S3;
          float v116 = *(float *)(v99 + v110) * _S3;
          float v117 = *(float *)(v99 + v112) * _S3;
          float v118 = *(float *)(v99 + v114) * _S3;
          float v119 = *(const float *)((char *)v100 + v110 - 16) * _S3;
          float v120 = (float *)((char *)v100 + v112);
          float v121 = *(v120 - 4) * _S3;
          uint64_t v122 = (float *)((char *)v100 + v114);
          float v123 = *(v122 - 4) * _S3;
          float v124 = *(const float *)((char *)v100 + v110) * _S3;
          float v125 = *v120 * _S3;
          float v126 = *v122 * _S3;
          float v127 = (float)((float)((float)(_S1 * v113) + (float)(_S0 * v111)) + (float)(_S2 * v115)) + v54;
          float v128 = (float)((float)((float)(_S1 * v117) + (float)(_S0 * v116)) + (float)(_S2 * v118)) + v54;
          float v129 = (float)((float)((float)(_S1 * v121) + (float)(_S0 * v119)) + (float)(_S2 * v123)) + v54;
          float v130 = (float)((float)((float)(_S1 * v125) + (float)(_S0 * v124)) + (float)(_S2 * v126)) + v54;
          if (v127 < v54) {
            float v131 = v54;
          }
          else {
            float v131 = (float)((float)((float)(_S1 * v113) + (float)(_S0 * v111)) + (float)(_S2 * v115)) + v54;
          }
          if (v127 <= v56) {
            float v132 = v131;
          }
          else {
            float v132 = v56;
          }
          __int8 v133 = llroundf(v132);
          if (v128 < v54) {
            float v134 = v54;
          }
          else {
            float v134 = (float)((float)((float)(_S1 * v117) + (float)(_S0 * v116)) + (float)(_S2 * v118)) + v54;
          }
          if (v128 > v56) {
            float v134 = v56;
          }
          v75->i8[0] = v133;
          v75->i8[1] = llroundf(v134);
          if (v129 < v54) {
            float v135 = v54;
          }
          else {
            float v135 = (float)((float)((float)(_S1 * v121) + (float)(_S0 * v119)) + (float)(_S2 * v123)) + v54;
          }
          if (v129 > v56) {
            float v135 = v56;
          }
          v85->i8[0] = llroundf(v135);
          if (v130 < v54) {
            float v136 = v54;
          }
          else {
            float v136 = (float)((float)((float)(_S1 * v125) + (float)(_S0 * v124)) + (float)(_S2 * v126)) + v54;
          }
          if (v130 > v56) {
            float v136 = v56;
          }
          v85->i8[1] = llroundf(v136);
          float v137 = (float)((float)(v111 + v116) + v119) + v124;
          float v138 = (float)((float)(v113 + v117) + v121) + v125;
          float v139 = (float)((float)(v115 + v118) + v123) + v126;
          float v140 = (float)((float)(v55 + (float)(v137 * *(float *)&v78)) + (float)(v138 * v158))
               + (float)(v139 * *(float *)&v79);
          float v141 = v58;
          if (v140 <= v58)
          {
            float v141 = (float)((float)(v55 + (float)(v137 * *(float *)&v78)) + (float)(v138 * v158))
                 + (float)(v139 * *(float *)&v79);
            if (v140 < v57) {
              float v141 = v57;
            }
          }
          float v142 = (float)((float)(v55 + (float)(v137 * *((float *)&v78 + 1))) + (float)(v138 * v148))
               + (float)(v139 * *((float *)&v79 + 1));
          *float16x8_t v96 = llroundf(v141);
          float v143 = v58;
          if (v142 <= v58)
          {
            float v143 = v142;
            if (v142 < v57) {
              float v143 = v57;
            }
          }
          v96[1] = llroundf(v143);
          if (result)
          {
            *(unsigned char *)uint64_t result = v106;
            *(unsigned char *)(result + 1) = v107;
            result += 2;
            v84->i8[0] = v108;
            v84->i8[1] = v109;
            float v84 = (int8x8_t *)((char *)v84 + 2);
          }
          v97 += 2;
          v98 += 32;
          uint64_t v75 = (int8x8_t *)((char *)v75 + 2);
          float16x8_t v85 = (int8x8_t *)((char *)v85 + 2);
          v96 += 2;
        }
        while (v13 > v97);
      }
      uint64_t v51 = v146;
      uint64_t v27 = v147;
      uint64_t v76 = v80 + v147;
      uint64_t v75 = (int8x8_t *)&v81[v146];
      v74 += v145;
      uint64_t result = v82 + v30;
      v52 += 2;
    }
    while (v144 > v52);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_420vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_420vf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = 2 * *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    uint64_t v14 = *(void *)(result + 44) + 2 * v10;
    unint64_t v15 = 2 * v11 - 2 * v10;
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(uint64_t **)(result + 136);
    uint64_t v18 = **(void **)(result + 64);
    uint64_t v19 = *v17;
    uint64_t v20 = v17[1];
    uint64_t v21 = v17[2];
    float v22 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    float v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v26 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v27 = (float)LODWORD(a8);
    float v28 = *(float *)(v16 + 36);
    float v29 = *(float *)(v16 + 40);
    float v30 = *(float *)(v16 + 44);
    float v31 = *(float *)(v16 + 48) * 0.25;
    float v32 = *(float *)(v16 + 52) * 0.25;
    float v33 = *(float *)(v16 + 56) * 0.25;
    float v34 = *(float *)(v16 + 60) * 0.25;
    float v35 = *(float *)(v16 + 64) * 0.25;
    float v36 = *(float *)(v16 + 68) * 0.25;
    uint64_t v37 = *(void *)(result + 112);
    uint64_t v38 = *(void **)(result + 128);
    uint64_t v39 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v9);
    uint64_t v40 = **(void **)(result + 56) + v18 * v14 + 16 * *(void *)(result + 36);
    uint64_t v41 = (unsigned char *)(*v38 + v39 * v19 + v37);
    uint64_t v42 = v38[2];
    if (v42) {
      uint64_t v43 = (unsigned char *)(v42 + v39 * v21 + v37);
    }
    else {
      uint64_t v43 = 0;
    }
    uint64_t v44 = *(unsigned __int8 *)(v16 + 157);
    uint64_t result = *(unsigned __int8 *)(v16 + 156);
    uint64_t v45 = v38[1] + v39 / 2 * v20;
    uint64_t v46 = *(unsigned __int8 *)(v16 + 155);
    uint64_t v47 = *(unsigned __int8 *)(v16 + 154);
    uint64_t v48 = v45 + v37;
    do
    {
      unsigned int v49 = &v43[v21];
      char v50 = &v41[v19];
      uint64_t v51 = v40 + v18;
      if (v13)
      {
        unint64_t v52 = 0;
        char v53 = &v43[v21];
        float v54 = &v41[v19];
        uint64_t v55 = v40 + v18;
        do
        {
          uint64_t v56 = v40 + 16;
          uint64_t v57 = v55 + 16;
          if (v43)
          {
            char v58 = llroundf(*(float *)(v40 + 4 * v44) * 255.0);
            char v59 = llroundf(*(float *)(v56 + 4 * v44) * 255.0);
            char v60 = llroundf(*(float *)(v55 + 4 * v44) * 255.0);
            char v61 = llroundf(*(float *)(v57 + 4 * v44) * 255.0);
          }
          else
          {
            char v60 = 0;
            char v58 = 0;
            char v59 = 0;
            char v61 = 0;
          }
          float v62 = *(float *)(v40 + 4 * v47) * v22;
          float v63 = *(float *)(v40 + 4 * v46) * v22;
          float v64 = *(float *)(v40 + 4 * result) * v22;
          float v65 = *(float *)(v56 + 4 * v47) * v22;
          float v66 = *(float *)(v56 + 4 * v46) * v22;
          float v67 = *(float *)(v56 + 4 * result) * v22;
          float v68 = *(float *)(v55 + 4 * v47) * v22;
          float v69 = *(float *)(v55 + 4 * v46) * v22;
          float v70 = *(float *)(v55 + 4 * result) * v22;
          float v71 = *(float *)(v57 + 4 * v47) * v22;
          float v72 = *(float *)(v57 + 4 * v46) * v22;
          float v73 = *(float *)(v57 + 4 * result) * v22;
          float v74 = (float)((float)((float)(v29 * v63) + (float)(v28 * v62)) + (float)(v30 * v64)) + v23;
          float v75 = (float)((float)((float)(v29 * v66) + (float)(v28 * v65)) + (float)(v30 * v67)) + v23;
          float v76 = (float)((float)((float)(v29 * v69) + (float)(v28 * v68)) + (float)(v30 * v70)) + v23;
          float v77 = (float)((float)((float)(v29 * v72) + (float)(v28 * v71)) + (float)(v30 * v73)) + v23;
          if (v74 < v23) {
            float v78 = v23;
          }
          else {
            float v78 = (float)((float)((float)(v29 * v63) + (float)(v28 * v62)) + (float)(v30 * v64)) + v23;
          }
          if (v74 <= v25) {
            float v79 = v78;
          }
          else {
            float v79 = v25;
          }
          char v80 = llroundf(v79);
          if (v75 < v23) {
            float v81 = v23;
          }
          else {
            float v81 = (float)((float)((float)(v29 * v66) + (float)(v28 * v65)) + (float)(v30 * v67)) + v23;
          }
          if (v75 > v25) {
            float v81 = v25;
          }
          *uint64_t v41 = v80;
          v41[1] = llroundf(v81);
          if (v76 < v23) {
            float v82 = v23;
          }
          else {
            float v82 = (float)((float)((float)(v29 * v69) + (float)(v28 * v68)) + (float)(v30 * v70)) + v23;
          }
          if (v76 > v25) {
            float v82 = v25;
          }
          *float v54 = llroundf(v82);
          if (v77 < v23) {
            float v83 = v23;
          }
          else {
            float v83 = (float)((float)((float)(v29 * v72) + (float)(v28 * v71)) + (float)(v30 * v73)) + v23;
          }
          if (v77 > v25) {
            float v83 = v25;
          }
          v54[1] = llroundf(v83);
          float v84 = (float)((float)(v62 + v65) + v68) + v71;
          float v85 = (float)((float)(v63 + v66) + v69) + v72;
          float v86 = (float)((float)(v64 + v67) + v70) + v73;
          float v87 = (float)((float)(v24 + (float)(v84 * v31)) + (float)(v85 * v32)) + (float)(v86 * v33);
          float v88 = v27;
          if (v87 <= v27)
          {
            float v88 = (float)((float)(v24 + (float)(v84 * v31)) + (float)(v85 * v32)) + (float)(v86 * v33);
            if (v87 < v26) {
              float v88 = v26;
            }
          }
          float v89 = (float)((float)(v24 + (float)(v84 * v34)) + (float)(v85 * v35)) + (float)(v86 * v36);
          *(unsigned char *)(v48 + v52) = llroundf(v88);
          float v90 = v27;
          if (v89 <= v27)
          {
            float v90 = v89;
            if (v89 < v26) {
              float v90 = v26;
            }
          }
          *(unsigned char *)(v48 + v52 + 1) = llroundf(v90);
          if (v43)
          {
            *uint64_t v43 = v58;
            v43[1] = v59;
            v43 += 2;
            *char v53 = v60;
            v53[1] = v61;
            v53 += 2;
          }
          v40 += 32;
          v55 += 32;
          v41 += 2;
          v54 += 2;
          v52 += 2;
        }
        while (v13 > v52);
      }
      uint64_t v40 = v51 + v18;
      uint64_t v41 = &v50[v19];
      v48 += v20;
      uint64_t v43 = &v49[v21];
      v12 += 2;
    }
    while (v15 > v12);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, uint8x8_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, double a8, double a9, __n128 _Q7)
{
  uint64_t v13 = 0;
  unint64_t v14 = *(void *)(a1 + 20);
  uint64_t v15 = *(void *)(a1 + 36);
  uint64_t v16 = *(void *)(a1 + 44);
  uint64_t v17 = *(void *)(a1 + 28);
  unint64_t v18 = 2 * *a1;
  uint64_t v19 = 2 * (v17 * a2 / v18);
  uint64_t v20 = v16 + v19;
  uint64_t v21 = 2 * ((v17 + v17 * a2) / v18);
  uint64_t v22 = v16 + v21;
  uint64_t v23 = *((void *)a1 + 14);
  unint64_t v24 = *((void *)a1 + 13) * a2;
  uint64_t v25 = *((void *)a1 + 19);
  uint64_t v27 = *((void *)a1 + 15);
  float v26 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v28 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v29 = **((void **)a1 + 8);
  uint64_t result = **((void **)a1 + 7);
  uint64_t v32 = *v28;
  uint64_t v31 = v28[1];
  uint64_t v33 = *v26;
  uint64_t v34 = v26[1];
  a4.i32[0] = *(_DWORD *)(v25 + 154);
  __int32 v344 = a4.i32[0];
  unsigned int v35 = *(unsigned __int16 *)(v25 + 144);
  unsigned int v36 = *(unsigned __int8 *)(v25 + 132);
  unsigned int v37 = *(unsigned __int16 *)(v25 + 146);
  unsigned int v38 = *(unsigned __int16 *)(v25 + 148);
  unsigned int v39 = *(unsigned __int16 *)(v25 + 150);
  unsigned int v40 = *(unsigned __int16 *)(v25 + 152);
  float v339 = *(float *)(v25 + 36);
  float v338 = *(float *)(v25 + 40);
  v41.i32[0] = *(_DWORD *)(v25 + 48);
  float v337 = *(float *)(v25 + 44);
  v43.i32[0] = *(_DWORD *)(v25 + 52);
  v42.i32[0] = *(_DWORD *)(v25 + 56);
  __int32 v44 = *(_DWORD *)(v25 + 60);
  __int32 v45 = *(_DWORD *)(v25 + 64);
  uint64_t v46 = v27 + 2 * (v24 / v18);
  uint64_t v47 = v29 * v20;
  __int32 v48 = *(_DWORD *)(v25 + 68);
  float v336 = *(float *)(v25 + 72);
  float v335 = *(float *)(v25 + 76);
  float v334 = *(float *)(v25 + 80);
  if (v46 >= 0) {
    uint64_t v49 = v46;
  }
  else {
    uint64_t v49 = v46 + 1;
  }
  float v333 = *(float *)(v25 + 84);
  float v332 = *(float *)(v25 + 88);
  float v331 = *(float *)(v25 + 92);
  float v330 = *(float *)(v25 + 96);
  uint64_t v301 = v31;
  uint64_t v50 = v31 * (v49 >> 1);
  uint16x8_t v51 = vmovl_u8(a4);
  float v329 = *(float *)(v25 + 100);
  _S17 = *(float *)(v25 + 108);
  float v328 = *(float *)(v25 + 104);
  _S18 = *(float *)(v25 + 112);
  _S19 = *(float *)(v25 + 116);
  _S20 = *(float *)(v25 + 120);
  memset(v343, 0, sizeof(v343));
  do
  {
    unsigned int v56 = 0;
    char v57 = *((unsigned char *)&v344 + v13);
    do
    {
      *((unsigned char *)v343 + 8 * (((_BYTE)v13 + (v56 >> 3)) & 0x1F) + v56) = v57 + 4 * v56;
      ++v56;
    }
    while (v56 != 8);
    ++v13;
  }
  while (v13 != 4);
  if (v21 != v19)
  {
    unint64_t v298 = v22 - v20;
    uint64_t v58 = v25 + 16548;
    float v59 = (float)v35;
    float v60 = (float)v37;
    float v326 = (float)v38;
    float v340 = (float)v39;
    float v61 = (float)v40;
    v41.i32[1] = v44;
    __asm { FMOV            V1.2S, #0.25 }
    *(float32x2_t *)a5.f32 = vmul_f32(v41, _D1);
    v43.i32[1] = v45;
    *(float32x2_t *)a6.f32 = vmul_f32(v43, _D1);
    v42.i32[1] = v48;
    *(float32x2_t *)a7.f32 = vmul_f32(v42, _D1);
    uint64_t v67 = v25 + 32932;
    uint64_t v68 = v25 + 164;
    _D1.f32[0] = v339;
    __asm { FCVT            H8, S1 }
    float16x8_t v70 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    _D1.f32[0] = v338;
    __asm { FCVT            H10, S1 }
    float16x8_t v72 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a6), 0);
    _D0 = (int16x4_t)vcvt_f16_f32(a7);
    _D1.f32[0] = v337;
    __asm { FCVT            H12, S1 }
    int32x4_t v75 = vdupq_lane_s32((int32x2_t)_D0, 0);
    __asm
    {
      FCVT            H1, S17
      FCVT            H0, S18
    }
    short float v318 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S19 }
    short float v317 = *(short float *)_D0.i16;
    __asm { FCVT            H5, S20 }
    *(float *)_D0.i32 = v336;
    __asm { FCVT            H0, S0 }
    short float v342 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v335;
    __asm { FCVT            H0, S0 }
    short float v341 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v334;
    __asm { FCVT            H6, S0 }
    *(float *)_D0.i32 = v333;
    __asm { FCVT            H7, S0 }
    *(float *)_D0.i32 = v332;
    __asm { FCVT            H9, S0 }
    *(float *)_D0.i32 = v331;
    __asm { FCVT            H11, S0 }
    *(float *)_D0.i32 = v330;
    __asm { FCVT            H13, S0 }
    *(float *)_D0.i32 = v329;
    __asm { FCVT            H14, S0 }
    *(short float *)_D0.i16 = (short float)v35;
    float16x8_t v81 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v37;
    int16x8_t v82 = vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v38;
    _Q0 = vdupq_lane_s16(_D0, 0);
    float16x8_t v307 = (float16x8_t)_Q0;
    *(float *)_Q0.i32 = v328;
    __asm { FCVT            H15, S0 }
    *(short float *)_Q0.i16 = (short float)v39;
    int16x8_t v84 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v305 = (float16x8_t)v84;
    *(short float *)v84.i16 = (short float)v40;
    int16x8_t v85 = vdupq_lane_s16(*(int16x4_t *)v84.i8, 0);
    unsigned __int8 v86 = 16 - v36;
    if (v36 >= 0x11) {
      unsigned __int8 v86 = 0;
    }
    uint64_t v87 = v34 + v50 + 2 * v23;
    float v88 = (uint16x8_t *)(v33 + v32 * v46 + 2 * v23);
    uint64_t v89 = result + v47 + 16 * v15;
    unint64_t v90 = 0;
    uint64_t result = (v14 - 7);
    unsigned __int8 v91 = v86;
    uint64_t v291 = v51.u16[1];
    unint64_t v292 = v14 & 0xFFFFFFF8;
    float16x8_t v92 = (float *)&unk_193E7D000;
    uint16x8_t v303 = (uint16x8_t)vdupq_n_s16(v86);
    float16x8_t v304 = (float16x8_t)v85;
    float v324 = a6.f32[0];
    unint64_t v93 = a5.i64[0];
    float v302 = a6.f32[1];
    unint64_t v94 = a7.i64[0];
    uint64_t v299 = v32;
    uint64_t v300 = v29;
    short float v319 = _H1;
    float16x8_t v320 = (float16x8_t)v75;
    unint64_t v293 = v14;
    float v327 = _S18;
    float v325 = _S17;
    short float v323 = _H10;
    short float v321 = _H12;
    float16x8_t v322 = v72;
    short float v315 = _H6;
    short float v316 = _H5;
    long long v313 = _Q9;
    __n128 v314 = _Q7;
    long long v311 = _Q13;
    short float v312 = _H11;
    float16x8_t v309 = v81;
    short float v310 = _H14;
    float16x8_t v308 = (float16x8_t)v82;
    long long v306 = _Q15;
    do
    {
      uint64_t v95 = v89 + v29;
      float16x8_t v96 = &v88->i8[v32];
      if ((int)v14 < 8)
      {
        unint64_t v177 = 0;
        float16x8_t v100 = (const float *)(v89 + v29);
        uint64_t v99 = (uint16x8_t *)((char *)v88 + v32);
        uint64_t v98 = (uint16x8_t *)v87;
      }
      else
      {
        uint64_t v296 = v87;
        unint64_t v297 = v90;
        int v97 = 0;
        uint64_t v98 = (uint16x8_t *)v87;
        float16x8_t v294 = &v88->i8[v32];
        uint64_t v295 = v89 + v29;
        uint64_t v99 = (uint16x8_t *)((char *)v88 + v32);
        float16x8_t v100 = (const float *)(v89 + v29);
        v101.i64[0] = 0x7000700070007000;
        v101.i64[1] = 0x7000700070007000;
        v102.i64[0] = 0x9000900090009000;
        v102.i64[1] = 0x9000900090009000;
        do
        {
          float v103 = (const float *)v89;
          float32x4x4_t v345 = vld4q_f32(v103);
          v103 += 16;
          float32x4x4_t v346 = vld4q_f32(v103);
          float v104 = v100;
          float32x4x4_t v347 = vld4q_f32(v104);
          v104 += 16;
          float16x8_t v105 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v345.val[0]), v346.val[0]);
          float16x8_t v106 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v345.val[1]), v346.val[1]);
          v345.val[0] = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v345.val[2]), v346.val[2]);
          *(float32x4x4_t *)((char *)&v345 + 16) = vld4q_f32(v104);
          v346.val[2] = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v347.val[1]), v345.val[2]);
          float16x8_t v107 = vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v347.val[0]), v345.val[1]), v101);
          float16x8_t v108 = vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v347.val[2]), v345.val[3]), v101);
          v345.val[1] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v105, v101), (float16x8_t)0), v102));
          v345.val[3] = (float32x4_t)vmovl_high_u16((uint16x8_t)v345.val[1]);
          v109.i64[0] = v345.val[3].u32[2];
          v109.i64[1] = v345.val[3].u32[3];
          v346.val[0] = v109;
          v109.i64[0] = v345.val[3].u32[0];
          v109.i64[1] = v345.val[3].u32[1];
          v345.val[3] = v109;
          v345.val[1] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v345.val[1].f32);
          v109.i64[1] = v345.val[1].u32[3];
          v346.val[1].i64[0] = v345.val[1].u32[2];
          v347.val[1].i16[0] = *(_WORD *)(v68 + 2 * v345.val[1].u32[0]);
          uint64_t v110 = (__int16 *)(v68 + 2 * v345.val[1].u32[1]);
          v345.val[1] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v106, v101), (float16x8_t)0), v102));
          v345.val[2] = (float32x4_t)vmovl_high_u16((uint16x8_t)v345.val[1]);
          v345.val[1] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v345.val[1].f32);
          v347.val[2].i16[0] = *(_WORD *)(v68 + 2 * v345.val[1].u32[0]);
          float v111 = (__int16 *)(v68 + 2 * v345.val[1].u32[1]);
          uint64_t v112 = (__int16 *)(v68 + 2 * v345.val[1].u32[2]);
          float v113 = (__int16 *)(v68 + 2 * v345.val[1].u32[3]);
          v345.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v345.val[0], v101), (float16x8_t)0), v102));
          v345.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v345.val[0]);
          v345.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v345.val[0].f32);
          v347.val[1].i16[1] = *v110;
          v114.i16[0] = *(_WORD *)(v68 + 2 * v345.val[0].u32[0]);
          v347.val[2].i16[1] = *v111;
          v347.val[1].i16[2] = *(_WORD *)(v68 + 2 * v346.val[1].i64[0]);
          v347.val[2].i16[2] = *v112;
          float v115 = (__int16 *)(v68 + 2 * v345.val[1].u32[0]);
          v347.val[1].i16[3] = *(_WORD *)(v68 + 2 * v109.i64[1]);
          float v116 = (__int16 *)(v68 + 2 * v345.val[1].u32[1]);
          float v117 = (__int16 *)(v68 + 2 * v345.val[1].u32[2]);
          float v118 = (__int16 *)(v68 + 2 * v345.val[1].u32[3]);
          v347.val[2].i16[3] = *v113;
          v114.i16[1] = *(_WORD *)(v68 + 2 * v345.val[0].u32[1]);
          v114.i16[2] = *(_WORD *)(v68 + 2 * v345.val[0].u32[2]);
          v114.i16[3] = *(_WORD *)(v68 + 2 * v345.val[0].u32[3]);
          v345.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v107, (float16x8_t)0), v102));
          v345.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v345.val[0]);
          v347.val[1].i16[4] = *(_WORD *)(v68 + 2 * v345.val[3].i64[0]);
          v345.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v345.val[0].f32);
          v347.val[2].i16[4] = *(_WORD *)(v68 + 2 * v345.val[2].u32[0]);
          v114.i16[4] = *v115;
          v107.i16[0] = *(_WORD *)(v68 + 2 * v345.val[0].u32[0]);
          float v119 = (__int16 *)(v68 + 2 * v345.val[0].u32[1]);
          float v120 = (__int16 *)(v68 + 2 * v345.val[0].u32[2]);
          float v121 = (__int16 *)(v68 + 2 * v345.val[0].u32[3]);
          v347.val[1].i16[5] = *(_WORD *)(v68 + 2 * v345.val[3].i64[1]);
          uint64_t v122 = (__int16 *)(v68 + 2 * v345.val[1].u32[0]);
          v347.val[2].i16[5] = *(_WORD *)(v68 + 2 * v345.val[2].u32[1]);
          float v123 = (__int16 *)(v68 + 2 * v345.val[1].u32[1]);
          float v124 = (__int16 *)(v68 + 2 * v345.val[1].u32[2]);
          float v125 = (__int16 *)(v68 + 2 * v345.val[1].u32[3]);
          v114.i16[5] = *v116;
          v345.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v346.val[2], v101), (float16x8_t)0), v102));
          v345.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v345.val[0]);
          v107.i16[1] = *v119;
          v345.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v345.val[0].f32);
          v347.val[1].i16[6] = *(_WORD *)(v68 + 2 * v346.val[0].i64[0]);
          v347.val[2].i16[6] = *(_WORD *)(v68 + 2 * v345.val[2].u32[2]);
          v347.val[0].i16[0] = *(_WORD *)(v68 + 2 * v345.val[0].u32[0]);
          v114.i16[6] = *v117;
          float v126 = (__int16 *)(v68 + 2 * v345.val[0].u32[3]);
          v107.i16[2] = *v120;
          float v127 = (__int16 *)(v68 + 2 * v345.val[1].u32[0]);
          v347.val[1].i16[7] = *(_WORD *)(v68 + 2 * v346.val[0].i64[1]);
          float v128 = (__int16 *)(v68 + 2 * v345.val[1].u32[1]);
          v347.val[2].i16[7] = *(_WORD *)(v68 + 2 * v345.val[2].u32[3]);
          float v129 = (__int16 *)(v68 + 2 * v345.val[1].u32[2]);
          float v130 = (__int16 *)(v68 + 2 * v345.val[1].u32[3]);
          v347.val[0].i16[1] = *(_WORD *)(v68 + 2 * v345.val[0].u32[1]);
          v114.i16[7] = *v118;
          v347.val[0].i16[2] = *(_WORD *)(v68 + 2 * v345.val[0].u32[2]);
          v107.i16[3] = *v121;
          v345.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v108, (float16x8_t)0), v102));
          v345.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v345.val[0]);
          v347.val[0].i16[3] = *v126;
          v345.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v345.val[0].f32);
          v107.i16[4] = *v122;
          v108.i16[0] = *(_WORD *)(v68 + 2 * v345.val[0].u32[0]);
          v347.val[0].i16[4] = *v127;
          v107.i16[5] = *v123;
          v347.val[0].i16[5] = *v128;
          v107.i16[6] = *v124;
          v347.val[0].i16[6] = *v129;
          v108.i16[1] = *(_WORD *)(v68 + 2 * v345.val[0].u32[1]);
          v108.i16[2] = *(_WORD *)(v68 + 2 * v345.val[0].u32[2]);
          v107.i16[7] = *v125;
          v108.i16[3] = *(_WORD *)(v68 + 2 * v345.val[0].u32[3]);
          v108.i16[4] = *(_WORD *)(v68 + 2 * v345.val[1].u32[0]);
          v347.val[0].i16[7] = *v130;
          v108.i16[5] = *(_WORD *)(v68 + 2 * v345.val[1].u32[1]);
          v108.i16[6] = *(_WORD *)(v68 + 2 * v345.val[1].u32[2]);
          v108.i16[7] = *(_WORD *)(v68 + 2 * v345.val[1].u32[3]);
          v345.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v347.val[1], v319), (float16x8_t)v347.val[2], v318), v114, v317), vmaxq_f16(vmaxq_f16((float16x8_t)v347.val[1], (float16x8_t)v347.val[2]), v114), v316), (float16x8_t)0), v102));
          v345.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v345.val[0]);
          v345.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v345.val[0].f32);
          uint64_t v131 = v345.val[0].u32[1];
          uint64_t v132 = v345.val[0].u32[0];
          v109.i64[0] = v345.val[1].u32[2];
          v109.i64[1] = v345.val[1].u32[3];
          v345.val[2] = v109;
          v109.i64[1] = v345.val[1].u32[1];
          uint64_t v133 = v345.val[0].u32[3];
          uint64_t v134 = v345.val[0].u32[2];
          uint64_t v135 = v345.val[1].u32[0];
          v345.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v107, v319), (float16x8_t)v347.val[0], v318), v108, v317), vmaxq_f16(vmaxq_f16(v107, (float16x8_t)v347.val[0]), v108), v316), (float16x8_t)0), v102));
          v345.val[1] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v345.val[0].f32);
          uint64_t v136 = v345.val[1].u32[1];
          uint64_t v137 = v345.val[1].u32[0];
          uint64_t v138 = v345.val[1].u32[3];
          uint64_t v139 = v345.val[1].u32[2];
          v345.val[1].i16[0] = *(_WORD *)(v58 + 2 * v132);
          v345.val[1].i16[1] = *(_WORD *)(v58 + 2 * v131);
          v345.val[1].i16[2] = *(_WORD *)(v58 + 2 * v134);
          v345.val[1].i16[3] = *(_WORD *)(v58 + 2 * v133);
          v345.val[1].i16[4] = *(_WORD *)(v58 + 2 * v135);
          v345.val[1].i16[5] = *(_WORD *)(v58 + 2 * v109.i64[1]);
          v345.val[1].i16[6] = *(_WORD *)(v58 + 2 * v345.val[2].i64[0]);
          v345.val[1].i16[7] = *(_WORD *)(v58 + 2 * v345.val[2].i64[1]);
          float16x8_t v140 = vmulq_f16((float16x8_t)v347.val[1], (float16x8_t)v345.val[1]);
          v345.val[3] = (float32x4_t)vmulq_f16((float16x8_t)v347.val[2], (float16x8_t)v345.val[1]);
          v345.val[0] = (float32x4_t)vmovl_high_u16((uint16x8_t)v345.val[0]);
          v345.val[1] = (float32x4_t)vmulq_f16(v114, (float16x8_t)v345.val[1]);
          v109.i64[0] = v345.val[0].u32[2];
          v109.i64[1] = v345.val[0].u32[3];
          v346.val[0] = v109;
          v109.i64[1] = v345.val[0].u32[1];
          uint64_t v141 = v346.val[0].i64[1];
          uint64_t v142 = v345.val[0].u32[0];
          uint64_t v143 = v346.val[0].i64[0];
          v346.val[2].i16[7] = v314.n128_i16[7];
          v346.val[0] = (float32x4_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v140, v342), (float16x8_t)v345.val[3], v341), (float16x8_t)v345.val[1], v315);
          v347.val[2].i16[7] = HIWORD(v313);
          v345.val[0] = (float32x4_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v140, *(short float *)v314.n128_u16), (float16x8_t)v345.val[3], *(short float *)&v313), (float16x8_t)v345.val[1], v312);
          v114.i16[7] = HIWORD(v306);
          v347.val[1].i16[7] = HIWORD(v311);
          float16x8_t v144 = vmlaq_n_f16(vmulq_n_f16((float16x8_t)v345.val[1], *(short float *)&v306), (float16x8_t)v345.val[3], v310);
          v345.val[1].i16[0] = *(_WORD *)(v58 + 2 * v137);
          v345.val[1].i16[1] = *(_WORD *)(v58 + 2 * v136);
          v345.val[1].i16[2] = *(_WORD *)(v58 + 2 * v139);
          v345.val[1].i16[3] = *(_WORD *)(v58 + 2 * v138);
          v345.val[1].i16[4] = *(_WORD *)(v58 + 2 * v142);
          v345.val[1].i16[5] = *(_WORD *)(v58 + 2 * v109.i64[1]);
          v345.val[1].i16[6] = *(_WORD *)(v58 + 2 * v143);
          v345.val[1].i16[7] = *(_WORD *)(v58 + 2 * v141);
          v345.val[3] = (float32x4_t)vmulq_f16(v107, (float16x8_t)v345.val[1]);
          v346.val[1] = (float32x4_t)vmulq_f16((float16x8_t)v347.val[0], (float16x8_t)v345.val[1]);
          v345.val[1] = (float32x4_t)vmulq_f16(v108, (float16x8_t)v345.val[1]);
          float16x8_t v145 = vmlaq_n_f16(v144, v140, *(short float *)&v311);
          float16x8_t v146 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v345.val[3], v342), (float16x8_t)v346.val[1], v341), (float16x8_t)v345.val[1], v315);
          v347.val[0] = (float32x4_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v345.val[3], *(short float *)v314.n128_u16), (float16x8_t)v346.val[1], *(short float *)&v313), (float16x8_t)v345.val[1], v312);
          float16x8_t v147 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v345.val[1], *(short float *)&v306), (float16x8_t)v346.val[1], v310), (float16x8_t)v345.val[3], *(short float *)&v311);
          v345.val[1] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v346.val[0], (float16x8_t)0), v102));
          v345.val[2] = (float32x4_t)vmovl_high_u16((uint16x8_t)v345.val[1]);
          v345.val[1] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v345.val[1].f32);
          uint64_t v148 = v345.val[1].u32[1];
          v109.i64[0] = v345.val[2].u32[2];
          v109.i64[1] = v345.val[2].u32[3];
          v345.val[3] = v109;
          uint64_t v149 = v345.val[1].u32[3];
          v347.val[1].i16[0] = *(_WORD *)(v67 + 2 * v345.val[1].u32[0]);
          uint64_t v150 = v345.val[2].u32[1];
          float16x8_t v151 = (__int16 *)(v67 + 2 * v345.val[1].u32[2]);
          float16x8_t v152 = (__int16 *)(v67 + 2 * v345.val[2].u32[0]);
          v345.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v345.val[0], (float16x8_t)0), v102));
          v345.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v345.val[0]);
          v345.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v345.val[0].f32);
          v109.i64[0] = v345.val[1].u32[2];
          v109.i64[1] = v345.val[1].u32[3];
          v345.val[2] = v109;
          v109.i64[1] = v345.val[1].u32[1];
          v114.i16[0] = *(_WORD *)(v67 + 2 * v345.val[0].u32[0]);
          short float v153 = (__int16 *)(v67 + 2 * v345.val[0].u32[2]);
          float16x8_t v154 = (__int16 *)(v67 + 2 * v345.val[0].u32[1]);
          short float v155 = (__int16 *)(v67 + 2 * v345.val[1].u32[0]);
          uint64_t v156 = v345.val[2].i64[1];
          uint64_t v157 = (__int16 *)(v67 + 2 * v345.val[0].u32[3]);
          v345.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v145, (float16x8_t)0), v102));
          v345.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v345.val[0]);
          v345.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v345.val[0].f32);
          v347.val[1].i16[1] = *(_WORD *)(v67 + 2 * v148);
          v114.i16[1] = *v154;
          v108.i16[0] = *(_WORD *)(v67 + 2 * v345.val[0].u32[0]);
          v347.val[1].i16[2] = *v151;
          v114.i16[2] = *v153;
          float v158 = (__int16 *)(v67 + 2 * v345.val[1].u32[0]);
          v347.val[1].i16[3] = *(_WORD *)(v67 + 2 * v149);
          uint64_t v159 = (__int16 *)(v67 + 2 * v345.val[1].u32[1]);
          uint64_t v160 = v345.val[1].u32[3];
          uint64_t v161 = v345.val[1].u32[2];
          v114.i16[3] = *v157;
          v108.i16[1] = *(_WORD *)(v67 + 2 * v345.val[0].u32[1]);
          v108.i16[2] = *(_WORD *)(v67 + 2 * v345.val[0].u32[2]);
          v108.i16[3] = *(_WORD *)(v67 + 2 * v345.val[0].u32[3]);
          v345.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v146, (float16x8_t)0), v102));
          v345.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v345.val[0]);
          v347.val[1].i16[4] = *v152;
          v345.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v345.val[0].f32);
          v114.i16[4] = *v155;
          v108.i16[4] = *v158;
          v347.val[2].i16[0] = *(_WORD *)(v67 + 2 * v345.val[0].u32[0]);
          float32x4x4_t v162 = (__int16 *)(v67 + 2 * v345.val[0].u32[1]);
          float32x4x4_t v163 = (__int16 *)(v67 + 2 * v345.val[0].u32[2]);
          uint64_t v164 = v345.val[1].u32[1];
          float32x4x4_t v165 = (__int16 *)(v67 + 2 * v345.val[1].u32[0]);
          uint64_t v166 = (__int16 *)(v67 + 2 * v345.val[0].u32[3]);
          uint64_t v167 = v345.val[1].u32[3];
          uint64_t v168 = v345.val[1].u32[2];
          v347.val[1].i16[5] = *(_WORD *)(v67 + 2 * v150);
          v345.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v347.val[0], (float16x8_t)0), v102));
          v345.val[1] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v345.val[0].f32);
          v114.i16[5] = *(_WORD *)(v67 + 2 * v109.i64[1]);
          v108.i16[5] = *v159;
          v146.i16[0] = *(_WORD *)(v67 + 2 * v345.val[1].u32[0]);
          v347.val[2].i16[1] = *v162;
          v345.val[0] = (float32x4_t)vmovl_high_u16((uint16x8_t)v345.val[0]);
          v347.val[1].i16[6] = *(_WORD *)(v67 + 2 * v345.val[3].i64[0]);
          uint64_t v169 = v345.val[0].u32[1];
          v114.i16[6] = *(_WORD *)(v67 + 2 * v345.val[2].i64[0]);
          v146.i16[1] = *(_WORD *)(v67 + 2 * v345.val[1].u32[1]);
          uint64_t v170 = v345.val[0].u32[0];
          v347.val[2].i16[2] = *v163;
          v146.i16[2] = *(_WORD *)(v67 + 2 * v345.val[1].u32[2]);
          uint64_t v171 = v345.val[0].u32[3];
          v347.val[2].i16[3] = *v166;
          uint64_t v172 = v345.val[0].u32[2];
          v345.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v147, (float16x8_t)0), v102));
          v146.i16[3] = *(_WORD *)(v67 + 2 * v345.val[1].u32[3]);
          v345.val[1] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v345.val[0].f32);
          uint64_t v173 = v345.val[1].u32[1];
          v347.val[2].i16[4] = *v165;
          uint64_t v174 = v345.val[1].u32[0];
          v345.val[2] = (float32x4_t)vuzp1q_s16((int16x8_t)v347.val[1], (int16x8_t)v114);
          v347.val[1].i16[7] = *(_WORD *)(v67 + 2 * v345.val[3].i64[1]);
          v114.i16[7] = *(_WORD *)(v67 + 2 * v156);
          v347.val[2].i16[5] = *(_WORD *)(v67 + 2 * v164);
          v146.i16[4] = *(_WORD *)(v67 + 2 * v170);
          v146.i16[5] = *(_WORD *)(v67 + 2 * v169);
          v347.val[2].i16[6] = *(_WORD *)(v67 + 2 * v168);
          v345.val[0] = (float32x4_t)vmovl_high_u16((uint16x8_t)v345.val[0]);
          uint64_t v175 = v345.val[1].u32[3];
          v146.i16[6] = *(_WORD *)(v67 + 2 * v172);
          uint64_t v176 = v345.val[1].u32[2];
          v345.val[1] = (float32x4_t)vuzp1q_s16((int16x8_t)v347.val[2], (int16x8_t)v146);
          v347.val[2].i16[7] = *(_WORD *)(v67 + 2 * v167);
          v146.i16[7] = *(_WORD *)(v67 + 2 * v171);
          v346.val[2].i16[0] = *(_WORD *)(v67 + 2 * v174);
          v346.val[2].i16[1] = *(_WORD *)(v67 + 2 * v173);
          v346.val[2].i16[2] = *(_WORD *)(v67 + 2 * v176);
          v108.i16[6] = *(_WORD *)(v67 + 2 * v161);
          v346.val[2].i16[3] = *(_WORD *)(v67 + 2 * v175);
          v346.val[2].i16[4] = *(_WORD *)(v67 + 2 * v345.val[0].u32[0]);
          v345.val[1] = (float32x4_t)vaddq_f16(vaddq_f16((float16x8_t)v345.val[2], (float16x8_t)vuzp2q_s16((int16x8_t)v347.val[1], (int16x8_t)v114)), (float16x8_t)v345.val[1]);
          v345.val[2] = (float32x4_t)v108;
          v346.val[2].i16[5] = *(_WORD *)(v67 + 2 * v345.val[0].u32[1]);
          v346.val[2].i16[6] = *(_WORD *)(v67 + 2 * v345.val[0].u32[2]);
          v345.val[2].i16[7] = *(_WORD *)(v67 + 2 * v160);
          v345.val[1] = (float32x4_t)vaddq_f16((float16x8_t)v345.val[1], (float16x8_t)vuzp2q_s16((int16x8_t)v347.val[2], (int16x8_t)v146));
          v345.val[3] = v346.val[2];
          v345.val[3].i16[7] = *(_WORD *)(v67 + 2 * v345.val[0].u32[3]);
          *v88++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v81, (float16x8_t)v347.val[1], _H8), v114, _H10), (float16x8_t)v345.val[2], _H12), v81), v307)), v303);
          *v99++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v81, (float16x8_t)v347.val[2], _H8), v146, _H10), (float16x8_t)v345.val[3], _H12), v81), v307)), v303);
          *v98++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v308, v70, (float16x8_t)vzip1q_s16((int16x8_t)v345.val[1], (int16x8_t)v345.val[1])), v72, (float16x8_t)vzip2q_s16((int16x8_t)v345.val[1], (int16x8_t)v345.val[1])), v320, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v108, (int16x8_t)v108), (float16x8_t)vtrn2q_s16((int16x8_t)v345.val[2], (int16x8_t)v345.val[2])), (float16x8_t)vtrn1q_s16((int16x8_t)v346.val[2], (int16x8_t)v346.val[2])), (float16x8_t)vtrn2q_s16((int16x8_t)v345.val[3], (int16x8_t)v345.val[3]))),
                           v305),
                         v304)),
                     v303);
          v89 += 128;
          v100 += 32;
          v97 += 8;
        }
        while (v97 < (int)result);
        unint64_t v177 = v292;
        unint64_t v14 = v293;
        uint64_t v87 = v296;
        unint64_t v90 = v297;
        float16x8_t v92 = (float *)&unk_193E7D000;
        float16x8_t v96 = v294;
        uint64_t v95 = v295;
      }
      if (v14 > v177)
      {
        unint64_t v178 = 0;
        uint64_t v179 = v89 + 16;
        uint64_t v180 = v89 + v291 * 4 + 16;
        float v181 = &v100[v291];
        do
        {
          unint64_t v182 = v178 + 4 * v344;
          v183.i32[0] = *(_DWORD *)(v179 + v182 - 16);
          v183.i32[1] = *(_DWORD *)(v180 + v178 - 16);
          float32x2_t v184 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v183, v184), 0), v184)));
          unint64_t v186 = v178 + 4 * BYTE2(v344);
          _D0.i16[0] = *(_WORD *)(v68 + 2 * _D0.u32[0]);
          _D1.i32[0] = *(_DWORD *)(v179 + v186 - 16);
          __asm { FCVT            S31, H0 }
          _D0.i16[0] = *(_WORD *)(v68 + 2 * _D0.u32[1]);
          __asm { FCVT            S9, H0 }
          _D1.i32[1] = *(_DWORD *)(v179 + v182);
          int32x2_t v190 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D1, v184), 0), v184)));
          _D1.i16[0] = *(_WORD *)(v68 + 2 * v190.u32[0]);
          __asm { FCVT            S13, H1 }
          float v192 = fmaxf(_S31, fmaxf(_S9, _S13));
          float v193 = (float)((float)((float)(_S18 * _S9) + (float)(_S17 * _S31)) + (float)(_S19 * _S13))
               + (float)(_S20 * v192);
          float v194 = v92[70];
          float v195 = v194;
          if (v193 <= v194)
          {
            float v195 = (float)((float)((float)(_S18 * _S9) + (float)(_S17 * _S31)) + (float)(_S19 * _S13))
                 + (float)(_S20 * v192);
            if (v193 < 0.0) {
              float v195 = 0.0;
            }
          }
          v196.i32[0] = *(_DWORD *)(v180 + v178);
          _H0 = *(_WORD *)(v68 + 2 * v190.u32[1]);
          __asm { FCVT            S30, H0 }
          v196.i32[1] = *(_DWORD *)(v179 + v186);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v196, v184), 0), v184)));
          _D0.i16[0] = *(_WORD *)(v68 + 2 * _D0.u32[0]);
          __asm { FCVT            S27, H0 }
          _D0.i16[0] = *(_WORD *)(v68 + 2 * _D0.u32[1]);
          __asm { FCVT            S10, H0 }
          float v202 = (float)((float)((float)(_S18 * _S27) + (float)(_S17 * _S30)) + (float)(_S19 * _S10))
               + (float)(_S20 * fmaxf(_S30, fmaxf(_S27, _S10)));
          float v203 = v92[70];
          if (v202 <= v194)
          {
            float v203 = v202;
            if (v202 < 0.0) {
              float v203 = 0.0;
            }
          }
          v204.f32[0] = *(const float *)((char *)v100 + v182);
          v204.f32[1] = v181[v178 / 4];
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v204, v184), 0), v184)));
          _D1.i16[0] = *(_WORD *)(v68 + 2 * _D1.u32[0]);
          BOOL v206 = (__int32 *)((char *)v100 + v186);
          _D3.i32[0] = *v206;
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v68 + 2 * _D1.u32[1]);
          _D3.f32[1] = *(const float *)((char *)v100 + v182 + 16);
          __asm { FCVT            S2, H2 }
          int32x2_t v211 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D3, v184), 0), v184)));
          _D3.i16[0] = *(_WORD *)(v68 + 2 * v211.u32[0]);
          __asm { FCVT            S3, H3 }
          float v213 = (float)((float)((float)(_S18 * _S2) + (float)(_S17 * _S1)) + (float)(_S19 * _S3))
               + (float)(_S20 * fmaxf(_S1, fmaxf(_S2, _S3)));
          float v214 = v92[70];
          if (v213 <= v194)
          {
            float v214 = v213;
            if (v213 < 0.0) {
              float v214 = 0.0;
            }
          }
          v215.f32[0] = v181[v178 / 4 + 4];
          _H4 = *(_WORD *)(v68 + 2 * v211.u32[1]);
          __asm { FCVT            S4, H4 }
          v215.i32[1] = v206[4];
          _D6 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v215, v184), 0), v184)));
          _D6.i16[0] = *(_WORD *)(v68 + 2 * _D6.u32[0]);
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v68 + 2 * _D6.u32[1]);
          __asm { FCVT            S7, H7 }
          _H16 = *(_WORD *)(v58 + 2 * llroundf(v195));
          __asm { FCVT            S16, H16 }
          float v224 = _S31 * _S16;
          float v225 = _S9 * _S16;
          float v226 = _S13 * _S16;
          _H0 = *(_WORD *)(v58 + 2 * llroundf(v203));
          __asm { FCVT            S0, H0 }
          float v229 = _S30 * _S0;
          float v230 = _S27 * _S0;
          float v231 = _S10 * _S0;
          LOWORD(_S0) = *(_WORD *)(v58 + 2 * llroundf(v214));
          __asm { FCVT            S5, H0 }
          float v233 = _S1 * _S5;
          float v234 = _S2 * _S5;
          float v235 = _S3 * _S5;
          float v236 = (float)((float)((float)(_S18 * _S6) + (float)(_S17 * _S4)) + (float)(_S19 * _S7))
               + (float)(_S20 * fmaxf(_S4, fmaxf(_S6, _S7)));
          float v237 = v92[70];
          if (v236 <= v194)
          {
            float v237 = v236;
            if (v236 < 0.0) {
              float v237 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v58 + 2 * llroundf(v237));
          __asm { FCVT            S3, H3 }
          float v240 = _S4 * _S3;
          float v241 = _S6 * _S3;
          float v242 = _S7 * _S3;
          float v243 = (float)((float)(v335 * v225) + (float)(v224 * v336)) + (float)(v226 * v334);
          float v244 = (float)((float)(v332 * v225) + (float)(v224 * v333)) + (float)(v226 * v331);
          float v245 = (float)((float)(v329 * v225) + (float)(v224 * v330)) + (float)(v226 * v328);
          float v246 = (float)((float)(v335 * v230) + (float)(v229 * v336)) + (float)(v231 * v334);
          float v247 = (float)((float)(v332 * v230) + (float)(v229 * v333)) + (float)(v231 * v331);
          float v248 = (float)((float)(v329 * v230) + (float)(v229 * v330)) + (float)(v231 * v328);
          float v249 = (float)((float)(v335 * v234) + (float)(v233 * v336)) + (float)(v235 * v334);
          float v250 = (float)((float)(v332 * v234) + (float)(v233 * v333)) + (float)(v235 * v331);
          _S2 = (float)((float)(v329 * v234) + (float)(v233 * v330)) + (float)(v235 * v328);
          _S0 = (float)(v335 * v241) + (float)(v240 * v336);
          _S1 = (float)(v332 * v241) + (float)(v240 * v333);
          _S4 = (float)(v329 * v241) + (float)(v240 * v330);
          _S5 = _S0 + (float)(v242 * v334);
          float v256 = _S1 + (float)(v242 * v331);
          float v257 = _S4 + (float)(v242 * v328);
          LOWORD(_S0) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v243, 0.0), v194)));
          __asm { FCVT            S27, H0 }
          LOWORD(_S0) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v244, 0.0), v194)));
          __asm { FCVT            S30, H0 }
          LOWORD(_S0) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v245, 0.0), v194)));
          LOWORD(_S1) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v246, 0.0), v194)));
          __asm
          {
            FCVT            S0, H0
            FCVT            S31, H1
          }
          LOWORD(_S1) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v247, 0.0), v194)));
          __asm { FCVT            S10, H1 }
          LOWORD(_S1) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v248, 0.0), v194)));
          __asm { FCVT            S9, H1 }
          LOWORD(_S1) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v249, 0.0), v194)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S4) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v250, 0.0), v194)));
          __asm { FCVT            S11, H4 }
          LOWORD(_S2) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), v194)));
          LOWORD(_S4) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), v194)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S4, H4
          }
          LOWORD(_S5) = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v256, 0.0), v194)));
          unsigned int v268 = llroundf(fminf(fmaxf(v257, 0.0), v194));
          __asm { FCVT            S3, H5 }
          LOWORD(_S5) = *(_WORD *)(v67 + 2 * v268);
          __asm { FCVT            S5, H5 }
          float v271 = (float)((float)((float)(v338 * _S30) + (float)(v339 * _S27)) + (float)(v337 * _S0)) + v59;
          if (v271 < v59) {
            float v272 = v59;
          }
          else {
            float v272 = (float)((float)((float)(v338 * _S30) + (float)(v339 * _S27)) + (float)(v337 * _S0)) + v59;
          }
          BOOL v273 = v271 <= v326;
          float v274 = (float)((float)((float)(v338 * _S10) + (float)(v339 * _S31)) + (float)(v337 * _S9)) + v59;
          if (!v273) {
            float v272 = v326;
          }
          unsigned int v275 = llroundf(v272);
          if (v274 < v59) {
            float v276 = v59;
          }
          else {
            float v276 = (float)((float)((float)(v338 * _S10) + (float)(v339 * _S31)) + (float)(v337 * _S9)) + v59;
          }
          BOOL v273 = v274 <= v326;
          float v277 = (float)((float)((float)(v338 * _S11) + (float)(v339 * _S1)) + (float)(v337 * _S2)) + v59;
          if (!v273) {
            float v276 = v326;
          }
          unsigned int v278 = llroundf(v276);
          if (v277 < v59) {
            float v279 = v59;
          }
          else {
            float v279 = (float)((float)((float)(v338 * _S11) + (float)(v339 * _S1)) + (float)(v337 * _S2)) + v59;
          }
          BOOL v273 = v277 <= v326;
          float v280 = (float)((float)((float)(v338 * _S3) + (float)(v339 * _S4)) + (float)(v337 * _S5)) + v59;
          if (!v273) {
            float v279 = v326;
          }
          unsigned int v281 = llroundf(v279);
          if (v280 < v59) {
            float v282 = v59;
          }
          else {
            float v282 = (float)((float)((float)(v338 * _S3) + (float)(v339 * _S4)) + (float)(v337 * _S5)) + v59;
          }
          if (v280 <= v326) {
            float v283 = v282;
          }
          else {
            float v283 = v326;
          }
          float v284 = (float)((float)(_S27 + _S31) + _S1) + _S4;
          float v285 = (float)((float)(_S30 + _S10) + _S11) + _S3;
          v88->i16[0] = v275 << v91;
          v88->i16[1] = v278 << v91;
          v99->i16[0] = v281 << v91;
          v99->i16[1] = llroundf(v283) << v91;
          float v286 = (float)((float)(_S0 + _S9) + _S2) + _S5;
          float v287 = (float)((float)(v60 + (float)(v284 * *(float *)&v93)) + (float)(v285 * v324))
               + (float)(v286 * *(float *)&v94);
          float v288 = v61;
          if (v287 <= v61)
          {
            float v288 = (float)((float)(v60 + (float)(v284 * *(float *)&v93)) + (float)(v285 * v324))
                 + (float)(v286 * *(float *)&v94);
            if (v287 < v340) {
              float v288 = v340;
            }
          }
          float v289 = (float)((float)(v60 + (float)(v284 * *((float *)&v93 + 1))) + (float)(v285 * v302))
               + (float)(v286 * *((float *)&v94 + 1));
          v98->i16[0] = llroundf(v288) << v91;
          float v290 = v61;
          _H10 = v323;
          _H12 = v321;
          float16x8_t v81 = v309;
          if (v289 <= v61)
          {
            float v290 = v289;
            if (v289 < v340) {
              float v290 = v340;
            }
          }
          v177 += 2;
          v178 += 32;
          v98->i16[1] = llroundf(v290) << v91;
          float v88 = (uint16x8_t *)((char *)v88 + 4);
          uint64_t v99 = (uint16x8_t *)((char *)v99 + 4);
          uint64_t v98 = (uint16x8_t *)((char *)v98 + 4);
          _S17 = v325;
          _S18 = v327;
          float16x8_t v72 = v322;
        }
        while (v14 > v177);
      }
      uint64_t v32 = v299;
      uint64_t v29 = v300;
      uint64_t v89 = v95 + v300;
      float v88 = (uint16x8_t *)&v96[v299];
      v87 += v301;
      v90 += 2;
    }
    while (v298 > v90);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf420_GCD(unint64_t result, uint64_t a2, float a3, float a4)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = 2 * *(unsigned __int8 *)result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    unint64_t v9 = *(void *)(result + 20);
    uint64_t v10 = *(void *)(result + 44) + 2 * v6;
    unint64_t v11 = 2 * v7 - 2 * v6;
    uint64_t v12 = *(void *)(result + 152);
    uint64_t v13 = *(uint64_t **)(result + 136);
    uint64_t v14 = **(void **)(result + 64);
    uint64_t v15 = *v13;
    uint64_t v16 = v13[1];
    LOWORD(a3) = *(_WORD *)(v12 + 144);
    float v17 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v12 + 146);
    float v18 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v12 + 148);
    float v19 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v12 + 150);
    float v20 = (float)LODWORD(a4);
    float v185 = v20;
    LOWORD(v20) = *(_WORD *)(v12 + 152);
    float v181 = *(float *)(v12 + 40);
    float v182 = *(float *)(v12 + 36);
    float v179 = *(float *)(v12 + 48) * 0.25;
    float v180 = *(float *)(v12 + 44);
    float v177 = *(float *)(v12 + 56) * 0.25;
    float v178 = *(float *)(v12 + 52) * 0.25;
    float v175 = *(float *)(v12 + 64) * 0.25;
    float v176 = *(float *)(v12 + 60) * 0.25;
    float v173 = *(float *)(v12 + 68) * 0.25;
    float v174 = *(float *)(v12 + 72);
    float v171 = *(float *)(v12 + 80);
    float v172 = *(float *)(v12 + 76);
    float v169 = *(float *)(v12 + 88);
    float v170 = *(float *)(v12 + 84);
    float v167 = *(float *)(v12 + 96);
    float v168 = *(float *)(v12 + 92);
    float v21 = *(float *)(v12 + 108);
    float v165 = *(float *)(v12 + 104);
    float v166 = *(float *)(v12 + 100);
    uint64_t v22 = v12 + 164;
    uint64_t v23 = v12 + 16548;
    uint64_t v24 = v12 + 32932;
    float v25 = *(float *)(v12 + 112);
    float v26 = *(float *)(v12 + 116);
    float v27 = *(float *)(v12 + 120);
    uint64_t v28 = *(void *)(result + 112);
    unint64_t v29 = *(void *)(result + 104) * a2 / v5;
    uint64_t v30 = *(void **)(result + 128);
    uint64_t v31 = *(void *)(result + 120) + 2 * v29;
    uint64_t v32 = **(void **)(result + 56) + v14 * v10 + 16 * *(void *)(result + 36);
    uint64_t v33 = v30[1];
    uint64_t v34 = (char *)(*v30 + v31 * v15 + 2 * v28);
    unsigned int v35 = *(unsigned __int8 *)(v12 + 132);
    if (v35 >= 0x11) {
      char v36 = 0;
    }
    else {
      char v36 = 16 - v35;
    }
    uint64_t result = *(unsigned __int8 *)(v12 + 156);
    if (v31 >= 0) {
      uint64_t v37 = v31;
    }
    else {
      uint64_t v37 = v31 + 1;
    }
    uint64_t v38 = v33 + (v37 >> 1) * v16;
    uint64_t v39 = *(unsigned __int8 *)(v12 + 155);
    uint64_t v40 = *(unsigned __int8 *)(v12 + 154);
    uint64_t v41 = v38 + 2 * v28;
    char v42 = v36;
    float32x2_t v43 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    float v183 = (float)LODWORD(v20);
    float v184 = v18;
    float v163 = v21;
    float v164 = v25;
    float v162 = v26;
    do
    {
      __int32 v44 = &v34[v15];
      uint64_t v45 = v32 + v14;
      if (v9)
      {
        unint64_t v46 = 0;
        uint64_t v47 = v32 + v14;
        __int32 v48 = &v34[v15];
        do
        {
          v49.i32[0] = *(_DWORD *)(v32 + 4 * v40);
          v49.i32[1] = *(_DWORD *)(v32 + 4 * v39);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v49, v43), 0), v43)));
          uint64_t v51 = v32 + 16;
          _D1.i16[0] = *(_WORD *)(v22 + 2 * _D1.u32[0]);
          __asm { FCVT            S15, H1 }
          _D1.i16[0] = *(_WORD *)(v22 + 2 * _D1.u32[1]);
          _D3.i32[0] = *(_DWORD *)(v32 + 4 * result);
          _D3.i32[1] = *(_DWORD *)(v32 + 16 + 4 * v40);
          __asm { FCVT            S16, H1 }
          int32x2_t v59 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D3, v43), 0), v43)));
          _D3.i16[0] = *(_WORD *)(v22 + 2 * v59.u32[0]);
          __asm { FCVT            S17, H3 }
          float v61 = fmaxf(_S15, fmaxf(_S16, _S17));
          float v62 = (float)((float)((float)(v25 * _S16) + (float)(v21 * _S15)) + (float)(v26 * _S17)) + (float)(v27 * v61);
          float v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            float v63 = (float)((float)((float)(v25 * _S16) + (float)(v21 * _S15)) + (float)(v26 * _S17)) + (float)(v27 * v61);
            if (v62 < 0.0) {
              float v63 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v22 + 2 * v59.u32[1]);
          __asm { FCVT            S19, H1 }
          v66.i32[0] = *(_DWORD *)(v51 + 4 * v39);
          v66.i32[1] = *(_DWORD *)(v51 + 4 * result);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v66, v43), 0), v43)));
          _D1.i16[0] = *(_WORD *)(v22 + 2 * _D1.u32[0]);
          __asm { FCVT            S20, H1 }
          _D1.i16[0] = *(_WORD *)(v22 + 2 * _D1.u32[1]);
          __asm { FCVT            S22, H1 }
          float v70 = (float)((float)((float)(v25 * _S20) + (float)(v21 * _S19)) + (float)(v26 * _S22))
              + (float)(v27 * fmaxf(_S19, fmaxf(_S20, _S22)));
          float v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            float v71 = v70;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          v72.i32[0] = *(_DWORD *)(v47 + 4 * v40);
          v72.i32[1] = *(_DWORD *)(v47 + 4 * v39);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v72, v43), 0), v43)));
          uint64_t v74 = v47 + 16;
          _D1.i16[0] = *(_WORD *)(v22 + 2 * _D1.u32[0]);
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v22 + 2 * _D1.u32[1]);
          _D5.i32[0] = *(_DWORD *)(v47 + 4 * result);
          _D5.i32[1] = *(_DWORD *)(v47 + 16 + 4 * v40);
          __asm { FCVT            S12, H4 }
          int32x2_t v79 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D5, v43), 0), v43)));
          _D5.i16[0] = *(_WORD *)(v22 + 2 * v79.u32[0]);
          __asm { FCVT            S5, H5 }
          float v81 = fmaxf(_S1, fmaxf(_S12, _S5));
          float v82 = (float)((float)((float)(v25 * _S12) + (float)(v21 * _S1)) + (float)(v26 * _S5)) + (float)(v27 * v81);
          float v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v83 = (float)((float)((float)(v25 * _S12) + (float)(v21 * _S1)) + (float)(v26 * _S5)) + (float)(v27 * v81);
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v22 + 2 * v79.u32[1]);
          __asm { FCVT            S6, H4 }
          v86.i32[0] = *(_DWORD *)(v74 + 4 * v39);
          v86.i32[1] = *(_DWORD *)(v74 + 4 * result);
          _D4 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v86, v43), 0), v43)));
          _D4.i16[0] = *(_WORD *)(v22 + 2 * _D4.u32[0]);
          __asm { FCVT            S23, H4 }
          _D4.i16[0] = *(_WORD *)(v22 + 2 * _D4.u32[1]);
          __asm { FCVT            S24, H4 }
          _D4.i16[0] = *(_WORD *)(v23 + 2 * llroundf(v63));
          __asm { FCVT            S7, H4 }
          float v91 = _S15 * _S7;
          float v92 = _S16 * _S7;
          float v93 = _S17 * _S7;
          _H3 = *(_WORD *)(v23 + 2 * llroundf(v71));
          __asm { FCVT            S3, H3 }
          float v96 = _S19 * _S3;
          float v97 = _S20 * _S3;
          float v98 = _S22 * _S3;
          LOWORD(_S3) = *(_WORD *)(v23 + 2 * llroundf(v83));
          __asm { FCVT            S3, H3 }
          float v100 = _S1 * _S3;
          float v101 = _S12 * _S3;
          float v102 = _S5 * _S3;
          float v103 = (float)((float)((float)(v25 * _S23) + (float)(v21 * _S6)) + (float)(v26 * _S24))
               + (float)(v27 * fmaxf(_S6, fmaxf(_S23, _S24)));
          float v104 = 8191.0;
          if (v103 <= 8191.0)
          {
            float v104 = v103;
            if (v103 < 0.0) {
              float v104 = 0.0;
            }
          }
          _H5 = *(_WORD *)(v23 + 2 * llroundf(v104));
          __asm { FCVT            S5, H5 }
          _S6 = _S6 * _S5;
          float v108 = _S23 * _S5;
          float v109 = _S24 * _S5;
          float v110 = (float)((float)(v172 * v92) + (float)(v91 * v174)) + (float)(v93 * v171);
          float v111 = (float)((float)(v169 * v92) + (float)(v91 * v170)) + (float)(v93 * v168);
          _S4 = (float)((float)(v166 * v92) + (float)(v91 * v167)) + (float)(v93 * v165);
          float v113 = (float)((float)(v172 * v97) + (float)(v96 * v174)) + (float)(v98 * v171);
          float v114 = (float)((float)(v169 * v97) + (float)(v96 * v170)) + (float)(v98 * v168);
          float v115 = (float)((float)(v166 * v97) + (float)(v96 * v167)) + (float)(v98 * v165);
          float v116 = (float)((float)(v172 * v101) + (float)(v100 * v174)) + (float)(v102 * v171);
          float v117 = (float)((float)(v169 * v101) + (float)(v100 * v170)) + (float)(v102 * v168);
          float v118 = (float)((float)(v166 * v101) + (float)(v100 * v167)) + (float)(v102 * v165);
          float v119 = (float)((float)(v172 * v108) + (float)(_S6 * v174)) + (float)(v109 * v171);
          float v120 = (float)((float)(v169 * v108) + (float)(_S6 * v170)) + (float)(v109 * v168);
          float v121 = (float)((float)(v166 * v108) + (float)(_S6 * v167)) + (float)(v109 * v165);
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S16, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S17, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H1
            FCVT            S18, H4
          }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm { FCVT            S20, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          __asm { FCVT            S19, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S4) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          __asm { FCVT            S22, H4 }
          LOWORD(_S4) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H4
            FCVT            S4, H6
          }
          LOWORD(_S6) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          unsigned int v138 = llroundf(fminf(fmaxf(v121, 0.0), 8191.0));
          __asm { FCVT            S5, H6 }
          LOWORD(_S6) = *(_WORD *)(v24 + 2 * v138);
          __asm { FCVT            S6, H6 }
          float v141 = (float)((float)((float)(v181 * _S17) + (float)(v182 * _S16)) + (float)(v180 * _S3)) + v17;
          if (v141 < v17) {
            float v142 = v17;
          }
          else {
            float v142 = (float)((float)((float)(v181 * _S17) + (float)(v182 * _S16)) + (float)(v180 * _S3)) + v17;
          }
          BOOL v143 = v141 <= v19;
          float v144 = (float)((float)((float)(v181 * _S20) + (float)(v182 * _S18)) + (float)(v180 * _S19)) + v17;
          if (!v143) {
            float v142 = v19;
          }
          unsigned int v145 = llroundf(v142);
          if (v144 < v17) {
            float v146 = v17;
          }
          else {
            float v146 = (float)((float)((float)(v181 * _S20) + (float)(v182 * _S18)) + (float)(v180 * _S19)) + v17;
          }
          BOOL v143 = v144 <= v19;
          float v147 = (float)((float)((float)(v181 * _S22) + (float)(v182 * _S1)) + (float)(v180 * _S12)) + v17;
          if (!v143) {
            float v146 = v19;
          }
          unsigned int v148 = llroundf(v146);
          if (v147 < v17) {
            float v149 = v17;
          }
          else {
            float v149 = (float)((float)((float)(v181 * _S22) + (float)(v182 * _S1)) + (float)(v180 * _S12)) + v17;
          }
          BOOL v143 = v147 <= v19;
          float v150 = (float)((float)((float)(v181 * _S5) + (float)(v182 * _S4)) + (float)(v180 * _S6)) + v17;
          if (!v143) {
            float v149 = v19;
          }
          unsigned int v151 = llroundf(v149);
          if (v150 < v17) {
            float v152 = v17;
          }
          else {
            float v152 = (float)((float)((float)(v181 * _S5) + (float)(v182 * _S4)) + (float)(v180 * _S6)) + v17;
          }
          if (v150 <= v19) {
            float v153 = v152;
          }
          else {
            float v153 = v19;
          }
          float v154 = (float)((float)(_S16 + _S18) + _S1) + _S4;
          float v155 = (float)((float)(_S17 + _S20) + _S22) + _S5;
          *(_WORD *)uint64_t v34 = v145 << v42;
          *((_WORD *)v34 + 1) = v148 << v42;
          *(_WORD *)__int32 v48 = v151 << v42;
          *((_WORD *)v48 + 1) = llroundf(v153) << v42;
          float v156 = (float)((float)(_S3 + _S19) + _S12) + _S6;
          float v157 = (float)((float)(v184 + (float)(v154 * v179)) + (float)(v155 * v178)) + (float)(v156 * v177);
          float v158 = v183;
          if (v157 <= v183)
          {
            float v158 = (float)((float)(v184 + (float)(v154 * v179)) + (float)(v155 * v178)) + (float)(v156 * v177);
            if (v157 < v185) {
              float v158 = v185;
            }
          }
          uint64_t v159 = (_WORD *)(v41 + 2 * v46);
          float v160 = (float)((float)(v184 + (float)(v154 * v176)) + (float)(v155 * v175)) + (float)(v156 * v173);
          *uint64_t v159 = llroundf(v158) << v42;
          float v161 = v183;
          if (v160 <= v183)
          {
            float v161 = v160;
            if (v160 < v185) {
              float v161 = v185;
            }
          }
          v32 += 32;
          v47 += 32;
          v34 += 4;
          v48 += 4;
          v159[1] = llroundf(v161) << v42;
          v46 += 2;
          float v21 = v163;
          float v25 = v164;
          float v26 = v162;
        }
        while (v9 > v46);
      }
      uint64_t v32 = v45 + v14;
      uint64_t v34 = &v44[v15];
      v41 += v16;
      v8 += 2;
    }
    while (v11 > v8);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_xf420_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, float32x4_t a6, float32x4_t a7, double a8, uint8x8_t a9, __n128 _Q7)
{
  uint64_t v11 = 0;
  unint64_t v12 = *(void *)(a1 + 20);
  uint64_t v13 = *(void *)(a1 + 36);
  uint64_t v14 = *(void *)(a1 + 44);
  uint64_t v15 = *(void *)(a1 + 28);
  unint64_t v16 = 2 * *a1;
  uint64_t v17 = 2 * (v15 * a2 / v16);
  uint64_t v18 = v14 + v17;
  uint64_t v19 = 2 * ((v15 + v15 * a2) / v16);
  uint64_t v20 = v14 + v19;
  uint64_t v21 = *((void *)a1 + 14);
  unint64_t v22 = *((void *)a1 + 13) * a2;
  uint64_t v23 = *((void *)a1 + 19);
  uint64_t v25 = *((void *)a1 + 15);
  uint64_t v24 = (uint64_t *)*((void *)a1 + 16);
  float v26 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v27 = **((void **)a1 + 8);
  uint64_t result = **((void **)a1 + 7);
  uint64_t v30 = *v26;
  uint64_t v29 = v26[1];
  uint64_t v31 = *v24;
  uint64_t v32 = v24[1];
  a9.i32[0] = *(_DWORD *)(v23 + 154);
  __int32 v289 = a9.i32[0];
  unsigned int v33 = *(unsigned __int16 *)(v23 + 144);
  unsigned int v34 = *(unsigned __int8 *)(v23 + 132);
  unsigned int v35 = *(unsigned __int16 *)(v23 + 146);
  unsigned int v36 = *(unsigned __int16 *)(v23 + 148);
  unsigned int v37 = *(unsigned __int16 *)(v23 + 150);
  unsigned int v38 = *(unsigned __int16 *)(v23 + 152);
  float v285 = *(float *)(v23 + 36);
  float v284 = *(float *)(v23 + 40);
  v39.i32[0] = *(_DWORD *)(v23 + 48);
  float v283 = *(float *)(v23 + 44);
  uint64_t v40 = v25 + 2 * (v22 / v16);
  v42.i32[0] = *(_DWORD *)(v23 + 52);
  v41.i32[0] = *(_DWORD *)(v23 + 56);
  __int32 v43 = *(_DWORD *)(v23 + 60);
  v10.i32[0] = *(_DWORD *)(v23 + 64);
  if (v40 >= 0) {
    uint64_t v44 = v40;
  }
  else {
    uint64_t v44 = v40 + 1;
  }
  __int32 v45 = *(_DWORD *)(v23 + 68);
  float v282 = *(float *)(v23 + 72);
  float v46 = *(float *)(v23 + 76);
  _S25 = *(float *)(v23 + 80);
  uint64_t v258 = v29;
  uint64_t v48 = v29 * (v44 >> 1);
  uint16x8_t v49 = vmovl_u8(a9);
  _S28 = *(float *)(v23 + 84);
  float v281 = *(float *)(v23 + 88);
  _S16 = *(float *)(v23 + 92);
  _S17 = *(float *)(v23 + 96);
  _S18 = *(float *)(v23 + 100);
  _S19 = *(float *)(v23 + 104);
  memset(v288, 0, sizeof(v288));
  do
  {
    unsigned int v55 = 0;
    char v56 = *((unsigned char *)&v289 + v11);
    do
    {
      *((unsigned char *)v288 + 8 * (((_BYTE)v11 + (v55 >> 3)) & 0x1F) + v55) = v56 + 4 * v55;
      ++v55;
    }
    while (v55 != 8);
    ++v11;
  }
  while (v11 != 4);
  float v259 = v46;
  if (v19 != v17)
  {
    unint64_t v257 = v20 - v18;
    float v57 = (float)v33;
    float v287 = (float)v35;
    float v58 = (float)v36;
    float v286 = (float)v37;
    uint64_t v59 = v23 + 16548;
    uint64_t v60 = v23 + 164;
    float v61 = (float)v38;
    v39.i32[1] = v43;
    __asm { FMOV            V2.2S, #0.25 }
    *(float32x2_t *)a6.f32 = vmul_f32(v39, _D2);
    v42.i32[1] = v10.i32[0];
    *(float32x2_t *)a7.f32 = vmul_f32(v42, _D2);
    v41.i32[1] = v45;
    *(float32x2_t *)v10.f32 = vmul_f32(v41, _D2);
    int32x4_t v67 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a6), 0);
    _S0 = v285;
    __asm { FCVT            H5, S0 }
    int32x4_t v70 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a7), 0);
    _S0 = v284;
    __asm { FCVT            H7, S0 }
    int16x4_t v72 = (int16x4_t)vcvt_f16_f32(v10);
    int32x4_t v73 = vdupq_lane_s32((int32x2_t)v72, 0);
    _S0 = v283;
    __asm { FCVT            H8, S0 }
    _S0 = v282;
    __asm { FCVT            H9, S0 }
    _S0 = v259;
    __asm
    {
      FCVT            H10, S0
      FCVT            H11, S25
      FCVT            H12, S28
    }
    _S0 = v281;
    __asm
    {
      FCVT            H0, S0
      FCVT            H13, S16
      FCVT            H14, S17
      FCVT            H15, S18
    }
    *(short float *)v72.i16 = (short float)v33;
    float16x8_t v87 = (float16x8_t)vdupq_lane_s16(v72, 0);
    *(short float *)v72.i16 = (short float)v35;
    int16x8_t v88 = vdupq_lane_s16(v72, 0);
    *(short float *)v72.i16 = (short float)v36;
    int16x8_t v89 = vdupq_lane_s16(v72, 0);
    float16x8_t v264 = (float16x8_t)v89;
    float16x8_t v265 = (float16x8_t)v88;
    *(short float *)v89.i16 = (short float)v37;
    _Q1 = vdupq_lane_s16(*(int16x4_t *)v89.i8, 0);
    *(short float *)v89.i16 = (short float)v38;
    float16x8_t v262 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v89.i8, 0);
    float16x8_t v263 = (float16x8_t)_Q1;
    __asm { FCVT            H1, S19 }
    short float v261 = *(short float *)_Q1.i16;
    unsigned __int8 v91 = 16 - v34;
    _CF = v34 >= 0x11;
    unint64_t v92 = 0;
    if (_CF) {
      unsigned __int8 v91 = 0;
    }
    uint64_t v93 = v32 + v48 + 2 * v21;
    unint64_t v94 = (uint16x8_t *)(v31 + v30 * v40 + 2 * v21);
    uint64_t v95 = result + v27 * v18 + 16 * v13;
    uint64_t result = (v12 - 7);
    unsigned __int8 v96 = v91;
    uint16x8_t v97 = (uint16x8_t)vdupq_n_s16(v91);
    float v280 = a7.f32[0];
    unint64_t v98 = a6.i64[0];
    float16x8_t v279 = (float16x8_t)v67;
    uint64_t v99 = v10.i64[0];
    float v260 = a7.f32[1];
    uint64_t v249 = v49.u16[1];
    float v100 = (float *)&unk_193E7D000;
    v101.i64[0] = 0x9000900090009000;
    v101.i64[1] = 0x9000900090009000;
    float16x8_t v277 = (float16x8_t)v70;
    short float v278 = _H5;
    float16x8_t v275 = (float16x8_t)v73;
    __n128 v276 = _Q7;
    short float v273 = _H9;
    short float v274 = _H8;
    short float v271 = _H11;
    short float v272 = _H10;
    short float v269 = _H0;
    short float v270 = _H12;
    short float v267 = _H14;
    short float v268 = _H13;
    short float v266 = _H15;
    uint16x8_t v256 = v97;
    uint64_t v250 = v30;
    uint64_t v251 = v27;
    float v248 = _S25;
    do
    {
      uint64_t v102 = v95 + v27;
      float v103 = &v94->i8[v30];
      if ((int)v12 < 8)
      {
        unint64_t v175 = 0;
        float16x8_t v107 = (const float *)(v95 + v27);
        float16x8_t v106 = (uint16x8_t *)((char *)v94 + v30);
        float16x8_t v105 = (uint16x8_t *)v93;
        float v176 = v259;
      }
      else
      {
        uint64_t v254 = v93;
        unint64_t v255 = v92;
        int v104 = 0;
        float16x8_t v105 = (uint16x8_t *)v93;
        float v252 = &v94->i8[v30];
        uint64_t v253 = v95 + v27;
        float16x8_t v106 = (uint16x8_t *)((char *)v94 + v30);
        float16x8_t v107 = (const float *)(v95 + v27);
        v108.i64[0] = 0x7000700070007000;
        v108.i64[1] = 0x7000700070007000;
        do
        {
          float v109 = (const float *)v95;
          float32x4x4_t v293 = vld4q_f32(v109);
          v109 += 16;
          float32x4x4_t v292 = vld4q_f32(v109);
          float v110 = v107;
          float32x4x4_t v290 = vld4q_f32(v110);
          v110 += 16;
          float32x4x4_t v291 = vld4q_f32(v110);
          float16x8_t v111 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v293.val[0]), v292.val[0]);
          float16x8_t v112 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v293.val[1]), v292.val[1]);
          *(float16x4_t *)v292.val[0].f32 = vcvt_f16_f32(v290.val[0]);
          v292.val[1] = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v290.val[1]), v291.val[1]);
          v290.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v111, v108), (float16x8_t)0), v101));
          v290.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v290.val[0]);
          v290.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v290.val[0].f32);
          v113.i64[0] = v290.val[1].u32[2];
          v113.i64[1] = v290.val[1].u32[3];
          v290.val[3] = v113;
          v113.i64[0] = v290.val[1].u32[0];
          v113.i64[1] = v290.val[1].u32[1];
          v290.val[1] = v113;
          v113.i64[1] = v290.val[0].u32[3];
          v111.i16[0] = *(_WORD *)(v60 + 2 * v290.val[0].u32[0]);
          uint64_t v114 = v290.val[1].i64[1];
          float v115 = (__int16 *)(v60 + 2 * v290.val[0].u32[2]);
          float v116 = (__int16 *)(v60 + 2 * v290.val[1].i64[0]);
          float v117 = (__int16 *)(v60 + 2 * v290.val[0].u32[1]);
          v290.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v112, v108), (float16x8_t)0), v101));
          v290.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v290.val[0]);
          float v118 = (__int16 *)(v60 + 2 * v113.i64[1]);
          v290.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v290.val[0].f32);
          float v119 = (__int16 *)(v60 + 2 * v114);
          v293.val[1].i16[0] = *(_WORD *)(v60 + 2 * v290.val[0].u32[0]);
          float v120 = (__int16 *)(v60 + 2 * v290.val[0].u32[1]);
          float v121 = (__int16 *)(v60 + 2 * v290.val[0].u32[2]);
          uint64_t v122 = (__int16 *)(v60 + 2 * v290.val[1].u32[0]);
          uint64_t v123 = v290.val[1].u32[3];
          float v124 = (__int16 *)(v60 + 2 * v290.val[0].u32[3]);
          float v125 = (__int16 *)(v60 + 2 * v290.val[1].u32[2]);
          v290.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v293.val[2]), v292.val[2]), v108), (float16x8_t)0), v101));
          float v126 = (__int16 *)(v60 + 2 * v290.val[1].u32[1]);
          v290.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v290.val[0]);
          v290.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v290.val[0].f32);
          v111.i16[1] = *v117;
          v113.i64[1] = v290.val[1].u32[3];
          v293.val[2].i16[0] = *(_WORD *)(v60 + 2 * v290.val[0].u32[0]);
          v293.val[1].i16[1] = *v120;
          v111.i16[2] = *v115;
          float v127 = (__int16 *)(v60 + 2 * v290.val[1].u32[0]);
          v293.val[1].i16[2] = *v121;
          float v128 = (__int16 *)(v60 + 2 * v290.val[1].u32[1]);
          v111.i16[3] = *v118;
          float v129 = (__int16 *)(v60 + 2 * v290.val[1].u32[2]);
          v293.val[2].i16[1] = *(_WORD *)(v60 + 2 * v290.val[0].u32[1]);
          v293.val[1].i16[3] = *v124;
          v293.val[2].i16[2] = *(_WORD *)(v60 + 2 * v290.val[0].u32[2]);
          v293.val[2].i16[3] = *(_WORD *)(v60 + 2 * v290.val[0].u32[3]);
          v290.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32(*(int16x4_t *)v292.val[0].f32, v291.val[0]), v108), (float16x8_t)0), v101));
          v290.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v290.val[0]);
          v290.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v290.val[0].f32);
          v111.i16[4] = *v116;
          v293.val[1].i16[4] = *v122;
          v293.val[2].i16[4] = *v127;
          v292.val[0].i16[0] = *(_WORD *)(v60 + 2 * v290.val[0].u32[0]);
          float v130 = (__int16 *)(v60 + 2 * v290.val[0].u32[1]);
          uint64_t v131 = (__int16 *)(v60 + 2 * v290.val[0].u32[2]);
          uint64_t v132 = (__int16 *)(v60 + 2 * v290.val[0].u32[3]);
          uint64_t v133 = (__int16 *)(v60 + 2 * v290.val[1].u32[0]);
          v111.i16[5] = *v119;
          uint64_t v134 = (__int16 *)(v60 + 2 * v290.val[1].u32[1]);
          v293.val[1].i16[5] = *v126;
          uint64_t v135 = (__int16 *)(v60 + 2 * v290.val[1].u32[2]);
          uint64_t v136 = (__int16 *)(v60 + 2 * v290.val[1].u32[3]);
          v293.val[2].i16[5] = *v128;
          v290.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v292.val[1], v108), (float16x8_t)0), v101));
          v290.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v290.val[0]);
          v290.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v290.val[0].f32);
          v292.val[0].i16[1] = *v130;
          v111.i16[6] = *(_WORD *)(v60 + 2 * v290.val[3].i64[0]);
          v293.val[1].i16[6] = *v125;
          v112.i16[0] = *(_WORD *)(v60 + 2 * v290.val[0].u32[0]);
          v293.val[2].i16[6] = *v129;
          uint64_t v137 = (__int16 *)(v60 + 2 * v290.val[0].u32[3]);
          v292.val[0].i16[2] = *v131;
          unsigned int v138 = (__int16 *)(v60 + 2 * v290.val[1].u32[0]);
          v111.i16[7] = *(_WORD *)(v60 + 2 * v290.val[3].i64[1]);
          uint64_t v139 = (__int16 *)(v60 + 2 * v290.val[1].u32[1]);
          float16x8_t v140 = (__int16 *)(v60 + 2 * v290.val[1].u32[2]);
          float v141 = (__int16 *)(v60 + 2 * v290.val[1].u32[3]);
          v293.val[1].i16[7] = *(_WORD *)(v60 + 2 * v123);
          v112.i16[1] = *(_WORD *)(v60 + 2 * v290.val[0].u32[1]);
          v112.i16[2] = *(_WORD *)(v60 + 2 * v290.val[0].u32[2]);
          v293.val[2].i16[7] = *(_WORD *)(v60 + 2 * v113.i64[1]);
          v290.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v290.val[2]), v291.val[2]), v108), (float16x8_t)0), v101));
          v290.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v290.val[0]);
          v292.val[0].i16[3] = *v132;
          v290.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v290.val[0].f32);
          v112.i16[3] = *v137;
          v113.i64[0] = v290.val[1].u32[2];
          v113.i64[1] = v290.val[1].u32[3];
          v290.val[2] = v113;
          v113.i64[0] = v290.val[1].u32[0];
          v113.i64[1] = v290.val[1].u32[1];
          v292.val[0].i16[4] = *v133;
          v112.i16[4] = *v138;
          v292.val[0].i16[5] = *v134;
          v290.val[1].i16[0] = *(_WORD *)(v60 + 2 * v290.val[0].u32[0]);
          v112.i16[5] = *v139;
          v292.val[0].i16[6] = *v135;
          v290.val[1].i16[1] = *(_WORD *)(v60 + 2 * v290.val[0].u32[1]);
          v112.i16[6] = *v140;
          v290.val[1].i16[2] = *(_WORD *)(v60 + 2 * v290.val[0].u32[2]);
          v290.val[1].i16[3] = *(_WORD *)(v60 + 2 * v290.val[0].u32[3]);
          v292.val[0].i16[7] = *v136;
          v290.val[1].i16[4] = *(_WORD *)(v60 + 2 * v113.i64[0]);
          v290.val[1].i16[5] = *(_WORD *)(v60 + 2 * v113.i64[1]);
          v112.i16[7] = *v141;
          v290.val[1].i16[6] = *(_WORD *)(v60 + 2 * v290.val[2].i64[0]);
          v290.val[1].i16[7] = *(_WORD *)(v60 + 2 * v290.val[2].i64[1]);
          v290.val[0] = (float32x4_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v111, v273), (float16x8_t)v293.val[1], v272), (float16x8_t)v293.val[2], v271);
          v293.val[0] = (float32x4_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v111, v270), (float16x8_t)v293.val[1], v269), (float16x8_t)v293.val[2], v268);
          v292.val[2] = (float32x4_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v293.val[2], v261), (float16x8_t)v293.val[1], v266), v111, v267);
          v292.val[1] = (float32x4_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v292.val[0], v273), v112, v272), (float16x8_t)v290.val[1], v271);
          v291.val[3] = (float32x4_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v292.val[0], v270), v112, v269), (float16x8_t)v290.val[1], v268);
          v293.val[1] = (float32x4_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v290.val[1], v261), v112, v266), (float16x8_t)v292.val[0], v267);
          v290.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v290.val[0], (float16x8_t)0), v101));
          v290.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v290.val[0]);
          v290.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v290.val[0].f32);
          uint64_t v142 = v290.val[0].u32[1];
          uint64_t v143 = v290.val[0].u32[3];
          v111.i16[0] = *(_WORD *)(v59 + 2 * v290.val[0].u32[0]);
          uint64_t v144 = v290.val[1].u32[1];
          unsigned int v145 = (__int16 *)(v59 + 2 * v290.val[0].u32[2]);
          float v146 = (__int16 *)(v59 + 2 * v290.val[1].u32[0]);
          uint64_t v147 = v290.val[1].u32[3];
          unsigned int v148 = (__int16 *)(v59 + 2 * v290.val[1].u32[2]);
          v290.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v293.val[0], (float16x8_t)0), v101));
          v290.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v290.val[0]);
          v290.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v290.val[0].f32);
          float v149 = (__int16 *)(v59 + 2 * v142);
          float v150 = (__int16 *)(v59 + 2 * v143);
          unsigned int v151 = (__int16 *)(v59 + 2 * v144);
          v293.val[0].i16[0] = *(_WORD *)(v59 + 2 * v290.val[0].u32[0]);
          float v152 = (__int16 *)(v59 + 2 * v290.val[0].u32[2]);
          uint64_t v153 = v290.val[1].u32[1];
          float v154 = (__int16 *)(v59 + 2 * v290.val[0].u32[1]);
          float v155 = (__int16 *)(v59 + 2 * v290.val[1].u32[0]);
          uint64_t v156 = v290.val[1].u32[3];
          float v157 = (__int16 *)(v59 + 2 * v290.val[0].u32[3]);
          float v158 = (__int16 *)(v59 + 2 * v290.val[1].u32[2]);
          v290.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v292.val[2], (float16x8_t)0), v101));
          v290.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v290.val[0]);
          v290.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v290.val[0].f32);
          v111.i16[1] = *v149;
          v293.val[0].i16[1] = *v154;
          v293.val[2].i16[0] = *(_WORD *)(v59 + 2 * v290.val[0].u32[0]);
          v111.i16[2] = *v145;
          v293.val[0].i16[2] = *v152;
          uint64_t v159 = (__int16 *)(v59 + 2 * v290.val[1].u32[0]);
          v111.i16[3] = *v150;
          float v160 = (__int16 *)(v59 + 2 * v290.val[1].u32[1]);
          uint64_t v161 = v290.val[1].u32[3];
          uint64_t v162 = v290.val[1].u32[2];
          v293.val[0].i16[3] = *v157;
          v293.val[2].i16[1] = *(_WORD *)(v59 + 2 * v290.val[0].u32[1]);
          v293.val[2].i16[2] = *(_WORD *)(v59 + 2 * v290.val[0].u32[2]);
          v293.val[2].i16[3] = *(_WORD *)(v59 + 2 * v290.val[0].u32[3]);
          v290.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v292.val[1], (float16x8_t)0), v101));
          v290.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v290.val[0]);
          v111.i16[4] = *v146;
          v290.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v290.val[0].f32);
          v293.val[0].i16[4] = *v155;
          v293.val[2].i16[4] = *v159;
          v292.val[0].i16[0] = *(_WORD *)(v59 + 2 * v290.val[0].u32[0]);
          float v163 = (__int16 *)(v59 + 2 * v290.val[0].u32[1]);
          float v164 = (__int16 *)(v59 + 2 * v290.val[0].u32[2]);
          uint64_t v165 = v290.val[1].u32[1];
          float v166 = (__int16 *)(v59 + 2 * v290.val[1].u32[0]);
          float v167 = (__int16 *)(v59 + 2 * v290.val[0].u32[3]);
          uint64_t v168 = v290.val[1].u32[3];
          uint64_t v169 = v290.val[1].u32[2];
          v111.i16[5] = *v151;
          v290.val[0] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v291.val[3], (float16x8_t)0), v101));
          v290.val[1] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v290.val[0].f32);
          v293.val[0].i16[5] = *(_WORD *)(v59 + 2 * v153);
          v293.val[2].i16[5] = *v160;
          v292.val[1].i16[0] = *(_WORD *)(v59 + 2 * v290.val[1].u32[0]);
          v292.val[0].i16[1] = *v163;
          v290.val[0] = (float32x4_t)vmovl_high_u16((uint16x8_t)v290.val[0]);
          v111.i16[6] = *v148;
          uint64_t v170 = v290.val[0].u32[1];
          v293.val[0].i16[6] = *v158;
          v292.val[1].i16[1] = *(_WORD *)(v59 + 2 * v290.val[1].u32[1]);
          uint64_t v171 = v290.val[0].u32[0];
          v292.val[0].i16[2] = *v164;
          v292.val[1].i16[2] = *(_WORD *)(v59 + 2 * v290.val[1].u32[2]);
          uint64_t v172 = v290.val[0].u32[3];
          v292.val[0].i16[3] = *v167;
          uint64_t v173 = v290.val[0].u32[2];
          uint16x8_t v174 = vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v293.val[1], (float16x8_t)0), v101));
          v292.val[1].i16[3] = *(_WORD *)(v59 + 2 * v290.val[1].u32[3]);
          v292.val[2] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v174.i8);
          v292.val[0].i16[4] = *v166;
          v290.val[0] = (float32x4_t)vuzp1q_s16((int16x8_t)v111, (int16x8_t)v293.val[0]);
          v111.i16[7] = *(_WORD *)(v59 + 2 * v147);
          v293.val[0].i16[7] = *(_WORD *)(v59 + 2 * v156);
          v292.val[0].i16[5] = *(_WORD *)(v59 + 2 * v165);
          v292.val[1].i16[4] = *(_WORD *)(v59 + 2 * v171);
          v292.val[1].i16[5] = *(_WORD *)(v59 + 2 * v170);
          v292.val[0].i16[6] = *(_WORD *)(v59 + 2 * v169);
          v290.val[1] = (float32x4_t)vmovl_high_u16(v174);
          v292.val[1].i16[6] = *(_WORD *)(v59 + 2 * v173);
          v290.val[2] = (float32x4_t)vuzp1q_s16((int16x8_t)v292.val[0], (int16x8_t)v292.val[1]);
          v292.val[0].i16[7] = *(_WORD *)(v59 + 2 * v168);
          v292.val[1].i16[7] = *(_WORD *)(v59 + 2 * v172);
          v291.val[2].i16[7] = v276.n128_i16[7];
          v291.val[2].i16[0] = *(_WORD *)(v59 + 2 * v292.val[2].u32[0]);
          v291.val[2].i16[1] = *(_WORD *)(v59 + 2 * v292.val[2].u32[1]);
          v291.val[2].i16[2] = *(_WORD *)(v59 + 2 * v292.val[2].u32[2]);
          v293.val[2].i16[6] = *(_WORD *)(v59 + 2 * v162);
          v291.val[2].i16[3] = *(_WORD *)(v59 + 2 * v292.val[2].u32[3]);
          v291.val[2].i16[4] = *(_WORD *)(v59 + 2 * v290.val[1].u32[0]);
          v290.val[0] = (float32x4_t)vaddq_f16(vaddq_f16((float16x8_t)v290.val[0], (float16x8_t)vuzp2q_s16((int16x8_t)v111, (int16x8_t)v293.val[0])), (float16x8_t)v290.val[2]);
          v290.val[2] = v293.val[2];
          v291.val[2].i16[5] = *(_WORD *)(v59 + 2 * v290.val[1].u32[1]);
          v291.val[2].i16[6] = *(_WORD *)(v59 + 2 * v290.val[1].u32[2]);
          v290.val[2].i16[7] = *(_WORD *)(v59 + 2 * v161);
          v290.val[0] = (float32x4_t)vaddq_f16((float16x8_t)v290.val[0], (float16x8_t)vuzp2q_s16((int16x8_t)v292.val[0], (int16x8_t)v292.val[1]));
          v290.val[3] = v291.val[2];
          v290.val[3].i16[7] = *(_WORD *)(v59 + 2 * v290.val[1].u32[3]);
          *v94++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v87, v111, v278), (float16x8_t)v293.val[0], *(short float *)v276.n128_u16), (float16x8_t)v290.val[2], v274), v87), v264)), v97);
          *v106++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v87, (float16x8_t)v292.val[0], v278), (float16x8_t)v292.val[1], *(short float *)v276.n128_u16), (float16x8_t)v290.val[3], v274), v87), v264)), v97);
          *v105++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v265, v279, (float16x8_t)vzip1q_s16((int16x8_t)v290.val[0], (int16x8_t)v290.val[0])), v277, (float16x8_t)vzip2q_s16((int16x8_t)v290.val[0], (int16x8_t)v290.val[0])), v275, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v293.val[2], (int16x8_t)v293.val[2]), (float16x8_t)vtrn2q_s16((int16x8_t)v290.val[2], (int16x8_t)v290.val[2])), (float16x8_t)vtrn1q_s16((int16x8_t)v291.val[2], (int16x8_t)v291.val[2])), (float16x8_t)vtrn2q_s16((int16x8_t)v290.val[3], (int16x8_t)v290.val[3]))),
                            v263),
                          v262)),
                      v97);
          v95 += 128;
          v107 += 32;
          v104 += 8;
        }
        while (v104 < (int)result);
        unint64_t v175 = v12 & 0xFFFFFFF8;
        uint64_t v30 = v250;
        uint64_t v27 = v251;
        float v103 = v252;
        uint64_t v93 = v254;
        unint64_t v92 = v255;
        float v176 = v259;
        float v100 = (float *)&unk_193E7D000;
        _S25 = v248;
        uint64_t v102 = v253;
      }
      if (v12 > v175)
      {
        unint64_t v177 = 0;
        uint64_t v178 = v95 + 16;
        uint64_t v179 = v95 + v249 * 4 + 16;
        float v180 = &v107[v249];
        do
        {
          unint64_t v181 = v177 + 4 * v289;
          float v182 = (__int32 *)(v178 + v181);
          v183.i32[0] = *(_DWORD *)(v178 + v181 - 16);
          unint64_t v184 = v177 + 4 * BYTE2(v289);
          float v185 = (__int32 *)(v178 + v184);
          v186.i32[0] = *(_DWORD *)(v178 + v184 - 16);
          v187.i32[0] = *(_DWORD *)(v179 + v177);
          float v188 = (__int32 *)((char *)v107 + v181);
          _D3.i32[0] = *v188;
          v183.i32[1] = *(_DWORD *)(v179 + v177 - 16);
          float32x2_t v190 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v183, v190), 0), v190)));
          _D0.i16[0] = *(_WORD *)(v60 + 2 * _D0.u32[0]);
          float v192 = (__int32 *)((char *)v107 + v184);
          v193.i32[0] = *v192;
          v194.f32[0] = v180[v177 / 4 + 4];
          __asm { FCVT            S21, H0 }
          _D0.i16[0] = *(_WORD *)(v60 + 2 * _D0.u32[1]);
          v186.i32[1] = *v182;
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v186, v190), 0), v190)));
          _D1.i16[0] = *(_WORD *)(v60 + 2 * _D1.u32[0]);
          __asm
          {
            FCVT            S10, H0
            FCVT            S9, H1
          }
          _D0.i16[0] = *(_WORD *)(v60 + 2 * _D1.u32[1]);
          v187.i32[1] = *v185;
          __asm { FCVT            S8, H0 }
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v187, v190), 0), v190)));
          _D0.i16[0] = *(_WORD *)(v60 + 2 * _D0.u32[0]);
          __asm { FCVT            S14, H0 }
          _D0.i16[0] = *(_WORD *)(v60 + 2 * _D0.u32[1]);
          __asm { FCVT            S13, H0 }
          _D3.f32[1] = v180[v177 / 4];
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D3, v190), 0), v190)));
          _D0.i16[0] = *(_WORD *)(v60 + 2 * _D0.u32[0]);
          __asm { FCVT            S0, H0 }
          _D1.i16[0] = *(_WORD *)(v60 + 2 * _D0.u32[1]);
          v193.i32[1] = v188[4];
          _D2 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v193, v190), 0), v190)));
          _D2.i16[0] = *(_WORD *)(v60 + 2 * _D2.u32[0]);
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H2
          }
          _D3.i16[0] = *(_WORD *)(v60 + 2 * _D2.u32[1]);
          v194.i32[1] = v192[4];
          __asm { FCVT            S3, H3 }
          _D4 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v194, v190), 0), v190)));
          _D4.i16[0] = *(_WORD *)(v60 + 2 * _D4.u32[0]);
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v60 + 2 * _D4.u32[1]);
          __asm { FCVT            S5, H5 }
          _S6 = (float)((float)(v176 * _S10) + (float)(_S21 * v282)) + (float)(_S9 * _S25);
          float v209 = (float)((float)(v281 * _S10) + (float)(_S21 * _S28)) + (float)(_S9 * _S16);
          v190.f32[0] = (float)((float)(_S18 * _S10) + (float)(_S21 * _S17)) + (float)(_S9 * _S19);
          float v210 = (float)((float)(v176 * _S14) + (float)(_S8 * v282)) + (float)(_S13 * _S25);
          float v211 = (float)((float)(v281 * _S14) + (float)(_S8 * _S28)) + (float)(_S13 * _S16);
          float v212 = (float)((float)(_S18 * _S14) + (float)(_S8 * _S17)) + (float)(_S13 * _S19);
          float v213 = (float)((float)(v176 * *(float *)_D1.i32) + (float)(*(float *)_D0.i32 * v282))
               + (float)(*(float *)_D2.i32 * _S25);
          float v214 = (float)((float)(v281 * *(float *)_D1.i32) + (float)(*(float *)_D0.i32 * _S28))
               + (float)(*(float *)_D2.i32 * _S16);
          *(float *)_D0.i32 = (float)((float)(_S18 * *(float *)_D1.i32) + (float)(*(float *)_D0.i32 * _S17))
                            + (float)(*(float *)_D2.i32 * _S19);
          *(float *)_D1.i32 = (float)((float)(v176 * *(float *)_D4.i32) + (float)(_D3.f32[0] * v282))
                            + (float)(_S5 * _S25);
          *(float *)_D2.i32 = (float)((float)(v281 * *(float *)_D4.i32) + (float)(_D3.f32[0] * _S28))
                            + (float)(_S5 * _S16);
          _D3.f32[0] = (float)((float)(_S18 * *(float *)_D4.i32) + (float)(_D3.f32[0] * _S17)) + (float)(_S5 * _S19);
          float v215 = v100[70];
          _D4.i16[0] = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), v215)));
          __asm { FCVT            S21, H4 }
          _D4.i16[0] = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v209, 0.0), v215)));
          __asm { FCVT            S8, H4 }
          _D4.i16[0] = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v190.f32[0], 0.0), v215)));
          LOWORD(_S6) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v210, 0.0), v215)));
          __asm
          {
            FCVT            S26, H4
            FCVT            S9, H6
          }
          _D4.i16[0] = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v211, 0.0), v215)));
          __asm { FCVT            S12, H4 }
          _D4.i16[0] = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v212, 0.0), v215)));
          __asm { FCVT            S10, H4 }
          _D4.i16[0] = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v213, 0.0), v215)));
          __asm { FCVT            S13, H4 }
          _D4.i16[0] = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v214, 0.0), v215)));
          __asm { FCVT            S14, H4 }
          _D0.i16[0] = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(*(float *)_D0.i32, 0.0), v215)));
          _D1.i16[0] = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(*(float *)_D1.i32, 0.0), v215)));
          __asm
          {
            FCVT            S15, H0
            FCVT            S0, H1
          }
          _D1.i16[0] = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(*(float *)_D2.i32, 0.0), v215)));
          __asm { FCVT            S1, H1 }
          _D2.i16[0] = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_D3.f32[0], 0.0), v215)));
          __asm { FCVT            S2, H2 }
          float v228 = (float)((float)((float)(v284 * _S8) + (float)(v285 * _S21)) + (float)(v283 * _S26)) + v57;
          if (v228 < v57) {
            float v229 = v57;
          }
          else {
            float v229 = (float)((float)((float)(v284 * _S8) + (float)(v285 * _S21)) + (float)(v283 * _S26)) + v57;
          }
          BOOL v230 = v228 <= v58;
          float v231 = (float)((float)((float)(v284 * _S12) + (float)(v285 * _S9)) + (float)(v283 * _S10)) + v57;
          if (!v230) {
            float v229 = v58;
          }
          unsigned int v232 = llroundf(v229);
          if (v231 < v57) {
            float v233 = v57;
          }
          else {
            float v233 = (float)((float)((float)(v284 * _S12) + (float)(v285 * _S9)) + (float)(v283 * _S10)) + v57;
          }
          BOOL v230 = v231 <= v58;
          float v234 = (float)((float)((float)(v284 * _S14) + (float)(v285 * _S13)) + (float)(v283 * _S15)) + v57;
          if (!v230) {
            float v233 = v58;
          }
          unsigned int v235 = llroundf(v233);
          if (v234 < v57) {
            float v236 = v57;
          }
          else {
            float v236 = (float)((float)((float)(v284 * _S14) + (float)(v285 * _S13)) + (float)(v283 * _S15)) + v57;
          }
          BOOL v230 = v234 <= v58;
          float v237 = (float)((float)((float)(v284 * _S1) + (float)(v285 * _S0)) + (float)(v283 * _S2)) + v57;
          if (!v230) {
            float v236 = v58;
          }
          unsigned int v238 = llroundf(v236);
          if (v237 < v57) {
            float v239 = v57;
          }
          else {
            float v239 = (float)((float)((float)(v284 * _S1) + (float)(v285 * _S0)) + (float)(v283 * _S2)) + v57;
          }
          if (v237 <= v58) {
            float v240 = v239;
          }
          else {
            float v240 = v58;
          }
          float v241 = (float)((float)(_S21 + _S9) + _S13) + _S0;
          float v242 = (float)((float)(_S8 + _S12) + _S14) + _S1;
          v94->i16[0] = v232 << v96;
          v94->i16[1] = v235 << v96;
          v106->i16[0] = v238 << v96;
          v106->i16[1] = llroundf(v240) << v96;
          float v243 = (float)((float)(_S26 + _S10) + _S15) + _S2;
          float v244 = (float)((float)(v287 + (float)(v241 * *(float *)&v98)) + (float)(v242 * v280))
               + (float)(v243 * *(float *)&v99);
          float v245 = v61;
          if (v244 <= v61)
          {
            float v245 = (float)((float)(v287 + (float)(v241 * *(float *)&v98)) + (float)(v242 * v280))
                 + (float)(v243 * *(float *)&v99);
            if (v244 < v286) {
              float v245 = v286;
            }
          }
          float v246 = (float)((float)(v287 + (float)(v241 * *((float *)&v98 + 1))) + (float)(v242 * v260))
               + (float)(v243 * *((float *)&v99 + 1));
          v105->i16[0] = llroundf(v245) << v96;
          float v247 = v61;
          if (v246 <= v61)
          {
            float v247 = v246;
            if (v246 < v286) {
              float v247 = v286;
            }
          }
          v175 += 2;
          v177 += 32;
          v105->i16[1] = llroundf(v247) << v96;
          unint64_t v94 = (uint16x8_t *)((char *)v94 + 4);
          float16x8_t v106 = (uint16x8_t *)((char *)v106 + 4);
          float16x8_t v105 = (uint16x8_t *)((char *)v105 + 4);
        }
        while (v12 > v175);
      }
      uint64_t v95 = v102 + v27;
      unint64_t v94 = (uint16x8_t *)&v103[v30];
      v93 += v258;
      v92 += 2;
      uint16x8_t v97 = v256;
    }
    while (v257 > v92);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = 2 * *result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    unint64_t v11 = 0;
    unint64_t v12 = *(void *)(result + 20);
    uint64_t v13 = *(void *)(result + 44) + 2 * v9;
    unint64_t v14 = 2 * v10 - 2 * v9;
    uint64_t v15 = *((void *)result + 19);
    uint64_t v16 = (uint64_t *)*((void *)result + 17);
    uint64_t v17 = **((void **)result + 8);
    uint64_t v18 = *v16;
    uint64_t v19 = v16[1];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    float v20 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    float v21 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    LOWORD(a7) = *(_WORD *)(v15 + 152);
    float v137 = (float)LODWORD(a7);
    float v138 = (float)LODWORD(a4);
    float v135 = *(float *)(v15 + 36);
    float v136 = (float)LODWORD(a6);
    float v133 = *(float *)(v15 + 44);
    float v134 = *(float *)(v15 + 40);
    float v131 = *(float *)(v15 + 52) * 0.25;
    float v132 = *(float *)(v15 + 48) * 0.25;
    float v129 = *(float *)(v15 + 60) * 0.25;
    float v130 = *(float *)(v15 + 56) * 0.25;
    float v127 = *(float *)(v15 + 72);
    float v128 = *(float *)(v15 + 64) * 0.25;
    float v126 = *(float *)(v15 + 68) * 0.25;
    float v22 = *(float *)(v15 + 76);
    float v23 = *(float *)(v15 + 80);
    float v24 = *(float *)(v15 + 84);
    float v25 = *(float *)(v15 + 88);
    float v26 = *(float *)(v15 + 92);
    float v27 = *(float *)(v15 + 96);
    float v28 = *(float *)(v15 + 100);
    float v29 = *(float *)(v15 + 104);
    uint64_t v30 = v15 + 164;
    uint64_t v31 = v15 + 16548;
    uint64_t v32 = *((void *)result + 14);
    unint64_t v33 = *((void *)result + 13) * a2 / v8;
    uint64_t v34 = (uint64_t *)*((void *)result + 16);
    uint64_t v35 = *((void *)result + 15) + 2 * v33;
    uint64_t v36 = **((void **)result + 7) + v17 * v13 + 16 * *(void *)(result + 36);
    uint64_t v38 = *v34;
    uint64_t v37 = v34[1];
    uint64_t result = (unsigned __int8 *)(v38 + v35 * v18 + 2 * v32);
    unsigned int v39 = *(unsigned __int8 *)(v15 + 132);
    if (v39 >= 0x11) {
      char v40 = 0;
    }
    else {
      char v40 = 16 - v39;
    }
    uint64_t v41 = *(unsigned __int8 *)(v15 + 156);
    if (v35 >= 0) {
      uint64_t v42 = v35;
    }
    else {
      uint64_t v42 = v35 + 1;
    }
    uint64_t v43 = v37 + (v42 >> 1) * v19;
    uint64_t v44 = *(unsigned __int8 *)(v15 + 155);
    uint64_t v45 = *(unsigned __int8 *)(v15 + 154);
    uint64_t v46 = v43 + 2 * v32;
    char v47 = v40;
    float32x2_t v48 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      uint16x8_t v49 = &result[v18];
      uint64_t v50 = v36 + v17;
      if (v12)
      {
        unint64_t v51 = 0;
        uint64_t v52 = v36 + v17;
        char v53 = &result[v18];
        do
        {
          v54.i32[0] = *(_DWORD *)(v36 + 4 * v45);
          v54.i32[1] = *(_DWORD *)(v36 + 4 * v44);
          _D16 = (float32x2_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v54, v48), 0), v48)));
          _D16.i16[0] = *(_WORD *)(v30 + 2 * _D16.u32[0]);
          __asm { FCVT            S11, H16 }
          _D16.i16[0] = *(_WORD *)(v30 + 2 * _D16.u32[1]);
          __asm { FCVT            S12, H16 }
          _D16.i32[0] = *(_DWORD *)(v36 + 4 * v41);
          _D16.i32[1] = *(_DWORD *)(v36 + 16 + 4 * v45);
          _D16 = (float32x2_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D16, v48), 0), v48)));
          _D16.i16[0] = *(_WORD *)(v30 + 2 * _D16.u32[0]);
          __asm { FCVT            S14, H16 }
          _D16.i16[0] = *(_WORD *)(v30 + 2 * _D16.u32[1]);
          __asm { FCVT            S13, H16 }
          _D16.i32[0] = *(_DWORD *)(v36 + 16 + 4 * v44);
          _D16.i32[1] = *(_DWORD *)(v36 + 16 + 4 * v41);
          _D16 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D16, v48), 0), v48)));
          _D16.i16[0] = *(_WORD *)(v30 + 2 * _D16.u32[0]);
          __asm { FCVT            S17, H16 }
          _D16.i16[0] = *(_WORD *)(v30 + 2 * _D16.u32[1]);
          __asm { FCVT            S16, H16 }
          v67.i32[0] = *(_DWORD *)(v52 + 4 * v45);
          v67.i32[1] = *(_DWORD *)(v52 + 4 * v44);
          _D18 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v67, v48), 0), v48)));
          _D18.i16[0] = *(_WORD *)(v30 + 2 * _D18.u32[0]);
          __asm { FCVT            S18, H18 }
          _H19 = *(_WORD *)(v30 + 2 * _D18.u32[1]);
          __asm { FCVT            S19, H19 }
          v71.i32[0] = *(_DWORD *)(v52 + 4 * v41);
          v71.i32[1] = *(_DWORD *)(v52 + 16 + 4 * v45);
          _D15 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v71, v48), 0), v48)));
          _D15.i16[0] = *(_WORD *)(v30 + 2 * _D15.u32[0]);
          __asm { FCVT            S15, H15 }
          _H20 = *(_WORD *)(v30 + 2 * _D15.u32[1]);
          __asm { FCVT            S20, H20 }
          v75.i32[0] = *(_DWORD *)(v52 + 16 + 4 * v44);
          v75.i32[1] = *(_DWORD *)(v52 + 16 + 4 * v41);
          _D22 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v75, v48), 0), v48)));
          _D22.i16[0] = *(_WORD *)(v30 + 2 * _D22.u32[0]);
          __asm { FCVT            S22, H22 }
          _H3 = *(_WORD *)(v30 + 2 * _D22.u32[1]);
          __asm { FCVT            S3, H3 }
          _S1 = (float)((float)(v22 * _S12) + (float)(_S11 * v127)) + (float)(_S14 * v23);
          float v80 = (float)((float)(v25 * _S12) + (float)(_S11 * v24)) + (float)(_S14 * v26);
          float v81 = (float)((float)(v28 * _S12) + (float)(_S11 * v27)) + (float)(_S14 * v29);
          _S5 = (float)((float)(v22 * _S17) + (float)(_S13 * v127)) + (float)(*(float *)_D16.i32 * v23);
          float v83 = (float)((float)(v25 * _S17) + (float)(_S13 * v24)) + (float)(*(float *)_D16.i32 * v26);
          *(float *)_D16.i32 = (float)((float)(v28 * _S17) + (float)(_S13 * v27)) + (float)(*(float *)_D16.i32 * v29);
          float v84 = (float)((float)(v22 * _S19) + (float)(*(float *)_D18.i32 * v127)) + (float)(*(float *)_D15.i32 * v23);
          float v85 = (float)((float)(v25 * _S19) + (float)(*(float *)_D18.i32 * v24)) + (float)(*(float *)_D15.i32 * v26);
          float v86 = (float)((float)(v28 * _S19) + (float)(*(float *)_D18.i32 * v27)) + (float)(*(float *)_D15.i32 * v29);
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S11, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S12, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm
          {
            FCVT            S13, H1
            FCVT            S14, H5
          }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          unsigned int v91 = llroundf(fminf(fmaxf(*(float *)_D16.i32, 0.0), 8191.0));
          __asm { FCVT            S16, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * v91);
          __asm { FCVT            S15, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S17, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S18, H1 }
          LOWORD(_S1) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v31
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v22 * *(float *)_D22.i32) + (float)(_S20 * v127)) + (float)(_S3 * v23), 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H1
            FCVT            S1, H4
          }
          _H4 = *(_WORD *)(v31
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v25 * *(float *)_D22.i32) + (float)(_S20 * v24)) + (float)(_S3 * v26), 0.0), 8191.0)));
          unsigned int v100 = llroundf(fminf(fmaxf((float)((float)(v28 * *(float *)_D22.i32) + (float)(_S20 * v27)) + (float)(_S3 * v29), 0.0), 8191.0));
          __asm { FCVT            S3, H4 }
          _H4 = *(_WORD *)(v31 + 2 * v100);
          __asm { FCVT            S4, H4 }
          float v104 = (float)((float)((float)(v134 * _S12) + (float)(v135 * _S11)) + (float)(v133 * _S13)) + v20;
          if (v104 < v20) {
            float v105 = v20;
          }
          else {
            float v105 = (float)((float)((float)(v134 * _S12) + (float)(v135 * _S11)) + (float)(v133 * _S13)) + v20;
          }
          BOOL v106 = v104 <= v21;
          float v107 = (float)((float)((float)(v134 * _S16) + (float)(v135 * _S14)) + (float)(v133 * _S15)) + v20;
          if (!v106) {
            float v105 = v21;
          }
          unsigned int v108 = llroundf(v105);
          if (v107 < v20) {
            float v109 = v20;
          }
          else {
            float v109 = (float)((float)((float)(v134 * _S16) + (float)(v135 * _S14)) + (float)(v133 * _S15)) + v20;
          }
          BOOL v106 = v107 <= v21;
          float v110 = (float)((float)((float)(v134 * _S18) + (float)(v135 * _S17)) + (float)(v133 * _S19)) + v20;
          if (!v106) {
            float v109 = v21;
          }
          unsigned int v111 = llroundf(v109);
          if (v110 < v20) {
            float v112 = v20;
          }
          else {
            float v112 = (float)((float)((float)(v134 * _S18) + (float)(v135 * _S17)) + (float)(v133 * _S19)) + v20;
          }
          BOOL v106 = v110 <= v21;
          float v113 = (float)((float)((float)(v134 * _S3) + (float)(v135 * _S1)) + (float)(v133 * _S4)) + v20;
          if (!v106) {
            float v112 = v21;
          }
          unsigned int v114 = llroundf(v112);
          if (v113 < v20) {
            float v115 = v20;
          }
          else {
            float v115 = (float)((float)((float)(v134 * _S3) + (float)(v135 * _S1)) + (float)(v133 * _S4)) + v20;
          }
          if (v113 <= v21) {
            float v116 = v115;
          }
          else {
            float v116 = v21;
          }
          float v117 = (float)((float)(_S11 + _S14) + _S17) + _S1;
          float v118 = (float)((float)(_S12 + _S16) + _S18) + _S3;
          *(_WORD *)uint64_t result = v108 << v47;
          *((_WORD *)result + 1) = v111 << v47;
          *(_WORD *)char v53 = v114 << v47;
          *((_WORD *)v53 + 1) = llroundf(v116) << v47;
          float v119 = (float)(_S13 + _S15) + _S19;
          float v120 = v137;
          float v121 = v119 + _S4;
          float v122 = (float)((float)(v138 + (float)(v117 * v132)) + (float)(v118 * v131))
               + (float)((float)(v119 + _S4) * v130);
          if (v122 <= v137)
          {
            float v120 = (float)((float)(v138 + (float)(v117 * v132)) + (float)(v118 * v131)) + (float)(v121 * v130);
            if (v122 < v136) {
              float v120 = v136;
            }
          }
          uint64_t v123 = (_WORD *)(v46 + 2 * v51);
          float v124 = (float)((float)(v138 + (float)(v117 * v129)) + (float)(v118 * v128)) + (float)(v121 * v126);
          *uint64_t v123 = llroundf(v120) << v47;
          float v125 = v137;
          if (v124 <= v137)
          {
            float v125 = v124;
            if (v124 < v136) {
              float v125 = v136;
            }
          }
          v36 += 32;
          v52 += 32;
          result += 4;
          v53 += 4;
          v123[1] = llroundf(v125) << v47;
          v51 += 2;
        }
        while (v12 > v51);
      }
      uint64_t v36 = v50 + v17;
      uint64_t result = &v49[v18];
      v46 += v19;
      v11 += 2;
    }
    while (v14 > v11);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_xf420_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGfA_rgb_xf420_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, uint8x8_t a5)
{
  uint64_t v8 = 0;
  unint64_t v9 = *(void *)(a1 + 20);
  uint64_t v146 = *(void *)(a1 + 36);
  uint64_t v10 = *(void *)(a1 + 44);
  uint64_t v11 = *(void *)(a1 + 28);
  unint64_t v12 = 2 * *a1;
  uint64_t v13 = 2 * (v11 * a2 / v12);
  uint64_t v14 = v10 + v13;
  uint64_t v15 = 2 * ((v11 + v11 * a2) / v12);
  uint64_t v16 = v10 + v15;
  uint64_t v17 = *((void *)a1 + 14);
  unint64_t v18 = *((void *)a1 + 13) * a2;
  uint64_t v19 = *((void *)a1 + 19);
  uint64_t v20 = *((void *)a1 + 15);
  uint64_t v21 = (uint64_t *)*((void *)a1 + 16);
  size_t v22 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v23 = **((void **)a1 + 8);
  uint64_t v24 = **((void **)a1 + 7);
  uint64_t v25 = *v22;
  uint64_t v26 = v22[1];
  uint64_t result = *v21;
  uint64_t v28 = v21[1];
  unsigned int v29 = *(_DWORD *)(v19 + 136);
  a5.i32[0] = *(_DWORD *)(v19 + 154);
  __int32 v148 = a5.i32[0];
  unsigned int v30 = *(unsigned __int16 *)(v19 + 144);
  uint64_t v31 = v20 + 2 * (v18 / v12);
  uint64_t v32 = v23 * v14;
  unsigned int v33 = *(unsigned __int8 *)(v19 + 132);
  unsigned int v34 = *(unsigned __int16 *)(v19 + 146);
  unsigned int v35 = *(unsigned __int16 *)(v19 + 148);
  unsigned int v36 = *(unsigned __int16 *)(v19 + 150);
  if (v31 >= 0) {
    uint64_t v37 = v31;
  }
  else {
    uint64_t v37 = v31 + 1;
  }
  unsigned int v38 = *(unsigned __int16 *)(v19 + 152);
  _S22 = *(float *)(v19 + 40);
  float v138 = *(float *)(v19 + 36);
  uint64_t v40 = v26 * (v37 >> 1);
  uint16x8_t v41 = vmovl_u8(a5);
  _S2 = *(float *)(v19 + 44);
  v43.i32[0] = *(_DWORD *)(v19 + 48);
  v6.i32[0] = *(_DWORD *)(v19 + 52);
  v7.i32[0] = *(_DWORD *)(v19 + 56);
  __int32 v44 = *(_DWORD *)(v19 + 60);
  __int32 v45 = *(_DWORD *)(v19 + 64);
  __int32 v46 = *(_DWORD *)(v19 + 68);
  memset(v147, 0, sizeof(v147));
  do
  {
    unsigned int v47 = 0;
    char v48 = *((unsigned char *)&v148 + v8);
    do
    {
      *((unsigned char *)v147 + 8 * (((_BYTE)v8 + (v47 >> 3)) & 0x1F) + v47) = v48 + 4 * v47;
      ++v47;
    }
    while (v47 != 8);
    ++v8;
  }
  while (v8 != 4);
  if (v15 != v13)
  {
    unint64_t v49 = 0;
    unint64_t v50 = v16 - v14;
    _S3 = (float)v29;
    float v52 = (float)v30;
    float v53 = (float)v35;
    float v131 = (float)v34;
    float v132 = (float)v36;
    float v54 = (float)v38;
    v43.i32[1] = v44;
    __asm { FMOV            V0.2S, #0.25 }
    *(float32x2_t *)v5.f32 = vmul_f32(v43, _D0);
    v6.i32[1] = v45;
    *(float32x2_t *)v6.f32 = vmul_f32(*(float32x2_t *)v6.f32, _D0);
    v7.i32[1] = v46;
    *(float32x2_t *)v7.f32 = vmul_f32(*(float32x2_t *)v7.f32, _D0);
    int32x4_t v60 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    _D0.f32[0] = v138;
    __asm { FCVT            H0, S0 }
    int32x4_t v62 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v6), 0);
    int16x4_t v63 = (int16x4_t)vcvt_f16_f32(v7);
    __asm { FCVT            H5, S22 }
    int32x4_t v65 = vdupq_lane_s32((int32x2_t)v63, 0);
    *(short float *)v63.i16 = (short float)v30;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(v63, 0);
    *(short float *)v63.i16 = (short float)v34;
    int16x8_t v67 = vdupq_lane_s16(v63, 0);
    *(short float *)v63.i16 = (short float)v35;
    int16x8_t v68 = vdupq_lane_s16(v63, 0);
    *(short float *)v63.i16 = (short float)v36;
    int16x8_t v69 = vdupq_lane_s16(v63, 0);
    *(short float *)v63.i16 = (short float)v38;
    int16x8_t v70 = vdupq_lane_s16(v63, 0);
    __asm { FCVT            H1, S2 }
    uint64_t v72 = v28 + v40;
    if (v33 >= 0x11) {
      unsigned __int8 v73 = 0;
    }
    else {
      unsigned __int8 v73 = 16 - v33;
    }
    uint64_t v74 = (uint16x8_t *)(v72 + 2 * v17);
    float32x2_t v75 = (uint16x8_t *)(result + v25 * v31 + 2 * v17);
    uint64_t v76 = v24 + v32 + 16 * v146;
    __asm { FCVT            H11, S3 }
    unsigned __int8 v78 = v73;
    uint16x8_t v79 = (uint16x8_t)vdupq_n_s16(v73);
    uint64_t result = v9 & 0xFFFFFFF8;
    float v130 = v5.f32[1];
    float v145 = v7.f32[0];
    uint64_t v80 = v6.i64[0];
    float v139 = v7.f32[1];
    uint64_t v81 = v41.u16[1];
    float16x8_t v143 = (float16x8_t)v62;
    float16x8_t v144 = (float16x8_t)v60;
    short float v136 = _H0;
    short float v137 = _H5;
    float16x8_t v141 = (float16x8_t)v69;
    float16x8_t v142 = (float16x8_t)v65;
    int16x8_t v134 = v68;
    int16x8_t v135 = v67;
    float16x8_t v140 = (float16x8_t)v70;
    short float v133 = _H1;
    __int32 v129 = v5.i32[0];
    do
    {
      uint64_t v82 = v76 + v23;
      float v83 = &v75->i8[v25];
      if ((int)v9 < 8)
      {
        unint64_t v93 = 0;
        float16x8_t v87 = (const float *)(v76 + v23);
        float v86 = (uint16x8_t *)((char *)v75 + v25);
        float v85 = v74;
      }
      else
      {
        int v84 = 0;
        float v85 = v74;
        float v86 = (uint16x8_t *)((char *)v75 + v25);
        float16x8_t v87 = (const float *)(v76 + v23);
        float16x8_t v88 = (float16x8_t)v67;
        float16x8_t v89 = (float16x8_t)v68;
        do
        {
          unint64_t v90 = (const float *)v76;
          float32x4x4_t v150 = vld4q_f32(v90);
          v90 += 16;
          float32x4x4_t v151 = vld4q_f32(v90);
          unsigned int v91 = v87;
          float32x4x4_t v152 = vld4q_f32(v91);
          v91 += 16;
          float32x4x4_t v149 = vld4q_f32(v91);
          v76 += 128;
          v151.val[0] = (float32x4_t)vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v150.val[0]), v151.val[0]), _H11);
          v151.val[1] = (float32x4_t)vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v150.val[1]), v151.val[1]), _H11);
          float16x8_t v92 = vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v150.val[2]), v151.val[2]), _H11);
          v87 += 32;
          v149.val[0] = (float32x4_t)vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v152.val[0]), v149.val[0]), _H11);
          v151.val[2] = (float32x4_t)vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v152.val[1]), v149.val[1]), _H11);
          v151.val[3] = (float32x4_t)vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v152.val[2]), v149.val[2]), _H11);
          v152.val[1] = (float32x4_t)vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v66, (float16x8_t)v149.val[0], _H0), (float16x8_t)v151.val[2], _H5), (float16x8_t)v151.val[3], _H1), v66);
          *v75++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v66, (float16x8_t)v151.val[0], _H0), (float16x8_t)v151.val[1], _H5), v92, _H1), v66), v89)), v79);
          v149.val[0] = (float32x4_t)vaddq_f16((float16x8_t)vuzp2q_s16((int16x8_t)v149.val[0], (int16x8_t)v151.val[2]), vaddq_f16(vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v151.val[0], (int16x8_t)v151.val[1]), (float16x8_t)vuzp2q_s16((int16x8_t)v151.val[0], (int16x8_t)v151.val[1])), (float16x8_t)vuzp1q_s16((int16x8_t)v149.val[0], (int16x8_t)v151.val[2])));
          *v86++ = vshlq_u16(vcvtq_u16_f16(vminq_f16((float16x8_t)v152.val[1], v89)), v79);
          *v85++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v88, v144, (float16x8_t)vzip1q_s16((int16x8_t)v149.val[0], (int16x8_t)v149.val[0])), v143, (float16x8_t)vzip2q_s16((int16x8_t)v149.val[0], (int16x8_t)v149.val[0])), v142, vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v151.val[3], (int16x8_t)v151.val[3]), vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v92, (int16x8_t)v92), (float16x8_t)vtrn2q_s16((int16x8_t)v92, (int16x8_t)v92)), (float16x8_t)vtrn1q_s16((int16x8_t)v151.val[3], (int16x8_t)v151.val[3])))),
                           v141),
                         v140)),
                     v79);
          v84 += 8;
        }
        while (v84 < (int)v9 - 7);
        unint64_t v93 = v9 & 0xFFFFFFF8;
        v5.i32[0] = v129;
      }
      if (v9 > v93)
      {
        unint64_t v94 = 0;
        uint64_t v95 = v76 + 16;
        uint64_t v96 = v76 + v81 * 4 + 16;
        uint16x8_t v97 = &v87[v81];
        do
        {
          unint64_t v98 = v94 + 4 * v148;
          float v99 = *(float *)(v95 + v98 - 16) * _S3;
          float v100 = *(float *)(v96 + v94 - 16) * _S3;
          unint64_t v101 = v94 + 4 * BYTE2(v148);
          float v102 = *(float *)(v95 + v101 - 16) * _S3;
          float v103 = *(float *)(v95 + v98) * _S3;
          float v104 = *(float *)(v96 + v94) * _S3;
          float v105 = *(float *)(v95 + v101) * _S3;
          BOOL v106 = (float *)((char *)v87 + v98);
          float v107 = *v106 * _S3;
          float v108 = v97[v94 / 4] * _S3;
          float v109 = *(const float *)((char *)v87 + v101) * _S3;
          float v110 = v106[4] * _S3;
          float v111 = v97[v94 / 4 + 4] * _S3;
          float v112 = *(const float *)((char *)v87 + v101 + 16) * _S3;
          float v113 = (float)((float)((float)(_S22 * v100) + (float)(v138 * v99)) + (float)(_S2 * v102)) + v52;
          float v114 = (float)((float)((float)(_S22 * v104) + (float)(v138 * v103)) + (float)(_S2 * v105)) + v52;
          float v115 = (float)((float)((float)(_S22 * v108) + (float)(v138 * v107)) + (float)(_S2 * v109)) + v52;
          float v116 = (float)((float)((float)(_S22 * v111) + (float)(v138 * v110)) + (float)(_S2 * v112)) + v52;
          if (v113 < v52) {
            float v117 = v52;
          }
          else {
            float v117 = (float)((float)((float)(_S22 * v100) + (float)(v138 * v99)) + (float)(_S2 * v102)) + v52;
          }
          if (v113 <= v53) {
            float v118 = v117;
          }
          else {
            float v118 = v53;
          }
          v75->i16[0] = llroundf(v118) << v78;
          if (v114 < v52) {
            float v119 = v52;
          }
          else {
            float v119 = (float)((float)((float)(_S22 * v104) + (float)(v138 * v103)) + (float)(_S2 * v105)) + v52;
          }
          if (v114 > v53) {
            float v119 = v53;
          }
          v75->i16[1] = llroundf(v119) << v78;
          if (v115 < v52) {
            float v120 = v52;
          }
          else {
            float v120 = (float)((float)((float)(_S22 * v108) + (float)(v138 * v107)) + (float)(_S2 * v109)) + v52;
          }
          if (v115 > v53) {
            float v120 = v53;
          }
          v86->i16[0] = llroundf(v120) << v78;
          if (v116 < v52) {
            float v121 = v52;
          }
          else {
            float v121 = (float)((float)((float)(_S22 * v111) + (float)(v138 * v110)) + (float)(_S2 * v112)) + v52;
          }
          if (v116 > v53) {
            float v121 = v53;
          }
          v86->i16[1] = llroundf(v121) << v78;
          float v122 = (float)((float)(v99 + v103) + v107) + v110;
          float v123 = (float)((float)(v100 + v104) + v108) + v111;
          float v124 = (float)((float)(v102 + v105) + v109) + v112;
          float v125 = (float)((float)(v131 + (float)(v122 * v5.f32[0])) + (float)(v123 * *(float *)&v80))
               + (float)(v124 * v145);
          float v126 = v54;
          if (v125 <= v54)
          {
            float v126 = (float)((float)(v131 + (float)(v122 * v5.f32[0])) + (float)(v123 * *(float *)&v80))
                 + (float)(v124 * v145);
            if (v125 < v132) {
              float v126 = v132;
            }
          }
          float v127 = (float)((float)(v131 + (float)(v122 * v130)) + (float)(v123 * *((float *)&v80 + 1)))
               + (float)(v124 * v139);
          v85->i16[0] = llroundf(v126) << v78;
          float v128 = v54;
          if (v127 <= v54)
          {
            float v128 = v127;
            if (v127 < v132) {
              float v128 = v132;
            }
          }
          v93 += 2;
          v94 += 32;
          v85->i16[1] = llroundf(v128) << v78;
          float32x2_t v75 = (uint16x8_t *)((char *)v75 + 4);
          float v86 = (uint16x8_t *)((char *)v86 + 4);
          float v85 = (uint16x8_t *)((char *)v85 + 4);
        }
        while (v9 > v93);
      }
      uint64_t v76 = v82 + v23;
      float32x2_t v75 = (uint16x8_t *)&v83[v25];
      uint64_t v74 = (uint16x8_t *)((char *)v74 + v26);
      v49 += 2;
      _H0 = v136;
      _H5 = v137;
      int16x8_t v68 = v134;
      int16x8_t v67 = v135;
      _H1 = v133;
    }
    while (v50 > v49);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_xf420_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_xf420_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = 2 * *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    uint64_t v14 = *(void *)(result + 44) + 2 * v10;
    unint64_t v15 = 2 * v11 - 2 * v10;
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(uint64_t **)(result + 136);
    uint64_t v18 = **(void **)(result + 64);
    uint64_t v19 = *v17;
    uint64_t v20 = v17[1];
    float v21 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    float v22 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v23 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v24 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v25 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v26 = (float)LODWORD(a8);
    float v27 = *(float *)(v16 + 36);
    float v28 = *(float *)(v16 + 40);
    float v29 = *(float *)(v16 + 44);
    float v30 = *(float *)(v16 + 48) * 0.25;
    float v31 = *(float *)(v16 + 52) * 0.25;
    float v32 = *(float *)(v16 + 56) * 0.25;
    float v33 = *(float *)(v16 + 60) * 0.25;
    float v34 = *(float *)(v16 + 64) * 0.25;
    float v35 = *(float *)(v16 + 68) * 0.25;
    uint64_t v36 = *(void *)(result + 112);
    uint64_t v37 = *(uint64_t **)(result + 128);
    uint64_t v38 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v9);
    uint64_t v39 = **(void **)(result + 56) + v18 * v14 + 16 * *(void *)(result + 36);
    uint64_t v40 = *v37;
    uint64_t v41 = v37[1];
    uint64_t v42 = (char *)(v40 + v38 * v19 + 2 * v36);
    unsigned int v43 = *(unsigned __int8 *)(v16 + 132);
    if (v43 >= 0x11) {
      char v44 = 0;
    }
    else {
      char v44 = 16 - v43;
    }
    uint64_t v45 = *(unsigned __int8 *)(v16 + 156);
    if (v38 >= 0) {
      uint64_t v46 = v38;
    }
    else {
      uint64_t v46 = v38 + 1;
    }
    uint64_t v47 = v41 + (v46 >> 1) * v20;
    uint64_t v48 = *(unsigned __int8 *)(v16 + 155);
    uint64_t result = *(unsigned __int8 *)(v16 + 154);
    uint64_t v49 = v47 + 2 * v36;
    char v50 = v44;
    do
    {
      unint64_t v51 = &v42[v19];
      uint64_t v52 = v39 + v18;
      if (v13)
      {
        unint64_t v53 = 0;
        uint64_t v54 = v39 + v18;
        unsigned int v55 = &v42[v19];
        do
        {
          float v56 = *(float *)(v39 + 4 * result) * v21;
          float v57 = *(float *)(v39 + 4 * v48) * v21;
          float v58 = *(float *)(v39 + 4 * v45) * v21;
          float v59 = *(float *)(v39 + 16 + 4 * result) * v21;
          float v60 = *(float *)(v39 + 16 + 4 * v48) * v21;
          float v61 = *(float *)(v39 + 16 + 4 * v45) * v21;
          float v62 = *(float *)(v54 + 4 * result) * v21;
          float v63 = *(float *)(v54 + 4 * v48) * v21;
          float v64 = *(float *)(v54 + 4 * v45) * v21;
          float v65 = *(float *)(v54 + 16 + 4 * result) * v21;
          float v66 = *(float *)(v54 + 16 + 4 * v48) * v21;
          float v67 = *(float *)(v54 + 16 + 4 * v45) * v21;
          float v68 = (float)((float)((float)(v28 * v57) + (float)(v27 * v56)) + (float)(v29 * v58)) + v22;
          float v69 = (float)((float)((float)(v28 * v60) + (float)(v27 * v59)) + (float)(v29 * v61)) + v22;
          float v70 = (float)((float)((float)(v28 * v63) + (float)(v27 * v62)) + (float)(v29 * v64)) + v22;
          float v71 = (float)((float)((float)(v28 * v66) + (float)(v27 * v65)) + (float)(v29 * v67)) + v22;
          if (v68 < v22) {
            float v72 = v22;
          }
          else {
            float v72 = (float)((float)((float)(v28 * v57) + (float)(v27 * v56)) + (float)(v29 * v58)) + v22;
          }
          if (v68 <= v24) {
            float v73 = v72;
          }
          else {
            float v73 = v24;
          }
          *(_WORD *)uint64_t v42 = llroundf(v73) << v50;
          if (v69 < v22) {
            float v74 = v22;
          }
          else {
            float v74 = (float)((float)((float)(v28 * v60) + (float)(v27 * v59)) + (float)(v29 * v61)) + v22;
          }
          if (v69 > v24) {
            float v74 = v24;
          }
          *((_WORD *)v42 + 1) = llroundf(v74) << v50;
          if (v70 < v22) {
            float v75 = v22;
          }
          else {
            float v75 = (float)((float)((float)(v28 * v63) + (float)(v27 * v62)) + (float)(v29 * v64)) + v22;
          }
          if (v70 > v24) {
            float v75 = v24;
          }
          *(_WORD *)unsigned int v55 = llroundf(v75) << v50;
          if (v71 < v22) {
            float v76 = v22;
          }
          else {
            float v76 = (float)((float)((float)(v28 * v66) + (float)(v27 * v65)) + (float)(v29 * v67)) + v22;
          }
          if (v71 > v24) {
            float v76 = v24;
          }
          *((_WORD *)v55 + 1) = llroundf(v76) << v50;
          float v77 = (float)((float)(v56 + v59) + v62) + v65;
          float v78 = (float)((float)(v57 + v60) + v63) + v66;
          float v79 = (float)((float)(v58 + v61) + v64) + v67;
          float v80 = (float)((float)(v23 + (float)(v77 * v30)) + (float)(v78 * v31)) + (float)(v79 * v32);
          float v81 = v26;
          if (v80 <= v26)
          {
            float v81 = (float)((float)(v23 + (float)(v77 * v30)) + (float)(v78 * v31)) + (float)(v79 * v32);
            if (v80 < v25) {
              float v81 = v25;
            }
          }
          uint64_t v82 = (_WORD *)(v49 + 2 * v53);
          float v83 = (float)((float)(v23 + (float)(v77 * v33)) + (float)(v78 * v34)) + (float)(v79 * v35);
          *uint64_t v82 = llroundf(v81) << v50;
          float v84 = v26;
          if (v83 <= v26)
          {
            float v84 = v83;
            if (v83 < v25) {
              float v84 = v25;
            }
          }
          v39 += 32;
          v54 += 32;
          v42 += 4;
          v55 += 4;
          v82[1] = llroundf(v84) << v50;
          v53 += 2;
        }
        while (v13 > v53);
      }
      uint64_t v39 = v52 + v18;
      uint64_t v42 = &v51[v19];
      v49 += v20;
      v12 += 2;
    }
    while (v15 > v12);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

int8x8_t *vt_Copy_RGfA_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a1 + 20);
  uint64_t v219 = *(void *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 44);
  uint64_t v10 = *(void *)(a1 + 28);
  unint64_t v11 = *a1;
  unint64_t v12 = v10 * a2 / v11;
  uint64_t v13 = v12 + v9;
  unint64_t v14 = (v10 + v10 * a2) / v11;
  uint64_t v15 = v14 + v9;
  uint64_t v16 = *((void *)a1 + 14);
  uint64_t v17 = *((void *)a1 + 19);
  uint64_t v18 = *((void *)a1 + 15);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v20 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v21 = **((void **)a1 + 8);
  unint64_t v22 = *((void *)a1 + 13) * a2;
  uint64_t v217 = **((void **)a1 + 7);
  uint64_t v23 = v20[1];
  uint64_t v191 = *v20;
  uint64_t v24 = v20[2];
  uint64_t v26 = *v19;
  uint64_t v25 = v19[1];
  uint64_t result = (int8x8_t *)v19[2];
  int v227 = *(_DWORD *)(v17 + 154);
  unsigned int v28 = *(unsigned __int16 *)(v17 + 144);
  unsigned int v29 = *(unsigned __int16 *)(v17 + 146);
  unsigned int v30 = *(unsigned __int16 *)(v17 + 148);
  unsigned int v31 = *(unsigned __int16 *)(v17 + 150);
  unsigned int v32 = *(unsigned __int16 *)(v17 + 152);
  float v224 = *(float *)(v17 + 36);
  float v223 = *(float *)(v17 + 40);
  v33.i32[0] = *(_DWORD *)(v17 + 48);
  float v222 = *(float *)(v17 + 44);
  v35.i32[0] = *(_DWORD *)(v17 + 52);
  v34.i32[0] = *(_DWORD *)(v17 + 56);
  __int32 v36 = *(_DWORD *)(v17 + 60);
  v6.i32[0] = *(_DWORD *)(v17 + 64);
  __int32 v37 = *(_DWORD *)(v17 + 68);
  float v221 = *(float *)(v17 + 72);
  _S4 = *(float *)(v17 + 76);
  _S5 = *(float *)(v17 + 80);
  _S6 = *(float *)(v17 + 84);
  _S7 = *(float *)(v17 + 88);
  uint64_t v42 = v22 / v11 + v18;
  uint64_t v43 = v21 * v13;
  _S16 = *(float *)(v17 + 92);
  _S17 = *(float *)(v17 + 96);
  _S18 = *(float *)(v17 + 100);
  _S19 = *(float *)(v17 + 104);
  _S20 = *(float *)(v17 + 108);
  _S21 = *(float *)(v17 + 112);
  _S22 = *(float *)(v17 + 116);
  _S23 = *(float *)(v17 + 120);
  memset(v226, 0, sizeof(v226));
  do
  {
    unsigned int v52 = 0;
    char v53 = *((unsigned char *)&v227 + v7);
    do
    {
      *((unsigned char *)v226 + 8 * (((_BYTE)v7 + (v52 >> 3)) & 0x1F) + v52) = v53 + 4 * v52;
      ++v52;
    }
    while (v52 != 8);
    ++v7;
  }
  while (v7 != 4);
  if (v14 != v12)
  {
    uint64_t v54 = 0;
    uint64_t v55 = v15 - v13;
    float v56 = (float)v28;
    float v57 = (float)v29;
    float v58 = (float)v30;
    float v225 = (float)v31;
    float v59 = (float)v32;
    uint64_t v60 = v17 + 16548;
    v33.i32[1] = v36;
    v35.i32[1] = v6.i32[0];
    *(float32x2_t *)a5.f32 = vmul_f32(v33, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)a6.f32 = vmul_f32(v35, (float32x2_t)0x3F0000003F000000);
    v34.i32[1] = v37;
    *(float32x2_t *)v6.f32 = vmul_f32(v34, (float32x2_t)0x3F0000003F000000);
    uint64_t v61 = v17 + 32932;
    uint64_t v62 = v17 + 164;
    _S0 = v224;
    __asm { FCVT            H0, S0 }
    short float v216 = *(short float *)&_S0;
    _S1 = v223;
    __asm { FCVT            H1, S1 }
    float16x8_t v214 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    short float v215 = *(short float *)&_S1;
    _S1 = v222;
    __asm { FCVT            H1, S1 }
    float16x8_t v212 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a6), 0);
    short float v213 = *(short float *)&_S1;
    _D0 = (int16x4_t)vcvt_f16_f32(v6);
    int32x4_t v71 = vdupq_lane_s32((int32x2_t)_D0, 0);
    __asm { FCVT            H0, S20 }
    short float v210 = *(short float *)_D0.i16;
    float16x8_t v211 = (float16x8_t)v71;
    __asm { FCVT            H0, S21 }
    short float v209 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S22 }
    short float v208 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S23 }
    short float v207 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v221;
    __asm { FCVT            H0, S0 }
    short float v206 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S4 }
    short float v205 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S5 }
    short float v204 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S6 }
    short float v203 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S7 }
    short float v202 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S16 }
    short float v201 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S17 }
    short float v200 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S18 }
    short float v199 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S19 }
    short float v198 = *(short float *)_D0.i16;
    *(short float *)_D0.i16 = (short float)v28;
    float16x8_t v72 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v29;
    int16x8_t v73 = vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v30;
    int16x8_t v74 = vdupq_lane_s16(_D0, 0);
    float16x8_t v196 = (float16x8_t)v74;
    float16x8_t v197 = (float16x8_t)v73;
    *(short float *)v74.i16 = (short float)v31;
    int16x8_t v75 = vdupq_lane_s16(*(int16x4_t *)v74.i8, 0);
    *(short float *)v74.i16 = (short float)v32;
    float16x8_t v194 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v74.i8, 0);
    float16x8_t v195 = (float16x8_t)v75;
    if (result) {
      uint64_t result = (int8x8_t *)((char *)result + v24 * v42 + v16);
    }
    else {
      uint64_t result = 0;
    }
    if (v25) {
      float v76 = (unsigned char *)(v25 + v23 * v42 + v16);
    }
    else {
      float v76 = 0;
    }
    float v77 = (int8x8_t *)(v26 + v191 * v42 + v16);
    uint64_t v78 = v217 + v43 + 16 * v219;
    float v218 = a6.f32[0];
    float v220 = a5.f32[0];
    float v192 = a6.f32[1];
    float v193 = a5.f32[1];
    uint64_t v79 = v6.i64[0];
    v80.i64[0] = 0x9000900090009000;
    v80.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v129 = 0;
        uint64_t v127 = v78;
        float v83 = v77;
        float v128 = v76;
        uint64_t v82 = result;
      }
      else
      {
        uint64_t v81 = 0;
        uint64_t v82 = result;
        float v83 = v77;
        float v84 = (const float *)v78;
        do
        {
          float v85 = v84;
          float32x4x4_t v228 = vld4q_f32(v84);
          float v86 = v84 + 16;
          float32x4x4_t v229 = vld4q_f32(v86);
          if (v82) {
            int8x8_t v87 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v228.val[3]), v229.val[3]), (float16x8_t)vdupq_n_s16(0x5BF8u))));
          }
          else {
            int8x8_t v87 = 0;
          }
          float16x8_t v88 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v228.val[1]), v229.val[1]);
          float16x8_t v89 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v228.val[2]), v229.val[2]);
          v90.i64[0] = 0x7000700070007000;
          v90.i64[1] = 0x7000700070007000;
          uint16x8_t v91 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v228.val[0]), v229.val[0]), v90), (float16x8_t)0), v80));
          uint32x4_t v92 = vmovl_high_u16(v91);
          uint32x4_t v93 = vmovl_u16(*(uint16x4_t *)v91.i8);
          v94.i16[0] = *(_WORD *)(v62 + 2 * v93.u32[0]);
          v94.i16[1] = *(_WORD *)(v62 + 2 * v93.u32[1]);
          v94.i16[2] = *(_WORD *)(v62 + 2 * v93.u32[2]);
          v94.i16[3] = *(_WORD *)(v62 + 2 * v93.u32[3]);
          v94.i16[4] = *(_WORD *)(v62 + 2 * v92.u32[0]);
          v94.i16[5] = *(_WORD *)(v62 + 2 * v92.u32[1]);
          v94.i16[6] = *(_WORD *)(v62 + 2 * v92.u32[2]);
          v94.i16[7] = *(_WORD *)(v62 + 2 * v92.u32[3]);
          uint16x8_t v95 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v88, v90), (float16x8_t)0), v80));
          uint32x4_t v96 = vmovl_high_u16(v95);
          uint32x4_t v97 = vmovl_u16(*(uint16x4_t *)v95.i8);
          v98.i16[0] = *(_WORD *)(v62 + 2 * v97.u32[0]);
          v98.i16[1] = *(_WORD *)(v62 + 2 * v97.u32[1]);
          v98.i16[2] = *(_WORD *)(v62 + 2 * v97.u32[2]);
          v98.i16[3] = *(_WORD *)(v62 + 2 * v97.u32[3]);
          v98.i16[4] = *(_WORD *)(v62 + 2 * v96.u32[0]);
          v98.i16[5] = *(_WORD *)(v62 + 2 * v96.u32[1]);
          v98.i16[6] = *(_WORD *)(v62 + 2 * v96.u32[2]);
          v98.i16[7] = *(_WORD *)(v62 + 2 * v96.u32[3]);
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v89, v90), (float16x8_t)0), v80));
          uint32x4_t v100 = vmovl_high_u16(v99);
          uint32x4_t v101 = vmovl_u16(*(uint16x4_t *)v99.i8);
          v102.i16[0] = *(_WORD *)(v62 + 2 * v101.u32[0]);
          v102.i16[1] = *(_WORD *)(v62 + 2 * v101.u32[1]);
          v102.i16[2] = *(_WORD *)(v62 + 2 * v101.u32[2]);
          v102.i16[3] = *(_WORD *)(v62 + 2 * v101.u32[3]);
          v102.i16[4] = *(_WORD *)(v62 + 2 * v100.u32[0]);
          v102.i16[5] = *(_WORD *)(v62 + 2 * v100.u32[1]);
          v102.i16[6] = *(_WORD *)(v62 + 2 * v100.u32[2]);
          v102.i16[7] = *(_WORD *)(v62 + 2 * v100.u32[3]);
          uint16x8_t v103 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v94, v210), v98, v209), v102, v208), vmaxq_f16(vmaxq_f16(v94, v98), v102), v207), (float16x8_t)0), v80));
          uint32x4_t v104 = vmovl_high_u16(v103);
          float16x8_t v105 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v103.i8);
          v105.i16[0] = *(_WORD *)(v60 + 2 * v105.u32[0]);
          v105.i16[1] = *(_WORD *)(v60 + 2 * v105.u32[1]);
          v105.i16[2] = *(_WORD *)(v60 + 2 * v105.u32[2]);
          v105.i16[3] = *(_WORD *)(v60 + 2 * v105.u32[3]);
          v105.i16[4] = *(_WORD *)(v60 + 2 * v104.u32[0]);
          v105.i16[5] = *(_WORD *)(v60 + 2 * v104.u32[1]);
          v105.i16[6] = *(_WORD *)(v60 + 2 * v104.u32[2]);
          v105.i16[7] = *(_WORD *)(v60 + 2 * v104.u32[3]);
          float16x8_t v106 = vmulq_f16(v94, v105);
          float16x8_t v107 = vmulq_f16(v98, v105);
          float16x8_t v108 = vmulq_f16(v102, v105);
          float16x8_t v109 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v106, v203), v107, v202), v108, v201);
          float16x8_t v110 = vmulq_n_f16(v108, v198);
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v106, v206), v107, v205), v108, v204), (float16x8_t)0), v80));
          uint32x4_t v112 = vmovl_high_u16(v111);
          uint32x4_t v113 = vmovl_u16(*(uint16x4_t *)v111.i8);
          v94.i16[0] = *(_WORD *)(v61 + 2 * v113.u32[0]);
          v94.i16[1] = *(_WORD *)(v61 + 2 * v113.u32[1]);
          v94.i16[2] = *(_WORD *)(v61 + 2 * v113.u32[2]);
          v94.i16[3] = *(_WORD *)(v61 + 2 * v113.u32[3]);
          v94.i16[4] = *(_WORD *)(v61 + 2 * v112.u32[0]);
          v94.i16[5] = *(_WORD *)(v61 + 2 * v112.u32[1]);
          v94.i16[6] = *(_WORD *)(v61 + 2 * v112.u32[2]);
          float16x8_t v114 = v94;
          v114.i16[7] = *(_WORD *)(v61 + 2 * v112.u32[3]);
          float16x8_t v115 = vmlaq_n_f16(v110, v107, v199);
          uint16x8_t v116 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v109, (float16x8_t)0), v80));
          uint32x4_t v117 = vmovl_high_u16(v116);
          uint32x4_t v118 = vmovl_u16(*(uint16x4_t *)v116.i8);
          v109.i16[0] = *(_WORD *)(v61 + 2 * v118.u32[0]);
          v109.i16[1] = *(_WORD *)(v61 + 2 * v118.u32[1]);
          v109.i16[2] = *(_WORD *)(v61 + 2 * v118.u32[2]);
          v109.i16[3] = *(_WORD *)(v61 + 2 * v118.u32[3]);
          v109.i16[4] = *(_WORD *)(v61 + 2 * v117.u32[0]);
          v109.i16[5] = *(_WORD *)(v61 + 2 * v117.u32[1]);
          v109.i16[6] = *(_WORD *)(v61 + 2 * v117.u32[2]);
          float16x8_t v119 = v109;
          v119.i16[7] = *(_WORD *)(v61 + 2 * v117.u32[3]);
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v115, v106, v200), (float16x8_t)0), v80));
          int16x8_t v121 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v120.i8);
          uint32x4_t v122 = vmovl_high_u16(v120);
          *(void *)&long long v123 = v122.u32[2];
          *((void *)&v123 + 1) = v122.u32[3];
          long long v124 = v123;
          *((void *)&v123 + 1) = v121.u32[3];
          v121.i16[7] = (unint64_t)v121.u32[3] >> 48;
          v121.i16[0] = *(_WORD *)(v61 + 2 * v121.u32[0]);
          v121.i16[1] = *(_WORD *)(v61 + 2 * v121.u32[1]);
          v121.i16[2] = *(_WORD *)(v61 + 2 * v121.u32[2]);
          v121.i16[3] = *(_WORD *)(v61 + 2 * *((void *)&v123 + 1));
          v121.i16[4] = *(_WORD *)(v61 + 2 * v122.u32[0]);
          v121.i16[5] = *(_WORD *)(v61 + 2 * v122.u32[1]);
          v121.i16[6] = *(_WORD *)(v61 + 2 * v124);
          float16x8_t v125 = (float16x8_t)v121;
          v125.i16[7] = *(_WORD *)(v61 + 2 * *((void *)&v124 + 1));
          *v83++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v72, v114, v216), v119, v215), v125, v213), v72), v196)));
          int16x8_t v126 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v94, (int16x8_t)v109), (float16x8_t)vuzp2q_s16((int16x8_t)v114, (int16x8_t)v119));
          *(int8x8_t *)&v76[v81] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v197, v214, (float16x8_t)vzip1q_s16(v126, v126)), v212, (float16x8_t)vzip2q_s16(v126, v126)), v211, vaddq_f16((float16x8_t)vtrn1q_s16(v121, v121), (float16x8_t)vtrn2q_s16((int16x8_t)v125, (int16x8_t)v125))), v195), v194)));
          if (v82) {
            *v82++ = v87;
          }
          v81 += 8;
          float v84 = v85 + 32;
        }
        while ((int)v81 < (int)v8 - 7);
        uint64_t v127 = (uint64_t)(v85 + 32);
        float v128 = &v76[v81];
        unint64_t v129 = v8 & 0xFFFFFFF8;
      }
      if (v8 > v129)
      {
        uint64_t v130 = v127 + 16;
        do
        {
          float v131 = (__int32 *)(v130 + 4 * v227);
          v132.i32[0] = *(v131 - 4);
          short float v133 = (__int32 *)(v130 + 4 * BYTE1(v227));
          v132.i32[1] = *(v133 - 4);
          float32x2_t v134 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v132, v134), 0), v134)));
          _D0.i16[0] = *(_WORD *)(v62 + 2 * _D0.u32[0]);
          short float v136 = (__int32 *)(v130 + 4 * BYTE2(v227));
          _D1.i32[0] = *(v136 - 4);
          __asm { FCVT            S12, H0 }
          _D0.i16[0] = *(_WORD *)(v62 + 2 * _D0.u32[1]);
          __asm { FCVT            S13, H0 }
          _D1.i32[1] = *v131;
          int32x2_t v140 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D1, v134), 0), v134)));
          _D1.i16[0] = *(_WORD *)(v62 + 2 * v140.u32[0]);
          __asm { FCVT            S14, H1 }
          float v142 = fmaxf(_S12, fmaxf(_S13, _S14));
          float v143 = (float)((float)((float)(_S21 * _S13) + (float)(_S20 * _S12)) + (float)(_S22 * _S14))
               + (float)(_S23 * v142);
          float v144 = 8191.0;
          if (v143 <= 8191.0)
          {
            float v144 = (float)((float)((float)(_S21 * _S13) + (float)(_S20 * _S12)) + (float)(_S22 * _S14))
                 + (float)(_S23 * v142);
            if (v143 < 0.0) {
              float v144 = 0.0;
            }
          }
          v145.i32[0] = *v133;
          _H0 = *(_WORD *)(v62 + 2 * v140.u32[1]);
          __asm { FCVT            S15, H0 }
          v145.i32[1] = *v136;
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v145, v134), 0), v134)));
          _D0.i16[0] = *(_WORD *)(v62 + 2 * _D0.u32[0]);
          __asm { FCVT            S8, H0 }
          _D0.i16[0] = *(_WORD *)(v62 + 2 * _D0.u32[1]);
          __asm { FCVT            S31, H0 }
          float v151 = (float)((float)((float)(_S21 * _S8) + (float)(_S20 * _S15)) + (float)(_S22 * _S31))
               + (float)(_S23 * fmaxf(_S15, fmaxf(_S8, _S31)));
          float v152 = 8191.0;
          if (v151 <= 8191.0)
          {
            float v152 = v151;
            if (v151 < 0.0) {
              float v152 = 0.0;
            }
          }
          if (v82)
          {
            uint64_t v153 = (float *)(v130 + 4 * HIBYTE(v227));
            __int8 v154 = llroundf(*(v153 - 4) * 255.0);
            __int8 v155 = llroundf(*v153 * 255.0);
          }
          else
          {
            __int8 v154 = 0;
            __int8 v155 = 0;
          }
          _H1 = *(_WORD *)(v60 + 2 * llroundf(v144));
          __asm { FCVT            S1, H1 }
          float v158 = _S12 * _S1;
          float v159 = _S13 * _S1;
          float v160 = _S14 * _S1;
          _H0 = *(_WORD *)(v60 + 2 * llroundf(v152));
          __asm { FCVT            S0, H0 }
          _S27 = _S15 * _S0;
          float v164 = _S8 * _S0;
          float v165 = _S31 * _S0;
          _S31 = (float)((float)(_S4 * v159) + (float)(v158 * v221)) + (float)(v160 * _S5);
          float v167 = (float)((float)(_S7 * v159) + (float)(v158 * _S6)) + (float)(v160 * _S16);
          _S1 = (float)((float)(_S18 * v159) + (float)(v158 * _S17)) + (float)(v160 * _S19);
          float v169 = (float)((float)(_S4 * v164) + (float)(_S27 * v221)) + (float)(v165 * _S5);
          _S3 = (float)((float)(_S7 * v164) + (float)(_S27 * _S6)) + (float)(v165 * _S16);
          _S0 = (float)((float)(_S18 * v164) + (float)(_S27 * _S17)) + (float)(v165 * _S19);
          LOWORD(_S27) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S31, 0.0), 8191.0)));
          LOWORD(_S31) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S31, H31
          }
          LOWORD(_S1) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          unsigned int v174 = llroundf(fminf(fmaxf(v169, 0.0), 8191.0));
          __asm { FCVT            S2, H1 }
          LOWORD(_S1) = *(_WORD *)(v61 + 2 * v174);
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S0) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S30, H0 }
          float v179 = (float)((float)((float)(v223 * _S31) + (float)(v224 * _S27)) + (float)(v222 * _S2)) + v56;
          float v180 = (float)((float)((float)(v223 * _S3) + (float)(v224 * _S1)) + (float)(v222 * _S30)) + v56;
          if (v179 < v56) {
            float v181 = v56;
          }
          else {
            float v181 = (float)((float)((float)(v223 * _S31) + (float)(v224 * _S27)) + (float)(v222 * _S2)) + v56;
          }
          if (v179 <= v58) {
            float v182 = v181;
          }
          else {
            float v182 = v58;
          }
          v83->i8[0] = llroundf(v182);
          if (v180 < v56) {
            float v183 = v56;
          }
          else {
            float v183 = (float)((float)((float)(v223 * _S3) + (float)(v224 * _S1)) + (float)(v222 * _S30)) + v56;
          }
          if (v180 > v58) {
            float v183 = v58;
          }
          v83->i8[1] = llroundf(v183);
          float v184 = _S27 + _S1;
          float v185 = _S31 + _S3;
          float v186 = _S2 + _S30;
          float v187 = (float)((float)(v57 + (float)(v184 * v220)) + (float)((float)(_S31 + _S3) * v218))
               + (float)(v186 * *(float *)&v79);
          float v188 = (float)v32;
          if (v187 <= v59)
          {
            float v188 = (float)((float)(v57 + (float)(v184 * v220)) + (float)(v185 * v218)) + (float)(v186 * *(float *)&v79);
            if (v187 < v225) {
              float v188 = (float)v31;
            }
          }
          float v189 = (float)((float)(v57 + (float)(v184 * v193)) + (float)(v185 * v192))
               + (float)(v186 * *((float *)&v79 + 1));
          *float v128 = llroundf(v188);
          float v190 = (float)v32;
          if (v189 <= v59)
          {
            float v190 = v189;
            if (v189 < v225) {
              float v190 = (float)v31;
            }
          }
          v128[1] = llroundf(v190);
          if (v82)
          {
            v82->i8[0] = v154;
            v82->i8[1] = v155;
            uint64_t v82 = (int8x8_t *)((char *)v82 + 2);
          }
          v129 += 2;
          v130 += 32;
          float v83 = (int8x8_t *)((char *)v83 + 2);
          v128 += 2;
        }
        while (v8 > v129);
      }
      v78 += v21;
      float v77 = (int8x8_t *)((char *)v77 + v191);
      v76 += v23;
      uint64_t result = (int8x8_t *)((char *)result + v24);
      ++v54;
    }
    while (v54 != v55);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_422vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *(void *)(result + 152);
    uint64_t v15 = *(uint64_t **)(result + 136);
    uint64_t v16 = *(void **)(result + 56);
    uint64_t v17 = **(void **)(result + 64);
    uint64_t v18 = *v15;
    uint64_t v19 = v15[1];
    uint64_t v20 = v15[2];
    LOWORD(a3) = *(_WORD *)(v14 + 144);
    float v21 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v14 + 146);
    float v22 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v14 + 148);
    float v23 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 150);
    float v24 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 152);
    float v25 = (float)LODWORD(a6);
    float v130 = *(float *)(v14 + 36);
    float v131 = v24;
    float v26 = *(float *)(v14 + 44);
    float v128 = *(float *)(v14 + 48) * 0.5;
    float v129 = *(float *)(v14 + 40);
    float v126 = *(float *)(v14 + 56) * 0.5;
    float v127 = *(float *)(v14 + 52) * 0.5;
    float v124 = *(float *)(v14 + 64) * 0.5;
    float v125 = *(float *)(v14 + 60) * 0.5;
    float v27 = *(float *)(v14 + 72);
    float v123 = *(float *)(v14 + 68) * 0.5;
    float v28 = *(float *)(v14 + 76);
    float v29 = *(float *)(v14 + 80);
    float v30 = *(float *)(v14 + 84);
    float v31 = *(float *)(v14 + 88);
    float v32 = *(float *)(v14 + 92);
    float v33 = *(float *)(v14 + 96);
    float v34 = *(float *)(v14 + 100);
    float v35 = *(float *)(v14 + 104);
    uint64_t v36 = v14 + 164;
    uint64_t v37 = v14 + 16548;
    uint64_t v38 = v14 + 32932;
    float v40 = *(float *)(v14 + 108);
    float v39 = *(float *)(v14 + 112);
    float v41 = *(float *)(v14 + 116);
    float v42 = *(float *)(v14 + 120);
    uint64_t v43 = *(uint64_t **)(result + 128);
    uint64_t v44 = *(void *)(result + 112);
    unint64_t v45 = *(void *)(result + 104) * a2 / v7 + *(void *)(result + 120);
    uint64_t v46 = *(void *)(result + 36);
    uint64_t result = *(unsigned __int8 *)(v14 + 157);
    uint64_t v47 = *(unsigned __int8 *)(v14 + 156);
    uint64_t v48 = *(unsigned __int8 *)(v14 + 155);
    uint64_t v49 = *(unsigned __int8 *)(v14 + 154);
    uint64_t v50 = v43[2];
    if (v50) {
      unint64_t v51 = (unsigned char *)(v50 + v45 * v20 + v44);
    }
    else {
      unint64_t v51 = 0;
    }
    uint64_t v53 = *v43;
    uint64_t v52 = v43[1];
    uint64_t v54 = v52 + v45 * v19 + v44;
    if (!v52) {
      uint64_t v54 = 0;
    }
    uint64_t v55 = (unsigned char *)(v53 + v45 * v18 + v44);
    float32x2_t v56 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v57 = *v16 + v17 * v12 + 16 * v46;
    do
    {
      if (v11)
      {
        unint64_t v58 = 0;
        float v59 = v51;
        uint64_t v60 = v55;
        uint64_t v61 = v57;
        do
        {
          float v62 = v22;
          v63.i32[0] = *(_DWORD *)(v61 + 4 * v49);
          v63.i32[1] = *(_DWORD *)(v61 + 4 * v48);
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v63, v56), 0), v56)));
          uint64_t v65 = v61 + 16;
          _D3.i16[0] = *(_WORD *)(v36 + 2 * _D3.u32[0]);
          __asm { FCVT            S15, H3 }
          _D3.i16[0] = *(_WORD *)(v36 + 2 * _D3.u32[1]);
          v71.i32[0] = *(_DWORD *)(v61 + 4 * v47);
          v71.i32[1] = *(_DWORD *)(v61 + 16 + 4 * v49);
          __asm { FCVT            S16, H3 }
          int32x2_t v73 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v71, v56), 0), v56)));
          _D3.i16[0] = *(_WORD *)(v36 + 2 * v73.u32[0]);
          __asm { FCVT            S17, H3 }
          float v75 = fmaxf(_S15, fmaxf(_S16, _S17));
          float v76 = (float)((float)((float)(v39 * _S16) + (float)(v40 * _S15)) + (float)(v41 * _S17)) + (float)(v42 * v75);
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = (float)((float)((float)(v39 * _S16) + (float)(v40 * _S15)) + (float)(v41 * _S17)) + (float)(v42 * v75);
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          _H18 = *(_WORD *)(v36 + 2 * v73.u32[1]);
          __asm { FCVT            S19, H18 }
          v80.i32[0] = *(_DWORD *)(v65 + 4 * v48);
          v80.i32[1] = *(_DWORD *)(v65 + 4 * v47);
          _D18 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v80, v56), 0), v56)));
          _D18.i16[0] = *(_WORD *)(v36 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v36 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          float v84 = (float)((float)((float)(v39 * _S20) + (float)(v40 * _S19)) + (float)(v41 * _S22))
              + (float)(v42 * fmaxf(_S19, fmaxf(_S20, _S22)));
          float v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            float v85 = v84;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          if (v59)
          {
            float v86 = *(float *)(v65 + 4 * result);
            char v87 = llroundf(*(float *)(v61 + 4 * result) * 255.0);
            char v88 = llroundf(v86 * 255.0);
          }
          else
          {
            char v87 = 0;
            char v88 = 0;
          }
          float v22 = v62;
          _H1 = *(_WORD *)(v37 + 2 * llroundf(v77));
          __asm { FCVT            S1, H1 }
          float v91 = _S15 * _S1;
          float v92 = _S16 * _S1;
          float v93 = _S17 * _S1;
          _H16 = *(_WORD *)(v37 + 2 * llroundf(v85));
          __asm { FCVT            S16, H16 }
          _S17 = _S19 * _S16;
          _S18 = _S20 * _S16;
          float v98 = _S22 * _S16;
          float v99 = (float)((float)(v28 * v92) + (float)(v91 * v27)) + (float)(v93 * v29);
          float v100 = (float)((float)(v31 * v92) + (float)(v91 * v30)) + (float)(v93 * v32);
          _S1 = (float)((float)(v34 * v92) + (float)(v91 * v33)) + (float)(v93 * v35);
          _S3 = (float)((float)(v28 * _S18) + (float)(_S17 * v27)) + (float)(v98 * v29);
          _S5 = (float)((float)(v31 * _S18) + (float)(_S17 * v30)) + (float)(v98 * v32);
          _S16 = (float)((float)(v34 * _S18) + (float)(_S17 * v33)) + (float)(v98 * v35);
          LOWORD(_S17) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          LOWORD(_S18) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S18, H18
          }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S16) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S19, H16 }
          float v111 = (float)((float)((float)(v129 * _S18) + (float)(v130 * _S17)) + (float)(v26 * _S1)) + v21;
          float v112 = (float)((float)((float)(v129 * _S5) + (float)(v130 * _S3)) + (float)(v26 * _S19)) + v21;
          if (v111 < v21) {
            float v113 = v21;
          }
          else {
            float v113 = (float)((float)((float)(v129 * _S18) + (float)(v130 * _S17)) + (float)(v26 * _S1)) + v21;
          }
          if (v111 <= v23) {
            float v114 = v113;
          }
          else {
            float v114 = v23;
          }
          *uint64_t v60 = llroundf(v114);
          if (v112 < v21) {
            float v115 = v21;
          }
          else {
            float v115 = (float)((float)((float)(v129 * _S5) + (float)(v130 * _S3)) + (float)(v26 * _S19)) + v21;
          }
          if (v112 > v23) {
            float v115 = v23;
          }
          v60[1] = llroundf(v115);
          float v116 = _S17 + _S3;
          float v117 = _S18 + _S5;
          float v118 = _S1 + _S19;
          float v119 = (float)((float)(v62 + (float)(v116 * v128)) + (float)((float)(_S18 + _S5) * v127))
               + (float)((float)(_S1 + _S19) * v126);
          float v120 = v25;
          if (v119 <= v25)
          {
            float v120 = v119;
            if (v119 < v131) {
              float v120 = v131;
            }
          }
          float v121 = (float)((float)(v62 + (float)(v116 * v125)) + (float)(v117 * v124)) + (float)(v118 * v123);
          *(unsigned char *)(v54 + v58) = llroundf(v120);
          float v122 = v25;
          if (v121 <= v25)
          {
            float v122 = v121;
            if (v121 < v131) {
              float v122 = v131;
            }
          }
          *(unsigned char *)(v54 + v58 + 1) = llroundf(v122);
          if (v59)
          {
            *float v59 = v87;
            v59[1] = v88;
            v59 += 2;
          }
          v61 += 32;
          v58 += 2;
          v60 += 2;
        }
        while (v11 > v58);
      }
      v57 += v17;
      v55 += v18;
      v54 += v19;
      v51 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

unsigned char *vt_Copy_RGfA_TRC_Mat_TRC_422vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, float32x4_t a4, double a5, float32x4_t a6)
{
  uint64_t v6 = 0;
  unint64_t v7 = *(void *)(a1 + 20);
  uint64_t v184 = *(void *)(a1 + 36);
  uint64_t v8 = *(void *)(a1 + 44);
  uint64_t v9 = *(void *)(a1 + 28);
  unint64_t v10 = *a1;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = v11 + v8;
  unint64_t v13 = (v9 + v9 * a2) / v10;
  uint64_t v14 = v13 + v8;
  uint64_t v15 = *((void *)a1 + 14);
  uint64_t v16 = *((void *)a1 + 19);
  unint64_t v17 = *((void *)a1 + 13) * a2;
  uint64_t v18 = *((void *)a1 + 15);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v20 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v21 = **((void **)a1 + 8);
  uint64_t v182 = **((void **)a1 + 7);
  uint64_t v22 = *v20;
  uint64_t v23 = v20[1];
  uint64_t v24 = v20[2];
  uint64_t v181 = *v19;
  uint64_t result = (unsigned char *)v19[1];
  uint64_t v26 = v19[2];
  int v187 = *(_DWORD *)(v16 + 154);
  unsigned int v27 = *(unsigned __int16 *)(v16 + 144);
  unsigned int v28 = *(unsigned __int16 *)(v16 + 146);
  unsigned int v29 = *(unsigned __int16 *)(v16 + 148);
  unsigned int v30 = *(unsigned __int16 *)(v16 + 150);
  unsigned int v31 = *(unsigned __int16 *)(v16 + 152);
  _S29 = *(float *)(v16 + 36);
  _S30 = *(float *)(v16 + 40);
  _S12 = *(float *)(v16 + 44);
  v35.i32[0] = *(_DWORD *)(v16 + 48);
  v36.i32[0] = *(_DWORD *)(v16 + 52);
  v37.i32[0] = *(_DWORD *)(v16 + 56);
  a4.i32[0] = *(_DWORD *)(v16 + 60);
  __int32 v38 = *(_DWORD *)(v16 + 64);
  __int32 v39 = *(_DWORD *)(v16 + 68);
  _S23 = *(float *)(v16 + 72);
  uint64_t v41 = v17 / v10 + v18;
  uint64_t v42 = v21 * v12;
  _S4 = *(float *)(v16 + 76);
  _S5 = *(float *)(v16 + 80);
  _S6 = *(float *)(v16 + 84);
  _S7 = *(float *)(v16 + 88);
  _S16 = *(float *)(v16 + 92);
  _S17 = *(float *)(v16 + 96);
  _S18 = *(float *)(v16 + 100);
  _S19 = *(float *)(v16 + 104);
  v51.i64[1] = 0;
  memset(v186, 0, sizeof(v186));
  do
  {
    unsigned int v52 = 0;
    char v53 = *((unsigned char *)&v187 + v6);
    do
    {
      *((unsigned char *)v186 + 8 * (((_BYTE)v6 + (v52 >> 3)) & 0x1F) + v52) = v53 + 4 * v52;
      ++v52;
    }
    while (v52 != 8);
    ++v6;
  }
  while (v6 != 4);
  if (v13 != v11)
  {
    uint64_t v54 = 0;
    uint64_t v55 = v14 - v12;
    uint64_t v56 = v16 + 16548;
    uint64_t v57 = v16 + 164;
    float v58 = (float)v27;
    float v59 = (float)v28;
    float v60 = (float)v29;
    float v185 = (float)v30;
    float v61 = (float)v31;
    v35.i32[1] = a4.i32[0];
    *(float32x2_t *)v51.f32 = vmul_f32(v35, (float32x2_t)0x3F0000003F000000);
    v36.i32[1] = v38;
    *(float32x2_t *)a6.f32 = vmul_f32(v36, (float32x2_t)0x3F0000003F000000);
    v37.i32[1] = v39;
    *(float32x2_t *)a4.f32 = vmul_f32(v37, (float32x2_t)0x3F0000003F000000);
    __asm { FCVT            H0, S29 }
    short float v180 = _H0;
    float16x8_t v179 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v51), 0);
    __asm { FCVT            H0, S30 }
    short float v178 = _H0;
    float16x8_t v177 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a6), 0);
    __asm { FCVT            H0, S12 }
    short float v176 = _H0;
    _Q0 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a4), 0);
    float16x8_t v175 = (float16x8_t)_Q0;
    __asm { FCVT            H0, S23 }
    short float v174 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S4 }
    short float v173 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S5 }
    short float v172 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S6 }
    short float v171 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S7 }
    short float v170 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S16 }
    short float v169 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S17 }
    short float v168 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S18 }
    short float v167 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S19 }
    short float v166 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v27;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v28;
    int16x8_t v71 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v165 = (float16x8_t)v71;
    *(short float *)v71.i16 = (short float)v29;
    int16x8_t v72 = vdupq_lane_s16(*(int16x4_t *)v71.i8, 0);
    float16x8_t v164 = (float16x8_t)v72;
    *(short float *)v72.i16 = (short float)v30;
    int16x8_t v73 = vdupq_lane_s16(*(int16x4_t *)v72.i8, 0);
    float16x8_t v163 = (float16x8_t)v73;
    *(short float *)v73.i16 = (short float)v31;
    float16x8_t v162 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v73.i8, 0);
    if (v26) {
      int16x8_t v74 = (int8x8_t *)(v26 + v24 * v41 + v15);
    }
    else {
      int16x8_t v74 = 0;
    }
    if (result) {
      result += v23 * v41 + v15;
    }
    else {
      uint64_t result = 0;
    }
    float v75 = (int8x8_t *)(v181 + v22 * v41 + v15);
    uint64_t v76 = v182 + v42 + 16 * v184;
    float v183 = a6.f32[0];
    uint64_t v77 = v51.i64[0];
    unint64_t v78 = a4.i64[0];
    float v161 = a6.f32[1];
    v79.i64[0] = 0x9000900090009000;
    v79.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v7 < 8)
      {
        unint64_t v120 = 0;
        uint64_t v118 = v76;
        uint64_t v82 = v75;
        float v119 = result;
        uint64_t v81 = v74;
      }
      else
      {
        uint64_t v80 = 0;
        uint64_t v81 = v74;
        uint64_t v82 = v75;
        float v83 = (const float *)v76;
        do
        {
          float v84 = v83;
          float32x4x4_t v188 = vld4q_f32(v83);
          float v85 = v83 + 16;
          float32x4x4_t v189 = vld4q_f32(v85);
          if (v81) {
            int8x8_t v86 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v188.val[3]), v189.val[3]), (float16x8_t)vdupq_n_s16(0x5BF8u))));
          }
          else {
            int8x8_t v86 = 0;
          }
          float16x8_t v87 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v188.val[1]), v189.val[1]);
          v88.i64[0] = 0x7000700070007000;
          v88.i64[1] = 0x7000700070007000;
          uint16x8_t v89 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v188.val[0]), v189.val[0]), v88), (float16x8_t)0), v79));
          uint32x4_t v90 = vmovl_high_u16(v89);
          uint32x4_t v91 = vmovl_u16(*(uint16x4_t *)v89.i8);
          v92.i16[0] = *(_WORD *)(v57 + 2 * v91.u32[0]);
          v92.i16[1] = *(_WORD *)(v57 + 2 * v91.u32[1]);
          v92.i16[2] = *(_WORD *)(v57 + 2 * v91.u32[2]);
          v92.i16[3] = *(_WORD *)(v57 + 2 * v91.u32[3]);
          v92.i16[4] = *(_WORD *)(v57 + 2 * v90.u32[0]);
          v92.i16[5] = *(_WORD *)(v57 + 2 * v90.u32[1]);
          v92.i16[6] = *(_WORD *)(v57 + 2 * v90.u32[2]);
          v92.i16[7] = *(_WORD *)(v57 + 2 * v90.u32[3]);
          uint16x8_t v93 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v87, v88), (float16x8_t)0), v79));
          uint32x4_t v94 = vmovl_high_u16(v93);
          uint32x4_t v95 = vmovl_u16(*(uint16x4_t *)v93.i8);
          v96.i16[0] = *(_WORD *)(v57 + 2 * v95.u32[0]);
          v96.i16[1] = *(_WORD *)(v57 + 2 * v95.u32[1]);
          v96.i16[2] = *(_WORD *)(v57 + 2 * v95.u32[2]);
          v96.i16[3] = *(_WORD *)(v57 + 2 * v95.u32[3]);
          v96.i16[4] = *(_WORD *)(v57 + 2 * v94.u32[0]);
          v96.i16[5] = *(_WORD *)(v57 + 2 * v94.u32[1]);
          v96.i16[6] = *(_WORD *)(v57 + 2 * v94.u32[2]);
          v96.i16[7] = *(_WORD *)(v57 + 2 * v94.u32[3]);
          uint16x8_t v97 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v188.val[2]), v189.val[2]), v88), (float16x8_t)0), v79));
          uint32x4_t v98 = vmovl_high_u16(v97);
          float16x8_t v99 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v97.i8);
          v99.i16[0] = *(_WORD *)(v57 + 2 * v99.u32[0]);
          v99.i16[1] = *(_WORD *)(v57 + 2 * v99.u32[1]);
          v99.i16[2] = *(_WORD *)(v57 + 2 * v99.u32[2]);
          v99.i16[3] = *(_WORD *)(v57 + 2 * v99.u32[3]);
          v99.i16[4] = *(_WORD *)(v57 + 2 * v98.u32[0]);
          v99.i16[5] = *(_WORD *)(v57 + 2 * v98.u32[1]);
          v99.i16[6] = *(_WORD *)(v57 + 2 * v98.u32[2]);
          v99.i16[7] = *(_WORD *)(v57 + 2 * v98.u32[3]);
          float16x8_t v100 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v92, v171), v96, v170), v99, v169);
          float16x8_t v101 = vmulq_n_f16(v99, v166);
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v92, v174), v96, v173), v99, v172), (float16x8_t)0), v79));
          uint32x4_t v103 = vmovl_high_u16(v102);
          uint32x4_t v104 = vmovl_u16(*(uint16x4_t *)v102.i8);
          v189.val[2].i16[0] = *(_WORD *)(v56 + 2 * v104.u32[0]);
          v189.val[2].i16[1] = *(_WORD *)(v56 + 2 * v104.u32[1]);
          v189.val[2].i16[2] = *(_WORD *)(v56 + 2 * v104.u32[2]);
          v189.val[2].i16[3] = *(_WORD *)(v56 + 2 * v104.u32[3]);
          v189.val[2].i16[4] = *(_WORD *)(v56 + 2 * v103.u32[0]);
          v189.val[2].i16[5] = *(_WORD *)(v56 + 2 * v103.u32[1]);
          v189.val[2].i16[6] = *(_WORD *)(v56 + 2 * v103.u32[2]);
          float16x8_t v105 = (float16x8_t)v189.val[2];
          v105.i16[7] = *(_WORD *)(v56 + 2 * v103.u32[3]);
          float16x8_t v106 = vmlaq_n_f16(v101, v96, v167);
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v100, (float16x8_t)0), v79));
          uint32x4_t v108 = vmovl_high_u16(v107);
          uint32x4_t v109 = vmovl_u16(*(uint16x4_t *)v107.i8);
          v96.i16[0] = *(_WORD *)(v56 + 2 * v109.u32[0]);
          v96.i16[1] = *(_WORD *)(v56 + 2 * v109.u32[1]);
          v96.i16[2] = *(_WORD *)(v56 + 2 * v109.u32[2]);
          v96.i16[3] = *(_WORD *)(v56 + 2 * v109.u32[3]);
          v96.i16[4] = *(_WORD *)(v56 + 2 * v108.u32[0]);
          v96.i16[5] = *(_WORD *)(v56 + 2 * v108.u32[1]);
          v96.i16[6] = *(_WORD *)(v56 + 2 * v108.u32[2]);
          float16x8_t v110 = v96;
          v110.i16[7] = *(_WORD *)(v56 + 2 * v108.u32[3]);
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v106, v92, v168), (float16x8_t)0), v79));
          int16x8_t v112 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v111.i8);
          uint32x4_t v113 = vmovl_high_u16(v111);
          *(void *)&long long v114 = v113.u32[2];
          *((void *)&v114 + 1) = v113.u32[3];
          long long v115 = v114;
          *((void *)&v114 + 1) = v112.u32[3];
          v112.i16[7] = (unint64_t)v112.u32[3] >> 48;
          v112.i16[0] = *(_WORD *)(v56 + 2 * v112.u32[0]);
          v112.i16[1] = *(_WORD *)(v56 + 2 * v112.u32[1]);
          v112.i16[2] = *(_WORD *)(v56 + 2 * v112.u32[2]);
          v112.i16[3] = *(_WORD *)(v56 + 2 * *((void *)&v114 + 1));
          v112.i16[4] = *(_WORD *)(v56 + 2 * v113.u32[0]);
          v112.i16[5] = *(_WORD *)(v56 + 2 * v113.u32[1]);
          v112.i16[6] = *(_WORD *)(v56 + 2 * v115);
          float16x8_t v116 = (float16x8_t)v112;
          v116.i16[7] = *(_WORD *)(v56 + 2 * *((void *)&v115 + 1));
          *v82++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v70, v105, v180), v110, v178), v116, v176), v70), v164)));
          int16x8_t v117 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v189.val[2], (int16x8_t)v96), (float16x8_t)vuzp2q_s16((int16x8_t)v105, (int16x8_t)v110));
          *(int8x8_t *)&result[v80] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v165, v179, (float16x8_t)vzip1q_s16(v117, v117)), v177, (float16x8_t)vzip2q_s16(v117, v117)), v175, vaddq_f16((float16x8_t)vtrn1q_s16(v112, v112), (float16x8_t)vtrn2q_s16((int16x8_t)v116, (int16x8_t)v116))), v163), v162)));
          if (v81) {
            *v81++ = v86;
          }
          v80 += 8;
          float v83 = v84 + 32;
        }
        while ((int)v80 < (int)v7 - 7);
        uint64_t v118 = (uint64_t)(v84 + 32);
        float v119 = &result[v80];
        unint64_t v120 = v7 & 0xFFFFFFF8;
      }
      if (v7 > v120)
      {
        uint64_t v121 = v118 + 16;
        do
        {
          if (v81)
          {
            float v122 = (float *)(v121 + 4 * HIBYTE(v187));
            __int8 v123 = llroundf(*(v122 - 4) * 255.0);
            __int8 v124 = llroundf(*v122 * 255.0);
          }
          else
          {
            __int8 v123 = 0;
            __int8 v124 = 0;
          }
          float v125 = (__int32 *)(v121 + 4 * v187);
          v126.i32[0] = *(v125 - 4);
          float v127 = (__int32 *)(v121 + 4 * BYTE1(v187));
          float v128 = (__int32 *)(v121 + 4 * BYTE2(v187));
          v129.i32[0] = *(v128 - 4);
          v126.i32[1] = *(v127 - 4);
          float32x2_t v130 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D3.i32[0] = *v127;
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v126, v130), 0), v130)));
          _D0.i16[0] = *(_WORD *)(v57 + 2 * _D0.u32[0]);
          __asm { FCVT            S0, H0 }
          _H25 = *(_WORD *)(v57 + 2 * _D0.u32[1]);
          __asm { FCVT            S25, H25 }
          v129.i32[1] = *v125;
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v129, v130), 0), v130)));
          _D1.i16[0] = *(_WORD *)(v57 + 2 * _D1.u32[0]);
          __asm { FCVT            S1, H1 }
          _H26 = *(_WORD *)(v57 + 2 * _D1.u32[1]);
          _D3.i32[1] = *v128;
          _D2 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D3, v130), 0), v130)));
          _D2.i16[0] = *(_WORD *)(v57 + 2 * _D2.u32[0]);
          __asm
          {
            FCVT            S3, H26
            FCVT            S2, H2
          }
          _H26 = *(_WORD *)(v57 + 2 * _D2.u32[1]);
          __asm { FCVT            S26, H26 }
          _S27 = (float)((float)(_S4 * _S25) + (float)(*(float *)_D0.i32 * _S23)) + (float)(*(float *)_D1.i32 * _S5);
          float v141 = (float)((float)(_S7 * _S25) + (float)(*(float *)_D0.i32 * _S6)) + (float)(*(float *)_D1.i32 * _S16);
          *(float *)_D0.i32 = (float)((float)(_S18 * _S25) + (float)(*(float *)_D0.i32 * _S17))
                            + (float)(*(float *)_D1.i32 * _S19);
          *(float *)_D1.i32 = (float)((float)(_S4 * *(float *)_D2.i32) + (float)(_D3.f32[0] * _S23))
                            + (float)(_S26 * _S5);
          float v142 = (float)((float)(_S7 * *(float *)_D2.i32) + (float)(_D3.f32[0] * _S6)) + (float)(_S26 * _S16);
          *(float *)_D2.i32 = (float)((float)(_S18 * *(float *)_D2.i32) + (float)(_D3.f32[0] * _S17))
                            + (float)(_S26 * _S19);
          _D3.i16[0] = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(_S27, 0.0), 8191.0)));
          LOWORD(_S27) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S27, H27
          }
          _D0.i16[0] = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(*(float *)_D0.i32, 0.0), 8191.0)));
          __asm { FCVT            S28, H0 }
          _D0.i16[0] = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(*(float *)_D1.i32, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _D1.i16[0] = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _D2.i16[0] = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(*(float *)_D2.i32, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          float v149 = (float)((float)((float)(_S30 * _S27) + (float)(_S29 * _S3)) + (float)(_S12 * _S28)) + v58;
          float v150 = (float)((float)((float)(_S30 * _S1) + (float)(_S29 * _S0)) + (float)(_S12 * _S2)) + v58;
          if (v149 < v58) {
            float v151 = v58;
          }
          else {
            float v151 = (float)((float)((float)(_S30 * _S27) + (float)(_S29 * _S3)) + (float)(_S12 * _S28)) + v58;
          }
          if (v149 <= v60) {
            float v152 = v151;
          }
          else {
            float v152 = v60;
          }
          v82->i8[0] = llroundf(v152);
          if (v150 < v58) {
            float v153 = v58;
          }
          else {
            float v153 = (float)((float)((float)(_S30 * _S1) + (float)(_S29 * _S0)) + (float)(_S12 * _S2)) + v58;
          }
          if (v150 > v60) {
            float v153 = v60;
          }
          v82->i8[1] = llroundf(v153);
          float v154 = _S3 + _S0;
          float v155 = _S27 + _S1;
          float v156 = _S28 + _S2;
          float v157 = (float)((float)(v59 + (float)(v154 * *(float *)&v77)) + (float)(v155 * v183))
               + (float)(v156 * *(float *)&v78);
          float v158 = (float)v31;
          if (v157 <= v61)
          {
            float v158 = (float)((float)(v59 + (float)(v154 * *(float *)&v77)) + (float)(v155 * v183))
                 + (float)(v156 * *(float *)&v78);
            if (v157 < v185) {
              float v158 = (float)v30;
            }
          }
          float v159 = (float)((float)(v59 + (float)(v154 * *((float *)&v77 + 1))) + (float)(v155 * v161))
               + (float)(v156 * *((float *)&v78 + 1));
          *float v119 = llroundf(v158);
          float v160 = (float)v31;
          if (v159 <= v61)
          {
            float v160 = v159;
            if (v159 < v185) {
              float v160 = (float)v30;
            }
          }
          v119[1] = llroundf(v160);
          if (v81)
          {
            v81->i8[0] = v123;
            v81->i8[1] = v124;
            uint64_t v81 = (int8x8_t *)((char *)v81 + 2);
          }
          v120 += 2;
          v121 += 32;
          uint64_t v82 = (int8x8_t *)((char *)v82 + 2);
          v119 += 2;
        }
        while (v7 > v120);
      }
      v76 += v21;
      float v75 = (int8x8_t *)((char *)v75 + v22);
      result += v23;
      int16x8_t v74 = (int8x8_t *)((char *)v74 + v24);
      ++v54;
    }
    while (v54 != v55);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_422vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    uint64_t v11 = 0;
    unint64_t v12 = *(void *)(result + 20);
    unint64_t v13 = v9 + *(void *)(result + 44);
    unint64_t v14 = v10 - v9;
    uint64_t v15 = *(void *)(result + 152);
    uint64_t v16 = *(uint64_t **)(result + 136);
    uint64_t v17 = *(void **)(result + 56);
    uint64_t v18 = **(void **)(result + 64);
    uint64_t v19 = *v16;
    uint64_t v20 = v16[1];
    uint64_t v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    float v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    float v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    float v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    float v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v15 + 152);
    float v26 = (float)LODWORD(a7);
    float v27 = *(float *)(v15 + 36);
    float v28 = *(float *)(v15 + 40);
    float v29 = *(float *)(v15 + 44);
    float v104 = *(float *)(v15 + 52) * 0.5;
    float v105 = *(float *)(v15 + 48) * 0.5;
    float v102 = *(float *)(v15 + 60) * 0.5;
    float v103 = *(float *)(v15 + 56) * 0.5;
    float v30 = *(float *)(v15 + 64) * 0.5;
    float v31 = *(float *)(v15 + 72);
    float v32 = *(float *)(v15 + 68) * 0.5;
    float v33 = *(float *)(v15 + 76);
    float v34 = *(float *)(v15 + 80);
    float v35 = *(float *)(v15 + 84);
    float v36 = *(float *)(v15 + 88);
    float v37 = *(float *)(v15 + 92);
    float v38 = *(float *)(v15 + 96);
    float v39 = *(float *)(v15 + 100);
    float v40 = *(float *)(v15 + 104);
    uint64_t v41 = v15 + 164;
    uint64_t v42 = v15 + 16548;
    uint64_t v43 = *(uint64_t **)(result + 128);
    uint64_t v44 = *(void *)(result + 112);
    unint64_t v45 = *(void *)(result + 104) * a2 / v8 + *(void *)(result + 120);
    uint64_t v46 = *(void *)(result + 36);
    uint64_t v47 = *(unsigned __int8 *)(v15 + 157);
    uint64_t result = *(unsigned __int8 *)(v15 + 156);
    uint64_t v48 = *(unsigned __int8 *)(v15 + 155);
    uint64_t v49 = *(unsigned __int8 *)(v15 + 154);
    uint64_t v50 = v43[2];
    if (v50) {
      float32x4_t v51 = (unsigned char *)(v50 + v45 * v21 + v44);
    }
    else {
      float32x4_t v51 = 0;
    }
    uint64_t v53 = *v43;
    uint64_t v52 = v43[1];
    uint64_t v54 = v52 + v45 * v20 + v44;
    if (!v52) {
      uint64_t v54 = 0;
    }
    uint64_t v55 = (unsigned char *)(v53 + v45 * v19 + v44);
    float32x2_t v56 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v57 = *v17 + v18 * v13 + 16 * v46;
    do
    {
      if (v12)
      {
        unint64_t v58 = 0;
        uint64_t v59 = v57;
        float v60 = v51;
        float v61 = v55;
        do
        {
          uint64_t v62 = v59 + 16;
          if (v60)
          {
            char v63 = llroundf(*(float *)(v59 + 4 * v47) * 255.0);
            char v64 = llroundf(*(float *)(v62 + 4 * v47) * 255.0);
          }
          else
          {
            char v63 = 0;
            char v64 = 0;
          }
          v65.i32[0] = *(_DWORD *)(v59 + 4 * v49);
          v65.i32[1] = *(_DWORD *)(v59 + 4 * v48);
          _D11 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v65, v56), 0), v56)));
          _D11.i16[0] = *(_WORD *)(v41 + 2 * _D11.u32[0]);
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v41 + 2 * _D11.u32[1]);
          __asm { FCVT            S12, H12 }
          v73.i32[0] = *(_DWORD *)(v59 + 4 * result);
          v73.i32[1] = *(_DWORD *)(v62 + 4 * v49);
          _D13 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v73, v56), 0), v56)));
          _D13.i16[0] = *(_WORD *)(v41 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v41 + 2 * _D13.u32[1]);
          __asm { FCVT            S14, H14 }
          v77.i32[0] = *(_DWORD *)(v62 + 4 * v48);
          v77.i32[1] = *(_DWORD *)(v62 + 4 * result);
          _D15 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v77, v56), 0), v56)));
          _D15.i16[0] = *(_WORD *)(v41 + 2 * _D15.u32[0]);
          __asm { FCVT            S15, H15 }
          _H16 = *(_WORD *)(v41 + 2 * _D15.u32[1]);
          __asm { FCVT            S16, H16 }
          _S17 = (float)((float)(v33 * _S12) + (float)(*(float *)_D11.i32 * v31)) + (float)(*(float *)_D13.i32 * v34);
          _S18 = (float)((float)(v36 * _S12) + (float)(*(float *)_D11.i32 * v35)) + (float)(*(float *)_D13.i32 * v37);
          *(float *)_D11.i32 = (float)((float)(v39 * _S12) + (float)(*(float *)_D11.i32 * v38))
                             + (float)(*(float *)_D13.i32 * v40);
          _S12 = (float)((float)(v33 * *(float *)_D15.i32) + (float)(_S14 * v31)) + (float)(_S16 * v34);
          *(float *)_D13.i32 = (float)((float)(v36 * *(float *)_D15.i32) + (float)(_S14 * v35)) + (float)(_S16 * v37);
          _S16 = (float)((float)(v39 * *(float *)_D15.i32) + (float)(_S14 * v38)) + (float)(_S16 * v40);
          LOWORD(_S17) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          LOWORD(_S18) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S18, H18
          }
          _D11.i16[0] = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(*(float *)_D11.i32, 0.0), 8191.0)));
          __asm { FCVT            S14, H11 }
          _D11.i16[0] = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(*(float *)_D13.i32, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          LOWORD(_S16) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          float v91 = (float)((float)((float)(v28 * _S18) + (float)(v27 * _S17)) + (float)(v29 * _S14)) + v22;
          float v92 = (float)((float)((float)(v28 * _S12) + (float)(v27 * _S11)) + (float)(v29 * _S16)) + v22;
          if (v91 < v22) {
            float v93 = v22;
          }
          else {
            float v93 = (float)((float)((float)(v28 * _S18) + (float)(v27 * _S17)) + (float)(v29 * _S14)) + v22;
          }
          if (v91 > v24) {
            float v93 = v24;
          }
          *float v61 = llroundf(v93);
          if (v92 < v22) {
            float v94 = v22;
          }
          else {
            float v94 = (float)((float)((float)(v28 * _S12) + (float)(v27 * _S11)) + (float)(v29 * _S16)) + v22;
          }
          if (v92 > v24) {
            float v94 = v24;
          }
          v61[1] = llroundf(v94);
          float v95 = _S17 + _S11;
          float v96 = _S18 + _S12;
          float v97 = _S14 + _S16;
          float v98 = (float)((float)(v23 + (float)(v95 * v105)) + (float)(v96 * v104)) + (float)((float)(_S14 + _S16) * v103);
          float v99 = v26;
          if (v98 <= v26)
          {
            float v99 = (float)((float)(v23 + (float)(v95 * v105)) + (float)(v96 * v104)) + (float)(v97 * v103);
            if (v98 < v25) {
              float v99 = v25;
            }
          }
          float v100 = (float)((float)(v23 + (float)(v95 * v102)) + (float)(v96 * v30)) + (float)(v97 * v32);
          *(unsigned char *)(v54 + v58) = llroundf(v99);
          float v101 = v26;
          if (v100 <= v26)
          {
            float v101 = v100;
            if (v100 < v25) {
              float v101 = v25;
            }
          }
          *(unsigned char *)(v54 + v58 + 1) = llroundf(v101);
          if (v60)
          {
            *float v60 = v63;
            v60[1] = v64;
            v60 += 2;
          }
          v59 += 32;
          v58 += 2;
          v61 += 2;
        }
        while (v12 > v58);
      }
      v57 += v18;
      v55 += v19;
      v54 += v20;
      v51 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_422vf_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGfA_rgb_422vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v5 = 0;
  unint64_t v6 = *(void *)(a1 + 20);
  uint64_t v110 = *(void *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 44);
  uint64_t v8 = *(void *)(a1 + 28);
  unint64_t v9 = *a1;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = v10 + v7;
  unint64_t v12 = (v8 + v8 * a2) / v9;
  uint64_t v13 = v12 + v7;
  uint64_t v14 = *((void *)a1 + 14);
  unint64_t v15 = *((void *)a1 + 13) * a2;
  uint64_t v16 = *((void *)a1 + 19);
  uint64_t v17 = *((void *)a1 + 15);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v20 = **((void **)a1 + 8);
  uint64_t v109 = **((void **)a1 + 7);
  uint64_t v21 = *v19;
  uint64_t v22 = v19[1];
  uint64_t v23 = v19[2];
  uint64_t v108 = *v18;
  uint64_t v25 = v18[1];
  uint64_t v24 = v18[2];
  unsigned int v26 = *(_DWORD *)(v16 + 136);
  int v118 = *(_DWORD *)(v16 + 154);
  unsigned int v27 = *(unsigned __int16 *)(v16 + 144);
  unsigned int v28 = *(unsigned __int16 *)(v16 + 146);
  unsigned int v29 = *(unsigned __int16 *)(v16 + 148);
  unsigned int v30 = *(unsigned __int16 *)(v16 + 150);
  unsigned int v31 = *(unsigned __int16 *)(v16 + 152);
  uint64_t v32 = v15 / v9 + v17;
  uint64_t v33 = v20 * v11;
  _S0 = *(float *)(v16 + 36);
  _S1 = *(float *)(v16 + 40);
  _S2 = *(float *)(v16 + 44);
  v2.i32[0] = *(_DWORD *)(v16 + 48);
  v3.i32[0] = *(_DWORD *)(v16 + 52);
  v4.i32[0] = *(_DWORD *)(v16 + 56);
  __int32 v38 = *(_DWORD *)(v16 + 60);
  __int32 v37 = *(_DWORD *)(v16 + 64);
  __int32 v39 = *(_DWORD *)(v16 + 68);
  memset(v117, 0, sizeof(v117));
  do
  {
    unsigned int v40 = 0;
    int v41 = *((unsigned __int8 *)&v118 + v5);
    do
    {
      uint64_t result = v41 + 4 * v40;
      *((unsigned char *)v117 + 8 * (((_BYTE)v5 + (v40 >> 3)) & 0x1F) + v40) = v41 + 4 * v40;
      ++v40;
    }
    while (v40 != 8);
    ++v5;
  }
  while (v5 != 4);
  if (v12 != v10)
  {
    uint64_t v43 = 0;
    uint64_t v44 = v13 - v11;
    _S3 = (float)v26;
    float v46 = (float)v27;
    float v47 = (float)v28;
    float v48 = (float)v29;
    float v49 = (float)v30;
    float v50 = (float)v31;
    v2.i32[1] = v38;
    *(float32x2_t *)v2.f32 = vmul_f32(*(float32x2_t *)v2.f32, (float32x2_t)0x3F0000003F000000);
    v3.i32[1] = v37;
    v4.i32[1] = v39;
    *(float32x2_t *)v3.f32 = vmul_f32(*(float32x2_t *)v3.f32, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)v4.f32 = vmul_f32(*(float32x2_t *)v4.f32, (float32x2_t)0x3F0000003F000000);
    __asm { FCVT            H8, S0 }
    short float v116 = _H8;
    __asm { FCVT            H8, S1 }
    float16x8_t v114 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v2), 0);
    short float v115 = _H8;
    __asm { FCVT            H8, S2 }
    float16x8_t v112 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    short float v113 = _H8;
    int32x4_t v58 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v111 = (float16x8_t)v58;
    *(short float *)v58.i16 = (short float)v27;
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v58.i8, 0);
    *(short float *)v58.i16 = (short float)v28;
    float16x8_t v60 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v58.i8, 0);
    *(short float *)v58.i16 = (short float)v29;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v58.i8, 0);
    *(short float *)v58.i16 = (short float)v30;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v58.i8, 0);
    *(short float *)v58.i16 = (short float)v31;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v58.i8, 0);
    if (v24) {
      uint64_t v64 = v24 + v23 * v32 + v14;
    }
    else {
      uint64_t v64 = 0;
    }
    if (v25) {
      float32x2_t v65 = (unsigned char *)(v25 + v22 * v32 + v14);
    }
    else {
      float32x2_t v65 = 0;
    }
    float v66 = (int8x8_t *)(v108 + v21 * v32 + v14);
    uint64_t result = v109 + v33 + 16 * v110;
    __asm { FCVT            H11, S3 }
    uint64_t v68 = v2.i64[0];
    uint64_t v69 = v3.i64[0];
    uint64_t v70 = v4.i64[0];
    do
    {
      if ((int)v6 < 8)
      {
        unint64_t v83 = 0;
        int16x8_t v74 = (const float *)result;
        float32x2_t v73 = v66;
        uint64_t v82 = v65;
        uint64_t v72 = v64;
      }
      else
      {
        uint64_t v71 = 0;
        uint64_t v72 = v64;
        float32x2_t v73 = v66;
        int16x8_t v74 = (const float *)result;
        do
        {
          float v75 = v74;
          float32x4x4_t v119 = vld4q_f32(v75);
          v75 += 16;
          float32x4x4_t v120 = vld4q_f32(v75);
          float16x8_t v76 = vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v119.val[0]), v120.val[0]), _H11);
          float16x8_t v77 = vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v119.val[1]), v120.val[1]), _H11);
          float16x8_t v78 = vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v119.val[2]), v120.val[2]), _H11);
          double v79 = COERCE_DOUBLE(vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v119.val[3]), v120.val[3]), (float16x8_t)vdupq_n_s16(0x5BF8u)))));
          if (v72) {
            double v80 = v79;
          }
          else {
            double v80 = 0.0;
          }
          *v73++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v59, v76, v116), v77, v115), v78, v113), v59), v61)));
          int16x8_t v81 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v76, (int16x8_t)v77), (float16x8_t)vuzp2q_s16((int16x8_t)v76, (int16x8_t)v77));
          *(int8x8_t *)&v65[v71] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v60, v114, (float16x8_t)vzip1q_s16(v81, v81)), v112, (float16x8_t)vzip2q_s16(v81, v81)), v111, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v78, (int16x8_t)v78), (float16x8_t)vtrn2q_s16((int16x8_t)v78, (int16x8_t)v78))), v62),
                                                            v63)));
          if (v72)
          {
            *(double *)uint64_t v72 = v80;
            v72 += 8;
          }
          v74 += 32;
          v71 += 8;
        }
        while ((int)v71 < (int)v6 - 7);
        uint64_t v82 = &v65[v71];
        unint64_t v83 = v6 & 0xFFFFFFF8;
      }
      if (v6 > v83)
      {
        float v84 = v74 + 4;
        do
        {
          if (v72)
          {
            float v85 = (float *)&v84[HIBYTE(v118)];
            float v86 = *v85;
            char v87 = llroundf(*(v85 - 4) * 255.0);
            char v88 = llroundf(v86 * 255.0);
          }
          else
          {
            char v87 = 0;
            char v88 = 0;
          }
          uint16x8_t v89 = (float *)&v84[v118];
          float v90 = *(v89 - 4) * _S3;
          float v91 = (float *)&v84[BYTE1(v118)];
          float v92 = *(v91 - 4) * _S3;
          float v93 = (float *)&v84[BYTE2(v118)];
          float v94 = *(v93 - 4) * _S3;
          float v95 = *v89 * _S3;
          float v96 = *v91 * _S3;
          float v97 = *v93 * _S3;
          float v98 = (float)((float)((float)(_S1 * v92) + (float)(_S0 * v90)) + (float)(_S2 * v94)) + v46;
          float v99 = (float)((float)((float)(_S1 * v96) + (float)(_S0 * v95)) + (float)(_S2 * v97)) + v46;
          if (v98 < v46) {
            float v100 = v46;
          }
          else {
            float v100 = (float)((float)((float)(_S1 * v92) + (float)(_S0 * v90)) + (float)(_S2 * v94)) + v46;
          }
          if (v98 <= v48) {
            float v101 = v100;
          }
          else {
            float v101 = v48;
          }
          v73->i8[0] = llroundf(v101);
          if (v99 < v46) {
            float v102 = v46;
          }
          else {
            float v102 = (float)((float)((float)(_S1 * v96) + (float)(_S0 * v95)) + (float)(_S2 * v97)) + v46;
          }
          if (v99 > v48) {
            float v102 = v48;
          }
          v73->i8[1] = llroundf(v102);
          float v103 = v90 + v95;
          float v104 = (float)((float)(v47 + (float)((float)(v90 + v95) * *(float *)&v68))
                       + (float)((float)(v92 + v96) * *(float *)&v69))
               + (float)((float)(v94 + v97) * *(float *)&v70);
          float v105 = v50;
          if (v104 <= v50)
          {
            float v105 = v104;
            if (v104 < v49) {
              float v105 = v49;
            }
          }
          float v106 = (float)((float)(v47 + (float)(v103 * *((float *)&v68 + 1)))
                       + (float)((float)(v92 + v96) * *((float *)&v69 + 1)))
               + (float)((float)(v94 + v97) * *((float *)&v70 + 1));
          *uint64_t v82 = llroundf(v105);
          float v107 = v50;
          if (v106 <= v50)
          {
            float v107 = v106;
            if (v106 < v49) {
              float v107 = v49;
            }
          }
          v82[1] = llroundf(v107);
          if (v72)
          {
            *(unsigned char *)uint64_t v72 = v87;
            *(unsigned char *)(v72 + 1) = v88;
            v72 += 2;
          }
          v83 += 2;
          v84 += 8;
          float32x2_t v73 = (int8x8_t *)((char *)v73 + 2);
          v82 += 2;
        }
        while (v6 > v83);
      }
      result += v20;
      float v66 = (int8x8_t *)((char *)v66 + v21);
      v65 += v22;
      v64 += v23;
      ++v43;
    }
    while (v43 != v44);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_422vf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(uint64_t **)(result + 136);
    uint64_t v18 = *(void **)(result + 56);
    uint64_t v19 = **(void **)(result + 64);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    float v23 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    float v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v28 = (float)LODWORD(a8);
    float v29 = *(float *)(v16 + 36);
    float v30 = *(float *)(v16 + 40);
    float v31 = *(float *)(v16 + 44);
    float v32 = *(float *)(v16 + 48) * 0.5;
    float v33 = *(float *)(v16 + 52) * 0.5;
    float v34 = *(float *)(v16 + 56) * 0.5;
    float v35 = *(float *)(v16 + 60) * 0.5;
    float v36 = *(float *)(v16 + 64) * 0.5;
    float v37 = *(float *)(v16 + 68) * 0.5;
    uint64_t v38 = *(void **)(result + 128);
    uint64_t v39 = *(void *)(result + 112);
    unint64_t v40 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
    uint64_t v41 = *(void *)(result + 36);
    uint64_t v42 = *(unsigned __int8 *)(v16 + 157);
    uint64_t v43 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v44 = *(unsigned __int8 *)(v16 + 155);
    uint64_t result = *(unsigned __int8 *)(v16 + 154);
    uint64_t v45 = v38[2];
    if (v45) {
      float v46 = (unsigned char *)(v45 + v40 * v22 + v39);
    }
    else {
      float v46 = 0;
    }
    float v49 = v38;
    uint64_t v48 = *v38;
    uint64_t v47 = v49[1];
    BOOL v50 = v47 == 0;
    uint64_t v51 = v47 + v40 * v21 + v39;
    if (v50) {
      uint64_t v51 = 0;
    }
    uint64_t v52 = (unsigned char *)(v48 + v40 * v20 + v39);
    uint64_t v53 = *v18 + v19 * v14 + 16 * v41;
    do
    {
      if (v13)
      {
        unint64_t v54 = 0;
        uint64_t v55 = v53;
        float32x2_t v56 = v46;
        uint64_t v57 = v52;
        do
        {
          uint64_t v58 = v55 + 16;
          if (v56)
          {
            char v59 = llroundf(*(float *)(v55 + 4 * v42) * 255.0);
            char v60 = llroundf(*(float *)(v58 + 4 * v42) * 255.0);
          }
          else
          {
            char v59 = 0;
            char v60 = 0;
          }
          float v61 = *(float *)(v55 + 4 * result) * v23;
          float v62 = *(float *)(v55 + 4 * v44) * v23;
          float v63 = *(float *)(v55 + 4 * v43) * v23;
          float v64 = *(float *)(v58 + 4 * result) * v23;
          float v65 = *(float *)(v58 + 4 * v44) * v23;
          float v66 = *(float *)(v58 + 4 * v43) * v23;
          float v67 = (float)((float)((float)(v30 * v62) + (float)(v29 * v61)) + (float)(v31 * v63)) + v24;
          float v68 = (float)((float)((float)(v30 * v65) + (float)(v29 * v64)) + (float)(v31 * v66)) + v24;
          if (v67 < v24) {
            float v69 = v24;
          }
          else {
            float v69 = (float)((float)((float)(v30 * v62) + (float)(v29 * v61)) + (float)(v31 * v63)) + v24;
          }
          if (v67 <= v26) {
            float v70 = v69;
          }
          else {
            float v70 = v26;
          }
          *uint64_t v57 = llroundf(v70);
          if (v68 < v24) {
            float v71 = v24;
          }
          else {
            float v71 = (float)((float)((float)(v30 * v65) + (float)(v29 * v64)) + (float)(v31 * v66)) + v24;
          }
          if (v68 > v26) {
            float v71 = v26;
          }
          v57[1] = llroundf(v71);
          float v72 = v61 + v64;
          float v73 = v62 + v65;
          float v74 = v63 + v66;
          float v75 = (float)((float)(v25 + (float)(v72 * v32)) + (float)(v73 * v33)) + (float)(v74 * v34);
          float v76 = v28;
          if (v75 <= v28)
          {
            float v76 = (float)((float)(v25 + (float)(v72 * v32)) + (float)(v73 * v33)) + (float)(v74 * v34);
            if (v75 < v27) {
              float v76 = v27;
            }
          }
          float v77 = (float)((float)(v25 + (float)(v72 * v35)) + (float)(v73 * v36)) + (float)(v74 * v37);
          *(unsigned char *)(v51 + v54) = llroundf(v76);
          float v78 = v28;
          if (v77 <= v28)
          {
            float v78 = v77;
            if (v77 < v27) {
              float v78 = v27;
            }
          }
          *(unsigned char *)(v51 + v54 + 1) = llroundf(v78);
          if (v56)
          {
            *float32x2_t v56 = v59;
            v56[1] = v60;
            v56 += 2;
          }
          v55 += 32;
          v54 += 2;
          v57 += 2;
        }
        while (v13 > v54);
      }
      v53 += v19;
      v52 += v20;
      v51 += v21;
      v46 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_TRC_Tone_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, float a3, float a4)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = *result;
  unint64_t v6 = v4 * a2 / v5;
  uint64_t v7 = *((void *)result + 14);
  uint64_t v8 = (void *)*((void *)result + 16);
  unint64_t v9 = *((void *)result + 13) * a2 / v5 + *((void *)result + 15);
  int64x2_t v10 = (uint64_t *)*((void *)result + 17);
  unint64_t v11 = (v4 + v4 * a2) / v5;
  int64x2_t v12 = (unsigned char *)v8[1];
  if (v12) {
    v12 += v10[1] * v9 + v7;
  }
  if (v11 != v6)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(result + 44);
    uint64_t v15 = v6 + v14;
    uint64_t v16 = **((void **)result + 8);
    uint64_t v17 = *v10;
    uint64_t v18 = *((void *)result + 19);
    uint64_t v19 = *v8 + v17 * v9;
    unint64_t v20 = *(void *)(result + 20);
    uint64_t v21 = v11 + v14;
    uint64_t v22 = **((void **)result + 7) + v16 * v15 + 16 * *(void *)(result + 36);
    uint64_t v23 = (unsigned char *)(v19 + v7);
    uint64_t v24 = v21 - v15;
    LOWORD(a3) = *(_WORD *)(v18 + 144);
    float v25 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v18 + 146);
    float v26 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v18 + 148);
    float v27 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v18 + 150);
    float v28 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v18 + 152);
    float v29 = (float)LODWORD(a4);
    float v31 = *(float *)(v18 + 36);
    float v30 = *(float *)(v18 + 40);
    float v32 = *(float *)(v18 + 44);
    float v132 = *(float *)(v18 + 48) * 0.5;
    float v133 = v26;
    float v130 = *(float *)(v18 + 56) * 0.5;
    float v131 = *(float *)(v18 + 52) * 0.5;
    float v128 = *(float *)(v18 + 64) * 0.5;
    float v129 = *(float *)(v18 + 60) * 0.5;
    float v126 = *(float *)(v18 + 68) * 0.5;
    float v127 = *(float *)(v18 + 72);
    float v33 = *(float *)(v18 + 80);
    float v125 = *(float *)(v18 + 76);
    float v34 = *(float *)(v18 + 84);
    float v35 = *(float *)(v18 + 88);
    float v36 = *(float *)(v18 + 92);
    float v37 = *(float *)(v18 + 96);
    float v38 = *(float *)(v18 + 100);
    float v39 = *(float *)(v18 + 104);
    uint64_t v40 = v18 + 164;
    uint64_t v41 = v18 + 16548;
    uint64_t result = (unsigned __int8 *)(v18 + 32932);
    float v43 = *(float *)(v18 + 108);
    float v42 = *(float *)(v18 + 112);
    float v44 = *(float *)(v18 + 116);
    float v45 = *(float *)(v18 + 120);
    uint64_t v46 = *(unsigned __int8 *)(v18 + 157);
    uint64_t v47 = *(unsigned __int8 *)(v18 + 156);
    uint64_t v48 = *(unsigned __int8 *)(v18 + 155);
    float32x2_t v49 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v50 = *(unsigned __int8 *)(v18 + 154);
    do
    {
      if (v20)
      {
        unint64_t v51 = 0;
        uint64_t v52 = v12;
        uint64_t v53 = v23;
        uint64_t v54 = v22;
        do
        {
          float v55 = v32;
          float v56 = v30;
          float v57 = v31;
          v58.i32[0] = *(_DWORD *)(v54 + 4 * v50);
          v58.i32[1] = *(_DWORD *)(v54 + 4 * v48);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v58, v49), 0), v49)));
          uint64_t v60 = v54 + 16;
          _D1.i16[0] = *(_WORD *)(v40 + 2 * _D1.u32[0]);
          __asm { FCVT            S15, H1 }
          _D1.i16[0] = *(_WORD *)(v40 + 2 * _D1.u32[1]);
          v66.i32[0] = *(_DWORD *)(v54 + 4 * v47);
          v66.i32[1] = *(_DWORD *)(v54 + 16 + 4 * v50);
          __asm { FCVT            S16, H1 }
          int32x2_t v68 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v66, v49), 0), v49)));
          _D1.i16[0] = *(_WORD *)(v40 + 2 * v68.u32[0]);
          __asm { FCVT            S17, H1 }
          float v70 = fmaxf(_S15, fmaxf(_S16, _S17));
          float v71 = (float)((float)((float)(v42 * _S16) + (float)(v43 * _S15)) + (float)(v44 * _S17)) + (float)(v45 * v70);
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = (float)((float)((float)(v42 * _S16) + (float)(v43 * _S15)) + (float)(v44 * _S17)) + (float)(v45 * v70);
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          _H18 = *(_WORD *)(v40 + 2 * v68.u32[1]);
          __asm { FCVT            S19, H18 }
          v75.i32[0] = *(_DWORD *)(v60 + 4 * v48);
          v75.i32[1] = *(_DWORD *)(v60 + 4 * v47);
          _D18 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v75, v49), 0), v49)));
          _D18.i16[0] = *(_WORD *)(v40 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v40 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          float v79 = (float)((float)((float)(v42 * _S20) + (float)(v43 * _S19)) + (float)(v44 * _S22))
              + (float)(v45 * fmaxf(_S19, fmaxf(_S20, _S22)));
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          if (v52)
          {
            float v81 = *(float *)(v60 + 4 * v46);
            char v82 = llroundf(*(float *)(v54 + 4 * v46) * 255.0);
            char v83 = llroundf(v81 * 255.0);
          }
          else
          {
            char v82 = 0;
            char v83 = 0;
          }
          float v31 = v57;
          float v30 = v56;
          float v32 = v55;
          _H1 = *(_WORD *)(v41 + 2 * llroundf(v72));
          __asm { FCVT            S1, H1 }
          float v86 = _S15 * _S1;
          float v87 = _S16 * _S1;
          float v88 = _S17 * _S1;
          _H16 = *(_WORD *)(v41 + 2 * llroundf(v80));
          __asm { FCVT            S16, H16 }
          float v91 = _S19 * _S16;
          _S18 = _S20 * _S16;
          _S16 = _S22 * _S16;
          float v94 = (float)((float)(v125 * v87) + (float)(v86 * v127)) + (float)(v88 * v33);
          float v95 = (float)((float)(v35 * v87) + (float)(v86 * v34)) + (float)(v88 * v36);
          float v96 = (float)((float)(v38 * v87) + (float)(v86 * v37)) + (float)(v88 * v39);
          float v97 = (float)(v125 * _S18) + (float)(v91 * v127);
          float v98 = (float)(v35 * _S18) + (float)(v91 * v34);
          float v99 = (float)(v38 * _S18) + (float)(v91 * v37);
          _S5 = v97 + (float)(_S16 * v33);
          float v101 = v98 + (float)(_S16 * v36);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0))];
          float v102 = v99 + (float)(_S16 * v39);
          __asm { FCVT            S18, H18 }
          LOWORD(_S16) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0))];
          unsigned int v104 = llroundf(fminf(fmaxf(v96, 0.0), 8191.0));
          __asm { FCVT            S1, H16 }
          LOWORD(_S16) = *(_WORD *)&result[2 * v104];
          __asm { FCVT            S20, H16 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
          __asm { FCVT            S16, H5 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0))];
          __asm { FCVT            S17, H5 }
          float v109 = (float)(v30 * _S1) + (float)(v31 * _S18);
          _S6 = _S18 + _S16;
          float v111 = _S1 + _S17;
          float v112 = (float)(v133 + (float)((float)(_S18 + _S16) * v132)) + (float)(v111 * v131);
          float v113 = (float)(v133 + (float)(_S6 * v129)) + (float)(v111 * v128);
          LOWORD(_S6) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0))];
          __asm { FCVT            S19, H6 }
          float v115 = v109 + (float)(v55 * _S20);
          float v116 = v112 + (float)((float)(_S20 + _S19) * v130);
          float v117 = v113 + (float)((float)(_S20 + _S19) * v126);
          if (v116 < v28) {
            float v118 = v28;
          }
          else {
            float v118 = v116;
          }
          float v119 = v115 + v25;
          if (v116 > v29) {
            float v118 = v29;
          }
          char v120 = llroundf(v118);
          if (v119 < v25) {
            float v121 = v25;
          }
          else {
            float v121 = v119;
          }
          *uint64_t v53 = v120;
          if (v119 > v27) {
            float v121 = v27;
          }
          v53[1] = llroundf(v121);
          float v122 = v29;
          if (v117 <= v29)
          {
            float v122 = v117;
            if (v117 < v28) {
              float v122 = v28;
            }
          }
          float v123 = (float)((float)((float)(v30 * _S17) + (float)(v31 * _S16)) + (float)(v55 * _S19)) + v25;
          v53[2] = llroundf(v122);
          float v124 = v27;
          if (v123 <= v27)
          {
            float v124 = v123;
            if (v123 < v25) {
              float v124 = v25;
            }
          }
          v53[3] = llroundf(v124);
          if (v52)
          {
            *uint64_t v52 = v82;
            v52[1] = v83;
            v52 += 2;
          }
          v54 += 32;
          v51 += 2;
          v53 += 4;
        }
        while (v20 > v51);
      }
      v22 += v16;
      v23 += v17;
      ++v13;
    }
    while (v13 != v24);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_2vuyf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  uint64_t v10 = *(void *)(result + 112);
  int64x2_t v11 = *(void **)(result + 128);
  unint64_t v12 = *(void *)(result + 104) * a2 / v8 + *(void *)(result + 120);
  int64x2_t v13 = *(uint64_t **)(result + 136);
  unint64_t v14 = (v7 + v7 * a2) / v8;
  uint64_t v15 = (unsigned char *)v11[1];
  if (v15) {
    v15 += v13[1] * v12 + v10;
  }
  if (v14 != v9)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(result + 44);
    uint64_t v18 = v9 + v17;
    uint64_t v19 = **(void **)(result + 64);
    uint64_t v20 = *v13;
    uint64_t v21 = *(void *)(result + 152);
    uint64_t v22 = *v11 + v20 * v12;
    unint64_t v23 = *(void *)(result + 20);
    uint64_t v24 = v14 + v17;
    uint64_t v25 = **(void **)(result + 56) + v19 * v18 + 16 * *(void *)(result + 36);
    uint64_t v26 = (unsigned char *)(v22 + v10);
    uint64_t v27 = v24 - v18;
    LOWORD(a3) = *(_WORD *)(v21 + 144);
    float v28 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v21 + 146);
    float v29 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v21 + 148);
    float v30 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v21 + 150);
    float v31 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v21 + 152);
    float v32 = (float)LODWORD(a7);
    float v33 = *(float *)(v21 + 36);
    float v34 = *(float *)(v21 + 40);
    float v35 = *(float *)(v21 + 44);
    float v103 = *(float *)(v21 + 52) * 0.5;
    float v104 = *(float *)(v21 + 48) * 0.5;
    float v102 = *(float *)(v21 + 56) * 0.5;
    float v36 = *(float *)(v21 + 60) * 0.5;
    float v37 = *(float *)(v21 + 64) * 0.5;
    float v38 = *(float *)(v21 + 72);
    float v39 = *(float *)(v21 + 68) * 0.5;
    float v40 = *(float *)(v21 + 76);
    float v41 = *(float *)(v21 + 80);
    float v42 = *(float *)(v21 + 84);
    float v43 = *(float *)(v21 + 88);
    float v44 = *(float *)(v21 + 92);
    float v45 = *(float *)(v21 + 96);
    float v46 = *(float *)(v21 + 100);
    float v47 = *(float *)(v21 + 104);
    uint64_t v48 = v21 + 164;
    uint64_t v49 = v21 + 16548;
    uint64_t result = *(unsigned __int8 *)(v21 + 157);
    uint64_t v50 = *(unsigned __int8 *)(v21 + 156);
    uint64_t v51 = *(unsigned __int8 *)(v21 + 155);
    float32x2_t v52 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v53 = *(unsigned __int8 *)(v21 + 154);
    do
    {
      if (v23)
      {
        unint64_t v54 = 0;
        uint64_t v55 = v25;
        float v56 = v15;
        float v57 = v26;
        do
        {
          uint64_t v58 = v55 + 16;
          if (v56)
          {
            char v59 = llroundf(*(float *)(v55 + 4 * result) * 255.0);
            char v60 = llroundf(*(float *)(v58 + 4 * result) * 255.0);
          }
          else
          {
            char v59 = 0;
            char v60 = 0;
          }
          v61.i32[0] = *(_DWORD *)(v55 + 4 * v53);
          v61.i32[1] = *(_DWORD *)(v55 + 4 * v51);
          _D11 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v61, v52), 0), v52)));
          _D11.i16[0] = *(_WORD *)(v48 + 2 * _D11.u32[0]);
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v48 + 2 * _D11.u32[1]);
          __asm { FCVT            S12, H12 }
          v69.i32[0] = *(_DWORD *)(v55 + 4 * v50);
          v69.i32[1] = *(_DWORD *)(v58 + 4 * v53);
          _D13 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v69, v52), 0), v52)));
          _D13.i16[0] = *(_WORD *)(v48 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v48 + 2 * _D13.u32[1]);
          __asm { FCVT            S14, H14 }
          v73.i32[0] = *(_DWORD *)(v58 + 4 * v51);
          v73.i32[1] = *(_DWORD *)(v58 + 4 * v50);
          _D15 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v73, v52), 0), v52)));
          _D15.i16[0] = *(_WORD *)(v48 + 2 * _D15.u32[0]);
          __asm { FCVT            S15, H15 }
          _S16 = (float)((float)(v40 * _S12) + (float)(*(float *)_D11.i32 * v38)) + (float)(*(float *)_D13.i32 * v41);
          _S17 = (float)((float)(v43 * _S12) + (float)(*(float *)_D11.i32 * v42)) + (float)(*(float *)_D13.i32 * v44);
          *(float *)_D11.i32 = (float)((float)(v46 * _S12) + (float)(*(float *)_D11.i32 * v45))
                             + (float)(*(float *)_D13.i32 * v47);
          float v77 = (float)(v40 * *(float *)_D15.i32) + (float)(_S14 * v38);
          *(float *)_D13.i32 = (float)(v43 * *(float *)_D15.i32) + (float)(_S14 * v42);
          float v78 = (float)(v46 * *(float *)_D15.i32) + (float)(_S14 * v45);
          _D15.i16[0] = *(_WORD *)(v48 + 2 * _D15.u32[1]);
          __asm { FCVT            S15, H15 }
          _S12 = v77 + (float)(*(float *)_D15.i32 * v41);
          *(float *)_D13.i32 = *(float *)_D13.i32 + (float)(*(float *)_D15.i32 * v44);
          LOWORD(_S16) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          float v80 = v78 + (float)(*(float *)_D15.i32 * v47);
          __asm { FCVT            S16, H16 }
          LOWORD(_S17) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _D11.i16[0] = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(*(float *)_D11.i32, 0.0), 8191.0)));
          __asm { FCVT            S15, H11 }
          _D11.i16[0] = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(*(float *)_D13.i32, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          unsigned int v85 = llroundf(fminf(fmaxf(v80, 0.0), 8191.0));
          float v86 = (float)(v34 * _S17) + (float)(v33 * _S16);
          float v87 = _S16 + _S11;
          _S17 = _S17 + _S12;
          float v89 = (float)(v29 + (float)(v87 * v104)) + (float)(_S17 * v103);
          float v90 = (float)(v29 + (float)(v87 * v36)) + (float)(_S17 * v37);
          LOWORD(_S17) = *(_WORD *)(v49 + 2 * v85);
          __asm { FCVT            S13, H17 }
          float v92 = v86 + (float)(v35 * *(float *)_D15.i32);
          float v93 = v89 + (float)((float)(*(float *)_D15.i32 + _S13) * v102);
          float v94 = v90 + (float)((float)(*(float *)_D15.i32 + _S13) * v39);
          if (v93 < v31) {
            float v95 = v31;
          }
          else {
            float v95 = v93;
          }
          float v96 = v92 + v28;
          if (v93 > v32) {
            float v95 = v32;
          }
          char v97 = llroundf(v95);
          if (v96 < v28) {
            float v98 = v28;
          }
          else {
            float v98 = v96;
          }
          *float v57 = v97;
          if (v96 > v30) {
            float v98 = v30;
          }
          v57[1] = llroundf(v98);
          float v99 = v32;
          if (v94 <= v32)
          {
            float v99 = v94;
            if (v94 < v31) {
              float v99 = v31;
            }
          }
          float v100 = (float)((float)((float)(v34 * _S12) + (float)(v33 * _S11)) + (float)(v35 * _S13)) + v28;
          v57[2] = llroundf(v99);
          float v101 = v30;
          if (v100 <= v30)
          {
            float v101 = v100;
            if (v100 < v28) {
              float v101 = v28;
            }
          }
          v57[3] = llroundf(v101);
          if (v56)
          {
            *float v56 = v59;
            v56[1] = v60;
            v56 += 2;
          }
          v55 += 32;
          v54 += 2;
          v57 += 4;
        }
        while (v23 > v54);
      }
      v25 += v19;
      v26 += v20;
      ++v16;
    }
    while (v16 != v27);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_2vuyf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_2vuyf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = *(void *)(result + 112);
  int64x2_t v12 = *(void **)(result + 128);
  unint64_t v13 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
  unint64_t v14 = *(uint64_t **)(result + 136);
  unint64_t v15 = (v8 + v8 * a2) / v9;
  uint64_t v16 = (unsigned char *)v12[1];
  if (v16) {
    v16 += v14[1] * v13 + v11;
  }
  if (v15 != v10)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(result + 44);
    uint64_t v19 = v10 + v18;
    uint64_t v20 = **(void **)(result + 64);
    uint64_t v21 = *v14;
    uint64_t v22 = *v12 + v21 * v13;
    uint64_t v23 = *(void *)(result + 152);
    unint64_t v24 = *(void *)(result + 20);
    uint64_t v25 = v15 + v18;
    uint64_t v26 = **(void **)(result + 56) + v20 * v19 + 16 * *(void *)(result + 36);
    uint64_t v27 = (unsigned char *)(v22 + v11);
    uint64_t v28 = v25 - v19;
    float v29 = (float)*(unsigned int *)(v23 + 136);
    LOWORD(a4) = *(_WORD *)(v23 + 144);
    float v30 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    float v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    float v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    float v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    float v34 = (float)LODWORD(a8);
    float v35 = *(float *)(v23 + 36);
    float v36 = *(float *)(v23 + 40);
    float v37 = *(float *)(v23 + 44);
    float v38 = *(float *)(v23 + 48) * 0.5;
    float v39 = *(float *)(v23 + 52) * 0.5;
    float v40 = *(float *)(v23 + 56) * 0.5;
    float v41 = *(float *)(v23 + 60) * 0.5;
    float v42 = *(float *)(v23 + 64) * 0.5;
    float v43 = *(float *)(v23 + 68) * 0.5;
    uint64_t v44 = *(unsigned __int8 *)(v23 + 157);
    uint64_t v45 = *(unsigned __int8 *)(v23 + 156);
    uint64_t result = *(unsigned __int8 *)(v23 + 155);
    uint64_t v46 = *(unsigned __int8 *)(v23 + 154);
    do
    {
      if (v24)
      {
        unint64_t v47 = 0;
        uint64_t v48 = v26;
        uint64_t v49 = v16;
        uint64_t v50 = v27;
        do
        {
          uint64_t v51 = v48 + 16;
          if (v49)
          {
            char v52 = llroundf(*(float *)(v48 + 4 * v44) * 255.0);
            char v53 = llroundf(*(float *)(v51 + 4 * v44) * 255.0);
          }
          else
          {
            char v52 = 0;
            char v53 = 0;
          }
          float v54 = *(float *)(v48 + 4 * v46) * v29;
          float v55 = *(float *)(v48 + 4 * result) * v29;
          float v56 = *(float *)(v48 + 4 * v45) * v29;
          float v57 = *(float *)(v51 + 4 * v46) * v29;
          float v58 = *(float *)(v51 + 4 * result) * v29;
          float v59 = *(float *)(v51 + 4 * v45) * v29;
          float v60 = (float)((float)((float)(v36 * v55) + (float)(v35 * v54)) + (float)(v37 * v56)) + v30;
          float v61 = v54 + v57;
          float v62 = v55 + v58;
          float v63 = v56 + v59;
          float v64 = (float)((float)(v31 + (float)(v61 * v38)) + (float)(v62 * v39)) + (float)(v63 * v40);
          float v65 = (float)((float)(v31 + (float)(v61 * v41)) + (float)(v62 * v42)) + (float)(v63 * v43);
          if (v64 < v33) {
            float v66 = v33;
          }
          else {
            float v66 = v64;
          }
          if (v64 > v34) {
            float v66 = v34;
          }
          *uint64_t v50 = llroundf(v66);
          if (v60 < v30) {
            float v67 = v30;
          }
          else {
            float v67 = v60;
          }
          if (v60 > v32) {
            float v67 = v32;
          }
          v50[1] = llroundf(v67);
          float v68 = v34;
          if (v65 <= v34)
          {
            float v68 = v65;
            if (v65 < v33) {
              float v68 = v33;
            }
          }
          float v69 = (float)((float)((float)(v36 * v58) + (float)(v35 * v57)) + (float)(v37 * v59)) + v30;
          v50[2] = llroundf(v68);
          float v70 = v32;
          if (v69 <= v32)
          {
            float v70 = v69;
            if (v69 < v30) {
              float v70 = v30;
            }
          }
          v50[3] = llroundf(v70);
          if (v49)
          {
            *uint64_t v49 = v52;
            v49[1] = v53;
            v49 += 2;
          }
          v48 += 32;
          v47 += 2;
          v50 += 4;
        }
        while (v24 > v47);
      }
      v26 += v20;
      v27 += v21;
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_TRC_Tone_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  uint64_t v9 = *((void *)result + 14);
  int64x2_t v10 = (void *)*((void *)result + 16);
  unint64_t v11 = *((void *)result + 13) * a2 / v7 + *((void *)result + 15);
  int64x2_t v12 = (uint64_t *)*((void *)result + 17);
  unint64_t v13 = (v6 + v6 * a2) / v7;
  unint64_t v14 = (unsigned char *)v10[1];
  if (v14) {
    v14 += v12[1] * v11 + v9;
  }
  if (v13 != v8)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(result + 44);
    uint64_t v17 = v8 + v16;
    uint64_t v18 = **((void **)result + 8);
    uint64_t v19 = *v12;
    uint64_t v20 = *((void *)result + 19);
    uint64_t v21 = *v10 + v19 * v11;
    unint64_t v22 = *(void *)(result + 20);
    uint64_t v23 = v13 + v16;
    uint64_t v24 = **((void **)result + 7) + v18 * v17 + 16 * *(void *)(result + 36);
    uint64_t v25 = (unsigned char *)(v21 + v9);
    uint64_t v26 = v23 - v17;
    LOWORD(a3) = *(_WORD *)(v20 + 144);
    float v27 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v20 + 146);
    LOWORD(a5) = *(_WORD *)(v20 + 148);
    float v28 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v20 + 150);
    float v122 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v20 + 152);
    float v29 = (float)LODWORD(a6);
    float v30 = *(float *)(v20 + 40);
    float v123 = *(float *)(v20 + 36);
    float v124 = (float)LODWORD(a4);
    float v31 = *(float *)(v20 + 44);
    float v120 = *(float *)(v20 + 52) * 0.5;
    float v121 = *(float *)(v20 + 48) * 0.5;
    float v118 = *(float *)(v20 + 60) * 0.5;
    float v119 = *(float *)(v20 + 56) * 0.5;
    float v32 = *(float *)(v20 + 72);
    float v116 = *(float *)(v20 + 68) * 0.5;
    float v117 = *(float *)(v20 + 64) * 0.5;
    float v33 = *(float *)(v20 + 76);
    float v34 = *(float *)(v20 + 80);
    float v35 = *(float *)(v20 + 84);
    float v36 = *(float *)(v20 + 88);
    float v37 = *(float *)(v20 + 92);
    float v38 = *(float *)(v20 + 96);
    float v39 = *(float *)(v20 + 100);
    float v40 = *(float *)(v20 + 104);
    uint64_t v41 = v20 + 164;
    uint64_t v42 = v20 + 16548;
    uint64_t result = (unsigned __int8 *)(v20 + 32932);
    float v44 = *(float *)(v20 + 108);
    float v43 = *(float *)(v20 + 112);
    float v45 = *(float *)(v20 + 116);
    float v46 = *(float *)(v20 + 120);
    uint64_t v47 = *(unsigned __int8 *)(v20 + 157);
    uint64_t v48 = *(unsigned __int8 *)(v20 + 156);
    uint64_t v49 = *(unsigned __int8 *)(v20 + 155);
    float32x2_t v50 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v51 = *(unsigned __int8 *)(v20 + 154);
    do
    {
      if (v22)
      {
        unint64_t v52 = 0;
        char v53 = v14;
        float v54 = v25;
        uint64_t v55 = v24;
        do
        {
          v56.i32[0] = *(_DWORD *)(v55 + 4 * v51);
          v56.i32[1] = *(_DWORD *)(v55 + 4 * v49);
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v56, v50), 0), v50)));
          uint64_t v58 = v55 + 16;
          _D3.i16[0] = *(_WORD *)(v41 + 2 * _D3.u32[0]);
          __asm { FCVT            S15, H3 }
          _D3.i16[0] = *(_WORD *)(v41 + 2 * _D3.u32[1]);
          v64.i32[0] = *(_DWORD *)(v55 + 4 * v48);
          v64.i32[1] = *(_DWORD *)(v55 + 16 + 4 * v51);
          __asm { FCVT            S16, H3 }
          int32x2_t v66 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v64, v50), 0), v50)));
          _D3.i16[0] = *(_WORD *)(v41 + 2 * v66.u32[0]);
          __asm { FCVT            S17, H3 }
          float v68 = fmaxf(_S15, fmaxf(_S16, _S17));
          float v69 = (float)((float)((float)(v43 * _S16) + (float)(v44 * _S15)) + (float)(v45 * _S17)) + (float)(v46 * v68);
          float v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            float v70 = (float)((float)((float)(v43 * _S16) + (float)(v44 * _S15)) + (float)(v45 * _S17)) + (float)(v46 * v68);
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          _H18 = *(_WORD *)(v41 + 2 * v66.u32[1]);
          __asm { FCVT            S19, H18 }
          v73.i32[0] = *(_DWORD *)(v58 + 4 * v49);
          v73.i32[1] = *(_DWORD *)(v58 + 4 * v48);
          _D18 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v73, v50), 0), v50)));
          _D18.i16[0] = *(_WORD *)(v41 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v41 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          float v77 = (float)((float)((float)(v43 * _S20) + (float)(v44 * _S19)) + (float)(v45 * _S22))
              + (float)(v46 * fmaxf(_S19, fmaxf(_S20, _S22)));
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          if (v53)
          {
            float v79 = *(float *)(v58 + 4 * v47);
            char v80 = llroundf(*(float *)(v55 + 4 * v47) * 255.0);
            char v81 = llroundf(v79 * 255.0);
          }
          else
          {
            char v80 = 0;
            char v81 = 0;
          }
          _H1 = *(_WORD *)(v42 + 2 * llroundf(v70));
          __asm { FCVT            S1, H1 }
          float v84 = _S15 * _S1;
          float v85 = _S16 * _S1;
          _H16 = *(_WORD *)(v42 + 2 * llroundf(v78));
          float v87 = _S17 * _S1;
          __asm { FCVT            S16, H16 }
          float v89 = _S19 * _S16;
          float v90 = _S20 * _S16;
          _S16 = _S22 * _S16;
          float v92 = (float)((float)(v33 * v85) + (float)(v84 * v32)) + (float)(v87 * v34);
          float v93 = (float)((float)(v36 * v85) + (float)(v84 * v35)) + (float)(v87 * v37);
          _S1 = (float)((float)(v39 * v85) + (float)(v84 * v38)) + (float)(v87 * v40);
          _S3 = (float)((float)(v33 * v90) + (float)(v89 * v32)) + (float)(_S16 * v34);
          _S5 = (float)((float)(v36 * v90) + (float)(v89 * v35)) + (float)(_S16 * v37);
          float v97 = (float)((float)(v39 * v90) + (float)(v89 * v38)) + (float)(_S16 * v40);
          LOWORD(_S16) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0))];
          __asm { FCVT            S18, H16 }
          LOWORD(_S16) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0))];
          LOWORD(_S1) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0))];
          __asm
          {
            FCVT            S20, H16
            FCVT            S1, H1
          }
          LOWORD(_S3) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
          __asm { FCVT            S16, H5 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0))];
          __asm { FCVT            S17, H5 }
          float v104 = (float)((float)((float)(v30 * _S20) + (float)(v123 * _S18)) + (float)(v31 * _S1)) + v27;
          float v106 = _S20 + _S16;
          float v107 = _S1 + _S17;
          float v108 = (float)((float)(v124 + (float)((float)(_S18 + _S3) * v121)) + (float)(v106 * v120))
               + (float)((float)(_S1 + _S17) * v119);
          if (v104 < v27) {
            float v109 = v27;
          }
          else {
            float v109 = v104;
          }
          if (v104 > v28) {
            float v109 = v28;
          }
          *float v54 = llroundf(v109);
          float v110 = v29;
          if (v108 <= v29)
          {
            float v110 = (float)((float)(v124 + (float)((float)(_S18 + _S3) * v121)) + (float)(v106 * v120))
                 + (float)(v107 * v119);
            if (v108 < v122) {
              float v110 = v122;
            }
          }
          float v111 = (float)((float)((float)(v30 * _S16) + (float)(v123 * _S3)) + (float)(v31 * _S17)) + v27;
          float v105 = _S18 + _S3;
          float v112 = (float)((float)(v124 + (float)((float)(_S18 + _S3) * v118)) + (float)(v106 * v117))
               + (float)(v107 * v116);
          v54[1] = llroundf(v110);
          if (v111 < v27) {
            float v113 = v27;
          }
          else {
            float v113 = v111;
          }
          if (v111 <= v28) {
            float v114 = v113;
          }
          else {
            float v114 = v28;
          }
          v54[2] = llroundf(v114);
          float v115 = v29;
          if (v112 <= v29)
          {
            float v115 = (float)((float)(v124 + (float)(v105 * v118)) + (float)(v106 * v117)) + (float)(v107 * v116);
            if (v112 < v122) {
              float v115 = v122;
            }
          }
          v54[3] = llroundf(v115);
          if (v53)
          {
            *char v53 = v80;
            v53[1] = v81;
            v53 += 2;
          }
          v55 += 32;
          v52 += 2;
          v54 += 4;
        }
        while (v22 > v52);
      }
      v24 += v18;
      v25 += v19;
      ++v15;
    }
    while (v15 != v26);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_yuvsf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  uint64_t v10 = *(void *)(result + 112);
  int64x2_t v11 = *(void **)(result + 128);
  unint64_t v12 = *(void *)(result + 104) * a2 / v8 + *(void *)(result + 120);
  int64x2_t v13 = *(uint64_t **)(result + 136);
  unint64_t v14 = (v7 + v7 * a2) / v8;
  uint64_t v15 = (unsigned char *)v11[1];
  if (v15) {
    v15 += v13[1] * v12 + v10;
  }
  if (v14 != v9)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(result + 44);
    uint64_t v18 = v9 + v17;
    uint64_t v19 = **(void **)(result + 64);
    uint64_t v20 = *v13;
    uint64_t v21 = *(void *)(result + 152);
    uint64_t v22 = *v11 + v20 * v12;
    unint64_t v23 = *(void *)(result + 20);
    uint64_t v24 = v14 + v17;
    uint64_t v25 = **(void **)(result + 56) + v19 * v18 + 16 * *(void *)(result + 36);
    uint64_t v26 = (unsigned char *)(v22 + v10);
    uint64_t v27 = v24 - v18;
    LOWORD(a3) = *(_WORD *)(v21 + 144);
    float v28 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v21 + 146);
    float v29 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v21 + 148);
    float v30 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v21 + 150);
    float v31 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v21 + 152);
    float v32 = (float)LODWORD(a7);
    float v33 = *(float *)(v21 + 36);
    float v34 = *(float *)(v21 + 40);
    float v35 = *(float *)(v21 + 44);
    float v101 = *(float *)(v21 + 48) * 0.5;
    float v100 = *(float *)(v21 + 52) * 0.5;
    float v99 = *(float *)(v21 + 56) * 0.5;
    float v98 = *(float *)(v21 + 60) * 0.5;
    float v36 = *(float *)(v21 + 64) * 0.5;
    float v37 = *(float *)(v21 + 72);
    float v38 = *(float *)(v21 + 68) * 0.5;
    float v39 = *(float *)(v21 + 76);
    float v40 = *(float *)(v21 + 80);
    float v41 = *(float *)(v21 + 84);
    float v42 = *(float *)(v21 + 88);
    float v43 = *(float *)(v21 + 92);
    float v44 = *(float *)(v21 + 96);
    float v45 = *(float *)(v21 + 100);
    float v46 = *(float *)(v21 + 104);
    uint64_t v47 = v21 + 164;
    uint64_t v48 = v21 + 16548;
    uint64_t result = *(unsigned __int8 *)(v21 + 157);
    uint64_t v49 = *(unsigned __int8 *)(v21 + 156);
    uint64_t v50 = *(unsigned __int8 *)(v21 + 155);
    float32x2_t v51 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v52 = *(unsigned __int8 *)(v21 + 154);
    do
    {
      if (v23)
      {
        unint64_t v53 = 0;
        uint64_t v54 = v25;
        uint64_t v55 = v15;
        float32x2_t v56 = v26;
        do
        {
          uint64_t v57 = v54 + 16;
          if (v55)
          {
            char v58 = llroundf(*(float *)(v54 + 4 * result) * 255.0);
            char v59 = llroundf(*(float *)(v57 + 4 * result) * 255.0);
          }
          else
          {
            char v58 = 0;
            char v59 = 0;
          }
          v60.i32[0] = *(_DWORD *)(v54 + 4 * v52);
          v60.i32[1] = *(_DWORD *)(v54 + 4 * v50);
          _D4 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v60, v51), 0), v51)));
          _D4.i16[0] = *(_WORD *)(v47 + 2 * _D4.u32[0]);
          __asm { FCVT            S4, H4 }
          _H16 = *(_WORD *)(v47 + 2 * _D4.u32[1]);
          v67.i32[0] = *(_DWORD *)(v54 + 4 * v49);
          v67.i32[1] = *(_DWORD *)(v57 + 4 * v52);
          _D17 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v67, v51), 0), v51)));
          _D17.i16[0] = *(_WORD *)(v47 + 2 * _D17.u32[0]);
          __asm
          {
            FCVT            S16, H16
            FCVT            S17, H17
          }
          _H11 = *(_WORD *)(v47 + 2 * _D17.u32[1]);
          v71.i32[0] = *(_DWORD *)(v57 + 4 * v50);
          v71.i32[1] = *(_DWORD *)(v57 + 4 * v49);
          _D12 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v71, v51), 0), v51)));
          _D12.i16[0] = *(_WORD *)(v47 + 2 * _D12.u32[0]);
          __asm
          {
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v47 + 2 * _D12.u32[1]);
          __asm { FCVT            S13, H13 }
          float v76 = (float)((float)(v39 * _S16) + (float)(*(float *)_D4.i32 * v37)) + (float)(*(float *)_D17.i32 * v40);
          float v77 = (float)((float)(v42 * _S16) + (float)(*(float *)_D4.i32 * v41)) + (float)(*(float *)_D17.i32 * v43);
          *(float *)_D4.i32 = (float)((float)(v45 * _S16) + (float)(*(float *)_D4.i32 * v44))
                            + (float)(*(float *)_D17.i32 * v46);
          _S16 = (float)((float)(v39 * *(float *)_D12.i32) + (float)(_S11 * v37)) + (float)(_S13 * v40);
          *(float *)_D17.i32 = (float)((float)(v42 * *(float *)_D12.i32) + (float)(_S11 * v41)) + (float)(_S13 * v43);
          float v79 = (float)((float)(v45 * *(float *)_D12.i32) + (float)(_S11 * v44)) + (float)(_S13 * v46);
          LOWORD(_S11) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S14, H11 }
          LOWORD(_S11) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _D4.i16[0] = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(*(float *)_D4.i32, 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H11
            FCVT            S4, H4
          }
          LOWORD(_S16) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S11, H16 }
          LOWORD(_S16) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(*(float *)_D17.i32, 0.0), 8191.0)));
          __asm { FCVT            S12, H16 }
          LOWORD(_S16) = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S13, H16 }
          float v85 = (float)((float)((float)(v34 * _S15) + (float)(v33 * _S14)) + (float)(v35 * *(float *)_D4.i32)) + v28;
          float v86 = _S14 + _S11;
          float v87 = _S15 + _S12;
          float v88 = *(float *)_D4.i32 + _S13;
          float v89 = (float)((float)(v29 + (float)(v86 * v101)) + (float)(v87 * v100))
              + (float)((float)(*(float *)_D4.i32 + _S13) * v99);
          if (v85 < v28) {
            float v90 = v28;
          }
          else {
            float v90 = v85;
          }
          if (v85 <= v30) {
            float v91 = v90;
          }
          else {
            float v91 = v30;
          }
          *float32x2_t v56 = llroundf(v91);
          float v92 = v32;
          if (v89 <= v32)
          {
            float v92 = v89;
            if (v89 < v31) {
              float v92 = v31;
            }
          }
          float v93 = (float)((float)((float)(v34 * _S12) + (float)(v33 * _S11)) + (float)(v35 * _S13)) + v28;
          float v94 = (float)((float)(v29 + (float)(v86 * v98)) + (float)(v87 * v36)) + (float)(v88 * v38);
          v56[1] = llroundf(v92);
          if (v93 < v28) {
            float v95 = v28;
          }
          else {
            float v95 = (float)((float)((float)(v34 * _S12) + (float)(v33 * _S11)) + (float)(v35 * _S13)) + v28;
          }
          if (v93 <= v30) {
            float v96 = v95;
          }
          else {
            float v96 = v30;
          }
          v56[2] = llroundf(v96);
          float v97 = v32;
          if (v94 <= v32)
          {
            float v97 = v94;
            if (v94 < v31) {
              float v97 = v31;
            }
          }
          v56[3] = llroundf(v97);
          if (v55)
          {
            *uint64_t v55 = v58;
            v55[1] = v59;
            v55 += 2;
          }
          v54 += 32;
          v53 += 2;
          v56 += 4;
        }
        while (v23 > v53);
      }
      v25 += v19;
      v26 += v20;
      ++v16;
    }
    while (v16 != v27);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_yuvsf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_yuvsf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = *(void *)(result + 112);
  int64x2_t v12 = *(void **)(result + 128);
  unint64_t v13 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
  unint64_t v14 = *(uint64_t **)(result + 136);
  unint64_t v15 = (v8 + v8 * a2) / v9;
  uint64_t v16 = (unsigned char *)v12[1];
  if (v16) {
    v16 += v14[1] * v13 + v11;
  }
  if (v15 != v10)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(result + 44);
    uint64_t v19 = v10 + v18;
    uint64_t v20 = **(void **)(result + 64);
    uint64_t v21 = *v14;
    uint64_t v22 = *v12 + v21 * v13;
    uint64_t v23 = *(void *)(result + 152);
    unint64_t v24 = *(void *)(result + 20);
    uint64_t v25 = v15 + v18;
    uint64_t v26 = **(void **)(result + 56) + v20 * v19 + 16 * *(void *)(result + 36);
    uint64_t v27 = (unsigned char *)(v22 + v11);
    uint64_t v28 = v25 - v19;
    float v29 = (float)*(unsigned int *)(v23 + 136);
    LOWORD(a4) = *(_WORD *)(v23 + 144);
    float v30 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    float v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    float v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    float v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    float v34 = (float)LODWORD(a8);
    float v35 = *(float *)(v23 + 36);
    float v36 = *(float *)(v23 + 40);
    float v37 = *(float *)(v23 + 44);
    float v38 = *(float *)(v23 + 48) * 0.5;
    float v39 = *(float *)(v23 + 52) * 0.5;
    float v40 = *(float *)(v23 + 56) * 0.5;
    float v41 = *(float *)(v23 + 60) * 0.5;
    float v42 = *(float *)(v23 + 64) * 0.5;
    float v43 = *(float *)(v23 + 68) * 0.5;
    uint64_t v44 = *(unsigned __int8 *)(v23 + 157);
    uint64_t v45 = *(unsigned __int8 *)(v23 + 156);
    uint64_t result = *(unsigned __int8 *)(v23 + 155);
    uint64_t v46 = *(unsigned __int8 *)(v23 + 154);
    do
    {
      if (v24)
      {
        unint64_t v47 = 0;
        uint64_t v48 = v26;
        uint64_t v49 = v16;
        uint64_t v50 = v27;
        do
        {
          uint64_t v51 = v48 + 16;
          if (v49)
          {
            char v52 = llroundf(*(float *)(v48 + 4 * v44) * 255.0);
            char v53 = llroundf(*(float *)(v51 + 4 * v44) * 255.0);
          }
          else
          {
            char v52 = 0;
            char v53 = 0;
          }
          float v54 = *(float *)(v48 + 4 * v46) * v29;
          float v55 = *(float *)(v48 + 4 * result) * v29;
          float v56 = *(float *)(v48 + 4 * v45) * v29;
          float v57 = *(float *)(v51 + 4 * v46) * v29;
          float v58 = *(float *)(v51 + 4 * result) * v29;
          float v59 = *(float *)(v51 + 4 * v45) * v29;
          float v60 = (float)((float)((float)(v36 * v55) + (float)(v35 * v54)) + (float)(v37 * v56)) + v30;
          float v61 = (float)((float)((float)(v36 * v58) + (float)(v35 * v57)) + (float)(v37 * v59)) + v30;
          float v62 = v54 + v57;
          float v63 = v55 + v58;
          float v64 = v56 + v59;
          float v65 = (float)((float)(v31 + (float)(v62 * v38)) + (float)(v63 * v39)) + (float)(v64 * v40);
          float v66 = (float)(v31 + (float)(v62 * v41)) + (float)(v63 * v42);
          if (v60 < v30) {
            float v67 = v30;
          }
          else {
            float v67 = v60;
          }
          if (v60 > v32) {
            float v67 = v32;
          }
          float v68 = v66 + (float)(v64 * v43);
          *uint64_t v50 = llroundf(v67);
          if (v65 < v33) {
            float v69 = v33;
          }
          else {
            float v69 = v65;
          }
          if (v65 > v34) {
            float v69 = v34;
          }
          v50[1] = llroundf(v69);
          if (v61 < v30) {
            float v70 = v30;
          }
          else {
            float v70 = v61;
          }
          if (v61 > v32) {
            float v70 = v32;
          }
          v50[2] = llroundf(v70);
          float v71 = v34;
          if (v68 <= v34)
          {
            float v71 = v68;
            if (v68 < v33) {
              float v71 = v33;
            }
          }
          v50[3] = llroundf(v71);
          if (v49)
          {
            *uint64_t v49 = v52;
            v49[1] = v53;
            v49 += 2;
          }
          v48 += 32;
          v47 += 2;
          v50 += 4;
        }
        while (v24 > v47);
      }
      v26 += v20;
      v27 += v21;
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

int16x8_t *vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v6 = 0;
  unint64_t v7 = *(void *)(a1 + 20);
  uint64_t v217 = *(void *)(a1 + 36);
  uint64_t v8 = *(void *)(a1 + 44);
  uint64_t v9 = *(void *)(a1 + 28);
  unint64_t v10 = *a1;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = v11 + v8;
  unint64_t v13 = (v9 + v9 * a2) / v10;
  uint64_t v14 = v13 + v8;
  uint64_t v15 = *((void *)a1 + 14);
  uint64_t v16 = *((void *)a1 + 19);
  uint64_t v17 = *((void *)a1 + 15);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v20 = **((void **)a1 + 8);
  uint64_t v215 = **((void **)a1 + 7);
  unint64_t v21 = *((void *)a1 + 13) * a2;
  uint64_t v22 = v19[1];
  uint64_t v189 = *v19;
  uint64_t v23 = v19[2];
  uint64_t v25 = *v18;
  uint64_t v24 = v18[1];
  uint64_t result = (int16x8_t *)v18[2];
  int v229 = *(_DWORD *)(v16 + 154);
  unsigned int v27 = *(unsigned __int16 *)(v16 + 144);
  unsigned int v28 = *(unsigned __int8 *)(v16 + 132);
  unsigned int v29 = *(unsigned __int16 *)(v16 + 146);
  unsigned int v30 = *(unsigned __int16 *)(v16 + 148);
  unsigned int v31 = *(unsigned __int16 *)(v16 + 150);
  unsigned int v32 = *(unsigned __int16 *)(v16 + 152);
  float v226 = *(float *)(v16 + 36);
  float v225 = *(float *)(v16 + 40);
  v33.i32[0] = *(_DWORD *)(v16 + 48);
  float v224 = *(float *)(v16 + 44);
  v35.i32[0] = *(_DWORD *)(v16 + 52);
  v34.i32[0] = *(_DWORD *)(v16 + 56);
  __int32 v36 = *(_DWORD *)(v16 + 60);
  __int32 v37 = *(_DWORD *)(v16 + 64);
  __int32 v38 = *(_DWORD *)(v16 + 68);
  float v223 = *(float *)(v16 + 72);
  float v222 = *(float *)(v16 + 76);
  float v221 = *(float *)(v16 + 80);
  float v220 = *(float *)(v16 + 84);
  _S16 = *(float *)(v16 + 92);
  float v219 = *(float *)(v16 + 88);
  uint64_t v40 = v21 / v10 + v17;
  uint64_t v188 = v20;
  uint64_t v41 = v20 * v12;
  _S17 = *(float *)(v16 + 96);
  _S18 = *(float *)(v16 + 100);
  _S19 = *(float *)(v16 + 104);
  _S20 = *(float *)(v16 + 108);
  _S21 = *(float *)(v16 + 112);
  _S22 = *(float *)(v16 + 116);
  _S23 = *(float *)(v16 + 120);
  memset(v228, 0, sizeof(v228));
  do
  {
    unsigned int v49 = 0;
    char v50 = *((unsigned char *)&v229 + v6);
    do
    {
      *((unsigned char *)v228 + 8 * (((_BYTE)v6 + (v49 >> 3)) & 0x1F) + v49) = v50 + 4 * v49;
      ++v49;
    }
    while (v49 != 8);
    ++v6;
  }
  while (v6 != 4);
  if (v13 != v11)
  {
    uint64_t v51 = 0;
    uint64_t v187 = v14 - v12;
    uint64_t v52 = v16 + 16548;
    float v53 = (float)v27;
    float v54 = (float)v29;
    float v55 = (float)v30;
    float v227 = (float)v31;
    float v56 = (float)v32;
    v33.i32[1] = v36;
    *(float32x2_t *)a4.f32 = vmul_f32(v33, (float32x2_t)0x3F0000003F000000);
    v35.i32[1] = v37;
    *(float32x2_t *)a5.f32 = vmul_f32(v35, (float32x2_t)0x3F0000003F000000);
    v34.i32[1] = v38;
    *(float32x2_t *)a6.f32 = vmul_f32(v34, (float32x2_t)0x3F0000003F000000);
    uint64_t v57 = v16 + 32932;
    uint64_t v58 = v16 + 164;
    _S0 = v226;
    __asm { FCVT            H0, S0 }
    short float v213 = *(short float *)&_S0;
    float16x8_t v214 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a4), 0);
    _S0 = v225;
    __asm { FCVT            H0, S0 }
    short float v211 = *(short float *)&_S0;
    float16x8_t v212 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    _D0 = (int16x4_t)vcvt_f16_f32(a6);
    int32x4_t v66 = vdupq_lane_s32((int32x2_t)_D0, 0);
    *(float *)_D0.i32 = v224;
    __asm { FCVT            H0, S0 }
    short float v209 = *(short float *)_D0.i16;
    float16x8_t v210 = (float16x8_t)v66;
    __asm { FCVT            H0, S20 }
    short float v208 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S21 }
    short float v207 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S22 }
    short float v206 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S23 }
    short float v205 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v223;
    __asm { FCVT            H0, S0 }
    short float v204 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v222;
    __asm { FCVT            H0, S0 }
    short float v203 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v221;
    __asm { FCVT            H0, S0 }
    short float v202 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v220;
    __asm { FCVT            H0, S0 }
    short float v201 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v219;
    __asm { FCVT            H0, S0 }
    short float v200 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S16 }
    short float v199 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S17 }
    short float v198 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S18 }
    short float v197 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S19 }
    short float v196 = *(short float *)_D0.i16;
    *(short float *)_D0.i16 = (short float)v27;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v29;
    int16x8_t v68 = vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v30;
    int16x8_t v69 = vdupq_lane_s16(_D0, 0);
    float16x8_t v194 = (float16x8_t)v69;
    float16x8_t v195 = (float16x8_t)v68;
    *(short float *)v69.i16 = (short float)v31;
    int16x8_t v70 = vdupq_lane_s16(*(int16x4_t *)v69.i8, 0);
    *(short float *)v69.i16 = (short float)v32;
    float16x8_t v192 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v69.i8, 0);
    float16x8_t v193 = (float16x8_t)v70;
    if (v28 >= 0x11) {
      unsigned __int8 v71 = 0;
    }
    else {
      unsigned __int8 v71 = 16 - v28;
    }
    if (result) {
      uint64_t result = (int16x8_t *)((char *)result + 2 * v15 + v23 * v40);
    }
    else {
      uint64_t result = 0;
    }
    if (v24) {
      uint64_t v72 = v24 + v22 * v40 + 2 * v15;
    }
    else {
      uint64_t v72 = 0;
    }
    uint64_t v73 = v25 + v189 * v40 + 2 * v15;
    uint64_t v74 = v215 + v41 + 16 * v217;
    uint16x8_t v75 = (uint16x8_t)vdupq_n_s16(v71);
    float v216 = a5.f32[0];
    float v218 = a4.f32[0];
    float v190 = a5.f32[1];
    float v191 = a4.f32[1];
    unint64_t v76 = a6.i64[0];
    v77.i64[0] = 0x9000900090009000;
    v77.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v7 < 8)
      {
        unint64_t v126 = 0;
        uint64_t v125 = v74;
        char v81 = (uint16x8_t *)v73;
        char v80 = (uint16x8_t *)v72;
        float v79 = result;
      }
      else
      {
        int v78 = 0;
        float v79 = result;
        char v80 = (uint16x8_t *)v72;
        char v81 = (uint16x8_t *)v73;
        char v82 = (const float *)v74;
        do
        {
          char v83 = v82;
          float32x4x4_t v231 = vld4q_f32(v82);
          float v84 = v82 + 16;
          float32x4x4_t v230 = vld4q_f32(v84);
          if (v79)
          {
            float32x4_t v85 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
            int16x8_t v86 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(v231.val[3], v85)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(v230.val[3], v85)));
          }
          else
          {
            int16x8_t v86 = 0uLL;
          }
          float16x8_t v87 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v231.val[1]), v230.val[1]);
          float16x8_t v88 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v231.val[2]), v230.val[2]);
          v89.i64[0] = 0x7000700070007000;
          v89.i64[1] = 0x7000700070007000;
          uint16x8_t v90 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v231.val[0]), v230.val[0]), v89), (float16x8_t)0), v77));
          uint32x4_t v91 = vmovl_high_u16(v90);
          uint32x4_t v92 = vmovl_u16(*(uint16x4_t *)v90.i8);
          v93.i16[0] = *(_WORD *)(v58 + 2 * v92.u32[0]);
          v93.i16[1] = *(_WORD *)(v58 + 2 * v92.u32[1]);
          v93.i16[2] = *(_WORD *)(v58 + 2 * v92.u32[2]);
          v93.i16[3] = *(_WORD *)(v58 + 2 * v92.u32[3]);
          v93.i16[4] = *(_WORD *)(v58 + 2 * v91.u32[0]);
          v93.i16[5] = *(_WORD *)(v58 + 2 * v91.u32[1]);
          v93.i16[6] = *(_WORD *)(v58 + 2 * v91.u32[2]);
          v93.i16[7] = *(_WORD *)(v58 + 2 * v91.u32[3]);
          uint16x8_t v94 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v87, v89), (float16x8_t)0), v77));
          uint32x4_t v95 = vmovl_high_u16(v94);
          uint32x4_t v96 = vmovl_u16(*(uint16x4_t *)v94.i8);
          v97.i16[0] = *(_WORD *)(v58 + 2 * v96.u32[0]);
          v97.i16[1] = *(_WORD *)(v58 + 2 * v96.u32[1]);
          v97.i16[2] = *(_WORD *)(v58 + 2 * v96.u32[2]);
          v97.i16[3] = *(_WORD *)(v58 + 2 * v96.u32[3]);
          v97.i16[4] = *(_WORD *)(v58 + 2 * v95.u32[0]);
          v97.i16[5] = *(_WORD *)(v58 + 2 * v95.u32[1]);
          v97.i16[6] = *(_WORD *)(v58 + 2 * v95.u32[2]);
          v97.i16[7] = *(_WORD *)(v58 + 2 * v95.u32[3]);
          uint16x8_t v98 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v88, v89), (float16x8_t)0), v77));
          uint32x4_t v99 = vmovl_high_u16(v98);
          uint32x4_t v100 = vmovl_u16(*(uint16x4_t *)v98.i8);
          v88.i16[0] = *(_WORD *)(v58 + 2 * v100.u32[0]);
          v88.i16[1] = *(_WORD *)(v58 + 2 * v100.u32[1]);
          v88.i16[2] = *(_WORD *)(v58 + 2 * v100.u32[2]);
          v88.i16[3] = *(_WORD *)(v58 + 2 * v100.u32[3]);
          v88.i16[4] = *(_WORD *)(v58 + 2 * v99.u32[0]);
          v88.i16[5] = *(_WORD *)(v58 + 2 * v99.u32[1]);
          v88.i16[6] = *(_WORD *)(v58 + 2 * v99.u32[2]);
          v88.i16[7] = *(_WORD *)(v58 + 2 * v99.u32[3]);
          uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v93, v208), v97, v207), v88, v206), vmaxq_f16(vmaxq_f16(v93, v97), v88), v205), (float16x8_t)0), v77));
          uint32x4_t v102 = vmovl_high_u16(v101);
          float16x8_t v103 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v101.i8);
          v103.i16[0] = *(_WORD *)(v52 + 2 * v103.u32[0]);
          v103.i16[1] = *(_WORD *)(v52 + 2 * v103.u32[1]);
          v103.i16[2] = *(_WORD *)(v52 + 2 * v103.u32[2]);
          v103.i16[3] = *(_WORD *)(v52 + 2 * v103.u32[3]);
          v103.i16[4] = *(_WORD *)(v52 + 2 * v102.u32[0]);
          v103.i16[5] = *(_WORD *)(v52 + 2 * v102.u32[1]);
          v103.i16[6] = *(_WORD *)(v52 + 2 * v102.u32[2]);
          v103.i16[7] = *(_WORD *)(v52 + 2 * v102.u32[3]);
          float16x8_t v104 = vmulq_f16(v93, v103);
          float16x8_t v105 = vmulq_f16(v97, v103);
          float16x8_t v106 = vmulq_f16(v88, v103);
          float16x8_t v107 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v104, v201), v105, v200), v106, v199);
          float16x8_t v108 = vmulq_n_f16(v106, v196);
          uint16x8_t v109 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v104, v204), v105, v203), v106, v202), (float16x8_t)0), v77));
          uint32x4_t v110 = vmovl_high_u16(v109);
          uint32x4_t v111 = vmovl_u16(*(uint16x4_t *)v109.i8);
          v93.i16[0] = *(_WORD *)(v57 + 2 * v111.u32[0]);
          v93.i16[1] = *(_WORD *)(v57 + 2 * v111.u32[1]);
          v93.i16[2] = *(_WORD *)(v57 + 2 * v111.u32[2]);
          v93.i16[3] = *(_WORD *)(v57 + 2 * v111.u32[3]);
          v93.i16[4] = *(_WORD *)(v57 + 2 * v110.u32[0]);
          v93.i16[5] = *(_WORD *)(v57 + 2 * v110.u32[1]);
          v93.i16[6] = *(_WORD *)(v57 + 2 * v110.u32[2]);
          float16x8_t v112 = v93;
          v112.i16[7] = *(_WORD *)(v57 + 2 * v110.u32[3]);
          float16x8_t v113 = vmlaq_n_f16(v108, v105, v197);
          uint16x8_t v114 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v107, (float16x8_t)0), v77));
          uint32x4_t v115 = vmovl_high_u16(v114);
          uint32x4_t v116 = vmovl_u16(*(uint16x4_t *)v114.i8);
          v87.i16[0] = *(_WORD *)(v57 + 2 * v116.u32[0]);
          v87.i16[1] = *(_WORD *)(v57 + 2 * v116.u32[1]);
          v87.i16[2] = *(_WORD *)(v57 + 2 * v116.u32[2]);
          v87.i16[3] = *(_WORD *)(v57 + 2 * v116.u32[3]);
          v87.i16[4] = *(_WORD *)(v57 + 2 * v115.u32[0]);
          v87.i16[5] = *(_WORD *)(v57 + 2 * v115.u32[1]);
          v87.i16[6] = *(_WORD *)(v57 + 2 * v115.u32[2]);
          float16x8_t v117 = v87;
          v117.i16[7] = *(_WORD *)(v57 + 2 * v115.u32[3]);
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v113, v104, v198), (float16x8_t)0), v77));
          int16x8_t v119 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v118.i8);
          uint32x4_t v120 = vmovl_high_u16(v118);
          *(void *)&long long v121 = v120.u32[2];
          *((void *)&v121 + 1) = v120.u32[3];
          long long v122 = v121;
          *((void *)&v121 + 1) = v119.u32[3];
          v119.i16[7] = (unint64_t)v119.u32[3] >> 48;
          v119.i16[0] = *(_WORD *)(v57 + 2 * v119.u32[0]);
          v119.i16[1] = *(_WORD *)(v57 + 2 * v119.u32[1]);
          v119.i16[2] = *(_WORD *)(v57 + 2 * v119.u32[2]);
          v119.i16[3] = *(_WORD *)(v57 + 2 * *((void *)&v121 + 1));
          v119.i16[4] = *(_WORD *)(v57 + 2 * v120.u32[0]);
          v119.i16[5] = *(_WORD *)(v57 + 2 * v120.u32[1]);
          v119.i16[6] = *(_WORD *)(v57 + 2 * v122);
          float16x8_t v123 = (float16x8_t)v119;
          v123.i16[7] = *(_WORD *)(v57 + 2 * *((void *)&v122 + 1));
          *v81++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v67, v112, v213), v117, v211), v123, v209), v67), v194)), v75);
          int16x8_t v124 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v93, (int16x8_t)v87), (float16x8_t)vuzp2q_s16((int16x8_t)v112, (int16x8_t)v117));
          *v80++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v195, v214, (float16x8_t)vzip1q_s16(v124, v124)), v212, (float16x8_t)vzip2q_s16(v124, v124)), v210, vaddq_f16((float16x8_t)vtrn1q_s16(v119, v119), (float16x8_t)vtrn2q_s16((int16x8_t)v123, (int16x8_t)v123))), v193), v192)), v75);
          if (v79) {
            *v79++ = v86;
          }
          v78 += 8;
          char v82 = v83 + 32;
        }
        while (v78 < (int)v7 - 7);
        uint64_t v125 = (uint64_t)(v83 + 32);
        unint64_t v126 = v7 & 0xFFFFFFF8;
      }
      if (v7 > v126)
      {
        uint64_t v127 = v125 + 16;
        do
        {
          float v128 = (__int32 *)(v127 + 4 * v229);
          v129.i32[0] = *(v128 - 4);
          float v130 = (__int32 *)(v127 + 4 * BYTE1(v229));
          v129.i32[1] = *(v130 - 4);
          float32x2_t v131 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v129, v131), 0), v131)));
          _D0.i16[0] = *(_WORD *)(v58 + 2 * _D0.u32[0]);
          float v133 = (__int32 *)(v127 + 4 * BYTE2(v229));
          _D1.i32[0] = *(v133 - 4);
          __asm { FCVT            S14, H0 }
          _D0.i16[0] = *(_WORD *)(v58 + 2 * _D0.u32[1]);
          __asm { FCVT            S15, H0 }
          _D1.i32[1] = *v128;
          int32x2_t v137 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D1, v131), 0), v131)));
          _D1.i16[0] = *(_WORD *)(v58 + 2 * v137.u32[0]);
          __asm { FCVT            S27, H1 }
          float v139 = fmaxf(_S14, fmaxf(_S15, _S27));
          float v140 = (float)((float)((float)(_S21 * _S15) + (float)(_S20 * _S14)) + (float)(_S22 * _S27))
               + (float)(_S23 * v139);
          float v141 = 8191.0;
          if (v140 <= 8191.0)
          {
            float v141 = (float)((float)((float)(_S21 * _S15) + (float)(_S20 * _S14)) + (float)(_S22 * _S27))
                 + (float)(_S23 * v139);
            if (v140 < 0.0) {
              float v141 = 0.0;
            }
          }
          v142.i32[0] = *v130;
          _H0 = *(_WORD *)(v58 + 2 * v137.u32[1]);
          __asm { FCVT            S9, H0 }
          v142.i32[1] = *v133;
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v142, v131), 0), v131)));
          _D0.i16[0] = *(_WORD *)(v58 + 2 * _D0.u32[0]);
          __asm { FCVT            S11, H0 }
          _D0.i16[0] = *(_WORD *)(v58 + 2 * _D0.u32[1]);
          __asm { FCVT            S0, H0 }
          float v148 = (float)((float)((float)(_S21 * _S11) + (float)(_S20 * _S9)) + (float)(_S22 * _S0))
               + (float)(_S23 * fmaxf(_S9, fmaxf(_S11, _S0)));
          float v149 = 8191.0;
          if (v148 <= 8191.0)
          {
            float v149 = v148;
            if (v148 < 0.0) {
              float v149 = 0.0;
            }
          }
          if (v79)
          {
            float v150 = (float *)(v127 + 4 * HIBYTE(v229));
            __int16 v151 = llroundf(*(v150 - 4) * 65535.0);
            __int16 v152 = llroundf(*v150 * 65535.0);
          }
          else
          {
            __int16 v151 = 0;
            __int16 v152 = 0;
          }
          _H2 = *(_WORD *)(v52 + 2 * llroundf(v141));
          __asm { FCVT            S2, H2 }
          float v155 = _S14 * _S2;
          float v156 = _S15 * _S2;
          float v157 = _S27 * _S2;
          _H1 = *(_WORD *)(v52 + 2 * llroundf(v149));
          __asm { FCVT            S1, H1 }
          _S5 = _S9 * _S1;
          float v161 = _S11 * _S1;
          float v162 = _S0 * _S1;
          _S1 = (float)((float)(v222 * v156) + (float)(v155 * v223)) + (float)(v157 * v221);
          float v164 = (float)((float)(v219 * v156) + (float)(v155 * v220)) + (float)(v157 * _S16);
          _S2 = (float)((float)(_S18 * v156) + (float)(v155 * _S17)) + (float)(v157 * _S19);
          _S3 = (float)((float)(v222 * v161) + (float)(_S5 * v223)) + (float)(v162 * v221);
          _S4 = (float)((float)(v219 * v161) + (float)(_S5 * v220)) + (float)(v162 * _S16);
          _S0 = (float)((float)(_S18 * v161) + (float)(_S5 * _S17)) + (float)(v162 * _S19);
          LOWORD(_S1) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S5) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S2) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S3, H3
          }
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S6, H0 }
          float v175 = (float)((float)((float)(v225 * _S5) + (float)(v226 * _S1)) + (float)(v224 * _S2)) + v53;
          float v176 = (float)((float)((float)(v225 * _S4) + (float)(v226 * _S3)) + (float)(v224 * _S6)) + v53;
          if (v175 < v53) {
            float v177 = v53;
          }
          else {
            float v177 = (float)((float)((float)(v225 * _S5) + (float)(v226 * _S1)) + (float)(v224 * _S2)) + v53;
          }
          if (v175 <= v55) {
            float v178 = v177;
          }
          else {
            float v178 = v55;
          }
          v81->i16[0] = llroundf(v178) << v71;
          if (v176 < v53) {
            float v179 = v53;
          }
          else {
            float v179 = (float)((float)((float)(v225 * _S4) + (float)(v226 * _S3)) + (float)(v224 * _S6)) + v53;
          }
          if (v176 > v55) {
            float v179 = v55;
          }
          v81->i16[1] = llroundf(v179) << v71;
          float v180 = _S1 + _S3;
          float v181 = _S5 + _S4;
          float v182 = _S2 + _S6;
          float v183 = (float)((float)(v54 + (float)(v180 * v218)) + (float)((float)(_S5 + _S4) * v216))
               + (float)(v182 * *(float *)&v76);
          float v184 = (float)v32;
          if (v183 <= v56)
          {
            float v184 = v183;
            if (v183 < v227) {
              float v184 = (float)v31;
            }
          }
          float v185 = (float)((float)(v54 + (float)(v180 * v191)) + (float)(v181 * v190))
               + (float)(v182 * *((float *)&v76 + 1));
          v80->i16[0] = llroundf(v184) << v71;
          float v186 = (float)v32;
          if (v185 <= v56)
          {
            float v186 = v185;
            if (v185 < v227) {
              float v186 = (float)v31;
            }
          }
          v80->i16[1] = llroundf(v186) << v71;
          if (v79)
          {
            v79->i16[0] = v151;
            v79->i16[1] = v152;
            float v79 = (int16x8_t *)((char *)v79 + 4);
          }
          v126 += 2;
          v127 += 32;
          char v81 = (uint16x8_t *)((char *)v81 + 4);
          char v80 = (uint16x8_t *)((char *)v80 + 4);
        }
        while (v7 > v126);
      }
      v74 += v188;
      v73 += v189;
      v72 += v22;
      uint64_t result = (int16x8_t *)((char *)result + v23);
      ++v51;
    }
    while (v51 != v187);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf422_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *(void *)(result + 152);
    uint64_t v15 = *(uint64_t **)(result + 136);
    uint64_t v16 = *(void **)(result + 56);
    uint64_t v17 = **(void **)(result + 64);
    uint64_t v18 = *v15;
    uint64_t v19 = v15[1];
    uint64_t v20 = v15[2];
    LOWORD(a3) = *(_WORD *)(v14 + 144);
    float v21 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v14 + 146);
    float v22 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v14 + 148);
    float v23 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v14 + 150);
    float v24 = (float)LODWORD(a6);
    LOWORD(a6) = *(_WORD *)(v14 + 152);
    float v25 = (float)LODWORD(a6);
    float v134 = *(float *)(v14 + 36);
    float v135 = v24;
    float v26 = *(float *)(v14 + 44);
    float v132 = *(float *)(v14 + 48) * 0.5;
    float v133 = *(float *)(v14 + 40);
    float v130 = *(float *)(v14 + 56) * 0.5;
    float v131 = *(float *)(v14 + 52) * 0.5;
    float v128 = *(float *)(v14 + 64) * 0.5;
    float v129 = *(float *)(v14 + 60) * 0.5;
    float v27 = *(float *)(v14 + 72);
    float v127 = *(float *)(v14 + 68) * 0.5;
    float v28 = *(float *)(v14 + 76);
    float v29 = *(float *)(v14 + 80);
    float v30 = *(float *)(v14 + 84);
    float v31 = *(float *)(v14 + 88);
    float v32 = *(float *)(v14 + 92);
    float v33 = *(float *)(v14 + 96);
    float v34 = *(float *)(v14 + 100);
    float v35 = *(float *)(v14 + 104);
    uint64_t v36 = v14 + 164;
    uint64_t v37 = v14 + 16548;
    uint64_t v38 = v14 + 32932;
    float v40 = *(float *)(v14 + 108);
    float v39 = *(float *)(v14 + 112);
    float v41 = *(float *)(v14 + 116);
    float v42 = *(float *)(v14 + 120);
    float v43 = *(uint64_t **)(result + 128);
    uint64_t v44 = *(void *)(result + 112);
    unint64_t v45 = *(void *)(result + 104) * a2 / v7 + *(void *)(result + 120);
    uint64_t v46 = *(void *)(result + 36);
    unsigned int v47 = *(unsigned __int8 *)(v14 + 132);
    if (v47 >= 0x11) {
      char v48 = 0;
    }
    else {
      char v48 = 16 - v47;
    }
    uint64_t result = *(unsigned __int8 *)(v14 + 157);
    uint64_t v49 = *(unsigned __int8 *)(v14 + 156);
    uint64_t v50 = *(unsigned __int8 *)(v14 + 155);
    uint64_t v51 = *(unsigned __int8 *)(v14 + 154);
    uint64_t v52 = v43[2];
    if (v52) {
      uint64_t v53 = v52 + v45 * v20 + 2 * v44;
    }
    else {
      uint64_t v53 = 0;
    }
    uint64_t v55 = *v43;
    uint64_t v54 = v43[1];
    uint64_t v56 = v54 + v45 * v19 + 2 * v44;
    if (!v54) {
      uint64_t v56 = 0;
    }
    uint64_t v57 = v55 + v45 * v18 + 2 * v44;
    uint64_t v58 = *v16 + v17 * v12 + 16 * v46;
    float32x2_t v59 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    char v60 = v48;
    do
    {
      if (v11)
      {
        unint64_t v61 = 0;
        float v62 = (_WORD *)v53;
        float v63 = (_WORD *)v57;
        uint64_t v64 = v58;
        do
        {
          float v65 = v22;
          v66.i32[0] = *(_DWORD *)(v64 + 4 * v51);
          v66.i32[1] = *(_DWORD *)(v64 + 4 * v50);
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v66, v59), 0), v59)));
          uint64_t v68 = v64 + 16;
          _D3.i16[0] = *(_WORD *)(v36 + 2 * _D3.u32[0]);
          __asm { FCVT            S15, H3 }
          _D3.i16[0] = *(_WORD *)(v36 + 2 * _D3.u32[1]);
          v74.i32[0] = *(_DWORD *)(v64 + 4 * v49);
          v74.i32[1] = *(_DWORD *)(v64 + 16 + 4 * v51);
          __asm { FCVT            S16, H3 }
          int32x2_t v76 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v74, v59), 0), v59)));
          _D3.i16[0] = *(_WORD *)(v36 + 2 * v76.u32[0]);
          __asm { FCVT            S17, H3 }
          float v78 = fmaxf(_S15, fmaxf(_S16, _S17));
          float v79 = (float)((float)((float)(v39 * _S16) + (float)(v40 * _S15)) + (float)(v41 * _S17)) + (float)(v42 * v78);
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = (float)((float)((float)(v39 * _S16) + (float)(v40 * _S15)) + (float)(v41 * _S17)) + (float)(v42 * v78);
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          _H18 = *(_WORD *)(v36 + 2 * v76.u32[1]);
          __asm { FCVT            S19, H18 }
          v83.i32[0] = *(_DWORD *)(v68 + 4 * v50);
          v83.i32[1] = *(_DWORD *)(v68 + 4 * v49);
          _D18 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v83, v59), 0), v59)));
          _D18.i16[0] = *(_WORD *)(v36 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v36 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          float v87 = (float)((float)((float)(v39 * _S20) + (float)(v40 * _S19)) + (float)(v41 * _S22))
              + (float)(v42 * fmaxf(_S19, fmaxf(_S20, _S22)));
          float v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          if (v62)
          {
            float v89 = *(float *)(v68 + 4 * result);
            __int16 v90 = llroundf(*(float *)(v64 + 4 * result) * 65535.0);
            __int16 v91 = llroundf(v89 * 65535.0);
          }
          else
          {
            __int16 v90 = 0;
            __int16 v91 = 0;
          }
          float v22 = v65;
          _H1 = *(_WORD *)(v37 + 2 * llroundf(v80));
          __asm { FCVT            S1, H1 }
          float v94 = _S15 * _S1;
          float v95 = _S16 * _S1;
          float v96 = _S17 * _S1;
          _H16 = *(_WORD *)(v37 + 2 * llroundf(v88));
          __asm { FCVT            S16, H16 }
          _S17 = _S19 * _S16;
          _S18 = _S20 * _S16;
          float v101 = _S22 * _S16;
          float v102 = (float)((float)(v28 * v95) + (float)(v94 * v27)) + (float)(v96 * v29);
          float v103 = (float)((float)(v31 * v95) + (float)(v94 * v30)) + (float)(v96 * v32);
          _S1 = (float)((float)(v34 * v95) + (float)(v94 * v33)) + (float)(v96 * v35);
          _S3 = (float)((float)(v28 * _S18) + (float)(_S17 * v27)) + (float)(v101 * v29);
          _S5 = (float)((float)(v31 * _S18) + (float)(_S17 * v30)) + (float)(v101 * v32);
          _S16 = (float)((float)(v34 * _S18) + (float)(_S17 * v33)) + (float)(v101 * v35);
          LOWORD(_S17) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S18) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S1) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S1, H1
            FCVT            S3, H3
          }
          LOWORD(_S5) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S16) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S19, H16 }
          float v114 = (float)((float)((float)(v133 * _S18) + (float)(v134 * _S17)) + (float)(v26 * _S1)) + v21;
          float v115 = (float)((float)((float)(v133 * _S5) + (float)(v134 * _S3)) + (float)(v26 * _S19)) + v21;
          if (v114 < v21) {
            float v116 = v21;
          }
          else {
            float v116 = (float)((float)((float)(v133 * _S18) + (float)(v134 * _S17)) + (float)(v26 * _S1)) + v21;
          }
          if (v114 <= v23) {
            float v117 = v116;
          }
          else {
            float v117 = v23;
          }
          *float v63 = llroundf(v117) << v60;
          if (v115 < v21) {
            float v118 = v21;
          }
          else {
            float v118 = (float)((float)((float)(v133 * _S5) + (float)(v134 * _S3)) + (float)(v26 * _S19)) + v21;
          }
          if (v115 > v23) {
            float v118 = v23;
          }
          v63[1] = llroundf(v118) << v60;
          float v119 = _S17 + _S3;
          float v120 = _S18 + _S5;
          float v121 = _S1 + _S19;
          float v122 = (float)((float)(v65 + (float)(v119 * v132)) + (float)((float)(_S18 + _S5) * v131))
               + (float)((float)(_S1 + _S19) * v130);
          float v123 = v25;
          if (v122 <= v25)
          {
            float v123 = v122;
            if (v122 < v135) {
              float v123 = v135;
            }
          }
          int16x8_t v124 = (_WORD *)(v56 + 2 * v61);
          float v125 = (float)((float)(v65 + (float)(v119 * v129)) + (float)(v120 * v128)) + (float)(v121 * v127);
          *int16x8_t v124 = llroundf(v123) << v60;
          float v126 = v25;
          if (v125 <= v25)
          {
            float v126 = v125;
            if (v125 < v135) {
              float v126 = v135;
            }
          }
          v124[1] = llroundf(v126) << v60;
          if (v62)
          {
            *float v62 = v90;
            v62[1] = v91;
            v62 += 2;
          }
          v64 += 32;
          v61 += 2;
          v63 += 2;
        }
        while (v11 > v61);
      }
      v58 += v17;
      v57 += v18;
      v56 += v19;
      v53 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

uint16x8_t *vt_Copy_RGfA_TRC_Mat_TRC_xf422_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v6 = 0;
  unint64_t v7 = *(void *)(a1 + 20);
  uint64_t v190 = *(void *)(a1 + 36);
  uint64_t v8 = *(void *)(a1 + 44);
  uint64_t v9 = *(void *)(a1 + 28);
  unint64_t v10 = *a1;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = v11 + v8;
  unint64_t v13 = (v9 + v9 * a2) / v10;
  uint64_t v14 = v13 + v8;
  uint64_t v15 = *((void *)a1 + 14);
  uint64_t v16 = *((void *)a1 + 19);
  unint64_t v17 = *((void *)a1 + 13) * a2;
  uint64_t v18 = *((void *)a1 + 15);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v20 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v21 = **((void **)a1 + 8);
  uint64_t v188 = **((void **)a1 + 7);
  uint64_t v22 = v20[1];
  uint64_t v167 = *v20;
  uint64_t v23 = v20[2];
  uint64_t v25 = *v19;
  uint64_t result = (uint16x8_t *)v19[1];
  uint64_t v26 = v19[2];
  int v193 = *(_DWORD *)(v16 + 154);
  unsigned int v27 = *(unsigned __int16 *)(v16 + 144);
  unsigned int v28 = *(unsigned __int8 *)(v16 + 132);
  unsigned int v29 = *(unsigned __int16 *)(v16 + 146);
  unsigned int v30 = *(unsigned __int16 *)(v16 + 148);
  unsigned int v31 = *(unsigned __int16 *)(v16 + 150);
  unsigned int v32 = *(unsigned __int16 *)(v16 + 152);
  _S12 = *(float *)(v16 + 36);
  _S13 = *(float *)(v16 + 40);
  _S23 = *(float *)(v16 + 44);
  v36.i32[0] = *(_DWORD *)(v16 + 48);
  v37.i32[0] = *(_DWORD *)(v16 + 52);
  v38.i32[0] = *(_DWORD *)(v16 + 56);
  __int32 v39 = *(_DWORD *)(v16 + 60);
  __int32 v40 = *(_DWORD *)(v16 + 64);
  __int32 v42 = *(_DWORD *)(v16 + 68);
  _S14 = *(float *)(v16 + 72);
  uint64_t v43 = v17 / v10 + v18;
  uint64_t v166 = v21;
  uint64_t v44 = v21 * v12;
  _S4 = *(float *)(v16 + 76);
  _S5 = *(float *)(v16 + 80);
  _S6 = *(float *)(v16 + 84);
  _S7 = *(float *)(v16 + 88);
  _S16 = *(float *)(v16 + 92);
  _S17 = *(float *)(v16 + 96);
  _S18 = *(float *)(v16 + 100);
  _S19 = *(float *)(v16 + 104);
  memset(v192, 0, sizeof(v192));
  do
  {
    unsigned int v53 = 0;
    char v54 = *((unsigned char *)&v193 + v6);
    do
    {
      *((unsigned char *)v192 + 8 * (((_BYTE)v6 + (v53 >> 3)) & 0x1F) + v53) = v54 + 4 * v53;
      ++v53;
    }
    while (v53 != 8);
    ++v6;
  }
  while (v6 != 4);
  if (v13 != v11)
  {
    uint64_t v55 = 0;
    uint64_t v56 = v14 - v12;
    float v57 = (float)v27;
    float v58 = (float)v29;
    float v59 = (float)v30;
    float v191 = (float)v31;
    float v60 = (float)v32;
    uint64_t v61 = v16 + 16548;
    uint64_t v62 = v16 + 164;
    v36.i32[1] = v39;
    v37.i32[1] = v40;
    *(float32x2_t *)a4.f32 = vmul_f32(v36, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)a5.f32 = vmul_f32(v37, (float32x2_t)0x3F0000003F000000);
    v38.i32[1] = v42;
    *(float32x2_t *)a6.f32 = vmul_f32(v38, (float32x2_t)0x3F0000003F000000);
    __asm { FCVT            H0, S12 }
    short float v187 = _H0;
    __asm { FCVT            H0, S13 }
    short float v186 = _H0;
    float16x8_t v185 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a4), 0);
    __asm { FCVT            H0, S23 }
    short float v184 = _H0;
    float16x8_t v183 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    _Q0 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a6), 0);
    float16x8_t v182 = (float16x8_t)_Q0;
    __asm { FCVT            H0, S14 }
    short float v181 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S4 }
    short float v180 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S5 }
    short float v179 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S6 }
    short float v178 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S7 }
    short float v177 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S16 }
    short float v176 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S17 }
    short float v175 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S18 }
    short float v174 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S19 }
    short float v173 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v27;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v29;
    int16x8_t v72 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v172 = (float16x8_t)v72;
    *(short float *)v72.i16 = (short float)v30;
    int16x8_t v73 = vdupq_lane_s16(*(int16x4_t *)v72.i8, 0);
    float16x8_t v171 = (float16x8_t)v73;
    *(short float *)v73.i16 = (short float)v31;
    int16x8_t v74 = vdupq_lane_s16(*(int16x4_t *)v73.i8, 0);
    float16x8_t v170 = (float16x8_t)v74;
    *(short float *)v74.i16 = (short float)v32;
    float16x8_t v169 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v74.i8, 0);
    if (v28 >= 0x11) {
      unsigned __int8 v75 = 0;
    }
    else {
      unsigned __int8 v75 = 16 - v28;
    }
    if (v26) {
      uint64_t v76 = v26 + v23 * v43 + 2 * v15;
    }
    else {
      uint64_t v76 = 0;
    }
    if (result) {
      uint64_t result = (uint16x8_t *)((char *)result + 2 * v15 + v22 * v43);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v77 = v25 + v167 * v43 + 2 * v15;
    uint64_t v78 = v188 + v44 + 16 * v190;
    uint16x8_t v79 = (uint16x8_t)vdupq_n_s16(v75);
    float v189 = a5.f32[0];
    unint64_t v80 = a4.i64[0];
    unint64_t v81 = a6.i64[0];
    float v168 = a5.f32[1];
    v82.i64[0] = 0x9000900090009000;
    v82.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v7 < 8)
      {
        unint64_t v126 = 0;
        uint64_t v125 = v78;
        int16x8_t v86 = (uint16x8_t *)v77;
        float32x4_t v85 = result;
        float v84 = (int16x8_t *)v76;
      }
      else
      {
        int v83 = 0;
        float v84 = (int16x8_t *)v76;
        float32x4_t v85 = result;
        int16x8_t v86 = (uint16x8_t *)v77;
        float v87 = (const float *)v78;
        do
        {
          float v88 = v87;
          float32x4x4_t v194 = vld4q_f32(v87);
          float v89 = v87 + 16;
          float32x4x4_t v195 = vld4q_f32(v89);
          if (v84)
          {
            float32x4_t v90 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
            int16x8_t v91 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(v194.val[3], v90)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(v195.val[3], v90)));
          }
          else
          {
            int16x8_t v91 = 0uLL;
          }
          float16x8_t v92 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v194.val[1]), v195.val[1]);
          v93.i64[0] = 0x7000700070007000;
          v93.i64[1] = 0x7000700070007000;
          float16x8_t v94 = vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v194.val[0]), v195.val[0]), v93);
          float16x8_t v95 = vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v194.val[2]), v195.val[2]), v93);
          uint16x8_t v96 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v94, (float16x8_t)0), v82));
          uint32x4_t v97 = vmovl_high_u16(v96);
          uint32x4_t v98 = vmovl_u16(*(uint16x4_t *)v96.i8);
          v99.i16[0] = *(_WORD *)(v62 + 2 * v98.u32[0]);
          v99.i16[1] = *(_WORD *)(v62 + 2 * v98.u32[1]);
          v99.i16[2] = *(_WORD *)(v62 + 2 * v98.u32[2]);
          v99.i16[3] = *(_WORD *)(v62 + 2 * v98.u32[3]);
          v99.i16[4] = *(_WORD *)(v62 + 2 * v97.u32[0]);
          v99.i16[5] = *(_WORD *)(v62 + 2 * v97.u32[1]);
          v99.i16[6] = *(_WORD *)(v62 + 2 * v97.u32[2]);
          v99.i16[7] = *(_WORD *)(v62 + 2 * v97.u32[3]);
          uint16x8_t v100 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v92, v93), (float16x8_t)0), v82));
          uint32x4_t v101 = vmovl_high_u16(v100);
          uint32x4_t v102 = vmovl_u16(*(uint16x4_t *)v100.i8);
          v103.i16[0] = *(_WORD *)(v62 + 2 * v102.u32[0]);
          v103.i16[1] = *(_WORD *)(v62 + 2 * v102.u32[1]);
          v103.i16[2] = *(_WORD *)(v62 + 2 * v102.u32[2]);
          v103.i16[3] = *(_WORD *)(v62 + 2 * v102.u32[3]);
          v103.i16[4] = *(_WORD *)(v62 + 2 * v101.u32[0]);
          v103.i16[5] = *(_WORD *)(v62 + 2 * v101.u32[1]);
          v103.i16[6] = *(_WORD *)(v62 + 2 * v101.u32[2]);
          v103.i16[7] = *(_WORD *)(v62 + 2 * v101.u32[3]);
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v95, (float16x8_t)0), v82));
          uint32x4_t v105 = vmovl_high_u16(v104);
          float16x8_t v106 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v104.i8);
          v106.i16[0] = *(_WORD *)(v62 + 2 * v106.u32[0]);
          v106.i16[1] = *(_WORD *)(v62 + 2 * v106.u32[1]);
          v106.i16[2] = *(_WORD *)(v62 + 2 * v106.u32[2]);
          v106.i16[3] = *(_WORD *)(v62 + 2 * v106.u32[3]);
          v106.i16[4] = *(_WORD *)(v62 + 2 * v105.u32[0]);
          v106.i16[5] = *(_WORD *)(v62 + 2 * v105.u32[1]);
          v106.i16[6] = *(_WORD *)(v62 + 2 * v105.u32[2]);
          v106.i16[7] = *(_WORD *)(v62 + 2 * v105.u32[3]);
          float16x8_t v107 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v99, v178), v103, v177), v106, v176);
          float16x8_t v108 = vmulq_n_f16(v106, v173);
          uint16x8_t v109 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v99, v181), v103, v180), v106, v179), (float16x8_t)0), v82));
          uint32x4_t v110 = vmovl_high_u16(v109);
          uint32x4_t v111 = vmovl_u16(*(uint16x4_t *)v109.i8);
          v95.i16[0] = *(_WORD *)(v61 + 2 * v111.u32[0]);
          v95.i16[1] = *(_WORD *)(v61 + 2 * v111.u32[1]);
          v95.i16[2] = *(_WORD *)(v61 + 2 * v111.u32[2]);
          v95.i16[3] = *(_WORD *)(v61 + 2 * v111.u32[3]);
          v95.i16[4] = *(_WORD *)(v61 + 2 * v110.u32[0]);
          v95.i16[5] = *(_WORD *)(v61 + 2 * v110.u32[1]);
          v95.i16[6] = *(_WORD *)(v61 + 2 * v110.u32[2]);
          float16x8_t v112 = v95;
          v112.i16[7] = *(_WORD *)(v61 + 2 * v110.u32[3]);
          float16x8_t v113 = vmlaq_n_f16(v108, v103, v174);
          uint16x8_t v114 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v107, (float16x8_t)0), v82));
          uint32x4_t v115 = vmovl_high_u16(v114);
          uint32x4_t v116 = vmovl_u16(*(uint16x4_t *)v114.i8);
          v103.i16[0] = *(_WORD *)(v61 + 2 * v116.u32[0]);
          v103.i16[1] = *(_WORD *)(v61 + 2 * v116.u32[1]);
          v103.i16[2] = *(_WORD *)(v61 + 2 * v116.u32[2]);
          v103.i16[3] = *(_WORD *)(v61 + 2 * v116.u32[3]);
          v103.i16[4] = *(_WORD *)(v61 + 2 * v115.u32[0]);
          v103.i16[5] = *(_WORD *)(v61 + 2 * v115.u32[1]);
          v103.i16[6] = *(_WORD *)(v61 + 2 * v115.u32[2]);
          float16x8_t v117 = v103;
          v117.i16[7] = *(_WORD *)(v61 + 2 * v115.u32[3]);
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v113, v99, v175), (float16x8_t)0), v82));
          int16x8_t v119 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v118.i8);
          uint32x4_t v120 = vmovl_high_u16(v118);
          *(void *)&long long v121 = v120.u32[2];
          *((void *)&v121 + 1) = v120.u32[3];
          long long v122 = v121;
          *((void *)&v121 + 1) = v119.u32[3];
          v119.i16[7] = (unint64_t)v119.u32[3] >> 48;
          v119.i16[0] = *(_WORD *)(v61 + 2 * v119.u32[0]);
          v119.i16[1] = *(_WORD *)(v61 + 2 * v119.u32[1]);
          v119.i16[2] = *(_WORD *)(v61 + 2 * v119.u32[2]);
          v119.i16[3] = *(_WORD *)(v61 + 2 * *((void *)&v121 + 1));
          v119.i16[4] = *(_WORD *)(v61 + 2 * v120.u32[0]);
          v119.i16[5] = *(_WORD *)(v61 + 2 * v120.u32[1]);
          v119.i16[6] = *(_WORD *)(v61 + 2 * v122);
          float16x8_t v123 = (float16x8_t)v119;
          v123.i16[7] = *(_WORD *)(v61 + 2 * *((void *)&v122 + 1));
          *v86++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v71, v112, v187), v117, v186), v123, v184), v71), v171)), v79);
          int16x8_t v124 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v95, (int16x8_t)v103), (float16x8_t)vuzp2q_s16((int16x8_t)v112, (int16x8_t)v117));
          *v85++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v172, v185, (float16x8_t)vzip1q_s16(v124, v124)), v183, (float16x8_t)vzip2q_s16(v124, v124)), v182, vaddq_f16((float16x8_t)vtrn1q_s16(v119, v119), (float16x8_t)vtrn2q_s16((int16x8_t)v123, (int16x8_t)v123))), v170), v169)), v79);
          if (v84) {
            *v84++ = v91;
          }
          v83 += 8;
          float v87 = v88 + 32;
        }
        while (v83 < (int)v7 - 7);
        uint64_t v125 = (uint64_t)(v88 + 32);
        unint64_t v126 = v7 & 0xFFFFFFF8;
      }
      if (v7 > v126)
      {
        uint64_t v127 = v125 + 16;
        do
        {
          if (v84)
          {
            float v128 = (float *)(v127 + 4 * HIBYTE(v193));
            __int16 v129 = llroundf(*(v128 - 4) * 65535.0);
            __int16 v130 = llroundf(*v128 * 65535.0);
          }
          else
          {
            __int16 v129 = 0;
            __int16 v130 = 0;
          }
          float v131 = (__int32 *)(v127 + 4 * v193);
          v132.i32[0] = *(v131 - 4);
          float v133 = (__int32 *)(v127 + 4 * BYTE1(v193));
          float v134 = (__int32 *)(v127 + 4 * BYTE2(v193));
          v135.i32[0] = *(v134 - 4);
          v136.i32[0] = *v133;
          v132.i32[1] = *(v133 - 4);
          _D3 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D0 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v132, _D3), 0), _D3)));
          _D0.i16[0] = *(_WORD *)(v62 + 2 * _D0.u32[0]);
          __asm { FCVT            S0, H0 }
          _H25 = *(_WORD *)(v62 + 2 * _D0.u32[1]);
          v135.i32[1] = *v131;
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v135, _D3), 0), _D3)));
          _D1.i16[0] = *(_WORD *)(v62 + 2 * _D1.u32[0]);
          __asm
          {
            FCVT            S25, H25
            FCVT            S1, H1
          }
          _H26 = *(_WORD *)(v62 + 2 * _D1.u32[1]);
          v136.i32[1] = *v134;
          __asm { FCVT            S26, H26 }
          _D2 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v136, _D3), 0), _D3)));
          _D2.i16[0] = *(_WORD *)(v62 + 2 * _D2.u32[0]);
          __asm { FCVT            S2, H2 }
          _D3.i16[0] = *(_WORD *)(v62 + 2 * _D2.u32[1]);
          __asm { FCVT            S3, H3 }
          _S27 = (float)((float)(_S4 * _S25) + (float)(*(float *)_D0.i32 * _S14)) + (float)(*(float *)_D1.i32 * _S5);
          float v146 = (float)((float)(_S7 * _S25) + (float)(*(float *)_D0.i32 * _S6)) + (float)(*(float *)_D1.i32 * _S16);
          *(float *)_D0.i32 = (float)((float)(_S18 * _S25) + (float)(*(float *)_D0.i32 * _S17))
                            + (float)(*(float *)_D1.i32 * _S19);
          *(float *)_D1.i32 = (float)((float)(_S4 * *(float *)_D2.i32) + (float)(_S26 * _S14))
                            + (float)(_D3.f32[0] * _S5);
          float v147 = (float)((float)(_S7 * *(float *)_D2.i32) + (float)(_S26 * _S6)) + (float)(_D3.f32[0] * _S16);
          *(float *)_D2.i32 = (float)((float)(_S18 * *(float *)_D2.i32) + (float)(_S26 * _S17))
                            + (float)(_D3.f32[0] * _S19);
          _D3.i16[0] = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S27, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S27) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _D0.i16[0] = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(*(float *)_D0.i32, 0.0), 8191.0)));
          _D1.i16[0] = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(*(float *)_D1.i32, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H0
            FCVT            S0, H1
          }
          _D1.i16[0] = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _D2.i16[0] = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(*(float *)_D2.i32, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          float v154 = (float)((float)((float)(_S13 * _S27) + (float)(_S12 * _S3)) + (float)(_S23 * _S28)) + v57;
          float v155 = (float)((float)((float)(_S13 * _S1) + (float)(_S12 * _S0)) + (float)(_S23 * _S2)) + v57;
          if (v154 < v57) {
            float v156 = v57;
          }
          else {
            float v156 = (float)((float)((float)(_S13 * _S27) + (float)(_S12 * _S3)) + (float)(_S23 * _S28)) + v57;
          }
          if (v154 <= v59) {
            float v157 = v156;
          }
          else {
            float v157 = v59;
          }
          v86->i16[0] = llroundf(v157) << v75;
          if (v155 < v57) {
            float v158 = v57;
          }
          else {
            float v158 = (float)((float)((float)(_S13 * _S1) + (float)(_S12 * _S0)) + (float)(_S23 * _S2)) + v57;
          }
          if (v155 > v59) {
            float v158 = v59;
          }
          v86->i16[1] = llroundf(v158) << v75;
          float v159 = _S3 + _S0;
          float v160 = _S27 + _S1;
          float v161 = _S28 + _S2;
          float v162 = (float)((float)(v58 + (float)(v159 * *(float *)&v80)) + (float)(v160 * v189))
               + (float)(v161 * *(float *)&v81);
          float v163 = (float)v32;
          if (v162 <= v60)
          {
            float v163 = (float)((float)(v58 + (float)(v159 * *(float *)&v80)) + (float)(v160 * v189))
                 + (float)(v161 * *(float *)&v81);
            if (v162 < v191) {
              float v163 = (float)v31;
            }
          }
          float v164 = (float)((float)(v58 + (float)(v159 * *((float *)&v80 + 1))) + (float)(v160 * v168))
               + (float)(v161 * *((float *)&v81 + 1));
          v85->i16[0] = llroundf(v163) << v75;
          float v165 = (float)v32;
          if (v164 <= v60)
          {
            float v165 = v164;
            if (v164 < v191) {
              float v165 = (float)v31;
            }
          }
          v85->i16[1] = llroundf(v165) << v75;
          if (v84)
          {
            v84->i16[0] = v129;
            v84->i16[1] = v130;
            float v84 = (int16x8_t *)((char *)v84 + 4);
          }
          v126 += 2;
          v127 += 32;
          int16x8_t v86 = (uint16x8_t *)((char *)v86 + 4);
          float32x4_t v85 = (uint16x8_t *)((char *)v85 + 4);
        }
        while (v7 > v126);
      }
      v78 += v166;
      v77 += v167;
      uint64_t result = (uint16x8_t *)((char *)result + v22);
      v76 += v23;
      ++v55;
    }
    while (v55 != v56);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_xf422_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    uint64_t v11 = 0;
    unint64_t v12 = *(void *)(result + 20);
    unint64_t v13 = v9 + *(void *)(result + 44);
    unint64_t v14 = v10 - v9;
    uint64_t v15 = *(void *)(result + 152);
    uint64_t v16 = *(uint64_t **)(result + 136);
    uint64_t v17 = *(void **)(result + 56);
    uint64_t v18 = **(void **)(result + 64);
    uint64_t v19 = *v16;
    uint64_t v20 = v16[1];
    uint64_t v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    float v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    float v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    float v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    float v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v15 + 152);
    float v26 = (float)LODWORD(a7);
    float v27 = *(float *)(v15 + 36);
    float v28 = *(float *)(v15 + 40);
    float v29 = *(float *)(v15 + 44);
    float v108 = *(float *)(v15 + 52) * 0.5;
    float v109 = *(float *)(v15 + 48) * 0.5;
    float v106 = *(float *)(v15 + 60) * 0.5;
    float v107 = *(float *)(v15 + 56) * 0.5;
    float v30 = *(float *)(v15 + 64) * 0.5;
    float v31 = *(float *)(v15 + 72);
    float v32 = *(float *)(v15 + 68) * 0.5;
    float v33 = *(float *)(v15 + 76);
    float v34 = *(float *)(v15 + 80);
    float v35 = *(float *)(v15 + 84);
    float v36 = *(float *)(v15 + 88);
    float v37 = *(float *)(v15 + 92);
    float v38 = *(float *)(v15 + 96);
    float v39 = *(float *)(v15 + 100);
    float v40 = *(float *)(v15 + 104);
    uint64_t v41 = v15 + 164;
    uint64_t v42 = v15 + 16548;
    uint64_t v43 = *(uint64_t **)(result + 128);
    uint64_t v44 = *(void *)(result + 112);
    unint64_t v45 = *(void *)(result + 104) * a2 / v8 + *(void *)(result + 120);
    uint64_t v46 = *(void *)(result + 36);
    unsigned int v47 = *(unsigned __int8 *)(v15 + 132);
    if (v47 >= 0x11) {
      char v48 = 0;
    }
    else {
      char v48 = 16 - v47;
    }
    uint64_t v49 = *(unsigned __int8 *)(v15 + 157);
    uint64_t result = *(unsigned __int8 *)(v15 + 156);
    uint64_t v50 = *(unsigned __int8 *)(v15 + 155);
    uint64_t v51 = *(unsigned __int8 *)(v15 + 154);
    uint64_t v52 = v43[2];
    if (v52) {
      uint64_t v53 = v52 + v45 * v21 + 2 * v44;
    }
    else {
      uint64_t v53 = 0;
    }
    uint64_t v55 = *v43;
    uint64_t v54 = v43[1];
    uint64_t v56 = v54 + v45 * v20 + 2 * v44;
    if (!v54) {
      uint64_t v56 = 0;
    }
    uint64_t v57 = v55 + v45 * v19 + 2 * v44;
    uint64_t v58 = *v17 + v18 * v13 + 16 * v46;
    float32x2_t v59 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    char v60 = v48;
    do
    {
      if (v12)
      {
        unint64_t v61 = 0;
        uint64_t v62 = v58;
        float v63 = (_WORD *)v53;
        uint64_t v64 = (_WORD *)v57;
        do
        {
          uint64_t v65 = v62 + 16;
          if (v63)
          {
            __int16 v66 = llroundf(*(float *)(v62 + 4 * v49) * 65535.0);
            __int16 v67 = llroundf(*(float *)(v65 + 4 * v49) * 65535.0);
          }
          else
          {
            __int16 v66 = 0;
            __int16 v67 = 0;
          }
          v68.i32[0] = *(_DWORD *)(v62 + 4 * v51);
          v68.i32[1] = *(_DWORD *)(v62 + 4 * v50);
          _D11 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v68, v59), 0), v59)));
          _D11.i16[0] = *(_WORD *)(v41 + 2 * _D11.u32[0]);
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v41 + 2 * _D11.u32[1]);
          __asm { FCVT            S12, H12 }
          v76.i32[0] = *(_DWORD *)(v62 + 4 * result);
          v76.i32[1] = *(_DWORD *)(v65 + 4 * v51);
          _D13 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v76, v59), 0), v59)));
          _D13.i16[0] = *(_WORD *)(v41 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v41 + 2 * _D13.u32[1]);
          __asm { FCVT            S14, H14 }
          v80.i32[0] = *(_DWORD *)(v65 + 4 * v50);
          v80.i32[1] = *(_DWORD *)(v65 + 4 * result);
          _D15 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v80, v59), 0), v59)));
          _D15.i16[0] = *(_WORD *)(v41 + 2 * _D15.u32[0]);
          __asm { FCVT            S15, H15 }
          _H16 = *(_WORD *)(v41 + 2 * _D15.u32[1]);
          __asm { FCVT            S16, H16 }
          _S17 = (float)((float)(v33 * _S12) + (float)(*(float *)_D11.i32 * v31)) + (float)(*(float *)_D13.i32 * v34);
          _S18 = (float)((float)(v36 * _S12) + (float)(*(float *)_D11.i32 * v35)) + (float)(*(float *)_D13.i32 * v37);
          *(float *)_D11.i32 = (float)((float)(v39 * _S12) + (float)(*(float *)_D11.i32 * v38))
                             + (float)(*(float *)_D13.i32 * v40);
          _S12 = (float)((float)(v33 * *(float *)_D15.i32) + (float)(_S14 * v31)) + (float)(_S16 * v34);
          *(float *)_D13.i32 = (float)((float)(v36 * *(float *)_D15.i32) + (float)(_S14 * v35)) + (float)(_S16 * v37);
          float v87 = (float)((float)(v39 * *(float *)_D15.i32) + (float)(_S14 * v38)) + (float)(_S16 * v40);
          LOWORD(_S17) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S18) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _D11.i16[0] = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(*(float *)_D11.i32, 0.0), 8191.0)));
          LOWORD(_S12) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm
          {
            FCVT            S14, H11
            FCVT            S11, H12
          }
          LOWORD(_S12) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(*(float *)_D13.i32, 0.0), 8191.0)));
          unsigned int v92 = llroundf(fminf(fmaxf(v87, 0.0), 8191.0));
          __asm { FCVT            S16, H12 }
          LOWORD(_S12) = *(_WORD *)(v42 + 2 * v92);
          __asm { FCVT            S13, H12 }
          float v95 = (float)((float)((float)(v28 * _S18) + (float)(v27 * _S17)) + (float)(v29 * _S14)) + v22;
          float v96 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S11)) + (float)(v29 * _S13)) + v22;
          if (v95 < v22) {
            float v97 = v22;
          }
          else {
            float v97 = (float)((float)((float)(v28 * _S18) + (float)(v27 * _S17)) + (float)(v29 * _S14)) + v22;
          }
          if (v95 > v24) {
            float v97 = v24;
          }
          *uint64_t v64 = llroundf(v97) << v60;
          if (v96 < v22) {
            float v98 = v22;
          }
          else {
            float v98 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S11)) + (float)(v29 * _S13)) + v22;
          }
          if (v96 > v24) {
            float v98 = v24;
          }
          v64[1] = llroundf(v98) << v60;
          float v99 = _S17 + _S11;
          float v100 = _S14 + _S13;
          float v101 = (float)((float)(v23 + (float)(v99 * v109)) + (float)((float)(_S18 + _S16) * v108))
               + (float)(v100 * v107);
          float v102 = v26;
          if (v101 <= v26)
          {
            float v102 = (float)((float)(v23 + (float)(v99 * v109)) + (float)((float)(_S18 + _S16) * v108))
                 + (float)(v100 * v107);
            if (v101 < v25) {
              float v102 = v25;
            }
          }
          float16x8_t v103 = (_WORD *)(v56 + 2 * v61);
          float v104 = (float)((float)(v23 + (float)(v99 * v106)) + (float)((float)(_S18 + _S16) * v30)) + (float)(v100 * v32);
          *float16x8_t v103 = llroundf(v102) << v60;
          float v105 = v26;
          if (v104 <= v26)
          {
            float v105 = v104;
            if (v104 < v25) {
              float v105 = v25;
            }
          }
          v103[1] = llroundf(v105) << v60;
          if (v63)
          {
            *float v63 = v66;
            v63[1] = v67;
            v63 += 2;
          }
          v62 += 32;
          v61 += 2;
          v64 += 2;
        }
        while (v12 > v61);
      }
      v58 += v18;
      v57 += v19;
      v56 += v20;
      v53 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_xf422_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGfA_rgb_xf422_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v5 = 0;
  unint64_t v6 = *(void *)(a1 + 20);
  uint64_t v117 = *(void *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 44);
  uint64_t v8 = *(void *)(a1 + 28);
  unint64_t v9 = *a1;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = v10 + v7;
  unint64_t v12 = (v8 + v8 * a2) / v9;
  uint64_t v13 = v12 + v7;
  uint64_t v14 = *((void *)a1 + 14);
  unint64_t v15 = *((void *)a1 + 13) * a2;
  uint64_t v16 = *((void *)a1 + 19);
  uint64_t v17 = *((void *)a1 + 15);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v20 = **((void **)a1 + 8);
  uint64_t v116 = **((void **)a1 + 7);
  uint64_t v21 = *v19;
  uint64_t v22 = v19[1];
  uint64_t v23 = v19[2];
  uint64_t v115 = *v18;
  uint64_t v25 = v18[1];
  uint64_t v24 = v18[2];
  unsigned int v26 = *(_DWORD *)(v16 + 136);
  int v125 = *(_DWORD *)(v16 + 154);
  unsigned int v27 = *(unsigned __int16 *)(v16 + 144);
  unsigned int v28 = *(unsigned __int8 *)(v16 + 132);
  unsigned int v29 = *(unsigned __int16 *)(v16 + 146);
  unsigned int v30 = *(unsigned __int16 *)(v16 + 148);
  unsigned int v31 = *(unsigned __int16 *)(v16 + 150);
  unsigned int v32 = *(unsigned __int16 *)(v16 + 152);
  uint64_t v33 = v15 / v9 + v17;
  uint64_t v114 = v20 * v11;
  _S0 = *(float *)(v16 + 36);
  _S1 = *(float *)(v16 + 40);
  _S2 = *(float *)(v16 + 44);
  v37.i32[0] = *(_DWORD *)(v16 + 48);
  v2.i32[0] = *(_DWORD *)(v16 + 52);
  v3.i32[0] = *(_DWORD *)(v16 + 56);
  __int32 v39 = *(_DWORD *)(v16 + 60);
  __int32 v38 = *(_DWORD *)(v16 + 64);
  __int32 v40 = *(_DWORD *)(v16 + 68);
  memset(v124, 0, sizeof(v124));
  do
  {
    unsigned int v41 = 0;
    uint64_t result = *((unsigned __int8 *)&v125 + v5);
    do
    {
      *((unsigned char *)v124 + 8 * (((_BYTE)v5 + (v41 >> 3)) & 0x1F) + v41) = result + 4 * v41;
      ++v41;
    }
    while (v41 != 8);
    ++v5;
  }
  while (v5 != 4);
  if (v12 != v10)
  {
    uint64_t v43 = 0;
    uint64_t v44 = v13 - v11;
    _S3 = (float)v26;
    float v46 = (float)v27;
    float v47 = (float)v29;
    float v48 = (float)v30;
    float v49 = (float)v31;
    float v50 = (float)v32;
    v37.i32[1] = v39;
    *(float32x2_t *)v4.f32 = vmul_f32(v37, (float32x2_t)0x3F0000003F000000);
    v2.i32[1] = v38;
    v3.i32[1] = v40;
    *(float32x2_t *)v2.f32 = vmul_f32(*(float32x2_t *)v2.f32, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)v3.f32 = vmul_f32(*(float32x2_t *)v3.f32, (float32x2_t)0x3F0000003F000000);
    __asm { FCVT            H8, S0 }
    short float v123 = _H8;
    __asm { FCVT            H8, S1 }
    float16x8_t v121 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    short float v122 = _H8;
    __asm { FCVT            H8, S2 }
    float16x8_t v120 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v2), 0);
    int16x4_t v58 = (int16x4_t)vcvt_f16_f32(v3);
    int32x4_t v59 = vdupq_lane_s32((int32x2_t)v58, 0);
    *(short float *)v58.i16 = (short float)v27;
    float16x8_t v60 = (float16x8_t)vdupq_lane_s16(v58, 0);
    *(short float *)v58.i16 = (short float)v29;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(v58, 0);
    *(short float *)v58.i16 = (short float)v30;
    int16x8_t v62 = vdupq_lane_s16(v58, 0);
    float16x8_t v118 = (float16x8_t)v62;
    float16x8_t v119 = (float16x8_t)v59;
    *(short float *)v62.i16 = (short float)v31;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v62.i8, 0);
    *(short float *)v62.i16 = (short float)v32;
    float16x8_t v64 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v62.i8, 0);
    if (v28 >= 0x11) {
      unsigned __int8 v65 = 0;
    }
    else {
      unsigned __int8 v65 = 16 - v28;
    }
    if (v24) {
      uint64_t v66 = v24 + v23 * v33 + 2 * v14;
    }
    else {
      uint64_t v66 = 0;
    }
    if (v25) {
      uint64_t v67 = v25 + v22 * v33 + 2 * v14;
    }
    else {
      uint64_t v67 = 0;
    }
    uint64_t v68 = v115 + v21 * v33 + 2 * v14;
    uint64_t result = v116 + v114 + 16 * v117;
    __asm { FCVT            H11, S3 }
    uint16x8_t v70 = (uint16x8_t)vdupq_n_s16(v65);
    uint64_t v71 = v4.i64[0];
    uint64_t v72 = v2.i64[0];
    uint64_t v73 = v3.i64[0];
    do
    {
      if ((int)v6 < 8)
      {
        unint64_t v88 = 0;
        uint64_t v87 = result;
        uint64_t v77 = (uint16x8_t *)v68;
        float32x2_t v76 = (uint16x8_t *)v67;
        unsigned __int8 v75 = (int16x8_t *)v66;
      }
      else
      {
        int v74 = 0;
        unsigned __int8 v75 = (int16x8_t *)v66;
        float32x2_t v76 = (uint16x8_t *)v67;
        uint64_t v77 = (uint16x8_t *)v68;
        uint64_t v78 = (const float *)result;
        do
        {
          uint16x8_t v79 = v78;
          float32x4x4_t v127 = vld4q_f32(v78);
          float32x2_t v80 = v78 + 16;
          float32x4x4_t v126 = vld4q_f32(v80);
          if (v75)
          {
            float32x4_t v81 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
            int16x8_t v82 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(v127.val[3], v81)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(v126.val[3], v81)));
          }
          else
          {
            int16x8_t v82 = 0uLL;
          }
          float16x8_t v83 = vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v127.val[0]), v126.val[0]), _H11);
          float16x8_t v84 = vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v127.val[1]), v126.val[1]), _H11);
          float16x8_t v85 = vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v127.val[2]), v126.val[2]), _H11);
          *v77++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v60, v83, v123), v84, v122), v85, _H8), v60), v118)), v70);
          int16x8_t v86 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v83, (int16x8_t)v84), (float16x8_t)vuzp2q_s16((int16x8_t)v83, (int16x8_t)v84));
          *v76++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v61, v121, (float16x8_t)vzip1q_s16(v86, v86)), v120, (float16x8_t)vzip2q_s16(v86, v86)), v119, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v85, (int16x8_t)v85), (float16x8_t)vtrn2q_s16((int16x8_t)v85, (int16x8_t)v85))), v63), v64)), v70);
          if (v75) {
            *v75++ = v82;
          }
          v74 += 8;
          uint64_t v78 = v79 + 32;
        }
        while (v74 < (int)v6 - 7);
        uint64_t v87 = (uint64_t)(v79 + 32);
        unint64_t v88 = v6 & 0xFFFFFFF8;
      }
      if (v6 > v88)
      {
        uint64_t v89 = v87 + 16;
        do
        {
          if (v75)
          {
            float32x4_t v90 = (float *)(v89 + 4 * HIBYTE(v125));
            float v91 = *v90;
            __int16 v92 = llroundf(*(v90 - 4) * 65535.0);
            __int16 v93 = llroundf(v91 * 65535.0);
          }
          else
          {
            __int16 v92 = 0;
            __int16 v93 = 0;
          }
          float16x8_t v94 = (float *)(v89 + 4 * v125);
          float v95 = *(v94 - 4) * _S3;
          float v96 = (float *)(v89 + 4 * BYTE1(v125));
          float v97 = *(v96 - 4) * _S3;
          float v98 = (float *)(v89 + 4 * BYTE2(v125));
          float v99 = *(v98 - 4) * _S3;
          float v100 = (float)((float)((float)(_S1 * v97) + (float)(_S0 * v95)) + (float)(_S2 * v99)) + v46;
          float v101 = v48;
          if (v100 <= v48)
          {
            float v101 = (float)((float)((float)(_S1 * v97) + (float)(_S0 * v95)) + (float)(_S2 * v99)) + v46;
            if (v100 < v46) {
              float v101 = v46;
            }
          }
          float v102 = *v94 * _S3;
          float v103 = *v96 * _S3;
          float v104 = *v98 * _S3;
          float v105 = (float)((float)((float)(_S1 * v103) + (float)(_S0 * v102)) + (float)(_S2 * v104)) + v46;
          v77->i16[0] = llroundf(v101) << v65;
          float v106 = v48;
          if (v105 <= v48)
          {
            float v106 = (float)((float)((float)(_S1 * v103) + (float)(_S0 * v102)) + (float)(_S2 * v104)) + v46;
            if (v105 < v46) {
              float v106 = v46;
            }
          }
          v77->i16[1] = llroundf(v106) << v65;
          float v107 = v95 + v102;
          float v108 = v97 + v103;
          float v109 = v99 + v104;
          float v110 = (float)((float)(v47 + (float)(v107 * *(float *)&v71)) + (float)(v108 * *(float *)&v72))
               + (float)(v109 * *(float *)&v73);
          float v111 = v50;
          if (v110 <= v50)
          {
            float v111 = (float)((float)(v47 + (float)(v107 * *(float *)&v71)) + (float)(v108 * *(float *)&v72))
                 + (float)(v109 * *(float *)&v73);
            if (v110 < v49) {
              float v111 = v49;
            }
          }
          float v112 = (float)((float)(v47 + (float)(v107 * *((float *)&v71 + 1))) + (float)(v108 * *((float *)&v72 + 1)))
               + (float)(v109 * *((float *)&v73 + 1));
          v76->i16[0] = llroundf(v111) << v65;
          float v113 = v50;
          if (v112 <= v50)
          {
            float v113 = v112;
            if (v112 < v49) {
              float v113 = v49;
            }
          }
          v76->i16[1] = llroundf(v113) << v65;
          if (v75)
          {
            v75->i16[0] = v92;
            v75->i16[1] = v93;
            unsigned __int8 v75 = (int16x8_t *)((char *)v75 + 4);
          }
          v88 += 2;
          v89 += 32;
          uint64_t v77 = (uint16x8_t *)((char *)v77 + 4);
          float32x2_t v76 = (uint16x8_t *)((char *)v76 + 4);
        }
        while (v6 > v88);
      }
      result += v20;
      v68 += v21;
      v67 += v22;
      v66 += v23;
      ++v43;
    }
    while (v43 != v44);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_xf422_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(uint64_t **)(result + 136);
    uint64_t v18 = *(void **)(result + 56);
    uint64_t v19 = **(void **)(result + 64);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    float v23 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    float v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v28 = (float)LODWORD(a8);
    float v29 = *(float *)(v16 + 36);
    float v30 = *(float *)(v16 + 40);
    float v31 = *(float *)(v16 + 44);
    float v32 = *(float *)(v16 + 48) * 0.5;
    float v33 = *(float *)(v16 + 52) * 0.5;
    float v34 = *(float *)(v16 + 56) * 0.5;
    float v35 = *(float *)(v16 + 60) * 0.5;
    float v36 = *(float *)(v16 + 64) * 0.5;
    float v37 = *(float *)(v16 + 68) * 0.5;
    uint64_t v38 = *(void **)(result + 128);
    uint64_t v39 = *(void *)(result + 112);
    unint64_t v40 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
    uint64_t v41 = *(void *)(result + 36);
    unsigned int v42 = *(unsigned __int8 *)(v16 + 132);
    if (v42 >= 0x11) {
      char v43 = 0;
    }
    else {
      char v43 = 16 - v42;
    }
    uint64_t v44 = *(unsigned __int8 *)(v16 + 157);
    uint64_t v45 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v46 = *(unsigned __int8 *)(v16 + 155);
    uint64_t result = *(unsigned __int8 *)(v16 + 154);
    uint64_t v47 = v38[2];
    if (v47) {
      uint64_t v48 = v47 + v40 * v22 + 2 * v39;
    }
    else {
      uint64_t v48 = 0;
    }
    uint64_t v51 = v38;
    uint64_t v50 = *v38;
    uint64_t v49 = v51[1];
    BOOL v52 = v49 == 0;
    uint64_t v53 = v49 + v40 * v21 + 2 * v39;
    if (v52) {
      uint64_t v53 = 0;
    }
    uint64_t v54 = v50 + v40 * v20 + 2 * v39;
    uint64_t v55 = *v18 + v19 * v14 + 16 * v41;
    char v56 = v43;
    do
    {
      if (v13)
      {
        unint64_t v57 = 0;
        uint64_t v58 = v55;
        int32x4_t v59 = (_WORD *)v48;
        float16x8_t v60 = (_WORD *)v54;
        do
        {
          uint64_t v61 = v58 + 16;
          if (v59)
          {
            __int16 v62 = llroundf(*(float *)(v58 + 4 * v44) * 65535.0);
            __int16 v63 = llroundf(*(float *)(v61 + 4 * v44) * 65535.0);
          }
          else
          {
            __int16 v62 = 0;
            __int16 v63 = 0;
          }
          float v64 = *(float *)(v58 + 4 * result) * v23;
          float v65 = *(float *)(v58 + 4 * v46) * v23;
          float v66 = *(float *)(v58 + 4 * v45) * v23;
          float v67 = (float)((float)((float)(v30 * v65) + (float)(v29 * v64)) + (float)(v31 * v66)) + v24;
          float v68 = v26;
          if (v67 <= v26)
          {
            float v68 = (float)((float)((float)(v30 * v65) + (float)(v29 * v64)) + (float)(v31 * v66)) + v24;
            if (v67 < v24) {
              float v68 = v24;
            }
          }
          float v69 = *(float *)(v61 + 4 * result) * v23;
          float v70 = *(float *)(v61 + 4 * v46) * v23;
          float v71 = *(float *)(v61 + 4 * v45) * v23;
          float v72 = (float)((float)((float)(v30 * v70) + (float)(v29 * v69)) + (float)(v31 * v71)) + v24;
          *float16x8_t v60 = llroundf(v68) << v56;
          float v73 = v26;
          if (v72 <= v26)
          {
            float v73 = (float)((float)((float)(v30 * v70) + (float)(v29 * v69)) + (float)(v31 * v71)) + v24;
            if (v72 < v24) {
              float v73 = v24;
            }
          }
          v60[1] = llroundf(v73) << v56;
          float v74 = v64 + v69;
          float v75 = v65 + v70;
          float v76 = v66 + v71;
          float v77 = (float)((float)(v25 + (float)(v74 * v32)) + (float)(v75 * v33)) + (float)(v76 * v34);
          float v78 = v28;
          if (v77 <= v28)
          {
            float v78 = (float)((float)(v25 + (float)(v74 * v32)) + (float)(v75 * v33)) + (float)(v76 * v34);
            if (v77 < v27) {
              float v78 = v27;
            }
          }
          uint16x8_t v79 = (_WORD *)(v53 + 2 * v57);
          float v80 = (float)((float)(v25 + (float)(v74 * v35)) + (float)(v75 * v36)) + (float)(v76 * v37);
          *uint16x8_t v79 = llroundf(v78) << v56;
          float v81 = v28;
          if (v80 <= v28)
          {
            float v81 = v80;
            if (v80 < v27) {
              float v81 = v27;
            }
          }
          v79[1] = llroundf(v81) << v56;
          if (v59)
          {
            *int32x4_t v59 = v62;
            v59[1] = v63;
            v59 += 2;
          }
          v58 += 32;
          v57 += 2;
          v60 += 2;
        }
        while (v13 > v57);
      }
      v55 += v19;
      v54 += v20;
      v53 += v21;
      v48 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_TRC_Tone_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, float a3, float a4)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = *result;
  unint64_t v6 = v4 * a2 / v5;
  uint64_t v7 = *((void *)result + 14);
  uint64_t v8 = (void *)*((void *)result + 16);
  unint64_t v9 = *((void *)result + 13) * a2 / v5 + *((void *)result + 15);
  int64x2_t v10 = (uint64_t *)*((void *)result + 17);
  unint64_t v11 = (v4 + v4 * a2) / v5;
  int64x2_t v12 = (_WORD *)v8[1];
  if (v12) {
    int64x2_t v12 = (_WORD *)((char *)v12 + 2 * v7 + v10[1] * v9);
  }
  if (v11 != v6)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(result + 44);
    uint64_t v15 = v6 + v14;
    uint64_t v16 = **((void **)result + 8);
    uint64_t v17 = *v10;
    uint64_t v18 = *((void *)result + 19);
    uint64_t v19 = *v8 + v17 * v9;
    unint64_t v20 = *(void *)(result + 20);
    uint64_t v21 = v11 + v14;
    uint64_t v22 = **((void **)result + 7) + v16 * v15 + 16 * *(void *)(result + 36);
    uint64_t v23 = (_WORD *)(v19 + 2 * v7);
    uint64_t v24 = v21 - v15;
    LOWORD(a3) = *(_WORD *)(v18 + 144);
    float v25 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v18 + 146);
    float v26 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v18 + 148);
    float v27 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v18 + 150);
    float v28 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v18 + 152);
    float v29 = (float)LODWORD(a4);
    float v31 = *(float *)(v18 + 36);
    float v30 = *(float *)(v18 + 40);
    float v32 = *(float *)(v18 + 44);
    float v132 = *(float *)(v18 + 48) * 0.5;
    float v133 = v26;
    float v130 = *(float *)(v18 + 56) * 0.5;
    float v131 = *(float *)(v18 + 52) * 0.5;
    float v128 = *(float *)(v18 + 64) * 0.5;
    float v129 = *(float *)(v18 + 60) * 0.5;
    float v126 = *(float *)(v18 + 68) * 0.5;
    float v127 = *(float *)(v18 + 72);
    float v33 = *(float *)(v18 + 80);
    float v125 = *(float *)(v18 + 76);
    float v34 = *(float *)(v18 + 84);
    float v35 = *(float *)(v18 + 88);
    float v36 = *(float *)(v18 + 92);
    float v37 = *(float *)(v18 + 96);
    float v38 = *(float *)(v18 + 100);
    float v39 = *(float *)(v18 + 104);
    uint64_t v40 = v18 + 164;
    uint64_t v41 = v18 + 16548;
    uint64_t result = (unsigned __int8 *)(v18 + 32932);
    float v43 = *(float *)(v18 + 108);
    float v42 = *(float *)(v18 + 112);
    float v44 = *(float *)(v18 + 116);
    float v45 = *(float *)(v18 + 120);
    uint64_t v46 = *(unsigned __int8 *)(v18 + 157);
    uint64_t v47 = *(unsigned __int8 *)(v18 + 156);
    uint64_t v48 = *(unsigned __int8 *)(v18 + 155);
    float32x2_t v49 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v50 = *(unsigned __int8 *)(v18 + 154);
    do
    {
      if (v20)
      {
        unint64_t v51 = 0;
        BOOL v52 = v12;
        uint64_t v53 = v23;
        uint64_t v54 = v22;
        do
        {
          float v55 = v32;
          float v56 = v30;
          float v57 = v31;
          v58.i32[0] = *(_DWORD *)(v54 + 4 * v50);
          v58.i32[1] = *(_DWORD *)(v54 + 4 * v48);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v58, v49), 0), v49)));
          uint64_t v60 = v54 + 16;
          _D1.i16[0] = *(_WORD *)(v40 + 2 * _D1.u32[0]);
          __asm { FCVT            S15, H1 }
          _D1.i16[0] = *(_WORD *)(v40 + 2 * _D1.u32[1]);
          v66.i32[0] = *(_DWORD *)(v54 + 4 * v47);
          v66.i32[1] = *(_DWORD *)(v54 + 16 + 4 * v50);
          __asm { FCVT            S16, H1 }
          int32x2_t v68 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v66, v49), 0), v49)));
          _D1.i16[0] = *(_WORD *)(v40 + 2 * v68.u32[0]);
          __asm { FCVT            S17, H1 }
          float v70 = fmaxf(_S15, fmaxf(_S16, _S17));
          float v71 = (float)((float)((float)(v42 * _S16) + (float)(v43 * _S15)) + (float)(v44 * _S17)) + (float)(v45 * v70);
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = (float)((float)((float)(v42 * _S16) + (float)(v43 * _S15)) + (float)(v44 * _S17)) + (float)(v45 * v70);
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          _H18 = *(_WORD *)(v40 + 2 * v68.u32[1]);
          __asm { FCVT            S19, H18 }
          v75.i32[0] = *(_DWORD *)(v60 + 4 * v48);
          v75.i32[1] = *(_DWORD *)(v60 + 4 * v47);
          _D18 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v75, v49), 0), v49)));
          _D18.i16[0] = *(_WORD *)(v40 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v40 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          float v79 = (float)((float)((float)(v42 * _S20) + (float)(v43 * _S19)) + (float)(v44 * _S22))
              + (float)(v45 * fmaxf(_S19, fmaxf(_S20, _S22)));
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          if (v52)
          {
            float v81 = *(float *)(v60 + 4 * v46);
            __int16 v82 = llroundf(*(float *)(v54 + 4 * v46) * 65535.0);
            __int16 v83 = llroundf(v81 * 65535.0);
          }
          else
          {
            __int16 v82 = 0;
            __int16 v83 = 0;
          }
          float v31 = v57;
          float v30 = v56;
          float v32 = v55;
          _H1 = *(_WORD *)(v41 + 2 * llroundf(v72));
          __asm { FCVT            S1, H1 }
          float v86 = _S15 * _S1;
          float v87 = _S16 * _S1;
          float v88 = _S17 * _S1;
          _H16 = *(_WORD *)(v41 + 2 * llroundf(v80));
          __asm { FCVT            S16, H16 }
          float v91 = _S19 * _S16;
          _S18 = _S20 * _S16;
          _S16 = _S22 * _S16;
          float v94 = (float)((float)(v125 * v87) + (float)(v86 * v127)) + (float)(v88 * v33);
          float v95 = (float)((float)(v35 * v87) + (float)(v86 * v34)) + (float)(v88 * v36);
          float v96 = (float)((float)(v38 * v87) + (float)(v86 * v37)) + (float)(v88 * v39);
          float v97 = (float)(v125 * _S18) + (float)(v91 * v127);
          float v98 = (float)(v35 * _S18) + (float)(v91 * v34);
          float v99 = (float)(v38 * _S18) + (float)(v91 * v37);
          _S5 = v97 + (float)(_S16 * v33);
          float v101 = v98 + (float)(_S16 * v36);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0))];
          float v102 = v99 + (float)(_S16 * v39);
          __asm { FCVT            S18, H18 }
          LOWORD(_S16) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0))];
          unsigned int v104 = llroundf(fminf(fmaxf(v96, 0.0), 8191.0));
          __asm { FCVT            S1, H16 }
          LOWORD(_S16) = *(_WORD *)&result[2 * v104];
          __asm { FCVT            S20, H16 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
          __asm { FCVT            S16, H5 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0))];
          __asm { FCVT            S17, H5 }
          float v109 = (float)(v30 * _S1) + (float)(v31 * _S18);
          _S6 = _S18 + _S16;
          float v111 = _S1 + _S17;
          float v112 = (float)(v133 + (float)((float)(_S18 + _S16) * v132)) + (float)(v111 * v131);
          float v113 = (float)(v133 + (float)(_S6 * v129)) + (float)(v111 * v128);
          LOWORD(_S6) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0))];
          __asm { FCVT            S19, H6 }
          float v115 = v109 + (float)(v55 * _S20);
          float v116 = v112 + (float)((float)(_S20 + _S19) * v130);
          float v117 = v113 + (float)((float)(_S20 + _S19) * v126);
          if (v116 < v25) {
            float v118 = v25;
          }
          else {
            float v118 = v116;
          }
          float v119 = v115 + v25;
          if (v116 > v27) {
            float v118 = v27;
          }
          __int16 v120 = llroundf(v118);
          if (v119 < v28) {
            float v121 = v28;
          }
          else {
            float v121 = v119;
          }
          *uint64_t v53 = v120;
          if (v119 > v29) {
            float v121 = v29;
          }
          v53[1] = llroundf(v121);
          float v122 = v27;
          if (v117 <= v27)
          {
            float v122 = v117;
            if (v117 < v25) {
              float v122 = v25;
            }
          }
          float v123 = (float)((float)((float)(v30 * _S17) + (float)(v31 * _S16)) + (float)(v55 * _S19)) + v25;
          v53[2] = llroundf(v122);
          float v124 = v29;
          if (v123 <= v29)
          {
            float v124 = v123;
            if (v123 < v28) {
              float v124 = v28;
            }
          }
          v53[3] = llroundf(v124);
          if (v52)
          {
            *BOOL v52 = v82;
            v52[1] = v83;
            v52 += 2;
          }
          v54 += 32;
          v51 += 2;
          v53 += 4;
        }
        while (v20 > v51);
      }
      v22 += v16;
      uint64_t v23 = (_WORD *)((char *)v23 + v17);
      ++v13;
    }
    while (v13 != v24);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_v216_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_v216_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  uint64_t v10 = *(void *)(result + 112);
  int64x2_t v11 = *(void **)(result + 128);
  unint64_t v12 = *(void *)(result + 104) * a2 / v8 + *(void *)(result + 120);
  int64x2_t v13 = *(uint64_t **)(result + 136);
  unint64_t v14 = (v7 + v7 * a2) / v8;
  uint64_t v15 = (_WORD *)v11[1];
  if (v15) {
    uint64_t v15 = (_WORD *)((char *)v15 + 2 * v10 + v13[1] * v12);
  }
  if (v14 != v9)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(result + 44);
    uint64_t v18 = v9 + v17;
    uint64_t v19 = **(void **)(result + 64);
    uint64_t v20 = *v13;
    uint64_t v21 = *(void *)(result + 152);
    uint64_t v22 = *v11 + v20 * v12;
    unint64_t v23 = *(void *)(result + 20);
    uint64_t v24 = v14 + v17;
    uint64_t v25 = **(void **)(result + 56) + v19 * v18 + 16 * *(void *)(result + 36);
    uint64_t v26 = (_WORD *)(v22 + 2 * v10);
    uint64_t v27 = v24 - v18;
    LOWORD(a3) = *(_WORD *)(v21 + 144);
    float v28 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v21 + 146);
    float v29 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v21 + 148);
    float v30 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v21 + 150);
    float v31 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v21 + 152);
    float v32 = (float)LODWORD(a7);
    float v33 = *(float *)(v21 + 36);
    float v34 = *(float *)(v21 + 40);
    float v35 = *(float *)(v21 + 44);
    float v103 = *(float *)(v21 + 52) * 0.5;
    float v104 = *(float *)(v21 + 48) * 0.5;
    float v102 = *(float *)(v21 + 56) * 0.5;
    float v36 = *(float *)(v21 + 60) * 0.5;
    float v37 = *(float *)(v21 + 64) * 0.5;
    float v38 = *(float *)(v21 + 72);
    float v39 = *(float *)(v21 + 68) * 0.5;
    float v40 = *(float *)(v21 + 76);
    float v41 = *(float *)(v21 + 80);
    float v42 = *(float *)(v21 + 84);
    float v43 = *(float *)(v21 + 88);
    float v44 = *(float *)(v21 + 92);
    float v45 = *(float *)(v21 + 96);
    float v46 = *(float *)(v21 + 100);
    float v47 = *(float *)(v21 + 104);
    uint64_t v48 = v21 + 164;
    uint64_t v49 = v21 + 16548;
    uint64_t result = *(unsigned __int8 *)(v21 + 157);
    uint64_t v50 = *(unsigned __int8 *)(v21 + 156);
    uint64_t v51 = *(unsigned __int8 *)(v21 + 155);
    float32x2_t v52 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v53 = *(unsigned __int8 *)(v21 + 154);
    do
    {
      if (v23)
      {
        unint64_t v54 = 0;
        uint64_t v55 = v25;
        float v56 = v15;
        float v57 = v26;
        do
        {
          uint64_t v58 = v55 + 16;
          if (v56)
          {
            __int16 v59 = llroundf(*(float *)(v55 + 4 * result) * 65535.0);
            __int16 v60 = llroundf(*(float *)(v58 + 4 * result) * 65535.0);
          }
          else
          {
            __int16 v59 = 0;
            __int16 v60 = 0;
          }
          v61.i32[0] = *(_DWORD *)(v55 + 4 * v53);
          v61.i32[1] = *(_DWORD *)(v55 + 4 * v51);
          _D11 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v61, v52), 0), v52)));
          _D11.i16[0] = *(_WORD *)(v48 + 2 * _D11.u32[0]);
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v48 + 2 * _D11.u32[1]);
          __asm { FCVT            S12, H12 }
          v69.i32[0] = *(_DWORD *)(v55 + 4 * v50);
          v69.i32[1] = *(_DWORD *)(v58 + 4 * v53);
          _D13 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v69, v52), 0), v52)));
          _D13.i16[0] = *(_WORD *)(v48 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _H14 = *(_WORD *)(v48 + 2 * _D13.u32[1]);
          __asm { FCVT            S14, H14 }
          v73.i32[0] = *(_DWORD *)(v58 + 4 * v51);
          v73.i32[1] = *(_DWORD *)(v58 + 4 * v50);
          _D15 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v73, v52), 0), v52)));
          _D15.i16[0] = *(_WORD *)(v48 + 2 * _D15.u32[0]);
          __asm { FCVT            S15, H15 }
          _S16 = (float)((float)(v40 * _S12) + (float)(*(float *)_D11.i32 * v38)) + (float)(*(float *)_D13.i32 * v41);
          _S17 = (float)((float)(v43 * _S12) + (float)(*(float *)_D11.i32 * v42)) + (float)(*(float *)_D13.i32 * v44);
          *(float *)_D11.i32 = (float)((float)(v46 * _S12) + (float)(*(float *)_D11.i32 * v45))
                             + (float)(*(float *)_D13.i32 * v47);
          float v77 = (float)(v40 * *(float *)_D15.i32) + (float)(_S14 * v38);
          *(float *)_D13.i32 = (float)(v43 * *(float *)_D15.i32) + (float)(_S14 * v42);
          float v78 = (float)(v46 * *(float *)_D15.i32) + (float)(_S14 * v45);
          _D15.i16[0] = *(_WORD *)(v48 + 2 * _D15.u32[1]);
          __asm { FCVT            S15, H15 }
          _S12 = v77 + (float)(*(float *)_D15.i32 * v41);
          *(float *)_D13.i32 = *(float *)_D13.i32 + (float)(*(float *)_D15.i32 * v44);
          LOWORD(_S16) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          float v80 = v78 + (float)(*(float *)_D15.i32 * v47);
          __asm { FCVT            S16, H16 }
          LOWORD(_S17) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _D11.i16[0] = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(*(float *)_D11.i32, 0.0), 8191.0)));
          __asm { FCVT            S15, H11 }
          _D11.i16[0] = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          LOWORD(_S12) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(*(float *)_D13.i32, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          unsigned int v85 = llroundf(fminf(fmaxf(v80, 0.0), 8191.0));
          float v86 = (float)(v34 * _S17) + (float)(v33 * _S16);
          float v87 = _S16 + _S11;
          _S17 = _S17 + _S12;
          float v89 = (float)(v29 + (float)(v87 * v104)) + (float)(_S17 * v103);
          float v90 = (float)(v29 + (float)(v87 * v36)) + (float)(_S17 * v37);
          LOWORD(_S17) = *(_WORD *)(v49 + 2 * v85);
          __asm { FCVT            S13, H17 }
          float v92 = v86 + (float)(v35 * *(float *)_D15.i32);
          float v93 = v89 + (float)((float)(*(float *)_D15.i32 + _S13) * v102);
          float v94 = v90 + (float)((float)(*(float *)_D15.i32 + _S13) * v39);
          if (v93 < v28) {
            float v95 = v28;
          }
          else {
            float v95 = v93;
          }
          float v96 = v92 + v28;
          if (v93 > v30) {
            float v95 = v30;
          }
          __int16 v97 = llroundf(v95);
          if (v96 < v31) {
            float v98 = v31;
          }
          else {
            float v98 = v96;
          }
          *float v57 = v97;
          if (v96 > v32) {
            float v98 = v32;
          }
          v57[1] = llroundf(v98);
          float v99 = v30;
          if (v94 <= v30)
          {
            float v99 = v94;
            if (v94 < v28) {
              float v99 = v28;
            }
          }
          float v100 = (float)((float)((float)(v34 * _S12) + (float)(v33 * _S11)) + (float)(v35 * _S13)) + v28;
          v57[2] = llroundf(v99);
          float v101 = v32;
          if (v100 <= v32)
          {
            float v101 = v100;
            if (v100 < v31) {
              float v101 = v31;
            }
          }
          v57[3] = llroundf(v101);
          if (v56)
          {
            *float v56 = v59;
            v56[1] = v60;
            v56 += 2;
          }
          v55 += 32;
          v54 += 2;
          v57 += 4;
        }
        while (v23 > v54);
      }
      v25 += v19;
      uint64_t v26 = (_WORD *)((char *)v26 + v20);
      ++v16;
    }
    while (v16 != v27);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_v216_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_v216_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = *(void *)(result + 112);
  int64x2_t v12 = *(void **)(result + 128);
  unint64_t v13 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
  unint64_t v14 = *(uint64_t **)(result + 136);
  unint64_t v15 = (v8 + v8 * a2) / v9;
  uint64_t v16 = (_WORD *)v12[1];
  if (v16) {
    uint64_t v16 = (_WORD *)((char *)v16 + 2 * v11 + v14[1] * v13);
  }
  if (v15 != v10)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(result + 44);
    uint64_t v19 = v10 + v18;
    uint64_t v20 = **(void **)(result + 64);
    uint64_t v21 = *v14;
    uint64_t v22 = *v12 + v21 * v13;
    uint64_t v23 = *(void *)(result + 152);
    unint64_t v24 = *(void *)(result + 20);
    uint64_t v25 = v15 + v18;
    uint64_t v26 = **(void **)(result + 56) + v20 * v19 + 16 * *(void *)(result + 36);
    uint64_t v27 = (_WORD *)(v22 + 2 * v11);
    uint64_t v28 = v25 - v19;
    float v29 = (float)*(unsigned int *)(v23 + 136);
    LOWORD(a4) = *(_WORD *)(v23 + 144);
    float v30 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    float v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    float v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    float v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    float v34 = (float)LODWORD(a8);
    float v35 = *(float *)(v23 + 36);
    float v36 = *(float *)(v23 + 40);
    float v37 = *(float *)(v23 + 44);
    float v38 = *(float *)(v23 + 48) * 0.5;
    float v39 = *(float *)(v23 + 52) * 0.5;
    float v40 = *(float *)(v23 + 56) * 0.5;
    float v41 = *(float *)(v23 + 60) * 0.5;
    float v42 = *(float *)(v23 + 64) * 0.5;
    float v43 = *(float *)(v23 + 68) * 0.5;
    uint64_t v44 = *(unsigned __int8 *)(v23 + 157);
    uint64_t v45 = *(unsigned __int8 *)(v23 + 156);
    uint64_t result = *(unsigned __int8 *)(v23 + 155);
    uint64_t v46 = *(unsigned __int8 *)(v23 + 154);
    do
    {
      if (v24)
      {
        unint64_t v47 = 0;
        uint64_t v48 = v26;
        uint64_t v49 = v16;
        uint64_t v50 = v27;
        do
        {
          uint64_t v51 = v48 + 16;
          if (v49)
          {
            __int16 v52 = llroundf(*(float *)(v48 + 4 * v44) * 65535.0);
            __int16 v53 = llroundf(*(float *)(v51 + 4 * v44) * 65535.0);
          }
          else
          {
            __int16 v52 = 0;
            __int16 v53 = 0;
          }
          float v54 = *(float *)(v48 + 4 * v46) * v29;
          float v55 = *(float *)(v48 + 4 * result) * v29;
          float v56 = *(float *)(v48 + 4 * v45) * v29;
          float v57 = *(float *)(v51 + 4 * v46) * v29;
          float v58 = *(float *)(v51 + 4 * result) * v29;
          float v59 = *(float *)(v51 + 4 * v45) * v29;
          float v60 = (float)((float)((float)(v36 * v55) + (float)(v35 * v54)) + (float)(v37 * v56)) + v30;
          float v61 = v54 + v57;
          float v62 = v55 + v58;
          float v63 = v56 + v59;
          float v64 = (float)((float)(v31 + (float)(v61 * v38)) + (float)(v62 * v39)) + (float)(v63 * v40);
          float v65 = (float)((float)(v31 + (float)(v61 * v41)) + (float)(v62 * v42)) + (float)(v63 * v43);
          if (v64 < v30) {
            float v66 = v30;
          }
          else {
            float v66 = v64;
          }
          if (v64 > v32) {
            float v66 = v32;
          }
          *uint64_t v50 = llroundf(v66);
          if (v60 < v33) {
            float v67 = v33;
          }
          else {
            float v67 = v60;
          }
          if (v60 > v34) {
            float v67 = v34;
          }
          v50[1] = llroundf(v67);
          float v68 = v32;
          if (v65 <= v32)
          {
            float v68 = v65;
            if (v65 < v30) {
              float v68 = v30;
            }
          }
          float v69 = (float)((float)((float)(v36 * v58) + (float)(v35 * v57)) + (float)(v37 * v59)) + v30;
          v50[2] = llroundf(v68);
          float v70 = v34;
          if (v69 <= v34)
          {
            float v70 = v69;
            if (v69 < v33) {
              float v70 = v33;
            }
          }
          v50[3] = llroundf(v70);
          if (v49)
          {
            *uint64_t v49 = v52;
            v49[1] = v53;
            v49 += 2;
          }
          v48 += 32;
          v47 += 2;
          v50 += 4;
        }
        while (v24 > v47);
      }
      v26 += v20;
      uint64_t v27 = (_WORD *)((char *)v27 + v21);
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_444vf_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

int8x8_t *vt_Copy_RGfA_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, int16x4_t _D3)
{
  uint64_t v6 = 0;
  unint64_t v7 = *(void *)(a1 + 20);
  uint64_t v158 = *(void *)(a1 + 36);
  uint64_t v8 = *(void *)(a1 + 44);
  uint64_t v9 = *(void *)(a1 + 28);
  unint64_t v10 = *a1;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = v11 + v8;
  unint64_t v13 = (v9 + v9 * a2) / v10;
  uint64_t v14 = v13 + v8;
  uint64_t v15 = *((void *)a1 + 14);
  uint64_t v16 = *((void *)a1 + 19);
  uint64_t v18 = *((void *)a1 + 15);
  uint64_t v17 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v20 = **((void **)a1 + 8);
  unint64_t v21 = *((void *)a1 + 13) * a2;
  uint64_t v157 = **((void **)a1 + 7);
  uint64_t v22 = v19[1];
  uint64_t v162 = *v19;
  uint64_t v23 = v19[2];
  uint64_t v25 = *v17;
  uint64_t v24 = v17[1];
  uint64_t result = (int8x8_t *)v17[2];
  int v199 = *(_DWORD *)(v16 + 154);
  unsigned int v27 = *(unsigned __int16 *)(v16 + 144);
  unsigned int v28 = *(unsigned __int16 *)(v16 + 146);
  unsigned int v29 = *(unsigned __int16 *)(v16 + 148);
  unsigned int v30 = *(unsigned __int16 *)(v16 + 150);
  unsigned int v31 = *(unsigned __int16 *)(v16 + 152);
  _S13 = *(float *)(v16 + 36);
  _S14 = *(float *)(v16 + 40);
  _S15 = *(float *)(v16 + 44);
  float v173 = *(float *)(v16 + 52);
  float v174 = *(float *)(v16 + 48);
  float v171 = *(float *)(v16 + 60);
  float v172 = *(float *)(v16 + 56);
  float v169 = *(float *)(v16 + 68);
  float v170 = *(float *)(v16 + 64);
  float v197 = *(float *)(v16 + 72);
  float v196 = *(float *)(v16 + 76);
  float v195 = *(float *)(v16 + 80);
  float v194 = *(float *)(v16 + 84);
  float v193 = *(float *)(v16 + 88);
  uint64_t v35 = v21 / v10 + v18;
  uint64_t v36 = v20 * v12;
  float v192 = *(float *)(v16 + 92);
  float v191 = *(float *)(v16 + 96);
  float v190 = *(float *)(v16 + 100);
  float v189 = *(float *)(v16 + 104);
  float v188 = *(float *)(v16 + 108);
  float v187 = *(float *)(v16 + 112);
  float v186 = *(float *)(v16 + 116);
  float v185 = *(float *)(v16 + 120);
  memset(v198, 0, sizeof(v198));
  do
  {
    unsigned int v37 = 0;
    char v38 = *((unsigned char *)&v199 + v6);
    do
    {
      *((unsigned char *)v198 + 8 * (((_BYTE)v6 + (v37 >> 3)) & 0x1F) + v37) = v38 + 4 * v37;
      ++v37;
    }
    while (v37 != 8);
    ++v6;
  }
  while (v6 != 4);
  if (v13 != v11)
  {
    uint64_t v39 = 0;
    float v40 = (float)v27;
    float v41 = (float)v28;
    __asm { FCVT            H0, S13 }
    short float v184 = _H0;
    float v47 = (float)v29;
    __asm { FCVT            H0, S14 }
    short float v183 = _H0;
    float v175 = (float)v30;
    float v49 = (float)v31;
    uint64_t v50 = v14 - v12;
    __asm { FCVT            H0, S15 }
    short float v182 = _H0;
    _S0 = v174;
    __asm { FCVT            H0, S0 }
    short float v168 = *(short float *)&_S0;
    uint64_t v53 = v16 + 16548;
    uint64_t v54 = v16 + 32932;
    uint64_t v55 = v16 + 164;
    _S0 = v173;
    __asm { FCVT            H0, S0 }
    short float v167 = *(short float *)&_S0;
    _S0 = v172;
    __asm { FCVT            H0, S0 }
    short float v166 = *(short float *)&_S0;
    _S0 = v171;
    __asm { FCVT            H0, S0 }
    short float v165 = *(short float *)&_S0;
    _S0 = v170;
    __asm { FCVT            H0, S0 }
    short float v164 = *(short float *)&_S0;
    _S0 = v169;
    __asm { FCVT            H0, S0 }
    short float v163 = *(short float *)&_S0;
    _S0 = v188;
    __asm { FCVT            H0, S0 }
    short float v181 = *(short float *)&_S0;
    _S0 = v187;
    __asm { FCVT            H0, S0 }
    short float v180 = *(short float *)&_S0;
    _S0 = v186;
    __asm { FCVT            H0, S0 }
    short float v179 = *(short float *)&_S0;
    _S0 = v185;
    __asm { FCVT            H7, S0 }
    _S0 = v197;
    __asm { FCVT            H0, S0 }
    short float v178 = *(short float *)&_S0;
    _S0 = v196;
    __asm { FCVT            H0, S0 }
    short float v177 = *(short float *)&_S0;
    _S0 = v195;
    __asm { FCVT            H0, S0 }
    short float v176 = *(short float *)&_S0;
    _S0 = v194;
    __asm { FCVT            H0, S0 }
    _S1 = v193;
    __asm { FCVT            H1, S1 }
    _S2 = v192;
    __asm { FCVT            H2, S2 }
    *(float *)_D3.i32 = v191;
    __asm { FCVT            H11, S3 }
    *(float *)_D3.i32 = v190;
    __asm { FCVT            H8, S3 }
    *(short float *)_D3.i16 = (short float)v27;
    float16x8_t v77 = (float16x8_t)vdupq_lane_s16(_D3, 0);
    *(short float *)_D3.i16 = (short float)v28;
    float16x8_t v78 = (float16x8_t)vdupq_lane_s16(_D3, 0);
    *(short float *)_D3.i16 = (short float)v29;
    float16x8_t v79 = (float16x8_t)vdupq_lane_s16(_D3, 0);
    if (_ZF) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = (int8x8_t *)((char *)result + v23 * v35 + v15);
    }
    if (v24) {
      float v80 = (char *)(v24 + v22 * v35 + v15);
    }
    else {
      float v80 = 0;
    }
    *(short float *)_D3.i16 = (short float)v30;
    float16x8_t v81 = (float16x8_t)vdupq_lane_s16(_D3, 0);
    *(float *)_D3.i32 = v189;
    __asm { FCVT            H10, S3 }
    __int16 v83 = (int8x8_t *)(v25 + v162 * v35 + v15);
    *(short float *)_D3.i16 = (short float)v31;
    float16x8_t v84 = (float16x8_t)vdupq_lane_s16(_D3, 0);
    uint64_t v85 = v157 + v36 + 16 * v158;
    v86.i64[0] = 0x7000700070007000;
    v86.i64[1] = 0x7000700070007000;
    v87.i64[0] = 0x9000900090009000;
    v87.i64[1] = 0x9000900090009000;
    float v160 = _S14;
    float v161 = _S13;
    float v159 = _S15;
    do
    {
      if ((int)v7 < 8)
      {
        unint64_t v129 = 0;
        uint64_t v128 = v85;
        float v91 = v83;
        float v90 = v80;
        float v89 = result;
      }
      else
      {
        int v88 = 0;
        float v89 = result;
        float v90 = v80;
        float v91 = v83;
        float v92 = (const float *)v85;
        do
        {
          float v93 = v92;
          float32x4x4_t v201 = vld4q_f32(v92);
          float v94 = v92 + 16;
          float32x4x4_t v202 = vld4q_f32(v94);
          if (v89) {
            int8x8_t v95 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v201.val[3]), v202.val[3]), (float16x8_t)vdupq_n_s16(0x5BF8u))));
          }
          else {
            int8x8_t v95 = 0;
          }
          float16x8_t v96 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v201.val[1]), v202.val[1]);
          uint16x8_t v97 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v201.val[0]), v202.val[0]), v86), (float16x8_t)0), v87));
          uint32x4_t v98 = vmovl_high_u16(v97);
          uint32x4_t v99 = vmovl_u16(*(uint16x4_t *)v97.i8);
          v100.i16[0] = *(_WORD *)(v55 + 2 * v99.u32[0]);
          v100.i16[1] = *(_WORD *)(v55 + 2 * v99.u32[1]);
          v100.i16[2] = *(_WORD *)(v55 + 2 * v99.u32[2]);
          v100.i16[3] = *(_WORD *)(v55 + 2 * v99.u32[3]);
          v100.i16[4] = *(_WORD *)(v55 + 2 * v98.u32[0]);
          v100.i16[5] = *(_WORD *)(v55 + 2 * v98.u32[1]);
          v100.i16[6] = *(_WORD *)(v55 + 2 * v98.u32[2]);
          v100.i16[7] = *(_WORD *)(v55 + 2 * v98.u32[3]);
          uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v96, v86), (float16x8_t)0), v87));
          uint32x4_t v102 = vmovl_high_u16(v101);
          uint32x4_t v103 = vmovl_u16(*(uint16x4_t *)v101.i8);
          v96.i16[0] = *(_WORD *)(v55 + 2 * v103.u32[0]);
          v96.i16[1] = *(_WORD *)(v55 + 2 * v103.u32[1]);
          v96.i16[2] = *(_WORD *)(v55 + 2 * v103.u32[2]);
          v96.i16[3] = *(_WORD *)(v55 + 2 * v103.u32[3]);
          v96.i16[4] = *(_WORD *)(v55 + 2 * v102.u32[0]);
          v96.i16[5] = *(_WORD *)(v55 + 2 * v102.u32[1]);
          v96.i16[6] = *(_WORD *)(v55 + 2 * v102.u32[2]);
          v96.i16[7] = *(_WORD *)(v55 + 2 * v102.u32[3]);
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v201.val[2]), v202.val[2]), v86), (float16x8_t)0), v87));
          uint32x4_t v105 = vmovl_high_u16(v104);
          uint32x4_t v106 = vmovl_u16(*(uint16x4_t *)v104.i8);
          v107.i16[0] = *(_WORD *)(v55 + 2 * v106.u32[0]);
          v107.i16[1] = *(_WORD *)(v55 + 2 * v106.u32[1]);
          v107.i16[2] = *(_WORD *)(v55 + 2 * v106.u32[2]);
          v107.i16[3] = *(_WORD *)(v55 + 2 * v106.u32[3]);
          v107.i16[4] = *(_WORD *)(v55 + 2 * v105.u32[0]);
          v107.i16[5] = *(_WORD *)(v55 + 2 * v105.u32[1]);
          v107.i16[6] = *(_WORD *)(v55 + 2 * v105.u32[2]);
          v107.i16[7] = *(_WORD *)(v55 + 2 * v105.u32[3]);
          uint16x8_t v108 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v100, v181), v96, v180), v107, v179), vmaxq_f16(vmaxq_f16(v100, v96), v107), _H7), (float16x8_t)0), v87));
          uint32x4_t v109 = vmovl_high_u16(v108);
          float16x8_t v110 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v108.i8);
          v110.i16[0] = *(_WORD *)(v53 + 2 * v110.u32[0]);
          v110.i16[1] = *(_WORD *)(v53 + 2 * v110.u32[1]);
          v110.i16[2] = *(_WORD *)(v53 + 2 * v110.u32[2]);
          v110.i16[3] = *(_WORD *)(v53 + 2 * v110.u32[3]);
          v110.i16[4] = *(_WORD *)(v53 + 2 * v109.u32[0]);
          v110.i16[5] = *(_WORD *)(v53 + 2 * v109.u32[1]);
          v110.i16[6] = *(_WORD *)(v53 + 2 * v109.u32[2]);
          v110.i16[7] = *(_WORD *)(v53 + 2 * v109.u32[3]);
          float16x8_t v111 = vmulq_f16(v100, v110);
          float16x8_t v112 = vmulq_f16(v96, v110);
          float16x8_t v113 = vmulq_f16(v107, v110);
          float16x8_t v114 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v111, _H0), v112, _H1), v113, _H2);
          float16x8_t v115 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v113, _H10), v112, _H8), v111, _H11);
          uint16x8_t v116 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v111, v178), v112, v177), v113, v176), (float16x8_t)0), v87));
          uint32x4_t v117 = vmovl_high_u16(v116);
          uint32x4_t v118 = vmovl_u16(*(uint16x4_t *)v116.i8);
          v119.i16[0] = *(_WORD *)(v54 + 2 * v118.u32[0]);
          v119.i16[1] = *(_WORD *)(v54 + 2 * v118.u32[1]);
          v119.i16[2] = *(_WORD *)(v54 + 2 * v118.u32[2]);
          v119.i16[3] = *(_WORD *)(v54 + 2 * v118.u32[3]);
          v119.i16[4] = *(_WORD *)(v54 + 2 * v117.u32[0]);
          v119.i16[5] = *(_WORD *)(v54 + 2 * v117.u32[1]);
          v119.i16[6] = *(_WORD *)(v54 + 2 * v117.u32[2]);
          v119.i16[7] = *(_WORD *)(v54 + 2 * v117.u32[3]);
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v87));
          uint32x4_t v121 = vmovl_high_u16(v120);
          uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v120.i8);
          v123.i16[0] = *(_WORD *)(v54 + 2 * v122.u32[0]);
          v123.i16[1] = *(_WORD *)(v54 + 2 * v122.u32[1]);
          v123.i16[2] = *(_WORD *)(v54 + 2 * v122.u32[2]);
          v123.i16[3] = *(_WORD *)(v54 + 2 * v122.u32[3]);
          v123.i16[4] = *(_WORD *)(v54 + 2 * v121.u32[0]);
          v123.i16[5] = *(_WORD *)(v54 + 2 * v121.u32[1]);
          v123.i16[6] = *(_WORD *)(v54 + 2 * v121.u32[2]);
          v123.i16[7] = *(_WORD *)(v54 + 2 * v121.u32[3]);
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v87));
          uint32x4_t v125 = vmovl_high_u16(v124);
          uint32x4_t v126 = vmovl_u16(*(uint16x4_t *)v124.i8);
          v127.i16[0] = *(_WORD *)(v54 + 2 * v126.u32[0]);
          v127.i16[1] = *(_WORD *)(v54 + 2 * v126.u32[1]);
          v127.i16[2] = *(_WORD *)(v54 + 2 * v126.u32[2]);
          v127.i16[3] = *(_WORD *)(v54 + 2 * v126.u32[3]);
          v127.i16[4] = *(_WORD *)(v54 + 2 * v125.u32[0]);
          v127.i16[5] = *(_WORD *)(v54 + 2 * v125.u32[1]);
          v127.i16[6] = *(_WORD *)(v54 + 2 * v125.u32[2]);
          v127.i16[7] = *(_WORD *)(v54 + 2 * v125.u32[3]);
          *v91++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v77, v119, v184), v123, v183), v127, v182), v77), v79)));
          if (v90)
          {
            v200.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v78, v119, v168), v123, v167), v127, v166), v81), v84), v81), v84)));
            v200.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v78, v119, v165), v123, v164), v127, v163)));
            vst2_s8(v90, v200);
            v90 += 16;
          }
          if (v89) {
            *v89++ = v95;
          }
          v88 += 8;
          float v92 = v93 + 32;
        }
        while (v88 < (int)v7 - 7);
        uint64_t v128 = (uint64_t)(v93 + 32);
        unint64_t v129 = v7 & 0xFFFFFFF8;
        _S14 = v160;
        _S13 = v161;
        _S15 = v159;
      }
      _CF = v7 >= v129;
      unint64_t v130 = v7 - v129;
      if (v130 != 0 && _CF)
      {
        do
        {
          _D4.i32[0] = *(_DWORD *)(v128 + 4 * v199);
          _D4.i32[1] = *(_DWORD *)(v128 + 4 * BYTE1(v199));
          _D5 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D4, _D5), 0), _D5)));
          _D3.i16[0] = *(_WORD *)(v55 + 2 * _D3.u32[0]);
          __asm { FCVT            S3, H3 }
          _D4.i16[0] = *(_WORD *)(v55 + 2 * _D3.u32[1]);
          __asm { FCVT            S4, H4 }
          _D5.i16[0] = *(_WORD *)(v55
                                + 2
                                * llroundf(fminf(fmaxf(*(float *)(v128 + 4 * BYTE2(v199)) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          float v137 = (float)((float)((float)(v187 * _S4) + (float)(v188 * _S3)) + (float)(v186 * _S5))
               + (float)(v185 * fmaxf(_S3, fmaxf(_S4, _S5)));
          float v138 = 8191.0;
          if (v137 <= 8191.0)
          {
            float v138 = v137;
            if (v137 < 0.0) {
              float v138 = 0.0;
            }
          }
          _H6 = *(_WORD *)(v53 + 2 * llroundf(v138));
          __asm { FCVT            S6, H6 }
          float v141 = _S3 * _S6;
          _S4 = _S4 * _S6;
          float v143 = _S5 * _S6;
          float v144 = (float)((float)(v196 * _S4) + (float)(v141 * v197)) + (float)(v143 * v195);
          float v145 = (float)((float)(v193 * _S4) + (float)(v141 * v194)) + (float)(v143 * v192);
          _S3 = (float)(v190 * _S4) + (float)(v141 * v191);
          LOWORD(_S4) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          __asm { FCVT            S27, H4 }
          LOWORD(_S4) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          __asm { FCVT            S28, H4 }
          LOWORD(_S3) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S3 + (float)(v143 * v189), 0.0), 8191.0)));
          __asm { FCVT            S29, H3 }
          float v150 = (float)((float)((float)(_S14 * _S28) + (float)(_S13 * _S27)) + (float)(_S15 * _S29)) + v40;
          float v151 = v47;
          if (v150 <= v47)
          {
            float v151 = (float)((float)((float)(_S14 * _S28) + (float)(_S13 * _S27)) + (float)(_S15 * _S29)) + v40;
            if (v150 < v40) {
              float v151 = (float)v27;
            }
          }
          float v152 = *(float *)(v128 + 4 * HIBYTE(v199));
          v91->i8[0] = llroundf(v151);
          float v91 = (int8x8_t *)((char *)v91 + 1);
          if (v90)
          {
            float v153 = (float)((float)(v41 + (float)(_S27 * v174)) + (float)(_S28 * v173)) + (float)(_S29 * v172);
            float v154 = (float)v31;
            if (v153 <= v49)
            {
              float v154 = (float)((float)(v41 + (float)(_S27 * v174)) + (float)(_S28 * v173)) + (float)(_S29 * v172);
              if (v153 < v175) {
                float v154 = (float)v30;
              }
            }
            float v155 = (float)((float)(v41 + (float)(_S27 * v171)) + (float)(_S28 * v170)) + (float)(_S29 * v169);
            char *v90 = llroundf(v154);
            float v156 = (float)v31;
            if (v155 <= v49)
            {
              float v156 = (float)((float)(v41 + (float)(_S27 * v171)) + (float)(_S28 * v170)) + (float)(_S29 * v169);
              if (v155 < v175) {
                float v156 = (float)v30;
              }
            }
            v90[1] = llroundf(v156);
            v90 += 2;
          }
          if (v89)
          {
            v89->i8[0] = llroundf(v152 * 255.0);
            float v89 = (int8x8_t *)((char *)v89 + 1);
          }
          v128 += 16;
          --v130;
        }
        while (v130);
      }
      v85 += v20;
      __int16 v83 = (int8x8_t *)((char *)v83 + v162);
      v80 += v22;
      uint64_t result = (int8x8_t *)((char *)result + v23);
      ++v39;
    }
    while (v39 != v50);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_444vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(result + 20);
    unint64_t v13 = v9 + *(void *)(result + 44);
    unint64_t v14 = v10 - v9;
    uint64_t v15 = *(void *)(result + 152);
    uint64_t v16 = *(uint64_t **)(result + 136);
    uint64_t v17 = *(void **)(result + 56);
    uint64_t v18 = **(void **)(result + 64);
    uint64_t v19 = *v16;
    uint64_t v20 = v16[1];
    uint64_t v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    float v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    float v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    float v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    float v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v15 + 152);
    float v26 = (float)LODWORD(a7);
    float v27 = *(float *)(v15 + 36);
    float v28 = *(float *)(v15 + 40);
    float v29 = *(float *)(v15 + 44);
    float v101 = *(float *)(v15 + 48);
    float v100 = *(float *)(v15 + 52);
    float v99 = *(float *)(v15 + 56);
    float v30 = *(float *)(v15 + 64);
    float v98 = *(float *)(v15 + 60);
    float v31 = *(float *)(v15 + 68);
    float v32 = *(float *)(v15 + 72);
    float v33 = *(float *)(v15 + 76);
    float v34 = *(float *)(v15 + 80);
    float v35 = *(float *)(v15 + 84);
    float v36 = *(float *)(v15 + 88);
    float v37 = *(float *)(v15 + 92);
    float v38 = *(float *)(v15 + 96);
    float v39 = *(float *)(v15 + 100);
    float v40 = *(float *)(v15 + 104);
    uint64_t v41 = v15 + 164;
    uint64_t v42 = v15 + 16548;
    uint64_t v43 = v15 + 32932;
    float v45 = *(float *)(v15 + 108);
    float v44 = *(float *)(v15 + 112);
    float v46 = *(float *)(v15 + 116);
    float v47 = *(float *)(v15 + 120);
    uint64_t v48 = *(uint64_t **)(result + 128);
    uint64_t v49 = *(void *)(result + 112);
    unint64_t v50 = *(void *)(result + 104) * a2 / v8 + *(void *)(result + 120);
    uint64_t v51 = *(void *)(result + 36);
    uint64_t result = *(unsigned __int8 *)(v15 + 157);
    uint64_t v52 = *(unsigned __int8 *)(v15 + 156);
    uint64_t v53 = *(unsigned __int8 *)(v15 + 155);
    uint64_t v54 = *(unsigned __int8 *)(v15 + 154);
    uint64_t v55 = v48[2];
    if (v55) {
      float v56 = (unsigned char *)(v55 + v50 * v21 + v49);
    }
    else {
      float v56 = 0;
    }
    uint64_t v58 = *v48;
    uint64_t v57 = v48[1];
    float v59 = (unsigned char *)(v57 + v50 * v20 + v49);
    if (!v57) {
      float v59 = 0;
    }
    float v60 = (unsigned char *)(v58 + v50 * v19 + v49);
    uint64_t v61 = *v17 + v18 * v13 + 16 * v51;
    float32x2_t v62 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v12)
      {
        uint64_t v63 = v12;
        float v64 = v56;
        float v65 = v59;
        float v66 = v60;
        uint64_t v67 = v61;
        do
        {
          v68.i32[0] = *(_DWORD *)(v67 + 4 * v54);
          v68.i32[1] = *(_DWORD *)(v67 + 4 * v53);
          _D4 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v68, v62), 0), v62)));
          _D4.i16[0] = *(_WORD *)(v41 + 2 * _D4.u32[0]);
          __asm { FCVT            S16, H4 }
          _D4.i16[0] = *(_WORD *)(v41 + 2 * _D4.u32[1]);
          __asm { FCVT            S17, H4 }
          _D4.i16[0] = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(*(float *)(v67 + 4 * v52) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S13, H4 }
          float v77 = fmaxf(_S16, fmaxf(_S17, _S13));
          float v78 = (float)((float)((float)(v44 * _S17) + (float)(v45 * _S16)) + (float)(v46 * _S13)) + (float)(v47 * v77);
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = (float)((float)((float)(v44 * _S17) + (float)(v45 * _S16)) + (float)(v46 * _S13)) + (float)(v47 * v77);
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v42 + 2 * llroundf(v79));
          __asm { FCVT            S4, H4 }
          _S16 = _S16 * _S4;
          float v83 = _S17 * _S4;
          float v84 = _S13 * _S4;
          float v85 = (float)((float)(v33 * v83) + (float)(_S16 * v32)) + (float)(v84 * v34);
          float v86 = (float)((float)(v36 * v83) + (float)(_S16 * v35)) + (float)(v84 * v37);
          _S4 = (float)((float)(v39 * v83) + (float)(_S16 * v38)) + (float)(v84 * v40);
          LOWORD(_S16) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S13, H16 }
          LOWORD(_S16) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          LOWORD(_S4) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S17, H4 }
          float v91 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S13)) + (float)(v29 * _S17)) + v22;
          float v92 = v24;
          if (v91 <= v24)
          {
            float v92 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S13)) + (float)(v29 * _S17)) + v22;
            if (v91 < v22) {
              float v92 = v22;
            }
          }
          float v93 = *(float *)(v67 + 4 * result);
          *v66++ = llroundf(v92);
          if (v65)
          {
            float v94 = (float)((float)(v23 + (float)(_S13 * v101)) + (float)(_S16 * v100)) + (float)(_S17 * v99);
            float v95 = v26;
            if (v94 <= v26)
            {
              float v95 = (float)((float)(v23 + (float)(_S13 * v101)) + (float)(_S16 * v100)) + (float)(_S17 * v99);
              if (v94 < v25) {
                float v95 = v25;
              }
            }
            float v96 = (float)((float)(v23 + (float)(_S13 * v98)) + (float)(_S16 * v30)) + (float)(_S17 * v31);
            *float v65 = llroundf(v95);
            float v97 = v26;
            if (v96 <= v26)
            {
              float v97 = v96;
              if (v96 < v25) {
                float v97 = v25;
              }
            }
            v65[1] = llroundf(v97);
            v65 += 2;
          }
          if (v64) {
            *v64++ = llroundf(v93 * 255.0);
          }
          v67 += 16;
          --v63;
        }
        while (v63);
      }
      v61 += v18;
      v60 += v19;
      v59 += v20;
      v56 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_444vf_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

char *vt_Copy_RGfA_TRC_Mat_TRC_444vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4 = 0;
  unint64_t v5 = *(void *)(a1 + 20);
  uint64_t v124 = *(void *)(a1 + 36);
  uint64_t v6 = *(void *)(a1 + 44);
  uint64_t v7 = *(void *)(a1 + 28);
  unint64_t v8 = *a1;
  unint64_t v9 = v7 * a2 / v8;
  uint64_t v10 = v9 + v6;
  unint64_t v11 = (v7 + v7 * a2) / v8;
  uint64_t v12 = v11 + v6;
  uint64_t v13 = *((void *)a1 + 14);
  uint64_t v14 = *((void *)a1 + 19);
  unint64_t v15 = *((void *)a1 + 13) * a2;
  uint64_t v17 = *((void *)a1 + 15);
  uint64_t v16 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v19 = **((void **)a1 + 8);
  uint64_t v123 = **((void **)a1 + 7);
  uint64_t v20 = v18[1];
  uint64_t v125 = *v18;
  uint64_t v21 = v18[2];
  uint64_t v23 = *v16;
  uint64_t result = (char *)v16[1];
  uint64_t v24 = v16[2];
  int v156 = *(_DWORD *)(v14 + 154);
  unsigned int v25 = *(unsigned __int16 *)(v14 + 144);
  unsigned int v26 = *(unsigned __int16 *)(v14 + 146);
  unsigned int v27 = *(unsigned __int16 *)(v14 + 148);
  unsigned int v28 = *(unsigned __int16 *)(v14 + 150);
  unsigned int v29 = *(unsigned __int16 *)(v14 + 152);
  float v154 = *(float *)(v14 + 36);
  float v153 = *(float *)(v14 + 40);
  float v152 = *(float *)(v14 + 44);
  float v136 = *(float *)(v14 + 52);
  float v137 = *(float *)(v14 + 48);
  float v134 = *(float *)(v14 + 60);
  float v135 = *(float *)(v14 + 56);
  float v132 = *(float *)(v14 + 68);
  float v133 = *(float *)(v14 + 64);
  uint64_t v30 = v15 / v8 + v17;
  uint64_t v31 = v19 * v10;
  float v150 = *(float *)(v14 + 76);
  float v151 = *(float *)(v14 + 72);
  float v148 = *(float *)(v14 + 84);
  float v149 = *(float *)(v14 + 80);
  float v146 = *(float *)(v14 + 92);
  float v147 = *(float *)(v14 + 88);
  LODWORD(a4) = *(_DWORD *)(v14 + 96);
  float v144 = *(float *)(v14 + 100);
  float v145 = *(float *)&a4;
  float v143 = *(float *)(v14 + 104);
  _D0.i32[1] = 0;
  memset(v155, 0, sizeof(v155));
  do
  {
    unsigned int v33 = 0;
    char v34 = *((unsigned char *)&v156 + v4);
    do
    {
      *((unsigned char *)v155 + 8 * (((_BYTE)v4 + (v33 >> 3)) & 0x1F) + v33) = v34 + 4 * v33;
      ++v33;
    }
    while (v33 != 8);
    ++v4;
  }
  while (v4 != 4);
  if (v11 != v9)
  {
    uint64_t v35 = 0;
    float v36 = (float)v25;
    float v37 = (float)v26;
    float v38 = (float)v27;
    float v138 = (float)v28;
    float v39 = (float)v29;
    uint64_t v40 = v12 - v10;
    uint64_t v41 = v14 + 16548;
    uint64_t v42 = v14 + 164;
    *(float *)_D0.i32 = v154;
    __asm { FCVT            H0, S0 }
    short float v142 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v153;
    __asm { FCVT            H0, S0 }
    short float v141 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v152;
    __asm { FCVT            H0, S0 }
    short float v140 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v137;
    __asm { FCVT            H0, S0 }
    short float v131 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v136;
    __asm { FCVT            H0, S0 }
    short float v130 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v135;
    __asm { FCVT            H0, S0 }
    short float v129 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v134;
    __asm { FCVT            H0, S0 }
    short float v128 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v133;
    __asm { FCVT            H0, S0 }
    short float v127 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v132;
    __asm { FCVT            H0, S0 }
    short float v126 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v151;
    __asm { FCVT            H8, S0 }
    *(float *)_D0.i32 = v150;
    __asm { FCVT            H9, S0 }
    *(float *)_D0.i32 = v149;
    __asm { FCVT            H10, S0 }
    *(float *)_D0.i32 = v148;
    __asm { FCVT            H0, S0 }
    short float v139 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v147;
    __asm { FCVT            H11, S0 }
    *(float *)_D0.i32 = v146;
    __asm { FCVT            H12, S0 }
    _D0.i32[0] = LODWORD(a4);
    __asm { FCVT            H13, S0 }
    *(float *)_D0.i32 = v144;
    __asm { FCVT            H14, S0 }
    *(short float *)_D0.i16 = (short float)v25;
    float16x8_t v54 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v26;
    float16x8_t v55 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v27;
    float16x8_t v56 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    if (_ZF) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = (int8x8_t *)(v24 + v21 * v30 + v13);
    }
    if (result) {
      result += v20 * v30 + v13;
    }
    else {
      uint64_t result = 0;
    }
    *(short float *)_D0.i16 = (short float)v28;
    float16x8_t v58 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    _S0 = v143;
    __asm { FCVT            H0, S0 }
    uint64_t v61 = (int8x8_t *)(v23 + v125 * v30 + v13);
    *(short float *)&a4 = (short float)v29;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    uint64_t v63 = v123 + v31 + 16 * v124;
    v64.i64[0] = 0x7000700070007000;
    v64.i64[1] = 0x7000700070007000;
    v65.i64[0] = 0x9000900090009000;
    v65.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v5 < 8)
      {
        unint64_t v103 = 0;
        uint64_t v102 = v63;
        float v69 = v61;
        float32x2_t v68 = result;
        uint64_t v67 = v57;
      }
      else
      {
        int v66 = 0;
        uint64_t v67 = v57;
        float32x2_t v68 = result;
        float v69 = v61;
        float v70 = (const float *)v63;
        do
        {
          float v71 = v70;
          float32x4x4_t v158 = vld4q_f32(v70);
          float v72 = v70 + 16;
          float32x4x4_t v159 = vld4q_f32(v72);
          if (v67) {
            int8x8_t v73 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v158.val[3]), v159.val[3]), (float16x8_t)vdupq_n_s16(0x5BF8u))));
          }
          else {
            int8x8_t v73 = 0;
          }
          float16x8_t v74 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v158.val[0]), v159.val[0]);
          float16x8_t v75 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v158.val[1]), v159.val[1]);
          float16x8_t v76 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v158.val[2]), v159.val[2]);
          uint16x8_t v77 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v74, v64), (float16x8_t)0), v65));
          uint32x4_t v78 = vmovl_high_u16(v77);
          uint32x4_t v79 = vmovl_u16(*(uint16x4_t *)v77.i8);
          v80.i16[0] = *(_WORD *)(v42 + 2 * v79.u32[0]);
          v80.i16[1] = *(_WORD *)(v42 + 2 * v79.u32[1]);
          v80.i16[2] = *(_WORD *)(v42 + 2 * v79.u32[2]);
          v80.i16[3] = *(_WORD *)(v42 + 2 * v79.u32[3]);
          v80.i16[4] = *(_WORD *)(v42 + 2 * v78.u32[0]);
          v80.i16[5] = *(_WORD *)(v42 + 2 * v78.u32[1]);
          v80.i16[6] = *(_WORD *)(v42 + 2 * v78.u32[2]);
          v80.i16[7] = *(_WORD *)(v42 + 2 * v78.u32[3]);
          uint16x8_t v81 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v75, v64), (float16x8_t)0), v65));
          uint32x4_t v82 = vmovl_high_u16(v81);
          uint32x4_t v83 = vmovl_u16(*(uint16x4_t *)v81.i8);
          v84.i16[0] = *(_WORD *)(v42 + 2 * v83.u32[0]);
          v84.i16[1] = *(_WORD *)(v42 + 2 * v83.u32[1]);
          v84.i16[2] = *(_WORD *)(v42 + 2 * v83.u32[2]);
          v84.i16[3] = *(_WORD *)(v42 + 2 * v83.u32[3]);
          v84.i16[4] = *(_WORD *)(v42 + 2 * v82.u32[0]);
          v84.i16[5] = *(_WORD *)(v42 + 2 * v82.u32[1]);
          v84.i16[6] = *(_WORD *)(v42 + 2 * v82.u32[2]);
          v84.i16[7] = *(_WORD *)(v42 + 2 * v82.u32[3]);
          uint16x8_t v85 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v76, v64), (float16x8_t)0), v65));
          uint32x4_t v86 = vmovl_high_u16(v85);
          float16x8_t v87 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v85.i8);
          v87.i16[0] = *(_WORD *)(v42 + 2 * v87.u32[0]);
          v87.i16[1] = *(_WORD *)(v42 + 2 * v87.u32[1]);
          v87.i16[2] = *(_WORD *)(v42 + 2 * v87.u32[2]);
          v87.i16[3] = *(_WORD *)(v42 + 2 * v87.u32[3]);
          v87.i16[4] = *(_WORD *)(v42 + 2 * v86.u32[0]);
          v87.i16[5] = *(_WORD *)(v42 + 2 * v86.u32[1]);
          v87.i16[6] = *(_WORD *)(v42 + 2 * v86.u32[2]);
          v87.i16[7] = *(_WORD *)(v42 + 2 * v86.u32[3]);
          float16x8_t v88 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v80, v139), v84, _H11), v87, _H12);
          float16x8_t v89 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v87, _H0), v84, _H14), v80, _H13);
          uint16x8_t v90 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v80, _H8), v84, _H9), v87, _H10), (float16x8_t)0), v65));
          uint32x4_t v91 = vmovl_high_u16(v90);
          uint32x4_t v92 = vmovl_u16(*(uint16x4_t *)v90.i8);
          v93.i16[0] = *(_WORD *)(v41 + 2 * v92.u32[0]);
          v93.i16[1] = *(_WORD *)(v41 + 2 * v92.u32[1]);
          v93.i16[2] = *(_WORD *)(v41 + 2 * v92.u32[2]);
          v93.i16[3] = *(_WORD *)(v41 + 2 * v92.u32[3]);
          v93.i16[4] = *(_WORD *)(v41 + 2 * v91.u32[0]);
          v93.i16[5] = *(_WORD *)(v41 + 2 * v91.u32[1]);
          v93.i16[6] = *(_WORD *)(v41 + 2 * v91.u32[2]);
          v93.i16[7] = *(_WORD *)(v41 + 2 * v91.u32[3]);
          uint16x8_t v94 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v88, (float16x8_t)0), v65));
          uint32x4_t v95 = vmovl_high_u16(v94);
          uint32x4_t v96 = vmovl_u16(*(uint16x4_t *)v94.i8);
          v97.i16[0] = *(_WORD *)(v41 + 2 * v96.u32[0]);
          v97.i16[1] = *(_WORD *)(v41 + 2 * v96.u32[1]);
          v97.i16[2] = *(_WORD *)(v41 + 2 * v96.u32[2]);
          v97.i16[3] = *(_WORD *)(v41 + 2 * v96.u32[3]);
          v97.i16[4] = *(_WORD *)(v41 + 2 * v95.u32[0]);
          v97.i16[5] = *(_WORD *)(v41 + 2 * v95.u32[1]);
          v97.i16[6] = *(_WORD *)(v41 + 2 * v95.u32[2]);
          v97.i16[7] = *(_WORD *)(v41 + 2 * v95.u32[3]);
          uint16x8_t v98 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v89, (float16x8_t)0), v65));
          uint32x4_t v99 = vmovl_high_u16(v98);
          uint32x4_t v100 = vmovl_u16(*(uint16x4_t *)v98.i8);
          v101.i16[0] = *(_WORD *)(v41 + 2 * v100.u32[0]);
          v101.i16[1] = *(_WORD *)(v41 + 2 * v100.u32[1]);
          v101.i16[2] = *(_WORD *)(v41 + 2 * v100.u32[2]);
          v101.i16[3] = *(_WORD *)(v41 + 2 * v100.u32[3]);
          v101.i16[4] = *(_WORD *)(v41 + 2 * v99.u32[0]);
          v101.i16[5] = *(_WORD *)(v41 + 2 * v99.u32[1]);
          v101.i16[6] = *(_WORD *)(v41 + 2 * v99.u32[2]);
          v101.i16[7] = *(_WORD *)(v41 + 2 * v99.u32[3]);
          *v69++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v54, v93, v142), v97, v141), v101, v140), v54), v56)));
          if (v68)
          {
            v157.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v55, v93, v131), v97, v130), v101, v129), v58), v62), v58), v62)));
            v157.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v55, v93, v128), v97, v127), v101, v126)));
            vst2_s8(v68, v157);
            v68 += 16;
          }
          if (v67) {
            *v67++ = v73;
          }
          v66 += 8;
          float v70 = v71 + 32;
        }
        while (v66 < (int)v5 - 7);
        uint64_t v102 = (uint64_t)(v71 + 32);
        unint64_t v103 = v5 & 0xFFFFFFF8;
      }
      _CF = v5 >= v103;
      unint64_t v104 = v5 - v103;
      if (v104 != 0 && _CF)
      {
        do
        {
          v105.i32[0] = *(_DWORD *)(v102 + 4 * v156);
          v105.i32[1] = *(_DWORD *)(v102 + 4 * BYTE1(v156));
          _D7 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D6 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v105, _D7), 0), _D7)));
          _D6.i16[0] = *(_WORD *)(v42 + 2 * _D6.u32[0]);
          __asm { FCVT            S6, H6 }
          _D7.i16[0] = *(_WORD *)(v42 + 2 * _D6.u32[1]);
          __asm { FCVT            S7, H7 }
          _H4 = *(_WORD *)(v42 + 2
                               * llroundf(fminf(fmaxf(*(float *)(v102 + 4 * BYTE2(v156)) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          float v110 = (float)((float)(v150 * _D7.f32[0]) + (float)(*(float *)_D6.i32 * v151)) + (float)(_S4 * v149);
          float v111 = (float)((float)(v147 * _D7.f32[0]) + (float)(*(float *)_D6.i32 * v148)) + (float)(_S4 * v146);
          _S4 = (float)((float)(v144 * _D7.f32[0]) + (float)(*(float *)_D6.i32 * v145)) + (float)(_S4 * v143);
          _D6.i16[0] = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S21, H6 }
          _D6.i16[0] = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S22, H6 }
          LOWORD(_S4) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S23, H4 }
          float v116 = (float)((float)((float)(v153 * _S22) + (float)(v154 * _S21)) + (float)(v152 * _S23)) + v36;
          float v117 = v38;
          if (v116 <= v38)
          {
            float v117 = (float)((float)((float)(v153 * _S22) + (float)(v154 * _S21)) + (float)(v152 * _S23)) + v36;
            if (v116 < v36) {
              float v117 = (float)v25;
            }
          }
          float v118 = *(float *)(v102 + 4 * HIBYTE(v156));
          v69->i8[0] = llroundf(v117);
          float v69 = (int8x8_t *)((char *)v69 + 1);
          if (v68)
          {
            float v119 = (float)((float)(v37 + (float)(_S21 * v137)) + (float)(_S22 * v136)) + (float)(_S23 * v135);
            float v120 = (float)v29;
            if (v119 <= v39)
            {
              float v120 = (float)((float)(v37 + (float)(_S21 * v137)) + (float)(_S22 * v136)) + (float)(_S23 * v135);
              if (v119 < v138) {
                float v120 = (float)v28;
              }
            }
            float v121 = (float)((float)(v37 + (float)(_S21 * v134)) + (float)(_S22 * v133)) + (float)(_S23 * v132);
            *float32x2_t v68 = llroundf(v120);
            float v122 = (float)v29;
            if (v121 <= v39)
            {
              float v122 = (float)((float)(v37 + (float)(_S21 * v134)) + (float)(_S22 * v133)) + (float)(_S23 * v132);
              if (v121 < v138) {
                float v122 = (float)v28;
              }
            }
            v68[1] = llroundf(v122);
            v68 += 2;
          }
          if (v67)
          {
            v67->i8[0] = llroundf(v118 * 255.0);
            uint64_t v67 = (int8x8_t *)((char *)v67 + 1);
          }
          v102 += 16;
          --v104;
        }
        while (v104);
      }
      v63 += v19;
      uint64_t v61 = (int8x8_t *)((char *)v61 + v125);
      result += v20;
      uint64_t v57 = (int8x8_t *)((char *)v57 + v21);
      ++v35;
    }
    while (v35 != v40);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_444vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(result + 20);
    unint64_t v13 = v9 + *(void *)(result + 44);
    unint64_t v14 = v10 - v9;
    uint64_t v15 = *(void *)(result + 152);
    uint64_t v16 = *(uint64_t **)(result + 136);
    uint64_t v17 = *(void **)(result + 56);
    uint64_t v18 = **(void **)(result + 64);
    uint64_t v19 = *v16;
    uint64_t v20 = v16[1];
    uint64_t v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    float v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    float v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    float v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    float v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v15 + 152);
    float v26 = (float)LODWORD(a7);
    float v27 = *(float *)(v15 + 36);
    float v28 = *(float *)(v15 + 40);
    float v29 = *(float *)(v15 + 44);
    float v30 = *(float *)(v15 + 48);
    float v31 = *(float *)(v15 + 52);
    float v32 = *(float *)(v15 + 56);
    float v33 = *(float *)(v15 + 60);
    float v34 = *(float *)(v15 + 64);
    float v35 = *(float *)(v15 + 68);
    float v36 = *(float *)(v15 + 72);
    float v37 = *(float *)(v15 + 76);
    float v38 = *(float *)(v15 + 80);
    float v39 = *(float *)(v15 + 84);
    float v40 = *(float *)(v15 + 88);
    float v41 = *(float *)(v15 + 92);
    float v42 = *(float *)(v15 + 96);
    float v43 = *(float *)(v15 + 100);
    float v44 = *(float *)(v15 + 104);
    uint64_t v45 = v15 + 164;
    uint64_t v46 = v15 + 16548;
    float v47 = *(uint64_t **)(result + 128);
    uint64_t v48 = *(void *)(result + 112);
    unint64_t v49 = *(void *)(result + 104) * a2 / v8 + *(void *)(result + 120);
    uint64_t v50 = *(void *)(result + 36);
    uint64_t v51 = *(unsigned __int8 *)(v15 + 157);
    uint64_t result = *(unsigned __int8 *)(v15 + 156);
    uint64_t v52 = *(unsigned __int8 *)(v15 + 155);
    uint64_t v53 = *(unsigned __int8 *)(v15 + 154);
    uint64_t v54 = v47[2];
    if (v54) {
      float16x8_t v55 = (unsigned char *)(v54 + v49 * v21 + v48);
    }
    else {
      float16x8_t v55 = 0;
    }
    uint64_t v57 = *v47;
    uint64_t v56 = v47[1];
    float16x8_t v58 = (unsigned char *)(v56 + v49 * v20 + v48);
    if (!v56) {
      float16x8_t v58 = 0;
    }
    float v59 = (unsigned char *)(v57 + v49 * v19 + v48);
    uint64_t v60 = *v17 + v18 * v13 + 16 * v50;
    float32x2_t v61 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v12)
      {
        uint64_t v62 = v12;
        uint64_t v63 = v60;
        float16x8_t v64 = v55;
        float16x8_t v65 = v58;
        int v66 = v59;
        do
        {
          v67.i32[0] = *(_DWORD *)(v63 + 4 * v53);
          v67.i32[1] = *(_DWORD *)(v63 + 4 * v52);
          _D4 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v67, v61), 0), v61)));
          _D4.i16[0] = *(_WORD *)(v45 + 2 * _D4.u32[0]);
          __asm { FCVT            S4, H4 }
          _H12 = *(_WORD *)(v45 + 2 * _D4.u32[1]);
          __asm { FCVT            S12, H12 }
          _H11 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(*(float *)(v63 + 4 * result) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          float v77 = (float)((float)(v37 * _S12) + (float)(*(float *)_D4.i32 * v36)) + (float)(_S11 * v38);
          float v78 = (float)((float)(v40 * _S12) + (float)(*(float *)_D4.i32 * v39)) + (float)(_S11 * v41);
          *(float *)_D4.i32 = (float)((float)(v43 * _S12) + (float)(*(float *)_D4.i32 * v42)) + (float)(_S11 * v44);
          LOWORD(_S11) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S12, H11 }
          LOWORD(_S11) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S13, H11 }
          _D4.i16[0] = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(*(float *)_D4.i32, 0.0), 8191.0)));
          __asm { FCVT            S14, H4 }
          float v82 = (float)((float)((float)(v28 * _S13) + (float)(v27 * _S12)) + (float)(v29 * _S14)) + v22;
          float v83 = v24;
          if (v82 <= v24)
          {
            float v83 = (float)((float)((float)(v28 * _S13) + (float)(v27 * _S12)) + (float)(v29 * _S14)) + v22;
            if (v82 < v22) {
              float v83 = v22;
            }
          }
          float v84 = *(float *)(v63 + 4 * v51);
          *v66++ = llroundf(v83);
          if (v65)
          {
            float v85 = (float)((float)(v23 + (float)(_S12 * v30)) + (float)(_S13 * v31)) + (float)(_S14 * v32);
            float v86 = v26;
            if (v85 <= v26)
            {
              float v86 = (float)((float)(v23 + (float)(_S12 * v30)) + (float)(_S13 * v31)) + (float)(_S14 * v32);
              if (v85 < v25) {
                float v86 = v25;
              }
            }
            float v87 = (float)((float)(v23 + (float)(_S12 * v33)) + (float)(_S13 * v34)) + (float)(_S14 * v35);
            *float16x8_t v65 = llroundf(v86);
            float v88 = v26;
            if (v87 <= v26)
            {
              float v88 = v87;
              if (v87 < v25) {
                float v88 = v25;
              }
            }
            v65[1] = llroundf(v88);
            v65 += 2;
          }
          if (v64) {
            *v64++ = llroundf(v84 * 255.0);
          }
          v63 += 16;
          --v62;
        }
        while (v62);
      }
      v60 += v18;
      v59 += v19;
      v58 += v20;
      v55 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_444vf_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_444vf_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGfA_rgb_444vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, double a6, int16x4_t a7)
{
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a1 + 20);
  uint64_t v100 = *(void *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 44);
  uint64_t v10 = *(void *)(a1 + 28);
  unint64_t v11 = *a1;
  unint64_t v12 = v10 * a2 / v11;
  uint64_t v13 = v12 + v9;
  unint64_t v14 = (v10 + v10 * a2) / v11;
  uint64_t v15 = v14 + v9;
  uint64_t v16 = *((void *)a1 + 14);
  unint64_t v17 = *((void *)a1 + 13) * a2;
  uint64_t v18 = *((void *)a1 + 19);
  uint64_t v19 = *((void *)a1 + 15);
  int64x2_t v20 = (uint64_t *)*((void *)a1 + 16);
  long long v21 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v22 = **((void **)a1 + 8);
  uint64_t v99 = **((void **)a1 + 7);
  uint64_t v23 = *v21;
  uint64_t v24 = v21[1];
  uint64_t v25 = v21[2];
  uint64_t v98 = *v20;
  uint64_t v27 = v20[1];
  uint64_t v26 = v20[2];
  unsigned int v28 = *(_DWORD *)(v18 + 136);
  int v113 = *(_DWORD *)(v18 + 154);
  unsigned int v29 = *(unsigned __int16 *)(v18 + 144);
  unsigned int v30 = *(unsigned __int16 *)(v18 + 146);
  unsigned int v31 = *(unsigned __int16 *)(v18 + 148);
  unsigned int v32 = *(unsigned __int16 *)(v18 + 150);
  unsigned int v33 = *(unsigned __int16 *)(v18 + 152);
  uint64_t v34 = v17 / v11 + v19;
  uint64_t v35 = v22 * v13;
  _S16 = *(float *)(v18 + 36);
  _S15 = *(float *)(v18 + 40);
  _S2 = *(float *)(v18 + 44);
  float v110 = *(float *)(v18 + 52);
  float v111 = *(float *)(v18 + 48);
  float v108 = *(float *)(v18 + 60);
  float v109 = *(float *)(v18 + 56);
  float v106 = *(float *)(v18 + 68);
  float v107 = *(float *)(v18 + 64);
  memset(v112, 0, sizeof(v112));
  do
  {
    unsigned int v39 = 0;
    int v40 = *((unsigned __int8 *)&v113 + v7);
    do
    {
      uint64_t result = v40 + 4 * v39;
      *((unsigned char *)v112 + 8 * (((_BYTE)v7 + (v39 >> 3)) & 0x1F) + v39) = v40 + 4 * v39;
      ++v39;
    }
    while (v39 != 8);
    ++v7;
  }
  while (v7 != 4);
  if (v14 != v12)
  {
    uint64_t v42 = 0;
    uint64_t v43 = v15 - v13;
    _S17 = (float)v28;
    float v45 = (float)v29;
    float v46 = (float)v30;
    float v47 = (float)v31;
    float v48 = (float)v32;
    float v49 = (float)v33;
    __asm
    {
      FCVT            H8, S16
      FCVT            H9, S15
      FCVT            H10, S2
    }
    _S0 = v111;
    __asm { FCVT            H0, S0 }
    short float v105 = *(short float *)&_S0;
    _S0 = v110;
    __asm { FCVT            H0, S0 }
    short float v104 = *(short float *)&_S0;
    _S0 = v109;
    __asm { FCVT            H0, S0 }
    short float v103 = *(short float *)&_S0;
    _S0 = v108;
    __asm { FCVT            H0, S0 }
    short float v102 = *(short float *)&_S0;
    _S0 = v107;
    __asm { FCVT            H0, S0 }
    short float v101 = *(short float *)&_S0;
    _S0 = v106;
    __asm { FCVT            H3, S0 }
    *(short float *)a7.i16 = (short float)v29;
    float16x8_t v64 = (float16x8_t)vdupq_lane_s16(a7, 0);
    *(short float *)a7.i16 = (short float)v30;
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(a7, 0);
    *(short float *)a7.i16 = (short float)v31;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(a7, 0);
    *(short float *)a7.i16 = (short float)v32;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(a7, 0);
    *(short float *)a7.i16 = (short float)v33;
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(a7, 0);
    if (v26) {
      float v69 = (double *)(v26 + v25 * v34 + v16);
    }
    else {
      float v69 = 0;
    }
    if (v27) {
      float v70 = (char *)(v27 + v24 * v34 + v16);
    }
    else {
      float v70 = 0;
    }
    float v71 = (int8x8_t *)(v98 + v23 * v34 + v16);
    uint64_t result = v99 + v35 + 16 * v100;
    __asm { FCVT            H4, S17 }
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v86 = 0;
        uint64_t v85 = result;
        float16x8_t v76 = v71;
        float16x8_t v75 = v70;
        float16x8_t v74 = v69;
      }
      else
      {
        int v73 = 0;
        float16x8_t v74 = v69;
        float16x8_t v75 = v70;
        float16x8_t v76 = v71;
        float v77 = (const float *)result;
        do
        {
          float v78 = v77;
          float32x4x4_t v115 = vld4q_f32(v77);
          uint32x4_t v79 = v77 + 16;
          float32x4x4_t v116 = vld4q_f32(v79);
          float16x8_t v80 = vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v115.val[0]), v116.val[0]), _H4);
          float16x8_t v81 = vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v115.val[1]), v116.val[1]), _H4);
          float16x8_t v82 = vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v115.val[2]), v116.val[2]), _H4);
          double v83 = COERCE_DOUBLE(vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v115.val[3]), v116.val[3]), (float16x8_t)vdupq_n_s16(0x5BF8u)))));
          if (v74) {
            double v84 = v83;
          }
          else {
            double v84 = 0.0;
          }
          *v76++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v64, v80, _H8), v81, _H9), v82, _H10), v64), v66)));
          if (v75)
          {
            v114.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v65, v80, v105), v81, v104), v82, v103), v67), v68), v67), v68)));
            v114.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v65, v80, v102), v81, v101), v82, _H3)));
            vst2_s8(v75, v114);
            v75 += 16;
          }
          if (v74) {
            *v74++ = v84;
          }
          v73 += 8;
          float v77 = v78 + 32;
        }
        while (v73 < (int)v8 - 7);
        uint64_t v85 = (uint64_t)(v78 + 32);
        unint64_t v86 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v86;
      unint64_t v87 = v8 - v86;
      if (v87 != 0 && _CF)
      {
        do
        {
          float v88 = *(float *)(v85 + 4 * v113) * _S17;
          float v89 = *(float *)(v85 + 4 * BYTE1(v113)) * _S17;
          float v90 = *(float *)(v85 + 4 * BYTE2(v113)) * _S17;
          float v91 = (float)((float)(_S15 * v89) + (float)(_S16 * v88)) + (float)(_S2 * v90);
          float v92 = v47;
          if ((float)(v91 + v45) <= v47)
          {
            float v92 = v91 + v45;
            if ((float)(v91 + v45) < v45) {
              float v92 = (float)v29;
            }
          }
          float v93 = *(float *)(v85 + 4 * HIBYTE(v113));
          v76->i8[0] = llroundf(v92);
          float16x8_t v76 = (int8x8_t *)((char *)v76 + 1);
          if (v75)
          {
            float v94 = (float)((float)(v46 + (float)(v88 * v111)) + (float)(v89 * v110)) + (float)(v90 * v109);
            float v95 = v49;
            if (v94 <= v49)
            {
              float v95 = (float)((float)(v46 + (float)(v88 * v111)) + (float)(v89 * v110)) + (float)(v90 * v109);
              if (v94 < v48) {
                float v95 = v48;
              }
            }
            float v96 = (float)((float)(v46 + (float)(v88 * v108)) + (float)(v89 * v107)) + (float)(v90 * v106);
            *float16x8_t v75 = llroundf(v95);
            float v97 = v49;
            if (v96 <= v49)
            {
              float v97 = v96;
              if (v96 < v48) {
                float v97 = v48;
              }
            }
            v75[1] = llroundf(v97);
            v75 += 2;
          }
          if (v74)
          {
            *(unsigned char *)float16x8_t v74 = llroundf(v93 * 255.0);
            float16x8_t v74 = (double *)((char *)v74 + 1);
          }
          v85 += 16;
          --v87;
        }
        while (v87);
      }
      result += v22;
      float v71 = (int8x8_t *)((char *)v71 + v23);
      v70 += v24;
      float v69 = (double *)((char *)v69 + v25);
      ++v42;
    }
    while (v42 != v43);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_444vf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(uint64_t **)(result + 136);
    uint64_t v18 = *(void **)(result + 56);
    uint64_t v19 = **(void **)(result + 64);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    float v23 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    float v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v28 = (float)LODWORD(a8);
    float v29 = *(float *)(v16 + 36);
    float v30 = *(float *)(v16 + 40);
    float v31 = *(float *)(v16 + 44);
    float v32 = *(float *)(v16 + 48);
    float v33 = *(float *)(v16 + 52);
    float v34 = *(float *)(v16 + 56);
    float v35 = *(float *)(v16 + 60);
    float v36 = *(float *)(v16 + 64);
    float v37 = *(float *)(v16 + 68);
    float v38 = *(void **)(result + 128);
    uint64_t v39 = *(void *)(result + 112);
    unint64_t v40 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
    uint64_t v41 = *(void *)(result + 36);
    uint64_t v42 = *(unsigned __int8 *)(v16 + 157);
    uint64_t v43 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v44 = *(unsigned __int8 *)(v16 + 155);
    uint64_t result = *(unsigned __int8 *)(v16 + 154);
    uint64_t v45 = v38[2];
    if (v45) {
      float v46 = (unsigned char *)(v45 + v40 * v22 + v39);
    }
    else {
      float v46 = 0;
    }
    float v49 = v38;
    uint64_t v48 = *v38;
    uint64_t v47 = v49[1];
    BOOL v50 = v47 == 0;
    uint64_t v51 = (unsigned char *)(v47 + v40 * v21 + v39);
    if (v50) {
      uint64_t v51 = 0;
    }
    uint64_t v52 = (unsigned char *)(v48 + v40 * v20 + v39);
    uint64_t v53 = *v18 + v19 * v14 + 16 * v41;
    do
    {
      if (v13)
      {
        uint64_t v54 = v13;
        uint64_t v55 = v53;
        uint64_t v56 = v46;
        uint64_t v57 = v51;
        float16x8_t v58 = v52;
        do
        {
          float v59 = *(float *)(v55 + 4 * result) * v23;
          float v60 = *(float *)(v55 + 4 * v44) * v23;
          float v61 = *(float *)(v55 + 4 * v43) * v23;
          float v62 = (float)((float)((float)(v30 * v60) + (float)(v29 * v59)) + (float)(v31 * v61)) + v24;
          float v63 = v26;
          if (v62 <= v26)
          {
            float v63 = (float)((float)((float)(v30 * v60) + (float)(v29 * v59)) + (float)(v31 * v61)) + v24;
            if (v62 < v24) {
              float v63 = v24;
            }
          }
          float v64 = *(float *)(v55 + 4 * v42);
          *v58++ = llroundf(v63);
          if (v57)
          {
            float v65 = (float)((float)(v25 + (float)(v59 * v32)) + (float)(v60 * v33)) + (float)(v61 * v34);
            float v66 = v28;
            if (v65 <= v28)
            {
              float v66 = (float)((float)(v25 + (float)(v59 * v32)) + (float)(v60 * v33)) + (float)(v61 * v34);
              if (v65 < v27) {
                float v66 = v27;
              }
            }
            float v67 = (float)((float)(v25 + (float)(v59 * v35)) + (float)(v60 * v36)) + (float)(v61 * v37);
            *uint64_t v57 = llroundf(v66);
            float v68 = v28;
            if (v67 <= v28)
            {
              float v68 = v67;
              if (v67 < v27) {
                float v68 = v27;
              }
            }
            v57[1] = llroundf(v68);
            v57 += 2;
          }
          if (v56) {
            *v56++ = llroundf(v64 * 255.0);
          }
          v55 += 16;
          --v54;
        }
        while (v54);
      }
      v53 += v19;
      v52 += v20;
      v51 += v21;
      v46 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf444_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

int16x8_t *vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, int16x4_t _D3)
{
  uint64_t v6 = 0;
  unint64_t v7 = *(void *)(a1 + 20);
  uint64_t v165 = *(void *)(a1 + 36);
  uint64_t v8 = *(void *)(a1 + 44);
  uint64_t v9 = *(void *)(a1 + 28);
  unint64_t v10 = *a1;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = v11 + v8;
  unint64_t v13 = (v9 + v9 * a2) / v10;
  uint64_t v14 = v13 + v8;
  uint64_t v15 = *((void *)a1 + 14);
  uint64_t v16 = *((void *)a1 + 19);
  uint64_t v17 = *((void *)a1 + 15);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v20 = **((void **)a1 + 8);
  uint64_t v21 = **((void **)a1 + 7);
  unint64_t v22 = *((void *)a1 + 13) * a2;
  uint64_t v170 = *v19;
  uint64_t v23 = v19[1];
  uint64_t v24 = v19[2];
  uint64_t v25 = v18[1];
  uint64_t v164 = *v18;
  uint64_t result = (int16x8_t *)v18[2];
  int v207 = *(_DWORD *)(v16 + 154);
  unsigned int v27 = *(unsigned __int16 *)(v16 + 144);
  char v28 = *(unsigned char *)(v16 + 132);
  unsigned int v29 = *(unsigned __int16 *)(v16 + 146);
  unsigned int v30 = *(unsigned __int16 *)(v16 + 148);
  unsigned int v31 = *(unsigned __int16 *)(v16 + 150);
  unsigned int v32 = *(unsigned __int16 *)(v16 + 152);
  _S13 = *(float *)(v16 + 36);
  _S14 = *(float *)(v16 + 40);
  _S15 = *(float *)(v16 + 44);
  float v181 = *(float *)(v16 + 52);
  float v182 = *(float *)(v16 + 48);
  float v179 = *(float *)(v16 + 60);
  float v180 = *(float *)(v16 + 56);
  float v177 = *(float *)(v16 + 68);
  float v178 = *(float *)(v16 + 64);
  float v205 = *(float *)(v16 + 72);
  float v204 = *(float *)(v16 + 76);
  float v203 = *(float *)(v16 + 80);
  float v202 = *(float *)(v16 + 84);
  float v201 = *(float *)(v16 + 88);
  uint64_t v36 = v22 / v10 + v17;
  uint64_t v169 = v20;
  uint64_t v37 = v20 * v12;
  float v200 = *(float *)(v16 + 92);
  float v199 = *(float *)(v16 + 96);
  float v198 = *(float *)(v16 + 100);
  float v197 = *(float *)(v16 + 104);
  float v196 = *(float *)(v16 + 108);
  float v195 = *(float *)(v16 + 112);
  float v194 = *(float *)(v16 + 116);
  float v193 = *(float *)(v16 + 120);
  memset(v206, 0, sizeof(v206));
  do
  {
    unsigned int v38 = 0;
    char v39 = *((unsigned char *)&v207 + v6);
    do
    {
      *((unsigned char *)v206 + 8 * (((_BYTE)v6 + (v38 >> 3)) & 0x1F) + v38) = v39 + 4 * v38;
      ++v38;
    }
    while (v38 != 8);
    ++v6;
  }
  while (v6 != 4);
  if (v13 != v11)
  {
    uint64_t v40 = 0;
    float v41 = (float)v27;
    float v42 = (float)v29;
    __asm { FCVT            H0, S13 }
    short float v192 = _H0;
    float v183 = (float)v31;
    __asm { FCVT            H0, S14 }
    short float v191 = _H0;
    float v49 = (float)v32;
    uint64_t v50 = v14 - v12;
    __asm { FCVT            H0, S15 }
    short float v190 = _H0;
    _S0 = v182;
    __asm { FCVT            H0, S0 }
    short float v176 = *(short float *)&_S0;
    uint64_t v53 = v16 + 16548;
    _S0 = v181;
    __asm { FCVT            H0, S0 }
    short float v175 = *(short float *)&_S0;
    unsigned __int8 v55 = 16 - v28;
    uint64_t v56 = v16 + 32932;
    uint64_t v57 = v16 + 164;
    _S0 = v180;
    __asm { FCVT            H0, S0 }
    short float v174 = *(short float *)&_S0;
    _S0 = v179;
    __asm { FCVT            H0, S0 }
    short float v173 = *(short float *)&_S0;
    _S0 = v178;
    __asm { FCVT            H0, S0 }
    short float v172 = *(short float *)&_S0;
    _S0 = v177;
    __asm { FCVT            H0, S0 }
    short float v171 = *(short float *)&_S0;
    _S0 = v196;
    __asm { FCVT            H0, S0 }
    short float v189 = *(short float *)&_S0;
    _S0 = v195;
    __asm { FCVT            H0, S0 }
    short float v188 = *(short float *)&_S0;
    _S0 = v194;
    __asm { FCVT            H0, S0 }
    short float v187 = *(short float *)&_S0;
    _S0 = v193;
    __asm { FCVT            H7, S0 }
    _S0 = v205;
    __asm { FCVT            H0, S0 }
    short float v186 = *(short float *)&_S0;
    _S0 = v204;
    __asm { FCVT            H0, S0 }
    short float v185 = *(short float *)&_S0;
    _S0 = v203;
    __asm { FCVT            H0, S0 }
    short float v184 = *(short float *)&_S0;
    if (_CF) {
      unsigned __int8 v70 = 0;
    }
    else {
      unsigned __int8 v70 = v55;
    }
    _S0 = v202;
    __asm { FCVT            H0, S0 }
    _S1 = v201;
    __asm { FCVT            H1, S1 }
    _S2 = v200;
    __asm { FCVT            H2, S2 }
    *(float *)_D3.i32 = v199;
    __asm { FCVT            H10, S3 }
    *(short float *)_D3.i16 = (short float)v27;
    float16x8_t v78 = (float16x8_t)vdupq_lane_s16(_D3, 0);
    *(short float *)_D3.i16 = (short float)v29;
    float16x8_t v79 = (float16x8_t)vdupq_lane_s16(_D3, 0);
    *(short float *)_D3.i16 = (short float)v30;
    float16x8_t v80 = (float16x8_t)vdupq_lane_s16(_D3, 0);
    if (result) {
      uint64_t result = (int16x8_t *)((char *)result + 2 * v15 + v24 * v36);
    }
    else {
      uint64_t result = 0;
    }
    *(short float *)_D3.i16 = (short float)v31;
    float16x8_t v81 = (float16x8_t)vdupq_lane_s16(_D3, 0);
    if (v25) {
      uint64_t v82 = v25 + v23 * v36 + 2 * v15;
    }
    else {
      uint64_t v82 = 0;
    }
    *(short float *)_D3.i16 = (short float)v32;
    float16x8_t v83 = (float16x8_t)vdupq_lane_s16(_D3, 0);
    uint64_t v84 = v164 + v170 * v36 + 2 * v15;
    _S3 = v198;
    __asm { FCVT            H8, S3 }
    uint64_t v87 = v21 + v37 + 16 * v165;
    unsigned __int8 v88 = v70;
    uint16x8_t v89 = (uint16x8_t)vdupq_n_s16(v70);
    _S3 = v197;
    __asm { FCVT            H11, S3 }
    v92.i64[0] = 0x7000700070007000;
    v92.i64[1] = 0x7000700070007000;
    v93.i64[0] = 0x9000900090009000;
    v93.i64[1] = 0x9000900090009000;
    float v167 = _S14;
    float v168 = _S13;
    float v166 = _S15;
    do
    {
      if ((int)v7 < 8)
      {
        unint64_t v136 = 0;
        uint64_t v135 = v87;
        float v97 = (uint16x8_t *)v84;
        float v96 = (__int16 *)v82;
        float v95 = result;
      }
      else
      {
        int v94 = 0;
        float v95 = result;
        float v96 = (__int16 *)v82;
        float v97 = (uint16x8_t *)v84;
        uint64_t v98 = (const float *)v87;
        do
        {
          uint64_t v99 = v98;
          float32x4x4_t v209 = vld4q_f32(v98);
          uint64_t v100 = v98 + 16;
          float32x4x4_t v210 = vld4q_f32(v100);
          if (v95)
          {
            float32x4_t v101 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
            int16x8_t v102 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(v209.val[3], v101)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(v210.val[3], v101)));
          }
          else
          {
            int16x8_t v102 = 0uLL;
          }
          float16x8_t v103 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v209.val[1]), v210.val[1]);
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v209.val[0]), v210.val[0]), v92), (float16x8_t)0), v93));
          uint32x4_t v105 = vmovl_high_u16(v104);
          uint32x4_t v106 = vmovl_u16(*(uint16x4_t *)v104.i8);
          v107.i16[0] = *(_WORD *)(v57 + 2 * v106.u32[0]);
          v107.i16[1] = *(_WORD *)(v57 + 2 * v106.u32[1]);
          v107.i16[2] = *(_WORD *)(v57 + 2 * v106.u32[2]);
          v107.i16[3] = *(_WORD *)(v57 + 2 * v106.u32[3]);
          v107.i16[4] = *(_WORD *)(v57 + 2 * v105.u32[0]);
          v107.i16[5] = *(_WORD *)(v57 + 2 * v105.u32[1]);
          v107.i16[6] = *(_WORD *)(v57 + 2 * v105.u32[2]);
          v107.i16[7] = *(_WORD *)(v57 + 2 * v105.u32[3]);
          uint16x8_t v108 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v103, v92), (float16x8_t)0), v93));
          uint32x4_t v109 = vmovl_high_u16(v108);
          uint32x4_t v110 = vmovl_u16(*(uint16x4_t *)v108.i8);
          v103.i16[0] = *(_WORD *)(v57 + 2 * v110.u32[0]);
          v103.i16[1] = *(_WORD *)(v57 + 2 * v110.u32[1]);
          v103.i16[2] = *(_WORD *)(v57 + 2 * v110.u32[2]);
          v103.i16[3] = *(_WORD *)(v57 + 2 * v110.u32[3]);
          v103.i16[4] = *(_WORD *)(v57 + 2 * v109.u32[0]);
          v103.i16[5] = *(_WORD *)(v57 + 2 * v109.u32[1]);
          v103.i16[6] = *(_WORD *)(v57 + 2 * v109.u32[2]);
          v103.i16[7] = *(_WORD *)(v57 + 2 * v109.u32[3]);
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v209.val[2]), v210.val[2]), v92), (float16x8_t)0), v93));
          uint32x4_t v112 = vmovl_high_u16(v111);
          uint32x4_t v113 = vmovl_u16(*(uint16x4_t *)v111.i8);
          v114.i16[0] = *(_WORD *)(v57 + 2 * v113.u32[0]);
          v114.i16[1] = *(_WORD *)(v57 + 2 * v113.u32[1]);
          v114.i16[2] = *(_WORD *)(v57 + 2 * v113.u32[2]);
          v114.i16[3] = *(_WORD *)(v57 + 2 * v113.u32[3]);
          v114.i16[4] = *(_WORD *)(v57 + 2 * v112.u32[0]);
          v114.i16[5] = *(_WORD *)(v57 + 2 * v112.u32[1]);
          v114.i16[6] = *(_WORD *)(v57 + 2 * v112.u32[2]);
          v114.i16[7] = *(_WORD *)(v57 + 2 * v112.u32[3]);
          uint16x8_t v115 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v107, v189), v103, v188), v114, v187), vmaxq_f16(vmaxq_f16(v107, v103), v114), _H7), (float16x8_t)0), v93));
          uint32x4_t v116 = vmovl_high_u16(v115);
          float16x8_t v117 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v115.i8);
          v117.i16[0] = *(_WORD *)(v53 + 2 * v117.u32[0]);
          v117.i16[1] = *(_WORD *)(v53 + 2 * v117.u32[1]);
          v117.i16[2] = *(_WORD *)(v53 + 2 * v117.u32[2]);
          v117.i16[3] = *(_WORD *)(v53 + 2 * v117.u32[3]);
          v117.i16[4] = *(_WORD *)(v53 + 2 * v116.u32[0]);
          v117.i16[5] = *(_WORD *)(v53 + 2 * v116.u32[1]);
          v117.i16[6] = *(_WORD *)(v53 + 2 * v116.u32[2]);
          v117.i16[7] = *(_WORD *)(v53 + 2 * v116.u32[3]);
          float16x8_t v118 = vmulq_f16(v107, v117);
          float16x8_t v119 = vmulq_f16(v103, v117);
          float16x8_t v120 = vmulq_f16(v114, v117);
          float16x8_t v121 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v118, _H0), v119, _H1), v120, _H2);
          float16x8_t v122 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v120, _H11), v119, _H8), v118, _H10);
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v118, v186), v119, v185), v120, v184), (float16x8_t)0), v93));
          uint32x4_t v124 = vmovl_high_u16(v123);
          uint32x4_t v125 = vmovl_u16(*(uint16x4_t *)v123.i8);
          v126.i16[0] = *(_WORD *)(v56 + 2 * v125.u32[0]);
          v126.i16[1] = *(_WORD *)(v56 + 2 * v125.u32[1]);
          v126.i16[2] = *(_WORD *)(v56 + 2 * v125.u32[2]);
          v126.i16[3] = *(_WORD *)(v56 + 2 * v125.u32[3]);
          v126.i16[4] = *(_WORD *)(v56 + 2 * v124.u32[0]);
          v126.i16[5] = *(_WORD *)(v56 + 2 * v124.u32[1]);
          v126.i16[6] = *(_WORD *)(v56 + 2 * v124.u32[2]);
          v126.i16[7] = *(_WORD *)(v56 + 2 * v124.u32[3]);
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v93));
          uint32x4_t v128 = vmovl_high_u16(v127);
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v127.i8);
          v130.i16[0] = *(_WORD *)(v56 + 2 * v129.u32[0]);
          v130.i16[1] = *(_WORD *)(v56 + 2 * v129.u32[1]);
          v130.i16[2] = *(_WORD *)(v56 + 2 * v129.u32[2]);
          v130.i16[3] = *(_WORD *)(v56 + 2 * v129.u32[3]);
          v130.i16[4] = *(_WORD *)(v56 + 2 * v128.u32[0]);
          v130.i16[5] = *(_WORD *)(v56 + 2 * v128.u32[1]);
          v130.i16[6] = *(_WORD *)(v56 + 2 * v128.u32[2]);
          v130.i16[7] = *(_WORD *)(v56 + 2 * v128.u32[3]);
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v93));
          uint32x4_t v132 = vmovl_high_u16(v131);
          uint32x4_t v133 = vmovl_u16(*(uint16x4_t *)v131.i8);
          v134.i16[0] = *(_WORD *)(v56 + 2 * v133.u32[0]);
          v134.i16[1] = *(_WORD *)(v56 + 2 * v133.u32[1]);
          v134.i16[2] = *(_WORD *)(v56 + 2 * v133.u32[2]);
          v134.i16[3] = *(_WORD *)(v56 + 2 * v133.u32[3]);
          v134.i16[4] = *(_WORD *)(v56 + 2 * v132.u32[0]);
          v134.i16[5] = *(_WORD *)(v56 + 2 * v132.u32[1]);
          v134.i16[6] = *(_WORD *)(v56 + 2 * v132.u32[2]);
          v134.i16[7] = *(_WORD *)(v56 + 2 * v132.u32[3]);
          *v97++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v78, v126, v192), v130, v191), v134, v190), v78), v80)), v89);
          if (v96)
          {
            v208.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v79, v126, v176), v130, v175), v134, v174), v81), v83), v81), v83)), v89);
            v208.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v79, v126, v173), v130, v172), v134, v171)), v89);
            vst2q_s16(v96, v208);
            v96 += 16;
          }
          if (v95) {
            *v95++ = v102;
          }
          v94 += 8;
          uint64_t v98 = v99 + 32;
        }
        while (v94 < (int)v7 - 7);
        uint64_t v135 = (uint64_t)(v99 + 32);
        unint64_t v136 = v7 & 0xFFFFFFF8;
        _S14 = v167;
        _S13 = v168;
        _S15 = v166;
      }
      _CF = v7 >= v136;
      unint64_t v137 = v7 - v136;
      if (v137 != 0 && _CF)
      {
        do
        {
          _D4.i32[0] = *(_DWORD *)(v135 + 4 * v207);
          _D4.i32[1] = *(_DWORD *)(v135 + 4 * BYTE1(v207));
          _D5 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(_D4, _D5), 0), _D5)));
          _D3.i16[0] = *(_WORD *)(v57 + 2 * _D3.u32[0]);
          __asm { FCVT            S3, H3 }
          _D4.i16[0] = *(_WORD *)(v57 + 2 * _D3.u32[1]);
          __asm { FCVT            S4, H4 }
          _D5.i16[0] = *(_WORD *)(v57
                                + 2
                                * llroundf(fminf(fmaxf(*(float *)(v135 + 4 * BYTE2(v207)) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          float v144 = (float)((float)((float)(v195 * _S4) + (float)(v196 * _S3)) + (float)(v194 * _S5))
               + (float)(v193 * fmaxf(_S3, fmaxf(_S4, _S5)));
          float v145 = 8191.0;
          if (v144 <= 8191.0)
          {
            float v145 = v144;
            if (v144 < 0.0) {
              float v145 = 0.0;
            }
          }
          _H6 = *(_WORD *)(v53 + 2 * llroundf(v145));
          __asm { FCVT            S6, H6 }
          float v148 = _S3 * _S6;
          _S4 = _S4 * _S6;
          float v150 = _S5 * _S6;
          float v151 = (float)((float)(v204 * _S4) + (float)(v148 * v205)) + (float)(v150 * v203);
          float v152 = (float)((float)(v201 * _S4) + (float)(v148 * v202)) + (float)(v150 * v200);
          _S3 = (float)(v198 * _S4) + (float)(v148 * v199);
          LOWORD(_S4) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          __asm { FCVT            S27, H4 }
          LOWORD(_S4) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          __asm { FCVT            S28, H4 }
          LOWORD(_S3) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(_S3 + (float)(v150 * v197), 0.0), 8191.0)));
          __asm { FCVT            S29, H3 }
          float v157 = (float)((float)((float)(_S14 * _S28) + (float)(_S13 * _S27)) + (float)(_S15 * _S29)) + v41;
          float v158 = (float)v30;
          if (v157 <= (float)v30)
          {
            float v158 = (float)((float)((float)(_S14 * _S28) + (float)(_S13 * _S27)) + (float)(_S15 * _S29)) + v41;
            if (v157 < v41) {
              float v158 = (float)v27;
            }
          }
          float v159 = *(float *)(v135 + 4 * HIBYTE(v207));
          v97->i16[0] = llroundf(v158) << v88;
          float v97 = (uint16x8_t *)((char *)v97 + 2);
          if (v96)
          {
            float v160 = (float)((float)(v42 + (float)(_S27 * v182)) + (float)(_S28 * v181)) + (float)(_S29 * v180);
            float v161 = (float)v32;
            if (v160 <= v49)
            {
              float v161 = (float)((float)(v42 + (float)(_S27 * v182)) + (float)(_S28 * v181)) + (float)(_S29 * v180);
              if (v160 < v183) {
                float v161 = (float)v31;
              }
            }
            float v162 = (float)((float)(v42 + (float)(_S27 * v179)) + (float)(_S28 * v178)) + (float)(_S29 * v177);
            *float v96 = llroundf(v161) << v88;
            float v163 = (float)v32;
            if (v162 <= v49)
            {
              float v163 = (float)((float)(v42 + (float)(_S27 * v179)) + (float)(_S28 * v178)) + (float)(_S29 * v177);
              if (v162 < v183) {
                float v163 = (float)v31;
              }
            }
            v96[1] = llroundf(v163) << v88;
            v96 += 2;
          }
          if (v95)
          {
            v95->i16[0] = llroundf(v159 * 65535.0);
            float v95 = (int16x8_t *)((char *)v95 + 2);
          }
          v135 += 16;
          --v137;
        }
        while (v137);
      }
      v87 += v169;
      v84 += v170;
      v82 += v23;
      uint64_t result = (int16x8_t *)((char *)result + v24);
      ++v40;
    }
    while (v40 != v50);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf444_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(result + 20);
    unint64_t v13 = v9 + *(void *)(result + 44);
    unint64_t v14 = v10 - v9;
    uint64_t v15 = *(void *)(result + 152);
    uint64_t v16 = *(uint64_t **)(result + 136);
    uint64_t v17 = *(void **)(result + 56);
    uint64_t v18 = **(void **)(result + 64);
    uint64_t v19 = *v16;
    uint64_t v20 = v16[1];
    uint64_t v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    float v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    float v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    float v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    float v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v15 + 152);
    float v26 = (float)LODWORD(a7);
    float v27 = *(float *)(v15 + 36);
    float v28 = *(float *)(v15 + 40);
    float v29 = *(float *)(v15 + 44);
    float v104 = *(float *)(v15 + 48);
    float v103 = *(float *)(v15 + 52);
    float v102 = *(float *)(v15 + 56);
    float v30 = *(float *)(v15 + 64);
    float v101 = *(float *)(v15 + 60);
    float v31 = *(float *)(v15 + 68);
    float v32 = *(float *)(v15 + 72);
    float v33 = *(float *)(v15 + 76);
    float v34 = *(float *)(v15 + 80);
    float v35 = *(float *)(v15 + 84);
    float v36 = *(float *)(v15 + 88);
    float v37 = *(float *)(v15 + 92);
    float v38 = *(float *)(v15 + 96);
    float v39 = *(float *)(v15 + 100);
    float v40 = *(float *)(v15 + 104);
    uint64_t v41 = v15 + 164;
    uint64_t v42 = v15 + 16548;
    uint64_t v43 = v15 + 32932;
    float v45 = *(float *)(v15 + 108);
    float v44 = *(float *)(v15 + 112);
    float v46 = *(float *)(v15 + 116);
    float v47 = *(float *)(v15 + 120);
    uint64_t v48 = *(uint64_t **)(result + 128);
    uint64_t v49 = *(void *)(result + 112);
    unint64_t v50 = *(void *)(result + 104) * a2 / v8 + *(void *)(result + 120);
    uint64_t v51 = *(void *)(result + 36);
    unsigned int v52 = *(unsigned __int8 *)(v15 + 132);
    if (v52 >= 0x11) {
      char v53 = 0;
    }
    else {
      char v53 = 16 - v52;
    }
    uint64_t result = *(unsigned __int8 *)(v15 + 157);
    uint64_t v54 = *(unsigned __int8 *)(v15 + 156);
    uint64_t v55 = *(unsigned __int8 *)(v15 + 155);
    uint64_t v56 = *(unsigned __int8 *)(v15 + 154);
    uint64_t v57 = v48[2];
    if (v57) {
      uint64_t v58 = v57 + v50 * v21 + 2 * v49;
    }
    else {
      uint64_t v58 = 0;
    }
    uint64_t v60 = *v48;
    uint64_t v59 = v48[1];
    uint64_t v61 = v59 + v50 * v20 + 2 * v49;
    if (!v59) {
      uint64_t v61 = 0;
    }
    uint64_t v62 = v60 + v50 * v19 + 2 * v49;
    uint64_t v63 = *v17 + v18 * v13 + 16 * v51;
    char v64 = v53;
    float32x2_t v65 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v12)
      {
        uint64_t v66 = v12;
        float v67 = (_WORD *)v58;
        float v68 = (_WORD *)v61;
        float v69 = (_WORD *)v62;
        uint64_t v70 = v63;
        do
        {
          v71.i32[0] = *(_DWORD *)(v70 + 4 * v56);
          v71.i32[1] = *(_DWORD *)(v70 + 4 * v55);
          _D4 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v71, v65), 0), v65)));
          _D4.i16[0] = *(_WORD *)(v41 + 2 * _D4.u32[0]);
          __asm { FCVT            S16, H4 }
          _D4.i16[0] = *(_WORD *)(v41 + 2 * _D4.u32[1]);
          __asm { FCVT            S17, H4 }
          _D4.i16[0] = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(*(float *)(v70 + 4 * v54) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S13, H4 }
          float v80 = fmaxf(_S16, fmaxf(_S17, _S13));
          float v81 = (float)((float)((float)(v44 * _S17) + (float)(v45 * _S16)) + (float)(v46 * _S13)) + (float)(v47 * v80);
          float v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            float v82 = (float)((float)((float)(v44 * _S17) + (float)(v45 * _S16)) + (float)(v46 * _S13)) + (float)(v47 * v80);
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v42 + 2 * llroundf(v82));
          __asm { FCVT            S4, H4 }
          _S16 = _S16 * _S4;
          float v86 = _S17 * _S4;
          float v87 = _S13 * _S4;
          float v88 = (float)((float)(v33 * v86) + (float)(_S16 * v32)) + (float)(v87 * v34);
          float v89 = (float)((float)(v36 * v86) + (float)(_S16 * v35)) + (float)(v87 * v37);
          _S4 = (float)((float)(v39 * v86) + (float)(_S16 * v38)) + (float)(v87 * v40);
          LOWORD(_S16) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S13, H16 }
          LOWORD(_S16) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          LOWORD(_S4) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S17, H4 }
          float v94 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S13)) + (float)(v29 * _S17)) + v22;
          float v95 = v24;
          if (v94 <= v24)
          {
            float v95 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S13)) + (float)(v29 * _S17)) + v22;
            if (v94 < v22) {
              float v95 = v22;
            }
          }
          float v96 = *(float *)(v70 + 4 * result);
          *v69++ = llroundf(v95) << v64;
          if (v68)
          {
            float v97 = (float)((float)(v23 + (float)(_S13 * v104)) + (float)(_S16 * v103)) + (float)(_S17 * v102);
            float v98 = v26;
            if (v97 <= v26)
            {
              float v98 = (float)((float)(v23 + (float)(_S13 * v104)) + (float)(_S16 * v103)) + (float)(_S17 * v102);
              if (v97 < v25) {
                float v98 = v25;
              }
            }
            float v99 = (float)((float)(v23 + (float)(_S13 * v101)) + (float)(_S16 * v30)) + (float)(_S17 * v31);
            *float v68 = llroundf(v98) << v64;
            float v100 = v26;
            if (v99 <= v26)
            {
              float v100 = v99;
              if (v99 < v25) {
                float v100 = v25;
              }
            }
            v68[1] = llroundf(v100) << v64;
            v68 += 2;
          }
          if (v67) {
            *v67++ = llroundf(v96 * 65535.0);
          }
          v70 += 16;
          --v66;
        }
        while (v66);
      }
      v63 += v18;
      v62 += v19;
      v61 += v20;
      v58 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_xf444_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

__int16 *vt_Copy_RGfA_TRC_Mat_TRC_xf444_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4 = 0;
  unint64_t v5 = *(void *)(a1 + 20);
  uint64_t v142 = *(void *)(a1 + 36);
  uint64_t v6 = *(void *)(a1 + 44);
  uint64_t v7 = *(void *)(a1 + 28);
  unint64_t v8 = *a1;
  unint64_t v9 = v7 * a2 / v8;
  uint64_t v10 = v9 + v6;
  unint64_t v11 = (v7 + v7 * a2) / v8;
  uint64_t v12 = v11 + v6;
  uint64_t v13 = *((void *)a1 + 14);
  uint64_t v14 = *((void *)a1 + 19);
  unint64_t v15 = *((void *)a1 + 13) * a2;
  uint64_t v17 = *((void *)a1 + 15);
  uint64_t v16 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v19 = **((void **)a1 + 8);
  uint64_t v141 = **((void **)a1 + 7);
  uint64_t v20 = v18[1];
  uint64_t v144 = *v18;
  uint64_t v21 = v18[2];
  uint64_t v23 = *v16;
  uint64_t result = (__int16 *)v16[1];
  uint64_t v24 = v16[2];
  int v176 = *(_DWORD *)(v14 + 154);
  unsigned int v25 = *(unsigned __int16 *)(v14 + 144);
  char v26 = *(unsigned char *)(v14 + 132);
  unsigned int v27 = *(unsigned __int16 *)(v14 + 146);
  unsigned int v28 = *(unsigned __int16 *)(v14 + 148);
  unsigned int v29 = *(unsigned __int16 *)(v14 + 150);
  unsigned int v30 = *(unsigned __int16 *)(v14 + 152);
  float v174 = *(float *)(v14 + 36);
  float v173 = *(float *)(v14 + 40);
  float v172 = *(float *)(v14 + 44);
  float v155 = *(float *)(v14 + 52);
  float v156 = *(float *)(v14 + 48);
  float v153 = *(float *)(v14 + 60);
  float v154 = *(float *)(v14 + 56);
  LODWORD(a4) = *(_DWORD *)(v14 + 64);
  float v151 = *(float *)(v14 + 68);
  float v152 = *(float *)&a4;
  float v171 = *(float *)(v14 + 72);
  uint64_t v31 = v15 / v8 + v17;
  uint64_t v143 = v19;
  uint64_t v32 = v19 * v10;
  float v170 = *(float *)(v14 + 76);
  float v169 = *(float *)(v14 + 80);
  float v168 = *(float *)(v14 + 84);
  float v167 = *(float *)(v14 + 88);
  float v166 = *(float *)(v14 + 92);
  float v165 = *(float *)(v14 + 96);
  float v164 = *(float *)(v14 + 100);
  float v163 = *(float *)(v14 + 104);
  _D0.i32[1] = 0;
  memset(v175, 0, sizeof(v175));
  do
  {
    unsigned int v34 = 0;
    char v35 = *((unsigned char *)&v176 + v4);
    do
    {
      *((unsigned char *)v175 + 8 * (((_BYTE)v4 + (v34 >> 3)) & 0x1F) + v34) = v35 + 4 * v34;
      ++v34;
    }
    while (v34 != 8);
    ++v4;
  }
  while (v4 != 4);
  if (v11 != v9)
  {
    uint64_t v36 = 0;
    float v37 = (float)v25;
    float v38 = (float)v27;
    _S0 = v174;
    __asm { FCVT            H0, S0 }
    short float v162 = *(short float *)&_S0;
    float v157 = (float)v29;
    float v44 = (float)v30;
    uint64_t v45 = v12 - v10;
    unsigned __int8 v46 = 16 - v26;
    uint64_t v47 = v14 + 16548;
    uint64_t v48 = v14 + 164;
    _S0 = v173;
    __asm { FCVT            H0, S0 }
    short float v161 = *(short float *)&_S0;
    _S0 = v172;
    __asm { FCVT            H0, S0 }
    short float v160 = *(short float *)&_S0;
    _S0 = v156;
    __asm { FCVT            H0, S0 }
    short float v150 = *(short float *)&_S0;
    _S0 = v155;
    __asm { FCVT            H0, S0 }
    short float v149 = *(short float *)&_S0;
    _S0 = v154;
    __asm { FCVT            H0, S0 }
    short float v148 = *(short float *)&_S0;
    _S0 = v153;
    __asm { FCVT            H0, S0 }
    short float v147 = *(short float *)&_S0;
    _S0 = LODWORD(a4);
    __asm { FCVT            H0, S0 }
    short float v146 = *(short float *)&_S0;
    _S0 = v151;
    __asm { FCVT            H0, S0 }
    short float v145 = *(short float *)&_S0;
    _S0 = v171;
    __asm { FCVT            H0, S0 }
    short float v159 = *(short float *)&_S0;
    _S0 = v170;
    __asm { FCVT            H9, S0 }
    _S0 = v169;
    __asm { FCVT            H10, S0 }
    _S0 = v168;
    __asm { FCVT            H0, S0 }
    short float v158 = *(short float *)&_S0;
    _S0 = v167;
    __asm { FCVT            H11, S0 }
    _S0 = v166;
    __asm { FCVT            H12, S0 }
    if (_CF) {
      unsigned __int8 v67 = 0;
    }
    else {
      unsigned __int8 v67 = v46;
    }
    if (v24) {
      uint64_t v68 = v24 + v21 * v31 + 2 * v13;
    }
    else {
      uint64_t v68 = 0;
    }
    *(float *)_D0.i32 = v165;
    __asm { FCVT            H13, S0 }
    *(float *)_D0.i32 = v164;
    __asm { FCVT            H14, S0 }
    *(float *)_D0.i32 = v163;
    __asm { FCVT            H15, S0 }
    *(short float *)_D0.i16 = (short float)v25;
    float16x8_t v72 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v27;
    float16x8_t v73 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v28;
    float16x8_t v74 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    if (_ZF) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = (__int16 *)((char *)result + 2 * v13 + v20 * v31);
    }
    *(short float *)_D0.i16 = (short float)v29;
    float16x8_t v75 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    uint64_t v76 = v23 + v144 * v31 + 2 * v13;
    *(short float *)&a4 = (short float)v30;
    float16x8_t v77 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    uint64_t v78 = v141 + v32 + 16 * v142;
    unsigned __int8 v79 = v67;
    uint16x8_t v80 = (uint16x8_t)vdupq_n_s16(v67);
    v81.i64[0] = 0x7000700070007000;
    v81.i64[1] = 0x7000700070007000;
    v82.i64[0] = 0x9000900090009000;
    v82.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v5 < 8)
      {
        unint64_t v121 = 0;
        uint64_t v120 = v78;
        float v86 = (uint16x8_t *)v76;
        uint64_t v85 = result;
        uint64_t v84 = (int16x8_t *)v68;
      }
      else
      {
        int v83 = 0;
        uint64_t v84 = (int16x8_t *)v68;
        uint64_t v85 = result;
        float v86 = (uint16x8_t *)v76;
        float v87 = (const float *)v78;
        do
        {
          float v88 = v87;
          float32x4x4_t v178 = vld4q_f32(v87);
          float v89 = v87 + 16;
          float32x4x4_t v179 = vld4q_f32(v89);
          if (v84)
          {
            float32x4_t v90 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
            int16x8_t v91 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(v178.val[3], v90)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(v179.val[3], v90)));
          }
          else
          {
            int16x8_t v91 = 0uLL;
          }
          float16x8_t v92 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v178.val[0]), v179.val[0]);
          float16x8_t v93 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v178.val[1]), v179.val[1]);
          float16x8_t v94 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v178.val[2]), v179.val[2]);
          uint16x8_t v95 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v92, v81), (float16x8_t)0), v82));
          uint32x4_t v96 = vmovl_high_u16(v95);
          uint32x4_t v97 = vmovl_u16(*(uint16x4_t *)v95.i8);
          v98.i16[0] = *(_WORD *)(v48 + 2 * v97.u32[0]);
          v98.i16[1] = *(_WORD *)(v48 + 2 * v97.u32[1]);
          v98.i16[2] = *(_WORD *)(v48 + 2 * v97.u32[2]);
          v98.i16[3] = *(_WORD *)(v48 + 2 * v97.u32[3]);
          v98.i16[4] = *(_WORD *)(v48 + 2 * v96.u32[0]);
          v98.i16[5] = *(_WORD *)(v48 + 2 * v96.u32[1]);
          v98.i16[6] = *(_WORD *)(v48 + 2 * v96.u32[2]);
          v98.i16[7] = *(_WORD *)(v48 + 2 * v96.u32[3]);
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v93, v81), (float16x8_t)0), v82));
          uint32x4_t v100 = vmovl_high_u16(v99);
          uint32x4_t v101 = vmovl_u16(*(uint16x4_t *)v99.i8);
          v102.i16[0] = *(_WORD *)(v48 + 2 * v101.u32[0]);
          v102.i16[1] = *(_WORD *)(v48 + 2 * v101.u32[1]);
          v102.i16[2] = *(_WORD *)(v48 + 2 * v101.u32[2]);
          v102.i16[3] = *(_WORD *)(v48 + 2 * v101.u32[3]);
          v102.i16[4] = *(_WORD *)(v48 + 2 * v100.u32[0]);
          v102.i16[5] = *(_WORD *)(v48 + 2 * v100.u32[1]);
          v102.i16[6] = *(_WORD *)(v48 + 2 * v100.u32[2]);
          v102.i16[7] = *(_WORD *)(v48 + 2 * v100.u32[3]);
          uint16x8_t v103 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(v94, v81), (float16x8_t)0), v82));
          uint32x4_t v104 = vmovl_high_u16(v103);
          float16x8_t v105 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v103.i8);
          v105.i16[0] = *(_WORD *)(v48 + 2 * v105.u32[0]);
          v105.i16[1] = *(_WORD *)(v48 + 2 * v105.u32[1]);
          v105.i16[2] = *(_WORD *)(v48 + 2 * v105.u32[2]);
          v105.i16[3] = *(_WORD *)(v48 + 2 * v105.u32[3]);
          v105.i16[4] = *(_WORD *)(v48 + 2 * v104.u32[0]);
          v105.i16[5] = *(_WORD *)(v48 + 2 * v104.u32[1]);
          v105.i16[6] = *(_WORD *)(v48 + 2 * v104.u32[2]);
          v105.i16[7] = *(_WORD *)(v48 + 2 * v104.u32[3]);
          float16x8_t v106 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v98, v158), v102, _H11), v105, _H12);
          float16x8_t v107 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v105, _H15), v102, _H14), v98, _H13);
          uint16x8_t v108 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v98, v159), v102, _H9), v105, _H10), (float16x8_t)0), v82));
          uint32x4_t v109 = vmovl_high_u16(v108);
          uint32x4_t v110 = vmovl_u16(*(uint16x4_t *)v108.i8);
          v111.i16[0] = *(_WORD *)(v47 + 2 * v110.u32[0]);
          v111.i16[1] = *(_WORD *)(v47 + 2 * v110.u32[1]);
          v111.i16[2] = *(_WORD *)(v47 + 2 * v110.u32[2]);
          v111.i16[3] = *(_WORD *)(v47 + 2 * v110.u32[3]);
          v111.i16[4] = *(_WORD *)(v47 + 2 * v109.u32[0]);
          v111.i16[5] = *(_WORD *)(v47 + 2 * v109.u32[1]);
          v111.i16[6] = *(_WORD *)(v47 + 2 * v109.u32[2]);
          v111.i16[7] = *(_WORD *)(v47 + 2 * v109.u32[3]);
          uint16x8_t v112 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v106, (float16x8_t)0), v82));
          uint32x4_t v113 = vmovl_high_u16(v112);
          uint32x4_t v114 = vmovl_u16(*(uint16x4_t *)v112.i8);
          v115.i16[0] = *(_WORD *)(v47 + 2 * v114.u32[0]);
          v115.i16[1] = *(_WORD *)(v47 + 2 * v114.u32[1]);
          v115.i16[2] = *(_WORD *)(v47 + 2 * v114.u32[2]);
          v115.i16[3] = *(_WORD *)(v47 + 2 * v114.u32[3]);
          v115.i16[4] = *(_WORD *)(v47 + 2 * v113.u32[0]);
          v115.i16[5] = *(_WORD *)(v47 + 2 * v113.u32[1]);
          v115.i16[6] = *(_WORD *)(v47 + 2 * v113.u32[2]);
          v115.i16[7] = *(_WORD *)(v47 + 2 * v113.u32[3]);
          uint16x8_t v116 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v107, (float16x8_t)0), v82));
          uint32x4_t v117 = vmovl_high_u16(v116);
          uint32x4_t v118 = vmovl_u16(*(uint16x4_t *)v116.i8);
          v119.i16[0] = *(_WORD *)(v47 + 2 * v118.u32[0]);
          v119.i16[1] = *(_WORD *)(v47 + 2 * v118.u32[1]);
          v119.i16[2] = *(_WORD *)(v47 + 2 * v118.u32[2]);
          v119.i16[3] = *(_WORD *)(v47 + 2 * v118.u32[3]);
          v119.i16[4] = *(_WORD *)(v47 + 2 * v117.u32[0]);
          v119.i16[5] = *(_WORD *)(v47 + 2 * v117.u32[1]);
          v119.i16[6] = *(_WORD *)(v47 + 2 * v117.u32[2]);
          v119.i16[7] = *(_WORD *)(v47 + 2 * v117.u32[3]);
          *v86++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v72, v111, v162), v115, v161), v119, v160), v72), v74)), v80);
          if (v85)
          {
            v177.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v73, v111, v150), v115, v149), v119, v148), v75), v77), v75), v77)), v80);
            v177.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v73, v111, v147), v115, v146), v119, v145)), v80);
            vst2q_s16(v85, v177);
            v85 += 16;
          }
          if (v84) {
            *v84++ = v91;
          }
          v83 += 8;
          float v87 = v88 + 32;
        }
        while (v83 < (int)v5 - 7);
        uint64_t v120 = (uint64_t)(v88 + 32);
        unint64_t v121 = v5 & 0xFFFFFFF8;
      }
      _CF = v5 >= v121;
      unint64_t v122 = v5 - v121;
      if (v122 != 0 && _CF)
      {
        do
        {
          v123.i32[0] = *(_DWORD *)(v120 + 4 * v176);
          v123.i32[1] = *(_DWORD *)(v120 + 4 * BYTE1(v176));
          _D7 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D6 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v123, _D7), 0), _D7)));
          _D6.i16[0] = *(_WORD *)(v48 + 2 * _D6.u32[0]);
          __asm { FCVT            S6, H6 }
          _D7.i16[0] = *(_WORD *)(v48 + 2 * _D6.u32[1]);
          __asm { FCVT            S7, H7 }
          _H4 = *(_WORD *)(v48 + 2
                               * llroundf(fminf(fmaxf(*(float *)(v120 + 4 * BYTE2(v176)) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          float v128 = (float)((float)(v170 * _D7.f32[0]) + (float)(*(float *)_D6.i32 * v171)) + (float)(_S4 * v169);
          float v129 = (float)((float)(v167 * _D7.f32[0]) + (float)(*(float *)_D6.i32 * v168)) + (float)(_S4 * v166);
          _S4 = (float)((float)(v164 * _D7.f32[0]) + (float)(*(float *)_D6.i32 * v165)) + (float)(_S4 * v163);
          _D6.i16[0] = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S22, H6 }
          _D6.i16[0] = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S23, H6 }
          LOWORD(_S4) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S24, H4 }
          float v134 = (float)((float)((float)(v173 * _S23) + (float)(v174 * _S22)) + (float)(v172 * _S24)) + v37;
          float v135 = (float)v28;
          if (v134 <= (float)v28)
          {
            float v135 = (float)((float)((float)(v173 * _S23) + (float)(v174 * _S22)) + (float)(v172 * _S24)) + v37;
            if (v134 < v37) {
              float v135 = (float)v25;
            }
          }
          float v136 = *(float *)(v120 + 4 * HIBYTE(v176));
          v86->i16[0] = llroundf(v135) << v79;
          float v86 = (uint16x8_t *)((char *)v86 + 2);
          if (v85)
          {
            float v137 = (float)((float)(v38 + (float)(_S22 * v156)) + (float)(_S23 * v155)) + (float)(_S24 * v154);
            float v138 = (float)v30;
            if (v137 <= v44)
            {
              float v138 = (float)((float)(v38 + (float)(_S22 * v156)) + (float)(_S23 * v155)) + (float)(_S24 * v154);
              if (v137 < v157) {
                float v138 = (float)v29;
              }
            }
            float v139 = (float)((float)(v38 + (float)(_S22 * v153)) + (float)(_S23 * v152)) + (float)(_S24 * v151);
            __int16 *v85 = llroundf(v138) << v79;
            float v140 = (float)v30;
            if (v139 <= v44)
            {
              float v140 = (float)((float)(v38 + (float)(_S22 * v153)) + (float)(_S23 * v152)) + (float)(_S24 * v151);
              if (v139 < v157) {
                float v140 = (float)v29;
              }
            }
            v85[1] = llroundf(v140) << v79;
            v85 += 2;
          }
          if (v84)
          {
            v84->i16[0] = llroundf(v136 * 65535.0);
            uint64_t v84 = (int16x8_t *)((char *)v84 + 2);
          }
          v120 += 16;
          --v122;
        }
        while (v122);
      }
      v78 += v143;
      v76 += v144;
      uint64_t result = (__int16 *)((char *)result + v20);
      v68 += v21;
      ++v36;
    }
    while (v36 != v45);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_xf444_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(result + 20);
    unint64_t v13 = v9 + *(void *)(result + 44);
    unint64_t v14 = v10 - v9;
    uint64_t v15 = *(void *)(result + 152);
    uint64_t v16 = *(uint64_t **)(result + 136);
    uint64_t v17 = *(void **)(result + 56);
    uint64_t v18 = **(void **)(result + 64);
    uint64_t v19 = *v16;
    uint64_t v20 = v16[1];
    uint64_t v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    float v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    float v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    float v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    float v25 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v15 + 152);
    float v26 = (float)LODWORD(a7);
    float v27 = *(float *)(v15 + 36);
    float v28 = *(float *)(v15 + 40);
    float v29 = *(float *)(v15 + 44);
    float v91 = *(float *)(v15 + 48);
    float v30 = *(float *)(v15 + 52);
    float v31 = *(float *)(v15 + 56);
    float v32 = *(float *)(v15 + 60);
    float v33 = *(float *)(v15 + 64);
    float v34 = *(float *)(v15 + 68);
    float v35 = *(float *)(v15 + 72);
    float v36 = *(float *)(v15 + 76);
    float v37 = *(float *)(v15 + 80);
    float v38 = *(float *)(v15 + 84);
    float v39 = *(float *)(v15 + 88);
    float v40 = *(float *)(v15 + 92);
    float v41 = *(float *)(v15 + 96);
    float v42 = *(float *)(v15 + 100);
    float v43 = *(float *)(v15 + 104);
    uint64_t v44 = v15 + 164;
    uint64_t v45 = v15 + 16548;
    unsigned __int8 v46 = *(uint64_t **)(result + 128);
    uint64_t v47 = *(void *)(result + 112);
    unint64_t v48 = *(void *)(result + 104) * a2 / v8 + *(void *)(result + 120);
    uint64_t v49 = *(void *)(result + 36);
    unsigned int v50 = *(unsigned __int8 *)(v15 + 132);
    if (v50 >= 0x11) {
      char v51 = 0;
    }
    else {
      char v51 = 16 - v50;
    }
    uint64_t v52 = *(unsigned __int8 *)(v15 + 157);
    uint64_t result = *(unsigned __int8 *)(v15 + 156);
    uint64_t v53 = *(unsigned __int8 *)(v15 + 155);
    uint64_t v54 = *(unsigned __int8 *)(v15 + 154);
    uint64_t v55 = v46[2];
    if (v55) {
      uint64_t v56 = v55 + v48 * v21 + 2 * v47;
    }
    else {
      uint64_t v56 = 0;
    }
    uint64_t v58 = *v46;
    uint64_t v57 = v46[1];
    uint64_t v59 = v57 + v48 * v20 + 2 * v47;
    if (!v57) {
      uint64_t v59 = 0;
    }
    uint64_t v60 = v58 + v48 * v19 + 2 * v47;
    uint64_t v61 = *v17 + v18 * v13 + 16 * v49;
    char v62 = v51;
    float32x2_t v63 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v12)
      {
        uint64_t v64 = v12;
        uint64_t v65 = v61;
        uint64_t v66 = (_WORD *)v56;
        unsigned __int8 v67 = (_WORD *)v59;
        uint64_t v68 = (_WORD *)v60;
        do
        {
          v69.i32[0] = *(_DWORD *)(v65 + 4 * v54);
          v69.i32[1] = *(_DWORD *)(v65 + 4 * v53);
          _D4 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v69, v63), 0), v63)));
          _D4.i16[0] = *(_WORD *)(v44 + 2 * _D4.u32[0]);
          __asm { FCVT            S4, H4 }
          _H12 = *(_WORD *)(v44 + 2 * _D4.u32[1]);
          __asm { FCVT            S12, H12 }
          _H9 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(*(float *)(v65 + 4 * result) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          float v79 = (float)((float)(v36 * _S12) + (float)(*(float *)_D4.i32 * v35)) + (float)(_S9 * v37);
          float v80 = (float)((float)(v39 * _S12) + (float)(*(float *)_D4.i32 * v38)) + (float)(_S9 * v40);
          *(float *)_D4.i32 = (float)((float)(v42 * _S12) + (float)(*(float *)_D4.i32 * v41)) + (float)(_S9 * v43);
          LOWORD(_S9) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S13, H9 }
          LOWORD(_S9) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S14, H9 }
          _D4.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(*(float *)_D4.i32, 0.0), 8191.0)));
          __asm { FCVT            S15, H4 }
          float v84 = (float)((float)((float)(v28 * _S14) + (float)(v27 * _S13)) + (float)(v29 * _S15)) + v22;
          float v85 = v24;
          if (v84 <= v24)
          {
            float v85 = (float)((float)((float)(v28 * _S14) + (float)(v27 * _S13)) + (float)(v29 * _S15)) + v22;
            if (v84 < v22) {
              float v85 = v22;
            }
          }
          float v86 = *(float *)(v65 + 4 * v52);
          *v68++ = llroundf(v85) << v62;
          if (v67)
          {
            float v87 = (float)((float)(v23 + (float)(_S13 * v91)) + (float)(_S14 * v30)) + (float)(_S15 * v31);
            float v88 = v26;
            if (v87 <= v26)
            {
              float v88 = (float)((float)(v23 + (float)(_S13 * v91)) + (float)(_S14 * v30)) + (float)(_S15 * v31);
              if (v87 < v25) {
                float v88 = v25;
              }
            }
            float v89 = (float)((float)(v23 + (float)(_S13 * v32)) + (float)(_S14 * v33)) + (float)(_S15 * v34);
            *unsigned __int8 v67 = llroundf(v88) << v62;
            float v90 = v26;
            if (v89 <= v26)
            {
              float v90 = v89;
              if (v89 < v25) {
                float v90 = v25;
              }
            }
            v67[1] = llroundf(v90) << v62;
            v67 += 2;
          }
          if (v66) {
            *v66++ = llroundf(v86 * 65535.0);
          }
          v65 += 16;
          --v64;
        }
        while (v64);
      }
      v61 += v18;
      v60 += v19;
      v59 += v20;
      v56 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_xf444_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_xf444_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGfA_rgb_xf444_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *(void *)(a1 + 20);
  uint64_t v95 = *(void *)(a1 + 36);
  uint64_t v4 = *(void *)(a1 + 44);
  uint64_t v5 = *(void *)(a1 + 28);
  unint64_t v6 = *a1;
  unint64_t v7 = v5 * a2 / v6;
  uint64_t v8 = v7 + v4;
  unint64_t v9 = (v5 + v5 * a2) / v6;
  uint64_t v10 = v9 + v4;
  uint64_t v11 = *((void *)a1 + 14);
  unint64_t v12 = *((void *)a1 + 13) * a2;
  uint64_t v13 = *((void *)a1 + 19);
  uint64_t v14 = *((void *)a1 + 15);
  uint64_t v15 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v16 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v17 = **((void **)a1 + 8);
  uint64_t v94 = **((void **)a1 + 7);
  uint64_t v18 = *v16;
  uint64_t v19 = v16[1];
  uint64_t v20 = v16[2];
  uint64_t v93 = *v15;
  uint64_t v22 = v15[1];
  uint64_t v21 = v15[2];
  unsigned int v23 = *(_DWORD *)(v13 + 136);
  int v108 = *(_DWORD *)(v13 + 154);
  unsigned int v24 = *(unsigned __int16 *)(v13 + 144);
  unsigned int v25 = *(unsigned __int8 *)(v13 + 132);
  unsigned int v26 = *(unsigned __int16 *)(v13 + 146);
  unsigned int v27 = *(unsigned __int16 *)(v13 + 148);
  unsigned int v28 = *(unsigned __int16 *)(v13 + 150);
  unsigned int v29 = *(unsigned __int16 *)(v13 + 152);
  uint64_t v30 = v12 / v6 + v14;
  uint64_t v92 = v17 * v8;
  _S16 = *(float *)(v13 + 36);
  _S6 = *(float *)(v13 + 40);
  _S7 = *(float *)(v13 + 44);
  float v105 = *(float *)(v13 + 52);
  float v106 = *(float *)(v13 + 48);
  float v103 = *(float *)(v13 + 60);
  float v104 = *(float *)(v13 + 56);
  float v101 = *(float *)(v13 + 68);
  float v102 = *(float *)(v13 + 64);
  _D0.i32[1] = 0;
  memset(v107, 0, sizeof(v107));
  do
  {
    unsigned int v35 = 0;
    uint64_t result = *((unsigned __int8 *)&v108 + v2);
    do
    {
      *((unsigned char *)v107 + 8 * (((_BYTE)v2 + (v35 >> 3)) & 0x1F) + v35) = result + 4 * v35;
      ++v35;
    }
    while (v35 != 8);
    ++v2;
  }
  while (v2 != 4);
  if (v9 != v7)
  {
    uint64_t v37 = 0;
    uint64_t v38 = v10 - v8;
    _S17 = (float)v23;
    float v40 = (float)v24;
    float v41 = (float)v26;
    float v42 = (float)v27;
    float v43 = (float)v28;
    float v44 = (float)v29;
    __asm
    {
      FCVT            H8, S16
      FCVT            H9, S6
      FCVT            H10, S7
    }
    *(float *)_D0.i32 = v106;
    __asm { FCVT            H0, S0 }
    short float v100 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v105;
    __asm { FCVT            H0, S0 }
    short float v99 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v104;
    __asm { FCVT            H0, S0 }
    short float v98 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v103;
    __asm { FCVT            H0, S0 }
    short float v97 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v102;
    __asm { FCVT            H0, S0 }
    short float v96 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v101;
    __asm { FCVT            H15, S0 }
    *(short float *)_D0.i16 = (short float)v24;
    float16x8_t v53 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v26;
    float16x8_t v54 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v27;
    float16x8_t v55 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v28;
    float16x8_t v56 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v29;
    float16x8_t v57 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    if (v25 >= 0x11) {
      unsigned __int8 v58 = 0;
    }
    else {
      unsigned __int8 v58 = 16 - v25;
    }
    if (v21) {
      uint64_t v59 = v21 + v20 * v30 + 2 * v11;
    }
    else {
      uint64_t v59 = 0;
    }
    if (v22) {
      uint64_t v60 = v22 + v19 * v30 + 2 * v11;
    }
    else {
      uint64_t v60 = 0;
    }
    uint64_t v61 = v93 + v18 * v30 + 2 * v11;
    uint64_t result = v94 + v92 + 16 * v95;
    __asm { FCVT            H4, S17 }
    uint16x8_t v63 = (uint16x8_t)vdupq_n_s16(v58);
    do
    {
      if ((int)v3 < 8)
      {
        unint64_t v80 = 0;
        uint64_t v79 = result;
        unsigned __int8 v67 = (uint16x8_t *)v61;
        uint64_t v66 = (__int16 *)v60;
        uint64_t v65 = (int16x8_t *)v59;
      }
      else
      {
        int v64 = 0;
        uint64_t v65 = (int16x8_t *)v59;
        uint64_t v66 = (__int16 *)v60;
        unsigned __int8 v67 = (uint16x8_t *)v61;
        uint64_t v68 = (const float *)result;
        do
        {
          float32x2_t v69 = v68;
          float32x4x4_t v110 = vld4q_f32(v68);
          uint64_t v70 = v68 + 16;
          float32x4x4_t v111 = vld4q_f32(v70);
          if (v65)
          {
            float32x4_t v71 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
            int16x8_t v72 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(v110.val[3], v71)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(v111.val[3], v71)));
          }
          else
          {
            int16x8_t v72 = 0uLL;
          }
          float16x8_t v73 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v110.val[0]), v111.val[0]);
          float16x8_t v74 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v110.val[2]), v111.val[2]);
          float16x8_t v75 = vmulq_n_f16(v73, _H4);
          float16x8_t v76 = vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v110.val[1]), v111.val[1]), _H4);
          float16x8_t v77 = vmulq_n_f16(v74, _H4);
          *v67++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v53, v75, _H8), v76, _H9), v77, _H10), v53), v55)), v63);
          if (v66)
          {
            float16x8_t v78 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v54, v75, v97), v76, v96), v77, _H15);
            v109.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v54, v75, v100), v76, v99), v77, v98), v56), v57), v56), v57)), v63);
            v109.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(v78), v63);
            vst2q_s16(v66, v109);
            v66 += 16;
          }
          if (v65) {
            *v65++ = v72;
          }
          v64 += 8;
          uint64_t v68 = v69 + 32;
        }
        while (v64 < (int)v3 - 7);
        uint64_t v79 = (uint64_t)(v69 + 32);
        unint64_t v80 = v3 & 0xFFFFFFF8;
      }
      _CF = v3 >= v80;
      unint64_t v81 = v3 - v80;
      if (v81 != 0 && _CF)
      {
        do
        {
          float v82 = *(float *)(v79 + 4 * v108) * _S17;
          float v83 = *(float *)(v79 + 4 * BYTE1(v108)) * _S17;
          float v84 = *(float *)(v79 + 4 * BYTE2(v108)) * _S17;
          float v85 = (float)((float)((float)(_S6 * v83) + (float)(_S16 * v82)) + (float)(_S7 * v84)) + v40;
          float v86 = v42;
          if (v85 <= v42)
          {
            float v86 = (float)((float)((float)(_S6 * v83) + (float)(_S16 * v82)) + (float)(_S7 * v84)) + v40;
            if (v85 < v40) {
              float v86 = (float)v24;
            }
          }
          float v87 = *(float *)(v79 + 4 * HIBYTE(v108));
          v67->i16[0] = llroundf(v86) << v58;
          unsigned __int8 v67 = (uint16x8_t *)((char *)v67 + 2);
          if (v66)
          {
            float v88 = (float)((float)(v41 + (float)(v82 * v106)) + (float)(v83 * v105)) + (float)(v84 * v104);
            float v89 = v44;
            if (v88 <= v44)
            {
              float v89 = (float)((float)(v41 + (float)(v82 * v106)) + (float)(v83 * v105)) + (float)(v84 * v104);
              if (v88 < v43) {
                float v89 = v43;
              }
            }
            float v90 = (float)((float)(v41 + (float)(v82 * v103)) + (float)(v83 * v102)) + (float)(v84 * v101);
            *uint64_t v66 = llroundf(v89) << v58;
            float v91 = v44;
            if (v90 <= v44)
            {
              float v91 = (float)((float)(v41 + (float)(v82 * v103)) + (float)(v83 * v102)) + (float)(v84 * v101);
              if (v90 < v43) {
                float v91 = v43;
              }
            }
            v66[1] = llroundf(v91) << v58;
            v66 += 2;
          }
          if (v65)
          {
            v65->i16[0] = llroundf(v87 * 65535.0);
            uint64_t v65 = (int16x8_t *)((char *)v65 + 2);
          }
          v79 += 16;
          --v81;
        }
        while (v81);
      }
      result += v17;
      v61 += v18;
      v60 += v19;
      v59 += v20;
      ++v37;
    }
    while (v37 != v38);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_xf444_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(uint64_t **)(result + 136);
    uint64_t v18 = *(void **)(result + 56);
    uint64_t v19 = **(void **)(result + 64);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    float v23 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    float v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v28 = (float)LODWORD(a8);
    float v29 = *(float *)(v16 + 36);
    float v30 = *(float *)(v16 + 40);
    float v31 = *(float *)(v16 + 44);
    float v32 = *(float *)(v16 + 48);
    float v33 = *(float *)(v16 + 52);
    float v34 = *(float *)(v16 + 56);
    float v35 = *(float *)(v16 + 60);
    float v36 = *(float *)(v16 + 64);
    float v37 = *(float *)(v16 + 68);
    uint64_t v38 = *(void **)(result + 128);
    uint64_t v39 = *(void *)(result + 112);
    unint64_t v40 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
    uint64_t v41 = *(void *)(result + 36);
    unsigned int v42 = *(unsigned __int8 *)(v16 + 132);
    if (v42 >= 0x11) {
      char v43 = 0;
    }
    else {
      char v43 = 16 - v42;
    }
    uint64_t v44 = *(unsigned __int8 *)(v16 + 157);
    uint64_t v45 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v46 = *(unsigned __int8 *)(v16 + 155);
    uint64_t result = *(unsigned __int8 *)(v16 + 154);
    uint64_t v47 = v38[2];
    if (v47) {
      uint64_t v48 = v47 + v40 * v22 + 2 * v39;
    }
    else {
      uint64_t v48 = 0;
    }
    char v51 = v38;
    uint64_t v50 = *v38;
    uint64_t v49 = v51[1];
    BOOL v52 = v49 == 0;
    uint64_t v53 = v49 + v40 * v21 + 2 * v39;
    if (v52) {
      uint64_t v53 = 0;
    }
    uint64_t v54 = v50 + v40 * v20 + 2 * v39;
    uint64_t v55 = *v18 + v19 * v14 + 16 * v41;
    char v56 = v43;
    do
    {
      if (v13)
      {
        uint64_t v57 = v13;
        uint64_t v58 = v55;
        uint64_t v59 = (_WORD *)v48;
        uint64_t v60 = (_WORD *)v53;
        uint64_t v61 = (_WORD *)v54;
        do
        {
          float v62 = *(float *)(v58 + 4 * result) * v23;
          float v63 = *(float *)(v58 + 4 * v46) * v23;
          float v64 = *(float *)(v58 + 4 * v45) * v23;
          float v65 = (float)((float)((float)(v30 * v63) + (float)(v29 * v62)) + (float)(v31 * v64)) + v24;
          float v66 = v26;
          if (v65 <= v26)
          {
            float v66 = (float)((float)((float)(v30 * v63) + (float)(v29 * v62)) + (float)(v31 * v64)) + v24;
            if (v65 < v24) {
              float v66 = v24;
            }
          }
          float v67 = *(float *)(v58 + 4 * v44);
          *v61++ = llroundf(v66) << v56;
          if (v60)
          {
            float v68 = (float)((float)(v25 + (float)(v62 * v32)) + (float)(v63 * v33)) + (float)(v64 * v34);
            float v69 = v28;
            if (v68 <= v28)
            {
              float v69 = (float)((float)(v25 + (float)(v62 * v32)) + (float)(v63 * v33)) + (float)(v64 * v34);
              if (v68 < v27) {
                float v69 = v27;
              }
            }
            float v70 = (float)((float)(v25 + (float)(v62 * v35)) + (float)(v63 * v36)) + (float)(v64 * v37);
            *uint64_t v60 = llroundf(v69) << v56;
            float v71 = v28;
            if (v70 <= v28)
            {
              float v71 = v70;
              if (v70 < v27) {
                float v71 = v27;
              }
            }
            v60[1] = llroundf(v71) << v56;
            v60 += 2;
          }
          if (v59) {
            *v59++ = llroundf(v67 * 65535.0);
          }
          v58 += 16;
          --v57;
        }
        while (v57);
      }
      v55 += v19;
      v54 += v20;
      v53 += v21;
      v48 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_BGRA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

unsigned char *vt_Copy_RGfA_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  char v2 = 0;
  uint64_t v3 = 0;
  unint64_t v195 = *(void *)(a1 + 20);
  uint64_t v209 = *(void *)(a1 + 36);
  uint64_t v4 = *(void *)(a1 + 44);
  uint64_t v5 = *(void *)(a1 + 28);
  unint64_t v6 = *a1;
  unint64_t v7 = v5 * a2 / v6;
  uint64_t v8 = v7 + v4;
  unint64_t v9 = (v5 + v5 * a2) / v6;
  uint64_t v10 = v9 + v4;
  uint64_t v11 = *((void *)a1 + 14);
  uint64_t v12 = *((void *)a1 + 19);
  uint64_t v13 = *((void *)a1 + 15);
  unint64_t v14 = *((void *)a1 + 13) * a2;
  uint64_t v15 = **((void **)a1 + 8);
  uint64_t v16 = **((void **)a1 + 7);
  uint64_t v17 = **((void **)a1 + 17);
  uint64_t v18 = **((void **)a1 + 16);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 154);
  v221[0] = *(unsigned char *)(v12 + 154);
  uint64_t v20 = *(unsigned __int8 *)(v12 + 155);
  v221[1] = *(unsigned char *)(v12 + 155);
  uint64_t v21 = *(unsigned __int8 *)(v12 + 156);
  v221[2] = *(unsigned char *)(v12 + 156);
  uint64_t v22 = *(unsigned __int8 *)(v12 + 157);
  v221[3] = *(unsigned char *)(v12 + 157);
  uint64_t v194 = *(unsigned __int8 *)(v12 + 158);
  v220[0] = *(unsigned char *)(v12 + 158);
  uint64_t v193 = *(unsigned __int8 *)(v12 + 159);
  v220[1] = *(unsigned char *)(v12 + 159);
  uint64_t v192 = *(unsigned __int8 *)(v12 + 160);
  v220[2] = *(unsigned char *)(v12 + 160);
  uint64_t v191 = *(unsigned __int8 *)(v12 + 161);
  v220[3] = *(unsigned char *)(v12 + 161);
  _S22 = *(float *)(v12 + 72);
  _S23 = *(float *)(v12 + 76);
  _S24 = *(float *)(v12 + 80);
  _S25 = *(float *)(v12 + 84);
  _S29 = *(float *)(v12 + 88);
  _S31 = *(float *)(v12 + 92);
  uint64_t v29 = v14 / v6 + v13;
  uint64_t v207 = v17;
  uint64_t v208 = v15;
  uint64_t v30 = v15 * v8;
  _S26 = *(float *)(v12 + 96);
  _S9 = *(float *)(v12 + 100);
  uint64_t v33 = v17 * v29;
  _S10 = *(float *)(v12 + 104);
  _S11 = *(float *)(v12 + 108);
  float v216 = *(float *)(v12 + 112);
  float v215 = *(float *)(v12 + 116);
  float v214 = *(float *)(v12 + 120);
  memset(v219, 0, sizeof(v219));
  long long v217 = 0u;
  long long v218 = 0u;
  uint64_t result = v221;
  do
  {
    unsigned int v37 = 0;
    char v38 = v221[v3];
    char v39 = v220[v3];
    do
    {
      *((unsigned char *)v219 + 8 * ((v2 + v37) >> 3) + v37) = v38 + 4 * v37;
      *(unsigned char *)(((unint64_t)&v217 + ((v39 + 4 * v37) & 0xF8)) | (v39 + 4 * (_BYTE)v37) & 7) = v2 + v37;
      ++v37;
    }
    while (v37 != 8);
    ++v3;
    v2 += 8;
  }
  while (v3 != 4);
  unint64_t v40 = v195;
  if (v9 != v7)
  {
    uint64_t v41 = 0;
    uint64_t v42 = v10 - v8;
    uint64_t v43 = v12 + 16548;
    uint64_t result = (unsigned char *)(v12 + 164);
    __asm { FCVT            H8, S11 }
    _S0 = v216;
    __asm { FCVT            H2, S0 }
    _S0 = v215;
    __asm { FCVT            H3, S0 }
    uint64_t v53 = v12 + 32932;
    _S0 = v214;
    __asm
    {
      FCVT            H0, S0
      FCVT            H1, S22
      FCVT            H5, S23
      FCVT            H7, S24
      FCVT            H6, S25
    }
    short float v205 = _H6;
    short float v206 = _H1;
    __asm { FCVT            H1, S29 }
    uint64_t v60 = v18 + v33 + 4 * v11;
    __asm
    {
      FCVT            H4, S31
      FCVT            H6, S26
    }
    short float v211 = _H6;
    uint64_t v63 = v16 + v30 + 16 * v209;
    __asm { FCVT            H6, S9 }
    short float v204 = _H6;
    __asm { FCVT            H12, S10 }
    short float v210 = _H12;
    uint64_t v179 = v22;
    uint64_t v178 = v20;
    uint64_t v177 = v19;
    v66.i64[0] = 0x9000900090009000;
    v66.i64[1] = 0x9000900090009000;
    float v67 = (float *)&unk_193E7D000;
    short float v68 = _H8;
    short float v202 = _H2;
    short float v203 = _H8;
    short float v69 = _H2;
    short float v70 = _H3;
    short float v200 = *(short float *)&_S0;
    short float v201 = _H3;
    short float v71 = *(short float *)&_S0;
    short float v73 = v205;
    short float v72 = v206;
    short float v212 = _H1;
    short float v213 = _H5;
    short float v74 = _H7;
    short float v198 = _H4;
    short float v199 = _H7;
    short float v75 = _H4;
    short float v76 = v204;
    float v189 = _S23;
    float v190 = _S22;
    float v187 = _S25;
    float v188 = _S24;
    float v185 = _S31;
    float v186 = _S29;
    float v183 = _S9;
    float v184 = _S26;
    float v181 = _S11;
    float v182 = _S10;
    uint64_t v180 = v42;
    do
    {
      if ((int)v40 < 8)
      {
        unint64_t v139 = 0;
        unint64_t v81 = (const float *)v63;
        unint64_t v80 = (float32x4_t *)v60;
      }
      else
      {
        uint64_t v197 = v41;
        int v77 = 0;
        int8x8_t v78 = *(int8x8_t *)((char *)&v217 + 8);
        int8x8_t v79 = (int8x8_t)v217;
        unint64_t v80 = (float32x4_t *)v60;
        uint64_t v196 = v63;
        unint64_t v81 = (const float *)v63;
        int8x8_t v83 = *(int8x8_t *)((char *)&v218 + 8);
        int8x8_t v82 = (int8x8_t)v218;
        short float v84 = v68;
        short float v85 = v69;
        v86.i64[0] = 0x7000700070007000;
        v86.i64[1] = 0x7000700070007000;
        do
        {
          float v87 = v81;
          float32x4x4_t v222 = vld4q_f32(v87);
          v87 += 16;
          float32x4x4_t v223 = vld4q_f32(v87);
          uint16x8_t v88 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v222.val[0]), v223.val[0]), v86), (float16x8_t)0), v66));
          uint32x4_t v89 = vmovl_high_u16(v88);
          uint32x4_t v90 = vmovl_u16(*(uint16x4_t *)v88.i8);
          uint64_t v91 = v90.u32[1];
          uint64_t v92 = v90.u32[3];
          v93.i16[0] = *(_WORD *)&result[2 * v90.u32[0]];
          uint64_t v94 = v89.u32[1];
          uint64_t v95 = (__int16 *)&result[2 * v90.u32[2]];
          short float v96 = (__int16 *)&result[2 * v89.u32[0]];
          uint64_t v97 = v89.u32[3];
          short float v98 = (__int16 *)&result[2 * v89.u32[2]];
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v222.val[1]), v223.val[1]), v86), (float16x8_t)0), v66));
          uint32x4_t v100 = vmovl_high_u16(v99);
          uint32x4_t v101 = vmovl_u16(*(uint16x4_t *)v99.i8);
          uint64_t v102 = v101.u32[3];
          v103.i16[0] = *(_WORD *)&result[2 * v101.u32[0]];
          v93.i16[1] = *(_WORD *)&result[2 * v91];
          v93.i16[2] = *v95;
          v103.i16[1] = *(_WORD *)&result[2 * v101.u32[1]];
          v103.i16[2] = *(_WORD *)&result[2 * v101.u32[2]];
          v93.i16[3] = *(_WORD *)&result[2 * v92];
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v222.val[2]), v223.val[2]), v86), (float16x8_t)0), v66));
          v103.i16[3] = *(_WORD *)&result[2 * v102];
          uint32x4_t v105 = vmovl_high_u16(v104);
          float16x8_t v106 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v104.i8);
          v93.i16[4] = *v96;
          v103.i16[4] = *(_WORD *)&result[2 * v100.u32[0]];
          v106.i16[0] = *(_WORD *)&result[2 * v106.u32[0]];
          v93.i16[5] = *(_WORD *)&result[2 * v94];
          v103.i16[5] = *(_WORD *)&result[2 * v100.u32[1]];
          v93.i16[6] = *v98;
          v103.i16[6] = *(_WORD *)&result[2 * v100.u32[2]];
          v106.i16[1] = *(_WORD *)&result[2 * v106.u32[1]];
          v93.i16[7] = *(_WORD *)&result[2 * v97];
          v106.i16[2] = *(_WORD *)&result[2 * v106.u32[2]];
          v106.i16[3] = *(_WORD *)&result[2 * v106.u32[3]];
          v103.i16[7] = *(_WORD *)&result[2 * v100.u32[3]];
          v106.i16[4] = *(_WORD *)&result[2 * v105.u32[0]];
          v106.i16[5] = *(_WORD *)&result[2 * v105.u32[1]];
          v106.i16[6] = *(_WORD *)&result[2 * v105.u32[2]];
          v106.i16[7] = *(_WORD *)&result[2 * v105.u32[3]];
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v93, v84), v103, v85), v106, v70), vmaxq_f16(vmaxq_f16(v93, v103), v106), v71), (float16x8_t)0), v66));
          float16x8_t v108 = (float16x8_t)vmovl_high_u16(v107);
          uint32x4_t v109 = vmovl_u16(*(uint16x4_t *)v107.i8);
          uint64_t v110 = v108.u32[0];
          uint64_t v111 = v108.u32[1];
          v108.i16[0] = *(_WORD *)(v43 + 2 * v109.u32[0]);
          uint16x8_t v112 = (__int16 *)(v43 + 2 * v108.u32[2]);
          v108.i16[1] = *(_WORD *)(v43 + 2 * v109.u32[1]);
          v108.i16[2] = *(_WORD *)(v43 + 2 * v109.u32[2]);
          v108.i16[3] = *(_WORD *)(v43 + 2 * v109.u32[3]);
          v108.i16[4] = *(_WORD *)(v43 + 2 * v110);
          v108.i16[5] = *(_WORD *)(v43 + 2 * v111);
          uint32x4_t v113 = (__int16 *)(v43 + 2 * v108.u32[3]);
          v108.i16[6] = *v112;
          v108.i16[7] = *v113;
          float16x8_t v114 = vmulq_f16(v93, v108);
          float16x8_t v115 = vmulq_f16(v103, v108);
          float16x8_t v116 = vmulq_f16(v106, v108);
          v222.val[2] = (float32x4_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v114, v73), v115, v212), v116, v75);
          float16x8_t v117 = vmlaq_n_f16(vmulq_n_f16(v116, v210), v115, v76);
          v222.val[1] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v114, v72), v115, v213), v116, v74), (float16x8_t)0), v66));
          uint32x4_t v118 = vmovl_u16(*(uint16x4_t *)v222.val[1].f32);
          v222.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v222.val[1]);
          uint64_t v119 = v222.val[1].u32[2];
          uint64_t v120 = v222.val[1].u32[1];
          uint64_t v121 = v222.val[1].u32[0];
          uint64_t v122 = v222.val[1].u32[3];
          v222.val[1] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v222.val[2], (float16x8_t)0), v66));
          v222.val[2] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v222.val[1].f32);
          uint64_t v123 = v222.val[2].u32[1];
          uint64_t v124 = v222.val[2].u32[0];
          v222.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v222.val[1]);
          uint64_t v125 = v222.val[2].u32[3];
          uint64_t v126 = v222.val[2].u32[2];
          uint64_t v127 = v222.val[1].u32[1];
          uint64_t v128 = v222.val[1].u32[0];
          uint64_t v129 = v222.val[1].u32[3];
          uint64_t v130 = v222.val[1].u32[2];
          v222.val[1] = (float32x4_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v117, v114, v211), (float16x8_t)0), v66));
          v222.val[2] = (float32x4_t)vmovl_high_u16((uint16x8_t)v222.val[1]);
          v222.val[1] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v222.val[1].f32);
          uint64_t v131 = v222.val[1].u32[1];
          uint64_t v132 = v222.val[1].u32[0];
          uint64_t v133 = v222.val[1].u32[2];
          uint64_t v134 = v222.val[2].u32[1];
          v117.i16[0] = *(_WORD *)(v53 + 2 * v118.u32[0]);
          uint64_t v135 = v222.val[2].u32[0];
          v222.val[1].i16[0] = *(_WORD *)(v53 + 2 * v124);
          v117.i16[1] = *(_WORD *)(v53 + 2 * v118.u32[1]);
          v222.val[1].i16[1] = *(_WORD *)(v53 + 2 * v123);
          v117.i16[2] = *(_WORD *)(v53 + 2 * v118.u32[2]);
          v222.val[1].i16[2] = *(_WORD *)(v53 + 2 * v126);
          v117.i16[3] = *(_WORD *)(v53 + 2 * v118.u32[3]);
          v222.val[1].i16[3] = *(_WORD *)(v53 + 2 * v125);
          v117.i16[4] = *(_WORD *)(v53 + 2 * v121);
          v222.val[1].i16[4] = *(_WORD *)(v53 + 2 * v128);
          v222.val[2].i16[0] = *(_WORD *)(v53 + 2 * v132);
          v117.i16[5] = *(_WORD *)(v53 + 2 * v120);
          v222.val[2].i16[1] = *(_WORD *)(v53 + 2 * v131);
          v222.val[1].i16[5] = *(_WORD *)(v53 + 2 * v127);
          v222.val[2].i16[2] = *(_WORD *)(v53 + 2 * v133);
          v117.i16[6] = *(_WORD *)(v53 + 2 * v119);
          float v136 = (__int16 *)(v53 + 2 * v222.val[1].u32[3]);
          v222.val[1].i16[6] = *(_WORD *)(v53 + 2 * v130);
          float v137 = (__int16 *)(v53 + 2 * v222.val[2].u32[2]);
          float v138 = (__int16 *)(v53 + 2 * v222.val[2].u32[3]);
          v117.i16[7] = *(_WORD *)(v53 + 2 * v122);
          v222.val[2].i16[3] = *v136;
          v222.val[2].i16[4] = *(_WORD *)(v53 + 2 * v135);
          v222.val[1].i16[7] = *(_WORD *)(v53 + 2 * v129);
          v222.val[2].i16[5] = *(_WORD *)(v53 + 2 * v134);
          v222.val[2].i16[6] = *v137;
          v222.val[2].i16[7] = *v138;
          v223.val[0] = (float32x4_t)vdupq_n_s16(0x5BF8u);
          v222.val[2] = (float32x4_t)vminq_f16(vmaxq_f16((float16x8_t)v222.val[2], (float16x8_t)0), (float16x8_t)v223.val[0]);
          v222.val[0] = (float32x4_t)vcvtq_u16_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v222.val[3]), v223.val[3]), (float16x8_t)v223.val[0]));
          v223.val[0] = (float32x4_t)vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, (float16x8_t)0), (float16x8_t)v223.val[0])), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v222.val[1], (float16x8_t)0), (float16x8_t)v223.val[0])));
          v223.val[1] = (float32x4_t)vuzp1q_s8((int8x16_t)vcvtq_u16_f16((float16x8_t)v222.val[2]), (int8x16_t)v222.val[0]);
          *(int8x8_t *)v222.val[0].f32 = vqtbl2_s8(*(int8x16x2_t *)v223.val[0].f32, v79);
          *(int8x8_t *)&v222.val[0].u32[2] = vqtbl2_s8(*(int8x16x2_t *)v223.val[0].f32, v78);
          *(int8x8_t *)v222.val[1].f32 = vqtbl2_s8(*(int8x16x2_t *)v223.val[0].f32, v82);
          *(int8x8_t *)&v222.val[1].u32[2] = vqtbl2_s8(*(int8x16x2_t *)v223.val[0].f32, v83);
          *unint64_t v80 = v222.val[0];
          v80[1] = v222.val[1];
          v80 += 2;
          v81 += 32;
          v77 += 8;
        }
        while (v77 < (int)v195 - 7);
        unint64_t v139 = v195 & 0xFFFFFFF8;
        uint64_t v42 = v180;
        unint64_t v40 = v195;
        uint64_t v63 = v196;
        _S23 = v189;
        _S22 = v190;
        _S25 = v187;
        _S24 = v188;
        _S31 = v185;
        _S29 = v186;
        _S9 = v183;
        _S26 = v184;
        _S11 = v181;
        _S10 = v182;
        uint64_t v41 = v197;
        float v67 = (float *)&unk_193E7D000;
      }
      unint64_t v140 = v40 - v139;
      if (v40 > v139)
      {
        uint64_t v141 = 0;
        uint64_t v142 = (char *)v80 + v191;
        uint64_t v143 = (char *)v80 + v192;
        uint64_t v144 = (char *)v80 + v193;
        short float v145 = (char *)v80 + v194;
        short float v146 = &v81[v179];
        short float v147 = &v81[v21];
        short float v148 = &v81[v178];
        short float v149 = &v81[v177];
        do
        {
          v150.f32[0] = v149[v141];
          v150.f32[1] = v148[v141];
          float32x2_t v151 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D5 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v150, v151), 0), v151)));
          _D5.i16[0] = *(_WORD *)&result[2 * _D5.u32[0]];
          float v153 = v67[70];
          __asm { FCVT            S5, H5 }
          _H7 = *(_WORD *)&result[2 * _D5.u32[1]];
          __asm { FCVT            S6, H7 }
          _H7 = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v147[v141] * v153, 0.0), v153))];
          __asm { FCVT            S7, H7 }
          float v159 = (float)((float)((float)(v216 * _S6) + (float)(_S11 * _S5)) + (float)(v215 * _S7))
               + (float)(v214 * fmaxf(_S5, fmaxf(_S6, _S7)));
          float v160 = v153;
          if (v159 <= v153)
          {
            float v160 = v159;
            if (v159 < 0.0) {
              float v160 = 0.0;
            }
          }
          _H17 = *(_WORD *)(v43 + 2 * llroundf(v160));
          __asm { FCVT            S18, H17 }
          float v163 = _S5 * _S18;
          float v164 = _S6 * _S18;
          float v165 = _S7 * _S18;
          _S20 = 255.0;
          if (*(short float *)(v53
                              + 2
                              * llroundf(fminf(fmaxf((float)((float)(_S23 * v164) + (float)(v163 * _S22)) + (float)(v165 * _S24), 0.0), v153))) <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H6, #0 }
            if (_NF) {
              _S20 = 0.0;
            }
            else {
              __asm { FCVT            S20, H6 }
            }
          }
          float v168 = v146[v141];
          float v169 = (float)((float)(_S29 * v164) + (float)(v163 * _S25)) + (float)(v165 * _S31);
          float v170 = (float)((float)(_S9 * v164) + (float)(v163 * _S26)) + (float)(v165 * _S10);
          short float v171 = *(short float *)(v53 + 2 * llroundf(fminf(fmaxf(v169, 0.0), v153)));
          short float v172 = *(short float *)(v53 + 2 * llroundf(fminf(fmaxf(v170, 0.0), v153)));
          v145[v141] = llroundf(_S20);
          if (v171 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H17, #0 }
            if (_NF) {
              _S17 = 0.0;
            }
            else {
              __asm { FCVT            S17, H17 }
            }
          }
          else
          {
            _S17 = 255.0;
          }
          v144[v141] = llroundf(_S17);
          if (v172 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H16, #0 }
            if (_NF) {
              _S7 = 0.0;
            }
            else {
              __asm { FCVT            S7, H16 }
            }
          }
          else
          {
            _S7 = 255.0;
          }
          v143[v141] = llroundf(_S7);
          v142[v141] = llroundf(v168 * 255.0);
          v141 += 4;
          --v140;
        }
        while (v140);
      }
      v63 += v208;
      v60 += v207;
      ++v41;
      short float v69 = v202;
      short float v68 = v203;
      short float v71 = v200;
      short float v70 = v201;
      short float v73 = v205;
      short float v72 = v206;
      short float v75 = v198;
      short float v74 = v199;
      short float v76 = v204;
    }
    while (v41 != v42);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    int64x2_t v11 = (void *)*((void *)result + 7);
    uint64_t v12 = **((void **)result + 8);
    uint64_t v13 = **((void **)result + 17);
    float v14 = *(float *)(v10 + 72);
    float v15 = *(float *)(v10 + 76);
    float v16 = *(float *)(v10 + 80);
    float v17 = *(float *)(v10 + 84);
    float v18 = *(float *)(v10 + 88);
    float v19 = *(float *)(v10 + 92);
    float v20 = *(float *)(v10 + 96);
    float v21 = *(float *)(v10 + 100);
    uint64_t v22 = v10 + 164;
    uint64_t v23 = v10 + 16548;
    uint64_t v24 = v10 + 32932;
    float v25 = *(float *)(v10 + 104);
    float v26 = *(float *)(v10 + 108);
    float v27 = *(float *)(v10 + 112);
    float v28 = *(float *)(v10 + 116);
    float v29 = *(float *)(v10 + 120);
    uint64_t v30 = (void *)*((void *)result + 16);
    uint64_t v31 = *((void *)result + 14);
    unint64_t v32 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v33 = *(void *)(result + 36);
    uint64_t v34 = *(unsigned __int8 *)(v10 + 161);
    uint64_t v35 = *(unsigned __int8 *)(v10 + 160);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 159);
    uint64_t v36 = *(unsigned __int8 *)(v10 + 158);
    uint64_t v37 = *(unsigned __int8 *)(v10 + 157);
    uint64_t v38 = *(unsigned __int8 *)(v10 + 156);
    uint64_t v39 = *v30 + v32 * v13;
    uint64_t v40 = *(unsigned __int8 *)(v10 + 155);
    uint64_t v41 = *(unsigned __int8 *)(v10 + 154);
    uint64_t v42 = v39 + 4 * v31;
    uint64_t v43 = *v11 + v12 * v8 + 16 * v33;
    float32x2_t v44 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        uint64_t v45 = v7;
        uint64_t v46 = v43;
        uint64_t v47 = v42;
        do
        {
          v48.i32[0] = *(_DWORD *)(v46 + 4 * v41);
          v48.i32[1] = *(_DWORD *)(v46 + 4 * v40);
          _D26 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v48, v44), 0), v44)));
          _D26.i16[0] = *(_WORD *)(v22 + 2 * _D26.u32[0]);
          __asm { FCVT            S26, H26 }
          _H28 = *(_WORD *)(v22 + 2 * _D26.u32[1]);
          __asm { FCVT            S27, H28 }
          _H28 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(*(float *)(v46 + 4 * v38) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S29, H28 }
          float v59 = (float)((float)((float)(v27 * _S27) + (float)(v26 * _S26)) + (float)(v28 * _S29))
              + (float)(v29 * fmaxf(_S26, fmaxf(_S27, _S29)));
          float v60 = 8191.0;
          if (v59 <= 8191.0)
          {
            float v60 = v59;
            if (v59 < 0.0) {
              float v60 = 0.0;
            }
          }
          _H28 = *(_WORD *)(v23 + 2 * llroundf(v60));
          __asm { FCVT            S31, H28 }
          float v63 = _S26 * _S31;
          float v64 = _S27 * _S31;
          float v65 = _S29 * _S31;
          short float v66 = *(short float *)(v24
                               + 2
                               * llroundf(fminf(fmaxf((float)((float)(v15 * (float)(_S27 * _S31)) + (float)((float)(_S26 * _S31) * v14))+ (float)(v65 * v16), 0.0), 8191.0)));
          _S31 = 255.0;
          if (v66 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H27, #0 }
            if (_NF) {
              _S31 = 0.0;
            }
            else {
              __asm { FCVT            S31, H27 }
            }
          }
          float v69 = *(float *)(v46 + 4 * v37);
          float v70 = (float)((float)(v18 * v64) + (float)(v63 * v17)) + (float)(v65 * v19);
          float v71 = (float)((float)(v21 * v64) + (float)(v63 * v20)) + (float)(v65 * v25);
          short float v72 = *(short float *)(v24 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          short float v73 = *(short float *)(v24 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          *(unsigned char *)(v47 + v36) = llroundf(_S31);
          if (v72 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H29, #0 }
            if (_NF) {
              _S29 = 0.0;
            }
            else {
              __asm { FCVT            S29, H29 }
            }
          }
          else
          {
            _S29 = 255.0;
          }
          result[v47] = llroundf(_S29);
          if (v73 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H28, #0 }
            if (_NF) {
              _S28 = 0.0;
            }
            else {
              __asm { FCVT            S28, H28 }
            }
          }
          else
          {
            _S28 = 255.0;
          }
          v46 += 16;
          *(unsigned char *)(v47 + v35) = llroundf(_S28);
          *(unsigned char *)(v47 + v34) = llroundf(v69 * 255.0);
          v47 += 4;
          --v45;
        }
        while (v45);
      }
      v43 += v12;
      v42 += v13;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_BGRA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

unsigned char *vt_Copy_RGfA_TRC_Mat_TRC_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  char v2 = 0;
  uint64_t v3 = 0;
  unint64_t v4 = *(void *)(a1 + 20);
  uint64_t v166 = *(void *)(a1 + 36);
  uint64_t v5 = *(void *)(a1 + 44);
  uint64_t v6 = *(void *)(a1 + 28);
  unint64_t v7 = *a1;
  unint64_t v8 = v6 * a2 / v7;
  uint64_t v9 = v8 + v5;
  unint64_t v10 = (v6 + v6 * a2) / v7;
  uint64_t v11 = v10 + v5;
  uint64_t v12 = *((void *)a1 + 15);
  uint64_t v164 = *((void *)a1 + 14);
  uint64_t v13 = *((void *)a1 + 19);
  unint64_t v14 = *((void *)a1 + 13) * a2;
  uint64_t v15 = **((void **)a1 + 8);
  uint64_t v16 = **((void **)a1 + 7);
  uint64_t v17 = **((void **)a1 + 17);
  uint64_t v18 = **((void **)a1 + 16);
  uint64_t v19 = *(unsigned __int8 *)(v13 + 154);
  v173[0] = *(unsigned char *)(v13 + 154);
  uint64_t v20 = *(unsigned __int8 *)(v13 + 155);
  v173[1] = *(unsigned char *)(v13 + 155);
  uint64_t v21 = *(unsigned __int8 *)(v13 + 156);
  v173[2] = *(unsigned char *)(v13 + 156);
  uint64_t v22 = *(unsigned __int8 *)(v13 + 157);
  v173[3] = *(unsigned char *)(v13 + 157);
  uint64_t v157 = *(unsigned __int8 *)(v13 + 158);
  v172[0] = *(unsigned char *)(v13 + 158);
  uint64_t v156 = *(unsigned __int8 *)(v13 + 159);
  v172[1] = *(unsigned char *)(v13 + 159);
  uint64_t v155 = *(unsigned __int8 *)(v13 + 160);
  v172[2] = *(unsigned char *)(v13 + 160);
  uint64_t v154 = *(unsigned __int8 *)(v13 + 161);
  v172[3] = *(unsigned char *)(v13 + 161);
  _S16 = *(float *)(v13 + 72);
  _S25 = *(float *)(v13 + 76);
  uint64_t v25 = v14 / v7 + v12;
  uint64_t v26 = v15 * v9;
  _S26 = *(float *)(v13 + 80);
  _S27 = *(float *)(v13 + 84);
  uint64_t v29 = v17 * v25;
  _S28 = *(float *)(v13 + 88);
  _S29 = *(float *)(v13 + 92);
  _S30 = *(float *)(v13 + 96);
  _S31 = *(float *)(v13 + 100);
  _S8 = *(float *)(v13 + 104);
  memset(v171, 0, sizeof(v171));
  long long v169 = 0u;
  long long v170 = 0u;
  uint64_t result = v173;
  do
  {
    unsigned int v36 = 0;
    char v37 = v173[v3];
    char v38 = v172[v3];
    do
    {
      *((unsigned char *)v171 + 8 * ((v2 + v36) >> 3) + v36) = v37 + 4 * v36;
      *(unsigned char *)(((unint64_t)&v169 + ((v38 + 4 * v36) & 0xF8)) | (v38 + 4 * (_BYTE)v36) & 7) = v2 + v36;
      ++v36;
    }
    while (v36 != 8);
    ++v3;
    v2 += 8;
  }
  while (v3 != 4);
  if (v10 != v8)
  {
    uint64_t v39 = 0;
    uint64_t v40 = v11 - v9;
    uint64_t v41 = v13 + 164;
    uint64_t result = (unsigned char *)(v13 + 16548);
    __asm
    {
      FCVT            H9, S16
      FCVT            H10, S25
      FCVT            H11, S26
      FCVT            H12, S27
      FCVT            H13, S28
      FCVT            H14, S29
      FCVT            H15, S30
    }
    uint64_t v53 = v18 + v29 + 4 * v164;
    __asm
    {
      FCVT            H0, S31
      FCVT            H1, S8
    }
    uint64_t v143 = v20;
    uint64_t v144 = v21;
    uint64_t v142 = v19;
    v56.i64[0] = 0x7000700070007000;
    v56.i64[1] = 0x7000700070007000;
    uint64_t v57 = v16 + v26 + 16 * v166;
    v58.i64[0] = 0x9000900090009000;
    v58.i64[1] = 0x9000900090009000;
    float16x8_t v59 = (float16x8_t)vdupq_n_s16(0x5BF8u);
    short float v167 = _H10;
    short float v168 = _H9;
    short float v163 = _H12;
    short float v165 = _H11;
    short float v161 = _H14;
    short float v162 = _H13;
    short float v159 = _H0;
    short float v160 = _H15;
    short float v158 = _H1;
    float v152 = _S25;
    float v153 = _S16;
    float v150 = _S27;
    float v151 = _S26;
    float v148 = _S29;
    float v149 = _S28;
    float v146 = _S31;
    float v147 = _S30;
    float v145 = _S8;
    do
    {
      if ((int)v4 < 8)
      {
        unint64_t v114 = 0;
        float v64 = (float32x4_t *)v53;
        float v63 = (const float *)v57;
      }
      else
      {
        int v60 = 0;
        int8x8_t v62 = *(int8x8_t *)((char *)&v169 + 8);
        int8x8_t v61 = (int8x8_t)v169;
        float v63 = (const float *)v57;
        float v64 = (float32x4_t *)v53;
        int8x8_t v66 = *(int8x8_t *)((char *)&v170 + 8);
        int8x8_t v65 = (int8x8_t)v170;
        short float v67 = _H1;
        do
        {
          short float v68 = v63;
          v63 += 32;
          float32x4x4_t v175 = vld4q_f32(v68);
          v68 += 16;
          float32x4x4_t v174 = vld4q_f32(v68);
          uint16x8_t v69 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v175.val[0]), v174.val[0]), v56), (float16x8_t)0), v58));
          uint32x4_t v70 = vmovl_high_u16(v69);
          uint32x4_t v71 = vmovl_u16(*(uint16x4_t *)v69.i8);
          uint64_t v72 = v71.u32[3];
          v73.i16[0] = *(_WORD *)(v41 + 2 * v71.u32[0]);
          uint64_t v74 = v70.u32[1];
          short float v75 = (__int16 *)(v41 + 2 * v71.u32[2]);
          short float v76 = (__int16 *)(v41 + 2 * v70.u32[0]);
          int v77 = (__int16 *)(v41 + 2 * v70.u32[2]);
          int8x8_t v78 = (__int16 *)(v41 + 2 * v71.u32[1]);
          uint16x8_t v79 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v175.val[1]), v174.val[1]), v56), (float16x8_t)0), v58));
          uint32x4_t v80 = vmovl_high_u16(v79);
          float16x8_t v81 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v79.i8);
          v81.i16[0] = *(_WORD *)(v41 + 2 * v81.u32[0]);
          int8x8_t v82 = (__int16 *)(v41 + 2 * v70.u32[3]);
          int8x8_t v83 = (__int16 *)(v41 + 2 * v80.u32[0]);
          short float v84 = (__int16 *)(v41 + 2 * v80.u32[1]);
          v73.i16[1] = *v78;
          short float v85 = (__int16 *)(v41 + 2 * v80.u32[2]);
          v73.i16[2] = *v75;
          float16x8_t v86 = (__int16 *)(v41 + 2 * v80.u32[3]);
          v81.i16[1] = *(_WORD *)(v41 + 2 * v81.u32[1]);
          v81.i16[2] = *(_WORD *)(v41 + 2 * v81.u32[2]);
          uint16x8_t v87 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v175.val[2]), v174.val[2]), v56), (float16x8_t)0), v58));
          uint32x4_t v88 = vmovl_high_u16(v87);
          v73.i16[3] = *(_WORD *)(v41 + 2 * v72);
          uint32x4_t v89 = vmovl_u16(*(uint16x4_t *)v87.i8);
          v81.i16[3] = *(_WORD *)(v41 + 2 * v81.u32[3]);
          v90.i16[0] = *(_WORD *)(v41 + 2 * v89.u32[0]);
          v73.i16[4] = *v76;
          v81.i16[4] = *v83;
          v73.i16[5] = *(_WORD *)(v41 + 2 * v74);
          v81.i16[5] = *v84;
          v73.i16[6] = *v77;
          v90.i16[1] = *(_WORD *)(v41 + 2 * v89.u32[1]);
          v90.i16[2] = *(_WORD *)(v41 + 2 * v89.u32[2]);
          v81.i16[6] = *v85;
          v90.i16[3] = *(_WORD *)(v41 + 2 * v89.u32[3]);
          v90.i16[4] = *(_WORD *)(v41 + 2 * v88.u32[0]);
          v73.i16[7] = *v82;
          v90.i16[5] = *(_WORD *)(v41 + 2 * v88.u32[1]);
          v90.i16[6] = *(_WORD *)(v41 + 2 * v88.u32[2]);
          v81.i16[7] = *v86;
          v90.i16[7] = *(_WORD *)(v41 + 2 * v88.u32[3]);
          float16x8_t v91 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v73, v168), v81, _H10), v90, _H11);
          float16x8_t v92 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v73, _H12), v81, _H13), v90, _H14);
          float16x8_t v93 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v90, v67), v81, _H0), v73, _H15);
          uint16x8_t v94 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v91, (float16x8_t)0), v58));
          uint32x4_t v95 = vmovl_high_u16(v94);
          *(void *)&long long v96 = v95.u32[2];
          *((void *)&v96 + 1) = v95.u32[3];
          long long v97 = v96;
          *(void *)&long long v96 = v95.u32[0];
          *((void *)&v96 + 1) = v95.u32[1];
          long long v98 = v96;
          uint32x4_t v99 = vmovl_u16(*(uint16x4_t *)v94.i8);
          *(void *)&long long v96 = v99.u32[2];
          uint64_t v100 = v99.u32[3];
          v73.i16[0] = *(_WORD *)&result[2 * v99.u32[0]];
          uint64_t v101 = *((void *)&v98 + 1);
          uint64_t v102 = (__int16 *)&result[2 * v99.u32[1]];
          float16x8_t v103 = (__int16 *)&result[2 * v98];
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v92, (float16x8_t)0), v58));
          uint32x4_t v105 = vmovl_high_u16(v104);
          float16x8_t v106 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v104.i8);
          v106.i16[0] = *(_WORD *)&result[2 * v106.u32[0]];
          v73.i16[1] = *v102;
          uint16x8_t v107 = (__int16 *)&result[2 * v105.u32[0]];
          v73.i16[2] = *(_WORD *)&result[2 * v96];
          float16x8_t v108 = (__int16 *)&result[2 * v105.u32[1]];
          v106.i16[1] = *(_WORD *)&result[2 * v106.u32[1]];
          v106.i16[2] = *(_WORD *)&result[2 * v106.u32[2]];
          uint32x4_t v109 = (__int16 *)&result[2 * v105.u32[2]];
          uint64_t v110 = (__int16 *)&result[2 * v105.u32[3]];
          v73.i16[3] = *(_WORD *)&result[2 * v100];
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v93, (float16x8_t)0), v58));
          uint32x4_t v112 = vmovl_high_u16(v111);
          v106.i16[3] = *(_WORD *)&result[2 * v106.u32[3]];
          uint32x4_t v113 = vmovl_u16(*(uint16x4_t *)v111.i8);
          v73.i16[4] = *v103;
          v93.i16[0] = *(_WORD *)&result[2 * v113.u32[0]];
          v106.i16[4] = *v107;
          v73.i16[5] = *(_WORD *)&result[2 * v101];
          v106.i16[5] = *v108;
          v93.i16[1] = *(_WORD *)&result[2 * v113.u32[1]];
          v73.i16[6] = *(_WORD *)&result[2 * v97];
          v93.i16[2] = *(_WORD *)&result[2 * v113.u32[2]];
          v106.i16[6] = *v109;
          v73.i16[7] = *(_WORD *)&result[2 * *((void *)&v97 + 1)];
          v93.i16[3] = *(_WORD *)&result[2 * v113.u32[3]];
          v93.i16[4] = *(_WORD *)&result[2 * v112.u32[0]];
          v106.i16[7] = *v110;
          v93.i16[5] = *(_WORD *)&result[2 * v112.u32[1]];
          v93.i16[6] = *(_WORD *)&result[2 * v112.u32[2]];
          v93.i16[7] = *(_WORD *)&result[2 * v112.u32[3]];
          v174.val[1] = (float32x4_t)vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v73, (float16x8_t)0), v59)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v106, (float16x8_t)0), v59)));
          v174.val[2] = (float32x4_t)vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v93, (float16x8_t)0), v59)), (int8x16_t)vcvtq_u16_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v175.val[3]), v174.val[3]), v59)));
          *(int8x8_t *)v174.val[0].f32 = vqtbl2_s8(*(int8x16x2_t *)v174.val[1].f32, v61);
          *(int8x8_t *)&v174.val[0].u32[2] = vqtbl2_s8(*(int8x16x2_t *)v174.val[1].f32, v62);
          *(int8x8_t *)v174.val[3].f32 = vqtbl2_s8(*(int8x16x2_t *)v174.val[1].f32, v65);
          *(int8x8_t *)&v174.val[3].u32[2] = vqtbl2_s8(*(int8x16x2_t *)v174.val[1].f32, v66);
          *float v64 = v174.val[0];
          v64[1] = v174.val[3];
          v64 += 2;
          v60 += 8;
        }
        while (v60 < (int)v4 - 7);
        unint64_t v114 = v4 & 0xFFFFFFF8;
        _S25 = v152;
        _S16 = v153;
        _S27 = v150;
        _S26 = v151;
        _S29 = v148;
        _S28 = v149;
        _S31 = v146;
        _S30 = v147;
        _S8 = v145;
      }
      unint64_t v115 = v4 - v114;
      if (v4 > v114)
      {
        uint64_t v116 = 0;
        float16x8_t v117 = &v63[v22];
        uint32x4_t v118 = &v63[v144];
        uint64_t v119 = &v63[v143];
        uint64_t v120 = &v63[v142];
        uint64_t v121 = (char *)v64 + v154;
        uint64_t v122 = (char *)v64 + v155;
        uint64_t v123 = (char *)v64 + v156;
        uint64_t v124 = (char *)v64 + v157;
        do
        {
          v125.f32[0] = v120[v116];
          v125.f32[1] = v119[v116];
          float32x2_t v126 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v125, v126), 0), v126)));
          _D1.i16[0] = *(_WORD *)(v41 + 2 * _D1.u32[0]);
          _H3 = *(_WORD *)(v41 + 2 * _D1.u32[1]);
          __asm
          {
            FCVT            S5, H1
            FCVT            S17, H3
          }
          _D1.i16[0] = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v118[v116] * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S22, H1 }
          _S24 = 255.0;
          if (*(short float *)&result[2
                                     * llroundf(fminf(fmaxf((float)((float)(_S25 * _S17) + (float)(_S5 * _S16)) + (float)(_S22 * _S26), 0.0), 8191.0))] <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H2, #0 }
            if (_NF) {
              _S24 = 0.0;
            }
            else {
              __asm { FCVT            S24, H2 }
            }
          }
          float v134 = v117[v116];
          float v135 = (float)((float)(_S31 * _S17) + (float)(_S5 * _S30)) + (float)(_S22 * _S8);
          short float v136 = *(short float *)&result[2
                                       * llroundf(fminf(fmaxf((float)((float)(_S28 * _S17) + (float)(_S5 * _S27))+ (float)(_S22 * _S29), 0.0), 8191.0))];
          short float v137 = *(short float *)&result[2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0))];
          v124[v116] = llroundf(_S24);
          if (v136 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H5, #0 }
            if (_NF) {
              _S5 = 0.0;
            }
            else {
              __asm { FCVT            S5, H5 }
            }
          }
          else
          {
            _S5 = 255.0;
          }
          v123[v116] = llroundf(_S5);
          if (v137 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H4, #0 }
            if (_NF) {
              _S3 = 0.0;
            }
            else {
              __asm { FCVT            S3, H4 }
            }
          }
          else
          {
            _S3 = 255.0;
          }
          v122[v116] = llroundf(_S3);
          v121[v116] = llroundf(v134 * 255.0);
          v116 += 4;
          --v115;
        }
        while (v115);
      }
      v57 += v15;
      v53 += v17;
      ++v39;
      _H11 = v165;
      _H10 = v167;
      _H13 = v162;
      _H12 = v163;
      _H15 = v160;
      _H14 = v161;
      _H1 = v158;
      _H0 = v159;
    }
    while (v39 != v40);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    int64x2_t v11 = (void *)*((void *)result + 16);
    int64x2_t v12 = (void *)*((void *)result + 7);
    uint64_t v13 = **((void **)result + 8);
    uint64_t v14 = **((void **)result + 17);
    float v15 = *(float *)(v10 + 72);
    float v16 = *(float *)(v10 + 76);
    float v17 = *(float *)(v10 + 80);
    float v18 = *(float *)(v10 + 84);
    float v19 = *(float *)(v10 + 88);
    float v20 = *(float *)(v10 + 92);
    float v21 = *(float *)(v10 + 96);
    float v22 = *(float *)(v10 + 100);
    float v23 = *(float *)(v10 + 104);
    uint64_t v24 = v10 + 164;
    uint64_t v25 = v10 + 16548;
    uint64_t v26 = *((void *)result + 14);
    unint64_t v27 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v28 = *(void *)(result + 36);
    uint64_t v29 = *(unsigned __int8 *)(v10 + 161);
    uint64_t v30 = *(unsigned __int8 *)(v10 + 160);
    uint64_t v31 = *(unsigned __int8 *)(v10 + 159);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 158);
    uint64_t v32 = *(unsigned __int8 *)(v10 + 157);
    uint64_t v33 = *(unsigned __int8 *)(v10 + 156);
    uint64_t v34 = *v11 + v27 * v14;
    uint64_t v35 = *(unsigned __int8 *)(v10 + 155);
    uint64_t v36 = *(unsigned __int8 *)(v10 + 154);
    uint64_t v37 = v34 + 4 * v26;
    uint64_t v38 = *v12 + v13 * v8 + 16 * v28;
    float32x2_t v39 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        uint64_t v40 = v7;
        uint64_t v41 = v38;
        uint64_t v42 = v37;
        do
        {
          v43.i32[0] = *(_DWORD *)(v41 + 4 * v36);
          v43.i32[1] = *(_DWORD *)(v41 + 4 * v35);
          _D22 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v43, v39), 0), v39)));
          _D22.i16[0] = *(_WORD *)(v24 + 2 * _D22.u32[0]);
          __asm { FCVT            S24, H22 }
          _D22.i16[0] = *(_WORD *)(v24 + 2 * _D22.u32[1]);
          __asm { FCVT            S25, H22 }
          _D22.i16[0] = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(*(float *)(v41 + 4 * v33) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S26, H22 }
          _S27 = 255.0;
          if (*(short float *)(v25
                              + 2
                              * llroundf(fminf(fmaxf((float)((float)(v16 * _S25) + (float)(_S24 * v15)) + (float)(_S26 * v17), 0.0), 8191.0))) <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H23, #0 }
            if (_NF) {
              _S27 = 0.0;
            }
            else {
              __asm { FCVT            S27, H23 }
            }
          }
          float v54 = *(float *)(v41 + 4 * v32);
          float v55 = (float)((float)(v19 * _S25) + (float)(_S24 * v18)) + (float)(_S26 * v20);
          float v56 = (float)((float)(v22 * _S25) + (float)(_S24 * v21)) + (float)(_S26 * v23);
          short float v57 = *(short float *)(v25 + 2 * llroundf(fminf(fmaxf(v55, 0.0), 8191.0)));
          short float v58 = *(short float *)(v25 + 2 * llroundf(fminf(fmaxf(v56, 0.0), 8191.0)));
          result[v42] = llroundf(_S27);
          if (v57 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H25, #0 }
            if (_NF) {
              _S25 = 0.0;
            }
            else {
              __asm { FCVT            S25, H25 }
            }
          }
          else
          {
            _S25 = 255.0;
          }
          *(unsigned char *)(v42 + v31) = llroundf(_S25);
          if (v58 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H24, #0 }
            if (_NF) {
              _S24 = 0.0;
            }
            else {
              __asm { FCVT            S24, H24 }
            }
          }
          else
          {
            _S24 = 255.0;
          }
          v41 += 16;
          *(unsigned char *)(v42 + v30) = llroundf(_S24);
          *(unsigned char *)(v42 + v29) = llroundf(v54 * 255.0);
          v42 += 4;
          --v40;
        }
        while (v40);
      }
      v38 += v13;
      v37 += v14;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_BGRA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_BGRA_neon_fp16_GCD);
  return 0;
}

float *vt_Copy_RGfA_rgb_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  char v2 = 0;
  uint64_t v3 = 0;
  unint64_t v4 = *(void *)(a1 + 20);
  uint64_t v77 = *(void *)(a1 + 36);
  uint64_t v5 = *(void *)(a1 + 44);
  uint64_t v6 = *(void *)(a1 + 28);
  unint64_t v7 = *a1;
  unint64_t v8 = v6 * a2 / v7;
  uint64_t v9 = v8 + v5;
  unint64_t v10 = (v6 + v6 * a2) / v7;
  uint64_t v75 = v10 + v5;
  uint64_t v11 = *((void *)a1 + 15);
  uint64_t v76 = *((void *)a1 + 14);
  unint64_t v12 = *((void *)a1 + 13) * a2;
  uint64_t v13 = *((void *)a1 + 19);
  uint64_t v14 = **((void **)a1 + 8);
  uint64_t v74 = **((void **)a1 + 7);
  uint64_t v15 = **((void **)a1 + 17);
  uint64_t v73 = **((void **)a1 + 16);
  unsigned int v16 = *(_DWORD *)(v13 + 136);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 154);
  v82[0] = *(unsigned char *)(v13 + 154);
  uint64_t v18 = *(unsigned __int8 *)(v13 + 155);
  v82[1] = *(unsigned char *)(v13 + 155);
  uint64_t v19 = *(unsigned __int8 *)(v13 + 156);
  v82[2] = *(unsigned char *)(v13 + 156);
  uint64_t v20 = *(unsigned __int8 *)(v13 + 157);
  v82[3] = *(unsigned char *)(v13 + 157);
  uint64_t v21 = *(unsigned __int8 *)(v13 + 158);
  v81[0] = *(unsigned char *)(v13 + 158);
  uint64_t v22 = v14 * v9;
  unint64_t v23 = v15 * (v12 / v7 + v11);
  uint64_t v24 = *(unsigned __int8 *)(v13 + 159);
  v81[1] = *(unsigned char *)(v13 + 159);
  uint64_t v25 = *(unsigned __int8 *)(v13 + 160);
  v81[2] = *(unsigned char *)(v13 + 160);
  uint64_t v26 = *(unsigned __int8 *)(v13 + 161);
  v81[3] = v26;
  memset(v80, 0, sizeof(v80));
  long long v78 = 0u;
  long long v79 = 0u;
  do
  {
    unsigned int v27 = 0;
    char v28 = v82[v3];
    char v29 = v81[v3];
    do
    {
      *((unsigned char *)v80 + 8 * ((v2 + v27) >> 3) + v27) = v28 + 4 * v27;
      uint64_t result = (float *)(((unint64_t)&v78 + ((v29 + 4 * v27) & 0xF8)) | (v29 + 4 * (_BYTE)v27) & 7);
      *(unsigned char *)uint64_t result = v2 + v27++;
    }
    while (v27 != 8);
    ++v3;
    v2 += 8;
  }
  while (v3 != 4);
  if (v10 != v8)
  {
    uint64_t v31 = 0;
    uint64_t v32 = v75 - v9;
    _S0 = (float)v16;
    uint64_t v34 = v73 + v23 + 4 * v76;
    uint64_t result = (float *)(v74 + v22 + 16 * v77);
    __asm { FCVT            H1, S0 }
    uint64_t v40 = v20;
    uint64_t v41 = v19;
    uint64_t v42 = v18;
    uint64_t v43 = v17;
    float16x8_t v44 = (float16x8_t)vdupq_n_s16(0x5BF8u);
    do
    {
      if ((int)v4 < 8)
      {
        unint64_t v53 = 0;
        uint64_t v49 = (float32x4_t *)v34;
        float32x2_t v48 = result;
      }
      else
      {
        int v45 = 0;
        int8x8_t v47 = *(int8x8_t *)((char *)&v78 + 8);
        int8x8_t v46 = (int8x8_t)v78;
        float32x2_t v48 = result;
        uint64_t v49 = (float32x4_t *)v34;
        int8x8_t v51 = *(int8x8_t *)((char *)&v79 + 8);
        int8x8_t v50 = (int8x8_t)v79;
        do
        {
          BOOL v52 = v48;
          v48 += 32;
          float32x4x4_t v83 = vld4q_f32(v52);
          v52 += 16;
          float32x4x4_t v84 = vld4q_f32(v52);
          v83.val[1] = (float32x4_t)vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v83.val[0]), v84.val[0]), _H1), (float16x8_t)0), v44)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v83.val[1]), v84.val[1]), _H1), (float16x8_t)0),
                                                     v44)));
          v83.val[2] = (float32x4_t)vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v83.val[2]), v84.val[2]), _H1), (float16x8_t)0), v44)), (int8x16_t)vcvtq_u16_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v83.val[3]), v84.val[3]), v44)));
          *(int8x8_t *)v83.val[0].f32 = vqtbl2_s8(*(int8x16x2_t *)v83.val[1].f32, v46);
          *(int8x8_t *)&v83.val[0].u32[2] = vqtbl2_s8(*(int8x16x2_t *)v83.val[1].f32, v47);
          *(int8x8_t *)v83.val[3].f32 = vqtbl2_s8(*(int8x16x2_t *)v83.val[1].f32, v50);
          *(int8x8_t *)&v83.val[3].u32[2] = vqtbl2_s8(*(int8x16x2_t *)v83.val[1].f32, v51);
          *uint64_t v49 = v83.val[0];
          v49[1] = v83.val[3];
          v49 += 2;
          v45 += 8;
        }
        while (v45 < (int)v4 - 7);
        unint64_t v53 = v4 & 0xFFFFFFF8;
      }
      _CF = v4 >= v53;
      unint64_t v54 = v4 - v53;
      if (v54 != 0 && _CF)
      {
        uint64_t v55 = 0;
        float v56 = &v48[v40];
        short float v57 = &v48[v41];
        short float v58 = &v48[v42];
        float16x8_t v59 = &v48[v43];
        int v60 = (char *)v49 + v26;
        int8x8_t v61 = (char *)v49 + v25;
        int8x8_t v62 = (char *)v49 + v24;
        float v63 = (char *)v49 + v21;
        do
        {
          float v64 = v59[v55] * _S0;
          float v65 = 255.0;
          if (v64 <= 255.0)
          {
            float v65 = v59[v55] * _S0;
            if (v64 < 0.0) {
              float v65 = 0.0;
            }
          }
          float v66 = v57[v55];
          float v67 = v56[v55];
          float v68 = v58[v55] * _S0;
          v63[v55] = llroundf(v65);
          float v69 = 255.0;
          if (v68 <= 255.0)
          {
            float v69 = v68;
            if (v68 < 0.0) {
              float v69 = 0.0;
            }
          }
          char v70 = llroundf(v69);
          float v71 = v66 * _S0;
          v62[v55] = v70;
          float v72 = 255.0;
          if (v71 <= 255.0)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          v61[v55] = llroundf(v72);
          v60[v55] = llroundf(v67 * 255.0);
          v55 += 4;
          --v54;
        }
        while (v54);
      }
      uint64_t result = (float *)((char *)result + v14);
      v34 += v15;
      ++v31;
    }
    while (v31 != v32);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_BGRA_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_rgb_BGRA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *(void *)(result + 152);
    int64x2_t v11 = *(void **)(result + 128);
    int64x2_t v12 = *(void **)(result + 56);
    uint64_t v13 = **(void **)(result + 64);
    uint64_t v14 = **(void **)(result + 136);
    float v15 = (float)*(unsigned int *)(v10 + 136);
    uint64_t v16 = *(void *)(result + 112);
    unint64_t v17 = *(void *)(result + 104) * a2 / v3 + *(void *)(result + 120);
    uint64_t v18 = *(void *)(result + 36);
    uint64_t v19 = *(unsigned __int8 *)(v10 + 161);
    uint64_t v20 = *(unsigned __int8 *)(v10 + 160);
    uint64_t v21 = *(unsigned __int8 *)(v10 + 159);
    uint64_t v22 = *(unsigned __int8 *)(v10 + 158);
    uint64_t v23 = *(unsigned __int8 *)(v10 + 157);
    uint64_t result = *(unsigned __int8 *)(v10 + 156);
    uint64_t v24 = *v11 + v17 * v14;
    uint64_t v25 = *(unsigned __int8 *)(v10 + 155);
    uint64_t v26 = *(unsigned __int8 *)(v10 + 154);
    uint64_t v27 = v24 + 4 * v16;
    uint64_t v28 = *v12 + v13 * v8 + 16 * v18;
    do
    {
      if (v7)
      {
        uint64_t v29 = v7;
        uint64_t v30 = v28;
        uint64_t v31 = v27;
        do
        {
          float v32 = *(float *)(v30 + 4 * v26) * v15;
          float v33 = 255.0;
          if (v32 <= 255.0)
          {
            float v33 = *(float *)(v30 + 4 * v26) * v15;
            if (v32 < 0.0) {
              float v33 = 0.0;
            }
          }
          float v34 = *(float *)(v30 + 4 * result);
          float v35 = *(float *)(v30 + 4 * v23);
          float v36 = *(float *)(v30 + 4 * v25) * v15;
          *(unsigned char *)(v31 + v22) = llroundf(v33);
          float v37 = 255.0;
          if (v36 <= 255.0)
          {
            float v37 = v36;
            if (v36 < 0.0) {
              float v37 = 0.0;
            }
          }
          char v38 = llroundf(v37);
          float v39 = v34 * v15;
          *(unsigned char *)(v31 + v21) = v38;
          float v40 = 255.0;
          if (v39 <= 255.0)
          {
            float v40 = v39;
            if (v39 < 0.0) {
              float v40 = 0.0;
            }
          }
          v30 += 16;
          *(unsigned char *)(v31 + v20) = llroundf(v40);
          *(unsigned char *)(v31 + v19) = llroundf(v35 * 255.0);
          v31 += 4;
          --v29;
        }
        while (v29);
      }
      v28 += v13;
      v27 += v14;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_l10r_GCD(unint64_t result, uint64_t a2, float a3)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *(void *)(result + 152);
    int64x2_t v12 = *(void **)(result + 56);
    uint64_t v13 = **(void **)(result + 64);
    uint64_t v14 = **(void **)(result + 136);
    LOWORD(a3) = *(_WORD *)(v11 + 144);
    float v15 = (float)LODWORD(a3);
    float v16 = *(float *)(v11 + 72);
    float v17 = *(float *)(v11 + 76);
    float v18 = *(float *)(v11 + 80);
    float v19 = *(float *)(v11 + 84);
    float v20 = *(float *)(v11 + 88);
    float v21 = *(float *)(v11 + 92);
    float v22 = *(float *)(v11 + 96);
    float v23 = *(float *)(v11 + 100);
    uint64_t v24 = v11 + 164;
    uint64_t v25 = v11 + 16548;
    uint64_t v26 = v11 + 32932;
    float v27 = *(float *)(v11 + 104);
    float v28 = *(float *)(v11 + 108);
    float v29 = *(float *)(v11 + 112);
    float v30 = *(float *)(v11 + 116);
    float v31 = *(float *)(v11 + 120);
    uint64_t v32 = *(void *)(result + 112);
    unint64_t v33 = *(void *)(result + 104) * a2 / v4 + *(void *)(result + 120);
    uint64_t v34 = *(void *)(result + 36);
    uint64_t v35 = *(unsigned __int8 *)(v11 + 157);
    uint64_t v36 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v37 = **(void **)(result + 128) + v33 * v14;
    uint64_t result = *(unsigned __int8 *)(v11 + 155);
    uint64_t v38 = *(unsigned __int8 *)(v11 + 154);
    float v39 = (unsigned int *)(v37 + 16 * v32);
    uint64_t v40 = *v12 + v13 * v9 + 16 * v34;
    float32x2_t v41 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        uint64_t v42 = v8;
        uint64_t v43 = v39;
        uint64_t v44 = v40;
        do
        {
          v45.i32[0] = *(_DWORD *)(v44 + 4 * v38);
          v45.i32[1] = *(_DWORD *)(v44 + 4 * result);
          _D28 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v45, v41), 0), v41)));
          _D28.i16[0] = *(_WORD *)(v24 + 2 * _D28.u32[0]);
          __asm { FCVT            S28, H28 }
          _H30 = *(_WORD *)(v24 + 2 * _D28.u32[1]);
          __asm { FCVT            S30, H30 }
          _H29 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(*(float *)(v44 + 4 * v36) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S8, H29 }
          float v56 = (float)((float)((float)(v29 * _S30) + (float)(v28 * _S28)) + (float)(v30 * _S8))
              + (float)(v31 * fmaxf(_S28, fmaxf(_S30, _S8)));
          float v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            float v57 = v56;
            if (v56 < 0.0) {
              float v57 = 0.0;
            }
          }
          _H29 = *(_WORD *)(v25 + 2 * llroundf(v57));
          __asm { FCVT            S9, H29 }
          float v60 = _S28 * _S9;
          float v61 = _S30 * _S9;
          float v62 = _S8 * _S9;
          _H28 = *(_WORD *)(v26
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v23 * v61) + (float)((float)(_S28 * _S9) * v22))+ (float)((float)(_S8 * _S9) * v27), 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          float v65 = v15 + _S28;
          BOOL v66 = (float)(v15 + _S28) <= 1023.0;
          float v67 = 1023.0;
          if (v66)
          {
            float v67 = v65;
            if (v65 < 0.0) {
              float v67 = 0.0;
            }
          }
          _H8 = *(_WORD *)(v26
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v20 * v61) + (float)(v60 * v19)) + (float)(v62 * v21), 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          float v70 = v15 + _S8;
          BOOL v66 = (float)(v15 + _S8) <= 1023.0;
          float v71 = 1023.0;
          if (v66)
          {
            float v71 = v70;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          _H29 = *(_WORD *)(v26
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v17 * v61) + (float)(v60 * v16)) + (float)(v62 * v18), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          float v74 = v15 + _S29;
          BOOL v66 = (float)(v15 + _S29) <= 1023.0;
          float v75 = 1023.0;
          if (v66)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          unsigned int v76 = llroundf(*(float *)(v44 + 4 * v35) * 3.0);
          unsigned int v77 = llroundf(v67);
          v44 += 16;
          unsigned int v78 = llroundf(v71) << 10;
          unsigned int v79 = llroundf(v75);
          float v80 = (float)v76;
          if ((float)v76 > 3.0) {
            float v80 = 3.0;
          }
          *v43++ = v78 | v77 | (llroundf(v80) << 30) | (v79 << 20);
          --v42;
        }
        while (v42);
      }
      v40 += v13;
      float v39 = (unsigned int *)((char *)v39 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_l10r_GCD(unint64_t result, uint64_t a2, float a3)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *(void *)(result + 152);
    int64x2_t v12 = *(void **)(result + 56);
    uint64_t v13 = **(void **)(result + 64);
    uint64_t v14 = **(void **)(result + 136);
    LOWORD(a3) = *(_WORD *)(v11 + 144);
    float v15 = (float)LODWORD(a3);
    float v16 = *(float *)(v11 + 72);
    float v17 = *(float *)(v11 + 76);
    float v18 = *(float *)(v11 + 80);
    float v19 = *(float *)(v11 + 84);
    float v20 = *(float *)(v11 + 88);
    float v21 = *(float *)(v11 + 92);
    float v22 = *(float *)(v11 + 96);
    float v23 = *(float *)(v11 + 100);
    float v24 = *(float *)(v11 + 104);
    uint64_t v25 = v11 + 164;
    uint64_t v26 = v11 + 16548;
    uint64_t v27 = *(void *)(result + 112);
    unint64_t v28 = *(void *)(result + 104) * a2 / v4 + *(void *)(result + 120);
    uint64_t v29 = *(void *)(result + 36);
    uint64_t v30 = *(unsigned __int8 *)(v11 + 157);
    uint64_t v31 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v32 = **(void **)(result + 128) + v28 * v14;
    uint64_t v33 = *(unsigned __int8 *)(v11 + 155);
    uint64_t result = *(unsigned __int8 *)(v11 + 154);
    uint64_t v34 = (unsigned int *)(v32 + 16 * v27);
    uint64_t v35 = *v12 + v13 * v9 + 16 * v29;
    float32x2_t v36 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        uint64_t v37 = v8;
        uint64_t v38 = v35;
        float v39 = v34;
        do
        {
          v40.i32[0] = *(_DWORD *)(v38 + 4 * result);
          v40.i32[1] = *(_DWORD *)(v38 + 4 * v33);
          _D24 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v40, v36), 0), v36)));
          _D24.i16[0] = *(_WORD *)(v25 + 2 * _D24.u32[0]);
          __asm { FCVT            S25, H24 }
          _D24.i16[0] = *(_WORD *)(v25 + 2 * _D24.u32[1]);
          __asm { FCVT            S26, H24 }
          _D24.i16[0] = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(*(float *)(v38 + 4 * v31) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          _D24.i16[0] = *(_WORD *)(v26
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v23 * _S26) + (float)(_S25 * v22)) + (float)(_S27 * v24), 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          float v49 = v15 + *(float *)_D24.i32;
          BOOL v50 = (float)(v15 + *(float *)_D24.i32) <= 1023.0;
          float v51 = 1023.0;
          if (v50)
          {
            float v51 = v49;
            if (v49 < 0.0) {
              float v51 = 0.0;
            }
          }
          _H28 = *(_WORD *)(v26
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v20 * _S26) + (float)(_S25 * v19)) + (float)(_S27 * v21), 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          float v54 = v15 + _S28;
          BOOL v50 = (float)(v15 + _S28) <= 1023.0;
          float v55 = 1023.0;
          if (v50)
          {
            float v55 = v54;
            if (v54 < 0.0) {
              float v55 = 0.0;
            }
          }
          _H25 = *(_WORD *)(v26
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v17 * _S26) + (float)(_S25 * v16)) + (float)(_S27 * v18), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v58 = v15 + _S25;
          BOOL v50 = (float)(v15 + _S25) <= 1023.0;
          float v59 = 1023.0;
          if (v50)
          {
            float v59 = v58;
            if (v58 < 0.0) {
              float v59 = 0.0;
            }
          }
          unsigned int v60 = llroundf(*(float *)(v38 + 4 * v30) * 3.0);
          unsigned int v61 = llroundf(v51);
          v38 += 16;
          unsigned int v62 = llroundf(v55) << 10;
          unsigned int v63 = llroundf(v59);
          float v64 = (float)v60;
          if ((float)v60 > 3.0) {
            float v64 = 3.0;
          }
          *v39++ = v62 | v61 | (llroundf(v64) << 30) | (v63 << 20);
          --v37;
        }
        while (v37);
      }
      v35 += v13;
      uint64_t v34 = (unsigned int *)((char *)v34 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(result + 20);
    unint64_t v10 = v6 + *(void *)(result + 44);
    unint64_t v11 = v7 - v6;
    uint64_t v12 = *((void *)result + 19);
    uint64_t v13 = **((void **)result + 8);
    uint64_t v14 = **((void **)result + 17);
    float v15 = (float)*(unsigned int *)(v12 + 136);
    LOWORD(a4) = *(_WORD *)(v12 + 144);
    float v16 = (float)LODWORD(a4);
    unint64_t v17 = *((void *)result + 13) * a2 / v5 + *((void *)result + 15);
    uint64_t v18 = *(unsigned __int8 *)(v12 + 157);
    uint64_t v19 = *(unsigned __int8 *)(v12 + 156);
    uint64_t v20 = *(unsigned __int8 *)(v12 + 155);
    uint64_t v21 = *(unsigned __int8 *)(v12 + 154);
    uint64_t v22 = **((void **)result + 16) + v17 * v14 + 16 * *((void *)result + 14);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v13 * v10 + 16 * *(void *)(result + 36));
    do
    {
      if (v9)
      {
        uint64_t v23 = v9;
        uint64_t v24 = result;
        uint64_t v25 = (unsigned int *)v22;
        do
        {
          unsigned int v26 = llroundf(*(float *)&v24[4 * v18] * 3.0);
          float v27 = (float)(*(float *)&v24[4 * v19] * v15) + v16;
          if (v27 < 0.0) {
            float v28 = 0.0;
          }
          else {
            float v28 = (float)(*(float *)&v24[4 * v19] * v15) + v16;
          }
          if (v27 <= 1023.0) {
            float v29 = v28;
          }
          else {
            float v29 = 1023.0;
          }
          unsigned int v30 = llroundf(v29);
          float v31 = (float)(*(float *)&v24[4 * v20] * v15) + v16;
          if (v31 < 0.0) {
            float v32 = 0.0;
          }
          else {
            float v32 = (float)(*(float *)&v24[4 * v20] * v15) + v16;
          }
          if (v31 <= 1023.0) {
            float v33 = v32;
          }
          else {
            float v33 = 1023.0;
          }
          unsigned int v34 = llroundf(v33);
          float v35 = (float)(*(float *)&v24[4 * v21] * v15) + v16;
          if (v35 < 0.0) {
            float v36 = 0.0;
          }
          else {
            float v36 = (float)(*(float *)&v24[4 * v21] * v15) + v16;
          }
          if (v35 <= 1023.0) {
            float v37 = v36;
          }
          else {
            float v37 = 1023.0;
          }
          float v38 = (float)v26;
          unsigned int v39 = llroundf(v37);
          v24 += 16;
          if (v38 <= 3.0) {
            float v40 = v38;
          }
          else {
            float v40 = 3.0;
          }
          *v25++ = (v34 << 10) | v30 | (llroundf(v40) << 30) | (v39 << 20);
          --v23;
        }
        while (v23);
      }
      result += v13;
      v22 += v14;
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_l64r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *(void *)(result + 152);
    int64x2_t v11 = *(void **)(result + 56);
    uint64_t v12 = **(void **)(result + 64);
    uint64_t v13 = **(void **)(result + 136);
    float v14 = *(float *)(v10 + 72);
    float v15 = *(float *)(v10 + 76);
    float v16 = *(float *)(v10 + 80);
    float v17 = *(float *)(v10 + 84);
    float v18 = *(float *)(v10 + 88);
    float v19 = *(float *)(v10 + 92);
    float v20 = *(float *)(v10 + 96);
    float v21 = *(float *)(v10 + 100);
    uint64_t v22 = v10 + 164;
    uint64_t v23 = v10 + 16548;
    uint64_t v24 = v10 + 32932;
    float v25 = *(float *)(v10 + 104);
    float v26 = *(float *)(v10 + 108);
    float v27 = *(float *)(v10 + 112);
    float v28 = *(float *)(v10 + 116);
    float v29 = *(float *)(v10 + 120);
    uint64_t v30 = *(void *)(result + 112);
    unint64_t v31 = *(void *)(result + 104) * a2 / v3 + *(void *)(result + 120);
    uint64_t v32 = *(void *)(result + 36);
    uint64_t v33 = *(unsigned __int8 *)(v10 + 157);
    uint64_t v34 = *(unsigned __int8 *)(v10 + 156);
    uint64_t v35 = **(void **)(result + 128) + v31 * v13;
    uint64_t result = *(unsigned __int8 *)(v10 + 155);
    uint64_t v36 = *(unsigned __int8 *)(v10 + 154);
    float v37 = (_WORD *)(v35 + 8 * v30);
    uint64_t v38 = *v11 + v12 * v8 + 16 * v32;
    float32x2_t v39 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        uint64_t v40 = v7;
        uint64_t v41 = v38;
        uint64_t v42 = v37;
        do
        {
          v43.i32[0] = *(_DWORD *)(v41 + 4 * v36);
          v43.i32[1] = *(_DWORD *)(v41 + 4 * result);
          _D26 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v43, v39), 0), v39)));
          _D26.i16[0] = *(_WORD *)(v22 + 2 * _D26.u32[0]);
          __asm { FCVT            S26, H26 }
          _H28 = *(_WORD *)(v22 + 2 * _D26.u32[1]);
          __asm { FCVT            S28, H28 }
          _H27 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(*(float *)(v41 + 4 * v34) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S30, H27 }
          float v54 = (float)((float)((float)(v27 * _S28) + (float)(v26 * _S26)) + (float)(v28 * _S30))
              + (float)(v29 * fmaxf(_S26, fmaxf(_S28, _S30)));
          float v55 = 8191.0;
          if (v54 <= 8191.0)
          {
            float v55 = v54;
            if (v54 < 0.0) {
              float v55 = 0.0;
            }
          }
          _H27 = *(_WORD *)(v23 + 2 * llroundf(v55));
          __asm { FCVT            S31, H27 }
          float v58 = _S26 * _S31;
          float v59 = _S28 * _S31;
          float v60 = _S30 * _S31;
          _H26 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v15 * v59) + (float)((float)(_S26 * _S31) * v14))+ (float)((float)(_S30 * _S31) * v16), 0.0), 8191.0)));
          __asm { FCVT            S31, H26 }
          float v63 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H26, #0 }
            float v63 = _S31;
            if (_NF) {
              float v63 = 0.0;
            }
          }
          float v65 = *(float *)(v41 + 4 * v33);
          float v66 = (float)((float)(v18 * v59) + (float)(v58 * v17)) + (float)(v60 * v19);
          float v67 = (float)((float)(v21 * v59) + (float)(v58 * v20)) + (float)(v60 * v25);
          _H28 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S31, H28 }
          *uint64_t v42 = llroundf(v63);
          float v71 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H28, #0 }
            float v71 = _S31;
            if (_NF) {
              float v71 = 0.0;
            }
          }
          __asm { FCVT            S30, H27 }
          v42[1] = llroundf(v71);
          float v74 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCMP            H27, #0 }
            float v74 = _S30;
            if (_NF) {
              float v74 = 0.0;
            }
          }
          v41 += 16;
          v42[2] = llroundf(v74);
          v42[3] = llroundf(v65 * 65535.0);
          v42 += 4;
          --v40;
        }
        while (v40);
      }
      v38 += v12;
      float v37 = (_WORD *)((char *)v37 + v13);
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_l64r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *(void *)(result + 152);
    int64x2_t v11 = *(void **)(result + 56);
    uint64_t v12 = **(void **)(result + 64);
    uint64_t v13 = **(void **)(result + 136);
    float v14 = *(float *)(v10 + 72);
    float v15 = *(float *)(v10 + 76);
    float v16 = *(float *)(v10 + 80);
    float v17 = *(float *)(v10 + 84);
    float v18 = *(float *)(v10 + 88);
    float v19 = *(float *)(v10 + 92);
    float v20 = *(float *)(v10 + 96);
    float v21 = *(float *)(v10 + 100);
    float v22 = *(float *)(v10 + 104);
    uint64_t v23 = v10 + 164;
    uint64_t v24 = v10 + 16548;
    uint64_t v25 = *(void *)(result + 112);
    unint64_t v26 = *(void *)(result + 104) * a2 / v3 + *(void *)(result + 120);
    uint64_t v27 = *(void *)(result + 36);
    uint64_t v28 = *(unsigned __int8 *)(v10 + 157);
    uint64_t v29 = *(unsigned __int8 *)(v10 + 156);
    uint64_t v30 = **(void **)(result + 128) + v26 * v13;
    uint64_t v31 = *(unsigned __int8 *)(v10 + 155);
    uint64_t result = *(unsigned __int8 *)(v10 + 154);
    uint64_t v32 = (_WORD *)(v30 + 8 * v25);
    uint64_t v33 = *v11 + v12 * v8 + 16 * v27;
    float32x2_t v34 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        uint64_t v35 = v7;
        uint64_t v36 = v33;
        float v37 = v32;
        do
        {
          v38.i32[0] = *(_DWORD *)(v36 + 4 * result);
          v38.i32[1] = *(_DWORD *)(v36 + 4 * v31);
          _D22 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v38, v34), 0), v34)));
          _D22.i16[0] = *(_WORD *)(v23 + 2 * _D22.u32[0]);
          __asm { FCVT            S23, H22 }
          _D22.i16[0] = *(_WORD *)(v23 + 2 * _D22.u32[1]);
          __asm { FCVT            S24, H22 }
          _D22.i16[0] = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(*(float *)(v36 + 4 * v29) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          _D22.i16[0] = *(_WORD *)(v24
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v15 * _S24) + (float)(_S23 * v14)) + (float)(_S25 * v16), 0.0), 8191.0)));
          __asm { FCVT            S27, H22 }
          float v48 = 65535.0;
          if (_S27 <= 65535.0)
          {
            __asm { FCMP            H22, #0 }
            float v48 = _S27;
            if (_NF) {
              float v48 = 0.0;
            }
          }
          float v50 = *(float *)(v36 + 4 * v28);
          float v51 = (float)((float)(v18 * _S24) + (float)(_S23 * v17)) + (float)(_S25 * v19);
          float v52 = (float)((float)(v21 * _S24) + (float)(_S23 * v20)) + (float)(_S25 * v22);
          _H24 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v51, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v52, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          *float v37 = llroundf(v48);
          float v56 = 65535.0;
          if (_S27 <= 65535.0)
          {
            __asm { FCMP            H24, #0 }
            float v56 = _S27;
            if (_NF) {
              float v56 = 0.0;
            }
          }
          __asm { FCVT            S26, H23 }
          v37[1] = llroundf(v56);
          float v59 = 65535.0;
          if (_S26 <= 65535.0)
          {
            __asm { FCMP            H23, #0 }
            float v59 = _S26;
            if (_NF) {
              float v59 = 0.0;
            }
          }
          v36 += 16;
          CFTypeRef v37[2] = llroundf(v59);
          v37[3] = llroundf(v50 * 65535.0);
          v37 += 4;
          --v35;
        }
        while (v35);
      }
      v33 += v12;
      uint64_t v32 = (_WORD *)((char *)v32 + v13);
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    uint64_t v11 = **((void **)result + 8);
    uint64_t v12 = **((void **)result + 17);
    float v13 = (float)*(unsigned int *)(v10 + 136);
    unint64_t v14 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v15 = *(unsigned __int8 *)(v10 + 157);
    uint64_t v16 = *(unsigned __int8 *)(v10 + 156);
    uint64_t v17 = *(unsigned __int8 *)(v10 + 155);
    uint64_t v18 = *(unsigned __int8 *)(v10 + 154);
    uint64_t v19 = **((void **)result + 16) + v14 * v12 + 8 * *((void *)result + 14);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v11 * v8 + 16 * *(void *)(result + 36));
    do
    {
      if (v7)
      {
        uint64_t v20 = v7;
        long long v21 = result;
        int64x2_t v22 = (_WORD *)v19;
        do
        {
          float v23 = *(float *)&v21[4 * v18] * v13;
          float v24 = 65535.0;
          if (v23 <= 65535.0)
          {
            float v24 = *(float *)&v21[4 * v18] * v13;
            if (v23 < 0.0) {
              float v24 = 0.0;
            }
          }
          float v25 = *(float *)&v21[4 * v16];
          float v26 = *(float *)&v21[4 * v15];
          float v27 = *(float *)&v21[4 * v17] * v13;
          *int64x2_t v22 = llroundf(v24);
          float v28 = 65535.0;
          if (v27 <= 65535.0)
          {
            float v28 = v27;
            if (v27 < 0.0) {
              float v28 = 0.0;
            }
          }
          float v29 = v25 * v13;
          v22[1] = llroundf(v28);
          BOOL v30 = (float)(v25 * v13) <= 65535.0;
          float v31 = 65535.0;
          if (v30)
          {
            float v31 = v29;
            if (v29 < 0.0) {
              float v31 = 0.0;
            }
          }
          v21 += 16;
          v22[2] = llroundf(v31);
          v22[3] = llroundf(v26 * 65535.0);
          v22 += 4;
          --v20;
        }
        while (v20);
      }
      result += v11;
      v19 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_b64a_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *(void *)(result + 152);
    int64x2_t v11 = *(void **)(result + 56);
    uint64_t v12 = **(void **)(result + 64);
    uint64_t v13 = **(void **)(result + 136);
    float v14 = *(float *)(v10 + 72);
    float v15 = *(float *)(v10 + 76);
    float v16 = *(float *)(v10 + 80);
    float v17 = *(float *)(v10 + 84);
    float v18 = *(float *)(v10 + 88);
    float v19 = *(float *)(v10 + 92);
    float v20 = *(float *)(v10 + 96);
    float v21 = *(float *)(v10 + 100);
    uint64_t v22 = v10 + 164;
    uint64_t v23 = v10 + 16548;
    uint64_t v24 = v10 + 32932;
    float v25 = *(float *)(v10 + 104);
    float v26 = *(float *)(v10 + 108);
    float v27 = *(float *)(v10 + 112);
    float v28 = *(float *)(v10 + 116);
    float v29 = *(float *)(v10 + 120);
    uint64_t v30 = *(void *)(result + 112);
    unint64_t v31 = *(void *)(result + 104) * a2 / v3 + *(void *)(result + 120);
    uint64_t v32 = *(void *)(result + 36);
    uint64_t v33 = *(unsigned __int8 *)(v10 + 157);
    uint64_t v34 = *(unsigned __int8 *)(v10 + 156);
    uint64_t v35 = **(void **)(result + 128) + v31 * v13;
    uint64_t result = *(unsigned __int8 *)(v10 + 155);
    uint64_t v36 = *(unsigned __int8 *)(v10 + 154);
    float v37 = (_WORD *)(v35 + 8 * v30);
    uint64_t v38 = *v11 + v12 * v8 + 16 * v32;
    float32x2_t v39 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        uint64_t v40 = v7;
        uint64_t v41 = v38;
        uint64_t v42 = v37;
        do
        {
          v43.i32[0] = *(_DWORD *)(v41 + 4 * v36);
          v43.i32[1] = *(_DWORD *)(v41 + 4 * result);
          _D26 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v43, v39), 0), v39)));
          _D26.i16[0] = *(_WORD *)(v22 + 2 * _D26.u32[0]);
          __asm { FCVT            S26, H26 }
          _H28 = *(_WORD *)(v22 + 2 * _D26.u32[1]);
          __asm { FCVT            S28, H28 }
          _H27 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(*(float *)(v41 + 4 * v34) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S30, H27 }
          float v54 = (float)((float)((float)(v27 * _S28) + (float)(v26 * _S26)) + (float)(v28 * _S30))
              + (float)(v29 * fmaxf(_S26, fmaxf(_S28, _S30)));
          float v55 = 8191.0;
          if (v54 <= 8191.0)
          {
            float v55 = v54;
            if (v54 < 0.0) {
              float v55 = 0.0;
            }
          }
          _H27 = *(_WORD *)(v23 + 2 * llroundf(v55));
          __asm { FCVT            S31, H27 }
          float v58 = _S26 * _S31;
          float v59 = _S28 * _S31;
          float v60 = _S30 * _S31;
          _H30 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v15 * v59) + (float)((float)(_S26 * _S31) * v14))+ (float)((float)(_S30 * _S31) * v16), 0.0), 8191.0)));
          __asm { FCVT            S31, H30 }
          float v63 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H30, #0 }
            float v63 = _S31;
            if (_NF) {
              float v63 = 0.0;
            }
          }
          _H31 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v18 * v59) + (float)(v58 * v17)) + (float)(v60 * v19), 0.0), 8191.0)));
          __asm { FCVT            S8, H31 }
          float v67 = 65535.0;
          if (_S8 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v67 = _S8;
            if (_NF) {
              float v67 = 0.0;
            }
          }
          _H28 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v21 * v59) + (float)(v58 * v20)) + (float)(v60 * v25), 0.0), 8191.0)));
          __asm { FCVT            S29, H28 }
          float v71 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCMP            H28, #0 }
            float v71 = _S29;
            if (_NF) {
              float v71 = 0.0;
            }
          }
          float v73 = *(float *)(v41 + 4 * v33);
          v41 += 16;
          *uint64_t v42 = __rev16(llroundf(v73 * 65535.0));
          v42[1] = __rev16(llroundf(v63));
          v42[2] = __rev16(llroundf(v67));
          v42[3] = __rev16(llroundf(v71));
          v42 += 4;
          --v40;
        }
        while (v40);
      }
      v38 += v12;
      float v37 = (_WORD *)((char *)v37 + v13);
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_b64a_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *(void *)(result + 152);
    int64x2_t v11 = *(void **)(result + 56);
    uint64_t v12 = **(void **)(result + 64);
    uint64_t v13 = **(void **)(result + 136);
    float v14 = *(float *)(v10 + 72);
    float v15 = *(float *)(v10 + 76);
    float v16 = *(float *)(v10 + 80);
    float v17 = *(float *)(v10 + 84);
    float v18 = *(float *)(v10 + 88);
    float v19 = *(float *)(v10 + 92);
    float v20 = *(float *)(v10 + 96);
    float v21 = *(float *)(v10 + 100);
    float v22 = *(float *)(v10 + 104);
    uint64_t v23 = v10 + 164;
    uint64_t v24 = v10 + 16548;
    uint64_t v25 = *(void *)(result + 112);
    unint64_t v26 = *(void *)(result + 104) * a2 / v3 + *(void *)(result + 120);
    uint64_t v27 = *(void *)(result + 36);
    uint64_t v28 = *(unsigned __int8 *)(v10 + 157);
    uint64_t v29 = *(unsigned __int8 *)(v10 + 156);
    uint64_t v30 = **(void **)(result + 128) + v26 * v13;
    uint64_t v31 = *(unsigned __int8 *)(v10 + 155);
    uint64_t result = *(unsigned __int8 *)(v10 + 154);
    uint64_t v32 = (_WORD *)(v30 + 8 * v25);
    uint64_t v33 = *v11 + v12 * v8 + 16 * v27;
    float32x2_t v34 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        uint64_t v35 = v7;
        uint64_t v36 = v33;
        float v37 = v32;
        do
        {
          v38.i32[0] = *(_DWORD *)(v36 + 4 * result);
          v38.i32[1] = *(_DWORD *)(v36 + 4 * v31);
          _D22 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v38, v34), 0), v34)));
          _D22.i16[0] = *(_WORD *)(v23 + 2 * _D22.u32[0]);
          __asm { FCVT            S23, H22 }
          _D22.i16[0] = *(_WORD *)(v23 + 2 * _D22.u32[1]);
          __asm { FCVT            S24, H22 }
          _D22.i16[0] = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(*(float *)(v36 + 4 * v29) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          _H26 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v15 * _S24) + (float)(_S23 * v14)) + (float)(_S25 * v16), 0.0), 8191.0)));
          __asm { FCVT            S27, H26 }
          float v49 = 65535.0;
          if (_S27 <= 65535.0)
          {
            __asm { FCMP            H26, #0 }
            float v49 = _S27;
            if (_NF) {
              float v49 = 0.0;
            }
          }
          _H27 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v18 * _S24) + (float)(_S23 * v17)) + (float)(_S25 * v19), 0.0), 8191.0)));
          __asm { FCVT            S28, H27 }
          float v53 = 65535.0;
          if (_S28 <= 65535.0)
          {
            __asm { FCMP            H27, #0 }
            float v53 = _S28;
            if (_NF) {
              float v53 = 0.0;
            }
          }
          _H24 = *(_WORD *)(v24
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v21 * _S24) + (float)(_S23 * v20)) + (float)(_S25 * v22), 0.0), 8191.0)));
          __asm { FCVT            S25, H24 }
          float v57 = 65535.0;
          if (_S25 <= 65535.0)
          {
            __asm { FCMP            H24, #0 }
            float v57 = _S25;
            if (_NF) {
              float v57 = 0.0;
            }
          }
          float v59 = *(float *)(v36 + 4 * v28);
          v36 += 16;
          *float v37 = __rev16(llroundf(v59 * 65535.0));
          v37[1] = __rev16(llroundf(v49));
          CFTypeRef v37[2] = __rev16(llroundf(v53));
          v37[3] = __rev16(llroundf(v57));
          v37 += 4;
          --v35;
        }
        while (v35);
      }
      v33 += v12;
      uint64_t v32 = (_WORD *)((char *)v32 + v13);
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    uint64_t v11 = **((void **)result + 8);
    uint64_t v12 = **((void **)result + 17);
    float v13 = (float)*(unsigned int *)(v10 + 136);
    unint64_t v14 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v15 = *(unsigned __int8 *)(v10 + 157);
    uint64_t v16 = *(unsigned __int8 *)(v10 + 156);
    uint64_t v17 = *(unsigned __int8 *)(v10 + 155);
    uint64_t v18 = *(unsigned __int8 *)(v10 + 154);
    uint64_t v19 = **((void **)result + 16) + v14 * v12 + 8 * *((void *)result + 14);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v11 * v8 + 16 * *(void *)(result + 36));
    do
    {
      if (v7)
      {
        uint64_t v20 = v7;
        long long v21 = result;
        int64x2_t v22 = (_WORD *)v19;
        do
        {
          float v23 = *(float *)&v21[4 * v18] * v13;
          float v24 = 65535.0;
          if (v23 <= 65535.0)
          {
            float v24 = *(float *)&v21[4 * v18] * v13;
            if (v23 < 0.0) {
              float v24 = 0.0;
            }
          }
          float v25 = *(float *)&v21[4 * v17] * v13;
          float v26 = 65535.0;
          if (v25 <= 65535.0)
          {
            float v26 = *(float *)&v21[4 * v17] * v13;
            if (v25 < 0.0) {
              float v26 = 0.0;
            }
          }
          float v27 = *(float *)&v21[4 * v16] * v13;
          float v28 = 65535.0;
          if (v27 <= 65535.0)
          {
            float v28 = *(float *)&v21[4 * v16] * v13;
            if (v27 < 0.0) {
              float v28 = 0.0;
            }
          }
          float v29 = *(float *)&v21[4 * v15];
          v21 += 16;
          *int64x2_t v22 = __rev16(llroundf(v29 * 65535.0));
          v22[1] = __rev16(llroundf(v24));
          v22[2] = __rev16(llroundf(v26));
          v22[3] = __rev16(llroundf(v28));
          v22 += 4;
          --v20;
        }
        while (v20);
      }
      result += v11;
      v19 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGhA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *(void *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 36);
  uint64_t v5 = *(void *)(a1 + 44);
  uint64_t v6 = *(void *)(a1 + 28);
  unint64_t v7 = *a1;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  uint64_t v10 = *((void *)a1 + 14);
  unint64_t v11 = *((void *)a1 + 13) * a2;
  uint64_t v12 = *((void *)a1 + 19);
  uint64_t v14 = *((void *)a1 + 15);
  int64x2_t v13 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v15 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v16 = **((void **)a1 + 8);
  uint64_t result = **((void **)a1 + 7);
  uint64_t v18 = *v15;
  uint64_t v19 = *v13;
  uint64_t v20 = *(unsigned __int8 *)(v12 + 154);
  v172[0] = *(unsigned char *)(v12 + 154);
  uint64_t v21 = *(unsigned __int8 *)(v12 + 155);
  v172[1] = *(unsigned char *)(v12 + 155);
  uint64_t v22 = *(unsigned __int8 *)(v12 + 156);
  v172[2] = *(unsigned char *)(v12 + 156);
  uint64_t v23 = *(unsigned __int8 *)(v12 + 157);
  v172[3] = *(unsigned char *)(v12 + 157);
  _S21 = *(float *)(v12 + 72);
  _S22 = *(float *)(v12 + 76);
  _S23 = *(float *)(v12 + 80);
  _S24 = *(float *)(v12 + 84);
  uint64_t v28 = v11 / v7 + v14;
  uint64_t v29 = v16 * (v8 + v5);
  _S25 = *(float *)(v12 + 88);
  _S31 = *(float *)(v12 + 92);
  uint64_t v32 = v18 * v28;
  _S8 = *(float *)(v12 + 96);
  _S9 = *(float *)(v12 + 100);
  _S10 = *(float *)(v12 + 104);
  float v170 = *(float *)(v12 + 108);
  _S29 = *(float *)(v12 + 116);
  float v169 = *(float *)(v12 + 112);
  _S20 = *(float *)(v12 + 120);
  memset(v171, 0, sizeof(v171));
  do
  {
    unsigned int v38 = 0;
    char v39 = v172[v2];
    do
    {
      *((unsigned char *)v171 + 8 * (((_BYTE)v2 + (v38 >> 3)) & 0x1F) + v38) = v39 + 4 * v38;
      ++v38;
    }
    while (v38 != 8);
    ++v2;
  }
  while (v2 != 4);
  if (v9 != v8)
  {
    uint64_t v40 = 0;
    unint64_t v41 = v9 - v8;
    uint64_t v42 = v12 + 16548;
    _S0 = v170;
    __asm { FCVT            H11, S0 }
    _S0 = v169;
    __asm
    {
      FCVT            H5, S0
      FCVT            H12, S29
    }
    uint64_t v52 = v12 + 32932;
    uint64_t v53 = v12 + 164;
    __asm
    {
      FCVT            H13, S20
      FCVT            H14, S21
      FCVT            H15, S22
      FCVT            H0, S23
      FCVT            H1, S24
      FCVT            H2, S25
    }
    uint64_t v60 = v19 + v32 + 8 * v10;
    __asm
    {
      FCVT            H3, S31
      FCVT            H4, S8
    }
    uint64_t v63 = result + v29 + 16 * v4;
    __asm { FCVT            H6, S9 }
    uint64_t result = (v3 - 7);
    __asm { FCVT            H7, S10 }
    uint64_t v144 = v21;
    uint64_t v143 = v20;
    v66.i64[0] = 0x7000700070007000;
    v66.i64[1] = 0x7000700070007000;
    v67.i64[0] = 0x9000900090009000;
    v67.i64[1] = 0x9000900090009000;
    short float v165 = _H11;
    short float v166 = _H5;
    short float v163 = _H13;
    short float v164 = _H12;
    short float v161 = _H15;
    short float v162 = _H14;
    short float v159 = _H1;
    short float v160 = _H0;
    short float v167 = _H7;
    short float v168 = _H2;
    short float v157 = _H4;
    short float v158 = _H3;
    short float v156 = _H6;
    uint64_t v155 = v18;
    float v153 = _S22;
    float v154 = _S21;
    float v151 = _S24;
    float v152 = _S23;
    float v149 = _S31;
    float v150 = _S25;
    float v147 = _S9;
    float v148 = _S8;
    float v146 = _S10;
    unint64_t v145 = v41;
    do
    {
      if ((int)v3 < 8)
      {
        unint64_t v115 = 0;
        float v71 = (const float *)v63;
        float v70 = (__int16 *)v60;
      }
      else
      {
        uint64_t v68 = v16;
        int v69 = 0;
        float v70 = (__int16 *)v60;
        float v71 = (const float *)v63;
        short float v72 = _H6;
        do
        {
          float v73 = v71;
          float32x4x4_t v175 = vld4q_f32(v73);
          v73 += 16;
          float32x4x4_t v174 = vld4q_f32(v73);
          uint16x8_t v74 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v175.val[0]), v174.val[0]), v66), (float16x8_t)0), v67));
          uint32x4_t v75 = vmovl_high_u16(v74);
          float16x8_t v76 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v74.i8);
          v76.i16[0] = *(_WORD *)(v53 + 2 * v76.u32[0]);
          uint64_t v77 = v75.u32[1];
          uint64_t v78 = v75.u32[3];
          unsigned int v79 = (__int16 *)(v53 + 2 * v75.u32[0]);
          float v80 = (__int16 *)(v53 + 2 * v75.u32[2]);
          uint16x8_t v81 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v175.val[1]), v174.val[1]), v66), (float16x8_t)0), v67));
          uint32x4_t v82 = vmovl_high_u16(v81);
          float16x8_t v83 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v81.i8);
          v83.i16[0] = *(_WORD *)(v53 + 2 * v83.u32[0]);
          float32x4x4_t v84 = (__int16 *)(v53 + 2 * v82.u32[0]);
          short float v85 = (__int16 *)(v53 + 2 * v82.u32[1]);
          v76.i16[1] = *(_WORD *)(v53 + 2 * v76.u32[1]);
          float16x8_t v86 = (__int16 *)(v53 + 2 * v82.u32[2]);
          uint16x8_t v87 = (__int16 *)(v53 + 2 * v82.u32[3]);
          v83.i16[1] = *(_WORD *)(v53 + 2 * v83.u32[1]);
          v76.i16[2] = *(_WORD *)(v53 + 2 * v76.u32[2]);
          v83.i16[2] = *(_WORD *)(v53 + 2 * v83.u32[2]);
          v76.i16[3] = *(_WORD *)(v53 + 2 * v76.u32[3]);
          uint16x8_t v88 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v175.val[2]), v174.val[2]), v66), (float16x8_t)0), v67));
          uint32x4_t v89 = vmovl_high_u16(v88);
          v83.i16[3] = *(_WORD *)(v53 + 2 * v83.u32[3]);
          float16x8_t v90 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v88.i8);
          v76.i16[4] = *v79;
          v90.i16[0] = *(_WORD *)(v53 + 2 * v90.u32[0]);
          v83.i16[4] = *v84;
          v76.i16[5] = *(_WORD *)(v53 + 2 * v77);
          v83.i16[5] = *v85;
          v76.i16[6] = *v80;
          v83.i16[6] = *v86;
          v90.i16[1] = *(_WORD *)(v53 + 2 * v90.u32[1]);
          v90.i16[2] = *(_WORD *)(v53 + 2 * v90.u32[2]);
          v76.i16[7] = *(_WORD *)(v53 + 2 * v78);
          v90.i16[3] = *(_WORD *)(v53 + 2 * v90.u32[3]);
          v90.i16[4] = *(_WORD *)(v53 + 2 * v89.u32[0]);
          v83.i16[7] = *v87;
          v90.i16[5] = *(_WORD *)(v53 + 2 * v89.u32[1]);
          v90.i16[6] = *(_WORD *)(v53 + 2 * v89.u32[2]);
          v90.i16[7] = *(_WORD *)(v53 + 2 * v89.u32[3]);
          uint16x8_t v91 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v76, _H11), v83, _H5), v90, _H12), vmaxq_f16(vmaxq_f16(v76, v83), v90), _H13), (float16x8_t)0), v67));
          uint32x4_t v92 = vmovl_high_u16(v91);
          float16x8_t v93 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v91.i8);
          v93.i16[0] = *(_WORD *)(v42 + 2 * v93.u32[0]);
          v93.i16[1] = *(_WORD *)(v42 + 2 * v93.u32[1]);
          v93.i16[2] = *(_WORD *)(v42 + 2 * v93.u32[2]);
          v93.i16[3] = *(_WORD *)(v42 + 2 * v93.u32[3]);
          v93.i16[4] = *(_WORD *)(v42 + 2 * v92.u32[0]);
          v93.i16[5] = *(_WORD *)(v42 + 2 * v92.u32[1]);
          v93.i16[6] = *(_WORD *)(v42 + 2 * v92.u32[2]);
          v93.i16[7] = *(_WORD *)(v42 + 2 * v92.u32[3]);
          v173.val[1] = (int16x8_t)vmulq_f16(v76, v93);
          float16x8_t v94 = vmulq_f16(v83, v93);
          float16x8_t v95 = vmulq_f16(v90, v93);
          float16x8_t v96 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v173.val[1], _H14), v94, _H15), v95, _H0);
          float16x8_t v97 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v173.val[1], _H1), v94, v168), v95, _H3);
          float16x8_t v98 = vmlaq_n_f16(vmulq_n_f16(v95, v167), v94, v72);
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v96, (float16x8_t)0), v67));
          uint32x4_t v100 = vmovl_high_u16(v99);
          uint64_t v101 = v100.u32[2];
          uint64_t v102 = v100.u32[3];
          v173.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v99.i8);
          uint64_t v103 = v100.u32[1];
          uint64_t v104 = v100.u32[0];
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v97, (float16x8_t)0), v67));
          uint32x4_t v106 = vmovl_u16(*(uint16x4_t *)v105.i8);
          v173.val[0].i16[0] = *(_WORD *)(v52 + 2 * v173.val[0].u32[0]);
          v173.val[0].i16[1] = *(_WORD *)(v52 + 2 * v173.val[0].u32[1]);
          uint32x4_t v107 = vmovl_high_u16(v105);
          uint64_t v108 = v107.u32[1];
          uint64_t v109 = v107.u32[0];
          uint64_t v110 = v107.u32[3];
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v98, (float16x8_t)v173.val[1], _H4), (float16x8_t)0), v67));
          uint64_t v112 = v107.u32[2];
          uint32x4_t v113 = vmovl_u16(*(uint16x4_t *)v111.i8);
          v173.val[0].i16[2] = *(_WORD *)(v52 + 2 * v173.val[0].u32[2]);
          v173.val[0].i16[3] = *(_WORD *)(v52 + 2 * v173.val[0].u32[3]);
          v173.val[0].i16[4] = *(_WORD *)(v52 + 2 * v104);
          v173.val[0].i16[5] = *(_WORD *)(v52 + 2 * v103);
          uint32x4_t v114 = vmovl_high_u16(v111);
          v173.val[0].i16[6] = *(_WORD *)(v52 + 2 * v101);
          v173.val[0].i16[7] = *(_WORD *)(v52 + 2 * v102);
          v173.val[1].i16[0] = *(_WORD *)(v52 + 2 * v106.u32[0]);
          v173.val[1].i16[1] = *(_WORD *)(v52 + 2 * v106.u32[1]);
          v173.val[1].i16[2] = *(_WORD *)(v52 + 2 * v106.u32[2]);
          v173.val[1].i16[3] = *(_WORD *)(v52 + 2 * v106.u32[3]);
          v173.val[1].i16[4] = *(_WORD *)(v52 + 2 * v109);
          v173.val[1].i16[5] = *(_WORD *)(v52 + 2 * v108);
          v173.val[1].i16[6] = *(_WORD *)(v52 + 2 * v112);
          v173.val[1].i16[7] = *(_WORD *)(v52 + 2 * v110);
          v173.val[2].i16[0] = *(_WORD *)(v52 + 2 * v113.u32[0]);
          v173.val[2].i16[1] = *(_WORD *)(v52 + 2 * v113.u32[1]);
          v173.val[2].i16[2] = *(_WORD *)(v52 + 2 * v113.u32[2]);
          v173.val[2].i16[3] = *(_WORD *)(v52 + 2 * v113.u32[3]);
          v173.val[2].i16[4] = *(_WORD *)(v52 + 2 * v114.u32[0]);
          v173.val[2].i16[5] = *(_WORD *)(v52 + 2 * v114.u32[1]);
          v173.val[2].i16[6] = *(_WORD *)(v52 + 2 * v114.u32[2]);
          v173.val[2].i16[7] = *(_WORD *)(v52 + 2 * v114.u32[3]);
          v173.val[3] = (int16x8_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v175.val[3]), v174.val[3]);
          vst4q_s16(v70, v173);
          v70 += 32;
          v71 += 32;
          v69 += 8;
        }
        while (v69 < (int)result);
        uint64_t v16 = v68;
        uint64_t v18 = v155;
        _S22 = v153;
        _S21 = v154;
        _S24 = v151;
        _S23 = v152;
        _S31 = v149;
        _S25 = v150;
        _S9 = v147;
        _S8 = v148;
        _S10 = v146;
        unint64_t v115 = v3 & 0xFFFFFFF8;
        unint64_t v41 = v145;
      }
      _CF = v3 >= v115;
      unint64_t v116 = v3 - v115;
      if (v116 != 0 && _CF)
      {
        float16x8_t v117 = &v71[v23];
        uint32x4_t v118 = (float *)&v71[v22];
        uint64_t v119 = (__int32 *)&v71[v144];
        uint64_t v120 = (__int32 *)&v71[v143];
        do
        {
          v121.i32[0] = *v120;
          v121.i32[1] = *v119;
          _D7 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          int32x2_t v123 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v121, _D7), 0), _D7)));
          _D7.i16[0] = *(_WORD *)(v53 + 2 * v123.u32[0]);
          __asm { FCVT            S7, H7 }
          _H17 = *(_WORD *)(v53 + 2 * v123.u32[1]);
          __asm { FCVT            S16, H17 }
          _H17 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(*v118 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          float v129 = (float)((float)((float)(v169 * _S16) + (float)(v170 * _S7)) + (float)(_S29 * _S17))
               + (float)(_S20 * fmaxf(_S7, fmaxf(_S16, _S17)));
          float v130 = 8191.0;
          if (v129 <= 8191.0)
          {
            float v130 = v129;
            if (v129 < 0.0) {
              float v130 = 0.0;
            }
          }
          _H18 = *(_WORD *)(v42 + 2 * llroundf(v130));
          __asm { FCVT            S18, H18 }
          float v133 = _S7 * _S18;
          float v134 = _S16 * _S18;
          float v135 = _S17 * _S18;
          float v136 = (float)((float)(_S22 * v134) + (float)(v133 * _S21)) + (float)(v135 * _S23);
          float v137 = (float)((float)(_S25 * v134) + (float)(v133 * _S24)) + (float)(v135 * _S31);
          float v138 = (float)((float)(_S9 * v134) + (float)(v133 * _S8)) + (float)(v135 * _S10);
          LOWORD(v135) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          __int16 v139 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          int v140 = *(_DWORD *)v117;
          v117 += 4;
          _S7 = v140;
          *float v70 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          v70[1] = LOWORD(v135);
          v70[2] = v139;
          v118 += 4;
          __asm { FCVT            H6, S7 }
          v70[3] = _H6;
          v119 += 4;
          v120 += 4;
          v70 += 4;
          --v116;
        }
        while (v116);
      }
      v63 += v16;
      v60 += v18;
      ++v40;
      _H11 = v165;
      _H5 = v166;
      _H13 = v163;
      _H12 = v164;
      _H15 = v161;
      _H14 = v162;
      _H1 = v159;
      _H0 = v160;
      _H4 = v157;
      _H3 = v158;
      _H6 = v156;
    }
    while (v40 != v41);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGhA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *(void *)(result + 152);
    int64x2_t v11 = *(void **)(result + 56);
    uint64_t v12 = **(void **)(result + 64);
    uint64_t v13 = **(void **)(result + 136);
    float v14 = *(float *)(v10 + 72);
    float v15 = *(float *)(v10 + 76);
    float v16 = *(float *)(v10 + 80);
    float v17 = *(float *)(v10 + 84);
    float v18 = *(float *)(v10 + 88);
    float v19 = *(float *)(v10 + 92);
    float v20 = *(float *)(v10 + 96);
    float v21 = *(float *)(v10 + 100);
    uint64_t v22 = v10 + 164;
    uint64_t v23 = v10 + 16548;
    uint64_t v24 = v10 + 32932;
    float v25 = *(float *)(v10 + 104);
    float v26 = *(float *)(v10 + 108);
    float v27 = *(float *)(v10 + 112);
    float v28 = *(float *)(v10 + 116);
    float v29 = *(float *)(v10 + 120);
    uint64_t v30 = *(void *)(result + 112);
    unint64_t v31 = *(void *)(result + 104) * a2 / v3 + *(void *)(result + 120);
    uint64_t v32 = *(void *)(result + 36);
    uint64_t v33 = *(unsigned __int8 *)(v10 + 157);
    uint64_t v34 = *(unsigned __int8 *)(v10 + 156);
    uint64_t v35 = **(void **)(result + 128) + v31 * v13;
    uint64_t result = *(unsigned __int8 *)(v10 + 155);
    uint64_t v36 = *(unsigned __int8 *)(v10 + 154);
    float v37 = (_WORD *)(v35 + 8 * v30);
    uint64_t v38 = *v11 + v12 * v8 + 16 * v32;
    float32x2_t v39 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        uint64_t v40 = v7;
        uint64_t v41 = v38;
        uint64_t v42 = v37;
        do
        {
          v43.i32[0] = *(_DWORD *)(v41 + 4 * v36);
          v43.i32[1] = *(_DWORD *)(v41 + 4 * result);
          _D25 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v43, v39), 0), v39)));
          _D25.i16[0] = *(_WORD *)(v22 + 2 * _D25.u32[0]);
          __asm { FCVT            S25, H25 }
          _H27 = *(_WORD *)(v22 + 2 * _D25.u32[1]);
          __asm { FCVT            S26, H27 }
          _H27 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(*(float *)(v41 + 4 * v34) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          float v54 = (float)((float)((float)(v27 * _S26) + (float)(v26 * _S25)) + (float)(v28 * _S27))
              + (float)(v29 * fmaxf(_S25, fmaxf(_S26, _S27)));
          float v55 = 8191.0;
          if (v54 <= 8191.0)
          {
            float v55 = v54;
            if (v54 < 0.0) {
              float v55 = 0.0;
            }
          }
          _S29 = *(_DWORD *)(v41 + 4 * v33);
          v41 += 16;
          _H28 = *(_WORD *)(v23 + 2 * llroundf(v55));
          __asm { FCVT            S28, H28 }
          float v59 = _S25 * _S28;
          float v60 = _S26 * _S28;
          float v61 = _S27 * _S28;
          float v62 = (float)((float)(v15 * v60) + (float)(v59 * v14)) + (float)(v61 * v16);
          float v63 = (float)((float)(v18 * v60) + (float)(v59 * v17)) + (float)(v61 * v19);
          _S25 = (float)((float)(v21 * v60) + (float)(v59 * v20)) + (float)(v61 * v25);
          LOWORD(v61) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          LOWORD(_S25) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          *uint64_t v42 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v62, 0.0), 8191.0)));
          v42[1] = LOWORD(v61);
          v42[2] = LOWORD(_S25);
          __asm { FCVT            H25, S29 }
          v42[3] = LOWORD(_S25);
          v42 += 4;
          --v40;
        }
        while (v40);
      }
      v38 += v12;
      float v37 = (_WORD *)((char *)v37 + v13);
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_RGhA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_RGhA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *(void *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 36);
  uint64_t v5 = *(void *)(a1 + 44);
  uint64_t v6 = *(void *)(a1 + 28);
  unint64_t v7 = *a1;
  unint64_t v8 = v6 * a2 / v7;
  uint64_t v9 = v8 + v5;
  unint64_t v10 = (v6 + v6 * a2) / v7;
  uint64_t v11 = v10 + v5;
  uint64_t v12 = *((void *)a1 + 14);
  unint64_t v13 = *((void *)a1 + 13) * a2;
  uint64_t v14 = *((void *)a1 + 19);
  uint64_t v15 = *((void *)a1 + 15);
  uint64_t v16 = **((void **)a1 + 8);
  uint64_t v17 = **((void **)a1 + 7);
  uint64_t v18 = **((void **)a1 + 17);
  uint64_t result = **((void **)a1 + 16);
  uint64_t v20 = *(unsigned __int8 *)(v14 + 154);
  v124[0] = *(unsigned char *)(v14 + 154);
  uint64_t v21 = *(unsigned __int8 *)(v14 + 155);
  v124[1] = *(unsigned char *)(v14 + 155);
  uint64_t v22 = *(unsigned __int8 *)(v14 + 156);
  _OWORD v124[2] = *(unsigned char *)(v14 + 156);
  uint64_t v23 = *(unsigned __int8 *)(v14 + 157);
  v124[3] = *(unsigned char *)(v14 + 157);
  uint64_t v24 = v13 / v7 + v15;
  uint64_t v25 = v16 * v9;
  _S21 = *(float *)(v14 + 72);
  _S23 = *(float *)(v14 + 76);
  uint64_t v28 = v18 * v24;
  _S24 = *(float *)(v14 + 80);
  _S25 = *(float *)(v14 + 84);
  _S26 = *(float *)(v14 + 88);
  _S27 = *(float *)(v14 + 92);
  _S28 = *(float *)(v14 + 96);
  _S7 = *(float *)(v14 + 100);
  _S16 = *(float *)(v14 + 104);
  memset(v123, 0, sizeof(v123));
  do
  {
    unsigned int v36 = 0;
    char v37 = v124[v2];
    do
    {
      *((unsigned char *)v123 + 8 * (((_BYTE)v2 + (v36 >> 3)) & 0x1F) + v36) = v37 + 4 * v36;
      ++v36;
    }
    while (v36 != 8);
    ++v2;
  }
  while (v2 != 4);
  if (v10 != v8)
  {
    uint64_t v38 = 0;
    uint64_t v39 = v11 - v9;
    uint64_t v40 = v14 + 16548;
    uint64_t v41 = v14 + 164;
    __asm
    {
      FCVT            H8, S21
      FCVT            H9, S23
      FCVT            H10, S24
      FCVT            H11, S25
      FCVT            H12, S26
      FCVT            H13, S27
      FCVT            H14, S28
    }
    uint64_t v53 = result + v28 + 8 * v12;
    __asm
    {
      FCVT            H15, S7
      FCVT            H0, S16
    }
    uint64_t v115 = v22;
    uint64_t result = (v3 - 7);
    uint64_t v114 = v21;
    uint64_t v56 = v20;
    v57.i64[0] = 0x7000700070007000;
    v57.i64[1] = 0x7000700070007000;
    uint64_t v58 = v17 + v25 + 16 * v4;
    v59.i64[0] = 0x9000900090009000;
    v59.i64[1] = 0x9000900090009000;
    float v121 = _S23;
    float v122 = _S21;
    float v119 = _S25;
    float v120 = _S24;
    float v117 = _S27;
    float v118 = _S26;
    float v116 = _S28;
    do
    {
      if ((int)v3 < 8)
      {
        unint64_t v93 = 0;
        float v62 = (__int16 *)v53;
        float v61 = (const float *)v58;
      }
      else
      {
        int v60 = 0;
        float v61 = (const float *)v58;
        float v62 = (__int16 *)v53;
        do
        {
          float v63 = v61;
          float32x4x4_t v126 = vld4q_f32(v63);
          v63 += 16;
          float32x4x4_t v127 = vld4q_f32(v63);
          uint16x8_t v64 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v126.val[0]), v127.val[0]), v57), (float16x8_t)0), v59));
          uint32x4_t v65 = vmovl_high_u16(v64);
          uint32x4_t v66 = vmovl_u16(*(uint16x4_t *)v64.i8);
          v67.i64[0] = v66.u32[2];
          v68.i16[0] = *(_WORD *)(v41 + 2 * v66.u32[0]);
          int v69 = (__int16 *)(v41 + 2 * v66.u32[1]);
          float v70 = (__int16 *)(v41 + 2 * v66.u32[3]);
          uint16x8_t v71 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v126.val[1]), v127.val[1]), v57), (float16x8_t)0), v59));
          uint32x4_t v72 = vmovl_high_u16(v71);
          v125.val[1] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v71.i8);
          v125.val[1].i16[0] = *(_WORD *)(v41 + 2 * v125.val[1].u32[0]);
          v68.i16[1] = *v69;
          float v73 = (__int16 *)(v41 + 2 * v72.u32[0]);
          v68.i16[2] = *(_WORD *)(v41 + 2 * v67.i64[0]);
          uint16x8_t v74 = (__int16 *)(v41 + 2 * v72.u32[1]);
          v125.val[1].i16[1] = *(_WORD *)(v41 + 2 * v125.val[1].u32[1]);
          v125.val[1].i16[2] = *(_WORD *)(v41 + 2 * v125.val[1].u32[2]);
          uint32x4_t v75 = (__int16 *)(v41 + 2 * v72.u32[2]);
          float16x8_t v76 = (__int16 *)(v41 + 2 * v72.u32[3]);
          v68.i16[3] = *v70;
          uint16x8_t v77 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v126.val[2]), v127.val[2]), v57), (float16x8_t)0), v59));
          v125.val[2] = (int16x8_t)vmovl_high_u16(v77);
          v125.val[1].i16[3] = *(_WORD *)(v41 + 2 * v125.val[1].u32[3]);
          uint32x4_t v78 = vmovl_u16(*(uint16x4_t *)v77.i8);
          v68.i16[4] = *(_WORD *)(v41 + 2 * v65.u32[0]);
          v67.i16[0] = *(_WORD *)(v41 + 2 * v78.u32[0]);
          v125.val[1].i16[4] = *v73;
          v68.i16[5] = *(_WORD *)(v41 + 2 * v65.u32[1]);
          v125.val[1].i16[5] = *v74;
          v67.i16[1] = *(_WORD *)(v41 + 2 * v78.u32[1]);
          v68.i16[6] = *(_WORD *)(v41 + 2 * v65.u32[2]);
          v67.i16[2] = *(_WORD *)(v41 + 2 * v78.u32[2]);
          v125.val[1].i16[6] = *v75;
          v68.i16[7] = *(_WORD *)(v41 + 2 * v65.u32[3]);
          v67.i16[3] = *(_WORD *)(v41 + 2 * v78.u32[3]);
          v67.i16[4] = *(_WORD *)(v41 + 2 * v125.val[2].u32[0]);
          v125.val[1].i16[7] = *v76;
          v67.i16[5] = *(_WORD *)(v41 + 2 * v125.val[2].u32[1]);
          v67.i16[6] = *(_WORD *)(v41 + 2 * v125.val[2].u32[2]);
          v67.i16[7] = *(_WORD *)(v41 + 2 * v125.val[2].u32[3]);
          float16x8_t v79 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v68, _H11), (float16x8_t)v125.val[1], _H12), v67, _H13);
          uint16x8_t v80 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v68, _H8), (float16x8_t)v125.val[1], _H9), v67, _H10), (float16x8_t)0), v59));
          float16x8_t v81 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v67, _H0), (float16x8_t)v125.val[1], _H15), v68, _H14);
          uint32x4_t v82 = vmovl_high_u16(v80);
          v125.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v80.i8);
          v125.val[0].i16[0] = *(_WORD *)(v40 + 2 * v125.val[0].u32[0]);
          v125.val[0].i16[1] = *(_WORD *)(v40 + 2 * v125.val[0].u32[1]);
          v125.val[0].i16[2] = *(_WORD *)(v40 + 2 * v125.val[0].u32[2]);
          uint16x8_t v83 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v79, (float16x8_t)0), v59));
          v125.val[0].i16[3] = *(_WORD *)(v40 + 2 * v125.val[0].u32[3]);
          uint32x4_t v84 = vmovl_high_u16(v83);
          uint32x4_t v85 = vmovl_u16(*(uint16x4_t *)v83.i8);
          v125.val[0].i16[4] = *(_WORD *)(v40 + 2 * v82.u32[0]);
          v125.val[0].i16[5] = *(_WORD *)(v40 + 2 * v82.u32[1]);
          v125.val[0].i16[6] = *(_WORD *)(v40 + 2 * v82.u32[2]);
          v125.val[0].i16[7] = *(_WORD *)(v40 + 2 * v82.u32[3]);
          float16x8_t v86 = (__int16 *)(v40 + 2 * v84.u32[0]);
          uint16x8_t v87 = (__int16 *)(v40 + 2 * v84.u32[1]);
          v125.val[1].i16[0] = *(_WORD *)(v40 + 2 * v85.u32[0]);
          uint16x8_t v88 = (__int16 *)(v40 + 2 * v84.u32[2]);
          v125.val[1].i16[1] = *(_WORD *)(v40 + 2 * v85.u32[1]);
          uint32x4_t v89 = (__int16 *)(v40 + 2 * v84.u32[3]);
          v125.val[1].i16[2] = *(_WORD *)(v40 + 2 * v85.u32[2]);
          v125.val[1].i16[3] = *(_WORD *)(v40 + 2 * v85.u32[3]);
          uint16x8_t v90 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v81, (float16x8_t)0), v59));
          uint32x4_t v91 = vmovl_high_u16(v90);
          v125.val[1].i16[4] = *v86;
          uint32x4_t v92 = vmovl_u16(*(uint16x4_t *)v90.i8);
          v125.val[1].i16[5] = *v87;
          v125.val[1].i16[6] = *v88;
          v125.val[1].i16[7] = *v89;
          v125.val[2].i16[0] = *(_WORD *)(v40 + 2 * v92.u32[0]);
          v125.val[2].i16[1] = *(_WORD *)(v40 + 2 * v92.u32[1]);
          v125.val[2].i16[2] = *(_WORD *)(v40 + 2 * v92.u32[2]);
          v125.val[2].i16[3] = *(_WORD *)(v40 + 2 * v92.u32[3]);
          v125.val[2].i16[4] = *(_WORD *)(v40 + 2 * v91.u32[0]);
          v125.val[2].i16[5] = *(_WORD *)(v40 + 2 * v91.u32[1]);
          v125.val[2].i16[6] = *(_WORD *)(v40 + 2 * v91.u32[2]);
          v125.val[2].i16[7] = *(_WORD *)(v40 + 2 * v91.u32[3]);
          v125.val[3] = (int16x8_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v126.val[3]), v127.val[3]);
          vst4q_s16(v62, v125);
          v62 += 32;
          v61 += 32;
          v60 += 8;
        }
        while (v60 < (int)result);
        unint64_t v93 = v3 & 0xFFFFFFF8;
        _S23 = v121;
        _S21 = v122;
        _S25 = v119;
        _S24 = v120;
        _S27 = v117;
        _S26 = v118;
        _S28 = v116;
      }
      _CF = v3 >= v93;
      unint64_t v94 = v3 - v93;
      if (v94 != 0 && _CF)
      {
        float16x8_t v95 = &v61[v23];
        float16x8_t v96 = (float *)&v61[v115];
        float16x8_t v97 = (__int32 *)&v61[v114];
        float16x8_t v98 = (__int32 *)&v61[v56];
        do
        {
          __int32 v99 = *v98;
          v98 += 4;
          v100.i32[0] = v99;
          __int32 v101 = *v97;
          v97 += 4;
          __int32 v102 = v101;
          float v103 = *v96;
          v96 += 4;
          v100.i32[1] = v102;
          _D2 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          float32x2_t v105 = vminnm_f32(vmaxnm_f32(vmul_f32(v100, _D2), 0), _D2);
          _D2.f32[0] = v103 * 8191.0;
          _D1 = vcvt_s32_f32(vrnda_f32(v105));
          int v107 = *(_DWORD *)v95;
          v95 += 4;
          _S3 = v107;
          _H5 = *(_WORD *)(v41 + 2 * _D1.u32[1]);
          unsigned __int32 v110 = _D1.i32[0];
          *(float *)_D1.i32 = fmaxf(_D2.f32[0], 0.0);
          _D2.i16[0] = *(_WORD *)(v41 + 2 * v110);
          _D1.i16[0] = *(_WORD *)(v41 + 2 * llroundf(fminf(*(float *)_D1.i32, 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S5, H5
            FCVT            S1, H1
          }
          float v112 = (float)((float)(_S23 * _S5) + (float)(_D2.f32[0] * _S21)) + (float)(*(float *)_D1.i32 * _S24);
          float v113 = (float)((float)(_S26 * _S5) + (float)(_D2.f32[0] * _S25)) + (float)(*(float *)_D1.i32 * _S27);
          *(float *)_D1.i32 = (float)((float)(_S7 * _S5) + (float)(_D2.f32[0] * _S28))
                            + (float)(*(float *)_D1.i32 * _S16);
          _D2.i16[0] = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          _D1.i16[0] = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(*(float *)_D1.i32, 0.0), 8191.0)));
          *float v62 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          v62[1] = _D2.i16[0];
          v62[2] = _D1.i16[0];
          __asm { FCVT            H1, S3 }
          v62[3] = _D1.i16[0];
          v62 += 4;
          --v94;
        }
        while (v94);
      }
      v58 += v16;
      v53 += v18;
      ++v38;
    }
    while (v38 != v39);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_RGhA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *(void *)(result + 152);
    int64x2_t v11 = *(void **)(result + 56);
    uint64_t v12 = **(void **)(result + 64);
    uint64_t v13 = **(void **)(result + 136);
    float v14 = *(float *)(v10 + 72);
    float v15 = *(float *)(v10 + 76);
    float v16 = *(float *)(v10 + 80);
    float v17 = *(float *)(v10 + 84);
    float v18 = *(float *)(v10 + 88);
    float v19 = *(float *)(v10 + 92);
    float v20 = *(float *)(v10 + 96);
    float v21 = *(float *)(v10 + 100);
    float v22 = *(float *)(v10 + 104);
    uint64_t v23 = v10 + 164;
    uint64_t v24 = v10 + 16548;
    uint64_t v25 = *(void *)(result + 112);
    unint64_t v26 = *(void *)(result + 104) * a2 / v3 + *(void *)(result + 120);
    uint64_t v27 = *(void *)(result + 36);
    uint64_t v28 = *(unsigned __int8 *)(v10 + 157);
    uint64_t v29 = *(unsigned __int8 *)(v10 + 156);
    uint64_t v30 = **(void **)(result + 128) + v26 * v13;
    uint64_t v31 = *(unsigned __int8 *)(v10 + 155);
    uint64_t result = *(unsigned __int8 *)(v10 + 154);
    uint64_t v32 = (_WORD *)(v30 + 8 * v25);
    uint64_t v33 = *v11 + v12 * v8 + 16 * v27;
    float32x2_t v34 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        uint64_t v35 = v7;
        uint64_t v36 = v33;
        char v37 = v32;
        do
        {
          uint64_t v38 = (__int32 *)(v36 + 4 * v31);
          _S21 = *(float *)(v36 + 4 * v29);
          _S22 = *(_DWORD *)(v36 + 4 * v28);
          v41.i32[0] = *(_DWORD *)(v36 + 4 * result);
          v36 += 16;
          v41.i32[1] = *v38;
          _D23 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v41, v34), 0), v34)));
          _D23.i16[0] = *(_WORD *)(v23 + 2 * _D23.u32[0]);
          _H24 = *(_WORD *)(v23 + 2 * _D23.u32[1]);
          __asm { FCVT            S24, H24 }
          LOWORD(_S21) = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(_S21 * 8191.0, 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H23
            FCVT            S21, H21
          }
          float v50 = (float)((float)(v15 * _S24) + (float)(*(float *)_D23.i32 * v14)) + (float)(_S21 * v16);
          float v51 = (float)((float)(v18 * _S24) + (float)(*(float *)_D23.i32 * v17)) + (float)(_S21 * v19);
          _S21 = (float)((float)(v21 * _S24) + (float)(*(float *)_D23.i32 * v20)) + (float)(_S21 * v22);
          _D23.i16[0] = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v51, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          *char v37 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v50, 0.0), 8191.0)));
          v37[1] = _D23.i16[0];
          CFTypeRef v37[2] = LOWORD(_S21);
          __asm { FCVT            H21, S22 }
          v37[3] = LOWORD(_S21);
          v37 += 4;
          --v35;
        }
        while (v35);
      }
      v33 += v12;
      uint64_t v32 = (_WORD *)((char *)v32 + v13);
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_RGhA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_RGhA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGfA_rgb_RGhA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *(void *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 36);
  uint64_t v5 = *(void *)(a1 + 44);
  uint64_t v6 = *(void *)(a1 + 28);
  unint64_t v7 = *a1;
  unint64_t v8 = v6 * a2 / v7;
  uint64_t v9 = v8 + v5;
  unint64_t v10 = (v6 + v6 * a2) / v7;
  uint64_t v11 = v10 + v5;
  uint64_t v12 = *((void *)a1 + 14);
  int64x2_t v13 = (unsigned __int8 *)*((void *)a1 + 19);
  uint64_t v14 = **((void **)a1 + 8);
  uint64_t v15 = **((void **)a1 + 7);
  uint64_t v16 = **((void **)a1 + 17);
  uint64_t v17 = **((void **)a1 + 16);
  unint64_t v18 = *((void *)a1 + 13) * a2 / v7 + *((void *)a1 + 15);
  uint64_t result = v14 * v9;
  uint64_t v20 = v16 * v18;
  uint64_t v21 = v13[154];
  v60[0] = v13[154];
  uint64_t v22 = v13[155];
  v60[1] = v13[155];
  uint64_t v23 = v13[156];
  v60[2] = v13[156];
  uint64_t v24 = v13[157];
  v60[3] = v24;
  memset(v59, 0, sizeof(v59));
  do
  {
    unsigned int v25 = 0;
    char v26 = v60[v2];
    do
    {
      *((unsigned char *)v59 + 8 * (((_BYTE)v2 + (v25 >> 3)) & 0x1F) + v25) = v26 + 4 * v25;
      ++v25;
    }
    while (v25 != 8);
    ++v2;
  }
  while (v2 != 4);
  if (v10 != v8)
  {
    uint64_t v27 = 0;
    uint64_t v28 = v24;
    uint64_t v29 = v23;
    uint64_t v30 = v11 - v9;
    uint64_t v31 = v17 + v20;
    uint64_t v32 = v22;
    uint64_t v33 = v21;
    uint64_t v34 = v15 + result;
    uint64_t result = v3 & 0xFFFFFFF8;
    uint64_t v35 = (__int16 *)(v31 + 8 * v12);
    uint64_t v36 = (const float *)(v34 + 16 * v4);
    do
    {
      if ((int)v3 < 8)
      {
        unint64_t v41 = 0;
        uint64_t v39 = v35;
        uint64_t v38 = v36;
      }
      else
      {
        int v37 = 0;
        uint64_t v38 = v36;
        uint64_t v39 = v35;
        do
        {
          uint64_t v40 = v38;
          float32x4x4_t v61 = vld4q_f32(v40);
          v40 += 16;
          float32x4x4_t v62 = vld4q_f32(v40);
          v63.val[0] = (int16x8_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v61.val[0]), v62.val[0]);
          v63.val[1] = (int16x8_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v61.val[1]), v62.val[1]);
          v63.val[2] = (int16x8_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v61.val[2]), v62.val[2]);
          v63.val[3] = (int16x8_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v61.val[3]), v62.val[3]);
          vst4q_s16(v39, v63);
          v39 += 32;
          v38 += 32;
          v37 += 8;
        }
        while (v37 < (int)v3 - 7);
        unint64_t v41 = v3 & 0xFFFFFFF8;
      }
      _CF = v3 >= v41;
      unint64_t v43 = v3 - v41;
      if (v43 != 0 && _CF)
      {
        uint64_t v44 = &v38[v28];
        float32x2_t v45 = &v38[v29];
        int8x8_t v46 = &v38[v32];
        int8x8_t v47 = &v38[v33];
        do
        {
          int v48 = *(_DWORD *)v47;
          v47 += 4;
          _S0 = v48;
          int v50 = *(_DWORD *)v46;
          v46 += 4;
          _S1 = v50;
          int v52 = *(_DWORD *)v45;
          v45 += 4;
          _S2 = v52;
          int v54 = *(_DWORD *)v44;
          v44 += 4;
          _S3 = v54;
          __asm { FCVT            H0, S0 }
          *uint64_t v39 = _S0;
          __asm { FCVT            H0, S1 }
          v39[1] = _S0;
          __asm { FCVT            H0, S2 }
          v39[2] = _S0;
          __asm { FCVT            H0, S3 }
          v39[3] = _S0;
          v39 += 4;
          --v43;
        }
        while (v43);
      }
      uint64_t v36 = (const float *)((char *)v36 + v14);
      uint64_t v35 = (__int16 *)((char *)v35 + v16);
      ++v27;
    }
    while (v27 != v30);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = **((void **)result + 8);
    uint64_t v11 = **((void **)result + 17);
    int64x2_t v12 = (unsigned __int8 *)*((void *)result + 19);
    unint64_t v13 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v14 = v12[157];
    uint64_t v15 = v12[156];
    uint64_t v16 = v12[155];
    uint64_t v17 = v12[154];
    uint64_t v18 = **((void **)result + 16) + v13 * v11 + 8 * *((void *)result + 14);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v10 * v8 + 16 * *(void *)(result + 36));
    do
    {
      if (v7)
      {
        uint64_t v19 = v7;
        int64x2_t v20 = result;
        long long v21 = (_WORD *)v18;
        do
        {
          _S0 = *(_DWORD *)&v20[4 * v17];
          _S1 = *(_DWORD *)&v20[4 * v16];
          _S2 = *(_DWORD *)&v20[4 * v15];
          _S3 = *(_DWORD *)&v20[4 * v14];
          v20 += 16;
          __asm { FCVT            H0, S0 }
          *long long v21 = _S0;
          __asm { FCVT            H0, S1 }
          v21[1] = _S0;
          __asm { FCVT            H0, S2 }
          v21[2] = _S0;
          __asm { FCVT            H0, S3 }
          v21[3] = _S0;
          v21 += 4;
          --v19;
        }
        while (v19);
      }
      result += v10;
      v18 += v11;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGfA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

unsigned char *vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *(void *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 36);
  uint64_t v5 = *(void *)(a1 + 44);
  uint64_t v6 = *(void *)(a1 + 28);
  unint64_t v7 = *a1;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  uint64_t v10 = *((void *)a1 + 14);
  unint64_t v11 = *((void *)a1 + 13) * a2;
  uint64_t v12 = *((void *)a1 + 19);
  uint64_t v13 = *((void *)a1 + 15);
  uint64_t v14 = **((void **)a1 + 8);
  uint64_t v15 = **((void **)a1 + 7);
  uint64_t v16 = **((void **)a1 + 17);
  uint64_t v17 = **((void **)a1 + 16);
  v166[0] = *(unsigned char *)(v12 + 154);
  uint64_t v18 = *(unsigned __int8 *)(v12 + 155);
  v166[1] = *(unsigned char *)(v12 + 155);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 156);
  v166[2] = *(unsigned char *)(v12 + 156);
  uint64_t v20 = *(unsigned __int8 *)(v12 + 157);
  v166[3] = *(unsigned char *)(v12 + 157);
  _S20 = *(float *)(v12 + 72);
  _S21 = *(float *)(v12 + 76);
  _S22 = *(float *)(v12 + 80);
  _S23 = *(float *)(v12 + 84);
  uint64_t v25 = v11 / v7 + v13;
  uint64_t v26 = v14 * (v8 + v5);
  _S24 = *(float *)(v12 + 88);
  _S25 = *(float *)(v12 + 92);
  uint64_t v29 = v16 * v25;
  _S29 = *(float *)(v12 + 96);
  _S31 = *(float *)(v12 + 100);
  float v163 = *(float *)(v12 + 108);
  float v164 = *(float *)(v12 + 104);
  float v161 = *(float *)(v12 + 116);
  float v162 = *(float *)(v12 + 112);
  float v160 = *(float *)(v12 + 120);
  memset(v165, 0, sizeof(v165));
  uint64_t result = v166;
  do
  {
    unsigned int v33 = 0;
    char v34 = v166[v2];
    do
    {
      *((unsigned char *)v165 + 8 * (((_BYTE)v2 + (v33 >> 3)) & 0x1F) + v33) = v34 + 4 * v33;
      ++v33;
    }
    while (v33 != 8);
    ++v2;
  }
  while (v2 != 4);
  if (v9 != v8)
  {
    uint64_t v35 = 0;
    _S0 = v163;
    __asm { FCVT            H8, S0 }
    _S0 = v162;
    __asm { FCVT            H9, S0 }
    unint64_t v44 = v9 - v8;
    _S0 = v161;
    __asm { FCVT            H10, S0 }
    uint64_t v47 = v12 + 16548;
    _S0 = v160;
    __asm
    {
      FCVT            H11, S0
      FCVT            H12, S20
      FCVT            H13, S21
    }
    uint64_t v52 = v12 + 32932;
    uint64_t result = (unsigned char *)(v12 + 164);
    __asm
    {
      FCVT            H14, S22
      FCVT            H15, S23
      FCVT            H0, S24
      FCVT            H1, S25
      FCVT            H2, S29
      FCVT            H3, S31
    }
    float16x8_t v59 = (float *)(v17 + v29 + 16 * v10);
    _S4 = v164;
    __asm { FCVT            H4, S4 }
    uint64_t v62 = v15 + v26 + 16 * v4;
    int v63 = v3 - 7;
    unint64_t v144 = v3 & 0xFFFFFFF8;
    unint64_t v145 = v44;
    v64.i64[0] = 0x7000700070007000;
    v64.i64[1] = 0x7000700070007000;
    v65.i64[0] = 0x9000900090009000;
    v65.i64[1] = 0x9000900090009000;
    uint32x4_t v66 = (float *)&unk_193E7D000;
    uint64_t v156 = v14;
    unint64_t v157 = v3;
    uint64_t v154 = v18;
    uint64_t v155 = v16;
    float v152 = _S21;
    float v153 = _S20;
    float v150 = _S23;
    float v151 = _S22;
    float v148 = _S25;
    float v149 = _S24;
    float v146 = _S31;
    float v147 = _S29;
    do
    {
      if ((int)v3 < 8)
      {
        unint64_t v119 = 0;
        float16x8_t v68 = (const float *)v62;
        float v117 = v59;
      }
      else
      {
        short float v158 = v59;
        uint64_t v159 = v35;
        int v67 = 0;
        float16x8_t v68 = (const float *)v62;
        do
        {
          int v69 = v68;
          float32x4x4_t v168 = vld4q_f32(v69);
          v69 += 16;
          float32x4x4_t v167 = vld4q_f32(v69);
          uint16x8_t v70 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v168.val[0]), v167.val[0]), v64), (float16x8_t)0), v65));
          uint32x4_t v71 = vmovl_high_u16(v70);
          float16x8_t v72 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v70.i8);
          v72.i16[0] = *(_WORD *)&result[2 * v72.u32[0]];
          uint16x8_t v73 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v168.val[1]), v167.val[1]), v64), (float16x8_t)0), v65));
          float16x8_t v74 = (float16x8_t)vmovl_high_u16(v73);
          *(void *)&long long v75 = v74.u32[2];
          *((void *)&v75 + 1) = v74.u32[3];
          long long v76 = v75;
          *(void *)&long long v75 = v74.u32[0];
          uint32x4_t v77 = vmovl_u16(*(uint16x4_t *)v73.i8);
          v74.i16[0] = *(_WORD *)&result[2 * v77.u32[0]];
          uint32x4_t v78 = (__int16 *)&result[2 * v77.u32[3]];
          v72.i16[1] = *(_WORD *)&result[2 * v72.u32[1]];
          float16x8_t v79 = (__int16 *)&result[2 * v74.u32[1]];
          uint16x8_t v80 = (__int16 *)&result[2 * v76];
          float16x8_t v81 = (__int16 *)&result[2 * *((void *)&v76 + 1)];
          v72.i16[2] = *(_WORD *)&result[2 * v72.u32[2]];
          v74.i16[1] = *(_WORD *)&result[2 * v77.u32[1]];
          v74.i16[2] = *(_WORD *)&result[2 * v77.u32[2]];
          v72.i16[3] = *(_WORD *)&result[2 * v72.u32[3]];
          uint16x8_t v82 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v168.val[2]), v167.val[2]), v64), (float16x8_t)0), v65));
          uint32x4_t v83 = vmovl_high_u16(v82);
          v74.i16[3] = *v78;
          uint32x4_t v84 = vmovl_u16(*(uint16x4_t *)v82.i8);
          v72.i16[4] = *(_WORD *)&result[2 * v71.u32[0]];
          v74.i16[4] = *(_WORD *)&result[2 * v75];
          v85.i16[0] = *(_WORD *)&result[2 * v84.u32[0]];
          v72.i16[5] = *(_WORD *)&result[2 * v71.u32[1]];
          v74.i16[5] = *v79;
          v72.i16[6] = *(_WORD *)&result[2 * v71.u32[2]];
          v74.i16[6] = *v80;
          v85.i16[1] = *(_WORD *)&result[2 * v84.u32[1]];
          v72.i16[7] = *(_WORD *)&result[2 * v71.u32[3]];
          v85.i16[2] = *(_WORD *)&result[2 * v84.u32[2]];
          v85.i16[3] = *(_WORD *)&result[2 * v84.u32[3]];
          v74.i16[7] = *v81;
          v85.i16[4] = *(_WORD *)&result[2 * v83.u32[0]];
          v85.i16[5] = *(_WORD *)&result[2 * v83.u32[1]];
          v85.i16[6] = *(_WORD *)&result[2 * v83.u32[2]];
          v85.i16[7] = *(_WORD *)&result[2 * v83.u32[3]];
          uint16x8_t v86 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v72, _H8), v74, _H9), v85, _H10), vmaxq_f16(vmaxq_f16(v72, v74), v85), _H11), (float16x8_t)0), v65));
          float16x8_t v87 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v86.i8);
          uint32x4_t v88 = vmovl_high_u16(v86);
          v87.i16[0] = *(_WORD *)(v47 + 2 * v87.u32[0]);
          v87.i16[1] = *(_WORD *)(v47 + 2 * v87.u32[1]);
          v87.i16[2] = *(_WORD *)(v47 + 2 * v87.u32[2]);
          v87.i16[3] = *(_WORD *)(v47 + 2 * v87.u32[3]);
          v87.i16[4] = *(_WORD *)(v47 + 2 * v88.u32[0]);
          v87.i16[5] = *(_WORD *)(v47 + 2 * v88.u32[1]);
          v87.i16[6] = *(_WORD *)(v47 + 2 * v88.u32[2]);
          v87.i16[7] = *(_WORD *)(v47 + 2 * v88.u32[3]);
          float16x8_t v89 = vmulq_f16(v72, v87);
          float16x8_t v90 = vmulq_f16(v74, v87);
          float16x8_t v91 = vmulq_f16(v85, v87);
          float16x8_t v92 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v89, _H12), v90, _H13), v91, _H14);
          float16x8_t v93 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v89, _H15), v90, _H0), v91, _H1);
          float16x8_t v94 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v91, _H4), v90, _H3), v89, _H2);
          uint16x8_t v95 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v92, (float16x8_t)0), v65));
          uint32x4_t v96 = vmovl_u16(*(uint16x4_t *)v95.i8);
          uint32x4_t v97 = vmovl_high_u16(v95);
          *(void *)&long long v75 = v97.u32[2];
          uint64_t v98 = v97.u32[1];
          uint64_t v99 = v97.u32[0];
          uint64_t v100 = v97.u32[3];
          uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v93, (float16x8_t)0), v65));
          uint32x4_t v102 = vmovl_high_u16(v101);
          uint32x4_t v103 = vmovl_u16(*(uint16x4_t *)v101.i8);
          uint64_t v104 = v103.u32[1];
          uint64_t v105 = v103.u32[0];
          uint64_t v106 = v103.u32[3];
          uint64_t v107 = v103.u32[2];
          uint64_t v108 = v102.u32[1];
          uint64_t v109 = v102.u32[0];
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v94, (float16x8_t)0), v65));
          uint32x4_t v111 = vmovl_high_u16(v110);
          uint32x4_t v112 = vmovl_u16(*(uint16x4_t *)v110.i8);
          uint64_t v113 = v112.u32[1];
          uint64_t v114 = v112.u32[0];
          v102.i16[0] = *(_WORD *)(v52 + 2 * v96.u32[0]);
          v96.i16[0] = *(_WORD *)(v52 + 2 * v99);
          uint64_t v115 = v111.u32[0];
          v112.i16[0] = *(_WORD *)(v52 + 2 * v105);
          v102.i16[1] = *(_WORD *)(v52 + 2 * v96.u32[1]);
          v102.i16[2] = *(_WORD *)(v52 + 2 * v96.u32[2]);
          v102.i16[3] = *(_WORD *)(v52 + 2 * v96.u32[3]);
          v168.val[0] = vcvtq_f32_f16(*(float16x4_t *)v102.i8);
          v111.i16[0] = *(_WORD *)(v52 + 2 * v109);
          v112.i16[1] = *(_WORD *)(v52 + 2 * v104);
          v112.i16[2] = *(_WORD *)(v52 + 2 * v107);
          v112.i16[3] = *(_WORD *)(v52 + 2 * v106);
          v168.val[1] = vcvtq_f32_f16(*(float16x4_t *)v112.i8);
          v112.i16[0] = *(_WORD *)(v52 + 2 * v114);
          v112.i16[1] = *(_WORD *)(v52 + 2 * v113);
          v112.i16[2] = *(_WORD *)(v52 + 2 * v112.u32[2]);
          v112.i16[3] = *(_WORD *)(v52 + 2 * v112.u32[3]);
          v168.val[2] = vcvtq_f32_f16(*(float16x4_t *)v112.i8);
          v112.i16[0] = *(_WORD *)(v52 + 2 * v115);
          float v116 = (__int16 *)(v52 + 2 * v111.u32[1]);
          v96.i16[1] = *(_WORD *)(v52 + 2 * v98);
          v96.i16[2] = *(_WORD *)(v52 + 2 * v75);
          v111.i16[1] = *(_WORD *)(v52 + 2 * v108);
          v96.i16[3] = *(_WORD *)(v52 + 2 * v100);
          v111.i16[2] = *(_WORD *)(v52 + 2 * v102.u32[2]);
          v112.i16[1] = *v116;
          v111.i16[3] = *(_WORD *)(v52 + 2 * v102.u32[3]);
          v112.i16[2] = *(_WORD *)(v52 + 2 * v111.u32[2]);
          v112.i16[3] = *(_WORD *)(v52 + 2 * v111.u32[3]);
          float v117 = v59 + 32;
          vst4q_f32(v59, v168);
          float v118 = v59 + 16;
          v167.val[0] = vcvtq_f32_f16(*(float16x4_t *)v96.i8);
          v167.val[1] = vcvtq_f32_f16(*(float16x4_t *)v111.i8);
          v167.val[2] = vcvtq_f32_f16(*(float16x4_t *)v112.i8);
          vst4q_f32(v118, v167);
          v68 += 32;
          v67 += 8;
          float16x8_t v59 = v117;
        }
        while (v67 < v63);
        unint64_t v119 = v144;
        unint64_t v44 = v145;
        uint64_t v14 = v156;
        unint64_t v3 = v157;
        uint64_t v18 = v154;
        uint64_t v16 = v155;
        _S21 = v152;
        _S20 = v153;
        _S23 = v150;
        _S22 = v151;
        _S25 = v148;
        _S24 = v149;
        _S31 = v146;
        _S29 = v147;
        float16x8_t v59 = v158;
        uint64_t v35 = v159;
        uint32x4_t v66 = (float *)&unk_193E7D000;
      }
      _CF = v3 >= v119;
      unint64_t v120 = v3 - v119;
      if (v120 != 0 && _CF)
      {
        do
        {
          float v121 = v66[70];
          v122.f32[0] = v68[v166[0]];
          v122.f32[1] = v68[v18];
          _D16 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D7 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v122, _D16), 0), _D16)));
          _D7.i16[0] = *(_WORD *)&result[2 * _D7.u32[0]];
          __asm { FCVT            S7, H7 }
          _D16.i16[0] = *(_WORD *)&result[2 * _D7.u32[1]];
          __asm { FCVT            S16, H16 }
          _H5 = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v68[v19] * v121, 0.0), v121))];
          __asm { FCVT            S17, H5 }
          float v129 = (float)((float)((float)(v162 * _S16) + (float)(v163 * _S7)) + (float)(v161 * _S17))
               + (float)(v160 * fmaxf(_S7, fmaxf(_S16, _S17)));
          float v130 = v121;
          if (v129 <= v121)
          {
            float v130 = v129;
            if (v129 < 0.0) {
              float v130 = 0.0;
            }
          }
          float v131 = v68[v20];
          v68 += 4;
          _H18 = *(_WORD *)(v47 + 2 * llroundf(v130));
          __asm { FCVT            S18, H18 }
          float v134 = _S7 * _S18;
          _S16 = _S16 * _S18;
          _S17 = _S17 * _S18;
          float v137 = (float)((float)(_S21 * _S16) + (float)(v134 * _S20)) + (float)(_S17 * _S22);
          float v138 = (float)((float)(_S24 * _S16) + (float)(v134 * _S23)) + (float)(_S17 * _S25);
          float v139 = (float)((float)(_S31 * _S16) + (float)(v134 * _S29)) + (float)(_S17 * v164);
          LOWORD(_S16) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v137, 0.0), v121)));
          __asm { FCVT            S16, H16 }
          LOWORD(_S17) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v138, 0.0), v121)));
          __asm { FCVT            S17, H17 }
          _H6 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v139, 0.0), v121)));
          *(_DWORD *)float v117 = _S16;
          *((_DWORD *)v117 + 1) = _S17;
          __asm { FCVT            S6, H6 }
          *((_DWORD *)v117 + 2) = _S6;
          v117[3] = v131;
          v117 += 4;
          --v120;
        }
        while (v120);
      }
      v62 += v14;
      float16x8_t v59 = (float *)((char *)v59 + v16);
      ++v35;
    }
    while (v35 != v44);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGfA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *(void *)(result + 152);
    int64x2_t v11 = *(void **)(result + 56);
    uint64_t v12 = **(void **)(result + 64);
    uint64_t v13 = **(void **)(result + 136);
    float v14 = *(float *)(v10 + 72);
    float v15 = *(float *)(v10 + 76);
    float v16 = *(float *)(v10 + 80);
    float v17 = *(float *)(v10 + 84);
    float v18 = *(float *)(v10 + 88);
    float v19 = *(float *)(v10 + 92);
    float v20 = *(float *)(v10 + 96);
    float v21 = *(float *)(v10 + 100);
    uint64_t v22 = v10 + 164;
    uint64_t v23 = v10 + 16548;
    uint64_t v24 = v10 + 32932;
    float v25 = *(float *)(v10 + 104);
    float v26 = *(float *)(v10 + 108);
    float v27 = *(float *)(v10 + 112);
    float v28 = *(float *)(v10 + 116);
    float v29 = *(float *)(v10 + 120);
    uint64_t v30 = *(void *)(result + 112);
    unint64_t v31 = *(void *)(result + 104) * a2 / v3 + *(void *)(result + 120);
    uint64_t v32 = *(void *)(result + 36);
    uint64_t v33 = *(unsigned __int8 *)(v10 + 157);
    uint64_t v34 = *(unsigned __int8 *)(v10 + 156);
    uint64_t v35 = **(void **)(result + 128) + v31 * v13;
    uint64_t result = *(unsigned __int8 *)(v10 + 155);
    uint64_t v36 = *(unsigned __int8 *)(v10 + 154);
    int v37 = (_DWORD *)(v35 + 16 * v30);
    uint64_t v38 = *v11 + v12 * v8 + 16 * v32;
    float32x2_t v39 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        uint64_t v40 = v7;
        uint64_t v41 = v38;
        uint64_t v42 = v37;
        do
        {
          v43.i32[0] = *(_DWORD *)(v41 + 4 * v36);
          v43.i32[1] = *(_DWORD *)(v41 + 4 * result);
          _D25 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v43, v39), 0), v39)));
          _D25.i16[0] = *(_WORD *)(v22 + 2 * _D25.u32[0]);
          __asm { FCVT            S25, H25 }
          _H27 = *(_WORD *)(v22 + 2 * _D25.u32[1]);
          __asm { FCVT            S26, H27 }
          _H27 = *(_WORD *)(v22 + 2 * llroundf(fminf(fmaxf(*(float *)(v41 + 4 * v34) * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          float v54 = (float)((float)((float)(v27 * _S26) + (float)(v26 * _S25)) + (float)(v28 * _S27))
              + (float)(v29 * fmaxf(_S25, fmaxf(_S26, _S27)));
          float v55 = 8191.0;
          if (v54 <= 8191.0)
          {
            float v55 = v54;
            if (v54 < 0.0) {
              float v55 = 0.0;
            }
          }
          int v56 = *(_DWORD *)(v41 + 4 * v33);
          v41 += 16;
          _H28 = *(_WORD *)(v23 + 2 * llroundf(v55));
          __asm { FCVT            S28, H28 }
          float v59 = _S25 * _S28;
          _S26 = _S26 * _S28;
          _S27 = _S27 * _S28;
          float v62 = (float)((float)(v15 * _S26) + (float)(v59 * v14)) + (float)(_S27 * v16);
          float v63 = (float)((float)(v18 * _S26) + (float)(v59 * v17)) + (float)(_S27 * v19);
          _S25 = (float)((float)(v21 * _S26) + (float)(v59 * v20)) + (float)(_S27 * v25);
          LOWORD(_S26) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v62, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          LOWORD(_S27) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          LOWORD(_S25) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          *uint64_t v42 = _S26;
          v42[1] = _S27;
          __asm { FCVT            S25, H25 }
          v42[2] = _S25;
          v42[3] = v56;
          v42 += 4;
          --v40;
        }
        while (v40);
      }
      v38 += v12;
      int v37 = (_DWORD *)((char *)v37 + v13);
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_RGfA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_RGfA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *(void *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 36);
  uint64_t v5 = *(void *)(a1 + 44);
  uint64_t v6 = *(void *)(a1 + 28);
  unint64_t v7 = *a1;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  uint64_t v10 = *((void *)a1 + 14);
  unint64_t v11 = *((void *)a1 + 13) * a2;
  uint64_t v12 = *((void *)a1 + 19);
  uint64_t v13 = *((void *)a1 + 15);
  uint64_t v14 = **((void **)a1 + 8);
  uint64_t v15 = **((void **)a1 + 7);
  uint64_t v16 = **((void **)a1 + 17);
  uint64_t result = **((void **)a1 + 16);
  v122[0] = *(unsigned char *)(v12 + 154);
  uint64_t v18 = *(unsigned __int8 *)(v12 + 155);
  v122[1] = *(unsigned char *)(v12 + 155);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 156);
  v122[2] = *(unsigned char *)(v12 + 156);
  uint64_t v20 = *(unsigned __int8 *)(v12 + 157);
  v122[3] = *(unsigned char *)(v12 + 157);
  _S21 = *(float *)(v12 + 72);
  _S23 = *(float *)(v12 + 76);
  unint64_t v23 = v16 * (v11 / v7 + v13);
  _S24 = *(float *)(v12 + 80);
  _S25 = *(float *)(v12 + 84);
  _S26 = *(float *)(v12 + 88);
  _S27 = *(float *)(v12 + 92);
  _S28 = *(float *)(v12 + 96);
  _S7 = *(float *)(v12 + 100);
  _S16 = *(float *)(v12 + 104);
  memset(v121, 0, sizeof(v121));
  do
  {
    unsigned int v31 = 0;
    char v32 = v122[v2];
    do
    {
      *((unsigned char *)v121 + 8 * (((_BYTE)v2 + (v31 >> 3)) & 0x1F) + v31) = v32 + 4 * v31;
      ++v31;
    }
    while (v31 != 8);
    ++v2;
  }
  while (v2 != 4);
  if (v9 != v8)
  {
    uint64_t v33 = 0;
    __asm
    {
      FCVT            H8, S21
      FCVT            H9, S23
    }
    unint64_t v40 = v9 - v8;
    uint64_t v41 = v12 + 16548;
    uint64_t v42 = v12 + 164;
    __asm
    {
      FCVT            H10, S24
      FCVT            H11, S25
      FCVT            H12, S26
      FCVT            H13, S27
      FCVT            H14, S28
      FCVT            H15, S7
    }
    float v49 = (float *)(result + v23 + 16 * v10);
    __asm { FCVT            H0, S16 }
    uint64_t result = v15 + v14 * (v8 + v5) + 16 * v4;
    int v51 = v3 - 7;
    unint64_t v109 = v3 & 0xFFFFFFF8;
    v52.i64[0] = 0x7000700070007000;
    v52.i64[1] = 0x7000700070007000;
    v53.i64[0] = 0x9000900090009000;
    v53.i64[1] = 0x9000900090009000;
    uint64_t v118 = v14;
    unint64_t v119 = v3;
    uint64_t v117 = v16;
    float v115 = _S23;
    float v116 = _S21;
    float v113 = _S25;
    float v114 = _S24;
    float v111 = _S27;
    float v112 = _S26;
    float v110 = _S28;
    do
    {
      if ((int)v3 < 8)
      {
        unint64_t v96 = 0;
        float16x8_t v94 = v49;
        float v55 = (const float *)result;
      }
      else
      {
        unint64_t v120 = v49;
        int v54 = 0;
        float v55 = (const float *)result;
        do
        {
          int v56 = v55;
          float32x4x4_t v123 = vld4q_f32(v56);
          v56 += 16;
          float32x4x4_t v124 = vld4q_f32(v56);
          uint16x8_t v57 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v123.val[0]), v124.val[0]), v52), (float16x8_t)0), v53));
          uint32x4_t v58 = vmovl_high_u16(v57);
          *(void *)&long long v59 = v58.u32[2];
          *((void *)&v59 + 1) = v58.u32[3];
          long long v60 = v59;
          *(void *)&long long v59 = v58.u32[0];
          *((void *)&v59 + 1) = v58.u32[1];
          long long v61 = v59;
          uint32x4_t v62 = vmovl_u16(*(uint16x4_t *)v57.i8);
          *((void *)&v59 + 1) = v62.u32[3];
          v63.i16[0] = *(_WORD *)(v42 + 2 * v62.u32[0]);
          float16x8_t v64 = (__int16 *)(v42 + 2 * v62.u32[2]);
          float16x8_t v65 = (__int16 *)(v42 + 2 * v62.u32[1]);
          uint16x8_t v66 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v123.val[1]), v124.val[1]), v52), (float16x8_t)0), v53));
          uint32x4_t v67 = vmovl_high_u16(v66);
          float16x8_t v68 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v66.i8);
          v68.i16[0] = *(_WORD *)(v42 + 2 * v68.u32[0]);
          int v69 = (__int16 *)(v42 + 2 * v67.u32[0]);
          v63.i16[1] = *v65;
          uint16x8_t v70 = (__int16 *)(v42 + 2 * v67.u32[1]);
          v63.i16[2] = *v64;
          uint32x4_t v71 = (__int16 *)(v42 + 2 * v67.u32[2]);
          float16x8_t v72 = (__int16 *)(v42 + 2 * v67.u32[3]);
          v68.i16[1] = *(_WORD *)(v42 + 2 * v68.u32[1]);
          v68.i16[2] = *(_WORD *)(v42 + 2 * v68.u32[2]);
          uint16x8_t v73 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16(vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v123.val[2]), v124.val[2]), v52), (float16x8_t)0), v53));
          uint32x4_t v74 = vmovl_high_u16(v73);
          v63.i16[3] = *(_WORD *)(v42 + 2 * *((void *)&v59 + 1));
          float16x8_t v75 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v73.i8);
          v68.i16[3] = *(_WORD *)(v42 + 2 * v68.u32[3]);
          v63.i16[4] = *(_WORD *)(v42 + 2 * v61);
          v75.i16[0] = *(_WORD *)(v42 + 2 * v75.u32[0]);
          v68.i16[4] = *v69;
          v63.i16[5] = *(_WORD *)(v42 + 2 * *((void *)&v61 + 1));
          v68.i16[5] = *v70;
          v63.i16[6] = *(_WORD *)(v42 + 2 * v60);
          v75.i16[1] = *(_WORD *)(v42 + 2 * v75.u32[1]);
          v68.i16[6] = *v71;
          v75.i16[2] = *(_WORD *)(v42 + 2 * v75.u32[2]);
          v75.i16[3] = *(_WORD *)(v42 + 2 * v75.u32[3]);
          v63.i16[7] = *(_WORD *)(v42 + 2 * *((void *)&v60 + 1));
          v75.i16[4] = *(_WORD *)(v42 + 2 * v74.u32[0]);
          v75.i16[5] = *(_WORD *)(v42 + 2 * v74.u32[1]);
          v68.i16[7] = *v72;
          v75.i16[6] = *(_WORD *)(v42 + 2 * v74.u32[2]);
          v75.i16[7] = *(_WORD *)(v42 + 2 * v74.u32[3]);
          float16x8_t v76 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v63, _H11), v68, _H12), v75, _H13);
          float16x8_t v77 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v75, _H0), v68, _H15), v63, _H14);
          uint16x8_t v78 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v63, _H8), v68, _H9), v75, _H10), (float16x8_t)0), v53));
          uint32x4_t v79 = vmovl_high_u16(v78);
          uint32x4_t v80 = vmovl_u16(*(uint16x4_t *)v78.i8);
          *((void *)&v61 + 1) = v80.u32[3];
          uint64_t v81 = v80.u32[1];
          LOWORD(v60) = *(_WORD *)(v41 + 2 * v80.u32[0]);
          uint16x8_t v82 = (_WORD *)(v41 + 2 * v80.u32[2]);
          uint64_t v83 = v79.u32[1];
          v63.i16[0] = *(_WORD *)(v41 + 2 * v79.u32[0]);
          uint64_t v84 = v79.u32[3];
          float16x8_t v85 = (__int16 *)(v41 + 2 * v79.u32[2]);
          uint16x8_t v86 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v76, (float16x8_t)0), v53));
          uint32x4_t v87 = vmovl_high_u16(v86);
          *(void *)&long long v59 = v87.u32[2];
          *((void *)&v59 + 1) = v87.u32[3];
          long long v88 = v59;
          *((void *)&v59 + 1) = v87.u32[1];
          uint32x4_t v89 = vmovl_u16(*(uint16x4_t *)v86.i8);
          v89.i16[0] = *(_WORD *)(v41 + 2 * v89.u32[0]);
          LOWORD(v61) = *(_WORD *)(v41 + 2 * v87.u32[0]);
          float16x8_t v90 = (_WORD *)(v41 + 2 * v88);
          uint16x8_t v91 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v77, (float16x8_t)0), v53));
          uint32x4_t v92 = vmovl_high_u16(v91);
          uint32x4_t v93 = vmovl_u16(*(uint16x4_t *)v91.i8);
          LOWORD(v88) = *(_WORD *)(v41 + 2 * v93.u32[0]);
          v93.i16[0] = *(_WORD *)(v41 + 2 * v92.u32[0]);
          WORD1(v60) = *(_WORD *)(v41 + 2 * v81);
          WORD2(v60) = *v82;
          v89.i16[1] = *(_WORD *)(v41 + 2 * v89.u32[1]);
          WORD3(v60) = *(_WORD *)(v41 + 2 * *((void *)&v61 + 1));
          v89.i16[2] = *(_WORD *)(v41 + 2 * v89.u32[2]);
          WORD1(v88) = *(_WORD *)(v41 + 2 * v93.u32[1]);
          v89.i16[3] = *(_WORD *)(v41 + 2 * v89.u32[3]);
          WORD2(v88) = *(_WORD *)(v41 + 2 * v93.u32[2]);
          v63.i16[1] = *(_WORD *)(v41 + 2 * v83);
          WORD3(v88) = *(_WORD *)(v41 + 2 * v93.u32[3]);
          v63.i16[2] = *v85;
          WORD1(v61) = *(_WORD *)(v41 + 2 * *((void *)&v59 + 1));
          v63.i16[3] = *(_WORD *)(v41 + 2 * v84);
          v123.val[0] = vcvtq_f32_f16(*(float16x4_t *)&v60);
          WORD2(v61) = *v90;
          WORD3(v61) = *(_WORD *)(v41 + 2 * *((void *)&v88 + 1));
          v123.val[1] = vcvtq_f32_f16(*(float16x4_t *)v89.i8);
          v123.val[2] = vcvtq_f32_f16(*(float16x4_t *)&v88);
          v93.i16[1] = *(_WORD *)(v41 + 2 * v92.u32[1]);
          v93.i16[2] = *(_WORD *)(v41 + 2 * v92.u32[2]);
          v124.val[0] = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
          v124.val[1] = vcvtq_f32_f16(*(float16x4_t *)&v61);
          v93.i16[3] = *(_WORD *)(v41 + 2 * v92.u32[3]);
          v124.val[2] = vcvtq_f32_f16(*(float16x4_t *)v93.i8);
          float16x8_t v94 = v49 + 32;
          vst4q_f32(v49, v123);
          uint16x8_t v95 = v49 + 16;
          vst4q_f32(v95, v124);
          v55 += 32;
          v54 += 8;
          float v49 = v94;
        }
        while (v54 < v51);
        unint64_t v96 = v109;
        unint64_t v40 = v9 - v8;
        uint64_t v14 = v118;
        unint64_t v3 = v119;
        uint64_t v16 = v117;
        _S23 = v115;
        _S21 = v116;
        _S25 = v113;
        _S24 = v114;
        _S27 = v111;
        _S26 = v112;
        _S28 = v110;
        float v49 = v120;
      }
      _CF = v3 >= v96;
      unint64_t v97 = v3 - v96;
      if (v97 != 0 && _CF)
      {
        do
        {
          _S1 = v55[v19];
          v99.f32[0] = v55[v122[0]];
          v99.f32[1] = v55[v18];
          _D4 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          float v101 = v55[v20];
          v55 += 4;
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v99, _D4), 0), _D4)));
          _D3.i16[0] = *(_WORD *)(v42 + 2 * _D3.u32[0]);
          __asm { FCVT            S3, H3 }
          _D4.i16[0] = *(_WORD *)(v42 + 2 * _D3.u32[1]);
          __asm { FCVT            S4, H4 }
          LOWORD(_S1) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S1 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          float v104 = (float)((float)(_S23 * _D4.f32[0]) + (float)(*(float *)_D3.i32 * _S21)) + (float)(_S1 * _S24);
          float v105 = (float)((float)(_S26 * _D4.f32[0]) + (float)(*(float *)_D3.i32 * _S25)) + (float)(_S1 * _S27);
          _S1 = (float)((float)(_S7 * _D4.f32[0]) + (float)(*(float *)_D3.i32 * _S28)) + (float)(_S1 * _S16);
          _D3.i16[0] = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _D4.i16[0] = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          __asm { FCVT            S2, H4 }
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          *float16x8_t v94 = *(float *)_D3.i32;
          *((_DWORD *)v94 + 1) = _S2;
          __asm { FCVT            S1, H1 }
          *((_DWORD *)v94 + 2) = _S1;
          v94[3] = v101;
          v94 += 4;
          --v97;
        }
        while (v97);
      }
      result += v14;
      float v49 = (float *)((char *)v49 + v16);
      ++v33;
    }
    while (v33 != v40);
  }
  return result;
}

uint64_t vt_Copy_RGfA_TRC_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unint64_t vt_Copy_RGfA_TRC_Mat_TRC_RGfA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *(void *)(result + 152);
    int64x2_t v11 = *(void **)(result + 56);
    uint64_t v12 = **(void **)(result + 64);
    uint64_t v13 = **(void **)(result + 136);
    float v14 = *(float *)(v10 + 72);
    float v15 = *(float *)(v10 + 76);
    float v16 = *(float *)(v10 + 80);
    float v17 = *(float *)(v10 + 84);
    float v18 = *(float *)(v10 + 88);
    float v19 = *(float *)(v10 + 92);
    float v20 = *(float *)(v10 + 96);
    float v21 = *(float *)(v10 + 100);
    float v22 = *(float *)(v10 + 104);
    uint64_t v23 = v10 + 164;
    uint64_t v24 = v10 + 16548;
    uint64_t v25 = *(void *)(result + 112);
    unint64_t v26 = *(void *)(result + 104) * a2 / v3 + *(void *)(result + 120);
    uint64_t v27 = *(void *)(result + 36);
    uint64_t v28 = *(unsigned __int8 *)(v10 + 157);
    uint64_t v29 = *(unsigned __int8 *)(v10 + 156);
    uint64_t v30 = **(void **)(result + 128) + v26 * v13;
    uint64_t v31 = *(unsigned __int8 *)(v10 + 155);
    uint64_t result = *(unsigned __int8 *)(v10 + 154);
    char v32 = (_DWORD *)(v30 + 16 * v25);
    uint64_t v33 = *v11 + v12 * v8 + 16 * v27;
    float32x2_t v34 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v7)
      {
        uint64_t v35 = v7;
        uint64_t v36 = v33;
        int v37 = v32;
        do
        {
          _S21 = *(float *)(v36 + 4 * v29);
          v39.i32[0] = *(_DWORD *)(v36 + 4 * result);
          v39.i32[1] = *(_DWORD *)(v36 + 4 * v31);
          int v40 = *(_DWORD *)(v36 + 4 * v28);
          v36 += 16;
          _D22 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32(v39, v34), 0), v34)));
          _D22.i16[0] = *(_WORD *)(v23 + 2 * _D22.u32[0]);
          __asm { FCVT            S22, H22 }
          _H24 = *(_WORD *)(v23 + 2 * _D22.u32[1]);
          __asm { FCVT            S24, H24 }
          LOWORD(_S21) = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(_S21 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          float v49 = (float)((float)(v15 * _S24) + (float)(*(float *)_D22.i32 * v14)) + (float)(_S21 * v16);
          float v50 = (float)((float)(v18 * _S24) + (float)(*(float *)_D22.i32 * v17)) + (float)(_S21 * v19);
          _S21 = (float)((float)(v21 * _S24) + (float)(*(float *)_D22.i32 * v20)) + (float)(_S21 * v22);
          _D22.i16[0] = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v49, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S24) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v50, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S21) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          *int v37 = _D22.i32[0];
          v37[1] = _S24;
          __asm { FCVT            S21, H21 }
          CFTypeRef v37[2] = _S21;
          v37[3] = v40;
          v37 += 4;
          --v35;
        }
        while (v35);
      }
      v33 += v12;
      char v32 = (_DWORD *)((char *)v32 + v13);
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_RGfA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_RGfA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGfA_rgb_RGfA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *(void *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 36);
  uint64_t v5 = *(void *)(a1 + 44);
  uint64_t v6 = *(void *)(a1 + 28);
  unint64_t v7 = *a1;
  unint64_t v8 = v6 * a2 / v7;
  uint64_t v9 = v8 + v5;
  unint64_t v10 = (v6 + v6 * a2) / v7;
  uint64_t v11 = v10 + v5;
  uint64_t v12 = *((void *)a1 + 14);
  unint64_t v13 = *((void *)a1 + 13) * a2;
  float v14 = (unsigned char *)*((void *)a1 + 19);
  uint64_t v15 = *((void *)a1 + 15);
  float v16 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v17 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v18 = **((void **)a1 + 8);
  uint64_t result = **((void **)a1 + 7);
  uint64_t v20 = *v17;
  uint64_t v21 = *v16;
  uint64_t v22 = v13 / v7 + v15;
  uint64_t v23 = v18 * v9;
  uint64_t v24 = *v17 * v22;
  v49[0] = v14[154];
  uint64_t v25 = v14[155];
  v49[1] = v14[155];
  uint64_t v26 = v14[156];
  v49[2] = v14[156];
  uint64_t v27 = v14[157];
  v49[3] = v27;
  memset(v48, 0, sizeof(v48));
  do
  {
    unsigned int v28 = 0;
    char v29 = v49[v2];
    do
    {
      *((unsigned char *)v48 + 8 * (((_BYTE)v2 + (v28 >> 3)) & 0x1F) + v28) = v29 + 4 * v28;
      ++v28;
    }
    while (v28 != 8);
    ++v2;
  }
  while (v2 != 4);
  if (v10 != v8)
  {
    uint64_t v30 = 0;
    uint64_t v31 = v11 - v9;
    uint64_t v32 = v21 + v24 + 16 * v12;
    uint64_t v33 = result + v23;
    uint64_t result = v3 & 0xFFFFFFF8;
    float32x2_t v34 = (const float *)(v33 + 16 * v4);
    do
    {
      if ((int)v3 < 8)
      {
        unint64_t v41 = 0;
        float32x2_t v39 = (float *)v32;
        uint64_t v36 = v34;
      }
      else
      {
        int v35 = 0;
        uint64_t v36 = v34;
        int v37 = (float *)v32;
        do
        {
          uint64_t v38 = v36;
          float32x4x4_t v50 = vld4q_f32(v38);
          v38 += 16;
          float32x4x4_t v51 = vld4q_f32(v38);
          v50.val[0] = vcvtq_f32_f16(vcvt_f16_f32(v50.val[0]));
          v50.val[1] = vcvtq_f32_f16(vcvt_f16_f32(v50.val[1]));
          v50.val[2] = vcvtq_f32_f16(vcvt_f16_f32(v50.val[2]));
          v51.val[0] = vcvtq_f32_f16(vcvt_f16_f32(v51.val[0]));
          v51.val[1] = vcvtq_f32_f16(vcvt_f16_f32(v51.val[1]));
          v51.val[2] = vcvtq_f32_f16(vcvt_f16_f32(v51.val[2]));
          float32x2_t v39 = v37 + 32;
          vst4q_f32(v37, v50);
          int v40 = v37 + 16;
          vst4q_f32(v40, v51);
          v36 += 32;
          v35 += 8;
          int v37 = v39;
        }
        while (v35 < (int)v3 - 7);
        unint64_t v41 = v3 & 0xFFFFFFF8;
      }
      BOOL v42 = v3 >= v41;
      unint64_t v43 = v3 - v41;
      if (v43 != 0 && v42)
      {
        do
        {
          float v44 = v36[v49[0]];
          float v45 = v36[v25];
          float v46 = v36[v26];
          float v47 = v36[v27];
          v36 += 4;
          *float32x2_t v39 = v44;
          v39[1] = v45;
          v39[2] = v46;
          v39[3] = v47;
          v39 += 4;
          --v43;
        }
        while (v43);
      }
      float32x2_t v34 = (const float *)((char *)v34 + v18);
      v32 += v20;
      ++v30;
    }
    while (v30 != v31);
  }
  return result;
}

uint64_t vt_Copy_RGfA_rgb_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGfA_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGfA_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = **((void **)result + 8);
    uint64_t v11 = **((void **)result + 17);
    int64x2_t v12 = (unsigned __int8 *)*((void *)result + 19);
    unint64_t v13 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v14 = v12[157];
    uint64_t v15 = v12[156];
    uint64_t v16 = v12[155];
    uint64_t v17 = v12[154];
    uint64_t v18 = **((void **)result + 16) + v13 * v11 + 16 * *((void *)result + 14);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v10 * v8 + 16 * *(void *)(result + 36));
    do
    {
      if (v7)
      {
        uint64_t v19 = v7;
        int64x2_t v20 = result;
        long long v21 = (_DWORD *)v18;
        do
        {
          int v22 = *(_DWORD *)&v20[4 * v17];
          int v23 = *(_DWORD *)&v20[4 * v16];
          int v24 = *(_DWORD *)&v20[4 * v15];
          int v25 = *(_DWORD *)&v20[4 * v14];
          v20 += 16;
          *long long v21 = v22;
          v21[1] = v23;
          v21[2] = v24;
          v21[3] = v25;
          v21 += 4;
          --v19;
        }
        while (v19);
      }
      result += v10;
      v18 += v11;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_xf422_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD(float32x2_t *result, uint64_t a2, int16x4_t a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v16 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v17 = 2 * result->u8[0];
  unint64_t v18 = v16 * a2 / v17;
  unint64_t v19 = (v16 + v16 * a2) / v17;
  if (2 * v19 != 2 * v18)
  {
    unint64_t v20 = 0;
    size_t v21 = *(size_t *)((char *)&result[2] + 4);
    uint64_t v22 = *(uint64_t *)((char *)&result[4] + 4);
    uint64_t v23 = *(void *)((char *)&result[5] + 4) + 2 * v18;
    unint64_t v24 = 2 * v19 - 2 * v18;
    float32x2_t v25 = result[14];
    uint64_t v26 = (uint64_t *)result[16];
    uint64_t v27 = *(void *)&result[15] + 2 * (*(void *)&result[13] * a2 / v17);
    uint64_t v28 = (float32x2_t *)result[19];
    uint64_t v29 = (void *)result[7];
    uint64_t v30 = (uint64_t *)result[8];
    uint64_t v31 = (uint64_t *)result[17];
    uint64_t v33 = *v30;
    uint64_t v32 = v30[1];
    uint64_t v432 = v30[2];
    uint64_t v431 = v29[2] + v432 * v23 + 2 * v22;
    uint64_t v34 = *v31;
    uint64_t v35 = v31[1];
    uint64_t v435 = v29[2];
    uint64_t v436 = v31[2];
    uint64_t v434 = v26[2];
    a3.i32[0] = v28[16].i32[0];
    float v36 = (float)a3.u32[0];
    LODWORD(v31) = v28[17].u16[2];
    unsigned int v37 = v28[17].u16[3];
    float v38 = (float)v31;
    *(short float *)v14.i16 = (short float)v31;
    LODWORD(v31) = v28[18].u16[0];
    float v39 = (float)v37;
    short float v40 = (short float)v37;
    unsigned int v41 = v28[18].u16[1];
    _S11 = v28[5].i32[1];
    unsigned int v47 = v28[18].u16[2];
    float v48 = (float)v31;
    *(short float *)a3.i16 = (short float)v31;
    LODWORD(v31) = v28[18].u16[3];
    *(float *)&a9 = (float)v41;
    float v472 = (float)v41;
    *(short float *)&a9 = (short float)v41;
    unsigned int v49 = v28[19].u16[0];
    _S13 = v28[4].i32[1];
    _S12 = v28[5].i32[0];
    float v494 = (float)v47;
    *(float *)&a10 = (float)v31;
    float v505 = (float)v31;
    float v52 = (float)v49;
    *(short float *)v11.i16 = (short float)v31;
    *(short float *)v12.i16 = (short float)v49;
    unsigned int v53 = v28[15].u8[4];
    if (v53 >= 0x11) {
      unsigned __int8 v54 = 0;
    }
    else {
      unsigned __int8 v54 = 16 - v53;
    }
    if (v27 >= 0) {
      uint64_t v55 = v27;
    }
    else {
      uint64_t v55 = v27 + 1;
    }
    uint64_t v56 = *v26;
    uint64_t v57 = v26[1] + v35 * (v55 >> 1);
    uint32x4_t v58 = (char *)&v28[2068] + 4;
    __b = (unsigned char *)(v434 + v436 * v27 + *(void *)&v25);
    float v59 = 8191.0 / v36;
    _S24 = v59 * v28->f32[0];
    uint64_t v61 = v56 + v34 * v27;
    uint64_t result = (float32x2_t *)((char *)v28 + 164);
    uint32x4_t v62 = (unsigned char *)(v57 + *(void *)&v25);
    float16x8_t v63 = (int8x8_t *)(v61 + *(void *)&v25);
    float16x8_t v64 = (char *)&v28[4116] + 4;
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(v14, 0);
    v43.i32[1] = v28[1].i32[0];
    v43.i32[0] = v28[3].i32[1];
    *(float32x2_t *)v15.f32 = vmul_n_f32(v43, v59);
    *(float32x2_t *)v13.f32 = vmul_n_f32(v28[2], v59);
    *(int16x4_t *)&v66.u32[2] = a3;
    float16x8_t v451 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v15), 0);
    float16x8_t v67 = vmulq_n_f16(v451, -v40);
    float16x8_t v477 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v13), 0);
    float16x8_t v68 = vmulq_n_f16(v477, -v40);
    __asm { FMOV            V1.2S, #0.25 }
    v44.i32[1] = v28[7].i32[1];
    v44.i32[0] = v28[6].i32[0];
    *(float32x2_t *)v10.f32 = vmul_f32(v44, _D1);
    float32x4_t v74 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float16x8_t v469 = (float16x8_t)v74;
    v45.i32[1] = v28[8].i32[0];
    v45.i32[0] = v28[6].i32[1];
    *(float32x2_t *)v74.f32 = vmul_f32(v45, _D1);
    uint64_t v503 = v74.i64[0];
    v46.i32[1] = v28[8].i32[1];
    v46.i32[0] = v28[7].i32[0];
    *(float32x2_t *)v66.f32 = vmul_f32(v46, _D1);
    uint64_t v502 = v66.i64[0];
    float16x8_t v488 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v66), 0);
    float16x8_t v489 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v74), 0);
    int16x8_t v501 = vdupq_lane_s16(a3, 0);
    float16x8_t v75 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a9, 0);
    float16x8_t v485 = (float16x8_t)vdupq_lane_s16(v11, 0);
    *(short float *)&a10 = (short float)v47;
    float16x8_t v486 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a10, 0);
    float16x8_t v484 = (float16x8_t)vdupq_lane_s16(v12, 0);
    uint16x8_t v76 = (uint16x8_t)vdupq_n_s16(-v54);
    uint64_t v77 = v29[1];
    _ZF = v77 == 0;
    uint64_t v78 = v77 + v32 * v23 + 2 * v22;
    if (_ZF) {
      uint32x4_t v79 = 0;
    }
    else {
      uint32x4_t v79 = (uint16x8_t *)v78;
    }
    uint32x4_t v80 = (uint16x8_t *)(*v29 + v33 * v23 + 2 * v22);
    unsigned __int8 v81 = v54;
    size_t v440 = v21 & 0xFFFFFFF8;
    __asm { FCVT            H5, S24 }
    short float v439 = _H5;
    float v498 = v28[4].f32[1];
    __asm { FCVT            H5, S13 }
    float v497 = v28[5].f32[0];
    __asm { FCVT            H6, S12 }
    short float v465 = _H6;
    float v499 = v28[5].f32[1];
    __asm { FCVT            H6, S11 }
    float v474 = v28[13].f32[1];
    __asm { FCVT            H0, S0 }
    float v471 = v28[14].f32[0];
    __asm { FCVT            H13, S1 }
    float v468 = v28[14].f32[1];
    __asm { FCVT            H2, S2 }
    float v466 = v28[15].f32[0];
    __asm { FCVT            H3, S3 }
    float v482 = v28[9].f32[0];
    __asm { FCVT            H7, S7 }
    short float v460 = _H7;
    float v481 = v28[9].f32[1];
    __asm { FCVT            H7, S15 }
    float v480 = v28[10].f32[0];
    __asm { FCVT            H15, S18 }
    short float v458 = _H15;
    float v479 = v28[10].f32[1];
    __asm { FCVT            H15, S19 }
    float v478 = v28[11].f32[0];
    __asm { FCVT            H1, S22 }
    short float v456 = _H1;
    float v476 = v28[11].f32[1];
    __asm { FCVT            H1, S27 }
    float v473 = v28[12].f32[0];
    __asm { FCVT            H12, S17 }
    float v470 = v28[12].f32[1];
    __asm { FCVT            H11, S25 }
    short float v453 = _H11;
    short float v454 = _H12;
    float v98 = v52;
    short float v99 = _H13;
    float v467 = v28[13].f32[0];
    __asm { FCVT            H13, S23 }
    short float v452 = _H13;
    float v101 = v15.f32[1];
    uint64_t v102 = v13.i64[0];
    float v491 = v10.f32[0];
    float16x8_t v103 = (float16x8_t)v501;
    float16x8_t v104 = 0uLL;
    v105.i64[0] = 0x9000900090009000;
    v105.i64[1] = 0x9000900090009000;
    uint16x8_t v513 = v76;
    short float v463 = _H0;
    short float v461 = _H3;
    short float v462 = _H2;
    short float v455 = _H1;
    unint64_t v445 = v24;
    size_t v446 = v21;
    uint64_t v443 = v34;
    uint64_t v444 = v33;
    uint64_t v500 = v32;
    uint64_t v442 = v35;
    __int32 v495 = v15.i32[0];
    float16x8_t v496 = v65;
    float16x8_t v492 = v68;
    float16x8_t v493 = v67;
    float v490 = _S24;
    float16x8_t v487 = v75;
    int v483 = v21 - 7;
    unsigned __int8 v441 = v54;
    float v475 = v38;
    short float v464 = _H6;
    short float v459 = _H7;
    short float v457 = _H15;
    float v437 = v98;
    float v438 = v39;
    do
    {
      uint64_t v106 = &v80->i8[v33];
      uint64_t v107 = &v79->i8[v32];
      uint64_t v108 = (char *)v63 + v34;
      if ((int)v21 < 8)
      {
        size_t v287 = 0;
        float v286 = v62;
        float v111 = (int8x8_t *)((char *)v63 + v34);
        float v285 = (unsigned __int16 *)((char *)v79->u16 + v32);
        float v110 = (uint16x8_t *)((char *)v80 + v33);
      }
      else
      {
        v447 = &v80->i8[v33];
        v448 = &v79->i8[v32];
        v449 = (char *)v63 + v34;
        unint64_t v450 = v20;
        uint64_t v109 = 0;
        float v110 = (uint16x8_t *)((char *)v80 + v33);
        float v111 = (int8x8_t *)((char *)v63 + v34);
        v504 = v62;
        do
        {
          uint64_t v509 = v109;
          v510 = v111;
          v512 = v63;
          v508 = v79;
          float16x8_t v112 = vcvtq_f16_u16(vshlq_u16(*v79, v76));
          int16x8_t v113 = (int16x8_t)vmlaq_f16(v67, v451, v112);
          int8x16_t v114 = (int8x16_t)vmlaq_f16(v68, v477, v112);
          v112.i64[0] = vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL).u64[0];
          *(int16x4_t *)v115.i8 = vuzp1_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v112.i8);
          *(int16x4_t *)v112.i8 = vuzp2_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v112.i8);
          v112.i64[1] = v112.i64[0];
          v113.i64[0] = vextq_s8(v114, v114, 8uLL).u64[0];
          v115.i64[1] = v112.i64[0];
          *(float16x4_t *)v113.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v113.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v113.i8));
          v511 = v80 + 1;
          v113.i64[1] = v112.i64[0];
          float16x8_t v116 = (float16x8_t)vzip1q_s16((int16x8_t)v112, (int16x8_t)v112);
          float16x8_t v117 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(*v80, v76)), v65);
          float16x8_t v118 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)((char *)v79 + v32), v76));
          int8x16_t v119 = (int8x16_t)vmlaq_f16(v67, v451, v118);
          float16x8_t v120 = (float16x8_t)vzip1q_s16(v115, v115);
          int16x8_t v121 = (int16x8_t)vmlaq_f16(v68, v477, v118);
          v118.i64[0] = vextq_s8(v119, v119, 8uLL).u64[0];
          *(int16x4_t *)v122.i8 = vuzp1_s16(*(int16x4_t *)v119.i8, *(int16x4_t *)v118.i8);
          *(int16x4_t *)v118.i8 = vuzp2_s16(*(int16x4_t *)v119.i8, *(int16x4_t *)v118.i8);
          float16x8_t v123 = (float16x8_t)vzip1q_s16(v113, v113);
          v118.i64[1] = v116.i64[0];
          v122.i64[1] = v116.i64[0];
          float16x8_t v124 = vmlaq_n_f16(v116, v117, v439);
          float16x8_t v125 = (float16x8_t)vzip1q_s16(v122, v122);
          v122.i64[0] = vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u64[0];
          *(float16x4_t *)v121.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v121.i8, *(int16x4_t *)v122.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v121.i8, *(int16x4_t *)v122.i8));
          float16x8_t v126 = vmlaq_n_f16(v120, v117, v439);
          v121.i64[1] = v124.i64[0];
          float16x8_t v127 = vmlaq_n_f16(v123, v117, v439);
          float16x8_t v128 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(*v110, v76)), v65);
          float16x8_t v129 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v118, (int16x8_t)v118), v128, v439);
          float16x8_t v130 = vmlaq_n_f16(v125, v128, v439);
          float16x8_t v131 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v121, v121), v128, v439);
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, v104), v105));
          uint32x4_t v133 = vmovl_high_u16(v132);
          *(void *)&long long v134 = v133.u32[2];
          *((void *)&v134 + 1) = v133.u32[3];
          long long v135 = v134;
          uint32x4_t v136 = vmovl_u16(*(uint16x4_t *)v132.i8);
          v137.i64[1] = v136.u32[3];
          uint64_t v138 = v136.u32[1];
          v139.i16[0] = result->i16[v136.u32[0]];
          int v140 = (__int16 *)result + v136.u32[2];
          uint64_t v141 = v133.u32[1];
          uint64_t v142 = (__int16 *)result + v133.u32[0];
          uint16x8_t v143 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v127, v104), v105));
          uint32x4_t v144 = vmovl_high_u16(v143);
          *(void *)&long long v134 = v144.u32[2];
          *((void *)&v134 + 1) = v144.u32[3];
          long long v145 = v134;
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v143.i8);
          uint64_t v147 = v146.u32[1];
          uint64_t v148 = v146.u32[3];
          v137.i16[0] = result->i16[v146.u32[0]];
          float v149 = (__int16 *)result + v146.u32[2];
          uint64_t v150 = v144.u32[1];
          float v151 = (__int16 *)result + v144.u32[0];
          uint16x8_t v152 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v126, v104), v105));
          uint32x4_t v153 = vmovl_high_u16(v152);
          v144.i64[0] = v153.u32[2];
          uint32x4_t v154 = vmovl_u16(*(uint16x4_t *)v152.i8);
          v155.i16[0] = result->i16[v154.u32[0]];
          v139.i16[1] = result->i16[v138];
          uint64_t v156 = (__int16 *)result + v154.u32[1];
          unint64_t v157 = (__int16 *)result + v154.u32[2];
          short float v158 = (__int16 *)result + v147;
          uint64_t v159 = (__int16 *)result + v154.u32[3];
          float v160 = (__int16 *)result + v153.u32[0];
          float v161 = (__int16 *)result + v148;
          float v162 = (__int16 *)result + v153.u32[1];
          float v163 = (__int16 *)result + v153.u32[3];
          uint16x8_t v164 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v129, v104), v105));
          float16x8_t v165 = (float16x8_t)vmovl_high_u16(v164);
          *(void *)&long long v134 = v165.u32[2];
          *((void *)&v134 + 1) = v165.u32[3];
          long long v166 = v134;
          *(void *)&long long v134 = v165.u32[0];
          uint32x4_t v167 = vmovl_u16(*(uint16x4_t *)v164.i8);
          v155.i16[1] = *v156;
          v139.i16[2] = *v140;
          v165.i16[0] = result->i16[v167.u32[0]];
          v137.i16[1] = *v158;
          v155.i16[2] = *v157;
          float32x4x4_t v168 = (__int16 *)result + v134;
          v139.i16[3] = result->i16[v137.i64[1]];
          float v169 = (__int16 *)result + v165.u32[1];
          v137.i16[2] = *v149;
          float v170 = (__int16 *)result + v166;
          short float v171 = (__int16 *)result + *((void *)&v166 + 1);
          v165.i16[1] = result->i16[v167.u32[1]];
          v155.i16[3] = *v159;
          v165.i16[2] = result->i16[v167.u32[2]];
          v165.i16[3] = result->i16[v167.u32[3]];
          v139.i16[4] = *v142;
          uint16x8_t v172 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, v104), v105));
          float16x8_t v173 = (float16x8_t)vmovl_high_u16(v172);
          v137.i16[3] = *v161;
          *(void *)&long long v134 = v173.u32[2];
          *((void *)&v134 + 1) = v173.u32[3];
          long long v174 = v134;
          *(void *)&long long v134 = v173.u32[0];
          uint32x4_t v175 = vmovl_u16(*(uint16x4_t *)v172.i8);
          v155.i16[4] = *v160;
          v165.i16[4] = *v168;
          v173.i16[0] = result->i16[v175.u32[0]];
          v139.i16[5] = result->i16[v141];
          v137.i16[4] = *v151;
          v155.i16[5] = *v162;
          int v176 = (__int16 *)result + v173.u32[1];
          v165.i16[5] = *v169;
          uint64_t v177 = (__int16 *)result + v174;
          uint64_t v178 = (__int16 *)result + *((void *)&v174 + 1);
          v173.i16[1] = result->i16[v175.u32[1]];
          v139.i16[6] = result->i16[v135];
          v173.i16[2] = result->i16[v175.u32[2]];
          v173.i16[3] = result->i16[v175.u32[3]];
          v137.i16[5] = result->i16[v150];
          v173.i16[4] = result->i16[v134];
          v155.i16[6] = result->i16[v144.i64[0]];
          uint16x8_t v179 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v130, v104), v105));
          float16x8_t v180 = (float16x8_t)vmovl_high_u16(v179);
          *(void *)&long long v134 = v180.u32[2];
          *((void *)&v134 + 1) = v180.u32[3];
          long long v181 = v134;
          *(void *)&long long v134 = v180.u32[0];
          *((void *)&v134 + 1) = v180.u32[1];
          v165.i16[6] = *v170;
          uint32x4_t v182 = vmovl_u16(*(uint16x4_t *)v179.i8);
          v173.i16[5] = *v176;
          v180.i16[0] = result->i16[v182.u32[0]];
          v139.i16[7] = result->i16[*((void *)&v135 + 1)];
          v137.i16[6] = result->i16[v145];
          v155.i16[7] = *v163;
          v165.i16[7] = *v171;
          v173.i16[6] = *v177;
          v180.i16[1] = result->i16[v182.u32[1]];
          v180.i16[2] = result->i16[v182.u32[2]];
          v137.i16[7] = result->i16[*((void *)&v145 + 1)];
          v180.i16[3] = result->i16[v182.u32[3]];
          v180.i16[4] = result->i16[v134];
          v173.i16[7] = *v178;
          v180.i16[5] = result->i16[*((void *)&v134 + 1)];
          v180.i16[6] = result->i16[v181];
          v180.i16[7] = result->i16[*((void *)&v181 + 1)];
          uint16x8_t v183 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v139, v463), v137, v99), v155, v462), vmaxq_f16(vmaxq_f16(v139, v137), v155), v461), v104), v105));
          uint32x4_t v184 = vmovl_high_u16(v183);
          uint32x4_t v185 = vmovl_u16(*(uint16x4_t *)v183.i8);
          uint64_t v186 = v185.u32[1];
          uint64_t v187 = v185.u32[0];
          *(void *)&long long v134 = v184.u32[2];
          *((void *)&v134 + 1) = v184.u32[3];
          long long v188 = v134;
          *((void *)&v134 + 1) = v184.u32[1];
          uint64_t v189 = v185.u32[3];
          uint64_t v190 = v185.u32[2];
          uint64_t v191 = v184.u32[0];
          uint16x8_t v192 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v165, v463), v173, v99), v180, v462), vmaxq_f16(vmaxq_f16(v165, v173), v180), v461), v104), v105));
          float16x8_t v193 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v192.i8);
          uint64_t v194 = v193.u32[1];
          uint64_t v195 = v193.u32[0];
          float16x8_t v196 = (float16x8_t)vmovl_high_u16(v192);
          uint64_t v197 = v193.u32[3];
          uint64_t v198 = v193.u32[2];
          uint64_t v199 = v196.u32[0];
          v193.i16[0] = *(_WORD *)&v58[2 * v187];
          v193.i16[1] = *(_WORD *)&v58[2 * v186];
          v193.i16[2] = *(_WORD *)&v58[2 * v190];
          v193.i16[3] = *(_WORD *)&v58[2 * v189];
          v193.i16[4] = *(_WORD *)&v58[2 * v191];
          v193.i16[5] = *(_WORD *)&v58[2 * *((void *)&v134 + 1)];
          v196.i16[0] = *(_WORD *)&v58[2 * v195];
          v193.i16[6] = *(_WORD *)&v58[2 * v188];
          v193.i16[7] = *(_WORD *)&v58[2 * *((void *)&v188 + 1)];
          short float v200 = (__int16 *)&v58[2 * v196.u32[1]];
          v196.i16[1] = *(_WORD *)&v58[2 * v194];
          v196.i16[2] = *(_WORD *)&v58[2 * v198];
          float16x8_t v201 = vmulq_f16(v139, v193);
          short float v202 = (__int16 *)&v58[2 * v196.u32[2]];
          v196.i16[3] = *(_WORD *)&v58[2 * v197];
          v196.i16[4] = *(_WORD *)&v58[2 * v199];
          float16x8_t v203 = vmulq_f16(v137, v193);
          short float v204 = (__int16 *)&v58[2 * v196.u32[3]];
          v196.i16[5] = *v200;
          v196.i16[6] = *v202;
          float16x8_t v205 = vmulq_f16(v155, v193);
          v196.i16[7] = *v204;
          float16x8_t v206 = vmulq_f16(v165, v196);
          float16x8_t v207 = vmulq_f16(v173, v196);
          float16x8_t v208 = vmulq_f16(v180, v196);
          float16x8_t v209 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v201, _H15), v203, v456), v205, v455);
          float16x8_t v210 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v205, v452), v203, v453), v201, v454);
          float16x8_t v211 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v206, v460), v207, v459), v208, v458);
          float16x8_t v212 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v206, _H15), v207, v456), v208, v455);
          float16x8_t v213 = vmlaq_n_f16(vmulq_n_f16(v208, v452), v207, v453);
          uint16x8_t v76 = v513;
          float16x8_t v214 = vmlaq_n_f16(v213, v206, v454);
          v105.i64[0] = 0x9000900090009000;
          v105.i64[1] = 0x9000900090009000;
          float16x8_t v104 = 0uLL;
          uint16x8_t v215 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v201, v460), v203, v459), v205, v458), (float16x8_t)0), v105));
          uint32x4_t v216 = vmovl_u16(*(uint16x4_t *)v215.i8);
          uint64_t v217 = v216.u32[1];
          uint64_t v218 = v216.u32[0];
          uint32x4_t v219 = vmovl_high_u16(v215);
          uint64_t v220 = v216.u32[3];
          uint64_t v221 = v216.u32[2];
          *(void *)&long long v134 = v219.u32[2];
          uint64_t v222 = v219.u32[1];
          uint64_t v223 = v219.u32[3];
          uint64_t v224 = v219.u32[0];
          uint16x8_t v225 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v209, (float16x8_t)0), v105));
          uint32x4_t v226 = vmovl_high_u16(v225);
          uint64_t v227 = v134;
          uint32x4_t v228 = vmovl_u16(*(uint16x4_t *)v225.i8);
          uint64_t v229 = v228.u32[1];
          uint64_t v230 = v228.u32[0];
          v216.i64[0] = v226.u32[2];
          uint64_t v231 = v228.u32[3];
          uint64_t v232 = v226.u32[1];
          uint64_t v233 = v228.u32[2];
          uint64_t v234 = v226.u32[0];
          uint64_t v235 = v226.u32[3];
          uint16x8_t v236 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v210, (float16x8_t)0), v105));
          float16x8_t v237 = (float16x8_t)vmovl_high_u16(v236);
          *(void *)&long long v134 = v237.u32[2];
          *((void *)&v134 + 1) = v237.u32[3];
          long long v238 = v134;
          *(void *)&long long v134 = v237.u32[0];
          uint32x4_t v239 = vmovl_u16(*(uint16x4_t *)v236.i8);
          uint64_t v240 = v216.i64[0];
          v237.i16[7] = (unint64_t)v239.u32[1] >> 48;
          uint64_t v241 = v239.u32[0];
          v237.i16[0] = *(_WORD *)&v64[2 * v218];
          uint64_t v506 = v239.u32[3];
          uint64_t v507 = v239.u32[1];
          uint64_t v242 = v237.u32[1];
          uint64_t v243 = v239.u32[2];
          uint64_t v244 = v134;
          uint64_t v245 = *((void *)&v238 + 1);
          v206.i16[0] = *(_WORD *)&v64[2 * v230];
          uint64_t v246 = v238;
          uint16x8_t v247 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v211, (float16x8_t)0), v105));
          uint32x4_t v248 = vmovl_high_u16(v247);
          uint32x4_t v249 = vmovl_u16(*(uint16x4_t *)v247.i8);
          *(void *)&long long v134 = v248.u32[2];
          *((void *)&v134 + 1) = v248.u32[3];
          long long v250 = v134;
          *((void *)&v134 + 1) = v248.u32[1];
          uint64_t v251 = v249.u32[3];
          v211.i16[0] = *(_WORD *)&v64[2 * v249.u32[0]];
          v237.i16[1] = *(_WORD *)&v64[2 * v217];
          float v252 = (__int16 *)&v64[2 * v249.u32[2]];
          uint64_t v253 = v248.u32[0];
          v206.i16[1] = *(_WORD *)&v64[2 * v229];
          v211.i16[1] = *(_WORD *)&v64[2 * v249.u32[1]];
          v237.i16[2] = *(_WORD *)&v64[2 * v221];
          uint16x8_t v254 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v212, (float16x8_t)0), v105));
          v206.i16[2] = *(_WORD *)&v64[2 * v233];
          uint32x4_t v255 = vmovl_u16(*(uint16x4_t *)v254.i8);
          v212.i16[7] = (unint64_t)v255.u32[1] >> 48;
          v211.i16[2] = *v252;
          v212.i16[0] = *(_WORD *)&v64[2 * v255.u32[0]];
          v237.i16[3] = *(_WORD *)&v64[2 * v220];
          v206.i16[3] = *(_WORD *)&v64[2 * v231];
          uint16x8_t v256 = (__int16 *)&v64[2 * v223];
          v211.i16[3] = *(_WORD *)&v64[2 * v251];
          unint64_t v257 = (__int16 *)&v64[2 * v235];
          ++v110;
          v237.i16[4] = *(_WORD *)&v64[2 * v224];
          uint32x4_t v258 = vmovl_high_u16(v254);
          v206.i16[4] = *(_WORD *)&v64[2 * v234];
          v212.i16[1] = *(_WORD *)&v64[2 * v255.u32[1]];
          v211.i16[4] = *(_WORD *)&v64[2 * v253];
          v237.i16[5] = *(_WORD *)&v64[2 * v222];
          v212.i16[2] = *(_WORD *)&v64[2 * v255.u32[2]];
          v206.i16[5] = *(_WORD *)&v64[2 * v232];
          float v259 = (__int16 *)&v64[2 * v258.u32[1]];
          v211.i16[5] = *(_WORD *)&v64[2 * *((void *)&v134 + 1)];
          v212.i16[3] = *(_WORD *)&v64[2 * v255.u32[3]];
          uint64_t v260 = v258.u32[3];
          v237.i16[6] = *(_WORD *)&v64[2 * v227];
          short float v261 = (__int16 *)&v64[2 * v258.u32[2]];
          v212.i16[4] = *(_WORD *)&v64[2 * v258.u32[0]];
          v206.i16[6] = *(_WORD *)&v64[2 * v240];
          uint16x8_t v262 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v214, (float16x8_t)0), v105));
          uint32x4_t v263 = vmovl_u16(*(uint16x4_t *)v262.i8);
          v211.i16[6] = *(_WORD *)&v64[2 * v250];
          uint64_t v264 = v263.u32[1];
          uint64_t v265 = v263.u32[0];
          float16x8_t v266 = (float16x8_t)vuzp1q_s16((int16x8_t)v237, (int16x8_t)v206);
          v212.i16[5] = *v259;
          v212.i16[6] = *v261;
          v237.i16[7] = *v256;
          uint32x4_t v267 = vmovl_high_u16(v262);
          uint64_t v268 = v263.u32[3];
          uint64_t v269 = v263.u32[2];
          uint64_t v270 = v267.u32[1];
          v206.i16[7] = *v257;
          uint64_t v271 = v267.u32[0];
          float16x8_t v272 = (float16x8_t)vuzp1q_s16((int16x8_t)v211, (int16x8_t)v212);
          v211.i16[7] = *(_WORD *)&v64[2 * *((void *)&v250 + 1)];
          *((void *)&v134 + 1) = v267.u32[3];
          uint64_t v273 = v267.u32[2];
          float16x8_t v274 = vmlaq_n_f16(vmlaq_n_f16(v103, v237, _H5), v206, v465);
          v212.i16[7] = *(_WORD *)&v64[2 * v260];
          float16x8_t v275 = vmlaq_n_f16(vmlaq_n_f16(v103, v211, _H5), v212, v465);
          float16x8_t v276 = vaddq_f16(v266, (float16x8_t)vuzp2q_s16((int16x8_t)v237, (int16x8_t)v206));
          v266.i16[0] = *(_WORD *)&v64[2 * v241];
          v266.i16[1] = *(_WORD *)&v64[2 * v507];
          v266.i16[2] = *(_WORD *)&v64[2 * v243];
          float16x8_t v277 = vaddq_f16(v276, v272);
          v276.i16[0] = *(_WORD *)&v64[2 * v265];
          v266.i16[3] = *(_WORD *)&v64[2 * v506];
          v276.i16[1] = *(_WORD *)&v64[2 * v264];
          v266.i16[4] = *(_WORD *)&v64[2 * v244];
          short float v278 = (__int16 *)&v64[2 * v269];
          uint64_t v32 = v500;
          v276.i16[2] = *v278;
          v266.i16[5] = *(_WORD *)&v64[2 * v242];
          v266.i16[6] = *(_WORD *)&v64[2 * v246];
          float16x8_t v279 = (__int16 *)&v64[2 * v270];
          uint32x4_t v80 = v511;
          v276.i16[3] = *(_WORD *)&v64[2 * v268];
          int16x8_t v280 = (int16x8_t)vaddq_f16(v277, (float16x8_t)vuzp2q_s16((int16x8_t)v211, (int16x8_t)v212));
          float16x8_t v281 = (float16x8_t)vtrn1q_s16((int16x8_t)v266, (int16x8_t)v266);
          v276.i16[4] = *(_WORD *)&v64[2 * v271];
          v276.i16[5] = *v279;
          uint32x4_t v62 = v504;
          v266.i16[7] = *(_WORD *)&v64[2 * v245];
          v276.i16[6] = *(_WORD *)&v64[2 * v273];
          float16x8_t v282 = vmlaq_n_f16(v274, v266, v464);
          float16x8_t v283 = vaddq_f16(v281, (float16x8_t)vtrn2q_s16((int16x8_t)v266, (int16x8_t)v266));
          float16x8_t v284 = (float16x8_t)vtrn1q_s16((int16x8_t)v276, (int16x8_t)v276);
          v276.i16[7] = *(_WORD *)&v64[2 * *((void *)&v134 + 1)];
          int8x8_t *v512 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v282, v103), v486)));
          float16x8_t v63 = v512 + 1;
          int8x8_t *v510 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v275, v276, v464), v103), v486)));
          float v111 = v510 + 1;
          *(int8x8_t *)&v504[v509] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v75, v469, (float16x8_t)vzip1q_s16(v280, v280)), v489, (float16x8_t)vzip2q_s16(v280, v280)), v488, vaddq_f16(vaddq_f16(v283, v284), (float16x8_t)vtrn2q_s16((int16x8_t)v276, (int16x8_t)v276))), v485), v484)));
          uint32x4_t v79 = v508 + 1;
          uint64_t v109 = v509 + 8;
        }
        while ((int)v509 + 8 < v483);
        float v285 = (unsigned __int16 *)((char *)v79->u16 + v500);
        float v286 = &v504[v109];
        size_t v287 = v440;
        unint64_t v24 = v445;
        size_t v21 = v446;
        uint64_t v108 = v449;
        unint64_t v20 = v450;
        uint64_t v34 = v443;
        uint64_t v33 = v444;
        uint64_t v35 = v442;
        unsigned __int8 v81 = v441;
        uint64_t v106 = v447;
        uint64_t v107 = v448;
        float v101 = v15.f32[1];
        float v98 = v437;
        float v39 = v438;
      }
      for (; v21 > v287; float16x8_t v75 = v487)
      {
        float v288 = (float)(v79->u16[1] >> v81) - v39;
        float v289 = v101 * v288;
        float v290 = _S24 * (float)((float)(v80->u16[0] >> v81) - v38);
        float v291 = (float)(v101 * v288) + v290;
        float v292 = 8191.0;
        if (v291 <= 8191.0)
        {
          float v292 = (float)(v101 * v288) + v290;
          if (v291 < 0.0) {
            float v292 = 0.0;
          }
        }
        float v293 = (float)(v79->u16[0] >> v81) - v39;
        float v294 = (float)(*((float *)&v102 + 1) * v288) + (float)(v293 * *(float *)&v102);
        float v295 = 8191.0;
        if ((float)(v290 + v294) <= 8191.0)
        {
          float v295 = v290 + v294;
          if ((float)(v290 + v294) < 0.0) {
            float v295 = 0.0;
          }
        }
        float v296 = v15.f32[0] * v293;
        float v297 = (float)(v15.f32[0] * v293) + v290;
        float v298 = 8191.0;
        if (v297 <= 8191.0)
        {
          float v298 = v297;
          if (v297 < 0.0) {
            float v298 = 0.0;
          }
        }
        float v299 = _S24 * (float)((float)(v80->u16[1] >> v81) - v38);
        float v300 = 8191.0;
        if ((float)(v289 + v299) <= 8191.0)
        {
          float v300 = v289 + v299;
          if ((float)(v289 + v299) < 0.0) {
            float v300 = 0.0;
          }
        }
        float v301 = 8191.0;
        if ((float)(v294 + v299) <= 8191.0)
        {
          float v301 = v294 + v299;
          if ((float)(v294 + v299) < 0.0) {
            float v301 = 0.0;
          }
        }
        float v302 = 8191.0;
        if ((float)(v296 + v299) <= 8191.0)
        {
          float v302 = v296 + v299;
          if ((float)(v296 + v299) < 0.0) {
            float v302 = 0.0;
          }
        }
        float v303 = (float)(v285[1] >> v81) - v39;
        float v304 = v101 * v303;
        float v305 = _S24 * (float)((float)(v110->u16[0] >> v81) - v38);
        float v306 = (float)(v101 * v303) + v305;
        float v307 = 8191.0;
        if (v306 <= 8191.0)
        {
          float v307 = (float)(v101 * v303) + v305;
          if (v306 < 0.0) {
            float v307 = 0.0;
          }
        }
        float v308 = (float)(*v285 >> v81) - v39;
        float v309 = (float)(*((float *)&v102 + 1) * v303) + (float)(v308 * *(float *)&v102);
        float v310 = 8191.0;
        if ((float)(v305 + v309) <= 8191.0)
        {
          float v310 = v305 + v309;
          if ((float)(v305 + v309) < 0.0) {
            float v310 = 0.0;
          }
        }
        float v311 = v15.f32[0] * v308;
        float v312 = (float)(v15.f32[0] * v308) + v305;
        float v313 = 8191.0;
        if (v312 <= 8191.0)
        {
          float v313 = v312;
          if (v312 < 0.0) {
            float v313 = 0.0;
          }
        }
        float v314 = _S24 * (float)((float)(v110->u16[1] >> v81) - v38);
        float v315 = v304 + v314;
        BOOL v316 = (float)(v304 + v314) <= 8191.0;
        float v317 = 8191.0;
        if (v316)
        {
          float v317 = v315;
          if (v315 < 0.0) {
            float v317 = 0.0;
          }
        }
        float v318 = 8191.0;
        if ((float)(v309 + v314) <= 8191.0)
        {
          float v318 = v309 + v314;
          if ((float)(v309 + v314) < 0.0) {
            float v318 = 0.0;
          }
        }
        float v319 = 8191.0;
        if ((float)(v311 + v314) <= 8191.0)
        {
          float v319 = v311 + v314;
          if ((float)(v311 + v314) < 0.0) {
            float v319 = 0.0;
          }
        }
        _H0 = result->i16[llroundf(fminf(fmaxf(v292, 0.0), 8191.0))];
        __asm { FCVT            S1, H0 }
        _H0 = result->i16[llroundf(fminf(fmaxf(v295, 0.0), 8191.0))];
        __asm { FCVT            S2, H0 }
        _H0 = result->i16[llroundf(fminf(fmaxf(v298, 0.0), 8191.0))];
        __asm { FCVT            S3, H0 }
        _H15 = result->i16[llroundf(fminf(fmaxf(v300, 0.0), 8191.0))];
        _H28 = result->i16[llroundf(fminf(fmaxf(v301, 0.0), 8191.0))];
        _H30 = result->i16[llroundf(fminf(fmaxf(v302, 0.0), 8191.0))];
        _H22 = result->i16[llroundf(fminf(fmaxf(v307, 0.0), 8191.0))];
        _H23 = result->i16[llroundf(fminf(fmaxf(v310, 0.0), 8191.0))];
        _H26 = result->i16[llroundf(fminf(fmaxf(v313, 0.0), 8191.0))];
        _H6 = result->i16[llroundf(fminf(fmaxf(v317, 0.0), 8191.0))];
        _H7 = result->i16[llroundf(fminf(fmaxf(v318, 0.0), 8191.0))];
        _H18 = result->i16[llroundf(fminf(fmaxf(v319, 0.0), 8191.0))];
        float v335 = (float)((float)((float)(v471 * _S2) + (float)(v474 * _S1)) + (float)(v468 * _S3))
             + (float)(v466 * fmaxf(_S1, fmaxf(_S2, _S3)));
        float v336 = 8191.0;
        if (v335 <= 8191.0)
        {
          float v336 = v335;
          if (v335 < 0.0) {
            float v336 = 0.0;
          }
        }
        float v337 = v39;
        __asm
        {
          FCVT            S19, H15
          FCVT            S14, H28
          FCVT            S9, H30
        }
        _H28 = *(_WORD *)&v58[2 * llroundf(v336)];
        float v342 = (float)((float)((float)(v471 * _S14) + (float)(v474 * _S19)) + (float)(v468 * _S9))
             + (float)(v466 * fmaxf(_S19, fmaxf(_S14, _S9)));
        float v343 = 8191.0;
        if (v342 <= 8191.0)
        {
          float v343 = v342;
          if (v342 < 0.0) {
            float v343 = 0.0;
          }
        }
        __asm
        {
          FCVT            S27, H22
          FCVT            S12, H23
          FCVT            S29, H26
        }
        _H13 = *(_WORD *)&v58[2 * llroundf(v343)];
        float v348 = (float)((float)((float)(v471 * _S12) + (float)(v474 * _S27)) + (float)(v468 * _S29))
             + (float)(v466 * fmaxf(_S27, fmaxf(_S12, _S29)));
        float v349 = 8191.0;
        if (v348 <= 8191.0)
        {
          float v349 = v348;
          if (v348 < 0.0) {
            float v349 = 0.0;
          }
        }
        __asm
        {
          FCVT            S30, H6
          FCVT            S15, H7
          FCVT            S8, H18
          FCVT            S6, H28
        }
        float v354 = _S1 * _S6;
        float v355 = _S2 * _S6;
        float v356 = _S3 * _S6;
        __asm { FCVT            S1, H13 }
        float v358 = _S19 * _S1;
        float v359 = _S14 * _S1;
        float v360 = _S9 * _S1;
        _H0 = *(_WORD *)&v58[2 * llroundf(v349)];
        __asm { FCVT            S0, H0 }
        float v363 = _S27 * _S0;
        float v364 = _S12 * _S0;
        float v365 = _S29 * _S0;
        float v366 = (float)((float)((float)(v471 * _S15) + (float)(v474 * _S30)) + (float)(v468 * _S8))
             + (float)(v466 * fmaxf(_S30, fmaxf(_S15, _S8)));
        float v367 = 8191.0;
        if (v366 <= 8191.0)
        {
          float v367 = v366;
          if (v366 < 0.0) {
            float v367 = 0.0;
          }
        }
        _H0 = *(_WORD *)&v58[2 * llroundf(v367)];
        __asm { FCVT            S0, H0 }
        _S19 = _S30 * _S0;
        _S27 = _S15 * _S0;
        float v372 = _S8 * _S0;
        float v373 = (float)((float)(v481 * v355) + (float)(v354 * v482)) + (float)(v356 * v480);
        float v374 = (float)((float)(v478 * v355) + (float)(v354 * v479)) + (float)(v356 * v476);
        _S22 = (float)((float)(v470 * v355) + (float)(v354 * v473)) + (float)(v356 * v467);
        float v376 = (float)((float)(v481 * v359) + (float)(v358 * v482)) + (float)(v360 * v480);
        _S26 = (float)((float)(v478 * v359) + (float)(v358 * v479)) + (float)(v360 * v476);
        _S7 = (float)((float)(v470 * v359) + (float)(v358 * v473)) + (float)(v360 * v467);
        float v379 = (float)((float)(v481 * v364) + (float)(v363 * v482)) + (float)(v365 * v480);
        float v380 = (float)((float)(v478 * v364) + (float)(v363 * v479)) + (float)(v365 * v476);
        float v381 = (float)((float)(v470 * v364) + (float)(v363 * v473)) + (float)(v365 * v467);
        float v382 = (float)((float)(v481 * _S27) + (float)(_S19 * v482)) + (float)(v372 * v480);
        float v383 = (float)((float)(v478 * _S27) + (float)(_S19 * v479)) + (float)(v372 * v476);
        _S0 = (float)((float)(v470 * _S27) + (float)(_S19 * v473)) + (float)(v372 * v467);
        _H1 = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(v373, 0.0), 8191.0))];
        __asm { FCVT            S3, H1 }
        _H1 = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(v374, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H6 = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(v376, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        _H18 = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0))];
        LOWORD(_S7) = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0))];
        __asm
        {
          FCVT            S18, H18
          FCVT            S7, H7
        }
        LOWORD(_S19) = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(v379, 0.0), 8191.0))];
        __asm { FCVT            S23, H19 }
        LOWORD(_S19) = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(v380, 0.0), 8191.0))];
        __asm { FCVT            S19, H19 }
        LOWORD(_S22) = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(v381, 0.0), 8191.0))];
        __asm { FCVT            S22, H22 }
        LOWORD(_S26) = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(v382, 0.0), 8191.0))];
        __asm { FCVT            S26, H26 }
        LOWORD(_S27) = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(v383, 0.0), 8191.0))];
        LOWORD(_S0) = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
        __asm
        {
          FCVT            S27, H27
          FCVT            S28, H0
        }
        float v402 = (float)((float)((float)(v497 * _S1) + (float)(v498 * _S3)) + (float)(v499 * _S2)) + v48;
        if (v402 < v48) {
          float v403 = v48;
        }
        else {
          float v403 = (float)((float)((float)(v497 * _S1) + (float)(v498 * _S3)) + (float)(v499 * _S2)) + v48;
        }
        BOOL v316 = v402 <= v494;
        float v404 = (float)((float)((float)(v497 * _S18) + (float)(v498 * _S6)) + (float)(v499 * _S7)) + v48;
        if (!v316) {
          float v403 = v494;
        }
        __int8 v405 = llroundf(v403);
        if (v404 < v48) {
          float v406 = v48;
        }
        else {
          float v406 = (float)((float)((float)(v497 * _S18) + (float)(v498 * _S6)) + (float)(v499 * _S7)) + v48;
        }
        BOOL v316 = v404 <= v494;
        float v407 = (float)((float)((float)(v497 * _S19) + (float)(v498 * _S23)) + (float)(v499 * _S22)) + v48;
        if (!v316) {
          float v406 = v494;
        }
        __int8 v408 = llroundf(v406);
        if (v407 < v48) {
          float v409 = v48;
        }
        else {
          float v409 = (float)((float)((float)(v497 * _S19) + (float)(v498 * _S23)) + (float)(v499 * _S22)) + v48;
        }
        BOOL v316 = v407 <= v494;
        float v410 = (float)((float)((float)(v497 * _S27) + (float)(v498 * _S26)) + (float)(v499 * _S28)) + v48;
        if (!v316) {
          float v409 = v494;
        }
        __int8 v411 = llroundf(v409);
        if (v410 < v48) {
          float v412 = v48;
        }
        else {
          float v412 = (float)((float)((float)(v497 * _S27) + (float)(v498 * _S26)) + (float)(v499 * _S28)) + v48;
        }
        if (v410 <= v494) {
          float v413 = v412;
        }
        else {
          float v413 = v494;
        }
        __int8 v414 = llroundf(v413);
        float v415 = (float)((float)(_S3 + _S6) + _S23) + _S26;
        float v416 = (float)((float)(_S1 + _S18) + _S19) + _S27;
        v63->i8[0] = v405;
        v63->i8[1] = v408;
        v111->i8[0] = v411;
        v111->i8[1] = v414;
        float v417 = (float)((float)(_S2 + _S7) + _S22) + _S28;
        float v418 = (float)((float)(v472 + (float)(v415 * v491)) + (float)(v416 * *(float *)&v503))
             + (float)(v417 * *(float *)&v502);
        float v419 = v98;
        if (v418 <= v98)
        {
          float v419 = (float)((float)(v472 + (float)(v415 * v491)) + (float)(v416 * *(float *)&v503))
               + (float)(v417 * *(float *)&v502);
          if (v418 < v505) {
            float v419 = v505;
          }
        }
        float v420 = (float)((float)(v472 + (float)(v415 * v10.f32[1])) + (float)(v416 * *((float *)&v503 + 1)))
             + (float)(v417 * *((float *)&v502 + 1));
        *float v286 = llroundf(v419);
        float v421 = v98;
        float v38 = v475;
        float v39 = v337;
        float16x8_t v65 = v496;
        float16x8_t v67 = v493;
        uint16x8_t v76 = v513;
        _H15 = v457;
        float v101 = v15.f32[1];
        float16x8_t v104 = 0uLL;
        v105.i64[0] = 0x9000900090009000;
        v105.i64[1] = 0x9000900090009000;
        if (v420 <= v98)
        {
          float v421 = v420;
          if (v420 < v505) {
            float v421 = v505;
          }
        }
        v287 += 2;
        uint32x4_t v79 = (uint16x8_t *)((char *)v79 + 4);
        uint32x4_t v80 = (uint16x8_t *)((char *)v80 + 4);
        v285 += 2;
        float v110 = (uint16x8_t *)((char *)v110 + 4);
        v286[1] = llroundf(v421);
        float16x8_t v63 = (int8x8_t *)((char *)v63 + 2);
        float v111 = (int8x8_t *)((char *)v111 + 2);
        v286 += 2;
        _S24 = v490;
        v15.i32[0] = v495;
        float16x8_t v68 = v492;
        float16x8_t v103 = (float16x8_t)v501;
      }
      uint32x4_t v80 = (uint16x8_t *)&v106[v33];
      uint32x4_t v79 = (uint16x8_t *)&v107[v32];
      float16x8_t v63 = (int8x8_t *)&v108[v34];
      v62 += v35;
      v20 += 2;
    }
    while (v24 > v20);
    if (v435 && v434)
    {
      uint64_t v422 = 0;
      v423 = (unsigned __int16 *)v431;
      v424 = __b;
      do
      {
        if (v21)
        {
          size_t v425 = v21;
          v426 = v424;
          v427 = v423;
          do
          {
            unsigned int v428 = *v427++;
            *v426++ = llroundf((float)v428 * 0.0038911);
            --v425;
          }
          while (v425);
        }
        v423 = (unsigned __int16 *)((char *)v423 + v432);
        v424 += v436;
        ++v422;
      }
      while (v422 != v24);
    }
    else
    {
      uint64_t v429 = v436;
      v430 = __b;
      if (v434)
      {
        do
        {
          if (v21)
          {
            uint64_t result = (float32x2_t *)memset(v430, 255, v21);
            uint64_t v429 = v436;
          }
          v430 += v429;
          --v24;
        }
        while (v24);
      }
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Tone_Mat_TRC_420vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = 2 * *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    uint64_t v12 = *(void *)((char *)result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (uint64_t *)result[16];
    uint64_t v16 = result[15] + 2 * (result[13] * a2 / v6);
    uint64_t v17 = result[19];
    uint64_t v18 = (void *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v217 = v19[2];
    uint64_t v219 = v18[2];
    uint64_t v23 = v219 + v217 * v12 + 2 * v11;
    uint64_t v24 = *v20;
    uint64_t v25 = v20[1];
    uint64_t v26 = v20[2];
    uint64_t v218 = v15[2];
    uint64_t v27 = (unsigned char *)(v218 + v26 * v16 + v14);
    *(float *)&unsigned int v28 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    float v29 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v30 = (float)LODWORD(a5);
    float v31 = *(float *)&v28 * *(float *)v17;
    float v32 = *(float *)&v28 * *(float *)(v17 + 8);
    float v33 = *(float *)&v28 * *(float *)(v17 + 16);
    float v34 = *(float *)&v28 * *(float *)(v17 + 20);
    float v35 = *(float *)&v28 * *(float *)(v17 + 28);
    LOWORD(v28) = *(_WORD *)(v17 + 144);
    float v36 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v17 + 146);
    float v37 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v17 + 148);
    float v38 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v17 + 150);
    float v39 = (float)v28;
    float v250 = v39;
    float v240 = *(float *)(v17 + 40);
    float v241 = *(float *)(v17 + 36);
    float v238 = *(float *)(v17 + 48) * 0.25;
    float v239 = *(float *)(v17 + 44);
    float v236 = *(float *)(v17 + 56) * 0.25;
    float v237 = *(float *)(v17 + 52) * 0.25;
    float v234 = *(float *)(v17 + 64) * 0.25;
    float v235 = *(float *)(v17 + 60) * 0.25;
    float v232 = *(float *)(v17 + 68) * 0.25;
    float v233 = *(float *)(v17 + 72);
    float v230 = *(float *)(v17 + 80);
    float v231 = *(float *)(v17 + 76);
    float v228 = *(float *)(v17 + 88);
    float v229 = *(float *)(v17 + 84);
    float v226 = *(float *)(v17 + 96);
    float v227 = *(float *)(v17 + 92);
    float v224 = *(float *)(v17 + 104);
    float v225 = *(float *)(v17 + 100);
    uint64_t v40 = v17 + 164;
    uint64_t result = (void *)(v17 + 16548);
    uint64_t v41 = v18[1];
    BOOL v42 = (char *)(*v18 + *v19 * v12 + 2 * v11);
    uint64_t v43 = v41 + v22 * v12 + 2 * v11;
    if (!v41) {
      uint64_t v43 = 0;
    }
    unsigned int v44 = *(unsigned __int8 *)(v17 + 124);
    char v45 = 16 - v44;
    _CF = v44 >= 0x11;
    uint64_t v47 = *v15;
    uint64_t v48 = v15[1];
    uint64_t v49 = v47 + v24 * v16;
    if (_CF) {
      char v50 = 0;
    }
    else {
      char v50 = v45;
    }
    if (v16 >= 0) {
      uint64_t v51 = v16;
    }
    else {
      uint64_t v51 = v16 + 1;
    }
    uint64_t v52 = v48 + v25 * (v51 >> 1);
    uint64_t v53 = v17 + 32932;
    unsigned __int8 v54 = (unsigned char *)(v49 + v14);
    uint64_t v55 = v52 + v14;
    char v56 = v50;
    uint64_t v57 = (unsigned __int16 *)(v43 + 2);
    float v58 = *(float *)(v17 + 108);
    float v59 = *(float *)(v17 + 112);
    float v61 = *(float *)(v17 + 116);
    float v60 = *(float *)(v17 + 120);
    float v248 = (float)LODWORD(a5);
    float v249 = v29;
    float v246 = v32;
    float v247 = v31;
    float v244 = v34;
    float v245 = v33;
    LOWORD(v39) = *(_WORD *)(v17 + 152);
    float v242 = (float)LODWORD(v39);
    float v243 = v37;
    float v222 = v59;
    float v223 = v35;
    float v220 = v61;
    float v221 = v58;
    do
    {
      uint32x4_t v62 = &v54[v24];
      float16x8_t v63 = &v42[v21];
      if (v10)
      {
        size_t v64 = 0;
        float16x8_t v65 = v57;
        float32x4_t v66 = &v42[v21];
        float16x8_t v67 = &v54[v24];
        do
        {
          float v68 = (float)(*v65 >> v56) - v30;
          float v69 = v32 * v68;
          float v70 = v31 * (float)((float)(*(unsigned __int16 *)v42 >> v56) - v29);
          float v71 = (float)(v32 * v68) + v70;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = (float)(v32 * v68) + v70;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = (float)(*(v65 - 1) >> v56) - v30;
          float v74 = (float)(v34 * v68) + (float)(v73 * v33);
          float v75 = 8191.0;
          if ((float)(v70 + v74) <= 8191.0)
          {
            float v75 = v70 + v74;
            if ((float)(v70 + v74) < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v35 * v73;
          float v77 = v76 + v70;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v31 * (float)((float)(*((unsigned __int16 *)v42 + 1) >> v56) - v29);
          float v80 = v69 + v79;
          float v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = 8191.0;
          if ((float)(v74 + v79) <= 8191.0)
          {
            float v82 = v74 + v79;
            if ((float)(v74 + v79) < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v76 + v79;
          BOOL v84 = (float)(v76 + v79) <= 8191.0;
          float v85 = 8191.0;
          if (v84)
          {
            float v85 = v83;
            if (v83 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = (float)(*(unsigned __int16 *)((char *)v65 + v22) >> v56) - v30;
          float v87 = v32 * v86;
          float v88 = v31 * (float)((float)(*(unsigned __int16 *)v66 >> v56) - v29);
          float v89 = (float)(v32 * v86) + v88;
          float v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = (float)(*(unsigned __int16 *)((char *)v65 + v22 - 2) >> v56) - v30;
          float v92 = (float)(v34 * v86) + (float)(v91 * v33);
          float v93 = 8191.0;
          if ((float)(v88 + v92) <= 8191.0)
          {
            float v93 = v88 + v92;
            if ((float)(v88 + v92) < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v35 * v91;
          float v95 = (float)(v35 * v91) + v88;
          float v96 = 8191.0;
          if (v95 <= 8191.0)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v31 * (float)((float)(*((unsigned __int16 *)v66 + 1) >> v56) - v29);
          float v98 = v87 + v97;
          BOOL v84 = (float)(v87 + v97) <= 8191.0;
          float v99 = 8191.0;
          if (v84)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          float v100 = v92 + v97;
          BOOL v84 = (float)(v92 + v97) <= 8191.0;
          float v101 = 8191.0;
          if (v84)
          {
            float v101 = v100;
            if (v100 < 0.0) {
              float v101 = 0.0;
            }
          }
          float v102 = v94 + v97;
          float v103 = 8191.0;
          if (v102 <= 8191.0)
          {
            float v103 = v102;
            if (v102 < 0.0) {
              float v103 = 0.0;
            }
          }
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S28, H20 }
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          unsigned int v110 = llroundf(fminf(fmaxf(v78, 0.0), 8191.0));
          __asm { FCVT            S19, H20 }
          _H20 = *(_WORD *)(v40 + 2 * v110);
          __asm { FCVT            S30, H20 }
          _H22 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          float v123 = fmaxf(_S28, fmaxf(_S19, _S30));
          float v124 = (float)((float)((float)(v59 * _S19) + (float)(v58 * _S28)) + (float)(v61 * _S30)) + (float)(v60 * v123);
          float v125 = 8191.0;
          if (v124 <= 8191.0)
          {
            float v125 = (float)((float)((float)(v59 * _S19) + (float)(v58 * _S28)) + (float)(v61 * _S30))
                 + (float)(v60 * v123);
            if (v124 < 0.0) {
              float v125 = 0.0;
            }
          }
          __asm
          {
            FCVT            S3, H22
            FCVT            S17, H23
            FCVT            S21, H20
          }
          _H22 = *((_WORD *)result + llroundf(v125));
          float v130 = (float)((float)((float)(v59 * _S17) + (float)(v58 * _S3)) + (float)(v61 * _S21))
               + (float)(v60 * fmaxf(_S3, fmaxf(_S17, _S21)));
          float v131 = 8191.0;
          if (v130 <= 8191.0)
          {
            float v131 = v130;
            if (v130 < 0.0) {
              float v131 = 0.0;
            }
          }
          __asm
          {
            FCVT            S8, H5
            FCVT            S9, H6
            FCVT            S10, H7
          }
          _H5 = *((_WORD *)result + llroundf(v131));
          float v136 = fmaxf(_S8, fmaxf(_S9, _S10));
          float v137 = (float)((float)((float)(v59 * _S9) + (float)(v58 * _S8)) + (float)(v61 * _S10)) + (float)(v60 * v136);
          float v138 = 8191.0;
          if (v137 <= 8191.0)
          {
            float v138 = (float)((float)((float)(v59 * _S9) + (float)(v58 * _S8)) + (float)(v61 * _S10)) + (float)(v60 * v136);
            if (v137 < 0.0) {
              float v138 = 0.0;
            }
          }
          __asm
          {
            FCVT            S23, H1
            FCVT            S29, H2
            FCVT            S31, H4
            FCVT            S1, H22
          }
          float v143 = _S28 * _S1;
          float v144 = _S19 * _S1;
          float v145 = _S30 * _S1;
          __asm { FCVT            S1, H5 }
          float v147 = _S3 * _S1;
          float v148 = _S17 * _S1;
          float v149 = _S21 * _S1;
          LOWORD(_S1) = *((_WORD *)result + llroundf(v138));
          __asm { FCVT            S2, H1 }
          float v151 = _S8 * _S2;
          float v152 = _S9 * _S2;
          float v153 = _S10 * _S2;
          float v154 = (float)((float)((float)(v59 * _S29) + (float)(v58 * _S23)) + (float)(v61 * _S31))
               + (float)(v60 * fmaxf(_S23, fmaxf(_S29, _S31)));
          float v155 = 8191.0;
          if (v154 <= 8191.0)
          {
            float v155 = v154;
            if (v154 < 0.0) {
              float v155 = 0.0;
            }
          }
          _H17 = *((_WORD *)result + llroundf(v155));
          __asm { FCVT            S17, H17 }
          float v158 = _S23 * _S17;
          _S22 = _S29 * _S17;
          _S17 = _S31 * _S17;
          float v161 = (float)((float)(v231 * v144) + (float)(v143 * v233)) + (float)(v145 * v230);
          float v162 = (float)((float)(v228 * v144) + (float)(v143 * v229)) + (float)(v145 * v227);
          float v163 = (float)((float)(v225 * v144) + (float)(v143 * v226)) + (float)(v145 * v224);
          float v164 = (float)((float)(v231 * v148) + (float)(v147 * v233)) + (float)(v149 * v230);
          _S20 = (float)((float)(v228 * v148) + (float)(v147 * v229)) + (float)(v149 * v227);
          float v166 = (float)((float)(v225 * v148) + (float)(v147 * v226)) + (float)(v149 * v224);
          float v167 = (float)((float)(v231 * v152) + (float)(v151 * v233)) + (float)(v153 * v230);
          float v168 = (float)((float)(v228 * v152) + (float)(v151 * v229)) + (float)(v153 * v227);
          float v169 = (float)((float)(v225 * v152) + (float)(v151 * v226)) + (float)(v153 * v224);
          float v170 = (float)((float)(v231 * _S22) + (float)(v158 * v233)) + (float)(_S17 * v230);
          float v171 = (float)((float)(v228 * _S22) + (float)(v158 * v229)) + (float)(_S17 * v227);
          _S21 = (float)((float)(v225 * _S22) + (float)(v158 * v226)) + (float)(_S17 * v224);
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          __asm { FCVT            S4, H2 }
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          __asm { FCVT            S5, H2 }
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          __asm { FCVT            S6, H2 }
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S7, H3
          }
          _H3 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          _H3 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S17) = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S20) = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v170, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          LOWORD(_S22) = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm
          {
            FCVT            S22, H22
            FCVT            S21, H21
          }
          float v193 = (float)((float)((float)(v240 * _S4) + (float)(v241 * _S1)) + (float)(v239 * _S5)) + v36;
          if (v193 < v36) {
            float v194 = v36;
          }
          else {
            float v194 = (float)((float)((float)(v240 * _S4) + (float)(v241 * _S1)) + (float)(v239 * _S5)) + v36;
          }
          BOOL v84 = v193 <= v38;
          float v195 = (float)((float)((float)(v240 * _S2) + (float)(v241 * _S6)) + (float)(v239 * _S7)) + v36;
          if (!v84) {
            float v194 = v38;
          }
          char v196 = llroundf(v194);
          if (v195 < v36) {
            float v197 = v36;
          }
          else {
            float v197 = (float)((float)((float)(v240 * _S2) + (float)(v241 * _S6)) + (float)(v239 * _S7)) + v36;
          }
          BOOL v84 = v195 <= v38;
          float v198 = (float)((float)((float)(v240 * _S3) + (float)(v241 * _S19)) + (float)(v239 * _S17)) + v36;
          if (!v84) {
            float v197 = v38;
          }
          char v199 = llroundf(v197);
          if (v198 < v36) {
            float v200 = v36;
          }
          else {
            float v200 = (float)((float)((float)(v240 * _S3) + (float)(v241 * _S19)) + (float)(v239 * _S17)) + v36;
          }
          BOOL v84 = v198 <= v38;
          float v201 = (float)((float)((float)(v240 * _S22) + (float)(v241 * _S20)) + (float)(v239 * _S21)) + v36;
          if (!v84) {
            float v200 = v38;
          }
          char v202 = llroundf(v200);
          if (v201 < v36) {
            float v203 = v36;
          }
          else {
            float v203 = (float)((float)((float)(v240 * _S22) + (float)(v241 * _S20)) + (float)(v239 * _S21)) + v36;
          }
          if (v201 <= v38) {
            float v204 = v203;
          }
          else {
            float v204 = v38;
          }
          float v205 = (float)((float)(_S1 + _S6) + _S19) + _S20;
          float v206 = (float)((float)(_S4 + _S2) + _S3) + _S22;
          *unsigned __int8 v54 = v196;
          v54[1] = v199;
          *float16x8_t v67 = v202;
          v67[1] = llroundf(v204);
          float v207 = (float)((float)(_S5 + _S7) + _S17) + _S21;
          float v208 = (float)((float)(v243 + (float)(v205 * v238)) + (float)(v206 * v237)) + (float)(v207 * v236);
          float v209 = v242;
          if (v208 <= v242)
          {
            float v209 = (float)((float)(v243 + (float)(v205 * v238)) + (float)(v206 * v237)) + (float)(v207 * v236);
            if (v208 < v250) {
              float v209 = v250;
            }
          }
          float v210 = (float)((float)(v243 + (float)(v205 * v235)) + (float)(v206 * v234)) + (float)(v207 * v232);
          *(unsigned char *)(v55 + v64) = llroundf(v209);
          float v211 = v242;
          float v30 = v248;
          float v29 = v249;
          float v32 = v246;
          float v31 = v247;
          float v34 = v244;
          float v33 = v245;
          float v35 = v223;
          if (v210 <= v242)
          {
            float v211 = v210;
            if (v210 < v250) {
              float v211 = v250;
            }
          }
          v42 += 4;
          v65 += 2;
          v66 += 4;
          v54 += 2;
          v67 += 2;
          *(unsigned char *)(v55 + v64 + 1) = llroundf(v211);
          v64 += 2;
          float v58 = v221;
          float v59 = v222;
          float v61 = v220;
        }
        while (v10 > v64);
      }
      BOOL v42 = &v63[v21];
      unsigned __int8 v54 = &v62[v24];
      v55 += v25;
      v9 += 2;
      v57 += v22;
    }
    while (v13 > v9);
    if (v219 && v218)
    {
      uint64_t v212 = 0;
      do
      {
        if (v10)
        {
          size_t v213 = v10;
          float16x8_t v214 = v27;
          uint16x8_t v215 = (unsigned __int16 *)v23;
          do
          {
            unsigned int v216 = *v215++;
            *v214++ = llroundf((float)v216 * 0.0038911);
            --v213;
          }
          while (v213);
        }
        v23 += v217;
        v27 += v26;
        ++v212;
      }
      while (v212 != v13);
    }
    else if (v218)
    {
      do
      {
        if (v10) {
          uint64_t result = memset(v27, 255, v10);
        }
        v27 += v26;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Mat_TRC_420vf_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v14 = *(void *)((char *)result + 28);
  unint64_t v15 = 2 * *(unsigned __int8 *)result;
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (2 * v17 != 2 * v16)
  {
    unint64_t v18 = 0;
    size_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    uint64_t v21 = *(void *)((char *)result + 44) + 2 * v16;
    unint64_t v22 = 2 * v17 - 2 * v16;
    uint64_t v23 = result[14];
    uint64_t v24 = (void *)result[16];
    uint64_t v25 = result[15] + 2 * (result[13] * a2 / v15);
    uint64_t v26 = (float32x2_t *)result[19];
    uint64_t v27 = (void *)result[7];
    uint64_t v28 = result[8];
    uint64_t v29 = (uint64_t *)result[17];
    uint64_t result = *(void **)v28;
    uint64_t v30 = *(void *)(v28 + 8);
    uint64_t v363 = *(void *)(v28 + 16);
    uint64_t v367 = v27[2];
    uint64_t v362 = v367 + v363 * v21 + 2 * v20;
    uint64_t v31 = *v29;
    uint64_t v32 = v29[1];
    uint64_t v33 = v29[2];
    LODWORD(v28) = v26[17].u16[2];
    LODWORD(v29) = v26[17].u16[3];
    LODWORD(a3) = 1174403072;
    *(float *)&a4 = (float)v28;
    float v378 = (float)v28;
    *(short float *)v13.i16 = (short float)v28;
    LODWORD(v28) = v26[18].u16[0];
    float v34 = (float)v29;
    short float v35 = (short float)v29;
    LODWORD(v29) = v26[18].u16[1];
    _S26 = v26[5].i32[1];
    unsigned int v40 = v26[18].u16[2];
    float v41 = (float)v28;
    *(short float *)&a4 = (short float)v28;
    LODWORD(v28) = v26[18].u16[3];
    *(float *)&a5 = (float)v29;
    float v383 = (float)v29;
    *(short float *)&a5 = (short float)v29;
    LODWORD(v29) = v26[19].u16[0];
    float v414 = (float)v40;
    *(float *)&a6 = (float)v28;
    float v427 = (float)v28;
    float v42 = (float)v29;
    *(short float *)v8.i16 = (short float)v28;
    *(short float *)v9.i16 = (short float)v29;
    unsigned int v43 = v26[15].u8[4];
    if (v43 >= 0x11) {
      unsigned __int8 v44 = 0;
    }
    else {
      unsigned __int8 v44 = 16 - v43;
    }
    if (v25 >= 0) {
      uint64_t v45 = v25;
    }
    else {
      uint64_t v45 = v25 + 1;
    }
    uint64_t v365 = v33;
    uint64_t v366 = v24[2];
    _S25 = v26[4].i32[1];
    _S27 = v26[5].i32[0];
    uint64_t v48 = (char *)&v26[20] + 4;
    float v364 = (unsigned char *)(v366 + v33 * v25 + v23);
    v10.f32[0] = 8191.0 / (float)v26[16].u32[0];
    _S11 = v10.f32[0] * v26->f32[0];
    float16x8_t v50 = (float16x8_t)vdupq_lane_s16(v13, 0);
    v37.i32[1] = v26[1].i32[0];
    v37.i32[0] = v26[3].i32[1];
    *(float32x2_t *)v7.f32 = vmul_n_f32(v37, v10.f32[0]);
    float16x8_t v51 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v7), 0);
    *(float32x2_t *)v11.f32 = vmul_n_f32(v26[2], v10.f32[0]);
    *(double *)&v52.i64[1] = a3;
    float16x8_t v53 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v11), 0);
    __asm { FMOV            V5.2S, #0.25 }
    v12.i32[1] = v26[7].i32[1];
    v12.i32[0] = v26[6].i32[0];
    *(float32x2_t *)v10.f32 = vmul_f32(*(float32x2_t *)v12.f32, _D5);
    uint64_t v424 = v10.i64[0];
    v38.i32[1] = v26[8].i32[0];
    v38.i32[0] = v26[6].i32[1];
    *(float32x2_t *)v12.f32 = vmul_f32(v38, _D5);
    v39.i32[1] = v26[8].i32[1];
    v39.i32[0] = v26[7].i32[0];
    *(float32x2_t *)v52.f32 = vmul_f32(v39, _D5);
    uint64_t v422 = v52.i64[0];
    uint64_t v423 = v12.i64[0];
    int32x4_t v420 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v12), 0);
    int32x4_t v421 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v52), 0);
    float16x8_t v59 = vmulq_n_f16(v51, -v35);
    int16x8_t v60 = vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    float v61 = (unsigned char *)(v24[1] + v32 * (v45 >> 1) + v23);
    uint32x4_t v62 = (int8x8_t *)(*v24 + v31 * v25 + v23);
    uint64_t v63 = v27[1];
    _ZF = v63 == 0;
    uint64_t v64 = v63 + v30 * v21;
    uint64_t v65 = *v27 + (void)result * v21;
    float32x4_t v66 = (char *)&v26[2068] + 4;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a5, 0);
    *(short float *)&a6 = (short float)v40;
    int16x8_t v68 = vdupq_lane_s16(*(int16x4_t *)&a6, 0);
    float16x8_t v409 = (float16x8_t)vdupq_lane_s16(v8, 0);
    float16x8_t v69 = vmulq_n_f16(v53, -v35);
    float16x8_t v70 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    int16x8_t v71 = vdupq_lane_s16(v9, 0);
    float v72 = (uint16x8_t *)(v64 + 2 * v20);
    if (_ZF) {
      float v73 = 0;
    }
    else {
      float v73 = v72;
    }
    float v74 = (uint16x8_t *)(v65 + 2 * v20);
    uint64_t v75 = (v19 - 7);
    unsigned __int8 v76 = v44;
    uint16x8_t v77 = (uint16x8_t)vdupq_n_s16(-v44);
    size_t v371 = v19 & 0xFFFFFFF8;
    LODWORD(_Q12) = v26[10].i32[1];
    __asm { FCVT            H6, S11 }
    short float v370 = _H6;
    float v417 = v26[4].f32[1];
    __asm { FCVT            H6, S25 }
    short float v393 = _H6;
    float16x8_t v80 = v59;
    float v416 = v26[5].f32[0];
    __asm { FCVT            H8, S27 }
    float16x8_t v82 = (float16x8_t)v60;
    float v418 = v26[5].f32[1];
    __asm { FCVT            H6, S26 }
    short float v391 = _H6;
    float v84 = v378;
    float16x8_t v85 = (float16x8_t)v420;
    float16x8_t v86 = (float16x8_t)v421;
    float v407 = v26[9].f32[0];
    __asm { FCVT            H1, S17 }
    short float v390 = _H1;
    float v406 = v26[9].f32[1];
    __asm { FCVT            H1, S31 }
    float v405 = v26[10].f32[0];
    __asm { FCVT            H10, S10 }
    float v404 = *(float *)&_Q12;
    __asm { FCVT            H12, S12 }
    short float v437 = *(short float *)&_Q12;
    float v402 = v26[11].f32[0];
    __asm { FCVT            H12, S22 }
    long long v436 = _Q12;
    float v400 = v26[11].f32[1];
    __asm { FCVT            H5, S5 }
    float v398 = v26[12].f32[0];
    __asm { FCVT            H7, S7 }
    float v396 = v26[12].f32[1];
    __asm { FCVT            H12, S18 }
    short float v385 = _H12;
    float v395 = v26[13].f32[0];
    __asm { FCVT            H12, S21 }
    float v435 = v7.f32[1];
    float16x8_t v410 = (float16x8_t)v68;
    float16x8_t v439 = v69;
    float16x8_t v408 = (float16x8_t)v71;
    uint16x8_t v438 = v77;
    short float v389 = _H1;
    short float v386 = _H7;
    short float v387 = _H5;
    unint64_t v376 = v22;
    size_t v377 = v19;
    uint64_t v374 = v31;
    v375 = result;
    uint64_t v419 = v30;
    uint64_t v373 = v32;
    float16x8_t v415 = v51;
    float16x8_t v412 = v50;
    float16x8_t v413 = v80;
    float16x8_t v411 = v67;
    unsigned __int8 v372 = v44;
    float16x8_t v403 = v70;
    __int32 v401 = v11.i32[0];
    float v399 = v34;
    float16x8_t v397 = v82;
    float v426 = _S11;
    float16x8_t v394 = v53;
    short float v392 = _H8;
    short float v388 = _H10;
    short float v384 = _H12;
    float32x4_t v369 = v7;
    float v368 = v42;
    do
    {
      float v94 = (char *)result + (void)v74;
      float v95 = &v73->i8[v30];
      float v96 = (char *)v62 + v31;
      if ((int)v19 < 8)
      {
        size_t v250 = 0;
        float v249 = v61;
        float v99 = (int8x8_t *)((char *)v62 + v31);
        float v248 = (unsigned __int16 *)((char *)v73->u16 + v30);
        float v98 = (uint16x8_t *)((char *)result + (void)v74);
      }
      else
      {
        float v379 = (char *)result + (void)v74;
        float v380 = &v73->i8[v30];
        float v381 = (char *)v62 + v31;
        unint64_t v382 = v18;
        uint64_t v97 = 0;
        float v98 = (uint16x8_t *)((char *)result + (void)v74);
        float v99 = (int8x8_t *)((char *)v62 + v31);
        float16x8_t v100 = 0uLL;
        size_t v425 = v61;
        do
        {
          uint64_t v432 = v97;
          uint64_t v434 = v62;
          uint64_t v431 = v73;
          float16x8_t v101 = vcvtq_f16_u16(vshlq_u16(*v73, v77));
          int16x8_t v102 = (int16x8_t)vmlaq_f16(v80, v51, v101);
          int8x16_t v103 = (int8x16_t)vmlaq_f16(v69, v53, v101);
          v101.i64[0] = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u64[0];
          *(int16x4_t *)v104.i8 = vuzp1_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v101.i8);
          *(int16x4_t *)v101.i8 = vuzp2_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v101.i8);
          *(double *)&v101.i64[1] = a3;
          v102.i64[0] = vextq_s8(v103, v103, 8uLL).u64[0];
          *(double *)&v104.i64[1] = a3;
          *(float16x4_t *)v102.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v102.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v102.i8));
          *(double *)&v102.i64[1] = a3;
          float16x8_t v105 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)((char *)v73 + v30), v77));
          int16x8_t v106 = (int16x8_t)vmlaq_f16(v80, v51, v105);
          float16x8_t v107 = (float16x8_t)vzip1q_s16((int16x8_t)v101, (int16x8_t)v101);
          int8x16_t v108 = (int8x16_t)vmlaq_f16(v439, v53, v105);
          v101.i64[0] = vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u64[0];
          *(int16x4_t *)v105.i8 = vuzp1_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v101.i8);
          *(int16x4_t *)v106.i8 = vuzp2_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v101.i8);
          int16x4_t v109 = (int16x4_t)vextq_s8(v108, v108, 8uLL).u64[0];
          float16x8_t v110 = (float16x8_t)vzip1q_s16(v104, v104);
          *(int16x4_t *)v104.i8 = vuzp1_s16(*(int16x4_t *)v108.i8, v109);
          *(int16x4_t *)v108.i8 = vuzp2_s16(*(int16x4_t *)v108.i8, v109);
          v433 = v74 + 1;
          float16x8_t v111 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(*v74, v77)), v50);
          *(double *)&v106.i64[1] = a3;
          float16x8_t v112 = (float16x8_t)vzip1q_s16(v106, v106);
          float16x8_t v113 = vmlaq_n_f16(v107, v111, v370);
          *(double *)&v105.i64[1] = a3;
          *(float16x4_t *)v106.i8 = vadd_f16(*(float16x4_t *)v104.i8, *(float16x4_t *)v108.i8);
          *(double *)&v106.i64[1] = a3;
          float16x8_t v114 = vmlaq_n_f16(v110, v111, v370);
          float16x8_t v115 = (float16x8_t)vzip1q_s16((int16x8_t)v105, (int16x8_t)v105);
          float16x8_t v116 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v102, v102), v111, v370);
          v111.i64[0] = 0x9000900090009000;
          v111.i64[1] = 0x9000900090009000;
          float16x8_t v117 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(*v98, v77)), v50);
          float16x8_t v118 = vmlaq_n_f16(v112, v117, v370);
          float16x8_t v119 = vmlaq_n_f16(v115, v117, v370);
          float16x8_t v120 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v106, v106), v117, v370);
          uint16x8_t v121 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, v100), v111));
          float16x8_t v122 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v121.i8);
          uint32x4_t v123 = vmovl_high_u16(v121);
          *(void *)&long long v124 = v123.u32[2];
          *((void *)&v124 + 1) = v123.u32[3];
          long long v125 = v124;
          uint64_t v126 = v123.u32[1];
          v127.i16[0] = *(_WORD *)&v48[2 * v122.u32[0]];
          uint64_t v128 = v123.u32[0];
          uint16x8_t v129 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, v100), v111));
          uint32x4_t v130 = vmovl_high_u16(v129);
          uint32x4_t v131 = vmovl_u16(*(uint16x4_t *)v129.i8);
          uint64_t v132 = v131.u32[1];
          uint64_t v133 = v131.u32[3];
          v134.i16[0] = *(_WORD *)&v48[2 * v131.u32[0]];
          long long v135 = (__int16 *)&v48[2 * v131.u32[2]];
          float v136 = (__int16 *)&v48[2 * v130.u32[0]];
          float v137 = (__int16 *)&v48[2 * v130.u32[2]];
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, v100), v111));
          uint32x4_t v139 = vmovl_high_u16(v138);
          uint32x4_t v140 = vmovl_u16(*(uint16x4_t *)v138.i8);
          v127.i16[1] = *(_WORD *)&v48[2 * v122.u32[1]];
          v141.i16[0] = *(_WORD *)&v48[2 * v140.u32[0]];
          uint64_t v142 = (__int16 *)&v48[2 * v140.u32[1]];
          float v143 = (__int16 *)&v48[2 * v140.u32[2]];
          float v144 = (__int16 *)&v48[2 * v140.u32[3]];
          float v145 = (__int16 *)&v48[2 * v132];
          uint32x4_t v146 = (__int16 *)&v48[2 * v139.u32[0]];
          float v147 = (__int16 *)&v48[2 * v139.u32[1]];
          float v148 = (__int16 *)&v48[2 * v133];
          float v149 = (__int16 *)&v48[2 * v139.u32[2]];
          uint64_t v150 = (__int16 *)&v48[2 * v139.u32[3]];
          float v151 = (__int16 *)&v48[2 * v130.u32[1]];
          uint16x8_t v152 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v111));
          uint32x4_t v153 = vmovl_high_u16(v152);
          uint32x4_t v154 = vmovl_u16(*(uint16x4_t *)v152.i8);
          float v155 = (__int16 *)&v48[2 * v130.u32[3]];
          v141.i16[1] = *v142;
          v127.i16[2] = *(_WORD *)&v48[2 * v122.u32[2]];
          v156.i16[0] = *(_WORD *)&v48[2 * v154.u32[0]];
          v134.i16[1] = *v145;
          v141.i16[2] = *v143;
          unint64_t v157 = (__int16 *)&v48[2 * v153.u32[0]];
          float v158 = (__int16 *)&v48[2 * v153.u32[1]];
          v127.i16[3] = *(_WORD *)&v48[2 * v122.u32[3]];
          uint64_t v159 = (__int16 *)&v48[2 * v153.u32[2]];
          v134.i16[2] = *v135;
          v156.i16[1] = *(_WORD *)&v48[2 * v154.u32[1]];
          v156.i16[2] = *(_WORD *)&v48[2 * v154.u32[2]];
          v141.i16[3] = *v144;
          float v160 = (__int16 *)&v48[2 * v153.u32[3]];
          v156.i16[3] = *(_WORD *)&v48[2 * v154.u32[3]];
          v127.i16[4] = *(_WORD *)&v48[2 * v128];
          uint16x8_t v161 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v111));
          float16x8_t v162 = (float16x8_t)vmovl_high_u16(v161);
          uint32x4_t v163 = vmovl_u16(*(uint16x4_t *)v161.i8);
          v134.i16[3] = *v148;
          v141.i16[4] = *v146;
          *(void *)&long long v124 = v162.u32[2];
          *((void *)&v124 + 1) = v162.u32[3];
          long long v164 = v124;
          v156.i16[4] = *v157;
          *(void *)&long long v124 = v162.u32[0];
          v162.i16[0] = *(_WORD *)&v48[2 * v163.u32[0]];
          v127.i16[5] = *(_WORD *)&v48[2 * v126];
          v134.i16[4] = *v136;
          float16x8_t v165 = (__int16 *)&v48[2 * v162.u32[1]];
          v141.i16[5] = *v147;
          float v166 = (__int16 *)&v48[2 * v164];
          v156.i16[5] = *v158;
          v162.i16[1] = *(_WORD *)&v48[2 * v163.u32[1]];
          v162.i16[2] = *(_WORD *)&v48[2 * v163.u32[2]];
          v127.i16[6] = *(_WORD *)&v48[2 * v125];
          v162.i16[3] = *(_WORD *)&v48[2 * v163.u32[3]];
          v162.i16[4] = *(_WORD *)&v48[2 * v124];
          v134.i16[5] = *v151;
          float v167 = (__int16 *)&v48[2 * *((void *)&v164 + 1)];
          uint16x8_t v168 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, (float16x8_t)0), v111));
          v141.i16[6] = *v149;
          uint32x4_t v169 = vmovl_u16(*(uint16x4_t *)v168.i8);
          v156.i16[6] = *v159;
          uint32x4_t v170 = vmovl_high_u16(v168);
          v162.i16[5] = *v165;
          v127.i16[7] = *(_WORD *)&v48[2 * *((void *)&v125 + 1)];
          v122.i16[0] = *(_WORD *)&v48[2 * v169.u32[0]];
          v134.i16[6] = *v137;
          v141.i16[7] = *v150;
          v156.i16[7] = *v160;
          v122.i16[1] = *(_WORD *)&v48[2 * v169.u32[1]];
          v162.i16[6] = *v166;
          v122.i16[2] = *(_WORD *)&v48[2 * v169.u32[2]];
          v122.i16[3] = *(_WORD *)&v48[2 * v169.u32[3]];
          v134.i16[7] = *v155;
          v122.i16[4] = *(_WORD *)&v48[2 * v170.u32[0]];
          v122.i16[5] = *(_WORD *)&v48[2 * v170.u32[1]];
          v162.i16[7] = *v167;
          v122.i16[6] = *(_WORD *)&v48[2 * v170.u32[2]];
          v122.i16[7] = *(_WORD *)&v48[2 * v170.u32[3]];
          float16x8_t v171 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v127, v390), v134, v389), v141, v388);
          float16x8_t v172 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v127, v437), v134, *(short float *)&v436), v141, v387);
          float16x8_t v173 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v141, v384), v134, v385), v127, v386);
          v134.i16[7] = HIWORD(v436);
          float16x8_t v174 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v156, v390), v162, v389), v122, v388);
          float16x8_t v175 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v156, v437), v162, *(short float *)&v436), v122, v387);
          float16x8_t v100 = 0uLL;
          float16x8_t v176 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v122, v384), v162, v385), v156, v386);
          uint16x8_t v77 = v438;
          uint16x8_t v177 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v171, (float16x8_t)0), v111));
          float16x8_t v178 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v177.i8);
          uint32x4_t v179 = vmovl_high_u16(v177);
          uint64_t v180 = v178.u32[3];
          *(void *)&long long v124 = v179.u32[2];
          uint64_t v181 = v179.u32[1];
          uint64_t v182 = v179.u32[3];
          uint64_t v183 = v179.u32[0];
          uint16x8_t v184 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v172, (float16x8_t)0), v111));
          uint32x4_t v185 = vmovl_high_u16(v184);
          uint64_t v186 = v124;
          uint32x4_t v187 = vmovl_u16(*(uint16x4_t *)v184.i8);
          uint64_t v188 = v187.u32[1];
          uint64_t v189 = v187.u32[0];
          uint64_t v190 = v187.u32[3];
          uint64_t v191 = v185.u32[1];
          uint64_t v192 = v187.u32[2];
          uint64_t v193 = v185.u32[0];
          uint64_t v194 = v185.u32[3];
          uint16x8_t v195 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v173, (float16x8_t)0), v111));
          uint32x4_t v196 = vmovl_high_u16(v195);
          uint32x4_t v197 = vmovl_u16(*(uint16x4_t *)v195.i8);
          uint64_t v198 = v185.u32[2];
          v178.i16[7] = (unint64_t)v197.u32[1] >> 48;
          uint64_t v430 = v197.u32[1];
          uint64_t v199 = v197.u32[0];
          v178.i16[0] = *(_WORD *)&v66[2 * v178.u32[0]];
          uint64_t v429 = v197.u32[3];
          uint64_t v428 = v196.u32[1];
          uint64_t v200 = v197.u32[2];
          uint64_t v201 = v196.u32[0];
          uint64_t v202 = v196.u32[3];
          v134.i16[0] = *(_WORD *)&v66[2 * v189];
          uint64_t v203 = v196.u32[2];
          uint16x8_t v204 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v174, (float16x8_t)0), v111));
          uint32x4_t v205 = vmovl_high_u16(v204);
          float16x8_t v206 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v204.i8);
          *(void *)&long long v124 = v205.u32[2];
          *((void *)&v124 + 1) = v205.u32[3];
          long long v207 = v124;
          *((void *)&v124 + 1) = v205.u32[1];
          uint64_t v208 = v206.u32[3];
          uint64_t v209 = v75;
          v174.i16[0] = *(_WORD *)&v66[2 * v206.u32[0]];
          v178.i16[1] = *(_WORD *)&v66[2 * v178.u32[1]];
          uint64_t v210 = v205.u32[0];
          v134.i16[1] = *(_WORD *)&v66[2 * v188];
          v174.i16[1] = *(_WORD *)&v66[2 * v206.u32[1]];
          uint64_t v211 = *((void *)&v207 + 1);
          v178.i16[2] = *(_WORD *)&v66[2 * v178.u32[2]];
          uint64_t v212 = v207;
          uint16x8_t v213 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v175, (float16x8_t)0), v111));
          v134.i16[2] = *(_WORD *)&v66[2 * v192];
          uint32x4_t v214 = vmovl_u16(*(uint16x4_t *)v213.i8);
          v206.i16[7] = (unint64_t)v214.u32[1] >> 48;
          v174.i16[2] = *(_WORD *)&v66[2 * v206.u32[2]];
          v206.i16[0] = *(_WORD *)&v66[2 * v214.u32[0]];
          v178.i16[3] = *(_WORD *)&v66[2 * v180];
          uint16x8_t v215 = (__int16 *)&v66[2 * v183];
          unsigned int v216 = (__int16 *)&v66[2 * v186];
          v134.i16[3] = *(_WORD *)&v66[2 * v190];
          v174.i16[3] = *(_WORD *)&v66[2 * v208];
          uint64_t v217 = (__int16 *)&v66[2 * v198];
          uint64_t v218 = (__int16 *)&v66[2 * v194];
          ++v98;
          v178.i16[4] = *v215;
          uint32x4_t v219 = vmovl_high_u16(v213);
          v134.i16[4] = *(_WORD *)&v66[2 * v193];
          v206.i16[1] = *(_WORD *)&v66[2 * v214.u32[1]];
          v174.i16[4] = *(_WORD *)&v66[2 * v210];
          v178.i16[5] = *(_WORD *)&v66[2 * v181];
          v206.i16[2] = *(_WORD *)&v66[2 * v214.u32[2]];
          v134.i16[5] = *(_WORD *)&v66[2 * v191];
          float v220 = (__int16 *)&v66[2 * v219.u32[1]];
          v174.i16[5] = *(_WORD *)&v66[2 * *((void *)&v124 + 1)];
          v206.i16[3] = *(_WORD *)&v66[2 * v214.u32[3]];
          uint64_t v221 = v219.u32[3];
          v178.i16[6] = *v216;
          float v222 = (__int16 *)&v66[2 * v219.u32[2]];
          v206.i16[4] = *(_WORD *)&v66[2 * v219.u32[0]];
          v134.i16[6] = *v217;
          uint16x8_t v223 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v176, (float16x8_t)0), v111));
          uint32x4_t v224 = vmovl_u16(*(uint16x4_t *)v223.i8);
          v174.i16[6] = *(_WORD *)&v66[2 * v212];
          uint64_t v225 = v224.u32[1];
          uint64_t v226 = v224.u32[0];
          float16x8_t v227 = (float16x8_t)vuzp1q_s16((int16x8_t)v178, (int16x8_t)v134);
          v206.i16[5] = *v220;
          v206.i16[6] = *v222;
          v178.i16[7] = *(_WORD *)&v66[2 * v182];
          uint32x4_t v228 = vmovl_high_u16(v223);
          uint64_t v229 = v224.u32[3];
          uint64_t v230 = v224.u32[2];
          uint64_t v231 = v228.u32[1];
          v134.i16[7] = *v218;
          uint64_t v232 = v228.u32[0];
          float16x8_t v233 = (float16x8_t)vuzp1q_s16((int16x8_t)v174, (int16x8_t)v206);
          v174.i16[7] = *(_WORD *)&v66[2 * v211];
          *((void *)&v124 + 1) = v228.u32[3];
          uint64_t v234 = v228.u32[2];
          float16x8_t v235 = vmlaq_n_f16(vmlaq_n_f16(v82, v178, v393), v134, v392);
          v206.i16[7] = *(_WORD *)&v66[2 * v221];
          float16x8_t v236 = vmlaq_n_f16(vmlaq_n_f16(v82, v174, v393), v206, v392);
          float16x8_t v237 = vaddq_f16(v227, (float16x8_t)vuzp2q_s16((int16x8_t)v178, (int16x8_t)v134));
          v227.i16[0] = *(_WORD *)&v66[2 * v199];
          v227.i16[1] = *(_WORD *)&v66[2 * v430];
          v227.i16[2] = *(_WORD *)&v66[2 * v200];
          float16x8_t v238 = vaddq_f16(v237, v233);
          v237.i16[0] = *(_WORD *)&v66[2 * v226];
          v227.i16[3] = *(_WORD *)&v66[2 * v429];
          v237.i16[1] = *(_WORD *)&v66[2 * v225];
          v227.i16[4] = *(_WORD *)&v66[2 * v201];
          float v239 = (__int16 *)&v66[2 * v230];
          float v74 = v433;
          v237.i16[2] = *v239;
          v227.i16[5] = *(_WORD *)&v66[2 * v428];
          v227.i16[6] = *(_WORD *)&v66[2 * v203];
          float v240 = (__int16 *)&v66[2 * v231];
          uint64_t v30 = v419;
          v237.i16[3] = *(_WORD *)&v66[2 * v229];
          float v61 = v425;
          int16x8_t v241 = (int16x8_t)vaddq_f16(v238, (float16x8_t)vuzp2q_s16((int16x8_t)v174, (int16x8_t)v206));
          float16x8_t v242 = (float16x8_t)vtrn1q_s16((int16x8_t)v227, (int16x8_t)v227);
          v237.i16[4] = *(_WORD *)&v66[2 * v232];
          v237.i16[5] = *v240;
          v227.i16[7] = *(_WORD *)&v66[2 * v202];
          float v243 = (__int16 *)&v66[2 * v234];
          uint64_t v75 = v209;
          v237.i16[6] = *v243;
          float16x8_t v244 = vmlaq_n_f16(v235, v227, v391);
          float16x8_t v245 = vaddq_f16(v242, (float16x8_t)vtrn2q_s16((int16x8_t)v227, (int16x8_t)v227));
          float16x8_t v246 = (float16x8_t)vtrn1q_s16((int16x8_t)v237, (int16x8_t)v237);
          v237.i16[7] = *(_WORD *)&v66[2 * *((void *)&v124 + 1)];
          *uint64_t v434 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v244, v82), v410)));
          uint32x4_t v62 = v434 + 1;
          float16x8_t v247 = vmaxq_f16(vmlaq_n_f16(v236, v237, v391), v82);
          float16x8_t v69 = v439;
          *v99++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(v247, v410)));
          *(int8x8_t *)&v425[v432] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v67, v70, (float16x8_t)vzip1q_s16(v241, v241)), v85, (float16x8_t)vzip2q_s16(v241, v241)), v86, vaddq_f16(vaddq_f16(v245, v246), (float16x8_t)vtrn2q_s16((int16x8_t)v237, (int16x8_t)v237))), v409), v408)));
          float v73 = v431 + 1;
          uint64_t v97 = v432 + 8;
        }
        while ((int)v432 + 8 < (int)v209);
        float v248 = (unsigned __int16 *)((char *)v73->u16 + v419);
        float v249 = &v425[v97];
        size_t v250 = v371;
        unint64_t v22 = v376;
        size_t v19 = v377;
        float v96 = v381;
        unint64_t v18 = v382;
        uint64_t v31 = v374;
        uint64_t result = v375;
        uint64_t v32 = v373;
        unsigned __int8 v76 = v372;
        float v94 = v379;
        float v95 = v380;
        float32x4_t v7 = v369;
        float v84 = v378;
        float v42 = v368;
        _S11 = v426;
      }
      for (; v19 > v250; float16x8_t v67 = v411)
      {
        float v251 = (float)(v73->u16[1] >> v76) - v34;
        float v252 = v435 * v251;
        float v253 = _S11 * (float)((float)(v74->u16[0] >> v76) - v84);
        float v254 = 8191.0;
        if ((float)((float)(v435 * v251) + v253) <= 8191.0)
        {
          float v254 = v252 + v253;
          if ((float)((float)(v435 * v251) + v253) < 0.0) {
            float v254 = 0.0;
          }
        }
        float v255 = (float)(v73->u16[0] >> v76) - v34;
        float v256 = (float)(v11.f32[1] * v251) + (float)(v255 * v11.f32[0]);
        float v257 = 8191.0;
        if ((float)(v253 + v256) <= 8191.0)
        {
          float v257 = v253 + v256;
          if ((float)(v253 + v256) < 0.0) {
            float v257 = 0.0;
          }
        }
        float v258 = v7.f32[0] * v255;
        float v259 = v258 + v253;
        BOOL v260 = (float)(v258 + v253) <= 8191.0;
        float v261 = 8191.0;
        if (v260)
        {
          float v261 = v259;
          if (v259 < 0.0) {
            float v261 = 0.0;
          }
        }
        float v262 = _S11 * (float)((float)(v74->u16[1] >> v76) - v84);
        float v263 = v252 + v262;
        float v264 = 8191.0;
        if (v263 <= 8191.0)
        {
          float v264 = v263;
          if (v263 < 0.0) {
            float v264 = 0.0;
          }
        }
        float v265 = v256 + v262;
        float v266 = 8191.0;
        if (v265 <= 8191.0)
        {
          float v266 = v265;
          if (v265 < 0.0) {
            float v266 = 0.0;
          }
        }
        float v267 = 8191.0;
        if ((float)(v258 + v262) <= 8191.0)
        {
          float v267 = v258 + v262;
          if ((float)(v258 + v262) < 0.0) {
            float v267 = 0.0;
          }
        }
        float v268 = (float)(v248[1] >> v76) - v34;
        float v269 = v435 * v268;
        float v270 = _S11 * (float)((float)(v98->u16[0] >> v76) - v84);
        float v271 = 8191.0;
        if ((float)((float)(v435 * v268) + v270) <= 8191.0)
        {
          float v271 = v269 + v270;
          if ((float)((float)(v435 * v268) + v270) < 0.0) {
            float v271 = 0.0;
          }
        }
        float v272 = (float)(*v248 >> v76) - v34;
        float v273 = (float)(v11.f32[1] * v268) + (float)(v272 * v11.f32[0]);
        float v274 = 8191.0;
        if ((float)(v270 + v273) <= 8191.0)
        {
          float v274 = v270 + v273;
          if ((float)(v270 + v273) < 0.0) {
            float v274 = 0.0;
          }
        }
        float v275 = v7.f32[0] * v272;
        float v276 = v275 + v270;
        BOOL v260 = (float)(v275 + v270) <= 8191.0;
        float v277 = 8191.0;
        if (v260)
        {
          float v277 = v276;
          if (v276 < 0.0) {
            float v277 = 0.0;
          }
        }
        float v278 = _S11 * (float)((float)(v98->u16[1] >> v76) - v84);
        float v279 = v269 + v278;
        float v280 = 8191.0;
        if (v279 <= 8191.0)
        {
          float v280 = v279;
          if (v279 < 0.0) {
            float v280 = 0.0;
          }
        }
        float v281 = v273 + v278;
        BOOL v260 = (float)(v273 + v278) <= 8191.0;
        float v282 = 8191.0;
        if (v260)
        {
          float v282 = v281;
          if (v281 < 0.0) {
            float v282 = 0.0;
          }
        }
        float32x4_t v283 = v7;
        float v284 = v275 + v278;
        BOOL v260 = (float)(v275 + v278) <= 8191.0;
        float v285 = 8191.0;
        if (v260)
        {
          float v285 = v284;
          if (v284 < 0.0) {
            float v285 = 0.0;
          }
        }
        _H3 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v254, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H5 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v257, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        _H7 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v261, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        _H18 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v264, 0.0), 8191.0))];
        __asm { FCVT            S18, H18 }
        _H21 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v266, 0.0), 8191.0))];
        _H22 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v267, 0.0), 8191.0))];
        __asm
        {
          FCVT            S21, H21
          FCVT            S22, H22
        }
        _H23 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v271, 0.0), 8191.0))];
        unsigned int v299 = llroundf(fminf(fmaxf(v274, 0.0), 8191.0));
        __asm { FCVT            S1, H23 }
        _H23 = *(_WORD *)&v48[2 * v299];
        __asm { FCVT            S23, H23 }
        _H2 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v277, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H19 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v280, 0.0), 8191.0))];
        __asm { FCVT            S19, H19 }
        _H16 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v282, 0.0), 8191.0))];
        _H17 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v285, 0.0), 8191.0))];
        __asm
        {
          FCVT            S16, H16
          FCVT            S17, H17
        }
        float v311 = (float)((float)(v406 * _S5) + (float)(_S3 * v407)) + (float)(_S7 * v405);
        float v312 = (float)((float)(v402 * _S5) + (float)(_S3 * v404)) + (float)(_S7 * v400);
        _S3 = (float)((float)(v396 * _S5) + (float)(_S3 * v398)) + (float)(_S7 * v395);
        _S7 = (float)((float)(v406 * _S21) + (float)(_S18 * v407)) + (float)(_S22 * v405);
        float v315 = (float)((float)(v402 * _S21) + (float)(_S18 * v404)) + (float)(_S22 * v400);
        float v316 = (float)((float)(v396 * _S21) + (float)(_S18 * v398)) + (float)(_S22 * v395);
        float v317 = (float)((float)(v406 * _S23) + (float)(_S1 * v407)) + (float)(_S2 * v405);
        float v318 = (float)((float)(v402 * _S23) + (float)(_S1 * v404)) + (float)(_S2 * v400);
        _S23 = (float)((float)(v396 * _S23) + (float)(_S1 * v398)) + (float)(_S2 * v395);
        float v320 = (float)((float)(v406 * _S16) + (float)(_S19 * v407)) + (float)(_S17 * v405);
        float v321 = (float)((float)(v402 * _S16) + (float)(_S19 * v404)) + (float)(_S17 * v400);
        _S17 = (float)((float)(v396 * _S16) + (float)(_S19 * v398)) + (float)(_S17 * v395);
        LOWORD(_S1) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(v311, 0.0), 8191.0))];
        __asm { FCVT            S5, H1 }
        LOWORD(_S1) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(v312, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        LOWORD(_S2) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        LOWORD(_S3) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        LOWORD(_S7) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(v315, 0.0), 8191.0))];
        LOWORD(_S16) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(v316, 0.0), 8191.0))];
        __asm
        {
          FCVT            S21, H7
          FCVT            S7, H16
        }
        LOWORD(_S16) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(v317, 0.0), 8191.0))];
        __asm { FCVT            S18, H16 }
        LOWORD(_S16) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(v318, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        LOWORD(_S19) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0))];
        __asm { FCVT            S22, H19 }
        LOWORD(_S19) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(v320, 0.0), 8191.0))];
        __asm { FCVT            S19, H19 }
        LOWORD(_S23) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(v321, 0.0), 8191.0))];
        LOWORD(_S17) = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0))];
        __asm
        {
          FCVT            S23, H23
          FCVT            S17, H17
        }
        float v335 = (float)((float)((float)(v416 * _S1) + (float)(v417 * _S5)) + (float)(v418 * _S2)) + v41;
        if (v335 < v41) {
          float v336 = v41;
        }
        else {
          float v336 = (float)((float)((float)(v416 * _S1) + (float)(v417 * _S5)) + (float)(v418 * _S2)) + v41;
        }
        BOOL v260 = v335 <= v414;
        float v337 = (float)((float)((float)(v416 * _S21) + (float)(v417 * _S3)) + (float)(v418 * _S7)) + v41;
        if (!v260) {
          float v336 = v414;
        }
        __int8 v338 = llroundf(v336);
        if (v337 < v41) {
          float v339 = v41;
        }
        else {
          float v339 = (float)((float)((float)(v416 * _S21) + (float)(v417 * _S3)) + (float)(v418 * _S7)) + v41;
        }
        BOOL v260 = v337 <= v414;
        float v340 = (float)((float)((float)(v416 * _S16) + (float)(v417 * _S18)) + (float)(v418 * _S22)) + v41;
        if (!v260) {
          float v339 = v414;
        }
        __int8 v341 = llroundf(v339);
        if (v340 < v41) {
          float v342 = v41;
        }
        else {
          float v342 = (float)((float)((float)(v416 * _S16) + (float)(v417 * _S18)) + (float)(v418 * _S22)) + v41;
        }
        BOOL v260 = v340 <= v414;
        float v343 = (float)((float)((float)(v416 * _S23) + (float)(v417 * _S19)) + (float)(v418 * _S17)) + v41;
        if (!v260) {
          float v342 = v414;
        }
        __int8 v344 = llroundf(v342);
        if (v343 < v41) {
          float v345 = v41;
        }
        else {
          float v345 = (float)((float)((float)(v416 * _S23) + (float)(v417 * _S19)) + (float)(v418 * _S17)) + v41;
        }
        if (v343 <= v414) {
          float v346 = v345;
        }
        else {
          float v346 = v414;
        }
        float v347 = (float)((float)(_S5 + _S3) + _S18) + _S19;
        float v348 = (float)((float)(_S1 + _S21) + _S16) + _S23;
        v62->i8[0] = v338;
        v62->i8[1] = v341;
        v99->i8[0] = v344;
        v99->i8[1] = llroundf(v346);
        float v349 = (float)((float)(_S2 + _S7) + _S22) + _S17;
        float v350 = (float)((float)(v383 + (float)(v347 * *(float *)&v424)) + (float)(v348 * *(float *)&v423))
             + (float)(v349 * *(float *)&v422);
        float v351 = v42;
        if (v350 <= v42)
        {
          float v351 = (float)((float)(v383 + (float)(v347 * *(float *)&v424)) + (float)(v348 * *(float *)&v423))
               + (float)(v349 * *(float *)&v422);
          if (v350 < v427) {
            float v351 = v427;
          }
        }
        float v352 = (float)((float)(v383 + (float)(v347 * *((float *)&v424 + 1))) + (float)(v348 * *((float *)&v423 + 1)))
             + (float)(v349 * *((float *)&v422 + 1));
        *float v249 = llroundf(v351);
        float v353 = v42;
        _S11 = v426;
        float32x4_t v7 = v283;
        float16x8_t v53 = v394;
        float16x8_t v82 = v397;
        uint16x8_t v77 = v438;
        float16x8_t v69 = v439;
        if (v352 <= v42)
        {
          float v353 = v352;
          if (v352 < v427) {
            float v353 = v427;
          }
        }
        v250 += 2;
        float v73 = (uint16x8_t *)((char *)v73 + 4);
        float v74 = (uint16x8_t *)((char *)v74 + 4);
        v248 += 2;
        float v98 = (uint16x8_t *)((char *)v98 + 4);
        v249[1] = llroundf(v353);
        uint32x4_t v62 = (int8x8_t *)((char *)v62 + 2);
        float v99 = (int8x8_t *)((char *)v99 + 2);
        v249 += 2;
        float v34 = v399;
        float16x8_t v50 = v412;
        float16x8_t v80 = v413;
        float16x8_t v51 = v415;
        v11.i32[0] = v401;
        float16x8_t v70 = v403;
        float16x8_t v85 = (float16x8_t)v420;
        float16x8_t v86 = (float16x8_t)v421;
      }
      float v74 = (uint16x8_t *)((char *)result + (void)v94);
      float v73 = (uint16x8_t *)&v95[v30];
      uint32x4_t v62 = (int8x8_t *)&v96[v31];
      v61 += v32;
      v18 += 2;
    }
    while (v22 > v18);
    if (v367 && v366)
    {
      uint64_t v354 = 0;
      float v355 = v364;
      float v356 = (unsigned __int16 *)v362;
      do
      {
        if (v19)
        {
          size_t v357 = v19;
          float v358 = v355;
          float v359 = v356;
          do
          {
            unsigned int v360 = *v359++;
            *v358++ = llroundf((float)v360 * 0.0038911);
            --v357;
          }
          while (v357);
        }
        float v356 = (unsigned __int16 *)((char *)v356 + v363);
        v355 += v365;
        ++v354;
      }
      while (v354 != v22);
    }
    else
    {
      v361 = v364;
      if (v366)
      {
        do
        {
          if (v19) {
            uint64_t result = memset(v361, 255, v19);
          }
          v361 += v365;
          --v22;
        }
        while (v22);
      }
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_420vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    size_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 36);
    uint64_t v12 = *(void *)(result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = *((void *)result + 14);
    uint64_t v15 = (uint64_t *)*((void *)result + 16);
    uint64_t v16 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v17 = *((void *)result + 19);
    uint64_t v18 = (void *)*((void *)result + 7);
    uint64_t v19 = (uint64_t *)*((void *)result + 8);
    uint64_t v20 = (uint64_t *)*((void *)result + 17);
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v181 = v18[2];
    uint64_t v24 = v181 + v23 * v12 + 2 * v11;
    uint64_t v25 = *v20;
    uint64_t v26 = v20[1];
    uint64_t v27 = v20[2];
    uint64_t v180 = v15[2];
    uint64_t v28 = (unsigned char *)(v180 + v27 * v16 + v14);
    *(float *)&unsigned int v29 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    float v30 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v31 = (float)LODWORD(a5);
    float v32 = *(float *)&v29 * *(float *)v17;
    float v33 = *(float *)&v29 * *(float *)(v17 + 8);
    float v34 = *(float *)&v29 * *(float *)(v17 + 16);
    float v35 = *(float *)&v29 * *(float *)(v17 + 20);
    float v36 = *(float *)&v29 * *(float *)(v17 + 28);
    LOWORD(v29) = *(_WORD *)(v17 + 144);
    float v37 = (float)v29;
    LOWORD(v29) = *(_WORD *)(v17 + 146);
    float v38 = (float)v29;
    LOWORD(v29) = *(_WORD *)(v17 + 148);
    float v39 = (float)v29;
    LOWORD(v29) = *(_WORD *)(v17 + 150);
    float v40 = (float)v29;
    float v198 = v40;
    LOWORD(v40) = *(_WORD *)(v17 + 152);
    float v190 = *(float *)(v17 + 40);
    float v191 = *(float *)(v17 + 36);
    float v188 = *(float *)(v17 + 48) * 0.25;
    float v189 = *(float *)(v17 + 44);
    float v186 = *(float *)(v17 + 56) * 0.25;
    float v187 = *(float *)(v17 + 52) * 0.25;
    float v184 = *(float *)(v17 + 64) * 0.25;
    float v185 = *(float *)(v17 + 60) * 0.25;
    float v182 = *(float *)(v17 + 68) * 0.25;
    float v183 = *(float *)(v17 + 72);
    float v42 = *(float *)(v17 + 76);
    float v41 = *(float *)(v17 + 80);
    float v43 = *(float *)(v17 + 84);
    float v44 = *(float *)(v17 + 88);
    float v45 = *(float *)(v17 + 92);
    float v46 = *(float *)(v17 + 96);
    float v47 = *(float *)(v17 + 100);
    float v48 = *(float *)(v17 + 104);
    uint64_t v49 = v17 + 164;
    uint64_t v50 = v18[1];
    uint64_t result = (unsigned __int8 *)(*v18 + v21 * v12 + 2 * v11);
    uint64_t v51 = v50 + v22 * v12 + 2 * v11;
    uint64_t v52 = v17 + 16548;
    if (v50) {
      uint64_t v53 = v51;
    }
    else {
      uint64_t v53 = 0;
    }
    unsigned int v54 = *(unsigned __int8 *)(v17 + 124);
    char v55 = 16 - v54;
    _CF = v54 >= 0x11;
    uint64_t v57 = *v15;
    uint64_t v58 = v15[1];
    float16x8_t v59 = (unsigned char *)(v57 + v25 * v16 + v14);
    if (_CF) {
      char v55 = 0;
    }
    uint64_t v60 = v58 + v20[1] * (v16 / 2) + v14;
    char v61 = v55;
    uint32x4_t v62 = (unsigned __int16 *)(v53 + 2);
    float v196 = v33;
    float v197 = (float)LODWORD(a5);
    float v194 = v36;
    float v195 = v34;
    float v192 = (float)LODWORD(v40);
    float v193 = v38;
    do
    {
      uint64_t v63 = &v59[v25];
      uint64_t v64 = &result[v21];
      if (v10)
      {
        size_t v65 = 0;
        float32x4_t v66 = v62;
        float16x8_t v67 = &result[v21];
        int16x8_t v68 = &v59[v25];
        do
        {
          float v69 = (float)(*v66 >> v61) - v31;
          float v70 = v33 * v69;
          float v71 = v32 * (float)((float)(*(unsigned __int16 *)result >> v61) - v30);
          float v72 = (float)(v33 * v69) + v71;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = (float)(v33 * v69) + v71;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = (float)(*(v66 - 1) >> v61) - v31;
          float v75 = (float)(v35 * v69) + (float)(v74 * v34);
          float v76 = 8191.0;
          if ((float)(v71 + v75) <= 8191.0)
          {
            float v76 = v71 + v75;
            if ((float)(v71 + v75) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v36 * v74;
          float v78 = 8191.0;
          if ((float)(v77 + v71) <= 8191.0)
          {
            float v78 = v77 + v71;
            if ((float)(v77 + v71) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v32 * (float)((float)(*((unsigned __int16 *)result + 1) >> v61) - v30);
          float v80 = 8191.0;
          if ((float)(v70 + v79) <= 8191.0)
          {
            float v80 = v70 + v79;
            if ((float)(v70 + v79) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = 8191.0;
          if ((float)(v75 + v79) <= 8191.0)
          {
            float v81 = v75 + v79;
            if ((float)(v75 + v79) < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = 8191.0;
          if ((float)(v77 + v79) <= 8191.0)
          {
            float v82 = v77 + v79;
            if ((float)(v77 + v79) < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = (float)(*(unsigned __int16 *)((char *)v66 + v22) >> v61) - v31;
          float v84 = v33 * v83;
          float v85 = v32 * (float)((float)(*(unsigned __int16 *)v67 >> v61) - v30);
          float v86 = (float)(v33 * v83) + v85;
          float v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = (float)(*(unsigned __int16 *)((char *)v66 + v22 - 2) >> v61) - v31;
          float v89 = (float)(v35 * v83) + (float)(v88 * v34);
          float v90 = 8191.0;
          if ((float)(v85 + v89) <= 8191.0)
          {
            float v90 = v85 + v89;
            if ((float)(v85 + v89) < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v36 * v88;
          float v92 = v91 + v85;
          BOOL v93 = (float)(v91 + v85) <= 8191.0;
          float v94 = 8191.0;
          if (v93)
          {
            float v94 = v92;
            if (v92 < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v32 * (float)((float)(*((unsigned __int16 *)v67 + 1) >> v61) - v30);
          float v96 = v84 + v95;
          float v97 = 8191.0;
          if (v96 <= 8191.0)
          {
            float v97 = v96;
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          float v98 = v89 + v95;
          BOOL v93 = (float)(v89 + v95) <= 8191.0;
          float v99 = 8191.0;
          if (v93)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          float v100 = v32;
          float v101 = v30;
          float v102 = v91 + v95;
          float v103 = 8191.0;
          if (v102 <= 8191.0)
          {
            float v103 = v102;
            if (v102 < 0.0) {
              float v103 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H6 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H24 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          unsigned int v120 = llroundf(fminf(fmaxf(v90, 0.0), 8191.0));
          __asm { FCVT            S4, H19 }
          _H19 = *(_WORD *)(v49 + 2 * v120);
          __asm { FCVT            S19, H19 }
          _H5 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H7 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S17, H17
          }
          float v132 = (float)((float)(v42 * _S6) + (float)(_S1 * v183)) + (float)(_S24 * v41);
          float v133 = (float)((float)(v44 * _S6) + (float)(_S1 * v43)) + (float)(_S24 * v45);
          _S1 = (float)((float)(v47 * _S6) + (float)(_S1 * v46)) + (float)(_S24 * v48);
          float v135 = (float)((float)(v42 * _S26) + (float)(_S25 * v183)) + (float)(_S27 * v41);
          float v136 = (float)((float)(v44 * _S26) + (float)(_S25 * v43)) + (float)(_S27 * v45);
          float v137 = (float)((float)(v47 * _S26) + (float)(_S25 * v46)) + (float)(_S27 * v48);
          float v138 = (float)((float)(v42 * _S19) + (float)(_S4 * v183)) + (float)(_S5 * v41);
          float v139 = (float)((float)(v44 * _S19) + (float)(_S4 * v43)) + (float)(_S5 * v45);
          _S3 = (float)((float)(v47 * _S19) + (float)(_S4 * v46)) + (float)(_S5 * v48);
          float v141 = (float)((float)(v42 * _S7) + (float)(_S2 * v183)) + (float)(_S17 * v41);
          float v142 = (float)((float)(v44 * _S7) + (float)(_S2 * v43)) + (float)(_S17 * v45);
          _S2 = (float)((float)(v47 * _S7) + (float)(_S2 * v46)) + (float)(_S17 * v48);
          LOWORD(_S4) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S19, H4 }
          LOWORD(_S4) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S5, H1 }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          __asm { FCVT            S6, H1 }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          __asm
          {
            FCVT            S25, H1
            FCVT            S24, H7
          }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S7) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v139, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S26, H3 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S17) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          LOWORD(_S2) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S2, H2
          }
          float v156 = (float)((float)((float)(v190 * _S4) + (float)(v191 * _S19)) + (float)(v189 * _S5)) + v37;
          if (v156 < v37) {
            float v157 = v37;
          }
          else {
            float v157 = (float)((float)((float)(v190 * _S4) + (float)(v191 * _S19)) + (float)(v189 * _S5)) + v37;
          }
          BOOL v93 = v156 <= v39;
          float v158 = (float)((float)((float)(v190 * _S25) + (float)(v191 * _S6)) + (float)(v189 * _S24)) + v37;
          if (!v93) {
            float v157 = v39;
          }
          char v159 = llroundf(v157);
          if (v158 < v37) {
            float v160 = v37;
          }
          else {
            float v160 = (float)((float)((float)(v190 * _S25) + (float)(v191 * _S6)) + (float)(v189 * _S24)) + v37;
          }
          BOOL v93 = v158 <= v39;
          float v161 = (float)((float)((float)(v190 * _S7) + (float)(v191 * _S1)) + (float)(v189 * _S26)) + v37;
          if (!v93) {
            float v160 = v39;
          }
          char v162 = llroundf(v160);
          if (v161 < v37) {
            float v163 = v37;
          }
          else {
            float v163 = (float)((float)((float)(v190 * _S7) + (float)(v191 * _S1)) + (float)(v189 * _S26)) + v37;
          }
          BOOL v93 = v161 <= v39;
          float v164 = (float)((float)((float)(v190 * _S17) + (float)(v191 * _S3)) + (float)(v189 * _S2)) + v37;
          if (!v93) {
            float v163 = v39;
          }
          char v165 = llroundf(v163);
          if (v164 < v37) {
            float v166 = v37;
          }
          else {
            float v166 = (float)((float)((float)(v190 * _S17) + (float)(v191 * _S3)) + (float)(v189 * _S2)) + v37;
          }
          if (v164 <= v39) {
            float v167 = v166;
          }
          else {
            float v167 = v39;
          }
          float v168 = (float)((float)(_S19 + _S6) + _S1) + _S3;
          float v169 = (float)((float)(_S4 + _S25) + _S7) + _S17;
          *float16x8_t v59 = v159;
          v59[1] = v162;
          *int16x8_t v68 = v165;
          v68[1] = llroundf(v167);
          float v170 = (float)((float)(_S5 + _S24) + _S26) + _S2;
          float v171 = (float)((float)(v193 + (float)(v168 * v188)) + (float)(v169 * v187)) + (float)(v170 * v186);
          float v172 = v192;
          if (v171 <= v192)
          {
            float v172 = (float)((float)(v193 + (float)(v168 * v188)) + (float)(v169 * v187)) + (float)(v170 * v186);
            if (v171 < v198) {
              float v172 = v198;
            }
          }
          float v173 = (float)((float)(v193 + (float)(v168 * v185)) + (float)(v169 * v184)) + (float)(v170 * v182);
          *(unsigned char *)(v60 + v65) = llroundf(v172);
          float v174 = v192;
          float v30 = v101;
          float v33 = v196;
          float v31 = v197;
          float v32 = v100;
          if (v173 <= v192)
          {
            float v174 = v173;
            if (v173 < v198) {
              float v174 = v198;
            }
          }
          result += 4;
          v66 += 2;
          v67 += 4;
          v59 += 2;
          v68 += 2;
          *(unsigned char *)(v60 + v65 + 1) = llroundf(v174);
          v65 += 2;
          float v36 = v194;
          float v34 = v195;
        }
        while (v10 > v65);
      }
      uint64_t result = &v64[v21];
      float16x8_t v59 = &v63[v25];
      v60 += v26;
      v9 += 2;
      v62 += v22;
    }
    while (v13 > v9);
    if (v181 && v180)
    {
      uint64_t v175 = 0;
      do
      {
        if (v10)
        {
          size_t v176 = v10;
          uint16x8_t v177 = v28;
          float16x8_t v178 = (unsigned __int16 *)v24;
          do
          {
            unsigned int v179 = *v178++;
            *v177++ = llroundf((float)v179 * 0.0038911);
            --v176;
          }
          while (v176);
        }
        v24 += v23;
        v28 += v27;
        ++v175;
      }
      while (v175 != v13);
    }
    else if (v180)
    {
      do
      {
        if (v10) {
          uint64_t result = (unsigned __int8 *)memset(v28, 255, v10);
        }
        v28 += v27;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_420vf_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_420vf_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, int16x4_t a3)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = 2 * *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    unint64_t v12 = 0;
    size_t v13 = *(void *)(result + 20);
    uint64_t v14 = *(void *)(result + 36);
    uint64_t v15 = *(void *)(result + 44) + 2 * v10;
    unint64_t v16 = 2 * v11 - 2 * v10;
    uint64_t v17 = *((void *)result + 14);
    uint64_t v18 = (uint64_t *)*((void *)result + 16);
    uint64_t v19 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v9);
    uint64_t v20 = (float32x2_t *)*((void *)result + 19);
    uint64_t v21 = (void *)*((void *)result + 7);
    size_t v22 = (uint64_t *)*((void *)result + 8);
    uint64_t v23 = (uint64_t *)*((void *)result + 17);
    uint64_t v24 = *v22;
    uint64_t v25 = v22[1];
    uint64_t v172 = v22[2];
    uint64_t v174 = v21[2];
    uint64_t v26 = v174 + v172 * v15 + 2 * v14;
    uint64_t v27 = *v23;
    uint64_t v28 = v23[1];
    uint64_t v29 = v23[2];
    uint64_t v173 = v18[2];
    a3.i32[0] = v20[17].i32[0];
    float v30 = (float)a3.u32[0];
    unsigned int v31 = v20[17].u16[2];
    unsigned int v32 = v20[17].u16[3];
    v33.i32[0] = v20[3].i32[1];
    unsigned int v34 = v20[18].u16[0];
    unsigned int v35 = v20[18].u16[1];
    unsigned int v36 = v20[18].u16[2];
    unsigned int v37 = v20[18].u16[3];
    unsigned int v38 = v20[19].u16[0];
    _S19 = v20[4].f32[1];
    _S1 = v20[5].f32[0];
    _S2 = v20[5].f32[1];
    v42.i32[0] = v20[6].i32[0];
    v44.i32[0] = v20[6].i32[1];
    v43.i32[0] = v20[7].i32[0];
    float v45 = (float)v31;
    *(short float *)a3.i16 = (short float)v31;
    float v46 = (float)v32;
    float v47 = (unsigned char *)(v173 + v29 * v19 + v17);
    float v48 = v30 / (float)v20[16].u32[0];
    float v49 = (float)v34;
    float v196 = (float)v35;
    float v50 = (float)v36;
    _S16 = v48 * v20->f32[0];
    float v195 = (float)v37;
    float v52 = (float)v38;
    __asm { FCVT            H8, S16 }
    float32x4_t v59 = (float32x4_t)vdupq_lane_s16(a3, 0);
    float16x8_t v177 = (float16x8_t)v59;
    short float v58 = -(short float)v32;
    v33.i32[1] = v20[1].i32[0];
    *(float32x2_t *)v59.f32 = vmul_n_f32(v33, v48);
    float16x8_t v60 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v59), 0);
    *(float32x2_t *)v4.f32 = vmul_n_f32(v20[2], v48);
    float16x8_t v61 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v175 = vmulq_n_f16(v60, v58);
    float16x8_t v176 = v60;
    float16x8_t v62 = vmulq_n_f16(v61, v58);
    __asm { FCVT            H9, S19 }
    v42.i32[1] = v20[7].i32[1];
    __asm { FMOV            V17.2S, #0.25 }
    *(float32x2_t *)v5.f32 = vmul_f32(v42, _D17);
    int32x4_t v65 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    v44.i32[1] = v20[8].i32[0];
    *(float32x2_t *)v6.f32 = vmul_f32(v44, _D17);
    __asm { FCVT            H13, S1 }
    float16x8_t v67 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v6), 0);
    v43.i32[1] = v20[8].i32[1];
    *(float32x2_t *)v7.f32 = vmul_f32(v43, _D17);
    int16x4_t v68 = (int16x4_t)vcvt_f16_f32(v7);
    int32x4_t v69 = vdupq_lane_s32((int32x2_t)v68, 0);
    *(short float *)v68.i16 = (short float)v34;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(v68, 0);
    *(short float *)v68.i16 = (short float)v35;
    int16x8_t v71 = vdupq_lane_s16(v68, 0);
    *(short float *)v68.i16 = (short float)v36;
    int16x8_t v72 = vdupq_lane_s16(v68, 0);
    *(short float *)v68.i16 = (short float)v37;
    int16x8_t v73 = vdupq_lane_s16(v68, 0);
    *(short float *)v68.i16 = (short float)v38;
    int16x8_t v74 = vdupq_lane_s16(v68, 0);
    unsigned int v75 = v20[15].u8[4];
    if (v75 >= 0x11) {
      unsigned __int8 v76 = 0;
    }
    else {
      unsigned __int8 v76 = 16 - v75;
    }
    if (v19 >= 0) {
      uint64_t v77 = v19;
    }
    else {
      uint64_t v77 = v19 + 1;
    }
    uint64_t v78 = *v18;
    float v79 = (unsigned char *)(v18[1] + v28 * (v77 >> 1) + v17);
    uint64_t result = (unsigned __int8 *)(v78 + v27 * v19 + v17);
    float v82 = v21;
    uint64_t v80 = *v21;
    uint64_t v81 = v82[1];
    if (v81) {
      float v83 = (uint16x8_t *)(v81 + v25 * v15 + 2 * v14);
    }
    else {
      float v83 = 0;
    }
    float v84 = (uint16x8_t *)(v80 + v24 * v15 + 2 * v14);
    unsigned __int8 v85 = v76;
    uint16x8_t v86 = (uint16x8_t)vdupq_n_s16(-v76);
    __asm { FCVT            H14, S2 }
    float v194 = v59.f32[0];
    uint64_t v87 = v4.i64[0];
    float v193 = v5.f32[0];
    float v178 = v7.f32[0];
    float v179 = v6.f32[0];
    float v188 = v7.f32[1];
    short float v186 = _H9;
    float16x8_t v187 = v61;
    float16x8_t v192 = (float16x8_t)v65;
    short float v184 = _H13;
    float16x8_t v185 = v62;
    float16x8_t v183 = v67;
    float16x8_t v190 = (float16x8_t)v71;
    float16x8_t v191 = (float16x8_t)v69;
    int16x8_t v181 = v73;
    int16x8_t v182 = v72;
    float16x8_t v189 = (float16x8_t)v74;
    uint64_t v180 = _D14;
    do
    {
      float v88 = &v84->i8[v24];
      float v89 = &v83->i8[v25];
      float v90 = &result[v27];
      if ((int)v13 < 8)
      {
        size_t v121 = 0;
        unsigned int v120 = v79;
        BOOL v93 = (int8x8_t *)&result[v27];
        float16x8_t v119 = (unsigned __int16 *)((char *)v83->u16 + v25);
        float v92 = (uint16x8_t *)((char *)v84 + v24);
      }
      else
      {
        uint64_t v91 = 0;
        float v92 = (uint16x8_t *)((char *)v84 + v24);
        BOOL v93 = (int8x8_t *)&result[v27];
        float16x8_t v94 = (float16x8_t)v72;
        float16x8_t v95 = (float16x8_t)v73;
        uint64_t v96 = _D14;
        do
        {
          float16x8_t v97 = vcvtq_f16_u16(vshlq_u16(*v83, v86));
          int8x16_t v98 = (int8x16_t)vmlaq_f16(v175, v176, v97);
          int16x8_t v99 = (int16x8_t)vmlaq_f16(v62, v61, v97);
          v97.i64[0] = vextq_s8(v98, v98, 8uLL).u64[0];
          *(int16x4_t *)v100.i8 = vuzp1_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v97.i8);
          *(int16x4_t *)v97.i8 = vuzp2_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v97.i8);
          v97.i64[1] = v96;
          v98.i64[0] = vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u64[0];
          v100.i64[1] = v96;
          *(float16x4_t *)v99.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v98.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v98.i8));
          uint16x8_t v101 = *v84++;
          v99.i64[1] = v96;
          float16x8_t v102 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v101, v86)), v177);
          float16x8_t v103 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)((char *)v83 + v25), v86));
          int16x8_t v104 = (int16x8_t)vmlaq_f16(v175, v176, v103);
          float16x8_t v105 = (float16x8_t)vzip1q_s16(v100, v100);
          int8x16_t v106 = (int8x16_t)vmlaq_f16(v62, v61, v103);
          v100.i64[0] = vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u64[0];
          *(int16x4_t *)v103.i8 = vuzp2_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v100.i8);
          v103.i64[1] = v96;
          *(int16x4_t *)v104.i8 = vuzp1_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v100.i8);
          float16x8_t v107 = (float16x8_t)vzip1q_s16((int16x8_t)v103, (int16x8_t)v103);
          v104.i64[1] = v96;
          v103.i64[0] = vextq_s8(v106, v106, 8uLL).u64[0];
          float16x8_t v108 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v97, (int16x8_t)v97), v102, _H8);
          *(float16x4_t *)v109.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v103.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v103.i8));
          v109.i64[1] = v96;
          float16x8_t v110 = vmlaq_n_f16(v105, v102, _H8);
          uint16x8_t v111 = *v92++;
          float16x8_t v112 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v99, v99), v102, _H8);
          float16x8_t v113 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v111, v86)), v177);
          float16x8_t v114 = vmlaq_n_f16(v107, v113, _H8);
          float16x8_t v115 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v104, v104), v113, _H8);
          float16x8_t v116 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v109, v109), v113, _H8);
          float16x8_t v117 = vmlaq_n_f16(vmlaq_n_f16(v70, v108, _H9), v112, _H13);
          ++v83;
          int16x8_t v118 = (int16x8_t)vaddq_f16((float16x8_t)vuzp2q_s16((int16x8_t)v114, (int16x8_t)v116), vaddq_f16(vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v108, (int16x8_t)v112), (float16x8_t)vuzp2q_s16((int16x8_t)v108, (int16x8_t)v112)), (float16x8_t)vuzp1q_s16((int16x8_t)v114, (int16x8_t)v116)));
          *(int8x8_t *)uint64_t result = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v117, v110, *(short float *)&v96), v70), v94)));
          result += 8;
          *v93++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v70, v114, _H9), v116, _H13), v115, *(short float *)&v96), v70), v94)));
          *(int8x8_t *)&v79[v91] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v190, v192, (float16x8_t)vzip1q_s16(v118, v118)), v67, (float16x8_t)vzip2q_s16(v118, v118)), v191, vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v115, (int16x8_t)v115), vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v110,
                                                                                     (int16x8_t)v110),
                                                                      (float16x8_t)vtrn2q_s16((int16x8_t)v110, (int16x8_t)v110)), (float16x8_t)vtrn1q_s16((int16x8_t)v115, (int16x8_t)v115)))), v95), v189)));
          v91 += 8;
        }
        while ((int)v91 < (int)v13 - 7);
        float16x8_t v119 = (unsigned __int16 *)((char *)v83->u16 + v25);
        unsigned int v120 = &v79[v91];
        size_t v121 = v13 & 0xFFFFFFF8;
      }
      while (v13 > v121)
      {
        float v122 = (float)(v83->u16[0] >> v85) - v46;
        float v123 = (float)(v83->u16[1] >> v85) - v46;
        float v124 = v59.f32[1] * v123;
        float v125 = (float)(*((float *)&v87 + 1) * v123) + (float)(v122 * *(float *)&v87);
        float v126 = v194 * v122;
        float v127 = _S16 * (float)((float)(v84->u16[0] >> v85) - v45);
        float v128 = _S16 * (float)((float)(v84->u16[1] >> v85) - v45);
        float v129 = v124 + v127;
        float v130 = v127 + v125;
        float v131 = v126 + v127;
        float v132 = v124 + v128;
        float v133 = v125 + v128;
        float v134 = v126 + v128;
        float v135 = (float)(*v119 >> v85) - v46;
        float v136 = (float)(v119[1] >> v85) - v46;
        float v137 = v59.f32[1] * v136;
        float v138 = (float)(*((float *)&v87 + 1) * v136) + (float)(v135 * *(float *)&v87);
        float v139 = v194 * v135;
        float v140 = _S16 * (float)((float)(v92->u16[0] >> v85) - v45);
        float v141 = _S16 * (float)((float)(v92->u16[1] >> v85) - v45);
        float v142 = v137 + v140;
        float v143 = v140 + v138;
        float v144 = v139 + v140;
        float v145 = v137 + v141;
        float v146 = v138 + v141;
        float v147 = v139 + v141;
        float v148 = (float)((float)((float)(_S1 * v130) + (float)(_S19 * v129)) + (float)(_S2 * v131)) + v49;
        if (v148 < v49) {
          float v149 = v49;
        }
        else {
          float v149 = (float)((float)((float)(_S1 * v130) + (float)(_S19 * v129)) + (float)(_S2 * v131)) + v49;
        }
        BOOL v150 = v148 <= v50;
        float v151 = (float)((float)((float)(_S1 * v133) + (float)(_S19 * v132)) + (float)(_S2 * v134)) + v49;
        if (!v150) {
          float v149 = v50;
        }
        unsigned __int8 v152 = llroundf(v149);
        if (v151 < v49) {
          float v153 = v49;
        }
        else {
          float v153 = (float)((float)((float)(_S1 * v133) + (float)(_S19 * v132)) + (float)(_S2 * v134)) + v49;
        }
        BOOL v150 = v151 <= v50;
        float v154 = (float)((float)((float)(_S1 * v143) + (float)(_S19 * v142)) + (float)(_S2 * v144)) + v49;
        if (!v150) {
          float v153 = v50;
        }
        unsigned __int8 v155 = llroundf(v153);
        if (v154 < v49) {
          float v156 = v49;
        }
        else {
          float v156 = (float)((float)((float)(_S1 * v143) + (float)(_S19 * v142)) + (float)(_S2 * v144)) + v49;
        }
        BOOL v150 = v154 <= v50;
        float v157 = (float)((float)((float)(_S1 * v146) + (float)(_S19 * v145)) + (float)(_S2 * v147)) + v49;
        if (!v150) {
          float v156 = v50;
        }
        __int8 v158 = llroundf(v156);
        if (v157 < v49) {
          float v159 = v49;
        }
        else {
          float v159 = (float)((float)((float)(_S1 * v146) + (float)(_S19 * v145)) + (float)(_S2 * v147)) + v49;
        }
        if (v157 > v50) {
          float v159 = v50;
        }
        float v160 = (float)((float)(v129 + v132) + v142) + v145;
        float v161 = (float)((float)(v130 + v133) + v143) + v146;
        *uint64_t result = v152;
        result[1] = v155;
        v93->i8[0] = v158;
        v93->i8[1] = llroundf(v159);
        float v162 = (float)((float)(v131 + v134) + v144) + v147;
        float v163 = (float)((float)(v196 + (float)(v160 * v193)) + (float)(v161 * v179)) + (float)(v162 * v178);
        float v164 = v52;
        if (v163 <= v52)
        {
          float v164 = (float)((float)(v196 + (float)(v160 * v193)) + (float)(v161 * v179)) + (float)(v162 * v178);
          if (v163 < v195) {
            float v164 = v195;
          }
        }
        float v165 = (float)((float)(v196 + (float)(v160 * v5.f32[1])) + (float)(v161 * v6.f32[1])) + (float)(v162 * v188);
        *unsigned int v120 = llroundf(v164);
        float v166 = v52;
        if (v165 <= v52)
        {
          float v166 = v165;
          if (v165 < v195) {
            float v166 = v195;
          }
        }
        v121 += 2;
        float v83 = (uint16x8_t *)((char *)v83 + 4);
        float v84 = (uint16x8_t *)((char *)v84 + 4);
        v119 += 2;
        float v92 = (uint16x8_t *)((char *)v92 + 4);
        v120[1] = llroundf(v166);
        result += 2;
        BOOL v93 = (int8x8_t *)((char *)v93 + 2);
        v120 += 2;
      }
      float v84 = (uint16x8_t *)&v88[v24];
      float v83 = (uint16x8_t *)&v89[v25];
      uint64_t result = &v90[v27];
      v79 += v28;
      v12 += 2;
      _H9 = v186;
      float16x8_t v61 = v187;
      _H13 = v184;
      float16x8_t v62 = v185;
      int16x8_t v72 = v182;
      float16x8_t v67 = v183;
      _D14 = v180;
      int16x8_t v73 = v181;
    }
    while (v16 > v12);
    if (v174 && v173)
    {
      uint64_t v167 = 0;
      do
      {
        if (v13)
        {
          size_t v168 = v13;
          float v169 = v47;
          float v170 = (unsigned __int16 *)v26;
          do
          {
            unsigned int v171 = *v170++;
            *v169++ = llroundf((float)v171 * 0.0038911);
            --v168;
          }
          while (v168);
        }
        v26 += v172;
        v47 += v29;
        ++v167;
      }
      while (v167 != v16);
    }
    else if (v173)
    {
      do
      {
        if (v13) {
          uint64_t result = (unsigned __int8 *)memset(v47, 255, v13);
        }
        v47 += v29;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_420vf_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = 2 * *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    size_t v9 = *(void *)(result + 20);
    uint64_t v10 = *(void *)(result + 36);
    uint64_t v11 = *(void *)(result + 44) + 2 * v6;
    unint64_t v12 = 2 * v7 - 2 * v6;
    uint64_t v13 = *((void *)result + 14);
    uint64_t v14 = (uint64_t *)*((void *)result + 16);
    uint64_t v15 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v5);
    uint64_t v16 = *((void *)result + 19);
    uint64_t v18 = (void *)*((void *)result + 7);
    uint64_t v17 = (uint64_t *)*((void *)result + 8);
    uint64_t v19 = (uint64_t *)*((void *)result + 17);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    uint64_t v23 = v18[1];
    uint64_t v117 = v18[2];
    uint64_t v24 = v117 + v22 * v11 + 2 * v10;
    uint64_t v25 = *v19;
    uint64_t v26 = v19[1];
    uint64_t v27 = v19[2];
    uint64_t v28 = v14[2];
    uint64_t v29 = (char *)(*v18 + v20 * v11 + 2 * v10);
    uint64_t v30 = (unsigned char *)(v28 + v27 * v15 + v13);
    *(float *)&unsigned int v31 = (float)*(unsigned int *)(v16 + 128);
    *(float *)&unsigned int v32 = (float)*(unsigned int *)(v16 + 136);
    float v33 = *(float *)&v32 / *(float *)&v31;
    LOWORD(v31) = *(_WORD *)(v16 + 140);
    float v34 = (float)v31;
    LOWORD(v32) = *(_WORD *)(v16 + 142);
    float v35 = (float)v32;
    float v36 = v33 * *(float *)v16;
    float v37 = v33 * *(float *)(v16 + 8);
    float v38 = v33 * *(float *)(v16 + 16);
    float v39 = v33 * *(float *)(v16 + 20);
    float v40 = *(float *)(v16 + 28);
    float v41 = v33 * v40;
    LOWORD(v40) = *(_WORD *)(v16 + 144);
    float v42 = (float)LODWORD(v40);
    LOWORD(v2) = *(_WORD *)(v16 + 146);
    float v43 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v16 + 148);
    float v44 = (float)v3;
    LOWORD(v3) = *(_WORD *)(v16 + 150);
    float v45 = (float)v3;
    LOWORD(v3) = *(_WORD *)(v16 + 152);
    float v46 = (float)v3;
    float v47 = *(float *)(v16 + 36);
    float v48 = *(float *)(v16 + 40);
    float v49 = *(float *)(v16 + 44);
    float v120 = *(float *)(v16 + 52) * 0.25;
    float v121 = *(float *)(v16 + 48) * 0.25;
    float v118 = *(float *)(v16 + 60) * 0.25;
    float v119 = *(float *)(v16 + 56) * 0.25;
    float v50 = *(float *)(v16 + 64) * 0.25;
    float v51 = *(float *)(v16 + 68);
    if (v23) {
      uint64_t v52 = v23 + v21 * v11 + 2 * v10;
    }
    else {
      uint64_t v52 = 0;
    }
    unsigned int v53 = *(unsigned __int8 *)(v16 + 124);
    char v54 = 16 - v53;
    BOOL v55 = v53 >= 0x11;
    uint64_t v56 = *v14;
    uint64_t v57 = v14[1];
    uint64_t result = (unsigned __int8 *)(v56 + v25 * v15 + v13);
    if (v55) {
      char v54 = 0;
    }
    float v58 = v51 * 0.25;
    uint64_t v59 = v57 + v26 * (v15 / 2) + v13;
    float16x8_t v60 = (unsigned __int16 *)(v52 + 2);
    do
    {
      float16x8_t v61 = &result[v25];
      float16x8_t v62 = &v29[v20];
      if (v9)
      {
        size_t v63 = 0;
        uint64_t v64 = v60;
        int32x4_t v65 = &v29[v20];
        float32x4_t v66 = &result[v25];
        do
        {
          float v67 = (float)(*(v64 - 1) >> v54) - v35;
          float v68 = (float)(*v64 >> v54) - v35;
          float v69 = v37 * v68;
          float v70 = (float)(v39 * v68) + (float)(v67 * v38);
          float v71 = v41 * v67;
          float v72 = v36 * (float)((float)(*(unsigned __int16 *)v29 >> v54) - v34);
          float v73 = v69 + v72;
          float v74 = v72 + v70;
          float v75 = v71 + v72;
          float v76 = (float)((float)((float)(v48 * (float)(v72 + v70)) + (float)(v47 * (float)(v69 + v72)))
                      + (float)(v49 * (float)(v71 + v72)))
              + v42;
          float v77 = v44;
          if (v76 <= v44)
          {
            float v77 = v76;
            if (v76 < v42) {
              float v77 = v42;
            }
          }
          float v78 = v36 * (float)((float)(*((unsigned __int16 *)v29 + 1) >> v54) - v34);
          float v79 = v69 + v78;
          float v80 = v70 + v78;
          float v81 = v71 + v78;
          unsigned int v82 = *(unsigned __int16 *)((char *)v64 + v21 - 2);
          unsigned int v83 = *(unsigned __int16 *)((char *)v64 + v21);
          unsigned int v84 = *(unsigned __int16 *)v65;
          unsigned int v85 = *((unsigned __int16 *)v65 + 1);
          float v86 = (float)((float)((float)(v48 * v80) + (float)(v47 * v79)) + (float)(v49 * (float)(v71 + v78))) + v42;
          *uint64_t result = llroundf(v77);
          float v87 = v44;
          if (v86 <= v44)
          {
            float v87 = v86;
            if (v86 < v42) {
              float v87 = v42;
            }
          }
          float v88 = (float)(int)(v82 >> v54) - v35;
          float v89 = (float)(int)(v83 >> v54) - v35;
          float v90 = v37 * v89;
          float v91 = (float)(v39 * v89) + (float)(v88 * v38);
          float v92 = v41 * v88;
          float v93 = v36 * (float)((float)(int)(v84 >> v54) - v34);
          float v94 = v90 + v93;
          float v95 = v93 + v91;
          float v96 = v92 + v93;
          float v97 = (float)((float)((float)(v48 * (float)(v93 + v91)) + (float)(v47 * (float)(v90 + v93)))
                      + (float)(v49 * (float)(v92 + v93)))
              + v42;
          result[1] = llroundf(v87);
          float v98 = v44;
          if (v97 <= v44)
          {
            float v98 = v97;
            if (v97 < v42) {
              float v98 = v42;
            }
          }
          float v99 = v36 * (float)((float)(int)(v85 >> v54) - v34);
          float v100 = v90 + v99;
          float v101 = v91 + v99;
          float v102 = v92 + v99;
          float v103 = (float)((float)((float)(v48 * (float)(v91 + v99)) + (float)(v47 * v100)) + (float)(v49 * v102)) + v42;
          *float32x4_t v66 = llroundf(v98);
          float v104 = v44;
          if (v103 <= v44)
          {
            float v104 = v103;
            if (v103 < v42) {
              float v104 = v42;
            }
          }
          v66[1] = llroundf(v104);
          float v105 = (float)((float)(v73 + v79) + v94) + v100;
          float v106 = (float)((float)(v74 + v80) + v95) + v101;
          float v107 = (float)((float)(v75 + v81) + v96) + v102;
          float v108 = (float)((float)(v43 + (float)(v105 * v121)) + (float)(v106 * v120)) + (float)(v107 * v119);
          float v109 = v46;
          if (v108 <= v46)
          {
            float v109 = (float)((float)(v43 + (float)(v105 * v121)) + (float)(v106 * v120)) + (float)(v107 * v119);
            if (v108 < v45) {
              float v109 = v45;
            }
          }
          float v110 = (float)((float)(v43 + (float)(v105 * v118)) + (float)(v106 * v50)) + (float)(v107 * v58);
          *(unsigned char *)(v59 + v63) = llroundf(v109);
          float v111 = v46;
          if (v110 <= v46)
          {
            float v111 = v110;
            if (v110 < v45) {
              float v111 = v45;
            }
          }
          v29 += 4;
          v65 += 4;
          v64 += 2;
          result += 2;
          v66 += 2;
          *(unsigned char *)(v59 + v63 + 1) = llroundf(v111);
          v63 += 2;
        }
        while (v9 > v63);
      }
      uint64_t v29 = &v62[v20];
      uint64_t result = &v61[v25];
      v59 += v26;
      v8 += 2;
      v60 += v21;
    }
    while (v12 > v8);
    if (v117 && v28)
    {
      uint64_t v112 = 0;
      do
      {
        if (v9)
        {
          size_t v113 = v9;
          float16x8_t v114 = v30;
          float16x8_t v115 = (unsigned __int16 *)v24;
          do
          {
            unsigned int v116 = *v115++;
            *v114++ = llroundf((float)v116 * 0.0038911);
            --v113;
          }
          while (v113);
        }
        v24 += v22;
        v30 += v27;
        ++v112;
      }
      while (v112 != v12);
    }
    else if (v28)
    {
      do
      {
        if (v9) {
          uint64_t result = (unsigned __int8 *)memset(v30, 255, v9);
        }
        v30 += v27;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4, double a5, float32x4_t a6, double a7, int16x4_t a8, int16x4_t a9)
{
  uint64_t v15 = *(void *)((char *)result + 28);
  unint64_t v16 = 2 * *(unsigned __int8 *)result;
  unint64_t v17 = v15 * a2 / v16;
  unint64_t v18 = (v15 + v15 * a2) / v16;
  if (2 * v18 != 2 * v17)
  {
    unint64_t v19 = 0;
    unint64_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    uint64_t v22 = *(void *)((char *)result + 44) + 2 * v17;
    unint64_t v23 = 2 * v18 - 2 * v17;
    uint64_t v24 = result[14];
    uint64_t v25 = (uint64_t *)result[16];
    uint64_t v26 = result[15] + 2 * (result[13] * a2 / v16);
    uint64_t v27 = (float32x2_t *)result[19];
    uint64_t v28 = (void *)result[7];
    uint64_t v29 = (uint64_t *)result[8];
    uint64_t v30 = (uint64_t *)result[17];
    uint64_t v31 = *v29;
    uint64_t v32 = v29[1];
    uint64_t v358 = v29[2];
    uint64_t v361 = v28[2];
    uint64_t v33 = (char *)(v361 + v358 * v22 + 2 * v21);
    uint64_t v34 = *v30;
    uint64_t v35 = v30[1];
    uint64_t v359 = v30[2];
    uint64_t v360 = v25[2];
    unsigned int v36 = v27[17].u16[2];
    unsigned int v37 = v27[17].u16[3];
    a9.i32[0] = v27->i32[0];
    unsigned int v38 = v27[18].u16[0];
    LODWORD(v30) = v27[18].u16[1];
    unsigned int v39 = v27[18].u16[2];
    float v40 = (float)v36;
    *(short float *)v10.i16 = (short float)v36;
    unsigned int v41 = v27[18].u16[3];
    float v42 = (float)v37;
    *(short float *)v12.i16 = (short float)v37;
    unsigned int v43 = v27[19].u16[0];
    _S10 = v27[4].i32[1];
    _S12 = v27[5].i32[0];
    float v420 = v27[5].f32[1];
    float v49 = (char *)&v27[2068] + 4;
    float v50 = (char *)(v360 + v359 * v26 + 2 * v24);
    float v51 = 8191.0 / (float)v27[16].u32[0];
    _S9 = v51 * v27->f32[0];
    float v369 = (float)v38;
    float v395 = (float)v30;
    float v408 = (float)v39;
    *(float *)&a3 = (float)v41;
    float v426 = (float)v41;
    float v53 = (float)v43;
    *(short float *)&a3 = (short float)v38;
    char v54 = (char *)&v27[20] + 4;
    *(short float *)a8.i16 = (short float)v30;
    *(short float *)a9.i16 = (short float)v39;
    *(short float *)v11.i16 = (short float)v41;
    *(short float *)v13.i16 = (short float)v43;
    unsigned int v55 = v27[16].u8[4];
    if (v55 >= 0x11) {
      unsigned __int8 v56 = 0;
    }
    else {
      unsigned __int8 v56 = 16 - v55;
    }
    unsigned int v57 = v27[15].u8[4];
    if (v57 >= 0x11) {
      unsigned __int8 v58 = 0;
    }
    else {
      unsigned __int8 v58 = 16 - v57;
    }
    if (v26 >= 0) {
      uint64_t v59 = v26;
    }
    else {
      uint64_t v59 = v26 + 1;
    }
    uint64_t v61 = *v25;
    uint64_t v60 = v25[1];
    uint64_t v366 = v35;
    float16x8_t v62 = (char *)&v27[4116] + 4;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(v10, 0);
    short float v64 = -*(short float *)v12.i16;
    v46.i32[1] = v27[1].i32[0];
    v46.i32[0] = v27[3].i32[1];
    *(float32x2_t *)v12.f32 = vmul_n_f32(v46, v51);
    float16x8_t v65 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v12), 0);
    *(float32x2_t *)v14.f32 = vmul_n_f32(v27[2], v51);
    _Q1 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v14), 0);
    float32x4_t v67 = (float32x4_t)vmulq_n_f16(v65, v64);
    float16x8_t v386 = (float16x8_t)v67;
    float16x8_t v392 = _Q1;
    float16x8_t v68 = vmulq_n_f16(_Q1, v64);
    __asm { FMOV            V1.2S, #0.25 }
    v47.i32[1] = v27[7].i32[1];
    v47.i32[0] = v27[6].i32[0];
    *(float32x2_t *)v67.f32 = vmul_f32(v47, *(float32x2_t *)_Q1.i8);
    uint64_t v419 = v67.i64[0];
    int32x4_t v73 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v67), 0);
    a6.i32[1] = v27[8].i32[0];
    a6.i32[0] = v27[6].i32[1];
    *(float32x2_t *)a6.f32 = vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)_Q1.i8);
    unint64_t v418 = a6.i64[0];
    v48.i32[1] = v27[8].i32[1];
    v48.i32[0] = v27[7].i32[0];
    *(float32x2_t *)_Q1.i8 = vmul_f32(v48, *(float32x2_t *)_Q1.i8);
    uint64_t v417 = _Q1.i64[0];
    float16x8_t v406 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)_Q1), 0);
    float16x8_t v74 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    int32x4_t v415 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a6), 0);
    int16x8_t v416 = vdupq_lane_s16(a8, 0);
    int16x8_t v75 = vdupq_lane_s16(a9, 0);
    int16x8_t v76 = vdupq_lane_s16(v11, 0);
    float16x8_t v403 = (float16x8_t)vdupq_lane_s16(v13, 0);
    uint64_t result = (void *)(v60 + v35 * (v59 >> 1) + 2 * v24);
    float v77 = (uint16x8_t *)(v61 + v34 * v26 + 2 * v24);
    float v80 = v28;
    uint64_t v79 = *v28;
    uint64_t v78 = v80[1];
    if (v78) {
      float v81 = (char *)(v78 + v32 * v22 + 2 * v21);
    }
    else {
      float v81 = 0;
    }
    uint16x8_t v82 = (uint16x8_t)vdupq_n_s16(-v58);
    unsigned int v83 = (uint16x8_t *)(v79 + v31 * v22 + 2 * v21);
    unsigned __int8 v84 = v58;
    unsigned __int8 v85 = v56;
    float v86 = &v81[v32];
    uint64_t v365 = 2 * v32;
    __asm { FCVT            H8, S9 }
    short float v387 = *(short float *)&_Q8;
    float v414 = v27[4].f32[1];
    __asm { FCVT            H8, S10 }
    float16x8_t v87 = (float16x8_t)v75;
    float v413 = v27[5].f32[0];
    __asm { FCVT            H5, S12 }
    short float v385 = _H5;
    _S3 = v27[5].i32[1];
    __asm { FCVT            H5, S3 }
    float v391 = v27[13].f32[1];
    __asm { FCVT            H0, S0 }
    float v390 = v27[14].f32[0];
    __asm { FCVT            H1, S1 }
    float v389 = v27[14].f32[1];
    __asm { FCVT            H2, S2 }
    float v388 = v27[15].f32[0];
    __asm { FCVT            H4, S4 }
    float v402 = v27[9].f32[0];
    __asm { FCVT            H3, S14 }
    short float v379 = *(short float *)&_S3;
    float v401 = v27[9].f32[1];
    __asm { FCVT            H3, S13 }
    float v400 = v27[10].f32[0];
    __asm { FCVT            H14, S21 }
    short float v377 = _H14;
    float v399 = v27[10].f32[1];
    __asm { FCVT            H14, S26 }
    float v398 = v27[11].f32[0];
    __asm { FCVT            H13, S23 }
    float v397 = v27[11].f32[1];
    __asm { FCVT            H12, S24 }
    short float v374 = _H12;
    short float v375 = _H13;
    float v396 = v27[12].f32[0];
    __asm { FCVT            H12, S7 }
    short float v373 = _H12;
    int32x4_t v100 = v73;
    float v394 = v27[12].f32[1];
    __asm { FCVT            H13, S25 }
    short float v372 = _H13;
    float v393 = v27[13].f32[0];
    __asm { FCVT            H13, S16 }
    float16x8_t v103 = (float16x8_t)v415;
    uint16x8_t v370 = (uint16x8_t)vdupq_n_s16(v56);
    short float v371 = _H13;
    float16x8_t v104 = (float16x8_t)v416;
    uint64_t v367 = v34;
    float16x8_t v404 = (float16x8_t)v76;
    uint16x8_t v427 = v82;
    short float v382 = _H1;
    short float v383 = _H0;
    short float v380 = _H4;
    short float v381 = _H2;
    short float v378 = *(short float *)&_S3;
    uint64_t v363 = v32;
    uint64_t v364 = v31;
    float16x8_t v412 = v63;
    float v411 = v53;
    __int32 v410 = v14.i32[0];
    float v425 = v42;
    float16x8_t v409 = v65;
    float16x8_t v407 = v68;
    float16x8_t v405 = v74;
    __int32 v424 = v12.i32[0];
    float v423 = v40;
    short float v384 = _H5;
    short float v376 = _H14;
    long long v422 = _Q8;
    float v362 = _S9;
    float16x8_t v421 = (float16x8_t)v73;
    do
    {
      float v105 = &v83->i8[v31];
      float v106 = &v81[v32];
      float v107 = &v77->i8[v34];
      float v368 = &v81[v32];
      if ((int)v20 < 8)
      {
        unint64_t v219 = 0;
        uint64_t v218 = result;
        float v111 = (uint16x8_t *)((char *)v77 + v34);
        float v110 = (uint16x8_t *)((char *)v83 + v31);
      }
      else
      {
        unint64_t v108 = 0;
        int v109 = 0;
        float v110 = (uint16x8_t *)((char *)v83 + v31);
        float v111 = (uint16x8_t *)((char *)v77 + v34);
        v112.i64[0] = 0x9000900090009000;
        v112.i64[1] = 0x9000900090009000;
        do
        {
          float16x8_t v113 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)&v81[v108], v82));
          int8x16_t v114 = (int8x16_t)vmlaq_f16(v386, v65, v113);
          int8x16_t v115 = (int8x16_t)vmlaq_f16(v68, v392, v113);
          v113.i64[0] = vextq_s8(v114, v114, 8uLL).u64[0];
          *(int16x4_t *)v116.i8 = vuzp1_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v113.i8);
          *(int16x4_t *)v113.i8 = vuzp2_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v113.i8);
          v113.i64[1] = v113.i64[0];
          float16x8_t v117 = (float16x8_t)vzip1q_s16((int16x8_t)v113, (int16x8_t)v113);
          v116.i64[1] = v113.i64[0];
          v113.i64[0] = vextq_s8(v115, v115, 8uLL).u64[0];
          *(float16x4_t *)v113.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v113.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v113.i8));
          v113.i64[1] = v113.i64[0];
          float16x8_t v118 = (float16x8_t)vzip1q_s16((int16x8_t)v113, (int16x8_t)v113);
          uint16x8_t v119 = *v83++;
          float16x8_t v120 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v119, v82)), v63);
          float16x8_t v121 = vmlaq_n_f16(v117, v120, v387);
          float16x8_t v122 = vmlaq_n_f16(v118, v120, v387);
          float16x8_t v123 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v116, v116), v120, v387);
          float16x8_t v124 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)&v86[v108], v82));
          int8x16_t v125 = (int8x16_t)vmlaq_f16(v386, v65, v124);
          int8x16_t v126 = (int8x16_t)vmlaq_f16(v68, v392, v124);
          v124.i64[0] = vextq_s8(v125, v125, 8uLL).u64[0];
          *(int16x4_t *)v127.i8 = vuzp1_s16(*(int16x4_t *)v125.i8, *(int16x4_t *)v124.i8);
          *(int16x4_t *)v124.i8 = vuzp2_s16(*(int16x4_t *)v125.i8, *(int16x4_t *)v124.i8);
          v124.i64[1] = v124.i64[0];
          float16x8_t v128 = (float16x8_t)vzip1q_s16((int16x8_t)v124, (int16x8_t)v124);
          v127.i64[1] = v124.i64[0];
          v124.i64[0] = vextq_s8(v126, v126, 8uLL).u64[0];
          *(float16x4_t *)v124.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v124.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v124.i8));
          v124.i64[1] = v124.i64[0];
          float16x8_t v129 = (float16x8_t)vzip1q_s16((int16x8_t)v124, (int16x8_t)v124);
          uint16x8_t v130 = *v110++;
          float16x8_t v131 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v130, v82)), v63);
          float16x8_t v132 = vmlaq_n_f16(v128, v131, v387);
          float16x8_t v133 = vmlaq_n_f16(v129, v131, v387);
          float16x8_t v134 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v127, v127), v131, v387);
          uint16x8_t v135 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v112));
          float16x8_t v136 = (float16x8_t)vmovl_high_u16(v135);
          *(void *)&long long v137 = v136.u32[2];
          *((void *)&v137 + 1) = v136.u32[3];
          long long v138 = v137;
          *(void *)&long long v137 = v136.u32[0];
          *((void *)&v137 + 1) = v136.u32[1];
          uint32x4_t v139 = vmovl_u16(*(uint16x4_t *)v135.i8);
          v136.i16[0] = *(_WORD *)&v54[2 * v139.u32[0]];
          v136.i16[1] = *(_WORD *)&v54[2 * v139.u32[1]];
          v136.i16[2] = *(_WORD *)&v54[2 * v139.u32[2]];
          v136.i16[3] = *(_WORD *)&v54[2 * v139.u32[3]];
          v136.i16[4] = *(_WORD *)&v54[2 * v137];
          v136.i16[5] = *(_WORD *)&v54[2 * *((void *)&v137 + 1)];
          v136.i16[6] = *(_WORD *)&v54[2 * v138];
          v136.i16[7] = *(_WORD *)&v54[2 * *((void *)&v138 + 1)];
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v112));
          float16x8_t v141 = (float16x8_t)vmovl_high_u16(v140);
          *(void *)&long long v137 = v141.u32[2];
          *((void *)&v137 + 1) = v141.u32[3];
          long long v142 = v137;
          *(void *)&long long v137 = v141.u32[0];
          *((void *)&v137 + 1) = v141.u32[1];
          uint32x4_t v143 = vmovl_u16(*(uint16x4_t *)v140.i8);
          v141.i16[0] = *(_WORD *)&v54[2 * v143.u32[0]];
          v141.i16[1] = *(_WORD *)&v54[2 * v143.u32[1]];
          v141.i16[2] = *(_WORD *)&v54[2 * v143.u32[2]];
          v141.i16[3] = *(_WORD *)&v54[2 * v143.u32[3]];
          v141.i16[4] = *(_WORD *)&v54[2 * v137];
          v141.i16[5] = *(_WORD *)&v54[2 * *((void *)&v137 + 1)];
          v141.i16[6] = *(_WORD *)&v54[2 * v142];
          v141.i16[7] = *(_WORD *)&v54[2 * *((void *)&v142 + 1)];
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v112));
          uint32x4_t v145 = vmovl_high_u16(v144);
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v144.i8);
          v123.i16[0] = *(_WORD *)&v54[2 * v146.u32[0]];
          v123.i16[1] = *(_WORD *)&v54[2 * v146.u32[1]];
          v123.i16[2] = *(_WORD *)&v54[2 * v146.u32[2]];
          v123.i16[3] = *(_WORD *)&v54[2 * v146.u32[3]];
          v123.i16[4] = *(_WORD *)&v54[2 * v145.u32[0]];
          v123.i16[5] = *(_WORD *)&v54[2 * v145.u32[1]];
          v123.i16[6] = *(_WORD *)&v54[2 * v145.u32[2]];
          v123.i16[7] = *(_WORD *)&v54[2 * v145.u32[3]];
          uint16x8_t v147 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v132, (float16x8_t)0), v112));
          float16x8_t v148 = (float16x8_t)vmovl_high_u16(v147);
          *(void *)&long long v137 = v148.u32[2];
          *((void *)&v137 + 1) = v148.u32[3];
          long long v149 = v137;
          *(void *)&long long v137 = v148.u32[0];
          *((void *)&v137 + 1) = v148.u32[1];
          uint32x4_t v150 = vmovl_u16(*(uint16x4_t *)v147.i8);
          v148.i16[0] = *(_WORD *)&v54[2 * v150.u32[0]];
          v148.i16[1] = *(_WORD *)&v54[2 * v150.u32[1]];
          v148.i16[2] = *(_WORD *)&v54[2 * v150.u32[2]];
          v148.i16[3] = *(_WORD *)&v54[2 * v150.u32[3]];
          v148.i16[4] = *(_WORD *)&v54[2 * v137];
          v148.i16[5] = *(_WORD *)&v54[2 * *((void *)&v137 + 1)];
          v148.i16[6] = *(_WORD *)&v54[2 * v149];
          v148.i16[7] = *(_WORD *)&v54[2 * *((void *)&v149 + 1)];
          uint16x8_t v151 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v133, (float16x8_t)0), v112));
          uint32x4_t v152 = vmovl_high_u16(v151);
          uint32x4_t v153 = vmovl_u16(*(uint16x4_t *)v151.i8);
          v133.i16[0] = *(_WORD *)&v54[2 * v153.u32[0]];
          v133.i16[1] = *(_WORD *)&v54[2 * v153.u32[1]];
          v133.i16[2] = *(_WORD *)&v54[2 * v153.u32[2]];
          v133.i16[3] = *(_WORD *)&v54[2 * v153.u32[3]];
          v133.i16[4] = *(_WORD *)&v54[2 * v152.u32[0]];
          v133.i16[5] = *(_WORD *)&v54[2 * v152.u32[1]];
          v133.i16[6] = *(_WORD *)&v54[2 * v152.u32[2]];
          v133.i16[7] = *(_WORD *)&v54[2 * v152.u32[3]];
          uint16x8_t v154 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v134, (float16x8_t)0), v112));
          uint32x4_t v155 = vmovl_high_u16(v154);
          uint32x4_t v156 = vmovl_u16(*(uint16x4_t *)v154.i8);
          v134.i16[0] = *(_WORD *)&v54[2 * v156.u32[0]];
          v134.i16[1] = *(_WORD *)&v54[2 * v156.u32[1]];
          v134.i16[2] = *(_WORD *)&v54[2 * v156.u32[2]];
          v134.i16[3] = *(_WORD *)&v54[2 * v156.u32[3]];
          v134.i16[4] = *(_WORD *)&v54[2 * v155.u32[0]];
          v134.i16[5] = *(_WORD *)&v54[2 * v155.u32[1]];
          v134.i16[6] = *(_WORD *)&v54[2 * v155.u32[2]];
          v134.i16[7] = *(_WORD *)&v54[2 * v155.u32[3]];
          uint16x8_t v157 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v136, v383), v141, v382), v123, v381), vmaxq_f16(vmaxq_f16(v136, v141), v123), v380), (float16x8_t)0), v112));
          uint32x4_t v158 = vmovl_high_u16(v157);
          float16x8_t v159 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v157.i8);
          v159.i16[0] = *(_WORD *)&v49[2 * v159.u32[0]];
          v159.i16[1] = *(_WORD *)&v49[2 * v159.u32[1]];
          v159.i16[2] = *(_WORD *)&v49[2 * v159.u32[2]];
          v159.i16[3] = *(_WORD *)&v49[2 * v159.u32[3]];
          v159.i16[4] = *(_WORD *)&v49[2 * v158.u32[0]];
          v159.i16[5] = *(_WORD *)&v49[2 * v158.u32[1]];
          v159.i16[6] = *(_WORD *)&v49[2 * v158.u32[2]];
          v159.i16[7] = *(_WORD *)&v49[2 * v158.u32[3]];
          float16x8_t v160 = vmulq_f16(v136, v159);
          float16x8_t v161 = vmulq_f16(v141, v159);
          float16x8_t v162 = vmulq_f16(v123, v159);
          uint16x8_t v163 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v148, v383), v133, v382), v134, v381), vmaxq_f16(vmaxq_f16(v148, v133), v134), v380), (float16x8_t)0), v112));
          uint32x4_t v164 = vmovl_high_u16(v163);
          float16x8_t v165 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v163.i8);
          v165.i16[0] = *(_WORD *)&v49[2 * v165.u32[0]];
          v165.i16[1] = *(_WORD *)&v49[2 * v165.u32[1]];
          v165.i16[2] = *(_WORD *)&v49[2 * v165.u32[2]];
          v165.i16[3] = *(_WORD *)&v49[2 * v165.u32[3]];
          v165.i16[4] = *(_WORD *)&v49[2 * v164.u32[0]];
          v165.i16[5] = *(_WORD *)&v49[2 * v164.u32[1]];
          v165.i16[6] = *(_WORD *)&v49[2 * v164.u32[2]];
          v165.i16[7] = *(_WORD *)&v49[2 * v164.u32[3]];
          float16x8_t v166 = vmulq_f16(v148, v165);
          float16x8_t v167 = vmulq_f16(v133, v165);
          float16x8_t v168 = vmulq_f16(v134, v165);
          float16x8_t v169 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v160, v379), v161, v378), v162, v377);
          float16x8_t v170 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v160, _H14), v161, v375), v162, v374);
          float16x8_t v171 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v162, v371), v161, v372), v160, v373);
          float16x8_t v172 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v166, v379), v167, v378), v168, v377);
          float16x8_t v173 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v166, _H14), v167, v375), v168, v374);
          float16x8_t v174 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v168, v371), v167, v372), v166, v373);
          uint16x8_t v175 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v169, (float16x8_t)0), v112));
          float16x8_t v176 = (float16x8_t)vmovl_high_u16(v175);
          *(void *)&long long v137 = v176.u32[2];
          *((void *)&v137 + 1) = v176.u32[3];
          long long v177 = v137;
          *(void *)&long long v137 = v176.u32[0];
          *((void *)&v137 + 1) = v176.u32[1];
          uint32x4_t v178 = vmovl_u16(*(uint16x4_t *)v175.i8);
          v176.i16[7] = (unint64_t)v178.u32[1] >> 48;
          v176.i16[0] = *(_WORD *)&v62[2 * v178.u32[0]];
          v176.i16[1] = *(_WORD *)&v62[2 * v178.u32[1]];
          v176.i16[2] = *(_WORD *)&v62[2 * v178.u32[2]];
          v176.i16[3] = *(_WORD *)&v62[2 * v178.u32[3]];
          v176.i16[4] = *(_WORD *)&v62[2 * v137];
          v176.i16[5] = *(_WORD *)&v62[2 * *((void *)&v137 + 1)];
          v176.i16[6] = *(_WORD *)&v62[2 * v177];
          float v179 = (__int16 *)&v62[2 * *((void *)&v177 + 1)];
          uint16x8_t v180 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v170, (float16x8_t)0), v112));
          float16x8_t v181 = (float16x8_t)vmovl_high_u16(v180);
          *(void *)&long long v137 = v181.u32[2];
          *((void *)&v137 + 1) = v181.u32[3];
          long long v182 = v137;
          *(void *)&long long v137 = v181.u32[0];
          *((void *)&v137 + 1) = v181.u32[1];
          uint32x4_t v183 = vmovl_u16(*(uint16x4_t *)v180.i8);
          v181.i16[7] = (unint64_t)v183.u32[1] >> 48;
          v181.i16[0] = *(_WORD *)&v62[2 * v183.u32[0]];
          v181.i16[1] = *(_WORD *)&v62[2 * v183.u32[1]];
          uint64_t v184 = *((void *)&v182 + 1);
          v181.i16[2] = *(_WORD *)&v62[2 * v183.u32[2]];
          v181.i16[3] = *(_WORD *)&v62[2 * v183.u32[3]];
          v181.i16[4] = *(_WORD *)&v62[2 * v137];
          v181.i16[5] = *(_WORD *)&v62[2 * *((void *)&v137 + 1)];
          v181.i16[6] = *(_WORD *)&v62[2 * v182];
          float16x8_t v185 = (float16x8_t)vuzp1q_s16((int16x8_t)v176, (int16x8_t)v181);
          v176.i16[7] = *v179;
          v181.i16[7] = *(_WORD *)&v62[2 * v184];
          uint16x8_t v186 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v171, (float16x8_t)0), v112));
          int16x8_t v187 = (int16x8_t)vmovl_high_u16(v186);
          *(void *)&long long v137 = v187.u32[2];
          *((void *)&v137 + 1) = v187.u32[3];
          long long v188 = v137;
          *(void *)&long long v137 = v187.u32[0];
          *((void *)&v137 + 1) = v187.u32[1];
          uint32x4_t v189 = vmovl_u16(*(uint16x4_t *)v186.i8);
          v187.i16[0] = *(_WORD *)&v62[2 * v189.u32[0]];
          v187.i16[1] = *(_WORD *)&v62[2 * v189.u32[1]];
          v187.i16[2] = *(_WORD *)&v62[2 * v189.u32[2]];
          v187.i16[3] = *(_WORD *)&v62[2 * v189.u32[3]];
          v187.i16[4] = *(_WORD *)&v62[2 * v137];
          v187.i16[5] = *(_WORD *)&v62[2 * *((void *)&v137 + 1)];
          v187.i16[6] = *(_WORD *)&v62[2 * v188];
          float16x8_t v190 = (float16x8_t)v187;
          v190.i16[7] = *(_WORD *)&v62[2 * *((void *)&v188 + 1)];
          uint16x8_t v191 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v172, (float16x8_t)0), v112));
          uint32x4_t v192 = vmovl_high_u16(v191);
          *(void *)&long long v137 = v192.u32[2];
          *((void *)&v137 + 1) = v192.u32[3];
          long long v193 = v137;
          *(void *)&long long v137 = v192.u32[0];
          *((void *)&v137 + 1) = v192.u32[1];
          long long v194 = v137;
          int16x8_t v195 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v191.i8);
          *((void *)&v137 + 1) = v195.u32[3];
          v195.i16[7] = (unint64_t)v195.u32[1] >> 48;
          v195.i16[0] = *(_WORD *)&v62[2 * v195.u32[0]];
          v195.i16[1] = *(_WORD *)&v62[2 * v195.u32[1]];
          v195.i16[2] = *(_WORD *)&v62[2 * v195.u32[2]];
          v195.i16[3] = *(_WORD *)&v62[2 * *((void *)&v137 + 1)];
          v195.i16[4] = *(_WORD *)&v62[2 * v194];
          v195.i16[5] = *(_WORD *)&v62[2 * *((void *)&v194 + 1)];
          v195.i16[6] = *(_WORD *)&v62[2 * v193];
          float16x8_t v196 = (float16x8_t)v195;
          v196.i16[7] = *(_WORD *)&v62[2 * *((void *)&v193 + 1)];
          uint16x8_t v197 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v173, (float16x8_t)0), v112));
          uint32x4_t v198 = vmovl_high_u16(v197);
          int16x8_t v199 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v197.i8);
          *(void *)&long long v137 = v198.u32[2];
          *((void *)&v137 + 1) = v198.u32[3];
          long long v200 = v137;
          *(void *)&long long v137 = v198.u32[0];
          *((void *)&v137 + 1) = v198.u32[1];
          long long v201 = v137;
          *((void *)&v137 + 1) = v199.u32[3];
          v199.i16[7] = (unint64_t)v199.u32[3] >> 48;
          v199.i16[0] = *(_WORD *)&v62[2 * v199.u32[0]];
          uint64_t v202 = *((void *)&v200 + 1);
          v199.i16[1] = *(_WORD *)&v62[2 * v199.u32[1]];
          v199.i16[2] = *(_WORD *)&v62[2 * v199.u32[2]];
          v199.i16[3] = *(_WORD *)&v62[2 * *((void *)&v137 + 1)];
          v199.i16[4] = *(_WORD *)&v62[2 * v201];
          v199.i16[5] = *(_WORD *)&v62[2 * *((void *)&v201 + 1)];
          v199.i16[6] = *(_WORD *)&v62[2 * v200];
          uint16x8_t v203 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v174, (float16x8_t)0), v112));
          uint32x4_t v204 = vmovl_u16(*(uint16x4_t *)v203.i8);
          uint64_t v205 = v204.u32[1];
          uint64_t v206 = v204.u32[0];
          float16x8_t v207 = (float16x8_t)v199;
          v207.i16[7] = *(_WORD *)&v62[2 * v202];
          int16x8_t v208 = (int16x8_t)vmovl_high_u16(v203);
          uint64_t v209 = v204.u32[3];
          uint64_t v210 = v204.u32[2];
          *(void *)&long long v137 = v208.u32[2];
          *((void *)&v137 + 1) = v208.u32[3];
          long long v211 = v137;
          *(void *)&long long v137 = v208.u32[0];
          v208.i16[7] = (unint64_t)v208.u32[1] >> 48;
          v208.i16[0] = *(_WORD *)&v62[2 * v206];
          uint64_t v212 = (__int16 *)&v62[2 * v208.u32[1]];
          v208.i16[1] = *(_WORD *)&v62[2 * v205];
          v208.i16[2] = *(_WORD *)&v62[2 * v210];
          v208.i16[3] = *(_WORD *)&v62[2 * v209];
          v208.i16[4] = *(_WORD *)&v62[2 * v137];
          v208.i16[5] = *v212;
          v208.i16[6] = *(_WORD *)&v62[2 * v211];
          uint16x8_t v213 = (__int16 *)&v62[2 * *((void *)&v211 + 1)];
          float16x8_t v214 = (float16x8_t)v208;
          v214.i16[7] = *v213;
          *v77++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v74, v176, *(short float *)&v422), v181, v385), v190, v384), v74), v87)), v370);
          *v111++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v74, v196, *(short float *)&v422), v207, v385), v214, v384), v74), v87)), v370);
          float16x8_t v215 = (float16x8_t)vuzp2q_s16((int16x8_t)v176, (int16x8_t)v181);
          float16x8_t v216 = (float16x8_t)vuzp2q_s16((int16x8_t)v196, (int16x8_t)v207);
          uint16x8_t v82 = v427;
          int16x8_t v217 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v185, v215), (float16x8_t)vuzp1q_s16(v195, v199)), v216);
          *(uint16x8_t *)&result[v108 / 8] = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v104, v421, (float16x8_t)vzip1q_s16(v217, v217)), v103, (float16x8_t)vzip2q_s16(v217, v217)), v406, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v187, v187), (float16x8_t)vtrn2q_s16((int16x8_t)v190, (int16x8_t)v190)), (float16x8_t)vtrn1q_s16(v208, v208)), (float16x8_t)vtrn2q_s16((int16x8_t)v214, (int16x8_t)v214))), v404), v403)), v370);
          v109 += 8;
          v108 += 16;
        }
        while (v109 < (int)v20 - 7);
        v81 += v108;
        float v106 = &v86[v108];
        uint64_t v218 = &result[v108 / 8];
        unint64_t v219 = v20 & 0xFFFFFFF8;
        uint64_t v32 = v363;
        uint64_t v31 = v364;
        int32x4_t v100 = (int32x4_t)v421;
        _Q8 = v422;
        v12.i32[0] = v424;
        _S9 = v362;
        float v40 = v423;
        float v42 = v425;
      }
      for (; v20 > v219; float16x8_t v104 = (float16x8_t)v416)
      {
        float v220 = (float)(*((unsigned __int16 *)v81 + 1) >> v84) - v42;
        float v221 = v12.f32[1] * v220;
        float v222 = _S9 * (float)((float)(v83->u16[0] >> v84) - v40);
        float v223 = 8191.0;
        if ((float)((float)(v12.f32[1] * v220) + v222) <= 8191.0)
        {
          float v223 = v221 + v222;
          if ((float)((float)(v12.f32[1] * v220) + v222) < 0.0) {
            float v223 = 0.0;
          }
        }
        float v224 = (float)(*(unsigned __int16 *)v81 >> v84) - v42;
        float v225 = (float)(v14.f32[1] * v220) + (float)(v224 * v14.f32[0]);
        float v226 = 8191.0;
        if ((float)(v222 + v225) <= 8191.0)
        {
          float v226 = v222 + v225;
          if ((float)(v222 + v225) < 0.0) {
            float v226 = 0.0;
          }
        }
        float v227 = v12.f32[0] * v224;
        float v228 = (float)(v12.f32[0] * v224) + v222;
        float v229 = 8191.0;
        if (v228 <= 8191.0)
        {
          float v229 = v228;
          if (v228 < 0.0) {
            float v229 = 0.0;
          }
        }
        float v230 = _S9 * (float)((float)(v83->u16[1] >> v84) - v40);
        float v231 = v221 + v230;
        float v232 = 8191.0;
        if (v231 <= 8191.0)
        {
          float v232 = v231;
          if (v231 < 0.0) {
            float v232 = 0.0;
          }
        }
        float v233 = 8191.0;
        if ((float)(v225 + v230) <= 8191.0)
        {
          float v233 = v225 + v230;
          if ((float)(v225 + v230) < 0.0) {
            float v233 = 0.0;
          }
        }
        float v234 = v227 + v230;
        float v235 = 8191.0;
        if (v234 <= 8191.0)
        {
          float v235 = v234;
          if (v234 < 0.0) {
            float v235 = 0.0;
          }
        }
        float v236 = (float)(*((unsigned __int16 *)v106 + 1) >> v84) - v42;
        float v237 = v12.f32[1] * v236;
        float v238 = _S9;
        float v239 = _S9 * (float)((float)(v110->u16[0] >> v84) - v40);
        float v240 = 8191.0;
        if ((float)((float)(v12.f32[1] * v236) + v239) <= 8191.0)
        {
          float v240 = v237 + v239;
          if ((float)((float)(v12.f32[1] * v236) + v239) < 0.0) {
            float v240 = 0.0;
          }
        }
        float v241 = (float)(*(unsigned __int16 *)v106 >> v84) - v42;
        float v242 = (float)(v14.f32[1] * v236) + (float)(v241 * v14.f32[0]);
        float v243 = 8191.0;
        if ((float)(v239 + v242) <= 8191.0)
        {
          float v243 = v239 + v242;
          if ((float)(v239 + v242) < 0.0) {
            float v243 = 0.0;
          }
        }
        float v244 = v12.f32[0] * v241;
        float v245 = (float)(v12.f32[0] * v241) + v239;
        float v246 = 8191.0;
        if (v245 <= 8191.0)
        {
          float v246 = v245;
          if (v245 < 0.0) {
            float v246 = 0.0;
          }
        }
        float v247 = v238 * (float)((float)(v110->u16[1] >> v84) - v40);
        float v248 = v237 + v247;
        BOOL v249 = (float)(v237 + v247) <= 8191.0;
        float v250 = 8191.0;
        if (v249)
        {
          float v250 = v248;
          if (v248 < 0.0) {
            float v250 = 0.0;
          }
        }
        float v251 = 8191.0;
        if ((float)(v242 + v247) <= 8191.0)
        {
          float v251 = v242 + v247;
          if ((float)(v242 + v247) < 0.0) {
            float v251 = 0.0;
          }
        }
        float v252 = 8191.0;
        if ((float)(v244 + v247) <= 8191.0)
        {
          float v252 = v244 + v247;
          if ((float)(v244 + v247) < 0.0) {
            float v252 = 0.0;
          }
        }
        _H0 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v223, 0.0), 8191.0))];
        __asm { FCVT            S1, H0 }
        _H0 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v226, 0.0), 8191.0))];
        __asm { FCVT            S2, H0 }
        _H0 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v229, 0.0), 8191.0))];
        __asm { FCVT            S3, H0 }
        _H15 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v232, 0.0), 8191.0))];
        _H28 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v233, 0.0), 8191.0))];
        _H30 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v235, 0.0), 8191.0))];
        _H21 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v240, 0.0), 8191.0))];
        _H23 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v243, 0.0), 8191.0))];
        _H24 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v246, 0.0), 8191.0))];
        _H4 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v250, 0.0), 8191.0))];
        _H5 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v251, 0.0), 8191.0))];
        _H6 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v252, 0.0), 8191.0))];
        float v268 = (float)((float)((float)(v390 * _S2) + (float)(v391 * _S1)) + (float)(v389 * _S3))
             + (float)(v388 * fmaxf(_S1, fmaxf(_S2, _S3)));
        float v269 = 8191.0;
        if (v268 <= 8191.0)
        {
          float v269 = v268;
          if (v268 < 0.0) {
            float v269 = 0.0;
          }
        }
        float v270 = v238;
        __asm
        {
          FCVT            S19, H15
          FCVT            S14, H28
          FCVT            S9, H30
        }
        _H28 = *(_WORD *)&v49[2 * llroundf(v269)];
        float v275 = (float)((float)((float)(v390 * _S14) + (float)(v391 * _S19)) + (float)(v389 * _S9))
             + (float)(v388 * fmaxf(_S19, fmaxf(_S14, _S9)));
        float v276 = 8191.0;
        if (v275 <= 8191.0)
        {
          float v276 = v275;
          if (v275 < 0.0) {
            float v276 = 0.0;
          }
        }
        long long v277 = _Q8;
        int32x4_t v278 = v100;
        __asm
        {
          FCVT            S27, H21
          FCVT            S12, H23
          FCVT            S13, H24
        }
        _H29 = *(_WORD *)&v49[2 * llroundf(v276)];
        float v283 = (float)((float)((float)(v390 * _S12) + (float)(v391 * _S27)) + (float)(v389 * _S13))
             + (float)(v388 * fmaxf(_S27, fmaxf(_S12, _S13)));
        float v284 = 8191.0;
        if (v283 <= 8191.0)
        {
          float v284 = v283;
          if (v283 < 0.0) {
            float v284 = 0.0;
          }
        }
        __asm
        {
          FCVT            S30, H4
          FCVT            S15, H5
          FCVT            S8, H6
          FCVT            S4, H28
        }
        float v289 = _S1 * _S4;
        float v290 = _S2 * _S4;
        float v291 = _S3 * _S4;
        __asm { FCVT            S1, H29 }
        float v293 = _S19 * _S1;
        float v294 = _S14 * _S1;
        float v295 = _S9 * _S1;
        _H0 = *(_WORD *)&v49[2 * llroundf(v284)];
        __asm { FCVT            S0, H0 }
        float v298 = _S27 * _S0;
        float v299 = _S12 * _S0;
        float v300 = _S13 * _S0;
        float v301 = (float)((float)((float)(v390 * _S15) + (float)(v391 * _S30)) + (float)(v389 * _S8))
             + (float)(v388 * fmaxf(_S30, fmaxf(_S15, _S8)));
        float v302 = 8191.0;
        if (v301 <= 8191.0)
        {
          float v302 = v301;
          if (v301 < 0.0) {
            float v302 = 0.0;
          }
        }
        _H0 = *(_WORD *)&v49[2 * llroundf(v302)];
        __asm { FCVT            S0, H0 }
        _S19 = _S30 * _S0;
        _S27 = _S15 * _S0;
        float v307 = _S8 * _S0;
        float v308 = (float)((float)(v401 * v290) + (float)(v289 * v402)) + (float)(v291 * v400);
        float v309 = (float)((float)(v398 * v290) + (float)(v289 * v399)) + (float)(v291 * v397);
        _S21 = (float)((float)(v394 * v290) + (float)(v289 * v396)) + (float)(v291 * v393);
        _S23 = (float)((float)(v401 * v294) + (float)(v293 * v402)) + (float)(v295 * v400);
        _S24 = (float)((float)(v398 * v294) + (float)(v293 * v399)) + (float)(v295 * v397);
        _S5 = (float)((float)(v394 * v294) + (float)(v293 * v396)) + (float)(v295 * v393);
        float v314 = (float)((float)(v401 * v299) + (float)(v298 * v402)) + (float)(v300 * v400);
        float v315 = (float)((float)(v398 * v299) + (float)(v298 * v399)) + (float)(v300 * v397);
        float v316 = (float)((float)(v394 * v299) + (float)(v298 * v396)) + (float)(v300 * v393);
        float v317 = (float)((float)(v401 * _S27) + (float)(_S19 * v402)) + (float)(v307 * v400);
        float v318 = (float)((float)(v398 * _S27) + (float)(_S19 * v399)) + (float)(v307 * v397);
        float v319 = (float)((float)(v394 * _S27) + (float)(_S19 * v396)) + (float)(v307 * v393);
        _H1 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v308, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v309, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H3 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0))];
        _H4 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0))];
        __asm
        {
          FCVT            S3, H3
          FCVT            S4, H4
        }
        _H6 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        LOWORD(_S5) = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        LOWORD(_S19) = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v314, 0.0), 8191.0))];
        __asm { FCVT            S19, H19 }
        LOWORD(_S21) = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v315, 0.0), 8191.0))];
        __asm { FCVT            S21, H21 }
        LOWORD(_S23) = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v316, 0.0), 8191.0))];
        LOWORD(_S24) = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v317, 0.0), 8191.0))];
        __asm
        {
          FCVT            S23, H23
          FCVT            S24, H24
        }
        LOWORD(_S27) = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v318, 0.0), 8191.0))];
        unsigned int v335 = llroundf(fminf(fmaxf(v319, 0.0), 8191.0));
        __asm { FCVT            S0, H27 }
        LOWORD(_S27) = *(_WORD *)&v62[2 * v335];
        __asm { FCVT            S27, H27 }
        float v338 = (float)((float)((float)(v413 * _S2) + (float)(v414 * _S1)) + (float)(v420 * _S3)) + v369;
        if (v338 < v369) {
          float v339 = v369;
        }
        else {
          float v339 = (float)((float)((float)(v413 * _S2) + (float)(v414 * _S1)) + (float)(v420 * _S3)) + v369;
        }
        BOOL v249 = v338 <= v408;
        float v340 = (float)((float)((float)(v413 * _S6) + (float)(v414 * _S4)) + (float)(v420 * _S5)) + v369;
        if (!v249) {
          float v339 = v408;
        }
        unsigned int v341 = llroundf(v339);
        if (v340 < v369) {
          float v342 = v369;
        }
        else {
          float v342 = (float)((float)((float)(v413 * _S6) + (float)(v414 * _S4)) + (float)(v420 * _S5)) + v369;
        }
        BOOL v249 = v340 <= v408;
        float v343 = (float)((float)((float)(v413 * _S21) + (float)(v414 * _S19)) + (float)(v420 * _S23)) + v369;
        if (!v249) {
          float v342 = v408;
        }
        unsigned int v344 = llroundf(v342);
        if (v343 < v369) {
          float v345 = v369;
        }
        else {
          float v345 = (float)((float)((float)(v413 * _S21) + (float)(v414 * _S19)) + (float)(v420 * _S23)) + v369;
        }
        BOOL v249 = v343 <= v408;
        float v346 = (float)((float)((float)(v413 * _S0) + (float)(v414 * _S24)) + (float)(v420 * _S27)) + v369;
        if (!v249) {
          float v345 = v408;
        }
        unsigned int v347 = llroundf(v345);
        if (v346 < v369) {
          float v348 = v369;
        }
        else {
          float v348 = (float)((float)((float)(v413 * _S0) + (float)(v414 * _S24)) + (float)(v420 * _S27)) + v369;
        }
        if (v346 <= v408) {
          float v349 = v348;
        }
        else {
          float v349 = v408;
        }
        float v350 = (float)((float)(_S1 + _S4) + _S19) + _S24;
        float v351 = (float)((float)(_S2 + _S6) + _S21) + _S0;
        v77->i16[0] = v341 << v85;
        v77->i16[1] = v344 << v85;
        v111->i16[0] = v347 << v85;
        v111->i16[1] = llroundf(v349) << v85;
        float v352 = (float)((float)(_S3 + _S5) + _S23) + _S27;
        float v353 = (float)((float)(v395 + (float)(v350 * *(float *)&v419)) + (float)(v351 * *(float *)&v418))
             + (float)(v352 * *(float *)&v417);
        float v354 = v411;
        if (v353 <= v411)
        {
          float v354 = (float)((float)(v395 + (float)(v350 * *(float *)&v419)) + (float)(v351 * *(float *)&v418))
               + (float)(v352 * *(float *)&v417);
          if (v353 < v426) {
            float v354 = v426;
          }
        }
        float v355 = (float)((float)(v395 + (float)(v350 * *((float *)&v419 + 1))) + (float)(v351 * *((float *)&v418 + 1)))
             + (float)(v352 * *((float *)&v417 + 1));
        *uint64_t v218 = llroundf(v354) << v85;
        float v356 = v411;
        float v40 = v423;
        float v42 = v425;
        _S9 = v270;
        v12.i32[0] = v424;
        int32x4_t v100 = v278;
        float16x8_t v74 = v405;
        uint16x8_t v82 = v427;
        _Q8 = v277;
        _H14 = v376;
        if (v355 <= v411)
        {
          float v356 = v355;
          if (v355 < v426) {
            float v356 = v426;
          }
        }
        v219 += 2;
        v81 += 4;
        unsigned int v83 = (uint16x8_t *)((char *)v83 + 4);
        v106 += 4;
        float v110 = (uint16x8_t *)((char *)v110 + 4);
        v218[1] = llroundf(v356) << v85;
        float v77 = (uint16x8_t *)((char *)v77 + 4);
        float v111 = (uint16x8_t *)((char *)v111 + 4);
        v218 += 2;
        float16x8_t v63 = v412;
        float16x8_t v65 = v409;
        v14.i32[0] = v410;
        float16x8_t v68 = v407;
        float16x8_t v103 = (float16x8_t)v415;
      }
      unsigned int v83 = (uint16x8_t *)&v105[v31];
      uint64_t v34 = v367;
      float v81 = &v368[v32];
      float v77 = (uint16x8_t *)&v107[v367];
      uint64_t result = (void *)((char *)result + v366);
      v19 += 2;
      v86 += v365;
    }
    while (v23 > v19);
    if (v361 && v360)
    {
      size_t v357 = 2 * v20;
      do
      {
        uint64_t result = memcpy(v50, v33, v357);
        v33 += v358;
        v50 += v359;
        --v23;
      }
      while (v23);
    }
    else if (v360)
    {
      do
      {
        if (v20) {
          uint64_t result = memset(v50, 255, 2 * v20);
        }
        v50 += v359;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Tone_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 36);
    uint64_t v12 = *(void *)(result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = *((void *)result + 14);
    unint64_t v15 = *((void *)result + 13) * a2 / v6;
    uint64_t v16 = (void *)*((void *)result + 16);
    uint64_t v17 = *((void *)result + 15) + 2 * v15;
    uint64_t v18 = *((void *)result + 19);
    uint64_t v19 = (void *)*((void *)result + 7);
    uint64_t v20 = (uint64_t *)*((void *)result + 8);
    uint64_t v21 = (uint64_t *)*((void *)result + 17);
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v212 = v20[2];
    uint64_t v215 = v19[2];
    uint64_t v24 = (char *)(v215 + v212 * v12 + 2 * v11);
    uint64_t v25 = *v21;
    uint64_t v26 = v21[1];
    uint64_t v213 = v21[2];
    uint64_t v214 = v16[2];
    uint64_t v27 = (char *)(v214 + v213 * v17 + 2 * v14);
    *(float *)&unsigned int v28 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    float v29 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    float v30 = (float)LODWORD(a5);
    float v31 = *(float *)&v28 * *(float *)v18;
    float v32 = *(float *)&v28 * *(float *)(v18 + 8);
    float v33 = *(float *)&v28 * *(float *)(v18 + 16);
    float v34 = *(float *)&v28 * *(float *)(v18 + 20);
    float v35 = *(float *)&v28 * *(float *)(v18 + 28);
    LOWORD(v28) = *(_WORD *)(v18 + 144);
    float v36 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v18 + 146);
    float v37 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v18 + 148);
    float v38 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v18 + 150);
    float v39 = (float)v28;
    float v245 = v39;
    float v235 = *(float *)(v18 + 40);
    float v236 = *(float *)(v18 + 36);
    float v233 = *(float *)(v18 + 48) * 0.25;
    float v234 = *(float *)(v18 + 44);
    float v231 = *(float *)(v18 + 56) * 0.25;
    float v232 = *(float *)(v18 + 52) * 0.25;
    float v229 = *(float *)(v18 + 64) * 0.25;
    float v230 = *(float *)(v18 + 60) * 0.25;
    float v227 = *(float *)(v18 + 68) * 0.25;
    float v228 = *(float *)(v18 + 72);
    float v225 = *(float *)(v18 + 80);
    float v226 = *(float *)(v18 + 76);
    float v223 = *(float *)(v18 + 88);
    float v224 = *(float *)(v18 + 84);
    float v221 = *(float *)(v18 + 96);
    float v222 = *(float *)(v18 + 92);
    float v219 = *(float *)(v18 + 104);
    float v220 = *(float *)(v18 + 100);
    uint64_t v40 = v18 + 164;
    uint64_t v41 = v18 + 16548;
    uint64_t v42 = v18 + 32932;
    uint64_t v43 = v19[1];
    uint64_t result = (unsigned __int8 *)(*v19 + *v20 * v12 + 2 * v11);
    uint64_t v44 = v43 + v23 * v12 + 2 * v11;
    if (!v43) {
      uint64_t v44 = 0;
    }
    unsigned int v45 = *(unsigned __int8 *)(v18 + 132);
    if (v45 >= 0x11) {
      char v46 = 0;
    }
    else {
      char v46 = 16 - v45;
    }
    unsigned int v47 = *(unsigned __int8 *)(v18 + 124);
    char v48 = 16 - v47;
    uint64_t v49 = v16[1];
    float v50 = (char *)(*v16 + v25 * v17 + 2 * v14);
    if (v47 >= 0x11) {
      char v48 = 0;
    }
    uint64_t v51 = v49 + v26 * (v17 / 2) + 2 * v14;
    char v52 = v48;
    char v53 = v46;
    char v54 = (unsigned __int16 *)(v44 + 2);
    float v55 = *(float *)(v18 + 108);
    float v56 = *(float *)(v18 + 112);
    float v57 = *(float *)(v18 + 116);
    float v58 = *(float *)(v18 + 120);
    float v243 = (float)LODWORD(a5);
    float v244 = v29;
    float v241 = v32;
    float v242 = v31;
    float v239 = v34;
    float v240 = v33;
    LOWORD(v39) = *(_WORD *)(v18 + 152);
    float v237 = (float)LODWORD(v39);
    float v238 = v37;
    float v217 = v56;
    float v218 = v35;
    float v216 = v55;
    do
    {
      uint64_t v59 = &v50[v25];
      uint64_t v60 = &result[v22];
      if (v10)
      {
        unint64_t v61 = 0;
        float16x8_t v62 = v54;
        float16x8_t v63 = &result[v22];
        short float v64 = &v50[v25];
        do
        {
          float v65 = (float)(*v62 >> v52) - v30;
          float v66 = v32 * v65;
          float v67 = v31 * (float)((float)(*(unsigned __int16 *)result >> v52) - v29);
          float v68 = (float)(v32 * v65) + v67;
          float v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            float v69 = (float)(v32 * v65) + v67;
            if (v68 < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = (float)(*(v62 - 1) >> v52) - v30;
          float v71 = (float)(v34 * v65) + (float)(v70 * v33);
          float v72 = 8191.0;
          if ((float)(v67 + v71) <= 8191.0)
          {
            float v72 = v67 + v71;
            if ((float)(v67 + v71) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v35 * v70;
          float v74 = v73 + v67;
          float v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v31 * (float)((float)(*((unsigned __int16 *)result + 1) >> v52) - v29);
          float v77 = v66 + v76;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = 8191.0;
          if ((float)(v71 + v76) <= 8191.0)
          {
            float v79 = v71 + v76;
            if ((float)(v71 + v76) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v73 + v76;
          BOOL v81 = (float)(v73 + v76) <= 8191.0;
          float v82 = 8191.0;
          if (v81)
          {
            float v82 = v80;
            if (v80 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = (float)(*(unsigned __int16 *)((char *)v62 + v23) >> v52) - v30;
          float v84 = v32 * v83;
          float v85 = v31 * (float)((float)(*(unsigned __int16 *)v63 >> v52) - v29);
          float v86 = (float)(v32 * v83) + v85;
          float v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = (float)(*(unsigned __int16 *)((char *)v62 + v23 - 2) >> v52) - v30;
          float v89 = (float)(v34 * v83) + (float)(v88 * v33);
          float v90 = 8191.0;
          if ((float)(v85 + v89) <= 8191.0)
          {
            float v90 = v85 + v89;
            if ((float)(v85 + v89) < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v35 * v88;
          float v92 = (float)(v35 * v88) + v85;
          float v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v31 * (float)((float)(*((unsigned __int16 *)v63 + 1) >> v52) - v29);
          float v95 = v84 + v94;
          BOOL v81 = (float)(v84 + v94) <= 8191.0;
          float v96 = 8191.0;
          if (v81)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v89 + v94;
          BOOL v81 = (float)(v89 + v94) <= 8191.0;
          float v98 = 8191.0;
          if (v81)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          float v99 = v91 + v94;
          float v100 = 8191.0;
          if (v99 <= 8191.0)
          {
            float v100 = v99;
            if (v99 < 0.0) {
              float v100 = 0.0;
            }
          }
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S28, H20 }
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          unsigned int v108 = llroundf(fminf(fmaxf(v75, 0.0), 8191.0));
          __asm { FCVT            S19, H20 }
          _H20 = *(_WORD *)(v40 + 2 * v108);
          __asm { FCVT            S30, H20 }
          _H22 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          float v121 = fmaxf(_S28, fmaxf(_S19, _S30));
          float v122 = (float)((float)((float)(v56 * _S19) + (float)(v55 * _S28)) + (float)(v57 * _S30)) + (float)(v58 * v121);
          float v123 = 8191.0;
          if (v122 <= 8191.0)
          {
            float v123 = (float)((float)((float)(v56 * _S19) + (float)(v55 * _S28)) + (float)(v57 * _S30))
                 + (float)(v58 * v121);
            if (v122 < 0.0) {
              float v123 = 0.0;
            }
          }
          __asm
          {
            FCVT            S3, H22
            FCVT            S17, H23
            FCVT            S21, H20
          }
          _H22 = *(_WORD *)(v41 + 2 * llroundf(v123));
          float v128 = (float)((float)((float)(v56 * _S17) + (float)(v55 * _S3)) + (float)(v57 * _S21))
               + (float)(v58 * fmaxf(_S3, fmaxf(_S17, _S21)));
          float v129 = 8191.0;
          if (v128 <= 8191.0)
          {
            float v129 = v128;
            if (v128 < 0.0) {
              float v129 = 0.0;
            }
          }
          __asm
          {
            FCVT            S8, H5
            FCVT            S9, H6
            FCVT            S10, H7
          }
          _H5 = *(_WORD *)(v41 + 2 * llroundf(v129));
          float v134 = fmaxf(_S8, fmaxf(_S9, _S10));
          float v135 = (float)((float)((float)(v56 * _S9) + (float)(v55 * _S8)) + (float)(v57 * _S10)) + (float)(v58 * v134);
          float v136 = 8191.0;
          if (v135 <= 8191.0)
          {
            float v136 = (float)((float)((float)(v56 * _S9) + (float)(v55 * _S8)) + (float)(v57 * _S10)) + (float)(v58 * v134);
            if (v135 < 0.0) {
              float v136 = 0.0;
            }
          }
          __asm
          {
            FCVT            S23, H1
            FCVT            S29, H2
            FCVT            S31, H4
            FCVT            S1, H22
          }
          float v141 = _S28 * _S1;
          float v142 = _S19 * _S1;
          float v143 = _S30 * _S1;
          __asm { FCVT            S1, H5 }
          float v145 = _S3 * _S1;
          float v146 = _S17 * _S1;
          float v147 = _S21 * _S1;
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * llroundf(v136));
          __asm { FCVT            S2, H1 }
          float v149 = _S8 * _S2;
          float v150 = _S9 * _S2;
          float v151 = _S10 * _S2;
          float v152 = (float)((float)((float)(v56 * _S29) + (float)(v55 * _S23)) + (float)(v57 * _S31))
               + (float)(v58 * fmaxf(_S23, fmaxf(_S29, _S31)));
          float v153 = 8191.0;
          if (v152 <= 8191.0)
          {
            float v153 = v152;
            if (v152 < 0.0) {
              float v153 = 0.0;
            }
          }
          _H17 = *(_WORD *)(v41 + 2 * llroundf(v153));
          __asm { FCVT            S17, H17 }
          float v156 = _S23 * _S17;
          _S22 = _S29 * _S17;
          float v158 = _S31 * _S17;
          float v159 = (float)((float)(v226 * v142) + (float)(v141 * v228)) + (float)(v143 * v225);
          float v160 = (float)((float)(v223 * v142) + (float)(v141 * v224)) + (float)(v143 * v222);
          float v161 = (float)((float)(v220 * v142) + (float)(v141 * v221)) + (float)(v143 * v219);
          _S19 = (float)((float)(v226 * v146) + (float)(v145 * v228)) + (float)(v147 * v225);
          _S20 = (float)((float)(v223 * v146) + (float)(v145 * v224)) + (float)(v147 * v222);
          float v164 = (float)((float)(v220 * v146) + (float)(v145 * v221)) + (float)(v147 * v219);
          float v165 = (float)((float)(v226 * v150) + (float)(v149 * v228)) + (float)(v151 * v225);
          float v166 = (float)((float)(v223 * v150) + (float)(v149 * v224)) + (float)(v151 * v222);
          _S3 = (float)((float)(v220 * v150) + (float)(v149 * v221)) + (float)(v151 * v219);
          float v168 = (float)((float)(v226 * _S22) + (float)(v156 * v228)) + (float)(v158 * v225);
          float v169 = (float)((float)(v223 * _S22) + (float)(v156 * v224)) + (float)(v158 * v222);
          float v170 = (float)((float)(v220 * _S22) + (float)(v156 * v221)) + (float)(v158 * v219);
          _H1 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          _H1 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          __asm { FCVT            S5, H1 }
          _H1 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S1, H1
            FCVT            S6, H2
          }
          _H2 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S17, H2 }
          _H2 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          __asm { FCVT            S7, H2 }
          _H2 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S19) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S3) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S20) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S20, H20
          }
          LOWORD(_S22) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          unsigned int v188 = llroundf(fminf(fmaxf(v170, 0.0), 8191.0));
          __asm { FCVT            S21, H22 }
          LOWORD(_S22) = *(_WORD *)(v42 + 2 * v188);
          __asm { FCVT            S22, H22 }
          float v191 = (float)((float)((float)(v235 * _S5) + (float)(v236 * _S4)) + (float)(v234 * _S1)) + v36;
          if (v191 < v36) {
            float v192 = v36;
          }
          else {
            float v192 = (float)((float)((float)(v235 * _S5) + (float)(v236 * _S4)) + (float)(v234 * _S1)) + v36;
          }
          BOOL v81 = v191 <= v38;
          float v193 = (float)((float)((float)(v235 * _S17) + (float)(v236 * _S6)) + (float)(v234 * _S7)) + v36;
          if (!v81) {
            float v192 = v38;
          }
          unsigned int v194 = llroundf(v192);
          if (v193 < v36) {
            float v195 = v36;
          }
          else {
            float v195 = (float)((float)((float)(v235 * _S17) + (float)(v236 * _S6)) + (float)(v234 * _S7)) + v36;
          }
          BOOL v81 = v193 <= v38;
          float v196 = (float)((float)((float)(v235 * _S19) + (float)(v236 * _S2)) + (float)(v234 * _S3)) + v36;
          if (!v81) {
            float v195 = v38;
          }
          unsigned int v197 = llroundf(v195);
          if (v196 < v36) {
            float v198 = v36;
          }
          else {
            float v198 = (float)((float)((float)(v235 * _S19) + (float)(v236 * _S2)) + (float)(v234 * _S3)) + v36;
          }
          BOOL v81 = v196 <= v38;
          float v199 = (float)((float)((float)(v235 * _S21) + (float)(v236 * _S20)) + (float)(v234 * _S22)) + v36;
          if (!v81) {
            float v198 = v38;
          }
          unsigned int v200 = llroundf(v198);
          if (v199 < v36) {
            float v201 = v36;
          }
          else {
            float v201 = (float)((float)((float)(v235 * _S21) + (float)(v236 * _S20)) + (float)(v234 * _S22)) + v36;
          }
          if (v199 <= v38) {
            float v202 = v201;
          }
          else {
            float v202 = v38;
          }
          float v203 = (float)((float)(_S4 + _S6) + _S2) + _S20;
          float v204 = (float)((float)(_S5 + _S17) + _S19) + _S21;
          *(_WORD *)float v50 = v194 << v53;
          *((_WORD *)v50 + 1) = v197 << v53;
          *(_WORD *)short float v64 = v200 << v53;
          *((_WORD *)v64 + 1) = llroundf(v202) << v53;
          float v205 = (float)((float)(_S1 + _S7) + _S3) + _S22;
          float v206 = (float)((float)(v238 + (float)(v203 * v233)) + (float)(v204 * v232)) + (float)(v205 * v231);
          float v207 = v237;
          if (v206 <= v237)
          {
            float v207 = (float)((float)(v238 + (float)(v203 * v233)) + (float)(v204 * v232)) + (float)(v205 * v231);
            if (v206 < v245) {
              float v207 = v245;
            }
          }
          int16x8_t v208 = (_WORD *)(v51 + 2 * v61);
          float v209 = (float)((float)(v238 + (float)(v203 * v230)) + (float)(v204 * v229)) + (float)(v205 * v227);
          *int16x8_t v208 = llroundf(v207) << v53;
          float v210 = v237;
          float v30 = v243;
          float v29 = v244;
          float v32 = v241;
          float v31 = v242;
          float v34 = v239;
          float v33 = v240;
          float v35 = v218;
          if (v209 <= v237)
          {
            float v210 = v209;
            if (v209 < v245) {
              float v210 = v245;
            }
          }
          result += 4;
          v62 += 2;
          v63 += 4;
          v50 += 4;
          v64 += 4;
          v208[1] = llroundf(v210) << v53;
          v61 += 2;
          float v55 = v216;
          float v56 = v217;
        }
        while (v10 > v61);
      }
      uint64_t result = &v60[v22];
      float v50 = &v59[v25];
      v51 += v26;
      v9 += 2;
      v54 += v23;
    }
    while (v13 > v9);
    if (v215 && v214)
    {
      size_t v211 = 2 * v10;
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v27, v24, v211);
        v24 += v212;
        v27 += v213;
        --v13;
      }
      while (v13);
    }
    else if (v214)
    {
      do
      {
        if (v10) {
          uint64_t result = (unsigned __int8 *)memset(v27, 255, 2 * v10);
        }
        v27 += v213;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_xf420_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, double a6, int16x4_t a7, int16x4_t a8, double a9, double a10)
{
  uint64_t v13 = *(void *)(result + 28);
  unint64_t v14 = 2 * *result;
  unint64_t v15 = v13 * a2 / v14;
  unint64_t v16 = (v13 + v13 * a2) / v14;
  if (2 * v16 != 2 * v15)
  {
    unint64_t v17 = 0;
    unint64_t v18 = *(void *)(result + 20);
    uint64_t v19 = *(void *)(result + 36);
    uint64_t v20 = *(void *)(result + 44) + 2 * v15;
    unint64_t v21 = 2 * v16 - 2 * v15;
    uint64_t v22 = *((void *)result + 14);
    uint64_t v23 = (uint64_t *)*((void *)result + 16);
    uint64_t v24 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v14);
    uint64_t v25 = (float32x2_t *)*((void *)result + 19);
    uint64_t v26 = (void *)*((void *)result + 7);
    uint64_t v27 = (uint64_t *)*((void *)result + 8);
    uint64_t v28 = (uint64_t *)*((void *)result + 17);
    uint64_t v30 = *v27;
    uint64_t v29 = v27[1];
    uint64_t v309 = v27[2];
    uint64_t v312 = v26[2];
    uint64_t v31 = (char *)(v312 + v309 * v20 + 2 * v19);
    uint64_t v32 = *v28;
    uint64_t v33 = v28[1];
    uint64_t v310 = v28[2];
    uint64_t v311 = v23[2];
    *(float *)&a10 = (float)v25[16].u32[0];
    unsigned int v34 = v25[17].u16[2];
    unsigned int v35 = v25[17].u16[3];
    LODWORD(v28) = v25[18].u16[0];
    LODWORD(a3) = 1174403072;
    unsigned int v36 = v25[18].u16[1];
    float v37 = (float)v34;
    float v38 = (float)v35;
    *(short float *)v11.i16 = (short float)v34;
    unsigned int v39 = v25[18].u16[2];
    short float v40 = (short float)v35;
    unsigned int v41 = v25[18].u16[3];
    unsigned int v46 = v25[19].u16[0];
    float v364 = v25[4].f32[1];
    float v365 = v25[5].f32[1];
    LODWORD(a4) = v25[5].i32[0];
    float v363 = *(float *)&a4;
    float v47 = (float)v28;
    *(short float *)&a4 = (short float)v28;
    char v48 = (char *)&v25[20] + 4;
    uint64_t v49 = (char *)(v311 + v310 * v24 + 2 * v22);
    float v50 = 8191.0 / *(float *)&a10;
    _S27 = (float)(8191.0 / *(float *)&a10) * v25->f32[0];
    float v52 = (float)v36;
    float v342 = (float)v39;
    *(float *)&a6 = (float)v41;
    float v367 = (float)v41;
    float v53 = (float)v46;
    *(short float *)&a6 = (short float)v36;
    *(short float *)a7.i16 = (short float)v39;
    *(short float *)a8.i16 = (short float)v41;
    *(short float *)&a10 = (short float)v46;
    unsigned int v54 = v25[16].u8[4];
    unsigned __int8 v55 = 16 - v54;
    if (v54 >= 0x11) {
      unsigned __int8 v55 = 0;
    }
    unsigned int v56 = v25[15].u8[4];
    if (v56 >= 0x11) {
      unsigned __int8 v57 = 0;
    }
    else {
      unsigned __int8 v57 = 16 - v56;
    }
    if (v24 >= 0) {
      uint64_t v58 = v24;
    }
    else {
      uint64_t v58 = v24 + 1;
    }
    uint64_t v60 = *v23;
    uint64_t v59 = v23[1];
    uint64_t v318 = v33;
    unint64_t v61 = (char *)&v25[2068] + 4;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(v11, 0);
    v42.i32[1] = v25[1].i32[0];
    v42.i32[0] = v25[3].i32[1];
    *(float32x2_t *)v10.f32 = vmul_n_f32(v42, v50);
    *(double *)&v63.i64[1] = a3;
    float16x8_t v64 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    *(float32x2_t *)v12.f32 = vmul_n_f32(v25[2], v50);
    *(double *)&v65.i64[1] = a3;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v12), 0);
    short float v67 = -v40;
    float16x8_t v68 = vmulq_n_f16(v64, -v40);
    float16x8_t v69 = vmulq_n_f16(v66, v67);
    __asm { FMOV            V2.2S, #0.25 }
    v43.i32[1] = v25[7].i32[1];
    v43.i32[0] = v25[6].i32[0];
    *(float32x2_t *)v63.f32 = vmul_f32(v43, _D2);
    uint64_t v362 = v63.i64[0];
    float32x4_t v75 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v63), 0);
    float16x8_t v321 = (float16x8_t)v75;
    v44.i32[1] = v25[8].i32[0];
    v44.i32[0] = v25[6].i32[1];
    *(float32x2_t *)v75.f32 = vmul_f32(v44, _D2);
    uint64_t v361 = v75.i64[0];
    int32x4_t v76 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v75), 0);
    v45.i32[1] = v25[8].i32[1];
    v45.i32[0] = v25[7].i32[0];
    *(float32x2_t *)v65.f32 = vmul_f32(v45, _D2);
    uint64_t v360 = v65.i64[0];
    int32x4_t v77 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v65), 0);
    int16x8_t v78 = vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    int16x8_t v79 = vdupq_lane_s16(*(int16x4_t *)&a6, 0);
    int16x8_t v80 = vdupq_lane_s16(a7, 0);
    int16x8_t v81 = vdupq_lane_s16(a8, 0);
    float16x8_t v349 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a10, 0);
    uint64_t v82 = v59 + v33 * (v58 >> 1) + 2 * v22;
    uint64_t result = (unsigned __int8 *)(v60 + v32 * v24 + 2 * v22);
    float v85 = v26;
    uint64_t v83 = *v26;
    uint64_t v84 = v85[1];
    if (v84) {
      float v86 = (char *)(v84 + v29 * v20 + 2 * v19);
    }
    else {
      float v86 = 0;
    }
    float v87 = (uint16x8_t *)(v83 + v30 * v20 + 2 * v19);
    unsigned __int8 v88 = v57;
    uint16x8_t v89 = (uint16x8_t)vdupq_n_s16(-v57);
    unsigned __int8 v90 = v55;
    float v91 = &v86[v29];
    uint64_t v317 = 2 * v29;
    float v359 = v25[10].f32[1];
    __asm { FCVT            H15, S27 }
    short float v335 = _H15;
    _S5 = v25[4].i32[1];
    __asm { FCVT            H15, S5 }
    _S5 = v25[5].i32[0];
    __asm { FCVT            H5, S5 }
    short float v333 = *(short float *)&_S5;
    _S5 = v25[5].i32[1];
    __asm { FCVT            H5, S5 }
    float v348 = v25[9].f32[0];
    __asm { FCVT            H7, S25 }
    short float v331 = _H7;
    float v347 = v25[9].f32[1];
    __asm { FCVT            H7, S11 }
    float v346 = v25[10].f32[0];
    __asm { FCVT            H11, S26 }
    short float v329 = _H11;
    _S25 = v359;
    __asm { FCVT            H11, S25 }
    float v343 = v25[11].f32[0];
    __asm { FCVT            H14, S14 }
    short float v327 = _H14;
    float v341 = v25[11].f32[1];
    __asm { FCVT            H14, S24 }
    float v339 = v25[12].f32[0];
    __asm { FCVT            H2, S2 }
    short float v325 = _H2;
    float v337 = v25[12].f32[1];
    __asm { FCVT            H2, S3 }
    float v336 = v25[13].f32[0];
    __asm { FCVT            H3, S17 }
    short float v323 = _H3;
    uint64_t v319 = v32;
    uint64_t v320 = v27[1];
    float16x8_t v353 = (float16x8_t)v78;
    float16x8_t v354 = (float16x8_t)v77;
    float16x8_t v351 = (float16x8_t)v80;
    float16x8_t v352 = (float16x8_t)v79;
    float16x8_t v350 = (float16x8_t)v81;
    uint16x8_t v368 = v89;
    short float v324 = _H2;
    uint16x8_t v322 = (uint16x8_t)vdupq_n_s16(v55);
    uint64_t v316 = *v27;
    float16x8_t v357 = v69;
    float16x8_t v358 = v68;
    __int32 v355 = v12.i32[0];
    float16x8_t v356 = v66;
    float16x8_t v344 = v62;
    float16x8_t v345 = v64;
    float v340 = _S27;
    float v338 = v38;
    __int32 v366 = v10.i32[0];
    float16x8_t v369 = (float16x8_t)v76;
    short float v334 = _H15;
    short float v332 = *(short float *)&_S5;
    short float v330 = _H7;
    short float v328 = _H11;
    short float v326 = _H14;
    float v314 = v37;
    float v315 = v52;
    float v313 = v53;
    do
    {
      float v107 = &v87->i8[v30];
      unsigned int v108 = &v86[v29];
      int v109 = &result[v32];
      if ((int)v18 < 8)
      {
        unint64_t v202 = 0;
        float v201 = (_WORD *)v82;
        float16x8_t v113 = (uint16x8_t *)&result[v32];
        unsigned int v200 = &v86[v29];
        float16x8_t v112 = (uint16x8_t *)((char *)v87 + v30);
        int32x4_t v203 = v76;
      }
      else
      {
        uint64_t v110 = 0;
        int v111 = 0;
        float16x8_t v112 = (uint16x8_t *)((char *)v87 + v30);
        float16x8_t v113 = (uint16x8_t *)&result[v32];
        v114.i64[0] = 0x9000900090009000;
        v114.i64[1] = 0x9000900090009000;
        do
        {
          float16x8_t v115 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)&v86[v110], v89));
          int8x16_t v116 = (int8x16_t)vmlaq_f16(v68, v64, v115);
          int8x16_t v117 = (int8x16_t)vmlaq_f16(v69, v66, v115);
          v115.i64[0] = vextq_s8(v116, v116, 8uLL).u64[0];
          *(int16x4_t *)v118.i8 = vuzp1_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8);
          *(int16x4_t *)v115.i8 = vuzp2_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8);
          *(double *)&v115.i64[1] = a3;
          float16x8_t v119 = (float16x8_t)vzip1q_s16((int16x8_t)v115, (int16x8_t)v115);
          *(double *)&v118.i64[1] = a3;
          v115.i64[0] = vextq_s8(v117, v117, 8uLL).u64[0];
          *(float16x4_t *)v115.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v115.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v115.i8));
          *(double *)&v115.i64[1] = a3;
          uint16x8_t v120 = *v87++;
          float16x8_t v121 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v120, v89)), v62);
          float16x8_t v122 = vmlaq_n_f16(v119, v121, v335);
          float16x8_t v123 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v115, (int16x8_t)v115), v121, v335);
          float16x8_t v124 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v118, v118), v121, v335);
          float16x8_t v125 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)&v91[v110], v89));
          int8x16_t v126 = (int8x16_t)vmlaq_f16(v68, v64, v125);
          int8x16_t v127 = (int8x16_t)vmlaq_f16(v69, v66, v125);
          v125.i64[0] = vextq_s8(v126, v126, 8uLL).u64[0];
          *(int16x4_t *)v128.i8 = vuzp1_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v125.i8);
          *(int16x4_t *)v125.i8 = vuzp2_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v125.i8);
          *(double *)&v125.i64[1] = a3;
          *(double *)&v128.i64[1] = a3;
          float16x8_t v129 = (float16x8_t)vzip1q_s16((int16x8_t)v125, (int16x8_t)v125);
          v125.i64[0] = vextq_s8(v127, v127, 8uLL).u64[0];
          *(float16x4_t *)v125.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v127.i8, *(int16x4_t *)v125.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v127.i8, *(int16x4_t *)v125.i8));
          *(double *)&v125.i64[1] = a3;
          uint16x8_t v130 = *v112++;
          float16x8_t v131 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v130, v89)), v62);
          float16x8_t v132 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v125, (int16x8_t)v125), v131, v335);
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v114));
          uint32x4_t v134 = vmovl_high_u16(v133);
          uint32x4_t v135 = vmovl_u16(*(uint16x4_t *)v133.i8);
          v136.i16[0] = *(_WORD *)&v48[2 * v135.u32[0]];
          v136.i16[1] = *(_WORD *)&v48[2 * v135.u32[1]];
          v136.i16[2] = *(_WORD *)&v48[2 * v135.u32[2]];
          v136.i16[3] = *(_WORD *)&v48[2 * v135.u32[3]];
          v136.i16[4] = *(_WORD *)&v48[2 * v134.u32[0]];
          v136.i16[5] = *(_WORD *)&v48[2 * v134.u32[1]];
          v136.i16[6] = *(_WORD *)&v48[2 * v134.u32[2]];
          v136.i16[7] = *(_WORD *)&v48[2 * v134.u32[3]];
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v114));
          uint32x4_t v138 = vmovl_high_u16(v137);
          uint32x4_t v139 = vmovl_u16(*(uint16x4_t *)v137.i8);
          v140.i16[0] = *(_WORD *)&v48[2 * v139.u32[0]];
          v140.i16[1] = *(_WORD *)&v48[2 * v139.u32[1]];
          v140.i16[2] = *(_WORD *)&v48[2 * v139.u32[2]];
          v140.i16[3] = *(_WORD *)&v48[2 * v139.u32[3]];
          v140.i16[4] = *(_WORD *)&v48[2 * v138.u32[0]];
          v140.i16[5] = *(_WORD *)&v48[2 * v138.u32[1]];
          v140.i16[6] = *(_WORD *)&v48[2 * v138.u32[2]];
          v140.i16[7] = *(_WORD *)&v48[2 * v138.u32[3]];
          uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, (float16x8_t)0), v114));
          uint32x4_t v142 = vmovl_high_u16(v141);
          uint32x4_t v143 = vmovl_u16(*(uint16x4_t *)v141.i8);
          v124.i16[0] = *(_WORD *)&v48[2 * v143.u32[0]];
          v124.i16[1] = *(_WORD *)&v48[2 * v143.u32[1]];
          v124.i16[2] = *(_WORD *)&v48[2 * v143.u32[2]];
          v124.i16[3] = *(_WORD *)&v48[2 * v143.u32[3]];
          v124.i16[4] = *(_WORD *)&v48[2 * v142.u32[0]];
          v124.i16[5] = *(_WORD *)&v48[2 * v142.u32[1]];
          v124.i16[6] = *(_WORD *)&v48[2 * v142.u32[2]];
          v124.i16[7] = *(_WORD *)&v48[2 * v142.u32[3]];
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v129, v131, v335), (float16x8_t)0), v114));
          uint32x4_t v145 = vmovl_high_u16(v144);
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v144.i8);
          v129.i16[0] = *(_WORD *)&v48[2 * v146.u32[0]];
          v129.i16[1] = *(_WORD *)&v48[2 * v146.u32[1]];
          v129.i16[2] = *(_WORD *)&v48[2 * v146.u32[2]];
          v129.i16[3] = *(_WORD *)&v48[2 * v146.u32[3]];
          v129.i16[4] = *(_WORD *)&v48[2 * v145.u32[0]];
          v129.i16[5] = *(_WORD *)&v48[2 * v145.u32[1]];
          v129.i16[6] = *(_WORD *)&v48[2 * v145.u32[2]];
          v129.i16[7] = *(_WORD *)&v48[2 * v145.u32[3]];
          uint16x8_t v147 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v132, (float16x8_t)0), v114));
          uint32x4_t v148 = vmovl_high_u16(v147);
          float16x8_t v149 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v147.i8);
          v149.i16[0] = *(_WORD *)&v48[2 * v149.u32[0]];
          v149.i16[1] = *(_WORD *)&v48[2 * v149.u32[1]];
          v149.i16[2] = *(_WORD *)&v48[2 * v149.u32[2]];
          v149.i16[3] = *(_WORD *)&v48[2 * v149.u32[3]];
          v149.i16[4] = *(_WORD *)&v48[2 * v148.u32[0]];
          v149.i16[5] = *(_WORD *)&v48[2 * v148.u32[1]];
          v149.i16[6] = *(_WORD *)&v48[2 * v148.u32[2]];
          v149.i16[7] = *(_WORD *)&v48[2 * v148.u32[3]];
          uint16x8_t v150 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16(v128, v128), v131, v335), (float16x8_t)0), v114));
          uint32x4_t v151 = vmovl_high_u16(v150);
          uint32x4_t v152 = vmovl_u16(*(uint16x4_t *)v150.i8);
          v128.i16[0] = *(_WORD *)&v48[2 * v152.u32[0]];
          v128.i16[1] = *(_WORD *)&v48[2 * v152.u32[1]];
          v128.i16[2] = *(_WORD *)&v48[2 * v152.u32[2]];
          v128.i16[3] = *(_WORD *)&v48[2 * v152.u32[3]];
          v128.i16[4] = *(_WORD *)&v48[2 * v151.u32[0]];
          v128.i16[5] = *(_WORD *)&v48[2 * v151.u32[1]];
          v128.i16[6] = *(_WORD *)&v48[2 * v151.u32[2]];
          v128.i16[7] = *(_WORD *)&v48[2 * v151.u32[3]];
          float16x8_t v153 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v136, v331), v140, v330), v124, v329);
          v154.i16[7] = v64.i16[7];
          float16x8_t v155 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v136, v328), v140, v327), v124, v326);
          float16x8_t v156 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v124, v323), v140, v324), v136, v325);
          float16x8_t v157 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v331), v149, v330), (float16x8_t)v128, v329);
          float16x8_t v158 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v328), v149, v327), (float16x8_t)v128, v326);
          float16x8_t v159 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v128, v323), v149, v324), v129, v325);
          uint16x8_t v160 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v153, (float16x8_t)0), v114));
          uint32x4_t v161 = vmovl_high_u16(v160);
          uint32x4_t v162 = vmovl_u16(*(uint16x4_t *)v160.i8);
          v154.i16[0] = *(_WORD *)&v61[2 * v162.u32[0]];
          v154.i16[1] = *(_WORD *)&v61[2 * v162.u32[1]];
          v154.i16[2] = *(_WORD *)&v61[2 * v162.u32[2]];
          v154.i16[3] = *(_WORD *)&v61[2 * v162.u32[3]];
          v154.i16[4] = *(_WORD *)&v61[2 * v161.u32[0]];
          v154.i16[5] = *(_WORD *)&v61[2 * v161.u32[1]];
          v154.i16[6] = *(_WORD *)&v61[2 * v161.u32[2]];
          uint16x8_t v163 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v155, (float16x8_t)0), v114));
          uint32x4_t v164 = vmovl_high_u16(v163);
          uint32x4_t v165 = vmovl_u16(*(uint16x4_t *)v163.i8);
          v140.i16[0] = *(_WORD *)&v61[2 * v165.u32[0]];
          v140.i16[1] = *(_WORD *)&v61[2 * v165.u32[1]];
          v140.i16[2] = *(_WORD *)&v61[2 * v165.u32[2]];
          v140.i16[3] = *(_WORD *)&v61[2 * v165.u32[3]];
          v140.i16[4] = *(_WORD *)&v61[2 * v164.u32[0]];
          v140.i16[5] = *(_WORD *)&v61[2 * v164.u32[1]];
          v140.i16[6] = *(_WORD *)&v61[2 * v164.u32[2]];
          float16x8_t v166 = (float16x8_t)vuzp1q_s16(v154, (int16x8_t)v140);
          v154.i16[7] = *(_WORD *)&v61[2 * v161.u32[3]];
          v140.i16[7] = *(_WORD *)&v61[2 * v164.u32[3]];
          uint16x8_t v167 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v156, (float16x8_t)0), v114));
          uint32x4_t v168 = vmovl_high_u16(v167);
          *(void *)&long long v169 = v168.u32[2];
          *((void *)&v169 + 1) = v168.u32[3];
          long long v170 = v169;
          *(void *)&long long v169 = v168.u32[0];
          *((void *)&v169 + 1) = v168.u32[1];
          long long v171 = v169;
          int16x8_t v172 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v167.i8);
          *((void *)&v169 + 1) = v172.u32[3];
          v172.i16[7] = (unint64_t)v172.u32[1] >> 48;
          v172.i16[0] = *(_WORD *)&v61[2 * v172.u32[0]];
          v172.i16[1] = *(_WORD *)&v61[2 * v172.u32[1]];
          v172.i16[2] = *(_WORD *)&v61[2 * v172.u32[2]];
          v172.i16[3] = *(_WORD *)&v61[2 * *((void *)&v169 + 1)];
          v172.i16[4] = *(_WORD *)&v61[2 * v171];
          v172.i16[5] = *(_WORD *)&v61[2 * *((void *)&v171 + 1)];
          v172.i16[6] = *(_WORD *)&v61[2 * v170];
          float16x8_t v173 = (float16x8_t)v172;
          v173.i16[7] = *(_WORD *)&v61[2 * *((void *)&v170 + 1)];
          uint16x8_t v174 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v157, (float16x8_t)0), v114));
          uint32x4_t v175 = vmovl_high_u16(v174);
          *(void *)&long long v169 = v175.u32[2];
          *((void *)&v169 + 1) = v175.u32[3];
          long long v176 = v169;
          *(void *)&long long v169 = v175.u32[0];
          *((void *)&v169 + 1) = v175.u32[1];
          long long v177 = v169;
          int16x8_t v178 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v174.i8);
          *((void *)&v169 + 1) = v178.u32[3];
          v178.i16[7] = (unint64_t)v178.u32[1] >> 48;
          v178.i16[0] = *(_WORD *)&v61[2 * v178.u32[0]];
          v178.i16[1] = *(_WORD *)&v61[2 * v178.u32[1]];
          v178.i16[2] = *(_WORD *)&v61[2 * v178.u32[2]];
          v178.i16[3] = *(_WORD *)&v61[2 * *((void *)&v169 + 1)];
          v178.i16[4] = *(_WORD *)&v61[2 * v177];
          v178.i16[5] = *(_WORD *)&v61[2 * *((void *)&v177 + 1)];
          v178.i16[6] = *(_WORD *)&v61[2 * v176];
          float16x8_t v179 = (float16x8_t)v178;
          v179.i16[7] = *(_WORD *)&v61[2 * *((void *)&v176 + 1)];
          uint16x8_t v180 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v158, (float16x8_t)0), v114));
          uint32x4_t v181 = vmovl_high_u16(v180);
          int16x8_t v182 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v180.i8);
          *(void *)&long long v169 = v181.u32[2];
          *((void *)&v169 + 1) = v181.u32[3];
          long long v183 = v169;
          *(void *)&long long v169 = v181.u32[0];
          *((void *)&v169 + 1) = v181.u32[1];
          long long v184 = v169;
          *((void *)&v169 + 1) = v182.u32[3];
          v182.i16[7] = (unint64_t)v182.u32[3] >> 48;
          v182.i16[0] = *(_WORD *)&v61[2 * v182.u32[0]];
          uint64_t v185 = *((void *)&v183 + 1);
          v182.i16[1] = *(_WORD *)&v61[2 * v182.u32[1]];
          v182.i16[2] = *(_WORD *)&v61[2 * v182.u32[2]];
          v182.i16[3] = *(_WORD *)&v61[2 * *((void *)&v169 + 1)];
          v182.i16[4] = *(_WORD *)&v61[2 * v184];
          v182.i16[5] = *(_WORD *)&v61[2 * *((void *)&v184 + 1)];
          v182.i16[6] = *(_WORD *)&v61[2 * v183];
          uint16x8_t v186 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v159, (float16x8_t)0), v114));
          uint32x4_t v187 = vmovl_u16(*(uint16x4_t *)v186.i8);
          uint64_t v188 = v187.u32[1];
          uint64_t v189 = v187.u32[0];
          float16x8_t v190 = (float16x8_t)v182;
          v190.i16[7] = *(_WORD *)&v61[2 * v185];
          int16x8_t v191 = (int16x8_t)vmovl_high_u16(v186);
          uint64_t v192 = v187.u32[3];
          uint64_t v193 = v187.u32[2];
          *(void *)&long long v169 = v191.u32[2];
          *((void *)&v169 + 1) = v191.u32[3];
          long long v194 = v169;
          *(void *)&long long v169 = v191.u32[0];
          v191.i16[7] = (unint64_t)v191.u32[1] >> 48;
          v191.i16[0] = *(_WORD *)&v61[2 * v189];
          float v195 = (__int16 *)&v61[2 * v191.u32[1]];
          v191.i16[1] = *(_WORD *)&v61[2 * v188];
          v191.i16[2] = *(_WORD *)&v61[2 * v193];
          v191.i16[3] = *(_WORD *)&v61[2 * v192];
          v191.i16[4] = *(_WORD *)&v61[2 * v169];
          v191.i16[5] = *v195;
          v191.i16[6] = *(_WORD *)&v61[2 * v194];
          float v196 = (__int16 *)&v61[2 * *((void *)&v194 + 1)];
          float16x8_t v197 = (float16x8_t)v191;
          v197.i16[7] = *v196;
          *(uint16x8_t *)uint64_t result = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v353, (float16x8_t)v154, v334), v140, v333), v173, v332), v353), v351)), v322);
          result += 16;
          *v113++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v353, v179, v334), v190, v333), v197, v332), v353), v351)), v322);
          int16x8_t v198 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v166, (float16x8_t)vuzp2q_s16(v154, (int16x8_t)v140)), (float16x8_t)vuzp1q_s16(v178, v182)), (float16x8_t)vuzp2q_s16((int16x8_t)v179, (int16x8_t)v190));
          float16x8_t v199 = vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v172, v172), (float16x8_t)vtrn2q_s16((int16x8_t)v173, (int16x8_t)v173)), (float16x8_t)vtrn1q_s16(v191, v191)), (float16x8_t)vtrn2q_s16((int16x8_t)v197, (int16x8_t)v197));
          uint16x8_t v89 = v368;
          *(uint16x8_t *)(v82 + v110) = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v352, v321, (float16x8_t)vzip1q_s16(v198, v198)), v369, (float16x8_t)vzip2q_s16(v198, v198)), v354, v199), v350), v349)), v322);
          v111 += 8;
          v110 += 16;
        }
        while (v111 < (int)v18 - 7);
        v86 += v110;
        unsigned int v200 = &v91[v110];
        float v201 = (_WORD *)(v82 + v110);
        unint64_t v202 = v18 & 0xFFFFFFF8;
        uint64_t v30 = v316;
        float v37 = v314;
        float v52 = v315;
        int32x4_t v203 = (int32x4_t)v369;
        v10.i32[0] = v366;
        float v53 = v313;
      }
      for (; v18 > v202; float16x8_t v68 = v358)
      {
        float v204 = (float)(*((unsigned __int16 *)v86 + 1) >> v88) - v38;
        float v205 = v10.f32[1] * v204;
        float v206 = _S27 * (float)((float)(v87->u16[0] >> v88) - v37);
        float v207 = 8191.0;
        if ((float)((float)(v10.f32[1] * v204) + v206) <= 8191.0)
        {
          float v207 = v205 + v206;
          if ((float)((float)(v10.f32[1] * v204) + v206) < 0.0) {
            float v207 = 0.0;
          }
        }
        float v208 = (float)(*(unsigned __int16 *)v86 >> v88) - v38;
        float v209 = (float)(v12.f32[1] * v204) + (float)(v208 * v12.f32[0]);
        float v210 = 8191.0;
        if ((float)(v206 + v209) <= 8191.0)
        {
          float v210 = v206 + v209;
          if ((float)(v206 + v209) < 0.0) {
            float v210 = 0.0;
          }
        }
        float v211 = v10.f32[0] * v208;
        float v212 = v211 + v206;
        float v213 = 8191.0;
        if (v212 <= 8191.0)
        {
          float v213 = v212;
          if (v212 < 0.0) {
            float v213 = 0.0;
          }
        }
        float v214 = _S27 * (float)((float)(v87->u16[1] >> v88) - v37);
        float v215 = v205 + v214;
        float v216 = 8191.0;
        if (v215 <= 8191.0)
        {
          float v216 = v215;
          if (v215 < 0.0) {
            float v216 = 0.0;
          }
        }
        float v217 = 8191.0;
        if ((float)(v209 + v214) <= 8191.0)
        {
          float v217 = v209 + v214;
          if ((float)(v209 + v214) < 0.0) {
            float v217 = 0.0;
          }
        }
        float v218 = 8191.0;
        if ((float)(v211 + v214) <= 8191.0)
        {
          float v218 = v211 + v214;
          if ((float)(v211 + v214) < 0.0) {
            float v218 = 0.0;
          }
        }
        float v219 = (float)(*((unsigned __int16 *)v200 + 1) >> v88) - v38;
        float v220 = v10.f32[1] * v219;
        float v221 = _S27 * (float)((float)(v112->u16[0] >> v88) - v37);
        float v222 = 8191.0;
        if ((float)((float)(v10.f32[1] * v219) + v221) <= 8191.0)
        {
          float v222 = v220 + v221;
          if ((float)((float)(v10.f32[1] * v219) + v221) < 0.0) {
            float v222 = 0.0;
          }
        }
        float v223 = (float)(*(unsigned __int16 *)v200 >> v88) - v38;
        float v224 = (float)(v12.f32[1] * v219) + (float)(v223 * v12.f32[0]);
        float v225 = 8191.0;
        if ((float)(v221 + v224) <= 8191.0)
        {
          float v225 = v221 + v224;
          if ((float)(v221 + v224) < 0.0) {
            float v225 = 0.0;
          }
        }
        float v226 = v10.f32[0] * v223;
        float v227 = v226 + v221;
        BOOL v228 = (float)(v226 + v221) <= 8191.0;
        float v229 = 8191.0;
        if (v228)
        {
          float v229 = v227;
          if (v227 < 0.0) {
            float v229 = 0.0;
          }
        }
        float v230 = _S27 * (float)((float)(v112->u16[1] >> v88) - v37);
        float v231 = v220 + v230;
        float v232 = 8191.0;
        if (v231 <= 8191.0)
        {
          float v232 = v231;
          if (v231 < 0.0) {
            float v232 = 0.0;
          }
        }
        float v233 = v224 + v230;
        BOOL v228 = (float)(v224 + v230) <= 8191.0;
        float v234 = 8191.0;
        if (v228)
        {
          float v234 = v233;
          if (v233 < 0.0) {
            float v234 = 0.0;
          }
        }
        float v235 = v52;
        float v236 = v37;
        float v237 = v226 + v230;
        BOOL v228 = (float)(v226 + v230) <= 8191.0;
        float v238 = 8191.0;
        if (v228)
        {
          float v238 = v237;
          if (v237 < 0.0) {
            float v238 = 0.0;
          }
        }
        _H3 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v207, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H7 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v210, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        _H18 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v213, 0.0), 8191.0))];
        _H16 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v216, 0.0), 8191.0))];
        __asm
        {
          FCVT            S18, H18
          FCVT            S16, H16
        }
        _H20 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v217, 0.0), 8191.0))];
        __asm { FCVT            S20, H20 }
        _H21 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v218, 0.0), 8191.0))];
        __asm { FCVT            S21, H21 }
        _H25 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v222, 0.0), 8191.0))];
        __asm { FCVT            S25, H25 }
        _H1 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v225, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v229, 0.0), 8191.0))];
        _H19 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v232, 0.0), 8191.0))];
        __asm
        {
          FCVT            S2, H2
          FCVT            S19, H19
        }
        _H4 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v234, 0.0), 8191.0))];
        __asm { FCVT            S4, H4 }
        _H5 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v238, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        float v263 = (float)((float)(v347 * _S7) + (float)(_S3 * v348)) + (float)(_S18 * v346);
        float v264 = (float)((float)(v343 * _S7) + (float)(_S3 * v359)) + (float)(_S18 * v341);
        _S3 = (float)((float)(v337 * _S7) + (float)(_S3 * v339)) + (float)(_S18 * v336);
        _S7 = (float)((float)(v347 * _S20) + (float)(_S16 * v348)) + (float)(_S21 * v346);
        float v267 = (float)((float)(v343 * _S20) + (float)(_S16 * v359)) + (float)(_S21 * v341);
        float v268 = (float)((float)(v337 * _S20) + (float)(_S16 * v339)) + (float)(_S21 * v336);
        float v269 = (float)((float)(v347 * _S1) + (float)(_S25 * v348)) + (float)(_S2 * v346);
        float v270 = (float)((float)(v343 * _S1) + (float)(_S25 * v359)) + (float)(_S2 * v341);
        float v271 = (float)((float)(v337 * _S1) + (float)(_S25 * v339)) + (float)(_S2 * v336);
        float v272 = (float)((float)(v347 * _S4) + (float)(_S19 * v348)) + (float)(_S5 * v346);
        float v273 = (float)((float)(v343 * _S4) + (float)(_S19 * v359)) + (float)(_S5 * v341);
        float v274 = (float)((float)(v337 * _S4) + (float)(_S19 * v339)) + (float)(_S5 * v336);
        LOWORD(_S1) = *(_WORD *)&v61[2 * llroundf(fminf(fmaxf(v263, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        LOWORD(_S2) = *(_WORD *)&v61[2 * llroundf(fminf(fmaxf(v264, 0.0), 8191.0))];
        __asm { FCVT            S16, H2 }
        LOWORD(_S2) = *(_WORD *)&v61[2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
        LOWORD(_S3) = *(_WORD *)&v61[2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0))];
        __asm
        {
          FCVT            S2, H2
          FCVT            S18, H3
        }
        LOWORD(_S3) = *(_WORD *)&v61[2 * llroundf(fminf(fmaxf(v267, 0.0), 8191.0))];
        unsigned int v279 = llroundf(fminf(fmaxf(v268, 0.0), 8191.0));
        __asm { FCVT            S20, H3 }
        LOWORD(_S3) = *(_WORD *)&v61[2 * v279];
        __asm { FCVT            S3, H3 }
        LOWORD(_S4) = *(_WORD *)&v61[2 * llroundf(fminf(fmaxf(v269, 0.0), 8191.0))];
        __asm { FCVT            S4, H4 }
        LOWORD(_S7) = *(_WORD *)&v61[2 * llroundf(fminf(fmaxf(v270, 0.0), 8191.0))];
        __asm { FCVT            S21, H7 }
        LOWORD(_S7) = *(_WORD *)&v61[2 * llroundf(fminf(fmaxf(v271, 0.0), 8191.0))];
        LOWORD(_S19) = *(_WORD *)&v61[2 * llroundf(fminf(fmaxf(v272, 0.0), 8191.0))];
        __asm
        {
          FCVT            S25, H7
          FCVT            S7, H19
        }
        LOWORD(_S19) = *(_WORD *)&v61[2 * llroundf(fminf(fmaxf(v273, 0.0), 8191.0))];
        unsigned int v286 = llroundf(fminf(fmaxf(v274, 0.0), 8191.0));
        __asm { FCVT            S5, H19 }
        LOWORD(_S19) = *(_WORD *)&v61[2 * v286];
        __asm { FCVT            S19, H19 }
        float v289 = (float)((float)((float)(v363 * _S16) + (float)(v364 * _S1)) + (float)(v365 * _S2)) + v47;
        if (v289 < v47) {
          float v290 = v47;
        }
        else {
          float v290 = (float)((float)((float)(v363 * _S16) + (float)(v364 * _S1)) + (float)(v365 * _S2)) + v47;
        }
        BOOL v228 = v289 <= v342;
        float v291 = (float)((float)((float)(v363 * _S20) + (float)(v364 * _S18)) + (float)(v365 * _S3)) + v47;
        if (!v228) {
          float v290 = v342;
        }
        unsigned int v292 = llroundf(v290);
        if (v291 < v47) {
          float v293 = v47;
        }
        else {
          float v293 = (float)((float)((float)(v363 * _S20) + (float)(v364 * _S18)) + (float)(v365 * _S3)) + v47;
        }
        BOOL v228 = v291 <= v342;
        float v294 = (float)((float)((float)(v363 * _S21) + (float)(v364 * _S4)) + (float)(v365 * _S25)) + v47;
        if (!v228) {
          float v293 = v342;
        }
        unsigned int v295 = llroundf(v293);
        if (v294 < v47) {
          float v296 = v47;
        }
        else {
          float v296 = (float)((float)((float)(v363 * _S21) + (float)(v364 * _S4)) + (float)(v365 * _S25)) + v47;
        }
        BOOL v228 = v294 <= v342;
        float v297 = (float)((float)((float)(v363 * _S5) + (float)(v364 * _S7)) + (float)(v365 * _S19)) + v47;
        if (!v228) {
          float v296 = v342;
        }
        unsigned int v298 = llroundf(v296);
        if (v297 < v47) {
          float v299 = v47;
        }
        else {
          float v299 = (float)((float)((float)(v363 * _S5) + (float)(v364 * _S7)) + (float)(v365 * _S19)) + v47;
        }
        if (v297 <= v342) {
          float v300 = v299;
        }
        else {
          float v300 = v342;
        }
        float v301 = (float)((float)(_S1 + _S18) + _S4) + _S7;
        float v302 = (float)((float)(_S16 + _S20) + _S21) + _S5;
        *(_WORD *)uint64_t result = v292 << v90;
        *((_WORD *)result + 1) = v295 << v90;
        v113->i16[0] = v298 << v90;
        v113->i16[1] = llroundf(v300) << v90;
        float v52 = v235;
        float v303 = (float)((float)(_S2 + _S3) + _S25) + _S19;
        float v304 = (float)((float)(v235 + (float)(v301 * *(float *)&v362)) + (float)(v302 * *(float *)&v361))
             + (float)(v303 * *(float *)&v360);
        float v305 = v53;
        if (v304 <= v53)
        {
          float v305 = (float)((float)(v235 + (float)(v301 * *(float *)&v362)) + (float)(v302 * *(float *)&v361))
               + (float)(v303 * *(float *)&v360);
          if (v304 < v367) {
            float v305 = v367;
          }
        }
        float v306 = (float)((float)(v235 + (float)(v301 * *((float *)&v362 + 1))) + (float)(v302 * *((float *)&v361 + 1)))
             + (float)(v303 * *((float *)&v360 + 1));
        *float v201 = llroundf(v305) << v90;
        float v307 = v53;
        float v37 = v236;
        v10.i32[0] = v366;
        uint16x8_t v89 = v368;
        int32x4_t v203 = (int32x4_t)v369;
        if (v306 <= v53)
        {
          float v307 = v306;
          if (v306 < v367) {
            float v307 = v367;
          }
        }
        v202 += 2;
        v86 += 4;
        float v87 = (uint16x8_t *)((char *)v87 + 4);
        v200 += 4;
        float16x8_t v112 = (uint16x8_t *)((char *)v112 + 4);
        v201[1] = llroundf(v307) << v90;
        result += 4;
        float16x8_t v113 = (uint16x8_t *)((char *)v113 + 4);
        v201 += 2;
        float v38 = v338;
        _S27 = v340;
        float16x8_t v62 = v344;
        float16x8_t v64 = v345;
        v12.i32[0] = v355;
        float16x8_t v66 = v356;
        float16x8_t v69 = v357;
      }
      int32x4_t v76 = v203;
      float v87 = (uint16x8_t *)&v107[v30];
      uint64_t v32 = v319;
      uint64_t v29 = v320;
      float v86 = &v108[v320];
      uint64_t result = &v109[v319];
      v82 += v318;
      v17 += 2;
      v91 += v317;
    }
    while (v21 > v17);
    if (v312 && v311)
    {
      size_t v308 = 2 * v18;
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v49, v31, v308);
        v31 += v309;
        v49 += v310;
        --v21;
      }
      while (v21);
    }
    else if (v311)
    {
      do
      {
        if (v18) {
          uint64_t result = (unsigned __int8 *)memset(v49, 255, 2 * v18);
        }
        v49 += v310;
        --v21;
      }
      while (v21);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 36);
    uint64_t v12 = *(void *)(result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = *((void *)result + 14);
    uint64_t v15 = (uint64_t *)*((void *)result + 16);
    uint64_t v16 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v17 = *((void *)result + 19);
    uint64_t v19 = (void *)*((void *)result + 7);
    uint64_t v18 = (uint64_t *)*((void *)result + 8);
    uint64_t v20 = (uint64_t *)*((void *)result + 17);
    uint64_t v21 = *v18;
    uint64_t v22 = v18[1];
    uint64_t v168 = v18[2];
    uint64_t v170 = v19[2];
    uint64_t v23 = (char *)(v170 + v168 * v12 + 2 * v11);
    uint64_t v24 = *v20;
    uint64_t v25 = v20[1];
    uint64_t v26 = v20[2];
    uint64_t v169 = v15[2];
    uint64_t v27 = (char *)(v169 + v26 * v16 + 2 * v14);
    *(float *)&unsigned int v28 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    float v29 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v30 = (float)LODWORD(a5);
    float v31 = *(float *)&v28 * *(float *)v17;
    float v32 = *(float *)&v28 * *(float *)(v17 + 8);
    float v33 = *(float *)&v28 * *(float *)(v17 + 16);
    float v34 = *(float *)&v28 * *(float *)(v17 + 20);
    float v35 = *(float *)&v28 * *(float *)(v17 + 28);
    LOWORD(v28) = *(_WORD *)(v17 + 144);
    float v36 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v17 + 146);
    float v37 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v17 + 148);
    float v38 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v17 + 150);
    float v39 = (float)v28;
    float v195 = v39;
    LOWORD(v39) = *(_WORD *)(v17 + 152);
    float v188 = *(float *)(v17 + 40);
    float v189 = *(float *)(v17 + 36);
    float v186 = *(float *)(v17 + 48) * 0.25;
    float v187 = *(float *)(v17 + 44);
    float v184 = *(float *)(v17 + 56) * 0.25;
    float v185 = *(float *)(v17 + 52) * 0.25;
    float v182 = *(float *)(v17 + 64) * 0.25;
    float v183 = *(float *)(v17 + 60) * 0.25;
    float v180 = *(float *)(v17 + 68) * 0.25;
    float v181 = *(float *)(v17 + 72);
    float v178 = *(float *)(v17 + 80);
    float v179 = *(float *)(v17 + 76);
    float v176 = *(float *)(v17 + 88);
    float v177 = *(float *)(v17 + 84);
    float v174 = *(float *)(v17 + 96);
    float v175 = *(float *)(v17 + 92);
    float v172 = *(float *)(v17 + 104);
    float v173 = *(float *)(v17 + 100);
    uint64_t v40 = v17 + 164;
    uint64_t v41 = v17 + 16548;
    uint64_t v42 = v19[1];
    float32x2_t v43 = (char *)(*v19 + *v18 * v12 + 2 * v11);
    uint64_t v44 = v42 + v22 * v12 + 2 * v11;
    if (!v42) {
      uint64_t v44 = 0;
    }
    uint64_t v45 = *v15;
    uint64_t v46 = v15[1];
    uint64_t result = (unsigned __int8 *)(v45 + v24 * v16 + 2 * v14);
    unsigned int v47 = *(unsigned __int8 *)(v17 + 132);
    _CF = v47 >= 0x11;
    char v49 = 16 - v47;
    if (_CF) {
      char v49 = 0;
    }
    unsigned int v50 = *(unsigned __int8 *)(v17 + 124);
    if (v50 >= 0x11) {
      char v51 = 0;
    }
    else {
      char v51 = 16 - v50;
    }
    uint64_t v52 = v46 + v20[1] * (v16 / 2) + 2 * v14;
    float v53 = (unsigned __int16 *)(v44 + 2);
    float v193 = v31;
    float v194 = (float)LODWORD(a5);
    float v191 = v37;
    float v192 = v32;
    float v190 = (float)LODWORD(v39);
    float v171 = v35;
    do
    {
      unsigned int v54 = &result[v24];
      unsigned __int8 v55 = &v43[v21];
      if (v10)
      {
        unint64_t v56 = 0;
        unsigned __int8 v57 = v53;
        uint64_t v58 = &v43[v21];
        uint64_t v59 = &result[v24];
        do
        {
          float v60 = (float)(*v57 >> v51) - v30;
          float v61 = v32 * v60;
          float v62 = v31 * (float)((float)(*(unsigned __int16 *)v43 >> v51) - v29);
          float v63 = (float)(v32 * v60) + v62;
          float v64 = 8191.0;
          if (v63 <= 8191.0)
          {
            float v64 = (float)(v32 * v60) + v62;
            if (v63 < 0.0) {
              float v64 = 0.0;
            }
          }
          float v65 = (float)(*(v57 - 1) >> v51) - v30;
          float v66 = (float)(v34 * v60) + (float)(v65 * v33);
          float v67 = 8191.0;
          if ((float)(v62 + v66) <= 8191.0)
          {
            float v67 = v62 + v66;
            if ((float)(v62 + v66) < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = v35 * v65;
          float v69 = 8191.0;
          if ((float)(v68 + v62) <= 8191.0)
          {
            float v69 = v68 + v62;
            if ((float)(v68 + v62) < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = v31 * (float)((float)(*((unsigned __int16 *)v43 + 1) >> v51) - v29);
          float v71 = 8191.0;
          if ((float)(v61 + v70) <= 8191.0)
          {
            float v71 = v61 + v70;
            if ((float)(v61 + v70) < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = 8191.0;
          if ((float)(v66 + v70) <= 8191.0)
          {
            float v72 = v66 + v70;
            if ((float)(v66 + v70) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = 8191.0;
          if ((float)(v68 + v70) <= 8191.0)
          {
            float v73 = v68 + v70;
            if ((float)(v68 + v70) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = (float)(*(unsigned __int16 *)((char *)v57 + v22) >> v51) - v30;
          float v75 = v32 * v74;
          float v76 = v31 * (float)((float)(*(unsigned __int16 *)v58 >> v51) - v29);
          float v77 = (float)(v32 * v74) + v76;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = (float)(*(unsigned __int16 *)((char *)v57 + v22 - 2) >> v51) - v30;
          float v80 = (float)(v34 * v74) + (float)(v79 * v33);
          float v81 = 8191.0;
          if ((float)(v76 + v80) <= 8191.0)
          {
            float v81 = v76 + v80;
            if ((float)(v76 + v80) < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v35 * v79;
          float v83 = v82 + v76;
          BOOL v84 = (float)(v82 + v76) <= 8191.0;
          float v85 = 8191.0;
          if (v84)
          {
            float v85 = v83;
            if (v83 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v31 * (float)((float)(*((unsigned __int16 *)v58 + 1) >> v51) - v29);
          float v87 = v75 + v86;
          float v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v80 + v86;
          BOOL v84 = (float)(v80 + v86) <= 8191.0;
          float v90 = 8191.0;
          if (v84)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v29;
          float v92 = v82 + v86;
          float v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H6 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H24 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H25
          }
          _H26 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H19 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H4 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H5
            FCVT            S2, H2
          }
          _H7 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H17 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          float v121 = (float)((float)(v179 * _S6) + (float)(_S1 * v181)) + (float)(_S24 * v178);
          float v122 = (float)((float)(v176 * _S6) + (float)(_S1 * v177)) + (float)(_S24 * v175);
          _S1 = (float)((float)(v173 * _S6) + (float)(_S1 * v174)) + (float)(_S24 * v172);
          _S6 = (float)((float)(v179 * _S26) + (float)(_S25 * v181)) + (float)(_S27 * v178);
          _S3 = (float)((float)(v176 * _S26) + (float)(_S25 * v177)) + (float)(_S27 * v175);
          float v126 = (float)((float)(v173 * _S26) + (float)(_S25 * v174)) + (float)(_S27 * v172);
          float v127 = (float)((float)(v179 * _S4) + (float)(_S19 * v181)) + (float)(_S5 * v178);
          float v128 = (float)((float)(v176 * _S4) + (float)(_S19 * v177)) + (float)(_S5 * v175);
          float v129 = (float)((float)(v173 * _S4) + (float)(_S19 * v174)) + (float)(_S5 * v172);
          float v130 = (float)((float)(v179 * _S7) + (float)(_S2 * v181)) + (float)(_S17 * v178);
          float v131 = (float)((float)(v176 * _S7) + (float)(_S2 * v177)) + (float)(_S17 * v175);
          float v132 = (float)((float)(v173 * _S7) + (float)(_S2 * v174)) + (float)(_S17 * v172);
          LOWORD(_S4) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm { FCVT            S19, H5 }
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H1
            FCVT            S24, H6
          }
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          unsigned int v137 = llroundf(fminf(fmaxf(v126, 0.0), 8191.0));
          __asm { FCVT            S25, H1 }
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * v137);
          __asm { FCVT            S6, H1 }
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S7, H1 }
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H1
            FCVT            S1, H3
          }
          LOWORD(_S3) = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          unsigned int v144 = llroundf(fminf(fmaxf(v132, 0.0), 8191.0));
          __asm { FCVT            S2, H3 }
          LOWORD(_S3) = *(_WORD *)(v41 + 2 * v144);
          __asm { FCVT            S3, H3 }
          float v147 = (float)((float)((float)(v188 * _S19) + (float)(v189 * _S4)) + (float)(v187 * _S5)) + v36;
          if (v147 < v36) {
            float v148 = v36;
          }
          else {
            float v148 = (float)((float)((float)(v188 * _S19) + (float)(v189 * _S4)) + (float)(v187 * _S5)) + v36;
          }
          BOOL v84 = v147 <= v38;
          float v149 = (float)((float)((float)(v188 * _S25) + (float)(v189 * _S24)) + (float)(v187 * _S6)) + v36;
          if (!v84) {
            float v148 = v38;
          }
          unsigned int v150 = llroundf(v148);
          if (v149 < v36) {
            float v151 = v36;
          }
          else {
            float v151 = (float)((float)((float)(v188 * _S25) + (float)(v189 * _S24)) + (float)(v187 * _S6)) + v36;
          }
          BOOL v84 = v149 <= v38;
          float v152 = (float)((float)((float)(v188 * _S26) + (float)(v189 * _S7)) + (float)(v187 * _S27)) + v36;
          if (!v84) {
            float v151 = v38;
          }
          unsigned int v153 = llroundf(v151);
          if (v152 < v36) {
            float v154 = v36;
          }
          else {
            float v154 = (float)((float)((float)(v188 * _S26) + (float)(v189 * _S7)) + (float)(v187 * _S27)) + v36;
          }
          BOOL v84 = v152 <= v38;
          float v155 = (float)((float)((float)(v188 * _S2) + (float)(v189 * _S1)) + (float)(v187 * _S3)) + v36;
          if (!v84) {
            float v154 = v38;
          }
          unsigned int v156 = llroundf(v154);
          if (v155 < v36) {
            float v157 = v36;
          }
          else {
            float v157 = (float)((float)((float)(v188 * _S2) + (float)(v189 * _S1)) + (float)(v187 * _S3)) + v36;
          }
          if (v155 <= v38) {
            float v158 = v157;
          }
          else {
            float v158 = v38;
          }
          float v159 = (float)((float)(_S4 + _S24) + _S7) + _S1;
          float v160 = (float)((float)(_S19 + _S25) + _S26) + _S2;
          *(_WORD *)uint64_t result = v150 << v49;
          *((_WORD *)result + 1) = v153 << v49;
          *(_WORD *)uint64_t v59 = v156 << v49;
          *((_WORD *)v59 + 1) = llroundf(v158) << v49;
          float v161 = (float)((float)(_S5 + _S6) + _S27) + _S3;
          float v162 = (float)((float)(v191 + (float)(v159 * v186)) + (float)(v160 * v185)) + (float)(v161 * v184);
          float v163 = v190;
          if (v162 <= v190)
          {
            float v163 = (float)((float)(v191 + (float)(v159 * v186)) + (float)(v160 * v185)) + (float)(v161 * v184);
            if (v162 < v195) {
              float v163 = v195;
            }
          }
          uint32x4_t v164 = (_WORD *)(v52 + 2 * v56);
          float v165 = (float)((float)(v191 + (float)(v159 * v183)) + (float)(v160 * v182)) + (float)(v161 * v180);
          _WORD *v164 = llroundf(v163) << v49;
          float v166 = v190;
          float v29 = v91;
          float v30 = v194;
          float v32 = v192;
          float v35 = v171;
          if (v165 <= v190)
          {
            float v166 = v165;
            if (v165 < v195) {
              float v166 = v195;
            }
          }
          v43 += 4;
          v57 += 2;
          v58 += 4;
          result += 4;
          v59 += 4;
          v164[1] = llroundf(v166) << v49;
          v56 += 2;
          float v31 = v193;
        }
        while (v10 > v56);
      }
      float32x2_t v43 = &v55[v21];
      uint64_t result = &v54[v24];
      v52 += v25;
      v9 += 2;
      v53 += v22;
    }
    while (v13 > v9);
    if (v170 && v169)
    {
      size_t v167 = 2 * v10;
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v27, v23, v167);
        v23 += v168;
        v27 += v26;
        --v13;
      }
      while (v13);
    }
    else if (v169)
    {
      do
      {
        if (v10) {
          uint64_t result = (unsigned __int8 *)memset(v27, 255, 2 * v10);
        }
        v27 += v26;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_xf420_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_xf420_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, float32x4_t _Q0)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = 2 * *result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    unint64_t v11 = 0;
    unint64_t v12 = *(void *)(result + 20);
    uint64_t v13 = *(void *)(result + 36);
    uint64_t v14 = *(void *)(result + 44) + 2 * v9;
    unint64_t v15 = 2 * v10 - 2 * v9;
    uint64_t v16 = *((void *)result + 14);
    uint64_t v17 = (uint64_t *)*((void *)result + 16);
    uint64_t v18 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v8);
    uint64_t v19 = (float32x2_t *)*((void *)result + 19);
    uint64_t v20 = (void *)*((void *)result + 7);
    uint64_t v21 = (uint64_t *)*((void *)result + 8);
    size_t v22 = (uint64_t *)*((void *)result + 17);
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v182 = v21[2];
    uint64_t v185 = v20[2];
    uint64_t v25 = (char *)(v185 + v182 * v14 + 2 * v13);
    uint64_t v26 = *v22;
    uint64_t v27 = v22[1];
    uint64_t v183 = v22[2];
    uint64_t v184 = v17[2];
    unsigned int v28 = v19[17].u16[2];
    unsigned int v29 = v19[17].u16[3];
    v30.i32[0] = v19[3].i32[1];
    unsigned int v31 = v19[18].u16[0];
    unsigned int v32 = v19[18].u16[1];
    unsigned int v33 = v19[18].u16[2];
    unsigned int v34 = v19[18].u16[3];
    unsigned int v35 = v19[19].u16[0];
    _Q0.i32[0] = v19[4].i32[1];
    _S2 = v19[5].f32[1];
    v37.i32[0] = v19[6].i32[0];
    v39.i32[0] = v19[6].i32[1];
    v38.i32[0] = v19[7].i32[0];
    float v40 = (float)v28;
    *(short float *)v6.i16 = (short float)v28;
    v30.i32[1] = v19[1].i32[0];
    uint64_t v41 = (char *)(v184 + v183 * v18 + 2 * v16);
    float v42 = (float)v19[17].u32[0] / (float)v19[16].u32[0];
    float v206 = (float)v29;
    float v43 = (float)v31;
    float v44 = (float)v32;
    float v45 = (float)v33;
    float v204 = (float)v34;
    float v46 = (float)v35;
    float v209 = v42 * v19->f32[0];
    float v210 = v40;
    __asm { FCVT            H8, S1 }
    float16x8_t v52 = (float16x8_t)vdupq_lane_s16(v6, 0);
    *(float32x2_t *)v3.f32 = vmul_n_f32(v30, v42);
    _Q7.i64[1] = _Q0.i64[0];
    float16x8_t v53 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    *(float32x2_t *)v4.f32 = vmul_n_f32(v19[2], v42);
    *(short float *)_Q7.i16 = -(short float)v29;
    float16x8_t v54 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v55 = vmulq_n_f16(v53, *(short float *)_Q7.i16);
    float16x8_t v189 = vmulq_n_f16(v54, *(short float *)_Q7.i16);
    float v208 = _Q0.f32[0];
    __asm { FCVT            H0, S0 }
    short float v188 = *(short float *)_Q0.i16;
    float v207 = v19[5].f32[0];
    __asm { FCVT            H12, S26 }
    v37.i32[1] = v19[7].i32[1];
    __asm { FMOV            V7.2S, #0.25 }
    *(float32x2_t *)_Q0.f32 = vmul_f32(v37, *(float32x2_t *)_Q7.f32);
    v57.i64[1] = _Q0.i64[0];
    float16x8_t v56 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(_Q0), 0);
    v39.i32[1] = v19[8].i32[0];
    *(float32x2_t *)v57.f32 = vmul_f32(v39, *(float32x2_t *)_Q7.f32);
    int32x4_t v58 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v57), 0);
    v38.i32[1] = v19[8].i32[1];
    *(float32x2_t *)_Q7.f32 = vmul_f32(v38, *(float32x2_t *)_Q7.f32);
    int16x4_t v60 = (int16x4_t)vcvt_f16_f32(_Q7);
    float16x8_t v61 = (float16x8_t)vdupq_lane_s32((int32x2_t)v60, 0);
    *(short float *)v60.i16 = (short float)v31;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(v60, 0);
    *(short float *)v60.i16 = (short float)v32;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(v60, 0);
    *(short float *)v60.i16 = (short float)v33;
    float16x8_t v64 = (float16x8_t)vdupq_lane_s16(v60, 0);
    *(short float *)v60.i16 = (short float)v34;
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(v60, 0);
    *(short float *)v60.i16 = (short float)v35;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(v60, 0);
    unsigned int v67 = v19[16].u8[4];
    if (v67 >= 0x11) {
      unsigned __int8 v68 = 0;
    }
    else {
      unsigned __int8 v68 = 16 - v67;
    }
    unsigned int v69 = v19[15].u8[4];
    if (v69 >= 0x11) {
      unsigned __int8 v70 = 0;
    }
    else {
      unsigned __int8 v70 = 16 - v69;
    }
    if (v18 >= 0) {
      uint64_t v71 = v18;
    }
    else {
      uint64_t v71 = v18 + 1;
    }
    uint64_t v72 = *v17;
    uint64_t v199 = v27;
    uint64_t v73 = v17[1] + v27 * (v71 >> 1) + 2 * v16;
    float v74 = (uint16x8_t *)(v72 + v26 * v18 + 2 * v16);
    float v77 = v20;
    uint64_t v76 = *v20;
    uint64_t v75 = v77[1];
    if (v75) {
      uint64_t result = (unsigned __int8 *)(v75 + v24 * v14 + 2 * v13);
    }
    else {
      uint64_t result = 0;
    }
    float v78 = (uint16x8_t *)(v76 + v23 * v14 + 2 * v13);
    unsigned __int8 v79 = v70;
    unsigned int v80 = -v70;
    unsigned __int8 v81 = v68;
    float v82 = &result[v24];
    uint16x8_t v83 = (uint16x8_t)vdupq_n_s16(v80);
    uint16x8_t v84 = (uint16x8_t)vdupq_n_s16(v68);
    float v85 = _S2;
    __asm { FCVT            H11, S2 }
    float32_t v190 = v3.f32[1];
    float v205 = v4.f32[1];
    float v202 = v57.f32[0];
    float v203 = _Q0.f32[0];
    float v200 = v57.f32[1];
    float v201 = _Q0.f32[1];
    uint64_t v87 = _Q7.i64[0];
    float16x8_t v197 = v56;
    float16x8_t v198 = v54;
    float16x8_t v195 = v64;
    float16x8_t v196 = v61;
    float16x8_t v194 = v66;
    short float v192 = _H11;
    uint16x8_t v193 = v84;
    float16x8_t v191 = v62;
    float32x4_t v186 = v3;
    float32x4_t v187 = v4;
    do
    {
      float v88 = &v78->i8[v23];
      float v89 = &result[v24];
      float v90 = &v74->i8[v26];
      if ((int)v12 < 8)
      {
        unint64_t v122 = 0;
        float v121 = (_WORD *)v73;
        float v94 = (uint16x8_t *)((char *)v74 + v26);
        uint16x8_t v120 = &result[v24];
        float v93 = (uint16x8_t *)((char *)v78 + v23);
        float v123 = v190;
      }
      else
      {
        uint64_t v91 = 0;
        int v92 = 0;
        float v93 = (uint16x8_t *)((char *)v78 + v23);
        float v94 = (uint16x8_t *)((char *)v74 + v26);
        do
        {
          float16x8_t v95 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)&result[v91], v83));
          int8x16_t v96 = (int8x16_t)vmlaq_f16(v55, v53, v95);
          int8x16_t v97 = (int8x16_t)vmlaq_f16(v189, v54, v95);
          v95.i64[0] = vextq_s8(v96, v96, 8uLL).u64[0];
          *(int16x4_t *)v98.i8 = vuzp2_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v95.i8);
          v98.i64[1] = v189.i64[0];
          *(int16x4_t *)v95.i8 = vuzp1_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v95.i8);
          v95.i64[1] = v189.i64[0];
          float16x8_t v99 = (float16x8_t)v58;
          float16x8_t v100 = (float16x8_t)vzip1q_s16((int16x8_t)v95, (int16x8_t)v95);
          v95.i64[0] = vextq_s8(v97, v97, 8uLL).u64[0];
          *(float16x4_t *)v95.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v95.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v95.i8));
          v95.i64[1] = v189.i64[0];
          uint16x8_t v101 = *v78++;
          float16x8_t v102 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v101, v83)), v52);
          float16x8_t v103 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v98, v98), v102, _H8);
          float16x8_t v104 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v95, (int16x8_t)v95), v102, _H8);
          float16x8_t v105 = vmlaq_n_f16(v100, v102, _H8);
          float16x8_t v106 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)&v82[v91], v83));
          int16x8_t v107 = (int16x8_t)vmlaq_f16(v55, v53, v106);
          int8x16_t v108 = (int8x16_t)vmlaq_f16(v189, v54, v106);
          v106.i64[0] = vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL).u64[0];
          float16x8_t v109 = v54;
          *(int16x4_t *)v110.i8 = vuzp1_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v106.i8);
          *(int16x4_t *)v106.i8 = vuzp2_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v106.i8);
          v106.i64[1] = v189.i64[0];
          v110.i64[1] = v189.i64[0];
          v107.i64[0] = vextq_s8(v108, v108, 8uLL).u64[0];
          *(float16x4_t *)v107.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v107.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v107.i8));
          v107.i64[1] = v189.i64[0];
          float16x8_t v111 = (float16x8_t)vzip1q_s16(v110, v110);
          uint16x8_t v112 = *v93++;
          float16x8_t v113 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v112, v83)), v52);
          float16x8_t v114 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v106, (int16x8_t)v106), v113, _H8);
          float16x8_t v115 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v107, v107), v113, _H8);
          float16x8_t v116 = vmlaq_n_f16(v111, v113, _H8);
          *v74++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v62, v103, v188), v104, *(short float *)&_Q12), v105, _H11), v62), v64)), v84);
          *v94++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v62, v114, v188), v115, *(short float *)&_Q12), v116, _H11), v62), v64)), v84);
          float16x8_t v54 = v109;
          int16x8_t v117 = (int16x8_t)vaddq_f16((float16x8_t)vuzp2q_s16((int16x8_t)v114, (int16x8_t)v115), vaddq_f16(vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v103, (int16x8_t)v104), (float16x8_t)vuzp2q_s16((int16x8_t)v103, (int16x8_t)v104)), (float16x8_t)vuzp1q_s16((int16x8_t)v114, (int16x8_t)v115)));
          float16x8_t v118 = (float16x8_t)vtrn2q_s16((int16x8_t)v105, (int16x8_t)v105);
          float16x8_t v119 = (float16x8_t)vtrn1q_s16((int16x8_t)v105, (int16x8_t)v105);
          int32x4_t v58 = (int32x4_t)v99;
          *(uint16x8_t *)(v73 + v91) = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v63, v56, (float16x8_t)vzip1q_s16(v117, v117)), v99, (float16x8_t)vzip2q_s16(v117, v117)), v61, vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v116, (int16x8_t)v116), vaddq_f16(vaddq_f16(v119, v118), (float16x8_t)vtrn1q_s16((int16x8_t)v116, (int16x8_t)v116)))), v65), v66)), v84);
          v92 += 8;
          v91 += 16;
        }
        while (v92 < (int)v12 - 7);
        result += v91;
        uint16x8_t v120 = &v82[v91];
        float v121 = (_WORD *)(v73 + v91);
        unint64_t v122 = v12 & 0xFFFFFFF8;
        float v123 = v190;
        float32x4_t v3 = v186;
        float32x4_t v4 = v187;
      }
      for (; v12 > v122; _Q12 = v128)
      {
        float16x8_t v124 = v65;
        float16x8_t v125 = v63;
        float v126 = v46;
        int32x4_t v127 = v58;
        long long v128 = _Q12;
        float16x8_t v129 = v55;
        float v130 = (float)(*(unsigned __int16 *)result >> v79) - v206;
        float v131 = (float)(*((unsigned __int16 *)result + 1) >> v79) - v206;
        float v132 = v123 * v131;
        float v133 = (float)(v205 * v131) + (float)(v130 * v4.f32[0]);
        float v134 = v3.f32[0] * v130;
        float v135 = v209 * (float)((float)(v78->u16[0] >> v79) - v210);
        float v136 = v132 + v135;
        float v137 = v135 + v133;
        float v138 = v134 + v135;
        float v139 = (float)((float)((float)(v207 * (float)(v135 + v133)) + (float)(v208 * (float)(v132 + v135)))
                     + (float)(v85 * (float)(v134 + v135)))
             + v43;
        float v140 = v45;
        if (v139 <= v45)
        {
          float v140 = v139;
          if (v139 < v43) {
            float v140 = v43;
          }
        }
        float16x8_t v141 = v53;
        float16x8_t v142 = v52;
        float v143 = v44;
        float v144 = v209 * (float)((float)(v78->u16[1] >> v79) - v210);
        float v145 = v132 + v144;
        float v146 = v133 + v144;
        float v147 = v134 + v144;
        unsigned int v148 = *(unsigned __int16 *)v120;
        unsigned int v149 = *((unsigned __int16 *)v120 + 1);
        unsigned int v150 = v93->u16[0];
        unsigned int v151 = v93->u16[1];
        float v152 = (float)((float)((float)(v207 * v146) + (float)(v208 * v145)) + (float)(v85 * (float)(v134 + v144))) + v43;
        v74->i16[0] = llroundf(v140) << v81;
        float v153 = v45;
        if (v152 <= v45)
        {
          float v153 = v152;
          if (v152 < v43) {
            float v153 = v43;
          }
        }
        float v154 = (float)(int)(v148 >> v79) - v206;
        float v155 = (float)(int)(v149 >> v79) - v206;
        float v156 = v123 * v155;
        float32x4_t v157 = v4;
        float v158 = (float)(v205 * v155) + (float)(v154 * v4.f32[0]);
        float32x4_t v159 = v3;
        float v160 = v3.f32[0] * v154;
        float v161 = v209 * (float)((float)(int)(v150 >> v79) - v210);
        float v162 = (float)(v123 * v155) + v161;
        float v163 = v161 + v158;
        float v164 = v160 + v161;
        float v165 = (float)((float)((float)(v207 * v163) + (float)(v208 * v162)) + (float)(v85 * v164)) + v43;
        v74->i16[1] = llroundf(v153) << v81;
        float v166 = v45;
        if (v165 <= v45)
        {
          float v166 = (float)((float)((float)(v207 * v163) + (float)(v208 * v162)) + (float)(v85 * v164)) + v43;
          if (v165 < v43) {
            float v166 = v43;
          }
        }
        float v167 = v209 * (float)((float)(int)(v151 >> v79) - v210);
        float v168 = v156 + v167;
        float v169 = v158 + v167;
        float v170 = v160 + v167;
        float v171 = (float)((float)((float)(v207 * v169) + (float)(v208 * v168)) + (float)(v85 * (float)(v160 + v167))) + v43;
        v94->i16[0] = llroundf(v166) << v81;
        float v172 = v45;
        if (v171 <= v45)
        {
          float v172 = v171;
          if (v171 < v43) {
            float v172 = v43;
          }
        }
        v94->i16[1] = llroundf(v172) << v81;
        float v173 = (float)((float)(v136 + v145) + v162) + v168;
        float v44 = v143;
        float v174 = v143 + (float)(v173 * v203);
        float v175 = (float)((float)(v137 + v146) + v163) + v169;
        float v176 = (float)((float)(v138 + v147) + v164) + v170;
        float v177 = (float)(v174 + (float)(v175 * v202)) + (float)(v176 * *(float *)&v87);
        float v46 = v126;
        float v178 = v126;
        float32x4_t v4 = v157;
        if (v177 <= v126)
        {
          float v178 = (float)(v174 + (float)(v175 * v202)) + (float)(v176 * *(float *)&v87);
          if (v177 < v204) {
            float v178 = v204;
          }
        }
        float v179 = (float)((float)(v143 + (float)(v173 * v201)) + (float)(v175 * v200))
             + (float)(v176 * *((float *)&v87 + 1));
        *float v121 = llroundf(v178) << v81;
        float v180 = v126;
        float16x8_t v52 = v142;
        float32x4_t v3 = v159;
        float16x8_t v55 = v129;
        int32x4_t v58 = v127;
        float16x8_t v63 = v125;
        float16x8_t v65 = v124;
        if (v179 <= v46)
        {
          float v180 = v179;
          if (v179 < v204) {
            float v180 = v204;
          }
        }
        v122 += 2;
        result += 4;
        float v78 = (uint16x8_t *)((char *)v78 + 4);
        v120 += 4;
        float v93 = (uint16x8_t *)((char *)v93 + 4);
        v121[1] = llroundf(v180) << v81;
        float v74 = (uint16x8_t *)((char *)v74 + 4);
        float v94 = (uint16x8_t *)((char *)v94 + 4);
        v121 += 2;
        float16x8_t v53 = v141;
      }
      float v78 = (uint16x8_t *)&v88[v23];
      uint64_t result = &v89[v24];
      float v74 = (uint16x8_t *)&v90[v26];
      v73 += v199;
      v11 += 2;
      v82 += 2 * v24;
      float16x8_t v56 = v197;
      float16x8_t v54 = v198;
      float16x8_t v64 = v195;
      float16x8_t v61 = v196;
      float16x8_t v66 = v194;
      _H11 = v192;
      uint16x8_t v84 = v193;
      float16x8_t v62 = v191;
    }
    while (v15 > v11);
    if (v185 && v184)
    {
      size_t v181 = 2 * v12;
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v41, v25, v181);
        v25 += v182;
        v41 += v183;
        --v15;
      }
      while (v15);
    }
    else if (v184)
    {
      do
      {
        if (v12) {
          uint64_t result = (unsigned __int8 *)memset(v41, 255, 2 * v12);
        }
        v41 += v183;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_xf420_GCD);
  return 0;
}

unint64_t vt_Copy_xf422_rgb_xf420_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = 2 * *(unsigned __int8 *)result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    unint64_t v9 = *(void *)(result + 20);
    uint64_t v10 = *(void *)(result + 36);
    uint64_t v11 = *(void *)(result + 44) + 2 * v6;
    unint64_t v12 = 2 * v7 - 2 * v6;
    uint64_t v13 = *(void *)(result + 112);
    uint64_t v14 = *(void **)(result + 128);
    uint64_t v15 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v5);
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v18 = *(void **)(result + 56);
    uint64_t v17 = *(uint64_t **)(result + 64);
    uint64_t v19 = *(uint64_t **)(result + 136);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    uint64_t v115 = v18[2];
    uint64_t v23 = (char *)(v115 + v22 * v11 + 2 * v10);
    uint64_t v24 = *v19;
    uint64_t v25 = v19[1];
    uint64_t v26 = v19[2];
    uint64_t v114 = v14[2];
    uint64_t v27 = (char *)(v114 + v26 * v15 + 2 * v13);
    *(float *)&unsigned int v28 = (float)*(unsigned int *)(v16 + 128);
    *(float *)&unsigned int v29 = (float)*(unsigned int *)(v16 + 136);
    float v30 = *(float *)&v29 / *(float *)&v28;
    LOWORD(v28) = *(_WORD *)(v16 + 140);
    float v31 = (float)v28;
    LOWORD(v29) = *(_WORD *)(v16 + 142);
    float v32 = (float)v29;
    float v33 = v30 * *(float *)v16;
    float v34 = v30 * *(float *)(v16 + 8);
    float v35 = v30 * *(float *)(v16 + 16);
    float v36 = v30 * *(float *)(v16 + 20);
    float v37 = *(float *)(v16 + 28);
    float v38 = v30 * v37;
    LOWORD(v37) = *(_WORD *)(v16 + 144);
    float v39 = (float)LODWORD(v37);
    LOWORD(v2) = *(_WORD *)(v16 + 146);
    float v40 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v16 + 148);
    float v41 = (float)v3;
    LOWORD(v3) = *(_WORD *)(v16 + 150);
    float v42 = (float)v3;
    LOWORD(v3) = *(_WORD *)(v16 + 152);
    float v43 = (float)v3;
    float v44 = *(float *)(v16 + 36);
    float v45 = *(float *)(v16 + 40);
    float v46 = *(float *)(v16 + 44);
    float v118 = *(float *)(v16 + 52) * 0.25;
    float v119 = *(float *)(v16 + 48) * 0.25;
    float v116 = *(float *)(v16 + 60) * 0.25;
    float v117 = *(float *)(v16 + 56) * 0.25;
    float v47 = *(float *)(v16 + 64) * 0.25;
    uint64_t v48 = v18[1];
    char v49 = (char *)(*v18 + *v17 * v11 + 2 * v10);
    uint64_t v50 = v48 + v21 * v11 + 2 * v10;
    if (!v48) {
      uint64_t v50 = 0;
    }
    uint64_t v51 = v14[1];
    float16x8_t v52 = (char *)(*v14 + v24 * v15 + 2 * v13);
    unsigned int v53 = *(unsigned __int8 *)(v16 + 132);
    BOOL v54 = v53 >= 0x11;
    char v55 = 16 - v53;
    if (v54) {
      char v56 = 0;
    }
    else {
      char v56 = v55;
    }
    LODWORD(result) = *(unsigned __int8 *)(v16 + 124);
    if (result >= 0x11) {
      LOBYTE(result) = 0;
    }
    else {
      LOBYTE(result) = 16 - result;
    }
    uint64_t v57 = v51 + v19[1] * (v15 / 2) + 2 * v13;
    float v58 = *(float *)(v16 + 68) * 0.25;
    uint64_t result = result;
    char v59 = v56;
    int16x4_t v60 = (unsigned __int16 *)(v50 + 2);
    do
    {
      float16x8_t v61 = &v52[v24];
      float16x8_t v62 = &v49[v20];
      if (v9)
      {
        unint64_t v63 = 0;
        float16x8_t v64 = v60;
        float16x8_t v65 = &v49[v20];
        float16x8_t v66 = &v52[v24];
        do
        {
          float v67 = (float)(*(v64 - 1) >> result) - v32;
          float v68 = (float)(*v64 >> result) - v32;
          float v69 = v34 * v68;
          float v70 = (float)(v36 * v68) + (float)(v67 * v35);
          float v71 = v38 * v67;
          float v72 = v33 * (float)((float)(*(unsigned __int16 *)v49 >> result) - v31);
          float v73 = v69 + v72;
          float v74 = v72 + v70;
          float v75 = v71 + v72;
          float v76 = (float)((float)((float)(v45 * (float)(v72 + v70)) + (float)(v44 * (float)(v69 + v72)))
                      + (float)(v46 * (float)(v71 + v72)))
              + v39;
          float v77 = v41;
          if (v76 <= v41)
          {
            float v77 = v76;
            if (v76 < v39) {
              float v77 = v39;
            }
          }
          float v78 = v33 * (float)((float)(*((unsigned __int16 *)v49 + 1) >> result) - v31);
          float v79 = v69 + v78;
          float v80 = v70 + v78;
          float v81 = v71 + v78;
          unsigned int v82 = *(unsigned __int16 *)((char *)v64 + v21 - 2);
          unsigned int v83 = *(unsigned __int16 *)((char *)v64 + v21);
          unsigned int v84 = *(unsigned __int16 *)v65;
          unsigned int v85 = *((unsigned __int16 *)v65 + 1);
          float v86 = (float)((float)((float)(v45 * v80) + (float)(v44 * v79)) + (float)(v46 * (float)(v71 + v78))) + v39;
          *(_WORD *)float16x8_t v52 = llroundf(v77) << v59;
          float v87 = v41;
          if (v86 <= v41)
          {
            float v87 = v86;
            if (v86 < v39) {
              float v87 = v39;
            }
          }
          float v88 = (float)(int)(v82 >> result) - v32;
          float v89 = (float)(int)(v83 >> result) - v32;
          float v90 = v34 * v89;
          float v91 = (float)(v36 * v89) + (float)(v88 * v35);
          float v92 = v38 * v88;
          float v93 = v33 * (float)((float)(int)(v84 >> result) - v31);
          float v94 = v90 + v93;
          float v95 = v93 + v91;
          float v96 = v92 + v93;
          float v97 = (float)((float)((float)(v45 * (float)(v93 + v91)) + (float)(v44 * (float)(v90 + v93)))
                      + (float)(v46 * (float)(v92 + v93)))
              + v39;
          *((_WORD *)v52 + 1) = llroundf(v87) << v59;
          float v98 = v41;
          if (v97 <= v41)
          {
            float v98 = v97;
            if (v97 < v39) {
              float v98 = v39;
            }
          }
          float v99 = v33 * (float)((float)(int)(v85 >> result) - v31);
          float v100 = v90 + v99;
          float v101 = v91 + v99;
          float v102 = v92 + v99;
          float v103 = (float)((float)((float)(v45 * v101) + (float)(v44 * v100)) + (float)(v46 * (float)(v92 + v99))) + v39;
          *(_WORD *)float16x8_t v66 = llroundf(v98) << v59;
          float v104 = v41;
          if (v103 <= v41)
          {
            float v104 = v103;
            if (v103 < v39) {
              float v104 = v39;
            }
          }
          *((_WORD *)v66 + 1) = llroundf(v104) << v59;
          float v105 = (float)((float)(v73 + v79) + v94) + v100;
          float v106 = (float)((float)(v74 + v80) + v95) + v101;
          float v107 = (float)((float)(v75 + v81) + v96) + v102;
          float v108 = (float)((float)(v40 + (float)(v105 * v119)) + (float)(v106 * v118)) + (float)(v107 * v117);
          float v109 = v43;
          if (v108 <= v43)
          {
            float v109 = (float)((float)(v40 + (float)(v105 * v119)) + (float)(v106 * v118)) + (float)(v107 * v117);
            if (v108 < v42) {
              float v109 = v42;
            }
          }
          int16x8_t v110 = (_WORD *)(v57 + 2 * v63);
          float v111 = (float)((float)(v40 + (float)(v105 * v116)) + (float)(v106 * v47)) + (float)(v107 * v58);
          _WORD *v110 = llroundf(v109) << v59;
          float v112 = v43;
          if (v111 <= v43)
          {
            float v112 = v111;
            if (v111 < v42) {
              float v112 = v42;
            }
          }
          v49 += 4;
          v65 += 4;
          v64 += 2;
          v52 += 4;
          v66 += 4;
          v110[1] = llroundf(v112) << v59;
          v63 += 2;
        }
        while (v9 > v63);
      }
      char v49 = &v62[v20];
      float16x8_t v52 = &v61[v24];
      v57 += v25;
      v8 += 2;
      v60 += v21;
    }
    while (v12 > v8);
    if (v115 && v114)
    {
      size_t v113 = 2 * v9;
      do
      {
        uint64_t result = (unint64_t)memcpy(v27, v23, v113);
        v23 += v22;
        v27 += v26;
        --v12;
      }
      while (v12);
    }
    else if (v114)
    {
      do
      {
        if (v9) {
          uint64_t result = (unint64_t)memset(v27, 255, 2 * v9);
        }
        v27 += v26;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_xf422_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD(float32x2_t *result, uint64_t a2, double a3, float32x4_t a4, double a5, int16x4_t a6, double a7, double a8, double a9)
{
  uint64_t v13 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v14 = result->u8[0];
  unint64_t v15 = v13 * a2 / v14;
  unint64_t v16 = (v13 + v13 * a2) / v14;
  if (v16 != v15)
  {
    uint64_t v17 = 0;
    size_t v18 = *(size_t *)((char *)&result[2] + 4);
    uint64_t v19 = *(uint64_t *)((char *)&result[4] + 4);
    unint64_t v20 = v15 + *(void *)((char *)&result[5] + 4);
    unint64_t v21 = v16 - v15;
    float32x2_t v22 = result[14];
    uint64_t v23 = (void *)result[16];
    unint64_t v24 = *(void *)&result[13] * a2 / v14 + *(void *)&result[15];
    uint64_t v25 = (float32x2_t *)result[19];
    uint64_t v26 = (void *)result[7];
    uint64_t v27 = (uint64_t *)result[8];
    uint64_t v28 = (uint64_t *)result[17];
    uint64_t v29 = *v27;
    uint64_t v30 = v27[1];
    uint64_t v259 = v27[2];
    uint64_t v266 = v26[2];
    uint64_t v31 = v266 + v259 * v20 + 2 * v19;
    uint64_t v32 = *v28;
    uint64_t v33 = v28[1];
    uint64_t v260 = v28[2];
    uint64_t v265 = v23[2];
    uint64_t v34 = (unsigned char *)(v265 + v260 * v24 + *(void *)&v22);
    LODWORD(v28) = v25[17].u16[2];
    unsigned int v35 = v25[17].u16[3];
    *(short float *)v9.i16 = (short float)v28;
    unsigned int v36 = v25[18].u16[0];
    float v313 = (float)v35;
    float v314 = (float)v28;
    short float v37 = (short float)v35;
    unsigned int v38 = v25[18].u16[1];
    _S13 = v25[5].i32[1];
    LODWORD(v28) = v25[18].u16[2];
    float v44 = (float)v36;
    *(short float *)v11.i16 = (short float)v36;
    unsigned int v45 = v25[18].u16[3];
    float v312 = (float)v38;
    *(short float *)v12.i16 = (short float)v38;
    unsigned int v46 = v25[19].u16[0];
    _S12 = v25[4].i32[1];
    _S11 = v25[5].i32[0];
    float v286 = (float)v28;
    *(short float *)a6.i16 = (short float)v28;
    char v49 = (char *)&v25[2068] + 4;
    float v50 = 8191.0 / (float)v25[16].u32[0];
    *(float *)&a9 = (float)v45;
    _S8 = v50 * v25->f32[0];
    *(float *)&a3 = (float)v46;
    float v305 = (float)v45;
    float v306 = (float)v46;
    *(short float *)&a3 = (short float)v45;
    *(short float *)&a9 = (short float)v46;
    unsigned int v52 = v25[15].u8[4];
    if (v52 >= 0x11) {
      unsigned __int8 v53 = 0;
    }
    else {
      unsigned __int8 v53 = 16 - v52;
    }
    uint64_t v54 = v23[1];
    _ZF = v54 == 0;
    uint64_t result = (float32x2_t *)((char *)v25 + 164);
    char v56 = (unsigned char *)(v54 + v33 * v24 + *(void *)&v22);
    uint64_t v57 = (int8x8_t *)(*v23 + v32 * v24 + *(void *)&v22);
    float v58 = (char *)&v25[4116] + 4;
    v40.i32[1] = v25[1].i32[0];
    v40.i32[0] = v25[3].i32[1];
    *(float32x2_t *)a4.f32 = vmul_n_f32(v40, v50);
    unint64_t v304 = a4.i64[0];
    float16x8_t v275 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a4), 0);
    *(float32x2_t *)v10.f32 = vmul_n_f32(v25[2], v50);
    float16x8_t v59 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float32x4_t v60 = (float32x4_t)vmulq_n_f16(v275, -v37);
    float16x8_t v263 = (float16x8_t)v60;
    v41.i32[1] = v25[7].i32[1];
    v41.i32[0] = v25[6].i32[0];
    *(float32x2_t *)v60.f32 = vmul_f32(v41, (float32x2_t)0x3F0000003F000000);
    uint64_t v303 = v60.i64[0];
    float16x8_t v61 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v60), 0);
    v42.i32[1] = v25[8].i32[0];
    v42.i32[0] = v25[6].i32[1];
    *(float32x2_t *)v60.f32 = vmul_f32(v42, (float32x2_t)0x3F0000003F000000);
    uint64_t v302 = v60.i64[0];
    float16x8_t v62 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v60), 0);
    v43.i32[1] = v25[8].i32[1];
    v43.i32[0] = v25[7].i32[0];
    *(float32x2_t *)v60.f32 = vmul_f32(v43, (float32x2_t)0x3F0000003F000000);
    uint64_t v301 = v60.i64[0];
    float16x8_t v264 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v60), 0);
    int16x8_t v63 = vdupq_lane_s16(v11, 0);
    float16x8_t v64 = (float16x8_t)vdupq_lane_s16(v12, 0);
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(a6, 0);
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    int16x8_t v67 = vdupq_lane_s16(*(int16x4_t *)&a9, 0);
    float16x8_t v68 = vmulq_n_f16(v59, -v37);
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(v9, 0);
    float16x8_t v70 = (float16x8_t)v63;
    if (_ZF) {
      float v71 = 0;
    }
    else {
      float v71 = v56;
    }
    uint16x8_t v72 = (uint16x8_t)vdupq_n_s16(-v53);
    float v75 = v26;
    uint64_t v73 = *v26;
    uint64_t v74 = v75[1];
    _ZF = v74 == 0;
    uint64_t v76 = v74 + v30 * v20 + 2 * v19;
    if (_ZF) {
      float v77 = 0;
    }
    else {
      float v77 = (uint16x8_t *)v76;
    }
    uint64_t v78 = v73 + v29 * v20 + 2 * v19;
    unsigned __int8 v79 = v53;
    __asm { FCVT            H4, S8 }
    short float v262 = _H4;
    float v298 = v25[4].f32[1];
    __asm { FCVT            H12, S12 }
    float v297 = v25[5].f32[0];
    __asm { FCVT            H11, S11 }
    float v299 = v25[5].f32[1];
    __asm { FCVT            H4, S13 }
    float v310 = v25[13].f32[1];
    __asm { FCVT            H1, S1 }
    short float v300 = _H1;
    float v308 = v25[14].f32[1];
    float v309 = v25[14].f32[0];
    __asm
    {
      FCVT            H2, S2
      FCVT            H1, S5
    }
    short float v261 = _H1;
    float v307 = v25[15].f32[0];
    __asm { FCVT            H1, S17 }
    short float v283 = _H1;
    float v295 = v25[9].f32[0];
    __asm { FCVT            H1, S25 }
    float v294 = v25[9].f32[1];
    __asm { FCVT            H5, S29 }
    short float v281 = _H5;
    float v293 = v25[10].f32[0];
    __asm { FCVT            H5, S9 }
    short float v94 = _H12;
    short float v95 = _H2;
    float v292 = v25[10].f32[1];
    __asm { FCVT            H2, S28 }
    float v291 = v25[11].f32[0];
    __asm { FCVT            H13, S31 }
    float16x8_t v98 = v275;
    float v290 = v25[11].f32[1];
    __asm { FCVT            H10, S10 }
    short float v278 = _H13;
    float v289 = v25[12].f32[0];
    __asm { FCVT            H13, S30 }
    short float v277 = _H13;
    float v288 = v25[12].f32[1];
    __asm { FCVT            H13, S14 }
    short float v276 = _H13;
    float v287 = v25[13].f32[0];
    __asm { FCVT            H13, S23 }
    short float v267 = _H13;
    short float v103 = v300;
    float16x8_t v104 = 0uLL;
    v105.i64[0] = 0x9000900090009000;
    v105.i64[1] = 0x9000900090009000;
    float16x8_t v273 = v68;
    float16x8_t v274 = v65;
    float16x8_t v296 = (float16x8_t)v67;
    uint16x8_t v311 = v72;
    short float v282 = _H1;
    short float v279 = _H2;
    short float v280 = _H5;
    uint64_t v271 = *v27;
    unint64_t v272 = v21;
    uint64_t v269 = v32;
    uint64_t v270 = v27[1];
    uint64_t v268 = v33;
    short float v284 = v95;
    float16x8_t v285 = v64;
    do
    {
      if ((int)v18 < 8)
      {
        size_t v182 = 0;
        size_t v181 = v71;
        float v109 = v57;
        float v108 = v77;
        float v107 = (uint16x8_t *)v78;
      }
      else
      {
        uint64_t v106 = 0;
        float v107 = (uint16x8_t *)v78;
        float v108 = v77;
        float v109 = v57;
        float16x8_t v110 = v68;
        do
        {
          uint16x8_t v111 = *v108++;
          float16x8_t v112 = vcvtq_f16_u16(vshlq_u16(v111, v72));
          int16x8_t v113 = (int16x8_t)vmlaq_f16(v110, v59, v112);
          int8x16_t v114 = (int8x16_t)vmlaq_f16(v263, v98, v112);
          v112.i64[0] = vextq_s8(v114, v114, 8uLL).u64[0];
          *(int16x4_t *)v115.i8 = vuzp1_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v112.i8);
          *(int16x4_t *)v112.i8 = vuzp2_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v112.i8);
          v112.i64[1] = v112.i64[0];
          float16x8_t v116 = (float16x8_t)vzip1q_s16((int16x8_t)v112, (int16x8_t)v112);
          v115.i64[1] = v116.i64[0];
          v114.i64[0] = vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL).u64[0];
          float16x4_t v117 = (float16x4_t)vuzp1_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v114.i8);
          *(int16x4_t *)v113.i8 = vuzp2_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v114.i8);
          float16x8_t v118 = (float16x8_t)vzip1q_s16(v115, v115);
          *(float16x4_t *)v113.i8 = vadd_f16(v117, *(float16x4_t *)v113.i8);
          v113.i64[1] = v116.i64[0];
          uint16x8_t v119 = *v107++;
          float16x8_t v120 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v119, v72)), v69);
          float16x8_t v121 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v113, v113), v120, v262);
          float16x8_t v122 = vmlaq_n_f16(v118, v120, v262);
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v116, v120, v262), v104), v105));
          uint32x4_t v124 = vmovl_high_u16(v123);
          *(void *)&long long v125 = v124.u32[2];
          *((void *)&v125 + 1) = v124.u32[3];
          long long v126 = v125;
          *(void *)&long long v125 = v124.u32[0];
          *((void *)&v125 + 1) = v124.u32[1];
          long long v127 = v125;
          uint32x4_t v128 = vmovl_u16(*(uint16x4_t *)v123.i8);
          *((void *)&v125 + 1) = v128.u32[3];
          uint64_t v129 = v128.u32[2];
          v130.i16[0] = result->i16[v128.u32[0]];
          float v131 = (__int16 *)result + v128.u32[1];
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, v104), v105));
          uint32x4_t v133 = vmovl_high_u16(v132);
          uint32x4_t v134 = vmovl_u16(*(uint16x4_t *)v132.i8);
          v135.i16[0] = result->i16[v134.u32[0]];
          v130.i16[1] = *v131;
          float v136 = (__int16 *)result + v134.u32[3];
          float v137 = (__int16 *)result + v133.u32[0];
          v130.i16[2] = result->i16[v129];
          float v138 = (__int16 *)result + v133.u32[1];
          v135.i16[1] = result->i16[v134.u32[1]];
          v130.i16[3] = result->i16[*((void *)&v125 + 1)];
          float v139 = (__int16 *)result + v133.u32[2];
          float v140 = (__int16 *)result + v133.u32[3];
          v135.i16[2] = result->i16[v134.u32[2]];
          uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, v104), v105));
          float16x8_t v142 = (float16x8_t)vmovl_high_u16(v141);
          *(void *)&long long v125 = v142.u32[2];
          *((void *)&v125 + 1) = v142.u32[3];
          long long v143 = v125;
          *(void *)&long long v125 = v142.u32[0];
          *((void *)&v125 + 1) = v142.u32[1];
          v130.i16[4] = result->i16[v127];
          uint32x4_t v144 = vmovl_u16(*(uint16x4_t *)v141.i8);
          v135.i16[3] = *v136;
          v142.i16[0] = result->i16[v144.u32[0]];
          v130.i16[5] = result->i16[*((void *)&v127 + 1)];
          v135.i16[4] = *v137;
          v130.i16[6] = result->i16[v126];
          v135.i16[5] = *v138;
          v130.i16[7] = result->i16[*((void *)&v126 + 1)];
          v142.i16[1] = result->i16[v144.u32[1]];
          v142.i16[2] = result->i16[v144.u32[2]];
          v135.i16[6] = *v139;
          v142.i16[3] = result->i16[v144.u32[3]];
          v142.i16[4] = result->i16[v125];
          v135.i16[7] = *v140;
          v142.i16[5] = result->i16[*((void *)&v125 + 1)];
          v142.i16[6] = result->i16[v143];
          v142.i16[7] = result->i16[*((void *)&v143 + 1)];
          uint16x8_t v145 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v130, v103), v135, v95), v142, v261), vmaxq_f16(vmaxq_f16(v130, v135), v142), v283), v104), v105));
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v145.i8);
          uint64_t v147 = v146.u32[1];
          uint64_t v148 = v146.u32[0];
          uint64_t v149 = v146.u32[3];
          float16x8_t v150 = (float16x8_t)vmovl_high_u16(v145);
          uint64_t v151 = v146.u32[2];
          *(void *)&long long v125 = v150.u32[2];
          *((void *)&v125 + 1) = v150.u32[3];
          long long v152 = v125;
          *((void *)&v125 + 1) = v150.u32[1];
          uint64_t v153 = v150.u32[0];
          v150.i16[0] = *(_WORD *)&v49[2 * v148];
          v150.i16[1] = *(_WORD *)&v49[2 * v147];
          v150.i16[2] = *(_WORD *)&v49[2 * v151];
          v150.i16[3] = *(_WORD *)&v49[2 * v149];
          v150.i16[4] = *(_WORD *)&v49[2 * v153];
          v150.i16[5] = *(_WORD *)&v49[2 * *((void *)&v125 + 1)];
          v150.i16[6] = *(_WORD *)&v49[2 * v152];
          v150.i16[7] = *(_WORD *)&v49[2 * *((void *)&v152 + 1)];
          float16x8_t v154 = vmulq_f16(v130, v150);
          float16x8_t v155 = vmulq_f16(v135, v150);
          float16x8_t v156 = vmulq_f16(v142, v150);
          float16x8_t v157 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v154, v279), v155, v278), v156, _H10);
          float16x8_t v158 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v156, v267), v155, v276), v154, v277);
          uint16x8_t v159 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v154, v282), v155, v281), v156, v280), v104), v105));
          uint32x4_t v160 = vmovl_high_u16(v159);
          uint32x4_t v161 = vmovl_u16(*(uint16x4_t *)v159.i8);
          *(void *)&long long v125 = v160.u32[2];
          *((void *)&v125 + 1) = v160.u32[3];
          long long v162 = v125;
          *(void *)&long long v125 = v160.u32[0];
          *((void *)&v125 + 1) = v160.u32[1];
          long long v163 = v125;
          *((void *)&v125 + 1) = v161.u32[3];
          v130.i16[0] = *(_WORD *)&v58[2 * v161.u32[0]];
          uint64_t v164 = *((void *)&v163 + 1);
          float v165 = (__int16 *)&v58[2 * v161.u32[2]];
          float v166 = (__int16 *)&v58[2 * v163];
          float v167 = (__int16 *)&v58[2 * v161.u32[1]];
          float16x8_t v168 = vmaxq_f16(v157, v104);
          uint16x8_t v72 = v311;
          uint16x8_t v169 = vcvtq_u16_f16(vminq_f16(v168, v105));
          uint32x4_t v170 = vmovl_high_u16(v169);
          uint32x4_t v171 = vmovl_u16(*(uint16x4_t *)v169.i8);
          v135.i16[0] = *(_WORD *)&v58[2 * v171.u32[0]];
          v130.i16[1] = *v167;
          v135.i16[1] = *(_WORD *)&v58[2 * v171.u32[1]];
          v130.i16[2] = *v165;
          v130.i16[3] = *(_WORD *)&v58[2 * *((void *)&v125 + 1)];
          v135.i16[2] = *(_WORD *)&v58[2 * v171.u32[2]];
          v135.i16[3] = *(_WORD *)&v58[2 * v171.u32[3]];
          v130.i16[4] = *v166;
          uint16x8_t v172 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v158, v104), v105));
          int16x8_t v173 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v172.i8);
          *((void *)&v125 + 1) = v173.u32[3];
          v135.i16[4] = *(_WORD *)&v58[2 * v170.u32[0]];
          v173.i16[7] = (unint64_t)v173.u32[1] >> 48;
          v130.i16[5] = *(_WORD *)&v58[2 * v164];
          v173.i16[0] = *(_WORD *)&v58[2 * v173.u32[0]];
          uint64_t v174 = *((void *)&v125 + 1);
          v135.i16[5] = *(_WORD *)&v58[2 * v170.u32[1]];
          uint32x4_t v175 = vmovl_high_u16(v172);
          *(void *)&long long v125 = v175.u32[2];
          *((void *)&v125 + 1) = v175.u32[3];
          v130.i16[6] = *(_WORD *)&v58[2 * v162];
          v135.i16[6] = *(_WORD *)&v58[2 * v170.u32[2]];
          float v176 = (__int16 *)&v58[2 * v175.u32[0]];
          float v177 = (__int16 *)&v58[2 * v175.u32[1]];
          float16x8_t v178 = (float16x8_t)vuzp1q_s16((int16x8_t)v130, (int16x8_t)v135);
          v173.i16[1] = *(_WORD *)&v58[2 * v173.u32[1]];
          v130.i16[7] = *(_WORD *)&v58[2 * *((void *)&v162 + 1)];
          v173.i16[2] = *(_WORD *)&v58[2 * v173.u32[2]];
          v173.i16[3] = *(_WORD *)&v58[2 * v174];
          v173.i16[4] = *v176;
          v173.i16[5] = *v177;
          v135.i16[7] = *(_WORD *)&v58[2 * v170.u32[3]];
          v173.i16[6] = *(_WORD *)&v58[2 * v125];
          float16x8_t v179 = (float16x8_t)v173;
          v179.i16[7] = *(_WORD *)&v58[2 * *((void *)&v125 + 1)];
          *v109++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v70, v130, v94), v135, _H11), v179, _H4), v70), v65)));
          int16x8_t v180 = (int16x8_t)vaddq_f16(v178, (float16x8_t)vuzp2q_s16((int16x8_t)v130, (int16x8_t)v135));
          *(int8x8_t *)&v71[v106] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v64, v61, (float16x8_t)vzip1q_s16(v180, v180)), v62, (float16x8_t)vzip2q_s16(v180, v180)), v264, vaddq_f16((float16x8_t)vtrn1q_s16(v173, v173), (float16x8_t)vtrn2q_s16((int16x8_t)v179, (int16x8_t)v179))), v66), v296)));
          v106 += 8;
        }
        while ((int)v106 < (int)v18 - 7);
        size_t v181 = &v71[v106];
        size_t v182 = v18 & 0xFFFFFFF8;
        uint64_t v33 = v268;
        uint64_t v29 = v271;
        unint64_t v21 = v272;
        uint64_t v32 = v269;
        uint64_t v30 = v270;
      }
      for (; v18 > v182; short float v103 = v300)
      {
        float16x8_t v183 = v69;
        float v184 = (float)(v108->u16[1] >> v79) - v313;
        float v185 = *((float *)&v304 + 1) * v184;
        float v186 = _S8 * (float)((float)(v107->u16[0] >> v79) - v314);
        float v187 = (float)(*((float *)&v304 + 1) * v184) + v186;
        float v188 = 8191.0;
        if (v187 <= 8191.0)
        {
          float v188 = (float)(*((float *)&v304 + 1) * v184) + v186;
          if (v187 < 0.0) {
            float v188 = 0.0;
          }
        }
        float v189 = (float)(v108->u16[0] >> v79) - v313;
        float v190 = (float)(v10.f32[1] * v184) + (float)(v189 * v10.f32[0]);
        float v191 = 8191.0;
        if ((float)(v186 + v190) <= 8191.0)
        {
          float v191 = v186 + v190;
          if ((float)(v186 + v190) < 0.0) {
            float v191 = 0.0;
          }
        }
        float v192 = *(float *)&v304 * v189;
        float v193 = v192 + v186;
        BOOL v194 = (float)(v192 + v186) <= 8191.0;
        float v195 = 8191.0;
        if (v194)
        {
          float v195 = v193;
          if (v193 < 0.0) {
            float v195 = 0.0;
          }
        }
        float v196 = _S8 * (float)((float)(v107->u16[1] >> v79) - v314);
        float v197 = v185 + v196;
        float v198 = 8191.0;
        if (v197 <= 8191.0)
        {
          float v198 = v197;
          if (v197 < 0.0) {
            float v198 = 0.0;
          }
        }
        float v199 = v190 + v196;
        float v200 = 8191.0;
        if (v199 <= 8191.0)
        {
          float v200 = v199;
          if (v199 < 0.0) {
            float v200 = 0.0;
          }
        }
        float v201 = v192 + v196;
        float v202 = 8191.0;
        if (v201 <= 8191.0)
        {
          float v202 = v201;
          if (v201 < 0.0) {
            float v202 = 0.0;
          }
        }
        _H1 = result->i16[llroundf(fminf(fmaxf(v188, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H5 = result->i16[llroundf(fminf(fmaxf(v191, 0.0), 8191.0))];
        unsigned int v206 = llroundf(fminf(fmaxf(v195, 0.0), 8191.0));
        __asm { FCVT            S0, H5 }
        _H5 = result->i16[v206];
        __asm { FCVT            S17, H5 }
        float v210 = (float)((float)((float)(v309 * _S0) + (float)(v310 * _S1)) + (float)(v308 * _S17))
             + (float)(v307 * fmaxf(_S1, fmaxf(_S0, _S17)));
        float v211 = 8191.0;
        if (v210 <= 8191.0)
        {
          float v211 = v210;
          if (v210 < 0.0) {
            float v211 = 0.0;
          }
        }
        _H5 = result->i16[llroundf(fminf(fmaxf(v198, 0.0), 8191.0))];
        __asm { FCVT            S6, H5 }
        _H2 = result->i16[llroundf(fminf(fmaxf(v200, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H3 = result->i16[llroundf(fminf(fmaxf(v202, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H7 = *(_WORD *)&v49[2 * llroundf(v211)];
        float v219 = (float)((float)((float)(v309 * _S2) + (float)(v310 * _S6)) + (float)(v308 * _S3))
             + (float)(v307 * fmaxf(_S6, fmaxf(_S2, _S3)));
        float v220 = 8191.0;
        if (v219 <= 8191.0)
        {
          float v220 = v219;
          if (v219 < 0.0) {
            float v220 = 0.0;
          }
        }
        __asm { FCVT            S7, H7 }
        float v222 = _S1 * _S7;
        float v223 = _S0 * _S7;
        float v224 = _S17 * _S7;
        _H5 = *(_WORD *)&v49[2 * llroundf(v220)];
        __asm { FCVT            S5, H5 }
        float v227 = _S6 * _S5;
        float v228 = _S2 * _S5;
        _S3 = _S3 * _S5;
        _S5 = (float)((float)(v294 * v223) + (float)(v222 * v295)) + (float)(v224 * v293);
        float v231 = (float)((float)(v291 * v223) + (float)(v222 * v292)) + (float)(v224 * v290);
        _S0 = (float)((float)(v288 * v223) + (float)(v222 * v289)) + (float)(v224 * v287);
        _S1 = (float)((float)(v294 * v228) + (float)(v227 * v295)) + (float)(_S3 * v293);
        float v234 = (float)((float)(v291 * v228) + (float)(v227 * v292)) + (float)(_S3 * v290);
        _S2 = (float)((float)(v288 * v228) + (float)(v227 * v289)) + (float)(_S3 * v287);
        LOWORD(_S3) = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
        LOWORD(_S5) = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v231, 0.0), 8191.0))];
        __asm
        {
          FCVT            S3, H3
          FCVT            S5, H5
        }
        LOWORD(_S0) = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
        __asm { FCVT            S6, H0 }
        LOWORD(_S0) = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        LOWORD(_S1) = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v234, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        LOWORD(_S2) = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        float v242 = (float)((float)((float)(v297 * _S5) + (float)(v298 * _S3)) + (float)(v299 * _S6)) + v44;
        float v243 = (float)((float)((float)(v297 * _S1) + (float)(v298 * _S0)) + (float)(v299 * _S2)) + v44;
        if (v242 < v44) {
          float v244 = v44;
        }
        else {
          float v244 = (float)((float)((float)(v297 * _S5) + (float)(v298 * _S3)) + (float)(v299 * _S6)) + v44;
        }
        if (v242 <= v286) {
          float v245 = v244;
        }
        else {
          float v245 = v286;
        }
        v109->i8[0] = llroundf(v245);
        if (v243 < v44) {
          float v246 = v44;
        }
        else {
          float v246 = (float)((float)((float)(v297 * _S1) + (float)(v298 * _S0)) + (float)(v299 * _S2)) + v44;
        }
        if (v243 > v286) {
          float v246 = v286;
        }
        v109->i8[1] = llroundf(v246);
        float v247 = _S3 + _S0;
        float v248 = _S5 + _S1;
        float v249 = _S6 + _S2;
        float v250 = (float)((float)(v312 + (float)(v247 * *(float *)&v303)) + (float)(v248 * *(float *)&v302))
             + (float)(v249 * *(float *)&v301);
        float v251 = v306;
        if (v250 <= v306)
        {
          float v251 = (float)((float)(v312 + (float)(v247 * *(float *)&v303)) + (float)(v248 * *(float *)&v302))
               + (float)(v249 * *(float *)&v301);
          if (v250 < v305) {
            float v251 = v305;
          }
        }
        float v252 = (float)((float)(v312 + (float)(v247 * *((float *)&v303 + 1))) + (float)(v248 * *((float *)&v302 + 1)))
             + (float)(v249 * *((float *)&v301 + 1));
        *size_t v181 = llroundf(v251);
        float v253 = v306;
        float16x8_t v69 = v183;
        uint16x8_t v72 = v311;
        float16x8_t v104 = 0uLL;
        v105.i64[0] = 0x9000900090009000;
        v105.i64[1] = 0x9000900090009000;
        if (v252 <= v306)
        {
          float v253 = v252;
          if (v252 < v305) {
            float v253 = v305;
          }
        }
        v181[1] = llroundf(v253);
        v181 += 2;
        v182 += 2;
        float v108 = (uint16x8_t *)((char *)v108 + 4);
        float v107 = (uint16x8_t *)((char *)v107 + 4);
        float v109 = (int8x8_t *)((char *)v109 + 2);
        short float v95 = v284;
        float16x8_t v64 = v285;
      }
      v78 += v29;
      float v77 = (uint16x8_t *)((char *)v77 + v30);
      uint64_t v57 = (int8x8_t *)((char *)v57 + v32);
      v71 += v33;
      ++v17;
      float16x8_t v65 = v274;
      float16x8_t v98 = v275;
      float16x8_t v68 = v273;
    }
    while (v17 != v21);
    if (v266 && v265)
    {
      uint64_t v254 = 0;
      do
      {
        if (v18)
        {
          size_t v255 = v18;
          float v256 = v34;
          float v257 = (unsigned __int16 *)v31;
          do
          {
            unsigned int v258 = *v257++;
            *v256++ = llroundf((float)v258 * 0.0038911);
            --v255;
          }
          while (v255);
        }
        v31 += v259;
        v34 += v260;
        ++v254;
      }
      while (v254 != v21);
    }
    else if (v265)
    {
      do
      {
        if (v18) {
          uint64_t result = (float32x2_t *)memset(v34, 255, v18);
        }
        v34 += v260;
        --v21;
      }
      while (v21);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Tone_Mat_TRC_422vf_GCD(void *result, uint64_t a2, double a3, float a4, double a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    size_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (void *)result[16];
    unint64_t v17 = result[13] * a2 / v7 + result[15];
    uint64_t v18 = result[19];
    uint64_t v19 = (uint64_t *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = v25 + v24 * v13 + 2 * v12;
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (unsigned char *)(v30 + v29 * v17 + v15);
    LOWORD(a4) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    float v33 = (float)LODWORD(a6);
    float v166 = v32 * *(float *)v18;
    float v167 = (float)LODWORD(a4);
    float v163 = v32 * *(float *)(v18 + 16);
    float v164 = v32 * *(float *)(v18 + 8);
    float v34 = v32 * *(float *)(v18 + 20);
    *(float *)&unsigned int v35 = v32 * *(float *)(v18 + 28);
    float v161 = *(float *)&v35;
    float v162 = v34;
    LOWORD(v35) = *(_WORD *)(v18 + 144);
    float v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 146);
    float v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 148);
    float v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 150);
    *(float *)&unsigned int v39 = (float)v35;
    float v165 = *(float *)&v39;
    LOWORD(v39) = *(_WORD *)(v18 + 152);
    float v40 = (float)v39;
    float v41 = *(float *)(v18 + 36);
    float v42 = *(float *)(v18 + 40);
    float v43 = *(float *)(v18 + 44);
    float v159 = *(float *)(v18 + 52) * 0.5;
    float v160 = *(float *)(v18 + 48) * 0.5;
    float v157 = *(float *)(v18 + 60) * 0.5;
    float v158 = *(float *)(v18 + 56) * 0.5;
    float v44 = *(float *)(v18 + 72);
    float v155 = *(float *)(v18 + 68) * 0.5;
    float v156 = *(float *)(v18 + 64) * 0.5;
    float v46 = *(float *)(v18 + 76);
    float v45 = *(float *)(v18 + 80);
    float v47 = *(float *)(v18 + 84);
    float v48 = *(float *)(v18 + 88);
    float v49 = *(float *)(v18 + 92);
    float v50 = *(float *)(v18 + 96);
    float v51 = *(float *)(v18 + 100);
    float v52 = *(float *)(v18 + 104);
    uint64_t v53 = v18 + 164;
    uint64_t result = (void *)(v18 + 16548);
    unsigned int v54 = *(unsigned __int8 *)(v18 + 124);
    if (v54 >= 0x11) {
      char v55 = 0;
    }
    else {
      char v55 = 16 - v54;
    }
    uint64_t v56 = v16[1];
    _ZF = v56 == 0;
    uint64_t v58 = v56 + v28 * v17;
    uint64_t v59 = *v16 + v27 * v17;
    uint64_t v60 = v18 + 32932;
    uint64_t v61 = v58 + v15;
    if (_ZF) {
      uint64_t v61 = 0;
    }
    float16x8_t v62 = (unsigned char *)(v59 + v15);
    uint64_t v64 = *v19;
    uint64_t v63 = v19[1];
    uint64_t v65 = v63 + v23 * v13 + 2 * v12;
    if (!v63) {
      uint64_t v65 = 0;
    }
    uint64_t v66 = v64 + v22 * v13 + 2 * v12;
    char v67 = v55;
    float v69 = *(float *)(v18 + 108);
    float v68 = *(float *)(v18 + 112);
    float v70 = *(float *)(v18 + 116);
    float v71 = *(float *)(v18 + 120);
    do
    {
      if (v11)
      {
        size_t v72 = 0;
        uint64_t v73 = (unsigned __int16 *)v66;
        uint64_t v74 = v62;
        do
        {
          float v75 = (unsigned __int16 *)(v65 + 2 * v72);
          float v76 = (float)(v75[1] >> v67) - v33;
          float v77 = v164 * v76;
          float v78 = v166 * (float)((float)(*v73 >> v67) - v167);
          float v79 = (float)(v164 * v76) + v78;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = (float)(v164 * v76) + v78;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v33;
          float v82 = (float)(*v75 >> v67) - v33;
          float v83 = (float)(v162 * v76) + (float)(v82 * v163);
          float v84 = 8191.0;
          if ((float)(v78 + v83) <= 8191.0)
          {
            float v84 = v78 + v83;
            if ((float)(v78 + v83) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v161 * v82;
          float v86 = v85 + v78;
          BOOL v87 = (float)(v85 + v78) <= 8191.0;
          float v88 = 8191.0;
          if (v87)
          {
            float v88 = v86;
            if (v86 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v166 * (float)((float)(v73[1] >> v67) - v167);
          float v90 = v77 + v89;
          BOOL v87 = (float)(v77 + v89) <= 8191.0;
          float v91 = 8191.0;
          if (v87)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v83 + v89;
          BOOL v87 = (float)(v83 + v89) <= 8191.0;
          float v93 = 8191.0;
          if (v87)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v85 + v89;
          BOOL v87 = (float)(v85 + v89) <= 8191.0;
          float v95 = 8191.0;
          if (v87)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H19 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          float v108 = fmaxf(_S24, fmaxf(_S25, _S26));
          float v109 = (float)((float)((float)(v68 * _S25) + (float)(v69 * _S24)) + (float)(v70 * _S26)) + (float)(v71 * v108);
          float v110 = 8191.0;
          if (v109 <= 8191.0)
          {
            float v110 = (float)((float)((float)(v68 * _S25) + (float)(v69 * _S24)) + (float)(v70 * _S26))
                 + (float)(v71 * v108);
            if (v109 < 0.0) {
              float v110 = 0.0;
            }
          }
          __asm
          {
            FCVT            S27, H19
            FCVT            S28, H28
            FCVT            S30, H30
          }
          _H19 = *((_WORD *)result + llroundf(v110));
          float v115 = (float)((float)((float)(v68 * _S28) + (float)(v69 * _S27)) + (float)(v70 * _S30))
               + (float)(v71 * fmaxf(_S27, fmaxf(_S28, _S30)));
          float v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            float v116 = v115;
            if (v115 < 0.0) {
              float v116 = 0.0;
            }
          }
          __asm { FCVT            S0, H19 }
          float v118 = _S24 * _S0;
          float v119 = _S25 * _S0;
          float v120 = _S26 * _S0;
          _H1 = *((_WORD *)result + llroundf(v116));
          __asm { FCVT            S1, H1 }
          _S25 = _S27 * _S1;
          _S26 = _S28 * _S1;
          float v125 = _S30 * _S1;
          float v126 = (float)((float)(v46 * v119) + (float)(v118 * v44)) + (float)(v120 * v45);
          float v127 = (float)((float)(v48 * v119) + (float)(v118 * v47)) + (float)(v120 * v49);
          _S0 = (float)((float)(v51 * v119) + (float)(v118 * v50)) + (float)(v120 * v52);
          _S19 = (float)((float)(v46 * _S26) + (float)(_S25 * v44)) + (float)(v125 * v45);
          _S24 = (float)((float)(v48 * _S26) + (float)(_S25 * v47)) + (float)(v125 * v49);
          _S1 = (float)((float)(v51 * _S26) + (float)(_S25 * v50)) + (float)(v125 * v52);
          LOWORD(_S25) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          LOWORD(_S26) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm
          {
            FCVT            S25, H25
            FCVT            S26, H26
          }
          LOWORD(_S0) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S19) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S1) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          float v138 = (float)((float)((float)(v42 * _S26) + (float)(v41 * _S25)) + (float)(v43 * _S0)) + v36;
          float v139 = (float)((float)((float)(v42 * _S24) + (float)(v41 * _S19)) + (float)(v43 * _S1)) + v36;
          if (v138 < v36) {
            float v140 = v36;
          }
          else {
            float v140 = (float)((float)((float)(v42 * _S26) + (float)(v41 * _S25)) + (float)(v43 * _S0)) + v36;
          }
          if (v138 <= v38) {
            float v141 = v140;
          }
          else {
            float v141 = v38;
          }
          *uint64_t v74 = llroundf(v141);
          if (v139 < v36) {
            float v142 = v36;
          }
          else {
            float v142 = (float)((float)((float)(v42 * _S24) + (float)(v41 * _S19)) + (float)(v43 * _S1)) + v36;
          }
          if (v139 > v38) {
            float v142 = v38;
          }
          v74[1] = llroundf(v142);
          float v143 = _S25 + _S19;
          float v144 = _S26 + _S24;
          float v145 = _S0 + _S1;
          float v146 = (float)((float)(v37 + (float)(v143 * v160)) + (float)(v144 * v159))
               + (float)((float)(_S0 + _S1) * v158);
          float v147 = v40;
          if (v146 <= v40)
          {
            float v147 = v146;
            if (v146 < v165) {
              float v147 = v165;
            }
          }
          float v148 = (float)((float)(v37 + (float)(v143 * v157)) + (float)(v144 * v156)) + (float)(v145 * v155);
          *(unsigned char *)(v61 + v72) = llroundf(v147);
          float v149 = v40;
          if (v148 <= v40)
          {
            float v149 = v148;
            if (v148 < v165) {
              float v149 = v165;
            }
          }
          *(unsigned char *)(v61 + v72 + 1) = llroundf(v149);
          v72 += 2;
          v73 += 2;
          v74 += 2;
          float v33 = v81;
        }
        while (v11 > v72);
      }
      v66 += v22;
      v65 += v23;
      v62 += v27;
      v61 += v28;
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      uint64_t v150 = 0;
      do
      {
        if (v11)
        {
          size_t v151 = v11;
          long long v152 = v31;
          uint64_t v153 = (unsigned __int16 *)v26;
          do
          {
            unsigned int v154 = *v153++;
            *v152++ = llroundf((float)v154 * 0.0038911);
            --v151;
          }
          while (v151);
        }
        v26 += v24;
        v31 += v29;
        ++v150;
      }
      while (v150 != v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v31, 255, v11);
        }
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Mat_TRC_422vf_neon_fp16_GCD(void *result, uint64_t a2, int16x4_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v15 = *(void *)((char *)result + 28);
  unint64_t v16 = *(unsigned __int8 *)result;
  unint64_t v17 = v15 * a2 / v16;
  unint64_t v18 = (v15 + v15 * a2) / v16;
  if (v18 != v17)
  {
    uint64_t v19 = 0;
    size_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    unint64_t v22 = v17 + *(void *)((char *)result + 44);
    unint64_t v23 = v18 - v17;
    uint64_t v24 = result[14];
    unint64_t v25 = result[13] * a2 / v16;
    uint64_t v26 = (void *)result[16];
    unint64_t v27 = v25 + result[15];
    uint64_t v28 = (float32x2_t *)result[19];
    uint64_t v29 = (void *)result[7];
    uint64_t v30 = (uint64_t *)result[8];
    uint64_t v31 = (uint64_t *)result[17];
    uint64_t v32 = *v30;
    uint64_t v33 = v30[1];
    uint64_t v241 = v30[2];
    uint64_t v247 = v29[2];
    uint64_t v34 = v247 + v241 * v22 + 2 * v21;
    uint64_t v35 = *v31;
    uint64_t v36 = v31[1];
    uint64_t v242 = v31[2];
    uint64_t v246 = v26[2];
    uint64_t v37 = (unsigned char *)(v246 + v242 * v27 + v24);
    a3.i32[0] = v28[16].i32[0];
    float v38 = (float)a3.u32[0];
    LODWORD(v31) = v28[17].u16[2];
    unsigned int v39 = v28[17].u16[3];
    float v40 = (float)v31;
    *(short float *)a3.i16 = (short float)v31;
    float v41 = (float)v39;
    short float v42 = (short float)v39;
    unsigned int v43 = v28[18].u16[0];
    _S12 = v28[5].i32[1];
    LODWORD(v31) = v28[18].u16[1];
    *(float *)&a7 = (float)v43;
    float v271 = (float)v43;
    *(short float *)v8.i16 = (short float)v43;
    unsigned int v49 = v28[18].u16[2];
    float v50 = (float)v31;
    float v273 = (float)v49;
    *(short float *)v9.i16 = (short float)v31;
    LODWORD(v31) = v28[18].u16[3];
    *(short float *)v7.i16 = (short float)v49;
    unsigned int v51 = v28[19].u16[0];
    float v287 = (float)v31;
    _S21 = v28[4].i32[1];
    _S13 = v28[5].i32[0];
    float v54 = (float)v51;
    *(short float *)&a7 = (short float)v31;
    *(short float *)v11.i16 = (short float)v51;
    unsigned int v55 = v28[15].u8[4];
    if (v55 >= 0x11) {
      unsigned __int8 v56 = 0;
    }
    else {
      unsigned __int8 v56 = 16 - v55;
    }
    uint64_t v57 = v26[1];
    _ZF = v57 == 0;
    uint64_t v59 = v57 + v36 * v27;
    uint64_t v60 = *v26 + v35 * v27;
    uint64_t v61 = (char *)&v28[20] + 4;
    v12.f32[0] = 8191.0 / v38;
    _S19 = (float)(8191.0 / v38) * v28->f32[0];
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(a3, 0);
    v45.i32[1] = v28[1].i32[0];
    v45.i32[0] = v28[3].i32[1];
    *(float32x2_t *)v10.f32 = vmul_n_f32(v45, v12.f32[0]);
    float16x8_t v64 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    *(float32x2_t *)v14.f32 = vmul_n_f32(v28[2], v12.f32[0]);
    float16x8_t v65 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v14), 0);
    float32x4_t v66 = (float32x4_t)vmulq_n_f16(v64, -v42);
    float16x8_t v245 = (float16x8_t)v66;
    v46.i32[1] = v28[7].i32[1];
    v46.i32[0] = v28[6].i32[0];
    *(float32x2_t *)v13.f32 = vmul_f32(v46, (float32x2_t)0x3F0000003F000000);
    float16x8_t v67 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v13), 0);
    v47.i32[1] = v28[8].i32[0];
    v47.i32[0] = v28[6].i32[1];
    *(float32x2_t *)v66.f32 = vmul_f32(v47, (float32x2_t)0x3F0000003F000000);
    uint64_t v285 = v66.i64[0];
    v48.i32[1] = v28[8].i32[1];
    v48.i32[0] = v28[7].i32[0];
    *(float32x2_t *)v12.f32 = vmul_f32(v48, (float32x2_t)0x3F0000003F000000);
    float16x8_t v68 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v12), 0);
    int16x8_t v254 = vdupq_lane_s16(v8, 0);
    int32x4_t v255 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v66), 0);
    uint64_t result = (void *)(v59 + v24);
    if (_ZF) {
      uint64_t result = 0;
    }
    float v69 = (int8x8_t *)(v60 + v24);
    uint64_t v70 = v29[1];
    _ZF = v70 == 0;
    uint64_t v71 = v70 + v33 * v22;
    uint64_t v72 = *v29 + v32 * v22;
    uint64_t v73 = (char *)&v28[2068] + 4;
    int16x8_t v74 = vdupq_lane_s16(v9, 0);
    int16x8_t v75 = vdupq_lane_s16(v7, 0);
    float16x8_t v76 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    float16x8_t v281 = vmulq_n_f16(v65, -v42);
    int16x8_t v77 = vdupq_lane_s16(v11, 0);
    float v78 = (uint16x8_t *)(v71 + 2 * v21);
    if (_ZF) {
      float v78 = 0;
    }
    float v79 = (uint16x8_t *)(v72 + 2 * v21);
    unsigned __int8 v80 = v56;
    __asm { FCVT            H10, S19 }
    short float v244 = _H10;
    float v283 = v28[4].f32[1];
    __asm { FCVT            H10, S21 }
    short float v243 = _H10;
    float16x8_t v86 = (float16x8_t)v74;
    float16x8_t v87 = (float16x8_t)v75;
    float v282 = v28[5].f32[0];
    __asm { FCVT            H13, S13 }
    float v284 = v28[5].f32[1];
    __asm { FCVT            H10, S12 }
    short float v286 = _H10;
    float v272 = v28[9].f32[0];
    __asm { FCVT            H12, S6 }
    short float v91 = _H13;
    float v270 = v28[9].f32[1];
    __asm { FCVT            H4, S4 }
    float v268 = v28[10].f32[0];
    __asm { FCVT            H13, S7 }
    float v279 = v28[10].f32[1];
    __asm { FCVT            H7, S9 }
    float v277 = v28[11].f32[0];
    __asm { FCVT            H1, S1 }
    float v278 = v28[11].f32[1];
    __asm { FCVT            H0, S0 }
    float v276 = v28[12].f32[0];
    __asm { FCVT            H10, S26 }
    short float v258 = _H10;
    uint16x8_t v99 = (uint16x8_t)vdupq_n_s16(-v56);
    float16x8_t v98 = v245;
    float v275 = v28[12].f32[1];
    __asm { FCVT            H10, S22 }
    short float v257 = _H10;
    float v274 = v28[13].f32[0];
    __asm { FCVT            H10, S25 }
    float16x8_t v102 = (float16x8_t)v254;
    short float v256 = _H10;
    uint64_t v103 = v10.i64[0];
    uint64_t v104 = v14.i64[0];
    uint64_t v105 = v13.i64[0];
    float16x8_t v106 = (float16x8_t)v255;
    float16x8_t v253 = v76;
    float16x8_t v280 = (float16x8_t)v77;
    short float v261 = _H7;
    short float v262 = _H13;
    short float v259 = _H0;
    short float v260 = _H1;
    uint64_t v251 = v30[1];
    uint64_t v252 = *v30;
    uint64_t v249 = v36;
    uint64_t v250 = v35;
    float16x8_t v269 = v87;
    float16x8_t v266 = v67;
    float16x8_t v267 = v68;
    float16x8_t v264 = v86;
    short float v265 = v91;
    short float v263 = _H12;
    float v248 = v40;
    do
    {
      if ((int)v20 < 8)
      {
        size_t v175 = 0;
        uint64_t v174 = result;
        float v110 = v69;
        float v109 = v78;
        float v108 = v79;
      }
      else
      {
        uint64_t v107 = 0;
        float v108 = v79;
        float v109 = v78;
        float v110 = v69;
        v111.i64[0] = 0x9000900090009000;
        v111.i64[1] = 0x9000900090009000;
        float16x8_t v112 = v102;
        do
        {
          uint16x8_t v113 = *v109++;
          float16x8_t v114 = vcvtq_f16_u16(vshlq_u16(v113, v99));
          int16x8_t v115 = (int16x8_t)vmlaq_f16(v98, v64, v114);
          int8x16_t v116 = (int8x16_t)vmlaq_f16(v281, v65, v114);
          v114.i64[0] = vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL).u64[0];
          *(int16x4_t *)v117.i8 = vuzp1_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v114.i8);
          *(int16x4_t *)v114.i8 = vuzp2_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v114.i8);
          v114.i64[1] = v114.i64[0];
          float16x8_t v118 = (float16x8_t)vzip1q_s16((int16x8_t)v114, (int16x8_t)v114);
          v117.i64[1] = v118.i64[0];
          v115.i64[0] = vextq_s8(v116, v116, 8uLL).u64[0];
          *(float16x4_t *)v115.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8));
          v115.i64[1] = v118.i64[0];
          uint16x8_t v119 = *v108++;
          float16x8_t v120 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v119, v99)), v63);
          float16x8_t v121 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v117, v117), v120, v244);
          float16x8_t v122 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v115, v115), v120, v244);
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v118, v120, v244), (float16x8_t)0), v111));
          uint32x4_t v124 = vmovl_high_u16(v123);
          uint32x4_t v125 = vmovl_u16(*(uint16x4_t *)v123.i8);
          *(void *)&long long v126 = v124.u32[2];
          *((void *)&v126 + 1) = v124.u32[3];
          long long v127 = v126;
          *(void *)&long long v126 = v124.u32[0];
          *((void *)&v126 + 1) = v124.u32[1];
          long long v128 = v126;
          *((void *)&v126 + 1) = v125.u32[3];
          v129.i16[0] = *(_WORD *)&v61[2 * v125.u32[0]];
          float16x8_t v130 = (__int16 *)&v61[2 * v125.u32[2]];
          float v131 = (__int16 *)&v61[2 * v125.u32[1]];
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v111));
          uint32x4_t v133 = vmovl_high_u16(v132);
          uint32x4_t v134 = vmovl_u16(*(uint16x4_t *)v132.i8);
          float16x8_t v135 = v106;
          v136.i16[0] = *(_WORD *)&v61[2 * v134.u32[0]];
          v129.i16[1] = *v131;
          float v137 = (__int16 *)&v61[2 * v134.u32[3]];
          float v138 = (__int16 *)&v61[2 * v133.u32[0]];
          v129.i16[2] = *v130;
          float v139 = (__int16 *)&v61[2 * v133.u32[1]];
          v136.i16[1] = *(_WORD *)&v61[2 * v134.u32[1]];
          v129.i16[3] = *(_WORD *)&v61[2 * *((void *)&v126 + 1)];
          float v140 = (__int16 *)&v61[2 * v133.u32[2]];
          float v141 = (__int16 *)&v61[2 * v133.u32[3]];
          v136.i16[2] = *(_WORD *)&v61[2 * v134.u32[2]];
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v111));
          uint32x4_t v143 = vmovl_high_u16(v142);
          float16x8_t v144 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v142.i8);
          v129.i16[4] = *(_WORD *)&v61[2 * v128];
          v136.i16[3] = *v137;
          v129.i16[5] = *(_WORD *)&v61[2 * *((void *)&v128 + 1)];
          v144.i16[0] = *(_WORD *)&v61[2 * v144.u32[0]];
          v136.i16[4] = *v138;
          v129.i16[6] = *(_WORD *)&v61[2 * v127];
          v136.i16[5] = *v139;
          v129.i16[7] = *(_WORD *)&v61[2 * *((void *)&v127 + 1)];
          v144.i16[1] = *(_WORD *)&v61[2 * v144.u32[1]];
          v144.i16[2] = *(_WORD *)&v61[2 * v144.u32[2]];
          v136.i16[6] = *v140;
          v144.i16[3] = *(_WORD *)&v61[2 * v144.u32[3]];
          v144.i16[4] = *(_WORD *)&v61[2 * v143.u32[0]];
          v136.i16[7] = *v141;
          v144.i16[5] = *(_WORD *)&v61[2 * v143.u32[1]];
          v144.i16[6] = *(_WORD *)&v61[2 * v143.u32[2]];
          v144.i16[7] = *(_WORD *)&v61[2 * v143.u32[3]];
          float16x8_t v145 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v261), v136, v260), v144, v259);
          float16x8_t v146 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v144, v256), v136, v257), v129, v258);
          uint16x8_t v147 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, _H12), v136, _H4), v144, v262), (float16x8_t)0), v111));
          uint32x4_t v148 = vmovl_high_u16(v147);
          uint32x4_t v149 = vmovl_u16(*(uint16x4_t *)v147.i8);
          *(void *)&long long v126 = v148.u32[2];
          *((void *)&v126 + 1) = v148.u32[3];
          long long v150 = v126;
          *(void *)&long long v126 = v148.u32[0];
          *((void *)&v126 + 1) = v148.u32[1];
          long long v151 = v126;
          *((void *)&v126 + 1) = v149.u32[3];
          v129.i16[0] = *(_WORD *)&v73[2 * v149.u32[0]];
          uint64_t v152 = *((void *)&v151 + 1);
          uint64_t v153 = (__int16 *)&v73[2 * v149.u32[2]];
          unsigned int v154 = (__int16 *)&v73[2 * v151];
          float v155 = (__int16 *)&v73[2 * v149.u32[1]];
          uint16x8_t v156 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v145, (float16x8_t)0), v111));
          uint32x4_t v157 = vmovl_high_u16(v156);
          uint32x4_t v158 = vmovl_u16(*(uint16x4_t *)v156.i8);
          v136.i16[0] = *(_WORD *)&v73[2 * v158.u32[0]];
          v129.i16[1] = *v155;
          v136.i16[1] = *(_WORD *)&v73[2 * v158.u32[1]];
          v129.i16[2] = *v153;
          float v159 = (__int16 *)&v73[2 * v157.u32[0]];
          float v160 = (__int16 *)&v73[2 * v157.u32[1]];
          v129.i16[3] = *(_WORD *)&v73[2 * *((void *)&v126 + 1)];
          v136.i16[2] = *(_WORD *)&v73[2 * v158.u32[2]];
          v136.i16[3] = *(_WORD *)&v73[2 * v158.u32[3]];
          float v161 = (__int16 *)&v73[2 * v157.u32[2]];
          float v162 = (__int16 *)&v73[2 * v157.u32[3]];
          v129.i16[4] = *v154;
          uint16x8_t v163 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v146, (float16x8_t)0), v111));
          int16x8_t v164 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v163.i8);
          *((void *)&v126 + 1) = v164.u32[3];
          v136.i16[4] = *v159;
          v164.i16[7] = (unint64_t)v164.u32[1] >> 48;
          v129.i16[5] = *(_WORD *)&v73[2 * v152];
          v164.i16[0] = *(_WORD *)&v73[2 * v164.u32[0]];
          uint64_t v165 = *((void *)&v126 + 1);
          v136.i16[5] = *v160;
          uint32x4_t v166 = vmovl_high_u16(v163);
          *(void *)&long long v126 = v166.u32[2];
          *((void *)&v126 + 1) = v166.u32[3];
          v129.i16[6] = *(_WORD *)&v73[2 * v150];
          v136.i16[6] = *v161;
          float v167 = (__int16 *)&v73[2 * v166.u32[0]];
          float16x8_t v168 = (__int16 *)&v73[2 * v166.u32[1]];
          float16x8_t v169 = (float16x8_t)vuzp1q_s16((int16x8_t)v129, (int16x8_t)v136);
          v164.i16[1] = *(_WORD *)&v73[2 * v164.u32[1]];
          v129.i16[7] = *(_WORD *)&v73[2 * *((void *)&v150 + 1)];
          v164.i16[2] = *(_WORD *)&v73[2 * v164.u32[2]];
          v164.i16[3] = *(_WORD *)&v73[2 * v165];
          v164.i16[4] = *v167;
          v164.i16[5] = *v168;
          v136.i16[7] = *v162;
          v164.i16[6] = *(_WORD *)&v73[2 * v126];
          float16x8_t v170 = vmlaq_n_f16(vmlaq_n_f16(v112, v129, v243), v136, v91);
          float16x8_t v171 = (float16x8_t)vuzp2q_s16((int16x8_t)v129, (int16x8_t)v136);
          float16x8_t v106 = v135;
          float16x8_t v172 = (float16x8_t)v164;
          v172.i16[7] = *(_WORD *)&v73[2 * *((void *)&v126 + 1)];
          *v110++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v170, v172, v286), v112), v87)));
          int16x8_t v173 = (int16x8_t)vaddq_f16(v169, v171);
          result[v107++] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v86, v67, (float16x8_t)vzip1q_s16(v173, v173)), v135, (float16x8_t)vzip2q_s16(v173, v173)), v68, vaddq_f16((float16x8_t)vtrn1q_s16(v164, v164), (float16x8_t)vtrn2q_s16((int16x8_t)v172, (int16x8_t)v172))), v76), v280)));
        }
        while ((int)(v107 * 8) < (int)v20 - 7);
        uint64_t v174 = &result[v107];
        size_t v175 = v20 & 0xFFFFFFF8;
        uint64_t v36 = v249;
        uint64_t v33 = v251;
        uint64_t v32 = v252;
        uint64_t v35 = v250;
        float v40 = v248;
      }
      for (; v20 > v175; _H12 = v263)
      {
        float v176 = v50;
        float v177 = (float)(v109->u16[1] >> v80) - v41;
        float v178 = *((float *)&v103 + 1) * v177;
        float v179 = _S19 * (float)((float)(v108->u16[0] >> v80) - v40);
        float v180 = (float)(*((float *)&v103 + 1) * v177) + v179;
        float v181 = 8191.0;
        if (v180 <= 8191.0)
        {
          float v181 = (float)(*((float *)&v103 + 1) * v177) + v179;
          if (v180 < 0.0) {
            float v181 = 0.0;
          }
        }
        float v182 = (float)(v109->u16[0] >> v80) - v41;
        float v183 = (float)(*((float *)&v104 + 1) * v177) + (float)(v182 * *(float *)&v104);
        float v184 = 8191.0;
        if ((float)(v179 + v183) <= 8191.0)
        {
          float v184 = v179 + v183;
          if ((float)(v179 + v183) < 0.0) {
            float v184 = 0.0;
          }
        }
        float v185 = *(float *)&v103 * v182;
        float v186 = v185 + v179;
        BOOL v187 = (float)(v185 + v179) <= 8191.0;
        float v188 = 8191.0;
        if (v187)
        {
          float v188 = v186;
          if (v186 < 0.0) {
            float v188 = 0.0;
          }
        }
        float16x8_t v189 = v98;
        float v190 = _S19 * (float)((float)(v108->u16[1] >> v80) - v40);
        float v191 = v178 + v190;
        float v192 = 8191.0;
        if (v191 <= 8191.0)
        {
          float v192 = v191;
          if (v191 < 0.0) {
            float v192 = 0.0;
          }
        }
        float v193 = v41;
        float v194 = v183 + v190;
        BOOL v187 = (float)(v183 + v190) <= 8191.0;
        float v195 = 8191.0;
        if (v187)
        {
          float v195 = v194;
          if (v194 < 0.0) {
            float v195 = 0.0;
          }
        }
        float v196 = v40;
        float v197 = v185 + v190;
        float v198 = 8191.0;
        if (v197 <= 8191.0)
        {
          float v198 = v197;
          if (v197 < 0.0) {
            float v198 = 0.0;
          }
        }
        _H1 = *(_WORD *)&v61[2 * llroundf(fminf(fmaxf(v181, 0.0), 8191.0))];
        _H25 = *(_WORD *)&v61[2 * llroundf(fminf(fmaxf(v184, 0.0), 8191.0))];
        __asm
        {
          FCVT            S1, H1
          FCVT            S25, H25
        }
        _H28 = *(_WORD *)&v61[2 * llroundf(fminf(fmaxf(v188, 0.0), 8191.0))];
        unsigned int v204 = llroundf(fminf(fmaxf(v192, 0.0), 8191.0));
        __asm { FCVT            S0, H28 }
        _H28 = *(_WORD *)&v61[2 * v204];
        __asm { FCVT            S28, H28 }
        _H30 = *(_WORD *)&v61[2 * llroundf(fminf(fmaxf(v195, 0.0), 8191.0))];
        __asm { FCVT            S30, H30 }
        _H7 = *(_WORD *)&v61[2 * llroundf(fminf(fmaxf(v198, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        float v212 = (float)((float)(v270 * _S25) + (float)(_S1 * v272)) + (float)(_S0 * v268);
        float v213 = (float)((float)(v277 * _S25) + (float)(_S1 * v279)) + (float)(_S0 * v278);
        _S0 = (float)((float)(v275 * _S25) + (float)(_S1 * v276)) + (float)(_S0 * v274);
        _S1 = (float)((float)(v270 * _S30) + (float)(_S28 * v272)) + (float)(_S7 * v268);
        _S25 = (float)((float)(v277 * _S30) + (float)(_S28 * v279)) + (float)(_S7 * v278);
        _S7 = (float)((float)(v275 * _S30) + (float)(_S28 * v276)) + (float)(_S7 * v274);
        LOWORD(_S28) = *(_WORD *)&v73[2 * llroundf(fminf(fmaxf(v212, 0.0), 8191.0))];
        LOWORD(_S30) = *(_WORD *)&v73[2 * llroundf(fminf(fmaxf(v213, 0.0), 8191.0))];
        __asm
        {
          FCVT            S28, H28
          FCVT            S30, H30
        }
        LOWORD(_S0) = *(_WORD *)&v73[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        LOWORD(_S1) = *(_WORD *)&v73[2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        LOWORD(_S25) = *(_WORD *)&v73[2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0))];
        __asm { FCVT            S25, H25 }
        LOWORD(_S7) = *(_WORD *)&v73[2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0))];
        __asm { FCVT            S31, H7 }
        float v224 = (float)((float)((float)(v282 * _S30) + (float)(v283 * _S28)) + (float)(v284 * _S0)) + v271;
        float v225 = (float)((float)((float)(v282 * _S25) + (float)(v283 * _S1)) + (float)(v284 * _S31)) + v271;
        if (v224 < v271) {
          float v226 = v271;
        }
        else {
          float v226 = (float)((float)((float)(v282 * _S30) + (float)(v283 * _S28)) + (float)(v284 * _S0)) + v271;
        }
        if (v224 > v273) {
          float v226 = v273;
        }
        v110->i8[0] = llroundf(v226);
        if (v225 < v271) {
          float v227 = v271;
        }
        else {
          float v227 = (float)((float)((float)(v282 * _S25) + (float)(v283 * _S1)) + (float)(v284 * _S31)) + v271;
        }
        if (v225 > v273) {
          float v227 = v273;
        }
        v110->i8[1] = llroundf(v227);
        float v228 = _S28 + _S1;
        float v50 = v176;
        float v229 = _S30 + _S25;
        float v230 = (float)(v176 + (float)(v228 * *(float *)&v105)) + (float)((float)(_S30 + _S25) * *(float *)&v285);
        float v231 = _S0 + _S31;
        float v232 = v230 + (float)((float)(_S0 + _S31) * v12.f32[0]);
        float v233 = v54;
        if (v232 <= v54)
        {
          float v233 = v232;
          if (v232 < v287) {
            float v233 = v287;
          }
        }
        float v234 = (float)((float)(v176 + (float)(v228 * *((float *)&v105 + 1))) + (float)(v229 * *((float *)&v285 + 1)))
             + (float)(v231 * v12.f32[1]);
        *uint64_t v174 = llroundf(v233);
        float v235 = v54;
        float v40 = v196;
        float16x8_t v67 = v266;
        if (v234 <= v54)
        {
          float v235 = v234;
          if (v234 < v287) {
            float v235 = v287;
          }
        }
        v174[1] = llroundf(v235);
        v174 += 2;
        v175 += 2;
        float v109 = (uint16x8_t *)((char *)v109 + 4);
        float v108 = (uint16x8_t *)((char *)v108 + 4);
        float v110 = (int8x8_t *)((char *)v110 + 2);
        float v41 = v193;
        float16x8_t v98 = v189;
        float16x8_t v68 = v267;
        float16x8_t v87 = v269;
        float16x8_t v86 = v264;
        short float v91 = v265;
      }
      float v79 = (uint16x8_t *)((char *)v79 + v32);
      float v78 = (uint16x8_t *)((char *)v78 + v33);
      float v69 = (int8x8_t *)((char *)v69 + v35);
      uint64_t result = (void *)((char *)result + v36);
      ++v19;
      float16x8_t v102 = (float16x8_t)v254;
      float16x8_t v106 = (float16x8_t)v255;
      float16x8_t v76 = v253;
    }
    while (v19 != v23);
    if (v247 && v246)
    {
      uint64_t v236 = 0;
      do
      {
        if (v20)
        {
          size_t v237 = v20;
          float v238 = v37;
          float v239 = (unsigned __int16 *)v34;
          do
          {
            unsigned int v240 = *v239++;
            *v238++ = llroundf((float)v240 * 0.0038911);
            --v237;
          }
          while (v237);
        }
        v34 += v241;
        v37 += v242;
        ++v236;
      }
      while (v236 != v23);
    }
    else if (v246)
    {
      do
      {
        if (v20) {
          uint64_t result = memset(v37, 255, v20);
        }
        v37 += v242;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Mat_TRC_422vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    size_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    unint64_t v16 = result[13] * a2 / v7;
    uint64_t v17 = (uint64_t *)result[16];
    unint64_t v18 = v16 + result[15];
    uint64_t v19 = result[19];
    uint64_t v20 = (uint64_t *)result[7];
    uint64_t v21 = (uint64_t *)result[8];
    size_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v26 = v20[2];
    uint64_t v27 = v26 + v25 * v13 + 2 * v12;
    uint64_t v28 = *v22;
    uint64_t v29 = v22[1];
    uint64_t v30 = v22[2];
    uint64_t v31 = v17[2];
    uint64_t v32 = (unsigned char *)(v31 + v30 * v18 + v15);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v19;
    float v143 = v33 * *(float *)(v19 + 16);
    float v144 = v33 * *(float *)(v19 + 8);
    float v141 = v33 * *(float *)(v19 + 28);
    *(float *)&unsigned int v37 = v141;
    float v142 = v33 * *(float *)(v19 + 20);
    LOWORD(v37) = *(_WORD *)(v19 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 152);
    float v42 = (float)v37;
    float v43 = *(float *)(v19 + 36);
    float v44 = *(float *)(v19 + 40);
    float v45 = *(float *)(v19 + 44);
    float v139 = *(float *)(v19 + 52) * 0.5;
    float v140 = *(float *)(v19 + 48) * 0.5;
    float v137 = *(float *)(v19 + 60) * 0.5;
    float v138 = *(float *)(v19 + 56) * 0.5;
    float v136 = *(float *)(v19 + 64) * 0.5;
    float v46 = *(float *)(v19 + 72);
    float v47 = *(float *)(v19 + 68) * 0.5;
    float v49 = *(float *)(v19 + 76);
    float v48 = *(float *)(v19 + 80);
    float v50 = *(float *)(v19 + 84);
    float v51 = *(float *)(v19 + 88);
    float v52 = *(float *)(v19 + 92);
    float v53 = *(float *)(v19 + 96);
    float v54 = *(float *)(v19 + 100);
    float v55 = *(float *)(v19 + 104);
    uint64_t v56 = v19 + 164;
    uint64_t result = (void *)(v19 + 16548);
    unsigned int v57 = *(unsigned __int8 *)(v19 + 124);
    if (v57 >= 0x11) {
      char v58 = 0;
    }
    else {
      char v58 = 16 - v57;
    }
    uint64_t v60 = *v17;
    uint64_t v59 = v17[1];
    uint64_t v61 = v59 + v29 * v18 + v15;
    if (!v59) {
      uint64_t v61 = 0;
    }
    float16x8_t v62 = (unsigned char *)(v60 + v28 * v18 + v15);
    uint64_t v64 = *v20;
    uint64_t v63 = v20[1];
    uint64_t v65 = v63 + v24 * v13 + 2 * v12;
    if (!v63) {
      uint64_t v65 = 0;
    }
    uint64_t v66 = v64 + v23 * v13 + 2 * v12;
    char v67 = v58;
    do
    {
      if (v11)
      {
        size_t v68 = 0;
        float v69 = (unsigned __int16 *)v66;
        uint64_t v70 = v62;
        do
        {
          uint64_t v71 = (unsigned __int16 *)(v65 + 2 * v68);
          float v72 = (float)(v71[1] >> v67) - v35;
          float v73 = v144 * v72;
          float v74 = v36 * (float)((float)(*v69 >> v67) - v34);
          float v75 = (float)(v144 * v72) + v74;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = (float)(v144 * v72) + v74;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = (float)(*v71 >> v67) - v35;
          float v78 = (float)(v142 * v72) + (float)(v77 * v143);
          float v79 = 8191.0;
          if ((float)(v74 + v78) <= 8191.0)
          {
            float v79 = v74 + v78;
            if ((float)(v74 + v78) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v141 * v77;
          float v81 = v80 + v74;
          BOOL v82 = (float)(v80 + v74) <= 8191.0;
          float v83 = 8191.0;
          if (v82)
          {
            float v83 = v81;
            if (v81 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v36 * (float)((float)(v69[1] >> v67) - v34);
          float v85 = v73 + v84;
          float v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v78 + v84;
          BOOL v82 = (float)(v78 + v84) <= 8191.0;
          float v88 = 8191.0;
          if (v82)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v80 + v84;
          BOOL v82 = (float)(v80 + v84) <= 8191.0;
          float v90 = 8191.0;
          if (v82)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm
          {
            FCVT            S4, H4
            FCVT            S5, H5
          }
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v107 = (float)((float)(v49 * _S5) + (float)(_S4 * v46)) + (float)(_S6 * v48);
          float v108 = (float)((float)(v51 * _S5) + (float)(_S4 * v50)) + (float)(_S6 * v52);
          _S4 = (float)((float)(v54 * _S5) + (float)(_S4 * v53)) + (float)(_S6 * v55);
          _S5 = (float)((float)(v49 * _S24) + (float)(_S7 * v46)) + (float)(_S25 * v48);
          _S6 = (float)((float)(v51 * _S24) + (float)(_S7 * v50)) + (float)(_S25 * v52);
          float v112 = (float)((float)(v54 * _S24) + (float)(_S7 * v53)) + (float)(_S25 * v55);
          LOWORD(_S24) = *((_WORD *)result + llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          LOWORD(_S25) = *((_WORD *)result + llroundf(fminf(fmaxf(v108, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H25
          }
          LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S26, H4 }
          LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *((_WORD *)result + llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          float v119 = (float)((float)((float)(v44 * _S25) + (float)(v43 * _S24)) + (float)(v45 * _S26)) + v38;
          float v120 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          if (v119 < v38) {
            float v121 = v38;
          }
          else {
            float v121 = (float)((float)((float)(v44 * _S25) + (float)(v43 * _S24)) + (float)(v45 * _S26)) + v38;
          }
          if (v119 <= v40) {
            float v122 = v121;
          }
          else {
            float v122 = v40;
          }
          *uint64_t v70 = llroundf(v122);
          if (v120 < v38) {
            float v123 = v38;
          }
          else {
            float v123 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          }
          if (v120 > v40) {
            float v123 = v40;
          }
          v70[1] = llroundf(v123);
          float v124 = _S24 + _S4;
          float v125 = _S25 + _S5;
          float v126 = _S26 + _S6;
          float v127 = (float)((float)(v39 + (float)(v124 * v140)) + (float)(v125 * v139)) + (float)(v126 * v138);
          float v128 = v42;
          if (v127 <= v42)
          {
            float v128 = (float)((float)(v39 + (float)(v124 * v140)) + (float)(v125 * v139)) + (float)(v126 * v138);
            if (v127 < v41) {
              float v128 = v41;
            }
          }
          float v129 = (float)((float)(v39 + (float)(v124 * v137)) + (float)(v125 * v136)) + (float)(v126 * v47);
          *(unsigned char *)(v61 + v68) = llroundf(v128);
          float v130 = v42;
          if (v129 <= v42)
          {
            float v130 = v129;
            if (v129 < v41) {
              float v130 = v41;
            }
          }
          *(unsigned char *)(v61 + v68 + 1) = llroundf(v130);
          v68 += 2;
          v69 += 2;
          v70 += 2;
        }
        while (v11 > v68);
      }
      v66 += v23;
      v65 += v24;
      v62 += v28;
      v61 += v29;
      ++v10;
    }
    while (v10 != v14);
    if (v26 && v31)
    {
      uint64_t v131 = 0;
      do
      {
        if (v11)
        {
          size_t v132 = v11;
          uint32x4_t v133 = v32;
          uint32x4_t v134 = (unsigned __int16 *)v27;
          do
          {
            unsigned int v135 = *v134++;
            *v133++ = llroundf((float)v135 * 0.0038911);
            --v132;
          }
          while (v132);
        }
        v27 += v25;
        v32 += v30;
        ++v131;
      }
      while (v131 != v14);
    }
    else if (v31)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v32, 255, v11);
        }
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_422vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf422_rgb_422vf_neon_fp16_GCD(void *result, uint64_t a2, double _D0)
{
  uint64_t v8 = *(void *)((char *)result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    size_t v13 = *(void *)((char *)result + 20);
    uint64_t v14 = *(void *)((char *)result + 36);
    unint64_t v15 = v10 + *(void *)((char *)result + 44);
    unint64_t v16 = v11 - v10;
    uint64_t v17 = result[14];
    uint64_t v18 = (uint64_t *)result[16];
    unint64_t v19 = result[13] * a2 / v9 + result[15];
    uint64_t v20 = (float32x2_t *)result[19];
    uint64_t v21 = (uint64_t *)result[7];
    size_t v22 = (uint64_t *)result[8];
    uint64_t v23 = (uint64_t *)result[17];
    uint64_t v24 = *v22;
    uint64_t v25 = v22[1];
    uint64_t v26 = v22[2];
    uint64_t v143 = v21[2];
    uint64_t v27 = v143 + v26 * v15 + 2 * v14;
    uint64_t v28 = *v23;
    uint64_t v29 = v23[1];
    uint64_t v30 = v23[2];
    uint64_t v142 = v18[2];
    uint64_t v31 = (unsigned char *)(v142 + v30 * v19 + v17);
    unsigned int v32 = v20[17].u16[2];
    unsigned int v33 = v20[17].u16[3];
    v34.i32[0] = v20[3].i32[1];
    unsigned int v35 = v20[18].u16[0];
    unsigned int v36 = v20[18].u16[1];
    unsigned int v37 = v20[18].u16[2];
    unsigned int v38 = v20[18].u16[3];
    unsigned int v39 = v20[19].u16[0];
    LODWORD(_D0) = v20[4].i32[1];
    _S1 = v20[5].f32[0];
    float v152 = *(float *)&_D0;
    _S2 = v20[5].f32[1];
    v42.i32[0] = v20[6].i32[0];
    v44.i32[0] = v20[6].i32[1];
    v43.i32[0] = v20[7].i32[0];
    float v45 = (float)v32;
    *(short float *)v5.i16 = (short float)v32;
    float v46 = (float)v33;
    *(float *)v7.i32 = (float)v20[17].u32[0] / (float)v20[16].u32[0];
    _S5 = *(float *)v7.i32 * v20->f32[0];
    float v48 = (float)v35;
    float v49 = (float)v36;
    float v50 = (float)v37;
    float v51 = (float)v38;
    float v52 = (float)v39;
    __asm { FCVT            H8, S5 }
    float16x8_t v58 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v5.f32, 0);
    v34.i32[1] = v20[1].i32[0];
    *(float32x2_t *)v5.f32 = vmul_n_f32(v34, *(float *)v7.i32);
    float16x8_t v59 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    *(float32x2_t *)v7.i8 = vmul_n_f32(v20[2], *(float *)v7.i32);
    float16x8_t v60 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)v7), 0);
    short float v61 = -(short float)v33;
    float16x8_t v62 = vmulq_n_f16(v59, v61);
    float16x8_t v63 = vmulq_n_f16(v60, v61);
    __asm { FCVT            H9, S0 }
    v42.i32[1] = v20[7].i32[1];
    __asm { FCVT            H11, S1 }
    short float v151 = _H11;
    *(float32x2_t *)v3.f32 = vmul_f32(v42, (float32x2_t)0x3F0000003F000000);
    int32x4_t v66 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    v44.i32[1] = v20[8].i32[0];
    *(float32x2_t *)v6.f32 = vmul_f32(v44, (float32x2_t)0x3F0000003F000000);
    int32x4_t v67 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v6), 0);
    v43.i32[1] = v20[8].i32[1];
    *(float32x2_t *)v4.f32 = vmul_f32(v43, (float32x2_t)0x3F0000003F000000);
    int16x4_t v68 = (int16x4_t)vcvt_f16_f32(v4);
    int32x4_t v69 = vdupq_lane_s32((int32x2_t)v68, 0);
    *(short float *)v68.i16 = (short float)v35;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(v68, 0);
    *(short float *)v68.i16 = (short float)v36;
    int16x8_t v71 = vdupq_lane_s16(v68, 0);
    *(short float *)v68.i16 = (short float)v37;
    int16x8_t v72 = vdupq_lane_s16(v68, 0);
    *(short float *)v68.i16 = (short float)v38;
    int16x8_t v73 = vdupq_lane_s16(v68, 0);
    float16x8_t v148 = (float16x8_t)v73;
    *(short float *)v73.i16 = (short float)v39;
    float16x8_t v74 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v73.i8, 0);
    unsigned int v75 = v20[15].u8[4];
    if (v75 >= 0x11) {
      unsigned __int8 v76 = 0;
    }
    else {
      unsigned __int8 v76 = 16 - v75;
    }
    uint64_t v77 = *v18;
    uint64_t v78 = v18[1];
    float v79 = (unsigned char *)(v78 + v29 * v19 + v17);
    if (!v78) {
      float v79 = 0;
    }
    uint64_t result = (void *)(v77 + v28 * v19 + v17);
    uint64_t v80 = *v21;
    uint64_t v81 = v21[1];
    uint64_t v82 = v81 + v25 * v15 + 2 * v14;
    if (!v81) {
      uint64_t v82 = 0;
    }
    uint64_t v83 = v80 + v24 * v15 + 2 * v14;
    uint16x8_t v84 = (uint16x8_t)vdupq_n_s16(-v76);
    __asm { FCVT            H0, S2 }
    uint64_t v146 = *(void *)&_D0;
    float v85 = v152;
    float v164 = *(float *)v7.i32;
    float v165 = v5.f32[0];
    v7.i32[0] = v7.i32[1];
    float v163 = v6.f32[0];
    v6.i32[0] = v5.i32[1];
    float v161 = v4.f32[1];
    float v162 = v6.f32[1];
    float16x8_t v160 = v59;
    float16x8_t v158 = v62;
    float16x8_t v159 = v60;
    int32x4_t v156 = v66;
    short float v157 = _H9;
    int32x4_t v154 = v69;
    int32x4_t v155 = v67;
    int16x8_t v153 = v71;
    __int32 v149 = v4.i32[0];
    __int32 v150 = v3.i32[0];
    float v147 = (float)v38;
    __int32 v144 = v7.i32[1];
    __int32 v145 = v5.i32[1];
    do
    {
      if ((int)v13 < 8)
      {
        size_t v109 = 0;
        float v108 = v79;
        float v89 = (int8x8_t *)result;
        float v88 = (uint16x8_t *)v82;
        float v87 = (uint16x8_t *)v83;
      }
      else
      {
        uint64_t v86 = 0;
        float v87 = (uint16x8_t *)v83;
        float v88 = (uint16x8_t *)v82;
        float v89 = (int8x8_t *)result;
        float16x8_t v7 = (float16x8_t)v72;
        float16x8_t v90 = (float16x8_t)v66;
        float16x8_t v91 = (float16x8_t)v67;
        float16x8_t v92 = (float16x8_t)v69;
        float16x8_t v93 = (float16x8_t)v71;
        do
        {
          uint16x8_t v94 = *v88++;
          float16x8_t v95 = vcvtq_f16_u16(vshlq_u16(v94, v84));
          int8x16_t v96 = (int8x16_t)vmlaq_f16(v63, v60, v95);
          int16x8_t v97 = (int16x8_t)vmlaq_f16(v62, v59, v95);
          v95.i64[0] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u64[0];
          *(int16x4_t *)v98.i8 = vuzp1_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v95.i8);
          *(int16x4_t *)v95.i8 = vuzp2_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v95.i8);
          v95.i64[1] = v146;
          v98.i64[1] = v146;
          v97.i64[0] = vextq_s8(v96, v96, 8uLL).u64[0];
          float16x4_t v99 = (float16x4_t)vuzp1_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v97.i8);
          *(int16x4_t *)v97.i8 = vuzp2_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v97.i8);
          float16x8_t v100 = (float16x8_t)vzip1q_s16(v98, v98);
          *(float16x4_t *)v97.i8 = vadd_f16(v99, *(float16x4_t *)v97.i8);
          v97.i64[1] = v146;
          uint16x8_t v101 = *v87++;
          float16x8_t v102 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v101, v84)), v58);
          float16x8_t v103 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v95, (int16x8_t)v95), v102, _H8);
          float16x8_t v104 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v97, v97), v102, _H8);
          float16x8_t v105 = vmlaq_n_f16(v100, v102, _H8);
          float16x8_t v106 = vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v70, v103, _H9), v104, v151), v105, *(short float *)&v146), v70), v7);
          int16x8_t v107 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v103, (int16x8_t)v104), (float16x8_t)vuzp2q_s16((int16x8_t)v103, (int16x8_t)v104));
          *v89++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(v106));
          *(int8x8_t *)&v79[v86] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v93, v90, (float16x8_t)vzip1q_s16(v107, v107)), v91, (float16x8_t)vzip2q_s16(v107, v107)), v92, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v105, (int16x8_t)v105), (float16x8_t)vtrn2q_s16((int16x8_t)v105, (int16x8_t)v105))), v148),
                                                            v74)));
          v86 += 8;
        }
        while ((int)v86 < (int)v13 - 7);
        float v108 = &v79[v86];
        size_t v109 = v13 & 0xFFFFFFF8;
        v4.i32[0] = v149;
        v3.i32[0] = v150;
        int16x8_t v72 = (int16x8_t)v7;
        float v51 = v147;
        float v85 = v152;
        v7.i32[0] = v144;
        v6.i32[0] = v145;
      }
      while (v13 > v109)
      {
        float16x8_t v110 = v63;
        float16x8_t v111 = v58;
        float v112 = (float)(v88->u16[0] >> v76) - v46;
        float v113 = (float)(v88->u16[1] >> v76) - v46;
        float v114 = v6.f32[0] * v113;
        float v115 = (float)(*(float *)v7.i32 * v113) + (float)(v112 * v164);
        float v116 = v165 * v112;
        float v117 = _S5 * (float)((float)(v87->u16[0] >> v76) - v45);
        float v118 = (float)(v6.f32[0] * v113) + v117;
        float v119 = v117 + v115;
        float v120 = v116 + v117;
        float v121 = (float)((float)((float)(_S1 * (float)(v117 + v115)) + (float)(v85 * v118))
                     + (float)(_S2 * (float)(v116 + v117)))
             + v48;
        float v122 = v50;
        if (v121 <= v50)
        {
          float v122 = v121;
          if (v121 < v48) {
            float v122 = (float)v35;
          }
        }
        float v123 = _S5 * (float)((float)(v87->u16[1] >> v76) - v45);
        float v124 = v114 + v123;
        float v125 = v115 + v123;
        float v126 = v116 + v123;
        float v127 = (float)((float)((float)(_S1 * v125) + (float)(v85 * v124)) + (float)(_S2 * (float)(v116 + v123))) + v48;
        v89->i8[0] = llroundf(v122);
        float v128 = v50;
        if (v127 <= v50)
        {
          float v128 = v127;
          if (v127 < v48) {
            float v128 = (float)v35;
          }
        }
        v89->i8[1] = llroundf(v128);
        float v129 = v118 + v124;
        float v130 = v49 + (float)((float)(v118 + v124) * v3.f32[0]);
        float v131 = v119 + v125;
        float v132 = v120 + v126;
        float v133 = (float)(v130 + (float)((float)(v119 + v125) * v163)) + (float)(v132 * v4.f32[0]);
        float v134 = v52;
        if (v133 <= v52)
        {
          float v134 = v133;
          if (v133 < v51) {
            float v134 = v51;
          }
        }
        float v135 = (float)((float)(v49 + (float)(v129 * v3.f32[1])) + (float)(v131 * v162)) + (float)(v132 * v161);
        *float v108 = llroundf(v134);
        float v136 = v52;
        float16x8_t v58 = v111;
        float16x8_t v63 = v110;
        if (v135 <= v52)
        {
          float v136 = v135;
          if (v135 < v51) {
            float v136 = v51;
          }
        }
        v108[1] = llroundf(v136);
        v108 += 2;
        v109 += 2;
        float v88 = (uint16x8_t *)((char *)v88 + 4);
        float v87 = (uint16x8_t *)((char *)v87 + 4);
        float v89 = (int8x8_t *)((char *)v89 + 2);
      }
      v83 += v24;
      v82 += v25;
      uint64_t result = (void *)((char *)result + v28);
      v79 += v29;
      ++v12;
      float16x8_t v59 = v160;
      float16x8_t v62 = v158;
      float16x8_t v60 = v159;
      int32x4_t v66 = v156;
      _H9 = v157;
      int32x4_t v69 = v154;
      int32x4_t v67 = v155;
      int16x8_t v71 = v153;
    }
    while (v12 != v16);
    if (v143 && v142)
    {
      uint64_t v137 = 0;
      do
      {
        if (v13)
        {
          size_t v138 = v13;
          float v139 = v31;
          float v140 = (unsigned __int16 *)v27;
          do
          {
            unsigned int v141 = *v140++;
            *v139++ = llroundf((float)v141 * 0.0038911);
            --v138;
          }
          while (v138);
        }
        v27 += v26;
        v31 += v30;
        ++v137;
      }
      while (v137 != v16);
    }
    else if (v142)
    {
      do
      {
        if (v13) {
          uint64_t result = memset(v31, 255, v13);
        }
        v31 += v30;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_422vf_GCD);
  return 0;
}

void *vt_Copy_xf422_rgb_422vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v10 = *(void *)((char *)result + 28);
  unint64_t v11 = *(unsigned __int8 *)result;
  unint64_t v12 = v10 * a2 / v11;
  unint64_t v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    uint64_t v14 = 0;
    size_t v15 = *(void *)((char *)result + 20);
    uint64_t v16 = *(void *)((char *)result + 36);
    unint64_t v17 = v12 + *(void *)((char *)result + 44);
    unint64_t v18 = v13 - v12;
    uint64_t v19 = result[14];
    uint64_t v20 = (uint64_t *)result[16];
    unint64_t v21 = result[13] * a2 / v11 + result[15];
    uint64_t v22 = result[19];
    uint64_t v23 = (uint64_t *)result[7];
    uint64_t v24 = (uint64_t *)result[8];
    uint64_t v25 = (uint64_t *)result[17];
    uint64_t v26 = *v24;
    uint64_t v27 = v24[1];
    uint64_t v28 = v24[2];
    uint64_t v29 = v23[2];
    uint64_t v30 = v29 + v28 * v17 + 2 * v16;
    uint64_t v31 = *v25;
    uint64_t v32 = v25[1];
    uint64_t v33 = v25[2];
    uint64_t v34 = v20[2];
    uint64_t v35 = (unsigned char *)(v34 + v33 * v21 + v19);
    LOWORD(a5) = *(_WORD *)(v22 + 140);
    LOWORD(a6) = *(_WORD *)(v22 + 142);
    float v36 = (float)*(unsigned int *)(v22 + 136) / (float)*(unsigned int *)(v22 + 128);
    float v37 = (float)LODWORD(a5);
    float v38 = (float)LODWORD(a6);
    float v39 = v36 * *(float *)v22;
    float v40 = v36 * *(float *)(v22 + 8);
    float v41 = v36 * *(float *)(v22 + 16);
    float v42 = v36 * *(float *)(v22 + 20);
    float v43 = *(float *)(v22 + 28);
    float v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v22 + 144);
    float v45 = (float)LODWORD(v43);
    LOWORD(v6) = *(_WORD *)(v22 + 146);
    float v46 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v22 + 148);
    float v47 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v22 + 150);
    float v48 = (float)v8;
    LOWORD(v9) = *(_WORD *)(v22 + 152);
    float v49 = (float)v9;
    float v50 = *(float *)(v22 + 36);
    float v51 = *(float *)(v22 + 40);
    float v52 = *(float *)(v22 + 44);
    float v53 = *(float *)(v22 + 48) * 0.5;
    float v54 = *(float *)(v22 + 52) * 0.5;
    float v55 = *(float *)(v22 + 56) * 0.5;
    float v56 = *(float *)(v22 + 60) * 0.5;
    float v57 = *(float *)(v22 + 64) * 0.5;
    float v58 = *(float *)(v22 + 68) * 0.5;
    unsigned int v59 = *(unsigned __int8 *)(v22 + 124);
    char v60 = 16 - v59;
    if (v59 >= 0x11) {
      char v60 = 0;
    }
    uint64_t v62 = *v20;
    uint64_t v61 = v20[1];
    uint64_t v63 = v61 + v32 * v21 + v19;
    if (!v61) {
      uint64_t v63 = 0;
    }
    uint64_t result = (void *)(v62 + v31 * v21 + v19);
    uint64_t v65 = *v23;
    uint64_t v64 = v23[1];
    uint64_t v66 = v64 + v27 * v17 + 2 * v16;
    if (!v64) {
      uint64_t v66 = 0;
    }
    uint64_t v67 = v65 + v26 * v17 + 2 * v16;
    char v68 = v60;
    do
    {
      if (v15)
      {
        size_t v69 = 0;
        float16x8_t v70 = (unsigned __int16 *)v67;
        int16x8_t v71 = result;
        do
        {
          int16x8_t v72 = (unsigned __int16 *)(v66 + 2 * v69);
          float v73 = (float)(*v72 >> v68) - v38;
          float v74 = (float)(v72[1] >> v68) - v38;
          float v75 = v40 * v74;
          float v76 = (float)(v42 * v74) + (float)(v73 * v41);
          float v77 = v44 * v73;
          float v78 = v39 * (float)((float)(*v70 >> v68) - v37);
          float v79 = (float)(v40 * v74) + v78;
          float v80 = v78 + v76;
          float v81 = v77 + v78;
          float v82 = (float)((float)((float)(v51 * v80) + (float)(v50 * v79)) + (float)(v52 * v81)) + v45;
          float v83 = v47;
          if (v82 <= v47)
          {
            float v83 = (float)((float)((float)(v51 * v80) + (float)(v50 * v79)) + (float)(v52 * v81)) + v45;
            if (v82 < v45) {
              float v83 = v45;
            }
          }
          float v84 = v39 * (float)((float)(v70[1] >> v68) - v37);
          float v85 = v75 + v84;
          float v86 = v76 + v84;
          float v87 = v77 + v84;
          float v88 = (float)((float)((float)(v51 * v86) + (float)(v50 * v85)) + (float)(v52 * (float)(v77 + v84))) + v45;
          *int16x8_t v71 = llroundf(v83);
          float v89 = v47;
          if (v88 <= v47)
          {
            float v89 = v88;
            if (v88 < v45) {
              float v89 = v45;
            }
          }
          v71[1] = llroundf(v89);
          float v90 = v79 + v85;
          float v91 = v80 + v86;
          float v92 = v81 + v87;
          float v93 = (float)((float)(v46 + (float)(v90 * v53)) + (float)(v91 * v54)) + (float)(v92 * v55);
          float v94 = v49;
          if (v93 <= v49)
          {
            float v94 = (float)((float)(v46 + (float)(v90 * v53)) + (float)(v91 * v54)) + (float)(v92 * v55);
            if (v93 < v48) {
              float v94 = v48;
            }
          }
          float v95 = (float)((float)(v46 + (float)(v90 * v56)) + (float)(v91 * v57)) + (float)(v92 * v58);
          *(unsigned char *)(v63 + v69) = llroundf(v94);
          float v96 = v49;
          if (v95 <= v49)
          {
            float v96 = v95;
            if (v95 < v48) {
              float v96 = v48;
            }
          }
          *(unsigned char *)(v63 + v69 + 1) = llroundf(v96);
          v69 += 2;
          v70 += 2;
          v71 += 2;
        }
        while (v15 > v69);
      }
      v67 += v26;
      v66 += v27;
      uint64_t result = (void *)((char *)result + v31);
      v63 += v32;
      ++v14;
    }
    while (v14 != v18);
    if (v29 && v34)
    {
      uint64_t v97 = 0;
      do
      {
        if (v15)
        {
          size_t v98 = v15;
          float16x4_t v99 = v35;
          float16x8_t v100 = (unsigned __int16 *)v30;
          do
          {
            unsigned int v101 = *v100++;
            *v99++ = llroundf((float)v101 * 0.0038911);
            --v98;
          }
          while (v98);
        }
        v30 += v28;
        v35 += v33;
        ++v97;
      }
      while (v97 != v18);
    }
    else if (v34)
    {
      do
      {
        if (v15) {
          uint64_t result = memset(v35, 255, v15);
        }
        v35 += v33;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Tone_Mat_TRC_2vuyf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  uint64_t v10 = (void *)result[16];
  unint64_t v11 = result[13] * a2 / v6 + result[15];
  uint64_t v12 = (uint64_t *)result[17];
  uint64_t v13 = v12[1];
  uint64_t v14 = v10[1];
  uint64_t v15 = (unsigned char *)(v14 + v13 * v11 + v9);
  unint64_t v16 = v8 / v6;
  if (v14) {
    uint64_t v17 = (_WORD *)(v14 + v13 * v11 + v9);
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16 != v7)
  {
    uint64_t v18 = 0;
    size_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    unint64_t v21 = v7 + *(void *)((char *)result + 44);
    unint64_t v22 = v16 - v7;
    uint64_t v23 = result[19];
    uint64_t v24 = (void *)result[7];
    uint64_t v25 = (uint64_t *)result[8];
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = v25[2];
    uint64_t v29 = v24[2];
    uint64_t v30 = v29 + v28 * v21 + 2 * v20;
    uint64_t v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    float v33 = (float)LODWORD(a5);
    float v172 = v32 * *(float *)v23;
    float v173 = (float)LODWORD(a4);
    float v170 = v32 * *(float *)(v23 + 16);
    float v171 = v32 * *(float *)(v23 + 8);
    float v34 = v32 * *(float *)(v23 + 20);
    *(float *)&unsigned int v35 = v32 * *(float *)(v23 + 28);
    float v168 = *(float *)&v35;
    float v169 = v34;
    LOWORD(v35) = *(_WORD *)(v23 + 144);
    float v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 146);
    float v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 148);
    float v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 150);
    float v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 152);
    float v40 = (float)v35;
    float v41 = *(float *)(v23 + 36);
    float v42 = *(float *)(v23 + 40);
    float v43 = *(float *)(v23 + 44);
    float v166 = *(float *)(v23 + 48) * 0.5;
    float v167 = v37;
    float v164 = *(float *)(v23 + 56) * 0.5;
    float v165 = *(float *)(v23 + 52) * 0.5;
    float v162 = *(float *)(v23 + 64) * 0.5;
    float v163 = *(float *)(v23 + 60) * 0.5;
    float v44 = *(float *)(v23 + 72);
    float v161 = *(float *)(v23 + 68) * 0.5;
    float v46 = *(float *)(v23 + 76);
    float v45 = *(float *)(v23 + 80);
    float v47 = *(float *)(v23 + 84);
    float v48 = *(float *)(v23 + 88);
    float v49 = *(float *)(v23 + 92);
    float v50 = *(float *)(v23 + 96);
    float v51 = *(float *)(v23 + 100);
    float v52 = *(float *)(v23 + 104);
    uint64_t v53 = v23 + 164;
    unsigned int v54 = *(unsigned __int8 *)(v23 + 124);
    char v55 = 16 - v54;
    _CF = v54 >= 0x11;
    uint64_t v57 = v23 + 16548;
    uint64_t v58 = *v10 + v31 * v11;
    uint64_t result = (void *)(v23 + 32932);
    if (_CF) {
      char v55 = 0;
    }
    unsigned int v59 = (unsigned char *)(v58 + v9);
    uint64_t v60 = v24[1];
    _ZF = v60 == 0;
    uint64_t v62 = v60 + v27 * v21 + 2 * v20;
    if (_ZF) {
      uint64_t v62 = 0;
    }
    uint64_t v63 = *v24 + v26 * v21 + 2 * v20;
    char v64 = v55;
    float v66 = *(float *)(v23 + 108);
    float v65 = *(float *)(v23 + 112);
    float v67 = *(float *)(v23 + 116);
    float v68 = *(float *)(v23 + 120);
    do
    {
      if (v19)
      {
        size_t v69 = 0;
        float16x8_t v70 = (unsigned __int16 *)v63;
        int16x8_t v71 = v17;
        int16x8_t v72 = v59;
        do
        {
          float v73 = (unsigned __int16 *)(v62 + 2 * v69);
          float v74 = (float)(v73[1] >> v64) - v33;
          float v75 = v171 * v74;
          float v76 = v172 * (float)((float)(*v70 >> v64) - v173);
          float v77 = (float)(v171 * v74) + v76;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = (float)(v171 * v74) + v76;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v33;
          float v80 = (float)(*v73 >> v64) - v33;
          float v81 = (float)(v169 * v74) + (float)(v80 * v170);
          float v82 = 8191.0;
          if ((float)(v76 + v81) <= 8191.0)
          {
            float v82 = v76 + v81;
            if ((float)(v76 + v81) < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v168 * v80;
          float v84 = (float)(v168 * v80) + v76;
          float v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            float v85 = v84;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v172 * (float)((float)(v70[1] >> v64) - v173);
          float v87 = v75 + v86;
          BOOL v88 = (float)(v75 + v86) <= 8191.0;
          float v89 = 8191.0;
          if (v88)
          {
            float v89 = v87;
            if (v87 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v81 + v86;
          BOOL v88 = (float)(v81 + v86) <= 8191.0;
          float v91 = 8191.0;
          if (v88)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v83 + v86;
          BOOL v88 = (float)(v83 + v86) <= 8191.0;
          float v93 = 8191.0;
          if (v88)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          float v105 = (float)((float)((float)(v65 * _S25) + (float)(v66 * _S24)) + (float)(v67 * _S26))
               + (float)(v68 * fmaxf(_S24, fmaxf(_S25, _S26)));
          float v106 = 8191.0;
          if (v105 <= 8191.0)
          {
            float v106 = v105;
            if (v105 < 0.0) {
              float v106 = 0.0;
            }
          }
          __asm
          {
            FCVT            S28, H1
            FCVT            S30, H27
            FCVT            S1, H2
          }
          _H0 = *(_WORD *)(v57 + 2 * llroundf(v106));
          __asm { FCVT            S0, H0 }
          float v112 = _S24 * _S0;
          float v113 = _S25 * _S0;
          float v114 = _S26 * _S0;
          float v115 = (float)((float)((float)(v65 * _S30) + (float)(v66 * _S28)) + (float)(v67 * _S1))
               + (float)(v68 * fmaxf(_S28, fmaxf(_S30, _S1)));
          float v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            float v116 = v115;
            if (v115 < 0.0) {
              float v116 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v57 + 2 * llroundf(v116));
          __asm { FCVT            S0, H0 }
          float v119 = _S28 * _S0;
          float v120 = _S30 * _S0;
          float v121 = _S1 * _S0;
          _S1 = (float)((float)(v46 * v113) + (float)(v112 * v44)) + (float)(v114 * v45);
          float v123 = (float)((float)(v48 * v113) + (float)(v112 * v47)) + (float)(v114 * v49);
          _S24 = (float)((float)(v51 * v113) + (float)(v112 * v50)) + (float)(v114 * v52);
          float v125 = (float)(v46 * v120) + (float)(v119 * v44);
          float v126 = (float)(v48 * v120) + (float)(v119 * v47);
          _S2 = (float)(v51 * v120) + (float)(v119 * v50);
          _S25 = v125 + (float)(v121 * v45);
          float v129 = v126 + (float)(v121 * v49);
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          float v130 = _S2 + (float)(v121 * v52);
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S24) = *((_WORD *)result + llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          LOWORD(_S24) = *((_WORD *)result + llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *((_WORD *)result + llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          unsigned int v136 = llroundf(fminf(fmaxf(v130, 0.0), 8191.0));
          float v137 = (float)(v42 * _S2) + (float)(v41 * _S1);
          _S1 = _S1 + _S24;
          float v139 = _S2 + _S25;
          float v140 = (float)(v167 + (float)(_S1 * v166)) + (float)(v139 * v165);
          float v141 = (float)(v167 + (float)(_S1 * v163)) + (float)(v139 * v162);
          LOWORD(_S1) = *((_WORD *)result + v136);
          __asm { FCVT            S1, H1 }
          float v143 = v137 + (float)(v43 * _S27);
          float v144 = _S27 + _S1;
          float v145 = v140 + (float)(v144 * v164);
          float v146 = v141 + (float)(v144 * v161);
          if (v145 < v39) {
            float v147 = v39;
          }
          else {
            float v147 = v145;
          }
          float v148 = v143 + v36;
          if (v145 <= v40) {
            float v149 = v147;
          }
          else {
            float v149 = v40;
          }
          char v150 = llroundf(v149);
          if (v148 < v36) {
            float v151 = v36;
          }
          else {
            float v151 = v148;
          }
          *int16x8_t v72 = v150;
          if (v148 <= v38) {
            float v152 = v151;
          }
          else {
            float v152 = v38;
          }
          v72[1] = llroundf(v152);
          float v153 = v40;
          if (v146 <= v40)
          {
            float v153 = v146;
            if (v146 < v39) {
              float v153 = v39;
            }
          }
          float v154 = (float)((float)((float)(v42 * _S25) + (float)(v41 * _S24)) + (float)(v43 * _S1)) + v36;
          v72[2] = llroundf(v153);
          float v155 = v38;
          if (v154 <= v38)
          {
            float v155 = v154;
            if (v154 < v36) {
              float v155 = v36;
            }
          }
          v72[3] = llroundf(v155);
          float v33 = v79;
          if (v71) {
            *v71++ = 0;
          }
          v69 += 2;
          v70 += 2;
          v72 += 4;
        }
        while (v19 > v69);
      }
      v63 += v26;
      v62 += v27;
      v59 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      uint64_t v156 = 0;
      do
      {
        if (v19)
        {
          size_t v157 = v19;
          float16x8_t v158 = v15;
          float16x8_t v159 = (unsigned __int16 *)v30;
          do
          {
            unsigned int v160 = *v159++;
            *v158++ = llroundf((float)v160 * 0.0038911);
            --v157;
          }
          while (v157);
        }
        v30 += v28;
        v15 += v13;
        ++v156;
      }
      while (v156 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19) {
          uint64_t result = memset(v15, 255, v19);
        }
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Mat_TRC_2vuyf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = v6 + v6 * a2;
  uint64_t v10 = result[14];
  uint64_t v11 = (void *)result[16];
  unint64_t v12 = result[13] * a2 / v7 + result[15];
  uint64_t v13 = (uint64_t *)result[17];
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (unsigned char *)(v15 + v14 * v12 + v10);
  unint64_t v17 = v9 / v7;
  if (v15) {
    uint64_t v18 = (_WORD *)(v15 + v14 * v12 + v10);
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17 != v8)
  {
    uint64_t v19 = 0;
    size_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    unint64_t v22 = v8 + *(void *)((char *)result + 44);
    unint64_t v23 = v17 - v8;
    uint64_t v24 = result[19];
    uint64_t v25 = (void *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = v30 + v29 * v22 + 2 * v21;
    uint64_t v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v24;
    float v149 = v33 * *(float *)(v24 + 16);
    float v150 = v33 * *(float *)(v24 + 8);
    float v147 = v33 * *(float *)(v24 + 28);
    *(float *)&unsigned int v37 = v147;
    float v148 = v33 * *(float *)(v24 + 20);
    LOWORD(v37) = *(_WORD *)(v24 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 152);
    float v42 = (float)v37;
    float v43 = *(float *)(v24 + 36);
    float v44 = *(float *)(v24 + 40);
    float v45 = *(float *)(v24 + 44);
    float v145 = *(float *)(v24 + 52) * 0.5;
    float v146 = *(float *)(v24 + 48) * 0.5;
    float v143 = *(float *)(v24 + 60) * 0.5;
    float v144 = *(float *)(v24 + 56) * 0.5;
    float v46 = *(float *)(v24 + 64) * 0.5;
    float v47 = *(float *)(v24 + 72);
    float v48 = *(float *)(v24 + 68) * 0.5;
    float v50 = *(float *)(v24 + 76);
    float v49 = *(float *)(v24 + 80);
    float v51 = *(float *)(v24 + 84);
    float v52 = *(float *)(v24 + 88);
    float v53 = *(float *)(v24 + 92);
    float v54 = *(float *)(v24 + 96);
    float v55 = *(float *)(v24 + 100);
    float v56 = *(float *)(v24 + 104);
    unsigned int v57 = *(unsigned __int8 *)(v24 + 124);
    char v58 = 16 - v57;
    _CF = v57 >= 0x11;
    uint64_t v60 = v24 + 16548;
    uint64_t v61 = v24 + 164;
    if (_CF) {
      char v62 = 0;
    }
    else {
      char v62 = v58;
    }
    uint64_t result = (void *)(*v11 + v32 * v12 + v10);
    uint64_t v63 = v25[1];
    if (v63) {
      uint64_t v64 = v63 + v28 * v22 + 2 * v21;
    }
    else {
      uint64_t v64 = 0;
    }
    uint64_t v65 = *v25 + v27 * v22 + 2 * v21;
    char v66 = v62;
    do
    {
      if (v20)
      {
        size_t v67 = 0;
        float v68 = (unsigned __int16 *)v65;
        size_t v69 = v18;
        float16x8_t v70 = result;
        do
        {
          int16x8_t v71 = (unsigned __int16 *)(v64 + 2 * v67);
          float v72 = (float)(v71[1] >> v66) - v35;
          float v73 = v150 * v72;
          float v74 = v36 * (float)((float)(*v68 >> v66) - v34);
          float v75 = (float)(v150 * v72) + v74;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = (float)(v150 * v72) + v74;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = (float)(*v71 >> v66) - v35;
          float v78 = (float)(v148 * v72) + (float)(v77 * v149);
          float v79 = 8191.0;
          if ((float)(v74 + v78) <= 8191.0)
          {
            float v79 = v74 + v78;
            if ((float)(v74 + v78) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v147 * v77;
          float v81 = v80 + v74;
          BOOL v82 = (float)(v80 + v74) <= 8191.0;
          float v83 = 8191.0;
          if (v82)
          {
            float v83 = v81;
            if (v81 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v36 * (float)((float)(v68[1] >> v66) - v34);
          float v85 = v73 + v84;
          float v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v78 + v84;
          BOOL v82 = (float)(v78 + v84) <= 8191.0;
          float v88 = 8191.0;
          if (v82)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v80 + v84;
          BOOL v82 = (float)(v80 + v84) <= 8191.0;
          float v90 = 8191.0;
          if (v82)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          unsigned int v104 = llroundf(fminf(fmaxf(v90, 0.0), 8191.0));
          _S25 = (float)((float)(v50 * _S5) + (float)(_S4 * v47)) + (float)(_S6 * v49);
          float v106 = (float)((float)(v52 * _S5) + (float)(_S4 * v51)) + (float)(_S6 * v53);
          _S4 = (float)((float)(v55 * _S5) + (float)(_S4 * v54)) + (float)(_S6 * v56);
          float v108 = (float)(v50 * _S24) + (float)(_S7 * v47);
          float v109 = (float)(v52 * _S24) + (float)(_S7 * v51);
          float v110 = (float)(v55 * _S24) + (float)(_S7 * v54);
          LOWORD(_S24) = *(_WORD *)(v61 + 2 * v104);
          __asm { FCVT            S24, H24 }
          _S5 = v108 + (float)(_S24 * v49);
          float v113 = v109 + (float)(_S24 * v53);
          LOWORD(_S25) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          float v114 = v110 + (float)(_S24 * v56);
          __asm { FCVT            S24, H25 }
          LOWORD(_S25) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          LOWORD(_S4) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S26, H4 }
          LOWORD(_S4) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          unsigned int v120 = llroundf(fminf(fmaxf(v114, 0.0), 8191.0));
          float v121 = (float)(v44 * _S25) + (float)(v43 * _S24);
          _S6 = _S24 + _S4;
          float v123 = _S25 + _S5;
          float v124 = (float)(v39 + (float)((float)(_S24 + _S4) * v146)) + (float)(v123 * v145);
          float v125 = (float)(v39 + (float)(_S6 * v143)) + (float)(v123 * v46);
          LOWORD(_S6) = *(_WORD *)(v60 + 2 * v120);
          __asm { FCVT            S6, H6 }
          float v127 = v121 + (float)(v45 * _S26);
          float v128 = v124 + (float)((float)(_S26 + _S6) * v144);
          float v129 = v125 + (float)((float)(_S26 + _S6) * v48);
          if (v128 < v41) {
            float v130 = v41;
          }
          else {
            float v130 = v128;
          }
          BOOL v82 = v128 <= v42;
          float v131 = v127 + v38;
          if (!v82) {
            float v130 = v42;
          }
          char v132 = llroundf(v130);
          if (v131 < v38) {
            float v133 = v38;
          }
          else {
            float v133 = v127 + v38;
          }
          *float16x8_t v70 = v132;
          if (v131 <= v40) {
            float v134 = v133;
          }
          else {
            float v134 = v40;
          }
          v70[1] = llroundf(v134);
          float v135 = v42;
          if (v129 <= v42)
          {
            float v135 = v129;
            if (v129 < v41) {
              float v135 = v41;
            }
          }
          float v136 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          v70[2] = llroundf(v135);
          float v137 = v40;
          if (v136 <= v40)
          {
            float v137 = v136;
            if (v136 < v38) {
              float v137 = v38;
            }
          }
          v70[3] = llroundf(v137);
          if (v69) {
            *v69++ = 0;
          }
          v67 += 2;
          v68 += 2;
          v70 += 4;
        }
        while (v20 > v67);
      }
      v65 += v27;
      v64 += v28;
      uint64_t result = (void *)((char *)result + v32);
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      uint64_t v138 = 0;
      do
      {
        if (v20)
        {
          size_t v139 = v20;
          float v140 = v16;
          float v141 = (unsigned __int16 *)v31;
          do
          {
            unsigned int v142 = *v141++;
            *v140++ = llroundf((float)v142 * 0.0038911);
            --v139;
          }
          while (v139);
        }
        v31 += v29;
        v16 += v14;
        ++v138;
      }
      while (v138 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          uint64_t result = memset(v16, 255, v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_2vuyf_GCD);
  return 0;
}

void *vt_Copy_xf422_rgb_2vuyf_GCD(void *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v12 = *(void *)((char *)result + 28);
  unint64_t v13 = *(unsigned __int8 *)result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = v12 + v12 * a2;
  uint64_t v16 = result[14];
  uint64_t v17 = (void *)result[16];
  unint64_t v18 = result[13] * a2 / v13 + result[15];
  uint64_t v19 = (uint64_t *)result[17];
  uint64_t v20 = v19[1];
  uint64_t v21 = v17[1];
  size_t v22 = (unsigned char *)(v21 + v20 * v18 + v16);
  unint64_t v23 = v15 / v13;
  if (v21) {
    uint64_t v24 = (_WORD *)(v21 + v20 * v18 + v16);
  }
  else {
    uint64_t v24 = 0;
  }
  if (v23 != v14)
  {
    uint64_t v25 = 0;
    size_t v26 = *(void *)((char *)result + 20);
    uint64_t v27 = *(void *)((char *)result + 36);
    unint64_t v28 = v14 + *(void *)((char *)result + 44);
    unint64_t v29 = v23 - v14;
    uint64_t v30 = result[19];
    uint64_t v31 = (void *)result[7];
    uint64_t v32 = (uint64_t *)result[8];
    uint64_t v33 = *v32;
    uint64_t v34 = v32[1];
    uint64_t v35 = v32[2];
    uint64_t v36 = v31[2];
    LOWORD(a6) = *(_WORD *)(v30 + 140);
    LOWORD(a7) = *(_WORD *)(v30 + 142);
    float v37 = (float)*(unsigned int *)(v30 + 136) / (float)*(unsigned int *)(v30 + 128);
    float v38 = *(float *)v30;
    float v39 = *(float *)(v30 + 8);
    float v40 = *(float *)(v30 + 16);
    float v41 = *(float *)(v30 + 20);
    float v42 = *(float *)(v30 + 28);
    LOWORD(v7) = *(_WORD *)(v30 + 144);
    LOWORD(v8) = *(_WORD *)(v30 + 146);
    LOWORD(v9) = *(_WORD *)(v30 + 148);
    LOWORD(v10) = *(_WORD *)(v30 + 150);
    LOWORD(v11) = *(_WORD *)(v30 + 152);
    float v43 = *(float *)(v30 + 36);
    float v44 = *(float *)(v30 + 40);
    float v45 = *(float *)(v30 + 44);
    float v46 = *(float *)(v30 + 48);
    float v47 = *(float *)(v30 + 52);
    float v48 = *(float *)(v30 + 56);
    float v49 = *(float *)(v30 + 60);
    float v50 = *(float *)(v30 + 64);
    float v51 = *(float *)(v30 + 68);
    LODWORD(v30) = *(unsigned __int8 *)(v30 + 124);
    char v52 = 16 - v30;
    BOOL v53 = v30 >= 0x11;
    uint64_t v54 = v36 + v35 * v28 + 2 * v27;
    uint64_t v55 = *v19;
    float v56 = (float)LODWORD(a6);
    float v57 = (float)LODWORD(a7);
    float v58 = v37 * v38;
    float v59 = v37 * v39;
    float v60 = v37 * v40;
    float v61 = v37 * v41;
    float v62 = v37 * v42;
    float v63 = (float)v7;
    float v64 = (float)v8;
    float v65 = (float)v9;
    float v66 = (float)v10;
    float v67 = (float)v11;
    float v68 = v46 * 0.5;
    float v69 = v47 * 0.5;
    float v70 = v48 * 0.5;
    float v71 = v49 * 0.5;
    float v72 = v50 * 0.5;
    float v73 = v51 * 0.5;
    if (v53) {
      char v74 = 0;
    }
    else {
      char v74 = v52;
    }
    float v75 = (unsigned char *)(*v17 + v55 * v18 + v16);
    uint64_t v76 = v31[1];
    if (v76) {
      uint64_t v77 = v76 + v34 * v28 + 2 * v27;
    }
    else {
      uint64_t v77 = 0;
    }
    uint64_t result = (void *)(*v31 + v33 * v28 + 2 * v27);
    char v78 = v74;
    do
    {
      if (v26)
      {
        size_t v79 = 0;
        float v80 = (unsigned __int16 *)result;
        float v81 = v75;
        BOOL v82 = v24;
        do
        {
          float v83 = (unsigned __int16 *)(v77 + 2 * v79);
          float v84 = (float)(*v83 >> v78) - v57;
          float v85 = (float)(v83[1] >> v78) - v57;
          float v86 = v59 * v85;
          float v87 = (float)(v61 * v85) + (float)(v84 * v60);
          float v88 = v62 * v84;
          float v89 = v58 * (float)((float)(*v80 >> v78) - v56);
          float v90 = v58 * (float)((float)(v80[1] >> v78) - v56);
          float v91 = v86 + v89;
          float v92 = v89 + v87;
          float v93 = v88 + v89;
          float v94 = v86 + v90;
          float v95 = v87 + v90;
          float v96 = v88 + v90;
          float v97 = (float)((float)((float)(v44 * v92) + (float)(v43 * v91)) + (float)(v45 * v93)) + v63;
          float v98 = (float)((float)((float)(v44 * v95) + (float)(v43 * v94)) + (float)(v45 * v96)) + v63;
          float v99 = v91 + v94;
          float v100 = v92 + v95;
          float v101 = (float)(v64 + (float)(v99 * v68)) + (float)(v100 * v69);
          float v102 = v93 + v96;
          float v103 = v101 + (float)(v102 * v70);
          float v104 = (float)(v64 + (float)(v99 * v71)) + (float)(v100 * v72);
          if (v103 < v66) {
            float v105 = v66;
          }
          else {
            float v105 = v101 + (float)(v102 * v70);
          }
          if (v103 > v67) {
            float v105 = v67;
          }
          float v106 = v104 + (float)(v102 * v73);
          *float v81 = llroundf(v105);
          if (v97 < v63) {
            float v107 = v63;
          }
          else {
            float v107 = v97;
          }
          if (v97 > v65) {
            float v107 = v65;
          }
          v81[1] = llroundf(v107);
          if (v106 < v66) {
            float v108 = v66;
          }
          else {
            float v108 = v106;
          }
          if (v106 <= v67) {
            float v109 = v108;
          }
          else {
            float v109 = v67;
          }
          v81[2] = llroundf(v109);
          float v110 = v65;
          if (v98 <= v65)
          {
            float v110 = v98;
            if (v98 < v63) {
              float v110 = v63;
            }
          }
          v81[3] = llroundf(v110);
          if (v82) {
            *v82++ = 0;
          }
          v79 += 2;
          v80 += 2;
          v81 += 4;
        }
        while (v26 > v79);
      }
      uint64_t result = (void *)((char *)result + v33);
      v77 += v34;
      v75 += v55;
      ++v25;
    }
    while (v25 != v29);
    if (v36 && v24)
    {
      uint64_t v111 = 0;
      do
      {
        if (v26)
        {
          size_t v112 = v26;
          float v113 = v22;
          float v114 = (unsigned __int16 *)v54;
          do
          {
            unsigned int v115 = *v114++;
            *v113++ = llroundf((float)v115 * 0.0038911);
            --v112;
          }
          while (v112);
        }
        v54 += v35;
        v22 += v20;
        ++v111;
      }
      while (v111 != v29);
    }
    else if (v24)
    {
      do
      {
        if (v26) {
          uint64_t result = memset(v22, 255, v26);
        }
        v22 += v20;
        --v29;
      }
      while (v29);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Tone_Mat_TRC_yuvsf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  uint64_t v10 = (void *)result[16];
  unint64_t v11 = result[13] * a2 / v6 + result[15];
  uint64_t v12 = (uint64_t *)result[17];
  uint64_t v13 = v12[1];
  uint64_t v14 = v10[1];
  uint64_t v15 = (unsigned char *)(v14 + v13 * v11 + v9);
  unint64_t v16 = v8 / v6;
  if (v14) {
    uint64_t v17 = (_WORD *)(v14 + v13 * v11 + v9);
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16 != v7)
  {
    uint64_t v18 = 0;
    size_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    unint64_t v21 = v7 + *(void *)((char *)result + 44);
    unint64_t v22 = v16 - v7;
    uint64_t v23 = result[19];
    uint64_t v24 = (void *)result[7];
    uint64_t v25 = (uint64_t *)result[8];
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = v25[2];
    uint64_t v29 = v24[2];
    uint64_t v30 = v29 + v28 * v21 + 2 * v20;
    uint64_t v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    float v33 = (float)LODWORD(a5);
    float v174 = v32 * *(float *)v23;
    float v175 = (float)LODWORD(a4);
    float v172 = v32 * *(float *)(v23 + 16);
    float v173 = v32 * *(float *)(v23 + 8);
    float v34 = v32 * *(float *)(v23 + 20);
    *(float *)&unsigned int v35 = v32 * *(float *)(v23 + 28);
    float v170 = *(float *)&v35;
    float v171 = v34;
    LOWORD(v35) = *(_WORD *)(v23 + 144);
    float v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 146);
    float v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 148);
    float v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 150);
    float v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 152);
    float v40 = (float)v35;
    float v41 = *(float *)(v23 + 36);
    float v42 = *(float *)(v23 + 40);
    float v43 = *(float *)(v23 + 44);
    float v168 = *(float *)(v23 + 48) * 0.5;
    float v169 = v37;
    float v166 = *(float *)(v23 + 56) * 0.5;
    float v167 = *(float *)(v23 + 52) * 0.5;
    float v164 = *(float *)(v23 + 64) * 0.5;
    float v165 = *(float *)(v23 + 60) * 0.5;
    float v44 = *(float *)(v23 + 72);
    float v163 = *(float *)(v23 + 68) * 0.5;
    float v46 = *(float *)(v23 + 76);
    float v45 = *(float *)(v23 + 80);
    float v47 = *(float *)(v23 + 84);
    float v48 = *(float *)(v23 + 88);
    float v49 = *(float *)(v23 + 92);
    float v50 = *(float *)(v23 + 96);
    float v51 = *(float *)(v23 + 100);
    float v52 = *(float *)(v23 + 104);
    uint64_t v53 = v23 + 164;
    unsigned int v54 = *(unsigned __int8 *)(v23 + 124);
    char v55 = 16 - v54;
    _CF = v54 >= 0x11;
    uint64_t v57 = v23 + 16548;
    uint64_t v58 = *v10 + v31 * v11;
    uint64_t result = (void *)(v23 + 32932);
    if (_CF) {
      char v55 = 0;
    }
    float v59 = (unsigned char *)(v58 + v9);
    uint64_t v60 = v24[1];
    _ZF = v60 == 0;
    uint64_t v62 = v60 + v27 * v21 + 2 * v20;
    if (_ZF) {
      uint64_t v62 = 0;
    }
    uint64_t v63 = *v24 + v26 * v21 + 2 * v20;
    char v64 = v55;
    float v66 = *(float *)(v23 + 108);
    float v65 = *(float *)(v23 + 112);
    float v67 = *(float *)(v23 + 116);
    float v68 = *(float *)(v23 + 120);
    do
    {
      if (v19)
      {
        size_t v69 = 0;
        float v70 = (unsigned __int16 *)v63;
        float v71 = v17;
        float v72 = v59;
        do
        {
          float v73 = (unsigned __int16 *)(v62 + 2 * v69);
          float v74 = (float)(v73[1] >> v64) - v33;
          float v75 = v173 * v74;
          float v76 = v174 * (float)((float)(*v70 >> v64) - v175);
          float v77 = (float)(v173 * v74) + v76;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = (float)(v173 * v74) + v76;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v33;
          float v80 = (float)(*v73 >> v64) - v33;
          float v81 = (float)(v171 * v74) + (float)(v80 * v172);
          float v82 = 8191.0;
          if ((float)(v76 + v81) <= 8191.0)
          {
            float v82 = v76 + v81;
            if ((float)(v76 + v81) < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v170 * v80;
          float v84 = (float)(v170 * v80) + v76;
          float v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            float v85 = v84;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v174 * (float)((float)(v70[1] >> v64) - v175);
          float v87 = v75 + v86;
          BOOL v88 = (float)(v75 + v86) <= 8191.0;
          float v89 = 8191.0;
          if (v88)
          {
            float v89 = v87;
            if (v87 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v81 + v86;
          BOOL v88 = (float)(v81 + v86) <= 8191.0;
          float v91 = 8191.0;
          if (v88)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v83 + v86;
          BOOL v88 = (float)(v83 + v86) <= 8191.0;
          float v93 = 8191.0;
          if (v88)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          float v105 = (float)((float)((float)(v65 * _S25) + (float)(v66 * _S24)) + (float)(v67 * _S26))
               + (float)(v68 * fmaxf(_S24, fmaxf(_S25, _S26)));
          float v106 = 8191.0;
          if (v105 <= 8191.0)
          {
            float v106 = v105;
            if (v105 < 0.0) {
              float v106 = 0.0;
            }
          }
          __asm
          {
            FCVT            S28, H1
            FCVT            S30, H27
            FCVT            S1, H2
          }
          _H0 = *(_WORD *)(v57 + 2 * llroundf(v106));
          __asm { FCVT            S0, H0 }
          float v112 = _S24 * _S0;
          float v113 = _S25 * _S0;
          float v114 = _S26 * _S0;
          float v115 = (float)((float)((float)(v65 * _S30) + (float)(v66 * _S28)) + (float)(v67 * _S1))
               + (float)(v68 * fmaxf(_S28, fmaxf(_S30, _S1)));
          float v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            float v116 = v115;
            if (v115 < 0.0) {
              float v116 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v57 + 2 * llroundf(v116));
          __asm { FCVT            S0, H0 }
          float v119 = _S28 * _S0;
          float v120 = _S30 * _S0;
          float v121 = _S1 * _S0;
          _S1 = (float)((float)(v46 * v113) + (float)(v112 * v44)) + (float)(v114 * v45);
          float v123 = (float)((float)(v48 * v113) + (float)(v112 * v47)) + (float)(v114 * v49);
          _S24 = (float)((float)(v51 * v113) + (float)(v112 * v50)) + (float)(v114 * v52);
          float v125 = (float)(v46 * v120) + (float)(v119 * v44);
          float v126 = (float)(v48 * v120) + (float)(v119 * v47);
          _S2 = (float)(v51 * v120) + (float)(v119 * v50);
          _S25 = v125 + (float)(v121 * v45);
          float v129 = v126 + (float)(v121 * v49);
          float v130 = _S2 + (float)(v121 * v52);
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          unsigned int v133 = llroundf(fminf(fmaxf(_S24, 0.0), 8191.0));
          LOWORD(_S24) = *((_WORD *)result + llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *((_WORD *)result + llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          unsigned int v136 = llroundf(fminf(fmaxf(v130, 0.0), 8191.0));
          float v137 = (float)(v42 * _S2) + (float)(v41 * _S1);
          float v138 = (float)(v42 * _S25) + (float)(v41 * _S24);
          float v139 = _S1 + _S24;
          LOWORD(_S24) = *((_WORD *)result + v133);
          float v140 = _S2 + _S25;
          LOWORD(_S25) = *((_WORD *)result + v136);
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H25
          }
          float v143 = (float)(v137 + (float)(v43 * _S24)) + v36;
          float v144 = v138 + (float)(v43 * _S25);
          float v145 = _S24 + _S25;
          float v146 = (float)(v169 + (float)(v139 * v168)) + (float)(v140 * v167);
          float v147 = (float)(v169 + (float)(v139 * v165)) + (float)(v140 * v164);
          if (v143 < v36) {
            float v148 = v36;
          }
          else {
            float v148 = v143;
          }
          BOOL v88 = v143 <= v38;
          float v149 = v146 + (float)(v145 * v166);
          if (!v88) {
            float v148 = v38;
          }
          char v150 = llroundf(v148);
          if (v149 < v39) {
            float v151 = v39;
          }
          else {
            float v151 = v146 + (float)(v145 * v166);
          }
          if (v149 <= v40) {
            float v152 = v151;
          }
          else {
            float v152 = v40;
          }
          char v153 = llroundf(v152);
          float v154 = v147 + (float)(v145 * v163);
          if ((float)(v144 + v36) < v36) {
            float v155 = v36;
          }
          else {
            float v155 = v144 + v36;
          }
          *float v72 = v150;
          v72[1] = v153;
          if ((float)(v144 + v36) <= v38) {
            float v156 = v155;
          }
          else {
            float v156 = v38;
          }
          v72[2] = llroundf(v156);
          float v157 = v40;
          if (v154 <= v40)
          {
            float v157 = v154;
            if (v154 < v39) {
              float v157 = v39;
            }
          }
          v72[3] = llroundf(v157);
          float v33 = v79;
          if (v71) {
            *v71++ = 0;
          }
          v69 += 2;
          v70 += 2;
          v72 += 4;
        }
        while (v19 > v69);
      }
      v63 += v26;
      v62 += v27;
      v59 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      uint64_t v158 = 0;
      do
      {
        if (v19)
        {
          size_t v159 = v19;
          unsigned int v160 = v15;
          float v161 = (unsigned __int16 *)v30;
          do
          {
            unsigned int v162 = *v161++;
            *v160++ = llroundf((float)v162 * 0.0038911);
            --v159;
          }
          while (v159);
        }
        v30 += v28;
        v15 += v13;
        ++v158;
      }
      while (v158 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19) {
          uint64_t result = memset(v15, 255, v19);
        }
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Mat_TRC_yuvsf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = v6 + v6 * a2;
  uint64_t v10 = result[14];
  uint64_t v11 = (void *)result[16];
  unint64_t v12 = result[13] * a2 / v7 + result[15];
  uint64_t v13 = (uint64_t *)result[17];
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (unsigned char *)(v15 + v14 * v12 + v10);
  unint64_t v17 = v9 / v7;
  if (v15) {
    uint64_t v18 = (_WORD *)(v15 + v14 * v12 + v10);
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17 != v8)
  {
    uint64_t v19 = 0;
    size_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    unint64_t v22 = v8 + *(void *)((char *)result + 44);
    unint64_t v23 = v17 - v8;
    uint64_t v24 = result[19];
    uint64_t v25 = (void *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = v30 + v29 * v22 + 2 * v21;
    uint64_t v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v24;
    float v152 = v33 * *(float *)(v24 + 16);
    float v153 = v33 * *(float *)(v24 + 8);
    float v150 = v33 * *(float *)(v24 + 28);
    *(float *)&unsigned int v37 = v150;
    float v151 = v33 * *(float *)(v24 + 20);
    LOWORD(v37) = *(_WORD *)(v24 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 152);
    float v42 = (float)v37;
    float v43 = *(float *)(v24 + 36);
    float v44 = *(float *)(v24 + 40);
    float v45 = *(float *)(v24 + 44);
    float v148 = *(float *)(v24 + 52) * 0.5;
    float v149 = *(float *)(v24 + 48) * 0.5;
    float v146 = *(float *)(v24 + 60) * 0.5;
    float v147 = *(float *)(v24 + 56) * 0.5;
    float v46 = *(float *)(v24 + 64) * 0.5;
    float v47 = *(float *)(v24 + 72);
    float v48 = *(float *)(v24 + 68) * 0.5;
    float v50 = *(float *)(v24 + 76);
    float v49 = *(float *)(v24 + 80);
    float v51 = *(float *)(v24 + 84);
    float v52 = *(float *)(v24 + 88);
    float v53 = *(float *)(v24 + 92);
    float v54 = *(float *)(v24 + 96);
    float v55 = *(float *)(v24 + 100);
    float v56 = *(float *)(v24 + 104);
    unsigned int v57 = *(unsigned __int8 *)(v24 + 124);
    char v58 = 16 - v57;
    _CF = v57 >= 0x11;
    uint64_t v60 = v24 + 16548;
    uint64_t v61 = v24 + 164;
    if (_CF) {
      char v62 = 0;
    }
    else {
      char v62 = v58;
    }
    uint64_t result = (void *)(*v11 + v32 * v12 + v10);
    uint64_t v63 = v25[1];
    if (v63) {
      uint64_t v64 = v63 + v28 * v22 + 2 * v21;
    }
    else {
      uint64_t v64 = 0;
    }
    uint64_t v65 = *v25 + v27 * v22 + 2 * v21;
    char v66 = v62;
    do
    {
      if (v20)
      {
        size_t v67 = 0;
        float v68 = (unsigned __int16 *)v65;
        size_t v69 = v18;
        float v70 = result;
        do
        {
          float v71 = (unsigned __int16 *)(v64 + 2 * v67);
          float v72 = (float)(v71[1] >> v66) - v35;
          float v73 = v153 * v72;
          float v74 = v36 * (float)((float)(*v68 >> v66) - v34);
          float v75 = (float)(v153 * v72) + v74;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = (float)(v153 * v72) + v74;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = (float)(*v71 >> v66) - v35;
          float v78 = (float)(v151 * v72) + (float)(v77 * v152);
          float v79 = 8191.0;
          if ((float)(v74 + v78) <= 8191.0)
          {
            float v79 = v74 + v78;
            if ((float)(v74 + v78) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v150 * v77;
          float v81 = v80 + v74;
          BOOL v82 = (float)(v80 + v74) <= 8191.0;
          float v83 = 8191.0;
          if (v82)
          {
            float v83 = v81;
            if (v81 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v36 * (float)((float)(v68[1] >> v66) - v34);
          float v85 = v73 + v84;
          float v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v78 + v84;
          BOOL v82 = (float)(v78 + v84) <= 8191.0;
          float v88 = 8191.0;
          if (v82)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v80 + v84;
          BOOL v82 = (float)(v80 + v84) <= 8191.0;
          float v90 = 8191.0;
          if (v82)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          unsigned int v104 = llroundf(fminf(fmaxf(v90, 0.0), 8191.0));
          _S25 = (float)((float)(v50 * _S5) + (float)(_S4 * v47)) + (float)(_S6 * v49);
          float v106 = (float)((float)(v52 * _S5) + (float)(_S4 * v51)) + (float)(_S6 * v53);
          _S4 = (float)((float)(v55 * _S5) + (float)(_S4 * v54)) + (float)(_S6 * v56);
          float v108 = (float)(v50 * _S24) + (float)(_S7 * v47);
          float v109 = (float)(v52 * _S24) + (float)(_S7 * v51);
          float v110 = (float)(v55 * _S24) + (float)(_S7 * v54);
          LOWORD(_S24) = *(_WORD *)(v61 + 2 * v104);
          __asm { FCVT            S24, H24 }
          _S5 = v108 + (float)(_S24 * v49);
          float v113 = v109 + (float)(_S24 * v53);
          float v114 = v110 + (float)(_S24 * v56);
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          unsigned int v117 = llroundf(fminf(fmaxf(_S4, 0.0), 8191.0));
          LOWORD(_S4) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          unsigned int v120 = llroundf(fminf(fmaxf(v114, 0.0), 8191.0));
          float v121 = (float)(v44 * _S25) + (float)(v43 * _S24);
          float v122 = (float)(v44 * _S5) + (float)(v43 * _S4);
          float v123 = _S24 + _S4;
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * v117);
          float v124 = _S25 + _S5;
          LOWORD(_S25) = *(_WORD *)(v60 + 2 * v120);
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H25
          }
          float v127 = (float)(v121 + (float)(v45 * _S24)) + v38;
          float v128 = v122 + (float)(v45 * _S25);
          float v129 = _S24 + _S25;
          float v130 = (float)(v39 + (float)(v123 * v149)) + (float)(v124 * v148);
          float v131 = (float)(v39 + (float)(v123 * v146)) + (float)(v124 * v46);
          if (v127 < v38) {
            float v132 = v38;
          }
          else {
            float v132 = v127;
          }
          BOOL v82 = v127 <= v40;
          float v133 = v130 + (float)(v129 * v147);
          if (!v82) {
            float v132 = v40;
          }
          char v134 = llroundf(v132);
          if (v133 < v41) {
            float v135 = v41;
          }
          else {
            float v135 = v130 + (float)(v129 * v147);
          }
          if (v133 > v42) {
            float v135 = v42;
          }
          char v136 = llroundf(v135);
          float v137 = v131 + (float)(v129 * v48);
          if ((float)(v128 + v38) < v38) {
            float v138 = v38;
          }
          else {
            float v138 = v128 + v38;
          }
          *float v70 = v134;
          v70[1] = v136;
          if ((float)(v128 + v38) <= v40) {
            float v139 = v138;
          }
          else {
            float v139 = v40;
          }
          v70[2] = llroundf(v139);
          float v140 = v42;
          if (v137 <= v42)
          {
            float v140 = v137;
            if (v137 < v41) {
              float v140 = v41;
            }
          }
          v70[3] = llroundf(v140);
          if (v69) {
            *v69++ = 0;
          }
          v67 += 2;
          v68 += 2;
          v70 += 4;
        }
        while (v20 > v67);
      }
      v65 += v27;
      v64 += v28;
      uint64_t result = (void *)((char *)result + v32);
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      uint64_t v141 = 0;
      do
      {
        if (v20)
        {
          size_t v142 = v20;
          float v143 = v16;
          float v144 = (unsigned __int16 *)v31;
          do
          {
            unsigned int v145 = *v144++;
            *v143++ = llroundf((float)v145 * 0.0038911);
            --v142;
          }
          while (v142);
        }
        v31 += v29;
        v16 += v14;
        ++v141;
      }
      while (v141 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          uint64_t result = memset(v16, 255, v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_yuvsf_GCD);
  return 0;
}

void *vt_Copy_xf422_rgb_yuvsf_GCD(void *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v12 = *(void *)((char *)result + 28);
  unint64_t v13 = *(unsigned __int8 *)result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = v12 + v12 * a2;
  uint64_t v16 = result[14];
  uint64_t v17 = (void *)result[16];
  unint64_t v18 = result[13] * a2 / v13 + result[15];
  uint64_t v19 = (uint64_t *)result[17];
  uint64_t v20 = v19[1];
  uint64_t v21 = v17[1];
  size_t v22 = (unsigned char *)(v21 + v20 * v18 + v16);
  unint64_t v23 = v15 / v13;
  if (v21) {
    uint64_t v24 = (_WORD *)(v21 + v20 * v18 + v16);
  }
  else {
    uint64_t v24 = 0;
  }
  if (v23 != v14)
  {
    uint64_t v25 = 0;
    size_t v26 = *(void *)((char *)result + 20);
    uint64_t v27 = *(void *)((char *)result + 36);
    unint64_t v28 = v14 + *(void *)((char *)result + 44);
    unint64_t v29 = v23 - v14;
    uint64_t v30 = result[19];
    uint64_t v31 = (void *)result[7];
    uint64_t v32 = (uint64_t *)result[8];
    uint64_t v33 = *v32;
    uint64_t v34 = v32[1];
    uint64_t v35 = v32[2];
    uint64_t v36 = v31[2];
    LOWORD(a6) = *(_WORD *)(v30 + 140);
    LOWORD(a7) = *(_WORD *)(v30 + 142);
    float v37 = (float)*(unsigned int *)(v30 + 136) / (float)*(unsigned int *)(v30 + 128);
    float v38 = *(float *)v30;
    float v39 = *(float *)(v30 + 8);
    float v40 = *(float *)(v30 + 16);
    float v41 = *(float *)(v30 + 20);
    float v42 = *(float *)(v30 + 28);
    LOWORD(v7) = *(_WORD *)(v30 + 144);
    LOWORD(v8) = *(_WORD *)(v30 + 146);
    LOWORD(v9) = *(_WORD *)(v30 + 148);
    LOWORD(v10) = *(_WORD *)(v30 + 150);
    LOWORD(v11) = *(_WORD *)(v30 + 152);
    float v43 = *(float *)(v30 + 36);
    float v44 = *(float *)(v30 + 40);
    float v45 = *(float *)(v30 + 44);
    float v46 = *(float *)(v30 + 48);
    float v47 = *(float *)(v30 + 52);
    float v48 = *(float *)(v30 + 56);
    float v49 = *(float *)(v30 + 60);
    float v50 = *(float *)(v30 + 64);
    float v51 = *(float *)(v30 + 68);
    LODWORD(v30) = *(unsigned __int8 *)(v30 + 124);
    char v52 = 16 - v30;
    BOOL v53 = v30 >= 0x11;
    uint64_t v54 = v36 + v35 * v28 + 2 * v27;
    uint64_t v55 = *v19;
    float v56 = (float)LODWORD(a6);
    float v57 = (float)LODWORD(a7);
    float v58 = v37 * v38;
    float v59 = v37 * v39;
    float v60 = v37 * v40;
    float v61 = v37 * v41;
    float v62 = v37 * v42;
    float v63 = (float)v7;
    float v64 = (float)v8;
    float v65 = (float)v9;
    float v66 = (float)v10;
    float v67 = (float)v11;
    float v68 = v46 * 0.5;
    float v69 = v47 * 0.5;
    float v70 = v48 * 0.5;
    float v71 = v49 * 0.5;
    float v72 = v50 * 0.5;
    float v73 = v51 * 0.5;
    if (v53) {
      char v74 = 0;
    }
    else {
      char v74 = v52;
    }
    float v75 = (unsigned char *)(*v17 + v55 * v18 + v16);
    uint64_t v76 = v31[1];
    if (v76) {
      uint64_t v77 = v76 + v34 * v28 + 2 * v27;
    }
    else {
      uint64_t v77 = 0;
    }
    uint64_t result = (void *)(*v31 + v33 * v28 + 2 * v27);
    char v78 = v74;
    do
    {
      if (v26)
      {
        size_t v79 = 0;
        float v80 = (unsigned __int16 *)result;
        float v81 = v75;
        BOOL v82 = v24;
        do
        {
          float v83 = (unsigned __int16 *)(v77 + 2 * v79);
          float v84 = (float)(*v83 >> v78) - v57;
          float v85 = (float)(v83[1] >> v78) - v57;
          float v86 = v59 * v85;
          float v87 = (float)(v61 * v85) + (float)(v84 * v60);
          float v88 = v62 * v84;
          float v89 = v58 * (float)((float)(*v80 >> v78) - v56);
          float v90 = v58 * (float)((float)(v80[1] >> v78) - v56);
          float v91 = v86 + v89;
          float v92 = v89 + v87;
          float v93 = v88 + v89;
          float v94 = v86 + v90;
          float v95 = v87 + v90;
          float v96 = v88 + v90;
          float v97 = (float)((float)((float)(v44 * v92) + (float)(v43 * v91)) + (float)(v45 * (float)(v88 + v89))) + v63;
          float v98 = (float)((float)((float)(v44 * v95) + (float)(v43 * v94)) + (float)(v45 * v96)) + v63;
          float v99 = v91 + v94;
          float v100 = v92 + v95;
          float v101 = (float)(v64 + (float)((float)(v91 + v94) * v68)) + (float)(v100 * v69);
          float v102 = v93 + v96;
          float v103 = v101 + (float)((float)(v93 + v96) * v70);
          if (v97 < v63) {
            float v104 = v63;
          }
          else {
            float v104 = v97;
          }
          if (v97 > v65) {
            float v104 = v65;
          }
          *float v81 = llroundf(v104);
          if (v103 < v66) {
            float v105 = v66;
          }
          else {
            float v105 = v103;
          }
          if (v103 <= v67) {
            float v106 = v105;
          }
          else {
            float v106 = v67;
          }
          v81[1] = llroundf(v106);
          float v107 = v65;
          if (v98 <= v65)
          {
            float v107 = v98;
            if (v98 < v63) {
              float v107 = v63;
            }
          }
          float v108 = (float)((float)(v64 + (float)(v99 * v71)) + (float)(v100 * v72)) + (float)(v102 * v73);
          v81[2] = llroundf(v107);
          float v109 = v67;
          if (v108 <= v67)
          {
            float v109 = v108;
            if (v108 < v66) {
              float v109 = v66;
            }
          }
          v81[3] = llroundf(v109);
          if (v82) {
            *v82++ = 0;
          }
          v79 += 2;
          v80 += 2;
          v81 += 4;
        }
        while (v26 > v79);
      }
      uint64_t result = (void *)((char *)result + v33);
      v77 += v34;
      v75 += v55;
      ++v25;
    }
    while (v25 != v29);
    if (v36 && v24)
    {
      uint64_t v110 = 0;
      do
      {
        if (v26)
        {
          size_t v111 = v26;
          float v112 = v22;
          float v113 = (unsigned __int16 *)v54;
          do
          {
            unsigned int v114 = *v113++;
            *v112++ = llroundf((float)v114 * 0.0038911);
            --v111;
          }
          while (v111);
        }
        v54 += v35;
        v22 += v20;
        ++v110;
      }
      while (v110 != v29);
    }
    else if (v24)
    {
      do
      {
        if (v26) {
          uint64_t result = memset(v22, 255, v26);
        }
        v22 += v20;
        --v29;
      }
      while (v29);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_xf422_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD(float32x2_t *result, uint64_t a2, float32x4_t a3, double a4, double a5, double a6, double a7, int16x4_t a8, int16x4_t a9)
{
  uint64_t v14 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v15 = result->u8[0];
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (v17 != v16)
  {
    uint64_t v18 = 0;
    unint64_t v19 = *(unint64_t *)((char *)&result[2] + 4);
    uint64_t v20 = *(uint64_t *)((char *)&result[4] + 4);
    unint64_t v21 = v16 + *(void *)((char *)&result[5] + 4);
    unint64_t v22 = v17 - v16;
    float32x2_t v23 = result[14];
    unint64_t v24 = *(void *)&result[13] * a2 / v15;
    uint64_t v25 = (void *)result[16];
    unint64_t v26 = v24 + *(void *)&result[15];
    uint64_t v27 = (float32x2_t *)result[19];
    uint64_t v28 = (void *)result[7];
    uint64_t v29 = (uint64_t *)result[8];
    uint64_t v30 = (uint64_t *)result[17];
    uint64_t v32 = *v29;
    uint64_t v31 = v29[1];
    uint64_t v249 = v29[2];
    uint64_t v253 = v28[2];
    uint64_t v33 = (char *)(v253 + v249 * v21 + 2 * v20);
    uint64_t v34 = *v30;
    uint64_t v35 = v30[1];
    uint64_t v250 = v30[2];
    uint64_t v252 = v25[2];
    uint64_t v36 = (char *)(v252 + v250 * v26 + 2 * *(void *)&v23);
    unsigned int v37 = v27[17].u16[2];
    unsigned int v38 = v27[17].u16[3];
    unsigned int v39 = v27[18].u16[0];
    float v40 = (float)v37;
    *(short float *)v9.i16 = (short float)v37;
    unsigned int v41 = v27[18].u16[1];
    float v42 = (float)v38;
    short float v43 = (short float)v38;
    unsigned int v44 = v27[18].u16[2];
    _S4 = v27[5].i32[1];
    unsigned int v50 = v27[18].u16[3];
    float v251 = (float)v39;
    *(short float *)v11.i16 = (short float)v39;
    unsigned int v51 = v27[19].u16[0];
    _S10 = v27[4].i32[1];
    _S13 = v27[5].i32[0];
    float v300 = (float)v41;
    *(short float *)v13.i16 = (short float)v41;
    uint64_t v54 = (char *)&v27[2068] + 4;
    float v55 = 8191.0 / (float)v27[16].u32[0];
    *(float *)&a6 = (float)v50;
    float v289 = (float)v50;
    float v290 = (float)v44;
    float v56 = (float)v51;
    _S12 = v55 * v27->f32[0];
    *(short float *)&a6 = (short float)v44;
    *(short float *)a8.i16 = (short float)v50;
    *(short float *)a9.i16 = (short float)v51;
    unsigned int v58 = v27[16].u8[4];
    unsigned __int8 v59 = 16 - v58;
    if (v58 >= 0x11) {
      unsigned __int8 v59 = 0;
    }
    unsigned int v60 = v27[15].u8[4];
    unsigned __int8 v61 = 16 - v60;
    if (v60 >= 0x11) {
      unsigned __int8 v61 = 0;
    }
    uint64_t v62 = v25[1];
    _ZF = v62 == 0;
    uint64_t v64 = v62 + v35 * v26;
    uint64_t v65 = *v25 + v34 * v26;
    float v66 = (char *)&v27[20] + 4;
    float v67 = (_WORD *)(v64 + 2 * *(void *)&v23);
    float v68 = (uint16x8_t *)(v65 + 2 * *(void *)&v23);
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(v9, 0);
    v46.i32[1] = v27[1].i32[0];
    v46.i32[0] = v27[3].i32[1];
    *(float32x2_t *)a3.f32 = vmul_n_f32(v46, v55);
    unint64_t v288 = a3.i64[0];
    float16x8_t v70 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a3), 0);
    uint64_t result = (float32x2_t *)((char *)v27 + 32932);
    *(float32x2_t *)v10.f32 = vmul_n_f32(v27[2], v55);
    float16x8_t v254 = vmulq_n_f16(v70, -v43);
    float16x8_t v255 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float16x8_t v284 = vmulq_n_f16(v255, -v43);
    v47.i32[1] = v27[7].i32[1];
    v47.i32[0] = v27[6].i32[0];
    *(float32x2_t *)a3.f32 = vmul_f32(v47, (float32x2_t)0x3F0000003F000000);
    unint64_t v287 = a3.i64[0];
    float16x8_t v283 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a3), 0);
    v48.i32[1] = v27[8].i32[0];
    v48.i32[0] = v27[6].i32[1];
    *(float32x2_t *)a3.f32 = vmul_f32(v48, (float32x2_t)0x3F0000003F000000);
    unint64_t v286 = a3.i64[0];
    int32x4_t v71 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a3), 0);
    v49.i32[1] = v27[8].i32[1];
    v49.i32[0] = v27[7].i32[0];
    *(float32x2_t *)v12.f32 = vmul_f32(v49, (float32x2_t)0x3F0000003F000000);
    int32x4_t v285 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v12), 0);
    float16x8_t v72 = (float16x8_t)vdupq_lane_s16(v11, 0);
    float16x8_t v73 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a6, 0);
    float16x8_t v74 = (float16x8_t)vdupq_lane_s16(a8, 0);
    float16x8_t v281 = (float16x8_t)vdupq_lane_s16(a9, 0);
    float16x8_t v282 = (float16x8_t)vdupq_lane_s16(v13, 0);
    if (_ZF) {
      float v75 = 0;
    }
    else {
      float v75 = v67;
    }
    uint16x8_t v76 = (uint16x8_t)vdupq_n_s16(-v61);
    size_t v79 = v28;
    uint64_t v78 = *v28;
    uint64_t v77 = v79[1];
    _ZF = v77 == 0;
    uint64_t v80 = v77 + v31 * v21 + 2 * v20;
    if (_ZF) {
      uint64_t v80 = 0;
    }
    uint64_t v81 = v78 + v32 * v21 + 2 * v20;
    unsigned __int8 v82 = v61;
    unsigned __int8 v83 = v59;
    float v298 = v27[4].f32[1];
    float v299 = v55 * v27->f32[0];
    __asm
    {
      FCVT            H3, S12
      FCVT            H10, S10
    }
    float v296 = v27[5].f32[1];
    float v297 = v27[5].f32[0];
    __asm
    {
      FCVT            H12, S13
      FCVT            H4, S4
    }
    float v294 = v27[14].f32[0];
    float v295 = v27[13].f32[1];
    __asm
    {
      FCVT            H0, S0
      FCVT            H1, S1
    }
    float v292 = v27[15].f32[0];
    float v293 = v27[14].f32[1];
    __asm
    {
      FCVT            H2, S2
      FCVT            H13, S17
    }
    short float v269 = _H13;
    float v280 = v27[9].f32[0];
    __asm { FCVT            H13, S25 }
    float v279 = v27[9].f32[1];
    __asm { FCVT            H8, S8 }
    short float v267 = _H8;
    short float v268 = _H13;
    short float v97 = _H12;
    short float v98 = _H3;
    short float v99 = _H1;
    float v278 = v27[10].f32[0];
    __asm { FCVT            H1, S20 }
    float v277 = v27[10].f32[1];
    __asm { FCVT            H11, S11 }
    short float v265 = _H11;
    short float v102 = _H10;
    short float v103 = _H0;
    float v276 = v27[11].f32[0];
    __asm { FCVT            H0, S31 }
    float v275 = v27[11].f32[1];
    __asm { FCVT            H3, S24 }
    short float v263 = _H3;
    float v274 = v27[12].f32[0];
    __asm { FCVT            H3, S21 }
    float v273 = v27[12].f32[1];
    __asm { FCVT            H5, S23 }
    short float v261 = _H5;
    float v272 = v27[13].f32[0];
    __asm { FCVT            H5, S22 }
    uint16x8_t v109 = (uint16x8_t)vdupq_n_s16(v59);
    float16x8_t v110 = (float16x8_t)v285;
    uint64_t v111 = v12.i64[0];
    float16x8_t v112 = 0uLL;
    v113.i64[0] = 0x9000900090009000;
    v113.i64[1] = 0x9000900090009000;
    float16x8_t v259 = v73;
    float16x8_t v260 = v72;
    float16x8_t v258 = v74;
    uint16x8_t v291 = v76;
    short float v270 = _H2;
    short float v271 = _H4;
    short float v266 = _H1;
    short float v264 = _H0;
    short float v262 = _H3;
    short float v257 = _H5;
    uint64_t v256 = v30[1];
    do
    {
      if ((int)v19 < 8)
      {
        unint64_t v171 = 0;
        float v170 = v75;
        unsigned int v117 = v68;
        float v169 = (unsigned __int16 *)v80;
        float v116 = (uint16x8_t *)v81;
      }
      else
      {
        uint64_t v114 = 0;
        int v115 = 0;
        float v116 = (uint16x8_t *)v81;
        unsigned int v117 = v68;
        float16x8_t v118 = (float16x8_t)v71;
        short float v119 = _H5;
        do
        {
          float16x8_t v120 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)(v80 + v114 * 2), v76));
          int16x8_t v121 = (int16x8_t)vmlaq_f16(v254, v70, v120);
          int8x16_t v122 = (int8x16_t)vmlaq_f16(v284, v255, v120);
          v120.i64[0] = vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u64[0];
          *(int16x4_t *)v123.i8 = vuzp1_s16(*(int16x4_t *)v121.i8, *(int16x4_t *)v120.i8);
          *(int16x4_t *)v120.i8 = vuzp2_s16(*(int16x4_t *)v121.i8, *(int16x4_t *)v120.i8);
          v120.i64[1] = v120.i64[0];
          float16x8_t v124 = (float16x8_t)vzip1q_s16((int16x8_t)v120, (int16x8_t)v120);
          v123.i64[1] = v124.i64[0];
          v121.i64[0] = vextq_s8(v122, v122, 8uLL).u64[0];
          *(float16x4_t *)v121.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v122.i8, *(int16x4_t *)v121.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v122.i8, *(int16x4_t *)v121.i8));
          v121.i64[1] = v124.i64[0];
          uint16x8_t v125 = *v116++;
          float16x8_t v126 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v125, v76)), v69);
          float16x8_t v127 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v121, v121), v126, v98);
          float16x8_t v128 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v123, v123), v126, v98);
          uint16x8_t v129 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v124, v126, v98), v112), v113));
          uint32x4_t v130 = vmovl_high_u16(v129);
          uint32x4_t v131 = vmovl_u16(*(uint16x4_t *)v129.i8);
          v132.i16[0] = *(_WORD *)&v66[2 * v131.u32[0]];
          v132.i16[1] = *(_WORD *)&v66[2 * v131.u32[1]];
          v132.i16[2] = *(_WORD *)&v66[2 * v131.u32[2]];
          v132.i16[3] = *(_WORD *)&v66[2 * v131.u32[3]];
          v132.i16[4] = *(_WORD *)&v66[2 * v130.u32[0]];
          v132.i16[5] = *(_WORD *)&v66[2 * v130.u32[1]];
          v132.i16[6] = *(_WORD *)&v66[2 * v130.u32[2]];
          v132.i16[7] = *(_WORD *)&v66[2 * v130.u32[3]];
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v127, v112), v113));
          float16x8_t v134 = (float16x8_t)vmovl_high_u16(v133);
          *(void *)&long long v135 = v134.u32[2];
          *((void *)&v135 + 1) = v134.u32[3];
          long long v136 = v135;
          *(void *)&long long v135 = v134.u32[0];
          *((void *)&v135 + 1) = v134.u32[1];
          uint32x4_t v137 = vmovl_u16(*(uint16x4_t *)v133.i8);
          v134.i16[0] = *(_WORD *)&v66[2 * v137.u32[0]];
          v134.i16[1] = *(_WORD *)&v66[2 * v137.u32[1]];
          v134.i16[2] = *(_WORD *)&v66[2 * v137.u32[2]];
          v134.i16[3] = *(_WORD *)&v66[2 * v137.u32[3]];
          v134.i16[4] = *(_WORD *)&v66[2 * v135];
          v134.i16[5] = *(_WORD *)&v66[2 * *((void *)&v135 + 1)];
          v134.i16[6] = *(_WORD *)&v66[2 * v136];
          v134.i16[7] = *(_WORD *)&v66[2 * *((void *)&v136 + 1)];
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v128, v112), v113));
          float16x8_t v139 = (float16x8_t)vmovl_high_u16(v138);
          *(void *)&long long v135 = v139.u32[2];
          *((void *)&v135 + 1) = v139.u32[3];
          long long v140 = v135;
          *(void *)&long long v135 = v139.u32[0];
          *((void *)&v135 + 1) = v139.u32[1];
          uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v138.i8);
          v139.i16[0] = *(_WORD *)&v66[2 * v141.u32[0]];
          v139.i16[1] = *(_WORD *)&v66[2 * v141.u32[1]];
          v139.i16[2] = *(_WORD *)&v66[2 * v141.u32[2]];
          v139.i16[3] = *(_WORD *)&v66[2 * v141.u32[3]];
          v139.i16[4] = *(_WORD *)&v66[2 * v135];
          v139.i16[5] = *(_WORD *)&v66[2 * *((void *)&v135 + 1)];
          v139.i16[6] = *(_WORD *)&v66[2 * v140];
          v139.i16[7] = *(_WORD *)&v66[2 * *((void *)&v140 + 1)];
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v132, v103), v134, v99), v139, v270), vmaxq_f16(vmaxq_f16(v132, v134), v139), v269), v112), v113));
          uint32x4_t v143 = vmovl_high_u16(v142);
          float16x8_t v144 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v142.i8);
          v144.i16[0] = *(_WORD *)&v54[2 * v144.u32[0]];
          v144.i16[1] = *(_WORD *)&v54[2 * v144.u32[1]];
          v144.i16[2] = *(_WORD *)&v54[2 * v144.u32[2]];
          v144.i16[3] = *(_WORD *)&v54[2 * v144.u32[3]];
          v144.i16[4] = *(_WORD *)&v54[2 * v143.u32[0]];
          v144.i16[5] = *(_WORD *)&v54[2 * v143.u32[1]];
          v144.i16[6] = *(_WORD *)&v54[2 * v143.u32[2]];
          v144.i16[7] = *(_WORD *)&v54[2 * v143.u32[3]];
          float16x8_t v145 = vmulq_f16(v132, v144);
          float16x8_t v146 = vmulq_f16(v134, v144);
          float16x8_t v147 = vmulq_f16(v139, v144);
          float16x8_t v148 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v145, v265), v146, v264), v147, v263);
          float16x8_t v149 = vmlaq_n_f16(vmulq_n_f16(v147, v119), v146, v261);
          uint16x8_t v150 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v145, v268), v146, v267), v147, v266), v112), v113));
          float16x8_t v151 = (float16x8_t)vmovl_high_u16(v150);
          uint32x4_t v152 = vmovl_u16(*(uint16x4_t *)v150.i8);
          *(void *)&long long v135 = v151.u32[2];
          *((void *)&v135 + 1) = v151.u32[3];
          long long v153 = v135;
          *(void *)&long long v135 = v151.u32[0];
          v151.i16[0] = result->i16[v152.u32[0]];
          float v154 = (__int16 *)result + v151.u32[1];
          uint64_t v155 = *((void *)&v153 + 1);
          v151.i16[1] = result->i16[v152.u32[1]];
          v151.i16[2] = result->i16[v152.u32[2]];
          v151.i16[3] = result->i16[v152.u32[3]];
          v151.i16[4] = result->i16[v135];
          v151.i16[5] = *v154;
          v151.i16[6] = result->i16[v153];
          float16x8_t v156 = vmlaq_n_f16(v149, v145, v262);
          uint16x8_t v157 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v148, v112), v113));
          float16x8_t v158 = (float16x8_t)vmovl_high_u16(v157);
          *(void *)&long long v135 = v158.u32[2];
          *((void *)&v135 + 1) = v158.u32[3];
          long long v159 = v135;
          *(void *)&long long v135 = v158.u32[0];
          *((void *)&v135 + 1) = v158.u32[1];
          uint32x4_t v160 = vmovl_u16(*(uint16x4_t *)v157.i8);
          v158.i16[0] = result->i16[v160.u32[0]];
          v158.i16[1] = result->i16[v160.u32[1]];
          v158.i16[2] = result->i16[v160.u32[2]];
          v158.i16[3] = result->i16[v160.u32[3]];
          v158.i16[4] = result->i16[v135];
          v158.i16[5] = result->i16[*((void *)&v135 + 1)];
          v158.i16[6] = result->i16[v159];
          float16x8_t v161 = (float16x8_t)vuzp1q_s16((int16x8_t)v151, (int16x8_t)v158);
          v151.i16[7] = result->i16[v155];
          v158.i16[7] = result->i16[*((void *)&v159 + 1)];
          uint16x8_t v162 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v156, v112), v113));
          uint32x4_t v163 = vmovl_high_u16(v162);
          int16x8_t v164 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v162.i8);
          *(void *)&long long v135 = v163.u32[2];
          *((void *)&v135 + 1) = v163.u32[3];
          long long v165 = v135;
          *(void *)&long long v135 = v163.u32[0];
          *((void *)&v135 + 1) = v163.u32[1];
          long long v166 = v135;
          *((void *)&v135 + 1) = v164.u32[3];
          v164.i16[7] = (unint64_t)v164.u32[3] >> 48;
          v164.i16[0] = result->i16[v164.u32[0]];
          v164.i16[1] = result->i16[v164.u32[1]];
          v164.i16[2] = result->i16[v164.u32[2]];
          v164.i16[3] = result->i16[*((void *)&v135 + 1)];
          v164.i16[4] = result->i16[v166];
          v164.i16[5] = result->i16[*((void *)&v166 + 1)];
          v164.i16[6] = result->i16[v165];
          float16x8_t v167 = (float16x8_t)v164;
          v167.i16[7] = result->i16[*((void *)&v165 + 1)];
          *v117++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v72, v151, v102), v158, v97), v167, _H4), v72), v73)), v109);
          uint16x8_t v76 = v291;
          int16x8_t v168 = (int16x8_t)vaddq_f16(v161, (float16x8_t)vuzp2q_s16((int16x8_t)v151, (int16x8_t)v158));
          *(uint16x8_t *)&v75[v114] = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v282, v283, (float16x8_t)vzip1q_s16(v168, v168)), v118, (float16x8_t)vzip2q_s16(v168, v168)), v110, vaddq_f16((float16x8_t)vtrn1q_s16(v164, v164), (float16x8_t)vtrn2q_s16((int16x8_t)v167, (int16x8_t)v167))), v74), v281)), v109);
          v115 += 8;
          v114 += 8;
        }
        while (v115 < (int)v19 - 7);
        float v169 = (unsigned __int16 *)(v80 + v114 * 2);
        float v170 = &v75[v114];
        unint64_t v171 = v19 & 0xFFFFFFF8;
        uint64_t v35 = v256;
        int32x4_t v71 = (int32x4_t)v118;
      }
      for (; v19 > v171; _H4 = v271)
      {
        float v172 = (float)(v169[1] >> v82) - v42;
        float v173 = *((float *)&v288 + 1) * v172;
        float v174 = v299 * (float)((float)(v116->u16[0] >> v82) - v40);
        float v175 = (float)(*((float *)&v288 + 1) * v172) + v174;
        float v176 = 8191.0;
        if (v175 <= 8191.0)
        {
          float v176 = (float)(*((float *)&v288 + 1) * v172) + v174;
          if (v175 < 0.0) {
            float v176 = 0.0;
          }
        }
        int32x4_t v177 = v71;
        float v178 = (float)(*v169 >> v82) - v42;
        float v179 = (float)(v10.f32[1] * v172) + (float)(v178 * v10.f32[0]);
        float v180 = 8191.0;
        if ((float)(v174 + v179) <= 8191.0)
        {
          float v180 = v174 + v179;
          if ((float)(v174 + v179) < 0.0) {
            float v180 = 0.0;
          }
        }
        float v181 = *(float *)&v288 * v178;
        float v182 = v181 + v174;
        BOOL v183 = (float)(v181 + v174) <= 8191.0;
        float v184 = 8191.0;
        if (v183)
        {
          float v184 = v182;
          if (v182 < 0.0) {
            float v184 = 0.0;
          }
        }
        float v185 = v40;
        float v186 = v299 * (float)((float)(v116->u16[1] >> v82) - v40);
        float v187 = v173 + v186;
        float v188 = 8191.0;
        if (v187 <= 8191.0)
        {
          float v188 = v187;
          if (v187 < 0.0) {
            float v188 = 0.0;
          }
        }
        float v189 = v179 + v186;
        float v190 = 8191.0;
        if (v189 <= 8191.0)
        {
          float v190 = v189;
          if (v189 < 0.0) {
            float v190 = 0.0;
          }
        }
        float v191 = v181 + v186;
        float v192 = 8191.0;
        if (v191 <= 8191.0)
        {
          float v192 = v191;
          if (v191 < 0.0) {
            float v192 = 0.0;
          }
        }
        _H1 = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(v180, 0.0), 8191.0))];
        unsigned int v196 = llroundf(fminf(fmaxf(v184, 0.0), 8191.0));
        __asm { FCVT            S0, H2 }
        _H2 = *(_WORD *)&v66[2 * v196];
        __asm { FCVT            S2, H2 }
        float v200 = fmaxf(_S1, fmaxf(_S0, _S2));
        float v201 = (float)((float)((float)(v294 * _S0) + (float)(v295 * _S1)) + (float)(v293 * _S2)) + (float)(v292 * v200);
        float v202 = 8191.0;
        if (v201 <= 8191.0)
        {
          float v202 = (float)((float)((float)(v294 * _S0) + (float)(v295 * _S1)) + (float)(v293 * _S2))
               + (float)(v292 * v200);
          if (v201 < 0.0) {
            float v202 = 0.0;
          }
        }
        float v203 = v42;
        _H6 = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(v188, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        _H3 = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(v190, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H5 = *(_WORD *)&v66[2 * llroundf(fminf(fmaxf(v192, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        _H17 = *(_WORD *)&v54[2 * llroundf(v202)];
        float v211 = (float)((float)((float)(v294 * _S3) + (float)(v295 * _S6)) + (float)(v293 * _S5))
             + (float)(v292 * fmaxf(_S6, fmaxf(_S3, _S5)));
        float v212 = 8191.0;
        if (v211 <= 8191.0)
        {
          float v212 = v211;
          if (v211 < 0.0) {
            float v212 = 0.0;
          }
        }
        __asm { FCVT            S17, H17 }
        _S1 = _S1 * _S17;
        _S0 = _S0 * _S17;
        float v216 = _S2 * _S17;
        _H7 = *(_WORD *)&v54[2 * llroundf(v212)];
        __asm { FCVT            S7, H7 }
        float v219 = _S6 * _S7;
        float v220 = _S3 * _S7;
        float v221 = _S5 * _S7;
        float v222 = (float)((float)(v279 * _S0) + (float)(_S1 * v280)) + (float)(v216 * v278);
        float v223 = (float)((float)(v276 * _S0) + (float)(_S1 * v277)) + (float)(v216 * v275);
        _S2 = (float)((float)(v273 * _S0) + (float)(_S1 * v274)) + (float)(v216 * v272);
        float v225 = (float)((float)(v279 * v220) + (float)(v219 * v280)) + (float)(v221 * v278);
        float v226 = (float)((float)(v276 * v220) + (float)(v219 * v277)) + (float)(v221 * v275);
        float v227 = (float)((float)(v273 * v220) + (float)(v219 * v274)) + (float)(v221 * v272);
        LOWORD(_S0) = result->i16[llroundf(fminf(fmaxf(v222, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        LOWORD(_S1) = result->i16[llroundf(fminf(fmaxf(v223, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        LOWORD(_S2) = result->i16[llroundf(fminf(fmaxf(_S2, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H3 = result->i16[llroundf(fminf(fmaxf(v225, 0.0), 8191.0))];
        _H5 = result->i16[llroundf(fminf(fmaxf(v226, 0.0), 8191.0))];
        _H17 = result->i16[llroundf(fminf(fmaxf(v227, 0.0), 8191.0))];
        float v234 = (float)((float)((float)(v297 * _S1) + (float)(v298 * _S0)) + (float)(v296 * _S2)) + v251;
        float v235 = v290;
        if (v234 <= v290)
        {
          float v235 = (float)((float)((float)(v297 * _S1) + (float)(v298 * _S0)) + (float)(v296 * _S2)) + v251;
          if (v234 < v251) {
            float v235 = v251;
          }
        }
        __asm
        {
          FCVT            S6, H3
          FCVT            S5, H5
          FCVT            S3, H17
        }
        float v239 = (float)((float)((float)(v297 * _S5) + (float)(v298 * _S6)) + (float)(v296 * _S3)) + v251;
        v117->i16[0] = llroundf(v235) << v83;
        float v240 = v290;
        float v42 = v203;
        float16x8_t v112 = 0uLL;
        v113.i64[0] = 0x9000900090009000;
        v113.i64[1] = 0x9000900090009000;
        if (v239 <= v290)
        {
          float v240 = (float)((float)((float)(v297 * _S5) + (float)(v298 * _S6)) + (float)(v296 * _S3)) + v251;
          if (v239 < v251) {
            float v240 = v251;
          }
        }
        v117->i16[1] = llroundf(v240) << v83;
        float v241 = _S0 + _S6;
        float v242 = _S1 + _S5;
        float v243 = _S2 + _S3;
        float v244 = (float)((float)(v300 + (float)(v241 * *(float *)&v287)) + (float)(v242 * *(float *)&v286))
             + (float)(v243 * *(float *)&v111);
        float v245 = v56;
        if (v244 <= v56)
        {
          float v245 = (float)((float)(v300 + (float)(v241 * *(float *)&v287)) + (float)(v242 * *(float *)&v286))
               + (float)(v243 * *(float *)&v111);
          if (v244 < v289) {
            float v245 = v289;
          }
        }
        float v246 = (float)((float)(v300 + (float)(v241 * *((float *)&v287 + 1))) + (float)(v242 * *((float *)&v286 + 1)))
             + (float)(v243 * *((float *)&v111 + 1));
        *float v170 = llroundf(v245) << v83;
        float v247 = v56;
        float v40 = v185;
        int32x4_t v71 = v177;
        uint16x8_t v76 = v291;
        if (v246 <= v56)
        {
          float v247 = v246;
          if (v246 < v289) {
            float v247 = v289;
          }
        }
        v171 += 2;
        v169 += 2;
        v170[1] = llroundf(v247) << v83;
        float v116 = (uint16x8_t *)((char *)v116 + 4);
        unsigned int v117 = (uint16x8_t *)((char *)v117 + 4);
        v170 += 2;
        float16x8_t v110 = (float16x8_t)v285;
      }
      v81 += v32;
      v80 += v31;
      float v68 = (uint16x8_t *)((char *)v68 + v34);
      float v75 = (_WORD *)((char *)v75 + v35);
      ++v18;
      float16x8_t v73 = v259;
      float16x8_t v72 = v260;
      _H5 = v257;
      float16x8_t v74 = v258;
    }
    while (v18 != v22);
    if (v253 && v252)
    {
      size_t v248 = 2 * v19;
      do
      {
        uint64_t result = (float32x2_t *)memcpy(v36, v33, v248);
        v33 += v249;
        v36 += v250;
        --v22;
      }
      while (v22);
    }
    else if (v252)
    {
      do
      {
        if (v19) {
          uint64_t result = (float32x2_t *)memset(v36, 255, 2 * v19);
        }
        v36 += v250;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Tone_Mat_TRC_xf422_GCD(void *result, uint64_t a2, double a3, float a4, double a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    unint64_t v16 = result[13] * a2 / v7;
    uint64_t v17 = (void *)result[16];
    unint64_t v18 = v16 + result[15];
    uint64_t v19 = result[19];
    uint64_t v20 = (void *)result[7];
    uint64_t v21 = (uint64_t *)result[8];
    size_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v26 = v20[2];
    uint64_t v27 = (char *)(v26 + v25 * v13 + 2 * v12);
    uint64_t v28 = *v22;
    uint64_t v29 = v22[1];
    uint64_t v30 = v22[2];
    uint64_t v31 = v17[2];
    uint64_t v32 = (char *)(v31 + v30 * v18 + 2 * v15);
    LOWORD(a4) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    float v34 = (float)LODWORD(a6);
    float v169 = v33 * *(float *)v19;
    float v170 = (float)LODWORD(a4);
    float v166 = v33 * *(float *)(v19 + 16);
    float v167 = v33 * *(float *)(v19 + 8);
    float v35 = v33 * *(float *)(v19 + 20);
    *(float *)&unsigned int v36 = v33 * *(float *)(v19 + 28);
    float v164 = *(float *)&v36;
    float v165 = v35;
    LOWORD(v36) = *(_WORD *)(v19 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v19 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v19 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v19 + 150);
    *(float *)&unsigned int v40 = (float)v36;
    float v168 = *(float *)&v40;
    LOWORD(v40) = *(_WORD *)(v19 + 152);
    float v41 = (float)v40;
    float v42 = *(float *)(v19 + 36);
    float v43 = *(float *)(v19 + 40);
    float v44 = *(float *)(v19 + 44);
    float v162 = *(float *)(v19 + 52) * 0.5;
    float v163 = *(float *)(v19 + 48) * 0.5;
    float v160 = *(float *)(v19 + 60) * 0.5;
    float v161 = *(float *)(v19 + 56) * 0.5;
    float v45 = *(float *)(v19 + 72);
    float v158 = *(float *)(v19 + 68) * 0.5;
    float v159 = *(float *)(v19 + 64) * 0.5;
    float v47 = *(float *)(v19 + 76);
    float v46 = *(float *)(v19 + 80);
    float v48 = *(float *)(v19 + 84);
    float v49 = *(float *)(v19 + 88);
    float v50 = *(float *)(v19 + 92);
    float v51 = *(float *)(v19 + 96);
    float v52 = *(float *)(v19 + 100);
    float v53 = *(float *)(v19 + 104);
    uint64_t v54 = v19 + 164;
    uint64_t v55 = v19 + 16548;
    unsigned int v56 = *(unsigned __int8 *)(v19 + 132);
    char v57 = 16 - v56;
    if (v56 >= 0x11) {
      char v57 = 0;
    }
    unsigned int v58 = *(unsigned __int8 *)(v19 + 124);
    char v59 = 16 - v58;
    if (v58 >= 0x11) {
      char v59 = 0;
    }
    uint64_t v60 = v17[1];
    _ZF = v60 == 0;
    uint64_t v62 = v60 + v29 * v18;
    uint64_t v63 = *v17 + v28 * v18;
    uint64_t v64 = v19 + 32932;
    uint64_t result = (void *)(v62 + 2 * v15);
    if (_ZF) {
      uint64_t result = 0;
    }
    uint64_t v65 = (_WORD *)(v63 + 2 * v15);
    float v68 = v20;
    uint64_t v67 = *v20;
    uint64_t v66 = v68[1];
    _ZF = v66 == 0;
    uint64_t v69 = v66 + v24 * v13 + 2 * v12;
    if (_ZF) {
      uint64_t v69 = 0;
    }
    uint64_t v70 = v67 + v23 * v13 + 2 * v12;
    char v71 = v59;
    char v72 = v57;
    float v74 = *(float *)(v19 + 108);
    float v73 = *(float *)(v19 + 112);
    float v75 = *(float *)(v19 + 116);
    float v76 = *(float *)(v19 + 120);
    do
    {
      if (v11)
      {
        unint64_t v77 = 0;
        uint64_t v78 = (unsigned __int16 *)v70;
        size_t v79 = v65;
        do
        {
          uint64_t v80 = (unsigned __int16 *)(v69 + 2 * v77);
          float v81 = (float)(v80[1] >> v71) - v34;
          float v82 = v167 * v81;
          float v83 = v169 * (float)((float)(*v78 >> v71) - v170);
          float v84 = (float)(v167 * v81) + v83;
          float v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            float v85 = (float)(v167 * v81) + v83;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v34;
          float v87 = (float)(*v80 >> v71) - v34;
          float v88 = (float)(v165 * v81) + (float)(v87 * v166);
          float v89 = 8191.0;
          if ((float)(v83 + v88) <= 8191.0)
          {
            float v89 = v83 + v88;
            if ((float)(v83 + v88) < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v164 * v87;
          float v91 = v90 + v83;
          BOOL v92 = (float)(v90 + v83) <= 8191.0;
          float v93 = 8191.0;
          if (v92)
          {
            float v93 = v91;
            if (v91 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v169 * (float)((float)(v78[1] >> v71) - v170);
          float v95 = v82 + v94;
          float v96 = 8191.0;
          if (v95 <= 8191.0)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v88 + v94;
          BOOL v92 = (float)(v88 + v94) <= 8191.0;
          float v98 = 8191.0;
          if (v92)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          float v99 = v90 + v94;
          BOOL v92 = (float)(v90 + v94) <= 8191.0;
          float v100 = 8191.0;
          if (v92)
          {
            float v100 = v99;
            if (v99 < 0.0) {
              float v100 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H19 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          float v113 = (float)((float)((float)(v73 * _S25) + (float)(v74 * _S24)) + (float)(v75 * _S26))
               + (float)(v76 * fmaxf(_S24, fmaxf(_S25, _S26)));
          float v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            float v114 = v113;
            if (v113 < 0.0) {
              float v114 = 0.0;
            }
          }
          __asm
          {
            FCVT            S27, H19
            FCVT            S28, H28
            FCVT            S30, H30
          }
          _H19 = *(_WORD *)(v55 + 2 * llroundf(v114));
          float v119 = (float)((float)((float)(v73 * _S28) + (float)(v74 * _S27)) + (float)(v75 * _S30))
               + (float)(v76 * fmaxf(_S27, fmaxf(_S28, _S30)));
          float v120 = 8191.0;
          if (v119 <= 8191.0)
          {
            float v120 = v119;
            if (v119 < 0.0) {
              float v120 = 0.0;
            }
          }
          __asm { FCVT            S18, H19 }
          float v122 = _S24 * _S18;
          _S24 = _S25 * _S18;
          float v124 = _S26 * _S18;
          _H0 = *(_WORD *)(v55 + 2 * llroundf(v120));
          __asm { FCVT            S0, H0 }
          _S25 = _S27 * _S0;
          float v128 = _S28 * _S0;
          float v129 = _S30 * _S0;
          float v130 = (float)((float)(v47 * _S24) + (float)(v122 * v45)) + (float)(v124 * v46);
          float v131 = (float)((float)(v49 * _S24) + (float)(v122 * v48)) + (float)(v124 * v50);
          _S18 = (float)((float)(v52 * _S24) + (float)(v122 * v51)) + (float)(v124 * v53);
          float v133 = (float)((float)(v47 * v128) + (float)(_S25 * v45)) + (float)(v129 * v46);
          float v134 = (float)((float)(v49 * v128) + (float)(_S25 * v48)) + (float)(v129 * v50);
          float v135 = (float)((float)(v52 * v128) + (float)(_S25 * v51)) + (float)(v129 * v53);
          LOWORD(_S24) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          LOWORD(_S18) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S26, H18 }
          _H19 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          float v142 = (float)((float)((float)(v43 * _S25) + (float)(v42 * _S24)) + (float)(v44 * _S26)) + v37;
          float v143 = v39;
          if (v142 <= v39)
          {
            float v143 = (float)((float)((float)(v43 * _S25) + (float)(v42 * _S24)) + (float)(v44 * _S26)) + v37;
            if (v142 < v37) {
              float v143 = v37;
            }
          }
          __asm
          {
            FCVT            S28, H19
            FCVT            S27, H27
            FCVT            S19, H30
          }
          float v147 = (float)((float)((float)(v43 * _S27) + (float)(v42 * _S28)) + (float)(v44 * _S19)) + v37;
          *size_t v79 = llroundf(v143) << v72;
          float v148 = v39;
          if (v147 <= v39)
          {
            float v148 = (float)((float)((float)(v43 * _S27) + (float)(v42 * _S28)) + (float)(v44 * _S19)) + v37;
            if (v147 < v37) {
              float v148 = v37;
            }
          }
          v79[1] = llroundf(v148) << v72;
          float v149 = _S24 + _S28;
          float v150 = _S25 + _S27;
          float v151 = _S26 + _S19;
          float v152 = (float)((float)(v38 + (float)(v149 * v163)) + (float)(v150 * v162)) + (float)(v151 * v161);
          float v153 = v41;
          if (v152 <= v41)
          {
            float v153 = (float)((float)(v38 + (float)(v149 * v163)) + (float)(v150 * v162)) + (float)(v151 * v161);
            if (v152 < v168) {
              float v153 = v168;
            }
          }
          float v154 = (_WORD *)result + v77;
          float v155 = (float)((float)(v38 + (float)(v149 * v160)) + (float)(v150 * v159)) + (float)(v151 * v158);
          *float v154 = llroundf(v153) << v72;
          float v156 = v41;
          if (v155 <= v41)
          {
            float v156 = v155;
            if (v155 < v168) {
              float v156 = v168;
            }
          }
          v154[1] = llroundf(v156) << v72;
          v77 += 2;
          v78 += 2;
          v79 += 2;
          float v34 = v86;
        }
        while (v11 > v77);
      }
      v70 += v23;
      v69 += v24;
      uint64_t v65 = (_WORD *)((char *)v65 + v28);
      uint64_t result = (void *)((char *)result + v29);
      ++v10;
    }
    while (v10 != v14);
    if (v26 && v31)
    {
      size_t v157 = 2 * v11;
      do
      {
        uint64_t result = memcpy(v32, v27, v157);
        v27 += v25;
        v32 += v30;
        --v14;
      }
      while (v14);
    }
    else if (v31)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v32, 255, 2 * v11);
        }
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_xf422_TRC_Mat_TRC_xf422_neon_fp16_GCD(float32x2_t *result, uint64_t a2, int16x4_t a3, double a4, double a5, double a6, double a7, double a8, int16x4_t a9, int16x4_t a10)
{
  uint64_t v15 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v16 = result->u8[0];
  unint64_t v17 = v15 * a2 / v16;
  unint64_t v18 = (v15 + v15 * a2) / v16;
  if (v18 != v17)
  {
    uint64_t v19 = 0;
    unint64_t v20 = *(unint64_t *)((char *)&result[2] + 4);
    uint64_t v21 = *(uint64_t *)((char *)&result[4] + 4);
    unint64_t v22 = v17 + *(void *)((char *)&result[5] + 4);
    unint64_t v23 = v18 - v17;
    float32x2_t v24 = result[14];
    uint64_t v25 = (void *)result[16];
    unint64_t v26 = *(void *)&result[13] * a2 / v16 + *(void *)&result[15];
    uint64_t v27 = (float32x2_t *)result[19];
    uint64_t v28 = (void *)result[7];
    uint64_t v29 = (uint64_t *)result[8];
    uint64_t v30 = (uint64_t *)result[17];
    uint64_t v31 = *v29;
    uint64_t v32 = v29[1];
    uint64_t v216 = v29[2];
    uint64_t v219 = v28[2];
    uint64_t v33 = (char *)(v219 + v216 * v22 + 2 * v21);
    uint64_t v34 = *v30;
    uint64_t v35 = v30[1];
    uint64_t v217 = v30[2];
    uint64_t v218 = v25[2];
    uint64_t v36 = (char *)(v218 + v217 * v26 + 2 * *(void *)&v24);
    a3.i32[0] = v27[16].i32[0];
    v13.f32[0] = (float)a3.u32[0];
    unsigned int v37 = v27[17].u16[2];
    unsigned int v38 = v27[17].u16[3];
    float v39 = (float)v37;
    *(short float *)v14.i16 = (short float)v37;
    unsigned int v40 = v27[18].u16[0];
    float v41 = (float)v38;
    short float v42 = (short float)v38;
    unsigned int v43 = v27[18].u16[1];
    unsigned int v48 = v27[18].u16[2];
    float v49 = (float)v40;
    *(short float *)a3.i16 = (short float)v40;
    unsigned int v50 = v27[18].u16[3];
    *(float *)&a4 = (float)v43;
    float v252 = (float)v43;
    float v253 = v27[5].f32[1];
    float v51 = (float)v48;
    *(short float *)&a4 = (short float)v43;
    unsigned int v52 = v27[19].u16[0];
    *(float *)&a6 = (float)v50;
    float v240 = (float)v50;
    float v53 = (float)v52;
    _S14 = v27[4].i32[1];
    _S15 = v27[5].i32[0];
    *(short float *)&a6 = (short float)v48;
    *(short float *)a9.i16 = (short float)v50;
    *(short float *)a10.i16 = (short float)v52;
    unsigned int v56 = v27[16].u8[4];
    unsigned __int8 v57 = 16 - v56;
    if (v56 >= 0x11) {
      unsigned __int8 v57 = 0;
    }
    unsigned int v58 = v27[15].u8[4];
    unsigned __int8 v59 = 16 - v58;
    if (v58 >= 0x11) {
      unsigned __int8 v59 = 0;
    }
    uint64_t v60 = v25[1];
    _ZF = v60 == 0;
    uint64_t v62 = v60 + v35 * v26;
    uint64_t v63 = *v25 + v34 * v26;
    uint64_t v64 = (char *)&v27[20] + 4;
    float v65 = 8191.0 / v13.f32[0];
    _S18 = (float)(8191.0 / v13.f32[0]) * v27->f32[0];
    int16x8_t v67 = vdupq_lane_s16(v14, 0);
    v44.i32[1] = v27[1].i32[0];
    v44.i32[0] = v27[3].i32[1];
    *(float32x2_t *)v13.f32 = vmul_n_f32(v44, 8191.0 / v13.f32[0]);
    uint64_t v239 = v13.i64[0];
    float16x8_t v68 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v13), 0);
    *(float32x2_t *)v11.i8 = vmul_n_f32(v27[2], v65);
    float16x8_t v69 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)v11), 0);
    short float v70 = -v42;
    float32x4_t v72 = (float32x4_t)vmulq_n_f16(v68, -v42);
    float16x8_t v237 = vmulq_n_f16(v69, v70);
    v45.i32[1] = v27[7].i32[1];
    v45.i32[0] = v27[6].i32[0];
    *(float32x2_t *)v10.f32 = vmul_f32(v45, (float32x2_t)0x3F0000003F000000);
    float16x8_t v236 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    v46.i32[1] = v27[8].i32[0];
    v46.i32[0] = v27[6].i32[1];
    *(float32x2_t *)v12.f32 = vmul_f32(v46, (float32x2_t)0x3F0000003F000000);
    float16x8_t v220 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v12), 0);
    float16x8_t v71 = (float16x8_t)v72;
    v47.i32[1] = v27[8].i32[1];
    v47.i32[0] = v27[7].i32[0];
    *(float32x2_t *)v72.f32 = vmul_f32(v47, (float32x2_t)0x3F0000003F000000);
    float16x8_t v73 = v69;
    float16x8_t v235 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v72), 0);
    float16x8_t v74 = v68;
    int16x8_t v75 = vdupq_lane_s16(a3, 0);
    float v76 = (_WORD *)(v62 + 2 * *(void *)&v24);
    if (_ZF) {
      float v76 = 0;
    }
    unint64_t v77 = (uint16x8_t *)(v63 + 2 * *(void *)&v24);
    uint64_t v78 = v28[1];
    _ZF = v78 == 0;
    uint64_t v79 = v78 + v32 * v22;
    uint64_t v80 = *v28 + v31 * v22;
    uint64_t result = (float32x2_t *)((char *)v27 + 16548);
    int16x8_t v81 = vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    int16x8_t v82 = vdupq_lane_s16(*(int16x4_t *)&a6, 0);
    float16x8_t v232 = (float16x8_t)vdupq_lane_s16(a9, 0);
    float16x8_t v231 = (float16x8_t)vdupq_lane_s16(a10, 0);
    float v83 = (unsigned __int16 *)(v79 + 2 * v21);
    if (_ZF) {
      float v83 = 0;
    }
    float v84 = (uint16x8_t *)(v80 + 2 * v21);
    uint16x8_t v85 = (uint16x8_t)vdupq_n_s16(-v59);
    float v250 = v27[4].f32[1];
    float v251 = _S18;
    __asm
    {
      FCVT            H8, S18
      FCVT            H14, S14
    }
    short float v230 = _H14;
    float v249 = v27[5].f32[0];
    __asm { FCVT            H14, S15 }
    short float v229 = _H14;
    _S18 = v27[5].i32[1];
    __asm { FCVT            H14, S18 }
    short float v228 = _H14;
    float16x8_t v94 = (float16x8_t)v67;
    float v247 = v27[9].f32[1];
    float v248 = v27[9].f32[0];
    __asm
    {
      FCVT            H6, S6
      FCVT            H14, S27
    }
    short float v226 = _H14;
    float v246 = v27[10].f32[0];
    __asm { FCVT            H14, S29 }
    short float v225 = _H14;
    float v245 = v27[10].f32[1];
    __asm { FCVT            H4, S9 }
    short float v222 = _H4;
    float v244 = v27[11].f32[0];
    __asm { FCVT            H9, S19 }
    short float v224 = _H9;
    float v242 = v27[12].f32[0];
    float v243 = v27[11].f32[1];
    __asm
    {
      FCVT            H9, S23
      FCVT            H14, S26
    }
    float v241 = v27[12].f32[1];
    __asm { FCVT            H15, S31 }
    _S19 = v27[13].f32[0];
    __asm { FCVT            H4, S24 }
    float v238 = *(float *)v11.i32;
    uint64_t v105 = v10.i64[0];
    float v223 = *(float *)&v11.i32[1];
    uint16x8_t v106 = (uint16x8_t)vdupq_n_s16(v57);
    v107.i64[0] = 0x9000900090009000;
    v107.i64[1] = 0x9000900090009000;
    int16x8_t v221 = v75;
    float16x8_t v233 = (float16x8_t)v82;
    float16x8_t v234 = (float16x8_t)v81;
    uint16x8_t v108 = v85;
    short float v227 = _H6;
    do
    {
      if ((int)v20 < 8)
      {
        unint64_t v155 = 0;
        float v154 = v76;
        float16x8_t v112 = v77;
        float v153 = v83;
        uint64_t v111 = v84;
      }
      else
      {
        uint64_t v109 = 0;
        int v110 = 0;
        uint64_t v111 = v84;
        float16x8_t v112 = v77;
        float16x8_t v113 = (float16x8_t)v75;
        do
        {
          float16x8_t v114 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)&v83[v109], v85));
          int16x8_t v115 = (int16x8_t)vmlaq_f16(v71, v74, v114);
          int8x16_t v116 = (int8x16_t)vmlaq_f16(v237, v73, v114);
          v114.i64[0] = vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL).u64[0];
          *(int16x4_t *)v117.i8 = vuzp1_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v114.i8);
          *(int16x4_t *)v114.i8 = vuzp2_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v114.i8);
          v114.i64[1] = v114.i64[0];
          v117.i64[1] = v114.i64[0];
          float16x8_t v118 = (float16x8_t)vzip1q_s16((int16x8_t)v114, (int16x8_t)v114);
          float16x8_t v119 = (float16x8_t)vzip1q_s16(v117, v117);
          v115.i64[0] = vextq_s8(v116, v116, 8uLL).u64[0];
          *(float16x4_t *)v115.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8));
          v115.i64[1] = v118.i64[0];
          uint16x8_t v120 = *v111++;
          float16x8_t v121 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v120, v85)), v94);
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v118, v121, _H8), (float16x8_t)0), v107));
          uint32x4_t v123 = vmovl_high_u16(v122);
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v122.i8);
          v125.i16[0] = *(_WORD *)&v64[2 * v124.u32[0]];
          v125.i16[1] = *(_WORD *)&v64[2 * v124.u32[1]];
          v125.i16[2] = *(_WORD *)&v64[2 * v124.u32[2]];
          v125.i16[3] = *(_WORD *)&v64[2 * v124.u32[3]];
          v125.i16[4] = *(_WORD *)&v64[2 * v123.u32[0]];
          v125.i16[5] = *(_WORD *)&v64[2 * v123.u32[1]];
          v125.i16[6] = *(_WORD *)&v64[2 * v123.u32[2]];
          v125.i16[7] = *(_WORD *)&v64[2 * v123.u32[3]];
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16(v115, v115), v121, _H8), (float16x8_t)0), v107));
          uint32x4_t v127 = vmovl_high_u16(v126);
          uint32x4_t v128 = vmovl_u16(*(uint16x4_t *)v126.i8);
          v129.i16[0] = *(_WORD *)&v64[2 * v128.u32[0]];
          v129.i16[1] = *(_WORD *)&v64[2 * v128.u32[1]];
          v129.i16[2] = *(_WORD *)&v64[2 * v128.u32[2]];
          v129.i16[3] = *(_WORD *)&v64[2 * v128.u32[3]];
          v129.i16[4] = *(_WORD *)&v64[2 * v127.u32[0]];
          v129.i16[5] = *(_WORD *)&v64[2 * v127.u32[1]];
          v129.i16[6] = *(_WORD *)&v64[2 * v127.u32[2]];
          v129.i16[7] = *(_WORD *)&v64[2 * v127.u32[3]];
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v119, v121, _H8), (float16x8_t)0), v107));
          uint32x4_t v131 = vmovl_high_u16(v130);
          float16x8_t v132 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v130.i8);
          v132.i16[0] = *(_WORD *)&v64[2 * v132.u32[0]];
          v132.i16[1] = *(_WORD *)&v64[2 * v132.u32[1]];
          v132.i16[2] = *(_WORD *)&v64[2 * v132.u32[2]];
          v132.i16[3] = *(_WORD *)&v64[2 * v132.u32[3]];
          v132.i16[4] = *(_WORD *)&v64[2 * v131.u32[0]];
          v132.i16[5] = *(_WORD *)&v64[2 * v131.u32[1]];
          v132.i16[6] = *(_WORD *)&v64[2 * v131.u32[2]];
          v132.i16[7] = *(_WORD *)&v64[2 * v131.u32[3]];
          float16x8_t v133 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v125, v227), v129, v226), v132, v225);
          float16x8_t v134 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v125, v222), v129, v224), v132, _H9);
          float16x8_t v135 = vmlaq_n_f16(vmulq_n_f16(v132, _H4), v129, _H15);
          uint16x8_t v85 = v108;
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v133, (float16x8_t)0), v107));
          uint32x4_t v137 = vmovl_high_u16(v136);
          uint32x4_t v138 = vmovl_u16(*(uint16x4_t *)v136.i8);
          v11.i16[0] = result->i16[v138.u32[0]];
          uint64_t v139 = v137.u32[3];
          v11.i16[1] = result->i16[v138.u32[1]];
          v11.i16[2] = result->i16[v138.u32[2]];
          v11.i16[3] = result->i16[v138.u32[3]];
          v11.i16[4] = result->i16[v137.u32[0]];
          v11.i16[5] = result->i16[v137.u32[1]];
          v11.i16[6] = result->i16[v137.u32[2]];
          float16x8_t v140 = vmlaq_n_f16(v135, v125, _H14);
          uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v134, (float16x8_t)0), v107));
          uint32x4_t v142 = vmovl_high_u16(v141);
          uint32x4_t v143 = vmovl_u16(*(uint16x4_t *)v141.i8);
          v125.i16[0] = result->i16[v143.u32[0]];
          v125.i16[1] = result->i16[v143.u32[1]];
          v125.i16[2] = result->i16[v143.u32[2]];
          v125.i16[3] = result->i16[v143.u32[3]];
          v125.i16[4] = result->i16[v142.u32[0]];
          v125.i16[5] = result->i16[v142.u32[1]];
          v125.i16[6] = result->i16[v142.u32[2]];
          float16x8_t v144 = (float16x8_t)vuzp1q_s16((int16x8_t)v11, (int16x8_t)v125);
          v11.i16[7] = result->i16[v139];
          v125.i16[7] = result->i16[v142.u32[3]];
          uint16x8_t v145 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v140, (float16x8_t)0), v107));
          uint32x4_t v146 = vmovl_high_u16(v145);
          int16x8_t v147 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v145.i8);
          *(void *)&long long v148 = v146.u32[2];
          *((void *)&v148 + 1) = v146.u32[3];
          long long v149 = v148;
          *(void *)&long long v148 = v146.u32[0];
          *((void *)&v148 + 1) = v146.u32[1];
          long long v150 = v148;
          *((void *)&v148 + 1) = v147.u32[3];
          v147.i16[7] = (unint64_t)v147.u32[3] >> 48;
          v147.i16[0] = result->i16[v147.u32[0]];
          v147.i16[1] = result->i16[v147.u32[1]];
          v147.i16[2] = result->i16[v147.u32[2]];
          v147.i16[3] = result->i16[*((void *)&v148 + 1)];
          v147.i16[4] = result->i16[v150];
          v147.i16[5] = result->i16[*((void *)&v150 + 1)];
          v147.i16[6] = result->i16[v149];
          float16x8_t v151 = (float16x8_t)v147;
          v151.i16[7] = result->i16[*((void *)&v149 + 1)];
          *v112++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v113, v11, v230), v125, v229), v151, v228), v113), v233)), v106);
          int16x8_t v152 = (int16x8_t)vaddq_f16(v144, (float16x8_t)vuzp2q_s16((int16x8_t)v11, (int16x8_t)v125));
          *(uint16x8_t *)&v76[v109] = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v234, v236, (float16x8_t)vzip1q_s16(v152, v152)), v220, (float16x8_t)vzip2q_s16(v152, v152)), v235, vaddq_f16((float16x8_t)vtrn1q_s16(v147, v147), (float16x8_t)vtrn2q_s16((int16x8_t)v151, (int16x8_t)v151))), v232), v231)), v106);
          v110 += 8;
          v109 += 8;
        }
        while (v110 < (int)v20 - 7);
        float v153 = &v83[v109];
        float v154 = &v76[v109];
        unint64_t v155 = v20 & 0xFFFFFFF8;
      }
      for (; v20 > v155; uint16x8_t v85 = v108)
      {
        float v156 = (float)(v153[1] >> v59) - v41;
        float v157 = *((float *)&v239 + 1) * v156;
        float v158 = v251 * (float)((float)(v111->u16[0] >> v59) - v39);
        float v159 = (float)(*((float *)&v239 + 1) * v156) + v158;
        float v160 = 8191.0;
        if (v159 <= 8191.0)
        {
          float v160 = (float)(*((float *)&v239 + 1) * v156) + v158;
          if (v159 < 0.0) {
            float v160 = 0.0;
          }
        }
        float16x8_t v161 = v71;
        float v162 = (float)(*v153 >> v59) - v41;
        float v163 = (float)(v223 * v156) + (float)(v162 * v238);
        float v164 = 8191.0;
        if ((float)(v158 + v163) <= 8191.0)
        {
          float v164 = v158 + v163;
          if ((float)(v158 + v163) < 0.0) {
            float v164 = 0.0;
          }
        }
        float16x8_t v165 = v73;
        float v166 = *(float *)&v239 * v162;
        float v167 = 8191.0;
        if ((float)((float)(*(float *)&v239 * v162) + v158) <= 8191.0)
        {
          float v167 = v166 + v158;
          if ((float)(v166 + v158) < 0.0) {
            float v167 = 0.0;
          }
        }
        float16x8_t v168 = v74;
        float v169 = v251 * (float)((float)(v111->u16[1] >> v59) - v39);
        float v170 = v157 + v169;
        float v171 = 8191.0;
        if (v170 <= 8191.0)
        {
          float v171 = v170;
          if (v170 < 0.0) {
            float v171 = 0.0;
          }
        }
        float16x8_t v172 = v94;
        float v173 = v163 + v169;
        BOOL v174 = (float)(v163 + v169) <= 8191.0;
        float v175 = 8191.0;
        if (v174)
        {
          float v175 = v173;
          if (v173 < 0.0) {
            float v175 = 0.0;
          }
        }
        float v176 = v41;
        float v177 = v166 + v169;
        float v178 = 8191.0;
        if (v177 <= 8191.0)
        {
          float v178 = v177;
          if (v177 < 0.0) {
            float v178 = 0.0;
          }
        }
        float v179 = v39;
        _H3 = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H6 = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        _H7 = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        float v186 = (float)((float)(v247 * _S6) + (float)(_S3 * v248)) + (float)(_S7 * v246);
        float v187 = (float)((float)(v244 * _S6) + (float)(_S3 * v245)) + (float)(_S7 * v243);
        _S3 = (float)(v241 * _S6) + (float)(_S3 * v242);
        LOWORD(_S6) = result->i16[llroundf(fminf(fmaxf(v186, 0.0), 8191.0))];
        __asm { FCVT            S26, H6 }
        LOWORD(_S6) = result->i16[llroundf(fminf(fmaxf(v187, 0.0), 8191.0))];
        __asm { FCVT            S11, H6 }
        LOWORD(_S3) = result->i16[llroundf(fminf(fmaxf(_S3 + (float)(_S7 * _S19), 0.0), 8191.0))];
        __asm { FCVT            S7, H3 }
        float v192 = (float)((float)((float)(v249 * _S11) + (float)(v250 * _S26)) + (float)(v253 * _S7)) + v49;
        float v193 = v51;
        if (v192 <= v51)
        {
          float v193 = (float)((float)((float)(v249 * _S11) + (float)(v250 * _S26)) + (float)(v253 * _S7)) + v49;
          if (v192 < v49) {
            float v193 = v49;
          }
        }
        _H3 = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H1 = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(v175, 0.0), 8191.0))];
        _H0 = *(_WORD *)&v64[2 * llroundf(fminf(fmaxf(v178, 0.0), 8191.0))];
        __asm
        {
          FCVT            S1, H1
          FCVT            S0, H0
        }
        float v200 = (float)((float)(v247 * _S1) + (float)(_S3 * v248)) + (float)(_S0 * v246);
        float v201 = (float)((float)(v244 * _S1) + (float)(_S3 * v245)) + (float)(_S0 * v243);
        _S1 = (float)((float)(v241 * _S1) + (float)(_S3 * v242)) + (float)(_S0 * _S19);
        LOWORD(_S0) = result->i16[llroundf(fminf(fmaxf(v200, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        LOWORD(_S3) = result->i16[llroundf(fminf(fmaxf(v201, 0.0), 8191.0))];
        LOWORD(_S1) = result->i16[llroundf(fminf(fmaxf(_S1, 0.0), 8191.0))];
        __asm
        {
          FCVT            S3, H3
          FCVT            S1, H1
        }
        float v206 = (float)((float)((float)(v249 * _S3) + (float)(v250 * _S0)) + (float)(v253 * _S1)) + v49;
        v112->i16[0] = llroundf(v193) << v57;
        float v207 = v51;
        if (v206 <= v51)
        {
          float v207 = (float)((float)((float)(v249 * _S3) + (float)(v250 * _S0)) + (float)(v253 * _S1)) + v49;
          if (v206 < v49) {
            float v207 = v49;
          }
        }
        v112->i16[1] = llroundf(v207) << v57;
        float v208 = _S26 + _S0;
        float v209 = _S11 + _S3;
        float v210 = _S7 + _S1;
        float v211 = (float)((float)(v252 + (float)(v208 * *(float *)&v105)) + (float)(v209 * v12.f32[0]))
             + (float)(v210 * v72.f32[0]);
        float v212 = v53;
        if (v211 <= v53)
        {
          float v212 = (float)((float)(v252 + (float)(v208 * *(float *)&v105)) + (float)(v209 * v12.f32[0]))
               + (float)(v210 * v72.f32[0]);
          if (v211 < v240) {
            float v212 = v240;
          }
        }
        float v213 = (float)((float)(v252 + (float)(v208 * *((float *)&v105 + 1))) + (float)(v209 * v12.f32[1]))
             + (float)(v210 * v72.f32[1]);
        *float v154 = llroundf(v212) << v57;
        float v214 = v53;
        float v39 = v179;
        if (v213 <= v53)
        {
          float v214 = v213;
          if (v213 < v240) {
            float v214 = v240;
          }
        }
        v155 += 2;
        v153 += 2;
        v154[1] = llroundf(v214) << v57;
        uint64_t v111 = (uint16x8_t *)((char *)v111 + 4);
        float16x8_t v112 = (uint16x8_t *)((char *)v112 + 4);
        v154 += 2;
        float v41 = v176;
        float16x8_t v94 = v172;
        float16x8_t v74 = v168;
        float16x8_t v73 = v165;
        float16x8_t v71 = v161;
      }
      float v84 = (uint16x8_t *)((char *)v84 + v31);
      float v83 = (unsigned __int16 *)((char *)v83 + v32);
      unint64_t v77 = (uint16x8_t *)((char *)v77 + v34);
      float v76 = (_WORD *)((char *)v76 + v35);
      ++v19;
      int16x8_t v75 = v221;
    }
    while (v19 != v23);
    if (v219 && v218)
    {
      size_t v215 = 2 * v20;
      do
      {
        uint64_t result = (float32x2_t *)memcpy(v36, v33, v215);
        v33 += v216;
        v36 += v217;
        --v23;
      }
      while (v23);
    }
    else if (v218)
    {
      do
      {
        if (v20) {
          uint64_t result = (float32x2_t *)memset(v36, 255, 2 * v20);
        }
        v36 += v217;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Mat_TRC_xf422_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (uint64_t *)result[16];
    unint64_t v17 = result[13] * a2 / v7 + result[15];
    uint64_t v18 = result[19];
    uint64_t v19 = (uint64_t *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    unint64_t v26 = (char *)(v25 + v24 * v13 + 2 * v12);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (char *)(v30 + v29 * v17 + 2 * v15);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    float v33 = (float)LODWORD(a5);
    float v34 = (float)LODWORD(a6);
    float v35 = v32 * *(float *)v18;
    float v145 = v32 * *(float *)(v18 + 16);
    float v146 = v32 * *(float *)(v18 + 8);
    float v143 = v32 * *(float *)(v18 + 28);
    *(float *)&unsigned int v36 = v143;
    float v144 = v32 * *(float *)(v18 + 20);
    LOWORD(v36) = *(_WORD *)(v18 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 150);
    float v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 152);
    float v41 = (float)v36;
    float v42 = *(float *)(v18 + 36);
    float v43 = *(float *)(v18 + 40);
    float v44 = *(float *)(v18 + 44);
    float v141 = *(float *)(v18 + 52) * 0.5;
    float v142 = *(float *)(v18 + 48) * 0.5;
    float v139 = *(float *)(v18 + 60) * 0.5;
    float v140 = *(float *)(v18 + 56) * 0.5;
    float v45 = *(float *)(v18 + 72);
    float v137 = *(float *)(v18 + 68) * 0.5;
    float v138 = *(float *)(v18 + 64) * 0.5;
    float v47 = *(float *)(v18 + 76);
    float v46 = *(float *)(v18 + 80);
    float v48 = *(float *)(v18 + 84);
    float v49 = *(float *)(v18 + 88);
    float v50 = *(float *)(v18 + 92);
    float v51 = *(float *)(v18 + 96);
    float v52 = *(float *)(v18 + 100);
    float v53 = *(float *)(v18 + 104);
    uint64_t v54 = v18 + 164;
    uint64_t v55 = v18 + 16548;
    unsigned int v56 = *(unsigned __int8 *)(v18 + 132);
    _CF = v56 >= 0x11;
    char v58 = 16 - v56;
    if (_CF) {
      char v59 = 0;
    }
    else {
      char v59 = v58;
    }
    unsigned int v60 = *(unsigned __int8 *)(v18 + 124);
    char v61 = 16 - v60;
    if (v60 >= 0x11) {
      char v61 = 0;
    }
    uint64_t v63 = *v16;
    uint64_t v62 = v16[1];
    uint64_t v64 = v62 + v28 * v17 + 2 * v15;
    if (!v62) {
      uint64_t v64 = 0;
    }
    uint64_t result = (void *)(v63 + v27 * v17 + 2 * v15);
    uint64_t v66 = *v19;
    uint64_t v65 = v19[1];
    uint64_t v67 = v65 + v23 * v13 + 2 * v12;
    if (!v65) {
      uint64_t v67 = 0;
    }
    uint64_t v68 = v66 + v22 * v13 + 2 * v12;
    char v69 = v61;
    char v70 = v59;
    do
    {
      if (v11)
      {
        unint64_t v71 = 0;
        float32x4_t v72 = (unsigned __int16 *)v68;
        float16x8_t v73 = result;
        do
        {
          float16x8_t v74 = (unsigned __int16 *)(v67 + 2 * v71);
          float v75 = (float)(v74[1] >> v69) - v34;
          float v76 = v146 * v75;
          float v77 = v35 * (float)((float)(*v72 >> v69) - v33);
          float v78 = (float)(v146 * v75) + v77;
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = (float)(v146 * v75) + v77;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = (float)(*v74 >> v69) - v34;
          float v81 = (float)(v144 * v75) + (float)(v80 * v145);
          float v82 = 8191.0;
          if ((float)(v77 + v81) <= 8191.0)
          {
            float v82 = v77 + v81;
            if ((float)(v77 + v81) < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v143 * v80;
          float v84 = v83 + v77;
          BOOL v85 = (float)(v83 + v77) <= 8191.0;
          float v86 = 8191.0;
          if (v85)
          {
            float v86 = v84;
            if (v84 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v35 * (float)((float)(v72[1] >> v69) - v33);
          float v88 = v76 + v87;
          BOOL v85 = (float)(v76 + v87) <= 8191.0;
          float v89 = 8191.0;
          if (v85)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v81 + v87;
          BOOL v85 = (float)(v81 + v87) <= 8191.0;
          float v91 = 8191.0;
          if (v85)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v83 + v87;
          BOOL v85 = (float)(v83 + v87) <= 8191.0;
          float v93 = 8191.0;
          if (v85)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H18 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S18, H18
          }
          _H24 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          float v109 = (float)((float)(v47 * _S5) + (float)(_S4 * v45)) + (float)(_S6 * v46);
          float v110 = (float)((float)(v49 * _S5) + (float)(_S4 * v48)) + (float)(_S6 * v50);
          _S6 = (float)((float)(v52 * _S5) + (float)(_S4 * v51)) + (float)(_S6 * v53);
          float v112 = (float)((float)(v47 * _S18) + (float)(_S7 * v45)) + (float)(_S24 * v46);
          float v113 = (float)((float)(v49 * _S18) + (float)(_S7 * v48)) + (float)(_S24 * v50);
          float v114 = (float)((float)(v52 * _S18) + (float)(_S7 * v51)) + (float)(_S24 * v53);
          LOWORD(_S4) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          float v121 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
          float v122 = v39;
          if (v121 <= v39)
          {
            float v122 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
            if (v121 < v37) {
              float v122 = v37;
            }
          }
          __asm
          {
            FCVT            S25, H7
            FCVT            S24, H24
            FCVT            S7, H26
          }
          float v126 = (float)((float)((float)(v43 * _S24) + (float)(v42 * _S25)) + (float)(v44 * _S7)) + v37;
          *float16x8_t v73 = llroundf(v122) << v70;
          float v127 = v39;
          if (v126 <= v39)
          {
            float v127 = (float)((float)((float)(v43 * _S24) + (float)(v42 * _S25)) + (float)(v44 * _S7)) + v37;
            if (v126 < v37) {
              float v127 = v37;
            }
          }
          v73[1] = llroundf(v127) << v70;
          float v128 = _S4 + _S25;
          float v129 = _S5 + _S24;
          float v130 = _S6 + _S7;
          float v131 = (float)((float)(v38 + (float)(v128 * v142)) + (float)(v129 * v141)) + (float)(v130 * v140);
          float v132 = v41;
          if (v131 <= v41)
          {
            float v132 = (float)((float)(v38 + (float)(v128 * v142)) + (float)(v129 * v141)) + (float)(v130 * v140);
            if (v131 < v40) {
              float v132 = v40;
            }
          }
          float16x8_t v133 = (_WORD *)(v64 + 2 * v71);
          float v134 = (float)((float)(v38 + (float)(v128 * v139)) + (float)(v129 * v138)) + (float)(v130 * v137);
          *float16x8_t v133 = llroundf(v132) << v70;
          float v135 = v41;
          if (v134 <= v41)
          {
            float v135 = v134;
            if (v134 < v40) {
              float v135 = v40;
            }
          }
          v133[1] = llroundf(v135) << v70;
          v71 += 2;
          v72 += 2;
          v73 += 2;
        }
        while (v11 > v71);
      }
      v68 += v22;
      v67 += v23;
      uint64_t result = (void *)((char *)result + v27);
      v64 += v28;
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      size_t v136 = 2 * v11;
      do
      {
        uint64_t result = memcpy(v31, v26, v136);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v31, 255, 2 * v11);
        }
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_xf422_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf422_rgb_xf422_neon_fp16_GCD(void *result, uint64_t a2, double _D0)
{
  uint64_t v7 = *(void *)((char *)result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    uint64_t v11 = 0;
    unint64_t v12 = *(void *)((char *)result + 20);
    uint64_t v13 = *(void *)((char *)result + 36);
    unint64_t v14 = v9 + *(void *)((char *)result + 44);
    unint64_t v15 = v10 - v9;
    uint64_t v16 = result[14];
    uint64_t v17 = (uint64_t *)result[16];
    unint64_t v18 = result[13] * a2 / v8 + result[15];
    uint64_t v19 = (float32x2_t *)result[19];
    uint64_t v21 = (uint64_t *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    size_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v20;
    uint64_t v24 = v20[1];
    uint64_t v25 = v20[2];
    uint64_t v140 = v21[2];
    unint64_t v26 = (char *)(v140 + v25 * v14 + 2 * v13);
    uint64_t v27 = *v22;
    uint64_t v28 = v22[1];
    uint64_t v29 = v22[2];
    uint64_t v139 = v17[2];
    uint64_t v30 = (char *)(v139 + v29 * v18 + 2 * v16);
    unsigned int v31 = v19[17].u16[2];
    unsigned int v32 = v19[17].u16[3];
    v33.i32[0] = v19[3].i32[1];
    unsigned int v34 = v19[18].u16[0];
    unsigned int v35 = v19[18].u16[1];
    unsigned int v36 = v19[18].u16[2];
    unsigned int v37 = v19[18].u16[3];
    unsigned int v38 = v19[19].u16[0];
    _S29 = v19[4].f32[1];
    LODWORD(_D0) = v19[5].i32[0];
    _S2 = v19[5].f32[1];
    v4.i32[0] = v19[6].i32[0];
    v42.i32[0] = v19[6].i32[1];
    v41.i32[0] = v19[7].i32[0];
    float v43 = (float)v31;
    float v44 = (float)v32;
    *(short float *)v5.i16 = (short float)v31;
    float v45 = (float)v19[17].u32[0] / (float)v19[16].u32[0];
    float v46 = (float)v34;
    float v47 = (float)v35;
    float v48 = (float)v36;
    _S16 = v45 * v19->f32[0];
    float v146 = (float)v37;
    float v50 = (float)v38;
    __asm { FCVT            H8, S16 }
    float16x8_t v56 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v5.f32, 0);
    short float v57 = -(short float)v32;
    v33.i32[1] = v19[1].i32[0];
    *(float32x2_t *)v5.f32 = vmul_n_f32(v33, v45);
    float16x8_t v58 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    *(float32x2_t *)v6.f32 = vmul_n_f32(v19[2], v45);
    float16x8_t v59 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v6), 0);
    float16x8_t v60 = vmulq_n_f16(v58, v57);
    float16x8_t v61 = vmulq_n_f16(v59, v57);
    __asm { FCVT            H7, S29 }
    short float v145 = _H7;
    v4.i32[1] = v19[7].i32[1];
    *(float32x2_t *)v3.f32 = vmul_f32(*(float32x2_t *)v4.f32, (float32x2_t)0x3F0000003F000000);
    *(double *)&v66.i64[1] = _D0;
    int32x4_t v63 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    v42.i32[1] = v19[8].i32[0];
    *(float32x2_t *)v4.f32 = vmul_f32(v42, (float32x2_t)0x3F0000003F000000);
    float v147 = *(float *)&_D0;
    __asm { FCVT            H9, S0 }
    short float v142 = _H9;
    float16x8_t v65 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    v41.i32[1] = v19[8].i32[1];
    *(float32x2_t *)v66.f32 = vmul_f32(v41, (float32x2_t)0x3F0000003F000000);
    int16x4_t v67 = (int16x4_t)vcvt_f16_f32(v66);
    int32x4_t v68 = vdupq_lane_s32((int32x2_t)v67, 0);
    *(short float *)v67.i16 = (short float)v34;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(v67, 0);
    *(short float *)v67.i16 = (short float)v35;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(v67, 0);
    *(short float *)v67.i16 = (short float)v36;
    int16x8_t v71 = vdupq_lane_s16(v67, 0);
    *(short float *)v67.i16 = (short float)v37;
    float16x8_t v72 = (float16x8_t)vdupq_lane_s16(v67, 0);
    *(short float *)v67.i16 = (short float)v38;
    float16x8_t v73 = (float16x8_t)vdupq_lane_s16(v67, 0);
    unsigned int v74 = v19[16].u8[4];
    if (v74 >= 0x11) {
      unsigned __int8 v75 = 0;
    }
    else {
      unsigned __int8 v75 = 16 - v74;
    }
    unsigned int v76 = v19[15].u8[4];
    unsigned __int8 v77 = 16 - v76;
    if (v76 >= 0x11) {
      unsigned __int8 v77 = 0;
    }
    uint64_t v79 = *v17;
    uint64_t v78 = v17[1];
    uint64_t v80 = v78 + v28 * v18 + 2 * v16;
    if (!v78) {
      uint64_t v80 = 0;
    }
    uint64_t v81 = v79 + v27 * v18 + 2 * v16;
    uint64_t v83 = *v21;
    uint64_t v82 = v21[1];
    uint64_t v84 = v82 + v24 * v14 + 2 * v13;
    if (!v82) {
      uint64_t v84 = 0;
    }
    uint64_t result = (void *)(v83 + v23 * v14 + 2 * v13);
    uint16x8_t v85 = (uint16x8_t)vdupq_n_s16(-v77);
    uint16x8_t v86 = (uint16x8_t)vdupq_n_s16(v75);
    __asm { FCVT            H1, S2 }
    uint64_t v88 = v5.i64[0];
    float v89 = (float)v37;
    uint64_t v90 = v6.i64[0];
    float v91 = _S29;
    float v159 = v4.f32[1];
    float16x8_t v157 = v59;
    float16x8_t v158 = v58;
    float16x8_t v155 = v61;
    float16x8_t v156 = v60;
    int32x4_t v153 = v68;
    int32x4_t v154 = v63;
    int16x8_t v151 = v71;
    float16x8_t v152 = v70;
    float16x8_t v149 = v73;
    float16x8_t v150 = v72;
    short float v148 = _H1;
    __int32 v143 = v4.i32[0];
    __int32 v144 = v3.i32[0];
    float v141 = _S29;
    do
    {
      if ((int)v12 < 8)
      {
        unint64_t v112 = 0;
        uint64_t v111 = (_WORD *)v80;
        float v95 = (uint16x8_t *)v81;
        float v110 = (unsigned __int16 *)v84;
        float16x8_t v94 = (uint16x8_t *)result;
      }
      else
      {
        uint64_t v92 = 0;
        int v93 = 0;
        float16x8_t v94 = (uint16x8_t *)result;
        float v95 = (uint16x8_t *)v81;
        float16x8_t v96 = (float16x8_t)v63;
        float16x8_t v97 = (float16x8_t)v68;
        float16x8_t v98 = (float16x8_t)v71;
        do
        {
          float16x8_t v99 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)(v84 + v92), v85));
          int8x16_t v100 = (int8x16_t)vmlaq_f16(v60, v58, v99);
          int16x8_t v101 = (int16x8_t)vmlaq_f16(v61, v59, v99);
          v99.i64[0] = vextq_s8(v100, v100, 8uLL).u64[0];
          *(int16x4_t *)v102.i8 = vuzp1_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
          *(int16x4_t *)v99.i8 = vuzp2_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
          v99.i64[1] = v73.i64[0];
          v102.i64[1] = v73.i64[0];
          float16x8_t v103 = (float16x8_t)vzip1q_s16(v102, v102);
          v102.i64[0] = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u64[0];
          *(float16x4_t *)v101.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v102.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v102.i8));
          v101.i64[1] = v73.i64[0];
          uint16x8_t v104 = *v94++;
          float16x8_t v105 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v104, v85)), v56);
          float16x8_t v106 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v99, (int16x8_t)v99), v105, _H8);
          float16x8_t v107 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v101, v101), v105, _H8);
          float16x8_t v108 = vmlaq_n_f16(v103, v105, _H8);
          *v95++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v69, v106, v145), v107, v142), v108, _H1), v69), v98)), v86);
          int16x8_t v109 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v106, (int16x8_t)v107), (float16x8_t)vuzp2q_s16((int16x8_t)v106, (int16x8_t)v107));
          *(uint16x8_t *)(v80 + v92) = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v70, v96, (float16x8_t)vzip1q_s16(v109, v109)), v65, (float16x8_t)vzip2q_s16(v109, v109)), v97, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v108, (int16x8_t)v108), (float16x8_t)vtrn2q_s16((int16x8_t)v108, (int16x8_t)v108))), v72), v73)), v86);
          v93 += 8;
          v92 += 16;
        }
        while (v93 < (int)v12 - 7);
        float v110 = (unsigned __int16 *)(v84 + v92);
        uint64_t v111 = (_WORD *)(v80 + v92);
        unint64_t v112 = v12 & 0xFFFFFFF8;
        v4.i32[0] = v143;
        v3.i32[0] = v144;
        float v89 = v146;
        float v91 = v141;
      }
      while (v12 > v112)
      {
        float16x8_t v113 = v56;
        float v114 = (float)(*v110 >> v77) - v44;
        float v115 = (float)(v110[1] >> v77) - v44;
        float v116 = *((float *)&v88 + 1) * v115;
        float v117 = (float)(*((float *)&v90 + 1) * v115) + (float)(v114 * *(float *)&v90);
        float v118 = *(float *)&v88 * v114;
        float v119 = _S16 * (float)((float)(v94->u16[0] >> v77) - v43);
        float v120 = (float)(*((float *)&v88 + 1) * v115) + v119;
        float v121 = v119 + v117;
        float v122 = v118 + v119;
        float v123 = (float)((float)((float)(v147 * (float)(v119 + v117)) + (float)(v91 * v120))
                     + (float)(_S2 * (float)(v118 + v119)))
             + v46;
        float v124 = v48;
        if (v123 <= v48)
        {
          float v124 = v123;
          if (v123 < v46) {
            float v124 = v46;
          }
        }
        float v125 = _S16 * (float)((float)(v94->u16[1] >> v77) - v43);
        float v126 = v116 + v125;
        float v127 = v117 + v125;
        float v128 = v118 + v125;
        float v129 = (float)((float)((float)(v147 * v127) + (float)(v91 * v126)) + (float)(_S2 * (float)(v118 + v125))) + v46;
        v95->i16[0] = llroundf(v124) << v75;
        float v130 = v48;
        if (v129 <= v48)
        {
          float v130 = v129;
          if (v129 < v46) {
            float v130 = v46;
          }
        }
        v95->i16[1] = llroundf(v130) << v75;
        float v131 = v120 + v126;
        float v132 = v121 + v127;
        float v133 = v122 + v128;
        float v134 = (float)((float)(v47 + (float)((float)(v120 + v126) * v3.f32[0])) + (float)(v132 * v4.f32[0]))
             + (float)(v133 * v66.f32[0]);
        float v135 = v50;
        if (v134 <= v50)
        {
          float v135 = v134;
          if (v134 < v89) {
            float v135 = v89;
          }
        }
        float v136 = (float)((float)(v47 + (float)(v131 * v3.f32[1])) + (float)(v132 * v159)) + (float)(v133 * v66.f32[1]);
        *uint64_t v111 = llroundf(v135) << v75;
        float v137 = v50;
        float16x8_t v56 = v113;
        if (v136 <= v50)
        {
          float v137 = v136;
          if (v136 < v89) {
            float v137 = v89;
          }
        }
        v112 += 2;
        v110 += 2;
        v111[1] = llroundf(v137) << v75;
        float16x8_t v94 = (uint16x8_t *)((char *)v94 + 4);
        float v95 = (uint16x8_t *)((char *)v95 + 4);
        v111 += 2;
      }
      uint64_t result = (void *)((char *)result + v23);
      v84 += v24;
      v81 += v27;
      v80 += v28;
      ++v11;
      float16x8_t v59 = v157;
      float16x8_t v58 = v158;
      float16x8_t v61 = v155;
      float16x8_t v60 = v156;
      int32x4_t v68 = v153;
      int32x4_t v63 = v154;
      int16x8_t v71 = v151;
      float16x8_t v70 = v152;
      float16x8_t v73 = v149;
      float16x8_t v72 = v150;
      _H1 = v148;
    }
    while (v11 != v15);
    if (v140 && v139)
    {
      size_t v138 = 2 * v12;
      do
      {
        uint64_t result = memcpy(v30, v26, v138);
        v26 += v25;
        v30 += v29;
        --v15;
      }
      while (v15);
    }
    else if (v139)
    {
      do
      {
        if (v12) {
          uint64_t result = memset(v30, 255, 2 * v12);
        }
        v30 += v29;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_xf422_GCD);
  return 0;
}

void *vt_Copy_xf422_rgb_xf422_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v9 = *(void *)((char *)result + 28);
  unint64_t v10 = *(unsigned __int8 *)result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    unint64_t v14 = *(void *)((char *)result + 20);
    uint64_t v15 = *(void *)((char *)result + 36);
    unint64_t v16 = v11 + *(void *)((char *)result + 44);
    unint64_t v17 = v12 - v11;
    uint64_t v18 = result[14];
    uint64_t v19 = (uint64_t *)result[16];
    unint64_t v20 = result[13] * a2 / v10 + result[15];
    uint64_t v21 = result[19];
    uint64_t v23 = (uint64_t *)result[7];
    size_t v22 = (uint64_t *)result[8];
    uint64_t v24 = (uint64_t *)result[17];
    uint64_t v25 = *v22;
    uint64_t v26 = v22[1];
    uint64_t v27 = v22[2];
    uint64_t v28 = v23[2];
    uint64_t v29 = (char *)(v28 + v27 * v16 + 2 * v15);
    uint64_t v30 = *v24;
    uint64_t v31 = v24[1];
    uint64_t v32 = v24[2];
    uint64_t v33 = v19[2];
    uint64_t v34 = (char *)(v33 + v32 * v20 + 2 * v18);
    *(float *)&unsigned int v35 = (float)*(unsigned int *)(v21 + 136);
    LOWORD(a5) = *(_WORD *)(v21 + 140);
    float v36 = *(float *)&v35 / (float)*(unsigned int *)(v21 + 128);
    float v37 = (float)LODWORD(a5);
    LOWORD(v35) = *(_WORD *)(v21 + 142);
    float v38 = (float)v35;
    float v39 = v36 * *(float *)v21;
    float v40 = v36 * *(float *)(v21 + 8);
    float v41 = v36 * *(float *)(v21 + 16);
    float v42 = v36 * *(float *)(v21 + 20);
    float v43 = *(float *)(v21 + 28);
    float v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v21 + 144);
    float v45 = (float)LODWORD(v43);
    LOWORD(v5) = *(_WORD *)(v21 + 146);
    float v46 = (float)v5;
    LOWORD(v6) = *(_WORD *)(v21 + 148);
    float v47 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v21 + 150);
    float v48 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v21 + 152);
    float v49 = (float)v8;
    float v50 = *(float *)(v21 + 36);
    float v51 = *(float *)(v21 + 40);
    float v52 = *(float *)(v21 + 44);
    float v53 = *(float *)(v21 + 48) * 0.5;
    float v54 = *(float *)(v21 + 52) * 0.5;
    float v55 = *(float *)(v21 + 56) * 0.5;
    float v56 = *(float *)(v21 + 60) * 0.5;
    float v57 = *(float *)(v21 + 64) * 0.5;
    float v58 = *(float *)(v21 + 68) * 0.5;
    unsigned int v59 = *(unsigned __int8 *)(v21 + 132);
    BOOL v60 = v59 >= 0x11;
    char v61 = 16 - v59;
    if (v60) {
      char v62 = 0;
    }
    else {
      char v62 = v61;
    }
    unsigned int v63 = *(unsigned __int8 *)(v21 + 124);
    char v64 = 16 - v63;
    if (v63 >= 0x11) {
      char v64 = 0;
    }
    uint64_t v66 = *v19;
    uint64_t v65 = v19[1];
    uint64_t v67 = v65 + v31 * v20 + 2 * v18;
    if (!v65) {
      uint64_t v67 = 0;
    }
    uint64_t v68 = v66 + v30 * v20 + 2 * v18;
    uint64_t v70 = *v23;
    uint64_t v69 = v23[1];
    uint64_t v71 = v69 + v26 * v16 + 2 * v15;
    if (!v69) {
      uint64_t v71 = 0;
    }
    uint64_t result = (void *)(v70 + v25 * v16 + 2 * v15);
    char v72 = v64;
    char v73 = v62;
    do
    {
      if (v14)
      {
        unint64_t v74 = 0;
        unsigned __int8 v75 = (unsigned __int16 *)result;
        unsigned int v76 = (_WORD *)v68;
        do
        {
          unsigned __int8 v77 = (unsigned __int16 *)(v71 + 2 * v74);
          float v78 = (float)(*v77 >> v72) - v38;
          float v79 = (float)(v77[1] >> v72) - v38;
          float v80 = v40 * v79;
          float v81 = (float)(v42 * v79) + (float)(v78 * v41);
          float v82 = v44 * v78;
          float v83 = v39 * (float)((float)(*v75 >> v72) - v37);
          float v84 = (float)(v40 * v79) + v83;
          float v85 = v83 + v81;
          float v86 = v82 + v83;
          float v87 = (float)((float)((float)(v51 * v85) + (float)(v50 * v84)) + (float)(v52 * v86)) + v45;
          float v88 = v47;
          if (v87 <= v47)
          {
            float v88 = (float)((float)((float)(v51 * v85) + (float)(v50 * v84)) + (float)(v52 * v86)) + v45;
            if (v87 < v45) {
              float v88 = v45;
            }
          }
          float v89 = v39 * (float)((float)(v75[1] >> v72) - v37);
          float v90 = v80 + v89;
          float v91 = v81 + v89;
          float v92 = v82 + v89;
          float v93 = (float)((float)((float)(v51 * v91) + (float)(v50 * v90)) + (float)(v52 * (float)(v82 + v89))) + v45;
          *unsigned int v76 = llroundf(v88) << v73;
          float v94 = v47;
          if (v93 <= v47)
          {
            float v94 = v93;
            if (v93 < v45) {
              float v94 = v45;
            }
          }
          v76[1] = llroundf(v94) << v73;
          float v95 = v84 + v90;
          float v96 = v85 + v91;
          float v97 = v86 + v92;
          float v98 = (float)((float)(v46 + (float)(v95 * v53)) + (float)(v96 * v54)) + (float)(v97 * v55);
          float v99 = v49;
          if (v98 <= v49)
          {
            float v99 = (float)((float)(v46 + (float)(v95 * v53)) + (float)(v96 * v54)) + (float)(v97 * v55);
            if (v98 < v48) {
              float v99 = v48;
            }
          }
          int8x16_t v100 = (_WORD *)(v67 + 2 * v74);
          float v101 = (float)((float)(v46 + (float)(v95 * v56)) + (float)(v96 * v57)) + (float)(v97 * v58);
          *int8x16_t v100 = llroundf(v99) << v73;
          float v102 = v49;
          if (v101 <= v49)
          {
            float v102 = v101;
            if (v101 < v48) {
              float v102 = v48;
            }
          }
          v100[1] = llroundf(v102) << v73;
          v74 += 2;
          v75 += 2;
          v76 += 2;
        }
        while (v14 > v74);
      }
      uint64_t result = (void *)((char *)result + v25);
      v71 += v26;
      v68 += v30;
      v67 += v31;
      ++v13;
    }
    while (v13 != v17);
    if (v28 && v33)
    {
      size_t v103 = 2 * v14;
      do
      {
        uint64_t result = memcpy(v34, v29, v103);
        v29 += v27;
        v34 += v32;
        --v17;
      }
      while (v17);
    }
    else if (v33)
    {
      do
      {
        if (v14) {
          uint64_t result = memset(v34, 255, 2 * v14);
        }
        v34 += v32;
        --v17;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Tone_Mat_TRC_v216_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  unint64_t v10 = result[13] * a2 / v6;
  uint64_t v11 = (void *)result[16];
  unint64_t v12 = v10 + result[15];
  uint64_t v13 = (uint64_t *)result[17];
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (char *)(v15 + v14 * v12 + 2 * v9);
  unint64_t v17 = v8 / v6;
  if (v15) {
    uint64_t v18 = v15 + v14 * v12 + 2 * v9;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17 != v7)
  {
    uint64_t v19 = 0;
    unint64_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    unint64_t v22 = v7 + *(void *)((char *)result + 44);
    unint64_t v23 = v17 - v7;
    uint64_t v24 = result[19];
    uint64_t v25 = (void *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = (char *)(v30 + v29 * v22 + 2 * v21);
    uint64_t v32 = *v13;
    LOWORD(a4) = *(_WORD *)(v24 + 140);
    LOWORD(a5) = *(_WORD *)(v24 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v34 = (float)LODWORD(a5);
    float v170 = v33 * *(float *)v24;
    float v171 = (float)LODWORD(a4);
    float v168 = v33 * *(float *)(v24 + 16);
    float v169 = v33 * *(float *)(v24 + 8);
    float v35 = v33 * *(float *)(v24 + 20);
    *(float *)&unsigned int v36 = v33 * *(float *)(v24 + 28);
    float v166 = *(float *)&v36;
    float v167 = v35;
    LOWORD(v36) = *(_WORD *)(v24 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 150);
    float v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 152);
    float v41 = (float)v36;
    float v42 = *(float *)(v24 + 36);
    float v43 = *(float *)(v24 + 40);
    float v44 = *(float *)(v24 + 44);
    float v164 = *(float *)(v24 + 48) * 0.5;
    float v165 = v38;
    float v162 = *(float *)(v24 + 56) * 0.5;
    float v163 = *(float *)(v24 + 52) * 0.5;
    float v160 = *(float *)(v24 + 64) * 0.5;
    float v161 = *(float *)(v24 + 60) * 0.5;
    float v45 = *(float *)(v24 + 72);
    float v159 = *(float *)(v24 + 68) * 0.5;
    float v47 = *(float *)(v24 + 76);
    float v46 = *(float *)(v24 + 80);
    float v48 = *(float *)(v24 + 84);
    float v49 = *(float *)(v24 + 88);
    float v50 = *(float *)(v24 + 92);
    float v51 = *(float *)(v24 + 96);
    float v52 = *(float *)(v24 + 100);
    float v53 = *(float *)(v24 + 104);
    uint64_t v54 = v24 + 164;
    unsigned int v55 = *(unsigned __int8 *)(v24 + 124);
    char v56 = 16 - v55;
    _CF = v55 >= 0x11;
    uint64_t v58 = v24 + 16548;
    uint64_t v59 = *v11 + v32 * v12;
    uint64_t v60 = v24 + 32932;
    if (_CF) {
      char v61 = 0;
    }
    else {
      char v61 = v56;
    }
    char v62 = (_WORD *)(v59 + 2 * v9);
    uint64_t v63 = v25[1];
    _ZF = v63 == 0;
    uint64_t result = (void *)(v63 + v28 * v22 + 2 * v21);
    if (_ZF) {
      uint64_t result = 0;
    }
    uint64_t v65 = *v25 + v27 * v22 + 2 * v21;
    char v66 = v61;
    float v68 = *(float *)(v24 + 108);
    float v67 = *(float *)(v24 + 112);
    float v69 = *(float *)(v24 + 116);
    float v70 = *(float *)(v24 + 120);
    do
    {
      if (v20)
      {
        unint64_t v71 = 0;
        char v72 = (unsigned __int16 *)v65;
        char v73 = (_DWORD *)v18;
        unint64_t v74 = v62;
        do
        {
          unsigned __int8 v75 = (unsigned __int16 *)result + v71;
          float v76 = (float)(v75[1] >> v66) - v34;
          float v77 = v169 * v76;
          float v78 = v170 * (float)((float)(*v72 >> v66) - v171);
          float v79 = (float)(v169 * v76) + v78;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = (float)(v169 * v76) + v78;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v34;
          float v82 = (float)(*v75 >> v66) - v34;
          float v83 = (float)(v167 * v76) + (float)(v82 * v168);
          float v84 = 8191.0;
          if ((float)(v78 + v83) <= 8191.0)
          {
            float v84 = v78 + v83;
            if ((float)(v78 + v83) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v166 * v82;
          float v86 = (float)(v166 * v82) + v78;
          float v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v170 * (float)((float)(v72[1] >> v66) - v171);
          float v89 = v77 + v88;
          BOOL v90 = (float)(v77 + v88) <= 8191.0;
          float v91 = 8191.0;
          if (v90)
          {
            float v91 = v89;
            if (v89 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v83 + v88;
          BOOL v90 = (float)(v83 + v88) <= 8191.0;
          float v93 = 8191.0;
          if (v90)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v85 + v88;
          BOOL v90 = (float)(v85 + v88) <= 8191.0;
          float v95 = 8191.0;
          if (v90)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H1 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          float v107 = (float)((float)((float)(v67 * _S25) + (float)(v68 * _S24)) + (float)(v69 * _S26))
               + (float)(v70 * fmaxf(_S24, fmaxf(_S25, _S26)));
          float v108 = 8191.0;
          if (v107 <= 8191.0)
          {
            float v108 = v107;
            if (v107 < 0.0) {
              float v108 = 0.0;
            }
          }
          __asm
          {
            FCVT            S28, H1
            FCVT            S30, H27
            FCVT            S1, H2
          }
          _H0 = *(_WORD *)(v58 + 2 * llroundf(v108));
          __asm { FCVT            S0, H0 }
          float v114 = _S24 * _S0;
          float v115 = _S25 * _S0;
          float v116 = _S26 * _S0;
          float v117 = (float)((float)((float)(v67 * _S30) + (float)(v68 * _S28)) + (float)(v69 * _S1))
               + (float)(v70 * fmaxf(_S28, fmaxf(_S30, _S1)));
          float v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            float v118 = v117;
            if (v117 < 0.0) {
              float v118 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v58 + 2 * llroundf(v118));
          __asm { FCVT            S0, H0 }
          float v121 = _S28 * _S0;
          float v122 = _S30 * _S0;
          float v123 = _S1 * _S0;
          _S1 = (float)((float)(v47 * v115) + (float)(v114 * v45)) + (float)(v116 * v46);
          float v125 = (float)((float)(v49 * v115) + (float)(v114 * v48)) + (float)(v116 * v50);
          _S24 = (float)((float)(v52 * v115) + (float)(v114 * v51)) + (float)(v116 * v53);
          float v127 = (float)(v47 * v122) + (float)(v121 * v45);
          float v128 = (float)(v49 * v122) + (float)(v121 * v48);
          _S2 = (float)(v52 * v122) + (float)(v121 * v51);
          _S25 = v127 + (float)(v123 * v46);
          float v131 = v128 + (float)(v123 * v50);
          LOWORD(_S1) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          float v132 = _S2 + (float)(v123 * v53);
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          LOWORD(_S24) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          LOWORD(_S25) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          unsigned int v138 = llroundf(fminf(fmaxf(v132, 0.0), 8191.0));
          float v139 = (float)(v43 * _S2) + (float)(v42 * _S1);
          _S1 = _S1 + _S24;
          float v141 = _S2 + _S25;
          float v142 = (float)(v165 + (float)(_S1 * v164)) + (float)(v141 * v163);
          float v143 = (float)(v165 + (float)(_S1 * v161)) + (float)(v141 * v160);
          LOWORD(_S1) = *(_WORD *)(v60 + 2 * v138);
          __asm { FCVT            S1, H1 }
          float v145 = v139 + (float)(v44 * _S27);
          float v146 = _S27 + _S1;
          float v147 = v142 + (float)(v146 * v162);
          float v148 = v143 + (float)(v146 * v159);
          if (v147 < v37) {
            float v149 = v37;
          }
          else {
            float v149 = v147;
          }
          float v150 = v145 + v37;
          if (v147 <= v39) {
            float v151 = v149;
          }
          else {
            float v151 = v39;
          }
          __int16 v152 = llroundf(v151);
          if (v150 < v40) {
            float v153 = v40;
          }
          else {
            float v153 = v150;
          }
          *unint64_t v74 = v152;
          if (v150 <= v41) {
            float v154 = v153;
          }
          else {
            float v154 = v41;
          }
          v74[1] = llroundf(v154);
          float v155 = v39;
          if (v148 <= v39)
          {
            float v155 = v148;
            if (v148 < v37) {
              float v155 = v37;
            }
          }
          float v156 = (float)((float)((float)(v43 * _S25) + (float)(v42 * _S24)) + (float)(v44 * _S1)) + v37;
          v74[2] = llroundf(v155);
          float v157 = v41;
          if (v156 <= v41)
          {
            float v157 = v156;
            if (v156 < v40) {
              float v157 = v40;
            }
          }
          v74[3] = llroundf(v157);
          float v34 = v81;
          if (v73) {
            *v73++ = 0;
          }
          v71 += 2;
          v72 += 2;
          v74 += 4;
        }
        while (v20 > v71);
      }
      v65 += v27;
      uint64_t result = (void *)((char *)result + v28);
      char v62 = (_WORD *)((char *)v62 + v32);
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      size_t v158 = 2 * v20;
      do
      {
        uint64_t result = memcpy(v16, v31, v158);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          uint64_t result = memset(v16, 255, 2 * v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_v216_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Mat_TRC_v216_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = v6 + v6 * a2;
  uint64_t v10 = result[14];
  unint64_t v11 = result[13] * a2 / v7;
  uint64_t v12 = (void *)result[16];
  unint64_t v13 = v11 + result[15];
  uint64_t v14 = (uint64_t *)result[17];
  uint64_t v15 = v14[1];
  uint64_t v16 = v12[1];
  uint64_t v17 = (char *)(v16 + v15 * v13 + 2 * v10);
  unint64_t v18 = v9 / v7;
  if (v16) {
    uint64_t v19 = v16 + v15 * v13 + 2 * v10;
  }
  else {
    uint64_t v19 = 0;
  }
  if (v18 != v8)
  {
    uint64_t v20 = 0;
    unint64_t v21 = *(void *)((char *)result + 20);
    uint64_t v22 = *(void *)((char *)result + 36);
    unint64_t v23 = v8 + *(void *)((char *)result + 44);
    unint64_t v24 = v18 - v8;
    uint64_t v25 = result[19];
    uint64_t v26 = (void *)result[7];
    uint64_t v27 = (uint64_t *)result[8];
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    uint64_t v30 = v27[2];
    uint64_t v31 = v26[2];
    uint64_t v32 = (char *)(v31 + v30 * v23 + 2 * v22);
    uint64_t v33 = *v14;
    LOWORD(a5) = *(_WORD *)(v25 + 140);
    LOWORD(a6) = *(_WORD *)(v25 + 142);
    float v34 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    float v35 = (float)LODWORD(a5);
    float v36 = (float)LODWORD(a6);
    float v37 = v34 * *(float *)v25;
    float v146 = v34 * *(float *)(v25 + 16);
    float v147 = v34 * *(float *)(v25 + 8);
    float v144 = v34 * *(float *)(v25 + 28);
    *(float *)&unsigned int v38 = v144;
    float v145 = v34 * *(float *)(v25 + 20);
    LOWORD(v38) = *(_WORD *)(v25 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 150);
    float v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v25 + 152);
    float v43 = (float)v38;
    float v44 = *(float *)(v25 + 36);
    float v45 = *(float *)(v25 + 40);
    float v46 = *(float *)(v25 + 44);
    float v142 = *(float *)(v25 + 52) * 0.5;
    float v143 = *(float *)(v25 + 48) * 0.5;
    float v140 = *(float *)(v25 + 60) * 0.5;
    float v141 = *(float *)(v25 + 56) * 0.5;
    float v47 = *(float *)(v25 + 64) * 0.5;
    float v48 = *(float *)(v25 + 72);
    float v49 = *(float *)(v25 + 68) * 0.5;
    float v51 = *(float *)(v25 + 76);
    float v50 = *(float *)(v25 + 80);
    float v52 = *(float *)(v25 + 84);
    float v53 = *(float *)(v25 + 88);
    float v54 = *(float *)(v25 + 92);
    float v55 = *(float *)(v25 + 96);
    float v56 = *(float *)(v25 + 100);
    float v57 = *(float *)(v25 + 104);
    unsigned int v58 = *(unsigned __int8 *)(v25 + 124);
    char v59 = 16 - v58;
    _CF = v58 >= 0x11;
    uint64_t v61 = v25 + 16548;
    uint64_t v62 = v25 + 164;
    if (_CF) {
      char v63 = 0;
    }
    else {
      char v63 = v59;
    }
    uint64_t v64 = *v12 + v33 * v13 + 2 * v10;
    uint64_t v65 = v26[1];
    if (v65) {
      uint64_t v66 = v65 + v29 * v23 + 2 * v22;
    }
    else {
      uint64_t v66 = 0;
    }
    uint64_t result = (void *)(*v26 + v28 * v23 + 2 * v22);
    char v67 = v63;
    do
    {
      if (v21)
      {
        unint64_t v68 = 0;
        float v69 = (unsigned __int16 *)result;
        float v70 = (_DWORD *)v19;
        unint64_t v71 = (_WORD *)v64;
        do
        {
          char v72 = (unsigned __int16 *)(v66 + 2 * v68);
          float v73 = (float)(v72[1] >> v67) - v36;
          float v74 = v147 * v73;
          float v75 = v37 * (float)((float)(*v69 >> v67) - v35);
          float v76 = (float)(v147 * v73) + v75;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = (float)(v147 * v73) + v75;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = (float)(*v72 >> v67) - v36;
          float v79 = (float)(v145 * v73) + (float)(v78 * v146);
          float v80 = 8191.0;
          if ((float)(v75 + v79) <= 8191.0)
          {
            float v80 = v75 + v79;
            if ((float)(v75 + v79) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v144 * v78;
          float v82 = v81 + v75;
          BOOL v83 = (float)(v81 + v75) <= 8191.0;
          float v84 = 8191.0;
          if (v83)
          {
            float v84 = v82;
            if (v82 < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v37 * (float)((float)(v69[1] >> v67) - v35);
          float v86 = v74 + v85;
          float v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v79 + v85;
          BOOL v83 = (float)(v79 + v85) <= 8191.0;
          float v89 = 8191.0;
          if (v83)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v81 + v85;
          BOOL v83 = (float)(v81 + v85) <= 8191.0;
          float v91 = 8191.0;
          if (v83)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          unsigned int v105 = llroundf(fminf(fmaxf(v91, 0.0), 8191.0));
          _S25 = (float)((float)(v51 * _S5) + (float)(_S4 * v48)) + (float)(_S6 * v50);
          float v107 = (float)((float)(v53 * _S5) + (float)(_S4 * v52)) + (float)(_S6 * v54);
          _S4 = (float)((float)(v56 * _S5) + (float)(_S4 * v55)) + (float)(_S6 * v57);
          float v109 = (float)(v51 * _S24) + (float)(_S7 * v48);
          float v110 = (float)(v53 * _S24) + (float)(_S7 * v52);
          float v111 = (float)(v56 * _S24) + (float)(_S7 * v55);
          LOWORD(_S24) = *(_WORD *)(v62 + 2 * v105);
          __asm { FCVT            S24, H24 }
          _S5 = v109 + (float)(_S24 * v50);
          float v114 = v110 + (float)(_S24 * v54);
          LOWORD(_S25) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          float v115 = v111 + (float)(_S24 * v57);
          __asm { FCVT            S24, H25 }
          LOWORD(_S25) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          LOWORD(_S4) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S26, H4 }
          LOWORD(_S4) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          unsigned int v121 = llroundf(fminf(fmaxf(v115, 0.0), 8191.0));
          float v122 = (float)(v45 * _S25) + (float)(v44 * _S24);
          _S6 = _S24 + _S4;
          float v124 = _S25 + _S5;
          float v125 = (float)(v40 + (float)((float)(_S24 + _S4) * v143)) + (float)(v124 * v142);
          float v126 = (float)(v40 + (float)(_S6 * v140)) + (float)(v124 * v47);
          LOWORD(_S6) = *(_WORD *)(v61 + 2 * v121);
          __asm { FCVT            S6, H6 }
          float v128 = v122 + (float)(v46 * _S26);
          float v129 = v125 + (float)((float)(_S26 + _S6) * v141);
          float v130 = v126 + (float)((float)(_S26 + _S6) * v49);
          if (v129 < v39) {
            float v131 = v39;
          }
          else {
            float v131 = v129;
          }
          BOOL v83 = v129 <= v41;
          float v132 = v128 + v39;
          if (!v83) {
            float v131 = v41;
          }
          __int16 v133 = llroundf(v131);
          if (v132 < v42) {
            float v134 = v42;
          }
          else {
            float v134 = v128 + v39;
          }
          *unint64_t v71 = v133;
          if (v132 <= v43) {
            float v135 = v134;
          }
          else {
            float v135 = v43;
          }
          v71[1] = llroundf(v135);
          float v136 = v41;
          if (v130 <= v41)
          {
            float v136 = v130;
            if (v130 < v39) {
              float v136 = v39;
            }
          }
          float v137 = (float)((float)((float)(v45 * _S5) + (float)(v44 * _S4)) + (float)(v46 * _S6)) + v39;
          v71[2] = llroundf(v136);
          float v138 = v43;
          if (v137 <= v43)
          {
            float v138 = v137;
            if (v137 < v42) {
              float v138 = v42;
            }
          }
          v71[3] = llroundf(v138);
          if (v70) {
            *v70++ = 0;
          }
          v68 += 2;
          v69 += 2;
          v71 += 4;
        }
        while (v21 > v68);
      }
      uint64_t result = (void *)((char *)result + v28);
      v66 += v29;
      v64 += v33;
      ++v20;
    }
    while (v20 != v24);
    if (v31 && v19)
    {
      size_t v139 = 2 * v21;
      do
      {
        uint64_t result = memcpy(v17, v32, v139);
        v32 += v30;
        v17 += v15;
        --v24;
      }
      while (v24);
    }
    else if (v19)
    {
      do
      {
        if (v21) {
          uint64_t result = memset(v17, 255, 2 * v21);
        }
        v17 += v15;
        --v24;
      }
      while (v24);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_v216_GCD);
  return 0;
}

unint64_t vt_Copy_xf422_rgb_v216_GCD(unint64_t result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v12 = *(void *)(result + 28);
  unint64_t v13 = *(unsigned __int8 *)result;
  unint64_t v14 = v12 * a2 / v13;
  uint64_t v15 = *(void *)(result + 112);
  uint64_t v16 = *(void **)(result + 128);
  unint64_t v17 = *(void *)(result + 104) * a2 / v13 + *(void *)(result + 120);
  uint64_t v18 = *(uint64_t **)(result + 136);
  uint64_t v19 = v18[1];
  uint64_t v20 = v16[1];
  uint64_t v21 = (char *)(v20 + v19 * v17 + 2 * v15);
  unint64_t v22 = (v12 + v12 * a2) / v13;
  if (v20) {
    uint64_t v23 = v20 + v19 * v17 + 2 * v15;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v22 != v14)
  {
    uint64_t v24 = 0;
    unint64_t v25 = *(void *)(result + 20);
    uint64_t v26 = *(void *)(result + 36);
    unint64_t v27 = v14 + *(void *)(result + 44);
    unint64_t v28 = v22 - v14;
    uint64_t v29 = *(void *)(result + 152);
    uint64_t v30 = *(void **)(result + 56);
    uint64_t v31 = *(uint64_t **)(result + 64);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    uint64_t v34 = v31[2];
    uint64_t v35 = v30[2];
    LOWORD(a6) = *(_WORD *)(v29 + 140);
    LOWORD(a7) = *(_WORD *)(v29 + 142);
    float v36 = (float)*(unsigned int *)(v29 + 136) / (float)*(unsigned int *)(v29 + 128);
    LOWORD(v7) = *(_WORD *)(v29 + 144);
    LOWORD(v8) = *(_WORD *)(v29 + 146);
    LOWORD(v9) = *(_WORD *)(v29 + 148);
    LOWORD(v10) = *(_WORD *)(v29 + 150);
    LOWORD(v11) = *(_WORD *)(v29 + 152);
    float v37 = *(float *)(v29 + 36);
    float v38 = *(float *)(v29 + 40);
    float v39 = *(float *)(v29 + 44);
    unsigned int v40 = *(unsigned __int8 *)(v29 + 124);
    float v41 = (char *)(v35 + v34 * v27 + 2 * v26);
    uint64_t v42 = *v18;
    float v43 = (float)LODWORD(a6);
    float v44 = (float)LODWORD(a7);
    float v45 = v36 * *(float *)v29;
    float v46 = v36 * *(float *)(v29 + 8);
    float v47 = v36 * *(float *)(v29 + 16);
    float v48 = v36 * *(float *)(v29 + 20);
    float v49 = v36 * *(float *)(v29 + 28);
    float v50 = (float)v7;
    float v51 = (float)v8;
    float v52 = (float)v9;
    float v53 = (float)v10;
    float v54 = (float)v11;
    float v55 = *(float *)(v29 + 48) * 0.5;
    float v56 = *(float *)(v29 + 52) * 0.5;
    float v57 = *(float *)(v29 + 56) * 0.5;
    float v58 = *(float *)(v29 + 60) * 0.5;
    float v59 = *(float *)(v29 + 64) * 0.5;
    float v60 = *(float *)(v29 + 68) * 0.5;
    if (v40 >= 0x11) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 16 - v40;
    }
    uint64_t v61 = *v16 + v42 * v17 + 2 * v15;
    uint64_t v62 = v30[1];
    if (v62) {
      uint64_t v63 = v62 + v33 * v27 + 2 * v26;
    }
    else {
      uint64_t v63 = 0;
    }
    uint64_t v64 = *v30 + v32 * v27 + 2 * v26;
    char v65 = result;
    do
    {
      if (v25)
      {
        uint64_t result = 0;
        uint64_t v66 = (unsigned __int16 *)v64;
        char v67 = (_WORD *)v61;
        unint64_t v68 = (_DWORD *)v23;
        do
        {
          float v69 = (unsigned __int16 *)(v63 + 2 * result);
          float v70 = (float)(*v69 >> v65) - v44;
          float v71 = (float)(v69[1] >> v65) - v44;
          float v72 = v46 * v71;
          float v73 = (float)(v48 * v71) + (float)(v70 * v47);
          float v74 = v49 * v70;
          float v75 = v45 * (float)((float)(*v66 >> v65) - v43);
          float v76 = v45 * (float)((float)(v66[1] >> v65) - v43);
          float v77 = v72 + v75;
          float v78 = v75 + v73;
          float v79 = v74 + v75;
          float v80 = v72 + v76;
          float v81 = v73 + v76;
          float v82 = v74 + v76;
          float v83 = (float)((float)((float)(v38 * v78) + (float)(v37 * v77)) + (float)(v39 * v79)) + v50;
          float v84 = (float)((float)((float)(v38 * v81) + (float)(v37 * v80)) + (float)(v39 * v82)) + v50;
          float v85 = v77 + v80;
          float v86 = v78 + v81;
          float v87 = (float)(v51 + (float)(v85 * v55)) + (float)(v86 * v56);
          float v88 = v79 + v82;
          float v89 = v87 + (float)(v88 * v57);
          float v90 = (float)(v51 + (float)(v85 * v58)) + (float)(v86 * v59);
          if (v89 < v50) {
            float v91 = v50;
          }
          else {
            float v91 = v87 + (float)(v88 * v57);
          }
          if (v89 > v52) {
            float v91 = v52;
          }
          float v92 = v90 + (float)(v88 * v60);
          *char v67 = llroundf(v91);
          if (v83 < v53) {
            float v93 = v53;
          }
          else {
            float v93 = v83;
          }
          if (v83 > v54) {
            float v93 = v54;
          }
          v67[1] = llroundf(v93);
          if (v92 < v50) {
            float v94 = v50;
          }
          else {
            float v94 = v92;
          }
          if (v92 <= v52) {
            float v95 = v94;
          }
          else {
            float v95 = v52;
          }
          v67[2] = llroundf(v95);
          float v96 = v54;
          if (v84 <= v54)
          {
            float v96 = v84;
            if (v84 < v53) {
              float v96 = v53;
            }
          }
          v67[3] = llroundf(v96);
          if (v68) {
            *v68++ = 0;
          }
          result += 2;
          v66 += 2;
          v67 += 4;
        }
        while (v25 > result);
      }
      v64 += v32;
      v63 += v33;
      v61 += v42;
      ++v24;
    }
    while (v24 != v28);
    if (v35 && v23)
    {
      size_t v97 = 2 * v25;
      do
      {
        uint64_t result = (unint64_t)memcpy(v21, v41, v97);
        v41 += v34;
        v21 += v19;
        --v28;
      }
      while (v28);
    }
    else if (v23)
    {
      do
      {
        if (v25) {
          uint64_t result = (unint64_t)memset(v21, 255, 2 * v25);
        }
        v21 += v19;
        --v28;
      }
      while (v28);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_444vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_xf422_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD(float32x2_t *result, uint64_t a2, double a3, int16x4_t a4, float32x4_t a5)
{
  uint64_t v6 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v7 = result->u8[0];
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    size_t v11 = *(size_t *)((char *)&result[2] + 4);
    uint64_t v12 = *(uint64_t *)((char *)&result[4] + 4);
    unint64_t v13 = v8 + *(void *)((char *)&result[5] + 4);
    unint64_t v14 = v9 - v8;
    float32x2_t v15 = result[14];
    uint64_t v16 = (uint64_t *)result[16];
    unint64_t v17 = *(void *)&result[13] * a2 / v7 + *(void *)&result[15];
    uint64_t v18 = (float32x2_t *)result[19];
    uint64_t v19 = (uint64_t *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v250 = v20[2];
    uint64_t v253 = v19[2];
    uint64_t v24 = v253 + v250 * v13 + 2 * v12;
    uint64_t v25 = *v21;
    uint64_t v26 = v21[1];
    uint64_t v251 = v21[2];
    uint64_t v252 = v16[2];
    unint64_t v27 = (unsigned char *)(v252 + v251 * v17 + *(void *)&v15);
    unsigned int v28 = v18[17].u16[2];
    LODWORD(v21) = v18[17].u16[3];
    a4.i32[0] = v18->i32[0];
    a5.i32[0] = v18[3].i32[1];
    unsigned int v29 = v18[18].u16[0];
    unsigned int v30 = v18[18].u16[1];
    unsigned int v31 = v18[18].u16[2];
    unsigned int v32 = v18[18].u16[3];
    unsigned int v33 = v18[19].u16[0];
    _S25 = v18[4].f32[1];
    _S6 = v18[6].i32[1];
    _S7 = v18[7].i32[0];
    uint64_t v37 = (char *)&v18[2068] + 4;
    float v38 = 8191.0 / (float)v18[16].u32[0];
    float v300 = (float)v21;
    float v301 = (float)v28;
    float v39 = (float)v29;
    float v40 = (float)v30;
    float v41 = (float)v31;
    float v42 = (float)v33;
    a5.i32[1] = v18[1].i32[0];
    uint64_t result = (float32x2_t *)((char *)v18 + 164);
    *(short float *)a4.i16 = (short float)v28;
    float v43 = (char *)&v18[4116] + 4;
    float v298 = (float)v32;
    float v299 = v38 * v18->f32[0];
    __asm { FCVT            H8, S16 }
    float16x8_t v291 = (float16x8_t)vdupq_lane_s16(a4, 0);
    *(float32x2_t *)v5.f32 = vmul_n_f32(*(float32x2_t *)a5.f32, v38);
    *(float32x2_t *)a5.f32 = vmul_n_f32(v18[2], v38);
    short float v49 = -(short float)v21;
    float16x8_t v289 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    float16x8_t v287 = vmulq_n_f16(v289, v49);
    float16x8_t v288 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    _Q0 = vmulq_n_f16(v288, v49);
    float16x8_t v286 = _Q0;
    __asm { FCVT            H0, S25 }
    short float v285 = *(short float *)_Q0.i16;
    float v303 = v18[5].f32[0];
    __asm { FCVT            H0, S3 }
    short float v284 = *(short float *)_Q0.i16;
    float v302 = v18[5].f32[1];
    __asm { FCVT            H0, S4 }
    short float v283 = *(short float *)_Q0.i16;
    float v297 = v18[6].f32[0];
    __asm { FCVT            H0, S5 }
    short float v266 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v29;
    int16x8_t v51 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v30;
    int16x8_t v52 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v31;
    int16x8_t v53 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v281 = (float16x8_t)v53;
    float16x8_t v282 = (float16x8_t)v51;
    *(short float *)v53.i16 = (short float)v32;
    int16x8_t v54 = vdupq_lane_s16(*(int16x4_t *)v53.i8, 0);
    float16x8_t v264 = (float16x8_t)v54;
    float16x8_t v265 = (float16x8_t)v52;
    *(short float *)v54.i16 = (short float)v33;
    float16x8_t v263 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v54.i8, 0);
    unsigned int v55 = v18[15].u8[4];
    if (v55 >= 0x11) {
      unsigned __int8 v56 = 0;
    }
    else {
      unsigned __int8 v56 = 16 - v55;
    }
    uint64_t v58 = *v16;
    uint64_t v57 = v16[1];
    float v59 = (char *)(v57 + v26 * v17 + *(void *)&v15);
    if (!v57) {
      float v59 = 0;
    }
    float v60 = (int8x8_t *)(v58 + v25 * v17 + *(void *)&v15);
    uint64_t v62 = *v19;
    uint64_t v61 = v19[1];
    uint64_t v63 = v61 + v23 * v13 + 2 * v12;
    if (!v61) {
      uint64_t v63 = 0;
    }
    uint64_t v64 = v62 + v22 * v13 + 2 * v12;
    unsigned __int8 v65 = v56;
    _S23 = v18[9].f32[0];
    _S27 = v18[10].f32[0];
    _S26 = v18[10].f32[1];
    _S10 = v18[11].f32[0];
    _S11 = v18[11].f32[1];
    _S28 = v18[12].f32[0];
    _S29 = v18[12].f32[1];
    _S13 = v18[13].f32[0];
    _S3 = v18[13].f32[1];
    _S4 = v18[14].f32[0];
    float v296 = v18[6].f32[1];
    __asm { FCVT            H5, S6 }
    short float v262 = _H5;
    float v295 = v18[7].f32[0];
    __asm { FCVT            H5, S7 }
    short float v261 = _H5;
    float v294 = v18[7].f32[1];
    __asm { FCVT            H0, S0 }
    short float v260 = _H0;
    _S5 = v18[14].f32[1];
    _S14 = v18[15].f32[0];
    float v293 = v18[8].f32[0];
    __asm { FCVT            H0, S1 }
    short float v259 = _H0;
    float v292 = v18[8].f32[1];
    __asm { FCVT            H0, S20 }
    short float v258 = _H0;
    __asm { FCVT            H0, S3 }
    short float v279 = _H0;
    __asm { FCVT            H0, S4 }
    short float v278 = _H0;
    __asm { FCVT            H0, S5 }
    short float v277 = _H0;
    __asm { FCVT            H0, S14 }
    short float v276 = _H0;
    __asm { FCVT            H0, S23 }
    short float v275 = _H0;
    float v280 = v18[9].f32[1];
    __asm { FCVT            H0, S24 }
    short float v274 = _H0;
    __asm { FCVT            H0, S27 }
    short float v273 = _H0;
    __asm { FCVT            H0, S26 }
    short float v272 = _H0;
    __asm { FCVT            H0, S10 }
    short float v271 = _H0;
    __asm { FCVT            H0, S11 }
    short float v270 = _H0;
    __asm { FCVT            H0, S28 }
    short float v269 = _H0;
    __asm { FCVT            H0, S29 }
    short float v268 = _H0;
    uint16x8_t v95 = (uint16x8_t)vdupq_n_s16(-v56);
    float v290 = v5.f32[0];
    unint64_t v96 = a5.i64[0];
    v97.i64[0] = 0x9000900090009000;
    v97.i64[1] = 0x9000900090009000;
    __asm { FCVT            H0, S13 }
    short float v267 = _H0;
    uint64_t v256 = v20[1];
    uint64_t v257 = *v20;
    uint64_t v254 = v26;
    uint64_t v255 = v25;
    do
    {
      if ((int)v11 < 8)
      {
        size_t v170 = 0;
        size_t v103 = v59;
        float v102 = v60;
        float v101 = (uint16x8_t *)v63;
        int8x16_t v100 = (uint16x8_t *)v64;
      }
      else
      {
        int v99 = 0;
        int8x16_t v100 = (uint16x8_t *)v64;
        float v101 = (uint16x8_t *)v63;
        float v102 = v60;
        size_t v103 = v59;
        do
        {
          uint16x8_t v104 = *v101++;
          float16x8_t v105 = vcvtq_f16_u16(vshlq_u16(v104, v95));
          int8x16_t v106 = (int8x16_t)vmlaq_f16(v287, v289, v105);
          int16x8_t v107 = (int16x8_t)vmlaq_f16(v286, v288, v105);
          v105.i64[0] = vextq_s8(v106, v106, 8uLL).u64[0];
          *(int16x4_t *)v108.i8 = vuzp1_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v105.i8);
          *(int16x4_t *)v105.i8 = vuzp2_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v105.i8);
          v105.i64[1] = v105.i64[0];
          v108.i64[1] = v105.i64[0];
          float16x8_t v109 = (float16x8_t)vzip1q_s16((int16x8_t)v105, (int16x8_t)v105);
          float16x8_t v110 = (float16x8_t)vzip1q_s16(v108, v108);
          v108.i64[0] = vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL).u64[0];
          *(float16x4_t *)v107.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v108.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v108.i8));
          v107.i64[1] = v110.i64[0];
          uint16x8_t v111 = *v100++;
          float16x8_t v112 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v111, v95)), v291);
          uint16x8_t v113 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v109, v112, _H8), (float16x8_t)0), v97));
          uint32x4_t v114 = vmovl_high_u16(v113);
          uint32x4_t v115 = vmovl_u16(*(uint16x4_t *)v113.i8);
          v116.i16[0] = result->i16[v115.u32[0]];
          v116.i16[1] = result->i16[v115.u32[1]];
          v116.i16[2] = result->i16[v115.u32[2]];
          v116.i16[3] = result->i16[v115.u32[3]];
          v116.i16[4] = result->i16[v114.u32[0]];
          v116.i16[5] = result->i16[v114.u32[1]];
          v116.i16[6] = result->i16[v114.u32[2]];
          v116.i16[7] = result->i16[v114.u32[3]];
          uint16x8_t v117 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16(v107, v107), v112, _H8), (float16x8_t)0), v97));
          uint32x4_t v118 = vmovl_high_u16(v117);
          uint32x4_t v119 = vmovl_u16(*(uint16x4_t *)v117.i8);
          v120.i16[0] = result->i16[v119.u32[0]];
          v120.i16[1] = result->i16[v119.u32[1]];
          v120.i16[2] = result->i16[v119.u32[2]];
          v120.i16[3] = result->i16[v119.u32[3]];
          v120.i16[4] = result->i16[v118.u32[0]];
          v120.i16[5] = result->i16[v118.u32[1]];
          v120.i16[6] = result->i16[v118.u32[2]];
          v120.i16[7] = result->i16[v118.u32[3]];
          uint16x8_t v121 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v110, v112, _H8), (float16x8_t)0), v97));
          uint32x4_t v122 = vmovl_high_u16(v121);
          float16x8_t v123 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v121.i8);
          v123.i16[0] = result->i16[v123.u32[0]];
          v123.i16[1] = result->i16[v123.u32[1]];
          v123.i16[2] = result->i16[v123.u32[2]];
          v123.i16[3] = result->i16[v123.u32[3]];
          v123.i16[4] = result->i16[v122.u32[0]];
          v123.i16[5] = result->i16[v122.u32[1]];
          v123.i16[6] = result->i16[v122.u32[2]];
          v123.i16[7] = result->i16[v122.u32[3]];
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v116, v279), v120, v278), v123, v277), vmaxq_f16(vmaxq_f16(v116, v120), v123), v276), (float16x8_t)0), v97));
          uint32x4_t v125 = vmovl_u16(*(uint16x4_t *)v124.i8);
          float16x8_t v126 = (float16x8_t)vmovl_high_u16(v124);
          uint64_t v127 = v126.u32[0];
          v126.i16[0] = *(_WORD *)&v37[2 * v125.u32[0]];
          float v128 = (__int16 *)&v37[2 * v127];
          float v129 = (__int16 *)&v37[2 * v126.u32[1]];
          float v130 = (__int16 *)&v37[2 * v126.u32[2]];
          float v131 = (__int16 *)&v37[2 * v126.u32[3]];
          v126.i16[1] = *(_WORD *)&v37[2 * v125.u32[1]];
          v126.i16[2] = *(_WORD *)&v37[2 * v125.u32[2]];
          v126.i16[3] = *(_WORD *)&v37[2 * v125.u32[3]];
          v126.i16[4] = *v128;
          v126.i16[5] = *v129;
          v126.i16[6] = *v130;
          v126.i16[7] = *v131;
          float16x8_t v132 = vmulq_f16(v116, v126);
          float16x8_t v133 = vmulq_f16(v120, v126);
          float16x8_t v134 = vmulq_f16(v123, v126);
          float16x8_t v135 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v132, v272), v133, v271), v134, v270);
          float16x8_t v136 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v134, v267), v133, v268), v132, v269);
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v132, v275), v133, v274), v134, v273), (float16x8_t)0), v97));
          uint32x4_t v138 = vmovl_u16(*(uint16x4_t *)v137.i8);
          uint64_t v139 = v138.u32[1];
          uint64_t v140 = v138.u32[0];
          uint32x4_t v141 = vmovl_high_u16(v137);
          uint64_t v142 = v138.u32[3];
          uint64_t v143 = v138.u32[2];
          uint64_t v144 = v141.u32[1];
          uint64_t v145 = v141.u32[0];
          uint64_t v146 = v141.u32[3];
          uint64_t v147 = v141.u32[2];
          uint16x8_t v148 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v135, (float16x8_t)0), v97));
          uint32x4_t v149 = vmovl_u16(*(uint16x4_t *)v148.i8);
          uint64_t v150 = v149.u32[1];
          uint64_t v151 = v149.u32[0];
          v152.i16[0] = *(_WORD *)&v43[2 * v140];
          v152.i16[1] = *(_WORD *)&v43[2 * v139];
          v152.i16[2] = *(_WORD *)&v43[2 * v143];
          v152.i16[3] = *(_WORD *)&v43[2 * v142];
          v152.i16[4] = *(_WORD *)&v43[2 * v145];
          v152.i16[5] = *(_WORD *)&v43[2 * v144];
          v152.i16[6] = *(_WORD *)&v43[2 * v147];
          v152.i16[7] = *(_WORD *)&v43[2 * v146];
          uint32x4_t v153 = vmovl_high_u16(v148);
          uint64_t v154 = v149.u32[3];
          uint64_t v155 = v149.u32[2];
          uint64_t v156 = v153.u32[1];
          uint64_t v157 = v153.u32[0];
          uint64_t v158 = v153.u32[3];
          uint64_t v159 = v153.u32[2];
          uint16x8_t v160 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v136, (float16x8_t)0), v97));
          uint32x4_t v161 = vmovl_u16(*(uint16x4_t *)v160.i8);
          v162.i16[0] = *(_WORD *)&v43[2 * v151];
          v162.i16[1] = *(_WORD *)&v43[2 * v150];
          v162.i16[2] = *(_WORD *)&v43[2 * v155];
          v162.i16[3] = *(_WORD *)&v43[2 * v154];
          v162.i16[4] = *(_WORD *)&v43[2 * v157];
          v162.i16[5] = *(_WORD *)&v43[2 * v156];
          v162.i16[6] = *(_WORD *)&v43[2 * v159];
          v162.i16[7] = *(_WORD *)&v43[2 * v158];
          uint32x4_t v163 = vmovl_high_u16(v160);
          uint64_t v164 = v163.u32[0];
          v168.i16[0] = *(_WORD *)&v43[2 * v161.u32[0]];
          float v165 = (__int16 *)&v43[2 * v163.u32[1]];
          float v166 = (__int16 *)&v43[2 * v163.u32[2]];
          float v167 = (__int16 *)&v43[2 * v163.u32[3]];
          v168.i16[1] = *(_WORD *)&v43[2 * v161.u32[1]];
          v168.i16[2] = *(_WORD *)&v43[2 * v161.u32[2]];
          v168.i16[3] = *(_WORD *)&v43[2 * v161.u32[3]];
          v168.i16[4] = *(_WORD *)&v43[2 * v164];
          v168.i16[5] = *v165;
          v168.i16[6] = *v166;
          v168.i16[7] = *v167;
          *v102++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v282, v152, v285), v162, v284), v168, v283), v282), v281)));
          if (v103)
          {
            float16x8_t v169 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v265, v152, v260), v162, v259), v168, v258);
            v304.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v265, v152, v266), v162, v262), v168, v261), v264), v263), v264), v263)));
            v304.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(v169));
            vst2_s8(v103, v304);
            v103 += 16;
          }
          v99 += 8;
        }
        while (v99 < (int)v11 - 7);
        size_t v170 = v11 & 0xFFFFFFF8;
        uint64_t v26 = v254;
        uint64_t v23 = v256;
        uint64_t v22 = v257;
        uint64_t v25 = v255;
      }
      while (v11 > v170)
      {
        float v171 = (float)(v101->u16[1] >> v65) - v300;
        float v172 = v5.f32[1] * v171;
        float v173 = v299 * (float)((float)(v100->u16[0] >> v65) - v301);
        v5.f32[0] = (float)(v5.f32[1] * v171) + v173;
        float v174 = 8191.0;
        if (v5.f32[0] <= 8191.0)
        {
          float v174 = (float)(v5.f32[1] * v171) + v173;
          if (v5.f32[0] < 0.0) {
            float v174 = 0.0;
          }
        }
        float v175 = (float)(v101->u16[0] >> v65) - v300;
        float v176 = (float)(*((float *)&v96 + 1) * v171) + (float)(v175 * *(float *)&v96);
        float v177 = 8191.0;
        if ((float)(v173 + v176) <= 8191.0)
        {
          float v177 = v173 + v176;
          if ((float)(v173 + v176) < 0.0) {
            float v177 = 0.0;
          }
        }
        float v178 = v290 * v175;
        float v179 = v178 + v173;
        BOOL v180 = (float)(v178 + v173) <= 8191.0;
        float v181 = 8191.0;
        if (v180)
        {
          float v181 = v179;
          if (v179 < 0.0) {
            float v181 = 0.0;
          }
        }
        float v182 = v299 * (float)((float)(v100->u16[1] >> v65) - v301);
        float v183 = v172 + v182;
        float v184 = 8191.0;
        if (v183 <= 8191.0)
        {
          float v184 = v183;
          if (v183 < 0.0) {
            float v184 = 0.0;
          }
        }
        float v185 = v176 + v182;
        float v186 = 8191.0;
        if (v185 <= 8191.0)
        {
          float v186 = v185;
          if (v185 < 0.0) {
            float v186 = 0.0;
          }
        }
        float v187 = v178 + v182;
        float v188 = 8191.0;
        if (v187 <= 8191.0)
        {
          float v188 = v187;
          if (v187 < 0.0) {
            float v188 = 0.0;
          }
        }
        _H0 = result->i16[llroundf(fminf(fmaxf(v174, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        _H7 = result->i16[llroundf(fminf(fmaxf(v177, 0.0), 8191.0))];
        unsigned int v192 = llroundf(fminf(fmaxf(v181, 0.0), 8191.0));
        __asm { FCVT            S6, H7 }
        _H7 = result->i16[v192];
        __asm { FCVT            S20, H7 }
        float v196 = (float)((float)((float)(_S4 * _S6) + (float)(_S3 * _S0)) + (float)(_S5 * _S20))
             + (float)(_S14 * fmaxf(_S0, fmaxf(_S6, _S20)));
        float v197 = 8191.0;
        if (v196 <= 8191.0)
        {
          float v197 = v196;
          if (v196 < 0.0) {
            float v197 = 0.0;
          }
        }
        _H7 = result->i16[llroundf(fminf(fmaxf(v184, 0.0), 8191.0))];
        __asm { FCVT            S16, H7 }
        _H1 = result->i16[llroundf(fminf(fmaxf(v186, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = result->i16[llroundf(fminf(fmaxf(v188, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H21 = *(_WORD *)&v37[2 * llroundf(v197)];
        float v205 = (float)((float)((float)(_S4 * _S1) + (float)(_S3 * _S16)) + (float)(_S5 * _S2))
             + (float)(_S14 * fmaxf(_S16, fmaxf(_S1, _S2)));
        float v206 = 8191.0;
        if (v205 <= 8191.0)
        {
          float v206 = v205;
          if (v205 < 0.0) {
            float v206 = 0.0;
          }
        }
        __asm { FCVT            S21, H21 }
        float v208 = _S0 * _S21;
        float v209 = _S6 * _S21;
        float v210 = _S20 * _S21;
        _H7 = *(_WORD *)&v37[2 * llroundf(v206)];
        __asm { FCVT            S7, H7 }
        float v213 = _S16 * _S7;
        _S1 = _S1 * _S7;
        _S2 = _S2 * _S7;
        float v216 = (float)((float)(v280 * v209) + (float)(v208 * _S23)) + (float)(v210 * _S27);
        float v217 = (float)((float)(_S10 * v209) + (float)(v208 * _S26)) + (float)(v210 * _S11);
        _S0 = (float)((float)(_S29 * v209) + (float)(v208 * _S28)) + (float)(v210 * _S13);
        float v219 = (float)((float)(v280 * _S1) + (float)(v213 * _S23)) + (float)(_S2 * _S27);
        float v220 = (float)((float)(_S10 * _S1) + (float)(v213 * _S26)) + (float)(_S2 * _S11);
        unsigned int v221 = llroundf(fminf(fmaxf(v216, 0.0), 8191.0));
        float v222 = (float)((float)(_S29 * _S1) + (float)(v213 * _S28)) + (float)(_S2 * _S13);
        LOWORD(_S1) = *(_WORD *)&v43[2 * v221];
        __asm { FCVT            S1, H1 }
        LOWORD(_S2) = *(_WORD *)&v43[2 * llroundf(fminf(fmaxf(v217, 0.0), 8191.0))];
        __asm { FCVT            S6, H2 }
        LOWORD(_S0) = *(_WORD *)&v43[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
        __asm { FCVT            S2, H0 }
        _H0 = *(_WORD *)&v43[2 * llroundf(fminf(fmaxf(v219, 0.0), 8191.0))];
        _H20 = *(_WORD *)&v43[2 * llroundf(fminf(fmaxf(v220, 0.0), 8191.0))];
        _H24 = *(_WORD *)&v43[2 * llroundf(fminf(fmaxf(v222, 0.0), 8191.0))];
        float v229 = (float)((float)((float)(v303 * _S6) + (float)(_S25 * _S1)) + (float)(v302 * _S2)) + v39;
        float v230 = v41;
        if (v229 <= v41)
        {
          float v230 = (float)((float)((float)(v303 * _S6) + (float)(_S25 * _S1)) + (float)(v302 * _S2)) + v39;
          if (v229 < v39) {
            float v230 = v39;
          }
        }
        v102->i8[0] = llroundf(v230);
        if (v103)
        {
          float v231 = (float)((float)(v40 + (float)(_S1 * v297)) + (float)(_S6 * v296)) + (float)(_S2 * v295);
          float v232 = v42;
          if (v231 <= v42)
          {
            float v232 = (float)((float)(v40 + (float)(_S1 * v297)) + (float)(_S6 * v296)) + (float)(_S2 * v295);
            if (v231 < v298) {
              float v232 = v298;
            }
          }
          float v233 = (float)((float)(v40 + (float)(_S1 * v294)) + (float)(_S6 * v293)) + (float)(_S2 * v292);
          *size_t v103 = llroundf(v232);
          float v234 = v42;
          if (v233 <= v42)
          {
            float v234 = v233;
            if (v233 < v298) {
              float v234 = v298;
            }
          }
          v103[1] = llroundf(v234);
          float16x8_t v235 = v103 + 2;
        }
        else
        {
          float16x8_t v235 = 0;
        }
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H20
          FCVT            S2, H24
        }
        float v239 = (float)((float)((float)(v303 * _S1) + (float)(_S25 * _S0)) + (float)(v302 * _S2)) + v39;
        float v240 = v41;
        if (v239 <= v41)
        {
          float v240 = (float)((float)((float)(v303 * _S1) + (float)(_S25 * _S0)) + (float)(v302 * _S2)) + v39;
          if (v239 < v39) {
            float v240 = v39;
          }
        }
        v102->i8[1] = llroundf(v240);
        if (v235)
        {
          float v241 = (float)((float)(v40 + (float)(_S0 * v297)) + (float)(_S1 * v296)) + (float)(_S2 * v295);
          float v242 = v42;
          if (v241 <= v42)
          {
            float v242 = (float)((float)(v40 + (float)(_S0 * v297)) + (float)(_S1 * v296)) + (float)(_S2 * v295);
            if (v241 < v298) {
              float v242 = v298;
            }
          }
          float v243 = (float)((float)(v40 + (float)(_S0 * v294)) + (float)(_S1 * v293)) + (float)(_S2 * v292);
          *float16x8_t v235 = llroundf(v242);
          float v244 = v42;
          if (v243 <= v42)
          {
            float v244 = v243;
            if (v243 < v298) {
              float v244 = v298;
            }
          }
          v235[1] = llroundf(v244);
          size_t v103 = v235 + 2;
        }
        else
        {
          size_t v103 = 0;
        }
        v170 += 2;
        float v101 = (uint16x8_t *)((char *)v101 + 4);
        int8x16_t v100 = (uint16x8_t *)((char *)v100 + 4);
        float v102 = (int8x8_t *)((char *)v102 + 2);
      }
      v64 += v22;
      v63 += v23;
      float v60 = (int8x8_t *)((char *)v60 + v25);
      v59 += v26;
      ++v10;
    }
    while (v10 != v14);
    if (v253 && v252)
    {
      uint64_t v245 = 0;
      do
      {
        if (v11)
        {
          size_t v246 = v11;
          float v247 = v27;
          float v248 = (unsigned __int16 *)v24;
          do
          {
            unsigned int v249 = *v248++;
            *v247++ = llroundf((float)v249 * 0.0038911);
            --v246;
          }
          while (v246);
        }
        v24 += v250;
        v27 += v251;
        ++v245;
      }
      while (v245 != v14);
    }
    else if (v252)
    {
      do
      {
        if (v11) {
          uint64_t result = (float32x2_t *)memset(v27, 255, v11);
        }
        v27 += v251;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Tone_Mat_TRC_444vf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (void *)result[16];
    unint64_t v16 = result[13] * a2 / v6 + result[15];
    uint64_t v17 = result[19];
    uint64_t v18 = (uint64_t *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = v18[2];
    uint64_t v25 = v24 + v23 * v12 + 2 * v11;
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    uint64_t v30 = (unsigned char *)(v29 + v28 * v16 + v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    float v32 = (float)LODWORD(a5);
    float v169 = v31 * *(float *)v17;
    float v170 = (float)LODWORD(a4);
    float v160 = v31 * *(float *)(v17 + 16);
    float v161 = v31 * *(float *)(v17 + 8);
    float v33 = v31 * *(float *)(v17 + 20);
    *(float *)&unsigned int v34 = v31 * *(float *)(v17 + 28);
    float v158 = *(float *)&v34;
    float v159 = v33;
    LOWORD(v34) = *(_WORD *)(v17 + 144);
    float v35 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 146);
    float v36 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 148);
    float v37 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 150);
    float v38 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 152);
    float v39 = (float)v34;
    float v40 = *(float *)(v17 + 36);
    float v41 = *(float *)(v17 + 40);
    float v42 = *(float *)(v17 + 44);
    float v167 = *(float *)(v17 + 48);
    float v168 = v38;
    float v165 = *(float *)(v17 + 56);
    float v166 = *(float *)(v17 + 52);
    float v163 = *(float *)(v17 + 64);
    float v164 = *(float *)(v17 + 60);
    float v43 = *(float *)(v17 + 72);
    float v162 = *(float *)(v17 + 68);
    float v45 = *(float *)(v17 + 76);
    float v44 = *(float *)(v17 + 80);
    float v46 = *(float *)(v17 + 84);
    float v47 = *(float *)(v17 + 88);
    float v48 = *(float *)(v17 + 92);
    float v49 = *(float *)(v17 + 96);
    float v50 = *(float *)(v17 + 100);
    float v51 = *(float *)(v17 + 104);
    uint64_t v52 = v17 + 164;
    uint64_t result = (void *)(v17 + 16548);
    unsigned int v53 = *(unsigned __int8 *)(v17 + 124);
    if (v53 >= 0x11) {
      char v54 = 0;
    }
    else {
      char v54 = 16 - v53;
    }
    uint64_t v55 = v15[1];
    _ZF = v55 == 0;
    uint64_t v57 = v55 + v27 * v16;
    uint64_t v58 = *v15 + v26 * v16;
    uint64_t v59 = v17 + 32932;
    float v60 = (unsigned char *)(v57 + v14);
    if (_ZF) {
      float v60 = 0;
    }
    uint64_t v61 = (unsigned char *)(v58 + v14);
    uint64_t v63 = *v18;
    uint64_t v62 = v18[1];
    uint64_t v64 = v62 + v22 * v12 + 2 * v11;
    if (!v62) {
      uint64_t v64 = 0;
    }
    uint64_t v65 = v63 + v21 * v12 + 2 * v11;
    char v66 = v54;
    float v68 = *(float *)(v17 + 108);
    float v67 = *(float *)(v17 + 112);
    float v69 = *(float *)(v17 + 116);
    float v70 = *(float *)(v17 + 120);
    do
    {
      if (v10)
      {
        size_t v71 = 0;
        float v72 = (unsigned __int16 *)v65;
        float v73 = v61;
        float v74 = v60;
        do
        {
          float v75 = (unsigned __int16 *)(v64 + 2 * v71);
          float v76 = (float)(v75[1] >> v66) - v32;
          float v77 = v161 * v76;
          float v78 = v169 * (float)((float)(*v72 >> v66) - v170);
          float v79 = (float)(v161 * v76) + v78;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = (float)(v161 * v76) + v78;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v32;
          float v82 = (float)(*v75 >> v66) - v32;
          float v83 = (float)(v159 * v76) + (float)(v82 * v160);
          float v84 = 8191.0;
          if ((float)(v78 + v83) <= 8191.0)
          {
            float v84 = v78 + v83;
            if ((float)(v78 + v83) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v158 * v82;
          float v86 = v85 + v78;
          BOOL v87 = (float)(v85 + v78) <= 8191.0;
          float v88 = 8191.0;
          if (v87)
          {
            float v88 = v86;
            if (v86 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v169 * (float)((float)(v72[1] >> v66) - v170);
          float v90 = v77 + v89;
          BOOL v87 = (float)(v77 + v89) <= 8191.0;
          float v91 = 8191.0;
          if (v87)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v83 + v89;
          BOOL v87 = (float)(v83 + v89) <= 8191.0;
          float v93 = 8191.0;
          if (v87)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v85 + v89;
          BOOL v87 = (float)(v85 + v89) <= 8191.0;
          float v95 = 8191.0;
          if (v87)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S1, H0 }
          _H0 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S2, H0 }
          _H0 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H19 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          float v108 = fmaxf(_S1, fmaxf(_S2, _S26));
          float v109 = (float)((float)((float)(v67 * _S2) + (float)(v68 * _S1)) + (float)(v69 * _S26)) + (float)(v70 * v108);
          float v110 = 8191.0;
          if (v109 <= 8191.0)
          {
            float v110 = (float)((float)((float)(v67 * _S2) + (float)(v68 * _S1)) + (float)(v69 * _S26)) + (float)(v70 * v108);
            if (v109 < 0.0) {
              float v110 = 0.0;
            }
          }
          __asm
          {
            FCVT            S27, H19
            FCVT            S28, H28
            FCVT            S29, H29
          }
          _H19 = *((_WORD *)result + llroundf(v110));
          float v115 = (float)((float)((float)(v67 * _S28) + (float)(v68 * _S27)) + (float)(v69 * _S29))
               + (float)(v70 * fmaxf(_S27, fmaxf(_S28, _S29)));
          float v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            float v116 = v115;
            if (v115 < 0.0) {
              float v116 = 0.0;
            }
          }
          __asm { FCVT            S0, H19 }
          float v118 = _S1 * _S0;
          float v119 = _S2 * _S0;
          float v120 = _S26 * _S0;
          _H19 = *((_WORD *)result + llroundf(v116));
          __asm { FCVT            S19, H19 }
          _S24 = _S27 * _S19;
          float v124 = _S28 * _S19;
          float v125 = _S29 * _S19;
          float v126 = (float)((float)(v45 * v119) + (float)(v118 * v43)) + (float)(v120 * v44);
          float v127 = (float)((float)(v47 * v119) + (float)(v118 * v46)) + (float)(v120 * v48);
          _S0 = (float)((float)(v50 * v119) + (float)(v118 * v49)) + (float)(v120 * v51);
          float v129 = (float)((float)(v45 * v124) + (float)(_S24 * v43)) + (float)(v125 * v44);
          float v130 = (float)((float)(v47 * v124) + (float)(_S24 * v46)) + (float)(v125 * v48);
          float v131 = (float)((float)(v50 * v124) + (float)(_S24 * v49)) + (float)(v125 * v51);
          LOWORD(_S24) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          LOWORD(_S24) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S28, H24 }
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S29, H0 }
          _H0 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          float v138 = (float)((float)((float)(v41 * _S28) + (float)(v40 * _S27)) + (float)(v42 * _S29)) + v35;
          float v139 = v37;
          if (v138 <= v37)
          {
            float v139 = (float)((float)((float)(v41 * _S28) + (float)(v40 * _S27)) + (float)(v42 * _S29)) + v35;
            if (v138 < v35) {
              float v139 = v35;
            }
          }
          *float v73 = llroundf(v139);
          if (v74)
          {
            float v140 = (float)((float)(v36 + (float)(_S27 * v167)) + (float)(_S28 * v166)) + (float)(_S29 * v165);
            float v141 = v39;
            if (v140 <= v39)
            {
              float v141 = (float)((float)(v36 + (float)(_S27 * v167)) + (float)(_S28 * v166)) + (float)(_S29 * v165);
              if (v140 < v168) {
                float v141 = v168;
              }
            }
            float v142 = (float)((float)(v36 + (float)(_S27 * v164)) + (float)(_S28 * v163)) + (float)(_S29 * v162);
            *float v74 = llroundf(v141);
            float v143 = v39;
            if (v142 <= v39)
            {
              float v143 = (float)((float)(v36 + (float)(_S27 * v164)) + (float)(_S28 * v163)) + (float)(_S29 * v162);
              if (v142 < v168) {
                float v143 = v168;
              }
            }
            v74[1] = llroundf(v143);
            v74 += 2;
          }
          float v32 = v81;
          __asm
          {
            FCVT            S0, H0
            FCVT            S2, H24
            FCVT            S26, H26
          }
          float v147 = (float)((float)((float)(v41 * _S2) + (float)(v40 * _S0)) + (float)(v42 * _S26)) + v35;
          float v148 = v37;
          if (v147 <= v37)
          {
            float v148 = (float)((float)((float)(v41 * _S2) + (float)(v40 * _S0)) + (float)(v42 * _S26)) + v35;
            if (v147 < v35) {
              float v148 = v35;
            }
          }
          v73[1] = llroundf(v148);
          if (v74)
          {
            float v149 = (float)((float)(v36 + (float)(_S0 * v167)) + (float)(_S2 * v166)) + (float)(_S26 * v165);
            float v150 = v39;
            if (v149 <= v39)
            {
              float v150 = (float)((float)(v36 + (float)(_S0 * v167)) + (float)(_S2 * v166)) + (float)(_S26 * v165);
              if (v149 < v168) {
                float v150 = v168;
              }
            }
            float v151 = (float)((float)(v36 + (float)(_S0 * v164)) + (float)(_S2 * v163)) + (float)(_S26 * v162);
            *float v74 = llroundf(v150);
            float v152 = v39;
            if (v151 <= v39)
            {
              float v152 = v151;
              if (v151 < v168) {
                float v152 = v168;
              }
            }
            v74[1] = llroundf(v152);
            v74 += 2;
          }
          v71 += 2;
          v72 += 2;
          v73 += 2;
        }
        while (v10 > v71);
      }
      v65 += v21;
      v64 += v22;
      v61 += v26;
      v60 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      uint64_t v153 = 0;
      do
      {
        if (v10)
        {
          size_t v154 = v10;
          uint64_t v155 = v30;
          uint64_t v156 = (unsigned __int16 *)v25;
          do
          {
            unsigned int v157 = *v156++;
            *v155++ = llroundf((float)v157 * 0.0038911);
            --v154;
          }
          while (v154);
        }
        v25 += v23;
        v30 += v28;
        ++v153;
      }
      while (v153 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          uint64_t result = memset(v30, 255, v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_444vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_xf422_TRC_Mat_TRC_444vf_neon_fp16_GCD(float32x2_t *result, uint64_t a2, double a3, double a4, float32x4_t a5, double a6, float32x4_t a7)
{
  uint64_t v7 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v8 = result->u8[0];
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    uint64_t v11 = 0;
    size_t v12 = *(size_t *)((char *)&result[2] + 4);
    uint64_t v13 = *(uint64_t *)((char *)&result[4] + 4);
    unint64_t v14 = v9 + *(void *)((char *)&result[5] + 4);
    unint64_t v15 = v10 - v9;
    float32x2_t v16 = result[14];
    unint64_t v17 = *(void *)&result[13] * a2 / v8;
    uint64_t v18 = (uint64_t *)result[16];
    unint64_t v19 = v17 + *(void *)&result[15];
    uint64_t v20 = (float32x2_t *)result[19];
    uint64_t v21 = (uint64_t *)result[7];
    size_t v22 = (uint64_t *)result[8];
    uint64_t v23 = (uint64_t *)result[17];
    uint64_t v24 = *v22;
    uint64_t v25 = v22[1];
    uint64_t v213 = v22[2];
    uint64_t v216 = v21[2];
    uint64_t v26 = v216 + v213 * v14 + 2 * v13;
    uint64_t v27 = *v23;
    uint64_t v28 = v23[1];
    uint64_t v214 = v23[2];
    uint64_t v215 = v18[2];
    uint64_t v29 = (unsigned char *)(v215 + v214 * v19 + *(void *)&v16);
    unsigned int v30 = v20[17].u16[2];
    unsigned int v31 = v20[17].u16[3];
    v32.i32[0] = v20[3].i32[1];
    unsigned int v33 = v20[18].u16[0];
    unsigned int v34 = v20[18].u16[1];
    unsigned int v35 = v20[18].u16[2];
    unsigned int v36 = v20[18].u16[3];
    unsigned int v37 = v20[19].u16[0];
    _S19 = v20[4].i32[1];
    _S5 = v20[5].i32[0];
    _S6 = v20[5].f32[1];
    _S7 = v20[6].i32[0];
    _S16 = v20[6].i32[1];
    _S18 = v20[7].i32[0];
    _S24 = v20[7].i32[1];
    _S25 = v20[8].i32[0];
    _S12 = v20[8].i32[1];
    _S14 = v20[9].i32[0];
    v32.i32[1] = v20[1].i32[0];
    float v48 = (char *)&v20[20] + 4;
    float v252 = (float)v31;
    float v253 = (float)v30;
    a7.f32[0] = 8191.0 / (float)v20[16].u32[0];
    float v49 = (float)v33;
    float v50 = (float)v34;
    *(float *)&a3 = (float)v35;
    *(float *)&a4 = (float)v36;
    float v250 = (float)v36;
    float v251 = a7.f32[0] * v20->f32[0];
    float v51 = (float)v37;
    *(short float *)&a4 = (short float)v30;
    uint64_t result = (float32x2_t *)((char *)v20 + 16548);
    __asm { FCVT            H8, S17 }
    float16x8_t v243 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    *(float32x2_t *)a5.f32 = vmul_n_f32(v32, a7.f32[0]);
    *(float32x2_t *)a7.f32 = vmul_n_f32(v20[2], a7.f32[0]);
    short float v57 = -(short float)v31;
    float16x8_t v242 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    float16x8_t v240 = vmulq_n_f16(v242, v57);
    float16x8_t v241 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a7), 0);
    float16x8_t v58 = vmulq_n_f16(v241, v57);
    float16x8_t v239 = v58;
    *(short float *)v58.i16 = (short float)v33;
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v58.i8, 0);
    *(short float *)v58.i16 = (short float)v34;
    int16x8_t v60 = vdupq_lane_s16(*(int16x4_t *)v58.i8, 0);
    *(short float *)v58.i16 = (short float)v35;
    int16x8_t v61 = vdupq_lane_s16(*(int16x4_t *)v58.i8, 0);
    float16x8_t v238 = (float16x8_t)v61;
    *(short float *)v61.i16 = (short float)v36;
    int16x8_t v62 = vdupq_lane_s16(*(int16x4_t *)v61.i8, 0);
    float16x8_t v224 = (float16x8_t)v62;
    float16x8_t v225 = (float16x8_t)v60;
    *(short float *)v62.i16 = (short float)v37;
    float16x8_t v223 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v62.i8, 0);
    unsigned int v63 = v20[15].u8[4];
    if (v63 >= 0x11) {
      unsigned __int8 v64 = 0;
    }
    else {
      unsigned __int8 v64 = 16 - v63;
    }
    uint64_t v66 = *v18;
    uint64_t v65 = v18[1];
    float v67 = (char *)(v65 + v28 * v19 + *(void *)&v16);
    if (!v65) {
      float v67 = 0;
    }
    float v68 = (int8x8_t *)(v66 + v27 * v19 + *(void *)&v16);
    uint64_t v70 = *v21;
    uint64_t v69 = v21[1];
    uint64_t v71 = v69 + v25 * v14 + 2 * v13;
    if (!v69) {
      uint64_t v71 = 0;
    }
    uint64_t v72 = v70 + v24 * v14 + 2 * v13;
    unsigned __int8 v73 = v64;
    _S27 = v20[9].f32[1];
    _S28 = v20[10].f32[0];
    _S29 = v20[10].f32[1];
    _S30 = v20[11].f32[0];
    _S31 = v20[11].f32[1];
    _S9 = v20[12].f32[0];
    float v80 = v20[4].f32[1];
    __asm { FCVT            H1, S19 }
    short float v237 = _H1;
    float v82 = v20[5].f32[0];
    __asm { FCVT            H1, S5 }
    short float v236 = _H1;
    __asm { FCVT            H1, S6 }
    short float v235 = _H1;
    _S13 = v20[12].f32[1];
    _S10 = v20[13].f32[0];
    float v249 = v20[6].f32[0];
    __asm { FCVT            H1, S7 }
    short float v222 = _H1;
    float v248 = v20[6].f32[1];
    __asm { FCVT            H1, S16 }
    short float v221 = _H1;
    float v247 = v20[7].f32[0];
    __asm { FCVT            H1, S18 }
    short float v220 = _H1;
    float v246 = v20[7].f32[1];
    __asm { FCVT            H1, S24 }
    short float v219 = _H1;
    float v245 = v20[8].f32[0];
    __asm { FCVT            H1, S25 }
    short float v218 = _H1;
    float v244 = v20[8].f32[1];
    __asm { FCVT            H1, S12 }
    short float v217 = _H1;
    float v93 = v20[9].f32[0];
    __asm { FCVT            H1, S14 }
    short float v234 = _H1;
    __asm { FCVT            H1, S27 }
    short float v233 = _H1;
    __asm { FCVT            H1, S28 }
    short float v232 = _H1;
    __asm { FCVT            H1, S29 }
    short float v231 = _H1;
    __asm { FCVT            H1, S30 }
    short float v230 = _H1;
    __asm { FCVT            H1, S31 }
    short float v229 = _H1;
    __asm { FCVT            H1, S9 }
    short float v228 = _H1;
    __asm { FCVT            H1, S13 }
    short float v227 = _H1;
    uint16x8_t v102 = (uint16x8_t)vdupq_n_s16(-v64);
    __asm { FCVT            H1, S10 }
    short float v226 = _H1;
    unint64_t v104 = a5.i64[0];
    v105.i64[0] = 0x9000900090009000;
    v105.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v12 < 8)
      {
        size_t v148 = 0;
        float v110 = v67;
        float v109 = v68;
        float v108 = (uint16x8_t *)v71;
        int16x8_t v107 = (uint16x8_t *)v72;
      }
      else
      {
        int v106 = 0;
        int16x8_t v107 = (uint16x8_t *)v72;
        float v108 = (uint16x8_t *)v71;
        float v109 = v68;
        float v110 = v67;
        do
        {
          uint16x8_t v111 = *v108++;
          float16x8_t v112 = vcvtq_f16_u16(vshlq_u16(v111, v102));
          int16x8_t v113 = (int16x8_t)vmlaq_f16(v240, v242, v112);
          int8x16_t v114 = (int8x16_t)vmlaq_f16(v239, v241, v112);
          v112.i64[0] = vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL).u64[0];
          *(int16x4_t *)v115.i8 = vuzp1_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v112.i8);
          *(int16x4_t *)v112.i8 = vuzp2_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v112.i8);
          *(double *)&v112.i64[1] = a3;
          *(double *)&v115.i64[1] = a3;
          v113.i64[0] = vextq_s8(v114, v114, 8uLL).u64[0];
          *(float16x4_t *)v113.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v113.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v113.i8));
          *(double *)&v113.i64[1] = a3;
          uint16x8_t v116 = *v107++;
          float16x8_t v117 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v116, v102)), v243);
          float16x8_t v118 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v113, v113), v117, _H8);
          uint16x8_t v119 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v112, (int16x8_t)v112), v117, _H8), (float16x8_t)0), v105));
          float16x8_t v120 = (float16x8_t)vmovl_high_u16(v119);
          *(void *)&long long v121 = v120.u32[2];
          *((void *)&v121 + 1) = v120.u32[3];
          long long v122 = v121;
          *(void *)&long long v121 = v120.u32[0];
          *((void *)&v121 + 1) = v120.u32[1];
          uint32x4_t v123 = vmovl_u16(*(uint16x4_t *)v119.i8);
          v120.i16[0] = *(_WORD *)&v48[2 * v123.u32[0]];
          v120.i16[1] = *(_WORD *)&v48[2 * v123.u32[1]];
          v120.i16[2] = *(_WORD *)&v48[2 * v123.u32[2]];
          v120.i16[3] = *(_WORD *)&v48[2 * v123.u32[3]];
          v120.i16[4] = *(_WORD *)&v48[2 * v121];
          v120.i16[5] = *(_WORD *)&v48[2 * *((void *)&v121 + 1)];
          v120.i16[6] = *(_WORD *)&v48[2 * v122];
          v120.i16[7] = *(_WORD *)&v48[2 * *((void *)&v122 + 1)];
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v105));
          uint32x4_t v125 = vmovl_high_u16(v124);
          uint32x4_t v126 = vmovl_u16(*(uint16x4_t *)v124.i8);
          v127.i16[0] = *(_WORD *)&v48[2 * v126.u32[0]];
          v127.i16[1] = *(_WORD *)&v48[2 * v126.u32[1]];
          v127.i16[2] = *(_WORD *)&v48[2 * v126.u32[2]];
          v127.i16[3] = *(_WORD *)&v48[2 * v126.u32[3]];
          v127.i16[4] = *(_WORD *)&v48[2 * v125.u32[0]];
          v127.i16[5] = *(_WORD *)&v48[2 * v125.u32[1]];
          v127.i16[6] = *(_WORD *)&v48[2 * v125.u32[2]];
          v127.i16[7] = *(_WORD *)&v48[2 * v125.u32[3]];
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16(v115, v115), v117, _H8), (float16x8_t)0), v105));
          uint32x4_t v129 = vmovl_high_u16(v128);
          float16x8_t v130 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v128.i8);
          v130.i16[0] = *(_WORD *)&v48[2 * v130.u32[0]];
          v130.i16[1] = *(_WORD *)&v48[2 * v130.u32[1]];
          v130.i16[2] = *(_WORD *)&v48[2 * v130.u32[2]];
          v130.i16[3] = *(_WORD *)&v48[2 * v130.u32[3]];
          v130.i16[4] = *(_WORD *)&v48[2 * v129.u32[0]];
          v130.i16[5] = *(_WORD *)&v48[2 * v129.u32[1]];
          v130.i16[6] = *(_WORD *)&v48[2 * v129.u32[2]];
          v130.i16[7] = *(_WORD *)&v48[2 * v129.u32[3]];
          float16x8_t v131 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v120, v231), v127, v230), v130, v229);
          float16x8_t v132 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v130, v226), v127, v227), v120, v228);
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v120, v234), v127, v233), v130, v232), (float16x8_t)0), v105));
          uint32x4_t v134 = vmovl_high_u16(v133);
          *(void *)&long long v121 = v134.u32[2];
          *((void *)&v121 + 1) = v134.u32[3];
          long long v135 = v121;
          *(void *)&long long v121 = v134.u32[0];
          *((void *)&v121 + 1) = v134.u32[1];
          uint32x4_t v136 = vmovl_u16(*(uint16x4_t *)v133.i8);
          v137.i16[0] = result->i16[v136.u32[0]];
          v137.i16[1] = result->i16[v136.u32[1]];
          v137.i16[2] = result->i16[v136.u32[2]];
          v137.i16[3] = result->i16[v136.u32[3]];
          v137.i16[4] = result->i16[v121];
          v137.i16[5] = result->i16[*((void *)&v121 + 1)];
          v137.i16[6] = result->i16[v135];
          v137.i16[7] = result->i16[*((void *)&v135 + 1)];
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, (float16x8_t)0), v105));
          uint32x4_t v139 = vmovl_high_u16(v138);
          *(void *)&long long v121 = v139.u32[2];
          *((void *)&v121 + 1) = v139.u32[3];
          long long v140 = v121;
          *(void *)&long long v121 = v139.u32[0];
          *((void *)&v121 + 1) = v139.u32[1];
          uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v138.i8);
          v142.i16[0] = result->i16[v141.u32[0]];
          v142.i16[1] = result->i16[v141.u32[1]];
          v142.i16[2] = result->i16[v141.u32[2]];
          v142.i16[3] = result->i16[v141.u32[3]];
          v142.i16[4] = result->i16[v121];
          v142.i16[5] = result->i16[*((void *)&v121 + 1)];
          v142.i16[6] = result->i16[v140];
          v142.i16[7] = result->i16[*((void *)&v140 + 1)];
          uint16x8_t v143 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v132, (float16x8_t)0), v105));
          uint32x4_t v144 = vmovl_high_u16(v143);
          *(void *)&long long v121 = v144.u32[2];
          *((void *)&v121 + 1) = v144.u32[3];
          long long v145 = v121;
          *(void *)&long long v121 = v144.u32[0];
          *((void *)&v121 + 1) = v144.u32[1];
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v143.i8);
          v147.i16[0] = result->i16[v146.u32[0]];
          v147.i16[1] = result->i16[v146.u32[1]];
          v147.i16[2] = result->i16[v146.u32[2]];
          v147.i16[3] = result->i16[v146.u32[3]];
          v147.i16[4] = result->i16[v121];
          v147.i16[5] = result->i16[*((void *)&v121 + 1)];
          v147.i16[6] = result->i16[v145];
          v147.i16[7] = result->i16[*((void *)&v145 + 1)];
          *v109++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v59, v137, v237), v142, v236), v147, v235), v59), v238)));
          if (v110)
          {
            v254.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v225, v137, v222), v142, v221), v147, v220), v224), v223), v224), v223)));
            v254.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v225, v137, v219), v142, v218), v147, v217)));
            vst2_s8(v110, v254);
            v110 += 16;
          }
          v106 += 8;
        }
        while (v106 < (int)v12 - 7);
        size_t v148 = v12 & 0xFFFFFFF8;
      }
      while (v12 > v148)
      {
        float v149 = (float)(v108->u16[1] >> v73) - v252;
        float v150 = *((float *)&v104 + 1) * v149;
        float v151 = v251 * (float)((float)(v107->u16[0] >> v73) - v253);
        float v152 = (float)(*((float *)&v104 + 1) * v149) + v151;
        float v153 = 8191.0;
        if (v152 <= 8191.0)
        {
          float v153 = (float)(*((float *)&v104 + 1) * v149) + v151;
          if (v152 < 0.0) {
            float v153 = 0.0;
          }
        }
        float v154 = (float)(v108->u16[0] >> v73) - v252;
        float v155 = (float)(a7.f32[1] * v149) + (float)(v154 * a7.f32[0]);
        float v156 = 8191.0;
        if ((float)(v151 + v155) <= 8191.0)
        {
          float v156 = v151 + v155;
          if ((float)(v151 + v155) < 0.0) {
            float v156 = 0.0;
          }
        }
        float v157 = *(float *)&v104 * v154;
        float v158 = v157 + v151;
        float v159 = 8191.0;
        if (v158 <= 8191.0)
        {
          float v159 = v158;
          if (v158 < 0.0) {
            float v159 = 0.0;
          }
        }
        float v160 = v251 * (float)((float)(v107->u16[1] >> v73) - v253);
        float v161 = v150 + v160;
        float v162 = 8191.0;
        if (v161 <= 8191.0)
        {
          float v162 = v161;
          if (v161 < 0.0) {
            float v162 = 0.0;
          }
        }
        float v163 = v155 + v160;
        BOOL v164 = (float)(v155 + v160) <= 8191.0;
        float v165 = 8191.0;
        if (v164)
        {
          float v165 = v163;
          if (v163 < 0.0) {
            float v165 = 0.0;
          }
        }
        if ((float)(v157 + v160) < 0.0) {
          float v166 = 0.0;
        }
        else {
          float v166 = v157 + v160;
        }
        unsigned int v167 = llroundf(fminf(fmaxf(v153, 0.0), 8191.0));
        if ((float)(v157 + v160) <= 8191.0) {
          float v168 = v166;
        }
        else {
          float v168 = 8191.0;
        }
        _H2 = *(_WORD *)&v48[2 * v167];
        __asm { FCVT            S2, H2 }
        _H7 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        _H16 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        float v175 = (float)((float)(_S27 * _S7) + (float)(_S2 * v93)) + (float)(_S16 * _S28);
        float v176 = (float)((float)(_S30 * _S7) + (float)(_S2 * _S29)) + (float)(_S16 * _S31);
        _S2 = (float)((float)(_S13 * _S7) + (float)(_S2 * _S9)) + (float)(_S16 * _S10);
        LOWORD(_S7) = result->i16[llroundf(fminf(fmaxf(v175, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        LOWORD(_S16) = result->i16[llroundf(fminf(fmaxf(v176, 0.0), 8191.0))];
        __asm { FCVT            S12, H16 }
        LOWORD(_S2) = result->i16[llroundf(fminf(fmaxf(_S2, 0.0), 8191.0))];
        __asm { FCVT            S14, H2 }
        float v181 = (float)((float)((float)(v82 * _S12) + (float)(v80 * _S7)) + (float)(_S6 * _S14)) + v49;
        float v182 = *(float *)&a3;
        if (v181 <= *(float *)&a3)
        {
          float v182 = (float)((float)((float)(v82 * _S12) + (float)(v80 * _S7)) + (float)(_S6 * _S14)) + v49;
          if (v181 < v49) {
            float v182 = (float)v33;
          }
        }
        _H1 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H16 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        float v189 = (float)((float)(_S27 * _S2) + (float)(_S1 * v93)) + (float)(_S16 * _S28);
        float v190 = (float)((float)(_S30 * _S2) + (float)(_S1 * _S29)) + (float)(_S16 * _S31);
        float v191 = (float)((float)(_S13 * _S2) + (float)(_S1 * _S9)) + (float)(_S16 * _S10);
        _H16 = result->i16[llroundf(fminf(fmaxf(v189, 0.0), 8191.0))];
        _H18 = result->i16[llroundf(fminf(fmaxf(v190, 0.0), 8191.0))];
        _H25 = result->i16[llroundf(fminf(fmaxf(v191, 0.0), 8191.0))];
        v109->i8[0] = llroundf(v182);
        if (v110)
        {
          float v195 = (float)((float)(v50 + (float)(_S7 * v249)) + (float)(_S12 * v248)) + (float)(_S14 * v247);
          float v196 = v51;
          if (v195 <= v51)
          {
            float v196 = (float)((float)(v50 + (float)(_S7 * v249)) + (float)(_S12 * v248)) + (float)(_S14 * v247);
            if (v195 < v250) {
              float v196 = v250;
            }
          }
          float v197 = (float)((float)(v50 + (float)(_S7 * v246)) + (float)(_S12 * v245)) + (float)(_S14 * v244);
          char *v110 = llroundf(v196);
          float v198 = v51;
          if (v197 <= v51)
          {
            float v198 = v197;
            if (v197 < v250) {
              float v198 = v250;
            }
          }
          v110[1] = llroundf(v198);
          v110 += 2;
        }
        __asm
        {
          FCVT            S7, H16
          FCVT            S16, H18
          FCVT            S18, H25
        }
        float v202 = (float)((float)((float)(v82 * _S16) + (float)(v80 * _S7)) + (float)(_S6 * _S18)) + v49;
        float v203 = *(float *)&a3;
        if (v202 <= *(float *)&a3)
        {
          float v203 = (float)((float)((float)(v82 * _S16) + (float)(v80 * _S7)) + (float)(_S6 * _S18)) + v49;
          if (v202 < v49) {
            float v203 = (float)v33;
          }
        }
        v109->i8[1] = llroundf(v203);
        if (v110)
        {
          float v204 = (float)((float)(v50 + (float)(_S7 * v249)) + (float)(_S16 * v248)) + (float)(_S18 * v247);
          float v205 = v51;
          if (v204 <= v51)
          {
            float v205 = (float)((float)(v50 + (float)(_S7 * v249)) + (float)(_S16 * v248)) + (float)(_S18 * v247);
            if (v204 < v250) {
              float v205 = v250;
            }
          }
          float v206 = (float)((float)(v50 + (float)(_S7 * v246)) + (float)(_S16 * v245)) + (float)(_S18 * v244);
          char *v110 = llroundf(v205);
          float v207 = v51;
          if (v206 <= v51)
          {
            float v207 = v206;
            if (v206 < v250) {
              float v207 = v250;
            }
          }
          v110[1] = llroundf(v207);
          v110 += 2;
        }
        v148 += 2;
        float v108 = (uint16x8_t *)((char *)v108 + 4);
        int16x8_t v107 = (uint16x8_t *)((char *)v107 + 4);
        float v109 = (int8x8_t *)((char *)v109 + 2);
      }
      v72 += v24;
      v71 += v25;
      float v68 = (int8x8_t *)((char *)v68 + v27);
      v67 += v28;
      ++v11;
    }
    while (v11 != v15);
    if (v216 && v215)
    {
      uint64_t v208 = 0;
      do
      {
        if (v12)
        {
          size_t v209 = v12;
          float v210 = v29;
          float v211 = (unsigned __int16 *)v26;
          do
          {
            unsigned int v212 = *v211++;
            *v210++ = llroundf((float)v212 * 0.0038911);
            --v209;
          }
          while (v209);
        }
        v26 += v213;
        v29 += v214;
        ++v208;
      }
      while (v208 != v15);
    }
    else if (v215)
    {
      do
      {
        if (v12) {
          uint64_t result = (float32x2_t *)memset(v29, 255, v12);
        }
        v29 += v214;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Mat_TRC_444vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    size_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    unint64_t v16 = result[13] * a2 / v7;
    uint64_t v17 = (uint64_t *)result[16];
    unint64_t v18 = v16 + result[15];
    uint64_t v19 = result[19];
    uint64_t v20 = (uint64_t *)result[7];
    uint64_t v21 = (uint64_t *)result[8];
    size_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v26 = v20[2];
    uint64_t v27 = v26 + v25 * v13 + 2 * v12;
    uint64_t v28 = *v22;
    uint64_t v29 = v22[1];
    uint64_t v30 = v22[2];
    uint64_t v31 = v17[2];
    uint64_t v32 = (unsigned char *)(v31 + v30 * v18 + v15);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v19;
    float v144 = v33 * *(float *)(v19 + 16);
    float v145 = v33 * *(float *)(v19 + 8);
    float v142 = v33 * *(float *)(v19 + 28);
    *(float *)&unsigned int v37 = v142;
    float v143 = v33 * *(float *)(v19 + 20);
    LOWORD(v37) = *(_WORD *)(v19 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 152);
    float v42 = (float)v37;
    float v43 = *(float *)(v19 + 36);
    float v44 = *(float *)(v19 + 40);
    float v45 = *(float *)(v19 + 44);
    float v149 = *(float *)(v19 + 52);
    float v150 = *(float *)(v19 + 48);
    float v147 = *(float *)(v19 + 60);
    float v148 = *(float *)(v19 + 56);
    float v46 = *(float *)(v19 + 68);
    float v146 = *(float *)(v19 + 64);
    float v47 = *(float *)(v19 + 72);
    float v48 = *(float *)(v19 + 76);
    float v49 = *(float *)(v19 + 80);
    float v50 = *(float *)(v19 + 84);
    float v51 = *(float *)(v19 + 88);
    float v52 = *(float *)(v19 + 92);
    float v53 = *(float *)(v19 + 96);
    float v54 = *(float *)(v19 + 100);
    float v55 = *(float *)(v19 + 104);
    uint64_t v56 = v19 + 164;
    uint64_t result = (void *)(v19 + 16548);
    unsigned int v57 = *(unsigned __int8 *)(v19 + 124);
    if (v57 >= 0x11) {
      char v58 = 0;
    }
    else {
      char v58 = 16 - v57;
    }
    uint64_t v60 = *v17;
    uint64_t v59 = v17[1];
    int16x8_t v61 = (unsigned char *)(v59 + v29 * v18 + v15);
    if (!v59) {
      int16x8_t v61 = 0;
    }
    int16x8_t v62 = (unsigned char *)(v60 + v28 * v18 + v15);
    uint64_t v64 = *v20;
    uint64_t v63 = v20[1];
    uint64_t v65 = v63 + v24 * v13 + 2 * v12;
    if (!v63) {
      uint64_t v65 = 0;
    }
    uint64_t v66 = v64 + v23 * v13 + 2 * v12;
    char v67 = v58;
    do
    {
      if (v11)
      {
        size_t v68 = 0;
        uint64_t v69 = (unsigned __int16 *)v66;
        uint64_t v70 = v62;
        uint64_t v71 = v61;
        do
        {
          uint64_t v72 = (unsigned __int16 *)(v65 + 2 * v68);
          float v73 = (float)(v72[1] >> v67) - v35;
          float v74 = v145 * v73;
          float v75 = v36 * (float)((float)(*v69 >> v67) - v34);
          float v76 = (float)(v145 * v73) + v75;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = (float)(v145 * v73) + v75;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = (float)(*v72 >> v67) - v35;
          float v79 = (float)(v143 * v73) + (float)(v78 * v144);
          float v80 = 8191.0;
          if ((float)(v75 + v79) <= 8191.0)
          {
            float v80 = v75 + v79;
            if ((float)(v75 + v79) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v142 * v78;
          float v82 = (float)(v142 * v78) + v75;
          float v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v36 * (float)((float)(v69[1] >> v67) - v34);
          float v85 = v74 + v84;
          float v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v79 + v84;
          BOOL v88 = (float)(v79 + v84) <= 8191.0;
          float v89 = 8191.0;
          if (v88)
          {
            float v89 = v87;
            if (v87 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v81 + v84;
          if ((float)(v81 + v84) < 0.0) {
            float v91 = 0.0;
          }
          else {
            float v91 = v81 + v84;
          }
          unsigned int v92 = llroundf(fminf(fmaxf(v77, 0.0), 8191.0));
          if (v90 <= 8191.0) {
            float v93 = v91;
          }
          else {
            float v93 = 8191.0;
          }
          _H4 = *(_WORD *)(v56 + 2 * v92);
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          float v104 = (float)((float)(v48 * _S5) + (float)(_S4 * v47)) + (float)(_S6 * v49);
          float v105 = (float)((float)(v51 * _S5) + (float)(_S4 * v50)) + (float)(_S6 * v52);
          _S5 = (float)((float)(v54 * _S5) + (float)(_S4 * v53)) + (float)(_S6 * v55);
          LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S5) = *((_WORD *)result + llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S7, H5 }
          float v110 = (float)((float)((float)(v44 * _S6) + (float)(v43 * _S4)) + (float)(v45 * _S7)) + v38;
          float v111 = v40;
          if (v110 <= v40)
          {
            float v111 = (float)((float)((float)(v44 * _S6) + (float)(v43 * _S4)) + (float)(v45 * _S7)) + v38;
            if (v110 < v38) {
              float v111 = v38;
            }
          }
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v118 = (float)((float)(v48 * _S24) + (float)(_S5 * v47)) + (float)(_S25 * v49);
          float v119 = (float)((float)(v51 * _S24) + (float)(_S5 * v50)) + (float)(_S25 * v52);
          float v120 = (float)((float)(v54 * _S24) + (float)(_S5 * v53)) + (float)(_S25 * v55);
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H25 = *((_WORD *)result + llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          *uint64_t v70 = llroundf(v111);
          if (v71)
          {
            float v124 = (float)((float)(v39 + (float)(_S4 * v150)) + (float)(_S6 * v149)) + (float)(_S7 * v148);
            float v125 = v42;
            if (v124 <= v42)
            {
              float v125 = (float)((float)(v39 + (float)(_S4 * v150)) + (float)(_S6 * v149)) + (float)(_S7 * v148);
              if (v124 < v41) {
                float v125 = v41;
              }
            }
            float v126 = (float)((float)(v39 + (float)(_S4 * v147)) + (float)(_S6 * v146)) + (float)(_S7 * v46);
            *uint64_t v71 = llroundf(v125);
            float v127 = v42;
            if (v126 <= v42)
            {
              float v127 = v126;
              if (v126 < v41) {
                float v127 = v41;
              }
            }
            v71[1] = llroundf(v127);
            v71 += 2;
          }
          __asm
          {
            FCVT            S4, H5
            FCVT            S5, H24
            FCVT            S6, H25
          }
          float v131 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
          float v132 = v40;
          if (v131 <= v40)
          {
            float v132 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v45 * _S6)) + v38;
            if (v131 < v38) {
              float v132 = v38;
            }
          }
          v70[1] = llroundf(v132);
          if (v71)
          {
            float v133 = (float)((float)(v39 + (float)(_S4 * v150)) + (float)(_S5 * v149)) + (float)(_S6 * v148);
            float v134 = v42;
            if (v133 <= v42)
            {
              float v134 = (float)((float)(v39 + (float)(_S4 * v150)) + (float)(_S5 * v149)) + (float)(_S6 * v148);
              if (v133 < v41) {
                float v134 = v41;
              }
            }
            float v135 = (float)((float)(v39 + (float)(_S4 * v147)) + (float)(_S5 * v146)) + (float)(_S6 * v46);
            *uint64_t v71 = llroundf(v134);
            float v136 = v42;
            if (v135 <= v42)
            {
              float v136 = v135;
              if (v135 < v41) {
                float v136 = v41;
              }
            }
            v71[1] = llroundf(v136);
            v71 += 2;
          }
          v68 += 2;
          v69 += 2;
          v70 += 2;
        }
        while (v11 > v68);
      }
      v66 += v23;
      v65 += v24;
      v62 += v28;
      v61 += v29;
      ++v10;
    }
    while (v10 != v14);
    if (v26 && v31)
    {
      uint64_t v137 = 0;
      do
      {
        if (v11)
        {
          size_t v138 = v11;
          uint32x4_t v139 = v32;
          long long v140 = (unsigned __int16 *)v27;
          do
          {
            unsigned int v141 = *v140++;
            *v139++ = llroundf((float)v141 * 0.0038911);
            --v138;
          }
          while (v138);
        }
        v27 += v25;
        v32 += v30;
        ++v137;
      }
      while (v137 != v14);
    }
    else if (v31)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v32, 255, v11);
        }
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_444vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_444vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf422_rgb_444vf_neon_fp16_GCD(void *result, uint64_t a2, double a3)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (uint64_t *)result[16];
    unint64_t v16 = result[13] * a2 / v6 + result[15];
    uint64_t v17 = (float32x2_t *)result[19];
    uint64_t v18 = (uint64_t *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = v18[2];
    uint64_t v25 = v24 + v23 * v12 + 2 * v11;
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    uint64_t v30 = (unsigned char *)(v29 + v28 * v16 + v14);
    unsigned int v31 = v17[17].u16[2];
    unsigned int v32 = v17[17].u16[3];
    v33.i32[0] = v17[3].i32[1];
    unsigned int v34 = v17[18].u16[0];
    unsigned int v35 = v17[18].u16[1];
    unsigned int v36 = v17[18].u16[2];
    *(float *)&a3 = (float)v31;
    *(short float *)v3.i16 = (short float)v31;
    unsigned int v37 = v17[18].u16[3];
    float v38 = (float)v32;
    short float v39 = (short float)v32;
    unsigned int v40 = v17[19].u16[0];
    _S2 = v17[4].f32[1];
    _S3 = v17[5].f32[0];
    _S4 = v17[5].f32[1];
    _S5 = v17[6].f32[0];
    _S6 = v17[6].f32[1];
    _S7 = v17[7].f32[0];
    _S16 = v17[7].f32[1];
    _S17 = v17[8].f32[0];
    _S18 = v17[8].f32[1];
    float v50 = (float)v17[17].u32[0] / (float)v17[16].u32[0];
    _S19 = v50 * v17->f32[0];
    float v52 = (float)v34;
    float v53 = (float)v35;
    float v54 = (float)v36;
    float v55 = (float)v37;
    float v56 = (float)v40;
    int16x8_t v57 = vdupq_lane_s16(*(int16x4_t *)v3.f32, 0);
    __asm { FCVT            H8, S19 }
    v33.i32[1] = v17[1].i32[0];
    *(float32x2_t *)v3.f32 = vmul_n_f32(v33, v50);
    *(float32x2_t *)v4.f32 = vmul_n_f32(v17[2], v50);
    float16x8_t v155 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    float16x8_t v156 = (float16x8_t)v57;
    float16x8_t v152 = vmulq_n_f16(v155, -v39);
    float16x8_t v153 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v63 = vmulq_n_f16(v153, -v39);
    __asm { FCVT            H10, S2 }
    short float v150 = _H10;
    float16x8_t v151 = v63;
    __asm { FCVT            H10, S3 }
    *(short float *)v63.i16 = (short float)v34;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    *(short float *)v63.i16 = (short float)v35;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    *(short float *)v63.i16 = (short float)v36;
    int16x8_t v68 = vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    float16x8_t v148 = (float16x8_t)v68;
    short float v149 = _H10;
    *(short float *)v68.i16 = (short float)v37;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v68.i8, 0);
    *(short float *)v68.i16 = (short float)v40;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v68.i8, 0);
    unsigned int v71 = v17[15].u8[4];
    unsigned __int8 v72 = 16 - v71;
    if (v71 >= 0x11) {
      unsigned __int8 v72 = 0;
    }
    uint64_t v74 = *v15;
    uint64_t v73 = v15[1];
    float v75 = (char *)(v73 + v27 * v16 + v14);
    if (!v73) {
      float v75 = 0;
    }
    uint64_t result = (void *)(v74 + v26 * v16 + v14);
    uint64_t v77 = *v18;
    uint64_t v76 = v18[1];
    uint64_t v78 = v76 + v22 * v12 + 2 * v11;
    if (!v76) {
      uint64_t v78 = 0;
    }
    uint64_t v79 = v77 + v21 * v12 + 2 * v11;
    unsigned __int8 v80 = v72;
    __asm { FCVT            H10, S4 }
    short float v147 = _H10;
    __asm { FCVT            H10, S5 }
    short float v145 = _H10;
    __asm { FCVT            H10, S6 }
    short float v144 = _H10;
    __asm { FCVT            H10, S7 }
    short float v143 = _H10;
    __asm { FCVT            H10, S16 }
    short float v142 = _H10;
    __asm { FCVT            H10, S17 }
    short float v141 = _H10;
    __asm { FCVT            H10, S18 }
    short float v140 = _H10;
    uint16x8_t v88 = (uint16x8_t)vdupq_n_s16(-v72);
    float v154 = v3.f32[0];
    uint64_t v89 = v4.i64[0];
    float v146 = v3.f32[1];
    do
    {
      if ((int)v10 < 8)
      {
        size_t v108 = 0;
        float v94 = v75;
        float v93 = (int8x8_t *)result;
        unsigned int v92 = (uint16x8_t *)v78;
        float v91 = (uint16x8_t *)v79;
      }
      else
      {
        int v90 = 0;
        float v91 = (uint16x8_t *)v79;
        unsigned int v92 = (uint16x8_t *)v78;
        float v93 = (int8x8_t *)result;
        float v94 = v75;
        do
        {
          uint16x8_t v95 = *v92++;
          float16x8_t v96 = vcvtq_f16_u16(vshlq_u16(v95, v88));
          int8x16_t v97 = (int8x16_t)vmlaq_f16(v152, v155, v96);
          int8x16_t v98 = (int8x16_t)vmlaq_f16(v151, v153, v96);
          v96.i64[0] = vextq_s8(v97, v97, 8uLL).u64[0];
          *(int16x4_t *)v99.i8 = vuzp2_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v96.i8);
          *(double *)&v99.i64[1] = a3;
          *(int16x4_t *)v96.i8 = vuzp1_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v96.i8);
          *(double *)&v96.i64[1] = a3;
          float16x8_t v100 = (float16x8_t)vzip1q_s16((int16x8_t)v96, (int16x8_t)v96);
          v96.i64[0] = vextq_s8(v98, v98, 8uLL).u64[0];
          *(float16x4_t *)v96.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v96.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v96.i8));
          *(double *)&v96.i64[1] = a3;
          float16x8_t v101 = (float16x8_t)vzip1q_s16((int16x8_t)v96, (int16x8_t)v96);
          uint16x8_t v102 = *v91++;
          float16x8_t v103 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v102, v88)), v156);
          float16x8_t v104 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v99, v99), v103, _H8);
          float16x8_t v105 = vmlaq_n_f16(v101, v103, _H8);
          float16x8_t v106 = vmlaq_n_f16(v100, v103, _H8);
          *v93++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v66, v104, v150), v105, v149), v106, v147), v66), v148)));
          if (v94)
          {
            float16x8_t v107 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v67, v104, v142), v105, v141), v106, v140);
            v157.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v67, v104, v145), v105, v144), v106, v143), v69), v70), v69), v70)));
            v157.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(v107));
            vst2_s8(v94, v157);
            v94 += 16;
          }
          v90 += 8;
        }
        while (v90 < (int)v10 - 7);
        size_t v108 = v10 & 0xFFFFFFF8;
      }
      while (v10 > v108)
      {
        float v109 = (float)(v92->u16[0] >> v80) - v38;
        float v110 = (float)(v92->u16[1] >> v80) - v38;
        float v111 = v146 * v110;
        float v112 = (float)(*((float *)&v89 + 1) * v110) + (float)(v109 * *(float *)&v89);
        float v113 = v154 * v109;
        float v114 = _S19 * (float)((float)(v91->u16[0] >> v80) - *(float *)&a3);
        float v115 = (float)(v146 * v110) + v114;
        float v116 = v114 + v112;
        float v117 = v113 + v114;
        float v118 = (float)((float)((float)(_S3 * (float)(v114 + v112)) + (float)(_S2 * v115))
                     + (float)(_S4 * (float)(v113 + v114)))
             + v52;
        float v119 = v54;
        if (v118 <= v54)
        {
          float v119 = v118;
          if (v118 < v52) {
            float v119 = v52;
          }
        }
        unsigned int v120 = v91->u16[1];
        v93->i8[0] = llroundf(v119);
        if (v94)
        {
          float v121 = (float)((float)(v53 + (float)(v115 * _S5)) + (float)(v116 * _S6)) + (float)(v117 * _S7);
          float v122 = v56;
          if (v121 <= v56)
          {
            float v122 = (float)((float)(v53 + (float)(v115 * _S5)) + (float)(v116 * _S6)) + (float)(v117 * _S7);
            if (v121 < v55) {
              float v122 = v55;
            }
          }
          float v123 = (float)((float)(v53 + (float)(v115 * _S16)) + (float)(v116 * _S17)) + (float)(v117 * _S18);
          *float v94 = llroundf(v122);
          float v124 = v56;
          if (v123 <= v56)
          {
            if (v123 < v55) {
              float v124 = v55;
            }
            else {
              float v124 = v123;
            }
          }
          v94[1] = llroundf(v124);
          v94 += 2;
        }
        float v125 = _S19 * (float)((float)(int)(v120 >> v80) - *(float *)&a3);
        float v126 = v111 + v125;
        float v127 = v112 + v125;
        float v128 = v113 + v125;
        float v129 = (float)((float)((float)(_S3 * v127) + (float)(_S2 * v126)) + (float)(_S4 * (float)(v113 + v125))) + v52;
        float v130 = v54;
        if (v129 <= v54)
        {
          float v130 = v129;
          if (v129 < v52) {
            float v130 = v52;
          }
        }
        v93->i8[1] = llroundf(v130);
        if (v94)
        {
          float v131 = (float)((float)(v53 + (float)(v126 * _S5)) + (float)(v127 * _S6)) + (float)(v128 * _S7);
          float v132 = v56;
          if (v131 <= v56)
          {
            float v132 = (float)((float)(v53 + (float)(v126 * _S5)) + (float)(v127 * _S6)) + (float)(v128 * _S7);
            if (v131 < v55) {
              float v132 = v55;
            }
          }
          float v133 = (float)((float)(v53 + (float)(v126 * _S16)) + (float)(v127 * _S17)) + (float)(v128 * _S18);
          *float v94 = llroundf(v132);
          float v134 = v56;
          if (v133 <= v56)
          {
            float v134 = v133;
            if (v133 < v55) {
              float v134 = v55;
            }
          }
          v94[1] = llroundf(v134);
          v94 += 2;
        }
        v108 += 2;
        unsigned int v92 = (uint16x8_t *)((char *)v92 + 4);
        float v91 = (uint16x8_t *)((char *)v91 + 4);
        float v93 = (int8x8_t *)((char *)v93 + 2);
      }
      v79 += v21;
      v78 += v22;
      uint64_t result = (void *)((char *)result + v26);
      v75 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      uint64_t v135 = 0;
      do
      {
        if (v10)
        {
          size_t v136 = v10;
          uint64_t v137 = v30;
          size_t v138 = (unsigned __int16 *)v25;
          do
          {
            unsigned int v139 = *v138++;
            *v137++ = llroundf((float)v139 * 0.0038911);
            --v136;
          }
          while (v136);
        }
        v25 += v23;
        v30 += v28;
        ++v135;
      }
      while (v135 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          uint64_t result = memset(v30, 255, v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_444vf_GCD);
  return 0;
}

void *vt_Copy_xf422_rgb_444vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v10 = *(void *)((char *)result + 28);
  unint64_t v11 = *(unsigned __int8 *)result;
  unint64_t v12 = v10 * a2 / v11;
  unint64_t v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    uint64_t v14 = 0;
    size_t v15 = *(void *)((char *)result + 20);
    uint64_t v16 = *(void *)((char *)result + 36);
    unint64_t v17 = v12 + *(void *)((char *)result + 44);
    unint64_t v18 = v13 - v12;
    uint64_t v19 = result[14];
    uint64_t v20 = (uint64_t *)result[16];
    unint64_t v21 = result[13] * a2 / v11 + result[15];
    uint64_t v22 = result[19];
    uint64_t v23 = (uint64_t *)result[7];
    uint64_t v24 = (uint64_t *)result[8];
    uint64_t v25 = (uint64_t *)result[17];
    uint64_t v26 = *v24;
    uint64_t v27 = v24[1];
    uint64_t v28 = v24[2];
    uint64_t v29 = v23[2];
    uint64_t v30 = v29 + v28 * v17 + 2 * v16;
    uint64_t v31 = *v25;
    uint64_t v32 = v25[1];
    uint64_t v33 = v25[2];
    uint64_t v34 = v20[2];
    uint64_t v35 = (unsigned char *)(v34 + v33 * v21 + v19);
    LOWORD(a5) = *(_WORD *)(v22 + 140);
    LOWORD(a6) = *(_WORD *)(v22 + 142);
    float v36 = (float)*(unsigned int *)(v22 + 136) / (float)*(unsigned int *)(v22 + 128);
    float v37 = (float)LODWORD(a5);
    float v38 = (float)LODWORD(a6);
    float v39 = v36 * *(float *)v22;
    float v40 = v36 * *(float *)(v22 + 8);
    float v41 = v36 * *(float *)(v22 + 16);
    float v42 = v36 * *(float *)(v22 + 20);
    float v43 = *(float *)(v22 + 28);
    float v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v22 + 144);
    float v45 = (float)LODWORD(v43);
    LOWORD(v6) = *(_WORD *)(v22 + 146);
    float v46 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v22 + 148);
    float v47 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v22 + 150);
    float v48 = (float)v8;
    LOWORD(v9) = *(_WORD *)(v22 + 152);
    float v49 = (float)v9;
    float v50 = *(float *)(v22 + 36);
    float v51 = *(float *)(v22 + 40);
    float v52 = *(float *)(v22 + 44);
    float v53 = *(float *)(v22 + 48);
    float v54 = *(float *)(v22 + 52);
    float v55 = *(float *)(v22 + 56);
    float v56 = *(float *)(v22 + 60);
    float v57 = *(float *)(v22 + 64);
    float v58 = *(float *)(v22 + 68);
    unsigned int v59 = *(unsigned __int8 *)(v22 + 124);
    char v60 = 16 - v59;
    if (v59 >= 0x11) {
      char v60 = 0;
    }
    uint64_t v62 = *v20;
    uint64_t v61 = v20[1];
    float16x8_t v63 = (unsigned char *)(v61 + v32 * v21 + v19);
    if (!v61) {
      float16x8_t v63 = 0;
    }
    uint64_t result = (void *)(v62 + v31 * v21 + v19);
    uint64_t v65 = *v23;
    uint64_t v64 = v23[1];
    uint64_t v66 = v64 + v27 * v17 + 2 * v16;
    if (!v64) {
      uint64_t v66 = 0;
    }
    uint64_t v67 = v65 + v26 * v17 + 2 * v16;
    char v68 = v60;
    do
    {
      if (v15)
      {
        size_t v69 = 0;
        float16x8_t v70 = (unsigned __int16 *)v67;
        unsigned int v71 = result;
        unsigned __int8 v72 = v63;
        do
        {
          uint64_t v73 = (unsigned __int16 *)(v66 + 2 * v69);
          float v74 = (float)(*v73 >> v68) - v38;
          float v75 = (float)(v73[1] >> v68) - v38;
          float v76 = v40 * v75;
          float v77 = (float)(v42 * v75) + (float)(v74 * v41);
          float v78 = v44 * v74;
          float v79 = v39 * (float)((float)(*v70 >> v68) - v37);
          float v80 = v76 + v79;
          float v81 = v79 + v77;
          float v82 = v78 + v79;
          float v83 = (float)((float)((float)(v51 * v81) + (float)(v50 * v80)) + (float)(v52 * v82)) + v45;
          float v84 = v47;
          if (v83 <= v47)
          {
            float v84 = (float)((float)((float)(v51 * v81) + (float)(v50 * v80)) + (float)(v52 * v82)) + v45;
            if (v83 < v45) {
              float v84 = v45;
            }
          }
          unsigned int v85 = v70[1];
          *unsigned int v71 = llroundf(v84);
          if (v72)
          {
            float v86 = (float)((float)(v46 + (float)(v80 * v53)) + (float)(v81 * v54)) + (float)(v82 * v55);
            float v87 = v49;
            if (v86 <= v49)
            {
              float v87 = (float)((float)(v46 + (float)(v80 * v53)) + (float)(v81 * v54)) + (float)(v82 * v55);
              if (v86 < v48) {
                float v87 = v48;
              }
            }
            float v88 = (float)((float)(v46 + (float)(v80 * v56)) + (float)(v81 * v57)) + (float)(v82 * v58);
            *unsigned __int8 v72 = llroundf(v87);
            float v89 = v49;
            if (v88 <= v49)
            {
              if (v88 < v48) {
                float v89 = v48;
              }
              else {
                float v89 = v88;
              }
            }
            v72[1] = llroundf(v89);
            v72 += 2;
          }
          float v90 = v39 * (float)((float)(int)(v85 >> v68) - v37);
          float v91 = v76 + v90;
          float v92 = v77 + v90;
          float v93 = v78 + v90;
          float v94 = (float)((float)((float)(v51 * v92) + (float)(v50 * v91)) + (float)(v52 * v93)) + v45;
          float v95 = v47;
          if (v94 <= v47)
          {
            float v95 = (float)((float)((float)(v51 * v92) + (float)(v50 * v91)) + (float)(v52 * v93)) + v45;
            if (v94 < v45) {
              float v95 = v45;
            }
          }
          v71[1] = llroundf(v95);
          if (v72)
          {
            float v96 = (float)((float)(v46 + (float)(v91 * v53)) + (float)(v92 * v54)) + (float)(v93 * v55);
            float v97 = v49;
            if (v96 <= v49)
            {
              float v97 = (float)((float)(v46 + (float)(v91 * v53)) + (float)(v92 * v54)) + (float)(v93 * v55);
              if (v96 < v48) {
                float v97 = v48;
              }
            }
            float v98 = (float)((float)(v46 + (float)(v91 * v56)) + (float)(v92 * v57)) + (float)(v93 * v58);
            *unsigned __int8 v72 = llroundf(v97);
            float v99 = v49;
            if (v98 <= v49)
            {
              float v99 = v98;
              if (v98 < v48) {
                float v99 = v48;
              }
            }
            v72[1] = llroundf(v99);
            v72 += 2;
          }
          v69 += 2;
          v70 += 2;
          v71 += 2;
        }
        while (v15 > v69);
      }
      v67 += v26;
      v66 += v27;
      uint64_t result = (void *)((char *)result + v31);
      v63 += v32;
      ++v14;
    }
    while (v14 != v18);
    if (v29 && v34)
    {
      uint64_t v100 = 0;
      do
      {
        if (v15)
        {
          size_t v101 = v15;
          uint16x8_t v102 = v35;
          float16x8_t v103 = (unsigned __int16 *)v30;
          do
          {
            unsigned int v104 = *v103++;
            *v102++ = llroundf((float)v104 * 0.0038911);
            --v101;
          }
          while (v101);
        }
        v30 += v28;
        v35 += v33;
        ++v100;
      }
      while (v100 != v18);
    }
    else if (v34)
    {
      do
      {
        if (v15) {
          uint64_t result = memset(v35, 255, v15);
        }
        v35 += v33;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_xf444_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4, float32x4_t a5)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (void *)result[16];
    unint64_t v17 = result[13] * a2 / v7 + result[15];
    uint64_t v18 = (float32x2_t *)result[19];
    uint64_t v19 = (void *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v249 = v20[2];
    uint64_t v252 = v19[2];
    __src = (char *)(v252 + v249 * v13 + 2 * v12);
    uint64_t v24 = *v21;
    uint64_t v25 = v21[1];
    uint64_t v250 = v21[2];
    uint64_t v251 = v16[2];
    uint64_t v26 = (char *)(v251 + v250 * v17 + 2 * v15);
    unsigned int v27 = v18[17].u16[2];
    unsigned int v28 = v18[17].u16[3];
    a5.i32[0] = v18[3].i32[1];
    unsigned int v29 = v18[18].u16[0];
    unsigned int v30 = v18[18].u16[1];
    unsigned int v31 = v18[18].u16[2];
    unsigned int v32 = v18[18].u16[3];
    unsigned int v33 = v18[19].u16[0];
    _S30 = v18[4].f32[1];
    _S26 = v18[5].f32[1];
    _S6 = v18[6].i32[1];
    _S7 = v18[7].i32[0];
    uint64_t v38 = (char *)&v18[2068] + 4;
    float v309 = (float)v27;
    float v39 = 8191.0 / (float)v18[16].u32[0];
    float v40 = (float)v28;
    float v41 = (float)v29;
    float v42 = (float)v30;
    float v43 = (float)v31;
    *(float *)&a4 = (float)v32;
    float v306 = (float)v32;
    float v44 = (float)v33;
    *(short float *)&a4 = (short float)v27;
    float v45 = (char *)&v18[20] + 4;
    short float v46 = (short float)v28;
    float v47 = (char *)&v18[4116] + 4;
    float v308 = v39 * v18->f32[0];
    __asm { FCVT            H8, S16 }
    short float v266 = _H8;
    float16x8_t v299 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    a5.i32[1] = v18[1].i32[0];
    *(float32x2_t *)v5.f32 = vmul_n_f32(*(float32x2_t *)a5.f32, v39);
    *(float32x2_t *)a5.f32 = vmul_n_f32(v18[2], v39);
    float16x8_t v297 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    float16x8_t v295 = vmulq_n_f16(v297, -v46);
    float16x8_t v296 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    _Q0 = vmulq_n_f16(v296, -v46);
    float16x8_t v294 = _Q0;
    __asm { FCVT            H0, S30 }
    short float v293 = *(short float *)_Q0.i16;
    float v310 = v18[5].f32[0];
    __asm { FCVT            H0, S4 }
    short float v292 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S26 }
    short float v291 = *(short float *)_Q0.i16;
    float v305 = v18[6].f32[0];
    __asm { FCVT            H0, S5 }
    short float v264 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v29;
    int16x8_t v54 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v30;
    float16x8_t v55 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v31;
    int16x8_t v56 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v289 = (float16x8_t)v56;
    float16x8_t v290 = (float16x8_t)v54;
    *(short float *)v56.i16 = (short float)v32;
    int16x8_t v57 = vdupq_lane_s16(*(int16x4_t *)v56.i8, 0);
    float16x8_t v263 = (float16x8_t)v57;
    *(short float *)v57.i16 = (short float)v33;
    float16x8_t v262 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v57.i8, 0);
    unsigned int v58 = v18[16].u8[4];
    if (v58 >= 0x11) {
      unsigned __int8 v59 = 0;
    }
    else {
      unsigned __int8 v59 = 16 - v58;
    }
    unsigned int v60 = v18[15].u8[4];
    if (v60 >= 0x11) {
      unsigned __int8 v61 = 0;
    }
    else {
      unsigned __int8 v61 = 16 - v60;
    }
    uint64_t v64 = v16;
    uint64_t v63 = *v16;
    uint64_t v62 = v64[1];
    if (v62) {
      uint64_t result = (void *)(v62 + v25 * v17 + 2 * v15);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v65 = v63 + v24 * v17 + 2 * v15;
    char v68 = v19;
    uint64_t v67 = *v19;
    uint64_t v66 = v68[1];
    if (v66) {
      uint64_t v69 = v66 + v23 * v13 + 2 * v12;
    }
    else {
      uint64_t v69 = 0;
    }
    uint64_t v70 = v67 + v22 * v13 + 2 * v12;
    unsigned __int8 v71 = v61;
    unsigned __int8 v72 = v59;
    float v304 = v18[6].f32[1];
    __asm { FCVT            H0, S6 }
    short float v261 = _H0;
    _S5 = v18[13].f32[1];
    _S10 = v18[14].f32[0];
    float v303 = v18[7].f32[0];
    __asm { FCVT            H7, S7 }
    short float v260 = _H7;
    float v302 = v18[7].f32[1];
    __asm { FCVT            H0, S0 }
    short float v259 = _H0;
    float v301 = v18[8].f32[0];
    __asm { FCVT            H0, S1 }
    short float v258 = _H0;
    _S11 = v18[14].f32[1];
    float v300 = v18[8].f32[1];
    __asm { FCVT            H1, S6 }
    short float v257 = _H1;
    __asm { FCVT            H1, S5 }
    short float v279 = _H1;
    __asm { FCVT            H1, S10 }
    short float v278 = _H1;
    __asm { FCVT            H1, S11 }
    short float v277 = _H1;
    float v307 = v18[15].f32[0];
    __asm { FCVT            H0, S0 }
    short float v276 = _H0;
    float v288 = v18[9].f32[0];
    __asm { FCVT            H0, S21 }
    short float v275 = _H0;
    float v287 = v18[9].f32[1];
    __asm { FCVT            H0, S23 }
    short float v274 = _H0;
    float v286 = v18[10].f32[0];
    __asm { FCVT            H0, S24 }
    short float v273 = _H0;
    float v285 = v18[10].f32[1];
    __asm { FCVT            H0, S27 }
    short float v272 = _H0;
    float v284 = v18[11].f32[0];
    __asm { FCVT            H0, S28 }
    short float v271 = _H0;
    float v283 = v18[11].f32[1];
    __asm { FCVT            H0, S29 }
    short float v270 = _H0;
    float v282 = v18[12].f32[0];
    __asm { FCVT            H0, S31 }
    short float v269 = _H0;
    float v281 = v18[12].f32[1];
    __asm { FCVT            H0, S3 }
    short float v268 = _H0;
    uint16x8_t v267 = (uint16x8_t)vdupq_n_s16(-v61);
    uint16x8_t v93 = (uint16x8_t)vdupq_n_s16(v59);
    float v298 = v5.f32[0];
    unint64_t v94 = a5.i64[0];
    v95.i64[0] = 0x9000900090009000;
    v95.i64[1] = 0x9000900090009000;
    float v280 = v18[13].f32[0];
    __asm { FCVT            H0, S4 }
    short float v265 = _H0;
    uint64_t v255 = v23;
    uint64_t v256 = v22;
    uint64_t v253 = v21[1];
    uint64_t v254 = *v21;
    do
    {
      if ((int)v11 < 8)
      {
        unint64_t v168 = 0;
        size_t v101 = (__int16 *)result;
        uint64_t v100 = (uint16x8_t *)v65;
        float v99 = (uint16x8_t *)v69;
        float v98 = (uint16x8_t *)v70;
      }
      else
      {
        int v97 = 0;
        float v98 = (uint16x8_t *)v70;
        float v99 = (uint16x8_t *)v69;
        uint64_t v100 = (uint16x8_t *)v65;
        size_t v101 = (__int16 *)result;
        do
        {
          uint16x8_t v102 = *v99++;
          float16x8_t v103 = vcvtq_f16_u16(vshlq_u16(v102, v267));
          int8x16_t v104 = (int8x16_t)vmlaq_f16(v295, v297, v103);
          int16x8_t v105 = (int16x8_t)vmlaq_f16(v294, v296, v103);
          v103.i64[0] = vextq_s8(v104, v104, 8uLL).u64[0];
          *(int16x4_t *)v106.i8 = vuzp1_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v103.i8);
          *(int16x4_t *)v103.i8 = vuzp2_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v103.i8);
          v103.i64[1] = v103.i64[0];
          v106.i64[1] = v103.i64[0];
          float16x8_t v107 = (float16x8_t)vzip1q_s16((int16x8_t)v103, (int16x8_t)v103);
          float16x8_t v108 = (float16x8_t)vzip1q_s16(v106, v106);
          v106.i64[0] = vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u64[0];
          *(float16x4_t *)v105.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v106.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v106.i8));
          v105.i64[1] = v107.i64[0];
          uint16x8_t v109 = *v98++;
          float16x8_t v110 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v109, v267)), v299);
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v107, v110, v266), (float16x8_t)0), v95));
          uint32x4_t v112 = vmovl_high_u16(v111);
          uint32x4_t v113 = vmovl_u16(*(uint16x4_t *)v111.i8);
          v114.i16[0] = *(_WORD *)&v45[2 * v113.u32[0]];
          v114.i16[1] = *(_WORD *)&v45[2 * v113.u32[1]];
          v114.i16[2] = *(_WORD *)&v45[2 * v113.u32[2]];
          v114.i16[3] = *(_WORD *)&v45[2 * v113.u32[3]];
          v114.i16[4] = *(_WORD *)&v45[2 * v112.u32[0]];
          v114.i16[5] = *(_WORD *)&v45[2 * v112.u32[1]];
          v114.i16[6] = *(_WORD *)&v45[2 * v112.u32[2]];
          v114.i16[7] = *(_WORD *)&v45[2 * v112.u32[3]];
          uint16x8_t v115 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16(v105, v105), v110, v266), (float16x8_t)0), v95));
          uint32x4_t v116 = vmovl_high_u16(v115);
          float16x8_t v117 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v115.i8);
          v117.i16[0] = *(_WORD *)&v45[2 * v117.u32[0]];
          v117.i16[1] = *(_WORD *)&v45[2 * v117.u32[1]];
          v117.i16[2] = *(_WORD *)&v45[2 * v117.u32[2]];
          v117.i16[3] = *(_WORD *)&v45[2 * v117.u32[3]];
          v117.i16[4] = *(_WORD *)&v45[2 * v116.u32[0]];
          v117.i16[5] = *(_WORD *)&v45[2 * v116.u32[1]];
          v117.i16[6] = *(_WORD *)&v45[2 * v116.u32[2]];
          v117.i16[7] = *(_WORD *)&v45[2 * v116.u32[3]];
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v108, v110, v266), (float16x8_t)0), v95));
          uint32x4_t v119 = vmovl_high_u16(v118);
          float16x8_t v120 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v118.i8);
          v120.i16[0] = *(_WORD *)&v45[2 * v120.u32[0]];
          v120.i16[1] = *(_WORD *)&v45[2 * v120.u32[1]];
          v120.i16[2] = *(_WORD *)&v45[2 * v120.u32[2]];
          v120.i16[3] = *(_WORD *)&v45[2 * v120.u32[3]];
          v120.i16[4] = *(_WORD *)&v45[2 * v119.u32[0]];
          v120.i16[5] = *(_WORD *)&v45[2 * v119.u32[1]];
          v120.i16[6] = *(_WORD *)&v45[2 * v119.u32[2]];
          v120.i16[7] = *(_WORD *)&v45[2 * v119.u32[3]];
          uint16x8_t v121 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v114, v279), v117, v278), v120, v277), vmaxq_f16(vmaxq_f16(v114, v117), v120), v276), (float16x8_t)0), v95));
          uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v121.i8);
          float16x8_t v123 = (float16x8_t)vmovl_high_u16(v121);
          uint64_t v124 = v123.u32[0];
          v123.i16[0] = *(_WORD *)&v38[2 * v122.u32[0]];
          float v125 = (__int16 *)&v38[2 * v124];
          float v126 = (__int16 *)&v38[2 * v123.u32[1]];
          float v127 = (__int16 *)&v38[2 * v123.u32[2]];
          float v128 = (__int16 *)&v38[2 * v123.u32[3]];
          v123.i16[1] = *(_WORD *)&v38[2 * v122.u32[1]];
          v123.i16[2] = *(_WORD *)&v38[2 * v122.u32[2]];
          v123.i16[3] = *(_WORD *)&v38[2 * v122.u32[3]];
          v123.i16[4] = *v125;
          v123.i16[5] = *v126;
          v123.i16[6] = *v127;
          v123.i16[7] = *v128;
          float16x8_t v129 = vmulq_f16(v114, v123);
          float16x8_t v130 = vmulq_f16(v117, v123);
          float16x8_t v131 = vmulq_f16(v120, v123);
          float16x8_t v132 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v275), v130, v274), v131, v273);
          float16x8_t v133 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v272), v130, v271), v131, v270);
          float16x8_t v134 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v131, v265), v130, v268), v129, v269);
          uint16x8_t v135 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v132, (float16x8_t)0), v95));
          uint32x4_t v136 = vmovl_u16(*(uint16x4_t *)v135.i8);
          uint64_t v137 = v136.u32[1];
          uint64_t v138 = v136.u32[0];
          uint32x4_t v139 = vmovl_high_u16(v135);
          uint64_t v140 = v136.u32[3];
          uint64_t v141 = v136.u32[2];
          uint64_t v142 = v139.u32[1];
          uint64_t v143 = v139.u32[0];
          uint64_t v144 = v139.u32[3];
          uint64_t v145 = v139.u32[2];
          uint16x8_t v146 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v133, (float16x8_t)0), v95));
          uint32x4_t v147 = vmovl_u16(*(uint16x4_t *)v146.i8);
          uint64_t v148 = v147.u32[1];
          uint64_t v149 = v147.u32[0];
          v150.i16[0] = *(_WORD *)&v47[2 * v138];
          v150.i16[1] = *(_WORD *)&v47[2 * v137];
          v150.i16[2] = *(_WORD *)&v47[2 * v141];
          v150.i16[3] = *(_WORD *)&v47[2 * v140];
          v150.i16[4] = *(_WORD *)&v47[2 * v143];
          v150.i16[5] = *(_WORD *)&v47[2 * v142];
          v150.i16[6] = *(_WORD *)&v47[2 * v145];
          v150.i16[7] = *(_WORD *)&v47[2 * v144];
          uint32x4_t v151 = vmovl_high_u16(v146);
          uint64_t v152 = v147.u32[3];
          uint64_t v153 = v147.u32[2];
          uint64_t v154 = v151.u32[1];
          uint64_t v155 = v151.u32[0];
          uint64_t v156 = v151.u32[3];
          uint64_t v157 = v151.u32[2];
          uint16x8_t v158 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v134, (float16x8_t)0), v95));
          uint32x4_t v159 = vmovl_u16(*(uint16x4_t *)v158.i8);
          v160.i16[0] = *(_WORD *)&v47[2 * v149];
          v160.i16[1] = *(_WORD *)&v47[2 * v148];
          v160.i16[2] = *(_WORD *)&v47[2 * v153];
          v160.i16[3] = *(_WORD *)&v47[2 * v152];
          v160.i16[4] = *(_WORD *)&v47[2 * v155];
          v160.i16[5] = *(_WORD *)&v47[2 * v154];
          v160.i16[6] = *(_WORD *)&v47[2 * v157];
          v160.i16[7] = *(_WORD *)&v47[2 * v156];
          uint32x4_t v161 = vmovl_high_u16(v158);
          uint64_t v162 = v161.u32[0];
          v166.i16[0] = *(_WORD *)&v47[2 * v159.u32[0]];
          float v163 = (__int16 *)&v47[2 * v161.u32[1]];
          BOOL v164 = (__int16 *)&v47[2 * v161.u32[2]];
          float v165 = (__int16 *)&v47[2 * v161.u32[3]];
          v166.i16[1] = *(_WORD *)&v47[2 * v159.u32[1]];
          v166.i16[2] = *(_WORD *)&v47[2 * v159.u32[2]];
          v166.i16[3] = *(_WORD *)&v47[2 * v159.u32[3]];
          v166.i16[4] = *(_WORD *)&v47[2 * v162];
          v166.i16[5] = *v163;
          v166.i16[6] = *v164;
          v166.i16[7] = *v165;
          *v100++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v290, v150, v293), v160, v292), v166, v291), v290), v289)), v93);
          if (v101)
          {
            float16x8_t v167 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v55, v150, v259), v160, v258), v166, v257);
            v311.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v55, v150, v264), v160, v261), v166, v260), v263), v262), v263), v262)), v93);
            v311.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(v167), v93);
            vst2q_s16(v101, v311);
            v101 += 16;
          }
          v97 += 8;
        }
        while (v97 < (int)v11 - 7);
        unint64_t v168 = v11 & 0xFFFFFFF8;
        uint64_t v25 = v253;
        uint64_t v23 = v255;
        uint64_t v22 = v256;
        uint64_t v24 = v254;
      }
      while (v11 > v168)
      {
        float v169 = (float)(v99->u16[1] >> v71) - v40;
        float v170 = v5.f32[1] * v169;
        float v171 = v308 * (float)((float)(v98->u16[0] >> v71) - v309);
        float v172 = (float)(v5.f32[1] * v169) + v171;
        float v173 = 8191.0;
        if (v172 <= 8191.0)
        {
          float v173 = (float)(v5.f32[1] * v169) + v171;
          if (v172 < 0.0) {
            float v173 = 0.0;
          }
        }
        float v174 = _S26;
        float v175 = v40;
        float v176 = (float)(v99->u16[0] >> v71) - v40;
        float v177 = (float)(*((float *)&v94 + 1) * v169) + (float)(v176 * *(float *)&v94);
        float v178 = 8191.0;
        if ((float)(v171 + v177) <= 8191.0)
        {
          float v178 = v171 + v177;
          if ((float)(v171 + v177) < 0.0) {
            float v178 = 0.0;
          }
        }
        float v179 = _S30;
        float v180 = v298 * v176;
        float v181 = v180 + v171;
        BOOL v182 = (float)(v180 + v171) <= 8191.0;
        float v183 = 8191.0;
        if (v182)
        {
          float v183 = v181;
          if (v181 < 0.0) {
            float v183 = 0.0;
          }
        }
        float v184 = v308 * (float)((float)(v98->u16[1] >> v71) - v309);
        float v185 = v170 + v184;
        float v186 = 8191.0;
        if (v185 <= 8191.0)
        {
          float v186 = v185;
          if (v185 < 0.0) {
            float v186 = 0.0;
          }
        }
        float v187 = v177 + v184;
        float v188 = 8191.0;
        if (v187 <= 8191.0)
        {
          float v188 = v187;
          if (v187 < 0.0) {
            float v188 = 0.0;
          }
        }
        float v189 = v180 + v184;
        float v190 = 8191.0;
        if (v189 <= 8191.0)
        {
          float v190 = v189;
          if (v189 < 0.0) {
            float v190 = 0.0;
          }
        }
        _H0 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v173, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        _H1 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v178, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H6 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v183, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        float v197 = (float)((float)((float)(_S10 * _S1) + (float)(_S5 * _S0)) + (float)(_S11 * _S6))
             + (float)(v307 * fmaxf(_S0, fmaxf(_S1, _S6)));
        float v198 = 8191.0;
        if (v197 <= 8191.0)
        {
          float v198 = v197;
          if (v197 < 0.0) {
            float v198 = 0.0;
          }
        }
        _H16 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v186, 0.0), 8191.0))];
        __asm { FCVT            S17, H16 }
        _H2 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v188, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H7 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v190, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        _H21 = *(_WORD *)&v38[2 * llroundf(v198)];
        float v206 = (float)((float)((float)(_S10 * _S2) + (float)(_S5 * _S17)) + (float)(_S11 * _S7))
             + (float)(v307 * fmaxf(_S17, fmaxf(_S2, _S7)));
        float v207 = 8191.0;
        if (v206 <= 8191.0)
        {
          float v207 = v206;
          if (v206 < 0.0) {
            float v207 = 0.0;
          }
        }
        __asm { FCVT            S21, H21 }
        float v209 = _S0 * _S21;
        float v210 = _S1 * _S21;
        _S6 = _S6 * _S21;
        _H16 = *(_WORD *)&v38[2 * llroundf(v207)];
        __asm { FCVT            S16, H16 }
        float v214 = _S17 * _S16;
        _S2 = _S2 * _S16;
        float v216 = _S7 * _S16;
        float v217 = (float)((float)(v287 * v210) + (float)(v209 * v288)) + (float)(_S6 * v286);
        float v218 = (float)((float)(v284 * v210) + (float)(v209 * v285)) + (float)(_S6 * v283);
        _S0 = (float)((float)(v281 * v210) + (float)(v209 * v282)) + (float)(_S6 * v280);
        float v220 = (float)((float)(v287 * _S2) + (float)(v214 * v288)) + (float)(v216 * v286);
        float v221 = (float)((float)(v284 * _S2) + (float)(v214 * v285)) + (float)(v216 * v283);
        unsigned int v222 = llroundf(fminf(fmaxf(v217, 0.0), 8191.0));
        float v223 = (float)((float)(v281 * _S2) + (float)(v214 * v282)) + (float)(v216 * v280);
        LOWORD(_S2) = *(_WORD *)&v47[2 * v222];
        __asm { FCVT            S2, H2 }
        LOWORD(_S6) = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v218, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        LOWORD(_S0) = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
        __asm { FCVT            S7, H0 }
        _H0 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v220, 0.0), 8191.0))];
        _H1 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v221, 0.0), 8191.0))];
        _H21 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v223, 0.0), 8191.0))];
        _S30 = v179;
        float v230 = (float)(v310 * _S6) + (float)(v179 * _S2);
        _S26 = v174;
        float v231 = (float)(v230 + (float)(v174 * _S7)) + v41;
        float v232 = v43;
        if (v231 <= v43)
        {
          float v232 = v231;
          if (v231 < v41) {
            float v232 = v41;
          }
        }
        v100->i16[0] = llroundf(v232) << v72;
        if (v101)
        {
          float v233 = (float)((float)(v42 + (float)(_S2 * v305)) + (float)(_S6 * v304)) + (float)(_S7 * v303);
          float v234 = v44;
          if (v233 <= v44)
          {
            float v234 = (float)((float)(v42 + (float)(_S2 * v305)) + (float)(_S6 * v304)) + (float)(_S7 * v303);
            if (v233 < v306) {
              float v234 = v306;
            }
          }
          float v235 = (float)((float)(v42 + (float)(_S2 * v302)) + (float)(_S6 * v301)) + (float)(_S7 * v300);
          __int16 *v101 = llroundf(v234) << v72;
          float v236 = v44;
          if (v235 <= v44)
          {
            float v236 = v235;
            if (v235 < v306) {
              float v236 = v306;
            }
          }
          v101[1] = llroundf(v236) << v72;
          v101 += 2;
          float v40 = v175;
        }
        else
        {
          float v40 = v175;
        }
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
          FCVT            S2, H21
        }
        float v240 = (float)((float)((float)(v310 * _S1) + (float)(_S30 * _S0)) + (float)(v174 * _S2)) + v41;
        float v241 = v43;
        if (v240 <= v43)
        {
          float v241 = (float)((float)((float)(v310 * _S1) + (float)(_S30 * _S0)) + (float)(v174 * _S2)) + v41;
          if (v240 < v41) {
            float v241 = v41;
          }
        }
        v100->i16[1] = llroundf(v241) << v72;
        if (v101)
        {
          float v242 = (float)((float)(v42 + (float)(_S0 * v305)) + (float)(_S1 * v304)) + (float)(_S2 * v303);
          float v243 = v44;
          if (v242 <= v44)
          {
            float v243 = (float)((float)(v42 + (float)(_S0 * v305)) + (float)(_S1 * v304)) + (float)(_S2 * v303);
            if (v242 < v306) {
              float v243 = v306;
            }
          }
          float v244 = (float)((float)(v42 + (float)(_S0 * v302)) + (float)(_S1 * v301)) + (float)(_S2 * v300);
          __int16 *v101 = llroundf(v243) << v72;
          float v245 = v44;
          if (v244 <= v44)
          {
            float v245 = v244;
            if (v244 < v306) {
              float v245 = v306;
            }
          }
          v101[1] = llroundf(v245) << v72;
          v101 += 2;
        }
        v168 += 2;
        float v99 = (uint16x8_t *)((char *)v99 + 4);
        float v98 = (uint16x8_t *)((char *)v98 + 4);
        uint64_t v100 = (uint16x8_t *)((char *)v100 + 4);
      }
      v70 += v22;
      v69 += v23;
      v65 += v24;
      uint64_t result = (void *)((char *)result + v25);
      ++v10;
    }
    while (v10 != v14);
    if (v252 && v251)
    {
      size_t v246 = 2 * v11;
      float v247 = __src;
      do
      {
        uint64_t result = memcpy(v26, v247, v246);
        v247 += v249;
        v26 += v250;
        --v14;
      }
      while (v14);
    }
    else if (v251)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v26, 255, 2 * v11);
        }
        v26 += v250;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Tone_Mat_TRC_xf444_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    unint64_t v15 = result[13] * a2 / v6;
    uint64_t v16 = (void *)result[16];
    unint64_t v17 = v15 + result[15];
    uint64_t v18 = result[19];
    uint64_t v19 = (void *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = (char *)(v25 + v24 * v12 + 2 * v11);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (char *)(v30 + v29 * v17 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v18 + 140);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    float v33 = (float)LODWORD(a5);
    float v170 = v32 * *(float *)v18;
    float v171 = (float)LODWORD(a4);
    float v161 = v32 * *(float *)(v18 + 16);
    float v162 = v32 * *(float *)(v18 + 8);
    float v34 = v32 * *(float *)(v18 + 20);
    *(float *)&unsigned int v35 = v32 * *(float *)(v18 + 28);
    float v159 = *(float *)&v35;
    float v160 = v34;
    LOWORD(v35) = *(_WORD *)(v18 + 144);
    float v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 146);
    float v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 148);
    float v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 150);
    float v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 152);
    float v40 = (float)v35;
    float v41 = *(float *)(v18 + 36);
    float v42 = *(float *)(v18 + 40);
    float v43 = *(float *)(v18 + 44);
    float v168 = *(float *)(v18 + 48);
    float v169 = v39;
    float v166 = *(float *)(v18 + 56);
    float v167 = *(float *)(v18 + 52);
    float v164 = *(float *)(v18 + 64);
    float v165 = *(float *)(v18 + 60);
    float v44 = *(float *)(v18 + 72);
    float v163 = *(float *)(v18 + 68);
    float v46 = *(float *)(v18 + 76);
    float v45 = *(float *)(v18 + 80);
    float v47 = *(float *)(v18 + 84);
    float v48 = *(float *)(v18 + 88);
    float v49 = *(float *)(v18 + 92);
    float v50 = *(float *)(v18 + 96);
    float v51 = *(float *)(v18 + 100);
    float v52 = *(float *)(v18 + 104);
    uint64_t v53 = v18 + 164;
    uint64_t v54 = v18 + 16548;
    unsigned int v55 = *(unsigned __int8 *)(v18 + 132);
    char v56 = 16 - v55;
    if (v55 >= 0x11) {
      char v56 = 0;
    }
    unsigned int v57 = *(unsigned __int8 *)(v18 + 124);
    char v58 = 16 - v57;
    if (v57 >= 0x11) {
      char v58 = 0;
    }
    uint64_t v59 = v16[1];
    _ZF = v59 == 0;
    uint64_t v61 = v59 + v28 * v17;
    uint64_t v62 = *v16 + v27 * v17;
    uint64_t v63 = v18 + 32932;
    uint64_t result = (void *)(v61 + 2 * v14);
    if (_ZF) {
      uint64_t result = 0;
    }
    uint64_t v64 = (_WORD *)(v62 + 2 * v14);
    uint64_t v67 = v19;
    uint64_t v66 = *v19;
    uint64_t v65 = v67[1];
    _ZF = v65 == 0;
    uint64_t v68 = v65 + v23 * v12 + 2 * v11;
    if (_ZF) {
      uint64_t v68 = 0;
    }
    uint64_t v69 = v66 + v22 * v12 + 2 * v11;
    char v70 = v58;
    char v71 = v56;
    float v73 = *(float *)(v18 + 108);
    float v72 = *(float *)(v18 + 112);
    float v74 = *(float *)(v18 + 116);
    float v75 = *(float *)(v18 + 120);
    do
    {
      if (v10)
      {
        unint64_t v76 = 0;
        float v77 = (unsigned __int16 *)v69;
        float v78 = v64;
        float v79 = result;
        do
        {
          float v80 = (unsigned __int16 *)(v68 + 2 * v76);
          float v81 = (float)(v80[1] >> v70) - v33;
          float v82 = v162 * v81;
          float v83 = v170 * (float)((float)(*v77 >> v70) - v171);
          float v84 = (float)(v162 * v81) + v83;
          float v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            float v85 = (float)(v162 * v81) + v83;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v33;
          float v87 = (float)(*v80 >> v70) - v33;
          float v88 = (float)(v160 * v81) + (float)(v87 * v161);
          float v89 = 8191.0;
          if ((float)(v83 + v88) <= 8191.0)
          {
            float v89 = v83 + v88;
            if ((float)(v83 + v88) < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v159 * v87;
          float v91 = v90 + v83;
          BOOL v92 = (float)(v90 + v83) <= 8191.0;
          float v93 = 8191.0;
          if (v92)
          {
            float v93 = v91;
            if (v91 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v170 * (float)((float)(v77[1] >> v70) - v171);
          float v95 = v82 + v94;
          BOOL v92 = (float)(v82 + v94) <= 8191.0;
          float v96 = 8191.0;
          if (v92)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v88 + v94;
          BOOL v92 = (float)(v88 + v94) <= 8191.0;
          float v98 = 8191.0;
          if (v92)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          float v99 = v90 + v94;
          BOOL v92 = (float)(v90 + v94) <= 8191.0;
          float v100 = 8191.0;
          if (v92)
          {
            float v100 = v99;
            if (v99 < 0.0) {
              float v100 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S1, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S2, H0 }
          _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S26, H0 }
          _H19 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          float v113 = fmaxf(_S1, fmaxf(_S2, _S26));
          float v114 = (float)((float)((float)(v72 * _S2) + (float)(v73 * _S1)) + (float)(v74 * _S26)) + (float)(v75 * v113);
          float v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            float v115 = (float)((float)((float)(v72 * _S2) + (float)(v73 * _S1)) + (float)(v74 * _S26)) + (float)(v75 * v113);
            if (v114 < 0.0) {
              float v115 = 0.0;
            }
          }
          __asm
          {
            FCVT            S27, H19
            FCVT            S28, H28
            FCVT            S29, H29
          }
          _H19 = *(_WORD *)(v54 + 2 * llroundf(v115));
          float v120 = (float)((float)((float)(v72 * _S28) + (float)(v73 * _S27)) + (float)(v74 * _S29))
               + (float)(v75 * fmaxf(_S27, fmaxf(_S28, _S29)));
          float v121 = 8191.0;
          if (v120 <= 8191.0)
          {
            float v121 = v120;
            if (v120 < 0.0) {
              float v121 = 0.0;
            }
          }
          __asm { FCVT            S0, H19 }
          float v123 = _S1 * _S0;
          float v124 = _S2 * _S0;
          float v125 = _S26 * _S0;
          _H19 = *(_WORD *)(v54 + 2 * llroundf(v121));
          __asm { FCVT            S19, H19 }
          _S24 = _S27 * _S19;
          float v129 = _S28 * _S19;
          float v130 = _S29 * _S19;
          float v131 = (float)((float)(v46 * v124) + (float)(v123 * v44)) + (float)(v125 * v45);
          float v132 = (float)((float)(v48 * v124) + (float)(v123 * v47)) + (float)(v125 * v49);
          _S0 = (float)((float)(v51 * v124) + (float)(v123 * v50)) + (float)(v125 * v52);
          float v134 = (float)((float)(v46 * v129) + (float)(_S24 * v44)) + (float)(v130 * v45);
          float v135 = (float)((float)(v48 * v129) + (float)(_S24 * v47)) + (float)(v130 * v49);
          float v136 = (float)((float)(v51 * v129) + (float)(_S24 * v50)) + (float)(v130 * v52);
          LOWORD(_S24) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          LOWORD(_S24) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S28, H24 }
          LOWORD(_S0) = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S29, H0 }
          _H0 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          float v143 = (float)((float)((float)(v42 * _S28) + (float)(v41 * _S27)) + (float)(v43 * _S29)) + v36;
          float v144 = v38;
          if (v143 <= v38)
          {
            float v144 = (float)((float)((float)(v42 * _S28) + (float)(v41 * _S27)) + (float)(v43 * _S29)) + v36;
            if (v143 < v36) {
              float v144 = v36;
            }
          }
          *float v78 = llroundf(v144) << v71;
          if (v79)
          {
            float v145 = (float)((float)(v37 + (float)(_S27 * v168)) + (float)(_S28 * v167)) + (float)(_S29 * v166);
            float v146 = v40;
            if (v145 <= v40)
            {
              float v146 = (float)((float)(v37 + (float)(_S27 * v168)) + (float)(_S28 * v167)) + (float)(_S29 * v166);
              if (v145 < v169) {
                float v146 = v169;
              }
            }
            float v147 = (float)((float)(v37 + (float)(_S27 * v165)) + (float)(_S28 * v164)) + (float)(_S29 * v163);
            *float v79 = llroundf(v146) << v71;
            float v148 = v40;
            if (v147 <= v40)
            {
              float v148 = (float)((float)(v37 + (float)(_S27 * v165)) + (float)(_S28 * v164)) + (float)(_S29 * v163);
              if (v147 < v169) {
                float v148 = v169;
              }
            }
            v79[1] = llroundf(v148) << v71;
            v79 += 2;
          }
          float v33 = v86;
          __asm
          {
            FCVT            S0, H0
            FCVT            S2, H24
            FCVT            S26, H26
          }
          float v152 = (float)((float)((float)(v42 * _S2) + (float)(v41 * _S0)) + (float)(v43 * _S26)) + v36;
          float v153 = v38;
          if (v152 <= v38)
          {
            float v153 = (float)((float)((float)(v42 * _S2) + (float)(v41 * _S0)) + (float)(v43 * _S26)) + v36;
            if (v152 < v36) {
              float v153 = v36;
            }
          }
          v78[1] = llroundf(v153) << v71;
          if (v79)
          {
            float v154 = (float)((float)(v37 + (float)(_S0 * v168)) + (float)(_S2 * v167)) + (float)(_S26 * v166);
            float v155 = v40;
            if (v154 <= v40)
            {
              float v155 = (float)((float)(v37 + (float)(_S0 * v168)) + (float)(_S2 * v167)) + (float)(_S26 * v166);
              if (v154 < v169) {
                float v155 = v169;
              }
            }
            float v156 = (float)((float)(v37 + (float)(_S0 * v165)) + (float)(_S2 * v164)) + (float)(_S26 * v163);
            *float v79 = llroundf(v155) << v71;
            float v157 = v40;
            if (v156 <= v40)
            {
              float v157 = v156;
              if (v156 < v169) {
                float v157 = v169;
              }
            }
            v79[1] = llroundf(v157) << v71;
            v79 += 2;
          }
          v76 += 2;
          v77 += 2;
          v78 += 2;
        }
        while (v10 > v76);
      }
      v69 += v22;
      v68 += v23;
      uint64_t v64 = (_WORD *)((char *)v64 + v27);
      uint64_t result = (void *)((char *)result + v28);
      ++v9;
    }
    while (v9 != v13);
    if (v25 && v30)
    {
      size_t v158 = 2 * v10;
      do
      {
        uint64_t result = memcpy(v31, v26, v158);
        v26 += v24;
        v31 += v29;
        --v13;
      }
      while (v13);
    }
    else if (v30)
    {
      do
      {
        if (v10) {
          uint64_t result = memset(v31, 255, 2 * v10);
        }
        v31 += v29;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_xf444_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Mat_TRC_xf444_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (uint64_t *)result[16];
    unint64_t v17 = result[13] * a2 / v7 + result[15];
    uint64_t v18 = (float32x2_t *)result[19];
    uint64_t v19 = (uint64_t *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v23 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v214 = v20[2];
    uint64_t v217 = v19[2];
    uint64_t v24 = (char *)(v217 + v214 * v13 + 2 * v12);
    uint64_t v25 = *v21;
    uint64_t v26 = v21[1];
    uint64_t v215 = v21[2];
    uint64_t v216 = v16[2];
    uint64_t v27 = (char *)(v216 + v215 * v17 + 2 * v15);
    unsigned int v28 = v18[17].u16[2];
    unsigned int v29 = v18[17].u16[3];
    v30.i32[0] = v18[3].i32[1];
    unsigned int v31 = v18[18].u16[0];
    unsigned int v32 = v18[18].u16[1];
    unsigned int v33 = v18[18].u16[2];
    unsigned int v34 = v18[18].u16[3];
    unsigned int v35 = v18[19].u16[0];
    _S17 = v18[4].f32[1];
    _S18 = v18[5].f32[0];
    _S4 = v18[5].i32[1];
    _S5 = v18[6].i32[0];
    _S6 = v18[6].i32[1];
    _S7 = v18[7].i32[0];
    _S16 = v18[7].f32[1];
    _S19 = v18[8].i32[0];
    *(float *)&a6 = (float)v28;
    float v255 = (float)v28;
    *(short float *)&a6 = (short float)v28;
    float v44 = (char *)&v18[20] + 4;
    *(float *)&a3 = 8191.0 / (float)v18[16].u32[0];
    float v45 = (float)v29;
    float v46 = (float)v31;
    float v47 = (float)v32;
    float v48 = (float)v33;
    float v252 = (float)v34;
    float v49 = (float)v35;
    short float v50 = (short float)v29;
    float v51 = (char *)&v18[2068] + 4;
    float v253 = *(float *)&a3 * v18->f32[0];
    float v254 = v45;
    __asm { FCVT            H8, S25 }
    float32x4_t v58 = (float32x4_t)vdupq_lane_s16(*(int16x4_t *)&a6, 0);
    float16x8_t v246 = (float16x8_t)v58;
    short float v57 = -v50;
    v30.i32[1] = v18[1].i32[0];
    *(float32x2_t *)v58.f32 = vmul_n_f32(v30, *(float *)&a3);
    *(double *)&v59.i64[1] = a3;
    *(float32x2_t *)v59.f32 = vmul_n_f32(v18[2], *(float *)&a3);
    float16x8_t v245 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v58), 0);
    float16x8_t v243 = vmulq_n_f16(v245, v57);
    float16x8_t v244 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v59), 0);
    _Q0 = vmulq_n_f16(v244, v57);
    float16x8_t v242 = _Q0;
    __asm { FCVT            H0, S17 }
    short float v241 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v31;
    int16x8_t v61 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v32;
    int16x8_t v62 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v227 = (float16x8_t)v62;
    *(short float *)v62.i16 = (short float)v33;
    int16x8_t v63 = vdupq_lane_s16(*(int16x4_t *)v62.i8, 0);
    float16x8_t v239 = (float16x8_t)v63;
    float16x8_t v240 = (float16x8_t)v61;
    *(short float *)v63.i16 = (short float)v34;
    int16x8_t v64 = vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    *(short float *)v63.i16 = (short float)v35;
    float16x8_t v225 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    float16x8_t v226 = (float16x8_t)v64;
    unsigned int v65 = v18[16].u8[4];
    unsigned __int8 v66 = 16 - v65;
    if (v65 >= 0x11) {
      unsigned __int8 v66 = 0;
    }
    unsigned int v67 = v18[15].u8[4];
    unsigned __int8 v68 = 16 - v67;
    if (v67 >= 0x11) {
      unsigned __int8 v68 = 0;
    }
    uint64_t v70 = *v16;
    uint64_t v69 = v16[1];
    uint64_t v71 = v69 + v26 * v17 + 2 * v15;
    if (!v69) {
      uint64_t v71 = 0;
    }
    uint64_t result = (void *)(v70 + v25 * v17 + 2 * v15);
    uint64_t v73 = *v19;
    uint64_t v72 = v19[1];
    uint64_t v74 = v72 + v22 * v13 + 2 * v12;
    if (!v72) {
      uint64_t v74 = 0;
    }
    uint64_t v75 = v73 + v23 * v13 + 2 * v12;
    unsigned __int8 v76 = v68;
    unsigned __int8 v77 = v66;
    _S25 = v18[9].f32[0];
    _S26 = v18[9].f32[1];
    _S27 = v18[10].f32[0];
    _S28 = v18[10].f32[1];
    _S29 = v18[11].f32[0];
    _S9 = v18[11].f32[1];
    _S30 = v18[12].f32[0];
    __asm { FCVT            H1, S18 }
    short float v238 = _H1;
    float v86 = v18[5].f32[1];
    __asm { FCVT            H1, S4 }
    short float v237 = _H1;
    float v251 = v18[6].f32[0];
    __asm { FCVT            H1, S5 }
    short float v224 = _H1;
    _S31 = v18[12].f32[1];
    _S12 = v18[13].f32[0];
    float v250 = v18[6].f32[1];
    __asm { FCVT            H1, S6 }
    short float v223 = _H1;
    float v249 = v18[7].f32[0];
    __asm { FCVT            H1, S7 }
    short float v222 = _H1;
    __asm { FCVT            H1, S16 }
    short float v221 = _H1;
    float v248 = v18[8].f32[0];
    __asm { FCVT            H1, S19 }
    short float v220 = _H1;
    float v247 = v18[8].f32[1];
    __asm { FCVT            H0, S0 }
    short float v219 = _H0;
    __asm { FCVT            H0, S25 }
    short float v236 = _H0;
    __asm { FCVT            H0, S26 }
    short float v235 = _H0;
    __asm { FCVT            H0, S27 }
    short float v234 = _H0;
    __asm { FCVT            H0, S28 }
    short float v233 = _H0;
    __asm { FCVT            H0, S29 }
    short float v232 = _H0;
    __asm { FCVT            H0, S9 }
    short float v231 = _H0;
    __asm { FCVT            H0, S30 }
    short float v230 = _H0;
    __asm { FCVT            H0, S31 }
    short float v229 = _H0;
    uint16x8_t v104 = (uint16x8_t)vdupq_n_s16(-v68);
    uint16x8_t v105 = (uint16x8_t)vdupq_n_s16(v66);
    __asm { FCVT            H0, S12 }
    short float v228 = _H0;
    uint64_t v107 = v58.i64[0];
    uint64_t v108 = v59.i64[0];
    v109.i64[0] = 0x9000900090009000;
    v109.i64[1] = 0x9000900090009000;
    uint64_t v218 = v21[1];
    do
    {
      if ((int)v11 < 8)
      {
        unint64_t v150 = 0;
        float v114 = (__int16 *)v71;
        float v113 = (uint16x8_t *)result;
        uint32x4_t v112 = (uint16x8_t *)v74;
        uint16x8_t v111 = (uint16x8_t *)v75;
      }
      else
      {
        int v110 = 0;
        uint16x8_t v111 = (uint16x8_t *)v75;
        uint32x4_t v112 = (uint16x8_t *)v74;
        float v113 = (uint16x8_t *)result;
        float v114 = (__int16 *)v71;
        do
        {
          uint16x8_t v115 = *v112++;
          float16x8_t v116 = vcvtq_f16_u16(vshlq_u16(v115, v104));
          int16x8_t v117 = (int16x8_t)vmlaq_f16(v243, v245, v116);
          int8x16_t v118 = (int8x16_t)vmlaq_f16(v242, v244, v116);
          v116.i64[0] = vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL).u64[0];
          *(int16x4_t *)v119.i8 = vuzp1_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v116.i8);
          *(int16x4_t *)v116.i8 = vuzp2_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v116.i8);
          v116.i64[1] = v116.i64[0];
          v119.i64[1] = v116.i64[0];
          float16x8_t v120 = (float16x8_t)vzip1q_s16((int16x8_t)v116, (int16x8_t)v116);
          float16x8_t v121 = (float16x8_t)vzip1q_s16(v119, v119);
          v117.i64[0] = vextq_s8(v118, v118, 8uLL).u64[0];
          *(float16x4_t *)v117.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v117.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v117.i8));
          v117.i64[1] = v120.i64[0];
          uint16x8_t v122 = *v111++;
          float16x8_t v123 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v122, v104)), v246);
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v120, v123, _H8), (float16x8_t)0), v109));
          uint32x4_t v125 = vmovl_high_u16(v124);
          uint32x4_t v126 = vmovl_u16(*(uint16x4_t *)v124.i8);
          v127.i16[0] = *(_WORD *)&v44[2 * v126.u32[0]];
          v127.i16[1] = *(_WORD *)&v44[2 * v126.u32[1]];
          v127.i16[2] = *(_WORD *)&v44[2 * v126.u32[2]];
          v127.i16[3] = *(_WORD *)&v44[2 * v126.u32[3]];
          v127.i16[4] = *(_WORD *)&v44[2 * v125.u32[0]];
          v127.i16[5] = *(_WORD *)&v44[2 * v125.u32[1]];
          v127.i16[6] = *(_WORD *)&v44[2 * v125.u32[2]];
          v127.i16[7] = *(_WORD *)&v44[2 * v125.u32[3]];
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16(v117, v117), v123, _H8), (float16x8_t)0), v109));
          uint32x4_t v129 = vmovl_high_u16(v128);
          uint32x4_t v130 = vmovl_u16(*(uint16x4_t *)v128.i8);
          v131.i16[0] = *(_WORD *)&v44[2 * v130.u32[0]];
          v131.i16[1] = *(_WORD *)&v44[2 * v130.u32[1]];
          v131.i16[2] = *(_WORD *)&v44[2 * v130.u32[2]];
          v131.i16[3] = *(_WORD *)&v44[2 * v130.u32[3]];
          v131.i16[4] = *(_WORD *)&v44[2 * v129.u32[0]];
          v131.i16[5] = *(_WORD *)&v44[2 * v129.u32[1]];
          v131.i16[6] = *(_WORD *)&v44[2 * v129.u32[2]];
          v131.i16[7] = *(_WORD *)&v44[2 * v129.u32[3]];
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v121, v123, _H8), (float16x8_t)0), v109));
          uint32x4_t v133 = vmovl_high_u16(v132);
          float16x8_t v134 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v132.i8);
          v134.i16[0] = *(_WORD *)&v44[2 * v134.u32[0]];
          v134.i16[1] = *(_WORD *)&v44[2 * v134.u32[1]];
          v134.i16[2] = *(_WORD *)&v44[2 * v134.u32[2]];
          v134.i16[3] = *(_WORD *)&v44[2 * v134.u32[3]];
          v134.i16[4] = *(_WORD *)&v44[2 * v133.u32[0]];
          v134.i16[5] = *(_WORD *)&v44[2 * v133.u32[1]];
          v134.i16[6] = *(_WORD *)&v44[2 * v133.u32[2]];
          v134.i16[7] = *(_WORD *)&v44[2 * v133.u32[3]];
          float16x8_t v135 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v127, v233), v131, v232), v134, v231);
          float16x8_t v136 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v134, v228), v131, v229), v127, v230);
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v127, v236), v131, v235), v134, v234), (float16x8_t)0), v109));
          uint32x4_t v138 = vmovl_high_u16(v137);
          uint32x4_t v139 = vmovl_u16(*(uint16x4_t *)v137.i8);
          v140.i16[0] = *(_WORD *)&v51[2 * v139.u32[0]];
          v140.i16[1] = *(_WORD *)&v51[2 * v139.u32[1]];
          v140.i16[2] = *(_WORD *)&v51[2 * v139.u32[2]];
          v140.i16[3] = *(_WORD *)&v51[2 * v139.u32[3]];
          v140.i16[4] = *(_WORD *)&v51[2 * v138.u32[0]];
          v140.i16[5] = *(_WORD *)&v51[2 * v138.u32[1]];
          v140.i16[6] = *(_WORD *)&v51[2 * v138.u32[2]];
          v140.i16[7] = *(_WORD *)&v51[2 * v138.u32[3]];
          uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v135, (float16x8_t)0), v109));
          uint32x4_t v142 = vmovl_high_u16(v141);
          uint32x4_t v143 = vmovl_u16(*(uint16x4_t *)v141.i8);
          v144.i16[0] = *(_WORD *)&v51[2 * v143.u32[0]];
          v144.i16[1] = *(_WORD *)&v51[2 * v143.u32[1]];
          v144.i16[2] = *(_WORD *)&v51[2 * v143.u32[2]];
          v144.i16[3] = *(_WORD *)&v51[2 * v143.u32[3]];
          v144.i16[4] = *(_WORD *)&v51[2 * v142.u32[0]];
          v144.i16[5] = *(_WORD *)&v51[2 * v142.u32[1]];
          v144.i16[6] = *(_WORD *)&v51[2 * v142.u32[2]];
          v144.i16[7] = *(_WORD *)&v51[2 * v142.u32[3]];
          uint16x8_t v145 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v136, (float16x8_t)0), v109));
          uint32x4_t v146 = vmovl_high_u16(v145);
          uint32x4_t v147 = vmovl_u16(*(uint16x4_t *)v145.i8);
          v148.i16[0] = *(_WORD *)&v51[2 * v147.u32[0]];
          v148.i16[1] = *(_WORD *)&v51[2 * v147.u32[1]];
          v148.i16[2] = *(_WORD *)&v51[2 * v147.u32[2]];
          v148.i16[3] = *(_WORD *)&v51[2 * v147.u32[3]];
          v148.i16[4] = *(_WORD *)&v51[2 * v146.u32[0]];
          v148.i16[5] = *(_WORD *)&v51[2 * v146.u32[1]];
          v148.i16[6] = *(_WORD *)&v51[2 * v146.u32[2]];
          v148.i16[7] = *(_WORD *)&v51[2 * v146.u32[3]];
          *v113++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v240, v140, v241), v144, v238), v148, v237), v240), v239)), v105);
          if (v114)
          {
            float16x8_t v149 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v227, v140, v221), v144, v220), v148, v219);
            v256.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v227, v140, v224), v144, v223), v148, v222), v226), v225), v226), v225)), v105);
            v256.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(v149), v105);
            vst2q_s16(v114, v256);
            v114 += 16;
          }
          v110 += 8;
        }
        while (v110 < (int)v11 - 7);
        unint64_t v150 = v11 & 0xFFFFFFF8;
        uint64_t v26 = v218;
      }
      while (v11 > v150)
      {
        float v151 = (float)(v112->u16[1] >> v76) - v254;
        float v152 = *((float *)&v107 + 1) * v151;
        float v153 = v253 * (float)((float)(v111->u16[0] >> v76) - v255);
        float v154 = (float)(*((float *)&v107 + 1) * v151) + v153;
        float v155 = 8191.0;
        if (v154 <= 8191.0)
        {
          float v155 = (float)(*((float *)&v107 + 1) * v151) + v153;
          if (v154 < 0.0) {
            float v155 = 0.0;
          }
        }
        float v156 = (float)(v112->u16[0] >> v76) - v254;
        float v157 = (float)(*((float *)&v108 + 1) * v151) + (float)(v156 * *(float *)&v108);
        float v158 = 8191.0;
        if ((float)(v153 + v157) <= 8191.0)
        {
          float v158 = v153 + v157;
          if ((float)(v153 + v157) < 0.0) {
            float v158 = 0.0;
          }
        }
        float v159 = *(float *)&v107 * v156;
        float v160 = 8191.0;
        if ((float)(v159 + v153) <= 8191.0)
        {
          float v160 = v159 + v153;
          if ((float)(v159 + v153) < 0.0) {
            float v160 = 0.0;
          }
        }
        float v161 = v253 * (float)((float)(v111->u16[1] >> v76) - v255);
        float v162 = v152 + v161;
        float v163 = 8191.0;
        if (v162 <= 8191.0)
        {
          float v163 = v162;
          if (v162 < 0.0) {
            float v163 = 0.0;
          }
        }
        float v164 = v157 + v161;
        float v165 = 8191.0;
        if (v164 <= 8191.0)
        {
          float v165 = v164;
          if (v164 < 0.0) {
            float v165 = 0.0;
          }
        }
        float v166 = v159 + v161;
        if ((float)(v159 + v161) < 0.0) {
          float v167 = 0.0;
        }
        else {
          float v167 = v159 + v161;
        }
        unsigned int v168 = llroundf(fminf(fmaxf(v155, 0.0), 8191.0));
        if (v166 <= 8191.0) {
          float v169 = v167;
        }
        else {
          float v169 = 8191.0;
        }
        _H2 = *(_WORD *)&v44[2 * v168];
        __asm { FCVT            S2, H2 }
        _H3 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H11 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0))];
        __asm { FCVT            S11, H11 }
        float v176 = (float)((float)(_S26 * _S3) + (float)(_S2 * _S25)) + (float)(_S11 * _S27);
        float v177 = (float)((float)(_S29 * _S3) + (float)(_S2 * _S28)) + (float)(_S11 * _S9);
        _S2 = (float)((float)(_S31 * _S3) + (float)(_S2 * _S30)) + (float)(_S11 * _S12);
        LOWORD(_S3) = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0))];
        __asm { FCVT            S11, H3 }
        LOWORD(_S3) = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(v177, 0.0), 8191.0))];
        __asm { FCVT            S14, H3 }
        LOWORD(_S2) = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0))];
        __asm { FCVT            S15, H2 }
        float v182 = _S18;
        float v183 = _S18 * _S14;
        float v184 = _S17;
        float v185 = (float)((float)(v183 + (float)(_S17 * _S11)) + (float)(v86 * _S15)) + v46;
        float v186 = v48;
        if (v185 <= v48)
        {
          float v186 = v185;
          if (v185 < v46) {
            float v186 = v46;
          }
        }
        _H3 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0))];
        unsigned int v188 = llroundf(fminf(fmaxf(v165, 0.0), 8191.0));
        __asm { FCVT            S0, H3 }
        _H3 = *(_WORD *)&v44[2 * v188];
        __asm { FCVT            S3, H3 }
        _H1 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        float v194 = (float)((float)(_S26 * _S3) + (float)(_S0 * _S25)) + (float)(_S1 * _S27);
        float v195 = (float)((float)(_S29 * _S3) + (float)(_S0 * _S28)) + (float)(_S1 * _S9);
        float v196 = (float)((float)(_S31 * _S3) + (float)(_S0 * _S30)) + (float)(_S1 * _S12);
        _H0 = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(v194, 0.0), 8191.0))];
        _H1 = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(v195, 0.0), 8191.0))];
        _H13 = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(v196, 0.0), 8191.0))];
        v113->i16[0] = llroundf(v186) << v77;
        if (v114)
        {
          float v200 = (float)((float)(v47 + (float)(_S11 * v251)) + (float)(_S14 * v250)) + (float)(_S15 * v249);
          float v201 = v49;
          if (v200 <= v49)
          {
            float v201 = (float)((float)(v47 + (float)(_S11 * v251)) + (float)(_S14 * v250)) + (float)(_S15 * v249);
            if (v200 < v252) {
              float v201 = v252;
            }
          }
          float v202 = (float)((float)(v47 + (float)(_S11 * _S16)) + (float)(_S14 * v248)) + (float)(_S15 * v247);
          *float v114 = llroundf(v201) << v77;
          float v203 = v49;
          _S17 = v184;
          if (v202 <= v49)
          {
            float v203 = (float)((float)(v47 + (float)(_S11 * _S16)) + (float)(_S14 * v248)) + (float)(_S15 * v247);
            if (v202 < v252) {
              float v203 = v252;
            }
          }
          v114[1] = llroundf(v203) << v77;
          v114 += 2;
        }
        else
        {
          _S17 = v184;
        }
        _S18 = v182;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
          FCVT            S2, H13
        }
        float v207 = (float)((float)((float)(v182 * _S1) + (float)(_S17 * _S0)) + (float)(v86 * _S2)) + v46;
        float v208 = v48;
        if (v207 <= v48)
        {
          float v208 = (float)((float)((float)(v182 * _S1) + (float)(_S17 * _S0)) + (float)(v86 * _S2)) + v46;
          if (v207 < v46) {
            float v208 = v46;
          }
        }
        v113->i16[1] = llroundf(v208) << v77;
        if (v114)
        {
          float v209 = (float)((float)(v47 + (float)(_S0 * v251)) + (float)(_S1 * v250)) + (float)(_S2 * v249);
          float v210 = v49;
          if (v209 <= v49)
          {
            float v210 = (float)((float)(v47 + (float)(_S0 * v251)) + (float)(_S1 * v250)) + (float)(_S2 * v249);
            if (v209 < v252) {
              float v210 = v252;
            }
          }
          float v211 = (float)((float)(v47 + (float)(_S0 * _S16)) + (float)(_S1 * v248)) + (float)(_S2 * v247);
          *float v114 = llroundf(v210) << v77;
          float v212 = v49;
          if (v211 <= v49)
          {
            float v212 = v211;
            if (v211 < v252) {
              float v212 = v252;
            }
          }
          v114[1] = llroundf(v212) << v77;
          v114 += 2;
        }
        v150 += 2;
        uint32x4_t v112 = (uint16x8_t *)((char *)v112 + 4);
        uint16x8_t v111 = (uint16x8_t *)((char *)v111 + 4);
        float v113 = (uint16x8_t *)((char *)v113 + 4);
      }
      v75 += v23;
      v74 += v22;
      uint64_t result = (void *)((char *)result + v25);
      v71 += v26;
      ++v10;
    }
    while (v10 != v14);
    if (v217 && v216)
    {
      size_t v213 = 2 * v11;
      do
      {
        uint64_t result = memcpy(v27, v24, v213);
        v24 += v214;
        v27 += v215;
        --v14;
      }
      while (v14);
    }
    else if (v216)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v27, 255, 2 * v11);
        }
        v27 += v215;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

void *vt_Copy_xf422_TRC_Mat_TRC_xf444_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (uint64_t *)result[16];
    unint64_t v17 = result[13] * a2 / v7 + result[15];
    uint64_t v18 = result[19];
    uint64_t v19 = (uint64_t *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = (char *)(v25 + v24 * v13 + 2 * v12);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (char *)(v30 + v29 * v17 + 2 * v15);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    float v33 = (float)LODWORD(a5);
    float v34 = (float)LODWORD(a6);
    float v35 = v32 * *(float *)v18;
    float v143 = v32 * *(float *)(v18 + 16);
    float v144 = v32 * *(float *)(v18 + 8);
    float v141 = v32 * *(float *)(v18 + 28);
    *(float *)&unsigned int v36 = v141;
    float v142 = v32 * *(float *)(v18 + 20);
    LOWORD(v36) = *(_WORD *)(v18 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 150);
    float v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 152);
    float v41 = (float)v36;
    float v42 = *(float *)(v18 + 36);
    float v43 = *(float *)(v18 + 40);
    float v44 = *(float *)(v18 + 44);
    float v148 = *(float *)(v18 + 52);
    float v149 = *(float *)(v18 + 48);
    float v146 = *(float *)(v18 + 60);
    float v147 = *(float *)(v18 + 56);
    float v45 = *(float *)(v18 + 68);
    float v145 = *(float *)(v18 + 64);
    float v46 = *(float *)(v18 + 72);
    float v47 = *(float *)(v18 + 76);
    float v48 = *(float *)(v18 + 80);
    float v49 = *(float *)(v18 + 84);
    float v50 = *(float *)(v18 + 88);
    float v51 = *(float *)(v18 + 92);
    float v52 = *(float *)(v18 + 96);
    float v53 = *(float *)(v18 + 100);
    float v54 = *(float *)(v18 + 104);
    uint64_t v55 = v18 + 164;
    uint64_t v56 = v18 + 16548;
    unsigned int v57 = *(unsigned __int8 *)(v18 + 132);
    _CF = v57 >= 0x11;
    char v59 = 16 - v57;
    if (_CF) {
      char v60 = 0;
    }
    else {
      char v60 = v59;
    }
    unsigned int v61 = *(unsigned __int8 *)(v18 + 124);
    char v62 = 16 - v61;
    if (v61 >= 0x11) {
      char v62 = 0;
    }
    uint64_t v64 = *v16;
    uint64_t v63 = v16[1];
    uint64_t v65 = v63 + v28 * v17 + 2 * v15;
    if (!v63) {
      uint64_t v65 = 0;
    }
    uint64_t result = (void *)(v64 + v27 * v17 + 2 * v15);
    uint64_t v67 = *v19;
    uint64_t v66 = v19[1];
    uint64_t v68 = v66 + v23 * v13 + 2 * v12;
    if (!v66) {
      uint64_t v68 = 0;
    }
    uint64_t v69 = v67 + v22 * v13 + 2 * v12;
    char v70 = v62;
    char v71 = v60;
    do
    {
      if (v11)
      {
        unint64_t v72 = 0;
        uint64_t v73 = (unsigned __int16 *)v69;
        uint64_t v74 = result;
        uint64_t v75 = (_WORD *)v65;
        do
        {
          unsigned __int8 v76 = (unsigned __int16 *)(v68 + 2 * v72);
          float v77 = (float)(v76[1] >> v70) - v34;
          float v78 = v144 * v77;
          float v79 = v35 * (float)((float)(*v73 >> v70) - v33);
          float v80 = (float)(v144 * v77) + v79;
          float v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            float v81 = (float)(v144 * v77) + v79;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = (float)(*v76 >> v70) - v34;
          float v83 = (float)(v142 * v77) + (float)(v82 * v143);
          float v84 = 8191.0;
          if ((float)(v79 + v83) <= 8191.0)
          {
            float v84 = v79 + v83;
            if ((float)(v79 + v83) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v141 * v82;
          float v86 = (float)(v141 * v82) + v79;
          float v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v35 * (float)((float)(v73[1] >> v70) - v33);
          float v89 = v78 + v88;
          float v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v83 + v88;
          BOOL v92 = (float)(v83 + v88) <= 8191.0;
          float v93 = 8191.0;
          if (v92)
          {
            float v93 = v91;
            if (v91 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v85 + v88;
          if ((float)(v85 + v88) < 0.0) {
            float v95 = 0.0;
          }
          else {
            float v95 = v85 + v88;
          }
          unsigned int v96 = llroundf(fminf(fmaxf(v81, 0.0), 8191.0));
          if (v94 <= 8191.0) {
            float v97 = v95;
          }
          else {
            float v97 = 8191.0;
          }
          _H4 = *(_WORD *)(v55 + 2 * v96);
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          float v107 = (float)((float)(v47 * _S5) + (float)(_S4 * v46)) + (float)(_S6 * v48);
          float v108 = (float)((float)(v50 * _S5) + (float)(_S4 * v49)) + (float)(_S6 * v51);
          _S5 = (float)((float)(v53 * _S5) + (float)(_S4 * v52)) + (float)(_S6 * v54);
          LOWORD(_S4) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S6) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v108, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S5) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S7, H5 }
          float v113 = (float)((float)((float)(v43 * _S6) + (float)(v42 * _S4)) + (float)(v44 * _S7)) + v37;
          float v114 = v39;
          if (v113 <= v39)
          {
            float v114 = (float)((float)((float)(v43 * _S6) + (float)(v42 * _S4)) + (float)(v44 * _S7)) + v37;
            if (v113 < v37) {
              float v114 = v37;
            }
          }
          _H5 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v121 = (float)((float)(v47 * _S24) + (float)(_S5 * v46)) + (float)(_S25 * v48);
          float v122 = (float)((float)(v50 * _S24) + (float)(_S5 * v49)) + (float)(_S25 * v51);
          float v123 = (float)((float)(v53 * _S24) + (float)(_S5 * v52)) + (float)(_S25 * v54);
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          *uint64_t v74 = llroundf(v114) << v71;
          if (v75)
          {
            float v127 = (float)((float)(v38 + (float)(_S4 * v149)) + (float)(_S6 * v148)) + (float)(_S7 * v147);
            float v128 = v41;
            if (v127 <= v41)
            {
              float v128 = (float)((float)(v38 + (float)(_S4 * v149)) + (float)(_S6 * v148)) + (float)(_S7 * v147);
              if (v127 < v40) {
                float v128 = v40;
              }
            }
            float v129 = (float)((float)(v38 + (float)(_S4 * v146)) + (float)(_S6 * v145)) + (float)(_S7 * v45);
            *uint64_t v75 = llroundf(v128) << v71;
            float v130 = v41;
            if (v129 <= v41)
            {
              float v130 = v129;
              if (v129 < v40) {
                float v130 = v40;
              }
            }
            v75[1] = llroundf(v130) << v71;
            v75 += 2;
          }
          __asm
          {
            FCVT            S4, H5
            FCVT            S5, H24
            FCVT            S6, H25
          }
          float v134 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
          float v135 = v39;
          if (v134 <= v39)
          {
            float v135 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S4)) + (float)(v44 * _S6)) + v37;
            if (v134 < v37) {
              float v135 = v37;
            }
          }
          v74[1] = llroundf(v135) << v71;
          if (v75)
          {
            float v136 = (float)((float)(v38 + (float)(_S4 * v149)) + (float)(_S5 * v148)) + (float)(_S6 * v147);
            float v137 = v41;
            if (v136 <= v41)
            {
              float v137 = (float)((float)(v38 + (float)(_S4 * v149)) + (float)(_S5 * v148)) + (float)(_S6 * v147);
              if (v136 < v40) {
                float v137 = v40;
              }
            }
            float v138 = (float)((float)(v38 + (float)(_S4 * v146)) + (float)(_S5 * v145)) + (float)(_S6 * v45);
            *uint64_t v75 = llroundf(v137) << v71;
            float v139 = v41;
            if (v138 <= v41)
            {
              float v139 = v138;
              if (v138 < v40) {
                float v139 = v40;
              }
            }
            v75[1] = llroundf(v139) << v71;
            v75 += 2;
          }
          v72 += 2;
          v73 += 2;
          v74 += 2;
        }
        while (v11 > v72);
      }
      v69 += v22;
      v68 += v23;
      uint64_t result = (void *)((char *)result + v27);
      v65 += v28;
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      size_t v140 = 2 * v11;
      do
      {
        uint64_t result = memcpy(v31, v26, v140);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v31, 255, 2 * v11);
        }
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_xf444_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_xf444_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf422_rgb_xf444_neon_fp16_GCD(void *result, uint64_t a2, double a3)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (uint64_t *)result[16];
    unint64_t v17 = result[13] * a2 / v7 + result[15];
    uint64_t v18 = (float32x2_t *)result[19];
    uint64_t v20 = (uint64_t *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v19;
    uint64_t v23 = v19[1];
    uint64_t v24 = v19[2];
    uint64_t v25 = v20[2];
    uint64_t v26 = (char *)(v25 + v24 * v13 + 2 * v12);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (char *)(v30 + v29 * v17 + 2 * v15);
    unsigned int v32 = v18[17].u16[2];
    unsigned int v33 = v18[17].u16[3];
    v3.i32[0] = v18[3].i32[1];
    unsigned int v34 = v18[18].u16[0];
    unsigned int v35 = v18[18].u16[1];
    unsigned int v36 = v18[18].u16[2];
    *(float *)&a3 = (float)v32;
    *(short float *)v4.i16 = (short float)v32;
    unsigned int v37 = v18[18].u16[3];
    float v38 = (float)v33;
    short float v39 = (short float)v33;
    unsigned int v40 = v18[19].u16[0];
    _S2 = v18[4].f32[1];
    _S3 = v18[5].f32[0];
    _S4 = v18[5].f32[1];
    _S28 = v18[6].f32[0];
    _S17 = v18[6].f32[1];
    _S30 = v18[7].f32[0];
    _S31 = v18[7].f32[1];
    _S10 = v18[8].f32[0];
    _S13 = v18[8].f32[1];
    float v50 = (float)v18[17].u32[0] / (float)v18[16].u32[0];
    float v51 = (float)v34;
    float v52 = (float)v35;
    float v53 = (float)v36;
    float v54 = (float)v37;
    _S23 = v50 * v18->f32[0];
    float v56 = (float)v40;
    __asm { FCVT            H8, S23 }
    float16x8_t v160 = (float16x8_t)vdupq_lane_s16(v4, 0);
    v3.i32[1] = v18[1].i32[0];
    *(float32x2_t *)v3.f32 = vmul_n_f32(*(float32x2_t *)v3.f32, v50);
    *(float32x2_t *)v5.f32 = vmul_n_f32(v18[2], v50);
    int16x4_t v62 = (int16x4_t)vcvt_f16_f32(v5);
    float16x8_t v158 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    float16x8_t v156 = vmulq_n_f16(v158, -v39);
    float16x8_t v157 = (float16x8_t)vdupq_lane_s32((int32x2_t)v62, 0);
    float16x8_t v155 = vmulq_n_f16(v157, -v39);
    __asm { FCVT            H7, S2 }
    short float v154 = _H7;
    __asm { FCVT            H7, S3 }
    short float v153 = _H7;
    *(short float *)v62.i16 = (short float)v34;
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(v62, 0);
    *(short float *)v62.i16 = (short float)v35;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(v62, 0);
    *(short float *)v62.i16 = (short float)v36;
    float16x8_t v152 = (float16x8_t)vdupq_lane_s16(v62, 0);
    *(short float *)v62.i16 = (short float)v37;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(v62, 0);
    *(short float *)v62.i16 = (short float)v40;
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(v62, 0);
    unsigned int v69 = v18[16].u8[4];
    unsigned __int8 v70 = 16 - v69;
    if (v69 >= 0x11) {
      unsigned __int8 v70 = 0;
    }
    unsigned int v71 = v18[15].u8[4];
    unsigned __int8 v72 = 16 - v71;
    if (v71 >= 0x11) {
      unsigned __int8 v72 = 0;
    }
    uint64_t v74 = *v16;
    uint64_t v73 = v16[1];
    uint64_t v75 = v73 + v28 * v17 + 2 * v15;
    if (!v73) {
      uint64_t v75 = 0;
    }
    uint64_t v76 = v74 + v27 * v17 + 2 * v15;
    uint64_t v78 = *v20;
    uint64_t v77 = v20[1];
    uint64_t v79 = v77 + v23 * v13 + 2 * v12;
    if (!v77) {
      uint64_t v79 = 0;
    }
    uint64_t result = (void *)(v78 + v22 * v13 + 2 * v12);
    unsigned __int8 v80 = v72;
    unsigned __int8 v81 = v70;
    __asm { FCVT            H7, S4 }
    short float v151 = _H7;
    float v83 = _S28;
    __asm { FCVT            H9, S28 }
    short float v149 = _H9;
    float v85 = _S17;
    __asm { FCVT            H9, S17 }
    short float v148 = _H9;
    float v87 = _S30;
    __asm { FCVT            H9, S30 }
    short float v147 = _H9;
    float v89 = _S31;
    __asm { FCVT            H9, S31 }
    short float v146 = _H9;
    float v91 = _S10;
    __asm { FCVT            H9, S10 }
    short float v145 = _H9;
    float v93 = _S13;
    __asm { FCVT            H9, S13 }
    short float v144 = _H9;
    uint16x8_t v95 = (uint16x8_t)vdupq_n_s16(-v72);
    uint16x8_t v96 = (uint16x8_t)vdupq_n_s16(v70);
    float v159 = v3.f32[0];
    uint64_t v97 = v5.i64[0];
    float v150 = v3.f32[1];
    do
    {
      if ((int)v11 < 8)
      {
        unint64_t v116 = 0;
        uint16x8_t v102 = (__int16 *)v75;
        size_t v101 = (uint16x8_t *)v76;
        float v100 = (uint16x8_t *)v79;
        float v99 = (uint16x8_t *)result;
      }
      else
      {
        int v98 = 0;
        float v99 = (uint16x8_t *)result;
        float v100 = (uint16x8_t *)v79;
        size_t v101 = (uint16x8_t *)v76;
        uint16x8_t v102 = (__int16 *)v75;
        do
        {
          uint16x8_t v103 = *v100++;
          float16x8_t v104 = vcvtq_f16_u16(vshlq_u16(v103, v95));
          int8x16_t v105 = (int8x16_t)vmlaq_f16(v156, v158, v104);
          int8x16_t v106 = (int8x16_t)vmlaq_f16(v155, v157, v104);
          v104.i64[0] = vextq_s8(v105, v105, 8uLL).u64[0];
          *(int16x4_t *)v107.i8 = vuzp2_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v104.i8);
          *(double *)&v107.i64[1] = a3;
          *(int16x4_t *)v104.i8 = vuzp1_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v104.i8);
          *(double *)&v104.i64[1] = a3;
          float16x8_t v108 = (float16x8_t)vzip1q_s16((int16x8_t)v104, (int16x8_t)v104);
          v104.i64[0] = vextq_s8(v106, v106, 8uLL).u64[0];
          *(float16x4_t *)v104.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v104.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v104.i8));
          *(double *)&v104.i64[1] = a3;
          float16x8_t v109 = (float16x8_t)vzip1q_s16((int16x8_t)v104, (int16x8_t)v104);
          uint16x8_t v110 = *v99++;
          float16x8_t v111 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v110, v95)), v160);
          float16x8_t v112 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v107, v107), v111, _H8);
          float16x8_t v113 = vmlaq_n_f16(v109, v111, _H8);
          float16x8_t v114 = vmlaq_n_f16(v108, v111, _H8);
          *v101++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v65, v112, v154), v113, v153), v114, v151), v65), v152)), v96);
          if (v102)
          {
            float16x8_t v115 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v66, v112, v146), v113, v145), v114, v144);
            v161.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v66, v112, v149), v113, v148), v114, v147), v67), v68), v67), v68)), v96);
            v161.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(v115), v96);
            vst2q_s16(v102, v161);
            v102 += 16;
          }
          v98 += 8;
        }
        while (v98 < (int)v11 - 7);
        unint64_t v116 = v11 & 0xFFFFFFF8;
      }
      while (v11 > v116)
      {
        float v117 = (float)(v100->u16[0] >> v80) - v38;
        float v118 = (float)(v100->u16[1] >> v80) - v38;
        float v119 = v150 * v118;
        float v120 = (float)(*((float *)&v97 + 1) * v118) + (float)(v117 * *(float *)&v97);
        float v121 = v159 * v117;
        float v122 = _S23 * (float)((float)(v99->u16[0] >> v80) - *(float *)&a3);
        float v123 = (float)(v150 * v118) + v122;
        float v124 = v122 + v120;
        float v125 = v121 + v122;
        float v126 = (float)((float)((float)(_S3 * (float)(v122 + v120)) + (float)(_S2 * v123))
                     + (float)(_S4 * (float)(v121 + v122)))
             + v51;
        float v127 = v53;
        if (v126 <= v53)
        {
          float v127 = v126;
          if (v126 < v51) {
            float v127 = v51;
          }
        }
        unsigned int v128 = v99->u16[1];
        v101->i16[0] = llroundf(v127) << v81;
        if (v102)
        {
          float v129 = (float)((float)(v52 + (float)(v123 * v83)) + (float)(v124 * v85)) + (float)(v125 * v87);
          float v130 = v56;
          if (v129 <= v56)
          {
            float v130 = (float)((float)(v52 + (float)(v123 * v83)) + (float)(v124 * v85)) + (float)(v125 * v87);
            if (v129 < v54) {
              float v130 = v54;
            }
          }
          float v131 = (float)((float)(v52 + (float)(v123 * v89)) + (float)(v124 * v91)) + (float)(v125 * v93);
          __int16 *v102 = llroundf(v130) << v81;
          float v132 = v56;
          if (v131 <= v56)
          {
            if (v131 < v54) {
              float v132 = v54;
            }
            else {
              float v132 = v131;
            }
          }
          v102[1] = llroundf(v132) << v81;
          v102 += 2;
        }
        float v133 = _S23 * (float)((float)(int)(v128 >> v80) - *(float *)&a3);
        float v134 = v119 + v133;
        float v135 = v120 + v133;
        float v136 = v121 + v133;
        float v137 = (float)((float)((float)(_S3 * (float)(v120 + v133)) + (float)(_S2 * v134)) + (float)(_S4 * v136)) + v51;
        float v138 = v53;
        if (v137 <= v53)
        {
          float v138 = v137;
          if (v137 < v51) {
            float v138 = v51;
          }
        }
        v101->i16[1] = llroundf(v138) << v81;
        if (v102)
        {
          float v139 = (float)((float)(v52 + (float)(v134 * v83)) + (float)(v135 * v85)) + (float)(v136 * v87);
          float v140 = v56;
          if (v139 <= v56)
          {
            float v140 = (float)((float)(v52 + (float)(v134 * v83)) + (float)(v135 * v85)) + (float)(v136 * v87);
            if (v139 < v54) {
              float v140 = v54;
            }
          }
          float v141 = (float)((float)(v52 + (float)(v134 * v89)) + (float)(v135 * v91)) + (float)(v136 * v93);
          __int16 *v102 = llroundf(v140) << v81;
          float v142 = v56;
          if (v141 <= v56)
          {
            float v142 = v141;
            if (v141 < v54) {
              float v142 = v54;
            }
          }
          v102[1] = llroundf(v142) << v81;
          v102 += 2;
        }
        v116 += 2;
        float v100 = (uint16x8_t *)((char *)v100 + 4);
        float v99 = (uint16x8_t *)((char *)v99 + 4);
        size_t v101 = (uint16x8_t *)((char *)v101 + 4);
      }
      uint64_t result = (void *)((char *)result + v22);
      v79 += v23;
      v76 += v27;
      v75 += v28;
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      size_t v143 = 2 * v11;
      do
      {
        uint64_t result = memcpy(v31, v26, v143);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v31, 255, 2 * v11);
        }
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_xf444_GCD);
  return 0;
}

void *vt_Copy_xf422_rgb_xf444_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v9 = *(void *)((char *)result + 28);
  unint64_t v10 = *(unsigned __int8 *)result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    unint64_t v14 = *(void *)((char *)result + 20);
    uint64_t v15 = *(void *)((char *)result + 36);
    unint64_t v16 = v11 + *(void *)((char *)result + 44);
    unint64_t v17 = v12 - v11;
    uint64_t v18 = result[14];
    uint64_t v19 = (uint64_t *)result[16];
    unint64_t v20 = result[13] * a2 / v10 + result[15];
    uint64_t v21 = result[19];
    uint64_t v23 = (uint64_t *)result[7];
    size_t v22 = (uint64_t *)result[8];
    uint64_t v24 = (uint64_t *)result[17];
    uint64_t v25 = *v22;
    uint64_t v26 = v22[1];
    uint64_t v27 = v22[2];
    uint64_t v28 = v23[2];
    uint64_t v29 = (char *)(v28 + v27 * v16 + 2 * v15);
    uint64_t v30 = *v24;
    uint64_t v31 = v24[1];
    uint64_t v32 = v24[2];
    uint64_t v33 = v19[2];
    uint64_t v34 = (char *)(v33 + v32 * v20 + 2 * v18);
    *(float *)&unsigned int v35 = (float)*(unsigned int *)(v21 + 136);
    LOWORD(a5) = *(_WORD *)(v21 + 140);
    float v36 = *(float *)&v35 / (float)*(unsigned int *)(v21 + 128);
    float v37 = (float)LODWORD(a5);
    LOWORD(v35) = *(_WORD *)(v21 + 142);
    float v38 = (float)v35;
    float v39 = v36 * *(float *)v21;
    float v40 = v36 * *(float *)(v21 + 8);
    float v41 = v36 * *(float *)(v21 + 16);
    float v42 = v36 * *(float *)(v21 + 20);
    float v43 = *(float *)(v21 + 28);
    float v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v21 + 144);
    float v45 = (float)LODWORD(v43);
    LOWORD(v5) = *(_WORD *)(v21 + 146);
    float v46 = (float)v5;
    LOWORD(v6) = *(_WORD *)(v21 + 148);
    float v47 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v21 + 150);
    float v48 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v21 + 152);
    float v49 = (float)v8;
    float v50 = *(float *)(v21 + 36);
    float v51 = *(float *)(v21 + 40);
    float v52 = *(float *)(v21 + 44);
    float v53 = *(float *)(v21 + 48);
    float v54 = *(float *)(v21 + 52);
    float v55 = *(float *)(v21 + 56);
    float v56 = *(float *)(v21 + 60);
    float v57 = *(float *)(v21 + 64);
    float v58 = *(float *)(v21 + 68);
    unsigned int v59 = *(unsigned __int8 *)(v21 + 132);
    BOOL v60 = v59 >= 0x11;
    char v61 = 16 - v59;
    if (v60) {
      char v62 = 0;
    }
    else {
      char v62 = v61;
    }
    unsigned int v63 = *(unsigned __int8 *)(v21 + 124);
    char v64 = 16 - v63;
    if (v63 >= 0x11) {
      char v64 = 0;
    }
    uint64_t v66 = *v19;
    uint64_t v65 = v19[1];
    uint64_t v67 = v65 + v31 * v20 + 2 * v18;
    if (!v65) {
      uint64_t v67 = 0;
    }
    uint64_t v68 = v66 + v30 * v20 + 2 * v18;
    uint64_t v70 = *v23;
    uint64_t v69 = v23[1];
    uint64_t v71 = v69 + v26 * v16 + 2 * v15;
    if (!v69) {
      uint64_t v71 = 0;
    }
    uint64_t result = (void *)(v70 + v25 * v16 + 2 * v15);
    char v72 = v64;
    char v73 = v62;
    do
    {
      if (v14)
      {
        unint64_t v74 = 0;
        uint64_t v75 = (unsigned __int16 *)result;
        uint64_t v76 = (_WORD *)v68;
        uint64_t v77 = (_WORD *)v67;
        do
        {
          uint64_t v78 = (unsigned __int16 *)(v71 + 2 * v74);
          float v79 = (float)(*v78 >> v72) - v38;
          float v80 = (float)(v78[1] >> v72) - v38;
          float v81 = v40 * v80;
          float v82 = (float)(v42 * v80) + (float)(v79 * v41);
          float v83 = v44 * v79;
          float v84 = v39 * (float)((float)(*v75 >> v72) - v37);
          float v85 = v81 + v84;
          float v86 = v84 + v82;
          float v87 = v83 + v84;
          float v88 = (float)((float)((float)(v51 * v86) + (float)(v50 * v85)) + (float)(v52 * v87)) + v45;
          float v89 = v47;
          if (v88 <= v47)
          {
            float v89 = (float)((float)((float)(v51 * v86) + (float)(v50 * v85)) + (float)(v52 * v87)) + v45;
            if (v88 < v45) {
              float v89 = v45;
            }
          }
          unsigned int v90 = v75[1];
          *uint64_t v76 = llroundf(v89) << v73;
          if (v77)
          {
            float v91 = (float)((float)(v46 + (float)(v85 * v53)) + (float)(v86 * v54)) + (float)(v87 * v55);
            float v92 = v49;
            if (v91 <= v49)
            {
              float v92 = (float)((float)(v46 + (float)(v85 * v53)) + (float)(v86 * v54)) + (float)(v87 * v55);
              if (v91 < v48) {
                float v92 = v48;
              }
            }
            float v93 = (float)((float)(v46 + (float)(v85 * v56)) + (float)(v86 * v57)) + (float)(v87 * v58);
            _WORD *v77 = llroundf(v92) << v73;
            float v94 = v49;
            if (v93 <= v49)
            {
              if (v93 < v48) {
                float v94 = v48;
              }
              else {
                float v94 = v93;
              }
            }
            v77[1] = llroundf(v94) << v73;
            v77 += 2;
          }
          float v95 = v39 * (float)((float)(int)(v90 >> v72) - v37);
          float v96 = v81 + v95;
          float v97 = v82 + v95;
          float v98 = v83 + v95;
          float v99 = (float)((float)((float)(v51 * v97) + (float)(v50 * v96)) + (float)(v52 * v98)) + v45;
          float v100 = v47;
          if (v99 <= v47)
          {
            float v100 = (float)((float)((float)(v51 * v97) + (float)(v50 * v96)) + (float)(v52 * v98)) + v45;
            if (v99 < v45) {
              float v100 = v45;
            }
          }
          v76[1] = llroundf(v100) << v73;
          if (v77)
          {
            float v101 = (float)((float)(v46 + (float)(v96 * v53)) + (float)(v97 * v54)) + (float)(v98 * v55);
            float v102 = v49;
            if (v101 <= v49)
            {
              float v102 = (float)((float)(v46 + (float)(v96 * v53)) + (float)(v97 * v54)) + (float)(v98 * v55);
              if (v101 < v48) {
                float v102 = v48;
              }
            }
            float v103 = (float)((float)(v46 + (float)(v96 * v56)) + (float)(v97 * v57)) + (float)(v98 * v58);
            _WORD *v77 = llroundf(v102) << v73;
            float v104 = v49;
            if (v103 <= v49)
            {
              float v104 = v103;
              if (v103 < v48) {
                float v104 = v48;
              }
            }
            v77[1] = llroundf(v104) << v73;
            v77 += 2;
          }
          v74 += 2;
          v75 += 2;
          v76 += 2;
        }
        while (v14 > v74);
      }
      uint64_t result = (void *)((char *)result + v25);
      v71 += v26;
      v68 += v30;
      v67 += v31;
      ++v13;
    }
    while (v13 != v17);
    if (v28 && v33)
    {
      size_t v105 = 2 * v14;
      do
      {
        uint64_t result = memcpy(v34, v29, v105);
        v29 += v27;
        v34 += v32;
        --v17;
      }
      while (v17);
    }
    else if (v33)
    {
      do
      {
        if (v14) {
          uint64_t result = memset(v34, 255, 2 * v14);
        }
        v34 += v32;
        --v17;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_BGRA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

char *vt_Copy_xf422_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, float32x4_t a4)
{
  char v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = *(void *)(a1 + 20);
  uint64_t v8 = *(void *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 44);
  uint64_t v10 = *(void *)(a1 + 28);
  unint64_t v11 = *a1;
  unint64_t v12 = v10 * a2 / v11;
  uint64_t v13 = v12 + v9;
  unint64_t v14 = (v10 + v10 * a2) / v11;
  uint64_t v15 = v14 + v9;
  uint64_t v16 = *((void *)a1 + 15);
  uint64_t v267 = *((void *)a1 + 14);
  uint64_t v17 = *((void *)a1 + 13);
  uint64_t v18 = (float32x2_t *)*((void *)a1 + 19);
  uint64_t v20 = (uint64_t *)*((void *)a1 + 7);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 8);
  uint64_t v246 = *v19;
  uint64_t v21 = v19[1];
  uint64_t v22 = v19[2];
  uint64_t v23 = v20[1];
  uint64_t v265 = *v20;
  uint64_t v24 = v20[2];
  uint64_t v25 = **((void **)a1 + 17);
  uint64_t v248 = **((void **)a1 + 16);
  unsigned int v26 = v18[16].u32[0];
  uint64_t v27 = v18[19].u8[6];
  v274[0] = v18[19].i8[6];
  uint64_t v28 = v18[19].u8[7];
  v274[1] = v18[19].i8[7];
  uint64_t v29 = v18[20].u8[0];
  v274[2] = v18[20].i8[0];
  uint64_t v30 = v18[20].u8[1];
  v274[3] = v18[20].i8[1];
  uint64_t result = (char *)v18[17].u16[2];
  unsigned int v32 = v18[15].u8[4];
  unsigned int v33 = v18[17].u16[3];
  float v34 = v18->f32[0];
  __int32 v35 = v18[1].i32[0];
  float32x2_t v36 = v18[2];
  v37.i32[0] = v18[3].i32[1];
  float v271 = v18[9].f32[0];
  float v270 = v18[9].f32[1];
  _S3 = v18[10].f32[1];
  float v269 = v18[10].f32[0];
  uint64_t v244 = v22;
  uint64_t v245 = v21;
  uint64_t v39 = v23 + v21 * v13;
  uint64_t v247 = v24 + v22 * v13;
  _S4 = v18[11].f32[0];
  _S5 = v18[11].f32[1];
  uint64_t v243 = v25;
  unint64_t v42 = v25 * (v17 * a2 / v11 + v16);
  _S6 = v18[12].f32[0];
  _S7 = v18[12].f32[1];
  _S16 = v18[13].f32[0];
  _S17 = v18[13].f32[1];
  _S18 = v18[14].f32[0];
  _S19 = v18[14].f32[1];
  _S20 = v18[15].f32[0];
  long long v272 = 0u;
  long long v273 = 0u;
  do
  {
    int v50 = 0;
    char v51 = v274[v6];
    do
    {
      *(unsigned char *)(((unint64_t)&v272 + ((v51 + 4 * v50) & 0xF8)) | (v51 + 4 * (_BYTE)v50) & 7) = v5 + v50;
      ++v50;
    }
    while (v50 != 8);
    ++v6;
    v5 += 8;
  }
  while (v6 != 4);
  if (v14 != v12)
  {
    uint64_t v52 = 0;
    float v53 = (char *)&v18[2068] + 4;
    float v54 = (float)result;
    float v55 = (float)v33;
    float v56 = 8191.0 / (float)v26;
    _S24 = v56 * v34;
    *(short float *)v4.i16 = (short float)result;
    float v58 = (char *)&v18[4116] + 4;
    uint64_t result = (char *)&v18[20] + 4;
    __asm { FCVT            H8, S24 }
    float16x8_t v268 = (float16x8_t)vdupq_lane_s16(v4, 0);
    v37.i32[1] = v35;
    *(float32x2_t *)a4.f32 = vmul_n_f32(v37, v56);
    v64.i64[1] = v268.i64[0];
    *(float32x2_t *)v64.f32 = vmul_n_f32(v36, v56);
    short float v65 = -(short float)v33;
    float16x8_t v266 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a4), 0);
    float16x8_t v263 = vmulq_n_f16(v266, v65);
    float16x8_t v264 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v64), 0);
    __asm { FCVT            H0, S17 }
    short float v261 = _H0;
    float16x8_t v262 = vmulq_n_f16(v264, v65);
    __asm { FCVT            H0, S18 }
    short float v260 = _H0;
    __asm { FCVT            H0, S19 }
    short float v259 = _H0;
    __asm { FCVT            H0, S20 }
    short float v258 = _H0;
    _S0 = v271;
    __asm { FCVT            H0, S0 }
    short float v257 = *(short float *)&_S0;
    _S0 = v270;
    __asm { FCVT            H0, S0 }
    short float v256 = *(short float *)&_S0;
    _S0 = v269;
    __asm { FCVT            H0, S0 }
    short float v255 = *(short float *)&_S0;
    __asm { FCVT            H0, S3 }
    short float v254 = *(short float *)&_S0;
    __asm { FCVT            H0, S4 }
    short float v253 = *(short float *)&_S0;
    __asm { FCVT            H0, S5 }
    short float v252 = *(short float *)&_S0;
    __asm { FCVT            H0, S6 }
    short float v251 = *(short float *)&_S0;
    __asm { FCVT            H0, S7 }
    short float v250 = *(short float *)&_S0;
    __asm { FCVT            H0, S16 }
    short float v249 = *(short float *)&_S0;
    unsigned __int8 v73 = 16 - v32;
    unint64_t v74 = (int8x16_t *)(v247 + 2 * v8);
    if (v32 >= 0x11) {
      unsigned __int8 v73 = 0;
    }
    uint64_t v75 = v248 + v42 + 4 * v267;
    if (!v24) {
      unint64_t v74 = 0;
    }
    if (v23) {
      uint64_t v76 = (uint16x8_t *)(v39 + 2 * v8);
    }
    else {
      uint64_t v76 = 0;
    }
    uint64_t v77 = v265 + v246 * v13 + 2 * v8;
    unsigned __int8 v78 = v73;
    uint16x8_t v79 = (uint16x8_t)vdupq_n_s16(-v73);
    unint64_t v80 = a4.i64[0];
    uint64_t v81 = v64.i64[0];
    uint64_t v242 = v29 + 4;
    uint64_t v240 = v27 + 4;
    uint64_t v241 = v28 + 4;
    uint64_t v239 = v30 + 4;
    v82.i64[0] = 0x9000900090009000;
    v82.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v7 < 8)
      {
        unint64_t v159 = 0;
        float v89 = v76;
        float v88 = v74;
        float v87 = (_OWORD *)v75;
        float v86 = (uint16x8_t *)v77;
      }
      else
      {
        int v83 = 0;
        int8x8_t v84 = *(int8x8_t *)((char *)&v272 + 8);
        int8x8_t v85 = (int8x8_t)v272;
        float v86 = (uint16x8_t *)v77;
        float v87 = (_OWORD *)v75;
        float v88 = v74;
        float v89 = v76;
        int8x8_t v91 = *(int8x8_t *)((char *)&v273 + 8);
        int8x8_t v90 = (int8x8_t)v273;
        do
        {
          if (v88 && (int8x16_t v92 = *v88, ++v88, v93 = v92, v88))
          {
            *(int16x4_t *)v94.i8 = vzip1_s16(*(int16x4_t *)v93.i8, 0);
            v94.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v93.i8, 0);
            int16x4_t v95 = (int16x4_t)vextq_s8(v93, v93, 8uLL).u64[0];
            *(int16x4_t *)v96.i8 = vzip1_s16(v95, 0);
            v96.u64[1] = (unint64_t)vzip2_s16(v95, 0);
            float32x4_t v97 = vcvtq_f32_u32(v96);
            float32x4_t v98 = (float32x4_t)vdupq_n_s32(0x3B7F00FFu);
            int8x8_t v99 = vmovn_s16(vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_u32(v94), v98)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(v97, v98))));
          }
          else
          {
            int8x8_t v99 = (int8x8_t)-1;
          }
          uint16x8_t v100 = *v89++;
          float16x8_t v101 = vcvtq_f16_u16(vshlq_u16(v100, v79));
          int16x8_t v102 = (int16x8_t)vmlaq_f16(v263, v266, v101);
          int8x16_t v103 = (int8x16_t)vmlaq_f16(v262, v264, v101);
          v101.i64[0] = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u64[0];
          *(int16x4_t *)v104.i8 = vuzp1_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v101.i8);
          *(int16x4_t *)v101.i8 = vuzp2_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v101.i8);
          v101.i64[1] = v264.i64[0];
          v104.i64[1] = v264.i64[0];
          v102.i64[0] = vextq_s8(v103, v103, 8uLL).u64[0];
          *(float16x4_t *)v102.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v102.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v102.i8));
          v102.i64[1] = v264.i64[0];
          uint16x8_t v105 = *v86++;
          float16x8_t v106 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v105, v79)), v268);
          float16x8_t v107 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v102, v102), v106, _H8);
          float16x8_t v108 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v104, v104), v106, _H8);
          uint16x8_t v109 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v101, (int16x8_t)v101), v106, _H8), (float16x8_t)0), v82));
          float16x8_t v110 = (float16x8_t)vmovl_high_u16(v109);
          v111.i64[0] = v110.u32[2];
          v111.i64[1] = v110.u32[3];
          float16x8_t v112 = v111;
          v111.i64[0] = v110.u32[0];
          v111.i64[1] = v110.u32[1];
          uint32x4_t v113 = vmovl_u16(*(uint16x4_t *)v109.i8);
          v110.i16[0] = *(_WORD *)&result[2 * v113.u32[0]];
          v110.i16[1] = *(_WORD *)&result[2 * v113.u32[1]];
          v110.i16[2] = *(_WORD *)&result[2 * v113.u32[2]];
          v110.i16[3] = *(_WORD *)&result[2 * v113.u32[3]];
          v110.i16[4] = *(_WORD *)&result[2 * v111.i64[0]];
          v110.i16[5] = *(_WORD *)&result[2 * v111.i64[1]];
          v110.i16[6] = *(_WORD *)&result[2 * v112.i64[0]];
          v110.i16[7] = *(_WORD *)&result[2 * v112.i64[1]];
          uint16x8_t v114 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v107, (float16x8_t)0), v82));
          uint32x4_t v115 = vmovl_high_u16(v114);
          uint32x4_t v116 = vmovl_u16(*(uint16x4_t *)v114.i8);
          v112.i16[0] = *(_WORD *)&result[2 * v116.u32[0]];
          v112.i16[1] = *(_WORD *)&result[2 * v116.u32[1]];
          v112.i16[2] = *(_WORD *)&result[2 * v116.u32[2]];
          v112.i16[3] = *(_WORD *)&result[2 * v116.u32[3]];
          v112.i16[4] = *(_WORD *)&result[2 * v115.u32[0]];
          v112.i16[5] = *(_WORD *)&result[2 * v115.u32[1]];
          v112.i16[6] = *(_WORD *)&result[2 * v115.u32[2]];
          v112.i16[7] = *(_WORD *)&result[2 * v115.u32[3]];
          uint16x8_t v117 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v108, (float16x8_t)0), v82));
          uint32x4_t v118 = vmovl_high_u16(v117);
          uint32x4_t v119 = vmovl_u16(*(uint16x4_t *)v117.i8);
          v108.i16[0] = *(_WORD *)&result[2 * v119.u32[0]];
          v108.i16[1] = *(_WORD *)&result[2 * v119.u32[1]];
          v108.i16[2] = *(_WORD *)&result[2 * v119.u32[2]];
          v108.i16[3] = *(_WORD *)&result[2 * v119.u32[3]];
          v108.i16[4] = *(_WORD *)&result[2 * v118.u32[0]];
          v108.i16[5] = *(_WORD *)&result[2 * v118.u32[1]];
          v108.i16[6] = *(_WORD *)&result[2 * v118.u32[2]];
          v108.i16[7] = *(_WORD *)&result[2 * v118.u32[3]];
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v110, v261), v112, v260), v108, v259), vmaxq_f16(vmaxq_f16(v110, v112), v108), v258), (float16x8_t)0), v82));
          uint32x4_t v121 = vmovl_u16(*(uint16x4_t *)v120.i8);
          float16x8_t v122 = (float16x8_t)vmovl_high_u16(v120);
          uint64_t v123 = v122.u32[0];
          v122.i16[0] = *(_WORD *)&v53[2 * v121.u32[0]];
          float v124 = (__int16 *)&v53[2 * v123];
          float v125 = (__int16 *)&v53[2 * v122.u32[1]];
          float v126 = (__int16 *)&v53[2 * v122.u32[2]];
          float v127 = (__int16 *)&v53[2 * v122.u32[3]];
          v122.i16[1] = *(_WORD *)&v53[2 * v121.u32[1]];
          v122.i16[2] = *(_WORD *)&v53[2 * v121.u32[2]];
          v122.i16[3] = *(_WORD *)&v53[2 * v121.u32[3]];
          v122.i16[4] = *v124;
          v122.i16[5] = *v125;
          v122.i16[6] = *v126;
          v122.i16[7] = *v127;
          float16x8_t v128 = vmulq_f16(v110, v122);
          float16x8_t v129 = vmulq_f16(v112, v122);
          float16x8_t v130 = vmulq_f16(v108, v122);
          float16x8_t v131 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v128, v254), v129, v253), v130, v252);
          v275.val[1] = (int8x16_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v130, v249), v129, v250), v128, v251);
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v128, v257), v129, v256), v130, v255), (float16x8_t)0), v82));
          uint32x4_t v133 = vmovl_high_u16(v132);
          uint32x4_t v134 = vmovl_u16(*(uint16x4_t *)v132.i8);
          v111.i64[0] = v134.u32[2];
          v111.i64[1] = v134.u32[3];
          uint64_t v135 = v134.u32[1];
          v110.i16[0] = *(_WORD *)&v58[2 * v134.u32[0]];
          uint64_t v136 = v133.u32[1];
          uint64_t v137 = v133.u32[0];
          uint64_t v138 = v133.u32[3];
          uint64_t v139 = v133.u32[2];
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, (float16x8_t)0), v82));
          uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v140.i8);
          uint64_t v142 = v141.u32[1];
          uint64_t v143 = v141.u32[0];
          v110.i16[1] = *(_WORD *)&v58[2 * v135];
          v110.i16[2] = *(_WORD *)&v58[2 * v111.i64[0]];
          v110.i16[3] = *(_WORD *)&v58[2 * v111.i64[1]];
          v110.i16[4] = *(_WORD *)&v58[2 * v137];
          v110.i16[5] = *(_WORD *)&v58[2 * v136];
          v110.i16[6] = *(_WORD *)&v58[2 * v139];
          v110.i16[7] = *(_WORD *)&v58[2 * v138];
          uint32x4_t v144 = vmovl_high_u16(v140);
          uint64_t v145 = v141.u32[3];
          uint64_t v146 = v141.u32[2];
          uint64_t v147 = v144.u32[1];
          uint64_t v148 = v144.u32[0];
          uint64_t v149 = v144.u32[3];
          uint64_t v150 = v144.u32[2];
          uint16x8_t v151 = vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v275.val[1], (float16x8_t)0), v82));
          uint32x4_t v152 = vmovl_u16(*(uint16x4_t *)v151.i8);
          v129.i16[0] = *(_WORD *)&v58[2 * v143];
          v129.i16[1] = *(_WORD *)&v58[2 * v142];
          v129.i16[2] = *(_WORD *)&v58[2 * v146];
          v129.i16[3] = *(_WORD *)&v58[2 * v145];
          v129.i16[4] = *(_WORD *)&v58[2 * v148];
          v129.i16[5] = *(_WORD *)&v58[2 * v147];
          v129.i16[6] = *(_WORD *)&v58[2 * v150];
          v129.i16[7] = *(_WORD *)&v58[2 * v149];
          float16x8_t v153 = (float16x8_t)vmovl_high_u16(v151);
          uint64_t v154 = v153.u32[0];
          v153.i16[0] = *(_WORD *)&v58[2 * v152.u32[0]];
          float16x8_t v155 = (__int16 *)&v58[2 * v153.u32[1]];
          float16x8_t v156 = (__int16 *)&v58[2 * v153.u32[2]];
          float16x8_t v157 = (__int16 *)&v58[2 * v153.u32[3]];
          v153.i16[1] = *(_WORD *)&v58[2 * v152.u32[1]];
          v153.i16[2] = *(_WORD *)&v58[2 * v152.u32[2]];
          v153.i16[3] = *(_WORD *)&v58[2 * v152.u32[3]];
          v153.i16[4] = *(_WORD *)&v58[2 * v154];
          v153.i16[5] = *v155;
          v153.i16[6] = *v156;
          v153.i16[7] = *v157;
          float16x8_t v158 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          *(int8x8_t *)v275.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v153, (float16x8_t)0), v158)));
          v275.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v110, (float16x8_t)0), v158)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v129, (float16x8_t)0), v158)));
          v275.val[1].u64[1] = (unint64_t)v99;
          *(int8x8_t *)v153.i8 = vqtbl2_s8(v275, v85);
          v153.u64[1] = (unint64_t)vqtbl2_s8(v275, v84);
          *(int8x8_t *)v152.i8 = vqtbl2_s8(v275, v90);
          v152.u64[1] = (unint64_t)vqtbl2_s8(v275, v91);
          *float v87 = v153;
          v87[1] = v152;
          v87 += 2;
          v83 += 8;
        }
        while (v83 < (int)v7 - 7);
        unint64_t v159 = v7 & 0xFFFFFFF8;
      }
      if (v7 > v159)
      {
        float16x8_t v160 = (char *)v87 + v242;
        int16x8x2_t v161 = (char *)v87 + v241;
        float v162 = (char *)v87 + v240;
        float v163 = (char *)v87 + v239;
        do
        {
          float v164 = (float)(v89->u16[1] >> v78) - v55;
          float v165 = *((float *)&v80 + 1) * v164;
          float v166 = _S24 * (float)((float)(v86->u16[0] >> v78) - v54);
          float v167 = (float)(*((float *)&v80 + 1) * v164) + v166;
          float v168 = 8191.0;
          if (v167 <= 8191.0)
          {
            float v168 = (float)(*((float *)&v80 + 1) * v164) + v166;
            if (v167 < 0.0) {
              float v168 = 0.0;
            }
          }
          float v169 = (float)(v89->u16[0] >> v78) - v55;
          float v170 = (float)(*((float *)&v81 + 1) * v164) + (float)(v169 * *(float *)&v81);
          float v171 = 8191.0;
          if ((float)(v166 + v170) <= 8191.0)
          {
            float v171 = v166 + v170;
            if ((float)(v166 + v170) < 0.0) {
              float v171 = 0.0;
            }
          }
          float v172 = *(float *)&v80 * v169;
          float v173 = (float)(*(float *)&v80 * v169) + v166;
          float v174 = 8191.0;
          if (v173 <= 8191.0)
          {
            float v174 = v173;
            if (v173 < 0.0) {
              float v174 = 0.0;
            }
          }
          float v175 = _S24 * (float)((float)(v86->u16[1] >> v78) - v54);
          float v176 = v165 + v175;
          float v177 = 8191.0;
          if (v176 <= 8191.0)
          {
            float v177 = v176;
            if (v176 < 0.0) {
              float v177 = 0.0;
            }
          }
          float v178 = 8191.0;
          if ((float)(v170 + v175) <= 8191.0)
          {
            float v178 = v170 + v175;
            if ((float)(v170 + v175) < 0.0) {
              float v178 = 0.0;
            }
          }
          float v179 = v172 + v175;
          BOOL v180 = (float)(v172 + v175) <= 8191.0;
          float v181 = 8191.0;
          if (v180)
          {
            float v181 = v179;
            if (v179 < 0.0) {
              float v181 = 0.0;
            }
          }
          if (v88)
          {
            unsigned int v182 = v88->u16[0];
            unsigned int v183 = v88->u16[1];
            float v88 = (int8x16_t *)((char *)v88 + 4);
          }
          else
          {
            unsigned int v182 = 0;
            unsigned int v183 = 0;
          }
          _H0 = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0))];
          __asm { FCVT            S12, H0 }
          _H0 = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0))];
          __asm { FCVT            S9, H0 }
          _H0 = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v174, 0.0), 8191.0))];
          __asm { FCVT            S10, H0 }
          _H11 = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v177, 0.0), 8191.0))];
          _H13 = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v178, 0.0), 8191.0))];
          _H14 = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v181, 0.0), 8191.0))];
          float v193 = fmaxf(_S12, fmaxf(_S9, _S10));
          float v194 = (float)((float)((float)(_S18 * _S9) + (float)(_S17 * _S12)) + (float)(_S19 * _S10))
               + (float)(_S20 * v193);
          float v195 = 8191.0;
          if (v194 <= 8191.0)
          {
            float v195 = (float)((float)((float)(_S18 * _S9) + (float)(_S17 * _S12)) + (float)(_S19 * _S10))
                 + (float)(_S20 * v193);
            if (v194 < 0.0) {
              float v195 = 0.0;
            }
          }
          __asm
          {
            FCVT            S11, H11
            FCVT            S13, H13
            FCVT            S14, H14
          }
          _H15 = *(_WORD *)&v53[2 * llroundf(v195)];
          float v200 = fmaxf(_S11, fmaxf(_S13, _S14));
          float v201 = (float)((float)((float)(_S18 * _S13) + (float)(_S17 * _S11)) + (float)(_S19 * _S14))
               + (float)(_S20 * v200);
          float v202 = 8191.0;
          if (v201 <= 8191.0)
          {
            float v202 = (float)((float)((float)(_S18 * _S13) + (float)(_S17 * _S11)) + (float)(_S19 * _S14))
                 + (float)(_S20 * v200);
            if (v201 < 0.0) {
              float v202 = 0.0;
            }
          }
          __asm { FCVT            S0, H15 }
          float v204 = _S12 * _S0;
          float v205 = _S9 * _S0;
          float v206 = _S10 * _S0;
          _H27 = *(_WORD *)&v53[2 * llroundf(v202)];
          __asm { FCVT            S27, H27 }
          float v209 = _S11 * _S27;
          float v210 = _S13 * _S27;
          float v211 = _S14 * _S27;
          float v212 = (float)((float)(v270 * v205) + (float)(v204 * v271)) + (float)(v206 * v269);
          float v213 = (float)((float)(_S4 * v205) + (float)(v204 * _S3)) + (float)(v206 * _S5);
          float v214 = (float)((float)(_S7 * v205) + (float)(v204 * _S6)) + (float)(v206 * _S16);
          float v215 = (float)((float)(v270 * v210) + (float)(v209 * v271)) + (float)(v211 * v269);
          float v216 = (float)((float)(_S4 * v210) + (float)(v209 * _S3)) + (float)(v211 * _S5);
          float v217 = (float)((float)(_S7 * v210) + (float)(v209 * _S6)) + (float)(v211 * _S16);
          short float v218 = *(short float *)&v58[2 * llroundf(fminf(fmaxf(v212, 0.0), 8191.0))];
          short float v219 = *(short float *)&v58[2 * llroundf(fminf(fmaxf(v213, 0.0), 8191.0))];
          short float v220 = *(short float *)&v58[2 * llroundf(fminf(fmaxf(v214, 0.0), 8191.0))];
          short float v221 = *(short float *)&v58[2 * llroundf(fminf(fmaxf(v215, 0.0), 8191.0))];
          short float v222 = *(short float *)&v58[2 * llroundf(fminf(fmaxf(v216, 0.0), 8191.0))];
          short float v223 = *(short float *)&v58[2 * llroundf(fminf(fmaxf(v217, 0.0), 8191.0))];
          char v224 = llroundf((float)v182 * 0.0038911);
          if (v88) {
            char v225 = v224;
          }
          else {
            char v225 = -1;
          }
          char v226 = llroundf((float)v183 * 0.0038911);
          if (!v88) {
            char v226 = -1;
          }
          if (v218 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H14, #0 }
            if (_NF) {
              _S26 = 0.0;
            }
            else {
              __asm { FCVT            S26, H14 }
            }
          }
          else
          {
            _S26 = 255.0;
          }
          *(v162 - 4) = llroundf(_S26);
          if (v219 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H13, #0 }
            if (_NF) {
              _S26 = 0.0;
            }
            else {
              __asm { FCVT            S26, H13 }
            }
          }
          else
          {
            _S26 = 255.0;
          }
          *(v161 - 4) = llroundf(_S26);
          if (v220 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H12, #0 }
            if (_NF) {
              _S26 = 0.0;
            }
            else {
              __asm { FCVT            S26, H12 }
            }
          }
          else
          {
            _S26 = 255.0;
          }
          *(v160 - 4) = llroundf(_S26);
          *(v163 - 4) = v225;
          if (v221 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H11, #0 }
            if (_NF) {
              _S26 = 0.0;
            }
            else {
              __asm { FCVT            S26, H11 }
            }
          }
          else
          {
            _S26 = 255.0;
          }
          *float v162 = llroundf(_S26);
          if (v222 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H10, #0 }
            if (_NF) {
              _S26 = 0.0;
            }
            else {
              __asm { FCVT            S26, H10 }
            }
          }
          else
          {
            _S26 = 255.0;
          }
          *int16x8x2_t v161 = llroundf(_S26);
          if (v223 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H31, #0 }
            if (_NF) {
              _S26 = 0.0;
            }
            else {
              __asm { FCVT            S26, H31 }
            }
          }
          else
          {
            _S26 = 255.0;
          }
          *float16x8_t v160 = llroundf(_S26);
          v160 += 8;
          *float v163 = v226;
          v163 += 8;
          v159 += 2;
          v161 += 8;
          v162 += 8;
          float v89 = (uint16x8_t *)((char *)v89 + 4);
          float v86 = (uint16x8_t *)((char *)v86 + 4);
        }
        while (v7 > v159);
      }
      v77 += v246;
      uint64_t v76 = (uint16x8_t *)((char *)v76 + v245);
      unint64_t v74 = (int8x16_t *)((char *)v74 + v244);
      v75 += v243;
      ++v52;
    }
    while (v52 != v15 - v13);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (uint64_t *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    uint64_t v37 = v13 + 164;
    uint64_t v38 = v13 + 16548;
    uint64_t v39 = v13 + 32932;
    float v40 = *(float *)(v13 + 104);
    float v41 = *(float *)(v13 + 108);
    float v42 = *(float *)(v13 + 112);
    float v43 = *(float *)(v13 + 116);
    float v44 = *(float *)(v13 + 120);
    float v45 = (void *)*((void *)result + 16);
    uint64_t v46 = *((void *)result + 14);
    unint64_t v47 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v48 = *(void *)(result + 36);
    unsigned int v49 = *(unsigned __int8 *)(v13 + 124);
    if (v49 >= 0x11) {
      char v50 = 0;
    }
    else {
      char v50 = 16 - v49;
    }
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 161);
    uint64_t v51 = *(unsigned __int8 *)(v13 + 160);
    uint64_t v52 = *(unsigned __int8 *)(v13 + 159);
    uint64_t v53 = *(unsigned __int8 *)(v13 + 158);
    uint64_t v54 = *v45 + v47 * v19 + 4 * v46;
    uint64_t v55 = v14[2];
    if (v55) {
      uint64_t v56 = v55 + v18 * v11 + 2 * v48;
    }
    else {
      uint64_t v56 = 0;
    }
    uint64_t v58 = *v14;
    uint64_t v57 = v14[1];
    uint64_t v59 = v57 + v17 * v11 + 2 * v48;
    if (!v57) {
      uint64_t v59 = 0;
    }
    uint64_t v60 = v58 + v16 * v11 + 2 * v48;
    do
    {
      if (v10)
      {
        unint64_t v61 = 0;
        char v62 = (unsigned __int16 *)v60;
        uint64_t v63 = v54;
        float32x4_t v64 = (unsigned __int16 *)v56;
        do
        {
          short float v65 = (unsigned __int16 *)(v59 + 2 * v61);
          float v66 = (float)(v65[1] >> v50) - v23;
          float v67 = v25 * v66;
          float v68 = v24 * (float)((float)(*v62 >> v50) - v22);
          float v69 = (float)(v25 * v66) + v68;
          float v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            float v70 = (float)(v25 * v66) + v68;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = (float)(*v65 >> v50) - v23;
          float v72 = (float)(v27 * v66) + (float)(v71 * v26);
          float v73 = 8191.0;
          if ((float)(v68 + v72) <= 8191.0)
          {
            float v73 = v68 + v72;
            if ((float)(v68 + v72) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v28 * v71;
          float v75 = (float)(v28 * v71) + v68;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v24 * (float)((float)(v62[1] >> v50) - v22);
          float v78 = v67 + v77;
          BOOL v79 = (float)(v67 + v77) <= 8191.0;
          float v80 = 8191.0;
          if (v79)
          {
            float v80 = v78;
            if (v78 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v72 + v77;
          float v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v74 + v77;
          BOOL v79 = (float)(v74 + v77) <= 8191.0;
          float v84 = 8191.0;
          if (v79)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          if (v64)
          {
            unsigned int v85 = *v64;
            unsigned int v86 = v64[1];
            v64 += 2;
          }
          else
          {
            unsigned int v85 = 0;
            unsigned int v86 = 0;
          }
          _S10 = fmaxf(v70, 0.0);
          float v88 = 8191.0;
          LOWORD(_S10) = *(_WORD *)(v37 + 2 * llroundf(fminf(_S10, 8191.0)));
          __asm { FCVT            S10, H10 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          float v101 = (float)((float)((float)(v42 * _S31) + (float)(v41 * _S10)) + (float)(v43 * _S8))
               + (float)(v44 * fmaxf(_S10, fmaxf(_S31, _S8)));
          float v102 = 8191.0;
          if (v101 <= 8191.0)
          {
            float v102 = v101;
            if (v101 < 0.0) {
              float v102 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H9
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v38 + 2 * llroundf(v102));
          float v107 = fmaxf(_S9, fmaxf(_S11, _S12));
          float v108 = (float)((float)((float)(v42 * _S11) + (float)(v41 * _S9)) + (float)(v43 * _S12)) + (float)(v44 * v107);
          if (v108 <= 8191.0)
          {
            float v88 = (float)((float)((float)(v42 * _S11) + (float)(v41 * _S9)) + (float)(v43 * _S12)) + (float)(v44 * v107);
            if (v108 < 0.0) {
              float v88 = 0.0;
            }
          }
          __asm { FCVT            S13, H13 }
          float v110 = _S10 * _S13;
          float v111 = _S31 * _S13;
          float v112 = _S8 * _S13;
          _H30 = *(_WORD *)(v38 + 2 * llroundf(v88));
          __asm { FCVT            S30, H30 }
          float v115 = _S9 * _S30;
          float v116 = _S11 * _S30;
          float v117 = _S12 * _S30;
          float v118 = (float)((float)(v30 * v111) + (float)(v110 * v29)) + (float)(v112 * v31);
          float v119 = (float)((float)(v33 * v111) + (float)(v110 * v32)) + (float)(v112 * v34);
          float v120 = (float)((float)(v36 * v111) + (float)(v110 * v35)) + (float)(v112 * v40);
          float v121 = (float)((float)(v30 * v116) + (float)(v115 * v29)) + (float)(v117 * v31);
          float v122 = (float)((float)(v33 * v116) + (float)(v115 * v32)) + (float)(v117 * v34);
          float v123 = (float)((float)(v36 * v116) + (float)(v115 * v35)) + (float)(v117 * v40);
          short float v124 = *(short float *)(v39 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          short float v125 = *(short float *)(v39 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          short float v126 = *(short float *)(v39 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          short float v127 = *(short float *)(v39 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          short float v128 = *(short float *)(v39 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          short float v129 = *(short float *)(v39 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          char v130 = llroundf((float)v85 * 0.0038911);
          if (!v64) {
            char v130 = -1;
          }
          char v131 = llroundf((float)v86 * 0.0038911);
          if (!v64) {
            char v131 = -1;
          }
          if (v124 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H12, #0 }
            if (_NF) {
              _S12 = 0.0;
            }
            else {
              __asm { FCVT            S12, H12 }
            }
          }
          else
          {
            _S12 = 255.0;
          }
          *(unsigned char *)(v63 + v53) = llroundf(_S12);
          if (v125 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H11, #0 }
            if (_NF) {
              _S11 = 0.0;
            }
            else {
              __asm { FCVT            S11, H11 }
            }
          }
          else
          {
            _S11 = 255.0;
          }
          *(unsigned char *)(v63 + v52) = llroundf(_S11);
          if (v126 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H10, #0 }
            if (_NF) {
              _S10 = 0.0;
            }
            else {
              __asm { FCVT            S10, H10 }
            }
          }
          else
          {
            _S10 = 255.0;
          }
          *(unsigned char *)(v63 + v51) = llroundf(_S10);
          result[v63] = v130;
          if (v127 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H9, #0 }
            if (_NF) {
              _S9 = 0.0;
            }
            else {
              __asm { FCVT            S9, H9 }
            }
          }
          else
          {
            _S9 = 255.0;
          }
          uint64_t v140 = v63 + 4;
          *(unsigned char *)(v63 + 4 + v53) = llroundf(_S9);
          if (v128 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H8, #0 }
            if (_NF) {
              _S8 = 0.0;
            }
            else {
              __asm { FCVT            S8, H8 }
            }
          }
          else
          {
            _S8 = 255.0;
          }
          *(unsigned char *)(v140 + v52) = llroundf(_S8);
          if (v129 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H30, #0 }
            if (_NF) {
              _S30 = 0.0;
            }
            else {
              __asm { FCVT            S30, H30 }
            }
          }
          else
          {
            _S30 = 255.0;
          }
          *(unsigned char *)(v140 + v51) = llroundf(_S30);
          result[v140] = v131;
          v63 += 8;
          v61 += 2;
          v62 += 2;
        }
        while (v10 > v61);
      }
      v60 += v16;
      v59 += v17;
      v56 += v18;
      v54 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_BGRA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double _D0)
{
  char v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = *(void *)(a1 + 20);
  uint64_t v214 = *(void *)(a1 + 36);
  uint64_t v8 = *(void *)(a1 + 44);
  uint64_t v9 = *(void *)(a1 + 28);
  unint64_t v10 = *a1;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = v11 + v8;
  unint64_t v13 = (v9 + v9 * a2) / v10;
  uint64_t v14 = v13 + v8;
  uint64_t v15 = *((void *)a1 + 14);
  uint64_t v16 = (float32x2_t *)*((void *)a1 + 19);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 7);
  uint64_t v17 = (uint64_t *)*((void *)a1 + 8);
  unint64_t v19 = *((void *)a1 + 13) * a2;
  uint64_t v20 = *((void *)a1 + 15);
  uint64_t v200 = *v17;
  uint64_t v21 = v17[1];
  uint64_t v22 = v17[2];
  uint64_t v23 = *v18;
  uint64_t v24 = v18[1];
  uint64_t v25 = v18[2];
  uint64_t v26 = **((void **)a1 + 17);
  uint64_t v201 = **((void **)a1 + 16);
  unsigned int v27 = v16[16].u32[0];
  uint64_t v28 = v16[19].u8[6];
  v219[0] = v16[19].i8[6];
  uint64_t v29 = v16[19].u8[7];
  v219[1] = v16[19].i8[7];
  uint64_t v30 = v16[20].u8[0];
  _OWORD v219[2] = v16[20].i8[0];
  uint64_t v31 = v16[20].u8[1];
  v219[3] = v16[20].i8[1];
  unsigned int v32 = v16[17].u16[2];
  unsigned int v33 = v16[15].u8[4];
  unsigned int v34 = v16[17].u16[3];
  float v35 = v16->f32[0];
  v3.i32[0] = v16[1].i32[0];
  float32x2_t v36 = v16[2];
  v37.i32[0] = v16[3].i32[1];
  uint64_t v199 = v21;
  uint64_t v198 = v24 + v21 * v12;
  LODWORD(_D0) = v16[9].i32[0];
  _S1 = v16[9].f32[1];
  unint64_t v39 = v26 * (v19 / v10 + v20);
  _S2 = v16[10].f32[0];
  _S3 = v16[10].f32[1];
  _S4 = v16[11].f32[0];
  _S5 = v16[11].f32[1];
  _S6 = v16[12].f32[0];
  _S7 = v16[12].f32[1];
  _S16 = v16[13].f32[0];
  long long v217 = 0u;
  long long v218 = 0u;
  do
  {
    LODWORD(result) = 0;
    char v48 = v219[v6];
    do
    {
      *(unsigned char *)(((unint64_t)&v217 + ((v48 + 4 * result) & 0xF8)) | (v48 + 4 * (_BYTE)result) & 7) = v5 + result;
      uint64_t result = (result + 1);
    }
    while (result != 8);
    ++v6;
    v5 += 8;
  }
  while (v6 != 4);
  if (v13 != v11)
  {
    uint64_t v49 = 0;
    char v50 = (char *)&v16[2068] + 4;
    uint64_t v51 = (char *)&v16[20] + 4;
    float v52 = (float)v32;
    *(short float *)v4.i16 = (short float)v32;
    float v53 = 8191.0 / (float)v27;
    float v54 = (float)v34;
    _S20 = v53 * v35;
    int16x8_t v56 = vdupq_lane_s16(*(int16x4_t *)v4.f32, 0);
    __asm { FCVT            H8, S20 }
    short float v62 = -(short float)v34;
    v37.i32[1] = v3.i32[0];
    *(float32x2_t *)v3.f32 = vmul_n_f32(v37, v53);
    *(float32x2_t *)v4.f32 = vmul_n_f32(v36, v53);
    float16x8_t v215 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    float16x8_t v216 = (float16x8_t)v56;
    float16x8_t v212 = vmulq_n_f16(v215, v62);
    float16x8_t v213 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v63 = vmulq_n_f16(v213, v62);
    __asm { FCVT            H9, S0 }
    short float v210 = _H9;
    float16x8_t v211 = v63;
    __asm { FCVT            H9, S1 }
    short float v209 = _H9;
    __asm { FCVT            H9, S2 }
    short float v208 = _H9;
    __asm { FCVT            H9, S3 }
    short float v207 = _H9;
    __asm { FCVT            H9, S4 }
    short float v206 = _H9;
    __asm { FCVT            H9, S5 }
    short float v205 = _H9;
    __asm { FCVT            H9, S6 }
    short float v204 = _H9;
    __asm { FCVT            H9, S7 }
    short float v203 = _H9;
    __asm { FCVT            H9, S16 }
    short float v202 = _H9;
    if (v33 >= 0x11) {
      unsigned __int8 v73 = 0;
    }
    else {
      unsigned __int8 v73 = 16 - v33;
    }
    uint64_t result = v201 + v39 + 4 * v15;
    if (v25) {
      uint64_t v74 = v25 + v22 * v12 + 2 * v214;
    }
    else {
      uint64_t v74 = 0;
    }
    if (v24) {
      float v75 = (uint16x8_t *)(v198 + 2 * v214);
    }
    else {
      float v75 = 0;
    }
    uint64_t v76 = v23 + v200 * v12 + 2 * v214;
    uint16x8_t v77 = (uint16x8_t)vdupq_n_s16(-v73);
    uint64_t v78 = v3.i64[0];
    uint64_t v79 = v4.i64[0];
    uint64_t v197 = v30 + 4;
    uint64_t v195 = v28 + 4;
    uint64_t v196 = v29 + 4;
    uint64_t v194 = v31 + 4;
    v80.i64[0] = 0x9000900090009000;
    v80.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v7 < 8)
      {
        unint64_t v127 = 0;
        float v87 = v75;
        unsigned int v86 = (int8x16_t *)v74;
        unsigned int v85 = (_OWORD *)result;
        float v84 = (uint16x8_t *)v76;
      }
      else
      {
        int v81 = 0;
        int8x8_t v83 = *(int8x8_t *)((char *)&v217 + 8);
        int8x8_t v82 = (int8x8_t)v217;
        float v84 = (uint16x8_t *)v76;
        unsigned int v85 = (_OWORD *)result;
        unsigned int v86 = (int8x16_t *)v74;
        float v87 = v75;
        int8x8_t v88 = *(int8x8_t *)((char *)&v218 + 8);
        int8x8_t v89 = (int8x8_t)v218;
        do
        {
          if (v86 && (v90 = *v86, ++v86, int8x16_t v91 = v90, v86))
          {
            *(int16x4_t *)v92.i8 = vzip1_s16(*(int16x4_t *)v91.i8, 0);
            v92.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v91.i8, 0);
            int16x4_t v93 = (int16x4_t)vextq_s8(v91, v91, 8uLL).u64[0];
            *(int16x4_t *)v94.i8 = vzip1_s16(v93, 0);
            v94.u64[1] = (unint64_t)vzip2_s16(v93, 0);
            float32x4_t v95 = vcvtq_f32_u32(v94);
            float32x4_t v96 = (float32x4_t)vdupq_n_s32(0x3B7F00FFu);
            int8x8_t v97 = vmovn_s16(vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_u32(v92), v96)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(v95, v96))));
          }
          else
          {
            int8x8_t v97 = (int8x8_t)-1;
          }
          uint16x8_t v98 = *v87++;
          float16x8_t v99 = vcvtq_f16_u16(vshlq_u16(v98, v77));
          int16x8_t v100 = (int16x8_t)vmlaq_f16(v212, v215, v99);
          int8x16_t v101 = (int8x16_t)vmlaq_f16(v211, v213, v99);
          v99.i64[0] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u64[0];
          *(int16x4_t *)v102.i8 = vuzp1_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
          *(int16x4_t *)v99.i8 = vuzp2_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
          *(double *)&v99.i64[1] = _D0;
          *(double *)&v102.i64[1] = _D0;
          v100.i64[0] = vextq_s8(v101, v101, 8uLL).u64[0];
          *(float16x4_t *)v100.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8));
          *(double *)&v100.i64[1] = _D0;
          v220.val[1] = (int8x16_t)vzip1q_s16(v100, v100);
          uint16x8_t v103 = *v84++;
          float16x8_t v104 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v103, v77)), v216);
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v99, (int16x8_t)v99), v104, _H8), (float16x8_t)0), v80));
          uint32x4_t v106 = vmovl_high_u16(v105);
          float16x8_t v107 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v105.i8);
          v107.i16[0] = *(_WORD *)&v51[2 * v107.u32[0]];
          v107.i16[1] = *(_WORD *)&v51[2 * v107.u32[1]];
          v107.i16[2] = *(_WORD *)&v51[2 * v107.u32[2]];
          v107.i16[3] = *(_WORD *)&v51[2 * v107.u32[3]];
          v107.i16[4] = *(_WORD *)&v51[2 * v106.u32[0]];
          v107.i16[5] = *(_WORD *)&v51[2 * v106.u32[1]];
          v107.i16[6] = *(_WORD *)&v51[2 * v106.u32[2]];
          v107.i16[7] = *(_WORD *)&v51[2 * v106.u32[3]];
          uint16x8_t v108 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)v220.val[1], v104, _H8), (float16x8_t)0), v80));
          uint32x4_t v109 = vmovl_high_u16(v108);
          uint32x4_t v110 = vmovl_u16(*(uint16x4_t *)v108.i8);
          v220.val[1].i16[0] = *(_WORD *)&v51[2 * v110.u32[0]];
          v220.val[1].i16[1] = *(_WORD *)&v51[2 * v110.u32[1]];
          v220.val[1].i16[2] = *(_WORD *)&v51[2 * v110.u32[2]];
          v220.val[1].i16[3] = *(_WORD *)&v51[2 * v110.u32[3]];
          v220.val[1].i16[4] = *(_WORD *)&v51[2 * v109.u32[0]];
          v220.val[1].i16[5] = *(_WORD *)&v51[2 * v109.u32[1]];
          v220.val[1].i16[6] = *(_WORD *)&v51[2 * v109.u32[2]];
          v220.val[1].i16[7] = *(_WORD *)&v51[2 * v109.u32[3]];
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16(v102, v102), v104, _H8), (float16x8_t)0), v80));
          uint32x4_t v112 = vmovl_high_u16(v111);
          float16x8_t v113 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v111.i8);
          v113.i16[0] = *(_WORD *)&v51[2 * v113.u32[0]];
          v113.i16[1] = *(_WORD *)&v51[2 * v113.u32[1]];
          v113.i16[2] = *(_WORD *)&v51[2 * v113.u32[2]];
          v113.i16[3] = *(_WORD *)&v51[2 * v113.u32[3]];
          v113.i16[4] = *(_WORD *)&v51[2 * v112.u32[0]];
          v113.i16[5] = *(_WORD *)&v51[2 * v112.u32[1]];
          v113.i16[6] = *(_WORD *)&v51[2 * v112.u32[2]];
          v113.i16[7] = *(_WORD *)&v51[2 * v112.u32[3]];
          float16x8_t v114 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v107, v210), (float16x8_t)v220.val[1], v209), v113, v208);
          float16x8_t v115 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v107, v207), (float16x8_t)v220.val[1], v206), v113, v205);
          float16x8_t v116 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v113, v202), (float16x8_t)v220.val[1], v203), v107, v204);
          uint16x8_t v117 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v80));
          uint32x4_t v118 = vmovl_high_u16(v117);
          float16x8_t v119 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v117.i8);
          v119.i16[0] = *(_WORD *)&v50[2 * v119.u32[0]];
          v119.i16[1] = *(_WORD *)&v50[2 * v119.u32[1]];
          v119.i16[2] = *(_WORD *)&v50[2 * v119.u32[2]];
          v119.i16[3] = *(_WORD *)&v50[2 * v119.u32[3]];
          v119.i16[4] = *(_WORD *)&v50[2 * v118.u32[0]];
          v119.i16[5] = *(_WORD *)&v50[2 * v118.u32[1]];
          v119.i16[6] = *(_WORD *)&v50[2 * v118.u32[2]];
          v119.i16[7] = *(_WORD *)&v50[2 * v118.u32[3]];
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v80));
          uint32x4_t v121 = vmovl_high_u16(v120);
          uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v120.i8);
          v102.i16[0] = *(_WORD *)&v50[2 * v122.u32[0]];
          v102.i16[1] = *(_WORD *)&v50[2 * v122.u32[1]];
          v102.i16[2] = *(_WORD *)&v50[2 * v122.u32[2]];
          v102.i16[3] = *(_WORD *)&v50[2 * v122.u32[3]];
          v102.i16[4] = *(_WORD *)&v50[2 * v121.u32[0]];
          v102.i16[5] = *(_WORD *)&v50[2 * v121.u32[1]];
          v102.i16[6] = *(_WORD *)&v50[2 * v121.u32[2]];
          v102.i16[7] = *(_WORD *)&v50[2 * v121.u32[3]];
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)0), v80));
          uint32x4_t v124 = vmovl_high_u16(v123);
          float16x8_t v125 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v123.i8);
          v125.i16[0] = *(_WORD *)&v50[2 * v125.u32[0]];
          v125.i16[1] = *(_WORD *)&v50[2 * v125.u32[1]];
          v125.i16[2] = *(_WORD *)&v50[2 * v125.u32[2]];
          v125.i16[3] = *(_WORD *)&v50[2 * v125.u32[3]];
          v125.i16[4] = *(_WORD *)&v50[2 * v124.u32[0]];
          v125.i16[5] = *(_WORD *)&v50[2 * v124.u32[1]];
          v125.i16[6] = *(_WORD *)&v50[2 * v124.u32[2]];
          v125.i16[7] = *(_WORD *)&v50[2 * v124.u32[3]];
          float16x8_t v126 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          *(int8x8_t *)v220.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v125, (float16x8_t)0), v126)));
          v220.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, (float16x8_t)0), v126)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v102, (float16x8_t)0), v126)));
          v220.val[1].u64[1] = (unint64_t)v97;
          *(int8x8_t *)v119.i8 = vqtbl2_s8(v220, v82);
          v119.u64[1] = (unint64_t)vqtbl2_s8(v220, v83);
          *(int8x8_t *)v125.i8 = vqtbl2_s8(v220, v89);
          v125.u64[1] = (unint64_t)vqtbl2_s8(v220, v88);
          _OWORD *v85 = v119;
          v85[1] = v125;
          v85 += 2;
          v81 += 8;
        }
        while (v81 < (int)v7 - 7);
        unint64_t v127 = v7 & 0xFFFFFFF8;
      }
      if (v7 > v127)
      {
        short float v128 = (char *)v85 + v197;
        short float v129 = (char *)v85 + v196;
        char v130 = (char *)v85 + v195;
        char v131 = (char *)v85 + v194;
        do
        {
          float v132 = (float)(v87->u16[1] >> v73) - v54;
          float v133 = *((float *)&v78 + 1) * v132;
          float v134 = _S20 * (float)((float)(v84->u16[0] >> v73) - v52);
          float v135 = (float)(*((float *)&v78 + 1) * v132) + v134;
          float v136 = 8191.0;
          if (v135 <= 8191.0)
          {
            float v136 = (float)(*((float *)&v78 + 1) * v132) + v134;
            if (v135 < 0.0) {
              float v136 = 0.0;
            }
          }
          float v137 = (float)(v87->u16[0] >> v73) - v54;
          float v138 = (float)(*((float *)&v79 + 1) * v132) + (float)(v137 * *(float *)&v79);
          float v139 = 8191.0;
          if ((float)(v134 + v138) <= 8191.0)
          {
            float v139 = v134 + v138;
            if ((float)(v134 + v138) < 0.0) {
              float v139 = 0.0;
            }
          }
          float v140 = *(float *)&v78 * v137;
          float v141 = v140 + v134;
          BOOL v142 = (float)(v140 + v134) <= 8191.0;
          float v143 = 8191.0;
          if (v142)
          {
            float v143 = v141;
            if (v141 < 0.0) {
              float v143 = 0.0;
            }
          }
          float v144 = _S20 * (float)((float)(v84->u16[1] >> v73) - v52);
          float v145 = v133 + v144;
          float v146 = 8191.0;
          if (v145 <= 8191.0)
          {
            float v146 = v145;
            if (v145 < 0.0) {
              float v146 = 0.0;
            }
          }
          float v147 = v138 + v144;
          BOOL v142 = (float)(v138 + v144) <= 8191.0;
          float v148 = 8191.0;
          if (v142)
          {
            float v148 = v147;
            if (v147 < 0.0) {
              float v148 = 0.0;
            }
          }
          float v149 = v140 + v144;
          float v150 = 8191.0;
          if (v149 <= 8191.0)
          {
            float v150 = v149;
            if (v149 < 0.0) {
              float v150 = 0.0;
            }
          }
          if (v86)
          {
            unsigned int v151 = v86->u16[0];
            unsigned int v152 = v86->u16[1];
            unsigned int v86 = (int8x16_t *)((char *)v86 + 4);
          }
          else
          {
            unsigned int v151 = 0;
            unsigned int v152 = 0;
          }
          _H29 = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0))];
          unsigned int v154 = llroundf(fminf(fmaxf(v139, 0.0), 8191.0));
          __asm { FCVT            S24, H29 }
          _H29 = *(_WORD *)&v51[2 * v154];
          __asm { FCVT            S29, H29 }
          _H25 = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0))];
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0))];
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0))];
          _H9 = *(_WORD *)&v51[2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0))];
          __asm
          {
            FCVT            S27, H27
            FCVT            S9, H9
          }
          float v166 = (float)((float)(_S1 * _S29) + (float)(_S24 * *(float *)&_D0)) + (float)(_S25 * _S2);
          float v167 = (float)((float)(_S4 * _S29) + (float)(_S24 * _S3)) + (float)(_S25 * _S5);
          float v168 = (float)((float)(_S7 * _S29) + (float)(_S24 * _S6)) + (float)(_S25 * _S16);
          float v169 = (float)((float)(_S1 * _S27) + (float)(_S26 * *(float *)&_D0)) + (float)(_S9 * _S2);
          float v170 = (float)((float)(_S4 * _S27) + (float)(_S26 * _S3)) + (float)(_S9 * _S5);
          float v171 = (float)((float)(_S7 * _S27) + (float)(_S26 * _S6)) + (float)(_S9 * _S16);
          short float v172 = *(short float *)&v50[2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0))];
          short float v173 = *(short float *)&v50[2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0))];
          short float v174 = *(short float *)&v50[2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0))];
          short float v175 = *(short float *)&v50[2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0))];
          short float v176 = *(short float *)&v50[2 * llroundf(fminf(fmaxf(v170, 0.0), 8191.0))];
          short float v177 = *(short float *)&v50[2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0))];
          char v178 = llroundf((float)v151 * 0.0038911);
          if (v86) {
            char v179 = v178;
          }
          else {
            char v179 = -1;
          }
          char v180 = llroundf((float)v152 * 0.0038911);
          if (v86) {
            char v181 = v180;
          }
          else {
            char v181 = -1;
          }
          if (v172 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H12, #0 }
            if (_NF) {
              _S12 = 0.0;
            }
            else {
              __asm { FCVT            S12, H12 }
            }
          }
          else
          {
            _S12 = 255.0;
          }
          *(v130 - 4) = llroundf(_S12);
          if (v173 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H11, #0 }
            if (_NF) {
              _S11 = 0.0;
            }
            else {
              __asm { FCVT            S11, H11 }
            }
          }
          else
          {
            _S11 = 255.0;
          }
          *(v129 - 4) = llroundf(_S11);
          if (v174 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H27, #0 }
            if (_NF) {
              _S27 = 0.0;
            }
            else {
              __asm { FCVT            S27, H27 }
            }
          }
          else
          {
            _S27 = 255.0;
          }
          *(v128 - 4) = llroundf(_S27);
          *(v131 - 4) = v179;
          if (v175 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H26, #0 }
            if (_NF) {
              _S26 = 0.0;
            }
            else {
              __asm { FCVT            S26, H26 }
            }
          }
          else
          {
            _S26 = 255.0;
          }
          *char v130 = llroundf(_S26);
          if (v176 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H25, #0 }
            if (_NF) {
              _S25 = 0.0;
            }
            else {
              __asm { FCVT            S25, H25 }
            }
          }
          else
          {
            _S25 = 255.0;
          }
          *short float v129 = llroundf(_S25);
          if (v177 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H23, #0 }
            if (_NF) {
              _S23 = 0.0;
            }
            else {
              __asm { FCVT            S23, H23 }
            }
          }
          else
          {
            _S23 = 255.0;
          }
          *short float v128 = llroundf(_S23);
          v128 += 8;
          *char v131 = v181;
          v131 += 8;
          v127 += 2;
          v129 += 8;
          v130 += 8;
          float v87 = (uint16x8_t *)((char *)v87 + 4);
          float v84 = (uint16x8_t *)((char *)v84 + 4);
        }
        while (v7 > v127);
      }
      v76 += v200;
      float v75 = (uint16x8_t *)((char *)v75 + v199);
      v74 += v22;
      result += v26;
      ++v49;
    }
    while (v49 != v14 - v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (uint64_t *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    float v37 = *(float *)(v13 + 104);
    uint64_t v38 = v13 + 164;
    uint64_t v39 = v13 + 16548;
    uint64_t v40 = (void *)*((void *)result + 16);
    uint64_t v41 = *((void *)result + 14);
    unint64_t v42 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v43 = *(void *)(result + 36);
    unsigned int v44 = *(unsigned __int8 *)(v13 + 124);
    if (v44 >= 0x11) {
      char v45 = 0;
    }
    else {
      char v45 = 16 - v44;
    }
    uint64_t v46 = *(unsigned __int8 *)(v13 + 161);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 160);
    uint64_t v47 = *(unsigned __int8 *)(v13 + 159);
    uint64_t v48 = *(unsigned __int8 *)(v13 + 158);
    uint64_t v49 = *v40 + v42 * v19 + 4 * v41;
    uint64_t v50 = v14[2];
    if (v50) {
      uint64_t v51 = v50 + v18 * v11 + 2 * v43;
    }
    else {
      uint64_t v51 = 0;
    }
    uint64_t v53 = *v14;
    uint64_t v52 = v14[1];
    uint64_t v54 = v52 + v17 * v11 + 2 * v43;
    if (!v52) {
      uint64_t v54 = 0;
    }
    uint64_t v55 = v53 + v16 * v11 + 2 * v43;
    do
    {
      if (v10)
      {
        unint64_t v56 = 0;
        uint64_t v57 = (unsigned __int16 *)v55;
        uint64_t v58 = v49;
        uint64_t v59 = (unsigned __int16 *)v51;
        do
        {
          uint64_t v60 = (unsigned __int16 *)(v54 + 2 * v56);
          float v61 = (float)(v60[1] >> v45) - v23;
          float v62 = v25 * v61;
          float v63 = v24 * (float)((float)(*v57 >> v45) - v22);
          float v64 = (float)(v25 * v61) + v63;
          float v65 = 8191.0;
          if (v64 <= 8191.0)
          {
            float v65 = (float)(v25 * v61) + v63;
            if (v64 < 0.0) {
              float v65 = 0.0;
            }
          }
          float v66 = (float)(*v60 >> v45) - v23;
          float v67 = (float)(v27 * v61) + (float)(v66 * v26);
          float v68 = 8191.0;
          if ((float)(v63 + v67) <= 8191.0)
          {
            float v68 = v63 + v67;
            if ((float)(v63 + v67) < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v28 * v66;
          float v70 = v69 + v63;
          BOOL v71 = (float)(v69 + v63) <= 8191.0;
          float v72 = 8191.0;
          if (v71)
          {
            float v72 = v70;
            if (v70 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v24 * (float)((float)(v57[1] >> v45) - v22);
          float v74 = v62 + v73;
          BOOL v71 = (float)(v62 + v73) <= 8191.0;
          float v75 = 8191.0;
          if (v71)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v67 + v73;
          BOOL v71 = (float)(v67 + v73) <= 8191.0;
          float v77 = 8191.0;
          if (v71)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v69 + v73;
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          if (v59)
          {
            unsigned int v80 = *v59;
            unsigned int v81 = v59[1];
            v59 += 2;
          }
          else
          {
            unsigned int v80 = 0;
            unsigned int v81 = 0;
          }
          _H26 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm
          {
            FCVT            S30, H30
            FCVT            S31, H31
          }
          float v98 = (float)((float)(v30 * _S27) + (float)(_S26 * v29)) + (float)(_S28 * v31);
          float v99 = (float)((float)(v33 * _S27) + (float)(_S26 * v32)) + (float)(_S28 * v34);
          float v100 = (float)((float)(v36 * _S27) + (float)(_S26 * v35)) + (float)(_S28 * v37);
          float v101 = (float)((float)(v30 * _S30) + (float)(_S29 * v29)) + (float)(_S31 * v31);
          float v102 = (float)((float)(v33 * _S30) + (float)(_S29 * v32)) + (float)(_S31 * v34);
          float v103 = (float)((float)(v36 * _S30) + (float)(_S29 * v35)) + (float)(_S31 * v37);
          short float v104 = *(short float *)(v39 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          short float v105 = *(short float *)(v39 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          short float v106 = *(short float *)(v39 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          short float v107 = *(short float *)(v39 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          short float v108 = *(short float *)(v39 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          short float v109 = *(short float *)(v39 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          char v110 = llroundf((float)v80 * 0.0038911);
          if (!v59) {
            char v110 = -1;
          }
          char v111 = llroundf((float)v81 * 0.0038911);
          if (!v59) {
            char v111 = -1;
          }
          if (v104 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H8, #0 }
            if (_NF) {
              _S8 = 0.0;
            }
            else {
              __asm { FCVT            S8, H8 }
            }
          }
          else
          {
            _S8 = 255.0;
          }
          *(unsigned char *)(v58 + v48) = llroundf(_S8);
          if (v105 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H31, #0 }
            if (_NF) {
              _S31 = 0.0;
            }
            else {
              __asm { FCVT            S31, H31 }
            }
          }
          else
          {
            _S31 = 255.0;
          }
          *(unsigned char *)(v58 + v47) = llroundf(_S31);
          if (v106 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H30, #0 }
            if (_NF) {
              _S30 = 0.0;
            }
            else {
              __asm { FCVT            S30, H30 }
            }
          }
          else
          {
            _S30 = 255.0;
          }
          result[v58] = llroundf(_S30);
          *(unsigned char *)(v58 + v46) = v110;
          if (v107 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H29, #0 }
            if (_NF) {
              _S29 = 0.0;
            }
            else {
              __asm { FCVT            S29, H29 }
            }
          }
          else
          {
            _S29 = 255.0;
          }
          uint64_t v120 = v58 + 4;
          *(unsigned char *)(v58 + 4 + v48) = llroundf(_S29);
          if (v108 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H28, #0 }
            if (_NF) {
              _S28 = 0.0;
            }
            else {
              __asm { FCVT            S28, H28 }
            }
          }
          else
          {
            _S28 = 255.0;
          }
          *(unsigned char *)(v120 + v47) = llroundf(_S28);
          if (v109 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H26, #0 }
            if (_NF) {
              _S26 = 0.0;
            }
            else {
              __asm { FCVT            S26, H26 }
            }
          }
          else
          {
            _S26 = 255.0;
          }
          result[v120] = llroundf(_S26);
          *(unsigned char *)(v120 + v46) = v111;
          v58 += 8;
          v56 += 2;
          v57 += 2;
        }
        while (v10 > v56);
      }
      v55 += v16;
      v54 += v17;
      v51 += v18;
      v49 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_BGRA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_BGRA_neon_fp16_GCD);
  return 0;
}

uint16x8_t *vt_Copy_xf422_rgb_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, double a6, int16x4_t a7, float32x4_t a8, double a9, float32x4_t a10)
{
  char v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = *(void *)(a1 + 20);
  uint64_t v13 = *(void *)(a1 + 36);
  uint64_t v14 = *(void *)(a1 + 44);
  uint64_t v15 = *(void *)(a1 + 28);
  unint64_t v16 = *a1;
  unint64_t v17 = v15 * a2 / v16;
  uint64_t v18 = v17 + v14;
  unint64_t v19 = (v15 + v15 * a2) / v16;
  uint64_t v128 = v19 + v14;
  uint64_t v20 = *((void *)a1 + 15);
  uint64_t v135 = *((void *)a1 + 14);
  unint64_t v21 = *((void *)a1 + 13) * a2;
  uint64_t v22 = *((void *)a1 + 19);
  uint64_t v24 = (uint64_t *)*((void *)a1 + 7);
  uint64_t v23 = (uint64_t *)*((void *)a1 + 8);
  uint64_t v25 = *v23;
  uint64_t v26 = v23[1];
  uint64_t v27 = v23[2];
  uint64_t v28 = v24[1];
  uint64_t v133 = *v24;
  uint64_t v29 = v24[2];
  uint64_t v30 = **((void **)a1 + 17);
  uint64_t v131 = **((void **)a1 + 16);
  unsigned int v31 = *(_DWORD *)(v22 + 128);
  unsigned int v32 = *(_DWORD *)(v22 + 136);
  uint64_t v33 = *(unsigned __int8 *)(v22 + 158);
  v138[0] = *(unsigned char *)(v22 + 158);
  uint64_t v34 = *(unsigned __int8 *)(v22 + 159);
  v138[1] = *(unsigned char *)(v22 + 159);
  uint64_t v35 = *(unsigned __int8 *)(v22 + 160);
  v138[2] = *(unsigned char *)(v22 + 160);
  uint64_t v36 = *(unsigned __int8 *)(v22 + 161);
  v138[3] = *(unsigned char *)(v22 + 161);
  unsigned int v37 = *(unsigned __int16 *)(v22 + 140);
  unint64_t v129 = v30 * (v21 / v16 + v20);
  unsigned int v38 = *(unsigned __int8 *)(v22 + 124);
  unsigned int v39 = *(unsigned __int16 *)(v22 + 142);
  float v40 = *(float *)v22;
  unsigned __int32 v41 = *(_DWORD *)(v22 + 8);
  a10.i64[0] = *(void *)(v22 + 16);
  a8.i32[0] = *(_DWORD *)(v22 + 28);
  HIDWORD(v42) = 0;
  long long v136 = 0u;
  long long v137 = 0u;
  uint64_t result = (uint16x8_t *)&v136;
  do
  {
    int v44 = 0;
    char v45 = v138[v11];
    do
    {
      *(unsigned char *)(((unint64_t)&v136 + ((v45 + 4 * v44) & 0xF8)) | (v45 + 4 * (_BYTE)v44) & 7) = v10 + v44;
      ++v44;
    }
    while (v44 != 8);
    ++v11;
    v10 += 8;
  }
  while (v11 != 4);
  if (v19 != v17)
  {
    uint64_t v46 = 0;
    uint64_t v47 = v128 - v18;
    float v48 = (float)v32 / (float)v31;
    *(float *)&uint64_t v42 = (float)v37;
    float v49 = (float)v39;
    _S2 = v48 * v40;
    __asm { FCVT            H3, S2 }
    *(short float *)a7.i16 = (short float)v37;
    float16x8_t v56 = (float16x8_t)vdupq_lane_s16(a7, 0);
    short float v57 = -(short float)v39;
    a8.i32[1] = v41;
    *(float32x2_t *)a8.f32 = vmul_n_f32(*(float32x2_t *)a8.f32, v48);
    float16x8_t v58 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a8), 0);
    *(float32x2_t *)a10.f32 = vmul_n_f32(*(float32x2_t *)a10.f32, v48);
    float16x8_t v59 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a10), 0);
    float16x8_t v60 = vmulq_n_f16(v58, v57);
    float16x8_t v61 = vmulq_n_f16(v59, v57);
    if (v38 >= 0x11) {
      unsigned __int8 v62 = 0;
    }
    else {
      unsigned __int8 v62 = 16 - v38;
    }
    uint64_t v63 = v131 + v129 + 4 * v135;
    if (v29) {
      uint64_t v64 = v29 + v27 * v18 + 2 * v13;
    }
    else {
      uint64_t v64 = 0;
    }
    if (v28) {
      uint64_t v65 = v28 + v26 * v18 + 2 * v13;
    }
    else {
      uint64_t v65 = 0;
    }
    uint64_t result = (uint16x8_t *)(v133 + v25 * v18 + 2 * v13);
    uint16x8_t v66 = (uint16x8_t)vdupq_n_s16(-v62);
    uint64_t v134 = v35 + 4;
    uint64_t v130 = v33 + 4;
    uint64_t v132 = v34 + 4;
    do
    {
      if ((int)v12 < 8)
      {
        unint64_t v96 = 0;
        float v73 = (uint16x8_t *)v65;
        float v72 = (int8x16_t *)v64;
        BOOL v71 = (_OWORD *)v63;
        float v70 = result;
      }
      else
      {
        int v67 = 0;
        int8x8_t v69 = *(int8x8_t *)((char *)&v136 + 8);
        int8x8_t v68 = (int8x8_t)v136;
        float v70 = result;
        BOOL v71 = (_OWORD *)v63;
        float v72 = (int8x16_t *)v64;
        float v73 = (uint16x8_t *)v65;
        int8x8_t v75 = *(int8x8_t *)((char *)&v137 + 8);
        int8x8_t v74 = (int8x8_t)v137;
        do
        {
          if (v72)
          {
            int8x16_t v76 = *v72++;
            *(int16x4_t *)v77.i8 = vzip1_s16(*(int16x4_t *)v76.i8, 0);
            v77.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v76.i8, 0);
            int16x4_t v78 = (int16x4_t)vextq_s8(v76, v76, 8uLL).u64[0];
            *(int16x4_t *)v79.i8 = vzip1_s16(v78, 0);
            v79.u64[1] = (unint64_t)vzip2_s16(v78, 0);
            float32x4_t v80 = vcvtq_f32_u32(v79);
            float32x4_t v81 = (float32x4_t)vdupq_n_s32(0x3B7F00FFu);
            int8x8_t v82 = vmovn_s16(vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_u32(v77), v81)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(v80, v81))));
          }
          else
          {
            int8x8_t v82 = (int8x8_t)-1;
          }
          uint16x8_t v83 = *v73++;
          float16x8_t v84 = vcvtq_f16_u16(vshlq_u16(v83, v66));
          int8x16_t v85 = (int8x16_t)vmlaq_f16(v60, v58, v84);
          int16x8_t v86 = (int16x8_t)vmlaq_f16(v61, v59, v84);
          v84.i64[0] = vextq_s8(v85, v85, 8uLL).u64[0];
          *(int16x4_t *)v87.i8 = vuzp1_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v84.i8);
          *(int16x4_t *)v84.i8 = vuzp2_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v84.i8);
          v84.i64[1] = v42;
          v87.i64[1] = v42;
          float16x8_t v88 = (float16x8_t)vzip1q_s16(v87, v87);
          v87.i64[0] = vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u64[0];
          *(float16x4_t *)v86.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v86.i8, *(int16x4_t *)v87.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v86.i8, *(int16x4_t *)v87.i8));
          v86.i64[1] = v42;
          uint16x8_t v89 = *v70++;
          float16x8_t v90 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v89, v66)), v56);
          float16x8_t v91 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v86, v86), v90, _H3);
          float16x8_t v92 = vmlaq_n_f16(v88, v90, _H3);
          float16x8_t v93 = vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v84, (int16x8_t)v84), v90, _H3), (float16x8_t)0);
          float16x8_t v94 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          *(int8x8_t *)v139.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v92, (float16x8_t)0), v94)));
          v139.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(v93, v94)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v91, (float16x8_t)0), v94)));
          v139.val[1].u64[1] = (unint64_t)v82;
          *(int8x8_t *)&long long v95 = vqtbl2_s8(v139, v68);
          *((int8x8_t *)&v95 + 1) = vqtbl2_s8(v139, v69);
          *(int8x8_t *)v93.i8 = vqtbl2_s8(v139, v74);
          v93.u64[1] = (unint64_t)vqtbl2_s8(v139, v75);
          *BOOL v71 = v95;
          v71[1] = v93;
          v71 += 2;
          v67 += 8;
        }
        while (v67 < (int)v12 - 7);
        unint64_t v96 = v12 & 0xFFFFFFF8;
      }
      if (v12 > v96)
      {
        int8x8_t v97 = (char *)v71 + v134;
        float v98 = (char *)v71 + v132;
        float v99 = (char *)v71 + v130;
        float v100 = (char *)v71 + v36 + 4;
        do
        {
          if (v72)
          {
            unsigned int v101 = v72->u16[0];
            unsigned int v102 = v72->u16[1];
            float v72 = (int8x16_t *)((char *)v72 + 4);
          }
          else
          {
            unsigned int v101 = 0;
            unsigned int v102 = 0;
          }
          float v103 = (float)(v73->u16[0] >> v62) - v49;
          float v104 = (float)(v73->u16[1] >> v62) - v49;
          float v105 = a8.f32[1] * v104;
          float v106 = (float)(a10.f32[1] * v104) + (float)(v103 * a10.f32[0]);
          float v107 = _S2 * (float)((float)(v70->u16[0] >> v62) - *(float *)&v42);
          unsigned int v108 = v70->u16[1];
          float v109 = v105 + v107;
          float v110 = v107 + v106;
          char v111 = llroundf((float)v101 * 0.0038911);
          if (!v72) {
            char v111 = -1;
          }
          char v112 = llroundf((float)v102 * 0.0038911);
          if (!v72) {
            char v112 = -1;
          }
          if (v109 < 0.0) {
            float v113 = 0.0;
          }
          else {
            float v113 = v105 + v107;
          }
          if (v109 <= 255.0) {
            float v114 = v113;
          }
          else {
            float v114 = 255.0;
          }
          *(v99 - 4) = llroundf(v114);
          float v115 = 255.0;
          if (v110 <= 255.0)
          {
            float v115 = v107 + v106;
            if (v110 < 0.0) {
              float v115 = 0.0;
            }
          }
          float v116 = a8.f32[0] * v103;
          float v117 = _S2 * (float)((float)(int)(v108 >> v62) - *(float *)&v42);
          float v118 = v116 + v107;
          float v119 = v105 + v117;
          float v120 = v106 + v117;
          *(v98 - 4) = llroundf(v115);
          float v121 = 255.0;
          if (v118 < 0.0) {
            float v122 = 0.0;
          }
          else {
            float v122 = v118;
          }
          if (v118 <= 255.0) {
            float v123 = v122;
          }
          else {
            float v123 = 255.0;
          }
          *(v97 - 4) = llroundf(v123);
          *(v100 - 4) = v111;
          if (v119 < 0.0) {
            float v124 = 0.0;
          }
          else {
            float v124 = v119;
          }
          if (v119 <= 255.0) {
            float v121 = v124;
          }
          *float v99 = llroundf(v121);
          float v125 = 255.0;
          if (v120 <= 255.0)
          {
            float v125 = v120;
            if (v120 < 0.0) {
              float v125 = 0.0;
            }
          }
          float v126 = v116 + v117;
          *float v98 = llroundf(v125);
          float v127 = 255.0;
          if (v126 <= 255.0)
          {
            float v127 = v126;
            if (v126 < 0.0) {
              float v127 = 0.0;
            }
          }
          *int8x8_t v97 = llroundf(v127);
          v97 += 8;
          *float v100 = v112;
          v100 += 8;
          v96 += 2;
          v98 += 8;
          v99 += 8;
          float v73 = (uint16x8_t *)((char *)v73 + 4);
          float v70 = (uint16x8_t *)((char *)v70 + 4);
        }
        while (v12 > v96);
      }
      uint64_t result = (uint16x8_t *)((char *)result + v25);
      v65 += v26;
      v64 += v27;
      v63 += v30;
      ++v46;
    }
    while (v46 != v47);
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    unint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    uint64_t v11 = (uint64_t *)*((void *)result + 7);
    uint64_t v12 = (uint64_t *)*((void *)result + 8);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = v12[2];
    uint64_t v16 = **((void **)result + 17);
    *(float *)&unsigned int v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v10 + 136);
    float v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    float v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    float v21 = (float)v18;
    float v22 = v19 * *(float *)v10;
    float v23 = v19 * *(float *)(v10 + 8);
    float v24 = v19 * *(float *)(v10 + 16);
    float v25 = v19 * *(float *)(v10 + 20);
    float v26 = v19 * *(float *)(v10 + 28);
    uint64_t v27 = (void *)*((void *)result + 16);
    uint64_t v28 = *((void *)result + 14);
    unint64_t v29 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v30 = *(void *)(result + 36);
    unsigned int v31 = *(unsigned __int8 *)(v10 + 124);
    if (v31 >= 0x11) {
      char v32 = 0;
    }
    else {
      char v32 = 16 - v31;
    }
    uint64_t v33 = *(unsigned __int8 *)(v10 + 161);
    uint64_t v34 = *(unsigned __int8 *)(v10 + 160);
    uint64_t v35 = *(unsigned __int8 *)(v10 + 159);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 158);
    uint64_t v36 = *v27 + v29 * v16 + 4 * v28;
    uint64_t v37 = v11[2];
    if (v37) {
      uint64_t v38 = v37 + v15 * v8 + 2 * v30;
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v40 = *v11;
    uint64_t v39 = v11[1];
    uint64_t v41 = v39 + v14 * v8 + 2 * v30;
    if (!v39) {
      uint64_t v41 = 0;
    }
    uint64_t v42 = v40 + v13 * v8 + 2 * v30;
    char v43 = v32;
    do
    {
      if (v7)
      {
        unint64_t v44 = 0;
        char v45 = (unsigned __int16 *)v42;
        uint64_t v46 = v36;
        uint64_t v47 = (unsigned __int16 *)v38;
        do
        {
          if (v47)
          {
            unsigned int v48 = *v47;
            unsigned int v49 = v47[1];
            v47 += 2;
          }
          else
          {
            unsigned int v48 = 0;
            unsigned int v49 = 0;
          }
          uint64_t v50 = (unsigned __int16 *)(v41 + 2 * v44);
          float v51 = (float)(*v50 >> v43) - v21;
          float v52 = (float)(v50[1] >> v43) - v21;
          float v53 = v23 * v52;
          float v54 = (float)(v25 * v52) + (float)(v51 * v24);
          float v55 = v22 * (float)((float)(*v45 >> v43) - v20);
          unsigned int v56 = v45[1];
          float v57 = v53 + v55;
          char v58 = llroundf((float)v48 * 0.0038911);
          if (!v47) {
            char v58 = -1;
          }
          char v59 = llroundf((float)v49 * 0.0038911);
          if (!v47) {
            char v59 = -1;
          }
          if (v57 < 0.0) {
            float v60 = 0.0;
          }
          else {
            float v60 = v53 + v55;
          }
          if (v57 <= 255.0) {
            float v61 = v60;
          }
          else {
            float v61 = 255.0;
          }
          result[v46] = llroundf(v61);
          float v62 = 255.0;
          if ((float)(v55 + v54) <= 255.0)
          {
            float v62 = v55 + v54;
            if ((float)(v55 + v54) < 0.0) {
              float v62 = 0.0;
            }
          }
          float v63 = v26 * v51;
          float v64 = v22 * (float)((float)(int)(v56 >> v43) - v20);
          float v65 = v63 + v55;
          float v66 = v53 + v64;
          *(unsigned char *)(v46 + v35) = llroundf(v62);
          float v67 = v54 + v64;
          if (v65 < 0.0) {
            float v68 = 0.0;
          }
          else {
            float v68 = v65;
          }
          if (v65 <= 255.0) {
            float v69 = v68;
          }
          else {
            float v69 = 255.0;
          }
          *(unsigned char *)(v46 + v34) = llroundf(v69);
          *(unsigned char *)(v46 + v33) = v58;
          if (v66 < 0.0) {
            float v70 = 0.0;
          }
          else {
            float v70 = v66;
          }
          if (v66 <= 255.0) {
            float v71 = v70;
          }
          else {
            float v71 = 255.0;
          }
          uint64_t v72 = v46 + 4;
          result[v46 + 4] = llroundf(v71);
          float v73 = 255.0;
          if (v67 <= 255.0)
          {
            float v73 = v67;
            if (v67 < 0.0) {
              float v73 = 0.0;
            }
          }
          *(unsigned char *)(v72 + v35) = llroundf(v73);
          float v74 = 255.0;
          if ((float)(v63 + v64) <= 255.0)
          {
            float v74 = v63 + v64;
            if ((float)(v63 + v64) < 0.0) {
              float v74 = 0.0;
            }
          }
          *(unsigned char *)(v72 + v34) = llroundf(v74);
          *(unsigned char *)(v72 + v33) = v59;
          v46 += 8;
          v44 += 2;
          v45 += 2;
        }
        while (v7 > v44);
      }
      v42 += v13;
      v41 += v14;
      v38 += v15;
      v36 += v16;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    *(float *)&unsigned int v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = *(float *)&v21 * *(float *)v13;
    float v154 = *(float *)&v21 * *(float *)(v13 + 16);
    float v155 = *(float *)&v21 * *(float *)(v13 + 8);
    float v25 = *(float *)&v21 * *(float *)(v13 + 20);
    float v26 = *(float *)&v21 * *(float *)(v13 + 28);
    LOWORD(v21) = *(_WORD *)(v13 + 144);
    float v27 = (float)v21;
    float v28 = *(float *)(v13 + 72);
    float v29 = *(float *)(v13 + 76);
    float v30 = *(float *)(v13 + 80);
    float v31 = *(float *)(v13 + 84);
    float v32 = *(float *)(v13 + 88);
    float v33 = *(float *)(v13 + 92);
    float v34 = *(float *)(v13 + 96);
    float v35 = *(float *)(v13 + 100);
    uint64_t v36 = v13 + 164;
    uint64_t v37 = v13 + 16548;
    uint64_t v38 = v13 + 32932;
    float v39 = *(float *)(v13 + 104);
    float v40 = *(float *)(v13 + 108);
    float v41 = *(float *)(v13 + 112);
    float v42 = *(float *)(v13 + 116);
    float v43 = *(float *)(v13 + 120);
    uint64_t v44 = *((void *)result + 14);
    unint64_t v45 = *((void *)result + 13) * a2 / v6;
    uint64_t v46 = (void *)*((void *)result + 16);
    unint64_t v47 = v45 + *((void *)result + 15);
    uint64_t v48 = *(void *)(result + 36);
    unsigned int v49 = *(unsigned __int8 *)(v13 + 124);
    char v50 = 16 - v49;
    if (v49 >= 0x11) {
      char v50 = 0;
    }
    uint64_t result = (unsigned __int8 *)(*v46 + v47 * v19 + 16 * v44);
    uint64_t v51 = v14[2];
    if (v51) {
      uint64_t v52 = v51 + v18 * v11 + 2 * v48;
    }
    else {
      uint64_t v52 = 0;
    }
    float v55 = v14;
    uint64_t v54 = *v14;
    uint64_t v53 = v55[1];
    if (v53) {
      uint64_t v56 = v53 + v17 * v11 + 2 * v48;
    }
    else {
      uint64_t v56 = 0;
    }
    uint64_t v57 = v54 + v16 * v11 + 2 * v48;
    do
    {
      if (v10)
      {
        unint64_t v58 = 0;
        char v59 = (unsigned __int16 *)v57;
        float v60 = (unsigned int *)result;
        float v61 = (unsigned __int16 *)v52;
        do
        {
          float v62 = (unsigned __int16 *)(v56 + 2 * v58);
          float v63 = (float)(v62[1] >> v50) - v23;
          float v64 = v155 * v63;
          float v65 = v24 * (float)((float)(*v59 >> v50) - v22);
          float v66 = (float)(v155 * v63) + v65;
          float v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            float v67 = (float)(v155 * v63) + v65;
            if (v66 < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = (float)(*v62 >> v50) - v23;
          float v69 = (float)(v25 * v63) + (float)(v68 * v154);
          float v70 = 8191.0;
          if ((float)(v65 + v69) <= 8191.0)
          {
            float v70 = v65 + v69;
            if ((float)(v65 + v69) < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v26 * v68;
          float v72 = (float)(v26 * v68) + v65;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v24 * (float)((float)(v59[1] >> v50) - v22);
          float v75 = v64 + v74;
          BOOL v76 = (float)(v64 + v74) <= 8191.0;
          float v77 = 8191.0;
          if (v76)
          {
            float v77 = v75;
            if (v75 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = 8191.0;
          if ((float)(v69 + v74) <= 8191.0)
          {
            float v78 = v69 + v74;
            if ((float)(v69 + v74) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v71 + v74;
          BOOL v76 = (float)(v71 + v74) <= 8191.0;
          float v80 = 8191.0;
          if (v76)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          if (v61)
          {
            unsigned int v81 = *v61;
            unsigned int v82 = v61[1];
            v61 += 2;
          }
          else
          {
            unsigned int v81 = 0;
            unsigned int v82 = 0;
          }
          _S4 = fmaxf(v67, 0.0);
          float v84 = 8191.0;
          LOWORD(_S4) = *(_WORD *)(v36 + 2 * llroundf(fminf(_S4, 8191.0)));
          __asm { FCVT            S13, H4 }
          LOWORD(_S4) = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S10, H4 }
          LOWORD(_S4) = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S11, H4 }
          _H8 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          float v95 = (float)((float)((float)(v41 * _S10) + (float)(v40 * _S13)) + (float)(v42 * _S11))
              + (float)(v43 * fmaxf(_S13, fmaxf(_S10, _S11)));
          float v96 = 8191.0;
          if (v95 <= 8191.0)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          __asm
          {
            FCVT            S12, H8
            FCVT            S14, H14
            FCVT            S15, H15
          }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(v96));
          float v101 = fmaxf(_S12, fmaxf(_S14, _S15));
          float v102 = (float)((float)((float)(v41 * _S14) + (float)(v40 * _S12)) + (float)(v42 * _S15)) + (float)(v43 * v101);
          if (v102 <= 8191.0)
          {
            float v84 = (float)((float)((float)(v41 * _S14) + (float)(v40 * _S12)) + (float)(v42 * _S15))
                + (float)(v43 * v101);
            if (v102 < 0.0) {
              float v84 = 0.0;
            }
          }
          __asm { FCVT            S4, H8 }
          float v104 = _S13 * _S4;
          float v105 = _S10 * _S4;
          float v106 = _S11 * _S4;
          _H9 = *(_WORD *)(v37 + 2 * llroundf(v84));
          __asm { FCVT            S9, H9 }
          float v109 = _S12 * _S9;
          float v110 = _S14 * _S9;
          float v111 = _S15 * _S9;
          float v112 = (float)((float)(v29 * v105) + (float)(v104 * v28)) + (float)(v106 * v30);
          float v113 = (float)((float)(v32 * v105) + (float)(v104 * v31)) + (float)(v106 * v33);
          float v114 = (float)((float)(v35 * v105) + (float)(v104 * v34)) + (float)(v106 * v39);
          float v115 = (float)((float)(v29 * v110) + (float)(v109 * v28)) + (float)(v111 * v30);
          float v116 = (float)((float)(v32 * v110) + (float)(v109 * v31)) + (float)(v111 * v33);
          float v117 = (float)((float)(v35 * v110) + (float)(v109 * v34)) + (float)(v111 * v39);
          _H12 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          if (v61)
          {
            float v124 = (double)v81 * 3.0 / 65535.0;
            unsigned int v125 = llroundf(v124);
            float v126 = (double)v82 * 3.0 / 65535.0;
            unsigned int v127 = llroundf(v126);
          }
          else
          {
            unsigned int v125 = 3;
            unsigned int v127 = 3;
          }
          __asm { FCVT            S4, H11 }
          float v129 = v27 + _S4;
          float v130 = 1023.0;
          float v131 = 1023.0;
          if (v129 <= 1023.0)
          {
            float v131 = v129;
            if (v129 < 0.0) {
              float v131 = 0.0;
            }
          }
          __asm { FCVT            S4, H14 }
          float v133 = v27 + _S4;
          float v134 = 1023.0;
          if (v133 <= 1023.0)
          {
            float v134 = v133;
            if (v133 < 0.0) {
              float v134 = 0.0;
            }
          }
          __asm { FCVT            S4, H12 }
          float v136 = v27 + _S4;
          float v137 = 1023.0;
          if (v136 <= 1023.0)
          {
            float v137 = v136;
            if (v136 < 0.0) {
              float v137 = 0.0;
            }
          }
          __asm { FCVT            S4, H13 }
          unsigned int v139 = llroundf(v131);
          unsigned int v140 = llroundf(v137);
          float v141 = (float)v125;
          unsigned int v142 = llroundf(v134) << 10;
          if (v141 > 3.0) {
            float v141 = 3.0;
          }
          *float v60 = v142 | v139 | (llroundf(v141) << 30) | (v140 << 20);
          float v143 = v27 + _S4;
          float v144 = 1023.0;
          if (v143 <= 1023.0)
          {
            float v144 = v143;
            if (v143 < 0.0) {
              float v144 = 0.0;
            }
          }
          __asm { FCVT            S4, H10 }
          float v146 = v27 + _S4;
          float v147 = 1023.0;
          if (v146 <= 1023.0)
          {
            float v147 = v146;
            if (v146 < 0.0) {
              float v147 = 0.0;
            }
          }
          __asm { FCVT            S4, H9 }
          float v149 = v27 + _S4;
          if (v149 <= 1023.0)
          {
            float v130 = v149;
            if (v149 < 0.0) {
              float v130 = 0.0;
            }
          }
          unsigned int v150 = llroundf(v144);
          unsigned int v151 = llroundf(v147) << 10;
          unsigned int v152 = llroundf(v130);
          float v153 = (float)v127;
          if ((float)v127 > 3.0) {
            float v153 = 3.0;
          }
          v60[1] = v151 | v150 | (llroundf(v153) << 30) | (v152 << 20);
          v58 += 2;
          v59 += 2;
          v60 += 2;
        }
        while (v10 > v58);
      }
      v57 += v16;
      v56 += v17;
      v52 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = *(float *)(v13 + 28);
    float v29 = v21 * v28;
    LOWORD(v28) = *(_WORD *)(v13 + 144);
    float v30 = (float)LODWORD(v28);
    float v31 = *(float *)(v13 + 72);
    float v32 = *(float *)(v13 + 76);
    float v33 = *(float *)(v13 + 80);
    float v34 = *(float *)(v13 + 84);
    float v35 = *(float *)(v13 + 88);
    float v36 = *(float *)(v13 + 92);
    float v37 = *(float *)(v13 + 96);
    float v38 = *(float *)(v13 + 100);
    float v39 = *(float *)(v13 + 104);
    uint64_t v40 = v13 + 164;
    uint64_t v41 = v13 + 16548;
    uint64_t v42 = *((void *)result + 14);
    unint64_t v43 = *((void *)result + 13) * a2 / v6;
    uint64_t v44 = (void *)*((void *)result + 16);
    unint64_t v45 = v43 + *((void *)result + 15);
    uint64_t v46 = *(void *)(result + 36);
    unsigned int v47 = *(unsigned __int8 *)(v13 + 124);
    char v48 = 16 - v47;
    if (v47 >= 0x11) {
      char v48 = 0;
    }
    uint64_t v49 = *v44 + v45 * v19 + 16 * v42;
    uint64_t v50 = v14[2];
    if (v50) {
      uint64_t result = (unsigned __int8 *)(v50 + v18 * v11 + 2 * v46);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v53 = v14;
    uint64_t v52 = *v14;
    uint64_t v51 = v53[1];
    if (v51) {
      uint64_t v54 = v51 + v17 * v11 + 2 * v46;
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v55 = v52 + v16 * v11 + 2 * v46;
    do
    {
      if (v10)
      {
        unint64_t v56 = 0;
        uint64_t v57 = (unsigned __int16 *)v55;
        unint64_t v58 = (_DWORD *)v49;
        char v59 = (unsigned __int16 *)result;
        do
        {
          float v60 = (unsigned __int16 *)(v54 + 2 * v56);
          float v61 = (float)(v60[1] >> v48) - v23;
          float v62 = v25 * v61;
          float v63 = v24 * (float)((float)(*v57 >> v48) - v22);
          float v64 = (float)(v25 * v61) + v63;
          float v65 = 8191.0;
          if (v64 <= 8191.0)
          {
            float v65 = (float)(v25 * v61) + v63;
            if (v64 < 0.0) {
              float v65 = 0.0;
            }
          }
          float v66 = (float)(*v60 >> v48) - v23;
          float v67 = (float)(v27 * v61) + (float)(v66 * v26);
          float v68 = 8191.0;
          if ((float)(v63 + v67) <= 8191.0)
          {
            float v68 = v63 + v67;
            if ((float)(v63 + v67) < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v29 * v66;
          float v70 = v69 + v63;
          BOOL v71 = (float)(v69 + v63) <= 8191.0;
          float v72 = 8191.0;
          if (v71)
          {
            float v72 = v70;
            if (v70 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v24 * (float)((float)(v57[1] >> v48) - v22);
          float v74 = v62 + v73;
          BOOL v71 = (float)(v62 + v73) <= 8191.0;
          float v75 = 8191.0;
          if (v71)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v67 + v73;
          BOOL v71 = (float)(v67 + v73) <= 8191.0;
          float v77 = 8191.0;
          if (v71)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v69 + v73;
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          if (v59)
          {
            unsigned int v80 = *v59;
            unsigned int v81 = v59[1];
            v59 += 2;
          }
          else
          {
            unsigned int v80 = 0;
            unsigned int v81 = 0;
          }
          _H29 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm
          {
            FCVT            S29, H29
            FCVT            S30, H30
          }
          _H31 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H10 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          float v98 = (float)((float)(v32 * _S30) + (float)(_S29 * v31)) + (float)(_S31 * v33);
          float v99 = (float)((float)(v35 * _S30) + (float)(_S29 * v34)) + (float)(_S31 * v36);
          float v100 = (float)((float)(v38 * _S30) + (float)(_S29 * v37)) + (float)(_S31 * v39);
          float v101 = (float)((float)(v32 * _S9) + (float)(_S8 * v31)) + (float)(_S10 * v33);
          float v102 = (float)((float)(v35 * _S9) + (float)(_S8 * v34)) + (float)(_S10 * v36);
          float v103 = (float)((float)(v38 * _S9) + (float)(_S8 * v37)) + (float)(_S10 * v39);
          _H8 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          if (v59)
          {
            float v110 = (double)v80 * 3.0 / 65535.0;
            unsigned int v111 = llroundf(v110);
            float v112 = (double)v81 * 3.0 / 65535.0;
            unsigned int v113 = llroundf(v112);
          }
          else
          {
            unsigned int v111 = 3;
            unsigned int v113 = 3;
          }
          __asm { FCVT            S31, H31 }
          float v115 = v30 + _S31;
          float v116 = 1023.0;
          float v117 = 1023.0;
          if (v115 <= 1023.0)
          {
            float v117 = v115;
            if (v115 < 0.0) {
              float v117 = 0.0;
            }
          }
          __asm { FCVT            S10, H10 }
          float v119 = v30 + _S10;
          BOOL v71 = (float)(v30 + _S10) <= 1023.0;
          float v120 = 1023.0;
          if (v71)
          {
            float v120 = v119;
            if (v119 < 0.0) {
              float v120 = 0.0;
            }
          }
          __asm { FCVT            S8, H8 }
          float v122 = v30 + _S8;
          BOOL v71 = (float)(v30 + _S8) <= 1023.0;
          float v123 = 1023.0;
          if (v71)
          {
            float v123 = v122;
            if (v122 < 0.0) {
              float v123 = 0.0;
            }
          }
          __asm { FCVT            S9, H9 }
          unsigned int v125 = llroundf(v117);
          unsigned int v126 = llroundf(v123);
          float v127 = (float)v111;
          unsigned int v128 = llroundf(v120) << 10;
          if (v127 > 3.0) {
            float v127 = 3.0;
          }
          *unint64_t v58 = v128 | v125 | (llroundf(v127) << 30) | (v126 << 20);
          float v129 = v30 + _S9;
          float v130 = 1023.0;
          if (v129 <= 1023.0)
          {
            float v130 = v129;
            if (v129 < 0.0) {
              float v130 = 0.0;
            }
          }
          __asm { FCVT            S30, H30 }
          float v132 = v30 + _S30;
          BOOL v71 = (float)(v30 + _S30) <= 1023.0;
          float v133 = 1023.0;
          if (v71)
          {
            float v133 = v132;
            if (v132 < 0.0) {
              float v133 = 0.0;
            }
          }
          __asm { FCVT            S29, H29 }
          float v135 = v30 + _S29;
          if (v135 <= 1023.0)
          {
            float v116 = v135;
            if (v135 < 0.0) {
              float v116 = 0.0;
            }
          }
          unsigned int v136 = llroundf(v130);
          unsigned int v137 = llroundf(v133) << 10;
          unsigned int v138 = llroundf(v116);
          float v139 = (float)v113;
          if ((float)v113 > 3.0) {
            float v139 = 3.0;
          }
          v58[1] = v137 | v136 | (llroundf(v139) << 30) | (v138 << 20);
          v56 += 2;
          v57 += 2;
          v58 += 2;
        }
        while (v10 > v56);
      }
      v55 += v16;
      v54 += v17;
      result += v18;
      v49 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    unint64_t v9 = *(void *)(result + 20);
    unint64_t v10 = v6 + *(void *)(result + 44);
    unint64_t v11 = v7 - v6;
    uint64_t v12 = *((void *)result + 19);
    uint64_t v14 = (uint64_t *)*((void *)result + 7);
    uint64_t v13 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v13;
    uint64_t v16 = v13[1];
    uint64_t v17 = v13[2];
    uint64_t v18 = **((void **)result + 17);
    *(float *)&unsigned int v19 = (float)*(unsigned int *)(v12 + 128);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v12 + 136);
    float v21 = *(float *)&v20 / *(float *)&v19;
    LOWORD(v19) = *(_WORD *)(v12 + 140);
    float v22 = (float)v19;
    LOWORD(v20) = *(_WORD *)(v12 + 142);
    float v23 = (float)v20;
    float v24 = v21 * *(float *)v12;
    float v25 = v21 * *(float *)(v12 + 8);
    float v26 = v21 * *(float *)(v12 + 16);
    float v27 = v21 * *(float *)(v12 + 20);
    float v28 = *(float *)(v12 + 28);
    float v29 = v21 * v28;
    LOWORD(v28) = *(_WORD *)(v12 + 144);
    float v30 = (float)LODWORD(v28);
    uint64_t v31 = *((void *)result + 14);
    unint64_t v32 = *((void *)result + 13) * a2 / v5;
    uint64_t v33 = (void *)*((void *)result + 16);
    unint64_t v34 = v32 + *((void *)result + 15);
    uint64_t v35 = *(void *)(result + 36);
    LODWORD(v12) = *(unsigned __int8 *)(v12 + 124);
    char v36 = 16 - v12;
    if (v12 >= 0x11) {
      char v36 = 0;
    }
    uint64_t v37 = *v33 + v34 * v18 + 16 * v31;
    uint64_t v38 = v14[2];
    if (v38) {
      uint64_t v39 = v38 + v17 * v10 + 2 * v35;
    }
    else {
      uint64_t v39 = 0;
    }
    uint64_t v41 = *v14;
    uint64_t v40 = v14[1];
    uint64_t v42 = v40 + v16 * v10 + 2 * v35;
    if (!v40) {
      uint64_t v42 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v41 + v15 * v10 + 2 * v35);
    char v43 = v36;
    do
    {
      if (v9)
      {
        unint64_t v44 = 0;
        unint64_t v45 = (unsigned __int16 *)result;
        uint64_t v46 = (_DWORD *)v37;
        unsigned int v47 = (_WORD *)v39;
        do
        {
          if (v47)
          {
            LOWORD(v2) = *v47;
            LOWORD(v3) = v47[1];
            v47 += 2;
            float v48 = (double)*(unint64_t *)&v2 * 3.0 / 65535.0;
            unsigned int v49 = llroundf(v48);
            double v2 = (double)v3 * 3.0 / 65535.0;
            *(float *)&double v2 = v2;
            unsigned int v50 = llroundf(*(float *)&v2);
          }
          else
          {
            unsigned int v49 = 3;
            unsigned int v50 = 3;
          }
          uint64_t v51 = (unsigned __int16 *)(v42 + 2 * v44);
          float v52 = (float)(*v51 >> v43) - v23;
          float v53 = v29 * v52;
          float v54 = v24 * (float)((float)(*v45 >> v43) - v22);
          float v55 = (float)((float)(v29 * v52) + v54) + v30;
          float v56 = 1023.0;
          if (v55 <= 1023.0)
          {
            float v56 = (float)((float)(v29 * v52) + v54) + v30;
            if (v55 < 0.0) {
              float v56 = 0.0;
            }
          }
          float v57 = (float)(v51[1] >> v43) - v23;
          float v58 = (float)(v27 * v57) + (float)(v52 * v26);
          float v59 = (float)(v54 + v58) + v30;
          float v60 = 1023.0;
          if (v59 <= 1023.0)
          {
            float v60 = (float)(v54 + v58) + v30;
            if (v59 < 0.0) {
              float v60 = 0.0;
            }
          }
          float v61 = v25 * v57;
          float v62 = v24 * (float)((float)(v45[1] >> v43) - v22);
          float v63 = v58 + v62;
          float v64 = v53 + v62;
          unsigned int v65 = llroundf(v56);
          unsigned int v66 = llroundf(v60) << 10;
          float v67 = (float)(v61 + v54) + v30;
          if (v67 < 0.0) {
            float v68 = 0.0;
          }
          else {
            float v68 = v67;
          }
          if (v67 <= 1023.0) {
            float v69 = v68;
          }
          else {
            float v69 = 1023.0;
          }
          unsigned int v70 = llroundf(v69);
          float v71 = (float)v49;
          if ((float)v49 > 3.0) {
            float v71 = 3.0;
          }
          *uint64_t v46 = v66 | v65 | (llroundf(v71) << 30) | (v70 << 20);
          float v72 = v64 + v30;
          if (v72 < 0.0) {
            float v73 = 0.0;
          }
          else {
            float v73 = v72;
          }
          if (v72 <= 1023.0) {
            float v74 = v73;
          }
          else {
            float v74 = 1023.0;
          }
          LODWORD(v3) = 1149222912;
          if ((float)(v63 + v30) <= 1023.0)
          {
            *(float *)&unint64_t v3 = v63 + v30;
            if ((float)(v63 + v30) < 0.0) {
              unint64_t v3 = 0;
            }
          }
          float v75 = (float)(v61 + v62) + v30;
          float v76 = 1023.0;
          if (v75 <= 1023.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          unsigned int v77 = llroundf(v74);
          unsigned int v78 = llroundf(*(float *)&v3) << 10;
          unsigned int v79 = llroundf(v76);
          *(float *)&double v2 = (float)v50;
          if ((float)v50 > 3.0) {
            *(float *)&double v2 = 3.0;
          }
          v46[1] = v78 | v77 | (llroundf(*(float *)&v2) << 30) | (v79 << 20);
          v44 += 2;
          v45 += 2;
          v46 += 2;
        }
        while (v9 > v44);
      }
      result += v15;
      v42 += v16;
      v39 += v17;
      v37 += v18;
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    uint64_t v37 = v13 + 164;
    uint64_t v38 = v13 + 16548;
    uint64_t v39 = v13 + 32932;
    float v40 = *(float *)(v13 + 104);
    float v41 = *(float *)(v13 + 108);
    float v42 = *(float *)(v13 + 112);
    float v43 = *(float *)(v13 + 116);
    float v44 = *(float *)(v13 + 120);
    uint64_t v45 = *((void *)result + 14);
    unint64_t v46 = *((void *)result + 13) * a2 / v6;
    unsigned int v47 = (void *)*((void *)result + 16);
    unint64_t v48 = v46 + *((void *)result + 15);
    uint64_t v49 = *(void *)(result + 36);
    unsigned int v50 = *(unsigned __int8 *)(v13 + 124);
    char v51 = 16 - v50;
    if (v50 >= 0x11) {
      char v51 = 0;
    }
    uint64_t result = (unsigned __int8 *)(*v47 + v48 * v19 + 8 * v45);
    uint64_t v52 = v14[2];
    if (v52) {
      uint64_t v53 = v52 + v18 * v11 + 2 * v49;
    }
    else {
      uint64_t v53 = 0;
    }
    float v56 = v14;
    uint64_t v55 = *v14;
    uint64_t v54 = v56[1];
    if (v54) {
      uint64_t v57 = v54 + v17 * v11 + 2 * v49;
    }
    else {
      uint64_t v57 = 0;
    }
    uint64_t v58 = v55 + v16 * v11 + 2 * v49;
    do
    {
      if (v10)
      {
        unint64_t v59 = 0;
        float v60 = (unsigned __int16 *)v58;
        float v61 = result;
        float v62 = (__int16 *)v53;
        do
        {
          float v63 = (unsigned __int16 *)(v57 + 2 * v59);
          float v64 = (float)(v63[1] >> v51) - v23;
          float v65 = v25 * v64;
          float v66 = v24 * (float)((float)(*v60 >> v51) - v22);
          float v67 = (float)(v25 * v64) + v66;
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = (float)(v25 * v64) + v66;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = (float)(*v63 >> v51) - v23;
          float v70 = (float)(v27 * v64) + (float)(v69 * v26);
          float v71 = 8191.0;
          if ((float)(v66 + v70) <= 8191.0)
          {
            float v71 = v66 + v70;
            if ((float)(v66 + v70) < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v28 * v69;
          float v73 = (float)(v28 * v69) + v66;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v24 * (float)((float)(v60[1] >> v51) - v22);
          float v76 = v65 + v75;
          BOOL v77 = (float)(v65 + v75) <= 8191.0;
          float v78 = 8191.0;
          if (v77)
          {
            float v78 = v76;
            if (v76 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v70 + v75;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v72 + v75;
          BOOL v77 = (float)(v72 + v75) <= 8191.0;
          float v82 = 8191.0;
          if (v77)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          if (v62)
          {
            __int16 v83 = *v62;
            __int16 v84 = v62[1];
            v62 += 2;
          }
          else
          {
            __int16 v83 = 0;
            __int16 v84 = 0;
          }
          _S10 = fmaxf(v68, 0.0);
          float v86 = 8191.0;
          LOWORD(_S10) = *(_WORD *)(v37 + 2 * llroundf(fminf(_S10, 8191.0)));
          __asm { FCVT            S10, H10 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          unsigned int v93 = llroundf(fminf(fmaxf(v74, 0.0), 8191.0));
          __asm { FCVT            S8, H31 }
          _H31 = *(_WORD *)(v37 + 2 * v93);
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          float v100 = (float)((float)((float)(v42 * _S8) + (float)(v41 * _S10)) + (float)(v43 * _S31))
               + (float)(v44 * fmaxf(_S10, fmaxf(_S8, _S31)));
          float v101 = 8191.0;
          if (v100 <= 8191.0)
          {
            float v101 = v100;
            if (v100 < 0.0) {
              float v101 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H9
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v38 + 2 * llroundf(v101));
          float v106 = fmaxf(_S9, fmaxf(_S11, _S12));
          float v107 = (float)((float)((float)(v42 * _S11) + (float)(v41 * _S9)) + (float)(v43 * _S12)) + (float)(v44 * v106);
          if (v107 <= 8191.0)
          {
            float v86 = (float)((float)((float)(v42 * _S11) + (float)(v41 * _S9)) + (float)(v43 * _S12)) + (float)(v44 * v106);
            if (v107 < 0.0) {
              float v86 = 0.0;
            }
          }
          __asm { FCVT            S13, H13 }
          float v109 = _S10 * _S13;
          float v110 = _S8 * _S13;
          _H30 = *(_WORD *)(v38 + 2 * llroundf(v86));
          float v112 = _S31 * _S13;
          __asm { FCVT            S30, H30 }
          float v114 = _S9 * _S30;
          float v115 = _S11 * _S30;
          float v116 = _S12 * _S30;
          _S12 = (float)((float)(v30 * v110) + (float)(v109 * v29)) + (float)(v112 * v31);
          float v118 = (float)((float)(v33 * v110) + (float)(v109 * v32)) + (float)(v112 * v34);
          float v119 = (float)((float)(v36 * v110) + (float)(v109 * v35)) + (float)(v112 * v40);
          float v120 = (float)((float)(v30 * v115) + (float)(v114 * v29)) + (float)(v116 * v31);
          float v121 = (float)((float)(v33 * v115) + (float)(v114 * v32)) + (float)(v116 * v34);
          float v122 = (float)((float)(v36 * v115) + (float)(v114 * v35)) + (float)(v116 * v40);
          LOWORD(_S12) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S13, H12 }
          _H11 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          if (v62) {
            __int16 v129 = v83;
          }
          else {
            __int16 v129 = -1;
          }
          if (v62) {
            __int16 v130 = v84;
          }
          else {
            __int16 v130 = -1;
          }
          float v131 = 65535.0;
          float v132 = 65535.0;
          if (_S13 <= 65535.0)
          {
            __asm { FCMP            H12, #0 }
            float v132 = _S13;
            if (_NF) {
              float v132 = 0.0;
            }
          }
          __asm { FCVT            S13, H11 }
          *float v61 = llroundf(v132);
          float v135 = 65535.0;
          if (_S13 <= 65535.0)
          {
            __asm { FCMP            H11, #0 }
            float v135 = _S13;
            if (_NF) {
              float v135 = 0.0;
            }
          }
          __asm { FCVT            S13, H10 }
          v61[1] = llroundf(v135);
          float v138 = 65535.0;
          if (_S13 <= 65535.0)
          {
            __asm { FCMP            H10, #0 }
            float v138 = _S13;
            if (_NF) {
              float v138 = 0.0;
            }
          }
          __asm { FCVT            S12, H9 }
          v61[2] = llroundf(v138);
          v61[3] = v129;
          float v141 = 65535.0;
          if (_S12 <= 65535.0)
          {
            __asm { FCMP            H9, #0 }
            float v141 = _S12;
            if (_NF) {
              float v141 = 0.0;
            }
          }
          __asm { FCVT            S11, H8 }
          v61[4] = llroundf(v141);
          float v144 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v144 = _S11;
            if (_NF) {
              float v144 = 0.0;
            }
          }
          __asm { FCVT            S8, H31 }
          v61[5] = llroundf(v144);
          if (_S8 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v131 = _S8;
            if (_NF) {
              float v131 = 0.0;
            }
          }
          v61[6] = llroundf(v131);
          v61[7] = v130;
          v59 += 2;
          v60 += 2;
          v61 += 8;
        }
        while (v10 > v59);
      }
      v58 += v16;
      v57 += v17;
      v53 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    float v37 = *(float *)(v13 + 104);
    uint64_t v38 = v13 + 164;
    uint64_t v39 = v13 + 16548;
    uint64_t v40 = *((void *)result + 14);
    unint64_t v41 = *((void *)result + 13) * a2 / v6;
    float v42 = (void *)*((void *)result + 16);
    unint64_t v43 = v41 + *((void *)result + 15);
    uint64_t v44 = *(void *)(result + 36);
    unsigned int v45 = *(unsigned __int8 *)(v13 + 124);
    char v46 = 16 - v45;
    if (v45 >= 0x11) {
      char v46 = 0;
    }
    uint64_t v47 = *v42 + v43 * v19 + 8 * v40;
    uint64_t v48 = v14[2];
    if (v48) {
      uint64_t result = (unsigned __int8 *)(v48 + v18 * v11 + 2 * v44);
    }
    else {
      uint64_t result = 0;
    }
    char v51 = v14;
    uint64_t v50 = *v14;
    uint64_t v49 = v51[1];
    if (v49) {
      uint64_t v52 = v49 + v17 * v11 + 2 * v44;
    }
    else {
      uint64_t v52 = 0;
    }
    uint64_t v53 = v50 + v16 * v11 + 2 * v44;
    do
    {
      if (v10)
      {
        unint64_t v54 = 0;
        uint64_t v55 = (unsigned __int16 *)v53;
        float v56 = (_WORD *)v47;
        uint64_t v57 = (__int16 *)result;
        do
        {
          uint64_t v58 = (unsigned __int16 *)(v52 + 2 * v54);
          float v59 = (float)(v58[1] >> v46) - v23;
          float v60 = v25 * v59;
          float v61 = v24 * (float)((float)(*v55 >> v46) - v22);
          float v62 = (float)(v25 * v59) + v61;
          float v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            float v63 = (float)(v25 * v59) + v61;
            if (v62 < 0.0) {
              float v63 = 0.0;
            }
          }
          float v64 = (float)(*v58 >> v46) - v23;
          float v65 = (float)(v27 * v59) + (float)(v64 * v26);
          float v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            float v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v28 * v64;
          float v68 = v67 + v61;
          BOOL v69 = (float)(v67 + v61) <= 8191.0;
          float v70 = 8191.0;
          if (v69)
          {
            float v70 = v68;
            if (v68 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v24 * (float)((float)(v55[1] >> v46) - v22);
          float v72 = v60 + v71;
          BOOL v69 = (float)(v60 + v71) <= 8191.0;
          float v73 = 8191.0;
          if (v69)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v65 + v71;
          BOOL v69 = (float)(v65 + v71) <= 8191.0;
          float v75 = 8191.0;
          if (v69)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v67 + v71;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          if (v57)
          {
            __int16 v78 = *v57;
            __int16 v79 = v57[1];
            v57 += 2;
          }
          else
          {
            __int16 v78 = 0;
            __int16 v79 = 0;
          }
          _H26 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S28, H28
          }
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _S8 = (float)((float)(v30 * _S27) + (float)(_S26 * v29)) + (float)(_S28 * v31);
          float v97 = (float)((float)(v33 * _S27) + (float)(_S26 * v32)) + (float)(_S28 * v34);
          float v98 = (float)((float)(v36 * _S27) + (float)(_S26 * v35)) + (float)(_S28 * v37);
          float v99 = (float)((float)(v30 * _S30) + (float)(_S29 * v29)) + (float)(_S31 * v31);
          float v100 = (float)((float)(v33 * _S30) + (float)(_S29 * v32)) + (float)(_S31 * v34);
          float v101 = (float)((float)(v36 * _S30) + (float)(_S29 * v35)) + (float)(_S31 * v37);
          LOWORD(_S8) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          __asm { FCVT            S9, H8 }
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          if (v57) {
            __int16 v108 = v78;
          }
          else {
            __int16 v108 = -1;
          }
          if (v57) {
            __int16 v109 = v79;
          }
          else {
            __int16 v109 = -1;
          }
          float v110 = 65535.0;
          float v111 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v111 = _S9;
            if (_NF) {
              float v111 = 0.0;
            }
          }
          __asm { FCVT            S9, H31 }
          *float v56 = llroundf(v111);
          float v114 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v114 = _S9;
            if (_NF) {
              float v114 = 0.0;
            }
          }
          __asm { FCVT            S9, H30 }
          v56[1] = llroundf(v114);
          float v117 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCMP            H30, #0 }
            float v117 = _S9;
            if (_NF) {
              float v117 = 0.0;
            }
          }
          __asm { FCVT            S8, H29 }
          v56[2] = llroundf(v117);
          v56[3] = v108;
          float v120 = 65535.0;
          if (_S8 <= 65535.0)
          {
            __asm { FCMP            H29, #0 }
            float v120 = _S8;
            if (_NF) {
              float v120 = 0.0;
            }
          }
          __asm { FCVT            S31, H28 }
          v56[4] = llroundf(v120);
          float v123 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H28, #0 }
            float v123 = _S31;
            if (_NF) {
              float v123 = 0.0;
            }
          }
          __asm { FCVT            S28, H27 }
          v56[5] = llroundf(v123);
          if (_S28 <= 65535.0)
          {
            __asm { FCMP            H27, #0 }
            float v110 = _S28;
            if (_NF) {
              float v110 = 0.0;
            }
          }
          v56[6] = llroundf(v110);
          v56[7] = v109;
          v54 += 2;
          v55 += 2;
          v56 += 8;
        }
        while (v10 > v54);
      }
      v53 += v16;
      v52 += v17;
      result += v18;
      v47 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    unint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    uint64_t v12 = (uint64_t *)*((void *)result + 7);
    uint64_t v11 = (uint64_t *)*((void *)result + 8);
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    uint64_t v15 = v11[2];
    uint64_t v16 = **((void **)result + 17);
    *(float *)&unsigned int v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v10 + 136);
    float v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    float v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    float v21 = (float)v18;
    float v22 = v19 * *(float *)v10;
    float v23 = v19 * *(float *)(v10 + 8);
    float v24 = v19 * *(float *)(v10 + 16);
    float v25 = v19 * *(float *)(v10 + 20);
    float v26 = v19 * *(float *)(v10 + 28);
    uint64_t v27 = *((void *)result + 14);
    unint64_t v28 = *((void *)result + 13) * a2 / v3;
    uint64_t v29 = (void *)*((void *)result + 16);
    unint64_t v30 = v28 + *((void *)result + 15);
    uint64_t v31 = *(void *)(result + 36);
    LODWORD(v10) = *(unsigned __int8 *)(v10 + 124);
    char v32 = 16 - v10;
    if (v10 >= 0x11) {
      char v32 = 0;
    }
    uint64_t v33 = *v29 + v30 * v16 + 8 * v27;
    uint64_t v34 = v12[2];
    if (v34) {
      uint64_t v35 = v34 + v15 * v8 + 2 * v31;
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v37 = *v12;
    uint64_t v36 = v12[1];
    uint64_t v38 = v36 + v14 * v8 + 2 * v31;
    if (!v36) {
      uint64_t v38 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v37 + v13 * v8 + 2 * v31);
    char v39 = v32;
    do
    {
      if (v7)
      {
        unint64_t v40 = 0;
        unint64_t v41 = (unsigned __int16 *)result;
        float v42 = (_WORD *)v33;
        unint64_t v43 = (__int16 *)v35;
        do
        {
          if (v43)
          {
            __int16 v44 = *v43;
            __int16 v45 = v43[1];
            v43 += 2;
          }
          else
          {
            __int16 v44 = 0;
            __int16 v45 = 0;
          }
          char v46 = (unsigned __int16 *)(v38 + 2 * v40);
          float v47 = (float)(*v46 >> v39) - v21;
          float v48 = (float)(v46[1] >> v39) - v21;
          float v49 = v23 * v48;
          float v50 = (float)(v25 * v48) + (float)(v47 * v24);
          float v51 = v22 * (float)((float)(*v41 >> v39) - v20);
          unsigned int v52 = v41[1];
          float v53 = v49 + v51;
          float v54 = v51 + v50;
          if (v43) {
            __int16 v55 = v44;
          }
          else {
            __int16 v55 = -1;
          }
          if (v43) {
            __int16 v56 = v45;
          }
          else {
            __int16 v56 = -1;
          }
          if (v53 < 0.0) {
            float v57 = 0.0;
          }
          else {
            float v57 = v49 + v51;
          }
          if (v53 <= 65535.0) {
            float v58 = v57;
          }
          else {
            float v58 = 65535.0;
          }
          *float v42 = llroundf(v58);
          float v59 = 65535.0;
          if (v54 <= 65535.0)
          {
            float v59 = v51 + v50;
            if (v54 < 0.0) {
              float v59 = 0.0;
            }
          }
          float v60 = v26 * v47;
          float v61 = v22 * (float)((float)(int)(v52 >> v39) - v20);
          float v62 = v60 + v51;
          float v63 = v49 + v61;
          v42[1] = llroundf(v59);
          if (v62 < 0.0) {
            float v64 = 0.0;
          }
          else {
            float v64 = v62;
          }
          if (v62 <= 65535.0) {
            float v65 = v64;
          }
          else {
            float v65 = 65535.0;
          }
          float v66 = v50 + v61;
          v42[2] = llroundf(v65);
          v42[3] = v55;
          if (v63 < 0.0) {
            float v67 = 0.0;
          }
          else {
            float v67 = v63;
          }
          if (v63 <= 65535.0) {
            float v68 = v67;
          }
          else {
            float v68 = 65535.0;
          }
          v42[4] = llroundf(v68);
          float v69 = 65535.0;
          if (v66 <= 65535.0)
          {
            float v69 = v66;
            if (v66 < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = v60 + v61;
          v42[5] = llroundf(v69);
          float v71 = 65535.0;
          if (v70 <= 65535.0)
          {
            float v71 = v70;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          v42[6] = llroundf(v71);
          v42[7] = v56;
          v40 += 2;
          v41 += 2;
          v42 += 8;
        }
        while (v7 > v40);
      }
      result += v13;
      v38 += v14;
      v35 += v15;
      v33 += v16;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v148 = v21 * *(float *)(v13 + 8);
    float v25 = v21 * *(float *)(v13 + 16);
    float v26 = v21 * *(float *)(v13 + 20);
    float v27 = v21 * *(float *)(v13 + 28);
    float v28 = *(float *)(v13 + 72);
    float v29 = *(float *)(v13 + 76);
    float v30 = *(float *)(v13 + 80);
    float v31 = *(float *)(v13 + 84);
    float v32 = *(float *)(v13 + 88);
    float v33 = *(float *)(v13 + 92);
    float v34 = *(float *)(v13 + 96);
    float v35 = *(float *)(v13 + 100);
    uint64_t v36 = v13 + 164;
    uint64_t v37 = v13 + 16548;
    uint64_t v38 = v13 + 32932;
    float v39 = *(float *)(v13 + 104);
    float v40 = *(float *)(v13 + 108);
    float v41 = *(float *)(v13 + 112);
    float v42 = *(float *)(v13 + 116);
    float v43 = *(float *)(v13 + 120);
    uint64_t v44 = *((void *)result + 14);
    unint64_t v45 = *((void *)result + 13) * a2 / v6;
    char v46 = (void *)*((void *)result + 16);
    unint64_t v47 = v45 + *((void *)result + 15);
    uint64_t v48 = *(void *)(result + 36);
    unsigned int v49 = *(unsigned __int8 *)(v13 + 124);
    char v50 = 16 - v49;
    if (v49 >= 0x11) {
      char v50 = 0;
    }
    uint64_t result = (unsigned __int8 *)(*v46 + v47 * v19 + 8 * v44);
    uint64_t v51 = v14[2];
    if (v51) {
      uint64_t v52 = v51 + v18 * v11 + 2 * v48;
    }
    else {
      uint64_t v52 = 0;
    }
    __int16 v55 = v14;
    uint64_t v54 = *v14;
    uint64_t v53 = v55[1];
    if (v53) {
      uint64_t v56 = v53 + v17 * v11 + 2 * v48;
    }
    else {
      uint64_t v56 = 0;
    }
    uint64_t v57 = v54 + v16 * v11 + 2 * v48;
    do
    {
      if (v10)
      {
        unint64_t v58 = 0;
        float v59 = (unsigned __int16 *)v57;
        float v60 = result;
        float v61 = (unsigned __int16 *)v52;
        do
        {
          float v62 = (unsigned __int16 *)(v56 + 2 * v58);
          float v63 = (float)(v62[1] >> v50) - v23;
          float v64 = v148 * v63;
          float v65 = v24 * (float)((float)(*v59 >> v50) - v22);
          float v66 = (float)(v148 * v63) + v65;
          float v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            float v67 = (float)(v148 * v63) + v65;
            if (v66 < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = (float)(*v62 >> v50) - v23;
          float v69 = (float)(v26 * v63) + (float)(v68 * v25);
          float v70 = 8191.0;
          if ((float)(v65 + v69) <= 8191.0)
          {
            float v70 = v65 + v69;
            if ((float)(v65 + v69) < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v27 * v68;
          float v72 = (float)(v27 * v68) + v65;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v24 * (float)((float)(v59[1] >> v50) - v22);
          float v75 = v64 + v74;
          BOOL v76 = (float)(v64 + v74) <= 8191.0;
          float v77 = 8191.0;
          if (v76)
          {
            float v77 = v75;
            if (v75 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v69 + v74;
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v71 + v74;
          BOOL v76 = (float)(v71 + v74) <= 8191.0;
          float v81 = 8191.0;
          if (v76)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          if (v61)
          {
            unsigned int v82 = *v61;
            unsigned int v83 = v61[1];
            v61 += 2;
          }
          else
          {
            unsigned int v82 = 0;
            unsigned int v83 = 0;
          }
          _S10 = fmaxf(v67, 0.0);
          float v85 = 8191.0;
          LOWORD(_S10) = *(_WORD *)(v36 + 2 * llroundf(fminf(_S10, 8191.0)));
          __asm { FCVT            S10, H10 }
          _H31 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          unsigned int v92 = llroundf(fminf(fmaxf(v73, 0.0), 8191.0));
          __asm { FCVT            S8, H31 }
          _H31 = *(_WORD *)(v36 + 2 * v92);
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          float v99 = (float)((float)((float)(v41 * _S8) + (float)(v40 * _S10)) + (float)(v42 * _S31))
              + (float)(v43 * fmaxf(_S10, fmaxf(_S8, _S31)));
          float v100 = 8191.0;
          if (v99 <= 8191.0)
          {
            float v100 = v99;
            if (v99 < 0.0) {
              float v100 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H9
            FCVT            S11, H11
            FCVT            S12, H12
          }
          _H13 = *(_WORD *)(v37 + 2 * llroundf(v100));
          float v105 = fmaxf(_S9, fmaxf(_S11, _S12));
          float v106 = (float)((float)((float)(v41 * _S11) + (float)(v40 * _S9)) + (float)(v42 * _S12)) + (float)(v43 * v105);
          if (v106 <= 8191.0)
          {
            float v85 = (float)((float)((float)(v41 * _S11) + (float)(v40 * _S9)) + (float)(v42 * _S12)) + (float)(v43 * v105);
            if (v106 < 0.0) {
              float v85 = 0.0;
            }
          }
          __asm { FCVT            S13, H13 }
          float v108 = _S10 * _S13;
          float v109 = _S8 * _S13;
          _H30 = *(_WORD *)(v37 + 2 * llroundf(v85));
          float v111 = _S31 * _S13;
          __asm { FCVT            S30, H30 }
          float v113 = _S9 * _S30;
          float v114 = _S11 * _S30;
          float v115 = _S12 * _S30;
          float v116 = (float)((float)(v29 * v109) + (float)(v108 * v28)) + (float)(v111 * v30);
          float v117 = (float)((float)(v32 * v109) + (float)(v108 * v31)) + (float)(v111 * v33);
          float v118 = (float)((float)(v35 * v109) + (float)(v108 * v34)) + (float)(v111 * v39);
          float v119 = (float)((float)(v29 * v114) + (float)(v113 * v28)) + (float)(v115 * v30);
          float v120 = (float)((float)(v32 * v114) + (float)(v113 * v31)) + (float)(v115 * v33);
          float v121 = (float)((float)(v35 * v114) + (float)(v113 * v34)) + (float)(v115 * v39);
          LOWORD(_S13) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          __asm { FCVT            S14, H13 }
          _H11 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          if (v61) {
            unsigned int v128 = v82;
          }
          else {
            unsigned int v128 = -1;
          }
          if (v61) {
            unsigned int v129 = v83;
          }
          else {
            unsigned int v129 = -1;
          }
          float v130 = 65535.0;
          float v131 = 65535.0;
          if (_S14 <= 65535.0)
          {
            __asm { FCMP            H13, #0 }
            float v131 = _S14;
            if (_NF) {
              float v131 = 0.0;
            }
          }
          __asm { FCVT            S14, H11 }
          float v134 = 65535.0;
          if (_S14 <= 65535.0)
          {
            __asm { FCMP            H11, #0 }
            float v134 = _S14;
            if (_NF) {
              float v134 = 0.0;
            }
          }
          __asm { FCVT            S14, H10 }
          float v137 = 65535.0;
          if (_S14 <= 65535.0)
          {
            __asm { FCMP            H10, #0 }
            float v137 = _S14;
            if (_NF) {
              float v137 = 0.0;
            }
          }
          unsigned int v139 = llroundf(v137);
          __asm { FCVT            S11, H9 }
          *float v60 = bswap32(v128) >> 16;
          v60[1] = __rev16(llroundf(v131));
          v60[2] = __rev16(llroundf(v134));
          v60[3] = __rev16(v139);
          float v141 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCMP            H9, #0 }
            float v141 = _S11;
            if (_NF) {
              float v141 = 0.0;
            }
          }
          __asm { FCVT            S11, H8 }
          float v144 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v144 = _S11;
            if (_NF) {
              float v144 = 0.0;
            }
          }
          __asm { FCVT            S8, H31 }
          if (_S8 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v130 = _S8;
            if (_NF) {
              float v130 = 0.0;
            }
          }
          unsigned char v60[4] = bswap32(v129) >> 16;
          v60[5] = __rev16(llroundf(v141));
          v60[6] = __rev16(llroundf(v144));
          v60[7] = __rev16(llroundf(v130));
          v58 += 2;
          v59 += 2;
          v60 += 8;
        }
        while (v10 > v58);
      }
      v57 += v16;
      v56 += v17;
      v52 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    float v37 = *(float *)(v13 + 104);
    uint64_t v38 = v13 + 164;
    uint64_t v39 = v13 + 16548;
    uint64_t v40 = *((void *)result + 14);
    unint64_t v41 = *((void *)result + 13) * a2 / v6;
    float v42 = (void *)*((void *)result + 16);
    unint64_t v43 = v41 + *((void *)result + 15);
    uint64_t v44 = *(void *)(result + 36);
    unsigned int v45 = *(unsigned __int8 *)(v13 + 124);
    char v46 = 16 - v45;
    if (v45 >= 0x11) {
      char v46 = 0;
    }
    uint64_t v47 = *v42 + v43 * v19 + 8 * v40;
    uint64_t v48 = v14[2];
    if (v48) {
      uint64_t result = (unsigned __int8 *)(v48 + v18 * v11 + 2 * v44);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v51 = v14;
    uint64_t v50 = *v14;
    uint64_t v49 = v51[1];
    if (v49) {
      uint64_t v52 = v49 + v17 * v11 + 2 * v44;
    }
    else {
      uint64_t v52 = 0;
    }
    uint64_t v53 = v50 + v16 * v11 + 2 * v44;
    do
    {
      if (v10)
      {
        unint64_t v54 = 0;
        __int16 v55 = (unsigned __int16 *)v53;
        uint64_t v56 = (_WORD *)v47;
        uint64_t v57 = (unsigned __int16 *)result;
        do
        {
          unint64_t v58 = (unsigned __int16 *)(v52 + 2 * v54);
          float v59 = (float)(v58[1] >> v46) - v23;
          float v60 = v25 * v59;
          float v61 = v24 * (float)((float)(*v55 >> v46) - v22);
          float v62 = (float)(v25 * v59) + v61;
          float v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            float v63 = (float)(v25 * v59) + v61;
            if (v62 < 0.0) {
              float v63 = 0.0;
            }
          }
          float v64 = (float)(*v58 >> v46) - v23;
          float v65 = (float)(v27 * v59) + (float)(v64 * v26);
          float v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            float v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v28 * v64;
          float v68 = v67 + v61;
          BOOL v69 = (float)(v67 + v61) <= 8191.0;
          float v70 = 8191.0;
          if (v69)
          {
            float v70 = v68;
            if (v68 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v24 * (float)((float)(v55[1] >> v46) - v22);
          float v72 = v60 + v71;
          BOOL v69 = (float)(v60 + v71) <= 8191.0;
          float v73 = 8191.0;
          if (v69)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v65 + v71;
          BOOL v69 = (float)(v65 + v71) <= 8191.0;
          float v75 = 8191.0;
          if (v69)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v67 + v71;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          if (v57)
          {
            unsigned int v78 = *v57;
            unsigned int v79 = v57[1];
            v57 += 2;
          }
          else
          {
            unsigned int v78 = 0;
            unsigned int v79 = 0;
          }
          _H26 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S28, H28
          }
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          float v96 = (float)((float)(v30 * _S27) + (float)(_S26 * v29)) + (float)(_S28 * v31);
          float v97 = (float)((float)(v33 * _S27) + (float)(_S26 * v32)) + (float)(_S28 * v34);
          float v98 = (float)((float)(v36 * _S27) + (float)(_S26 * v35)) + (float)(_S28 * v37);
          float v99 = (float)((float)(v30 * _S30) + (float)(_S29 * v29)) + (float)(_S31 * v31);
          float v100 = (float)((float)(v33 * _S30) + (float)(_S29 * v32)) + (float)(_S31 * v34);
          float v101 = (float)((float)(v36 * _S30) + (float)(_S29 * v35)) + (float)(_S31 * v37);
          _H9 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S10, H9 }
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          if (v57) {
            unsigned int v109 = v78;
          }
          else {
            unsigned int v109 = -1;
          }
          if (v57) {
            unsigned int v110 = v79;
          }
          else {
            unsigned int v110 = -1;
          }
          float v111 = 65535.0;
          float v112 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCMP            H9, #0 }
            float v112 = _S10;
            if (_NF) {
              float v112 = 0.0;
            }
          }
          __asm { FCVT            S10, H31 }
          float v115 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v115 = _S10;
            if (_NF) {
              float v115 = 0.0;
            }
          }
          __asm { FCVT            S10, H30 }
          float v118 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCMP            H30, #0 }
            float v118 = _S10;
            if (_NF) {
              float v118 = 0.0;
            }
          }
          unsigned int v120 = llroundf(v118);
          __asm { FCVT            S31, H29 }
          *uint64_t v56 = bswap32(v109) >> 16;
          v56[1] = __rev16(llroundf(v112));
          v56[2] = __rev16(llroundf(v115));
          v56[3] = __rev16(v120);
          float v122 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H29, #0 }
            float v122 = _S31;
            if (_NF) {
              float v122 = 0.0;
            }
          }
          __asm { FCVT            S31, H28 }
          float v125 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H28, #0 }
            float v125 = _S31;
            if (_NF) {
              float v125 = 0.0;
            }
          }
          __asm { FCVT            S28, H27 }
          if (_S28 <= 65535.0)
          {
            __asm { FCMP            H27, #0 }
            float v111 = _S28;
            if (_NF) {
              float v111 = 0.0;
            }
          }
          v56[4] = bswap32(v110) >> 16;
          v56[5] = __rev16(llroundf(v122));
          v56[6] = __rev16(llroundf(v125));
          v56[7] = __rev16(llroundf(v111));
          v54 += 2;
          v55 += 2;
          v56 += 8;
        }
        while (v10 > v54);
      }
      v53 += v16;
      v52 += v17;
      result += v18;
      v47 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    unint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    uint64_t v12 = (uint64_t *)*((void *)result + 7);
    uint64_t v11 = (uint64_t *)*((void *)result + 8);
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    uint64_t v15 = v11[2];
    uint64_t v16 = **((void **)result + 17);
    *(float *)&unsigned int v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v10 + 136);
    float v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    float v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    float v21 = (float)v18;
    float v22 = v19 * *(float *)v10;
    float v23 = v19 * *(float *)(v10 + 8);
    float v24 = v19 * *(float *)(v10 + 16);
    float v25 = v19 * *(float *)(v10 + 20);
    float v26 = v19 * *(float *)(v10 + 28);
    uint64_t v27 = *((void *)result + 14);
    unint64_t v28 = *((void *)result + 13) * a2 / v3;
    uint64_t v29 = (void *)*((void *)result + 16);
    unint64_t v30 = v28 + *((void *)result + 15);
    uint64_t v31 = *(void *)(result + 36);
    LODWORD(v10) = *(unsigned __int8 *)(v10 + 124);
    char v32 = 16 - v10;
    if (v10 >= 0x11) {
      char v32 = 0;
    }
    uint64_t v33 = *v29 + v30 * v16 + 8 * v27;
    uint64_t v34 = v12[2];
    if (v34) {
      uint64_t v35 = v34 + v15 * v8 + 2 * v31;
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v37 = *v12;
    uint64_t v36 = v12[1];
    uint64_t v38 = v36 + v14 * v8 + 2 * v31;
    if (!v36) {
      uint64_t v38 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v37 + v13 * v8 + 2 * v31);
    char v39 = v32;
    do
    {
      if (v7)
      {
        unint64_t v40 = 0;
        unint64_t v41 = (unsigned __int16 *)result;
        float v42 = (_WORD *)v33;
        unint64_t v43 = (unsigned __int16 *)v35;
        do
        {
          if (v43)
          {
            unsigned int v44 = *v43;
            unsigned int v45 = v43[1];
            v43 += 2;
          }
          else
          {
            unsigned int v44 = 0;
            unsigned int v45 = 0;
          }
          char v46 = (unsigned __int16 *)(v38 + 2 * v40);
          float v47 = (float)(*v46 >> v39) - v21;
          float v48 = (float)(v46[1] >> v39) - v21;
          float v49 = v23 * v48;
          float v50 = (float)(v25 * v48) + (float)(v47 * v24);
          float v51 = v22 * (float)((float)(*v41 >> v39) - v20);
          float v52 = v49 + v51;
          float v53 = v51 + v50;
          if (v43) {
            unsigned int v54 = v44;
          }
          else {
            unsigned int v54 = -1;
          }
          if (v43) {
            unsigned int v55 = v45;
          }
          else {
            unsigned int v55 = -1;
          }
          if (v52 < 0.0) {
            float v56 = 0.0;
          }
          else {
            float v56 = v49 + v51;
          }
          if (v52 <= 65535.0) {
            float v57 = v56;
          }
          else {
            float v57 = 65535.0;
          }
          float v58 = 65535.0;
          if (v53 <= 65535.0)
          {
            float v58 = v51 + v50;
            if (v53 < 0.0) {
              float v58 = 0.0;
            }
          }
          float v59 = v26 * v47;
          float v60 = v22 * (float)((float)(v41[1] >> v39) - v20);
          float v61 = v59 + v51;
          float v62 = v49 + v60;
          unsigned int v63 = llroundf(v57);
          float v64 = v50 + v60;
          unsigned int v65 = llroundf(v58);
          if (v61 < 0.0) {
            float v66 = 0.0;
          }
          else {
            float v66 = v61;
          }
          if (v61 > 65535.0) {
            float v66 = 65535.0;
          }
          *float v42 = bswap32(v54) >> 16;
          v42[1] = __rev16(v63);
          v42[2] = __rev16(v65);
          v42[3] = __rev16(llroundf(v66));
          if (v62 < 0.0) {
            float v67 = 0.0;
          }
          else {
            float v67 = v62;
          }
          if (v62 > 65535.0) {
            float v67 = 65535.0;
          }
          float v68 = 65535.0;
          if (v64 <= 65535.0)
          {
            float v68 = v64;
            if (v64 < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v59 + v60;
          float v70 = 65535.0;
          if (v69 <= 65535.0)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          v42[4] = bswap32(v55) >> 16;
          v42[5] = __rev16(llroundf(v67));
          v42[6] = __rev16(llroundf(v68));
          v42[7] = __rev16(llroundf(v70));
          v40 += 2;
          v41 += 2;
          v42 += 8;
        }
        while (v7 > v40);
      }
      result += v13;
      v38 += v14;
      v35 += v15;
      v33 += v16;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_RGhA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44);
    uint64_t v12 = v7 + v11;
    uint64_t v13 = v8 + v11;
    uint64_t v14 = *(float32x2_t **)(result + 152);
    uint64_t v15 = *(uint64_t **)(result + 56);
    uint64_t v16 = *(uint64_t **)(result + 64);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **(void **)(result + 136);
    unsigned int v21 = v14[17].u16[2];
    LODWORD(v11) = v14[17].u16[3];
    v22.i32[0] = v14[3].i32[1];
    _S1 = v14[9].f32[1];
    _S2 = v14[10].f32[0];
    _S3 = v14[10].f32[1];
    _S4 = v14[11].f32[0];
    _S5 = v14[11].f32[1];
    _S6 = v14[12].f32[0];
    _S7 = v14[12].f32[1];
    _S16 = v14[13].f32[0];
    _S17 = v14[13].f32[1];
    _S18 = v14[14].f32[0];
    _S19 = v14[14].f32[1];
    _S20 = v14[15].f32[0];
    uint64_t v228 = v13 - v12;
    uint64_t v35 = (char *)&v14[2068] + 4;
    float v36 = (float)v21;
    float v37 = (float)v11;
    v2.f32[0] = 8191.0 / (float)v14[16].u32[0];
    _S24 = v2.f32[0] * v14->f32[0];
    uint64_t v39 = (char *)&v14[20] + 4;
    uint64_t v40 = (char *)&v14[4116] + 4;
    __asm { FCVT            H8, S24 }
    *(short float *)v3.i16 = (short float)v21;
    float16x8_t v253 = (float16x8_t)vdupq_lane_s16(v3, 0);
    v22.i32[1] = v14[1].i32[0];
    *(float32x2_t *)v4.f32 = vmul_n_f32(v22, v2.f32[0]);
    short float v46 = -(short float)v11;
    *(float32x2_t *)v2.f32 = vmul_n_f32(v14[2], v2.f32[0]);
    float16x8_t v252 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v250 = vmulq_n_f16(v252, v46);
    float16x8_t v251 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v2), 0);
    float16x8_t v47 = vmulq_n_f16(v251, v46);
    __asm { FCVT            H9, S17 }
    short float v248 = _H9;
    float16x8_t v249 = v47;
    __asm { FCVT            H9, S18 }
    short float v247 = _H9;
    __asm { FCVT            H9, S19 }
    short float v246 = _H9;
    __asm { FCVT            H9, S20 }
    float v254 = v14[9].f32[0];
    __asm { FCVT            H0, S0 }
    short float v244 = _H0;
    short float v245 = _H9;
    __asm { FCVT            H0, S1 }
    short float v243 = _H0;
    __asm { FCVT            H0, S2 }
    short float v242 = _H0;
    unsigned int v55 = v14[15].u8[4];
    uint64_t v56 = v15[2];
    uint64_t v57 = *(void *)(result + 36);
    uint64_t v58 = *(void *)(result + 112);
    unint64_t v59 = *(void *)(result + 104) * a2 / v6 + *(void *)(result + 120);
    uint64_t v61 = *v15;
    uint64_t v60 = *(void *)(*(void *)(result + 56) + 8);
    uint64_t result = **(void **)(result + 128);
    if (v55 >= 0x11) {
      unsigned __int8 v62 = 0;
    }
    else {
      unsigned __int8 v62 = 16 - v55;
    }
    uint64_t v229 = v20;
    uint64_t v63 = result + v20 * v59 + 8 * v58;
    if (v56) {
      uint64_t v64 = v56 + v19 * v12 + 2 * v57;
    }
    else {
      uint64_t v64 = 0;
    }
    if (v60) {
      unsigned int v65 = (uint16x8_t *)(v60 + v18 * v12 + 2 * v57);
    }
    else {
      unsigned int v65 = 0;
    }
    uint64_t v230 = v17;
    float v66 = (uint16x8_t *)(v61 + v17 * v12 + 2 * v57);
    unsigned __int8 v227 = v62;
    __asm { FCVT            H0, S3 }
    short float v241 = _H0;
    __asm { FCVT            H0, S4 }
    short float v240 = _H0;
    __asm { FCVT            H0, S5 }
    short float v239 = _H0;
    __asm { FCVT            H0, S6 }
    short float v238 = _H0;
    __asm { FCVT            H0, S7 }
    short float v237 = _H0;
    __asm { FCVT            H0, S16 }
    short float v236 = _H0;
    uint16x8_t v73 = (uint16x8_t)vdupq_n_s16(-v62);
    uint64_t v74 = v4.i64[0];
    uint64_t v75 = v2.i64[0];
    v76.i64[0] = 0x9000900090009000;
    v76.i64[1] = 0x9000900090009000;
    do
    {
      uint64_t v234 = v63;
      uint64_t v235 = v9;
      short float v232 = v65;
      uint64_t v233 = v64;
      short float v231 = v66;
      if ((int)v10 < 8)
      {
        unint64_t v165 = 0;
        unsigned int v78 = (int8x16_t *)v64;
      }
      else
      {
        int v77 = 0;
        unsigned int v78 = (int8x16_t *)v64;
        do
        {
          if (v78)
          {
            int8x16_t v79 = *v78++;
            int8x16_t v80 = v79;
          }
          else
          {
            int8x16_t v80 = 0uLL;
          }
          short float v255 = v78;
          if (v78)
          {
            *(int16x4_t *)v81.i8 = vzip1_s16(*(int16x4_t *)v80.i8, 0);
            v81.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v80.i8, 0);
            int16x4_t v82 = (int16x4_t)vextq_s8(v80, v80, 8uLL).u64[0];
            *(int16x4_t *)v83.i8 = vzip1_s16(v82, 0);
            v83.u64[1] = (unint64_t)vzip2_s16(v82, 0);
            float32x4_t v84 = vcvtq_f32_u32(v83);
            float32x4_t v85 = (float32x4_t)vdupq_n_s32(0x37800080u);
            float16x8_t v86 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(v81), v85)), vmulq_f32(v84, v85));
          }
          else
          {
            v86.i64[0] = 0x3C003C003C003C00;
            v86.i64[1] = 0x3C003C003C003C00;
          }
          uint16x8_t v87 = *v65++;
          float16x8_t v88 = vcvtq_f16_u16(vshlq_u16(v87, v73));
          int16x8_t v89 = (int16x8_t)vmlaq_f16(v250, v252, v88);
          int8x16_t v90 = (int8x16_t)vmlaq_f16(v249, v251, v88);
          v88.i64[0] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
          *(int16x4_t *)v91.i8 = vuzp1_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v88.i8);
          *(int16x4_t *)v88.i8 = vuzp2_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v88.i8);
          v88.i64[1] = v251.i64[0];
          v91.i64[1] = v251.i64[0];
          float16x8_t v92 = (float16x8_t)vzip1q_s16(v91, v91);
          v89.i64[0] = vextq_s8(v90, v90, 8uLL).u64[0];
          *(float16x4_t *)v89.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v90.i8, *(int16x4_t *)v89.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v90.i8, *(int16x4_t *)v89.i8));
          v89.i64[1] = v251.i64[0];
          float16x8_t v93 = (float16x8_t)vzip1q_s16(v89, v89);
          uint16x8_t v94 = *v66++;
          float16x8_t v95 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v94, v73)), v253);
          uint16x8_t v96 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v88, (int16x8_t)v88), v95, _H8), (float16x8_t)0), v76));
          float16x8_t v97 = (float16x8_t)vmovl_high_u16(v96);
          uint32x4_t v98 = vmovl_u16(*(uint16x4_t *)v96.i8);
          v91.i16[0] = *(_WORD *)&v39[2 * v98.u32[0]];
          v91.i16[1] = *(_WORD *)&v39[2 * v98.u32[1]];
          v91.i16[2] = *(_WORD *)&v39[2 * v98.u32[2]];
          v91.i16[3] = *(_WORD *)&v39[2 * v98.u32[3]];
          v91.i16[4] = *(_WORD *)&v39[2 * v97.u32[0]];
          v91.i16[5] = *(_WORD *)&v39[2 * v97.u32[1]];
          v91.i16[6] = *(_WORD *)&v39[2 * v97.u32[2]];
          v91.i16[7] = *(_WORD *)&v39[2 * v97.u32[3]];
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v93, v95, _H8), (float16x8_t)0), v76));
          uint32x4_t v100 = vmovl_high_u16(v99);
          uint32x4_t v101 = vmovl_u16(*(uint16x4_t *)v99.i8);
          v97.i16[0] = *(_WORD *)&v39[2 * v101.u32[0]];
          v97.i16[1] = *(_WORD *)&v39[2 * v101.u32[1]];
          v97.i16[2] = *(_WORD *)&v39[2 * v101.u32[2]];
          v97.i16[3] = *(_WORD *)&v39[2 * v101.u32[3]];
          v97.i16[4] = *(_WORD *)&v39[2 * v100.u32[0]];
          v97.i16[5] = *(_WORD *)&v39[2 * v100.u32[1]];
          v97.i16[6] = *(_WORD *)&v39[2 * v100.u32[2]];
          v97.i16[7] = *(_WORD *)&v39[2 * v100.u32[3]];
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v92, v95, _H8), (float16x8_t)0), v76));
          uint32x4_t v103 = vmovl_high_u16(v102);
          uint32x4_t v104 = vmovl_u16(*(uint16x4_t *)v102.i8);
          v95.i16[0] = *(_WORD *)&v39[2 * v104.u32[0]];
          v95.i16[1] = *(_WORD *)&v39[2 * v104.u32[1]];
          v95.i16[2] = *(_WORD *)&v39[2 * v104.u32[2]];
          v95.i16[3] = *(_WORD *)&v39[2 * v104.u32[3]];
          v95.i16[4] = *(_WORD *)&v39[2 * v103.u32[0]];
          v95.i16[5] = *(_WORD *)&v39[2 * v103.u32[1]];
          v95.i16[6] = *(_WORD *)&v39[2 * v103.u32[2]];
          v95.i16[7] = *(_WORD *)&v39[2 * v103.u32[3]];
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v91, v248), v97, v247), v95, v246), vmaxq_f16(vmaxq_f16((float16x8_t)v91, v97), v95), v245), (float16x8_t)0), v76));
          uint32x4_t v106 = vmovl_u16(*(uint16x4_t *)v105.i8);
          float16x8_t v107 = (float16x8_t)vmovl_high_u16(v105);
          uint64_t v108 = v107.u32[0];
          v107.i16[0] = *(_WORD *)&v35[2 * v106.u32[0]];
          unsigned int v109 = (__int16 *)&v35[2 * v107.u32[1]];
          unsigned int v110 = (__int16 *)&v35[2 * v107.u32[2]];
          v107.i16[1] = *(_WORD *)&v35[2 * v106.u32[1]];
          v107.i16[2] = *(_WORD *)&v35[2 * v106.u32[2]];
          v107.i16[3] = *(_WORD *)&v35[2 * v106.u32[3]];
          v107.i16[4] = *(_WORD *)&v35[2 * v108];
          v107.i16[5] = *v109;
          float v111 = (__int16 *)&v35[2 * v107.u32[3]];
          v107.i16[6] = *v110;
          v107.i16[7] = *v111;
          float16x8_t v112 = vmulq_f16((float16x8_t)v91, v107);
          float16x8_t v113 = vmulq_f16(v97, v107);
          float16x8_t v114 = vmulq_f16(v95, v107);
          float16x8_t v115 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v112, v241), v113, v240), v114, v239);
          float16x8_t v116 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v114, v236), v113, v237), v112, v238);
          uint16x8_t v117 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v112, v244), v113, v243), v114, v242), (float16x8_t)0), v76));
          uint32x4_t v118 = vmovl_u16(*(uint16x4_t *)v117.i8);
          uint64_t v119 = v118.u32[1];
          uint64_t v120 = v118.u32[0];
          uint32x4_t v121 = vmovl_high_u16(v117);
          uint64_t v122 = v118.u32[3];
          uint64_t v123 = v118.u32[2];
          uint64_t v124 = v121.u32[1];
          uint64_t v125 = v121.u32[3];
          uint64_t v126 = v121.u32[0];
          uint64_t v127 = v121.u32[2];
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v76));
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v128.i8);
          uint64_t v130 = v129.u32[1];
          uint64_t v131 = v129.u32[0];
          uint32x4_t v132 = vmovl_high_u16(v128);
          uint64_t v133 = v129.u32[3];
          uint64_t v134 = v129.u32[2];
          uint64_t result = v132.u32[1];
          uint64_t v135 = v132.u32[0];
          uint64_t v136 = v132.u32[3];
          uint64_t v137 = v132.u32[2];
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)0), v76));
          uint32x4_t v139 = vmovl_u16(*(uint16x4_t *)v138.i8);
          uint32x4_t v140 = vmovl_high_u16(v138);
          __int16 v141 = *(_WORD *)&v40[2 * v120];
          __int16 v142 = *(_WORD *)&v40[2 * v119];
          __int16 v143 = *(_WORD *)&v40[2 * v123];
          __int16 v144 = *(_WORD *)&v40[2 * v122];
          __int16 v145 = *(_WORD *)&v40[2 * v126];
          __int16 v146 = *(_WORD *)&v40[2 * v124];
          __int16 v147 = *(_WORD *)&v40[2 * v127];
          __int16 v148 = *(_WORD *)&v40[2 * v125];
          __int16 v149 = *(_WORD *)&v40[2 * v131];
          __int16 v150 = *(_WORD *)&v40[2 * v130];
          __int16 v151 = *(_WORD *)&v40[2 * v134];
          __int16 v152 = *(_WORD *)&v40[2 * v133];
          __int16 v153 = *(_WORD *)&v40[2 * v135];
          __int16 v154 = *(_WORD *)&v40[2 * result];
          __int16 v155 = *(_WORD *)&v40[2 * v137];
          __int16 v156 = *(_WORD *)&v40[2 * v136];
          __int16 v157 = *(_WORD *)&v40[2 * v139.u32[0]];
          __int16 v158 = *(_WORD *)&v40[2 * v139.u32[1]];
          __int16 v159 = *(_WORD *)&v40[2 * v139.u32[2]];
          __int16 v160 = *(_WORD *)&v40[2 * v139.u32[3]];
          __int16 v161 = *(_WORD *)&v40[2 * v140.u32[0]];
          __int16 v162 = *(_WORD *)&v40[2 * v140.u32[1]];
          __int16 v163 = *(_WORD *)&v40[2 * v140.u32[2]];
          __int16 v164 = *(_WORD *)&v40[2 * v140.u32[3]];
          vst4q_s16((__int16 *)v63, *(int16x8x4_t *)(&v86 - 3));
          v63 += 64;
          v77 += 8;
          unsigned int v78 = v255;
        }
        while (v77 < (int)v10 - 7);
        unint64_t v165 = v10 & 0xFFFFFFF8;
      }
      while (v10 > v165)
      {
        float v166 = (float)(v65->u16[1] >> v227) - v37;
        float v167 = *((float *)&v74 + 1) * v166;
        float v168 = _S24 * (float)((float)(v66->u16[0] >> v227) - v36);
        float v169 = (float)(*((float *)&v74 + 1) * v166) + v168;
        float v170 = 8191.0;
        if (v169 <= 8191.0)
        {
          float v170 = (float)(*((float *)&v74 + 1) * v166) + v168;
          if (v169 < 0.0) {
            float v170 = 0.0;
          }
        }
        float v171 = (float)(v65->u16[0] >> v227) - v37;
        float v172 = (float)(*((float *)&v75 + 1) * v166) + (float)(v171 * *(float *)&v75);
        float v173 = 8191.0;
        if ((float)(v168 + v172) <= 8191.0)
        {
          float v173 = v168 + v172;
          if ((float)(v168 + v172) < 0.0) {
            float v173 = 0.0;
          }
        }
        float v174 = *(float *)&v74 * v171;
        float v175 = (float)(*(float *)&v74 * v171) + v168;
        float v176 = 8191.0;
        if (v175 <= 8191.0)
        {
          float v176 = v175;
          if (v175 < 0.0) {
            float v176 = 0.0;
          }
        }
        float v177 = _S24 * (float)((float)(v66->u16[1] >> v227) - v36);
        float v178 = v167 + v177;
        float v179 = 8191.0;
        if (v178 <= 8191.0)
        {
          float v179 = v178;
          if (v178 < 0.0) {
            float v179 = 0.0;
          }
        }
        float v180 = 8191.0;
        if ((float)(v172 + v177) <= 8191.0)
        {
          float v180 = v172 + v177;
          if ((float)(v172 + v177) < 0.0) {
            float v180 = 0.0;
          }
        }
        float v181 = v174 + v177;
        BOOL v182 = (float)(v174 + v177) <= 8191.0;
        float v183 = 8191.0;
        if (v182)
        {
          float v183 = v181;
          if (v181 < 0.0) {
            float v183 = 0.0;
          }
        }
        if (v78)
        {
          unsigned int v184 = v78->u16[0];
          unsigned int v185 = v78->u16[1];
          unsigned int v78 = (int8x16_t *)((char *)v78 + 4);
        }
        else
        {
          unsigned int v184 = 0;
          unsigned int v185 = 0;
        }
        _H0 = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v170, 0.0), 8191.0))];
        __asm { FCVT            S11, H0 }
        _H0 = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v173, 0.0), 8191.0))];
        __asm { FCVT            S9, H0 }
        _H0 = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0))];
        __asm { FCVT            S10, H0 }
        _H27 = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v179, 0.0), 8191.0))];
        _H12 = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v180, 0.0), 8191.0))];
        _H13 = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v183, 0.0), 8191.0))];
        float v195 = (float)((float)((float)(_S18 * _S9) + (float)(_S17 * _S11)) + (float)(_S19 * _S10))
             + (float)(_S20 * fmaxf(_S11, fmaxf(_S9, _S10)));
        float v196 = 8191.0;
        if (v195 <= 8191.0)
        {
          float v196 = v195;
          if (v195 < 0.0) {
            float v196 = 0.0;
          }
        }
        __asm
        {
          FCVT            S27, H27
          FCVT            S12, H12
          FCVT            S13, H13
        }
        _H14 = *(_WORD *)&v35[2 * llroundf(v196)];
        float v201 = (float)((float)((float)(_S18 * _S12) + (float)(_S17 * _S27)) + (float)(_S19 * _S13))
             + (float)(_S20 * fmaxf(_S27, fmaxf(_S12, _S13)));
        float v202 = 8191.0;
        if (v201 <= 8191.0)
        {
          float v202 = v201;
          if (v201 < 0.0) {
            float v202 = 0.0;
          }
        }
        __asm { FCVT            S0, H14 }
        float v204 = _S11 * _S0;
        float v205 = _S9 * _S0;
        float v206 = _S10 * _S0;
        _H30 = *(_WORD *)&v35[2 * llroundf(v202)];
        __asm { FCVT            S30, H30 }
        float v209 = _S27 * _S30;
        float v210 = _S12 * _S30;
        float v211 = _S13 * _S30;
        float v212 = (float)((float)(_S1 * v205) + (float)(v204 * v254)) + (float)(v206 * _S2);
        float v213 = (float)((float)(_S4 * v205) + (float)(v204 * _S3)) + (float)(v206 * _S5);
        float v214 = (float)((float)(_S7 * v205) + (float)(v204 * _S6)) + (float)(v206 * _S16);
        float v215 = (float)((float)(_S1 * v210) + (float)(v209 * v254)) + (float)(v211 * _S2);
        float v216 = (float)((float)(_S4 * v210) + (float)(v209 * _S3)) + (float)(v211 * _S5);
        float v217 = (float)((float)(_S7 * v210) + (float)(v209 * _S6)) + (float)(v211 * _S16);
        LOWORD(v211) = *(_WORD *)&v40[2 * llroundf(fminf(fmaxf(v212, 0.0), 8191.0))];
        LOWORD(v210) = *(_WORD *)&v40[2 * llroundf(fminf(fmaxf(v213, 0.0), 8191.0))];
        LOWORD(v214) = *(_WORD *)&v40[2 * llroundf(fminf(fmaxf(v214, 0.0), 8191.0))];
        __int16 v218 = *(_WORD *)&v40[2 * llroundf(fminf(fmaxf(v215, 0.0), 8191.0))];
        __int16 v219 = *(_WORD *)&v40[2 * llroundf(fminf(fmaxf(v216, 0.0), 8191.0))];
        __int16 v220 = *(_WORD *)&v40[2 * llroundf(fminf(fmaxf(v217, 0.0), 8191.0))];
        _S31 = (float)v184 * 0.000015259;
        __asm { FCVT            H31, S31 }
        _S11 = (float)v185 * 0.000015259;
        __asm { FCVT            H11, S11 }
        *(_WORD *)uint64_t v63 = LOWORD(v211);
        *(_WORD *)(v63 + 2) = LOWORD(v210);
        *(_WORD *)(v63 + 4) = LOWORD(v214);
        if (v78) {
          short float v225 = _H31;
        }
        else {
          LOWORD(v225) = COERCE_UNSIGNED_INT(1.0);
        }
        *(short float *)(v63 + 6) = v225;
        *(_WORD *)(v63 + 8) = v218;
        *(_WORD *)(v63 + 10) = v219;
        *(_WORD *)(v63 + 12) = v220;
        v165 += 2;
        if (v78) {
          short float v226 = _H11;
        }
        else {
          LOWORD(v226) = COERCE_UNSIGNED_INT(1.0);
        }
        *(short float *)(v63 + 14) = v226;
        unsigned int v65 = (uint16x8_t *)((char *)v65 + 4);
        float v66 = (uint16x8_t *)((char *)v66 + 4);
        v63 += 16;
      }
      float v66 = (uint16x8_t *)((char *)v231 + v230);
      unsigned int v65 = (uint16x8_t *)((char *)v232 + v18);
      uint64_t v64 = v233 + v19;
      uint64_t v63 = v234 + v229;
      ++v9;
    }
    while (v235 + 1 != v228);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v130 = v21 * *(float *)(v13 + 8);
    float v25 = v21 * *(float *)(v13 + 16);
    float v26 = v21 * *(float *)(v13 + 20);
    float v27 = v21 * *(float *)(v13 + 28);
    float v28 = *(float *)(v13 + 72);
    float v29 = *(float *)(v13 + 76);
    float v30 = *(float *)(v13 + 80);
    float v31 = *(float *)(v13 + 84);
    float v32 = *(float *)(v13 + 88);
    float v33 = *(float *)(v13 + 92);
    float v34 = *(float *)(v13 + 96);
    float v35 = *(float *)(v13 + 100);
    uint64_t v36 = v13 + 164;
    uint64_t v37 = v13 + 16548;
    uint64_t v38 = v13 + 32932;
    float v39 = *(float *)(v13 + 104);
    float v40 = *(float *)(v13 + 108);
    float v41 = *(float *)(v13 + 112);
    float v42 = *(float *)(v13 + 116);
    float v43 = *(float *)(v13 + 120);
    uint64_t v44 = *((void *)result + 14);
    unint64_t v45 = *((void *)result + 13) * a2 / v6;
    short float v46 = (void *)*((void *)result + 16);
    unint64_t v47 = v45 + *((void *)result + 15);
    uint64_t v48 = *(void *)(result + 36);
    unsigned int v49 = *(unsigned __int8 *)(v13 + 124);
    char v50 = 16 - v49;
    if (v49 >= 0x11) {
      char v50 = 0;
    }
    uint64_t result = (unsigned __int8 *)(*v46 + v47 * v19 + 8 * v44);
    uint64_t v51 = v14[2];
    if (v51) {
      uint64_t v52 = v51 + v18 * v11 + 2 * v48;
    }
    else {
      uint64_t v52 = 0;
    }
    unsigned int v55 = v14;
    uint64_t v54 = *v14;
    uint64_t v53 = v55[1];
    if (v53) {
      uint64_t v56 = v53 + v17 * v11 + 2 * v48;
    }
    else {
      uint64_t v56 = 0;
    }
    uint64_t v57 = v54 + v16 * v11 + 2 * v48;
    do
    {
      if (v10)
      {
        unint64_t v58 = 0;
        unint64_t v59 = (unsigned __int16 *)v57;
        uint64_t v60 = result;
        uint64_t v61 = (unsigned __int16 *)v52;
        do
        {
          unsigned __int8 v62 = (unsigned __int16 *)(v56 + 2 * v58);
          float v63 = (float)(v62[1] >> v50) - v23;
          float v64 = v130 * v63;
          float v65 = v24 * (float)((float)(*v59 >> v50) - v22);
          float v66 = (float)(v130 * v63) + v65;
          float v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            float v67 = (float)(v130 * v63) + v65;
            if (v66 < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = (float)(*v62 >> v50) - v23;
          float v69 = (float)(v26 * v63) + (float)(v68 * v25);
          float v70 = 8191.0;
          if ((float)(v65 + v69) <= 8191.0)
          {
            float v70 = v65 + v69;
            if ((float)(v65 + v69) < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v27 * v68;
          float v72 = (float)(v27 * v68) + v65;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v24 * (float)((float)(v59[1] >> v50) - v22);
          float v75 = v64 + v74;
          BOOL v76 = (float)(v64 + v74) <= 8191.0;
          float v77 = 8191.0;
          if (v76)
          {
            float v77 = v75;
            if (v75 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v69 + v74;
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v71 + v74;
          BOOL v76 = (float)(v71 + v74) <= 8191.0;
          float v81 = 8191.0;
          if (v76)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          if (v61)
          {
            unsigned int v82 = *v61;
            unsigned int v83 = v61[1];
            v61 += 2;
          }
          else
          {
            unsigned int v82 = 0;
            unsigned int v83 = 0;
          }
          _S11 = fmaxf(v67, 0.0);
          float v85 = 8191.0;
          LOWORD(_S11) = *(_WORD *)(v36 + 2 * llroundf(fminf(_S11, 8191.0)));
          __asm { FCVT            S11, H11 }
          _H8 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H10 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          float v98 = (float)((float)((float)(v41 * _S8) + (float)(v40 * _S11)) + (float)(v42 * _S9))
              + (float)(v43 * fmaxf(_S11, fmaxf(_S8, _S9)));
          float v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          __asm
          {
            FCVT            S10, H10
            FCVT            S12, H12
            FCVT            S13, H13
          }
          _H14 = *(_WORD *)(v37 + 2 * llroundf(v99));
          float v104 = fmaxf(_S10, fmaxf(_S12, _S13));
          float v105 = (float)((float)((float)(v41 * _S12) + (float)(v40 * _S10)) + (float)(v42 * _S13)) + (float)(v43 * v104);
          if (v105 <= 8191.0)
          {
            float v85 = (float)((float)((float)(v41 * _S12) + (float)(v40 * _S10)) + (float)(v42 * _S13))
                + (float)(v43 * v104);
            if (v105 < 0.0) {
              float v85 = 0.0;
            }
          }
          __asm { FCVT            S4, H14 }
          float v107 = _S11 * _S4;
          float v108 = _S8 * _S4;
          float v109 = _S9 * _S4;
          _H31 = *(_WORD *)(v37 + 2 * llroundf(v85));
          __asm { FCVT            S31, H31 }
          float v112 = _S10 * _S31;
          float v113 = _S12 * _S31;
          float v114 = _S13 * _S31;
          float v115 = (float)((float)(v29 * v108) + (float)(v107 * v28)) + (float)(v109 * v30);
          float v116 = (float)((float)(v32 * v108) + (float)(v107 * v31)) + (float)(v109 * v33);
          float v117 = (float)((float)(v35 * v108) + (float)(v107 * v34)) + (float)(v109 * v39);
          float v118 = (float)((float)(v29 * v113) + (float)(v112 * v28)) + (float)(v114 * v30);
          float v119 = (float)((float)(v32 * v113) + (float)(v112 * v31)) + (float)(v114 * v33);
          float v120 = (float)((float)(v35 * v113) + (float)(v112 * v34)) + (float)(v114 * v39);
          LOWORD(v112) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          LOWORD(v113) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          LOWORD(v117) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          __int16 v121 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          __int16 v122 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          __int16 v123 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _S12 = (float)v82 * 0.000015259;
          __asm { FCVT            H12, S12 }
          _S13 = (float)v83 * 0.000015259;
          __asm { FCVT            H13, S13 }
          *(_WORD *)uint64_t v60 = LOWORD(v112);
          *((_WORD *)v60 + 1) = LOWORD(v113);
          *((_WORD *)v60 + 2) = LOWORD(v117);
          if (v61) {
            short float v128 = _H12;
          }
          else {
            LOWORD(v128) = COERCE_UNSIGNED_INT(1.0);
          }
          *((short float *)v60 + 3) = v128;
          *((_WORD *)v60 + 4) = v121;
          *((_WORD *)v60 + 5) = v122;
          *((_WORD *)v60 + 6) = v123;
          if (v61) {
            short float v129 = _H13;
          }
          else {
            LOWORD(v129) = COERCE_UNSIGNED_INT(1.0);
          }
          *((short float *)v60 + 7) = v129;
          v58 += 2;
          v59 += 2;
          v60 += 16;
        }
        while (v10 > v58);
      }
      v57 += v16;
      v56 += v17;
      v52 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_RGhA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_RGhA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double _D0)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44);
    uint64_t v13 = v8 + v12;
    uint64_t v14 = v9 + v12;
    uint64_t v15 = (float32x2_t *)*((void *)result + 19);
    uint64_t v16 = (uint64_t *)*((void *)result + 7);
    uint64_t v17 = (uint64_t *)*((void *)result + 8);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = **((void **)result + 17);
    unsigned int v22 = v15[17].u16[2];
    unsigned int v23 = v15[17].u16[3];
    v3.i32[0] = v15->i32[0];
    v4.i32[0] = v15[3].i32[1];
    LODWORD(_D0) = v15[9].i32[0];
    _S1 = v15[9].f32[1];
    _S2 = v15[10].f32[0];
    _S3 = v15[10].f32[1];
    _S4 = v15[11].f32[0];
    _S5 = v15[11].f32[1];
    _S6 = v15[12].f32[0];
    _S7 = v15[12].f32[1];
    _S16 = v15[13].f32[0];
    uint64_t v32 = (char *)&v15[20] + 4;
    v5.f32[0] = 8191.0 / (float)v15[16].u32[0];
    float v33 = (float)v22;
    float v34 = (float)v23;
    _S20 = v5.f32[0] * v15->f32[0];
    uint64_t v36 = (char *)&v15[2068] + 4;
    *(short float *)v3.i16 = (short float)v22;
    __asm { FCVT            H8, S20 }
    short float v42 = -(short float)v23;
    v4.i32[1] = v15[1].i32[0];
    *(float32x2_t *)v4.f32 = vmul_n_f32(*(float32x2_t *)v4.f32, v5.f32[0]);
    *(float32x2_t *)v5.f32 = vmul_n_f32(v15[2], v5.f32[0]);
    float16x8_t v197 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v198 = (float16x8_t)vdupq_lane_s16(v3, 0);
    float16x8_t v195 = vmulq_n_f16(v197, v42);
    float16x8_t v196 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    float16x8_t v43 = vmulq_n_f16(v196, v42);
    __asm { FCVT            H10, S0 }
    short float v193 = _H10;
    float16x8_t v194 = v43;
    __asm { FCVT            H10, S1 }
    short float v192 = _H10;
    __asm { FCVT            H10, S2 }
    short float v191 = _H10;
    __asm { FCVT            H10, S3 }
    short float v190 = _H10;
    __asm { FCVT            H10, S4 }
    short float v189 = _H10;
    __asm { FCVT            H10, S5 }
    short float v188 = _H10;
    __asm { FCVT            H10, S6 }
    short float v187 = _H10;
    __asm { FCVT            H10, S7 }
    short float v186 = _H10;
    __asm { FCVT            H10, S16 }
    short float v185 = _H10;
    unsigned int v53 = v15[15].u8[4];
    uint64_t v54 = v16[2];
    uint64_t v55 = *(void *)(result + 36);
    uint64_t v56 = *((void *)result + 14);
    unint64_t v57 = *((void *)result + 13) * a2 / v7 + *((void *)result + 15);
    uint64_t v59 = *v16;
    uint64_t v58 = *(void *)(*((void *)result + 7) + 8);
    uint64_t v60 = **((void **)result + 16);
    if (v53 >= 0x11) {
      unsigned __int8 v61 = 0;
    }
    else {
      unsigned __int8 v61 = 16 - v53;
    }
    uint64_t result = (unsigned __int8 *)(v60 + v21 * v57 + 8 * v56);
    if (v54) {
      uint64_t v62 = v54 + v20 * v13 + 2 * v55;
    }
    else {
      uint64_t v62 = 0;
    }
    if (v58) {
      uint64_t v63 = v58 + v19 * v13 + 2 * v55;
    }
    else {
      uint64_t v63 = 0;
    }
    uint16x8_t v64 = (uint16x8_t)vdupq_n_s16(-v61);
    uint64_t v65 = v59 + v18 * v13 + 2 * v55;
    uint64_t v66 = v4.i64[0];
    v67.i64[0] = 0x9000900090009000;
    v67.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v11 < 8)
      {
        unint64_t v137 = 0;
        float v72 = (uint16x8_t *)v63;
        float v71 = (int8x16_t *)v62;
        float v70 = (__int16 *)result;
        float v69 = (uint16x8_t *)v65;
      }
      else
      {
        int v68 = 0;
        float v69 = (uint16x8_t *)v65;
        float v70 = (__int16 *)result;
        float v71 = (int8x16_t *)v62;
        float v72 = (uint16x8_t *)v63;
        do
        {
          if (v71 && (int8x16_t v73 = *v71, ++v71, v74 = v73, v71))
          {
            *(int16x4_t *)v75.i8 = vzip1_s16(*(int16x4_t *)v74.i8, 0);
            v75.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v74.i8, 0);
            int16x4_t v76 = (int16x4_t)vextq_s8(v74, v74, 8uLL).u64[0];
            *(int16x4_t *)v77.i8 = vzip1_s16(v76, 0);
            v77.u64[1] = (unint64_t)vzip2_s16(v76, 0);
            float32x4_t v78 = vcvtq_f32_u32(v77);
            float32x4_t v79 = (float32x4_t)vdupq_n_s32(0x37800080u);
            float16x8_t v80 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(v75), v79)), vmulq_f32(v78, v79));
          }
          else
          {
            v80.i64[0] = 0x3C003C003C003C00;
            v80.i64[1] = 0x3C003C003C003C00;
          }
          uint16x8_t v81 = *v72++;
          float16x8_t v82 = vcvtq_f16_u16(vshlq_u16(v81, v64));
          int8x16_t v83 = (int8x16_t)vmlaq_f16(v195, v197, v82);
          float16x8_t v84 = vmlaq_f16(v194, v196, v82);
          v82.i64[0] = vextq_s8(v83, v83, 8uLL).u64[0];
          *(int16x4_t *)v85.i8 = vuzp2_s16(*(int16x4_t *)v83.i8, *(int16x4_t *)v82.i8);
          *(double *)&v85.i64[1] = _D0;
          *(int16x4_t *)v82.i8 = vuzp1_s16(*(int16x4_t *)v83.i8, *(int16x4_t *)v82.i8);
          float16x8_t v86 = (float16x8_t)vzip1q_s16(v85, v85);
          *(double *)&v82.i64[1] = _D0;
          float16x8_t v87 = (float16x8_t)vzip1q_s16((int16x8_t)v82, (int16x8_t)v82);
          v82.i64[0] = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u64[0];
          *(float16x4_t *)v82.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v82.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v82.i8));
          *(double *)&v82.i64[1] = _D0;
          uint16x8_t v88 = *v69++;
          float16x8_t v89 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v88, v64)), v198);
          float16x8_t v90 = vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v82, (int16x8_t)v82), v89, _H8);
          float16x8_t v91 = vmlaq_n_f16(v87, v89, _H8);
          uint16x8_t v92 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v86, v89, _H8), (float16x8_t)0), v67));
          uint32x4_t v93 = vmovl_high_u16(v92);
          float16x8_t v94 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v92.i8);
          v94.i16[0] = *(_WORD *)&v32[2 * v94.u32[0]];
          v94.i16[1] = *(_WORD *)&v32[2 * v94.u32[1]];
          v94.i16[2] = *(_WORD *)&v32[2 * v94.u32[2]];
          v94.i16[3] = *(_WORD *)&v32[2 * v94.u32[3]];
          v94.i16[4] = *(_WORD *)&v32[2 * v93.u32[0]];
          v94.i16[5] = *(_WORD *)&v32[2 * v93.u32[1]];
          v94.i16[6] = *(_WORD *)&v32[2 * v93.u32[2]];
          v94.i16[7] = *(_WORD *)&v32[2 * v93.u32[3]];
          uint16x8_t v95 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v90, (float16x8_t)0), v67));
          uint32x4_t v96 = vmovl_high_u16(v95);
          uint32x4_t v97 = vmovl_u16(*(uint16x4_t *)v95.i8);
          v84.i16[0] = *(_WORD *)&v32[2 * v97.u32[0]];
          v84.i16[1] = *(_WORD *)&v32[2 * v97.u32[1]];
          v84.i16[2] = *(_WORD *)&v32[2 * v97.u32[2]];
          v84.i16[3] = *(_WORD *)&v32[2 * v97.u32[3]];
          v84.i16[4] = *(_WORD *)&v32[2 * v96.u32[0]];
          v84.i16[5] = *(_WORD *)&v32[2 * v96.u32[1]];
          v84.i16[6] = *(_WORD *)&v32[2 * v96.u32[2]];
          v84.i16[7] = *(_WORD *)&v32[2 * v96.u32[3]];
          uint16x8_t v98 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v91, (float16x8_t)0), v67));
          uint32x4_t v99 = vmovl_high_u16(v98);
          float16x8_t v100 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v98.i8);
          v100.i16[0] = *(_WORD *)&v32[2 * v100.u32[0]];
          v100.i16[1] = *(_WORD *)&v32[2 * v100.u32[1]];
          v100.i16[2] = *(_WORD *)&v32[2 * v100.u32[2]];
          v100.i16[3] = *(_WORD *)&v32[2 * v100.u32[3]];
          v100.i16[4] = *(_WORD *)&v32[2 * v99.u32[0]];
          v100.i16[5] = *(_WORD *)&v32[2 * v99.u32[1]];
          v100.i16[6] = *(_WORD *)&v32[2 * v99.u32[2]];
          v100.i16[7] = *(_WORD *)&v32[2 * v99.u32[3]];
          float16x8_t v101 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v94, v190), v84, v189), v100, v188);
          float16x8_t v102 = vmlaq_n_f16(vmulq_n_f16(v100, v185), v84, v186);
          uint16x8_t v103 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v94, v193), v84, v192), v100, v191), (float16x8_t)0), v67));
          uint32x4_t v104 = vmovl_high_u16(v103);
          uint32x4_t v105 = vmovl_u16(*(uint16x4_t *)v103.i8);
          __int16 v106 = *(_WORD *)&v36[2 * v105.u32[0]];
          __int16 v107 = *(_WORD *)&v36[2 * v105.u32[1]];
          __int16 v108 = *(_WORD *)&v36[2 * v105.u32[2]];
          __int16 v109 = *(_WORD *)&v36[2 * v105.u32[3]];
          __int16 v110 = *(_WORD *)&v36[2 * v104.u32[0]];
          __int16 v111 = *(_WORD *)&v36[2 * v104.u32[1]];
          __int16 v112 = *(_WORD *)&v36[2 * v104.u32[2]];
          __int16 v113 = *(_WORD *)&v36[2 * v104.u32[3]];
          float16x8_t v114 = vmlaq_n_f16(v102, v94, v187);
          uint16x8_t v115 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v101, (float16x8_t)0), v67));
          uint32x4_t v116 = vmovl_high_u16(v115);
          uint32x4_t v117 = vmovl_u16(*(uint16x4_t *)v115.i8);
          __int16 v118 = *(_WORD *)&v36[2 * v117.u32[0]];
          __int16 v119 = *(_WORD *)&v36[2 * v117.u32[1]];
          __int16 v120 = *(_WORD *)&v36[2 * v117.u32[2]];
          __int16 v121 = *(_WORD *)&v36[2 * v117.u32[3]];
          __int16 v122 = *(_WORD *)&v36[2 * v116.u32[0]];
          __int16 v123 = *(_WORD *)&v36[2 * v116.u32[1]];
          __int16 v124 = *(_WORD *)&v36[2 * v116.u32[2]];
          __int16 v125 = *(_WORD *)&v36[2 * v116.u32[3]];
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v67));
          uint32x4_t v127 = vmovl_high_u16(v126);
          uint32x4_t v128 = vmovl_u16(*(uint16x4_t *)v126.i8);
          __int16 v129 = *(_WORD *)&v36[2 * v128.u32[0]];
          __int16 v130 = *(_WORD *)&v36[2 * v128.u32[1]];
          __int16 v131 = *(_WORD *)&v36[2 * v128.u32[2]];
          __int16 v132 = *(_WORD *)&v36[2 * v128.u32[3]];
          __int16 v133 = *(_WORD *)&v36[2 * v127.u32[0]];
          __int16 v134 = *(_WORD *)&v36[2 * v127.u32[1]];
          __int16 v135 = *(_WORD *)&v36[2 * v127.u32[2]];
          __int16 v136 = *(_WORD *)&v36[2 * v127.u32[3]];
          vst4q_s16(v70, *(int16x8x4_t *)(&v80 - 3));
          v70 += 32;
          v68 += 8;
        }
        while (v68 < (int)v11 - 7);
        unint64_t v137 = v11 & 0xFFFFFFF8;
      }
      while (v11 > v137)
      {
        float v138 = (float)(v72->u16[1] >> v61) - v34;
        float v139 = *((float *)&v66 + 1) * v138;
        float v140 = _S20 * (float)((float)(v69->u16[0] >> v61) - v33);
        float v141 = (float)(*((float *)&v66 + 1) * v138) + v140;
        float v142 = 8191.0;
        if (v141 <= 8191.0)
        {
          float v142 = (float)(*((float *)&v66 + 1) * v138) + v140;
          if (v141 < 0.0) {
            float v142 = 0.0;
          }
        }
        float v143 = (float)(v72->u16[0] >> v61) - v34;
        float v144 = (float)(v5.f32[1] * v138) + (float)(v143 * v5.f32[0]);
        float v145 = 8191.0;
        if ((float)(v140 + v144) <= 8191.0)
        {
          float v145 = v140 + v144;
          if ((float)(v140 + v144) < 0.0) {
            float v145 = 0.0;
          }
        }
        float v146 = *(float *)&v66 * v143;
        float v147 = v146 + v140;
        BOOL v148 = (float)(v146 + v140) <= 8191.0;
        float v149 = 8191.0;
        if (v148)
        {
          float v149 = v147;
          if (v147 < 0.0) {
            float v149 = 0.0;
          }
        }
        float v150 = _S20 * (float)((float)(v69->u16[1] >> v61) - v33);
        float v151 = v139 + v150;
        float v152 = 8191.0;
        if (v151 <= 8191.0)
        {
          float v152 = v151;
          if (v151 < 0.0) {
            float v152 = 0.0;
          }
        }
        float v153 = v144 + v150;
        BOOL v148 = (float)(v144 + v150) <= 8191.0;
        float v154 = 8191.0;
        if (v148)
        {
          float v154 = v153;
          if (v153 < 0.0) {
            float v154 = 0.0;
          }
        }
        float v155 = v146 + v150;
        BOOL v148 = (float)(v146 + v150) <= 8191.0;
        float v156 = 8191.0;
        if (v148)
        {
          float v156 = v155;
          if (v155 < 0.0) {
            float v156 = 0.0;
          }
        }
        if (v71)
        {
          unsigned int v157 = v71->u16[0];
          unsigned int v158 = v71->u16[1];
          float v71 = (int8x16_t *)((char *)v71 + 4);
        }
        else
        {
          unsigned int v157 = 0;
          unsigned int v158 = 0;
        }
        _H26 = *(_WORD *)&v32[2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0))];
        __asm { FCVT            S26, H26 }
        _H25 = *(_WORD *)&v32[2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0))];
        __asm { FCVT            S25, H25 }
        _H27 = *(_WORD *)&v32[2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0))];
        _H17 = *(_WORD *)&v32[2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0))];
        __asm
        {
          FCVT            S27, H27
          FCVT            S17, H17
        }
        _H10 = *(_WORD *)&v32[2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0))];
        __asm { FCVT            S10, H10 }
        _H11 = *(_WORD *)&v32[2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0))];
        __asm { FCVT            S11, H11 }
        float v171 = (float)((float)(_S1 * _S25) + (float)(_S26 * *(float *)&_D0)) + (float)(_S27 * _S2);
        float v172 = (float)((float)(_S4 * _S25) + (float)(_S26 * _S3)) + (float)(_S27 * _S5);
        float v173 = (float)((float)(_S7 * _S25) + (float)(_S26 * _S6)) + (float)(_S27 * _S16);
        float v174 = (float)((float)(_S1 * _S10) + (float)(_S17 * *(float *)&_D0)) + (float)(_S11 * _S2);
        float v175 = (float)((float)(_S4 * _S10) + (float)(_S17 * _S3)) + (float)(_S11 * _S5);
        float v176 = (float)((float)(_S7 * _S10) + (float)(_S17 * _S6)) + (float)(_S11 * _S16);
        LOWORD(_S10) = *(_WORD *)&v36[2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0))];
        LOWORD(_S11) = *(_WORD *)&v36[2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0))];
        LOWORD(v173) = *(_WORD *)&v36[2 * llroundf(fminf(fmaxf(v173, 0.0), 8191.0))];
        __int16 v177 = *(_WORD *)&v36[2 * llroundf(fminf(fmaxf(v174, 0.0), 8191.0))];
        __int16 v178 = *(_WORD *)&v36[2 * llroundf(fminf(fmaxf(v175, 0.0), 8191.0))];
        __int16 v179 = *(_WORD *)&v36[2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0))];
        _S24 = (float)v157 * 0.000015259;
        __asm { FCVT            H24, S24 }
        _S12 = (float)v158 * 0.000015259;
        __asm { FCVT            H12, S12 }
        *float v70 = LOWORD(_S10);
        v70[1] = LOWORD(_S11);
        v70[2] = LOWORD(v173);
        if (!v71) {
          _H24 = COERCE_UNSIGNED_INT(1.0);
        }
        v70[3] = _H24;
        v70[4] = v177;
        v70[5] = v178;
        v70[6] = v179;
        v137 += 2;
        if (v71) {
          short float v184 = _H12;
        }
        else {
          LOWORD(v184) = COERCE_UNSIGNED_INT(1.0);
        }
        *((short float *)v70 + 7) = v184;
        float v72 = (uint16x8_t *)((char *)v72 + 4);
        float v69 = (uint16x8_t *)((char *)v69 + 4);
        v70 += 8;
      }
      v65 += v18;
      v63 += v19;
      v62 += v20;
      result += v21;
      ++v10;
    }
    while (v10 != v14 - v13);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    float v37 = *(float *)(v13 + 104);
    uint64_t v38 = v13 + 164;
    uint64_t v39 = v13 + 16548;
    uint64_t v40 = *((void *)result + 14);
    unint64_t v41 = *((void *)result + 13) * a2 / v6;
    short float v42 = (void *)*((void *)result + 16);
    unint64_t v43 = v41 + *((void *)result + 15);
    uint64_t v44 = *(void *)(result + 36);
    unsigned int v45 = *(unsigned __int8 *)(v13 + 124);
    char v46 = 16 - v45;
    if (v45 >= 0x11) {
      char v46 = 0;
    }
    uint64_t v47 = *v42 + v43 * v19 + 8 * v40;
    uint64_t v48 = v14[2];
    if (v48) {
      uint64_t result = (unsigned __int8 *)(v48 + v18 * v11 + 2 * v44);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v51 = v14;
    uint64_t v50 = *v14;
    uint64_t v49 = v51[1];
    if (v49) {
      uint64_t v52 = v49 + v17 * v11 + 2 * v44;
    }
    else {
      uint64_t v52 = 0;
    }
    uint64_t v53 = v50 + v16 * v11 + 2 * v44;
    do
    {
      if (v10)
      {
        unint64_t v54 = 0;
        uint64_t v55 = (unsigned __int16 *)v53;
        uint64_t v56 = v47;
        unint64_t v57 = (unsigned __int16 *)result;
        do
        {
          uint64_t v58 = (unsigned __int16 *)(v52 + 2 * v54);
          float v59 = (float)(v58[1] >> v46) - v23;
          float v60 = v25 * v59;
          float v61 = v24 * (float)((float)(*v55 >> v46) - v22);
          float v62 = (float)(v25 * v59) + v61;
          float v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            float v63 = (float)(v25 * v59) + v61;
            if (v62 < 0.0) {
              float v63 = 0.0;
            }
          }
          float v64 = (float)(*v58 >> v46) - v23;
          float v65 = (float)(v27 * v59) + (float)(v64 * v26);
          float v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            float v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v28 * v64;
          float v68 = v67 + v61;
          BOOL v69 = (float)(v67 + v61) <= 8191.0;
          float v70 = 8191.0;
          if (v69)
          {
            float v70 = v68;
            if (v68 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v24 * (float)((float)(v55[1] >> v46) - v22);
          float v72 = v60 + v71;
          BOOL v69 = (float)(v60 + v71) <= 8191.0;
          float v73 = 8191.0;
          if (v69)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v65 + v71;
          BOOL v69 = (float)(v65 + v71) <= 8191.0;
          float v75 = 8191.0;
          if (v69)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v67 + v71;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          if (v57)
          {
            unsigned int v78 = *v57;
            unsigned int v79 = v57[1];
            v57 += 2;
          }
          else
          {
            unsigned int v78 = 0;
            unsigned int v79 = 0;
          }
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S28, H28
          }
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          float v96 = (float)((float)(v30 * _S28) + (float)(_S27 * v29)) + (float)(_S29 * v31);
          float v97 = (float)((float)(v33 * _S28) + (float)(_S27 * v32)) + (float)(_S29 * v34);
          float v98 = (float)((float)(v36 * _S28) + (float)(_S27 * v35)) + (float)(_S29 * v37);
          float v99 = (float)((float)(v30 * _S31) + (float)(_S30 * v29)) + (float)(_S8 * v31);
          float v100 = (float)((float)(v33 * _S31) + (float)(_S30 * v32)) + (float)(_S8 * v34);
          float v101 = (float)((float)(v36 * _S31) + (float)(_S30 * v35)) + (float)(_S8 * v37);
          LOWORD(_S31) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          LOWORD(_S8) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          LOWORD(v98) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __int16 v102 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __int16 v103 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          __int16 v104 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          _S9 = (float)v78 * 0.000015259;
          __asm { FCVT            H9, S9 }
          _S10 = (float)v79 * 0.000015259;
          __asm { FCVT            H10, S10 }
          *(_WORD *)uint64_t v56 = LOWORD(_S31);
          *(_WORD *)(v56 + 2) = LOWORD(_S8);
          *(_WORD *)(v56 + 4) = LOWORD(v98);
          if (v57) {
            short float v109 = _H9;
          }
          else {
            LOWORD(v109) = COERCE_UNSIGNED_INT(1.0);
          }
          *(short float *)(v56 + 6) = v109;
          *(_WORD *)(v56 + 8) = v102;
          *(_WORD *)(v56 + 10) = v103;
          *(_WORD *)(v56 + 12) = v104;
          if (v57) {
            short float v110 = _H10;
          }
          else {
            LOWORD(v110) = COERCE_UNSIGNED_INT(1.0);
          }
          *(short float *)(v56 + 14) = v110;
          v54 += 2;
          v55 += 2;
          v56 += 16;
        }
        while (v10 > v54);
      }
      v53 += v16;
      v52 += v17;
      result += v18;
      v47 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_RGhA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_RGhA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_RGhA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, double a6, int16x4_t a7, float32x4_t a8, double a9, float32x4_t a10)
{
  uint64_t v10 = *(void *)(result + 28);
  unint64_t v11 = *result;
  unint64_t v12 = v10 * a2 / v11;
  unint64_t v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    uint64_t v14 = 0;
    unint64_t v15 = *(void *)(result + 20);
    uint64_t v16 = *(void *)(result + 44);
    uint64_t v17 = v12 + v16;
    uint64_t v18 = v13 + v16;
    uint64_t v19 = (float32x2_t *)*((void *)result + 19);
    uint64_t v21 = (uint64_t *)*((void *)result + 7);
    uint64_t v20 = (uint64_t *)*((void *)result + 8);
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = **((void **)result + 17);
    unsigned int v26 = v19[17].u16[2];
    unsigned int v27 = v19[17].u16[3];
    a8.i32[0] = v19[3].i32[1];
    uint64_t v28 = v18 - v17;
    a7.i32[0] = 1.0;
    *(float *)&a3 = (float)v26;
    float v29 = (float)v27;
    a10.f32[0] = 1.0 / (float)v19[16].u32[0];
    _S2 = a10.f32[0] * v19->f32[0];
    __asm { FCVT            H3, S2 }
    *(short float *)a7.i16 = (short float)v26;
    float16x8_t v36 = (float16x8_t)vdupq_lane_s16(a7, 0);
    short float v37 = -(short float)v27;
    a8.i32[1] = v19[1].i32[0];
    *(float32x2_t *)a8.f32 = vmul_n_f32(*(float32x2_t *)a8.f32, a10.f32[0]);
    float16x8_t v38 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a8), 0);
    *(float32x2_t *)a10.f32 = vmul_n_f32(v19[2], a10.f32[0]);
    float16x8_t v39 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a10), 0);
    float16x8_t v40 = vmulq_n_f16(v38, v37);
    float16x8_t v41 = vmulq_n_f16(v39, v37);
    LODWORD(v19) = v19[15].u8[4];
    unsigned __int8 v42 = 16 - (_BYTE)v19;
    uint64_t v43 = v21[2];
    uint64_t v44 = *(void *)(result + 36);
    uint64_t v45 = *((void *)result + 14);
    unint64_t v46 = *((void *)result + 13) * a2 / v11 + *((void *)result + 15);
    uint64_t v48 = *v21;
    uint64_t v47 = v21[1];
    uint64_t v49 = v47 + v23 * v17 + 2 * v44;
    uint64_t v50 = **((void **)result + 16);
    if (v19 >= 0x11) {
      unsigned __int8 v42 = 0;
    }
    uint64_t v51 = v50 + v25 * v46 + 8 * v45;
    if (v43) {
      uint64_t v52 = v43 + v24 * v17 + 2 * v44;
    }
    else {
      uint64_t v52 = 0;
    }
    if (!v47) {
      uint64_t v49 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v48 + v22 * v17 + 2 * v44);
    uint16x8_t v53 = (uint16x8_t)vdupq_n_s16(-v42);
    do
    {
      if ((int)v15 < 8)
      {
        unint64_t v78 = 0;
        uint64_t v58 = (uint16x8_t *)v49;
        unint64_t v57 = (int8x16_t *)v52;
        uint64_t v56 = v51;
        uint64_t v55 = (uint16x8_t *)result;
      }
      else
      {
        int v54 = 0;
        uint64_t v55 = (uint16x8_t *)result;
        uint64_t v56 = v51;
        unint64_t v57 = (int8x16_t *)v52;
        uint64_t v58 = (uint16x8_t *)v49;
        do
        {
          if (v57)
          {
            int8x16_t v59 = *v57++;
            *(int16x4_t *)v60.i8 = vzip1_s16(*(int16x4_t *)v59.i8, 0);
            v60.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v59.i8, 0);
            int16x4_t v61 = (int16x4_t)vextq_s8(v59, v59, 8uLL).u64[0];
            *(int16x4_t *)v62.i8 = vzip1_s16(v61, 0);
            v62.u64[1] = (unint64_t)vzip2_s16(v61, 0);
            float32x4_t v63 = vcvtq_f32_u32(v62);
            float32x4_t v64 = (float32x4_t)vdupq_n_s32(0x37800080u);
            float16x8_t v65 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(v60), v64)), vmulq_f32(v63, v64));
          }
          else
          {
            v65.i64[0] = 0x3C003C003C003C00;
            v65.i64[1] = 0x3C003C003C003C00;
          }
          uint16x8_t v66 = *v58++;
          float16x8_t v67 = vcvtq_f16_u16(vshlq_u16(v66, v53));
          int8x16_t v68 = (int8x16_t)vmlaq_f16(v40, v38, v67);
          int8x16_t v69 = (int8x16_t)vmlaq_f16(v41, v39, v67);
          v67.i64[0] = vextq_s8(v68, v68, 8uLL).u64[0];
          *(int16x4_t *)v70.i8 = vuzp1_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v67.i8);
          *(int16x4_t *)v67.i8 = vuzp2_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v67.i8);
          *(double *)&v67.i64[1] = a3;
          *(double *)&v70.i64[1] = a3;
          float16x8_t v71 = (float16x8_t)vzip1q_s16((int16x8_t)v67, (int16x8_t)v67);
          v67.i64[0] = vextq_s8(v69, v69, 8uLL).u64[0];
          *(float16x4_t *)v67.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v69.i8, *(int16x4_t *)v67.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v69.i8, *(int16x4_t *)v67.i8));
          *(double *)&v67.i64[1] = a3;
          float16x8_t v72 = (float16x8_t)vzip1q_s16((int16x8_t)v67, (int16x8_t)v67);
          uint16x8_t v73 = *v55++;
          float16x8_t v74 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v73, v53)), v36);
          float16x8_t v75 = vmlaq_n_f16(v71, v74, _H3);
          float16x8_t v76 = vmlaq_n_f16(v72, v74, _H3);
          float16x8_t v77 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v70, v70), v74, _H3);
          vst4q_s16((__int16 *)v56, *(int16x8x4_t *)(&v65 - 3));
          v56 += 64;
          v54 += 8;
        }
        while (v54 < (int)v15 - 7);
        unint64_t v78 = v15 & 0xFFFFFFF8;
      }
      while (v15 > v78)
      {
        if (v57)
        {
          unsigned int v79 = v57->u16[0];
          unsigned int v80 = v57->u16[1];
          unint64_t v57 = (int8x16_t *)((char *)v57 + 4);
        }
        else
        {
          unsigned int v79 = 0;
          unsigned int v80 = 0;
        }
        float v81 = (float)(v58->u16[0] >> v42) - v29;
        float v82 = (float)(v58->u16[1] >> v42) - v29;
        float v83 = a8.f32[1] * v82;
        float v84 = (float)(a10.f32[1] * v82) + (float)(v81 * a10.f32[0]);
        float v85 = a8.f32[0] * v81;
        float v86 = _S2 * (float)((float)(v55->u16[0] >> v42) - *(float *)&a3);
        float v87 = _S2 * (float)((float)(v55->u16[1] >> v42) - *(float *)&a3);
        _S29 = v83 + v86;
        _S30 = v86 + v84;
        _S27 = v85 + v86;
        _S26 = v83 + v87;
        _S25 = v84 + v87;
        _S24 = v85 + v87;
        _S31 = (float)v79 * 0.000015259;
        __asm { FCVT            H31, S31 }
        _S28 = (float)v80 * 0.000015259;
        __asm
        {
          FCVT            H28, S28
          FCVT            H29, S29
        }
        *(_WORD *)uint64_t v56 = LOWORD(_S29);
        __asm { FCVT            H29, S30 }
        *(_WORD *)(v56 + 2) = LOWORD(_S29);
        __asm { FCVT            H27, S27 }
        *(_WORD *)(v56 + 4) = LOWORD(_S27);
        if (v57) {
          short float v98 = _H31;
        }
        else {
          LOWORD(v98) = COERCE_UNSIGNED_INT(1.0);
        }
        *(short float *)(v56 + 6) = v98;
        __asm { FCVT            H26, S26 }
        *(_WORD *)(v56 + 8) = _H26;
        __asm { FCVT            H25, S25 }
        *(_WORD *)(v56 + 10) = _H25;
        __asm { FCVT            H24, S24 }
        *(_WORD *)(v56 + 12) = _H24;
        v78 += 2;
        if (_ZF) {
          LOWORD(v102) = COERCE_UNSIGNED_INT(1.0);
        }
        else {
          short float v102 = _H28;
        }
        *(short float *)(v56 + 14) = v102;
        uint64_t v58 = (uint16x8_t *)((char *)v58 + 4);
        uint64_t v55 = (uint16x8_t *)((char *)v55 + 4);
        v56 += 16;
      }
      result += v22;
      v49 += v23;
      v52 += v24;
      v51 += v25;
      ++v14;
    }
    while (v14 != v28);
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    unint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    uint64_t v12 = (uint64_t *)*((void *)result + 7);
    uint64_t v11 = (uint64_t *)*((void *)result + 8);
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    uint64_t v15 = v11[2];
    uint64_t v16 = **((void **)result + 17);
    *(float *)&unsigned int v17 = (float)*(unsigned int *)(v10 + 128);
    unsigned int v18 = 1.0;
    float v19 = 1.0 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    float v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    float v21 = (float)v18;
    float v22 = v19 * *(float *)v10;
    float v23 = v19 * *(float *)(v10 + 8);
    float v24 = v19 * *(float *)(v10 + 16);
    float v25 = v19 * *(float *)(v10 + 20);
    float v26 = v19 * *(float *)(v10 + 28);
    uint64_t v27 = *((void *)result + 14);
    unint64_t v28 = *((void *)result + 13) * a2 / v3;
    uint64_t v29 = (void *)*((void *)result + 16);
    unint64_t v30 = v28 + *((void *)result + 15);
    uint64_t v31 = *(void *)(result + 36);
    LODWORD(v10) = *(unsigned __int8 *)(v10 + 124);
    char v32 = 16 - v10;
    if (v10 >= 0x11) {
      char v32 = 0;
    }
    uint64_t v33 = *v29 + v30 * v16 + 8 * v27;
    uint64_t v34 = v12[2];
    if (v34) {
      uint64_t v35 = v34 + v15 * v8 + 2 * v31;
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v37 = *v12;
    uint64_t v36 = v12[1];
    uint64_t v38 = v36 + v14 * v8 + 2 * v31;
    if (!v36) {
      uint64_t v38 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v37 + v13 * v8 + 2 * v31);
    char v39 = v32;
    do
    {
      if (v7)
      {
        unint64_t v40 = 0;
        float16x8_t v41 = (unsigned __int16 *)result;
        uint64_t v42 = v33;
        uint64_t v43 = (unsigned __int16 *)v35;
        do
        {
          if (v43)
          {
            unsigned int v44 = *v43;
            unsigned int v45 = v43[1];
            v43 += 2;
          }
          else
          {
            unsigned int v44 = 0;
            unsigned int v45 = 0;
          }
          unint64_t v46 = (unsigned __int16 *)(v38 + 2 * v40);
          float v47 = (float)(*v46 >> v39) - v21;
          float v48 = (float)(v46[1] >> v39) - v21;
          float v49 = v23 * v48;
          float v50 = (float)(v25 * v48) + (float)(v47 * v24);
          float v51 = v26 * v47;
          float v52 = v22 * (float)((float)(*v41 >> v39) - v20);
          float v53 = v22 * (float)((float)(v41[1] >> v39) - v20);
          _S22 = v49 + v52;
          _S23 = v52 + v50;
          _S20 = v51 + v52;
          _S19 = v49 + v53;
          _S18 = v50 + v53;
          _S17 = v51 + v53;
          _S21 = (float)v44 * 0.000015259;
          __asm { FCVT            H21, S21 }
          _S24 = (float)v45 * 0.000015259;
          __asm
          {
            FCVT            H24, S24
            FCVT            H22, S22
          }
          *(_WORD *)uint64_t v42 = LOWORD(_S22);
          __asm { FCVT            H22, S23 }
          *(_WORD *)(v42 + 2) = LOWORD(_S22);
          __asm { FCVT            H20, S20 }
          *(_WORD *)(v42 + 4) = LOWORD(_S20);
          if (v43) {
            short float v68 = _H21;
          }
          else {
            LOWORD(v68) = COERCE_UNSIGNED_INT(1.0);
          }
          *(short float *)(v42 + 6) = v68;
          __asm { FCVT            H19, S19 }
          *(_WORD *)(v42 + 8) = _H19;
          __asm { FCVT            H18, S18 }
          *(_WORD *)(v42 + 10) = _H18;
          __asm { FCVT            H17, S17 }
          *(_WORD *)(v42 + 12) = _H17;
          if (_ZF) {
            LOWORD(v72) = COERCE_UNSIGNED_INT(1.0);
          }
          else {
            short float v72 = _H24;
          }
          *(short float *)(v42 + 14) = v72;
          v40 += 2;
          v41 += 2;
          v42 += 16;
        }
        while (v7 > v40);
      }
      result += v13;
      v38 += v14;
      v35 += v15;
      v33 += v16;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_RGfA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

char *vt_Copy_xf422_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD(char *result, uint64_t a2, int16x4_t a3)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44);
    uint64_t v12 = v7 + v11;
    uint64_t v13 = v8 + v11;
    uint64_t v14 = (float32x2_t *)*((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    unsigned int v21 = v14[17].u16[2];
    unsigned int v22 = v14[17].u16[3];
    a3.i32[0] = v14->i32[0];
    v23.i32[0] = v14[3].i32[1];
    _S26 = v14[10].f32[1];
    _S27 = v14[11].f32[0];
    _S5 = v14[11].f32[1];
    _S6 = v14[12].f32[0];
    _S7 = v14[12].f32[1];
    _S16 = v14[13].f32[0];
    _S17 = v14[13].f32[1];
    _S18 = v14[14].f32[0];
    _S19 = v14[14].f32[1];
    _S20 = v14[15].f32[0];
    uint64_t v226 = v13 - v12;
    uint64_t v34 = (char *)&v14[2068] + 4;
    float v35 = (float)v21;
    float v36 = (float)v22;
    float v37 = 8191.0 / (float)v14[16].u32[0];
    _S24 = v37 * v14->f32[0];
    uint64_t v39 = (char *)&v14[20] + 4;
    uint64_t v40 = (char *)&v14[4116] + 4;
    __asm { FCVT            H8, S24 }
    *(short float *)a3.i16 = (short float)v21;
    float16x8_t v253 = (float16x8_t)vdupq_lane_s16(a3, 0);
    v23.i32[1] = v14[1].i32[0];
    *(float32x2_t *)v3.f32 = vmul_n_f32(v23, v37);
    short float v46 = -(short float)v22;
    *(float32x2_t *)v4.f32 = vmul_n_f32(v14[2], v37);
    float16x8_t v251 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    float16x8_t v249 = vmulq_n_f16(v251, v46);
    float16x8_t v250 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v248 = vmulq_n_f16(v250, v46);
    __asm { FCVT            H0, S17 }
    short float v247 = _H0;
    __asm { FCVT            H0, S18 }
    short float v246 = _H0;
    __asm { FCVT            H0, S19 }
    short float v245 = _H0;
    __asm { FCVT            H0, S20 }
    short float v244 = _H0;
    float v258 = v14[9].f32[0];
    __asm { FCVT            H0, S2 }
    short float v243 = _H0;
    float v257 = v14[9].f32[1];
    __asm { FCVT            H0, S3 }
    short float v242 = _H0;
    float v256 = v14[10].f32[0];
    __asm { FCVT            H0, S4 }
    short float v241 = _H0;
    LODWORD(v14) = v14[15].u8[4];
    unsigned __int8 v54 = 16 - (_BYTE)v14;
    uint64_t v55 = v15[2];
    uint64_t v228 = v19;
    uint64_t v229 = v18;
    uint64_t v56 = *(void *)(result + 36);
    uint64_t v57 = *((void *)result + 14);
    unint64_t v58 = *((void *)result + 13) * a2 / v6 + *((void *)result + 15);
    uint64_t v60 = *v15;
    uint64_t v59 = *(void *)(*((void *)result + 7) + 8);
    uint64_t v61 = **((void **)result + 16);
    if (v14 >= 0x11) {
      unsigned __int8 v54 = 0;
    }
    uint64_t v227 = v20;
    uint64_t result = (char *)(v61 + v20 * v58);
    uint32x4_t v62 = (float *)&result[16 * v57];
    if (v55) {
      float32x4_t v63 = (float32x4_t *)(v55 + v19 * v12 + 2 * v56);
    }
    else {
      float32x4_t v63 = 0;
    }
    if (v59) {
      uint64_t v64 = v59 + v18 * v12 + 2 * v56;
    }
    else {
      uint64_t v64 = 0;
    }
    uint64_t v230 = v17;
    uint64_t v65 = v60 + v17 * v12 + 2 * v56;
    unsigned __int8 v66 = v54;
    float v255 = _S26;
    __asm { FCVT            H0, S26 }
    short float v240 = _H0;
    float v254 = _S27;
    __asm { FCVT            H0, S27 }
    short float v239 = _H0;
    __asm { FCVT            H0, S5 }
    short float v238 = _H0;
    __asm { FCVT            H0, S6 }
    short float v237 = _H0;
    __asm { FCVT            H0, S7 }
    short float v236 = _H0;
    __asm { FCVT            H0, S16 }
    short float v235 = _H0;
    uint16x8_t v73 = (uint16x8_t)vdupq_n_s16(-v54);
    float v252 = v3.f32[0];
    uint64_t v74 = v4.i64[0];
    float v234 = v3.f32[1];
    v75.i64[0] = 0x9000900090009000;
    v75.i64[1] = 0x9000900090009000;
    while (1)
    {
      short float v232 = v62;
      uint64_t v233 = v9;
      short float v231 = v63;
      if ((int)v10 >= 8) {
        break;
      }
      unint64_t v159 = 0;
      unint64_t v78 = (uint16x8_t *)v64;
      float v154 = v62;
      float16x8_t v77 = (uint16x8_t *)v65;
LABEL_54:
      while (v10 > v159)
      {
        float v160 = (float)(v78->u16[1] >> v66) - v36;
        float v161 = v234 * v160;
        float v162 = _S24 * (float)((float)(v77->u16[0] >> v66) - v35);
        float v163 = (float)(v234 * v160) + v162;
        float v164 = 8191.0;
        if (v163 <= 8191.0)
        {
          float v164 = (float)(v234 * v160) + v162;
          if (v163 < 0.0) {
            float v164 = 0.0;
          }
        }
        float v165 = (float)(v78->u16[0] >> v66) - v36;
        float v166 = (float)(*((float *)&v74 + 1) * v160) + (float)(v165 * *(float *)&v74);
        float v167 = 8191.0;
        if ((float)(v162 + v166) <= 8191.0)
        {
          float v167 = v162 + v166;
          if ((float)(v162 + v166) < 0.0) {
            float v167 = 0.0;
          }
        }
        float v168 = v252 * v165;
        float v169 = (float)(v252 * v165) + v162;
        float v170 = 8191.0;
        if (v169 <= 8191.0)
        {
          float v170 = v169;
          if (v169 < 0.0) {
            float v170 = 0.0;
          }
        }
        float v171 = _S24 * (float)((float)(v77->u16[1] >> v66) - v35);
        float v172 = v161 + v171;
        float v173 = 8191.0;
        if (v172 <= 8191.0)
        {
          float v173 = v172;
          if (v172 < 0.0) {
            float v173 = 0.0;
          }
        }
        float v174 = v166 + v171;
        float v175 = 8191.0;
        if (v174 <= 8191.0)
        {
          float v175 = v174;
          if (v174 < 0.0) {
            float v175 = 0.0;
          }
        }
        float v176 = v168 + v171;
        BOOL v177 = (float)(v168 + v171) <= 8191.0;
        float v178 = 8191.0;
        if (v177)
        {
          float v178 = v176;
          if (v176 < 0.0) {
            float v178 = 0.0;
          }
        }
        if (v63)
        {
          unsigned int v179 = v63->u16[0];
          unsigned int v180 = v63->u16[1];
          float32x4_t v63 = (float32x4_t *)((char *)v63 + 4);
        }
        else
        {
          unsigned int v179 = 0;
          unsigned int v180 = 0;
        }
        _H2 = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0))];
        __asm { FCVT            S30, H2 }
        _H1 = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0))];
        unsigned int v184 = llroundf(fminf(fmaxf(v170, 0.0), 8191.0));
        __asm { FCVT            S26, H1 }
        _H1 = *(_WORD *)&v39[2 * v184];
        __asm { FCVT            S1, H1 }
        _H27 = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v173, 0.0), 8191.0))];
        _H31 = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v175, 0.0), 8191.0))];
        _H9 = *(_WORD *)&v39[2 * llroundf(fminf(fmaxf(v178, 0.0), 8191.0))];
        float v191 = fmaxf(_S30, fmaxf(_S26, _S1));
        float v192 = (float)((float)((float)(_S18 * _S26) + (float)(_S17 * _S30)) + (float)(_S19 * _S1))
             + (float)(_S20 * v191);
        float v193 = 8191.0;
        if (v192 <= 8191.0)
        {
          float v193 = (float)((float)((float)(_S18 * _S26) + (float)(_S17 * _S30)) + (float)(_S19 * _S1))
               + (float)(_S20 * v191);
          if (v192 < 0.0) {
            float v193 = 0.0;
          }
        }
        __asm
        {
          FCVT            S27, H27
          FCVT            S31, H31
          FCVT            S9, H9
        }
        _H10 = *(_WORD *)&v34[2 * llroundf(v193)];
        float v198 = fmaxf(_S27, fmaxf(_S31, _S9));
        float v199 = (float)((float)((float)(_S18 * _S31) + (float)(_S17 * _S27)) + (float)(_S19 * _S9))
             + (float)(_S20 * v198);
        float v200 = 8191.0;
        if (v199 <= 8191.0)
        {
          float v200 = (float)((float)((float)(_S18 * _S31) + (float)(_S17 * _S27)) + (float)(_S19 * _S9))
               + (float)(_S20 * v198);
          if (v199 < 0.0) {
            float v200 = 0.0;
          }
        }
        __asm { FCVT            S2, H10 }
        float v202 = _S30 * _S2;
        float v203 = _S26 * _S2;
        float v204 = _S1 * _S2;
        LOWORD(_S2) = *(_WORD *)&v34[2 * llroundf(v200)];
        __asm { FCVT            S2, H2 }
        float v206 = _S27 * _S2;
        _S27 = _S31 * _S2;
        float v208 = _S9 * _S2;
        float v209 = (float)((float)(v257 * v203) + (float)(v202 * v258)) + (float)(v204 * v256);
        float v210 = (float)((float)(v254 * v203) + (float)(v202 * v255)) + (float)(v204 * _S5);
        float v211 = (float)((float)(_S7 * v203) + (float)(v202 * _S6)) + (float)(v204 * _S16);
        _S3 = (float)((float)(v257 * _S27) + (float)(v206 * v258)) + (float)(v208 * v256);
        _S4 = (float)((float)(v254 * _S27) + (float)(v206 * v255)) + (float)(v208 * _S5);
        float v214 = (float)(_S7 * _S27) + (float)(v206 * _S6);
        LOWORD(_S27) = *(_WORD *)&v40[2 * llroundf(fminf(fmaxf(v209, 0.0), 8191.0))];
        float v215 = v214 + (float)(v208 * _S16);
        __asm { FCVT            S26, H27 }
        LOWORD(_S27) = *(_WORD *)&v40[2 * llroundf(fminf(fmaxf(v210, 0.0), 8191.0))];
        unsigned int v217 = llroundf(fminf(fmaxf(v211, 0.0), 8191.0));
        __asm { FCVT            S1, H27 }
        LOWORD(_S27) = *(_WORD *)&v40[2 * v217];
        __asm { FCVT            S27, H27 }
        LOWORD(_S3) = *(_WORD *)&v40[2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        LOWORD(_S4) = *(_WORD *)&v40[2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0))];
        __asm { FCVT            S4, H4 }
        _H0 = *(_WORD *)&v40[2 * llroundf(fminf(fmaxf(v215, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        float v224 = (float)v179 * 0.000015259;
        if (!v63) {
          float v224 = 1.0;
        }
        *(_DWORD *)float v154 = _S26;
        *((_DWORD *)v154 + 1) = _S1;
        float v225 = (float)v180 * 0.000015259;
        *((_DWORD *)v154 + 2) = _S27;
        v154[3] = v224;
        if (!v63) {
          float v225 = 1.0;
        }
        *((_DWORD *)v154 + 4) = _S3;
        *((_DWORD *)v154 + 5) = _S4;
        v159 += 2;
        *((_DWORD *)v154 + 6) = _S0;
        v154[7] = v225;
        unint64_t v78 = (uint16x8_t *)((char *)v78 + 4);
        float16x8_t v77 = (uint16x8_t *)((char *)v77 + 4);
        v154 += 8;
      }
      v65 += v230;
      v64 += v229;
      float32x4_t v63 = (float32x4_t *)((char *)v231 + v228);
      uint32x4_t v62 = (float *)((char *)v232 + v227);
      uint64_t v9 = v233 + 1;
      if (v233 + 1 == v226) {
        return result;
      }
    }
    int v76 = 0;
    float16x8_t v77 = (uint16x8_t *)v65;
    unint64_t v78 = (uint16x8_t *)v64;
    while (v63)
    {
      float32x4_t v79 = *v63++;
      float32x4_t v80 = v79;
      if (!v63) {
        goto LABEL_17;
      }
      *(int16x4_t *)v81.i8 = vzip1_s16(*(int16x4_t *)v80.f32, 0);
      v81.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v80.f32, 0);
      int16x4_t v82 = (int16x4_t)vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
      *(int16x4_t *)v83.i8 = vzip1_s16(v82, 0);
      v83.u64[1] = (unint64_t)vzip2_s16(v82, 0);
      float32x4_t v80 = vcvtq_f32_u32(v81);
      float32x4_t v84 = vcvtq_f32_u32(v83);
      float32x4_t v85 = (float32x4_t)vdupq_n_s32(0x37800080u);
      _Q12 = vmulq_f32(v80, v85);
      float32x4_t v87 = vmulq_f32(v84, v85);
LABEL_18:
      uint16x8_t v88 = *v78++;
      float16x8_t v89 = vcvtq_f16_u16(vshlq_u16(v88, v73));
      int8x16_t v90 = (int8x16_t)vmlaq_f16(v249, v251, v89);
      int8x16_t v91 = (int8x16_t)vmlaq_f16(v248, v250, v89);
      v89.i64[0] = vextq_s8(v90, v90, 8uLL).u64[0];
      *(int16x4_t *)v92.i8 = vuzp1_s16(*(int16x4_t *)v90.i8, *(int16x4_t *)v89.i8);
      *(int16x4_t *)v89.i8 = vuzp2_s16(*(int16x4_t *)v90.i8, *(int16x4_t *)v89.i8);
      v89.i64[1] = v80.i64[0];
      v92.i64[1] = v80.i64[0];
      v90.i64[0] = vextq_s8(v91, v91, 8uLL).u64[0];
      *(float16x4_t *)v93.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v90.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v90.i8));
      v93.i64[1] = v80.i64[0];
      uint16x8_t v94 = *v77++;
      float16x8_t v95 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v94, v73)), v253);
      float16x8_t v96 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v93, v93), v95, _H8);
      float16x8_t v97 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v92, v92), v95, _H8);
      uint16x8_t v98 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v89, (int16x8_t)v89), v95, _H8), (float16x8_t)0), v75));
      float16x8_t v99 = (float16x8_t)vmovl_high_u16(v98);
      float16x8_t v100 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v98.i8);
      v100.i16[0] = *(_WORD *)&v39[2 * v100.u32[0]];
      v100.i16[1] = *(_WORD *)&v39[2 * v100.u32[1]];
      v100.i16[2] = *(_WORD *)&v39[2 * v100.u32[2]];
      v100.i16[3] = *(_WORD *)&v39[2 * v100.u32[3]];
      v100.i16[4] = *(_WORD *)&v39[2 * v99.u32[0]];
      v100.i16[5] = *(_WORD *)&v39[2 * v99.u32[1]];
      v100.i16[6] = *(_WORD *)&v39[2 * v99.u32[2]];
      v100.i16[7] = *(_WORD *)&v39[2 * v99.u32[3]];
      uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v96, (float16x8_t)0), v75));
      uint32x4_t v102 = vmovl_high_u16(v101);
      uint32x4_t v103 = vmovl_u16(*(uint16x4_t *)v101.i8);
      v99.i16[0] = *(_WORD *)&v39[2 * v103.u32[0]];
      v99.i16[1] = *(_WORD *)&v39[2 * v103.u32[1]];
      v99.i16[2] = *(_WORD *)&v39[2 * v103.u32[2]];
      v99.i16[3] = *(_WORD *)&v39[2 * v103.u32[3]];
      v99.i16[4] = *(_WORD *)&v39[2 * v102.u32[0]];
      v99.i16[5] = *(_WORD *)&v39[2 * v102.u32[1]];
      v99.i16[6] = *(_WORD *)&v39[2 * v102.u32[2]];
      v99.i16[7] = *(_WORD *)&v39[2 * v102.u32[3]];
      uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v97, (float16x8_t)0), v75));
      uint32x4_t v105 = vmovl_high_u16(v104);
      uint32x4_t v106 = vmovl_u16(*(uint16x4_t *)v104.i8);
      v97.i16[0] = *(_WORD *)&v39[2 * v106.u32[0]];
      v97.i16[1] = *(_WORD *)&v39[2 * v106.u32[1]];
      v97.i16[2] = *(_WORD *)&v39[2 * v106.u32[2]];
      v97.i16[3] = *(_WORD *)&v39[2 * v106.u32[3]];
      v97.i16[4] = *(_WORD *)&v39[2 * v105.u32[0]];
      v97.i16[5] = *(_WORD *)&v39[2 * v105.u32[1]];
      v97.i16[6] = *(_WORD *)&v39[2 * v105.u32[2]];
      v97.i16[7] = *(_WORD *)&v39[2 * v105.u32[3]];
      uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v100, v247), v99, v246), v97, v245), vmaxq_f16(vmaxq_f16(v100, v99), v97), v244), (float16x8_t)0), v75));
      uint32x4_t v108 = vmovl_u16(*(uint16x4_t *)v107.i8);
      float16x8_t v109 = (float16x8_t)vmovl_high_u16(v107);
      uint64_t v110 = v109.u32[0];
      v109.i16[0] = *(_WORD *)&v34[2 * v108.u32[0]];
      __int16 v111 = (__int16 *)&v34[2 * v110];
      __int16 v112 = (__int16 *)&v34[2 * v109.u32[1]];
      __int16 v113 = (__int16 *)&v34[2 * v109.u32[2]];
      float16x8_t v114 = (__int16 *)&v34[2 * v109.u32[3]];
      v109.i16[1] = *(_WORD *)&v34[2 * v108.u32[1]];
      v109.i16[2] = *(_WORD *)&v34[2 * v108.u32[2]];
      v109.i16[3] = *(_WORD *)&v34[2 * v108.u32[3]];
      v109.i16[4] = *v111;
      v109.i16[5] = *v112;
      v109.i16[6] = *v113;
      v109.i16[7] = *v114;
      float16x8_t v115 = vmulq_f16(v100, v109);
      float16x8_t v116 = vmulq_f16(v99, v109);
      float16x8_t v117 = vmulq_f16(v97, v109);
      float16x8_t v118 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v115, v240), v116, v239), v117, v238);
      float16x8_t v119 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v117, v235), v116, v236), v115, v237);
      uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v115, v243), v116, v242), v117, v241), (float16x8_t)0), v75));
      uint32x4_t v121 = vmovl_high_u16(v120);
      uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v120.i8);
      uint64_t v123 = v122.u32[2];
      uint64_t v124 = v122.u32[3];
      uint64_t v125 = v122.u32[1];
      v100.i16[0] = *(_WORD *)&v40[2 * v122.u32[0]];
      uint64_t v126 = v121.u32[1];
      uint64_t v127 = v121.u32[0];
      uint64_t v128 = v121.u32[3];
      uint64_t v129 = v121.u32[2];
      uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v75));
      uint32x4_t v131 = vmovl_u16(*(uint16x4_t *)v130.i8);
      uint64_t v132 = v131.u32[1];
      uint64_t v133 = v131.u32[0];
      v100.i16[1] = *(_WORD *)&v40[2 * v125];
      v100.i16[2] = *(_WORD *)&v40[2 * v123];
      v100.i16[3] = *(_WORD *)&v40[2 * v124];
      v100.i16[4] = *(_WORD *)&v40[2 * v127];
      v100.i16[5] = *(_WORD *)&v40[2 * v126];
      v100.i16[6] = *(_WORD *)&v40[2 * v129];
      v100.i16[7] = *(_WORD *)&v40[2 * v128];
      uint32x4_t v134 = vmovl_high_u16(v130);
      uint64_t v135 = v131.u32[3];
      uint64_t v136 = v131.u32[2];
      uint64_t v137 = v134.u32[1];
      uint64_t v138 = v134.u32[0];
      uint64_t v139 = v134.u32[3];
      uint64_t v140 = v134.u32[2];
      uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, (float16x8_t)0), v75));
      int8x16_t v142 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v141.i8);
      uint64_t v143 = v142.u32[1];
      uint64_t v144 = v142.u32[0];
      int8x16_t v145 = (int8x16_t)vmovl_high_u16(v141);
      uint64_t v146 = v142.u32[3];
      uint64_t v147 = v142.u32[2];
      uint64_t v148 = v145.u32[0];
      v142.i16[0] = *(_WORD *)&v40[2 * v133];
      v142.i16[1] = *(_WORD *)&v40[2 * v132];
      v142.i16[2] = *(_WORD *)&v40[2 * v136];
      v142.i16[3] = *(_WORD *)&v40[2 * v135];
      v142.i16[4] = *(_WORD *)&v40[2 * v138];
      v142.i16[5] = *(_WORD *)&v40[2 * v137];
      v142.i16[6] = *(_WORD *)&v40[2 * v140];
      v142.i16[7] = *(_WORD *)&v40[2 * v139];
      v145.i16[0] = *(_WORD *)&v40[2 * v144];
      uint64_t result = &v40[2 * v145.u32[1]];
      float v149 = (__int16 *)&v40[2 * v145.u32[2]];
      float v150 = (__int16 *)&v40[2 * v145.u32[3]];
      v145.i16[1] = *(_WORD *)&v40[2 * v143];
      v145.i16[2] = *(_WORD *)&v40[2 * v147];
      v145.i16[3] = *(_WORD *)&v40[2 * v146];
      v145.i16[4] = *(_WORD *)&v40[2 * v148];
      v145.i16[5] = *(_WORD *)result;
      v145.i16[6] = *v149;
      v145.i16[7] = *v150;
      float32x4_t v151 = vcvtq_f32_f16(*(float16x4_t *)v100.i8);
      float32x4_t v152 = vcvtq_f32_f16(*(float16x4_t *)v142.i8);
      float32x4_t v153 = vcvtq_f32_f16(*(float16x4_t *)v145.i8);
      float v154 = v62 + 32;
      vst4q_f32(v62, *(float32x4x4_t *)(&_Q12 - 3));
      float v155 = v62 + 16;
      float32x4_t v156 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL));
      float32x4_t v157 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v142, v142, 8uLL));
      float32x4_t v158 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v145, v145, 8uLL));
      vst4q_f32(v155, *(float32x4x4_t *)(&v87 - 3));
      v76 += 8;
      uint32x4_t v62 = v154;
      if (v76 >= (int)v10 - 7)
      {
        unint64_t v159 = v10 & 0xFFFFFFF8;
        goto LABEL_54;
      }
    }
    v80.i64[0] = 0;
LABEL_17:
    __asm { FMOV            V12.4S, #1.0 }
    float32x4_t v87 = _Q12;
    goto LABEL_18;
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v129 = v21 * *(float *)(v13 + 8);
    float v25 = v21 * *(float *)(v13 + 16);
    float v26 = v21 * *(float *)(v13 + 20);
    float v27 = v21 * *(float *)(v13 + 28);
    float v28 = *(float *)(v13 + 72);
    float v29 = *(float *)(v13 + 76);
    float v30 = *(float *)(v13 + 80);
    float v31 = *(float *)(v13 + 84);
    float v32 = *(float *)(v13 + 88);
    float v33 = *(float *)(v13 + 92);
    float v34 = *(float *)(v13 + 96);
    float v35 = *(float *)(v13 + 100);
    uint64_t v36 = v13 + 164;
    uint64_t v37 = v13 + 16548;
    uint64_t v38 = v13 + 32932;
    float v39 = *(float *)(v13 + 104);
    float v40 = *(float *)(v13 + 108);
    float v41 = *(float *)(v13 + 112);
    float v42 = *(float *)(v13 + 116);
    float v43 = *(float *)(v13 + 120);
    uint64_t v44 = *((void *)result + 14);
    unint64_t v45 = *((void *)result + 13) * a2 / v6;
    short float v46 = (void *)*((void *)result + 16);
    unint64_t v47 = v45 + *((void *)result + 15);
    uint64_t v48 = *(void *)(result + 36);
    unsigned int v49 = *(unsigned __int8 *)(v13 + 124);
    char v50 = 16 - v49;
    if (v49 >= 0x11) {
      char v50 = 0;
    }
    uint64_t result = (unsigned __int8 *)(*v46 + v47 * v19 + 16 * v44);
    uint64_t v51 = v14[2];
    if (v51) {
      uint64_t v52 = v51 + v18 * v11 + 2 * v48;
    }
    else {
      uint64_t v52 = 0;
    }
    uint64_t v55 = v14;
    uint64_t v54 = *v14;
    uint64_t v53 = v55[1];
    if (v53) {
      uint64_t v56 = v53 + v17 * v11 + 2 * v48;
    }
    else {
      uint64_t v56 = 0;
    }
    uint64_t v57 = v54 + v16 * v11 + 2 * v48;
    do
    {
      if (v10)
      {
        unint64_t v58 = 0;
        uint64_t v59 = (unsigned __int16 *)v57;
        uint64_t v60 = result;
        uint64_t v61 = (unsigned __int16 *)v52;
        do
        {
          uint32x4_t v62 = (unsigned __int16 *)(v56 + 2 * v58);
          float v63 = (float)(v62[1] >> v50) - v23;
          float v64 = v129 * v63;
          float v65 = v24 * (float)((float)(*v59 >> v50) - v22);
          float v66 = (float)(v129 * v63) + v65;
          float v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            float v67 = (float)(v129 * v63) + v65;
            if (v66 < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = (float)(*v62 >> v50) - v23;
          float v69 = (float)(v26 * v63) + (float)(v68 * v25);
          float v70 = 8191.0;
          if ((float)(v65 + v69) <= 8191.0)
          {
            float v70 = v65 + v69;
            if ((float)(v65 + v69) < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v27 * v68;
          float v72 = (float)(v27 * v68) + v65;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v24 * (float)((float)(v59[1] >> v50) - v22);
          float v75 = v64 + v74;
          BOOL v76 = (float)(v64 + v74) <= 8191.0;
          float v77 = 8191.0;
          if (v76)
          {
            float v77 = v75;
            if (v75 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v69 + v74;
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v71 + v74;
          BOOL v76 = (float)(v71 + v74) <= 8191.0;
          float v81 = 8191.0;
          if (v76)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          if (v61)
          {
            unsigned int v82 = *v61;
            unsigned int v83 = v61[1];
            v61 += 2;
          }
          else
          {
            unsigned int v82 = 0;
            unsigned int v83 = 0;
          }
          _S11 = fmaxf(v67, 0.0);
          float v85 = 8191.0;
          LOWORD(_S11) = *(_WORD *)(v36 + 2 * llroundf(fminf(_S11, 8191.0)));
          __asm { FCVT            S11, H11 }
          _H8 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H10 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          float v98 = (float)((float)((float)(v41 * _S8) + (float)(v40 * _S11)) + (float)(v42 * _S9))
              + (float)(v43 * fmaxf(_S11, fmaxf(_S8, _S9)));
          float v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          __asm
          {
            FCVT            S10, H10
            FCVT            S12, H12
            FCVT            S13, H13
          }
          _H14 = *(_WORD *)(v37 + 2 * llroundf(v99));
          float v104 = fmaxf(_S10, fmaxf(_S12, _S13));
          float v105 = (float)((float)((float)(v41 * _S12) + (float)(v40 * _S10)) + (float)(v42 * _S13)) + (float)(v43 * v104);
          if (v105 <= 8191.0)
          {
            float v85 = (float)((float)((float)(v41 * _S12) + (float)(v40 * _S10)) + (float)(v42 * _S13))
                + (float)(v43 * v104);
            if (v105 < 0.0) {
              float v85 = 0.0;
            }
          }
          __asm { FCVT            S4, H14 }
          float v107 = _S11 * _S4;
          float v108 = _S8 * _S4;
          float v109 = _S9 * _S4;
          _H31 = *(_WORD *)(v37 + 2 * llroundf(v85));
          __asm { FCVT            S31, H31 }
          _S9 = _S10 * _S31;
          _S10 = _S12 * _S31;
          float v114 = _S13 * _S31;
          float v115 = (float)((float)(v29 * v108) + (float)(v107 * v28)) + (float)(v109 * v30);
          float v116 = (float)((float)(v32 * v108) + (float)(v107 * v31)) + (float)(v109 * v33);
          _S4 = (float)((float)(v35 * v108) + (float)(v107 * v34)) + (float)(v109 * v39);
          _S8 = (float)((float)(v29 * _S10) + (float)(_S9 * v28)) + (float)(v114 * v30);
          _S11 = (float)((float)(v32 * _S10) + (float)(_S9 * v31)) + (float)(v114 * v33);
          _S31 = (float)((float)(v35 * _S10) + (float)(_S9 * v34)) + (float)(v114 * v39);
          LOWORD(_S9) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          LOWORD(_S10) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S4) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S8) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          LOWORD(_S11) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          LOWORD(_S31) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S31, 0.0), 8191.0)));
          __asm
          {
            FCVT            S11, H11
            FCVT            S31, H31
          }
          float v127 = (float)v82 * 0.000015259;
          if (!v61) {
            float v127 = 1.0;
          }
          *(_DWORD *)uint64_t v60 = _S9;
          *((_DWORD *)v60 + 1) = _S10;
          *((_DWORD *)v60 + 2) = _S4;
          *((float *)v60 + 3) = v127;
          if (v61) {
            float v128 = (float)v83 * 0.000015259;
          }
          else {
            float v128 = 1.0;
          }
          *((_DWORD *)v60 + 4) = _S8;
          *((_DWORD *)v60 + 5) = _S11;
          *((_DWORD *)v60 + 6) = _S31;
          *((float *)v60 + 7) = v128;
          v58 += 2;
          v59 += 2;
          v60 += 32;
        }
        while (v10 > v58);
      }
      v57 += v16;
      v56 += v17;
      v52 += v18;
      result += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_RGfA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

char *vt_Copy_xf422_TRC_Mat_TRC_RGfA_neon_fp16_GCD(char *result, uint64_t a2)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    unint64_t v9 = *(void *)(result + 20);
    uint64_t v10 = *(void *)(result + 44);
    uint64_t v11 = v6 + v10;
    uint64_t v12 = v7 + v10;
    uint64_t v13 = (float32x2_t *)*((void *)result + 19);
    uint64_t v14 = (uint64_t *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    unsigned int v20 = v13[17].u16[2];
    unsigned int v21 = v13[17].u16[3];
    v22.i32[0] = v13[3].i32[1];
    _S1 = v13[9].f32[1];
    _S2 = v13[10].f32[0];
    _S3 = v13[10].f32[1];
    _S4 = v13[11].f32[0];
    _S5 = v13[11].f32[1];
    _S6 = v13[12].f32[0];
    _S7 = v13[12].f32[1];
    _S16 = v13[13].f32[0];
    uint64_t v191 = v12 - v11;
    uint64_t v31 = (char *)&v13[20] + 4;
    v2.f32[0] = 8191.0 / (float)v13[16].u32[0];
    float v32 = (float)v20;
    float v33 = (float)v21;
    _S20 = v2.f32[0] * v13->f32[0];
    uint64_t v35 = (char *)&v13[2068] + 4;
    *(short float *)v3.i16 = (short float)v20;
    float32x4_t v42 = (float32x4_t)vdupq_lane_s16(v3, 0);
    float16x8_t v211 = (float16x8_t)v42;
    __asm { FCVT            H8, S20 }
    short float v41 = -(short float)v21;
    v22.i32[1] = v13[1].i32[0];
    *(float32x2_t *)v42.f32 = vmul_n_f32(v22, v2.f32[0]);
    *(float32x2_t *)v2.f32 = vmul_n_f32(v13[2], v2.f32[0]);
    float16x8_t v210 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v42), 0);
    float16x8_t v208 = vmulq_n_f16(v210, v41);
    float16x8_t v209 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v2), 0);
    float v212 = v13[9].f32[0];
    __asm { FCVT            H0, S0 }
    short float v206 = _H0;
    float16x8_t v207 = vmulq_n_f16(v209, v41);
    __asm { FCVT            H0, S1 }
    short float v205 = _H0;
    __asm { FCVT            H0, S2 }
    short float v204 = _H0;
    __asm { FCVT            H0, S3 }
    short float v203 = _H0;
    __asm { FCVT            H0, S4 }
    short float v202 = _H0;
    __asm { FCVT            H0, S5 }
    short float v201 = _H0;
    __asm { FCVT            H0, S6 }
    short float v200 = _H0;
    __asm { FCVT            H0, S7 }
    short float v199 = _H0;
    __asm { FCVT            H0, S16 }
    short float v198 = _H0;
    unsigned int v52 = v13[15].u8[4];
    uint64_t v53 = v14[2];
    uint64_t v193 = v18;
    uint64_t v194 = v17;
    uint64_t v54 = *(void *)(result + 36);
    uint64_t v55 = *((void *)result + 14);
    unint64_t v56 = *((void *)result + 13) * a2 / v5 + *((void *)result + 15);
    uint64_t v58 = *v14;
    uint64_t v57 = *(void *)(*((void *)result + 7) + 8);
    uint64_t v59 = **((void **)result + 16);
    if (v52 >= 0x11) {
      unsigned __int8 v60 = 0;
    }
    else {
      unsigned __int8 v60 = 16 - v52;
    }
    uint64_t v192 = v19;
    uint64_t result = (char *)(v59 + v19 * v56);
    uint64_t v61 = (float *)&result[16 * v55];
    if (v53) {
      uint64_t v62 = v53 + v18 * v11 + 2 * v54;
    }
    else {
      uint64_t v62 = 0;
    }
    if (v57) {
      uint64_t v63 = v57 + v17 * v11 + 2 * v54;
    }
    else {
      uint64_t v63 = 0;
    }
    uint64_t v195 = v16;
    uint16x8_t v64 = (uint16x8_t)vdupq_n_s16(-v60);
    uint64_t v65 = v58 + v16 * v11 + 2 * v54;
    uint64_t v66 = v2.i64[0];
    v67.i64[0] = 0x9000900090009000;
    v67.i64[1] = 0x9000900090009000;
    do
    {
      float16x8_t v196 = v61;
      uint64_t v197 = v8;
      if ((int)v9 < 8)
      {
        unint64_t v141 = 0;
        float v71 = (uint16x8_t *)v63;
        float v70 = (int8x16_t *)v62;
        uint64_t v136 = v61;
        float v69 = (uint16x8_t *)v65;
      }
      else
      {
        int v68 = 0;
        float v69 = (uint16x8_t *)v65;
        float v70 = (int8x16_t *)v62;
        float v71 = (uint16x8_t *)v63;
        do
        {
          if (v70 && (int8x16_t v72 = *v70, ++v70, v73 = v72, v70))
          {
            *(int16x4_t *)v74.i8 = vzip1_s16(*(int16x4_t *)v73.i8, 0);
            v74.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v73.i8, 0);
            int16x4_t v75 = (int16x4_t)vextq_s8(v73, v73, 8uLL).u64[0];
            *(int16x4_t *)v76.i8 = vzip1_s16(v75, 0);
            v76.u64[1] = (unint64_t)vzip2_s16(v75, 0);
            float32x4_t v77 = vcvtq_f32_u32(v74);
            float32x4_t v78 = vcvtq_f32_u32(v76);
            float32x4_t v79 = (float32x4_t)vdupq_n_s32(0x37800080u);
            _Q14 = vmulq_f32(v77, v79);
            float32x4_t v81 = vmulq_f32(v78, v79);
          }
          else
          {
            __asm { FMOV            V14.4S, #1.0 }
            float32x4_t v81 = _Q14;
          }
          uint16x8_t v82 = *v71++;
          float16x8_t v83 = vcvtq_f16_u16(vshlq_u16(v82, v64));
          int8x16_t v84 = (int8x16_t)vmlaq_f16(v208, v210, v83);
          int8x16_t v85 = (int8x16_t)vmlaq_f16(v207, v209, v83);
          v83.i64[0] = vextq_s8(v84, v84, 8uLL).u64[0];
          *(int16x4_t *)v86.i8 = vuzp1_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v83.i8);
          *(int16x4_t *)v83.i8 = vuzp2_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v83.i8);
          v83.i64[1] = v209.i64[0];
          v84.i64[0] = vextq_s8(v85, v85, 8uLL).u64[0];
          *(float16x4_t *)v87.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v84.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v84.i8));
          uint16x8_t v88 = *v69++;
          float16x8_t v89 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v88, v64)), v211);
          uint16x8_t v90 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v83, (int16x8_t)v83), v89, _H8), (float16x8_t)0), v67));
          float16x8_t v91 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v90.i8);
          v86.i64[1] = v211.i64[0];
          v87.i64[1] = v211.i64[0];
          float16x8_t v92 = vmlaq_n_f16((float16x8_t)vzip1q_s16(v87, v87), v89, _H8);
          uint32x4_t v93 = vmovl_high_u16(v90);
          v87.i64[0] = v93.u32[0];
          uint64_t v94 = v93.u32[1];
          uint64_t v95 = v93.u32[3];
          uint64_t v96 = v93.u32[2];
          uint16x8_t v97 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v92, (float16x8_t)0), v67));
          float16x8_t v98 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v97.i8);
          v91.i16[0] = *(_WORD *)&v31[2 * v91.u32[0]];
          v91.i16[1] = *(_WORD *)&v31[2 * v91.u32[1]];
          v91.i16[2] = *(_WORD *)&v31[2 * v91.u32[2]];
          v91.i16[3] = *(_WORD *)&v31[2 * v91.u32[3]];
          v91.i16[4] = *(_WORD *)&v31[2 * v87.i64[0]];
          v91.i16[5] = *(_WORD *)&v31[2 * v94];
          v91.i16[6] = *(_WORD *)&v31[2 * v96];
          v91.i16[7] = *(_WORD *)&v31[2 * v95];
          uint32x4_t v99 = vmovl_high_u16(v97);
          v98.i16[0] = *(_WORD *)&v31[2 * v98.u32[0]];
          v98.i16[1] = *(_WORD *)&v31[2 * v98.u32[1]];
          v98.i16[2] = *(_WORD *)&v31[2 * v98.u32[2]];
          v98.i16[3] = *(_WORD *)&v31[2 * v98.u32[3]];
          v98.i16[4] = *(_WORD *)&v31[2 * v99.u32[0]];
          v98.i16[5] = *(_WORD *)&v31[2 * v99.u32[1]];
          v98.i16[6] = *(_WORD *)&v31[2 * v99.u32[2]];
          v98.i16[7] = *(_WORD *)&v31[2 * v99.u32[3]];
          uint16x8_t v100 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16((float16x8_t)vzip1q_s16(v86, v86), v89, _H8), (float16x8_t)0), v67));
          uint32x4_t v101 = vmovl_high_u16(v100);
          float16x8_t v102 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v100.i8);
          v102.i16[0] = *(_WORD *)&v31[2 * v102.u32[0]];
          v102.i16[1] = *(_WORD *)&v31[2 * v102.u32[1]];
          v102.i16[2] = *(_WORD *)&v31[2 * v102.u32[2]];
          v102.i16[3] = *(_WORD *)&v31[2 * v102.u32[3]];
          v102.i16[4] = *(_WORD *)&v31[2 * v101.u32[0]];
          v102.i16[5] = *(_WORD *)&v31[2 * v101.u32[1]];
          v102.i16[6] = *(_WORD *)&v31[2 * v101.u32[2]];
          v102.i16[7] = *(_WORD *)&v31[2 * v101.u32[3]];
          float16x8_t v103 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v91, v203), v98, v202), v102, v201);
          float16x8_t v104 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v102, v198), v98, v199), v91, v200);
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v91, v206), v98, v205), v102, v204), (float16x8_t)0), v67));
          uint32x4_t v106 = vmovl_high_u16(v105);
          uint32x4_t v107 = vmovl_u16(*(uint16x4_t *)v105.i8);
          uint64_t v108 = v107.u32[2];
          uint64_t v109 = v107.u32[3];
          uint64_t v110 = v107.u32[1];
          v89.i16[0] = *(_WORD *)&v35[2 * v107.u32[0]];
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v103, (float16x8_t)0), v67));
          uint32x4_t v112 = vmovl_u16(*(uint16x4_t *)v111.i8);
          uint64_t v113 = v112.u32[1];
          uint64_t v114 = v112.u32[0];
          v89.i16[1] = *(_WORD *)&v35[2 * v110];
          v89.i16[2] = *(_WORD *)&v35[2 * v108];
          v89.i16[3] = *(_WORD *)&v35[2 * v109];
          v89.i16[4] = *(_WORD *)&v35[2 * v106.u32[0]];
          v89.i16[5] = *(_WORD *)&v35[2 * v106.u32[1]];
          v89.i16[6] = *(_WORD *)&v35[2 * v106.u32[2]];
          v89.i16[7] = *(_WORD *)&v35[2 * v106.u32[3]];
          uint32x4_t v115 = vmovl_high_u16(v111);
          uint64_t v116 = v112.u32[3];
          uint64_t v117 = v112.u32[2];
          uint64_t v118 = v115.u32[1];
          uint64_t v119 = v115.u32[0];
          uint64_t v120 = v115.u32[3];
          uint64_t v121 = v115.u32[2];
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v104, (float16x8_t)0), v67));
          int8x16_t v123 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v122.i8);
          uint64_t v124 = v123.u32[1];
          uint64_t v125 = v123.u32[0];
          int8x16_t v126 = (int8x16_t)vmovl_high_u16(v122);
          uint64_t v127 = v123.u32[3];
          uint64_t v128 = v123.u32[2];
          uint64_t v129 = v126.u32[0];
          v123.i16[0] = *(_WORD *)&v35[2 * v114];
          v123.i16[1] = *(_WORD *)&v35[2 * v113];
          v123.i16[2] = *(_WORD *)&v35[2 * v117];
          v123.i16[3] = *(_WORD *)&v35[2 * v116];
          v123.i16[4] = *(_WORD *)&v35[2 * v119];
          v123.i16[5] = *(_WORD *)&v35[2 * v118];
          v123.i16[6] = *(_WORD *)&v35[2 * v121];
          v123.i16[7] = *(_WORD *)&v35[2 * v120];
          v126.i16[0] = *(_WORD *)&v35[2 * v125];
          uint64_t result = &v35[2 * v129];
          uint16x8_t v130 = (__int16 *)&v35[2 * v126.u32[1]];
          uint32x4_t v131 = (__int16 *)&v35[2 * v126.u32[2]];
          uint64_t v132 = (__int16 *)&v35[2 * v126.u32[3]];
          v126.i16[1] = *(_WORD *)&v35[2 * v124];
          v126.i16[2] = *(_WORD *)&v35[2 * v128];
          v126.i16[3] = *(_WORD *)&v35[2 * v127];
          v126.i16[4] = *(_WORD *)result;
          v126.i16[5] = *v130;
          v126.i16[6] = *v131;
          v126.i16[7] = *v132;
          float32x4_t v133 = vcvtq_f32_f16(*(float16x4_t *)v89.i8);
          float32x4_t v134 = vcvtq_f32_f16(*(float16x4_t *)v123.i8);
          float32x4_t v135 = vcvtq_f32_f16(*(float16x4_t *)v126.i8);
          uint64_t v136 = v61 + 32;
          vst4q_f32(v61, *(float32x4x4_t *)(&_Q14 - 3));
          uint64_t v137 = v61 + 16;
          float32x4_t v138 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL));
          float32x4_t v139 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL));
          float32x4_t v140 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL));
          vst4q_f32(v137, *(float32x4x4_t *)(&v81 - 3));
          v68 += 8;
          uint64_t v61 = v136;
        }
        while (v68 < (int)v9 - 7);
        unint64_t v141 = v9 & 0xFFFFFFF8;
      }
      while (v9 > v141)
      {
        float v142 = (float)(v71->u16[1] >> v60) - v33;
        float v143 = v42.f32[1] * v142;
        float v144 = _S20 * (float)((float)(v69->u16[0] >> v60) - v32);
        float v145 = (float)(v42.f32[1] * v142) + v144;
        float v146 = 8191.0;
        if (v145 <= 8191.0)
        {
          float v146 = (float)(v42.f32[1] * v142) + v144;
          if (v145 < 0.0) {
            float v146 = 0.0;
          }
        }
        float v147 = (float)(v71->u16[0] >> v60) - v33;
        float v148 = (float)(*((float *)&v66 + 1) * v142) + (float)(v147 * *(float *)&v66);
        float v149 = 8191.0;
        if ((float)(v144 + v148) <= 8191.0)
        {
          float v149 = v144 + v148;
          if ((float)(v144 + v148) < 0.0) {
            float v149 = 0.0;
          }
        }
        float v150 = v42.f32[0] * v147;
        float v151 = (float)(v42.f32[0] * v147) + v144;
        float v152 = 8191.0;
        if (v151 <= 8191.0)
        {
          float v152 = v151;
          if (v151 < 0.0) {
            float v152 = 0.0;
          }
        }
        float v153 = _S20 * (float)((float)(v69->u16[1] >> v60) - v32);
        float v154 = v143 + v153;
        float v155 = 8191.0;
        if (v154 <= 8191.0)
        {
          float v155 = v154;
          if (v154 < 0.0) {
            float v155 = 0.0;
          }
        }
        float v156 = v148 + v153;
        float v157 = 8191.0;
        if (v156 <= 8191.0)
        {
          float v157 = v156;
          if (v156 < 0.0) {
            float v157 = 0.0;
          }
        }
        float v158 = v150 + v153;
        float v159 = 8191.0;
        if (v158 <= 8191.0)
        {
          float v159 = v158;
          if (v158 < 0.0) {
            float v159 = 0.0;
          }
        }
        if (v70)
        {
          unsigned int v160 = v70->u16[0];
          unsigned int v161 = v70->u16[1];
          float v70 = (int8x16_t *)((char *)v70 + 4);
        }
        else
        {
          unsigned int v160 = 0;
          unsigned int v161 = 0;
        }
        _H0 = *(_WORD *)&v31[2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        _H22 = *(_WORD *)&v31[2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0))];
        __asm { FCVT            S22, H22 }
        _H25 = *(_WORD *)&v31[2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0))];
        __asm { FCVT            S25, H25 }
        _H26 = *(_WORD *)&v31[2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0))];
        __asm { FCVT            S26, H26 }
        _H27 = *(_WORD *)&v31[2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0))];
        __asm { FCVT            S27, H27 }
        _H29 = *(_WORD *)&v31[2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0))];
        __asm { FCVT            S29, H29 }
        float v174 = (float)((float)(_S1 * _S22) + (float)(_S0 * v212)) + (float)(_S25 * _S2);
        float v175 = (float)((float)(_S4 * _S22) + (float)(_S0 * _S3)) + (float)(_S25 * _S5);
        float v176 = (float)((float)(_S7 * _S22) + (float)(_S0 * _S6)) + (float)(_S25 * _S16);
        _S22 = (float)((float)(_S1 * _S27) + (float)(_S26 * v212)) + (float)(_S29 * _S2);
        _S25 = (float)((float)(_S4 * _S27) + (float)(_S26 * _S3)) + (float)(_S29 * _S5);
        float v179 = (float)(_S7 * _S27) + (float)(_S26 * _S6);
        LOWORD(_S27) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v174, 0.0), 8191.0))];
        float v180 = v179 + (float)(_S29 * _S16);
        __asm { FCVT            S27, H27 }
        LOWORD(_S29) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v175, 0.0), 8191.0))];
        unsigned int v182 = llroundf(fminf(fmaxf(v176, 0.0), 8191.0));
        __asm { FCVT            S0, H29 }
        LOWORD(_S29) = *(_WORD *)&v35[2 * v182];
        __asm { FCVT            S29, H29 }
        LOWORD(_S22) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0))];
        __asm { FCVT            S22, H22 }
        LOWORD(_S25) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0))];
        __asm { FCVT            S25, H25 }
        _H24 = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v180, 0.0), 8191.0))];
        __asm { FCVT            S24, H24 }
        float v189 = (float)v160 * 0.000015259;
        if (!v70) {
          float v189 = 1.0;
        }
        *(_DWORD *)uint64_t v136 = _S27;
        *((_DWORD *)v136 + 1) = _S0;
        float v190 = (float)v161 * 0.000015259;
        *((_DWORD *)v136 + 2) = _S29;
        v136[3] = v189;
        if (!v70) {
          float v190 = 1.0;
        }
        *((_DWORD *)v136 + 4) = _S22;
        *((_DWORD *)v136 + 5) = _S25;
        v141 += 2;
        *((_DWORD *)v136 + 6) = _S24;
        v136[7] = v190;
        float v71 = (uint16x8_t *)((char *)v71 + 4);
        float v69 = (uint16x8_t *)((char *)v69 + 4);
        v136 += 8;
      }
      v65 += v195;
      v63 += v194;
      v62 += v193;
      uint64_t v61 = (float *)((char *)v196 + v192);
      uint64_t v8 = v197 + 1;
    }
    while (v197 + 1 != v191);
  }
  return result;
}

uint64_t vt_Copy_xf422_TRC_Mat_TRC_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_TRC_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    float v29 = *(float *)(v13 + 72);
    float v30 = *(float *)(v13 + 76);
    float v31 = *(float *)(v13 + 80);
    float v32 = *(float *)(v13 + 84);
    float v33 = *(float *)(v13 + 88);
    float v34 = *(float *)(v13 + 92);
    float v35 = *(float *)(v13 + 96);
    float v36 = *(float *)(v13 + 100);
    float v37 = *(float *)(v13 + 104);
    uint64_t v38 = v13 + 164;
    uint64_t v39 = v13 + 16548;
    uint64_t v40 = *((void *)result + 14);
    unint64_t v41 = *((void *)result + 13) * a2 / v6;
    float32x4_t v42 = (void *)*((void *)result + 16);
    unint64_t v43 = v41 + *((void *)result + 15);
    uint64_t v44 = *(void *)(result + 36);
    unsigned int v45 = *(unsigned __int8 *)(v13 + 124);
    char v46 = 16 - v45;
    if (v45 >= 0x11) {
      char v46 = 0;
    }
    uint64_t v47 = *v42 + v43 * v19 + 16 * v40;
    uint64_t v48 = v14[2];
    if (v48) {
      uint64_t result = (unsigned __int8 *)(v48 + v18 * v11 + 2 * v44);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v51 = v14;
    uint64_t v50 = *v14;
    uint64_t v49 = v51[1];
    if (v49) {
      uint64_t v52 = v49 + v17 * v11 + 2 * v44;
    }
    else {
      uint64_t v52 = 0;
    }
    uint64_t v53 = v50 + v16 * v11 + 2 * v44;
    do
    {
      if (v10)
      {
        unint64_t v54 = 0;
        uint64_t v55 = (unsigned __int16 *)v53;
        uint64_t v56 = v47;
        uint64_t v57 = (unsigned __int16 *)result;
        do
        {
          uint64_t v58 = (unsigned __int16 *)(v52 + 2 * v54);
          float v59 = (float)(v58[1] >> v46) - v23;
          float v60 = v25 * v59;
          float v61 = v24 * (float)((float)(*v55 >> v46) - v22);
          float v62 = (float)(v25 * v59) + v61;
          float v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            float v63 = (float)(v25 * v59) + v61;
            if (v62 < 0.0) {
              float v63 = 0.0;
            }
          }
          float v64 = (float)(*v58 >> v46) - v23;
          float v65 = (float)(v27 * v59) + (float)(v64 * v26);
          float v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            float v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v28 * v64;
          float v68 = v67 + v61;
          BOOL v69 = (float)(v67 + v61) <= 8191.0;
          float v70 = 8191.0;
          if (v69)
          {
            float v70 = v68;
            if (v68 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v24 * (float)((float)(v55[1] >> v46) - v22);
          float v72 = v60 + v71;
          BOOL v69 = (float)(v60 + v71) <= 8191.0;
          float v73 = 8191.0;
          if (v69)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v65 + v71;
          BOOL v69 = (float)(v65 + v71) <= 8191.0;
          float v75 = 8191.0;
          if (v69)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v67 + v71;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          if (v57)
          {
            unsigned int v78 = *v57;
            unsigned int v79 = v57[1];
            v57 += 2;
          }
          else
          {
            unsigned int v78 = 0;
            unsigned int v79 = 0;
          }
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm
          {
            FCVT            S31, H31
            FCVT            S8, H8
          }
          float v96 = (float)((float)(v30 * _S28) + (float)(_S27 * v29)) + (float)(_S29 * v31);
          float v97 = (float)((float)(v33 * _S28) + (float)(_S27 * v32)) + (float)(_S29 * v34);
          _S27 = (float)((float)(v36 * _S28) + (float)(_S27 * v35)) + (float)(_S29 * v37);
          _S28 = (float)((float)(v30 * _S31) + (float)(_S30 * v29)) + (float)(_S8 * v31);
          _S29 = (float)((float)(v33 * _S31) + (float)(_S30 * v32)) + (float)(_S8 * v34);
          _S30 = (float)((float)(v36 * _S31) + (float)(_S30 * v35)) + (float)(_S8 * v37);
          LOWORD(_S31) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          LOWORD(_S8) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          LOWORD(_S27) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S27, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          LOWORD(_S28) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S28, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          LOWORD(_S29) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S29, 0.0), 8191.0)));
          LOWORD(_S30) = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(_S30, 0.0), 8191.0)));
          __asm
          {
            FCVT            S29, H29
            FCVT            S30, H30
          }
          float v108 = (float)v78 * 0.000015259;
          if (!v57) {
            float v108 = 1.0;
          }
          *(_DWORD *)uint64_t v56 = _S31;
          *(_DWORD *)(v56 + 4) = _S8;
          *(_DWORD *)(v56 + 8) = _S27;
          *(float *)(v56 + 12) = v108;
          if (v57) {
            float v109 = (float)v79 * 0.000015259;
          }
          else {
            float v109 = 1.0;
          }
          *(_DWORD *)(v56 + 16) = _S28;
          *(_DWORD *)(v56 + 20) = _S29;
          *(_DWORD *)(v56 + 24) = _S30;
          *(float *)(v56 + 28) = v109;
          v54 += 2;
          v55 += 2;
          v56 += 32;
        }
        while (v10 > v54);
      }
      v53 += v16;
      v52 += v17;
      result += v18;
      v47 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_RGfA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_RGfA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_RGfA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, int16x4_t a8, float32x4_t a9)
{
  uint64_t v10 = *(void *)(result + 28);
  unint64_t v11 = *result;
  unint64_t v12 = v10 * a2 / v11;
  unint64_t v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    uint64_t v14 = 0;
    unint64_t v15 = *(void *)(result + 20);
    uint64_t v16 = *(void *)(result + 44);
    uint64_t v17 = v12 + v16;
    uint64_t v18 = v13 + v16;
    uint64_t v19 = (float32x2_t *)*((void *)result + 19);
    uint64_t v21 = (uint64_t *)*((void *)result + 7);
    uint64_t v20 = (uint64_t *)*((void *)result + 8);
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = **((void **)result + 17);
    unsigned int v26 = v19[17].u16[2];
    unsigned int v27 = v19[17].u16[3];
    a9.i32[0] = v19[3].i32[1];
    uint64_t v28 = v18 - v17;
    LODWORD(a3) = 1.0;
    float v29 = (float)v26;
    float v30 = (float)v27;
    v9.f32[0] = 1.0 / (float)v19[16].u32[0];
    _S3 = v9.f32[0] * v19->f32[0];
    __asm { FCVT            H4, S3 }
    *(short float *)a8.i16 = (short float)v26;
    float16x8_t v37 = (float16x8_t)vdupq_lane_s16(a8, 0);
    short float v38 = -(short float)v27;
    a9.i32[1] = v19[1].i32[0];
    *(float32x2_t *)a9.f32 = vmul_n_f32(*(float32x2_t *)a9.f32, v9.f32[0]);
    float16x8_t v39 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a9), 0);
    *(float32x2_t *)v9.f32 = vmul_n_f32(v19[2], v9.f32[0]);
    float16x8_t v40 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v9), 0);
    float16x8_t v41 = vmulq_n_f16(v39, v38);
    float16x8_t v42 = vmulq_n_f16(v40, v38);
    LODWORD(v19) = v19[15].u8[4];
    unsigned __int8 v43 = 16 - (_BYTE)v19;
    uint64_t v44 = v21[2];
    uint64_t v45 = *(void *)(result + 36);
    uint64_t v46 = *((void *)result + 14);
    unint64_t v47 = *((void *)result + 13) * a2 / v11 + *((void *)result + 15);
    uint64_t v49 = *v21;
    uint64_t v48 = v21[1];
    uint64_t v50 = v48 + v23 * v17 + 2 * v45;
    uint64_t v51 = **((void **)result + 16);
    if (v19 >= 0x11) {
      unsigned __int8 v43 = 0;
    }
    uint64_t v52 = v51 + v25 * v47 + 16 * v46;
    if (v44) {
      uint64_t v53 = v44 + v24 * v17 + 2 * v45;
    }
    else {
      uint64_t v53 = 0;
    }
    if (!v48) {
      uint64_t v50 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v49 + v22 * v17 + 2 * v45);
    uint16x8_t v54 = (uint16x8_t)vdupq_n_s16(-v43);
    __asm { FMOV            V23.4S, #1.0 }
    do
    {
      if ((int)v15 < 8)
      {
        unint64_t v87 = 0;
        float v60 = (uint16x8_t *)v50;
        float v59 = (int8x16_t *)v53;
        int8x16_t v85 = (float *)v52;
        uint64_t v57 = (uint16x8_t *)result;
      }
      else
      {
        int v56 = 0;
        uint64_t v57 = (uint16x8_t *)result;
        uint64_t v58 = (float *)v52;
        float v59 = (int8x16_t *)v53;
        float v60 = (uint16x8_t *)v50;
        do
        {
          if (v59)
          {
            int8x16_t v61 = *v59++;
            *(int16x4_t *)v62.i8 = vzip1_s16(*(int16x4_t *)v61.i8, 0);
            v62.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v61.i8, 0);
            int16x4_t v63 = (int16x4_t)vextq_s8(v61, v61, 8uLL).u64[0];
            *(int16x4_t *)v64.i8 = vzip1_s16(v63, 0);
            v64.u64[1] = (unint64_t)vzip2_s16(v63, 0);
            float32x4_t v65 = (float32x4_t)vdupq_n_s32(0x37800080u);
            float32x4_t v66 = vmulq_f32(vcvtq_f32_u32(v62), v65);
            float32x4_t v67 = vmulq_f32(vcvtq_f32_u32(v64), v65);
          }
          else
          {
            float32x4_t v66 = _Q23;
            float32x4_t v67 = _Q23;
          }
          uint16x8_t v68 = *v60++;
          float16x8_t v69 = vcvtq_f16_u16(vshlq_u16(v68, v54));
          int8x16_t v70 = (int8x16_t)vmlaq_f16(v41, v39, v69);
          int16x8_t v71 = (int16x8_t)vmlaq_f16(v42, v40, v69);
          v69.i64[0] = vextq_s8(v70, v70, 8uLL).u64[0];
          *(int16x4_t *)v72.i8 = vuzp1_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v69.i8);
          *(int16x4_t *)v69.i8 = vuzp2_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v69.i8);
          *(double *)&v69.i64[1] = a3;
          *(double *)&v72.i64[1] = a3;
          float16x8_t v73 = (float16x8_t)vzip1q_s16(v72, v72);
          v72.i64[0] = vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u64[0];
          *(float16x4_t *)v71.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v71.i8, *(int16x4_t *)v72.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v71.i8, *(int16x4_t *)v72.i8));
          *(double *)&v71.i64[1] = a3;
          uint16x8_t v74 = *v57++;
          float16x8_t v75 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v74, v54)), v37);
          int8x16_t v76 = (int8x16_t)vmlaq_n_f16((float16x8_t)vzip1q_s16((int16x8_t)v69, (int16x8_t)v69), v75, _H4);
          int8x16_t v77 = (int8x16_t)vmlaq_n_f16((float16x8_t)vzip1q_s16(v71, v71), v75, _H4);
          int8x16_t v78 = (int8x16_t)vmlaq_n_f16(v73, v75, _H4);
          float32x4_t v79 = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
          float32x4_t v80 = vcvtq_f32_f16(*(float16x4_t *)v77.i8);
          float32x4_t v81 = vcvtq_f32_f16(*(float16x4_t *)v78.i8);
          float32x4_t v82 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL));
          float32x4_t v83 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL));
          float32x4_t v84 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL));
          int8x16_t v85 = v58 + 32;
          vst4q_f32(v58, *(float32x4x4_t *)(&v66 - 3));
          int16x8_t v86 = v58 + 16;
          vst4q_f32(v86, *(float32x4x4_t *)(&v67 - 3));
          v56 += 8;
          uint64_t v58 = v85;
        }
        while (v56 < (int)v15 - 7);
        unint64_t v87 = v15 & 0xFFFFFFF8;
      }
      while (v15 > v87)
      {
        if (v59)
        {
          unsigned int v88 = v59->u16[0];
          unsigned int v89 = v59->u16[1];
          float v59 = (int8x16_t *)((char *)v59 + 4);
        }
        else
        {
          unsigned int v88 = 0;
          unsigned int v89 = 0;
        }
        float v90 = (float)(v60->u16[0] >> v43) - v30;
        float v91 = (float)(v60->u16[1] >> v43) - v30;
        float v92 = a9.f32[1] * v91;
        float v93 = (float)(v9.f32[1] * v91) + (float)(v90 * v9.f32[0]);
        float v94 = a9.f32[0] * v90;
        float v95 = _S3 * (float)((float)(v57->u16[0] >> v43) - v29);
        float v96 = _S3 * (float)((float)(v57->u16[1] >> v43) - v29);
        float v97 = v92 + v95;
        float v98 = v95 + v93;
        float v99 = v94 + v95;
        float v100 = v92 + v96;
        float v101 = v93 + v96;
        float v102 = v94 + v96;
        float v103 = (float)v88 * 0.000015259;
        if (!v59) {
          float v103 = 1.0;
        }
        float *v85 = v97;
        v85[1] = v98;
        v85[2] = v99;
        v85[3] = v103;
        if (v59) {
          float v104 = (float)v89 * 0.000015259;
        }
        else {
          float v104 = 1.0;
        }
        v85[4] = v100;
        v85[5] = v101;
        v87 += 2;
        v85[6] = v102;
        v85[7] = v104;
        float v60 = (uint16x8_t *)((char *)v60 + 4);
        uint64_t v57 = (uint16x8_t *)((char *)v57 + 4);
        v85 += 8;
      }
      result += v22;
      v50 += v23;
      v53 += v24;
      v52 += v25;
      ++v14;
    }
    while (v14 != v28);
  }
  return result;
}

uint64_t vt_Copy_xf422_rgb_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf422_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf422_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    unint64_t v11 = v7 + *(void *)(result + 44);
    unint64_t v12 = v8 - v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v14;
    uint64_t v17 = v14[1];
    uint64_t v18 = v14[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 1.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    uint64_t v29 = *((void *)result + 14);
    unint64_t v30 = *((void *)result + 13) * a2 / v6;
    uint64_t v31 = (void *)*((void *)result + 16);
    unint64_t v32 = v30 + *((void *)result + 15);
    uint64_t v33 = *(void *)(result + 36);
    LODWORD(v13) = *(unsigned __int8 *)(v13 + 124);
    char v34 = 16 - v13;
    if (v13 >= 0x11) {
      char v34 = 0;
    }
    uint64_t v35 = *v31 + v32 * v19 + 16 * v29;
    uint64_t v36 = v15[2];
    if (v36) {
      uint64_t v37 = v36 + v18 * v11 + 2 * v33;
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v39 = *v15;
    uint64_t v38 = v15[1];
    uint64_t v40 = v38 + v17 * v11 + 2 * v33;
    if (!v38) {
      uint64_t v40 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v39 + v16 * v11 + 2 * v33);
    char v41 = v34;
    do
    {
      if (v10)
      {
        unint64_t v42 = 0;
        unsigned __int8 v43 = (unsigned __int16 *)result;
        uint64_t v44 = (float *)v35;
        uint64_t v45 = (unsigned __int16 *)v37;
        do
        {
          if (v45)
          {
            unsigned int v46 = *v45;
            unsigned int v47 = v45[1];
            v45 += 2;
          }
          else
          {
            unsigned int v46 = 0;
            unsigned int v47 = 0;
          }
          uint64_t v48 = (unsigned __int16 *)(v40 + 2 * v42);
          float v49 = (float)(*v48 >> v41) - v23;
          float v50 = (float)(v48[1] >> v41) - v23;
          float v51 = v25 * v50;
          float v52 = (float)(v27 * v50) + (float)(v49 * v26);
          float v53 = v28 * v49;
          float v54 = v24 * (float)((float)(*v43 >> v41) - v22);
          float v55 = v24 * (float)((float)(v43[1] >> v41) - v22);
          float v56 = v51 + v54;
          float v57 = v54 + v52;
          float v58 = v53 + v54;
          float v59 = v51 + v55;
          float v60 = v52 + v55;
          float v61 = v53 + v55;
          float v62 = (float)v46 * 0.000015259;
          if (!v45) {
            float v62 = 1.0;
          }
          *uint64_t v44 = v56;
          v44[1] = v57;
          v44[2] = v58;
          v44[3] = v62;
          if (v45) {
            float v63 = (float)v47 * 0.000015259;
          }
          else {
            float v63 = 1.0;
          }
          v44[4] = v59;
          v44[5] = v60;
          v44[6] = v61;
          v44[7] = v63;
          v42 += 2;
          v43 += 2;
          v44 += 8;
        }
        while (v10 > v42);
      }
      result += v16;
      v40 += v17;
      v37 += v18;
      v35 += v19;
      ++v9;
    }
    while (v9 != v12);
  }
  return result;
}

void VTTileDecompressionSessionInvalidate(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 160))
  {
    uint64_t v2 = *(void *)(a1 + 144);
    if (v2)
    {
      VTDecompressionSessionRemoteBridge_Invalidate(v2);
      *(unsigned char *)(a1 + 160) = 1;
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 72);
      if (v3 && *(void *)(a1 + 128))
      {
        VTTileDecompressionSessionFinishDelayedTiles(a1);
        uint64_t v3 = *(void *)(a1 + 72);
      }
      uint64_t CMBaseObject = VTVideoDecoderGetCMBaseObject(v3);
      if (CMBaseObject)
      {
        uint64_t v5 = CMBaseObject;
        uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v7 = v6 ? v6 : 0;
        unint64_t v8 = *(void (**)(uint64_t))(v7 + 24);
        if (v8) {
          v8(v5);
        }
      }
      *(unsigned char *)(a1 + 160) = 1;
      if (*(_DWORD *)(a1 + 184))
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CFMutableDictionaryRef v10 = Mutable;
          CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a1 + 32));
          FigVideoFormatDescriptionContainsHDR();
          CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(a1 + 32));
          CFAbsoluteTimeGetCurrent();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigPlaybackLogPowerEvent();
          CFRelease(v10);
        }
      }
    }
  }
}

uint64_t VTTileDecompressionSessionFinishDelayedTiles(uint64_t a1)
{
  if (!a1) {
    return 4294954394;
  }
  if (*(unsigned char *)(a1 + 160) == 1) {
    return 4294954393;
  }
  if (*(void *)(a1 + 144))
  {
    uint64_t v1 = *(void *)(a1 + 144);
    return VTDecompressionSessionRemoteBridge_FinishDelayedTiles(v1);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 72);
    uint64_t v4 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    if (*v5 >= 3uLL && (uint64_t v6 = (uint64_t (*)(uint64_t))v5[10]) != 0)
    {
      return v6(v3);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t VTTileDecompressionSessionGetTypeID()
{
  return sVTTileDecompressionSessionID;
}

void RegisterVTTileDecompressionSession()
{
  v0 = (const void *)_CFRuntimeRegisterClass();
  sVTTileDecompressionSessionID = (uint64_t)v0;
  sVTTileDecompressionSessionPropertyCallbacks = 0;
  *(void *)algn_1EB3B8C68 = VTTileDecompressionSessionCopySupportedPropertyDictionary;
  qword_1EB3B8C70 = (uint64_t)VTTileDecompressionSessionSetProperty;
  qword_1EB3B8C78 = (uint64_t)VTTileDecompressionSessionCopyProperty;
  qword_1EB3B8C80 = (uint64_t)VTTileDecompressionSessionSetProperties;
  qword_1EB3B8C88 = (uint64_t)VTTileDecompressionSessionCopySerializableProperties;

  VTSessionRegisterCallbacksForTypeID(&sVTTileDecompressionSessionPropertyCallbacks, v0);
}

uint64_t VTTileDecompressionSessionCopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  v15[0] = 0;
  v15[1] = 0;
  if (a2 && (*a2 = 0, a1) && *(unsigned char *)(a1 + 160) != 1)
  {
    uint64_t v3 = *(void *)(a1 + 144);
    if (v3)
    {
      return VTDecompressionSessionRemoteBridge_CopySupportedPropertyDictionary(v3);
    }
    uint64_t v5 = *(void *)(a1 + 72);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    unint64_t v8 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v7 + 24);
    if (v8)
    {
      uint64_t v9 = v8(v5, &cf);
      if (v9 != -12782)
      {
        uint64_t v10 = v9;
        if (v9)
        {
          FigSignalErrorAt();
          goto LABEL_21;
        }
      }
    }
    if (cf)
    {
      v15[0] = cf;
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(void *)(a1 + 136);
    if (v12) {
      v15[v11] = v12;
    }
    uint64_t v13 = FigCFCreateCombinedDictionary();
  }
  else
  {
    uint64_t v13 = FigSignalErrorAt();
  }
  uint64_t v10 = v13;
LABEL_21:
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

uint64_t VTTileDecompressionSessionSetProperty(uint64_t a1, void *key, const __CFNumber *a3)
{
  if (a1 && *(unsigned char *)(a1 + 160) != 1)
  {
    uint64_t v6 = *(void *)(a1 + 144);
    if (v6)
    {
      return VTDecompressionSessionRemoteBridge_SetProperty(v6, (uint64_t)key, (uint64_t)a3);
    }
    CFDictionaryRef v8 = *(const __CFDictionary **)(a1 + 136);
    if (v8 && CFDictionaryContainsKey(v8, key))
    {
      if (CFEqual(@"CanvasPixelBufferAttributes", key) || CFEqual(@"TileDecoderRequirements", key))
      {
        uint64_t v9 = FigSignalErrorAt();
      }
      else
      {
        if (CFEqual(@"ClientPID", key)) {
          CFNumberGetValue(a3, kCFNumberSInt32Type, (void *)(a1 + 184));
        }
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = 4294954396;
    }
    if (vtTileDecompressionSessionIsPropertyHandledByVideoDecoder(a1, key))
    {
      uint64_t CMBaseObject = VTVideoDecoderGetCMBaseObject(*(void *)(a1 + 72));
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(uint64_t (**)(uint64_t, void *, const __CFNumber *))(v12 + 56);
      if (v13)
      {
        return v13(CMBaseObject, key, a3);
      }
      return 4294954514;
    }
    return v9;
  }

  return FigSignalErrorAt();
}

BOOL vtTileDecompressionSessionIsPropertyHandledByVideoDecoder(uint64_t a1, const void *a2)
{
  CFDictionaryRef theDict = 0;
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, CFDictionaryRef *))(v5 + 24);
  if (!v6) {
    return 0;
  }
  v6(v3, &theDict);
  if (!theDict) {
    return 0;
  }
  BOOL v7 = CFDictionaryContainsKey(theDict, a2) != 0;
  if (theDict) {
    CFRelease(theDict);
  }
  return v7;
}

uint64_t VTTileDecompressionSessionCopyProperty(uint64_t a1, CFTypeRef cf1, const __CFAllocator *a3, void *a4)
{
  if (!a4) {
    goto LABEL_30;
  }
  *a4 = 0;
  if (!a1 || *(unsigned char *)(a1 + 160) == 1) {
    goto LABEL_30;
  }
  if (!*(void *)(a1 + 144))
  {
    CFDictionaryRef v9 = *(const __CFDictionary **)(a1 + 136);
    if (!v9 || !CFDictionaryContainsKey(v9, cf1))
    {
      if (!vtTileDecompressionSessionIsPropertyHandledByVideoDecoder(a1, cf1)) {
        return 4294954396;
      }
      uint64_t CMBaseObject = VTVideoDecoderGetCMBaseObject(*(void *)(a1 + 72));
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = *(uint64_t (**)(uint64_t, CFTypeRef, const __CFAllocator *, void *))(v14 + 48);
      if (!v15) {
        return 4294954514;
      }
      return v15(CMBaseObject, cf1, a3, a4);
    }
    if (CFEqual(@"CanvasPixelBufferAttributes", cf1))
    {
      FigReadWriteLockLockForRead();
      CFTypeRef v10 = *(CFTypeRef *)(a1 + 88);
      if (!v10)
      {
LABEL_12:
        *a4 = v10;
        FigReadWriteLockUnlockForRead();
        return 0;
      }
LABEL_11:
      CFTypeRef v10 = CFRetain(v10);
      goto LABEL_12;
    }
    if (CFEqual(@"TileDecoderRequirements", cf1))
    {
      FigReadWriteLockLockForRead();
      CFTypeRef v10 = *(CFTypeRef *)(a1 + 96);
      if (!v10) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    uint64_t result = CFEqual(@"ForgetCachedIOSurfaces", cf1);
    if (!result) {
      return result;
    }
LABEL_30:
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, @"PixelBufferPool")) {
    return 4294954396;
  }
  uint64_t v11 = *(void *)(a1 + 144);

  return VTDecompressionSessionRemoteBridge_CopyProperty(v11, cf1, a3, a4);
}

uint64_t VTTileDecompressionSessionSetProperties(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v18 = a1;
  uint64_t v19 = 0;
  if (!a1 || *(unsigned char *)(a1 + 160) == 1)
  {
    LODWORD(v19) = FigSignalErrorAt();
    return v19;
  }
  uint64_t v4 = *(void *)(a1 + 144);
  if (!v4)
  {
    if (a2)
    {
      CFDictionaryRef v22 = 0;
      CFDictionaryRef v23 = 0;
      uint64_t context = *(void *)(a1 + 136);
      CFTypeRef cf = 0;
      uint64_t v6 = *(void *)(a1 + 72);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      CFDictionaryRef v9 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v8 + 24);
      if (v9 && (int v10 = v9(v6, &cf), v10 != -12782) && (v11 = v10) != 0)
      {
        FigSignalErrorAt();
        CFDictionaryRef v13 = 0;
        CFDictionaryRef v12 = 0;
      }
      else
      {
        CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)vtTileDecompressionSessionAddPropertyToPartition, &context);
        int v11 = 0;
        CFDictionaryRef v13 = v22;
        CFDictionaryRef v12 = v23;
      }
      if (cf) {
        CFRelease(cf);
      }
      LODWORD(v19) = v11;
      if (!v11)
      {
        if (v13) {
          CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)vtTileCompressionSessionSetOneProperty, &v18);
        }
        if (v12)
        {
          uint64_t v14 = *(void *)(a1 + 72);
          uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v16 = v15 ? v15 : 0;
          uint64_t v17 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(v16 + 32);
          if (!v17 || (LODWORD(v19) = v17(v14, v12), v19 == -12782))
          {
            LODWORD(v19) = 0;
            CFDictionaryApplyFunction(v12, (CFDictionaryApplierFunction)vtTileCompressionSessionSetOneProperty, &v18);
          }
        }
      }
    }
    return v19;
  }

  return VTDecompressionSessionRemoteBridge_SetProperties(v4, (uint64_t)a2);
}

uint64_t vtTileCompressionSessionSetOneProperty(void *key, const __CFNumber *a2, uint64_t a3)
{
  uint64_t result = VTTileDecompressionSessionSetProperty(*(void *)a3, key, a2);
  if (!*(_DWORD *)(a3 + 8)) {
    *(_DWORD *)(a3 + 8) = result;
  }
  return result;
}

uint64_t VTTileDecompressionSessionCopySerializableProperties(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3 && (*a3 = 0, a1) && *(unsigned char *)(a1 + 160) != 1)
  {
    if (*(void *)(a1 + 144))
    {
      uint64_t v5 = *(void *)(a1 + 144);
      return VTDecompressionSessionRemoteBridge_CopySerializableProperties(v5, a2, a3);
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 72);
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      int v10 = *(uint64_t (**)(uint64_t, uint64_t, void *))(v9 + 40);
      if (!v10) {
        return 0;
      }
      uint64_t result = v10(v7, a2, a3);
      if (result == -12782) {
        return 0;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t VTTileDecompressionSessionCreate(uint64_t a1, void *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6 = 4294954394;
  if (!a4 || !a2 || !a6) {
    return v6;
  }
  *a6 = 0;
  MEMORY[0x199705810](&VTTileDecompressionSessionGetTypeID_sRegisterVTTileDecompressionSessionOnce, RegisterVTTileDecompressionSession);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v14 = Instance;
    if (VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode())
    {
      if (FigServer_IsVideocodecd() || FigServer_IsVideoDecodeService()) {
        goto LABEL_15;
      }
    }
    else if (FigServer_IsServerProcess())
    {
      goto LABEL_15;
    }
    if (!VTShouldRunVideoDecodersInProcess())
    {
      uint64_t v47 = VTTileDecompressionSessionRemoteBridge_Create(v14, a1, a2, a3, a4, a5, (uint64_t *)(v14 + 144));
      if (!v47)
      {
LABEL_54:
        uint64_t v6 = 0;
        *(CFAbsoluteTime *)(v14 + 168) = CFAbsoluteTimeGetCurrent();
        *a6 = v14;
        return v6;
      }
      uint64_t v6 = v47;
LABEL_51:
      CFRelease((CFTypeRef)v14);
      return v6;
    }
LABEL_15:
    *(void *)(v14 + 32) = CFRetain(a2);
    if (a3) {
      CFTypeRef v16 = CFRetain(a3);
    }
    else {
      CFTypeRef v16 = 0;
    }
    *(void *)(v14 + 40) = v16;
    *(void *)(v14 + 48) = a4;
    *(void *)(v14 + 56) = a5;
    *(_DWORD *)(v14 + 16) = CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)a2);
    *(void *)(v14 + 120) = FigReadWriteLockCreate();
    *(void *)(v14 + 128) = 0;
    *(void *)(v14 + 104) = FigReadWriteLockCreate();
    CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef v18 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v18)
    {
      CFDictionaryRef v19 = v18;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      float v21 = Mutable;
      if (Mutable)
      {
        CFDictionarySetValue(Mutable, @"CanvasPixelBufferAttributes", v19);
        CFDictionarySetValue(v21, @"ForgetCachedIOSurfaces", v19);
        CFDictionarySetValue(v21, @"TileDecoderRequirements", v19);
        CFDictionarySetValue(v21, @"ClientPID", v19);
      }
      CFRelease(v19);
    }
    else
    {
      float v21 = 0;
    }
    *(void *)(v14 + 136) = v21;
    char v48 = 0;
    uint64_t v22 = *(unsigned int *)(v14 + 16);
    CFAllocatorRef v23 = CFGetAllocator((CFTypeRef)v14);
    float v24 = (CFTypeRef *)(v14 + 72);
    uint64_t v6 = VTSelectAndCreateVideoDecoderInstanceInternal(v22, (uint64_t)v23, 0, *(CFDictionaryRef *)(v14 + 40), 0, (void *)(v14 + 72), &v48, (CFIndex *)(v14 + 80));
    if (!v6)
    {
      do
      {
        *(void *)(v14 + 64) = v14;
        CFDictionaryRef v25 = *(const __CFDictionary **)(v14 + 40);
        if (v25)
        {
          CFNumberRef Value = CFDictionaryGetValue(v25, @"DecoderUsage");
          if (Value)
          {
            float v27 = Value;
            uint64_t CMBaseObject = VTVideoDecoderGetCMBaseObject(*v24);
            uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v30 = v29 ? v29 : 0;
            uint64_t v31 = *(void (**)(uint64_t, __CFString *, const void *))(v30 + 56);
            if (v31) {
              v31(CMBaseObject, @"DecoderUsage", v27);
            }
          }
        }
        uint64_t v32 = *(void *)(v14 + 72);
        uint64_t v33 = *(void *)(v14 + 32);
        char v34 = *(void **)(CMBaseObjectGetVTable() + 16);
        if (v34) {
          uint64_t v35 = v34;
        }
        else {
          uint64_t v35 = 0;
        }
        if (*v35 >= 3uLL && (uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v35[8]) != 0)
        {
          unsigned int v37 = v36(v32, v14 + 64, v33);
          if (!v37) {
            goto LABEL_54;
          }
        }
        else
        {
          unsigned int v37 = -12782;
        }
        if (v6) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v37;
        }
        uint64_t v38 = *(void *)(v14 + 80);
        uint64_t v39 = VTVideoDecoderGetCMBaseObject(*v24);
        if (v39)
        {
          uint64_t v40 = v39;
          uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v42 = v41 ? v41 : 0;
          unsigned __int8 v43 = *(void (**)(uint64_t))(v42 + 24);
          if (v43) {
            v43(v40);
          }
        }
        if (*v24)
        {
          CFRelease(*v24);
          *float v24 = 0;
        }
        CFIndex v44 = v38 + 1;
        char v48 = 0;
        uint64_t v45 = *(unsigned int *)(v14 + 16);
        CFAllocatorRef v46 = CFGetAllocator((CFTypeRef)v14);
      }
      while (!VTSelectAndCreateVideoDecoderInstanceInternal(v45, (uint64_t)v46, 0, *(CFDictionaryRef *)(v14 + 40), v44, (void *)(v14 + 72), &v48, (CFIndex *)(v14 + 80)));
    }
    FigSignalErrorAt();
    goto LABEL_51;
  }

  return FigSignalErrorAt();
}

uint64_t VTTileDecompressionSessionDecodeTile(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  int v28 = 0;
  if (a1)
  {
    if (*(unsigned char *)(a1 + 160) == 1)
    {
      uint64_t result = 4294954393;
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 144);
      if (v17)
      {
        return VTDecompressionSessionRemoteBridge_DecodeTile(v17, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      FigReadWriteLockLockForWrite();
      CFDictionaryRef v19 = (uint64_t *)malloc_type_calloc(1uLL, 0x38uLL, 0x10A004086CAA5EDuLL);
      if (v19)
      {
        unsigned int v20 = v19;
        uint64_t v21 = *(void *)(a1 + 112);
        *(void *)(a1 + 112) = v21 + 1;
        *CFDictionaryRef v19 = v21;
        v19[1] = a8;
        v19[2] = a3;
        v19[3] = a4;
        if (a5)
        {
          CFTypeRef v22 = CFRetain(a5);
          uint64_t v23 = *v20;
        }
        else
        {
          uint64_t v23 = v21;
          CFTypeRef v22 = 0;
        }
        v20[4] = (uint64_t)v22;
        v20[5] = a6;
        v20[6] = *(void *)(a1 + 128);
        *(void *)(a1 + 128) = v20;
        FigReadWriteLockUnlockForWrite();
        if ((a7 & 2) == 0) {
          ++*(_DWORD *)(a1 + 180);
        }
        uint64_t v24 = *(void *)(a1 + 72);
        CFDictionaryRef v25 = *(void **)(CMBaseObjectGetVTable() + 16);
        if (v25) {
          float v26 = v25;
        }
        else {
          float v26 = 0;
        }
        if (*v26 < 3uLL
          || (float v27 = (uint64_t (*)(uint64_t, uint64_t, opaqueCMSampleBuffer *, uint64_t, uint64_t, void *, uint64_t, uint64_t, int *))v26[9]) == 0
          || (uint64_t result = v27(v24, v23, a2, a3, a4, a5, a6, a7, &v28), result))
        {
          FigSignalErrorAt();
          uint64_t result = 0;
        }
      }
      else
      {
        FigReadWriteLockUnlockForWrite();
        uint64_t result = 4294954392;
      }
    }
  }
  else
  {
    uint64_t result = 4294954394;
  }
  if (a9) {
    *a9 = v28;
  }
  return result;
}

uint64_t VTTileDecoderSessionEmitDecodedTile(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    goto LABEL_9;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    goto LABEL_9;
  }
  if (*(unsigned char *)(v5 + 160) == 1)
  {
    CFDictionaryRef v12 = 0;
    uint64_t v13 = 4294954393;
    goto LABEL_19;
  }
  FigReadWriteLockLockForWrite();
  int v11 = (void *)(v5 + 128);
  int v10 = *(void **)(v5 + 128);
  if (!v10)
  {
LABEL_8:
    FigReadWriteLockUnlockForWrite();
LABEL_9:
    CFDictionaryRef v12 = 0;
    uint64_t v13 = 4294954394;
    goto LABEL_19;
  }
  CFDictionaryRef v12 = *(void **)(v5 + 128);
  while (*v12 != a2)
  {
    CFDictionaryRef v12 = (void *)v12[6];
    if (!v12) {
      goto LABEL_8;
    }
  }
  if (v10 != v12)
  {
    do
    {
      uint64_t v14 = v10;
      int v10 = (void *)v10[6];
    }
    while (v10 != v12);
    int v11 = v14 + 6;
    int v10 = v12;
  }
  *int v11 = v10[6];
  FigReadWriteLockUnlockForWrite();
  if (a5 || (a5 = v12[4]) != 0) {
    ++*(_DWORD *)(v5 + 176);
  }
  (*(void (**)(void, void, void, void, uint64_t, void, uint64_t, uint64_t))(v5 + 48))(*(void *)(v5 + 56), v12[1], v12[2], v12[3], a5, v12[5], a3, a4);
  uint64_t v15 = (const void *)v12[4];
  if (v15)
  {
    CFRelease(v15);
    uint64_t v13 = 0;
    v12[4] = 0;
  }
  else
  {
    uint64_t v13 = 0;
  }
LABEL_19:
  free(v12);
  return v13;
}

uint64_t VTTileDecoderSessionCleanUpAfterDecode()
{
  return 0;
}

uint64_t VTTileDecoderSessionSetTileDecodeRequirements(uint64_t *a1, const void *a2, const void *a3)
{
  if (!a1) {
    return 4294954394;
  }
  uint64_t v3 = *a1;
  if (!*a1) {
    return 4294954394;
  }
  if (*(unsigned char *)(v3 + 160) == 1) {
    return 4294954393;
  }
  FigReadWriteLockLockForWrite();
  uint64_t v6 = *(const void **)(v3 + 88);
  *(void *)(v3 + 88) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(v3 + 96);
  *(void *)(v3 + 96) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v7) {
    CFRelease(v7);
  }
  FigReadWriteLockUnlockForWrite();
  return 0;
}

double vtTileDecompressionSessionInit(_OWORD *a1)
{
  double result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void vtTileDecompressionSessionFinalize(void *a1)
{
  VTTileDecompressionSessionInvalidate((uint64_t)a1);
  FigReadWriteLockDestroy();
  FigReadWriteLockDestroy();
  uint64_t v2 = (const void *)a1[9];
  if (v2)
  {
    CFRelease(v2);
    a1[9] = 0;
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  uint64_t v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  uint64_t v5 = (const void *)a1[17];
  if (v5)
  {
    CFRelease(v5);
    a1[17] = 0;
  }
  uint64_t v6 = (const void *)a1[12];
  if (v6)
  {
    CFRelease(v6);
    a1[12] = 0;
  }
  uint64_t v7 = (const void *)a1[11];
  if (v7)
  {
    CFRelease(v7);
    a1[11] = 0;
  }
  uint64_t v8 = (const void *)a1[18];
  if (v8)
  {
    CFRelease(v8);
    a1[18] = 0;
  }
}

CFTypeRef vtTileDecompressionSessionCopyFormattingDesc()
{
  return CFRetain(@"[VTTileDecompressionSession]");
}

__CFString *vtTileDecompressionSessionCopyDebugDesc(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 16);
  CFAllocatorRef v3 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  if (v2 > 0xA)
  {
    if (v2 > 0x28)
    {
      unsigned int v2 = bswap32(v2);
      unsigned int v6 = v2 >> 8;
      uint64_t v5 = BYTE2(v2);
      LOBYTE(v7) = v2;
    }
    else
    {
      uint64_t v5 = 0;
      unsigned int v8 = *(_DWORD *)(a1 + 16);
      int v7 = v8 / 0xA + 48;
      unsigned int v6 = (v8 % 0xA) | 0x30;
    }
  }
  else
  {
    uint64_t v5 = 0;
    LOBYTE(v6) = 0;
    int v7 = *(_DWORD *)(a1 + 16) + 48;
  }
  CFAllocatorRef v9 = CFGetAllocator((CFTypeRef)a1);
  CFStringAppendFormat(Mutable, 0, @"<VTTileDecompressionSession %p [%p]>{'%c%c%c%c',videoDecoder:%p, }", a1, v9, HIBYTE(v2), v5, v6, v7, *(void *)(a1 + 72));
  return Mutable;
}

void vtTileDecompressionSessionAddPropertyToPartition(void *key, const void *a2, CFDictionaryRef *a3)
{
  if (*a3 && CFDictionaryContainsKey(*a3, key))
  {
    CFMutableDictionaryRef Mutable = a3[2];
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      a3[2] = Mutable;
    }
  }
  else
  {
    CFDictionaryRef v7 = a3[1];
    if (!v7 || !CFDictionaryContainsKey(v7, key)) {
      return;
    }
    CFMutableDictionaryRef Mutable = a3[3];
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      a3[3] = Mutable;
    }
  }

  CFDictionarySetValue(Mutable, key, a2);
}

uint64_t AppleJPEGVideoDecoder_CreateInstance()
{
  VTVideoDecoderGetClassID();
  uint64_t v0 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v0;
}

uint64_t AppleJPEGVideoDecoder_Invalidate()
{
  *(unsigned char *)CMBaseObjectGetDerivedStorage() = 1;
  return 0;
}

void AppleJPEGVideoDecoder_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 24) = 0;
  uint64_t v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 40) = 0;
  }
}

__CFString *AppleJPEGVideoDecoder_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<AppleJPEGVideoDecoder %p>", a1);
  return Mutable;
}

uint64_t AppleJPEGVideoDecoder_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"ReducedFrameDelivery"))
  {
    CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, (const void *)(DerivedStorage + 8));
    *a4 = v7;
    if (v7) {
      return 0;
    }
LABEL_6:
    FigSignalErrorAt();
    return 0;
  }
  if (CFEqual(a2, @"SuggestedQualityOfServiceTiers"))
  {
    MEMORY[0x199705810](&sCreateSuggestedQualityOfServiceTiersOnce_0, applejpegCreateSuggestedQualityOfServiceTiers);
    unsigned int v8 = (const void *)gJPEGVideoDecoderSuggestedQualityOfServiceTiers;
    if (!gJPEGVideoDecoderSuggestedQualityOfServiceTiers) {
      goto LABEL_6;
    }
LABEL_9:
    *a4 = CFRetain(v8);
    return 0;
  }
  if (CFEqual(a2, @"ContentHasInterframeDependencies"))
  {
    unsigned int v8 = (const void *)*MEMORY[0x1E4F1CFC8];
    goto LABEL_9;
  }

  return FigSignalErrorAt();
}

uint64_t AppleJPEGVideoDecoder_SetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"ReducedFrameDelivery"))
  {
    if (a3)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        double valuePtr = 1.0;
        CFNumberGetValue(a3, kCFNumberDoubleType, &valuePtr);
        if (valuePtr < 0.0 || valuePtr > 1.0) {
          return FigSignalErrorAt();
        }
        uint64_t result = 0;
        *(double *)(DerivedStorage + 8) = valuePtr;
        return result;
      }
    }
  }
  else
  {
    CFEqual(a2, @"SuggestedQualityOfServiceTiers");
  }

  return FigSignalErrorAt();
}

void applejpegCreateSuggestedQualityOfServiceTiers()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v9 = xmmword_193E80970;
  long long v10 = xmmword_193E80980;
  uint64_t v11 = 0x3FB999999999999ALL;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  gJPEGVideoDecoderSuggestedQualityOfServiceTiers = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (gJPEGVideoDecoderSuggestedQualityOfServiceTiers)
  {
    uint64_t v0 = 0;
    uint64_t v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    unsigned int v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    while (1)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, v1, v2);
      *(void *)((char *)v7 + v0) = Mutable;
      if (!Mutable) {
        break;
      }
      CFMutableDictionaryRef v4 = Mutable;
      if (!FigCFDictionarySetDouble())
      {
        CFArrayAppendValue((CFMutableArrayRef)gJPEGVideoDecoderSuggestedQualityOfServiceTiers, v4);
        CFRelease(v4);
        *(void *)((char *)v7 + v0) = 0;
        v0 += 8;
        if (v0 != 40) {
          continue;
        }
      }
      goto LABEL_6;
    }
  }
  FigSignalErrorAt();
LABEL_6:
  for (uint64_t i = 0; i != 40; i += 8)
  {
    unsigned int v6 = *(const void **)((char *)v7 + i);
    if (v6) {
      CFRelease(v6);
    }
  }
}

uint64_t AppleJPEGVideoDecoder_StartSession(uint64_t a1, uint64_t a2)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 24) = a2;
  FigFormatDescriptionRelease();
  CFMutableDictionaryRef v4 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
  *(void *)(DerivedStorage + 40) = v4;
  CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(v4);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFNumberRef v7 = Mutable;
    CFMutableArrayRef v8 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (v8)
    {
      CFMutableArrayRef v9 = v8;
      for (uint64_t i = 0; i != 24; i += 4)
        FigCFArrayAppendInt32();
      CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F24D70], v9);
      CFRelease(v9);
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if ((-Dimensions.width & 0xF) != 0) {
        FigCFDictionarySetInt32();
      }
      if ((-Dimensions.height & 0xF) != 0) {
        FigCFDictionarySetInt32();
      }
      VTDecoderSessionSetPixelBufferAttributes(*(uint64_t **)(DerivedStorage + 24), v7);
      CFRelease(v7);
      return 0;
    }
    uint64_t v11 = FigSignalErrorAt();
    CFRelease(v7);
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
  }
  if (!v11) {
    VTDecoderSessionSetPixelBufferAttributes(*(uint64_t **)(DerivedStorage + 24), 0);
  }
  return v11;
}

uint64_t AppleJPEGVideoDecoder_DecodeFrame(uint64_t a1, const void *a2, CMSampleBufferRef sbuf, uint64_t a4, _DWORD *a5)
{
  blockBufferOut[7] = *(CMBlockBufferRef *)MEMORY[0x1E4F143B8];
  DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  Dataunsigned int Length = CMBlockBufferGetDataLength(DataBuffer);
  dataPointerOut = 0;
  blockBufferOut[0] = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v49 = 0;
  memset(v48, 0, sizeof(v48));
  long long v46 = 0u;
  long long v47 = 0u;
  CFIndex v44 = 0;
  size_t v45 = 0;
  uint64_t v43 = 0;
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v41 = xmmword_1EE4EE0E0;
  uint64_t v42 = qword_1EE4EE0F0;
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
  if (SampleAttachmentsArray
    && (CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0)) != 0
    && (CFNumberRef Value = CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F1B8])) != 0
    && (uint64_t v15 = Value, TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(v15))
    && CFBooleanGetValue((CFBooleanRef)v15)
    || (double v17 = *(double *)(DerivedStorage + 8) + *(double *)(DerivedStorage + 16),
        *(double *)(DerivedStorage + 16) = v17,
        v17 < 1.0))
  {
    uint64_t v18 = 0;
    *a5 |= 2u;
    goto LABEL_53;
  }
  double v19 = v17 + -1.0;
  if (v19 >= 1.0) {
    double v19 = 1.0;
  }
  *(double *)(DerivedStorage + 16) = v19;
  if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
  {
    unsigned int v20 = (OpaqueCMBlockBuffer *)CFRetain(DataBuffer);
    blockBufferOut[0] = v20;
  }
  else
  {
    uint64_t Contiguous = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], DataBuffer, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, DataLength, 0, blockBufferOut);
    if (Contiguous) {
      goto LABEL_57;
    }
    unsigned int v20 = blockBufferOut[0];
  }
  CMBlockBufferGetDataPointer(v20, 0, 0, 0, &dataPointerOut);
  CFIndex v44 = dataPointerOut;
  size_t v45 = DataLength;
  PixelBufferPool = (__CVPixelBufferPool *)VTDecoderSessionGetPixelBufferPool(*(uint64_t **)(DerivedStorage + 24));
  uint64_t v23 = CVPixelBufferPoolCreatePixelBuffer(0, PixelBufferPool, &pixelBufferOut);
  if (v23)
  {
    uint64_t v18 = v23;
    FigSignalErrorAt();
    goto LABEL_61;
  }
  VTDecoderSessionTrace(*(void *)(DerivedStorage + 24));
  uint64_t Contiguous = CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  if (Contiguous)
  {
LABEL_57:
    uint64_t v18 = Contiguous;
LABEL_61:
    int v37 = 0;
    goto LABEL_46;
  }
  if (!applejpeg_decode_create())
  {
    uint64_t v18 = 4294954392;
    goto LABEL_45;
  }
  if (applejpeg_decode_open_jpeg_dib())
  {
    uint64_t v18 = 4294954392;
    goto LABEL_44;
  }
  if (*(void *)(DerivedStorage + 40))
  {
    if (applejpeg_decode_get_image_info())
    {
LABEL_56:
      uint64_t v18 = 4294954394;
LABEL_59:
      int v37 = 1;
LABEL_41:
      applejpeg_decode_destroy();
      if (!v18) {
        goto LABEL_47;
      }
      goto LABEL_46;
    }
    if (CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(DerivedStorage + 40)))
    {
      uint64_t v18 = FigSignalErrorAt();
      goto LABEL_59;
    }
  }
  size_t extraRowsOnBottom = 0;
  memset(&blockBufferOut[1], 0, 48);
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBufferOut);
  int IsPlanar = CVPixelBufferIsPlanar(pixelBufferOut);
  CVPixelBufferGetExtendedPixels(pixelBufferOut, 0, 0, 0, &extraRowsOnBottom);
  applejpeg_decode_options_init();
  if (PixelFormatType <= 1278555700)
  {
    int v26 = 10;
    if (PixelFormatType != 875704422 && PixelFormatType != 875704438)
    {
      if (PixelFormatType == 1111970369)
      {
        int v26 = 4;
        goto LABEL_32;
      }
      goto LABEL_43;
    }
LABEL_32:
    DWORD2(v46) = v26;
    if (IsPlanar)
    {
      PlaneCMItemCount Count = CVPixelBufferGetPlaneCount(pixelBufferOut);
      if (PlaneCount >= 1)
      {
        size_t v28 = 0;
        uint64_t v29 = PlaneCount;
        uint64_t v30 = &blockBufferOut[2];
        do
        {
          size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, v28);
          size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBufferOut, v28);
          BaseAddressOfPlane = (OpaqueCMBlockBuffer *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, v28);
          size_t v34 = (extraRowsOnBottom + HeightOfPlane) * BytesPerRowOfPlane;
          *(v30 - 1) = BaseAddressOfPlane;
          *uint64_t v30 = (CMBlockBufferRef)v34;
          *((void *)v48 + ++v28) = BytesPerRowOfPlane;
          v30 += 2;
        }
        while (v29 != v28);
      }
    }
    else
    {
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBufferOut);
      size_t Height = CVPixelBufferGetHeight(pixelBufferOut);
      blockBufferOut[1] = (CMBlockBufferRef)CVPixelBufferGetBaseAddress(pixelBufferOut);
      blockBufferOut[2] = (CMBlockBufferRef)((extraRowsOnBottom + Height) * BytesPerRow);
      *((void *)&v48[0] + 1) = BytesPerRow;
    }
    if (!applejpeg_decode_set_options() && !applejpeg_decode_image_all())
    {
      CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
      VTDecoderSessionTrace(*(void *)(DerivedStorage + 24));
      int v37 = 0;
      uint64_t v18 = 0;
      goto LABEL_41;
    }
    goto LABEL_56;
  }
  switch(PixelFormatType)
  {
    case 1278555701:
      int v26 = 2;
      goto LABEL_32;
    case 1380401729:
      int v26 = 3;
      goto LABEL_32;
    case 2037741158:
      int v26 = 7;
      goto LABEL_32;
  }
LABEL_43:
  uint64_t v18 = 4294954394;
LABEL_44:
  applejpeg_decode_destroy();
LABEL_45:
  int v37 = 1;
LABEL_46:
  FigSignalErrorAt();
LABEL_47:
  uint64_t v38 = pixelBufferOut;
  if (v37)
  {
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    uint64_t v38 = pixelBufferOut;
  }
  if (v38
    && (CVPixelBufferGetPixelFormatType(v38) == 1111970369 || CVPixelBufferGetPixelFormatType(pixelBufferOut) == 32))
  {
    CVBufferSetAttachment(pixelBufferOut, (CFStringRef)*MEMORY[0x1E4F249D0], (CFTypeRef)*MEMORY[0x1E4F1CFD0], kCVAttachmentMode_ShouldPropagate);
  }
LABEL_53:
  VTDecoderSessionEmitDecodedFrame(*(uint64_t **)(DerivedStorage + 24), a2, v18, *a5, pixelBufferOut);
  if (blockBufferOut[0]) {
    CFRelease(blockBufferOut[0]);
  }
  CVPixelBufferRelease(pixelBufferOut);
  return v18;
}

uint64_t AppleJPEGVideoDecoder_CopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  MEMORY[0x199705810](&gCreateSupportedPropertyDictionaryOnce, applejpegCreateSupportedPropertyDictionary);
  if (a2 && gJPEGVideoDecoderSupportedPropertyDictionary)
  {
    *a2 = CFRetain((CFTypeRef)gJPEGVideoDecoderSupportedPropertyDictionary);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void *_applejpeg_alloc(size_t a1)
{
  return malloc_type_malloc(a1, 0x1FDA2139uLL);
}

void applejpegCreateSupportedPropertyDictionary()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    return;
  }
  uint64_t v1 = Mutable;
  CFDictionarySetValue(Mutable, @"PropertyType", @"Number");
  CFDictionarySetValue(v1, @"ReadWriteStatus", @"ReadWrite");
  if (FigCFDictionarySetInt32() || FigCFDictionarySetInt32())
  {
LABEL_19:
    CFNumberRef v7 = v1;
    goto LABEL_10;
  }
  CFMutableDictionaryRef v2 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v2)
  {
    FigSignalErrorAt();
    goto LABEL_19;
  }
  CFMutableDictionaryRef v3 = v2;
  CFMutableDictionaryRef v4 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v5 = v4;
  if (v4
    && (CFDictionarySetValue(v4, @"PropertyType", @"Boolean"),
        CFDictionarySetValue(v5, @"ReadWriteStatus", @"ReadOnly"),
        unsigned int v6 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
        (gJPEGVideoDecoderSupportedPropertyDictionary = (uint64_t)v6) != 0))
  {
    CFDictionarySetValue(v6, @"ReducedFrameDelivery", v1);
    CFDictionarySetValue((CFMutableDictionaryRef)gJPEGVideoDecoderSupportedPropertyDictionary, @"SuggestedQualityOfServiceTiers", v3);
    CFDictionarySetValue((CFMutableDictionaryRef)gJPEGVideoDecoderSupportedPropertyDictionary, @"ContentHasInterframeDependencies", v5);
  }
  else
  {
    FigSignalErrorAt();
  }
  CFRelease(v1);
  CFRelease(v3);
  if (v5)
  {
    CFNumberRef v7 = v5;
LABEL_10:
    CFRelease(v7);
  }
}

uint64_t VTPixelTransferChainNodeSessionSetProperties(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v3 = a1;
  if (!theDict) {
    return 0;
  }
  uint64_t v4 = 0;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)VTPixelTransferChainNodeSessionSetOneProperty, &v3);
  return v4;
}

uint64_t VTPixelTransferChainNodeSessionSetOneProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = VTPixelTransferChainNodeSessionSetProperty(*(void *)a3, a1, a2);
  if (!*(_DWORD *)(a3 + 8)) {
    *(_DWORD *)(a3 + 8) = result;
  }
  return result;
}

uint64_t VTPixelTransferNodeGetTypeID()
{
  MEMORY[0x199705810](&VTPixelTransferNodeGetClassID_sRegisterVTPixelTransferNodeTypeOnce, RegisterVTPixelTransferNodeType);

  return CMBaseClassGetCFTypeID();
}

uint64_t VTPixelTransferNodeGetClassID()
{
  return sVTPixelTransferNodeClassID;
}

uint64_t VTPixelTransferNodeBaseDoFlush(uint64_t a1, CVPixelBufferPoolFlushFlags a2)
{
  uint64_t v3 = *(__CVPixelBufferPool **)(CMBaseObjectGetDerivedStorage() + 8);
  if (v3) {
    CVPixelBufferPoolFlush(v3, a2);
  }
  return 0;
}

void VTPixelTransferNodeBaseFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

void RegisterVTPixelTransferNodeType()
{
  CMBaseGetClassID();
  FigBaseClassRegisterClass();
  sVTSessionPropertyCallbacks = 0;
  *(void *)algn_1EB3B8CA8 = VTPixelTransferChainNodeSessionCopySupportedPropertyDictionary;
  qword_1EB3B8CB0 = (uint64_t)VTPixelTransferChainNodeSessionSetProperty;
  qword_1EB3B8CB8 = (uint64_t)VTPixelTransferChainNodeSessionCopyProperty;
  qword_1EB3B8CC0 = (uint64_t)VTPixelTransferChainNodeSessionSetProperties;
  qword_1EB3B8CC8 = (uint64_t)VTPixelTransferChainNodeSessionCopySerializableProperties;
  CFCFTypeID TypeID = (const void *)CMBaseClassGetCFTypeID();

  VTSessionRegisterCallbacksForTypeID(&sVTSessionPropertyCallbacks, CFTypeID);
}

uint64_t VTPixelTransferChainDoTransfer(uint64_t a1, const void *a2, long long *a3, const void *a4, long long *a5)
{
  CVPixelBufferRef pixelBufferOut = 0;
  CFArrayRef v6 = *(const __CFArray **)(a1 + 16);
  if (!v6) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v6);
  if (Count < 1)
  {
LABEL_36:
    uint64_t v29 = 0;
    goto LABEL_39;
  }
  CFIndex v12 = Count;
  if (a2) {
    a2 = CFRetain(a2);
  }
  long long v13 = a3[1];
  long long v35 = *a3;
  long long v36 = v13;
  long long v37 = a3[2];
  long long v14 = a5[1];
  long long v32 = *a5;
  long long v33 = v14;
  CFIndex v15 = (v12 - 1);
  long long v34 = a5[2];
  if ((int)v12 >= 2)
  {
    while (!CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v15) || *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 16))
    {
      if (v15-- <= 1)
      {
        LODWORD(v15) = 0;
        break;
      }
    }
  }
  CFIndex v17 = 0;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v18 = v15;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v17);
    unsigned int v20 = ValueAtIndex;
    if (v17)
    {
      a2 = pixelBufferOut;
      long long v35 = v32;
      long long v36 = v33;
      long long v37 = v34;
    }
    CVPixelBufferRef pixelBufferOut = 0;
    if (v18 == v17)
    {
      if (a4) {
        uint64_t v21 = (__CVBuffer *)CFRetain(a4);
      }
      else {
        uint64_t v21 = 0;
      }
      CVPixelBufferRef pixelBufferOut = v21;
      long long v24 = a5[1];
      long long v32 = *a5;
      long long v33 = v24;
      long long v25 = a5[2];
LABEL_27:
      long long v34 = v25;
      goto LABEL_28;
    }
    if (ValueAtIndex && *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 16))
    {
      if (a2) {
        uint64_t v21 = (__CVBuffer *)CFRetain(a2);
      }
      else {
        uint64_t v21 = 0;
      }
      CVPixelBufferRef pixelBufferOut = v21;
      long long v32 = v35;
      long long v33 = v36;
      long long v25 = v37;
      goto LABEL_27;
    }
    CVPixelBufferRef pixelBufferOut = 0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v23 = CVPixelBufferPoolCreatePixelBuffer(allocator, *(CVPixelBufferPoolRef *)(DerivedStorage + 8), &pixelBufferOut);
    if (v23) {
      break;
    }
    *(void *)&long long v32 = CVPixelBufferGetWidth(pixelBufferOut);
    *((void *)&v32 + 1) = CVPixelBufferGetHeight(pixelBufferOut);
    long long v33 = 0uLL;
    *(double *)&long long v34 = (double)(uint64_t)v32;
    *((double *)&v34 + 1) = (double)*((uint64_t *)&v32 + 1);
    uint64_t v21 = pixelBufferOut;
LABEL_28:
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    size_t v28 = *(uint64_t (**)(const void *, const void *, long long *, __CVBuffer *, long long *))(v27 + 8);
    if (!v28)
    {
      uint64_t v29 = 4294954514;
      if (!a2) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
    uint64_t v23 = v28(v20, a2, &v35, v21, &v32);
    if (v23) {
      break;
    }
    if (a2) {
      CFRelease(a2);
    }
    a2 = 0;
    if (v12 == ++v17) {
      goto LABEL_36;
    }
  }
  uint64_t v29 = v23;
  if (a2) {
LABEL_38:
  }
    CFRelease(a2);
LABEL_39:
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  return v29;
}

uint64_t VTPixelTransferChainRemoveAllNodes(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(__CFArray **)(a1 + 16);
    if (v1) {
      CFArrayRemoveAllValues(v1);
    }
  }
  return 0;
}

uint64_t VTPixelTransferChainFlush(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v6 = Count;
      for (CFIndex i = 0; i != v6; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *(uint64_t (**)(const void *, uint64_t))(v10 + 24);
        if (v11) {
          uint64_t result = v11(ValueAtIndex, a2);
        }
        else {
          uint64_t result = 4294954514;
        }
      }
    }
  }
  return result;
}

CFArrayRef VTPixelTransferChainHasNodes(const __CFArray *result)
{
  if (result)
  {
    uint64_t result = (const __CFArray *)*((void *)result + 2);
    if (result) {
      return (const __CFArray *)(CFArrayGetCount(result) != 0);
    }
  }
  return result;
}

uint64_t RegisterVTPixelTransferChain()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sVTPixelTransferChainID = result;
  return result;
}

uint64_t VTPixelTransferChainAppendNode(uint64_t a1, const void *a2)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    if (!Count
      || (uint64_t v6 = result, !CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), Count - 1))
      || (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), *(unsigned char *)(DerivedStorage + 16))
      || *(unsigned char *)(v6 + 16)
      || (uint64_t result = CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFDictionaryRef *)DerivedStorage, (CVPixelBufferPoolRef *)(DerivedStorage + 8)), !result))
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), a2);
      return 0;
    }
  }
  return result;
}

uint64_t VTPixelTransferChainCreate(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    MEMORY[0x199705810](&VTPixelTransferChainGetTypeID_sRegisterVTPixelTransferChainOnce, RegisterVTPixelTransferChain);
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v5 = Instance;
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      uint64_t result = 0;
      *(void *)(v5 + 16) = Mutable;
      *a2 = v5;
    }
    else
    {
      return 4294954392;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t VTPixelTransferChainCreatePixelBufferPoolAttributes(uint64_t a1, uint64_t a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294954392;
  }
  CFMutableDictionaryRef v7 = Mutable;
  CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v8)
  {
    uint64_t v11 = 4294954392;
    CFMutableDictionaryRef v9 = v7;
    goto LABEL_7;
  }
  CFMutableDictionaryRef v9 = v8;
  uint64_t v10 = FigCFDictionarySetInt32();
  if (v10 || (uint64_t v10 = FigCFDictionarySetInt64(), v10))
  {
    uint64_t v11 = v10;
    goto LABEL_10;
  }
  uint64_t v11 = FigCFDictionarySetInt64();
  if (v11)
  {
LABEL_10:
    CFRelease(v7);
    goto LABEL_7;
  }
  FigCFDictionarySetValue();
  *a4 = v7;
LABEL_7:
  CFRelease(v9);
  return v11;
}

uint64_t VTPixelTransferChainCopyFirstNodeProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  if (a1 && a2 && a4)
  {
    int Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v10 = 0;
      uint64_t v4 = 0;
      uint64_t v11 = Count;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v10);
        if (ValueAtIndex)
        {
          long long v13 = ValueAtIndex;
          uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v14) {
            uint64_t v15 = v14;
          }
          else {
            uint64_t v15 = 0;
          }
          CFTypeRef v16 = *(uint64_t (**)(const void *, uint64_t, uint64_t, uint64_t))(v15 + 48);
          if (!v16) {
            return 4294954514;
          }
          uint64_t v17 = v16(v13, a2, a3, a4);
          uint64_t v4 = 4294954396;
          if (v17 != -12900) {
            break;
          }
        }
        if (v11 == ++v10) {
          return v4;
        }
      }
      return v17;
    }
  }
  return v4;
}

__CFArray *VTPixelTransferChainCopyDescriptionChain(uint64_t a1)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 16)) < 1) {
    return 0;
  }
  CFIndex v2 = 0;
  CFStringRef v3 = 0;
  CFMutableDictionaryRef Mutable = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v6 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  do
  {
    if (v3) {
      CFRelease(v3);
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v2);
    if (ValueAtIndex)
    {
      CFStringRef v3 = CFCopyDescription(ValueAtIndex);
      if (v3)
      {
        if (!Mutable)
        {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v5, 0, v6);
          if (!Mutable) {
            goto LABEL_13;
          }
        }
        CFArrayAppendValue(Mutable, v3);
      }
    }
    else
    {
      CFStringRef v3 = 0;
    }
    ++v2;
  }
  while (CFArrayGetCount(*(CFArrayRef *)(a1 + 16)) > v2);
  if (!v3) {
    return Mutable;
  }
LABEL_13:
  CFRelease(v3);
  return Mutable;
}

uint64_t VTPixelTransferChainNodeSessionSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFMutableDictionaryRef v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t VTPixelTransferChainNodeSessionCopySupportedPropertyDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t VTPixelTransferChainNodeSessionCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFIndex v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t VTPixelTransferChainNodeSessionCopySerializableProperties()
{
  return FigSignalErrorAt();
}

CFTypeRef VTPixelTransferNodeCopyFormattingDesc()
{
  return CFRetain(@"[VTPixelTransferNode]");
}

uint64_t vtPixelTransferChainInit(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

void vtPixelTransferChainFinalize(uint64_t a1)
{
  if (a1)
  {
    CFIndex v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 16) = 0;
    }
  }
}

CFTypeRef vtPixelTransferChain_CopyFormattingDesc()
{
  return CFRetain(@"[VTPixelTransferChain]");
}

__CFString *vtPixelTransferChainCopyDebugDesc(CFArrayRef *a1)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef v2 = a1[2];
  if (!v2) {
    return 0;
  }
  CFTypeID v3 = CFGetTypeID(v2);
  if (v3 != CFArrayGetTypeID()) {
    return 0;
  }
  CFArrayGetCount(a1[2]);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v4, 0);
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<VTPixelTransferChain %p [%p]>{", a1, v6);
  CFStringAppendFormat(Mutable, 0, @"\n}");
  return Mutable;
}

uint64_t VTTestMotionEstimationProcessor_CreateInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 4294954394;
  }
  VTMotionEstimationProcessorGetClassID();
  uint64_t v3 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v3;
}

uint64_t VTTestMotionEstimationProcessor_Invalidate(const void *a1)
{
  if (!a1) {
    return 4294954394;
  }
  CFTypeID v1 = CFGetTypeID(a1);
  if (v1 != VTMotionEstimationProcessorGetTypeID()) {
    return 4294954394;
  }
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  uint64_t result = 0;
  *uint64_t DerivedStorage = 1;
  return result;
}

void VTTestMotionEstimationProcessor_Finalize(const void *a1)
{
  if (a1)
  {
    CFTypeID v1 = CFGetTypeID(a1);
    if (v1 == VTMotionEstimationProcessorGetTypeID())
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)(DerivedStorage + 16) = 0;
      uint64_t v3 = *(const void **)(DerivedStorage + 8);
      if (v3)
      {
        CFRelease(v3);
      }
    }
  }
}

__CFString *VTTestMotionEstimationProcessor_CopyDebugDescription(const void *a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (a1)
  {
    CFTypeID v3 = CFGetTypeID(a1);
    if (v3 == VTMotionEstimationProcessorGetTypeID()) {
      CFStringAppendFormat(Mutable, 0, @"<VTTestMotionEstimationProcessor %p>", a1);
    }
  }
  return Mutable;
}

uint64_t VTTestMotionEstimationProcessor_CopyProperty(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294954394;
  }
  CFTypeID v5 = CFGetTypeID(a1);
  uint64_t TypeID = VTMotionEstimationProcessorGetTypeID();
  if (!a4 || v5 != TypeID) {
    return 4294954394;
  }
  CMBaseObjectGetDerivedStorage();

  return FigSignalErrorAt();
}

uint64_t VTTestMotionEstimationProcessor_SetProperty(const void *a1, const void *a2)
{
  if (!a1) {
    return 4294954394;
  }
  CFTypeID v3 = CFGetTypeID(a1);
  uint64_t TypeID = VTMotionEstimationProcessorGetTypeID();
  if (!a2) {
    return 4294954394;
  }
  if (v3 != TypeID) {
    return 4294954394;
  }
  CFTypeID v5 = CFGetTypeID(a2);
  if (v5 != CFStringGetTypeID()) {
    return 4294954394;
  }
  CMBaseObjectGetDerivedStorage();

  return FigSignalErrorAt();
}

uint64_t VTTestMotionEstimationProcessor_StartSession(const void *a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 4294954394;
  }
  CFTypeID v5 = CFGetTypeID(a1);
  uint64_t TypeID = VTMotionEstimationProcessorGetTypeID();
  uint64_t v7 = 4294954394;
  if (a3 && v5 == TypeID && a2 && HIDWORD(a2))
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v11 = FigCFDictionarySetInt32();
    if (v11
      || (uint64_t v11 = FigCFDictionarySetInt32(), v11)
      || (uint64_t v11 = FigCFDictionarySetInt32(), v11)
      || (uint64_t v11 = VTMotionEstimationProcessorSessionSetSourcePixelBufferAttributes(a3, Mutable), v11))
    {
      uint64_t v7 = v11;
      CFMutableDictionaryRef v12 = 0;
    }
    else
    {
      CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v13 = FigCFDictionarySetInt32();
      if (v13
        || (uint64_t v13 = FigCFDictionarySetInt32(), v13)
        || (uint64_t v13 = FigCFDictionarySetInt32(), v13))
      {
        uint64_t v7 = v13;
      }
      else
      {
        uint64_t v7 = VTMotionEstimationProcessorSessionSetMotionVectorPixelBufferAttributes((uint64_t)a3, v12);
        if (!v7) {
          *(void *)(DerivedStorage + 16) = a3;
        }
      }
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v12) {
      CFRelease(v12);
    }
  }
  return v7;
}

uint64_t VTTestMotionEstimationProcessor_ProcessFrame(const void *a1, const void *a2, const void *a3, const void *a4, uint64_t a5, const void *a6)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 4294954394;
  }
  CFTypeID v10 = CFGetTypeID(a1);
  uint64_t TypeID = VTMotionEstimationProcessorGetTypeID();
  uint64_t v12 = 4294954394;
  if (!a3) {
    return v12;
  }
  if (v10 != TypeID) {
    return v12;
  }
  CFTypeID v13 = CFGetTypeID(a3);
  CFTypeID v14 = CVPixelBufferGetTypeID();
  if (!a4 || v13 != v14) {
    return v12;
  }
  CFTypeID v15 = CFGetTypeID(a4);
  if (v15 != CVPixelBufferGetTypeID()) {
    return 4294954394;
  }
  if (a6)
  {
    CFTypeID v16 = CFGetTypeID(a6);
    if (v16 != CFDictionaryGetTypeID()) {
      return 4294954394;
    }
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (VTMotionEstimationProcessorSessionCreateMotionVectorPixelBuffer(*(void *)(DerivedStorage + 16), (CVPixelBufferRef *)&cf)&& cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  uint64_t v12 = VTMotionEstimationProcessorSessionEmitMotionVectors(*(void *)(DerivedStorage + 16), a2);
  if (cf) {
    CFRelease(cf);
  }
  return v12;
}

uint64_t VTTestMotionEstimationProcessor_CompleteFrames(const void *a1)
{
  if (a1 && (CFTypeID v1 = CFGetTypeID(a1), v1 == VTMotionEstimationProcessorGetTypeID())) {
    return 0;
  }
  else {
    return 4294954394;
  }
}

uint64_t VTTestMotionEstimationProcessor_CopySupportedPropertyDictionary(const void *a1, void *a2)
{
  MEMORY[0x199705810](&sCreateSupportedPropertyDictionaryOnce_3, vtTestMotionEstimationProcessor_createSupportedPropertyDictionary);
  if (!a1) {
    return 4294954394;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  uint64_t TypeID = VTMotionEstimationProcessorGetTypeID();
  uint64_t result = 4294954394;
  if (a2 && v4 == TypeID)
  {
    if (sVTTestMotionEstimationProcessorSupportedPropertyDictionary)
    {
      CFTypeRef v7 = CFRetain((CFTypeRef)sVTTestMotionEstimationProcessorSupportedPropertyDictionary);
      uint64_t result = 0;
      *a2 = v7;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

void vtTestMotionEstimationProcessor_createSupportedPropertyDictionary()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v8[0] = 0;
  v8[1] = 0;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v0 = (void *)*MEMORY[0x1E4F1CFD0];
  values[0] = *(void **)MEMORY[0x1E4F1CFC8];
  values[1] = v0;
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef v2 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, MEMORY[0x1E4F1D510]);
  keys = @"PropertyType";
  CFTypeID v14 = @"ReadWriteStatus";
  CFTypeID v10 = @"Boolean";
  uint64_t v11 = @"ReadWrite";
  CFTypeID v15 = @"SupportedValueList";
  CFArrayRef v12 = v2;
  CFDictionaryRef v3 = CFDictionaryCreate(v1, (const void **)&keys, (const void **)&v10, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v2) {
    CFRelease(v2);
  }
  keys = @"PropertyType";
  CFTypeID v14 = @"ReadWriteStatus";
  CFTypeID v10 = @"Enumeration";
  uint64_t v11 = @"ReadWrite";
  CFTypeID v15 = @"SupportedValueList";
  CFArrayRef v12 = 0;
  CFTypeID v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFTypeID v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFDictionaryRef v6 = CFDictionaryCreate(v1, (const void **)&keys, (const void **)&v10, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  sVTTestMotionEstimationProcessorSupportedPropertyDictionary = (uint64_t)CFDictionaryCreate(v1, (const void **)v8, (const void **)v7, 0, v4, v5);
  if (!sVTTestMotionEstimationProcessorSupportedPropertyDictionary) {
    FigSignalErrorAt();
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t DolbyVisionDecoder_CreateInstance()
{
  VTVideoDecoderGetClassID();
  uint64_t v0 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v0;
}

uint64_t DolbyVisionDecoder_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    *(unsigned char *)uint64_t DerivedStorage = 1;
    if (*(void *)(DerivedStorage + 72))
    {
      uint64_t v2 = 2;
      do
      {
        CFDictionaryRef v3 = *(NSObject **)(v1 + 72);
        dispatch_time_t v4 = dispatch_time(0, 1000000000 * v2);
        v2 *= 2;
      }
      while (dispatch_group_wait(v3, v4));
    }
  }
  return 0;
}

void DolbyVisionDecoder_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = 0;
  uint64_t v1 = (const void *)DerivedStorage[2];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[2] = 0;
  }
  uint64_t v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  CFDictionaryRef v3 = (const void *)DerivedStorage[5];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[5] = 0;
  }
  dispatch_time_t v4 = (const void *)DerivedStorage[6];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[6] = 0;
  }
  CFTypeID v5 = (const void *)DerivedStorage[8];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[8] = 0;
  }
  CFDictionaryRef v6 = DerivedStorage[9];
  if (v6)
  {
    dispatch_release(v6);
    DerivedStorage[9] = 0;
  }
}

__CFString *DolbyVisionDecoder_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<DolbyVisionDecoder %p>", a1);
  return Mutable;
}

uint64_t DolbyVisionDecoder_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"SublayerDecoderSpecification"))
  {
    uint64_t v8 = *(const void **)(DerivedStorage + 48);
    if (!v8)
    {
      CFTypeRef v9 = 0;
LABEL_9:
      uint64_t result = 0;
      *a4 = v9;
      return result;
    }
LABEL_8:
    CFTypeRef v9 = CFRetain(v8);
    goto LABEL_9;
  }
  if (CFEqual(a2, @"PropagatePerFrameHDRDisplayMetadata"))
  {
    CFTypeID v10 = (const void **)MEMORY[0x1E4F1CFC8];
    if (*(unsigned char *)(DerivedStorage + 56)) {
      CFTypeID v10 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    uint64_t v8 = *v10;
    goto LABEL_8;
  }
  CFArrayRef v12 = *(const void **)(DerivedStorage + 40);
  if (!v12) {
    return 4294954393;
  }

  return VTSessionCopyProperty(v12, a2, a3, a4);
}

uint64_t DolbyVisionDecoder_SetProperty(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"SublayerDecoderSpecification"))
  {
    if (a3)
    {
      CFTypeID v6 = CFGetTypeID(a3);
      if (v6 == CFDictionaryGetTypeID())
      {
        CFTypeRef v7 = *(const void **)(DerivedStorage + 48);
        *(void *)(DerivedStorage + 48) = a3;
LABEL_5:
        CFRetain(a3);
        if (v7) {
          CFRelease(v7);
        }
        return 0;
      }
    }
    goto LABEL_20;
  }
  if (CFEqual(a2, @"PropagatePerFrameHDRDisplayMetadata"))
  {
    if (a3)
    {
      CFTypeID v9 = CFGetTypeID(a3);
      if (v9 == CFBooleanGetTypeID())
      {
        Boolean Value = CFBooleanGetValue((CFBooleanRef)a3);
        uint64_t result = 0;
        *(unsigned char *)(DerivedStorage + 56) = Value;
        return result;
      }
    }
LABEL_20:
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, @"DecompressionSessionOptions"))
  {
    if (a3)
    {
      CFTypeID v11 = CFGetTypeID(a3);
      if (v11 == CFDictionaryGetTypeID())
      {
        CFTypeRef v7 = *(const void **)(DerivedStorage + 64);
        *(void *)(DerivedStorage + 64) = a3;
        goto LABEL_5;
      }
    }
    goto LABEL_20;
  }
  CFArrayRef v12 = *(const void **)(DerivedStorage + 40);
  if (!v12) {
    return 4294954393;
  }

  return VTSessionSetProperty(v12, a2, a3);
}

uint64_t DolbyVisionDecoder_StartSession(uint64_t a1, uint64_t a2, const void *a3)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  CFPreferencesAppSynchronize(@"com.apple.coremedia");
  CFStringRef v8 = (const __CFString *)CFPreferencesCopyAppValue(@"dovi_bsd_output_pixel_format", @"com.apple.coremedia");
  if (v8)
  {
    CFStringRef v9 = v8;
    int v10 = 2016686640;
    if (CFStringCompare(v8, @"x420", 0))
    {
      if (CFEqual(v9, @"xf20"))
      {
LABEL_6:
        v10 += 3276800;
        goto LABEL_7;
      }
      int v10 = 1882468912;
      if (CFStringCompare(v9, @"p420", 0))
      {
        if (CFStringCompare(v9, @"pf20", 0))
        {
LABEL_8:
          CFRelease(v9);
          goto LABEL_9;
        }
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(v7 + 96) = v10;
    goto LABEL_8;
  }
LABEL_9:
  CFTypeID v11 = *(const void **)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 8) = a2;
  *(void *)(DerivedStorage + 16) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v11) {
    CFRelease(v11);
  }
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  CFTypeID v13 = (const void *)*MEMORY[0x1E4F1EE20];
  CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension((CMFormatDescriptionRef)a3, (CFStringRef)*MEMORY[0x1E4F1EE20]);
  if (Extension)
  {
    CFDictionaryRef v15 = Extension;
    CFTypeID v16 = CFGetTypeID(Extension);
    if (v16 == CFDictionaryGetTypeID())
    {
      Boolean Value = CFDictionaryGetValue(v15, @"dvcC");
      if (Value)
      {
        uint64_t v18 = Value;
        *(_DWORD *)(v12 + 100) = 1;
        *(unsigned char *)(v12 + 113) = 1;
        *(_DWORD *)(v12 + 108) = 1;
      }
      else
      {
        double v19 = CFDictionaryGetValue(v15, @"dvvC");
        if (!v19) {
          goto LABEL_49;
        }
        uint64_t v18 = v19;
        *(unsigned char *)(v12 + 112) = 1;
      }
      CFTypeID v20 = CFGetTypeID(v18);
      if (v20 != CFDataGetTypeID()) {
        goto LABEL_49;
      }
      if (CFDataGetLength((CFDataRef)v18) < 9) {
        goto LABEL_119;
      }
      BytePtr = CFDataGetBytePtr((CFDataRef)v18);
      int v22 = *BytePtr;
      unsigned int v23 = BytePtr[2];
      unsigned int v24 = BytePtr[4];
      unsigned int v25 = BytePtr[3];
      if (v23 >= 2) {
        unsigned int v26 = v23 >> 1;
      }
      else {
        unsigned int v26 = (v25 >> 3) & 0xFFFFFFDF | (32 * (v23 & 1));
      }
      if (v26 == 20)
      {
        if (v22 != 3) {
          goto LABEL_119;
        }
      }
      else if (v22 != 1)
      {
        goto LABEL_119;
      }
      if (!BytePtr[1] && (v25 & 1) != 0 && !(v25 & 2 | v24 & 0xC))
      {
        *(_WORD *)(v12 + 24) = v26;
        *(unsigned char *)(v12 + 26) = (v25 & 4) != 0;
        if (v26 == 5)
        {
          int v28 = 1;
          *(unsigned char *)(v12 + 104) = 1;
          goto LABEL_43;
        }
        unsigned int v27 = v24 >> 4;
        if (v26 != 10)
        {
          if (v26 == 8)
          {
            if (v27 != 4)
            {
              if (v27 != 2)
              {
                if (v27 != 1) {
                  goto LABEL_50;
                }
                *(_DWORD *)(v12 + 100) = 5;
                *(_WORD *)(v12 + 104) = 256;
                goto LABEL_44;
              }
              int v68 = 3;
LABEL_118:
              *(_DWORD *)(v12 + 100) = v68;
              uint64_t v29 = (void *)MEMORY[0x1E4F24BE0];
              goto LABEL_45;
            }
            *(unsigned char *)(v12 + 104) = 1;
            int v67 = 4;
LABEL_116:
            *(_DWORD *)(v12 + 100) = v67;
            uint64_t v29 = (void *)MEMORY[0x1E4F1EEF8];
            goto LABEL_45;
          }
          if (v26 != 20) {
            goto LABEL_50;
          }
          *(unsigned char *)(v12 + 104) = 1;
          int v28 = 10;
LABEL_43:
          *(_DWORD *)(v12 + 100) = v28;
LABEL_44:
          uint64_t v29 = (void *)MEMORY[0x1E4F1EF18];
LABEL_45:
          *(void *)(v12 + 120) = *v29;
          goto LABEL_50;
        }
        if (v24 <= 0xF)
        {
          *(unsigned char *)(v12 + 104) = 1;
          int v28 = 6;
          goto LABEL_43;
        }
        if (v27 == 4)
        {
          *(unsigned char *)(v12 + 104) = 1;
          int v67 = 9;
          goto LABEL_116;
        }
        if (v27 == 2)
        {
          int v68 = 8;
          goto LABEL_118;
        }
        if (v27 != 1)
        {
LABEL_50:
          if (*(_DWORD *)(v12 + 100)) {
            goto LABEL_51;
          }
          goto LABEL_119;
        }
LABEL_49:
        *(_DWORD *)(v12 + 100) = 5;
        *(void *)(v12 + 120) = *MEMORY[0x1E4F1EF18];
        *(unsigned char *)(v12 + 105) = 1;
        goto LABEL_50;
      }
    }
  }
LABEL_119:
  uint64_t v69 = FigSignalErrorAt();
  if (v69) {
    return v69;
  }
LABEL_51:
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t v30 = CMBaseObjectGetDerivedStorage();
  uint64_t v31 = v30;
  int v32 = *(_DWORD *)(v30 + 4);
  uint64_t v33 = 4294954394;
  if (v32 <= 1902403957)
  {
    if (v32 > 1684895095)
    {
      switch(v32)
      {
        case 1684895096:
          CMVideoCodecType v34 = 1836415073;
          break;
        case 1685481521:
          CMVideoCodecType v34 = 1752589105;
          break;
        case 1685481573:
          CMVideoCodecType v34 = 1751479857;
          break;
        default:
          return v33;
      }
      goto LABEL_74;
    }
    if (v32 != 1667524657)
    {
      if (v32 != 1684108849) {
        return v33;
      }
      CMVideoCodecType v34 = 1635135537;
      goto LABEL_76;
    }
    CMVideoCodecType v34 = 1667790435;
LABEL_74:
    int v36 = 1;
LABEL_77:
    *(_DWORD *)(v30 + 108) = v36;
    goto LABEL_78;
  }
  if (v32 <= 1902405732)
  {
    if (v32 == 1902403958)
    {
      CMVideoCodecType v34 = 1902212657;
LABEL_76:
      int v36 = 2;
      goto LABEL_77;
    }
    if (v32 != 1902405681) {
      return v33;
    }
    unsigned __int16 v35 = 30307;
    goto LABEL_71;
  }
  if (v32 == 1902405733)
  {
    unsigned __int16 v35 = 25974;
LABEL_71:
    CMVideoCodecType v34 = v35 | 0x71680000;
    goto LABEL_74;
  }
  if (v32 == 1902407032)
  {
    CMVideoCodecType v34 = 1902998904;
    goto LABEL_74;
  }
  if (v32 != 2053400625) {
    return v33;
  }
  CMVideoCodecType v34 = 2053666403;
LABEL_78:
  CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(v30 + 16));
  CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(*(CMFormatDescriptionRef *)(v31 + 16));
  uint64_t v39 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!Extensions
    || (CFDictionaryRef v40 = Extensions, (v41 = (const __CFDictionary *)CFDictionaryGetValue(Extensions, v13)) == 0)
    || (CFDictionaryRef v42 = v41, v43 = *v39, (MutableCopy = CFDictionaryCreateMutableCopy(*v39, 0, v40)) == 0))
  {
    uint64_t v33 = FigSignalErrorAt();
    goto LABEL_93;
  }
  CFMutableDictionaryRef v45 = MutableCopy;
  long long v46 = CFDictionaryCreateMutableCopy(v43, 0, v42);
  if (!v46)
  {
    uint64_t v33 = FigSignalErrorAt();
    CFRelease(v45);
    goto LABEL_93;
  }
  long long v47 = v46;
  if (*(unsigned char *)(v31 + 113))
  {
    char v48 = @"dvcC";
LABEL_89:
    CFDictionaryRemoveValue(v46, v48);
    goto LABEL_90;
  }
  if (*(unsigned char *)(v31 + 112))
  {
    CFDictionaryRemoveValue(v46, @"dvvC");
    if (*(_DWORD *)(v31 + 100) != 2) {
      goto LABEL_90;
    }
    goto LABEL_88;
  }
  if (*(_DWORD *)(v31 + 100) == 5)
  {
LABEL_88:
    CFDictionaryRemoveValue(v45, (const void *)*MEMORY[0x1E4F1EE00]);
    char v48 = (__CFString *)*MEMORY[0x1E4F1ED88];
    long long v46 = v45;
    goto LABEL_89;
  }
LABEL_90:
  CFDictionarySetValue(v45, v13, v47);
  CFDictionaryRemoveValue(v45, (const void *)*MEMORY[0x1E4F1EE58]);
  CFDictionaryRemoveValue(v45, (const void *)*MEMORY[0x1E4F1EE50]);
  uint64_t v49 = *(const void **)(v31 + 120);
  if (v49) {
    CFDictionarySetValue(v45, (const void *)*MEMORY[0x1E4F24BC8], v49);
  }
  uint64_t v33 = CMVideoFormatDescriptionCreate(v43, v34, Dimensions.width, Dimensions.height, v45, (CMVideoFormatDescriptionRef *)(v31 + 32));
  CFRelease(v45);
  CFRelease(v47);
  uint64_t v39 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
LABEL_93:
  if (!v33)
  {
    VTVideoDecoderGetCMBaseObject(a1);
    uint64_t v50 = CMBaseObjectGetDerivedStorage();
    VTDecoderSessionGetDestinationPixelBufferAttributes(a2);
    CFAllocatorRef v51 = *v39;
    uint64_t v52 = FigCFDictionaryCreateMutableCopy();
    if (!v52) {
      return FigSignalErrorAt();
    }
    CFDictionaryRef v53 = (const __CFDictionary *)v52;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!Mutable)
    {
      uint64_t v33 = FigSignalErrorAt();
      CFDictionaryRef v64 = v53;
LABEL_103:
      CFRelease(v64);
      return v33;
    }
    CFMutableArrayRef v55 = Mutable;
    if (*(_DWORD *)(v50 + 96))
    {
      FigCFArrayAppendInt32();
      float v56 = (const void *)*MEMORY[0x1E4F24D70];
      float v57 = v53;
    }
    else
    {
      float v58 = (const void *)*MEMORY[0x1E4F24D70];
      if (CFDictionaryGetValue(v53, (const void *)*MEMORY[0x1E4F24D70])) {
        goto LABEL_100;
      }
      LOBYTE(v70) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      if (CelestialShouldAllowHTPCIOSurfacesForHDRPlaybackToCA())
      {
        float32x4_t v66 = (const void *)*MEMORY[0x1E4F1CFD0];
        if (v66 == CFDictionaryGetValue(v53, (const void *)*MEMORY[0x1E4F24D10]))
        {
          FigCFArrayAppendInt32();
          FigCFArrayAppendInt32();
        }
      }
      if (dovi_shouldAllowInterchangeCompressedPixelFormatForHDRPlaybackToCA()) {
        FigCFArrayAppendInt32();
      }
      if (dovi_shouldAllowInterchangeCompressedPixelFormatForHDRPlaybackToCA()) {
        FigCFArrayAppendInt32();
      }
      CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
      FigCFArrayAppendInt32();
      CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
      FigCFArrayAppendInt32();
      float v57 = v53;
      float v56 = v58;
    }
    CFDictionarySetValue(v57, v56, v55);
LABEL_100:
    long long v70 = xmmword_1EE4EE2C8;
    float v59 = *(const opaqueCMFormatDescription **)(v50 + 32);
    float v60 = *(const void **)(v50 + 48);
    CFDictionaryRef v61 = *(const __CFDictionary **)(v50 + 64);
    float v62 = (uint64_t *)(v50 + 40);
    uint64_t v63 = VTDecompressionSessionCreateWithOptions((uint64_t)v51, v59, v60, v53, &v70, v61, v62);
    if (!v63) {
      uint64_t v63 = VTDecompressionSessionSetMultiImageCallback((VTDecompressionSessionRef)*v62, (VTDecompressionOutputMultiImageCallback)dovi_multiImageDecompressionOutput, 0);
    }
    uint64_t v33 = v63;
    CFRelease(v53);
    CFDictionaryRef v64 = v55;
    goto LABEL_103;
  }
  return v33;
}

uint64_t DolbyVisionDecoder_DecodeFrame(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3, VTDecodeFrameFlags a4, VTDecodeInfoFlags *a5)
{
  uint64_t v9 = a1;
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  float32x4_t v81 = 0;
  CFTypeRef cf = 0;
  dispatch_group_enter(*(dispatch_group_t *)(DerivedStorage + 72));
  ++*(_DWORD *)(DerivedStorage + 80);
  if (!CMSampleBufferDataIsReady(a3))
  {
    uint64_t v34 = FigSignalErrorAt();
    goto LABEL_134;
  }
  if (!*(unsigned char *)(DerivedStorage + 104))
  {
LABEL_38:
    unsigned __int16 v35 = 0;
    goto LABEL_48;
  }
  int v11 = *(_DWORD *)(DerivedStorage + 108);
  if (v11 == 2)
  {
    DataBuffer = CMSampleBufferGetDataBuffer(a3);
    CMBlockBufferRef blockBufferOut = 0;
    destination = 0;
    CMBlockBufferRef theBuffer = 0;
    size_t totalLengthOut = 0;
    if (DataBuffer)
    {
      uint64_t v39 = DataBuffer;
      Dataunsigned int Length = CMBlockBufferGetDataLength(DataBuffer);
      CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v39, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, DataLength, 0, &theBuffer);
      uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &destination);
      if (DataPointer)
      {
        uint64_t v34 = DataPointer;
        FigSignalErrorAt();
LABEL_43:
        if (theBuffer) {
          CFRelease(theBuffer);
        }
        if (!v34)
        {
          CFAllocatorRef v43 = CMSampleBufferGetDataBuffer(a3);
          uint64_t DerivedSampleBuffer = dovi_createDerivedSampleBuffer(a3, v43, *(const opaqueCMFormatDescription **)(DerivedStorage + 32), (CMSampleBufferRef *)&cf);
          long long v37 = 0;
          if (DerivedSampleBuffer)
          {
            uint64_t v34 = DerivedSampleBuffer;
            unsigned __int16 v35 = 0;
            goto LABEL_111;
          }
          unsigned __int16 v35 = 0;
          goto LABEL_48;
        }
LABEL_134:
        long long v37 = 0;
        unsigned __int16 v35 = 0;
        goto LABEL_111;
      }
      uint64_t v42 = FigAV1Bridge_CopyITU_T_T35MetadataDolbyVisionRPURawByteSequence();
    }
    else
    {
      uint64_t v42 = FigSignalErrorAt();
    }
    uint64_t v34 = v42;
    goto LABEL_43;
  }
  if (v11 != 1) {
    goto LABEL_38;
  }
  *(void *)float32x4_t v79 = a3;
  uint64_t v12 = CMSampleBufferGetDataBuffer(a3);
  CMBlockBufferRef blockBufferOut = 0;
  CMBlockBufferRef theBuffer = 0;
  if (!v12)
  {
    uint64_t v16 = FigSignalErrorAt();
LABEL_140:
    uint64_t v34 = v16;
    uint64_t v31 = 0;
    goto LABEL_132;
  }
  CFTypeID v13 = v12;
  size_t v14 = CMBlockBufferGetDataLength(v12);
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v16 = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, &blockBufferOut);
  if (v16) {
    goto LABEL_140;
  }
  CFAllocatorRef allocator = v15;
  uint64_t v16 = CMBlockBufferCreateEmpty(v15, 0, 0, &theBuffer);
  if (v16) {
    goto LABEL_140;
  }
  VTDecodeFrameFlags v73 = a4;
  float16x8_t v75 = a5;
  uint64_t v77 = v9;
  int16x8_t v72 = a2;
  if (v14)
  {
    size_t v17 = 0;
    CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF90];
    while (v17 + 5 <= v14)
    {
      LODWORD(destination) = 0;
      LOBYTE(totalLengthOut) = 0;
      char v83 = 0;
      uint64_t appended = CMBlockBufferCopyDataBytes(v13, v17, 4uLL, &destination);
      if (appended) {
        goto LABEL_122;
      }
      if (!destination || (unsigned int v20 = bswap32(destination), v21 = v17 + 4 + v20, v21 > v14))
      {
LABEL_121:
        uint64_t appended = FigSignalErrorAt();
LABEL_122:
        uint64_t v34 = appended;
        a2 = v72;
        a5 = v75;
        uint64_t v9 = v77;
        a4 = v73;
        a3 = *(opaqueCMSampleBuffer **)v79;
        uint64_t v31 = 0;
        goto LABEL_123;
      }
      uint64_t appended = CMBlockBufferCopyDataBytes(v13, v17 + 4, 1uLL, &totalLengthOut);
      if (appended) {
        goto LABEL_122;
      }
      if (totalLengthOut == 124)
      {
        size_t v23 = v20 + 4;
        if (v23 < 7) {
          goto LABEL_121;
        }
        uint64_t appended = CMBlockBufferCopyDataBytes(v13, v17 + 5, 1uLL, &v83);
        if (appended) {
          goto LABEL_122;
        }
        if (v83 != 1) {
          goto LABEL_121;
        }
        if (v21 < v14)
        {
          unsigned int v27 = (char *)malloc_type_malloc(v20 + 4, 0x430E3EC6uLL);
          if (!v27) {
            goto LABEL_121;
          }
          int v28 = v27;
          *unsigned int v27 = HIBYTE(v20);
          v27[1] = BYTE2(v20);
          v27[2] = BYTE1(v20);
          v27[3] = v20;
          *((_WORD *)v27 + 2) = 332;
          memset(v27 + 6, 255, v23 - 7);
          v28[v23 - 1] = 0x80;
          uint64_t appended = CMBlockBufferAppendMemoryBlock(blockBufferOut, v28, v20 + 4, v18, 0, 0, v20 + 4, 0);
          if (appended) {
            goto LABEL_122;
          }
        }
        size_t v26 = v20 - 2;
        int v22 = theBuffer;
        size_t v25 = v17 + 6;
        unsigned int v24 = v13;
      }
      else
      {
        if (totalLengthOut == 126) {
          goto LABEL_121;
        }
        int v22 = blockBufferOut;
        size_t v23 = v20 + 4;
        unsigned int v24 = v13;
        size_t v25 = v17;
        size_t v26 = v23;
      }
      uint64_t appended = CMBlockBufferAppendBufferReference(v22, v24, v25, v26, 0);
      if (appended) {
        goto LABEL_122;
      }
      v17 += v23;
      if (v17 >= v14) {
        goto LABEL_27;
      }
    }
    uint64_t v34 = FigSignalErrorAt();
    uint64_t v31 = 0;
  }
  else
  {
LABEL_27:
    size_t v29 = CMBlockBufferGetDataLength(theBuffer);
    CFMutableArrayRef Mutable = CFDataCreateMutable(allocator, v29);
    uint64_t v31 = Mutable;
    if (Mutable)
    {
      CFDataSetLength(Mutable, v29);
      int v32 = theBuffer;
      MutableBytePtr = CFDataGetMutableBytePtr(v31);
      uint64_t v34 = CMBlockBufferCopyDataBytes(v32, 0, v29, MutableBytePtr);
      if (!v34)
      {
        unsigned __int16 v35 = blockBufferOut;
        CMBlockBufferRef blockBufferOut = 0;
        float32x4_t v81 = v31;
        uint64_t v31 = 0;
        a2 = v72;
        a5 = v75;
        uint64_t v9 = v77;
        a4 = v73;
        a3 = *(opaqueCMSampleBuffer **)v79;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v34 = FigSignalErrorAt();
    }
  }
  a2 = v72;
  a5 = v75;
  uint64_t v9 = v77;
  a4 = v73;
LABEL_132:
  a3 = *(opaqueCMSampleBuffer **)v79;
LABEL_123:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  unsigned __int16 v35 = 0;
LABEL_30:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v34) {
    goto LABEL_37;
  }
  uint64_t v36 = dovi_createDerivedSampleBuffer(a3, v35, *(const opaqueCMFormatDescription **)(DerivedStorage + 32), (CMSampleBufferRef *)&cf);
  if (!v36)
  {
LABEL_48:
    if (!*(unsigned char *)(DerivedStorage + 105))
    {
      long long v37 = 0;
      goto LABEL_108;
    }
    int v45 = *(_DWORD *)(DerivedStorage + 108);
    if (v45 != 2)
    {
      if (v45 != 1)
      {
        long long v37 = 0;
LABEL_106:
        float32x4_t v65 = (opaqueCMSampleBuffer *)cf;
        if (cf) {
          goto LABEL_109;
        }
        float32x4_t v66 = CMSampleBufferGetDataBuffer(a3);
        uint64_t v67 = dovi_createDerivedSampleBuffer(a3, v66, *(const opaqueCMFormatDescription **)(DerivedStorage + 32), (CMSampleBufferRef *)&cf);
        if (v67)
        {
LABEL_136:
          uint64_t v34 = v67;
          goto LABEL_111;
        }
LABEL_108:
        float32x4_t v65 = (opaqueCMSampleBuffer *)cf;
        if (!cf)
        {
LABEL_135:
          uint64_t v67 = FigSignalErrorAt();
          goto LABEL_136;
        }
LABEL_109:
        int v68 = malloc_type_malloc(0x20uLL, 0x60040FFD3A10EuLL);
        if (v68)
        {
          *int v68 = v9;
          v68[1] = a2;
          uint64_t v69 = v81;
          float32x4_t v81 = 0;
          v68[2] = v69;
          v68[3] = v37;
          uint64_t v34 = VTDecompressionSessionDecodeFrame(*(VTDecompressionSessionRef *)(DerivedStorage + 40), v65, a4, v68, a5);
          long long v37 = 0;
          if (!v34) {
            goto LABEL_112;
          }
          goto LABEL_111;
        }
        goto LABEL_135;
      }
      *(void *)float32x4_t v80 = a3;
      long long v46 = CMSampleBufferGetDataBuffer(a3);
      long long v37 = v46;
      CMBlockBufferRef blockBufferOut = 0;
      CMBlockBufferRef theBuffer = 0;
      if (v46)
      {
        VTDecodeFrameFlags v74 = a4;
        int8x16_t v76 = a5;
        uint64_t v78 = v9;
        long long v47 = a2;
        size_t v48 = CMBlockBufferGetDataLength(v46);
        CFAllocatorRef v49 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t v50 = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, &blockBufferOut);
        if (v50)
        {
LABEL_129:
          uint64_t v34 = v50;
          long long v37 = 0;
          goto LABEL_96;
        }
        if (v48)
        {
          size_t v51 = 0;
          while (v51 + 5 <= v48)
          {
            LODWORD(destination) = 0;
            uint64_t v52 = CMBlockBufferCopyDataBytes(v37, v51, 4uLL, &destination);
            if (v52) {
              goto LABEL_127;
            }
            if (!destination || (uint64_t v53 = bswap32(destination), v51 + 4 + v53 > v48))
            {
              uint64_t v52 = FigSignalErrorAt();
LABEL_127:
              uint64_t v34 = v52;
              a2 = v47;
              a5 = v76;
              uint64_t v9 = v78;
              a4 = v74;
              long long v37 = 0;
              goto LABEL_99;
            }
            LOBYTE(totalLengthOut) = 0;
            if (!CMBlockBufferCopyDataBytes(v37, v51 + 4, 1uLL, &totalLengthOut)
              && totalLengthOut == 78)
            {
              LOBYTE(totalLengthOut) = 0;
              if (!CMBlockBufferCopyDataBytes(v37, v51 + 5, 1uLL, &totalLengthOut)
                && totalLengthOut == 1)
              {
                LOBYTE(totalLengthOut) = 0;
                if (!CMBlockBufferCopyDataBytes(v37, v51 + 6, 1uLL, &totalLengthOut)
                  && totalLengthOut == 4)
                {
                  LOBYTE(totalLengthOut) = 0;
                  if (!CMBlockBufferCopyDataBytes(v37, v51 + 8, 1uLL, &totalLengthOut)
                    && totalLengthOut == 181)
                  {
                    LOBYTE(totalLengthOut) = 0;
                    if (!CMBlockBufferCopyDataBytes(v37, v51 + 9, 1uLL, &totalLengthOut) && !(_BYTE)totalLengthOut)
                    {
                      LOBYTE(totalLengthOut) = 0;
                      if (!CMBlockBufferCopyDataBytes(v37, v51 + 10, 1uLL, &totalLengthOut)
                        && totalLengthOut == 60)
                      {
                        LOBYTE(totalLengthOut) = 0;
                        if (!CMBlockBufferCopyDataBytes(v37, v51 + 11, 1uLL, &totalLengthOut) && !(_BYTE)totalLengthOut)
                        {
                          LOBYTE(totalLengthOut) = 0;
                          if (!CMBlockBufferCopyDataBytes(v37, v51 + 12, 1uLL, &totalLengthOut)
                            && totalLengthOut == 1)
                          {
                            LOBYTE(totalLengthOut) = 0;
                            if (!CMBlockBufferCopyDataBytes(v37, v51 + 13, 1uLL, &totalLengthOut)
                              && totalLengthOut == 4)
                            {
                              uint64_t v50 = CMBlockBufferAppendBufferReference(blockBufferOut, v37, v51 + 6, (v53 - 2), 0);
                              if (v50) {
                                goto LABEL_129;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v51 += (v53 + 4);
            if (v51 >= v48) {
              goto LABEL_79;
            }
          }
          uint64_t v50 = FigSignalErrorAt();
          goto LABEL_129;
        }
LABEL_79:
        size_t v54 = CMBlockBufferGetDataLength(blockBufferOut);
        if (!v54)
        {
          long long v37 = 0;
          uint64_t v34 = 0;
LABEL_96:
          float v57 = 0;
LABEL_97:
          a2 = v47;
          a5 = v76;
          uint64_t v9 = v78;
          a4 = v74;
          goto LABEL_100;
        }
        size_t v55 = v54;
        float v56 = CFDataCreateMutable(v49, v54);
        float v57 = v56;
        if (v56)
        {
          CFDataSetLength(v56, v55);
          float v58 = blockBufferOut;
          float v59 = CFDataGetMutableBytePtr(v57);
          uint64_t v60 = CMBlockBufferCopyDataBytes(v58, 0, v55, v59);
          if (!v60)
          {
            a2 = v47;
            a5 = v76;
            uint64_t v9 = v78;
            a4 = v74;
            if (FigH264Bridge_CopyDataWithEmulationPreventionBytesRemoved())
            {
              uint64_t v34 = FigSignalErrorAt();
              if (theBuffer) {
                CFRelease(theBuffer);
              }
              long long v37 = 0;
              goto LABEL_100;
            }
            long long v37 = theBuffer;
            if (theBuffer)
            {
              uint64_t v34 = 0;
              CMBlockBufferRef theBuffer = 0;
LABEL_100:
              if (blockBufferOut) {
                CFRelease(blockBufferOut);
              }
              if (v57) {
                CFRelease(v57);
              }
              a3 = *(opaqueCMSampleBuffer **)v80;
              goto LABEL_105;
            }
            uint64_t v34 = 0;
            long long v37 = v57;
LABEL_99:
            float v57 = 0;
            goto LABEL_100;
          }
        }
        else
        {
          uint64_t v60 = FigSignalErrorAt();
        }
        uint64_t v34 = v60;
        long long v37 = 0;
        goto LABEL_97;
      }
      uint64_t v34 = FigSignalErrorAt();
      goto LABEL_99;
    }
    CFDictionaryRef v61 = CMSampleBufferGetDataBuffer(a3);
    CMBlockBufferRef blockBufferOut = 0;
    destination = 0;
    CMBlockBufferRef theBuffer = 0;
    size_t totalLengthOut = 0;
    if (v61)
    {
      float v62 = v61;
      size_t v63 = CMBlockBufferGetDataLength(v61);
      uint64_t v64 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v62, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, v63, 0, &theBuffer);
      if (v64) {
        goto LABEL_138;
      }
      if (theBuffer)
      {
        uint64_t v64 = CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &destination);
        if (!v64)
        {
          uint64_t v34 = FigAV1Bridge_CopyITU_T_T35MetadataHDR10PlusMetadata();
          if (!v34)
          {
            long long v37 = blockBufferOut;
            CMBlockBufferRef blockBufferOut = 0;
            goto LABEL_92;
          }
          FigSignalErrorAt();
          if (blockBufferOut) {
            CFRelease(blockBufferOut);
          }
LABEL_148:
          long long v37 = 0;
LABEL_92:
          if (theBuffer) {
            CFRelease(theBuffer);
          }
LABEL_105:
          if (v34) {
            goto LABEL_111;
          }
          goto LABEL_106;
        }
LABEL_138:
        uint64_t v34 = v64;
        FigSignalErrorAt();
        goto LABEL_148;
      }
    }
    uint64_t v34 = FigSignalErrorAt();
    goto LABEL_148;
  }
  uint64_t v34 = v36;
LABEL_37:
  long long v37 = 0;
LABEL_111:
  dovi_emitDecodedFrame(v9, a2, v34, 0, 0);
LABEL_112:
  if (v35) {
    CFRelease(v35);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v81) {
    CFRelease(v81);
  }
  if (v37) {
    CFRelease(v37);
  }
  return v34;
}

uint64_t DolbyVisionDecoder_CopySupportedPropertyDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v12 = 0;
  CFTypeID v13 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    uint64_t v8 = FigSignalErrorAt();
LABEL_13:
    CFMutableArrayRef Mutable = 0;
    goto LABEL_5;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 40);
  if (v7)
  {
    uint64_t v8 = VTSessionCopySupportedPropertyDictionary(v7, (CFDictionaryRef *)&cf);
    if (!v8)
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(Mutable, @"SublayerDecoderSpecification", v5);
      CFDictionarySetValue(Mutable, @"PropagatePerFrameHDRDisplayMetadata", v5);
      CFDictionarySetValue(Mutable, @"PixelTransferProperties", v5);
      CFTypeRef v12 = cf;
      CFTypeID v13 = Mutable;
      FigCFCreateCombinedDictionary();
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  CFMutableArrayRef Mutable = 0;
  uint64_t v8 = 4294954393;
LABEL_5:
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v8;
}

CFDictionaryRef dovi_shouldAllowInterchangeCompressedPixelFormatForHDRPlaybackToCA()
{
  CFDictionaryRef result = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E4F24EE0]);
    if (result)
    {
      CFArrayRef v1 = result;
      CFTypeID v2 = CFGetTypeID(result);
      if (v2 == CFArrayGetTypeID())
      {
        CFArrayGetValueAtIndex(v1, 0);
        FigCFDictionaryGetInt32IfPresent();
      }
      return 0;
    }
  }
  return result;
}

void dovi_singleImageDecompressionOutput(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __CVBuffer *a5)
{
  if (a3)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *(const void **)(a2 + 8);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (a5) {
      dovi_attachMetadataToPixelBuffer(*(void *)a2, *(const void **)(a2 + 16), *(const void **)(a2 + 24), a5);
    }
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *(const void **)(a2 + 8);
    uint64_t v8 = a4 | 0x1000000u;
    a3 = 0;
    uint64_t v9 = a5;
  }
  dovi_emitDecodedFrame(v6, v7, a3, v8, v9);
  CFTypeRef v12 = *(const void **)(a2 + 16);
  if (v12) {
    CFRelease(v12);
  }
  CFTypeID v13 = *(const void **)(a2 + 24);
  if (v13) {
    CFRelease(v13);
  }

  free((void *)a2);
}

void dovi_multiImageDecompressionOutput(int a1, uint64_t a2, uint64_t a3, int a4, CMTaggedBufferGroupRef group)
{
  if (a3 || !group)
  {
    uint64_t v12 = *(void *)a2;
    CFTypeID v13 = *(const void **)(a2 + 8);
    uint64_t v14 = 0;
    CFAllocatorRef v15 = 0;
  }
  else
  {
    CMItemCount Count = CMTaggedBufferGroupGetCount(group);
    if (Count >= 1)
    {
      CMItemCount v9 = Count;
      for (uint64_t i = 0; i != v9; ++i)
      {
        CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
        if (CVPixelBufferAtIndex) {
          dovi_attachMetadataToPixelBuffer(*(void *)a2, *(const void **)(a2 + 16), *(const void **)(a2 + 24), CVPixelBufferAtIndex);
        }
      }
    }
    uint64_t v12 = *(void *)a2;
    CFTypeID v13 = *(const void **)(a2 + 8);
    uint64_t v14 = a4 | 0x1000000u;
    a3 = 0;
    CFAllocatorRef v15 = group;
  }
  dovi_emitDecodedMultiImageFrame(v12, v13, a3, v14, v15);
  uint64_t v16 = *(const void **)(a2 + 16);
  if (v16) {
    CFRelease(v16);
  }
  size_t v17 = *(const void **)(a2 + 24);
  if (v17) {
    CFRelease(v17);
  }

  free((void *)a2);
}

void dovi_emitDecodedFrame(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  VTDecoderSessionEmitDecodedFrame(*(uint64_t **)(DerivedStorage + 8), a2, a3, a4, a5);
  --*(_DWORD *)(DerivedStorage + 80);
  int v10 = *(NSObject **)(DerivedStorage + 72);

  dispatch_group_leave(v10);
}

void dovi_attachMetadataToPixelBuffer(uint64_t a1, const void *a2, const void *a3, __CVBuffer *a4)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned int v8 = *(_DWORD *)(DerivedStorage + 100);
  BOOL v9 = v8 > 0xA;
  int v10 = (1 << v8) & 0x446;
  if (!v9 && v10 != 0) {
    CVBufferSetAttachment(a4, (CFStringRef)*MEMORY[0x1E4F24BC8], (CFTypeRef)*MEMORY[0x1E4F24BF8], kCVAttachmentMode_ShouldPropagate);
  }
  if (!*(unsigned char *)(DerivedStorage + 57) && *(unsigned char *)(DerivedStorage + 56))
  {
    if (a2)
    {
      if (*(unsigned char *)(DerivedStorage + 104))
      {
        CVBufferSetAttachment(a4, (CFStringRef)*MEMORY[0x1E4F24AF0], a2, kCVAttachmentMode_ShouldPropagate);
        if (*(_DWORD *)(DerivedStorage + 100) == 2) {
          CVBufferSetAttachment(a4, (CFStringRef)*MEMORY[0x1E4F24AE8], @"1", kCVAttachmentMode_ShouldPropagate);
        }
      }
    }
    if (a3 && *(unsigned char *)(DerivedStorage + 105))
    {
      CFStringRef v12 = (const __CFString *)*MEMORY[0x1E4F24B30];
      CVBufferSetAttachment(a4, v12, a3, kCVAttachmentMode_ShouldPropagate);
    }
  }
}

void dovi_emitDecodedMultiImageFrame(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, OpaqueCMTaggedBufferGroup *a5)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  VTDecoderSessionEmitDecodedMultiImageFrame(*(uint64_t **)(DerivedStorage + 8), a2, a3, a4, a5);
  --*(_DWORD *)(DerivedStorage + 80);
  int v10 = *(NSObject **)(DerivedStorage + 72);

  dispatch_group_leave(v10);
}

uint64_t dovi_createDerivedSampleBuffer(opaqueCMSampleBuffer *a1, CMBlockBufferRef theBuffer, const opaqueCMFormatDescription *a3, CMSampleBufferRef *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  CMSampleBufferRef sbuf = 0;
  memset(&timingInfoOut, 0, sizeof(timingInfoOut));
  size_t sampleSizeArray = CMBlockBufferGetDataLength(theBuffer);
  CMSampleBufferGetSampleTimingInfo(a1, 0, &timingInfoOut);
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v9 = CMSampleBufferCreateReady((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theBuffer, a3, 1, 1, &timingInfoOut, 1, &sampleSizeArray, &sbuf);
  if (v9)
  {
    uint64_t v28 = v9;
  }
  else
  {
    CMPropagateAttachments(a1, sbuf);
    CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
    if (!SampleAttachmentsArray) {
      goto LABEL_16;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    CFArrayRef v12 = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
    CFTypeID v13 = (void *)CFArrayGetValueAtIndex(v12, 0);
    CFDictionaryApplyFunction(ValueAtIndex, (CFDictionaryApplierFunction)dovi_dictionarySetValue, v13);
    int64_t SampleSize = CMSampleBufferGetSampleSize(a1, 0);
    int64_t v15 = CMSampleBufferGetSampleSize(sbuf, 0);
    uint64_t v16 = SampleSize - v15;
    if (SampleSize == v15) {
      goto LABEL_16;
    }
    if (SampleSize >= v15)
    {
      size_t v17 = (const void *)*MEMORY[0x1E4F1F1A0];
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v13, (const void *)*MEMORY[0x1E4F1F1A0]);
      if (!Value) {
        goto LABEL_16;
      }
      CFDataRef v19 = Value;
      unint64_t Length = CFDataGetLength(Value);
      if ((Length & 7) == 0)
      {
        unint64_t v21 = Length;
        if (Length > 7)
        {
          CFMutableDictionaryRef MutableCopy = CFDataCreateMutableCopy(v8, 0, v19);
          if (MutableCopy)
          {
            size_t v23 = MutableCopy;
            unsigned int v24 = &CFDataGetMutableBytePtr(MutableCopy)[8 * (v21 >> 3)];
            unsigned int v27 = *((_DWORD *)v24 - 2);
            size_t v25 = v24 - 8;
            unsigned int v26 = v27;
            if (v16 > v27)
            {
              uint64_t v28 = FigSignalErrorAt();
            }
            else
            {
              *(_DWORD *)size_t v25 = v26 - v16;
              CFDictionarySetValue((CFMutableDictionaryRef)v13, v17, v23);
              uint64_t v28 = 0;
            }
            CFRelease(v23);
            if (v28) {
              goto LABEL_12;
            }
LABEL_16:
            FigSampleBufferGetDecryptor();
            FigSampleBufferSetDecryptor();
            size_t v29 = sbuf;
            CMSampleBufferGetOutputPresentationTimeStamp(&outputPresentationTimeStamp, a1);
            CMSampleBufferSetOutputPresentationTimeStamp(v29, &outputPresentationTimeStamp);
            uint64_t v28 = 0;
            *a4 = sbuf;
            return v28;
          }
        }
      }
    }
    uint64_t v28 = FigSignalErrorAt();
    if (!v28) {
      goto LABEL_16;
    }
  }
LABEL_12:
  if (sbuf) {
    CFRelease(sbuf);
  }
  return v28;
}

void dovi_dictionarySetValue(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

void VTTileCompressionSessionInvalidate(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 168))
  {
    CFTypeID v2 = *(void **)(a1 + 160);
    if (v2)
    {
      VTCompressionSessionRemote_Invalidate(v2);
      *(unsigned char *)(a1 + 168) = 1;
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 72);
      if (v3 && *(void *)(a1 + 136))
      {
        VTTileCompressionSessionCompleteTiles(a1);
        uint64_t v3 = *(void *)(a1 + 72);
      }
      uint64_t CMBaseObject = VTVideoEncoderGetCMBaseObject(v3);
      if (CMBaseObject)
      {
        uint64_t v5 = CMBaseObject;
        uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v7 = v6 ? v6 : 0;
        CFAllocatorRef v8 = *(void (**)(uint64_t))(v7 + 24);
        if (v8) {
          v8(v5);
        }
      }
      *(unsigned char *)(a1 + 168) = 1;
      if (*(_DWORD *)(a1 + 172))
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CFMutableDictionaryRef v10 = Mutable;
          CFAbsoluteTimeGetCurrent();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigPlaybackLogPowerEvent();
          CFRelease(v10);
        }
      }
    }
  }
}

uint64_t VTTileCompressionSessionCompleteTiles(uint64_t a1)
{
  if (!a1) {
    return 4294954394;
  }
  if (*(unsigned char *)(a1 + 168) == 1) {
    return 4294954393;
  }
  if (*(void *)(a1 + 160))
  {
    uint64_t v1 = *(void *)(a1 + 160);
    return VTTileCompressionSessionRemote_CompleteTiles(v1);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 72);
    CFAllocatorRef v4 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    if (*v5 >= 3uLL && (uint64_t v6 = (uint64_t (*)(uint64_t))v5[20]) != 0)
    {
      return v6(v3);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t VTTileCompressionSessionGetTypeID()
{
  return sVTTileCompressionSessionID;
}

void RegisterVTTileCompressionSession()
{
  uint64_t v0 = (const void *)_CFRuntimeRegisterClass();
  sVTTileCompressionSessionID = (uint64_t)v0;
  sVTTileCompressionSessionPropertyCallbacks = 0;
  unk_1EB3B8CE0 = VTTileCompressionSessionCopySupportedPropertyDictionary;
  qword_1EB3B8CE8 = (uint64_t)VTTileCompressionSessionSetProperty;
  qword_1EB3B8CF0 = (uint64_t)VTTileCompressionSessionCopyProperty;
  qword_1EB3B8CF8 = (uint64_t)VTTileCompressionSessionSetProperties;
  qword_1EB3B8D00 = (uint64_t)VTTileCompressionSessionCopySerializableProperties;

  VTSessionRegisterCallbacksForTypeID(&sVTTileCompressionSessionPropertyCallbacks, v0);
}

uint64_t VTTileCompressionSessionCopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  v15[0] = 0;
  v15[1] = 0;
  if (a2 && (*a2 = 0, a1) && *(unsigned char *)(a1 + 168) != 1)
  {
    uint64_t v3 = *(void *)(a1 + 160);
    if (v3)
    {
      return VTCompressionSessionRemote_CopySupportedPropertyDictionary(v3);
    }
    uint64_t v5 = *(void *)(a1 + 72);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    CFAllocatorRef v8 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v7 + 32);
    if (v8)
    {
      uint64_t v9 = v8(v5, &cf);
      if (v9 != -12782)
      {
        uint64_t v10 = v9;
        if (v9)
        {
          FigSignalErrorAt();
          goto LABEL_21;
        }
      }
    }
    if (cf)
    {
      v15[0] = cf;
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(void *)(a1 + 152);
    if (v12) {
      v15[v11] = v12;
    }
    uint64_t v13 = FigCFCreateCombinedDictionary();
  }
  else
  {
    uint64_t v13 = FigSignalErrorAt();
  }
  uint64_t v10 = v13;
LABEL_21:
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

uint64_t VTTileCompressionSessionSetProperty(uint64_t a1, void *key, const __CFNumber *a3)
{
  if (a1 && *(unsigned char *)(a1 + 168) != 1)
  {
    uint64_t v6 = *(void *)(a1 + 160);
    if (v6)
    {
      return VTCompressionSessionRemote_SetProperty(v6, key, (uint64_t)a3);
    }
    CFDictionaryRef v8 = *(const __CFDictionary **)(a1 + 152);
    if (v8 && CFDictionaryContainsKey(v8, key))
    {
      if (CFEqual(@"VideoEncoderPixelBufferAttributes", key)
        || CFEqual(@"CanvasPixelBufferAttributes", key)
        || CFEqual(@"TileEncoderRequirements", key))
      {
        uint64_t v9 = FigSignalErrorAt();
      }
      else
      {
        if (CFEqual(@"ClientPID", key)) {
          CFNumberGetValue(a3, kCFNumberSInt32Type, (void *)(a1 + 172));
        }
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = 4294954396;
    }
    if (vtTileCompressionSessionIsPropertyHandledByVideoEncoder(a1, key))
    {
      uint64_t CMBaseObject = VTVideoEncoderGetCMBaseObject(*(void *)(a1 + 72));
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(uint64_t (**)(uint64_t, void *, const __CFNumber *))(v12 + 56);
      if (v13)
      {
        return v13(CMBaseObject, key, a3);
      }
      return 4294954514;
    }
    return v9;
  }

  return FigSignalErrorAt();
}

BOOL vtTileCompressionSessionIsPropertyHandledByVideoEncoder(uint64_t a1, const void *a2)
{
  CFDictionaryRef theDict = 0;
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, CFDictionaryRef *))(v5 + 32);
  if (!v6) {
    return 0;
  }
  v6(v3, &theDict);
  if (!theDict) {
    return 0;
  }
  BOOL v7 = CFDictionaryContainsKey(theDict, a2) != 0;
  if (theDict) {
    CFRelease(theDict);
  }
  return v7;
}

uint64_t VTTileCompressionSessionCopyProperty(uint64_t a1, void *key, uint64_t a3, void *a4)
{
  if (a4 && (*a4 = 0, a1) && *(unsigned char *)(a1 + 168) != 1)
  {
    uint64_t v8 = *(void *)(a1 + 160);
    if (v8)
    {
      return VTCompressionSessionRemote_CopyProperty(v8);
    }
    else
    {
      CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 152);
      if (v10 && CFDictionaryContainsKey(v10, key))
      {
        if (CFEqual(@"VideoEncoderPixelBufferAttributes", key))
        {
          uint64_t v11 = *(NSObject **)(a1 + 144);
          v19[0] = MEMORY[0x1E4F143A8];
          v19[1] = 0x40000000;
          v19[2] = __VTTileCompressionSessionCopyProperty_block_invoke;
          v19[3] = &__block_descriptor_tmp_21;
          v19[4] = a4;
          v19[5] = a1;
          uint64_t v12 = v19;
        }
        else if (CFEqual(@"CanvasPixelBufferAttributes", key))
        {
          uint64_t v11 = *(NSObject **)(a1 + 144);
          v18[0] = MEMORY[0x1E4F143A8];
          v18[1] = 0x40000000;
          v18[2] = __VTTileCompressionSessionCopyProperty_block_invoke_2;
          v18[3] = &__block_descriptor_tmp_1;
          v18[4] = a4;
          v18[5] = a1;
          uint64_t v12 = v18;
        }
        else
        {
          uint64_t result = CFEqual(@"TileEncoderRequirements", key);
          if (!result) {
            return result;
          }
          uint64_t v11 = *(NSObject **)(a1 + 144);
          v17[0] = MEMORY[0x1E4F143A8];
          v17[1] = 0x40000000;
          v17[2] = __VTTileCompressionSessionCopyProperty_block_invoke_3;
          v17[3] = &__block_descriptor_tmp_2;
          v17[4] = a4;
          v17[5] = a1;
          uint64_t v12 = v17;
        }
        dispatch_sync(v11, v12);
        return 0;
      }
      else if (vtTileCompressionSessionIsPropertyHandledByVideoEncoder(a1, key))
      {
        uint64_t CMBaseObject = VTVideoEncoderGetCMBaseObject(*(void *)(a1 + 72));
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = *(uint64_t (**)(uint64_t, void *, uint64_t, void *))(v15 + 48);
        if (v16)
        {
          return v16(CMBaseObject, key, a3, a4);
        }
        else
        {
          return 4294954514;
        }
      }
      else
      {
        return 4294954396;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFTypeRef __VTTileCompressionSessionCopyProperty_block_invoke(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(*(void *)(a1 + 40) + 88);
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  **(void **)(a1 + 32) = result;
  return result;
}

CFTypeRef __VTTileCompressionSessionCopyProperty_block_invoke_2(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(*(void *)(a1 + 40) + 104);
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  **(void **)(a1 + 32) = result;
  return result;
}

CFTypeRef __VTTileCompressionSessionCopyProperty_block_invoke_3(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(*(void *)(a1 + 40) + 112);
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  **(void **)(a1 + 32) = result;
  return result;
}

uint64_t VTTileCompressionSessionSetProperties(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v18 = a1;
  uint64_t v19 = 0;
  if (!a1 || *(unsigned char *)(a1 + 168) == 1)
  {
    LODWORD(v19) = FigSignalErrorAt();
    return v19;
  }
  uint64_t v4 = *(void *)(a1 + 160);
  if (!v4)
  {
    if (theDict)
    {
      int v22 = 0;
      CFDictionaryRef v23 = 0;
      uint64_t context = *(void *)(a1 + 152);
      CFTypeRef cf = 0;
      uint64_t v6 = *(void *)(a1 + 72);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v8 + 32);
      if (v9 && (int v10 = v9(v6, &cf), v10 != -12782) && (v11 = v10) != 0)
      {
        FigSignalErrorAt();
        uint64_t v12 = 0;
        CFDictionaryRef v13 = 0;
      }
      else
      {
        CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)vtTileCompressionSessionAddPropertyToPartition, &context);
        int v11 = 0;
        uint64_t v12 = v22;
        CFDictionaryRef v13 = v23;
      }
      if (cf) {
        CFRelease(cf);
      }
      LODWORD(v19) = v11;
      if (v11)
      {
        if (!v13)
        {
LABEL_28:
          if (v12) {
            CFRelease(v12);
          }
          return v19;
        }
      }
      else
      {
        if (v12) {
          CFDictionaryApplyFunction((CFDictionaryRef)v12, (CFDictionaryApplierFunction)vtTileCompressionSessionSetOneProperty_0, &v18);
        }
        if (!v13) {
          goto LABEL_28;
        }
        uint64_t v14 = *(void *)(a1 + 72);
        uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v15) {
          uint64_t v16 = v15;
        }
        else {
          uint64_t v16 = 0;
        }
        size_t v17 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(v16 + 40);
        if (!v17 || (LODWORD(v19) = v17(v14, v13), v19 == -12782))
        {
          LODWORD(v19) = 0;
          CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)vtTileCompressionSessionSetOneProperty_0, &v18);
        }
      }
      CFRelease(v13);
      goto LABEL_28;
    }
    return v19;
  }

  return VTCompressionSessionRemote_SetProperties(v4, theDict);
}

uint64_t vtTileCompressionSessionSetOneProperty_0(void *key, const __CFNumber *a2, uint64_t a3)
{
  uint64_t result = VTTileCompressionSessionSetProperty(*(void *)a3, key, a2);
  if (!*(_DWORD *)(a3 + 8)) {
    *(_DWORD *)(a3 + 8) = result;
  }
  return result;
}

uint64_t VTTileCompressionSessionCopySerializableProperties(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3 && (*a3 = 0, a1) && *(unsigned char *)(a1 + 168) != 1)
  {
    if (*(void *)(a1 + 160))
    {
      uint64_t v5 = *(void *)(a1 + 160);
      return VTCompressionSessionRemote_CopySerializableProperties(v5);
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 72);
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      int v10 = *(uint64_t (**)(uint64_t, uint64_t, void *))(v9 + 48);
      if (!v10) {
        return 0;
      }
      uint64_t result = v10(v7, a2, a3);
      if (result == -12782) {
        return 0;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t VTTileCompressionSessionCreate(uint64_t a1, unint64_t a2, uint64_t a3, const __CFDictionary *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  unint64_t v10 = HIDWORD(a2);
  if (a9) {
    BOOL v11 = (int)a2 < 1;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11 || SHIDWORD(a2) < 1) {
    return 4294954394;
  }
  *a9 = 0;
  MEMORY[0x199705810](&VTTileCompressionSessionGetTypeID_sRegisterVTTileCompressionSessionOnce, RegisterVTTileCompressionSession);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v20 = Instance;
    if (VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode())
    {
      if (FigServer_IsVideocodecd()) {
        goto LABEL_17;
      }
    }
    else if (FigServer_IsServerProcess())
    {
      goto LABEL_17;
    }
    if (!VTShouldRunVideoEncodersInProcess())
    {
      uint64_t v52 = VTTileCompressionSessionRemote_Create(v20, a1, a2, a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t *)(v20 + 160));
      if (!v52)
      {
LABEL_58:
        uint64_t VideoEncoderInstanceInternal = 0;
        *(CFAbsoluteTime *)(v20 + 176) = CFAbsoluteTimeGetCurrent();
        *a9 = v20;
        return VideoEncoderInstanceInternal;
      }
      uint64_t VideoEncoderInstanceInternal = v52;
LABEL_55:
      CFRelease((CFTypeRef)v20);
      return VideoEncoderInstanceInternal;
    }
LABEL_17:
    *(_DWORD *)(v20 + 20) = a2;
    *(_DWORD *)(v20 + 24) = v10;
    *(_DWORD *)(v20 + 16) = a3;
    if (a4) {
      CFTypeRef v22 = CFRetain(a4);
    }
    else {
      CFTypeRef v22 = 0;
    }
    *(void *)(v20 + 32) = v22;
    if (a5) {
      CFTypeRef v23 = CFRetain(a5);
    }
    else {
      CFTypeRef v23 = 0;
    }
    *(void *)(v20 + 40) = v23;
    *(void *)(v20 + 48) = a7;
    *(void *)(v20 + 56) = a8;
    label = 0;
    asprintf(&label, "vttile-encoder-pending-tile-queue-%p", (const void *)v20);
    *(void *)(v20 + 128) = dispatch_queue_create(label, 0);
    free(label);
    *(void *)(v20 + 136) = 0;
    asprintf(&label, "vttile-encoder-callback-access-queue-%p", (const void *)v20);
    *(void *)(v20 + 144) = dispatch_queue_create(label, 0);
    free(label);
    CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable && (CFDictionaryRef v26 = CFDictionaryCreate(v24, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
    {
      CFDictionaryRef v27 = v26;
      CFDictionaryAddValue(Mutable, @"VideoEncoderPixelBufferAttributes", v26);
      CFDictionaryAddValue(Mutable, @"CanvasPixelBufferAttributes", v27);
      CFDictionaryAddValue(Mutable, @"ForgetCachedIOSurfaces", v27);
      CFDictionaryAddValue(Mutable, @"TileEncoderRequirements", v27);
      CFDictionarySetValue(Mutable, @"ClientPID", v27);
      CFRelease(v27);
    }
    else
    {
      FigSignalErrorAt();
    }
    *(void *)(v20 + 152) = Mutable;
    CFAllocatorRef v28 = CFGetAllocator((CFTypeRef)v20);
    size_t v29 = (CFTypeRef *)(v20 + 72);
    uint64_t VideoEncoderInstanceInternal = VTSelectAndCreateVideoEncoderInstanceInternal(a3, (uint64_t)v28, 0, *(CFTypeRef *)(v20 + 32), 0, (void *)(v20 + 72), 0, (CFIndex *)(v20 + 80), 0);
    if (!VideoEncoderInstanceInternal)
    {
      do
      {
        *(void *)(v20 + 64) = v20;
        CFDictionaryRef v31 = *(const __CFDictionary **)(v20 + 32);
        if (v31)
        {
          CFDataRef Value = CFDictionaryGetValue(v31, @"EncoderUsage");
          if (Value)
          {
            uint64_t v33 = Value;
            uint64_t CMBaseObject = VTVideoEncoderGetCMBaseObject(*v29);
            uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v36 = v35 ? v35 : 0;
            long long v37 = *(void (**)(uint64_t, __CFString *, const void *))(v36 + 56);
            if (v37) {
              v37(CMBaseObject, @"EncoderUsage", v33);
            }
          }
        }
        uint64_t v38 = *(void *)(v20 + 72);
        uint64_t v39 = *(void *)(v20 + 32);
        uint64_t v40 = *(void *)(v20 + 20);
        CFDictionaryRef v41 = *(void **)(CMBaseObjectGetVTable() + 16);
        if (v41) {
          uint64_t v42 = v41;
        }
        else {
          uint64_t v42 = 0;
        }
        if (*v42 >= 3uLL && (CFAllocatorRef v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v42[17]) != 0)
        {
          unsigned int v44 = v43(v38, v20 + 64, v39, v40, a6);
          if (!v44) {
            goto LABEL_58;
          }
        }
        else
        {
          unsigned int v44 = -12782;
        }
        if (VideoEncoderInstanceInternal) {
          uint64_t VideoEncoderInstanceInternal = VideoEncoderInstanceInternal;
        }
        else {
          uint64_t VideoEncoderInstanceInternal = v44;
        }
        uint64_t v45 = *(void *)(v20 + 80);
        uint64_t v46 = VTVideoEncoderGetCMBaseObject(*v29);
        if (v46)
        {
          uint64_t v47 = v46;
          uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v49 = v48 ? v48 : 0;
          uint64_t v50 = *(void (**)(uint64_t))(v49 + 24);
          if (v50) {
            v50(v47);
          }
        }
        if (*v29)
        {
          CFRelease(*v29);
          *size_t v29 = 0;
        }
        CFAllocatorRef v51 = CFGetAllocator((CFTypeRef)v20);
      }
      while (!VTSelectAndCreateVideoEncoderInstanceInternal(a3, (uint64_t)v51, 0, *(CFTypeRef *)(v20 + 32), v45 + 1, (void *)(v20 + 72), 0, (CFIndex *)(v20 + 80), 0));
    }
    FigSignalErrorAt();
    goto LABEL_55;
  }

  return FigSignalErrorAt();
}

uint64_t VTTileCompressionSessionPrepareToEncodeTiles(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 4294954394;
  }
  if (*(unsigned char *)(a1 + 168) == 1) {
    return 4294954393;
  }
  uint64_t v6 = *(void *)(a1 + 160);
  if (v6)
  {
    return VTTileCompressionSessionRemote_PrepareToEncodeTiles(v6, a2, a3);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v9 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = 0;
    }
    if (*v10 >= 3uLL && (BOOL v11 = (uint64_t (*)(uint64_t, uint64_t))v10[18]) != 0)
    {
      uint64_t result = v11(v8, a2);
      if (!a3) {
        return result;
      }
    }
    else
    {
      uint64_t result = 4294954514;
      if (!a3) {
        return result;
      }
    }
    *a3 = *(void *)(a1 + 96);
  }
  return result;
}

uint64_t VTTileCompressionSessionEncodeTile(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v22 = 0;
  if (!a1) {
    return 4294954394;
  }
  if (*(unsigned char *)(a1 + 168) == 1) {
    return 4294954393;
  }
  uint64_t v13 = *(void *)(a1 + 160);
  if (!v13)
  {
    uint64_t v24 = 0;
    size_t v25 = &v24;
    uint64_t v26 = 0x2000000000;
    int v27 = 0;
    uint64_t v15 = *(NSObject **)(a1 + 128);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __vtTileCompressionSessionTrackTileEnteringEncoder_block_invoke;
    block[3] = &unk_1E5786150;
    block[8] = a3;
    block[9] = a4;
    block[6] = a1;
    void block[7] = &v22;
    block[4] = &v24;
    block[5] = a6;
    dispatch_sync(v15, block);
    uint64_t v16 = *((unsigned int *)v25 + 6);
    _Block_object_dispose(&v24, 8);
    if (!v16)
    {
      uint64_t v17 = *(void *)(a1 + 72);
      uint64_t v18 = v22;
      uint64_t v19 = *(void **)(CMBaseObjectGetVTable() + 16);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      if (*v20 >= 3uLL
        && (unint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, const void *, uint64_t, uint64_t, uint64_t, _DWORD *))v20[19]) != 0)
      {
        uint64_t v16 = v21(v17, v18, a2, a3, a4, a5, a7);
      }
      else
      {
        uint64_t v16 = 4294954514;
      }
      ++*(_DWORD *)(a1 + 188);
    }
    return v16;
  }

  return VTTileCompressionSessionRemote_EncodeTile(v13, a2, a3, a4, a5, a6, a7);
}

uint64_t VTTileEncoderSessionSetTileAttributes(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 4294954394;
  }
  uint64_t v3 = *a1;
  if (!*a1) {
    return 4294954394;
  }
  if (*(unsigned char *)(v3 + 168) == 1) {
    return 4294954393;
  }
  uint64_t v4 = *(NSObject **)(v3 + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __VTTileEncoderSessionSetTileAttributes_block_invoke;
  block[3] = &__block_descriptor_tmp_5_4;
  block[4] = v3;
  block[5] = a3;
  block[6] = a2;
  dispatch_sync(v4, block);
  return 0;
}

void __VTTileEncoderSessionSetTileAttributes_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  CFTypeID v2 = (const void *)a1[5];
  uint64_t v4 = *(const void **)(v3 + 88);
  *(void *)(v3 + 88) = v2;
  if (v2) {
    CFRetain(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  *(void *)(a1[4] + 96) = a1[6];
}

uint64_t VTTileEncoderSessionCreateVideoFormatDescription(unsigned char **a1, CMVideoCodecType a2, int32_t a3, int32_t a4, const __CFDictionary *a5, CMVideoFormatDescriptionRef *a6)
{
  if (!a1) {
    return 4294954394;
  }
  uint64_t v6 = *a1;
  if (!v6) {
    return 4294954394;
  }
  if (v6[168] == 1) {
    return 4294954393;
  }
  CFAllocatorRef v12 = CFGetAllocator(v6);

  return CMVideoFormatDescriptionCreate(v12, a2, a3, a4, a5, a6);
}

uint64_t VTEncoderSessionEmitEncodedTile(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = 0;
  if (!a1) {
    goto LABEL_8;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    goto LABEL_7;
  }
  if (*(unsigned char *)(v5 + 168) == 1)
  {
    a1 = 0;
    uint64_t v11 = 4294954393;
    goto LABEL_6;
  }
  uint64_t v9 = *(NSObject **)(v5 + 128);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __vtTileCompressionSessionTrackTileLeavingEncoder_block_invoke;
  block[3] = &__block_descriptor_tmp_13_2;
  block[4] = v5;
  block[5] = a2;
  block[6] = &v13;
  dispatch_sync(v9, block);
  unint64_t v10 = v13;
  if (!v13)
  {
LABEL_7:
    a1 = 0;
LABEL_8:
    uint64_t v11 = 4294954394;
    goto LABEL_6;
  }
  ++*(_DWORD *)(v5 + 184);
  (*(void (**)(void, void, void, void, uint64_t, uint64_t, uint64_t))(v5 + 48))(*(void *)(v5 + 56), v10[1], v10[2], v10[3], a3, a4, a5);
  uint64_t v11 = 0;
  a1 = (uint64_t *)v13;
LABEL_6:
  free(a1);
  return v11;
}

uint64_t VTTileEncoderSessionSetTileEncodeRequirements(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 4294954394;
  }
  uint64_t v3 = *a1;
  if (!*a1) {
    return 4294954394;
  }
  if (*(unsigned char *)(v3 + 168) == 1) {
    return 4294954393;
  }
  uint64_t v4 = *(NSObject **)(v3 + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __VTTileEncoderSessionSetTileEncodeRequirements_block_invoke;
  block[3] = &__block_descriptor_tmp_6_6;
  block[4] = v3;
  block[5] = a2;
  block[6] = a3;
  dispatch_sync(v4, block);
  return 0;
}

void __VTTileEncoderSessionSetTileEncodeRequirements_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  CFTypeID v2 = (const void *)a1[5];
  uint64_t v4 = *(const void **)(v3 + 104);
  *(void *)(v3 + 104) = v2;
  if (v2) {
    CFRetain(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = *(const void **)(v5 + 112);
  uint64_t v7 = (const void *)a1[6];
  *(void *)(v5 + 112) = v7;
  if (v7) {
    CFRetain(v7);
  }
  if (v6)
  {
    CFRelease(v6);
  }
}

double vtTileCompressionSessionInit(_OWORD *a1)
{
  double result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void vtTileCompressionSessionFinalize(void *a1)
{
  VTTileCompressionSessionInvalidate((uint64_t)a1);
  CFTypeID v2 = a1[16];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[18];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[9];
  if (v4)
  {
    CFRelease(v4);
    a1[9] = 0;
  }
  uint64_t v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
    a1[4] = 0;
  }
  uint64_t v6 = (const void *)a1[5];
  if (v6)
  {
    CFRelease(v6);
    a1[5] = 0;
  }
  uint64_t v7 = (const void *)a1[19];
  if (v7)
  {
    CFRelease(v7);
    a1[19] = 0;
  }
  uint64_t v8 = (const void *)a1[11];
  if (v8)
  {
    CFRelease(v8);
    a1[11] = 0;
  }
  uint64_t v9 = (const void *)a1[14];
  if (v9)
  {
    CFRelease(v9);
    a1[14] = 0;
  }
  unint64_t v10 = (const void *)a1[13];
  if (v10)
  {
    CFRelease(v10);
    a1[13] = 0;
  }
  uint64_t v11 = (const void *)a1[20];
  if (v11)
  {
    CFRelease(v11);
    a1[20] = 0;
  }
}

CFTypeRef vtTileCompressionSessionCopyFormattingDesc()
{
  return CFRetain(@"[VTTileCompressionSession]");
}

__CFString *vtTileCompressionSessionCopyDebugDesc(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 16);
  CFAllocatorRef v3 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  if (v2 > 0xA)
  {
    if (v2 > 0x28)
    {
      unsigned int v2 = bswap32(v2);
      unsigned int v6 = v2 >> 8;
      uint64_t v5 = BYTE2(v2);
      LOBYTE(v7) = v2;
    }
    else
    {
      uint64_t v5 = 0;
      unsigned int v8 = *(_DWORD *)(a1 + 16);
      int v7 = v8 / 0xA + 48;
      unsigned int v6 = (v8 % 0xA) | 0x30;
    }
  }
  else
  {
    uint64_t v5 = 0;
    LOBYTE(v6) = 0;
    int v7 = *(_DWORD *)(a1 + 16) + 48;
  }
  CFAllocatorRef v9 = CFGetAllocator((CFTypeRef)a1);
  CFStringAppendFormat(Mutable, 0, @"<VTTileCompressionSession %p [%p]>{'%c%c%c%c',Tile size: %dx%d,videoEncoder:%p, }", a1, v9, HIBYTE(v2), v5, v6, v7, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 24), *(void *)(a1 + 72));
  return Mutable;
}

void vtTileCompressionSessionAddPropertyToPartition(void *key, const void *a2, CFDictionaryRef *a3)
{
  if (*a3 && CFDictionaryContainsKey(*a3, key))
  {
    CFMutableDictionaryRef Mutable = a3[2];
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      a3[2] = Mutable;
    }
  }
  else
  {
    CFDictionaryRef v7 = a3[1];
    if (!v7 || !CFDictionaryContainsKey(v7, key)) {
      return;
    }
    CFMutableDictionaryRef Mutable = a3[3];
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      a3[3] = Mutable;
    }
  }

  CFDictionarySetValue(Mutable, key, a2);
}

void *__vtTileCompressionSessionTrackTileEnteringEncoder_block_invoke(void *a1)
{
  double result = malloc_type_calloc(1uLL, 0x28uLL, 0x10A0040569D7752uLL);
  if (result)
  {
    result[1] = a1[5];
    uint64_t v3 = a1[6];
    uint64_t v4 = *(void *)(v3 + 120);
    *(void *)(v3 + 120) = v4 + 1;
    *double result = v4;
    result[2] = a1[8];
    result[3] = a1[9];
    uint64_t v5 = (void *)a1[7];
    if (v5) {
      *uint64_t v5 = v4;
    }
    result[4] = *(void *)(a1[6] + 136);
    *(void *)(a1[6] + 136) = result;
  }
  else
  {
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = -12904;
  }
  return result;
}

uint64_t __vtTileCompressionSessionTrackTileLeavingEncoder_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v4 = *(void **)(v1 + 136);
  uint64_t v3 = (void *)(v1 + 136);
  unsigned int v2 = v4;
  if (v4)
  {
    uint64_t v5 = v2;
    while (*v5 != *(void *)(result + 40))
    {
      uint64_t v5 = (void *)v5[4];
      if (!v5) {
        return result;
      }
    }
    if (v2 != v5)
    {
      do
      {
        unsigned int v6 = v2;
        unsigned int v2 = (void *)v2[4];
      }
      while (v2 != v5);
      uint64_t v3 = v6 + 4;
      unsigned int v2 = v5;
    }
    *uint64_t v3 = v2[4];
    **(void **)(result + 48) = v5;
  }
  return result;
}

uint64_t TestIPBVideoEncoder_CreateInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  if (!a3) {
    return 4294954394;
  }
  VTVideoEncoderGetClassID();
  uint64_t v3 = CMDerivedObjectCreate();
  if (!v3) {
    return 4294954392;
  }
  return v3;
}

void *TestIPBQueuedFrameRetain(uint64_t a1, long long *a2)
{
  uint64_t v3 = malloc_type_malloc(0x28uLL, 0x10200406E8F4065uLL);
  uint64_t v4 = v3;
  if (v3)
  {
    long long v5 = *a2;
    long long v6 = a2[1];
    void v3[4] = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v3 = v5;
    *((_OWORD *)v3 + 1) = v6;
  }
  else
  {
    FigSignalErrorAt();
  }
  return v4;
}

void TestIPBQueuedFrameRelease(int a1, void *a2)
{
}

__CFString *TestIPBQueuedFrameCopyDescription(uint64_t *a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v3 = *a1;
  CMTime time = *(CMTime *)(a1 + 1);
  Float64 Seconds = CMTimeGetSeconds(&time);
  CFStringAppendFormat(Mutable, 0, @"<frame %d, pts %1.3f, displayNumber %d>", v3, *(void *)&Seconds, *((unsigned int *)a1 + 8));
  return Mutable;
}

uint64_t TestIPBVideoEncoder_Invalidate()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)DerivedStorage[6];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[6] = 0;
  }
  unsigned int v2 = (const void *)DerivedStorage[15];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[15] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[13];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[13] = 0;
  }
  return 0;
}

__CFString *TestIPBVideoEncoder_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<TestIPBVideoEncoder %p>", a1);
  return Mutable;
}

uint64_t TestIPBVideoEncoder_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"AllowTemporalCompression"))
  {
    if (CFEqual(a2, @"AllowFrameReordering"))
    {
      CFDictionaryRef v7 = (const void **)MEMORY[0x1E4F1CFD0];
      int v8 = *(unsigned __int8 *)(DerivedStorage + 25);
      goto LABEL_5;
    }
    if (CFEqual(a2, @"MaxKeyFrameInterval"))
    {
      CFAllocatorRef v12 = (const void *)(DerivedStorage + 28);
    }
    else
    {
      if (CFEqual(a2, @"AllowOpenGOP"))
      {
        CFDictionaryRef v7 = (const void **)MEMORY[0x1E4F1CFD0];
        int v8 = *(unsigned __int8 *)(DerivedStorage + 32);
        goto LABEL_5;
      }
      if (!CFEqual(a2, @"MaxConsecutiveBFrames"))
      {
        if (CFEqual(a2, @"AllowDelayedIFrames"))
        {
          CFDictionaryRef v7 = (const void **)MEMORY[0x1E4F1CFD0];
          int v8 = *(unsigned __int8 *)(DerivedStorage + 40);
          goto LABEL_5;
        }
        if (CFEqual(a2, @"Quality"))
        {
          int SInt32 = (const void *)FigCFNumberCreateSInt32();
          goto LABEL_9;
        }
        if (CFEqual(a2, @"MVHEVCVideoLayerIDs"))
        {
          int SInt32 = *(const void **)(DerivedStorage + 48);
          if (!SInt32) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (CFEqual(a2, @"MVHEVCViewIDs") || CFEqual(a2, @"MVHEVCLeftAndRightViewIDs"))
        {
          int SInt32 = *(const void **)(DerivedStorage + 56);
          if (!SInt32) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (!CFEqual(a2, @"ExpectedFrameRate")) {
          return 4294954396;
        }
        CFAllocatorRef v12 = (const void *)(DerivedStorage + 72);
        CFNumberType v13 = kCFNumberFloatType;
LABEL_14:
        int SInt32 = CFNumberCreate(0, v13, v12);
        goto LABEL_9;
      }
      CFAllocatorRef v12 = (const void *)(DerivedStorage + 36);
    }
    CFNumberType v13 = kCFNumberSInt32Type;
    goto LABEL_14;
  }
  CFDictionaryRef v7 = (const void **)MEMORY[0x1E4F1CFD0];
  int v8 = *(unsigned __int8 *)(DerivedStorage + 24);
LABEL_5:
  if (!v8) {
    CFDictionaryRef v7 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  int SInt32 = *v7;
LABEL_8:
  int SInt32 = CFRetain(SInt32);
LABEL_9:
  uint64_t v10 = 0;
  *a4 = SInt32;
  return v10;
}

uint64_t TestIPBVideoEncoder_SetProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"AllowTemporalCompression"))
  {
    if (a3)
    {
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        Boolean Value = CFBooleanGetValue(a3);
        uint64_t result = 0;
        *(unsigned char *)(DerivedStorage + 24) = Value;
        return result;
      }
    }
    return 4294954394;
  }
  if (CFEqual(a2, @"AllowFrameReordering"))
  {
    if (a3)
    {
      CFTypeID v9 = CFBooleanGetTypeID();
      if (v9 == CFGetTypeID(a3))
      {
        Boolean v10 = CFBooleanGetValue(a3);
        uint64_t result = 0;
        *(unsigned char *)(DerivedStorage + 25) = v10;
        return result;
      }
    }
    return 4294954394;
  }
  if (CFEqual(a2, @"MaxKeyFrameInterval"))
  {
    if (a3)
    {
      CFTypeID v11 = CFNumberGetTypeID();
      if (v11 == CFGetTypeID(a3))
      {
        CFAllocatorRef v12 = (void *)(DerivedStorage + 28);
LABEL_13:
        CFNumberRef v13 = a3;
        CFNumberType v14 = kCFNumberSInt32Type;
LABEL_14:
        CFNumberGetValue(v13, v14, v12);
        return 0;
      }
    }
    return 4294954394;
  }
  if (CFEqual(a2, @"AllowOpenGOP"))
  {
    if (a3)
    {
      CFTypeID v15 = CFBooleanGetTypeID();
      if (v15 == CFGetTypeID(a3))
      {
        Boolean v16 = CFBooleanGetValue(a3);
        uint64_t result = 0;
        *(unsigned char *)(DerivedStorage + 32) = v16;
        return result;
      }
    }
    return 4294954394;
  }
  if (CFEqual(a2, @"MaxConsecutiveBFrames"))
  {
    if (a3)
    {
      CFTypeID v17 = CFNumberGetTypeID();
      if (v17 == CFGetTypeID(a3))
      {
        CFAllocatorRef v12 = (void *)(DerivedStorage + 36);
        goto LABEL_13;
      }
    }
    return 4294954394;
  }
  if (CFEqual(a2, @"AllowDelayedIFrames"))
  {
    if (a3)
    {
      CFTypeID v18 = CFBooleanGetTypeID();
      if (v18 == CFGetTypeID(a3))
      {
        Boolean v19 = CFBooleanGetValue(a3);
        uint64_t result = 0;
        *(unsigned char *)(DerivedStorage + 40) = v19;
        return result;
      }
    }
    return 4294954394;
  }
  if (CFEqual(a2, @"Quality"))
  {
    if (a3)
    {
      CFTypeID v20 = CFNumberGetTypeID();
      if (v20 == CFGetTypeID(a3)) {
        return 0;
      }
    }
    return 4294954394;
  }
  if (CFEqual(a2, @"MVHEVCVideoLayerIDs"))
  {
    if (a3)
    {
      CFTypeID v21 = CFGetTypeID(a3);
      if (v21 != CFArrayGetTypeID()) {
        return 4294954394;
      }
      uint64_t v22 = *(const void **)(DerivedStorage + 48);
      if (v22)
      {
        CFRelease(v22);
        *(void *)(DerivedStorage + 48) = 0;
      }
      CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3);
      uint64_t result = 0;
      *(void *)(DerivedStorage + 48) = Copy;
    }
    else
    {
      uint64_t result = *(void *)(DerivedStorage + 48);
      if (result)
      {
        CFRelease((CFTypeRef)result);
        uint64_t result = 0;
        *(void *)(DerivedStorage + 48) = 0;
      }
    }
  }
  else if (CFEqual(a2, @"MVHEVCViewIDs"))
  {
    if (a3)
    {
      CFTypeID v24 = CFGetTypeID(a3);
      if (v24 != CFArrayGetTypeID()) {
        return 4294954394;
      }
      size_t v25 = *(const void **)(DerivedStorage + 56);
      if (v25)
      {
        CFRelease(v25);
        *(void *)(DerivedStorage + 56) = 0;
      }
      CFArrayRef v26 = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3);
      uint64_t result = 0;
      *(void *)(DerivedStorage + 56) = v26;
    }
    else
    {
      uint64_t result = *(void *)(DerivedStorage + 56);
      if (result)
      {
        CFRelease((CFTypeRef)result);
        uint64_t result = 0;
        *(void *)(DerivedStorage + 56) = 0;
      }
    }
  }
  else if (CFEqual(a2, @"MVHEVCLeftAndRightViewIDs"))
  {
    if (a3)
    {
      CFTypeID v27 = CFGetTypeID(a3);
      if (v27 != CFArrayGetTypeID()) {
        return 4294954394;
      }
      CFAllocatorRef v28 = *(const void **)(DerivedStorage + 64);
      if (v28)
      {
        CFRelease(v28);
        *(void *)(DerivedStorage + 64) = 0;
      }
      CFArrayRef v29 = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3);
      uint64_t result = 0;
      *(void *)(DerivedStorage + 64) = v29;
    }
    else
    {
      uint64_t result = *(void *)(DerivedStorage + 64);
      if (result)
      {
        CFRelease((CFTypeRef)result);
        uint64_t result = 0;
        *(void *)(DerivedStorage + 64) = 0;
      }
    }
  }
  else
  {
    int v30 = CFEqual(a2, @"ExpectedFrameRate");
    uint64_t result = 4294954394;
    if (a3 && v30)
    {
      CFTypeID v31 = CFNumberGetTypeID();
      if (v31 == CFGetTypeID(a3))
      {
        CFAllocatorRef v12 = (void *)(DerivedStorage + 72);
        CFNumberRef v13 = a3;
        CFNumberType v14 = kCFNumberFloatType;
        goto LABEL_14;
      }
      return 4294954394;
    }
  }
  return result;
}

uint64_t TestIPBVideoEncoder_StartSession(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  long long v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFDictionaryRef v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)uint64_t DerivedStorage = a2;
  *(void *)(DerivedStorage + 76) = 0xF000000140;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 4, v5, v6);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetValue();
  uint64_t v9 = VTEncoderSessionSetPixelBufferAttributes(a2, Mutable);
  if (!v9) {
    uint64_t v9 = CMVideoFormatDescriptionCreate(v4, 0x69706220u, *(_DWORD *)(DerivedStorage + 76), *(_DWORD *)(DerivedStorage + 80), 0, (CMVideoFormatDescriptionRef *)(DerivedStorage + 104));
  }
  uint64_t v10 = v9;
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v10;
}

uint64_t TestIPBVideoEncoder_EncodeFrame(uint64_t a1, const void *a2, __CVBuffer *a3, CMTime *a4, uint64_t a5, const __CFDictionary *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CVPixelBufferGetWidth(a3) == *(_DWORD *)(DerivedStorage + 76)
    && CVPixelBufferGetHeight(a3) == *(_DWORD *)(DerivedStorage + 80)
    && !*(void *)(DerivedStorage + 48))
  {
    CMTime v13 = *a4;
    return TestIPBVideoEncoder_encodeFrameCommon(a1, a2, &v13, a6);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t TestIPBVideoEncoder_CompleteFrames(uint64_t a1)
{
  return TestIPBVideoEncoder_dequeueAndEmitAllQueuedFrames(a1, 80);
}

uint64_t TestIPBVideoEncoder_CopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  if (sCreateSupportedPropertyDictionaryOnce_4 != -1) {
    dispatch_once_f(&sCreateSupportedPropertyDictionaryOnce_4, 0, (dispatch_function_t)TestIPBVideoEncoder_CreateSupportedPropertyDictionary);
  }
  uint64_t result = 4294954392;
  if (a2)
  {
    if (sTestIPBVideoEncoder_SupportedPropertyDictionary)
    {
      CFTypeRef v4 = CFRetain((CFTypeRef)sTestIPBVideoEncoder_SupportedPropertyDictionary);
      uint64_t result = 0;
      *a2 = v4;
    }
  }
  return result;
}

uint64_t TestIPBVideoEncoder_EncodeMultiImageFrame(uint64_t a1, const void *a2, OpaqueCMTaggedBufferGroup *a3, CMTime *a4, uint64_t a5, const __CFDictionary *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3
    && (uint64_t v12 = DerivedStorage, *(void *)(DerivedStorage + 48))
    && (CMItemCount Count = CMTaggedBufferGroupGetCount(a3), CFArrayGetCount(*(CFArrayRef *)(v12 + 48)) == Count))
  {
    int v22 = 0;
    int v21 = 0;
    FigCFArrayGetIntAtIndex();
    FigCFArrayGetIntAtIndex();
    if (Count < 1)
    {
LABEL_12:
      CMTime v18 = *a4;
      return TestIPBVideoEncoder_encodeFrameCommon(a1, a2, &v18, a6);
    }
    else
    {
      CFIndex v14 = 0;
      long long v17 = *MEMORY[0x1E4F21DE8];
      while (1)
      {
        CMTaggedBufferGroupGetTagCollectionAtIndex(a3, v14);
        *(_OWORD *)&v18.value = v17;
        long long v20 = v17;
        uint64_t result = FigTagCollectionGetTagsWithCategory();
        if (result) {
          break;
        }
        FigTagGetSInt64Value();
        if (!FigCFArrayContainsInt()) {
          return FigSignalErrorAt();
        }
        uint64_t v19 = 0;
        uint64_t result = FigTagCollectionGetTagsWithCategory();
        if (result) {
          break;
        }
        CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
        if (CVPixelBufferGetWidth(CVPixelBufferAtIndex) != *(_DWORD *)(v12 + 76)
          || CVPixelBufferGetHeight(CVPixelBufferAtIndex) != *(_DWORD *)(v12 + 80))
        {
          return FigSignalErrorAt();
        }
        if (Count == ++v14) {
          goto LABEL_12;
        }
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t TestIPBVideoEncoder_encodeFrameCommon(uint64_t a1, const void *a2, CMTime *a3, const __CFDictionary *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v8 = !a4
    || (CFDictionaryRef v7 = CFDictionaryGetValue(a4, @"EncoderForceKeyframe")) == 0
    || CFEqual(v7, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) == 0;
  if (*(unsigned char *)(DerivedStorage + 24)) {
    BOOL v9 = !v8;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9 && *(_DWORD *)(DerivedStorage + 112) != 1)
  {
    --*(_DWORD *)(DerivedStorage + 112);
    int v18 = 80;
    if (*(unsigned char *)(DerivedStorage + 25))
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 120));
      BOOL v13 = 0;
      CFIndex v20 = *(int *)(DerivedStorage + 36);
      BOOL v10 = Count < v20;
      BOOL v17 = Count >= v20;
      if (Count >= v20) {
        int v18 = 80;
      }
      else {
        int v18 = 88;
      }
      if (Count >= v20) {
        int v21 = 66;
      }
      else {
        int v21 = 120;
      }
      int v29 = v21;
      char v16 = 1;
      BOOL v11 = Count < v20;
      BOOL v15 = Count >= v20;
      goto LABEL_27;
    }
    int v29 = 120;
    BOOL v10 = 0;
    BOOL v13 = 0;
    BOOL v15 = 0;
    BOOL v17 = 1;
    BOOL v11 = 1;
    goto LABEL_26;
  }
  *(_DWORD *)(DerivedStorage + 112) = *(_DWORD *)(DerivedStorage + 28);
  if (*(unsigned char *)(DerivedStorage + 40))
  {
    if (*(unsigned char *)(DerivedStorage + 32))
    {
      BOOL v10 = 0;
      BOOL v11 = 0;
      int v12 = *(_DWORD *)(DerivedStorage + 88);
      BOOL v13 = v12 != 1;
      if (v12 == 1) {
        int v14 = 98;
      }
      else {
        int v14 = 66;
      }
    }
    else
    {
      BOOL v10 = 0;
      BOOL v13 = 0;
      BOOL v11 = 0;
      int v14 = 80;
    }
    int v29 = v14;
    BOOL v17 = 1;
    int v18 = 73;
    BOOL v15 = 1;
LABEL_26:
    char v16 = 1;
    goto LABEL_27;
  }
  BOOL v10 = 0;
  BOOL v13 = 0;
  BOOL v15 = 0;
  char v16 = 0;
  int v29 = 80;
  BOOL v17 = 1;
  int v18 = 73;
  BOOL v11 = 1;
LABEL_27:
  uint64_t v22 = *(void *)DerivedStorage;
  CMTime value = *a3;
  uint64_t result = VTEncoderSessionEnqueuePresentationTimeStamp(v22, &value);
  if (!result)
  {
    BOOL v24 = v10;
    unsigned int v25 = *(_DWORD *)(DerivedStorage + 88);
    *(_DWORD *)(DerivedStorage + 88) = v25 + 1;
    if (!v17)
    {
      long long v31 = *(_OWORD *)&a3->value;
      CMTimeEpoch epoch = a3->epoch;
      uint64_t v26 = CMBaseObjectGetDerivedStorage();
      value.CMTime value = (CMTimeValue)a2;
      *(_OWORD *)&value.timescale = v31;
      CMTimeEpoch v34 = epoch;
      uint64_t v35 = v25;
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v26 + 120), 0, &value);
    }
    if ((v16 & 1) != 0 || (uint64_t result = TestIPBVideoEncoder_dequeueAndEmitAllQueuedFrames(a1, v29), !result))
    {
      if (v24)
      {
        if (v11) {
          return 0;
        }
        return TestIPBVideoEncoder_dequeueAndEmitAllQueuedFrames(a1, v29);
      }
      CMTime value = *a3;
      uint64_t result = TestIPBVideoEncoder_emitFrame(a1, v18, v13, a2, &value, v25);
      if (result) {
        BOOL v27 = 0;
      }
      else {
        BOOL v27 = v15;
      }
      if (v27) {
        return TestIPBVideoEncoder_dequeueAndEmitAllQueuedFrames(a1, v29);
      }
    }
  }
  return result;
}

uint64_t TestIPBVideoEncoder_dequeueAndEmitAllQueuedFrames(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  while (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 120)) >= 1)
  {
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    CFArrayRef v6 = *(const __CFArray **)(v5 + 120);
    CFIndex Count = CFArrayGetCount(v6);
    CFDictionaryRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(v6, Count - 1);
    BOOL v9 = *(const void **)ValueAtIndex;
    CMTime v14 = *(CMTime *)(ValueAtIndex + 8);
    int v10 = *((_DWORD *)ValueAtIndex + 8);
    CFArrayRef v11 = *(const __CFArray **)(v5 + 120);
    CFIndex v12 = CFArrayGetCount(v11);
    CFArrayRemoveValueAtIndex(v11, v12 - 1);
    uint64_t result = TestIPBVideoEncoder_emitFrame(a1, a2, 0, v9, &v14, v10);
    if (result) {
      return result;
    }
  }
  return 0;
}

uint64_t TestIPBVideoEncoder_emitFrame(uint64_t a1, int a2, int a3, const void *a4, CMTime *a5, int a6)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(v62, 0, sizeof(v62));
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  char v46 = 0;
  memset(v45, 0, sizeof(v45));
  char v44 = 0;
  memset(v43, 0, sizeof(v43));
  char v42 = 0;
  memset(v41, 0, sizeof(v41));
  CMBlockBufferRef dataBuffer = 0;
  dataunint64_t Length = 0;
  CMSampleBufferRef sbuf = 0;
  long long v34 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&sampleTimingArray.duration.CMTime value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v11 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  sampleTimingArray.duration.CMTimeEpoch epoch = v11;
  memset(&sampleTimingArray.presentationTimeStamp, 0, 48);
  int v12 = 1;
  __src[0] = 1;
  __src[1] = a2;
  int v13 = *(_DWORD *)(DerivedStorage + 84);
  *(_DWORD *)(DerivedStorage + 84) = v13 + 1;
  if (v13 >= 10)
  {
    unsigned int v14 = v13;
    do
    {
      ++v12;
      BOOL v15 = v14 > 0x63;
      v14 /= 0xAu;
    }
    while (v15);
  }
  LOBYTE(v45[0]) = v12;
  uint64_t v16 = (v12 - 1) + 1;
  do
  {
    *((unsigned char *)v45 + v16--) = (char)v13 % 10 + 48;
    v13 /= 10;
  }
  while ((int)v16 + 1 > 1);
  int v17 = 1;
  if (a6 >= 10)
  {
    unsigned int v18 = a6;
    do
    {
      ++v17;
      BOOL v15 = v18 > 0x63;
      v18 /= 0xAu;
    }
    while (v15);
  }
  LOBYTE(v43[0]) = v17;
  uint64_t v19 = (v17 - 1) + 1;
  do
  {
    *((unsigned char *)v43 + v19--) = (char)a6 % 10 + 48;
    a6 /= 10;
  }
  while ((int)v19 + 1 > 1);
  IPB_ClearStr(v41);
  uint64_t DataFromFrameStrings = IPB_SimulatePrediction((unsigned __int8 *)(DerivedStorage + 128), (unsigned __int8 *)(DerivedStorage + 385), (unsigned char *)(DerivedStorage + 642), __src, (unsigned __int8 *)v45, (unsigned __int8 *)v41);
  if (DataFromFrameStrings) {
    goto LABEL_40;
  }
  uint64_t DataFromFrameStrings = IPB_MakeDataFromFrameStrings(sourceBytes, &dataLength, __src, (unsigned __int8 *)v45, (unsigned __int8 *)v43, (unsigned __int8 *)v41);
  if (DataFromFrameStrings) {
    goto LABEL_40;
  }
  BOOL v21 = a2 == 73 && a3 == 0;
  BOOL v22 = !v21;
  CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t DataFromFrameStrings = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, dataLength, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, dataLength, 1u, &dataBuffer);
  if (DataFromFrameStrings
    || (uint64_t DataFromFrameStrings = CMBlockBufferReplaceDataBytes(sourceBytes, dataBuffer, 0, dataLength),
        DataFromFrameStrings)
    || (sampleTimingArray.presentationTimeStamp = *a5,
        *(_OWORD *)&sampleTimingArray.duration.CMTime value = v34,
        sampleTimingArray.duration.CMTimeEpoch epoch = v11,
        uint64_t DataFromFrameStrings = VTEncoderSessionDequeueDecodeTimeStamp(*(void *)DerivedStorage, (uint64_t)&sampleTimingArray.decodeTimeStamp), DataFromFrameStrings))
  {
LABEL_40:
    uint64_t v32 = DataFromFrameStrings;
    unsigned int v25 = 0;
  }
  else
  {
    uint64_t v24 = CMSampleBufferCreate(v23, dataBuffer, 1u, 0, 0, *(CMFormatDescriptionRef *)(DerivedStorage + 104), 1, 1, &sampleTimingArray, 1, &dataLength, &sbuf);
    unsigned int v25 = sbuf;
    if (!v24)
    {
      CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
      if (!SampleAttachmentsArray) {
        goto LABEL_34;
      }
      CFDictionaryRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
      CFDictionaryRemoveAllValues(ValueAtIndex);
      if (!ValueAtIndex) {
        goto LABEL_34;
      }
      if (v22)
      {
        CFAllocatorRef v28 = (const void *)*MEMORY[0x1E4F1CFD0];
        CFDictionarySetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F200], (const void *)*MEMORY[0x1E4F1CFD0]);
        CFDictionarySetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F1A8], v28);
        if (a3)
        {
          int v29 = (const void *)*MEMORY[0x1E4F1F208];
          int v30 = ValueAtIndex;
          long long v31 = v28;
LABEL_33:
          CFDictionarySetValue(v30, v29, v31);
LABEL_34:
          uint64_t v32 = 0;
          __src[__src[0] + 1] = 0;
          *((unsigned char *)v45 + LOBYTE(v45[0]) + 1) = 0;
          *((unsigned char *)v43 + LOBYTE(v43[0]) + 1) = 0;
          *((unsigned char *)v41 + LOBYTE(v41[0]) + 1) = 0;
          unsigned int v25 = sbuf;
          goto LABEL_35;
        }
        int v29 = (const void *)*MEMORY[0x1E4F1F1F8];
        if ((a2 & 0xFFFFFFDF) == 0x42) {
          long long v31 = (const void *)*MEMORY[0x1E4F1CFC8];
        }
        else {
          long long v31 = v28;
        }
      }
      else
      {
        int v29 = (const void *)*MEMORY[0x1E4F1F1A8];
        long long v31 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      int v30 = ValueAtIndex;
      goto LABEL_33;
    }
    uint64_t v32 = v24;
  }
LABEL_35:
  VTEncoderSessionEmitEncodedFrame(*(uint64_t **)DerivedStorage, a4, v32, 0, v25);
  if (dataBuffer) {
    CFRelease(dataBuffer);
  }
  if (sbuf) {
    CFRelease(sbuf);
  }
  return v32;
}

void TestIPBVideoEncoder_CreateSupportedPropertyDictionary()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v0, 10, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"AllowTemporalCompression", v2);
    CFDictionarySetValue(Mutable, @"AllowFrameReordering", v2);
    CFDictionarySetValue(Mutable, @"MaxKeyFrameInterval", v2);
    CFDictionarySetValue(Mutable, @"AllowOpenGOP", v2);
    CFDictionarySetValue(Mutable, @"Quality", v2);
    CFDictionarySetValue(Mutable, @"MaxConsecutiveBFrames", v2);
    CFDictionarySetValue(Mutable, @"AllowDelayedIFrames", v2);
    CFDictionarySetValue(Mutable, @"MVHEVCVideoLayerIDs", v2);
    CFDictionarySetValue(Mutable, @"MVHEVCViewIDs", v2);
    CFDictionarySetValue(Mutable, @"MVHEVCLeftAndRightViewIDs", v2);
    CFDictionarySetValue(Mutable, @"ExpectedFrameRate", v2);
    sTestIPBVideoEncoder_SupportedPropertyDictionary = (uint64_t)Mutable;
    CFRelease(v2);
  }
}

OSStatus VTCreateCGImageFromCVPixelBuffer(CVPixelBufferRef pixelBuffer, CFDictionaryRef options, CGImageRef *imageOut)
{
  int v51 = 0;
  CGDataProviderRef provider = 0;
  size_t v50 = 0;
  CFTypeRef cf = 0;
  CGImageRef image = 0;
  if (!pixelBuffer || (uint64_t v3 = imageOut) == 0)
  {
    OSStatus v40 = FigSignalErrorAt();
    CFTypeRef v11 = 0;
    unsigned int v25 = 0;
    goto LABEL_78;
  }
  uint64_t v5 = pixelBuffer;
  if (!options)
  {
    int v44 = 0;
    int v7 = 1;
LABEL_14:
    int v10 = 1;
    goto LABEL_15;
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(options, @"DeferFormatConversion");
  if (Value) {
    int v7 = CFBooleanGetValue(Value);
  }
  else {
    int v7 = 1;
  }
  CFBooleanRef v8 = (const __CFBoolean *)CFDictionaryGetValue(options, @"ForceImmediateFormatConversion");
  if (v8)
  {
    int v44 = CFBooleanGetValue(v8);
    if (v44) {
      int v7 = 0;
    }
  }
  else
  {
    int v44 = 0;
  }
  CFBooleanRef v9 = (const __CFBoolean *)CFDictionaryGetValue(options, @"PrefersStandardDynamicRange");
  if (!v9) {
    goto LABEL_14;
  }
  int v10 = CFBooleanGetValue(v9);
LABEL_15:
  size_t Width = CVPixelBufferGetWidth(v5);
  size_t Height = CVPixelBufferGetHeight(v5);
  CFTypeRef v11 = CVBufferCopyAttachment(v5, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
  if (v10 != 1 || !FigCFEqual() && !FigCFEqual())
  {
    ColorSpace = CVImageBufferGetColorSpace(v5);
    CFTypeRef v26 = CVBufferCopyAttachment(v5, (CFStringRef)*MEMORY[0x1E4F24A90], 0);
    if (FigCFEqual())
    {
      ColorSpace = createAppleP3ColorSpace();
      unsigned int v25 = ColorSpace;
      if (!v26) {
        goto LABEL_40;
      }
    }
    else
    {
      unsigned int v25 = 0;
      if (!v26)
      {
LABEL_40:
        CVPixelBufferRef v23 = 0;
        if (ColorSpace) {
          goto LABEL_46;
        }
        goto LABEL_41;
      }
    }
    CFRelease(v26);
    goto LABEL_40;
  }
  VTPixelTransferSessionRef pixelTransferSessionOut = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAllocatorRef v43 = v3;
  if (VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &pixelTransferSessionOut))
  {
    CFTypeRef v20 = 0;
    CFTypeRef v21 = 0;
    goto LABEL_27;
  }
  int v13 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  unsigned int v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v12, 0, v13, v14);
  int v17 = v16;
  if (Mutable && v16)
  {
    size_t v18 = CVPixelBufferGetWidth(v5);
    size_t v19 = CVPixelBufferGetHeight(v5);
    CVPixelBufferGetPixelFormatType(v5);
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    CFDictionarySetValue(v17, (const void *)*MEMORY[0x1E4F24D20], Mutable);
    CFTypeRef v20 = CVBufferCopyAttachment(v5, (CFStringRef)*MEMORY[0x1E4F24A90], 0);
    CFTypeRef v21 = CVBufferCopyAttachment(v5, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
    VTSessionSetProperty(pixelTransferSessionOut, @"DestinationColorPrimaries", v20);
    VTSessionSetProperty(pixelTransferSessionOut, @"DestinationTransferFunction", (CFTypeRef)*MEMORY[0x1E4F24BE0]);
    VTSessionSetProperty(pixelTransferSessionOut, @"DestinationYCbCrMatrix", v21);
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v5);
    if (!CVPixelBufferCreate(v12, v18, v19, PixelFormatType, v17, &pixelBufferOut)
      && !VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v5, pixelBufferOut))
    {
      VTPixelTransferSessionInvalidate(pixelTransferSessionOut);
    }
    goto LABEL_24;
  }
  CFTypeRef v21 = 0;
  CFTypeRef v20 = 0;
  if (Mutable) {
LABEL_24:
  }
    CFRelease(Mutable);
  if (v17) {
    CFRelease(v17);
  }
LABEL_27:
  if (pixelTransferSessionOut) {
    CFRelease(pixelTransferSessionOut);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v21) {
    CFRelease(v21);
  }
  CVPixelBufferRef v23 = pixelBufferOut;
  if (pixelBufferOut) {
    uint64_t v5 = pixelBufferOut;
  }
  ColorSpace = CVImageBufferGetColorSpace(v5);
  unsigned int v25 = 0;
  uint64_t v3 = v43;
  if (!ColorSpace)
  {
LABEL_41:
    CFDictionaryRef v27 = CVBufferCopyAttachments(v5, kCVAttachmentMode_ShouldPropagate);
    if (v27)
    {
      CFDictionaryRef v28 = v27;
      ColorSpace = CVImageBufferCreateColorSpaceFromAttachments(v27);
      CFRelease(v28);
      unsigned int v25 = ColorSpace;
    }
    else
    {
      ColorSpace = 0;
    }
  }
LABEL_46:
  OSType v29 = CVPixelBufferGetPixelFormatType(v5);
  if (vtcg_bufferContainsAlpha(v29))
  {
    CFTypeRef v30 = CVBufferCopyAttachment(v5, (CFStringRef)*MEMORY[0x1E4F249D0], 0);
    if (FigCFEqual())
    {
      int v31 = 0;
      if (!v30) {
        goto LABEL_58;
      }
      goto LABEL_57;
    }
    CFTypeRef v42 = v11;
    int v32 = v7;
    uint64_t v33 = v3;
    CFTypeRef v34 = CVBufferCopyAttachment(v5, (CFStringRef)*MEMORY[0x1E4F249D8], 0);
    if (FigCFEqual()) {
      int v31 = 1;
    }
    else {
      int v31 = 2;
    }
    if (v34) {
      CFRelease(v34);
    }
    uint64_t v3 = v33;
    int v7 = v32;
    CFTypeRef v11 = v42;
    if (v30) {
LABEL_57:
    }
      CFRelease(v30);
  }
  else
  {
    int v31 = 0;
  }
LABEL_58:
  if (!v7)
  {
    BOOL v35 = v29 == 1111970369 || v29 == 32;
    BOOL v36 = v35 || v29 == 1380411457;
    BOOL v37 = v36;
    if (v44 || !v37)
    {
      vtcg_createCGCompatiblePixelBuffer(v5, 0, (CVPixelBufferRef *)&cf);
      if (!cf)
      {
        OSStatus v38 = FigSignalErrorAt();
        goto LABEL_90;
      }
      OSStatus v38 = vtcg_convertPixelBuffer(v5, (__CVBuffer *)cf);
      if (v38) {
        goto LABEL_90;
      }
      uint64_t v5 = (__CVBuffer *)cf;
    }
  }
  OSStatus v38 = vtcg_createDeferredImageProviderWithPixelBuffer(v5, (OSType *)&v51, &v50, &provider);
  if (!v38)
  {
    IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(v5);
    OSStatus v40 = vtcg_createCGImageWithProvider(provider, v51, Width, Height, v50, v31, 0, (uint64_t)IOSurface, ColorSpace, &image);
    if (!v40)
    {
      *uint64_t v3 = image;
      CGImageRef image = 0;
    }
    if (v23) {
      goto LABEL_77;
    }
    goto LABEL_78;
  }
LABEL_90:
  OSStatus v40 = v38;
  if (v23) {
LABEL_77:
  }
    CFRelease(v23);
LABEL_78:
  CGImageRelease(image);
  CGDataProviderRelease(provider);
  if (cf) {
    CFRelease(cf);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v40;
}

CGColorSpaceRef createAppleP3ColorSpace()
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  long long v15 = xmmword_193E809D0;
  long long v16 = unk_193E809E0;
  long long v17 = xmmword_193E809F0;
  long long v18 = unk_193E80A00;
  uint64_t valuePtr = 0x3FFF604189374BC7;
  keys[3] = *(_OWORD *)&off_1E57861C0;
  keys[4] = xmmword_1E57861D0;
  keys[5] = *(_OWORD *)&off_1E57861E0;
  keys[6] = xmmword_1E57861F0;
  keys[1] = *(_OWORD *)&off_1E57861A0;
  keys[2] = xmmword_1E57861B0;
  long long v25 = 0u;
  keys[0] = xmmword_1E5786190;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  *(_OWORD *)values = 0u;
  long long v20 = 0u;
  if (!MEMORY[0x1E4F1A680])
  {
    CGColorSpaceRef v9 = 0;
    CFDictionaryRef v0 = 0;
LABEL_27:
    CFDictionaryRef v2 = 0;
LABEL_29:
    CFTypeRef v4 = 0;
    goto LABEL_31;
  }
  values[0] = (void *)CFRetain(@"displayRGB");
  values[1] = (void *)CFRetain(@"Apple P3");
  *(void *)&long long v20 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *((void *)&v20 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *(void *)&long long v21 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *((void *)&v21 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &v17);
  *(void *)&long long v22 = CFNumberCreate(0, kCFNumberDoubleType, (char *)&v17 + 8);
  *((void *)&v22 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &v15);
  *(void *)&long long v23 = CFNumberCreate(0, kCFNumberDoubleType, (char *)&v15 + 8);
  *((void *)&v23 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &v16);
  *(void *)&long long v24 = CFNumberCreate(0, kCFNumberDoubleType, (char *)&v16 + 8);
  *((void *)&v24 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &v18);
  *(void *)&long long v25 = CFNumberCreate(0, kCFNumberDoubleType, (char *)&v18 + 8);
  *((void *)&v25 + 1) = CFStringCreateWithCString(0, "Copyright 2007 Apple Inc.", 0);
  CFDictionaryRef v0 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 14, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v0)
  {
    CGColorSpaceRef v9 = 0;
    goto LABEL_27;
  }
  Profile = (const ColorSyncProfile *)ColorSyncMakeProfile();
  CFDictionaryRef v2 = Profile;
  if (!Profile)
  {
    CGColorSpaceRef v9 = 0;
    goto LABEL_29;
  }
  CFMutableDictionaryRef MutableCopy = ColorSyncProfileCreateMutableCopy(Profile);
  CFTypeRef v4 = MutableCopy;
  if (MutableCopy)
  {
    CFDataRef v5 = ColorSyncProfileCopyHeader(MutableCopy);
    if (v5)
    {
      CFArrayRef v6 = CFDataCreateMutableCopy(0, 128, v5);
      CFDataRef v7 = v6;
      if (v6 && (CFDataSetLength(v6, 128), (MutableBytePtr = CFDataGetMutableBytePtr(v7)) != 0))
      {
        *((void *)MutableBytePtr + 3) = 0x10001000407D5;
        *((_DWORD *)MutableBytePtr + 8) = 65537;
        ColorSyncProfileSetHeader(v4, v7);
        CGColorSpaceRef v9 = CGColorSpaceCreateWithPlatformColorSpace(v4);
      }
      else
      {
        CGColorSpaceRef v9 = 0;
      }
    }
    else
    {
      CGColorSpaceRef v9 = 0;
      CFDataRef v7 = 0;
    }
    goto LABEL_9;
  }
  CGColorSpaceRef v9 = 0;
LABEL_31:
  CFDataRef v7 = 0;
  CFDataRef v5 = 0;
LABEL_9:
  uint64_t v10 = 13;
  do
  {
    CFTypeRef v11 = values[v10];
    if (v11) {
      CFRelease(v11);
    }
    unint64_t v12 = v10-- + 1;
  }
  while (v12 > 1);
  if (v0) {
    CFRelease(v0);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v9;
}

BOOL vtcg_bufferContainsAlpha(OSType pixelFormat)
{
  CMTime value = 0;
  if ((vtcg_bufferContainsAlpha_sDidCheck & 1) == 0)
  {
    AppBooleanCFBooleanRef Value = CFPreferencesGetAppBooleanValue(@"force_cgimage_opaque", @"com.apple.coremedia", 0);
    vtcg_bufferContainsAlpha_sForceOpaque = AppBooleanValue;
    vtcg_bufferContainsAlpha_sDidCheck = 1;
    if (!AppBooleanValue) {
      goto LABEL_5;
    }
    return 0;
  }
  if (vtcg_bufferContainsAlpha_sForceOpaque) {
    return 0;
  }
LABEL_5:
  CFDictionaryRef v3 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E4F1CF80], pixelFormat);
  if (!v3) {
    return 0;
  }
  CFDictionaryRef v4 = v3;
  if (CFDictionaryGetValueIfPresent(v3, (const void *)*MEMORY[0x1E4F24E98], (const void **)&value)) {
    BOOL v5 = CFEqual(value, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
  }
  else {
    BOOL v5 = 0;
  }
  CFRelease(v4);
  return v5;
}

uint64_t vtcg_createDeferredImageProviderWithPixelBuffer(__CVBuffer *a1, OSType *a2, size_t *a3, CGDataProviderRef *a4)
{
  CGDataProviderDirectCallbacks v20 = *(CGDataProviderDirectCallbacks *)byte_1EE4EE460;
  if (a1
    && a4
    && (size_t Width = CVPixelBufferGetWidth(a1)) != 0
    && (uint64_t v9 = Width, (Height = CVPixelBufferGetHeight(a1)) != 0)
    && (size_t v11 = Height,
        OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1),
        OSType CGCompatiblePixelFormat = vtcg_getCGCompatiblePixelFormat(a1),
        VTPixelTransferSessionCanTransfer(PixelFormatType, CGCompatiblePixelFormat, 0))
    && (unsigned int v14 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x18uLL, 0x102004062D53EE8uLL)) != 0)
  {
    long long v15 = v14;
    if (PixelFormatType == 32 || PixelFormatType == 1111970369 || PixelFormatType == 1380411457)
    {
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      v15[1] = CFRetain(a1);
    }
    else
    {
      size_t BytesPerRow = calculateBytesPerRow(CGCompatiblePixelFormat, v9);
      *long long v15 = CFRetain(a1);
    }
    v15[2] = (CFTypeRef)BytesPerRow;
    CGDataProviderRef v17 = CGDataProviderCreateDirect(v15, BytesPerRow * v11, &v20);
    if (v17)
    {
      if (a2) {
        *a2 = CGCompatiblePixelFormat;
      }
      if (a3) {
        *a3 = BytesPerRow;
      }
      uint64_t v18 = 0;
      *a4 = v17;
    }
    else
    {
      uint64_t v18 = FigSignalErrorAt();
      _releaseInfoFromPixelBuffer(v15);
    }
  }
  else
  {
    uint64_t v18 = FigSignalErrorAt();
  }
  CGDataProviderRelease(0);
  return v18;
}

uint64_t vtcg_createCGCompatiblePixelBuffer(__CVBuffer *a1, unint64_t a2, CVPixelBufferRef *a3)
{
  CFDictionaryRef pixelBufferAttributes = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  size_t Width = CVPixelBufferGetWidth(a1);
  if (!Width)
  {
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_15;
  }
  size_t v7 = Width;
  size_t Height = CVPixelBufferGetHeight(a1);
  if (!Height || !a3) {
    goto LABEL_18;
  }
  size_t v9 = Height;
  int CGCompatiblePixelFormat = vtcg_getCGCompatiblePixelFormat(a1);
  OSType v11 = CGCompatiblePixelFormat;
  if (!a2) {
    a2 = calculateBytesPerRow(CGCompatiblePixelFormat, v7);
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v13 = Mutable;
    uint64_t v14 = FigCFDictionarySetInt32();
    if (!v14) {
      uint64_t v14 = FigCreatePixelBufferAttributesWithIOSurfaceSupport(v13, 2, &pixelBufferAttributes);
    }
    uint64_t v15 = v14;
    CFRelease(v13);
    if (v15) {
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  uint64_t v15 = FigSignalErrorAt();
  if (!v15)
  {
LABEL_10:
    uint64_t v16 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v7, v9, v11, pixelBufferAttributes, &pixelBufferOut);
    if (v16)
    {
LABEL_19:
      uint64_t v15 = v16;
      goto LABEL_13;
    }
    if (CVPixelBufferGetBytesPerRow(pixelBufferOut) == a2)
    {
      uint64_t v15 = 0;
      *a3 = pixelBufferOut;
      CVPixelBufferRef pixelBufferOut = 0;
      goto LABEL_13;
    }
LABEL_18:
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_19;
  }
LABEL_13:
  if (pixelBufferAttributes) {
    CFRelease(pixelBufferAttributes);
  }
LABEL_15:
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  return v15;
}

uint64_t vtcg_convertPixelBuffer(__CVBuffer *a1, __CVBuffer *a2)
{
  VTPixelTransferSessionRef pixelTransferSessionOut = 0;
  if (a1 && a2)
  {
    uint64_t v4 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &pixelTransferSessionOut);
    VTPixelTransferSessionRef v5 = pixelTransferSessionOut;
    if (!v4)
    {
      uint64_t v4 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, a1, a2);
      VTPixelTransferSessionRef v5 = pixelTransferSessionOut;
    }
    if (v5) {
      CFRelease(v5);
    }
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t vtcg_createCGImageWithProvider(CGDataProvider *a1, int a2, size_t a3, size_t a4, size_t a5, int a6, uint64_t a7, uint64_t a8, CGColorSpace *a9, CGImageRef *a10)
{
  if (!a1 || !a2 || !a3 || !a4 || !a5 || !a10)
  {
    uint64_t v26 = FigSignalErrorAt();
    DeviceRGB = 0;
    goto LABEL_32;
  }
  uint64_t v14 = a9;
  uint64_t v15 = 8;
  if (a2 == 1380411457) {
    uint64_t v15 = 16;
  }
  size_t bitsPerComponent = v15;
  if (a2 == 1380411457) {
    size_t v16 = 64;
  }
  else {
    size_t v16 = 32;
  }
  if (a7)
  {
    uint64_t v17 = a8;
    CGBitmapInfo UInt32 = FigCFNumberGetUInt32();
    if (a9)
    {
LABEL_14:
      DeviceRGB = 0;
      goto LABEL_28;
    }
  }
  else
  {
    if (a2 == 32) {
      int v20 = 0x4000;
    }
    else {
      int v20 = 0x2000;
    }
    uint64_t v17 = a8;
    if (a6 == 2)
    {
      int v21 = v20 | 2;
      BOOL v22 = a2 == 1380411457;
      int v23 = 4353;
    }
    else if (a6 == 1)
    {
      int v21 = v20 | 4;
      BOOL v22 = a2 == 1380411457;
      int v23 = 4355;
    }
    else
    {
      int v21 = v20 | 6;
      BOOL v22 = a2 == 1380411457;
      int v23 = 4357;
    }
    if (v22) {
      CGBitmapInfo UInt32 = v23;
    }
    else {
      CGBitmapInfo UInt32 = v21;
    }
    if (a9) {
      goto LABEL_14;
    }
  }
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  uint64_t v14 = DeviceRGB;
  if (!DeviceRGB)
  {
LABEL_34:
    uint64_t v26 = FigSignalErrorAt();
    goto LABEL_32;
  }
LABEL_28:
  CGImageRef v24 = CGImageCreate(a3, a4, bitsPerComponent, v16, a5, v14, UInt32, a1, 0, 1, kCGRenderingIntentPerceptual);
  if (!v24) {
    goto LABEL_34;
  }
  CGImageRef v25 = v24;
  if (v17) {
    CGImageSetProperty();
  }
  uint64_t v26 = 0;
  *a10 = v25;
LABEL_32:
  CGColorSpaceRelease(DeviceRGB);
  return v26;
}

uint64_t VTCreateCGImageFromIOSurfaceAndAttributes(__IOSurface *a1, const __CFDictionary *a2, int a3, uint64_t a4, void *a5)
{
  v30[0] = 0;
  CGDataProviderRef v28 = 0;
  size_t v29 = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  CGImageRef v27 = 0;
  CVPixelBufferRef v24 = 0;
  CVPixelBufferRef v25 = 0;
  if (a1 && a5)
  {
    IOSurfaceRef IOSurface = a1;
    size_t Width = IOSurfaceGetWidth(a1);
    size_t Height = IOSurfaceGetHeight(IOSurface);
    if (!a2) {
      goto LABEL_10;
    }
    CFBooleanRef Value = (CGColorSpace *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F24A00]);
    if (Value)
    {
      ColorSpaceFromAttachments = Value;
LABEL_6:
      CFMutableDictionaryRef v13 = 0;
      goto LABEL_11;
    }
    CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F24A90]);
    if (!FigCFEqual()
      || (ColorSpaceFromAttachments = createAppleP3ColorSpace(), (CFMutableDictionaryRef v13 = ColorSpaceFromAttachments) == 0))
    {
      ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(a2);
      CFMutableDictionaryRef v13 = ColorSpaceFromAttachments;
      if (!ColorSpaceFromAttachments)
      {
LABEL_10:
        ColorSpaceFromAttachments = (CGColorSpace *)IOSurfaceCopyValue(IOSurface, (CFStringRef)*MEMORY[0x1E4F2F068]);
        CFMutableDictionaryRef v13 = ColorSpaceFromAttachments;
        if (ColorSpaceFromAttachments) {
          goto LABEL_11;
        }
        CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E4F1CF80], IOSurface, 0, &pixelBufferOut);
        if (!pixelBufferOut)
        {
          ColorSpaceFromAttachments = 0;
          goto LABEL_6;
        }
        CFDictionaryRef v21 = CVBufferCopyAttachments(pixelBufferOut, kCVAttachmentMode_ShouldPropagate);
        CFMutableDictionaryRef v13 = v21;
        if (v21)
        {
          ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(v21);
          CFRelease(v13);
          CFMutableDictionaryRef v13 = ColorSpaceFromAttachments;
        }
        else
        {
          ColorSpaceFromAttachments = 0;
        }
      }
    }
LABEL_11:
    OSType PixelFormat = IOSurfaceGetPixelFormat(IOSurface);
    OSType v15 = PixelFormat;
    if (a4 || !vtcg_bufferContainsAlpha(PixelFormat))
    {
      int v16 = 0;
      if (a3) {
        goto LABEL_19;
      }
    }
    else
    {
      IOSurfaceGetBulkAttachments();
      int v16 = 2;
      if (a3) {
        goto LABEL_19;
      }
    }
    if (v15 != 32 && v15 != 1111970369 && v15 != 1380411457)
    {
      uint64_t v22 = CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E4F1CF80], IOSurface, a2, &v25);
      if (!v22)
      {
        vtcg_createCGCompatiblePixelBuffer(v25, 0, &v24);
        if (v24)
        {
          uint64_t v22 = vtcg_convertPixelBuffer(v25, v24);
          if (!v22)
          {
            IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(v24);
            uint64_t v17 = vtcg_createDeferredImageProviderWithPixelBuffer(v24, v30, &v29, &v28);
LABEL_20:
            uint64_t v18 = v17;
            if (!v17)
            {
              uint64_t v18 = vtcg_createCGImageWithProvider(v28, v30[0], Width, Height, v29, v16, a4, (uint64_t)IOSurface, ColorSpaceFromAttachments, &v27);
              size_t v19 = v27;
              if (v18) {
                goto LABEL_24;
              }
              *a5 = v27;
              CGImageRef v27 = 0;
            }
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v22 = FigSignalErrorAt();
        }
      }
      uint64_t v18 = v22;
LABEL_23:
      size_t v19 = 0;
      goto LABEL_24;
    }
LABEL_19:
    uint64_t v17 = vtcg_createDeferredImageProviderWithIOSurface(IOSurface, a2, v30, &v29, &v28);
    goto LABEL_20;
  }
  uint64_t v18 = FigSignalErrorAt();
  size_t v19 = 0;
  CFMutableDictionaryRef v13 = 0;
LABEL_24:
  CGImageRelease(v19);
  if (v25) {
    CFRelease(v25);
  }
  if (v24) {
    CFRelease(v24);
  }
  CGDataProviderRelease(v28);
  if (v13) {
    CFRelease(v13);
  }
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  return v18;
}